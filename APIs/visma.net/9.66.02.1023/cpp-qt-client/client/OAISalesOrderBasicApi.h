/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISalesOrderBasicApi_H
#define OAI_OAISalesOrderBasicApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAICreateShipmentActionDto.h"
#include "OAICreateShipmentActionResultDto.h"
#include "OAIObject.h"
#include "OAISalesOrderBasicDto.h"
#include "OAISalesOrderBasicUpdateDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISalesOrderBasicApi : public QObject {
    Q_OBJECT

public:
    OAISalesOrderBasicApi(const int timeOut = 0);
    ~OAISalesOrderBasicApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  order_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    Q_DECL_DEPRECATED virtual void salesOrderBasicCreateHeaderAttachmentByorderNumber(const QString &order_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_number QString [required]
    * @param[in]  order_type QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderBasicCreateHeaderAttachmentByorderNumberorderType(const QString &order_number, const QString &order_type, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_number QString [required]
    * @param[in]  line_number qint32 [required]
    * @param[in]  erp_api_background QString [optional]
    */
    Q_DECL_DEPRECATED virtual void salesOrderBasicCreateLineAttachmentByorderNumberlineNumber(const QString &order_number, const qint32 &line_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_number QString [required]
    * @param[in]  order_type QString [required]
    * @param[in]  line_number qint32 [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderBasicCreateLineAttachmentByorderNumberorderTypelineNumber(const QString &order_number, const QString &order_type, const qint32 &line_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sale_order_number QString [required]
    * @param[in]  oai_create_shipment_action_dto OAICreateShipmentActionDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderBasicCreateShipmentActionBysaleOrderNumber(const QString &sale_order_number, const OAICreateShipmentActionDto &oai_create_shipment_action_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_type QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  show_notes bool [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderBasicGetAllOrders(const ::OpenAPI::OptionalParam<QString> &order_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_notes = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_nbr QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderBasicGetByorderNbr(const QString &order_nbr, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_type QString [required]
    * @param[in]  order_nbr QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderBasicGetOrderByTypeByorderTypeorderNbr(const QString &order_type, const QString &order_nbr, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_sales_order_basic_update_dto OAISalesOrderBasicUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderBasicPost(const OAISalesOrderBasicUpdateDto &oai_sales_order_basic_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_nbr QString [required]
    * @param[in]  oai_sales_order_basic_update_dto OAISalesOrderBasicUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderBasicPutByorderNbr(const QString &order_nbr, const OAISalesOrderBasicUpdateDto &oai_sales_order_basic_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void salesOrderBasicCreateHeaderAttachmentByorderNumberCallback(OAIHttpRequestWorker *worker);
    void salesOrderBasicCreateHeaderAttachmentByorderNumberorderTypeCallback(OAIHttpRequestWorker *worker);
    void salesOrderBasicCreateLineAttachmentByorderNumberlineNumberCallback(OAIHttpRequestWorker *worker);
    void salesOrderBasicCreateLineAttachmentByorderNumberorderTypelineNumberCallback(OAIHttpRequestWorker *worker);
    void salesOrderBasicCreateShipmentActionBysaleOrderNumberCallback(OAIHttpRequestWorker *worker);
    void salesOrderBasicGetAllOrdersCallback(OAIHttpRequestWorker *worker);
    void salesOrderBasicGetByorderNbrCallback(OAIHttpRequestWorker *worker);
    void salesOrderBasicGetOrderByTypeByorderTypeorderNbrCallback(OAIHttpRequestWorker *worker);
    void salesOrderBasicPostCallback(OAIHttpRequestWorker *worker);
    void salesOrderBasicPutByorderNbrCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void salesOrderBasicCreateHeaderAttachmentByorderNumberSignal(OAIObject summary);
    void salesOrderBasicCreateHeaderAttachmentByorderNumberorderTypeSignal(OAIObject summary);
    void salesOrderBasicCreateLineAttachmentByorderNumberlineNumberSignal(OAIObject summary);
    void salesOrderBasicCreateLineAttachmentByorderNumberorderTypelineNumberSignal(OAIObject summary);
    void salesOrderBasicCreateShipmentActionBysaleOrderNumberSignal(OAICreateShipmentActionResultDto summary);
    void salesOrderBasicGetAllOrdersSignal(QList<OAISalesOrderBasicDto> summary);
    void salesOrderBasicGetByorderNbrSignal(OAISalesOrderBasicDto summary);
    void salesOrderBasicGetOrderByTypeByorderTypeorderNbrSignal(OAISalesOrderBasicDto summary);
    void salesOrderBasicPostSignal(OAIObject summary);
    void salesOrderBasicPutByorderNbrSignal(OAIBackgroundApiAcceptedDto summary);


    void salesOrderBasicCreateHeaderAttachmentByorderNumberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesOrderBasicCreateHeaderAttachmentByorderNumberorderTypeSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesOrderBasicCreateLineAttachmentByorderNumberlineNumberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesOrderBasicCreateLineAttachmentByorderNumberorderTypelineNumberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesOrderBasicCreateShipmentActionBysaleOrderNumberSignalFull(OAIHttpRequestWorker *worker, OAICreateShipmentActionResultDto summary);
    void salesOrderBasicGetAllOrdersSignalFull(OAIHttpRequestWorker *worker, QList<OAISalesOrderBasicDto> summary);
    void salesOrderBasicGetByorderNbrSignalFull(OAIHttpRequestWorker *worker, OAISalesOrderBasicDto summary);
    void salesOrderBasicGetOrderByTypeByorderTypeorderNbrSignalFull(OAIHttpRequestWorker *worker, OAISalesOrderBasicDto summary);
    void salesOrderBasicPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesOrderBasicPutByorderNbrSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);

    Q_DECL_DEPRECATED_X("Use salesOrderBasicCreateHeaderAttachmentByorderNumberSignalError() instead")
    void salesOrderBasicCreateHeaderAttachmentByorderNumberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicCreateHeaderAttachmentByorderNumberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicCreateHeaderAttachmentByorderNumberorderTypeSignalError() instead")
    void salesOrderBasicCreateHeaderAttachmentByorderNumberorderTypeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicCreateHeaderAttachmentByorderNumberorderTypeSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicCreateLineAttachmentByorderNumberlineNumberSignalError() instead")
    void salesOrderBasicCreateLineAttachmentByorderNumberlineNumberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicCreateLineAttachmentByorderNumberlineNumberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicCreateLineAttachmentByorderNumberorderTypelineNumberSignalError() instead")
    void salesOrderBasicCreateLineAttachmentByorderNumberorderTypelineNumberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicCreateLineAttachmentByorderNumberorderTypelineNumberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicCreateShipmentActionBysaleOrderNumberSignalError() instead")
    void salesOrderBasicCreateShipmentActionBysaleOrderNumberSignalE(OAICreateShipmentActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicCreateShipmentActionBysaleOrderNumberSignalError(OAICreateShipmentActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicGetAllOrdersSignalError() instead")
    void salesOrderBasicGetAllOrdersSignalE(QList<OAISalesOrderBasicDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicGetAllOrdersSignalError(QList<OAISalesOrderBasicDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicGetByorderNbrSignalError() instead")
    void salesOrderBasicGetByorderNbrSignalE(OAISalesOrderBasicDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicGetByorderNbrSignalError(OAISalesOrderBasicDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicGetOrderByTypeByorderTypeorderNbrSignalError() instead")
    void salesOrderBasicGetOrderByTypeByorderTypeorderNbrSignalE(OAISalesOrderBasicDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicGetOrderByTypeByorderTypeorderNbrSignalError(OAISalesOrderBasicDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicPostSignalError() instead")
    void salesOrderBasicPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicPutByorderNbrSignalError() instead")
    void salesOrderBasicPutByorderNbrSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicPutByorderNbrSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use salesOrderBasicCreateHeaderAttachmentByorderNumberSignalErrorFull() instead")
    void salesOrderBasicCreateHeaderAttachmentByorderNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicCreateHeaderAttachmentByorderNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicCreateHeaderAttachmentByorderNumberorderTypeSignalErrorFull() instead")
    void salesOrderBasicCreateHeaderAttachmentByorderNumberorderTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicCreateHeaderAttachmentByorderNumberorderTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicCreateLineAttachmentByorderNumberlineNumberSignalErrorFull() instead")
    void salesOrderBasicCreateLineAttachmentByorderNumberlineNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicCreateLineAttachmentByorderNumberlineNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicCreateLineAttachmentByorderNumberorderTypelineNumberSignalErrorFull() instead")
    void salesOrderBasicCreateLineAttachmentByorderNumberorderTypelineNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicCreateLineAttachmentByorderNumberorderTypelineNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicCreateShipmentActionBysaleOrderNumberSignalErrorFull() instead")
    void salesOrderBasicCreateShipmentActionBysaleOrderNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicCreateShipmentActionBysaleOrderNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicGetAllOrdersSignalErrorFull() instead")
    void salesOrderBasicGetAllOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicGetAllOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicGetByorderNbrSignalErrorFull() instead")
    void salesOrderBasicGetByorderNbrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicGetByorderNbrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicGetOrderByTypeByorderTypeorderNbrSignalErrorFull() instead")
    void salesOrderBasicGetOrderByTypeByorderTypeorderNbrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicGetOrderByTypeByorderTypeorderNbrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicPostSignalErrorFull() instead")
    void salesOrderBasicPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicPutByorderNbrSignalErrorFull() instead")
    void salesOrderBasicPutByorderNbrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicPutByorderNbrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
