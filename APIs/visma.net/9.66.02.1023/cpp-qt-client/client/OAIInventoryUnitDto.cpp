/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryUnitDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryUnitDto::OAIInventoryUnitDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryUnitDto::OAIInventoryUnitDto() {
    this->initializeModel();
}

OAIInventoryUnitDto::~OAIInventoryUnitDto() {}

void OAIInventoryUnitDto::initializeModel() {

    m_from_unit_isSet = false;
    m_from_unit_isValid = false;

    m_inventory_id_isSet = false;
    m_inventory_id_isValid = false;

    m_item_class_isSet = false;
    m_item_class_isValid = false;

    m_price_adjustment_multiplier_isSet = false;
    m_price_adjustment_multiplier_isValid = false;

    m_record_id_isSet = false;
    m_record_id_isValid = false;

    m_sample_to_unit_isSet = false;
    m_sample_to_unit_isValid = false;

    m_to_unit_isSet = false;
    m_to_unit_isValid = false;

    m_unit_mult_div_isSet = false;
    m_unit_mult_div_isValid = false;

    m_unit_rate_isSet = false;
    m_unit_rate_isValid = false;

    m_unit_type_isSet = false;
    m_unit_type_isValid = false;
}

void OAIInventoryUnitDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryUnitDto::fromJsonObject(QJsonObject json) {

    m_from_unit_isValid = ::OpenAPI::fromJsonValue(m_from_unit, json[QString("fromUnit")]);
    m_from_unit_isSet = !json[QString("fromUnit")].isNull() && m_from_unit_isValid;

    m_inventory_id_isValid = ::OpenAPI::fromJsonValue(m_inventory_id, json[QString("inventoryID")]);
    m_inventory_id_isSet = !json[QString("inventoryID")].isNull() && m_inventory_id_isValid;

    m_item_class_isValid = ::OpenAPI::fromJsonValue(m_item_class, json[QString("itemClass")]);
    m_item_class_isSet = !json[QString("itemClass")].isNull() && m_item_class_isValid;

    m_price_adjustment_multiplier_isValid = ::OpenAPI::fromJsonValue(m_price_adjustment_multiplier, json[QString("priceAdjustmentMultiplier")]);
    m_price_adjustment_multiplier_isSet = !json[QString("priceAdjustmentMultiplier")].isNull() && m_price_adjustment_multiplier_isValid;

    m_record_id_isValid = ::OpenAPI::fromJsonValue(m_record_id, json[QString("recordID")]);
    m_record_id_isSet = !json[QString("recordID")].isNull() && m_record_id_isValid;

    m_sample_to_unit_isValid = ::OpenAPI::fromJsonValue(m_sample_to_unit, json[QString("sampleToUnit")]);
    m_sample_to_unit_isSet = !json[QString("sampleToUnit")].isNull() && m_sample_to_unit_isValid;

    m_to_unit_isValid = ::OpenAPI::fromJsonValue(m_to_unit, json[QString("toUnit")]);
    m_to_unit_isSet = !json[QString("toUnit")].isNull() && m_to_unit_isValid;

    m_unit_mult_div_isValid = ::OpenAPI::fromJsonValue(m_unit_mult_div, json[QString("unitMultDiv")]);
    m_unit_mult_div_isSet = !json[QString("unitMultDiv")].isNull() && m_unit_mult_div_isValid;

    m_unit_rate_isValid = ::OpenAPI::fromJsonValue(m_unit_rate, json[QString("unitRate")]);
    m_unit_rate_isSet = !json[QString("unitRate")].isNull() && m_unit_rate_isValid;

    m_unit_type_isValid = ::OpenAPI::fromJsonValue(m_unit_type, json[QString("unitType")]);
    m_unit_type_isSet = !json[QString("unitType")].isNull() && m_unit_type_isValid;
}

QString OAIInventoryUnitDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryUnitDto::asJsonObject() const {
    QJsonObject obj;
    if (m_from_unit_isSet) {
        obj.insert(QString("fromUnit"), ::OpenAPI::toJsonValue(m_from_unit));
    }
    if (m_inventory_id_isSet) {
        obj.insert(QString("inventoryID"), ::OpenAPI::toJsonValue(m_inventory_id));
    }
    if (m_item_class.isSet()) {
        obj.insert(QString("itemClass"), ::OpenAPI::toJsonValue(m_item_class));
    }
    if (m_price_adjustment_multiplier_isSet) {
        obj.insert(QString("priceAdjustmentMultiplier"), ::OpenAPI::toJsonValue(m_price_adjustment_multiplier));
    }
    if (m_record_id_isSet) {
        obj.insert(QString("recordID"), ::OpenAPI::toJsonValue(m_record_id));
    }
    if (m_sample_to_unit_isSet) {
        obj.insert(QString("sampleToUnit"), ::OpenAPI::toJsonValue(m_sample_to_unit));
    }
    if (m_to_unit_isSet) {
        obj.insert(QString("toUnit"), ::OpenAPI::toJsonValue(m_to_unit));
    }
    if (m_unit_mult_div_isSet) {
        obj.insert(QString("unitMultDiv"), ::OpenAPI::toJsonValue(m_unit_mult_div));
    }
    if (m_unit_rate_isSet) {
        obj.insert(QString("unitRate"), ::OpenAPI::toJsonValue(m_unit_rate));
    }
    if (m_unit_type_isSet) {
        obj.insert(QString("unitType"), ::OpenAPI::toJsonValue(m_unit_type));
    }
    return obj;
}

QString OAIInventoryUnitDto::getFromUnit() const {
    return m_from_unit;
}
void OAIInventoryUnitDto::setFromUnit(const QString &from_unit) {
    m_from_unit = from_unit;
    m_from_unit_isSet = true;
}

bool OAIInventoryUnitDto::is_from_unit_Set() const{
    return m_from_unit_isSet;
}

bool OAIInventoryUnitDto::is_from_unit_Valid() const{
    return m_from_unit_isValid;
}

qint32 OAIInventoryUnitDto::getInventoryId() const {
    return m_inventory_id;
}
void OAIInventoryUnitDto::setInventoryId(const qint32 &inventory_id) {
    m_inventory_id = inventory_id;
    m_inventory_id_isSet = true;
}

bool OAIInventoryUnitDto::is_inventory_id_Set() const{
    return m_inventory_id_isSet;
}

bool OAIInventoryUnitDto::is_inventory_id_Valid() const{
    return m_inventory_id_isValid;
}

OAIItemClassDto OAIInventoryUnitDto::getItemClass() const {
    return m_item_class;
}
void OAIInventoryUnitDto::setItemClass(const OAIItemClassDto &item_class) {
    m_item_class = item_class;
    m_item_class_isSet = true;
}

bool OAIInventoryUnitDto::is_item_class_Set() const{
    return m_item_class_isSet;
}

bool OAIInventoryUnitDto::is_item_class_Valid() const{
    return m_item_class_isValid;
}

double OAIInventoryUnitDto::getPriceAdjustmentMultiplier() const {
    return m_price_adjustment_multiplier;
}
void OAIInventoryUnitDto::setPriceAdjustmentMultiplier(const double &price_adjustment_multiplier) {
    m_price_adjustment_multiplier = price_adjustment_multiplier;
    m_price_adjustment_multiplier_isSet = true;
}

bool OAIInventoryUnitDto::is_price_adjustment_multiplier_Set() const{
    return m_price_adjustment_multiplier_isSet;
}

bool OAIInventoryUnitDto::is_price_adjustment_multiplier_Valid() const{
    return m_price_adjustment_multiplier_isValid;
}

qint64 OAIInventoryUnitDto::getRecordId() const {
    return m_record_id;
}
void OAIInventoryUnitDto::setRecordId(const qint64 &record_id) {
    m_record_id = record_id;
    m_record_id_isSet = true;
}

bool OAIInventoryUnitDto::is_record_id_Set() const{
    return m_record_id_isSet;
}

bool OAIInventoryUnitDto::is_record_id_Valid() const{
    return m_record_id_isValid;
}

QString OAIInventoryUnitDto::getSampleToUnit() const {
    return m_sample_to_unit;
}
void OAIInventoryUnitDto::setSampleToUnit(const QString &sample_to_unit) {
    m_sample_to_unit = sample_to_unit;
    m_sample_to_unit_isSet = true;
}

bool OAIInventoryUnitDto::is_sample_to_unit_Set() const{
    return m_sample_to_unit_isSet;
}

bool OAIInventoryUnitDto::is_sample_to_unit_Valid() const{
    return m_sample_to_unit_isValid;
}

QString OAIInventoryUnitDto::getToUnit() const {
    return m_to_unit;
}
void OAIInventoryUnitDto::setToUnit(const QString &to_unit) {
    m_to_unit = to_unit;
    m_to_unit_isSet = true;
}

bool OAIInventoryUnitDto::is_to_unit_Set() const{
    return m_to_unit_isSet;
}

bool OAIInventoryUnitDto::is_to_unit_Valid() const{
    return m_to_unit_isValid;
}

QString OAIInventoryUnitDto::getUnitMultDiv() const {
    return m_unit_mult_div;
}
void OAIInventoryUnitDto::setUnitMultDiv(const QString &unit_mult_div) {
    m_unit_mult_div = unit_mult_div;
    m_unit_mult_div_isSet = true;
}

bool OAIInventoryUnitDto::is_unit_mult_div_Set() const{
    return m_unit_mult_div_isSet;
}

bool OAIInventoryUnitDto::is_unit_mult_div_Valid() const{
    return m_unit_mult_div_isValid;
}

double OAIInventoryUnitDto::getUnitRate() const {
    return m_unit_rate;
}
void OAIInventoryUnitDto::setUnitRate(const double &unit_rate) {
    m_unit_rate = unit_rate;
    m_unit_rate_isSet = true;
}

bool OAIInventoryUnitDto::is_unit_rate_Set() const{
    return m_unit_rate_isSet;
}

bool OAIInventoryUnitDto::is_unit_rate_Valid() const{
    return m_unit_rate_isValid;
}

qint32 OAIInventoryUnitDto::getUnitType() const {
    return m_unit_type;
}
void OAIInventoryUnitDto::setUnitType(const qint32 &unit_type) {
    m_unit_type = unit_type;
    m_unit_type_isSet = true;
}

bool OAIInventoryUnitDto::is_unit_type_Set() const{
    return m_unit_type_isSet;
}

bool OAIInventoryUnitDto::is_unit_type_Valid() const{
    return m_unit_type_isValid;
}

bool OAIInventoryUnitDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_adjustment_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_to_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_mult_div_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryUnitDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
