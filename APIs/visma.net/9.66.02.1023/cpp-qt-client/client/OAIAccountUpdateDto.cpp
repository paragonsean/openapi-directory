/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountUpdateDto::OAIAccountUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountUpdateDto::OAIAccountUpdateDto() {
    this->initializeModel();
}

OAIAccountUpdateDto::~OAIAccountUpdateDto() {}

void OAIAccountUpdateDto::initializeModel() {

    m_account_cd_isSet = false;
    m_account_cd_isValid = false;

    m_account_class_isSet = false;
    m_account_class_isValid = false;

    m_account_group_cd_isSet = false;
    m_account_group_cd_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_analysis_code_isSet = false;
    m_analysis_code_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_extenal_code1_isSet = false;
    m_extenal_code1_isValid = false;

    m_external_code2_isSet = false;
    m_external_code2_isValid = false;

    m_post_option_isSet = false;
    m_post_option_isValid = false;

    m_public_code1_isSet = false;
    m_public_code1_isValid = false;

    m_tax_category_isSet = false;
    m_tax_category_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_use_default_sub_isSet = false;
    m_use_default_sub_isValid = false;
}

void OAIAccountUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountUpdateDto::fromJsonObject(QJsonObject json) {

    m_account_cd_isValid = ::OpenAPI::fromJsonValue(m_account_cd, json[QString("accountCD")]);
    m_account_cd_isSet = !json[QString("accountCD")].isNull() && m_account_cd_isValid;

    m_account_class_isValid = ::OpenAPI::fromJsonValue(m_account_class, json[QString("accountClass")]);
    m_account_class_isSet = !json[QString("accountClass")].isNull() && m_account_class_isValid;

    m_account_group_cd_isValid = ::OpenAPI::fromJsonValue(m_account_group_cd, json[QString("accountGroupCD")]);
    m_account_group_cd_isSet = !json[QString("accountGroupCD")].isNull() && m_account_group_cd_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_analysis_code_isValid = ::OpenAPI::fromJsonValue(m_analysis_code, json[QString("analysisCode")]);
    m_analysis_code_isSet = !json[QString("analysisCode")].isNull() && m_analysis_code_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_extenal_code1_isValid = ::OpenAPI::fromJsonValue(m_extenal_code1, json[QString("extenalCode1")]);
    m_extenal_code1_isSet = !json[QString("extenalCode1")].isNull() && m_extenal_code1_isValid;

    m_external_code2_isValid = ::OpenAPI::fromJsonValue(m_external_code2, json[QString("externalCode2")]);
    m_external_code2_isSet = !json[QString("externalCode2")].isNull() && m_external_code2_isValid;

    m_post_option_isValid = ::OpenAPI::fromJsonValue(m_post_option, json[QString("postOption")]);
    m_post_option_isSet = !json[QString("postOption")].isNull() && m_post_option_isValid;

    m_public_code1_isValid = ::OpenAPI::fromJsonValue(m_public_code1, json[QString("publicCode1")]);
    m_public_code1_isSet = !json[QString("publicCode1")].isNull() && m_public_code1_isValid;

    m_tax_category_isValid = ::OpenAPI::fromJsonValue(m_tax_category, json[QString("taxCategory")]);
    m_tax_category_isSet = !json[QString("taxCategory")].isNull() && m_tax_category_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_use_default_sub_isValid = ::OpenAPI::fromJsonValue(m_use_default_sub, json[QString("useDefaultSub")]);
    m_use_default_sub_isSet = !json[QString("useDefaultSub")].isNull() && m_use_default_sub_isValid;
}

QString OAIAccountUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_account_cd.isSet()) {
        obj.insert(QString("accountCD"), ::OpenAPI::toJsonValue(m_account_cd));
    }
    if (m_account_class.isSet()) {
        obj.insert(QString("accountClass"), ::OpenAPI::toJsonValue(m_account_class));
    }
    if (m_account_group_cd.isSet()) {
        obj.insert(QString("accountGroupCD"), ::OpenAPI::toJsonValue(m_account_group_cd));
    }
    if (m_active.isSet()) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_analysis_code.isSet()) {
        obj.insert(QString("analysisCode"), ::OpenAPI::toJsonValue(m_analysis_code));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_extenal_code1.isSet()) {
        obj.insert(QString("extenalCode1"), ::OpenAPI::toJsonValue(m_extenal_code1));
    }
    if (m_external_code2.isSet()) {
        obj.insert(QString("externalCode2"), ::OpenAPI::toJsonValue(m_external_code2));
    }
    if (m_post_option.isSet()) {
        obj.insert(QString("postOption"), ::OpenAPI::toJsonValue(m_post_option));
    }
    if (m_public_code1.isSet()) {
        obj.insert(QString("publicCode1"), ::OpenAPI::toJsonValue(m_public_code1));
    }
    if (m_tax_category.isSet()) {
        obj.insert(QString("taxCategory"), ::OpenAPI::toJsonValue(m_tax_category));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_use_default_sub.isSet()) {
        obj.insert(QString("useDefaultSub"), ::OpenAPI::toJsonValue(m_use_default_sub));
    }
    return obj;
}

OAIDtoValueOfString OAIAccountUpdateDto::getAccountCd() const {
    return m_account_cd;
}
void OAIAccountUpdateDto::setAccountCd(const OAIDtoValueOfString &account_cd) {
    m_account_cd = account_cd;
    m_account_cd_isSet = true;
}

bool OAIAccountUpdateDto::is_account_cd_Set() const{
    return m_account_cd_isSet;
}

bool OAIAccountUpdateDto::is_account_cd_Valid() const{
    return m_account_cd_isValid;
}

OAIDtoValueOfString OAIAccountUpdateDto::getAccountClass() const {
    return m_account_class;
}
void OAIAccountUpdateDto::setAccountClass(const OAIDtoValueOfString &account_class) {
    m_account_class = account_class;
    m_account_class_isSet = true;
}

bool OAIAccountUpdateDto::is_account_class_Set() const{
    return m_account_class_isSet;
}

bool OAIAccountUpdateDto::is_account_class_Valid() const{
    return m_account_class_isValid;
}

OAIDtoValueOfString OAIAccountUpdateDto::getAccountGroupCd() const {
    return m_account_group_cd;
}
void OAIAccountUpdateDto::setAccountGroupCd(const OAIDtoValueOfString &account_group_cd) {
    m_account_group_cd = account_group_cd;
    m_account_group_cd_isSet = true;
}

bool OAIAccountUpdateDto::is_account_group_cd_Set() const{
    return m_account_group_cd_isSet;
}

bool OAIAccountUpdateDto::is_account_group_cd_Valid() const{
    return m_account_group_cd_isValid;
}

OAIDtoValueOfBoolean OAIAccountUpdateDto::getActive() const {
    return m_active;
}
void OAIAccountUpdateDto::setActive(const OAIDtoValueOfBoolean &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIAccountUpdateDto::is_active_Set() const{
    return m_active_isSet;
}

bool OAIAccountUpdateDto::is_active_Valid() const{
    return m_active_isValid;
}

OAIDtoValueOfString OAIAccountUpdateDto::getAnalysisCode() const {
    return m_analysis_code;
}
void OAIAccountUpdateDto::setAnalysisCode(const OAIDtoValueOfString &analysis_code) {
    m_analysis_code = analysis_code;
    m_analysis_code_isSet = true;
}

bool OAIAccountUpdateDto::is_analysis_code_Set() const{
    return m_analysis_code_isSet;
}

bool OAIAccountUpdateDto::is_analysis_code_Valid() const{
    return m_analysis_code_isValid;
}

OAIDtoValueOfString OAIAccountUpdateDto::getCurrency() const {
    return m_currency;
}
void OAIAccountUpdateDto::setCurrency(const OAIDtoValueOfString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIAccountUpdateDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIAccountUpdateDto::is_currency_Valid() const{
    return m_currency_isValid;
}

OAIDtoValueOfString OAIAccountUpdateDto::getDescription() const {
    return m_description;
}
void OAIAccountUpdateDto::setDescription(const OAIDtoValueOfString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAccountUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAccountUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIDtoValueOfString OAIAccountUpdateDto::getExtenalCode1() const {
    return m_extenal_code1;
}
void OAIAccountUpdateDto::setExtenalCode1(const OAIDtoValueOfString &extenal_code1) {
    m_extenal_code1 = extenal_code1;
    m_extenal_code1_isSet = true;
}

bool OAIAccountUpdateDto::is_extenal_code1_Set() const{
    return m_extenal_code1_isSet;
}

bool OAIAccountUpdateDto::is_extenal_code1_Valid() const{
    return m_extenal_code1_isValid;
}

OAIDtoValueOfString OAIAccountUpdateDto::getExternalCode2() const {
    return m_external_code2;
}
void OAIAccountUpdateDto::setExternalCode2(const OAIDtoValueOfString &external_code2) {
    m_external_code2 = external_code2;
    m_external_code2_isSet = true;
}

bool OAIAccountUpdateDto::is_external_code2_Set() const{
    return m_external_code2_isSet;
}

bool OAIAccountUpdateDto::is_external_code2_Valid() const{
    return m_external_code2_isValid;
}

OAIDtoValueOfString OAIAccountUpdateDto::getPostOption() const {
    return m_post_option;
}
void OAIAccountUpdateDto::setPostOption(const OAIDtoValueOfString &post_option) {
    m_post_option = post_option;
    m_post_option_isSet = true;
}

bool OAIAccountUpdateDto::is_post_option_Set() const{
    return m_post_option_isSet;
}

bool OAIAccountUpdateDto::is_post_option_Valid() const{
    return m_post_option_isValid;
}

OAIDtoValueOfNullableOfInt32 OAIAccountUpdateDto::getPublicCode1() const {
    return m_public_code1;
}
void OAIAccountUpdateDto::setPublicCode1(const OAIDtoValueOfNullableOfInt32 &public_code1) {
    m_public_code1 = public_code1;
    m_public_code1_isSet = true;
}

bool OAIAccountUpdateDto::is_public_code1_Set() const{
    return m_public_code1_isSet;
}

bool OAIAccountUpdateDto::is_public_code1_Valid() const{
    return m_public_code1_isValid;
}

OAIDtoValueOfString OAIAccountUpdateDto::getTaxCategory() const {
    return m_tax_category;
}
void OAIAccountUpdateDto::setTaxCategory(const OAIDtoValueOfString &tax_category) {
    m_tax_category = tax_category;
    m_tax_category_isSet = true;
}

bool OAIAccountUpdateDto::is_tax_category_Set() const{
    return m_tax_category_isSet;
}

bool OAIAccountUpdateDto::is_tax_category_Valid() const{
    return m_tax_category_isValid;
}

OAIDtoValueOfAccountTypes OAIAccountUpdateDto::getType() const {
    return m_type;
}
void OAIAccountUpdateDto::setType(const OAIDtoValueOfAccountTypes &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAccountUpdateDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAccountUpdateDto::is_type_Valid() const{
    return m_type_isValid;
}

OAIDtoValueOfBoolean OAIAccountUpdateDto::getUseDefaultSub() const {
    return m_use_default_sub;
}
void OAIAccountUpdateDto::setUseDefaultSub(const OAIDtoValueOfBoolean &use_default_sub) {
    m_use_default_sub = use_default_sub;
    m_use_default_sub_isSet = true;
}

bool OAIAccountUpdateDto::is_use_default_sub_Set() const{
    return m_use_default_sub_isSet;
}

bool OAIAccountUpdateDto::is_use_default_sub_Valid() const{
    return m_use_default_sub_isValid;
}

bool OAIAccountUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_cd.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_group_cd.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_active.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extenal_code1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_code2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_code1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_default_sub.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
