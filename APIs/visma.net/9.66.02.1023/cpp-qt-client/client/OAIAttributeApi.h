/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAttributeApi_H
#define OAI_OAIAttributeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttributeDto.h"
#include "OAIAttributeUpdateDto.h"
#include "OAIBackgroundApiAcceptedDto.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAttributeApi : public QObject {
    Q_OBJECT

public:
    OAIAttributeApi(const int timeOut = 0);
    ~OAIAttributeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  attribute_id QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void attributeDeleteByattributeId(const QString &attribute_id, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  attribute_id QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void attributeGetAttributeByattributeId(const QString &attribute_id, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  attribute_id QString [optional]
    * @param[in]  control_type QString [optional]
    * @param[in]  internal bool [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  created_date_time QString [optional]
    * @param[in]  created_date_time_condition QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void attributeGetAttributes(const ::OpenAPI::OptionalParam<QString> &attribute_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &control_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &internal = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_attribute_update_dto OAIAttributeUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void attributePost(const OAIAttributeUpdateDto &oai_attribute_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  attribute_id QString [required]
    * @param[in]  oai_attribute_update_dto OAIAttributeUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void attributePutByattributeId(const QString &attribute_id, const OAIAttributeUpdateDto &oai_attribute_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void attributeDeleteByattributeIdCallback(OAIHttpRequestWorker *worker);
    void attributeGetAttributeByattributeIdCallback(OAIHttpRequestWorker *worker);
    void attributeGetAttributesCallback(OAIHttpRequestWorker *worker);
    void attributePostCallback(OAIHttpRequestWorker *worker);
    void attributePutByattributeIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void attributeDeleteByattributeIdSignal(OAIBackgroundApiAcceptedDto summary);
    void attributeGetAttributeByattributeIdSignal(OAIAttributeDto summary);
    void attributeGetAttributesSignal(QList<OAIAttributeDto> summary);
    void attributePostSignal(OAIObject summary);
    void attributePutByattributeIdSignal(OAIBackgroundApiAcceptedDto summary);


    void attributeDeleteByattributeIdSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);
    void attributeGetAttributeByattributeIdSignalFull(OAIHttpRequestWorker *worker, OAIAttributeDto summary);
    void attributeGetAttributesSignalFull(OAIHttpRequestWorker *worker, QList<OAIAttributeDto> summary);
    void attributePostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void attributePutByattributeIdSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);

    Q_DECL_DEPRECATED_X("Use attributeDeleteByattributeIdSignalError() instead")
    void attributeDeleteByattributeIdSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeDeleteByattributeIdSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeGetAttributeByattributeIdSignalError() instead")
    void attributeGetAttributeByattributeIdSignalE(OAIAttributeDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeGetAttributeByattributeIdSignalError(OAIAttributeDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeGetAttributesSignalError() instead")
    void attributeGetAttributesSignalE(QList<OAIAttributeDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeGetAttributesSignalError(QList<OAIAttributeDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributePostSignalError() instead")
    void attributePostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributePostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributePutByattributeIdSignalError() instead")
    void attributePutByattributeIdSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributePutByattributeIdSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use attributeDeleteByattributeIdSignalErrorFull() instead")
    void attributeDeleteByattributeIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeDeleteByattributeIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeGetAttributeByattributeIdSignalErrorFull() instead")
    void attributeGetAttributeByattributeIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeGetAttributeByattributeIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeGetAttributesSignalErrorFull() instead")
    void attributeGetAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeGetAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributePostSignalErrorFull() instead")
    void attributePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributePutByattributeIdSignalErrorFull() instead")
    void attributePutByattributeIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributePutByattributeIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
