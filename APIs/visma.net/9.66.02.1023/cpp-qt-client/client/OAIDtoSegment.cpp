/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDtoSegment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDtoSegment::OAIDtoSegment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDtoSegment::OAIDtoSegment() {
    this->initializeModel();
}

OAIDtoSegment::~OAIDtoSegment() {}

void OAIDtoSegment::initializeModel() {

    m_consol_num_char_isSet = false;
    m_consol_num_char_isValid = false;

    m_consol_order_isSet = false;
    m_consol_order_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_auto_number_isSet = false;
    m_is_auto_number_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_public_id_isSet = false;
    m_public_id_isValid = false;

    m_segment_id_isSet = false;
    m_segment_id_isValid = false;

    m_segment_values_isSet = false;
    m_segment_values_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;

    m_validate_isSet = false;
    m_validate_isValid = false;
}

void OAIDtoSegment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDtoSegment::fromJsonObject(QJsonObject json) {

    m_consol_num_char_isValid = ::OpenAPI::fromJsonValue(m_consol_num_char, json[QString("consolNumChar")]);
    m_consol_num_char_isSet = !json[QString("consolNumChar")].isNull() && m_consol_num_char_isValid;

    m_consol_order_isValid = ::OpenAPI::fromJsonValue(m_consol_order, json[QString("consolOrder")]);
    m_consol_order_isSet = !json[QString("consolOrder")].isNull() && m_consol_order_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_auto_number_isValid = ::OpenAPI::fromJsonValue(m_is_auto_number, json[QString("isAutoNumber")]);
    m_is_auto_number_isSet = !json[QString("isAutoNumber")].isNull() && m_is_auto_number_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_public_id_isValid = ::OpenAPI::fromJsonValue(m_public_id, json[QString("publicId")]);
    m_public_id_isSet = !json[QString("publicId")].isNull() && m_public_id_isValid;

    m_segment_id_isValid = ::OpenAPI::fromJsonValue(m_segment_id, json[QString("segmentId")]);
    m_segment_id_isSet = !json[QString("segmentId")].isNull() && m_segment_id_isValid;

    m_segment_values_isValid = ::OpenAPI::fromJsonValue(m_segment_values, json[QString("segmentValues")]);
    m_segment_values_isSet = !json[QString("segmentValues")].isNull() && m_segment_values_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("timeStamp")]);
    m_time_stamp_isSet = !json[QString("timeStamp")].isNull() && m_time_stamp_isValid;

    m_validate_isValid = ::OpenAPI::fromJsonValue(m_validate, json[QString("validate")]);
    m_validate_isSet = !json[QString("validate")].isNull() && m_validate_isValid;
}

QString OAIDtoSegment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDtoSegment::asJsonObject() const {
    QJsonObject obj;
    if (m_consol_num_char_isSet) {
        obj.insert(QString("consolNumChar"), ::OpenAPI::toJsonValue(m_consol_num_char));
    }
    if (m_consol_order_isSet) {
        obj.insert(QString("consolOrder"), ::OpenAPI::toJsonValue(m_consol_order));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_auto_number_isSet) {
        obj.insert(QString("isAutoNumber"), ::OpenAPI::toJsonValue(m_is_auto_number));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_public_id_isSet) {
        obj.insert(QString("publicId"), ::OpenAPI::toJsonValue(m_public_id));
    }
    if (m_segment_id_isSet) {
        obj.insert(QString("segmentId"), ::OpenAPI::toJsonValue(m_segment_id));
    }
    if (m_segment_values.size() > 0) {
        obj.insert(QString("segmentValues"), ::OpenAPI::toJsonValue(m_segment_values));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("timeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    if (m_validate_isSet) {
        obj.insert(QString("validate"), ::OpenAPI::toJsonValue(m_validate));
    }
    return obj;
}

qint32 OAIDtoSegment::getConsolNumChar() const {
    return m_consol_num_char;
}
void OAIDtoSegment::setConsolNumChar(const qint32 &consol_num_char) {
    m_consol_num_char = consol_num_char;
    m_consol_num_char_isSet = true;
}

bool OAIDtoSegment::is_consol_num_char_Set() const{
    return m_consol_num_char_isSet;
}

bool OAIDtoSegment::is_consol_num_char_Valid() const{
    return m_consol_num_char_isValid;
}

qint32 OAIDtoSegment::getConsolOrder() const {
    return m_consol_order;
}
void OAIDtoSegment::setConsolOrder(const qint32 &consol_order) {
    m_consol_order = consol_order;
    m_consol_order_isSet = true;
}

bool OAIDtoSegment::is_consol_order_Set() const{
    return m_consol_order_isSet;
}

bool OAIDtoSegment::is_consol_order_Valid() const{
    return m_consol_order_isValid;
}

QString OAIDtoSegment::getDescription() const {
    return m_description;
}
void OAIDtoSegment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDtoSegment::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDtoSegment::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIDtoSegment::isIsAutoNumber() const {
    return m_is_auto_number;
}
void OAIDtoSegment::setIsAutoNumber(const bool &is_auto_number) {
    m_is_auto_number = is_auto_number;
    m_is_auto_number_isSet = true;
}

bool OAIDtoSegment::is_is_auto_number_Set() const{
    return m_is_auto_number_isSet;
}

bool OAIDtoSegment::is_is_auto_number_Valid() const{
    return m_is_auto_number_isValid;
}

QDateTime OAIDtoSegment::getLastModified() const {
    return m_last_modified;
}
void OAIDtoSegment::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIDtoSegment::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIDtoSegment::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

qint32 OAIDtoSegment::getLength() const {
    return m_length;
}
void OAIDtoSegment::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIDtoSegment::is_length_Set() const{
    return m_length_isSet;
}

bool OAIDtoSegment::is_length_Valid() const{
    return m_length_isValid;
}

QString OAIDtoSegment::getPublicId() const {
    return m_public_id;
}
void OAIDtoSegment::setPublicId(const QString &public_id) {
    m_public_id = public_id;
    m_public_id_isSet = true;
}

bool OAIDtoSegment::is_public_id_Set() const{
    return m_public_id_isSet;
}

bool OAIDtoSegment::is_public_id_Valid() const{
    return m_public_id_isValid;
}

qint32 OAIDtoSegment::getSegmentId() const {
    return m_segment_id;
}
void OAIDtoSegment::setSegmentId(const qint32 &segment_id) {
    m_segment_id = segment_id;
    m_segment_id_isSet = true;
}

bool OAIDtoSegment::is_segment_id_Set() const{
    return m_segment_id_isSet;
}

bool OAIDtoSegment::is_segment_id_Valid() const{
    return m_segment_id_isValid;
}

QList<OAIDtoSegmentValue> OAIDtoSegment::getSegmentValues() const {
    return m_segment_values;
}
void OAIDtoSegment::setSegmentValues(const QList<OAIDtoSegmentValue> &segment_values) {
    m_segment_values = segment_values;
    m_segment_values_isSet = true;
}

bool OAIDtoSegment::is_segment_values_Set() const{
    return m_segment_values_isSet;
}

bool OAIDtoSegment::is_segment_values_Valid() const{
    return m_segment_values_isValid;
}

QString OAIDtoSegment::getTimeStamp() const {
    return m_time_stamp;
}
void OAIDtoSegment::setTimeStamp(const QString &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIDtoSegment::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIDtoSegment::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

bool OAIDtoSegment::isValidate() const {
    return m_validate;
}
void OAIDtoSegment::setValidate(const bool &validate) {
    m_validate = validate;
    m_validate_isSet = true;
}

bool OAIDtoSegment::is_validate_Set() const{
    return m_validate_isSet;
}

bool OAIDtoSegment::is_validate_Valid() const{
    return m_validate_isValid;
}

bool OAIDtoSegment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consol_num_char_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consol_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_auto_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDtoSegment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
