/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIKitSpecificationsApi_H
#define OAI_OAIKitSpecificationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAIBasePaginationDtoOfKitSpecificationDto.h"
#include "OAIKitSpecificationDto.h"
#include "OAIKitSpecificationUpdateDto.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIKitSpecificationsApi : public QObject {
    Q_OBJECT

public:
    OAIKitSpecificationsApi(const int timeOut = 0);
    ~OAIKitSpecificationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  created_date_time QString [optional]
    * @param[in]  created_date_time_condition QString [optional]
    * @param[in]  kit_inventory_id QString [optional]
    * @param[in]  revision_id QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void kitSpecificationsGetAll(const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &kit_inventory_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &revision_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  kit_inventory_id QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void kitSpecificationsGetBykitInventoryID(const QString &kit_inventory_id, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  kit_inventory_id QString [required]
    * @param[in]  revision_id QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void kitSpecificationsGetBykitInventoryIDrevisionID(const QString &kit_inventory_id, const QString &revision_id, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_kit_specification_update_dto OAIKitSpecificationUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void kitSpecificationsPost(const OAIKitSpecificationUpdateDto &oai_kit_specification_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  kit_inventory_id QString [required]
    * @param[in]  revision_id QString [required]
    * @param[in]  oai_kit_specification_update_dto OAIKitSpecificationUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void kitSpecificationsPutBykitInventoryIDrevisionID(const QString &kit_inventory_id, const QString &revision_id, const OAIKitSpecificationUpdateDto &oai_kit_specification_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void kitSpecificationsGetAllCallback(OAIHttpRequestWorker *worker);
    void kitSpecificationsGetBykitInventoryIDCallback(OAIHttpRequestWorker *worker);
    void kitSpecificationsGetBykitInventoryIDrevisionIDCallback(OAIHttpRequestWorker *worker);
    void kitSpecificationsPostCallback(OAIHttpRequestWorker *worker);
    void kitSpecificationsPutBykitInventoryIDrevisionIDCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void kitSpecificationsGetAllSignal(OAIBasePaginationDtoOfKitSpecificationDto summary);
    void kitSpecificationsGetBykitInventoryIDSignal(OAIBasePaginationDtoOfKitSpecificationDto summary);
    void kitSpecificationsGetBykitInventoryIDrevisionIDSignal(OAIKitSpecificationDto summary);
    void kitSpecificationsPostSignal(OAIObject summary);
    void kitSpecificationsPutBykitInventoryIDrevisionIDSignal(OAIBackgroundApiAcceptedDto summary);


    void kitSpecificationsGetAllSignalFull(OAIHttpRequestWorker *worker, OAIBasePaginationDtoOfKitSpecificationDto summary);
    void kitSpecificationsGetBykitInventoryIDSignalFull(OAIHttpRequestWorker *worker, OAIBasePaginationDtoOfKitSpecificationDto summary);
    void kitSpecificationsGetBykitInventoryIDrevisionIDSignalFull(OAIHttpRequestWorker *worker, OAIKitSpecificationDto summary);
    void kitSpecificationsPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void kitSpecificationsPutBykitInventoryIDrevisionIDSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);

    Q_DECL_DEPRECATED_X("Use kitSpecificationsGetAllSignalError() instead")
    void kitSpecificationsGetAllSignalE(OAIBasePaginationDtoOfKitSpecificationDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kitSpecificationsGetAllSignalError(OAIBasePaginationDtoOfKitSpecificationDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kitSpecificationsGetBykitInventoryIDSignalError() instead")
    void kitSpecificationsGetBykitInventoryIDSignalE(OAIBasePaginationDtoOfKitSpecificationDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kitSpecificationsGetBykitInventoryIDSignalError(OAIBasePaginationDtoOfKitSpecificationDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kitSpecificationsGetBykitInventoryIDrevisionIDSignalError() instead")
    void kitSpecificationsGetBykitInventoryIDrevisionIDSignalE(OAIKitSpecificationDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kitSpecificationsGetBykitInventoryIDrevisionIDSignalError(OAIKitSpecificationDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kitSpecificationsPostSignalError() instead")
    void kitSpecificationsPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kitSpecificationsPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kitSpecificationsPutBykitInventoryIDrevisionIDSignalError() instead")
    void kitSpecificationsPutBykitInventoryIDrevisionIDSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kitSpecificationsPutBykitInventoryIDrevisionIDSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use kitSpecificationsGetAllSignalErrorFull() instead")
    void kitSpecificationsGetAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kitSpecificationsGetAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kitSpecificationsGetBykitInventoryIDSignalErrorFull() instead")
    void kitSpecificationsGetBykitInventoryIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kitSpecificationsGetBykitInventoryIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kitSpecificationsGetBykitInventoryIDrevisionIDSignalErrorFull() instead")
    void kitSpecificationsGetBykitInventoryIDrevisionIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kitSpecificationsGetBykitInventoryIDrevisionIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kitSpecificationsPostSignalErrorFull() instead")
    void kitSpecificationsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kitSpecificationsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kitSpecificationsPutBykitInventoryIDrevisionIDSignalErrorFull() instead")
    void kitSpecificationsPutBykitInventoryIDrevisionIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kitSpecificationsPutBykitInventoryIDrevisionIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
