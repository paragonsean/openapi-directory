/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeneralLedgerTransactionDetailsDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeneralLedgerTransactionDetailsDto::OAIGeneralLedgerTransactionDetailsDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeneralLedgerTransactionDetailsDto::OAIGeneralLedgerTransactionDetailsDto() {
    this->initializeModel();
}

OAIGeneralLedgerTransactionDetailsDto::~OAIGeneralLedgerTransactionDetailsDto() {}

void OAIGeneralLedgerTransactionDetailsDto::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_batch_number_isSet = false;
    m_batch_number_isValid = false;

    m_beg_balance_isSet = false;
    m_beg_balance_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_credit_amount_isSet = false;
    m_credit_amount_isValid = false;

    m_curr_beg_balance_isSet = false;
    m_curr_beg_balance_isValid = false;

    m_curr_credit_amount_isSet = false;
    m_curr_credit_amount_isValid = false;

    m_curr_debit_amount_isSet = false;
    m_curr_debit_amount_isValid = false;

    m_curr_ending_balance_isSet = false;
    m_curr_ending_balance_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_debit_amount_isSet = false;
    m_debit_amount_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ending_balance_isSet = false;
    m_ending_balance_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_ledger_isSet = false;
    m_ledger_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_module_isSet = false;
    m_module_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_ref_number_isSet = false;
    m_ref_number_isValid = false;

    m_subaccount_isSet = false;
    m_subaccount_isValid = false;

    m_tran_date_isSet = false;
    m_tran_date_isValid = false;
}

void OAIGeneralLedgerTransactionDetailsDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeneralLedgerTransactionDetailsDto::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_batch_number_isValid = ::OpenAPI::fromJsonValue(m_batch_number, json[QString("batchNumber")]);
    m_batch_number_isSet = !json[QString("batchNumber")].isNull() && m_batch_number_isValid;

    m_beg_balance_isValid = ::OpenAPI::fromJsonValue(m_beg_balance, json[QString("begBalance")]);
    m_beg_balance_isSet = !json[QString("begBalance")].isNull() && m_beg_balance_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_credit_amount_isValid = ::OpenAPI::fromJsonValue(m_credit_amount, json[QString("creditAmount")]);
    m_credit_amount_isSet = !json[QString("creditAmount")].isNull() && m_credit_amount_isValid;

    m_curr_beg_balance_isValid = ::OpenAPI::fromJsonValue(m_curr_beg_balance, json[QString("currBegBalance")]);
    m_curr_beg_balance_isSet = !json[QString("currBegBalance")].isNull() && m_curr_beg_balance_isValid;

    m_curr_credit_amount_isValid = ::OpenAPI::fromJsonValue(m_curr_credit_amount, json[QString("currCreditAmount")]);
    m_curr_credit_amount_isSet = !json[QString("currCreditAmount")].isNull() && m_curr_credit_amount_isValid;

    m_curr_debit_amount_isValid = ::OpenAPI::fromJsonValue(m_curr_debit_amount, json[QString("currDebitAmount")]);
    m_curr_debit_amount_isSet = !json[QString("currDebitAmount")].isNull() && m_curr_debit_amount_isValid;

    m_curr_ending_balance_isValid = ::OpenAPI::fromJsonValue(m_curr_ending_balance, json[QString("currEndingBalance")]);
    m_curr_ending_balance_isSet = !json[QString("currEndingBalance")].isNull() && m_curr_ending_balance_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_debit_amount_isValid = ::OpenAPI::fromJsonValue(m_debit_amount, json[QString("debitAmount")]);
    m_debit_amount_isSet = !json[QString("debitAmount")].isNull() && m_debit_amount_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ending_balance_isValid = ::OpenAPI::fromJsonValue(m_ending_balance, json[QString("endingBalance")]);
    m_ending_balance_isSet = !json[QString("endingBalance")].isNull() && m_ending_balance_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_ledger_isValid = ::OpenAPI::fromJsonValue(m_ledger, json[QString("ledger")]);
    m_ledger_isSet = !json[QString("ledger")].isNull() && m_ledger_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("lineNumber")]);
    m_line_number_isSet = !json[QString("lineNumber")].isNull() && m_line_number_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_module_isValid = ::OpenAPI::fromJsonValue(m_module, json[QString("module")]);
    m_module_isSet = !json[QString("module")].isNull() && m_module_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_ref_number_isValid = ::OpenAPI::fromJsonValue(m_ref_number, json[QString("refNumber")]);
    m_ref_number_isSet = !json[QString("refNumber")].isNull() && m_ref_number_isValid;

    m_subaccount_isValid = ::OpenAPI::fromJsonValue(m_subaccount, json[QString("subaccount")]);
    m_subaccount_isSet = !json[QString("subaccount")].isNull() && m_subaccount_isValid;

    m_tran_date_isValid = ::OpenAPI::fromJsonValue(m_tran_date, json[QString("tranDate")]);
    m_tran_date_isSet = !json[QString("tranDate")].isNull() && m_tran_date_isValid;
}

QString OAIGeneralLedgerTransactionDetailsDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeneralLedgerTransactionDetailsDto::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_batch_number_isSet) {
        obj.insert(QString("batchNumber"), ::OpenAPI::toJsonValue(m_batch_number));
    }
    if (m_beg_balance_isSet) {
        obj.insert(QString("begBalance"), ::OpenAPI::toJsonValue(m_beg_balance));
    }
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_credit_amount_isSet) {
        obj.insert(QString("creditAmount"), ::OpenAPI::toJsonValue(m_credit_amount));
    }
    if (m_curr_beg_balance_isSet) {
        obj.insert(QString("currBegBalance"), ::OpenAPI::toJsonValue(m_curr_beg_balance));
    }
    if (m_curr_credit_amount_isSet) {
        obj.insert(QString("currCreditAmount"), ::OpenAPI::toJsonValue(m_curr_credit_amount));
    }
    if (m_curr_debit_amount_isSet) {
        obj.insert(QString("currDebitAmount"), ::OpenAPI::toJsonValue(m_curr_debit_amount));
    }
    if (m_curr_ending_balance_isSet) {
        obj.insert(QString("currEndingBalance"), ::OpenAPI::toJsonValue(m_curr_ending_balance));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_debit_amount_isSet) {
        obj.insert(QString("debitAmount"), ::OpenAPI::toJsonValue(m_debit_amount));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ending_balance_isSet) {
        obj.insert(QString("endingBalance"), ::OpenAPI::toJsonValue(m_ending_balance));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_ledger.isSet()) {
        obj.insert(QString("ledger"), ::OpenAPI::toJsonValue(m_ledger));
    }
    if (m_line_number_isSet) {
        obj.insert(QString("lineNumber"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_module_isSet) {
        obj.insert(QString("module"), ::OpenAPI::toJsonValue(m_module));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_ref_number_isSet) {
        obj.insert(QString("refNumber"), ::OpenAPI::toJsonValue(m_ref_number));
    }
    if (m_subaccount_isSet) {
        obj.insert(QString("subaccount"), ::OpenAPI::toJsonValue(m_subaccount));
    }
    if (m_tran_date_isSet) {
        obj.insert(QString("tranDate"), ::OpenAPI::toJsonValue(m_tran_date));
    }
    return obj;
}

OAIAccountInGeneralLedgerTransactionDetailsDto OAIGeneralLedgerTransactionDetailsDto::getAccount() const {
    return m_account;
}
void OAIGeneralLedgerTransactionDetailsDto::setAccount(const OAIAccountInGeneralLedgerTransactionDetailsDto &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_account_Set() const{
    return m_account_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIGeneralLedgerTransactionDetailsDto::getBatchNumber() const {
    return m_batch_number;
}
void OAIGeneralLedgerTransactionDetailsDto::setBatchNumber(const QString &batch_number) {
    m_batch_number = batch_number;
    m_batch_number_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_batch_number_Set() const{
    return m_batch_number_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_batch_number_Valid() const{
    return m_batch_number_isValid;
}

double OAIGeneralLedgerTransactionDetailsDto::getBegBalance() const {
    return m_beg_balance;
}
void OAIGeneralLedgerTransactionDetailsDto::setBegBalance(const double &beg_balance) {
    m_beg_balance = beg_balance;
    m_beg_balance_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_beg_balance_Set() const{
    return m_beg_balance_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_beg_balance_Valid() const{
    return m_beg_balance_isValid;
}

OAIBranchInGeneralLedgerTransactionDetailsDto OAIGeneralLedgerTransactionDetailsDto::getBranch() const {
    return m_branch;
}
void OAIGeneralLedgerTransactionDetailsDto::setBranch(const OAIBranchInGeneralLedgerTransactionDetailsDto &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_branch_Valid() const{
    return m_branch_isValid;
}

double OAIGeneralLedgerTransactionDetailsDto::getCreditAmount() const {
    return m_credit_amount;
}
void OAIGeneralLedgerTransactionDetailsDto::setCreditAmount(const double &credit_amount) {
    m_credit_amount = credit_amount;
    m_credit_amount_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_credit_amount_Set() const{
    return m_credit_amount_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_credit_amount_Valid() const{
    return m_credit_amount_isValid;
}

double OAIGeneralLedgerTransactionDetailsDto::getCurrBegBalance() const {
    return m_curr_beg_balance;
}
void OAIGeneralLedgerTransactionDetailsDto::setCurrBegBalance(const double &curr_beg_balance) {
    m_curr_beg_balance = curr_beg_balance;
    m_curr_beg_balance_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_curr_beg_balance_Set() const{
    return m_curr_beg_balance_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_curr_beg_balance_Valid() const{
    return m_curr_beg_balance_isValid;
}

double OAIGeneralLedgerTransactionDetailsDto::getCurrCreditAmount() const {
    return m_curr_credit_amount;
}
void OAIGeneralLedgerTransactionDetailsDto::setCurrCreditAmount(const double &curr_credit_amount) {
    m_curr_credit_amount = curr_credit_amount;
    m_curr_credit_amount_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_curr_credit_amount_Set() const{
    return m_curr_credit_amount_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_curr_credit_amount_Valid() const{
    return m_curr_credit_amount_isValid;
}

double OAIGeneralLedgerTransactionDetailsDto::getCurrDebitAmount() const {
    return m_curr_debit_amount;
}
void OAIGeneralLedgerTransactionDetailsDto::setCurrDebitAmount(const double &curr_debit_amount) {
    m_curr_debit_amount = curr_debit_amount;
    m_curr_debit_amount_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_curr_debit_amount_Set() const{
    return m_curr_debit_amount_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_curr_debit_amount_Valid() const{
    return m_curr_debit_amount_isValid;
}

double OAIGeneralLedgerTransactionDetailsDto::getCurrEndingBalance() const {
    return m_curr_ending_balance;
}
void OAIGeneralLedgerTransactionDetailsDto::setCurrEndingBalance(const double &curr_ending_balance) {
    m_curr_ending_balance = curr_ending_balance;
    m_curr_ending_balance_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_curr_ending_balance_Set() const{
    return m_curr_ending_balance_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_curr_ending_balance_Valid() const{
    return m_curr_ending_balance_isValid;
}

QString OAIGeneralLedgerTransactionDetailsDto::getCurrency() const {
    return m_currency;
}
void OAIGeneralLedgerTransactionDetailsDto::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_currency_Valid() const{
    return m_currency_isValid;
}

double OAIGeneralLedgerTransactionDetailsDto::getDebitAmount() const {
    return m_debit_amount;
}
void OAIGeneralLedgerTransactionDetailsDto::setDebitAmount(const double &debit_amount) {
    m_debit_amount = debit_amount;
    m_debit_amount_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_debit_amount_Set() const{
    return m_debit_amount_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_debit_amount_Valid() const{
    return m_debit_amount_isValid;
}

QString OAIGeneralLedgerTransactionDetailsDto::getDescription() const {
    return m_description;
}
void OAIGeneralLedgerTransactionDetailsDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_description_Valid() const{
    return m_description_isValid;
}

double OAIGeneralLedgerTransactionDetailsDto::getEndingBalance() const {
    return m_ending_balance;
}
void OAIGeneralLedgerTransactionDetailsDto::setEndingBalance(const double &ending_balance) {
    m_ending_balance = ending_balance;
    m_ending_balance_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_ending_balance_Set() const{
    return m_ending_balance_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_ending_balance_Valid() const{
    return m_ending_balance_isValid;
}

QString OAIGeneralLedgerTransactionDetailsDto::getErrorInfo() const {
    return m_error_info;
}
void OAIGeneralLedgerTransactionDetailsDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

QDateTime OAIGeneralLedgerTransactionDetailsDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIGeneralLedgerTransactionDetailsDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAILedgerInGeneralLedgerTransactionDetailsDto OAIGeneralLedgerTransactionDetailsDto::getLedger() const {
    return m_ledger;
}
void OAIGeneralLedgerTransactionDetailsDto::setLedger(const OAILedgerInGeneralLedgerTransactionDetailsDto &ledger) {
    m_ledger = ledger;
    m_ledger_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_ledger_Set() const{
    return m_ledger_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_ledger_Valid() const{
    return m_ledger_isValid;
}

qint32 OAIGeneralLedgerTransactionDetailsDto::getLineNumber() const {
    return m_line_number;
}
void OAIGeneralLedgerTransactionDetailsDto::setLineNumber(const qint32 &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_line_number_Valid() const{
    return m_line_number_isValid;
}

OAIMetadataDto OAIGeneralLedgerTransactionDetailsDto::getMetadata() const {
    return m_metadata;
}
void OAIGeneralLedgerTransactionDetailsDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIGeneralLedgerTransactionDetailsDto::getModule() const {
    return m_module;
}
void OAIGeneralLedgerTransactionDetailsDto::setModule(const QString &module) {
    m_module = module;
    m_module_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_module_Set() const{
    return m_module_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_module_Valid() const{
    return m_module_isValid;
}

QString OAIGeneralLedgerTransactionDetailsDto::getPeriod() const {
    return m_period;
}
void OAIGeneralLedgerTransactionDetailsDto::setPeriod(const QString &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_period_Set() const{
    return m_period_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_period_Valid() const{
    return m_period_isValid;
}

QString OAIGeneralLedgerTransactionDetailsDto::getRefNumber() const {
    return m_ref_number;
}
void OAIGeneralLedgerTransactionDetailsDto::setRefNumber(const QString &ref_number) {
    m_ref_number = ref_number;
    m_ref_number_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_ref_number_Set() const{
    return m_ref_number_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_ref_number_Valid() const{
    return m_ref_number_isValid;
}

QString OAIGeneralLedgerTransactionDetailsDto::getSubaccount() const {
    return m_subaccount;
}
void OAIGeneralLedgerTransactionDetailsDto::setSubaccount(const QString &subaccount) {
    m_subaccount = subaccount;
    m_subaccount_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_subaccount_Set() const{
    return m_subaccount_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_subaccount_Valid() const{
    return m_subaccount_isValid;
}

QDateTime OAIGeneralLedgerTransactionDetailsDto::getTranDate() const {
    return m_tran_date;
}
void OAIGeneralLedgerTransactionDetailsDto::setTranDate(const QDateTime &tran_date) {
    m_tran_date = tran_date;
    m_tran_date_isSet = true;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_tran_date_Set() const{
    return m_tran_date_isSet;
}

bool OAIGeneralLedgerTransactionDetailsDto::is_tran_date_Valid() const{
    return m_tran_date_isValid;
}

bool OAIGeneralLedgerTransactionDetailsDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beg_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_curr_beg_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_curr_credit_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_curr_debit_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_curr_ending_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ending_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ledger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tran_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeneralLedgerTransactionDetailsDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
