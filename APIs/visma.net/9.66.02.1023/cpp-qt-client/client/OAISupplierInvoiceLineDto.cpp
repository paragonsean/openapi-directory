/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupplierInvoiceLineDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupplierInvoiceLineDto::OAISupplierInvoiceLineDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupplierInvoiceLineDto::OAISupplierInvoiceLineDto() {
    this->initializeModel();
}

OAISupplierInvoiceLineDto::~OAISupplierInvoiceLineDto() {}

void OAISupplierInvoiceLineDto::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_cost_in_currency_isSet = false;
    m_cost_in_currency_isValid = false;

    m_cury_retainage_amt_isSet = false;
    m_cury_retainage_amt_isValid = false;

    m_deferral_code_isSet = false;
    m_deferral_code_isValid = false;

    m_deferral_schedule_isSet = false;
    m_deferral_schedule_isValid = false;

    m_deferral_schedule_nbr_isSet = false;
    m_deferral_schedule_nbr_isValid = false;

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_discount_amount_in_currency_isSet = false;
    m_discount_amount_in_currency_isValid = false;

    m_discount_percent_isSet = false;
    m_discount_percent_isValid = false;

    m_discount_unit_cost_isSet = false;
    m_discount_unit_cost_isValid = false;

    m_discount_unit_cost_in_currency_isSet = false;
    m_discount_unit_cost_in_currency_isValid = false;

    m_external_inventory_id_isSet = false;
    m_external_inventory_id_isValid = false;

    m_inventory_number_isSet = false;
    m_inventory_number_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_manual_discount_isSet = false;
    m_manual_discount_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_po_line_nr_isSet = false;
    m_po_line_nr_isValid = false;

    m_po_number_isSet = false;
    m_po_number_isValid = false;

    m_po_receipt_line_nbr_isSet = false;
    m_po_receipt_line_nbr_isValid = false;

    m_po_receipt_nbr_isSet = false;
    m_po_receipt_nbr_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_project_task_isSet = false;
    m_project_task_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_retainage_pct_isSet = false;
    m_retainage_pct_isValid = false;

    m_split_hierarchy_isSet = false;
    m_split_hierarchy_isValid = false;

    m_stock_item_isSet = false;
    m_stock_item_isValid = false;

    m_subaccount_isSet = false;
    m_subaccount_isValid = false;

    m_term_end_date_isSet = false;
    m_term_end_date_isValid = false;

    m_term_start_date_isSet = false;
    m_term_start_date_isValid = false;

    m_transaction_description_isSet = false;
    m_transaction_description_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_unit_cost_in_currency_isSet = false;
    m_unit_cost_in_currency_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;

    m_vat_code_isSet = false;
    m_vat_code_isValid = false;
}

void OAISupplierInvoiceLineDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupplierInvoiceLineDto::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_cost_in_currency_isValid = ::OpenAPI::fromJsonValue(m_cost_in_currency, json[QString("costInCurrency")]);
    m_cost_in_currency_isSet = !json[QString("costInCurrency")].isNull() && m_cost_in_currency_isValid;

    m_cury_retainage_amt_isValid = ::OpenAPI::fromJsonValue(m_cury_retainage_amt, json[QString("curyRetainageAmt")]);
    m_cury_retainage_amt_isSet = !json[QString("curyRetainageAmt")].isNull() && m_cury_retainage_amt_isValid;

    m_deferral_code_isValid = ::OpenAPI::fromJsonValue(m_deferral_code, json[QString("deferralCode")]);
    m_deferral_code_isSet = !json[QString("deferralCode")].isNull() && m_deferral_code_isValid;

    m_deferral_schedule_isValid = ::OpenAPI::fromJsonValue(m_deferral_schedule, json[QString("deferralSchedule")]);
    m_deferral_schedule_isSet = !json[QString("deferralSchedule")].isNull() && m_deferral_schedule_isValid;

    m_deferral_schedule_nbr_isValid = ::OpenAPI::fromJsonValue(m_deferral_schedule_nbr, json[QString("deferralScheduleNbr")]);
    m_deferral_schedule_nbr_isSet = !json[QString("deferralScheduleNbr")].isNull() && m_deferral_schedule_nbr_isValid;

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("discountAmount")]);
    m_discount_amount_isSet = !json[QString("discountAmount")].isNull() && m_discount_amount_isValid;

    m_discount_amount_in_currency_isValid = ::OpenAPI::fromJsonValue(m_discount_amount_in_currency, json[QString("discountAmountInCurrency")]);
    m_discount_amount_in_currency_isSet = !json[QString("discountAmountInCurrency")].isNull() && m_discount_amount_in_currency_isValid;

    m_discount_percent_isValid = ::OpenAPI::fromJsonValue(m_discount_percent, json[QString("discountPercent")]);
    m_discount_percent_isSet = !json[QString("discountPercent")].isNull() && m_discount_percent_isValid;

    m_discount_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_discount_unit_cost, json[QString("discountUnitCost")]);
    m_discount_unit_cost_isSet = !json[QString("discountUnitCost")].isNull() && m_discount_unit_cost_isValid;

    m_discount_unit_cost_in_currency_isValid = ::OpenAPI::fromJsonValue(m_discount_unit_cost_in_currency, json[QString("discountUnitCostInCurrency")]);
    m_discount_unit_cost_in_currency_isSet = !json[QString("discountUnitCostInCurrency")].isNull() && m_discount_unit_cost_in_currency_isValid;

    m_external_inventory_id_isValid = ::OpenAPI::fromJsonValue(m_external_inventory_id, json[QString("externalInventoryId")]);
    m_external_inventory_id_isSet = !json[QString("externalInventoryId")].isNull() && m_external_inventory_id_isValid;

    m_inventory_number_isValid = ::OpenAPI::fromJsonValue(m_inventory_number, json[QString("inventoryNumber")]);
    m_inventory_number_isSet = !json[QString("inventoryNumber")].isNull() && m_inventory_number_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("lineNumber")]);
    m_line_number_isSet = !json[QString("lineNumber")].isNull() && m_line_number_isValid;

    m_manual_discount_isValid = ::OpenAPI::fromJsonValue(m_manual_discount, json[QString("manualDiscount")]);
    m_manual_discount_isSet = !json[QString("manualDiscount")].isNull() && m_manual_discount_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_po_line_nr_isValid = ::OpenAPI::fromJsonValue(m_po_line_nr, json[QString("poLineNr")]);
    m_po_line_nr_isSet = !json[QString("poLineNr")].isNull() && m_po_line_nr_isValid;

    m_po_number_isValid = ::OpenAPI::fromJsonValue(m_po_number, json[QString("poNumber")]);
    m_po_number_isSet = !json[QString("poNumber")].isNull() && m_po_number_isValid;

    m_po_receipt_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_po_receipt_line_nbr, json[QString("poReceiptLineNbr")]);
    m_po_receipt_line_nbr_isSet = !json[QString("poReceiptLineNbr")].isNull() && m_po_receipt_line_nbr_isValid;

    m_po_receipt_nbr_isValid = ::OpenAPI::fromJsonValue(m_po_receipt_nbr, json[QString("poReceiptNbr")]);
    m_po_receipt_nbr_isSet = !json[QString("poReceiptNbr")].isNull() && m_po_receipt_nbr_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_project_task_isValid = ::OpenAPI::fromJsonValue(m_project_task, json[QString("projectTask")]);
    m_project_task_isSet = !json[QString("projectTask")].isNull() && m_project_task_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_retainage_pct_isValid = ::OpenAPI::fromJsonValue(m_retainage_pct, json[QString("retainagePct")]);
    m_retainage_pct_isSet = !json[QString("retainagePct")].isNull() && m_retainage_pct_isValid;

    m_split_hierarchy_isValid = ::OpenAPI::fromJsonValue(m_split_hierarchy, json[QString("splitHierarchy")]);
    m_split_hierarchy_isSet = !json[QString("splitHierarchy")].isNull() && m_split_hierarchy_isValid;

    m_stock_item_isValid = ::OpenAPI::fromJsonValue(m_stock_item, json[QString("stockItem")]);
    m_stock_item_isSet = !json[QString("stockItem")].isNull() && m_stock_item_isValid;

    m_subaccount_isValid = ::OpenAPI::fromJsonValue(m_subaccount, json[QString("subaccount")]);
    m_subaccount_isSet = !json[QString("subaccount")].isNull() && m_subaccount_isValid;

    m_term_end_date_isValid = ::OpenAPI::fromJsonValue(m_term_end_date, json[QString("termEndDate")]);
    m_term_end_date_isSet = !json[QString("termEndDate")].isNull() && m_term_end_date_isValid;

    m_term_start_date_isValid = ::OpenAPI::fromJsonValue(m_term_start_date, json[QString("termStartDate")]);
    m_term_start_date_isSet = !json[QString("termStartDate")].isNull() && m_term_start_date_isValid;

    m_transaction_description_isValid = ::OpenAPI::fromJsonValue(m_transaction_description, json[QString("transactionDescription")]);
    m_transaction_description_isSet = !json[QString("transactionDescription")].isNull() && m_transaction_description_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_unit_cost_in_currency_isValid = ::OpenAPI::fromJsonValue(m_unit_cost_in_currency, json[QString("unitCostInCurrency")]);
    m_unit_cost_in_currency_isSet = !json[QString("unitCostInCurrency")].isNull() && m_unit_cost_in_currency_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;

    m_vat_code_isValid = ::OpenAPI::fromJsonValue(m_vat_code, json[QString("vatCode")]);
    m_vat_code_isSet = !json[QString("vatCode")].isNull() && m_vat_code_isValid;
}

QString OAISupplierInvoiceLineDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupplierInvoiceLineDto::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_cost_in_currency_isSet) {
        obj.insert(QString("costInCurrency"), ::OpenAPI::toJsonValue(m_cost_in_currency));
    }
    if (m_cury_retainage_amt_isSet) {
        obj.insert(QString("curyRetainageAmt"), ::OpenAPI::toJsonValue(m_cury_retainage_amt));
    }
    if (m_deferral_code_isSet) {
        obj.insert(QString("deferralCode"), ::OpenAPI::toJsonValue(m_deferral_code));
    }
    if (m_deferral_schedule_isSet) {
        obj.insert(QString("deferralSchedule"), ::OpenAPI::toJsonValue(m_deferral_schedule));
    }
    if (m_deferral_schedule_nbr_isSet) {
        obj.insert(QString("deferralScheduleNbr"), ::OpenAPI::toJsonValue(m_deferral_schedule_nbr));
    }
    if (m_discount_amount_isSet) {
        obj.insert(QString("discountAmount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_discount_amount_in_currency_isSet) {
        obj.insert(QString("discountAmountInCurrency"), ::OpenAPI::toJsonValue(m_discount_amount_in_currency));
    }
    if (m_discount_percent_isSet) {
        obj.insert(QString("discountPercent"), ::OpenAPI::toJsonValue(m_discount_percent));
    }
    if (m_discount_unit_cost_isSet) {
        obj.insert(QString("discountUnitCost"), ::OpenAPI::toJsonValue(m_discount_unit_cost));
    }
    if (m_discount_unit_cost_in_currency_isSet) {
        obj.insert(QString("discountUnitCostInCurrency"), ::OpenAPI::toJsonValue(m_discount_unit_cost_in_currency));
    }
    if (m_external_inventory_id_isSet) {
        obj.insert(QString("externalInventoryId"), ::OpenAPI::toJsonValue(m_external_inventory_id));
    }
    if (m_inventory_number_isSet) {
        obj.insert(QString("inventoryNumber"), ::OpenAPI::toJsonValue(m_inventory_number));
    }
    if (m_line_number_isSet) {
        obj.insert(QString("lineNumber"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_manual_discount_isSet) {
        obj.insert(QString("manualDiscount"), ::OpenAPI::toJsonValue(m_manual_discount));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_po_line_nr_isSet) {
        obj.insert(QString("poLineNr"), ::OpenAPI::toJsonValue(m_po_line_nr));
    }
    if (m_po_number_isSet) {
        obj.insert(QString("poNumber"), ::OpenAPI::toJsonValue(m_po_number));
    }
    if (m_po_receipt_line_nbr_isSet) {
        obj.insert(QString("poReceiptLineNbr"), ::OpenAPI::toJsonValue(m_po_receipt_line_nbr));
    }
    if (m_po_receipt_nbr_isSet) {
        obj.insert(QString("poReceiptNbr"), ::OpenAPI::toJsonValue(m_po_receipt_nbr));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_project_task.isSet()) {
        obj.insert(QString("projectTask"), ::OpenAPI::toJsonValue(m_project_task));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_retainage_pct_isSet) {
        obj.insert(QString("retainagePct"), ::OpenAPI::toJsonValue(m_retainage_pct));
    }
    if (m_split_hierarchy_isSet) {
        obj.insert(QString("splitHierarchy"), ::OpenAPI::toJsonValue(m_split_hierarchy));
    }
    if (m_stock_item_isSet) {
        obj.insert(QString("stockItem"), ::OpenAPI::toJsonValue(m_stock_item));
    }
    if (m_subaccount.isSet()) {
        obj.insert(QString("subaccount"), ::OpenAPI::toJsonValue(m_subaccount));
    }
    if (m_term_end_date_isSet) {
        obj.insert(QString("termEndDate"), ::OpenAPI::toJsonValue(m_term_end_date));
    }
    if (m_term_start_date_isSet) {
        obj.insert(QString("termStartDate"), ::OpenAPI::toJsonValue(m_term_start_date));
    }
    if (m_transaction_description_isSet) {
        obj.insert(QString("transactionDescription"), ::OpenAPI::toJsonValue(m_transaction_description));
    }
    if (m_unit_cost_isSet) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_unit_cost_in_currency_isSet) {
        obj.insert(QString("unitCostInCurrency"), ::OpenAPI::toJsonValue(m_unit_cost_in_currency));
    }
    if (m_uom_isSet) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    if (m_vat_code.isSet()) {
        obj.insert(QString("vatCode"), ::OpenAPI::toJsonValue(m_vat_code));
    }
    return obj;
}

OAIAccountInSupplierInvoiceLineDto OAISupplierInvoiceLineDto::getAccount() const {
    return m_account;
}
void OAISupplierInvoiceLineDto::setAccount(const OAIAccountInSupplierInvoiceLineDto &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_account_Set() const{
    return m_account_isSet;
}

bool OAISupplierInvoiceLineDto::is_account_Valid() const{
    return m_account_isValid;
}

QList<OAIAttachmentDto> OAISupplierInvoiceLineDto::getAttachments() const {
    return m_attachments;
}
void OAISupplierInvoiceLineDto::setAttachments(const QList<OAIAttachmentDto> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAISupplierInvoiceLineDto::is_attachments_Valid() const{
    return m_attachments_isValid;
}

OAIBranchNumberInSupplierInvoiceLineDto OAISupplierInvoiceLineDto::getBranchNumber() const {
    return m_branch_number;
}
void OAISupplierInvoiceLineDto::setBranchNumber(const OAIBranchNumberInSupplierInvoiceLineDto &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAISupplierInvoiceLineDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

double OAISupplierInvoiceLineDto::getCost() const {
    return m_cost;
}
void OAISupplierInvoiceLineDto::setCost(const double &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAISupplierInvoiceLineDto::is_cost_Valid() const{
    return m_cost_isValid;
}

double OAISupplierInvoiceLineDto::getCostInCurrency() const {
    return m_cost_in_currency;
}
void OAISupplierInvoiceLineDto::setCostInCurrency(const double &cost_in_currency) {
    m_cost_in_currency = cost_in_currency;
    m_cost_in_currency_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_cost_in_currency_Set() const{
    return m_cost_in_currency_isSet;
}

bool OAISupplierInvoiceLineDto::is_cost_in_currency_Valid() const{
    return m_cost_in_currency_isValid;
}

double OAISupplierInvoiceLineDto::getCuryRetainageAmt() const {
    return m_cury_retainage_amt;
}
void OAISupplierInvoiceLineDto::setCuryRetainageAmt(const double &cury_retainage_amt) {
    m_cury_retainage_amt = cury_retainage_amt;
    m_cury_retainage_amt_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_cury_retainage_amt_Set() const{
    return m_cury_retainage_amt_isSet;
}

bool OAISupplierInvoiceLineDto::is_cury_retainage_amt_Valid() const{
    return m_cury_retainage_amt_isValid;
}

QString OAISupplierInvoiceLineDto::getDeferralCode() const {
    return m_deferral_code;
}
void OAISupplierInvoiceLineDto::setDeferralCode(const QString &deferral_code) {
    m_deferral_code = deferral_code;
    m_deferral_code_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_deferral_code_Set() const{
    return m_deferral_code_isSet;
}

bool OAISupplierInvoiceLineDto::is_deferral_code_Valid() const{
    return m_deferral_code_isValid;
}

qint32 OAISupplierInvoiceLineDto::getDeferralSchedule() const {
    return m_deferral_schedule;
}
void OAISupplierInvoiceLineDto::setDeferralSchedule(const qint32 &deferral_schedule) {
    m_deferral_schedule = deferral_schedule;
    m_deferral_schedule_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_deferral_schedule_Set() const{
    return m_deferral_schedule_isSet;
}

bool OAISupplierInvoiceLineDto::is_deferral_schedule_Valid() const{
    return m_deferral_schedule_isValid;
}

QString OAISupplierInvoiceLineDto::getDeferralScheduleNbr() const {
    return m_deferral_schedule_nbr;
}
void OAISupplierInvoiceLineDto::setDeferralScheduleNbr(const QString &deferral_schedule_nbr) {
    m_deferral_schedule_nbr = deferral_schedule_nbr;
    m_deferral_schedule_nbr_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_deferral_schedule_nbr_Set() const{
    return m_deferral_schedule_nbr_isSet;
}

bool OAISupplierInvoiceLineDto::is_deferral_schedule_nbr_Valid() const{
    return m_deferral_schedule_nbr_isValid;
}

double OAISupplierInvoiceLineDto::getDiscountAmount() const {
    return m_discount_amount;
}
void OAISupplierInvoiceLineDto::setDiscountAmount(const double &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAISupplierInvoiceLineDto::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

double OAISupplierInvoiceLineDto::getDiscountAmountInCurrency() const {
    return m_discount_amount_in_currency;
}
void OAISupplierInvoiceLineDto::setDiscountAmountInCurrency(const double &discount_amount_in_currency) {
    m_discount_amount_in_currency = discount_amount_in_currency;
    m_discount_amount_in_currency_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_discount_amount_in_currency_Set() const{
    return m_discount_amount_in_currency_isSet;
}

bool OAISupplierInvoiceLineDto::is_discount_amount_in_currency_Valid() const{
    return m_discount_amount_in_currency_isValid;
}

double OAISupplierInvoiceLineDto::getDiscountPercent() const {
    return m_discount_percent;
}
void OAISupplierInvoiceLineDto::setDiscountPercent(const double &discount_percent) {
    m_discount_percent = discount_percent;
    m_discount_percent_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_discount_percent_Set() const{
    return m_discount_percent_isSet;
}

bool OAISupplierInvoiceLineDto::is_discount_percent_Valid() const{
    return m_discount_percent_isValid;
}

double OAISupplierInvoiceLineDto::getDiscountUnitCost() const {
    return m_discount_unit_cost;
}
void OAISupplierInvoiceLineDto::setDiscountUnitCost(const double &discount_unit_cost) {
    m_discount_unit_cost = discount_unit_cost;
    m_discount_unit_cost_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_discount_unit_cost_Set() const{
    return m_discount_unit_cost_isSet;
}

bool OAISupplierInvoiceLineDto::is_discount_unit_cost_Valid() const{
    return m_discount_unit_cost_isValid;
}

double OAISupplierInvoiceLineDto::getDiscountUnitCostInCurrency() const {
    return m_discount_unit_cost_in_currency;
}
void OAISupplierInvoiceLineDto::setDiscountUnitCostInCurrency(const double &discount_unit_cost_in_currency) {
    m_discount_unit_cost_in_currency = discount_unit_cost_in_currency;
    m_discount_unit_cost_in_currency_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_discount_unit_cost_in_currency_Set() const{
    return m_discount_unit_cost_in_currency_isSet;
}

bool OAISupplierInvoiceLineDto::is_discount_unit_cost_in_currency_Valid() const{
    return m_discount_unit_cost_in_currency_isValid;
}

QString OAISupplierInvoiceLineDto::getExternalInventoryId() const {
    return m_external_inventory_id;
}
void OAISupplierInvoiceLineDto::setExternalInventoryId(const QString &external_inventory_id) {
    m_external_inventory_id = external_inventory_id;
    m_external_inventory_id_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_external_inventory_id_Set() const{
    return m_external_inventory_id_isSet;
}

bool OAISupplierInvoiceLineDto::is_external_inventory_id_Valid() const{
    return m_external_inventory_id_isValid;
}

QString OAISupplierInvoiceLineDto::getInventoryNumber() const {
    return m_inventory_number;
}
void OAISupplierInvoiceLineDto::setInventoryNumber(const QString &inventory_number) {
    m_inventory_number = inventory_number;
    m_inventory_number_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_inventory_number_Set() const{
    return m_inventory_number_isSet;
}

bool OAISupplierInvoiceLineDto::is_inventory_number_Valid() const{
    return m_inventory_number_isValid;
}

qint32 OAISupplierInvoiceLineDto::getLineNumber() const {
    return m_line_number;
}
void OAISupplierInvoiceLineDto::setLineNumber(const qint32 &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAISupplierInvoiceLineDto::is_line_number_Valid() const{
    return m_line_number_isValid;
}

bool OAISupplierInvoiceLineDto::isManualDiscount() const {
    return m_manual_discount;
}
void OAISupplierInvoiceLineDto::setManualDiscount(const bool &manual_discount) {
    m_manual_discount = manual_discount;
    m_manual_discount_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_manual_discount_Set() const{
    return m_manual_discount_isSet;
}

bool OAISupplierInvoiceLineDto::is_manual_discount_Valid() const{
    return m_manual_discount_isValid;
}

QString OAISupplierInvoiceLineDto::getNote() const {
    return m_note;
}
void OAISupplierInvoiceLineDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAISupplierInvoiceLineDto::is_note_Valid() const{
    return m_note_isValid;
}

qint32 OAISupplierInvoiceLineDto::getPoLineNr() const {
    return m_po_line_nr;
}
void OAISupplierInvoiceLineDto::setPoLineNr(const qint32 &po_line_nr) {
    m_po_line_nr = po_line_nr;
    m_po_line_nr_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_po_line_nr_Set() const{
    return m_po_line_nr_isSet;
}

bool OAISupplierInvoiceLineDto::is_po_line_nr_Valid() const{
    return m_po_line_nr_isValid;
}

QString OAISupplierInvoiceLineDto::getPoNumber() const {
    return m_po_number;
}
void OAISupplierInvoiceLineDto::setPoNumber(const QString &po_number) {
    m_po_number = po_number;
    m_po_number_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_po_number_Set() const{
    return m_po_number_isSet;
}

bool OAISupplierInvoiceLineDto::is_po_number_Valid() const{
    return m_po_number_isValid;
}

qint32 OAISupplierInvoiceLineDto::getPoReceiptLineNbr() const {
    return m_po_receipt_line_nbr;
}
void OAISupplierInvoiceLineDto::setPoReceiptLineNbr(const qint32 &po_receipt_line_nbr) {
    m_po_receipt_line_nbr = po_receipt_line_nbr;
    m_po_receipt_line_nbr_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_po_receipt_line_nbr_Set() const{
    return m_po_receipt_line_nbr_isSet;
}

bool OAISupplierInvoiceLineDto::is_po_receipt_line_nbr_Valid() const{
    return m_po_receipt_line_nbr_isValid;
}

QString OAISupplierInvoiceLineDto::getPoReceiptNbr() const {
    return m_po_receipt_nbr;
}
void OAISupplierInvoiceLineDto::setPoReceiptNbr(const QString &po_receipt_nbr) {
    m_po_receipt_nbr = po_receipt_nbr;
    m_po_receipt_nbr_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_po_receipt_nbr_Set() const{
    return m_po_receipt_nbr_isSet;
}

bool OAISupplierInvoiceLineDto::is_po_receipt_nbr_Valid() const{
    return m_po_receipt_nbr_isValid;
}

OAIProjectInSupplierInvoiceLineDto OAISupplierInvoiceLineDto::getProject() const {
    return m_project;
}
void OAISupplierInvoiceLineDto::setProject(const OAIProjectInSupplierInvoiceLineDto &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_project_Set() const{
    return m_project_isSet;
}

bool OAISupplierInvoiceLineDto::is_project_Valid() const{
    return m_project_isValid;
}

OAIProjectTaskInSupplierInvoiceLineDto OAISupplierInvoiceLineDto::getProjectTask() const {
    return m_project_task;
}
void OAISupplierInvoiceLineDto::setProjectTask(const OAIProjectTaskInSupplierInvoiceLineDto &project_task) {
    m_project_task = project_task;
    m_project_task_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_project_task_Set() const{
    return m_project_task_isSet;
}

bool OAISupplierInvoiceLineDto::is_project_task_Valid() const{
    return m_project_task_isValid;
}

double OAISupplierInvoiceLineDto::getQuantity() const {
    return m_quantity;
}
void OAISupplierInvoiceLineDto::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAISupplierInvoiceLineDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

double OAISupplierInvoiceLineDto::getRetainagePct() const {
    return m_retainage_pct;
}
void OAISupplierInvoiceLineDto::setRetainagePct(const double &retainage_pct) {
    m_retainage_pct = retainage_pct;
    m_retainage_pct_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_retainage_pct_Set() const{
    return m_retainage_pct_isSet;
}

bool OAISupplierInvoiceLineDto::is_retainage_pct_Valid() const{
    return m_retainage_pct_isValid;
}

QString OAISupplierInvoiceLineDto::getSplitHierarchy() const {
    return m_split_hierarchy;
}
void OAISupplierInvoiceLineDto::setSplitHierarchy(const QString &split_hierarchy) {
    m_split_hierarchy = split_hierarchy;
    m_split_hierarchy_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_split_hierarchy_Set() const{
    return m_split_hierarchy_isSet;
}

bool OAISupplierInvoiceLineDto::is_split_hierarchy_Valid() const{
    return m_split_hierarchy_isValid;
}

bool OAISupplierInvoiceLineDto::isStockItem() const {
    return m_stock_item;
}
void OAISupplierInvoiceLineDto::setStockItem(const bool &stock_item) {
    m_stock_item = stock_item;
    m_stock_item_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_stock_item_Set() const{
    return m_stock_item_isSet;
}

bool OAISupplierInvoiceLineDto::is_stock_item_Valid() const{
    return m_stock_item_isValid;
}

OAISubaccountInSupplierInvoiceLineDto OAISupplierInvoiceLineDto::getSubaccount() const {
    return m_subaccount;
}
void OAISupplierInvoiceLineDto::setSubaccount(const OAISubaccountInSupplierInvoiceLineDto &subaccount) {
    m_subaccount = subaccount;
    m_subaccount_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_subaccount_Set() const{
    return m_subaccount_isSet;
}

bool OAISupplierInvoiceLineDto::is_subaccount_Valid() const{
    return m_subaccount_isValid;
}

QDateTime OAISupplierInvoiceLineDto::getTermEndDate() const {
    return m_term_end_date;
}
void OAISupplierInvoiceLineDto::setTermEndDate(const QDateTime &term_end_date) {
    m_term_end_date = term_end_date;
    m_term_end_date_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_term_end_date_Set() const{
    return m_term_end_date_isSet;
}

bool OAISupplierInvoiceLineDto::is_term_end_date_Valid() const{
    return m_term_end_date_isValid;
}

QDateTime OAISupplierInvoiceLineDto::getTermStartDate() const {
    return m_term_start_date;
}
void OAISupplierInvoiceLineDto::setTermStartDate(const QDateTime &term_start_date) {
    m_term_start_date = term_start_date;
    m_term_start_date_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_term_start_date_Set() const{
    return m_term_start_date_isSet;
}

bool OAISupplierInvoiceLineDto::is_term_start_date_Valid() const{
    return m_term_start_date_isValid;
}

QString OAISupplierInvoiceLineDto::getTransactionDescription() const {
    return m_transaction_description;
}
void OAISupplierInvoiceLineDto::setTransactionDescription(const QString &transaction_description) {
    m_transaction_description = transaction_description;
    m_transaction_description_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_transaction_description_Set() const{
    return m_transaction_description_isSet;
}

bool OAISupplierInvoiceLineDto::is_transaction_description_Valid() const{
    return m_transaction_description_isValid;
}

double OAISupplierInvoiceLineDto::getUnitCost() const {
    return m_unit_cost;
}
void OAISupplierInvoiceLineDto::setUnitCost(const double &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAISupplierInvoiceLineDto::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

double OAISupplierInvoiceLineDto::getUnitCostInCurrency() const {
    return m_unit_cost_in_currency;
}
void OAISupplierInvoiceLineDto::setUnitCostInCurrency(const double &unit_cost_in_currency) {
    m_unit_cost_in_currency = unit_cost_in_currency;
    m_unit_cost_in_currency_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_unit_cost_in_currency_Set() const{
    return m_unit_cost_in_currency_isSet;
}

bool OAISupplierInvoiceLineDto::is_unit_cost_in_currency_Valid() const{
    return m_unit_cost_in_currency_isValid;
}

QString OAISupplierInvoiceLineDto::getUom() const {
    return m_uom;
}
void OAISupplierInvoiceLineDto::setUom(const QString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAISupplierInvoiceLineDto::is_uom_Valid() const{
    return m_uom_isValid;
}

OAIVatCodeInSupplierInvoiceLineDto OAISupplierInvoiceLineDto::getVatCode() const {
    return m_vat_code;
}
void OAISupplierInvoiceLineDto::setVatCode(const OAIVatCodeInSupplierInvoiceLineDto &vat_code) {
    m_vat_code = vat_code;
    m_vat_code_isSet = true;
}

bool OAISupplierInvoiceLineDto::is_vat_code_Set() const{
    return m_vat_code_isSet;
}

bool OAISupplierInvoiceLineDto::is_vat_code_Valid() const{
    return m_vat_code_isValid;
}

bool OAISupplierInvoiceLineDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cury_retainage_amt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deferral_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deferral_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deferral_schedule_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_unit_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_unit_cost_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_inventory_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_line_nr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_receipt_line_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_receipt_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retainage_pct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_split_hierarchy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_code.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupplierInvoiceLineDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
