/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerOverdueChargeLineUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerOverdueChargeLineUpdateDto::OAICustomerOverdueChargeLineUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerOverdueChargeLineUpdateDto::OAICustomerOverdueChargeLineUpdateDto() {
    this->initializeModel();
}

OAICustomerOverdueChargeLineUpdateDto::~OAICustomerOverdueChargeLineUpdateDto() {}

void OAICustomerOverdueChargeLineUpdateDto::initializeModel() {

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_deferral_code_isSet = false;
    m_deferral_code_isValid = false;

    m_deferral_schedule_isSet = false;
    m_deferral_schedule_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discount_amount_in_currency_isSet = false;
    m_discount_amount_in_currency_isValid = false;

    m_discount_code_isSet = false;
    m_discount_code_isValid = false;

    m_discount_percent_isSet = false;
    m_discount_percent_isValid = false;

    m_domestic_services_deductible_isSet = false;
    m_domestic_services_deductible_isValid = false;

    m_inventory_number_isSet = false;
    m_inventory_number_isValid = false;

    m_item_type_isSet = false;
    m_item_type_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_manual_amount_in_currency_isSet = false;
    m_manual_amount_in_currency_isValid = false;

    m_manual_discount_isSet = false;
    m_manual_discount_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_salesperson_isSet = false;
    m_salesperson_isValid = false;

    m_subaccount_isSet = false;
    m_subaccount_isValid = false;

    m_term_end_date_isSet = false;
    m_term_end_date_isValid = false;

    m_term_start_date_isSet = false;
    m_term_start_date_isValid = false;

    m_type_of_work_isSet = false;
    m_type_of_work_isValid = false;

    m_unit_price_in_currency_isSet = false;
    m_unit_price_in_currency_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;

    m_vat_code_id_isSet = false;
    m_vat_code_id_isValid = false;
}

void OAICustomerOverdueChargeLineUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerOverdueChargeLineUpdateDto::fromJsonObject(QJsonObject json) {

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("accountNumber")]);
    m_account_number_isSet = !json[QString("accountNumber")].isNull() && m_account_number_isValid;

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_deferral_code_isValid = ::OpenAPI::fromJsonValue(m_deferral_code, json[QString("deferralCode")]);
    m_deferral_code_isSet = !json[QString("deferralCode")].isNull() && m_deferral_code_isValid;

    m_deferral_schedule_isValid = ::OpenAPI::fromJsonValue(m_deferral_schedule, json[QString("deferralSchedule")]);
    m_deferral_schedule_isSet = !json[QString("deferralSchedule")].isNull() && m_deferral_schedule_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discount_amount_in_currency_isValid = ::OpenAPI::fromJsonValue(m_discount_amount_in_currency, json[QString("discountAmountInCurrency")]);
    m_discount_amount_in_currency_isSet = !json[QString("discountAmountInCurrency")].isNull() && m_discount_amount_in_currency_isValid;

    m_discount_code_isValid = ::OpenAPI::fromJsonValue(m_discount_code, json[QString("discountCode")]);
    m_discount_code_isSet = !json[QString("discountCode")].isNull() && m_discount_code_isValid;

    m_discount_percent_isValid = ::OpenAPI::fromJsonValue(m_discount_percent, json[QString("discountPercent")]);
    m_discount_percent_isSet = !json[QString("discountPercent")].isNull() && m_discount_percent_isValid;

    m_domestic_services_deductible_isValid = ::OpenAPI::fromJsonValue(m_domestic_services_deductible, json[QString("domesticServicesDeductible")]);
    m_domestic_services_deductible_isSet = !json[QString("domesticServicesDeductible")].isNull() && m_domestic_services_deductible_isValid;

    m_inventory_number_isValid = ::OpenAPI::fromJsonValue(m_inventory_number, json[QString("inventoryNumber")]);
    m_inventory_number_isSet = !json[QString("inventoryNumber")].isNull() && m_inventory_number_isValid;

    m_item_type_isValid = ::OpenAPI::fromJsonValue(m_item_type, json[QString("itemType")]);
    m_item_type_isSet = !json[QString("itemType")].isNull() && m_item_type_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("lineNumber")]);
    m_line_number_isSet = !json[QString("lineNumber")].isNull() && m_line_number_isValid;

    m_manual_amount_in_currency_isValid = ::OpenAPI::fromJsonValue(m_manual_amount_in_currency, json[QString("manualAmountInCurrency")]);
    m_manual_amount_in_currency_isSet = !json[QString("manualAmountInCurrency")].isNull() && m_manual_amount_in_currency_isValid;

    m_manual_discount_isValid = ::OpenAPI::fromJsonValue(m_manual_discount, json[QString("manualDiscount")]);
    m_manual_discount_isSet = !json[QString("manualDiscount")].isNull() && m_manual_discount_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_salesperson_isValid = ::OpenAPI::fromJsonValue(m_salesperson, json[QString("salesperson")]);
    m_salesperson_isSet = !json[QString("salesperson")].isNull() && m_salesperson_isValid;

    m_subaccount_isValid = ::OpenAPI::fromJsonValue(m_subaccount, json[QString("subaccount")]);
    m_subaccount_isSet = !json[QString("subaccount")].isNull() && m_subaccount_isValid;

    m_term_end_date_isValid = ::OpenAPI::fromJsonValue(m_term_end_date, json[QString("termEndDate")]);
    m_term_end_date_isSet = !json[QString("termEndDate")].isNull() && m_term_end_date_isValid;

    m_term_start_date_isValid = ::OpenAPI::fromJsonValue(m_term_start_date, json[QString("termStartDate")]);
    m_term_start_date_isSet = !json[QString("termStartDate")].isNull() && m_term_start_date_isValid;

    m_type_of_work_isValid = ::OpenAPI::fromJsonValue(m_type_of_work, json[QString("typeOfWork")]);
    m_type_of_work_isSet = !json[QString("typeOfWork")].isNull() && m_type_of_work_isValid;

    m_unit_price_in_currency_isValid = ::OpenAPI::fromJsonValue(m_unit_price_in_currency, json[QString("unitPriceInCurrency")]);
    m_unit_price_in_currency_isSet = !json[QString("unitPriceInCurrency")].isNull() && m_unit_price_in_currency_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;

    m_vat_code_id_isValid = ::OpenAPI::fromJsonValue(m_vat_code_id, json[QString("vatCodeId")]);
    m_vat_code_id_isSet = !json[QString("vatCodeId")].isNull() && m_vat_code_id_isValid;
}

QString OAICustomerOverdueChargeLineUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerOverdueChargeLineUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_account_number.isSet()) {
        obj.insert(QString("accountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_deferral_code.isSet()) {
        obj.insert(QString("deferralCode"), ::OpenAPI::toJsonValue(m_deferral_code));
    }
    if (m_deferral_schedule.isSet()) {
        obj.insert(QString("deferralSchedule"), ::OpenAPI::toJsonValue(m_deferral_schedule));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discount_amount_in_currency.isSet()) {
        obj.insert(QString("discountAmountInCurrency"), ::OpenAPI::toJsonValue(m_discount_amount_in_currency));
    }
    if (m_discount_code.isSet()) {
        obj.insert(QString("discountCode"), ::OpenAPI::toJsonValue(m_discount_code));
    }
    if (m_discount_percent.isSet()) {
        obj.insert(QString("discountPercent"), ::OpenAPI::toJsonValue(m_discount_percent));
    }
    if (m_domestic_services_deductible.isSet()) {
        obj.insert(QString("domesticServicesDeductible"), ::OpenAPI::toJsonValue(m_domestic_services_deductible));
    }
    if (m_inventory_number.isSet()) {
        obj.insert(QString("inventoryNumber"), ::OpenAPI::toJsonValue(m_inventory_number));
    }
    if (m_item_type.isSet()) {
        obj.insert(QString("itemType"), ::OpenAPI::toJsonValue(m_item_type));
    }
    if (m_line_number.isSet()) {
        obj.insert(QString("lineNumber"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_manual_amount_in_currency.isSet()) {
        obj.insert(QString("manualAmountInCurrency"), ::OpenAPI::toJsonValue(m_manual_amount_in_currency));
    }
    if (m_manual_discount.isSet()) {
        obj.insert(QString("manualDiscount"), ::OpenAPI::toJsonValue(m_manual_discount));
    }
    if (m_note.isSet()) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_quantity.isSet()) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_salesperson.isSet()) {
        obj.insert(QString("salesperson"), ::OpenAPI::toJsonValue(m_salesperson));
    }
    if (m_subaccount.size() > 0) {
        obj.insert(QString("subaccount"), ::OpenAPI::toJsonValue(m_subaccount));
    }
    if (m_term_end_date.isSet()) {
        obj.insert(QString("termEndDate"), ::OpenAPI::toJsonValue(m_term_end_date));
    }
    if (m_term_start_date.isSet()) {
        obj.insert(QString("termStartDate"), ::OpenAPI::toJsonValue(m_term_start_date));
    }
    if (m_type_of_work.isSet()) {
        obj.insert(QString("typeOfWork"), ::OpenAPI::toJsonValue(m_type_of_work));
    }
    if (m_unit_price_in_currency.isSet()) {
        obj.insert(QString("unitPriceInCurrency"), ::OpenAPI::toJsonValue(m_unit_price_in_currency));
    }
    if (m_uom.isSet()) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    if (m_vat_code_id.isSet()) {
        obj.insert(QString("vatCodeId"), ::OpenAPI::toJsonValue(m_vat_code_id));
    }
    return obj;
}

OAIDtoValueOfString OAICustomerOverdueChargeLineUpdateDto::getAccountNumber() const {
    return m_account_number;
}
void OAICustomerOverdueChargeLineUpdateDto::setAccountNumber(const OAIDtoValueOfString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_account_number_Valid() const{
    return m_account_number_isValid;
}

OAIDtoValueOfString OAICustomerOverdueChargeLineUpdateDto::getBranchNumber() const {
    return m_branch_number;
}
void OAICustomerOverdueChargeLineUpdateDto::setBranchNumber(const OAIDtoValueOfString &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

OAIDtoValueOfString OAICustomerOverdueChargeLineUpdateDto::getDeferralCode() const {
    return m_deferral_code;
}
void OAICustomerOverdueChargeLineUpdateDto::setDeferralCode(const OAIDtoValueOfString &deferral_code) {
    m_deferral_code = deferral_code;
    m_deferral_code_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_deferral_code_Set() const{
    return m_deferral_code_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_deferral_code_Valid() const{
    return m_deferral_code_isValid;
}

OAIDtoValueOfInt32 OAICustomerOverdueChargeLineUpdateDto::getDeferralSchedule() const {
    return m_deferral_schedule;
}
void OAICustomerOverdueChargeLineUpdateDto::setDeferralSchedule(const OAIDtoValueOfInt32 &deferral_schedule) {
    m_deferral_schedule = deferral_schedule;
    m_deferral_schedule_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_deferral_schedule_Set() const{
    return m_deferral_schedule_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_deferral_schedule_Valid() const{
    return m_deferral_schedule_isValid;
}

OAIDtoValueOfString OAICustomerOverdueChargeLineUpdateDto::getDescription() const {
    return m_description;
}
void OAICustomerOverdueChargeLineUpdateDto::setDescription(const OAIDtoValueOfString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIDtoValueOfDecimal OAICustomerOverdueChargeLineUpdateDto::getDiscountAmountInCurrency() const {
    return m_discount_amount_in_currency;
}
void OAICustomerOverdueChargeLineUpdateDto::setDiscountAmountInCurrency(const OAIDtoValueOfDecimal &discount_amount_in_currency) {
    m_discount_amount_in_currency = discount_amount_in_currency;
    m_discount_amount_in_currency_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_discount_amount_in_currency_Set() const{
    return m_discount_amount_in_currency_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_discount_amount_in_currency_Valid() const{
    return m_discount_amount_in_currency_isValid;
}

OAIDtoValueOfString OAICustomerOverdueChargeLineUpdateDto::getDiscountCode() const {
    return m_discount_code;
}
void OAICustomerOverdueChargeLineUpdateDto::setDiscountCode(const OAIDtoValueOfString &discount_code) {
    m_discount_code = discount_code;
    m_discount_code_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_discount_code_Set() const{
    return m_discount_code_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_discount_code_Valid() const{
    return m_discount_code_isValid;
}

OAIDtoValueOfDecimal OAICustomerOverdueChargeLineUpdateDto::getDiscountPercent() const {
    return m_discount_percent;
}
void OAICustomerOverdueChargeLineUpdateDto::setDiscountPercent(const OAIDtoValueOfDecimal &discount_percent) {
    m_discount_percent = discount_percent;
    m_discount_percent_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_discount_percent_Set() const{
    return m_discount_percent_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_discount_percent_Valid() const{
    return m_discount_percent_isValid;
}

OAIDtoValueOfNullableOfBoolean OAICustomerOverdueChargeLineUpdateDto::getDomesticServicesDeductible() const {
    return m_domestic_services_deductible;
}
void OAICustomerOverdueChargeLineUpdateDto::setDomesticServicesDeductible(const OAIDtoValueOfNullableOfBoolean &domestic_services_deductible) {
    m_domestic_services_deductible = domestic_services_deductible;
    m_domestic_services_deductible_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_domestic_services_deductible_Set() const{
    return m_domestic_services_deductible_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_domestic_services_deductible_Valid() const{
    return m_domestic_services_deductible_isValid;
}

OAIDtoValueOfString OAICustomerOverdueChargeLineUpdateDto::getInventoryNumber() const {
    return m_inventory_number;
}
void OAICustomerOverdueChargeLineUpdateDto::setInventoryNumber(const OAIDtoValueOfString &inventory_number) {
    m_inventory_number = inventory_number;
    m_inventory_number_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_inventory_number_Set() const{
    return m_inventory_number_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_inventory_number_Valid() const{
    return m_inventory_number_isValid;
}

OAIDtoValueOfNullableOfRutRotItemTypes OAICustomerOverdueChargeLineUpdateDto::getItemType() const {
    return m_item_type;
}
void OAICustomerOverdueChargeLineUpdateDto::setItemType(const OAIDtoValueOfNullableOfRutRotItemTypes &item_type) {
    m_item_type = item_type;
    m_item_type_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_item_type_Set() const{
    return m_item_type_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_item_type_Valid() const{
    return m_item_type_isValid;
}

OAIDtoValueOfInt32 OAICustomerOverdueChargeLineUpdateDto::getLineNumber() const {
    return m_line_number;
}
void OAICustomerOverdueChargeLineUpdateDto::setLineNumber(const OAIDtoValueOfInt32 &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_line_number_Valid() const{
    return m_line_number_isValid;
}

OAIDtoValueOfDecimal OAICustomerOverdueChargeLineUpdateDto::getManualAmountInCurrency() const {
    return m_manual_amount_in_currency;
}
void OAICustomerOverdueChargeLineUpdateDto::setManualAmountInCurrency(const OAIDtoValueOfDecimal &manual_amount_in_currency) {
    m_manual_amount_in_currency = manual_amount_in_currency;
    m_manual_amount_in_currency_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_manual_amount_in_currency_Set() const{
    return m_manual_amount_in_currency_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_manual_amount_in_currency_Valid() const{
    return m_manual_amount_in_currency_isValid;
}

OAIDtoValueOfBoolean OAICustomerOverdueChargeLineUpdateDto::getManualDiscount() const {
    return m_manual_discount;
}
void OAICustomerOverdueChargeLineUpdateDto::setManualDiscount(const OAIDtoValueOfBoolean &manual_discount) {
    m_manual_discount = manual_discount;
    m_manual_discount_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_manual_discount_Set() const{
    return m_manual_discount_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_manual_discount_Valid() const{
    return m_manual_discount_isValid;
}

OAIDtoValueOfString OAICustomerOverdueChargeLineUpdateDto::getNote() const {
    return m_note;
}
void OAICustomerOverdueChargeLineUpdateDto::setNote(const OAIDtoValueOfString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_note_Valid() const{
    return m_note_isValid;
}

QString OAICustomerOverdueChargeLineUpdateDto::getOperation() const {
    return m_operation;
}
void OAICustomerOverdueChargeLineUpdateDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIDtoValueOfDecimal OAICustomerOverdueChargeLineUpdateDto::getQuantity() const {
    return m_quantity;
}
void OAICustomerOverdueChargeLineUpdateDto::setQuantity(const OAIDtoValueOfDecimal &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIDtoValueOfString OAICustomerOverdueChargeLineUpdateDto::getSalesperson() const {
    return m_salesperson;
}
void OAICustomerOverdueChargeLineUpdateDto::setSalesperson(const OAIDtoValueOfString &salesperson) {
    m_salesperson = salesperson;
    m_salesperson_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_salesperson_Set() const{
    return m_salesperson_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_salesperson_Valid() const{
    return m_salesperson_isValid;
}

QList<OAISegmentUpdateDto> OAICustomerOverdueChargeLineUpdateDto::getSubaccount() const {
    return m_subaccount;
}
void OAICustomerOverdueChargeLineUpdateDto::setSubaccount(const QList<OAISegmentUpdateDto> &subaccount) {
    m_subaccount = subaccount;
    m_subaccount_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_subaccount_Set() const{
    return m_subaccount_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_subaccount_Valid() const{
    return m_subaccount_isValid;
}

OAIDtoValueOfDateTime OAICustomerOverdueChargeLineUpdateDto::getTermEndDate() const {
    return m_term_end_date;
}
void OAICustomerOverdueChargeLineUpdateDto::setTermEndDate(const OAIDtoValueOfDateTime &term_end_date) {
    m_term_end_date = term_end_date;
    m_term_end_date_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_term_end_date_Set() const{
    return m_term_end_date_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_term_end_date_Valid() const{
    return m_term_end_date_isValid;
}

OAIDtoValueOfDateTime OAICustomerOverdueChargeLineUpdateDto::getTermStartDate() const {
    return m_term_start_date;
}
void OAICustomerOverdueChargeLineUpdateDto::setTermStartDate(const OAIDtoValueOfDateTime &term_start_date) {
    m_term_start_date = term_start_date;
    m_term_start_date_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_term_start_date_Set() const{
    return m_term_start_date_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_term_start_date_Valid() const{
    return m_term_start_date_isValid;
}

OAIDtoValueOfString OAICustomerOverdueChargeLineUpdateDto::getTypeOfWork() const {
    return m_type_of_work;
}
void OAICustomerOverdueChargeLineUpdateDto::setTypeOfWork(const OAIDtoValueOfString &type_of_work) {
    m_type_of_work = type_of_work;
    m_type_of_work_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_type_of_work_Set() const{
    return m_type_of_work_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_type_of_work_Valid() const{
    return m_type_of_work_isValid;
}

OAIDtoValueOfDecimal OAICustomerOverdueChargeLineUpdateDto::getUnitPriceInCurrency() const {
    return m_unit_price_in_currency;
}
void OAICustomerOverdueChargeLineUpdateDto::setUnitPriceInCurrency(const OAIDtoValueOfDecimal &unit_price_in_currency) {
    m_unit_price_in_currency = unit_price_in_currency;
    m_unit_price_in_currency_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_unit_price_in_currency_Set() const{
    return m_unit_price_in_currency_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_unit_price_in_currency_Valid() const{
    return m_unit_price_in_currency_isValid;
}

OAIDtoValueOfString OAICustomerOverdueChargeLineUpdateDto::getUom() const {
    return m_uom;
}
void OAICustomerOverdueChargeLineUpdateDto::setUom(const OAIDtoValueOfString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_uom_Valid() const{
    return m_uom_isValid;
}

OAIDtoValueOfString OAICustomerOverdueChargeLineUpdateDto::getVatCodeId() const {
    return m_vat_code_id;
}
void OAICustomerOverdueChargeLineUpdateDto::setVatCodeId(const OAIDtoValueOfString &vat_code_id) {
    m_vat_code_id = vat_code_id;
    m_vat_code_id_isSet = true;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_vat_code_id_Set() const{
    return m_vat_code_id_isSet;
}

bool OAICustomerOverdueChargeLineUpdateDto::is_vat_code_id_Valid() const{
    return m_vat_code_id_isValid;
}

bool OAICustomerOverdueChargeLineUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deferral_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deferral_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount_in_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_percent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domestic_services_deductible.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_amount_in_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_discount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_salesperson.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_end_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_start_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_of_work.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price_in_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_code_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerOverdueChargeLineUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
