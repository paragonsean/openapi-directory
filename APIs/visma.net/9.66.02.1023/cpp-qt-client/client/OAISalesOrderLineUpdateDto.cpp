/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesOrderLineUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesOrderLineUpdateDto::OAISalesOrderLineUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesOrderLineUpdateDto::OAISalesOrderLineUpdateDto() {
    this->initializeModel();
}

OAISalesOrderLineUpdateDto::~OAISalesOrderLineUpdateDto() {}

void OAISalesOrderLineUpdateDto::initializeModel() {

    m_alternate_id_isSet = false;
    m_alternate_id_isValid = false;

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_commissionable_isSet = false;
    m_commissionable_isValid = false;

    m_completed_isSet = false;
    m_completed_isValid = false;

    m_disc_unit_price_isSet = false;
    m_disc_unit_price_isValid = false;

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_discount_code_isSet = false;
    m_discount_code_isValid = false;

    m_discount_percent_isSet = false;
    m_discount_percent_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_external_link_isSet = false;
    m_external_link_isValid = false;

    m_free_item_isSet = false;
    m_free_item_isValid = false;

    m_inventory_id_isSet = false;
    m_inventory_id_isValid = false;

    m_inventory_number_isSet = false;
    m_inventory_number_isValid = false;

    m_invoice_nbr_isSet = false;
    m_invoice_nbr_isValid = false;

    m_is_rot_rut_deductible_isSet = false;
    m_is_rot_rut_deductible_isValid = false;

    m_line_description_isSet = false;
    m_line_description_isValid = false;

    m_line_nbr_isSet = false;
    m_line_nbr_isValid = false;

    m_lot_serial_nbr_isSet = false;
    m_lot_serial_nbr_isValid = false;

    m_manual_discount_isSet = false;
    m_manual_discount_isValid = false;

    m_mark_for_po_isSet = false;
    m_mark_for_po_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_overship_threshold_isSet = false;
    m_overship_threshold_isValid = false;

    m_po_source_isSet = false;
    m_po_source_isValid = false;

    m_project_task_isSet = false;
    m_project_task_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;

    m_requested_on_isSet = false;
    m_requested_on_isValid = false;

    m_sales_order_operation_isSet = false;
    m_sales_order_operation_isValid = false;

    m_sales_person_isSet = false;
    m_sales_person_isValid = false;

    m_ship_complete_isSet = false;
    m_ship_complete_isValid = false;

    m_ship_on_isSet = false;
    m_ship_on_isValid = false;

    m_subaccount_isSet = false;
    m_subaccount_isValid = false;

    m_tax_category_isSet = false;
    m_tax_category_isValid = false;

    m_undership_threshold_isSet = false;
    m_undership_threshold_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;

    m_warehouse_isSet = false;
    m_warehouse_isValid = false;
}

void OAISalesOrderLineUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesOrderLineUpdateDto::fromJsonObject(QJsonObject json) {

    m_alternate_id_isValid = ::OpenAPI::fromJsonValue(m_alternate_id, json[QString("alternateID")]);
    m_alternate_id_isSet = !json[QString("alternateID")].isNull() && m_alternate_id_isValid;

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_commissionable_isValid = ::OpenAPI::fromJsonValue(m_commissionable, json[QString("commissionable")]);
    m_commissionable_isSet = !json[QString("commissionable")].isNull() && m_commissionable_isValid;

    m_completed_isValid = ::OpenAPI::fromJsonValue(m_completed, json[QString("completed")]);
    m_completed_isSet = !json[QString("completed")].isNull() && m_completed_isValid;

    m_disc_unit_price_isValid = ::OpenAPI::fromJsonValue(m_disc_unit_price, json[QString("discUnitPrice")]);
    m_disc_unit_price_isSet = !json[QString("discUnitPrice")].isNull() && m_disc_unit_price_isValid;

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("discountAmount")]);
    m_discount_amount_isSet = !json[QString("discountAmount")].isNull() && m_discount_amount_isValid;

    m_discount_code_isValid = ::OpenAPI::fromJsonValue(m_discount_code, json[QString("discountCode")]);
    m_discount_code_isSet = !json[QString("discountCode")].isNull() && m_discount_code_isValid;

    m_discount_percent_isValid = ::OpenAPI::fromJsonValue(m_discount_percent, json[QString("discountPercent")]);
    m_discount_percent_isSet = !json[QString("discountPercent")].isNull() && m_discount_percent_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_external_link_isValid = ::OpenAPI::fromJsonValue(m_external_link, json[QString("externalLink")]);
    m_external_link_isSet = !json[QString("externalLink")].isNull() && m_external_link_isValid;

    m_free_item_isValid = ::OpenAPI::fromJsonValue(m_free_item, json[QString("freeItem")]);
    m_free_item_isSet = !json[QString("freeItem")].isNull() && m_free_item_isValid;

    m_inventory_id_isValid = ::OpenAPI::fromJsonValue(m_inventory_id, json[QString("inventoryId")]);
    m_inventory_id_isSet = !json[QString("inventoryId")].isNull() && m_inventory_id_isValid;

    m_inventory_number_isValid = ::OpenAPI::fromJsonValue(m_inventory_number, json[QString("inventoryNumber")]);
    m_inventory_number_isSet = !json[QString("inventoryNumber")].isNull() && m_inventory_number_isValid;

    m_invoice_nbr_isValid = ::OpenAPI::fromJsonValue(m_invoice_nbr, json[QString("invoiceNbr")]);
    m_invoice_nbr_isSet = !json[QString("invoiceNbr")].isNull() && m_invoice_nbr_isValid;

    m_is_rot_rut_deductible_isValid = ::OpenAPI::fromJsonValue(m_is_rot_rut_deductible, json[QString("isRotRutDeductible")]);
    m_is_rot_rut_deductible_isSet = !json[QString("isRotRutDeductible")].isNull() && m_is_rot_rut_deductible_isValid;

    m_line_description_isValid = ::OpenAPI::fromJsonValue(m_line_description, json[QString("lineDescription")]);
    m_line_description_isSet = !json[QString("lineDescription")].isNull() && m_line_description_isValid;

    m_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_line_nbr, json[QString("lineNbr")]);
    m_line_nbr_isSet = !json[QString("lineNbr")].isNull() && m_line_nbr_isValid;

    m_lot_serial_nbr_isValid = ::OpenAPI::fromJsonValue(m_lot_serial_nbr, json[QString("lotSerialNbr")]);
    m_lot_serial_nbr_isSet = !json[QString("lotSerialNbr")].isNull() && m_lot_serial_nbr_isValid;

    m_manual_discount_isValid = ::OpenAPI::fromJsonValue(m_manual_discount, json[QString("manualDiscount")]);
    m_manual_discount_isSet = !json[QString("manualDiscount")].isNull() && m_manual_discount_isValid;

    m_mark_for_po_isValid = ::OpenAPI::fromJsonValue(m_mark_for_po, json[QString("markForPO")]);
    m_mark_for_po_isSet = !json[QString("markForPO")].isNull() && m_mark_for_po_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_overship_threshold_isValid = ::OpenAPI::fromJsonValue(m_overship_threshold, json[QString("overshipThreshold")]);
    m_overship_threshold_isSet = !json[QString("overshipThreshold")].isNull() && m_overship_threshold_isValid;

    m_po_source_isValid = ::OpenAPI::fromJsonValue(m_po_source, json[QString("poSource")]);
    m_po_source_isSet = !json[QString("poSource")].isNull() && m_po_source_isValid;

    m_project_task_isValid = ::OpenAPI::fromJsonValue(m_project_task, json[QString("projectTask")]);
    m_project_task_isSet = !json[QString("projectTask")].isNull() && m_project_task_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("reasonCode")]);
    m_reason_code_isSet = !json[QString("reasonCode")].isNull() && m_reason_code_isValid;

    m_requested_on_isValid = ::OpenAPI::fromJsonValue(m_requested_on, json[QString("requestedOn")]);
    m_requested_on_isSet = !json[QString("requestedOn")].isNull() && m_requested_on_isValid;

    m_sales_order_operation_isValid = ::OpenAPI::fromJsonValue(m_sales_order_operation, json[QString("salesOrderOperation")]);
    m_sales_order_operation_isSet = !json[QString("salesOrderOperation")].isNull() && m_sales_order_operation_isValid;

    m_sales_person_isValid = ::OpenAPI::fromJsonValue(m_sales_person, json[QString("salesPerson")]);
    m_sales_person_isSet = !json[QString("salesPerson")].isNull() && m_sales_person_isValid;

    m_ship_complete_isValid = ::OpenAPI::fromJsonValue(m_ship_complete, json[QString("shipComplete")]);
    m_ship_complete_isSet = !json[QString("shipComplete")].isNull() && m_ship_complete_isValid;

    m_ship_on_isValid = ::OpenAPI::fromJsonValue(m_ship_on, json[QString("shipOn")]);
    m_ship_on_isSet = !json[QString("shipOn")].isNull() && m_ship_on_isValid;

    m_subaccount_isValid = ::OpenAPI::fromJsonValue(m_subaccount, json[QString("subaccount")]);
    m_subaccount_isSet = !json[QString("subaccount")].isNull() && m_subaccount_isValid;

    m_tax_category_isValid = ::OpenAPI::fromJsonValue(m_tax_category, json[QString("taxCategory")]);
    m_tax_category_isSet = !json[QString("taxCategory")].isNull() && m_tax_category_isValid;

    m_undership_threshold_isValid = ::OpenAPI::fromJsonValue(m_undership_threshold, json[QString("undershipThreshold")]);
    m_undership_threshold_isSet = !json[QString("undershipThreshold")].isNull() && m_undership_threshold_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;

    m_warehouse_isValid = ::OpenAPI::fromJsonValue(m_warehouse, json[QString("warehouse")]);
    m_warehouse_isSet = !json[QString("warehouse")].isNull() && m_warehouse_isValid;
}

QString OAISalesOrderLineUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesOrderLineUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_alternate_id.isSet()) {
        obj.insert(QString("alternateID"), ::OpenAPI::toJsonValue(m_alternate_id));
    }
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_commissionable.isSet()) {
        obj.insert(QString("commissionable"), ::OpenAPI::toJsonValue(m_commissionable));
    }
    if (m_completed.isSet()) {
        obj.insert(QString("completed"), ::OpenAPI::toJsonValue(m_completed));
    }
    if (m_disc_unit_price.isSet()) {
        obj.insert(QString("discUnitPrice"), ::OpenAPI::toJsonValue(m_disc_unit_price));
    }
    if (m_discount_amount.isSet()) {
        obj.insert(QString("discountAmount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_discount_code.isSet()) {
        obj.insert(QString("discountCode"), ::OpenAPI::toJsonValue(m_discount_code));
    }
    if (m_discount_percent.isSet()) {
        obj.insert(QString("discountPercent"), ::OpenAPI::toJsonValue(m_discount_percent));
    }
    if (m_expiration_date.isSet()) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_external_link.isSet()) {
        obj.insert(QString("externalLink"), ::OpenAPI::toJsonValue(m_external_link));
    }
    if (m_free_item.isSet()) {
        obj.insert(QString("freeItem"), ::OpenAPI::toJsonValue(m_free_item));
    }
    if (m_inventory_id.isSet()) {
        obj.insert(QString("inventoryId"), ::OpenAPI::toJsonValue(m_inventory_id));
    }
    if (m_inventory_number.isSet()) {
        obj.insert(QString("inventoryNumber"), ::OpenAPI::toJsonValue(m_inventory_number));
    }
    if (m_invoice_nbr.isSet()) {
        obj.insert(QString("invoiceNbr"), ::OpenAPI::toJsonValue(m_invoice_nbr));
    }
    if (m_is_rot_rut_deductible.isSet()) {
        obj.insert(QString("isRotRutDeductible"), ::OpenAPI::toJsonValue(m_is_rot_rut_deductible));
    }
    if (m_line_description.isSet()) {
        obj.insert(QString("lineDescription"), ::OpenAPI::toJsonValue(m_line_description));
    }
    if (m_line_nbr.isSet()) {
        obj.insert(QString("lineNbr"), ::OpenAPI::toJsonValue(m_line_nbr));
    }
    if (m_lot_serial_nbr.isSet()) {
        obj.insert(QString("lotSerialNbr"), ::OpenAPI::toJsonValue(m_lot_serial_nbr));
    }
    if (m_manual_discount.isSet()) {
        obj.insert(QString("manualDiscount"), ::OpenAPI::toJsonValue(m_manual_discount));
    }
    if (m_mark_for_po.isSet()) {
        obj.insert(QString("markForPO"), ::OpenAPI::toJsonValue(m_mark_for_po));
    }
    if (m_note.isSet()) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_overship_threshold.isSet()) {
        obj.insert(QString("overshipThreshold"), ::OpenAPI::toJsonValue(m_overship_threshold));
    }
    if (m_po_source.isSet()) {
        obj.insert(QString("poSource"), ::OpenAPI::toJsonValue(m_po_source));
    }
    if (m_project_task.isSet()) {
        obj.insert(QString("projectTask"), ::OpenAPI::toJsonValue(m_project_task));
    }
    if (m_quantity.isSet()) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_reason_code.isSet()) {
        obj.insert(QString("reasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    if (m_requested_on.isSet()) {
        obj.insert(QString("requestedOn"), ::OpenAPI::toJsonValue(m_requested_on));
    }
    if (m_sales_order_operation.isSet()) {
        obj.insert(QString("salesOrderOperation"), ::OpenAPI::toJsonValue(m_sales_order_operation));
    }
    if (m_sales_person.isSet()) {
        obj.insert(QString("salesPerson"), ::OpenAPI::toJsonValue(m_sales_person));
    }
    if (m_ship_complete.isSet()) {
        obj.insert(QString("shipComplete"), ::OpenAPI::toJsonValue(m_ship_complete));
    }
    if (m_ship_on.isSet()) {
        obj.insert(QString("shipOn"), ::OpenAPI::toJsonValue(m_ship_on));
    }
    if (m_subaccount.size() > 0) {
        obj.insert(QString("subaccount"), ::OpenAPI::toJsonValue(m_subaccount));
    }
    if (m_tax_category.isSet()) {
        obj.insert(QString("taxCategory"), ::OpenAPI::toJsonValue(m_tax_category));
    }
    if (m_undership_threshold.isSet()) {
        obj.insert(QString("undershipThreshold"), ::OpenAPI::toJsonValue(m_undership_threshold));
    }
    if (m_unit_cost.isSet()) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_unit_price.isSet()) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    if (m_uom.isSet()) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    if (m_warehouse.isSet()) {
        obj.insert(QString("warehouse"), ::OpenAPI::toJsonValue(m_warehouse));
    }
    return obj;
}

OAIDtoValueOfString OAISalesOrderLineUpdateDto::getAlternateId() const {
    return m_alternate_id;
}
void OAISalesOrderLineUpdateDto::setAlternateId(const OAIDtoValueOfString &alternate_id) {
    m_alternate_id = alternate_id;
    m_alternate_id_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_alternate_id_Set() const{
    return m_alternate_id_isSet;
}

bool OAISalesOrderLineUpdateDto::is_alternate_id_Valid() const{
    return m_alternate_id_isValid;
}

OAIDtoValueOfString OAISalesOrderLineUpdateDto::getBranchNumber() const {
    return m_branch_number;
}
void OAISalesOrderLineUpdateDto::setBranchNumber(const OAIDtoValueOfString &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAISalesOrderLineUpdateDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISalesOrderLineUpdateDto::getCommissionable() const {
    return m_commissionable;
}
void OAISalesOrderLineUpdateDto::setCommissionable(const OAIDtoValueOfNullableOfBoolean &commissionable) {
    m_commissionable = commissionable;
    m_commissionable_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_commissionable_Set() const{
    return m_commissionable_isSet;
}

bool OAISalesOrderLineUpdateDto::is_commissionable_Valid() const{
    return m_commissionable_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISalesOrderLineUpdateDto::getCompleted() const {
    return m_completed;
}
void OAISalesOrderLineUpdateDto::setCompleted(const OAIDtoValueOfNullableOfBoolean &completed) {
    m_completed = completed;
    m_completed_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_completed_Set() const{
    return m_completed_isSet;
}

bool OAISalesOrderLineUpdateDto::is_completed_Valid() const{
    return m_completed_isValid;
}

OAIDtoValueOfNullableOfDecimal OAISalesOrderLineUpdateDto::getDiscUnitPrice() const {
    return m_disc_unit_price;
}
void OAISalesOrderLineUpdateDto::setDiscUnitPrice(const OAIDtoValueOfNullableOfDecimal &disc_unit_price) {
    m_disc_unit_price = disc_unit_price;
    m_disc_unit_price_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_disc_unit_price_Set() const{
    return m_disc_unit_price_isSet;
}

bool OAISalesOrderLineUpdateDto::is_disc_unit_price_Valid() const{
    return m_disc_unit_price_isValid;
}

OAIDtoValueOfNullableOfDecimal OAISalesOrderLineUpdateDto::getDiscountAmount() const {
    return m_discount_amount;
}
void OAISalesOrderLineUpdateDto::setDiscountAmount(const OAIDtoValueOfNullableOfDecimal &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAISalesOrderLineUpdateDto::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

OAIDtoValueOfString OAISalesOrderLineUpdateDto::getDiscountCode() const {
    return m_discount_code;
}
void OAISalesOrderLineUpdateDto::setDiscountCode(const OAIDtoValueOfString &discount_code) {
    m_discount_code = discount_code;
    m_discount_code_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_discount_code_Set() const{
    return m_discount_code_isSet;
}

bool OAISalesOrderLineUpdateDto::is_discount_code_Valid() const{
    return m_discount_code_isValid;
}

OAIDtoValueOfNullableOfDecimal OAISalesOrderLineUpdateDto::getDiscountPercent() const {
    return m_discount_percent;
}
void OAISalesOrderLineUpdateDto::setDiscountPercent(const OAIDtoValueOfNullableOfDecimal &discount_percent) {
    m_discount_percent = discount_percent;
    m_discount_percent_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_discount_percent_Set() const{
    return m_discount_percent_isSet;
}

bool OAISalesOrderLineUpdateDto::is_discount_percent_Valid() const{
    return m_discount_percent_isValid;
}

OAIDtoValueOfNullableOfDateTime OAISalesOrderLineUpdateDto::getExpirationDate() const {
    return m_expiration_date;
}
void OAISalesOrderLineUpdateDto::setExpirationDate(const OAIDtoValueOfNullableOfDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAISalesOrderLineUpdateDto::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

OAIDtoValueOfString OAISalesOrderLineUpdateDto::getExternalLink() const {
    return m_external_link;
}
void OAISalesOrderLineUpdateDto::setExternalLink(const OAIDtoValueOfString &external_link) {
    m_external_link = external_link;
    m_external_link_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_external_link_Set() const{
    return m_external_link_isSet;
}

bool OAISalesOrderLineUpdateDto::is_external_link_Valid() const{
    return m_external_link_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISalesOrderLineUpdateDto::getFreeItem() const {
    return m_free_item;
}
void OAISalesOrderLineUpdateDto::setFreeItem(const OAIDtoValueOfNullableOfBoolean &free_item) {
    m_free_item = free_item;
    m_free_item_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_free_item_Set() const{
    return m_free_item_isSet;
}

bool OAISalesOrderLineUpdateDto::is_free_item_Valid() const{
    return m_free_item_isValid;
}

OAIInventoryIdInSalesOrderLineUpdateDto OAISalesOrderLineUpdateDto::getInventoryId() const {
    return m_inventory_id;
}
void OAISalesOrderLineUpdateDto::setInventoryId(const OAIInventoryIdInSalesOrderLineUpdateDto &inventory_id) {
    m_inventory_id = inventory_id;
    m_inventory_id_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_inventory_id_Set() const{
    return m_inventory_id_isSet;
}

bool OAISalesOrderLineUpdateDto::is_inventory_id_Valid() const{
    return m_inventory_id_isValid;
}

OAIInventoryNumberInSalesOrderLineUpdateDto OAISalesOrderLineUpdateDto::getInventoryNumber() const {
    return m_inventory_number;
}
void OAISalesOrderLineUpdateDto::setInventoryNumber(const OAIInventoryNumberInSalesOrderLineUpdateDto &inventory_number) {
    m_inventory_number = inventory_number;
    m_inventory_number_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_inventory_number_Set() const{
    return m_inventory_number_isSet;
}

bool OAISalesOrderLineUpdateDto::is_inventory_number_Valid() const{
    return m_inventory_number_isValid;
}

OAIDtoValueOfString OAISalesOrderLineUpdateDto::getInvoiceNbr() const {
    return m_invoice_nbr;
}
void OAISalesOrderLineUpdateDto::setInvoiceNbr(const OAIDtoValueOfString &invoice_nbr) {
    m_invoice_nbr = invoice_nbr;
    m_invoice_nbr_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_invoice_nbr_Set() const{
    return m_invoice_nbr_isSet;
}

bool OAISalesOrderLineUpdateDto::is_invoice_nbr_Valid() const{
    return m_invoice_nbr_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISalesOrderLineUpdateDto::getIsRotRutDeductible() const {
    return m_is_rot_rut_deductible;
}
void OAISalesOrderLineUpdateDto::setIsRotRutDeductible(const OAIDtoValueOfNullableOfBoolean &is_rot_rut_deductible) {
    m_is_rot_rut_deductible = is_rot_rut_deductible;
    m_is_rot_rut_deductible_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_is_rot_rut_deductible_Set() const{
    return m_is_rot_rut_deductible_isSet;
}

bool OAISalesOrderLineUpdateDto::is_is_rot_rut_deductible_Valid() const{
    return m_is_rot_rut_deductible_isValid;
}

OAIDtoValueOfString OAISalesOrderLineUpdateDto::getLineDescription() const {
    return m_line_description;
}
void OAISalesOrderLineUpdateDto::setLineDescription(const OAIDtoValueOfString &line_description) {
    m_line_description = line_description;
    m_line_description_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_line_description_Set() const{
    return m_line_description_isSet;
}

bool OAISalesOrderLineUpdateDto::is_line_description_Valid() const{
    return m_line_description_isValid;
}

OAIDtoValueOfNullableOfInt32 OAISalesOrderLineUpdateDto::getLineNbr() const {
    return m_line_nbr;
}
void OAISalesOrderLineUpdateDto::setLineNbr(const OAIDtoValueOfNullableOfInt32 &line_nbr) {
    m_line_nbr = line_nbr;
    m_line_nbr_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_line_nbr_Set() const{
    return m_line_nbr_isSet;
}

bool OAISalesOrderLineUpdateDto::is_line_nbr_Valid() const{
    return m_line_nbr_isValid;
}

OAIDtoValueOfString OAISalesOrderLineUpdateDto::getLotSerialNbr() const {
    return m_lot_serial_nbr;
}
void OAISalesOrderLineUpdateDto::setLotSerialNbr(const OAIDtoValueOfString &lot_serial_nbr) {
    m_lot_serial_nbr = lot_serial_nbr;
    m_lot_serial_nbr_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_lot_serial_nbr_Set() const{
    return m_lot_serial_nbr_isSet;
}

bool OAISalesOrderLineUpdateDto::is_lot_serial_nbr_Valid() const{
    return m_lot_serial_nbr_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISalesOrderLineUpdateDto::getManualDiscount() const {
    return m_manual_discount;
}
void OAISalesOrderLineUpdateDto::setManualDiscount(const OAIDtoValueOfNullableOfBoolean &manual_discount) {
    m_manual_discount = manual_discount;
    m_manual_discount_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_manual_discount_Set() const{
    return m_manual_discount_isSet;
}

bool OAISalesOrderLineUpdateDto::is_manual_discount_Valid() const{
    return m_manual_discount_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISalesOrderLineUpdateDto::getMarkForPo() const {
    return m_mark_for_po;
}
void OAISalesOrderLineUpdateDto::setMarkForPo(const OAIDtoValueOfNullableOfBoolean &mark_for_po) {
    m_mark_for_po = mark_for_po;
    m_mark_for_po_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_mark_for_po_Set() const{
    return m_mark_for_po_isSet;
}

bool OAISalesOrderLineUpdateDto::is_mark_for_po_Valid() const{
    return m_mark_for_po_isValid;
}

OAIDtoValueOfString OAISalesOrderLineUpdateDto::getNote() const {
    return m_note;
}
void OAISalesOrderLineUpdateDto::setNote(const OAIDtoValueOfString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAISalesOrderLineUpdateDto::is_note_Valid() const{
    return m_note_isValid;
}

QString OAISalesOrderLineUpdateDto::getOperation() const {
    return m_operation;
}
void OAISalesOrderLineUpdateDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAISalesOrderLineUpdateDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIDtoValueOfNullableOfDecimal OAISalesOrderLineUpdateDto::getOvershipThreshold() const {
    return m_overship_threshold;
}
void OAISalesOrderLineUpdateDto::setOvershipThreshold(const OAIDtoValueOfNullableOfDecimal &overship_threshold) {
    m_overship_threshold = overship_threshold;
    m_overship_threshold_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_overship_threshold_Set() const{
    return m_overship_threshold_isSet;
}

bool OAISalesOrderLineUpdateDto::is_overship_threshold_Valid() const{
    return m_overship_threshold_isValid;
}

OAIDtoValueOfNullableOfInventoryReplenishmentSources OAISalesOrderLineUpdateDto::getPoSource() const {
    return m_po_source;
}
void OAISalesOrderLineUpdateDto::setPoSource(const OAIDtoValueOfNullableOfInventoryReplenishmentSources &po_source) {
    m_po_source = po_source;
    m_po_source_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_po_source_Set() const{
    return m_po_source_isSet;
}

bool OAISalesOrderLineUpdateDto::is_po_source_Valid() const{
    return m_po_source_isValid;
}

OAIDtoValueOfString OAISalesOrderLineUpdateDto::getProjectTask() const {
    return m_project_task;
}
void OAISalesOrderLineUpdateDto::setProjectTask(const OAIDtoValueOfString &project_task) {
    m_project_task = project_task;
    m_project_task_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_project_task_Set() const{
    return m_project_task_isSet;
}

bool OAISalesOrderLineUpdateDto::is_project_task_Valid() const{
    return m_project_task_isValid;
}

OAIDtoValueOfNullableOfDecimal OAISalesOrderLineUpdateDto::getQuantity() const {
    return m_quantity;
}
void OAISalesOrderLineUpdateDto::setQuantity(const OAIDtoValueOfNullableOfDecimal &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAISalesOrderLineUpdateDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIDtoValueOfString OAISalesOrderLineUpdateDto::getReasonCode() const {
    return m_reason_code;
}
void OAISalesOrderLineUpdateDto::setReasonCode(const OAIDtoValueOfString &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAISalesOrderLineUpdateDto::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

OAIDtoValueOfNullableOfDateTime OAISalesOrderLineUpdateDto::getRequestedOn() const {
    return m_requested_on;
}
void OAISalesOrderLineUpdateDto::setRequestedOn(const OAIDtoValueOfNullableOfDateTime &requested_on) {
    m_requested_on = requested_on;
    m_requested_on_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_requested_on_Set() const{
    return m_requested_on_isSet;
}

bool OAISalesOrderLineUpdateDto::is_requested_on_Valid() const{
    return m_requested_on_isValid;
}

OAIDtoValueOfNullableOfSalesOrderOperations OAISalesOrderLineUpdateDto::getSalesOrderOperation() const {
    return m_sales_order_operation;
}
void OAISalesOrderLineUpdateDto::setSalesOrderOperation(const OAIDtoValueOfNullableOfSalesOrderOperations &sales_order_operation) {
    m_sales_order_operation = sales_order_operation;
    m_sales_order_operation_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_sales_order_operation_Set() const{
    return m_sales_order_operation_isSet;
}

bool OAISalesOrderLineUpdateDto::is_sales_order_operation_Valid() const{
    return m_sales_order_operation_isValid;
}

OAIDtoValueOfString OAISalesOrderLineUpdateDto::getSalesPerson() const {
    return m_sales_person;
}
void OAISalesOrderLineUpdateDto::setSalesPerson(const OAIDtoValueOfString &sales_person) {
    m_sales_person = sales_person;
    m_sales_person_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_sales_person_Set() const{
    return m_sales_person_isSet;
}

bool OAISalesOrderLineUpdateDto::is_sales_person_Valid() const{
    return m_sales_person_isValid;
}

OAIDtoValueOfNullableOfSalesOrderShipCompleteStatuses OAISalesOrderLineUpdateDto::getShipComplete() const {
    return m_ship_complete;
}
void OAISalesOrderLineUpdateDto::setShipComplete(const OAIDtoValueOfNullableOfSalesOrderShipCompleteStatuses &ship_complete) {
    m_ship_complete = ship_complete;
    m_ship_complete_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_ship_complete_Set() const{
    return m_ship_complete_isSet;
}

bool OAISalesOrderLineUpdateDto::is_ship_complete_Valid() const{
    return m_ship_complete_isValid;
}

OAIDtoValueOfNullableOfDateTime OAISalesOrderLineUpdateDto::getShipOn() const {
    return m_ship_on;
}
void OAISalesOrderLineUpdateDto::setShipOn(const OAIDtoValueOfNullableOfDateTime &ship_on) {
    m_ship_on = ship_on;
    m_ship_on_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_ship_on_Set() const{
    return m_ship_on_isSet;
}

bool OAISalesOrderLineUpdateDto::is_ship_on_Valid() const{
    return m_ship_on_isValid;
}

QList<OAISegmentUpdateDto> OAISalesOrderLineUpdateDto::getSubaccount() const {
    return m_subaccount;
}
void OAISalesOrderLineUpdateDto::setSubaccount(const QList<OAISegmentUpdateDto> &subaccount) {
    m_subaccount = subaccount;
    m_subaccount_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_subaccount_Set() const{
    return m_subaccount_isSet;
}

bool OAISalesOrderLineUpdateDto::is_subaccount_Valid() const{
    return m_subaccount_isValid;
}

OAIDtoValueOfString OAISalesOrderLineUpdateDto::getTaxCategory() const {
    return m_tax_category;
}
void OAISalesOrderLineUpdateDto::setTaxCategory(const OAIDtoValueOfString &tax_category) {
    m_tax_category = tax_category;
    m_tax_category_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_tax_category_Set() const{
    return m_tax_category_isSet;
}

bool OAISalesOrderLineUpdateDto::is_tax_category_Valid() const{
    return m_tax_category_isValid;
}

OAIDtoValueOfNullableOfDecimal OAISalesOrderLineUpdateDto::getUndershipThreshold() const {
    return m_undership_threshold;
}
void OAISalesOrderLineUpdateDto::setUndershipThreshold(const OAIDtoValueOfNullableOfDecimal &undership_threshold) {
    m_undership_threshold = undership_threshold;
    m_undership_threshold_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_undership_threshold_Set() const{
    return m_undership_threshold_isSet;
}

bool OAISalesOrderLineUpdateDto::is_undership_threshold_Valid() const{
    return m_undership_threshold_isValid;
}

OAIDtoValueOfNullableOfDecimal OAISalesOrderLineUpdateDto::getUnitCost() const {
    return m_unit_cost;
}
void OAISalesOrderLineUpdateDto::setUnitCost(const OAIDtoValueOfNullableOfDecimal &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAISalesOrderLineUpdateDto::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

OAIDtoValueOfNullableOfDecimal OAISalesOrderLineUpdateDto::getUnitPrice() const {
    return m_unit_price;
}
void OAISalesOrderLineUpdateDto::setUnitPrice(const OAIDtoValueOfNullableOfDecimal &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAISalesOrderLineUpdateDto::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

OAIDtoValueOfString OAISalesOrderLineUpdateDto::getUom() const {
    return m_uom;
}
void OAISalesOrderLineUpdateDto::setUom(const OAIDtoValueOfString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAISalesOrderLineUpdateDto::is_uom_Valid() const{
    return m_uom_isValid;
}

OAIDtoValueOfString OAISalesOrderLineUpdateDto::getWarehouse() const {
    return m_warehouse;
}
void OAISalesOrderLineUpdateDto::setWarehouse(const OAIDtoValueOfString &warehouse) {
    m_warehouse = warehouse;
    m_warehouse_isSet = true;
}

bool OAISalesOrderLineUpdateDto::is_warehouse_Set() const{
    return m_warehouse_isSet;
}

bool OAISalesOrderLineUpdateDto::is_warehouse_Valid() const{
    return m_warehouse_isValid;
}

bool OAISalesOrderLineUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternate_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_commissionable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disc_unit_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_percent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_rot_rut_deductible.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_serial_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_discount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mark_for_po.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overship_threshold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_on.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_order_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_complete.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_on.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_undership_threshold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesOrderLineUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_inventory_number_isValid && true;
}

} // namespace OpenAPI
