/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAllocationsBasicDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAllocationsBasicDto::OAIAllocationsBasicDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAllocationsBasicDto::OAIAllocationsBasicDto() {
    this->initializeModel();
}

OAIAllocationsBasicDto::~OAIAllocationsBasicDto() {}

void OAIAllocationsBasicDto::initializeModel() {

    m_line_nbr_isSet = false;
    m_line_nbr_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_lot_serial_number_isSet = false;
    m_lot_serial_number_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;
}

void OAIAllocationsBasicDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAllocationsBasicDto::fromJsonObject(QJsonObject json) {

    m_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_line_nbr, json[QString("lineNbr")]);
    m_line_nbr_isSet = !json[QString("lineNbr")].isNull() && m_line_nbr_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_lot_serial_number_isValid = ::OpenAPI::fromJsonValue(m_lot_serial_number, json[QString("lotSerialNumber")]);
    m_lot_serial_number_isSet = !json[QString("lotSerialNumber")].isNull() && m_lot_serial_number_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;
}

QString OAIAllocationsBasicDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAllocationsBasicDto::asJsonObject() const {
    QJsonObject obj;
    if (m_line_nbr_isSet) {
        obj.insert(QString("lineNbr"), ::OpenAPI::toJsonValue(m_line_nbr));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_lot_serial_number_isSet) {
        obj.insert(QString("lotSerialNumber"), ::OpenAPI::toJsonValue(m_lot_serial_number));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    return obj;
}

qint32 OAIAllocationsBasicDto::getLineNbr() const {
    return m_line_nbr;
}
void OAIAllocationsBasicDto::setLineNbr(const qint32 &line_nbr) {
    m_line_nbr = line_nbr;
    m_line_nbr_isSet = true;
}

bool OAIAllocationsBasicDto::is_line_nbr_Set() const{
    return m_line_nbr_isSet;
}

bool OAIAllocationsBasicDto::is_line_nbr_Valid() const{
    return m_line_nbr_isValid;
}

OAILocationDescriptionDto OAIAllocationsBasicDto::getLocation() const {
    return m_location;
}
void OAIAllocationsBasicDto::setLocation(const OAILocationDescriptionDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIAllocationsBasicDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIAllocationsBasicDto::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIAllocationsBasicDto::getLotSerialNumber() const {
    return m_lot_serial_number;
}
void OAIAllocationsBasicDto::setLotSerialNumber(const QString &lot_serial_number) {
    m_lot_serial_number = lot_serial_number;
    m_lot_serial_number_isSet = true;
}

bool OAIAllocationsBasicDto::is_lot_serial_number_Set() const{
    return m_lot_serial_number_isSet;
}

bool OAIAllocationsBasicDto::is_lot_serial_number_Valid() const{
    return m_lot_serial_number_isValid;
}

double OAIAllocationsBasicDto::getQuantity() const {
    return m_quantity;
}
void OAIAllocationsBasicDto::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIAllocationsBasicDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIAllocationsBasicDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

bool OAIAllocationsBasicDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_line_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAllocationsBasicDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
