/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArAdjustDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArAdjustDto::OAIArAdjustDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArAdjustDto::OAIArAdjustDto() {
    this->initializeModel();
}

OAIArAdjustDto::~OAIArAdjustDto() {}

void OAIArAdjustDto::initializeModel() {

    m_amount_paid_isSet = false;
    m_amount_paid_isValid = false;

    m_application_date_isSet = false;
    m_application_date_isValid = false;

    m_application_period_isSet = false;
    m_application_period_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_cash_discount_taken_isSet = false;
    m_cash_discount_taken_isValid = false;

    m_customer_cd_isSet = false;
    m_customer_cd_isValid = false;

    m_doc_type_isSet = false;
    m_doc_type_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_invoice_text_isSet = false;
    m_invoice_text_isValid = false;

    m_payment_ref_isSet = false;
    m_payment_ref_isValid = false;

    m_pending_ppd_isSet = false;
    m_pending_ppd_isValid = false;

    m_ppd_cr_memo_ref_nbr_isSet = false;
    m_ppd_cr_memo_ref_nbr_isValid = false;

    m_ref_nbr_isSet = false;
    m_ref_nbr_isValid = false;

    m_released_isSet = false;
    m_released_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_voided_isSet = false;
    m_voided_isValid = false;
}

void OAIArAdjustDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArAdjustDto::fromJsonObject(QJsonObject json) {

    m_amount_paid_isValid = ::OpenAPI::fromJsonValue(m_amount_paid, json[QString("amountPaid")]);
    m_amount_paid_isSet = !json[QString("amountPaid")].isNull() && m_amount_paid_isValid;

    m_application_date_isValid = ::OpenAPI::fromJsonValue(m_application_date, json[QString("applicationDate")]);
    m_application_date_isSet = !json[QString("applicationDate")].isNull() && m_application_date_isValid;

    m_application_period_isValid = ::OpenAPI::fromJsonValue(m_application_period, json[QString("applicationPeriod")]);
    m_application_period_isSet = !json[QString("applicationPeriod")].isNull() && m_application_period_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_cash_discount_taken_isValid = ::OpenAPI::fromJsonValue(m_cash_discount_taken, json[QString("cashDiscountTaken")]);
    m_cash_discount_taken_isSet = !json[QString("cashDiscountTaken")].isNull() && m_cash_discount_taken_isValid;

    m_customer_cd_isValid = ::OpenAPI::fromJsonValue(m_customer_cd, json[QString("customerCD")]);
    m_customer_cd_isSet = !json[QString("customerCD")].isNull() && m_customer_cd_isValid;

    m_doc_type_isValid = ::OpenAPI::fromJsonValue(m_doc_type, json[QString("docType")]);
    m_doc_type_isSet = !json[QString("docType")].isNull() && m_doc_type_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_invoice_text_isValid = ::OpenAPI::fromJsonValue(m_invoice_text, json[QString("invoiceText")]);
    m_invoice_text_isSet = !json[QString("invoiceText")].isNull() && m_invoice_text_isValid;

    m_payment_ref_isValid = ::OpenAPI::fromJsonValue(m_payment_ref, json[QString("paymentRef")]);
    m_payment_ref_isSet = !json[QString("paymentRef")].isNull() && m_payment_ref_isValid;

    m_pending_ppd_isValid = ::OpenAPI::fromJsonValue(m_pending_ppd, json[QString("pendingPPD")]);
    m_pending_ppd_isSet = !json[QString("pendingPPD")].isNull() && m_pending_ppd_isValid;

    m_ppd_cr_memo_ref_nbr_isValid = ::OpenAPI::fromJsonValue(m_ppd_cr_memo_ref_nbr, json[QString("ppdCrMemoRefNbr")]);
    m_ppd_cr_memo_ref_nbr_isSet = !json[QString("ppdCrMemoRefNbr")].isNull() && m_ppd_cr_memo_ref_nbr_isValid;

    m_ref_nbr_isValid = ::OpenAPI::fromJsonValue(m_ref_nbr, json[QString("refNbr")]);
    m_ref_nbr_isSet = !json[QString("refNbr")].isNull() && m_ref_nbr_isValid;

    m_released_isValid = ::OpenAPI::fromJsonValue(m_released, json[QString("released")]);
    m_released_isSet = !json[QString("released")].isNull() && m_released_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_voided_isValid = ::OpenAPI::fromJsonValue(m_voided, json[QString("voided")]);
    m_voided_isSet = !json[QString("voided")].isNull() && m_voided_isValid;
}

QString OAIArAdjustDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArAdjustDto::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_paid_isSet) {
        obj.insert(QString("amountPaid"), ::OpenAPI::toJsonValue(m_amount_paid));
    }
    if (m_application_date_isSet) {
        obj.insert(QString("applicationDate"), ::OpenAPI::toJsonValue(m_application_date));
    }
    if (m_application_period_isSet) {
        obj.insert(QString("applicationPeriod"), ::OpenAPI::toJsonValue(m_application_period));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_cash_discount_taken_isSet) {
        obj.insert(QString("cashDiscountTaken"), ::OpenAPI::toJsonValue(m_cash_discount_taken));
    }
    if (m_customer_cd_isSet) {
        obj.insert(QString("customerCD"), ::OpenAPI::toJsonValue(m_customer_cd));
    }
    if (m_doc_type_isSet) {
        obj.insert(QString("docType"), ::OpenAPI::toJsonValue(m_doc_type));
    }
    if (m_hold_isSet) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_invoice_text_isSet) {
        obj.insert(QString("invoiceText"), ::OpenAPI::toJsonValue(m_invoice_text));
    }
    if (m_payment_ref_isSet) {
        obj.insert(QString("paymentRef"), ::OpenAPI::toJsonValue(m_payment_ref));
    }
    if (m_pending_ppd_isSet) {
        obj.insert(QString("pendingPPD"), ::OpenAPI::toJsonValue(m_pending_ppd));
    }
    if (m_ppd_cr_memo_ref_nbr_isSet) {
        obj.insert(QString("ppdCrMemoRefNbr"), ::OpenAPI::toJsonValue(m_ppd_cr_memo_ref_nbr));
    }
    if (m_ref_nbr_isSet) {
        obj.insert(QString("refNbr"), ::OpenAPI::toJsonValue(m_ref_nbr));
    }
    if (m_released_isSet) {
        obj.insert(QString("released"), ::OpenAPI::toJsonValue(m_released));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_voided_isSet) {
        obj.insert(QString("voided"), ::OpenAPI::toJsonValue(m_voided));
    }
    return obj;
}

double OAIArAdjustDto::getAmountPaid() const {
    return m_amount_paid;
}
void OAIArAdjustDto::setAmountPaid(const double &amount_paid) {
    m_amount_paid = amount_paid;
    m_amount_paid_isSet = true;
}

bool OAIArAdjustDto::is_amount_paid_Set() const{
    return m_amount_paid_isSet;
}

bool OAIArAdjustDto::is_amount_paid_Valid() const{
    return m_amount_paid_isValid;
}

QDateTime OAIArAdjustDto::getApplicationDate() const {
    return m_application_date;
}
void OAIArAdjustDto::setApplicationDate(const QDateTime &application_date) {
    m_application_date = application_date;
    m_application_date_isSet = true;
}

bool OAIArAdjustDto::is_application_date_Set() const{
    return m_application_date_isSet;
}

bool OAIArAdjustDto::is_application_date_Valid() const{
    return m_application_date_isValid;
}

QString OAIArAdjustDto::getApplicationPeriod() const {
    return m_application_period;
}
void OAIArAdjustDto::setApplicationPeriod(const QString &application_period) {
    m_application_period = application_period;
    m_application_period_isSet = true;
}

bool OAIArAdjustDto::is_application_period_Set() const{
    return m_application_period_isSet;
}

bool OAIArAdjustDto::is_application_period_Valid() const{
    return m_application_period_isValid;
}

double OAIArAdjustDto::getBalance() const {
    return m_balance;
}
void OAIArAdjustDto::setBalance(const double &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIArAdjustDto::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIArAdjustDto::is_balance_Valid() const{
    return m_balance_isValid;
}

double OAIArAdjustDto::getCashDiscountTaken() const {
    return m_cash_discount_taken;
}
void OAIArAdjustDto::setCashDiscountTaken(const double &cash_discount_taken) {
    m_cash_discount_taken = cash_discount_taken;
    m_cash_discount_taken_isSet = true;
}

bool OAIArAdjustDto::is_cash_discount_taken_Set() const{
    return m_cash_discount_taken_isSet;
}

bool OAIArAdjustDto::is_cash_discount_taken_Valid() const{
    return m_cash_discount_taken_isValid;
}

QString OAIArAdjustDto::getCustomerCd() const {
    return m_customer_cd;
}
void OAIArAdjustDto::setCustomerCd(const QString &customer_cd) {
    m_customer_cd = customer_cd;
    m_customer_cd_isSet = true;
}

bool OAIArAdjustDto::is_customer_cd_Set() const{
    return m_customer_cd_isSet;
}

bool OAIArAdjustDto::is_customer_cd_Valid() const{
    return m_customer_cd_isValid;
}

QString OAIArAdjustDto::getDocType() const {
    return m_doc_type;
}
void OAIArAdjustDto::setDocType(const QString &doc_type) {
    m_doc_type = doc_type;
    m_doc_type_isSet = true;
}

bool OAIArAdjustDto::is_doc_type_Set() const{
    return m_doc_type_isSet;
}

bool OAIArAdjustDto::is_doc_type_Valid() const{
    return m_doc_type_isValid;
}

bool OAIArAdjustDto::isHold() const {
    return m_hold;
}
void OAIArAdjustDto::setHold(const bool &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAIArAdjustDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAIArAdjustDto::is_hold_Valid() const{
    return m_hold_isValid;
}

QString OAIArAdjustDto::getInvoiceText() const {
    return m_invoice_text;
}
void OAIArAdjustDto::setInvoiceText(const QString &invoice_text) {
    m_invoice_text = invoice_text;
    m_invoice_text_isSet = true;
}

bool OAIArAdjustDto::is_invoice_text_Set() const{
    return m_invoice_text_isSet;
}

bool OAIArAdjustDto::is_invoice_text_Valid() const{
    return m_invoice_text_isValid;
}

QString OAIArAdjustDto::getPaymentRef() const {
    return m_payment_ref;
}
void OAIArAdjustDto::setPaymentRef(const QString &payment_ref) {
    m_payment_ref = payment_ref;
    m_payment_ref_isSet = true;
}

bool OAIArAdjustDto::is_payment_ref_Set() const{
    return m_payment_ref_isSet;
}

bool OAIArAdjustDto::is_payment_ref_Valid() const{
    return m_payment_ref_isValid;
}

bool OAIArAdjustDto::isPendingPpd() const {
    return m_pending_ppd;
}
void OAIArAdjustDto::setPendingPpd(const bool &pending_ppd) {
    m_pending_ppd = pending_ppd;
    m_pending_ppd_isSet = true;
}

bool OAIArAdjustDto::is_pending_ppd_Set() const{
    return m_pending_ppd_isSet;
}

bool OAIArAdjustDto::is_pending_ppd_Valid() const{
    return m_pending_ppd_isValid;
}

QString OAIArAdjustDto::getPpdCrMemoRefNbr() const {
    return m_ppd_cr_memo_ref_nbr;
}
void OAIArAdjustDto::setPpdCrMemoRefNbr(const QString &ppd_cr_memo_ref_nbr) {
    m_ppd_cr_memo_ref_nbr = ppd_cr_memo_ref_nbr;
    m_ppd_cr_memo_ref_nbr_isSet = true;
}

bool OAIArAdjustDto::is_ppd_cr_memo_ref_nbr_Set() const{
    return m_ppd_cr_memo_ref_nbr_isSet;
}

bool OAIArAdjustDto::is_ppd_cr_memo_ref_nbr_Valid() const{
    return m_ppd_cr_memo_ref_nbr_isValid;
}

QString OAIArAdjustDto::getRefNbr() const {
    return m_ref_nbr;
}
void OAIArAdjustDto::setRefNbr(const QString &ref_nbr) {
    m_ref_nbr = ref_nbr;
    m_ref_nbr_isSet = true;
}

bool OAIArAdjustDto::is_ref_nbr_Set() const{
    return m_ref_nbr_isSet;
}

bool OAIArAdjustDto::is_ref_nbr_Valid() const{
    return m_ref_nbr_isValid;
}

bool OAIArAdjustDto::isReleased() const {
    return m_released;
}
void OAIArAdjustDto::setReleased(const bool &released) {
    m_released = released;
    m_released_isSet = true;
}

bool OAIArAdjustDto::is_released_Set() const{
    return m_released_isSet;
}

bool OAIArAdjustDto::is_released_Valid() const{
    return m_released_isValid;
}

QString OAIArAdjustDto::getStatus() const {
    return m_status;
}
void OAIArAdjustDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIArAdjustDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIArAdjustDto::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIArAdjustDto::isVoided() const {
    return m_voided;
}
void OAIArAdjustDto::setVoided(const bool &voided) {
    m_voided = voided;
    m_voided_isSet = true;
}

bool OAIArAdjustDto::is_voided_Set() const{
    return m_voided_isSet;
}

bool OAIArAdjustDto::is_voided_Valid() const{
    return m_voided_isValid;
}

bool OAIArAdjustDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_discount_taken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_cd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_ppd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ppd_cr_memo_ref_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_released_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voided_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArAdjustDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
