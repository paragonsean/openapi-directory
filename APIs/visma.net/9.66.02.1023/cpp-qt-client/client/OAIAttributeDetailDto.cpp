/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributeDetailDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributeDetailDto::OAIAttributeDetailDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributeDetailDto::OAIAttributeDetailDto() {
    this->initializeModel();
}

OAIAttributeDetailDto::~OAIAttributeDetailDto() {}

void OAIAttributeDetailDto::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_value_id_isSet = false;
    m_value_id_isValid = false;
}

void OAIAttributeDetailDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributeDetailDto::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;

    m_value_id_isValid = ::OpenAPI::fromJsonValue(m_value_id, json[QString("valueId")]);
    m_value_id_isSet = !json[QString("valueId")].isNull() && m_value_id_isValid;
}

QString OAIAttributeDetailDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributeDetailDto::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_value_id_isSet) {
        obj.insert(QString("valueId"), ::OpenAPI::toJsonValue(m_value_id));
    }
    return obj;
}

QString OAIAttributeDetailDto::getDescription() const {
    return m_description;
}
void OAIAttributeDetailDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAttributeDetailDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAttributeDetailDto::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIAttributeDetailDto::isDisabled() const {
    return m_disabled;
}
void OAIAttributeDetailDto::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIAttributeDetailDto::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIAttributeDetailDto::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QString OAIAttributeDetailDto::getErrorInfo() const {
    return m_error_info;
}
void OAIAttributeDetailDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIAttributeDetailDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIAttributeDetailDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

OAIMetadataDto OAIAttributeDetailDto::getMetadata() const {
    return m_metadata;
}
void OAIAttributeDetailDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIAttributeDetailDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIAttributeDetailDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

qint32 OAIAttributeDetailDto::getSortOrder() const {
    return m_sort_order;
}
void OAIAttributeDetailDto::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIAttributeDetailDto::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIAttributeDetailDto::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QString OAIAttributeDetailDto::getValueId() const {
    return m_value_id;
}
void OAIAttributeDetailDto::setValueId(const QString &value_id) {
    m_value_id = value_id;
    m_value_id_isSet = true;
}

bool OAIAttributeDetailDto::is_value_id_Set() const{
    return m_value_id_isSet;
}

bool OAIAttributeDetailDto::is_value_id_Valid() const{
    return m_value_id_isValid;
}

bool OAIAttributeDetailDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributeDetailDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
