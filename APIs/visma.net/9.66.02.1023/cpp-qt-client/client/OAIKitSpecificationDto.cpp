/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKitSpecificationDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKitSpecificationDto::OAIKitSpecificationDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKitSpecificationDto::OAIKitSpecificationDto() {
    this->initializeModel();
}

OAIKitSpecificationDto::~OAIKitSpecificationDto() {}

void OAIKitSpecificationDto::initializeModel() {

    m_allow_component_addition_isSet = false;
    m_allow_component_addition_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_non_stock_isSet = false;
    m_is_non_stock_isValid = false;

    m_kit_inventory_id_isSet = false;
    m_kit_inventory_id_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_non_stock_component_lines_isSet = false;
    m_non_stock_component_lines_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_stock_component_lines_isSet = false;
    m_stock_component_lines_isValid = false;
}

void OAIKitSpecificationDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKitSpecificationDto::fromJsonObject(QJsonObject json) {

    m_allow_component_addition_isValid = ::OpenAPI::fromJsonValue(m_allow_component_addition, json[QString("allowComponentAddition")]);
    m_allow_component_addition_isSet = !json[QString("allowComponentAddition")].isNull() && m_allow_component_addition_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_is_non_stock_isValid = ::OpenAPI::fromJsonValue(m_is_non_stock, json[QString("isNonStock")]);
    m_is_non_stock_isSet = !json[QString("isNonStock")].isNull() && m_is_non_stock_isValid;

    m_kit_inventory_id_isValid = ::OpenAPI::fromJsonValue(m_kit_inventory_id, json[QString("kitInventoryID")]);
    m_kit_inventory_id_isSet = !json[QString("kitInventoryID")].isNull() && m_kit_inventory_id_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_non_stock_component_lines_isValid = ::OpenAPI::fromJsonValue(m_non_stock_component_lines, json[QString("nonStockComponentLines")]);
    m_non_stock_component_lines_isSet = !json[QString("nonStockComponentLines")].isNull() && m_non_stock_component_lines_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_stock_component_lines_isValid = ::OpenAPI::fromJsonValue(m_stock_component_lines, json[QString("stockComponentLines")]);
    m_stock_component_lines_isSet = !json[QString("stockComponentLines")].isNull() && m_stock_component_lines_isValid;
}

QString OAIKitSpecificationDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKitSpecificationDto::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_component_addition_isSet) {
        obj.insert(QString("allowComponentAddition"), ::OpenAPI::toJsonValue(m_allow_component_addition));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_non_stock_isSet) {
        obj.insert(QString("isNonStock"), ::OpenAPI::toJsonValue(m_is_non_stock));
    }
    if (m_kit_inventory_id_isSet) {
        obj.insert(QString("kitInventoryID"), ::OpenAPI::toJsonValue(m_kit_inventory_id));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_non_stock_component_lines.size() > 0) {
        obj.insert(QString("nonStockComponentLines"), ::OpenAPI::toJsonValue(m_non_stock_component_lines));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_stock_component_lines.size() > 0) {
        obj.insert(QString("stockComponentLines"), ::OpenAPI::toJsonValue(m_stock_component_lines));
    }
    return obj;
}

bool OAIKitSpecificationDto::isAllowComponentAddition() const {
    return m_allow_component_addition;
}
void OAIKitSpecificationDto::setAllowComponentAddition(const bool &allow_component_addition) {
    m_allow_component_addition = allow_component_addition;
    m_allow_component_addition_isSet = true;
}

bool OAIKitSpecificationDto::is_allow_component_addition_Set() const{
    return m_allow_component_addition_isSet;
}

bool OAIKitSpecificationDto::is_allow_component_addition_Valid() const{
    return m_allow_component_addition_isValid;
}

QDateTime OAIKitSpecificationDto::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIKitSpecificationDto::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIKitSpecificationDto::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIKitSpecificationDto::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAIKitSpecificationDto::getDescription() const {
    return m_description;
}
void OAIKitSpecificationDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIKitSpecificationDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIKitSpecificationDto::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIKitSpecificationDto::getErrorInfo() const {
    return m_error_info;
}
void OAIKitSpecificationDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIKitSpecificationDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIKitSpecificationDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

bool OAIKitSpecificationDto::isIsActive() const {
    return m_is_active;
}
void OAIKitSpecificationDto::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIKitSpecificationDto::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIKitSpecificationDto::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIKitSpecificationDto::isIsNonStock() const {
    return m_is_non_stock;
}
void OAIKitSpecificationDto::setIsNonStock(const bool &is_non_stock) {
    m_is_non_stock = is_non_stock;
    m_is_non_stock_isSet = true;
}

bool OAIKitSpecificationDto::is_is_non_stock_Set() const{
    return m_is_non_stock_isSet;
}

bool OAIKitSpecificationDto::is_is_non_stock_Valid() const{
    return m_is_non_stock_isValid;
}

QString OAIKitSpecificationDto::getKitInventoryId() const {
    return m_kit_inventory_id;
}
void OAIKitSpecificationDto::setKitInventoryId(const QString &kit_inventory_id) {
    m_kit_inventory_id = kit_inventory_id;
    m_kit_inventory_id_isSet = true;
}

bool OAIKitSpecificationDto::is_kit_inventory_id_Set() const{
    return m_kit_inventory_id_isSet;
}

bool OAIKitSpecificationDto::is_kit_inventory_id_Valid() const{
    return m_kit_inventory_id_isValid;
}

QDateTime OAIKitSpecificationDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIKitSpecificationDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIKitSpecificationDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIKitSpecificationDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAIMetadataDto OAIKitSpecificationDto::getMetadata() const {
    return m_metadata;
}
void OAIKitSpecificationDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIKitSpecificationDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIKitSpecificationDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAIKitSpecificationNonStockComponentDto> OAIKitSpecificationDto::getNonStockComponentLines() const {
    return m_non_stock_component_lines;
}
void OAIKitSpecificationDto::setNonStockComponentLines(const QList<OAIKitSpecificationNonStockComponentDto> &non_stock_component_lines) {
    m_non_stock_component_lines = non_stock_component_lines;
    m_non_stock_component_lines_isSet = true;
}

bool OAIKitSpecificationDto::is_non_stock_component_lines_Set() const{
    return m_non_stock_component_lines_isSet;
}

bool OAIKitSpecificationDto::is_non_stock_component_lines_Valid() const{
    return m_non_stock_component_lines_isValid;
}

QString OAIKitSpecificationDto::getRevision() const {
    return m_revision;
}
void OAIKitSpecificationDto::setRevision(const QString &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIKitSpecificationDto::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIKitSpecificationDto::is_revision_Valid() const{
    return m_revision_isValid;
}

QList<OAIKitSpecificationStockComponentsDto> OAIKitSpecificationDto::getStockComponentLines() const {
    return m_stock_component_lines;
}
void OAIKitSpecificationDto::setStockComponentLines(const QList<OAIKitSpecificationStockComponentsDto> &stock_component_lines) {
    m_stock_component_lines = stock_component_lines;
    m_stock_component_lines_isSet = true;
}

bool OAIKitSpecificationDto::is_stock_component_lines_Set() const{
    return m_stock_component_lines_isSet;
}

bool OAIKitSpecificationDto::is_stock_component_lines_Valid() const{
    return m_stock_component_lines_isValid;
}

bool OAIKitSpecificationDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_component_addition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_non_stock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kit_inventory_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_stock_component_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_component_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKitSpecificationDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
