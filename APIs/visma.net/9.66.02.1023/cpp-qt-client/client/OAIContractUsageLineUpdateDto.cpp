/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContractUsageLineUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContractUsageLineUpdateDto::OAIContractUsageLineUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContractUsageLineUpdateDto::OAIContractUsageLineUpdateDto() {
    this->initializeModel();
}

OAIContractUsageLineUpdateDto::~OAIContractUsageLineUpdateDto() {}

void OAIContractUsageLineUpdateDto::initializeModel() {

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_inventory_isSet = false;
    m_inventory_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_transaction_number_isSet = false;
    m_transaction_number_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;
}

void OAIContractUsageLineUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContractUsageLineUpdateDto::fromJsonObject(QJsonObject json) {

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_inventory_isValid = ::OpenAPI::fromJsonValue(m_inventory, json[QString("inventory")]);
    m_inventory_isSet = !json[QString("inventory")].isNull() && m_inventory_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_transaction_number_isValid = ::OpenAPI::fromJsonValue(m_transaction_number, json[QString("transactionNumber")]);
    m_transaction_number_isSet = !json[QString("transactionNumber")].isNull() && m_transaction_number_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;
}

QString OAIContractUsageLineUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContractUsageLineUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_date.isSet()) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_inventory.isSet()) {
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(m_inventory));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_quantity.isSet()) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_transaction_number.isSet()) {
        obj.insert(QString("transactionNumber"), ::OpenAPI::toJsonValue(m_transaction_number));
    }
    if (m_uom.isSet()) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    return obj;
}

OAIDtoValueOfString OAIContractUsageLineUpdateDto::getBranch() const {
    return m_branch;
}
void OAIContractUsageLineUpdateDto::setBranch(const OAIDtoValueOfString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIContractUsageLineUpdateDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIContractUsageLineUpdateDto::is_branch_Valid() const{
    return m_branch_isValid;
}

OAIDtoValueOfNullableOfDateTime OAIContractUsageLineUpdateDto::getDate() const {
    return m_date;
}
void OAIContractUsageLineUpdateDto::setDate(const OAIDtoValueOfNullableOfDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIContractUsageLineUpdateDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAIContractUsageLineUpdateDto::is_date_Valid() const{
    return m_date_isValid;
}

OAIDtoValueOfString OAIContractUsageLineUpdateDto::getDescription() const {
    return m_description;
}
void OAIContractUsageLineUpdateDto::setDescription(const OAIDtoValueOfString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIContractUsageLineUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIContractUsageLineUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIDtoValueOfString OAIContractUsageLineUpdateDto::getInventory() const {
    return m_inventory;
}
void OAIContractUsageLineUpdateDto::setInventory(const OAIDtoValueOfString &inventory) {
    m_inventory = inventory;
    m_inventory_isSet = true;
}

bool OAIContractUsageLineUpdateDto::is_inventory_Set() const{
    return m_inventory_isSet;
}

bool OAIContractUsageLineUpdateDto::is_inventory_Valid() const{
    return m_inventory_isValid;
}

QString OAIContractUsageLineUpdateDto::getOperation() const {
    return m_operation;
}
void OAIContractUsageLineUpdateDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIContractUsageLineUpdateDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIContractUsageLineUpdateDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIContractUsageLineUpdateDto::getQuantity() const {
    return m_quantity;
}
void OAIContractUsageLineUpdateDto::setQuantity(const OAIDtoValueOfNullableOfDecimal &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIContractUsageLineUpdateDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIContractUsageLineUpdateDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIDtoValueOfNullableOfInt32 OAIContractUsageLineUpdateDto::getTransactionNumber() const {
    return m_transaction_number;
}
void OAIContractUsageLineUpdateDto::setTransactionNumber(const OAIDtoValueOfNullableOfInt32 &transaction_number) {
    m_transaction_number = transaction_number;
    m_transaction_number_isSet = true;
}

bool OAIContractUsageLineUpdateDto::is_transaction_number_Set() const{
    return m_transaction_number_isSet;
}

bool OAIContractUsageLineUpdateDto::is_transaction_number_Valid() const{
    return m_transaction_number_isValid;
}

OAIDtoValueOfString OAIContractUsageLineUpdateDto::getUom() const {
    return m_uom;
}
void OAIContractUsageLineUpdateDto::setUom(const OAIDtoValueOfString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAIContractUsageLineUpdateDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAIContractUsageLineUpdateDto::is_uom_Valid() const{
    return m_uom_isValid;
}

bool OAIContractUsageLineUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContractUsageLineUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
