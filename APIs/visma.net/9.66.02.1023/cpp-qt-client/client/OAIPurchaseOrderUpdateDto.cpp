/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseOrderUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseOrderUpdateDto::OAIPurchaseOrderUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseOrderUpdateDto::OAIPurchaseOrderUpdateDto() {
    this->initializeModel();
}

OAIPurchaseOrderUpdateDto::~OAIPurchaseOrderUpdateDto() {}

void OAIPurchaseOrderUpdateDto::initializeModel() {

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_change_dates_on_lines_isSet = false;
    m_change_dates_on_lines_isValid = false;

    m_control_total_isSet = false;
    m_control_total_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discount_details_isSet = false;
    m_discount_details_isValid = false;

    m_dont_email_isSet = false;
    m_dont_email_isValid = false;

    m_dont_print_isSet = false;
    m_dont_print_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_fob_point_isSet = false;
    m_fob_point_isValid = false;

    m_gln_isSet = false;
    m_gln_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_order_number_isSet = false;
    m_order_number_isValid = false;

    m_order_type_isSet = false;
    m_order_type_isValid = false;

    m_override_number_series_isSet = false;
    m_override_number_series_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_promised_on_isSet = false;
    m_promised_on_isValid = false;

    m_remit_address_isSet = false;
    m_remit_address_isValid = false;

    m_remit_contact_isSet = false;
    m_remit_contact_isValid = false;

    m_ship_terms_isSet = false;
    m_ship_terms_isValid = false;

    m_ship_to_isSet = false;
    m_ship_to_isValid = false;

    m_ship_via_isSet = false;
    m_ship_via_isValid = false;

    m_shipping_address_isSet = false;
    m_shipping_address_isValid = false;

    m_shipping_contact_isSet = false;
    m_shipping_contact_isValid = false;

    m_shipping_destination_type_isSet = false;
    m_shipping_destination_type_isValid = false;

    m_shipping_location_isSet = false;
    m_shipping_location_isValid = false;

    m_supplier_isSet = false;
    m_supplier_isValid = false;

    m_supplier_ref_isSet = false;
    m_supplier_ref_isValid = false;

    m_supplier_vat_zone_isSet = false;
    m_supplier_vat_zone_isValid = false;

    m_terms_isSet = false;
    m_terms_isValid = false;

    m_vat_registration_id_isSet = false;
    m_vat_registration_id_isValid = false;
}

void OAIPurchaseOrderUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseOrderUpdateDto::fromJsonObject(QJsonObject json) {

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_change_dates_on_lines_isValid = ::OpenAPI::fromJsonValue(m_change_dates_on_lines, json[QString("changeDatesOnLines")]);
    m_change_dates_on_lines_isSet = !json[QString("changeDatesOnLines")].isNull() && m_change_dates_on_lines_isValid;

    m_control_total_isValid = ::OpenAPI::fromJsonValue(m_control_total, json[QString("controlTotal")]);
    m_control_total_isSet = !json[QString("controlTotal")].isNull() && m_control_total_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discount_details_isValid = ::OpenAPI::fromJsonValue(m_discount_details, json[QString("discountDetails")]);
    m_discount_details_isSet = !json[QString("discountDetails")].isNull() && m_discount_details_isValid;

    m_dont_email_isValid = ::OpenAPI::fromJsonValue(m_dont_email, json[QString("dontEmail")]);
    m_dont_email_isSet = !json[QString("dontEmail")].isNull() && m_dont_email_isValid;

    m_dont_print_isValid = ::OpenAPI::fromJsonValue(m_dont_print, json[QString("dontPrint")]);
    m_dont_print_isSet = !json[QString("dontPrint")].isNull() && m_dont_print_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("exchangeRate")]);
    m_exchange_rate_isSet = !json[QString("exchangeRate")].isNull() && m_exchange_rate_isValid;

    m_fob_point_isValid = ::OpenAPI::fromJsonValue(m_fob_point, json[QString("fobPoint")]);
    m_fob_point_isSet = !json[QString("fobPoint")].isNull() && m_fob_point_isValid;

    m_gln_isValid = ::OpenAPI::fromJsonValue(m_gln, json[QString("gln")]);
    m_gln_isSet = !json[QString("gln")].isNull() && m_gln_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_order_number_isValid = ::OpenAPI::fromJsonValue(m_order_number, json[QString("orderNumber")]);
    m_order_number_isSet = !json[QString("orderNumber")].isNull() && m_order_number_isValid;

    m_order_type_isValid = ::OpenAPI::fromJsonValue(m_order_type, json[QString("orderType")]);
    m_order_type_isSet = !json[QString("orderType")].isNull() && m_order_type_isValid;

    m_override_number_series_isValid = ::OpenAPI::fromJsonValue(m_override_number_series, json[QString("overrideNumberSeries")]);
    m_override_number_series_isSet = !json[QString("overrideNumberSeries")].isNull() && m_override_number_series_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_promised_on_isValid = ::OpenAPI::fromJsonValue(m_promised_on, json[QString("promisedOn")]);
    m_promised_on_isSet = !json[QString("promisedOn")].isNull() && m_promised_on_isValid;

    m_remit_address_isValid = ::OpenAPI::fromJsonValue(m_remit_address, json[QString("remitAddress")]);
    m_remit_address_isSet = !json[QString("remitAddress")].isNull() && m_remit_address_isValid;

    m_remit_contact_isValid = ::OpenAPI::fromJsonValue(m_remit_contact, json[QString("remitContact")]);
    m_remit_contact_isSet = !json[QString("remitContact")].isNull() && m_remit_contact_isValid;

    m_ship_terms_isValid = ::OpenAPI::fromJsonValue(m_ship_terms, json[QString("shipTerms")]);
    m_ship_terms_isSet = !json[QString("shipTerms")].isNull() && m_ship_terms_isValid;

    m_ship_to_isValid = ::OpenAPI::fromJsonValue(m_ship_to, json[QString("shipTo")]);
    m_ship_to_isSet = !json[QString("shipTo")].isNull() && m_ship_to_isValid;

    m_ship_via_isValid = ::OpenAPI::fromJsonValue(m_ship_via, json[QString("shipVia")]);
    m_ship_via_isSet = !json[QString("shipVia")].isNull() && m_ship_via_isValid;

    m_shipping_address_isValid = ::OpenAPI::fromJsonValue(m_shipping_address, json[QString("shippingAddress")]);
    m_shipping_address_isSet = !json[QString("shippingAddress")].isNull() && m_shipping_address_isValid;

    m_shipping_contact_isValid = ::OpenAPI::fromJsonValue(m_shipping_contact, json[QString("shippingContact")]);
    m_shipping_contact_isSet = !json[QString("shippingContact")].isNull() && m_shipping_contact_isValid;

    m_shipping_destination_type_isValid = ::OpenAPI::fromJsonValue(m_shipping_destination_type, json[QString("shippingDestinationType")]);
    m_shipping_destination_type_isSet = !json[QString("shippingDestinationType")].isNull() && m_shipping_destination_type_isValid;

    m_shipping_location_isValid = ::OpenAPI::fromJsonValue(m_shipping_location, json[QString("shippingLocation")]);
    m_shipping_location_isSet = !json[QString("shippingLocation")].isNull() && m_shipping_location_isValid;

    m_supplier_isValid = ::OpenAPI::fromJsonValue(m_supplier, json[QString("supplier")]);
    m_supplier_isSet = !json[QString("supplier")].isNull() && m_supplier_isValid;

    m_supplier_ref_isValid = ::OpenAPI::fromJsonValue(m_supplier_ref, json[QString("supplierRef")]);
    m_supplier_ref_isSet = !json[QString("supplierRef")].isNull() && m_supplier_ref_isValid;

    m_supplier_vat_zone_isValid = ::OpenAPI::fromJsonValue(m_supplier_vat_zone, json[QString("supplierVatZone")]);
    m_supplier_vat_zone_isSet = !json[QString("supplierVatZone")].isNull() && m_supplier_vat_zone_isValid;

    m_terms_isValid = ::OpenAPI::fromJsonValue(m_terms, json[QString("terms")]);
    m_terms_isSet = !json[QString("terms")].isNull() && m_terms_isValid;

    m_vat_registration_id_isValid = ::OpenAPI::fromJsonValue(m_vat_registration_id, json[QString("vatRegistrationId")]);
    m_vat_registration_id_isSet = !json[QString("vatRegistrationId")].isNull() && m_vat_registration_id_isValid;
}

QString OAIPurchaseOrderUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseOrderUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_change_dates_on_lines_isSet) {
        obj.insert(QString("changeDatesOnLines"), ::OpenAPI::toJsonValue(m_change_dates_on_lines));
    }
    if (m_control_total.isSet()) {
        obj.insert(QString("controlTotal"), ::OpenAPI::toJsonValue(m_control_total));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date.isSet()) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discount_details.size() > 0) {
        obj.insert(QString("discountDetails"), ::OpenAPI::toJsonValue(m_discount_details));
    }
    if (m_dont_email.isSet()) {
        obj.insert(QString("dontEmail"), ::OpenAPI::toJsonValue(m_dont_email));
    }
    if (m_dont_print.isSet()) {
        obj.insert(QString("dontPrint"), ::OpenAPI::toJsonValue(m_dont_print));
    }
    if (m_exchange_rate.isSet()) {
        obj.insert(QString("exchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_fob_point.isSet()) {
        obj.insert(QString("fobPoint"), ::OpenAPI::toJsonValue(m_fob_point));
    }
    if (m_gln.isSet()) {
        obj.insert(QString("gln"), ::OpenAPI::toJsonValue(m_gln));
    }
    if (m_hold.isSet()) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_note.isSet()) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_order_number.isSet()) {
        obj.insert(QString("orderNumber"), ::OpenAPI::toJsonValue(m_order_number));
    }
    if (m_order_type.isSet()) {
        obj.insert(QString("orderType"), ::OpenAPI::toJsonValue(m_order_type));
    }
    if (m_override_number_series.isSet()) {
        obj.insert(QString("overrideNumberSeries"), ::OpenAPI::toJsonValue(m_override_number_series));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_promised_on.isSet()) {
        obj.insert(QString("promisedOn"), ::OpenAPI::toJsonValue(m_promised_on));
    }
    if (m_remit_address.isSet()) {
        obj.insert(QString("remitAddress"), ::OpenAPI::toJsonValue(m_remit_address));
    }
    if (m_remit_contact.isSet()) {
        obj.insert(QString("remitContact"), ::OpenAPI::toJsonValue(m_remit_contact));
    }
    if (m_ship_terms.isSet()) {
        obj.insert(QString("shipTerms"), ::OpenAPI::toJsonValue(m_ship_terms));
    }
    if (m_ship_to.isSet()) {
        obj.insert(QString("shipTo"), ::OpenAPI::toJsonValue(m_ship_to));
    }
    if (m_ship_via.isSet()) {
        obj.insert(QString("shipVia"), ::OpenAPI::toJsonValue(m_ship_via));
    }
    if (m_shipping_address.isSet()) {
        obj.insert(QString("shippingAddress"), ::OpenAPI::toJsonValue(m_shipping_address));
    }
    if (m_shipping_contact.isSet()) {
        obj.insert(QString("shippingContact"), ::OpenAPI::toJsonValue(m_shipping_contact));
    }
    if (m_shipping_destination_type.isSet()) {
        obj.insert(QString("shippingDestinationType"), ::OpenAPI::toJsonValue(m_shipping_destination_type));
    }
    if (m_shipping_location.isSet()) {
        obj.insert(QString("shippingLocation"), ::OpenAPI::toJsonValue(m_shipping_location));
    }
    if (m_supplier.isSet()) {
        obj.insert(QString("supplier"), ::OpenAPI::toJsonValue(m_supplier));
    }
    if (m_supplier_ref.isSet()) {
        obj.insert(QString("supplierRef"), ::OpenAPI::toJsonValue(m_supplier_ref));
    }
    if (m_supplier_vat_zone.isSet()) {
        obj.insert(QString("supplierVatZone"), ::OpenAPI::toJsonValue(m_supplier_vat_zone));
    }
    if (m_terms.isSet()) {
        obj.insert(QString("terms"), ::OpenAPI::toJsonValue(m_terms));
    }
    if (m_vat_registration_id.isSet()) {
        obj.insert(QString("vatRegistrationId"), ::OpenAPI::toJsonValue(m_vat_registration_id));
    }
    return obj;
}

OAIDtoValueOfString OAIPurchaseOrderUpdateDto::getBranch() const {
    return m_branch;
}
void OAIPurchaseOrderUpdateDto::setBranch(const OAIDtoValueOfString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_branch_Valid() const{
    return m_branch_isValid;
}

bool OAIPurchaseOrderUpdateDto::isChangeDatesOnLines() const {
    return m_change_dates_on_lines;
}
void OAIPurchaseOrderUpdateDto::setChangeDatesOnLines(const bool &change_dates_on_lines) {
    m_change_dates_on_lines = change_dates_on_lines;
    m_change_dates_on_lines_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_change_dates_on_lines_Set() const{
    return m_change_dates_on_lines_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_change_dates_on_lines_Valid() const{
    return m_change_dates_on_lines_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIPurchaseOrderUpdateDto::getControlTotal() const {
    return m_control_total;
}
void OAIPurchaseOrderUpdateDto::setControlTotal(const OAIDtoValueOfNullableOfDecimal &control_total) {
    m_control_total = control_total;
    m_control_total_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_control_total_Set() const{
    return m_control_total_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_control_total_Valid() const{
    return m_control_total_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderUpdateDto::getCurrency() const {
    return m_currency;
}
void OAIPurchaseOrderUpdateDto::setCurrency(const OAIDtoValueOfString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_currency_Valid() const{
    return m_currency_isValid;
}

OAIDtoValueOfNullableOfDateTime OAIPurchaseOrderUpdateDto::getDate() const {
    return m_date;
}
void OAIPurchaseOrderUpdateDto::setDate(const OAIDtoValueOfNullableOfDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_date_Valid() const{
    return m_date_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderUpdateDto::getDescription() const {
    return m_description;
}
void OAIPurchaseOrderUpdateDto::setDescription(const OAIDtoValueOfString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIDiscountDetailUpdateDto> OAIPurchaseOrderUpdateDto::getDiscountDetails() const {
    return m_discount_details;
}
void OAIPurchaseOrderUpdateDto::setDiscountDetails(const QList<OAIDiscountDetailUpdateDto> &discount_details) {
    m_discount_details = discount_details;
    m_discount_details_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_discount_details_Set() const{
    return m_discount_details_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_discount_details_Valid() const{
    return m_discount_details_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIPurchaseOrderUpdateDto::getDontEmail() const {
    return m_dont_email;
}
void OAIPurchaseOrderUpdateDto::setDontEmail(const OAIDtoValueOfNullableOfBoolean &dont_email) {
    m_dont_email = dont_email;
    m_dont_email_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_dont_email_Set() const{
    return m_dont_email_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_dont_email_Valid() const{
    return m_dont_email_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIPurchaseOrderUpdateDto::getDontPrint() const {
    return m_dont_print;
}
void OAIPurchaseOrderUpdateDto::setDontPrint(const OAIDtoValueOfNullableOfBoolean &dont_print) {
    m_dont_print = dont_print;
    m_dont_print_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_dont_print_Set() const{
    return m_dont_print_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_dont_print_Valid() const{
    return m_dont_print_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIPurchaseOrderUpdateDto::getExchangeRate() const {
    return m_exchange_rate;
}
void OAIPurchaseOrderUpdateDto::setExchangeRate(const OAIDtoValueOfNullableOfDecimal &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderUpdateDto::getFobPoint() const {
    return m_fob_point;
}
void OAIPurchaseOrderUpdateDto::setFobPoint(const OAIDtoValueOfString &fob_point) {
    m_fob_point = fob_point;
    m_fob_point_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_fob_point_Set() const{
    return m_fob_point_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_fob_point_Valid() const{
    return m_fob_point_isValid;
}

OAIGlnInPurchaseOrderUpdateDto OAIPurchaseOrderUpdateDto::getGln() const {
    return m_gln;
}
void OAIPurchaseOrderUpdateDto::setGln(const OAIGlnInPurchaseOrderUpdateDto &gln) {
    m_gln = gln;
    m_gln_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_gln_Set() const{
    return m_gln_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_gln_Valid() const{
    return m_gln_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIPurchaseOrderUpdateDto::getHold() const {
    return m_hold;
}
void OAIPurchaseOrderUpdateDto::setHold(const OAIDtoValueOfNullableOfBoolean &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_hold_Valid() const{
    return m_hold_isValid;
}

QList<OAIPurchaseOrderLineUpdateDto> OAIPurchaseOrderUpdateDto::getLines() const {
    return m_lines;
}
void OAIPurchaseOrderUpdateDto::setLines(const QList<OAIPurchaseOrderLineUpdateDto> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_lines_Valid() const{
    return m_lines_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderUpdateDto::getLocation() const {
    return m_location;
}
void OAIPurchaseOrderUpdateDto::setLocation(const OAIDtoValueOfString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderUpdateDto::getNote() const {
    return m_note;
}
void OAIPurchaseOrderUpdateDto::setNote(const OAIDtoValueOfString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_note_Valid() const{
    return m_note_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderUpdateDto::getOrderNumber() const {
    return m_order_number;
}
void OAIPurchaseOrderUpdateDto::setOrderNumber(const OAIDtoValueOfString &order_number) {
    m_order_number = order_number;
    m_order_number_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_order_number_Set() const{
    return m_order_number_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_order_number_Valid() const{
    return m_order_number_isValid;
}

OAIDtoValueOfNullableOfPurchaseOrderType OAIPurchaseOrderUpdateDto::getOrderType() const {
    return m_order_type;
}
void OAIPurchaseOrderUpdateDto::setOrderType(const OAIDtoValueOfNullableOfPurchaseOrderType &order_type) {
    m_order_type = order_type;
    m_order_type_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_order_type_Set() const{
    return m_order_type_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_order_type_Valid() const{
    return m_order_type_isValid;
}

OAIDtoValueOfBoolean OAIPurchaseOrderUpdateDto::getOverrideNumberSeries() const {
    return m_override_number_series;
}
void OAIPurchaseOrderUpdateDto::setOverrideNumberSeries(const OAIDtoValueOfBoolean &override_number_series) {
    m_override_number_series = override_number_series;
    m_override_number_series_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_override_number_series_Set() const{
    return m_override_number_series_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_override_number_series_Valid() const{
    return m_override_number_series_isValid;
}

OAIDtoValueOfNullableOfGuid OAIPurchaseOrderUpdateDto::getOwner() const {
    return m_owner;
}
void OAIPurchaseOrderUpdateDto::setOwner(const OAIDtoValueOfNullableOfGuid &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIDtoValueOfNullableOfDateTime OAIPurchaseOrderUpdateDto::getPromisedOn() const {
    return m_promised_on;
}
void OAIPurchaseOrderUpdateDto::setPromisedOn(const OAIDtoValueOfNullableOfDateTime &promised_on) {
    m_promised_on = promised_on;
    m_promised_on_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_promised_on_Set() const{
    return m_promised_on_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_promised_on_Valid() const{
    return m_promised_on_isValid;
}

OAIDtoValueOfPurchaseOrderAddressUpdateDto OAIPurchaseOrderUpdateDto::getRemitAddress() const {
    return m_remit_address;
}
void OAIPurchaseOrderUpdateDto::setRemitAddress(const OAIDtoValueOfPurchaseOrderAddressUpdateDto &remit_address) {
    m_remit_address = remit_address;
    m_remit_address_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_remit_address_Set() const{
    return m_remit_address_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_remit_address_Valid() const{
    return m_remit_address_isValid;
}

OAIDtoValueOfPurchaseOrderContactUpdateDto OAIPurchaseOrderUpdateDto::getRemitContact() const {
    return m_remit_contact;
}
void OAIPurchaseOrderUpdateDto::setRemitContact(const OAIDtoValueOfPurchaseOrderContactUpdateDto &remit_contact) {
    m_remit_contact = remit_contact;
    m_remit_contact_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_remit_contact_Set() const{
    return m_remit_contact_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_remit_contact_Valid() const{
    return m_remit_contact_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderUpdateDto::getShipTerms() const {
    return m_ship_terms;
}
void OAIPurchaseOrderUpdateDto::setShipTerms(const OAIDtoValueOfString &ship_terms) {
    m_ship_terms = ship_terms;
    m_ship_terms_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_ship_terms_Set() const{
    return m_ship_terms_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_ship_terms_Valid() const{
    return m_ship_terms_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderUpdateDto::getShipTo() const {
    return m_ship_to;
}
void OAIPurchaseOrderUpdateDto::setShipTo(const OAIDtoValueOfString &ship_to) {
    m_ship_to = ship_to;
    m_ship_to_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_ship_to_Set() const{
    return m_ship_to_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_ship_to_Valid() const{
    return m_ship_to_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderUpdateDto::getShipVia() const {
    return m_ship_via;
}
void OAIPurchaseOrderUpdateDto::setShipVia(const OAIDtoValueOfString &ship_via) {
    m_ship_via = ship_via;
    m_ship_via_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_ship_via_Set() const{
    return m_ship_via_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_ship_via_Valid() const{
    return m_ship_via_isValid;
}

OAIDtoValueOfPurchaseOrderAddressUpdateDto OAIPurchaseOrderUpdateDto::getShippingAddress() const {
    return m_shipping_address;
}
void OAIPurchaseOrderUpdateDto::setShippingAddress(const OAIDtoValueOfPurchaseOrderAddressUpdateDto &shipping_address) {
    m_shipping_address = shipping_address;
    m_shipping_address_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_shipping_address_Set() const{
    return m_shipping_address_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_shipping_address_Valid() const{
    return m_shipping_address_isValid;
}

OAIDtoValueOfPurchaseOrderContactUpdateDto OAIPurchaseOrderUpdateDto::getShippingContact() const {
    return m_shipping_contact;
}
void OAIPurchaseOrderUpdateDto::setShippingContact(const OAIDtoValueOfPurchaseOrderContactUpdateDto &shipping_contact) {
    m_shipping_contact = shipping_contact;
    m_shipping_contact_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_shipping_contact_Set() const{
    return m_shipping_contact_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_shipping_contact_Valid() const{
    return m_shipping_contact_isValid;
}

OAIDtoValueOfNullableOfPOShippingDestinationType OAIPurchaseOrderUpdateDto::getShippingDestinationType() const {
    return m_shipping_destination_type;
}
void OAIPurchaseOrderUpdateDto::setShippingDestinationType(const OAIDtoValueOfNullableOfPOShippingDestinationType &shipping_destination_type) {
    m_shipping_destination_type = shipping_destination_type;
    m_shipping_destination_type_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_shipping_destination_type_Set() const{
    return m_shipping_destination_type_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_shipping_destination_type_Valid() const{
    return m_shipping_destination_type_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderUpdateDto::getShippingLocation() const {
    return m_shipping_location;
}
void OAIPurchaseOrderUpdateDto::setShippingLocation(const OAIDtoValueOfString &shipping_location) {
    m_shipping_location = shipping_location;
    m_shipping_location_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_shipping_location_Set() const{
    return m_shipping_location_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_shipping_location_Valid() const{
    return m_shipping_location_isValid;
}

OAISupplierInPurchaseOrderUpdateDto OAIPurchaseOrderUpdateDto::getSupplier() const {
    return m_supplier;
}
void OAIPurchaseOrderUpdateDto::setSupplier(const OAISupplierInPurchaseOrderUpdateDto &supplier) {
    m_supplier = supplier;
    m_supplier_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_supplier_Set() const{
    return m_supplier_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_supplier_Valid() const{
    return m_supplier_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderUpdateDto::getSupplierRef() const {
    return m_supplier_ref;
}
void OAIPurchaseOrderUpdateDto::setSupplierRef(const OAIDtoValueOfString &supplier_ref) {
    m_supplier_ref = supplier_ref;
    m_supplier_ref_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_supplier_ref_Set() const{
    return m_supplier_ref_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_supplier_ref_Valid() const{
    return m_supplier_ref_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderUpdateDto::getSupplierVatZone() const {
    return m_supplier_vat_zone;
}
void OAIPurchaseOrderUpdateDto::setSupplierVatZone(const OAIDtoValueOfString &supplier_vat_zone) {
    m_supplier_vat_zone = supplier_vat_zone;
    m_supplier_vat_zone_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_supplier_vat_zone_Set() const{
    return m_supplier_vat_zone_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_supplier_vat_zone_Valid() const{
    return m_supplier_vat_zone_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderUpdateDto::getTerms() const {
    return m_terms;
}
void OAIPurchaseOrderUpdateDto::setTerms(const OAIDtoValueOfString &terms) {
    m_terms = terms;
    m_terms_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_terms_Set() const{
    return m_terms_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_terms_Valid() const{
    return m_terms_isValid;
}

OAIVatRegistrationIdInPurchaseOrderUpdateDto OAIPurchaseOrderUpdateDto::getVatRegistrationId() const {
    return m_vat_registration_id;
}
void OAIPurchaseOrderUpdateDto::setVatRegistrationId(const OAIVatRegistrationIdInPurchaseOrderUpdateDto &vat_registration_id) {
    m_vat_registration_id = vat_registration_id;
    m_vat_registration_id_isSet = true;
}

bool OAIPurchaseOrderUpdateDto::is_vat_registration_id_Set() const{
    return m_vat_registration_id_isSet;
}

bool OAIPurchaseOrderUpdateDto::is_vat_registration_id_Valid() const{
    return m_vat_registration_id_isValid;
}

bool OAIPurchaseOrderUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_dates_on_lines_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_total.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dont_email.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dont_print.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fob_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gln.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_number_series.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_promised_on.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remit_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remit_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_to.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_via.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_destination_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_vat_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_registration_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseOrderUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
