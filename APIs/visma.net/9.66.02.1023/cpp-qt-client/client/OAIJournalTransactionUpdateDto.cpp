/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJournalTransactionUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJournalTransactionUpdateDto::OAIJournalTransactionUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJournalTransactionUpdateDto::OAIJournalTransactionUpdateDto() {
    this->initializeModel();
}

OAIJournalTransactionUpdateDto::~OAIJournalTransactionUpdateDto() {}

void OAIJournalTransactionUpdateDto::initializeModel() {

    m_auto_reversing_isSet = false;
    m_auto_reversing_isValid = false;

    m_batch_number_isSet = false;
    m_batch_number_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_control_total_in_currency_isSet = false;
    m_control_total_in_currency_isValid = false;

    m_create_vat_transaction_isSet = false;
    m_create_vat_transaction_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_financial_period_isSet = false;
    m_financial_period_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_journal_transaction_lines_isSet = false;
    m_journal_transaction_lines_isValid = false;

    m_ledger_isSet = false;
    m_ledger_isValid = false;

    m_override_number_series_isSet = false;
    m_override_number_series_isValid = false;

    m_post_period_isSet = false;
    m_post_period_isValid = false;

    m_skip_vat_amount_validation_isSet = false;
    m_skip_vat_amount_validation_isValid = false;

    m_transaction_code_isSet = false;
    m_transaction_code_isValid = false;

    m_transaction_date_isSet = false;
    m_transaction_date_isValid = false;
}

void OAIJournalTransactionUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJournalTransactionUpdateDto::fromJsonObject(QJsonObject json) {

    m_auto_reversing_isValid = ::OpenAPI::fromJsonValue(m_auto_reversing, json[QString("autoReversing")]);
    m_auto_reversing_isSet = !json[QString("autoReversing")].isNull() && m_auto_reversing_isValid;

    m_batch_number_isValid = ::OpenAPI::fromJsonValue(m_batch_number, json[QString("batchNumber")]);
    m_batch_number_isSet = !json[QString("batchNumber")].isNull() && m_batch_number_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_control_total_in_currency_isValid = ::OpenAPI::fromJsonValue(m_control_total_in_currency, json[QString("controlTotalInCurrency")]);
    m_control_total_in_currency_isSet = !json[QString("controlTotalInCurrency")].isNull() && m_control_total_in_currency_isValid;

    m_create_vat_transaction_isValid = ::OpenAPI::fromJsonValue(m_create_vat_transaction, json[QString("createVatTransaction")]);
    m_create_vat_transaction_isSet = !json[QString("createVatTransaction")].isNull() && m_create_vat_transaction_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("exchangeRate")]);
    m_exchange_rate_isSet = !json[QString("exchangeRate")].isNull() && m_exchange_rate_isValid;

    m_financial_period_isValid = ::OpenAPI::fromJsonValue(m_financial_period, json[QString("financialPeriod")]);
    m_financial_period_isSet = !json[QString("financialPeriod")].isNull() && m_financial_period_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_journal_transaction_lines_isValid = ::OpenAPI::fromJsonValue(m_journal_transaction_lines, json[QString("journalTransactionLines")]);
    m_journal_transaction_lines_isSet = !json[QString("journalTransactionLines")].isNull() && m_journal_transaction_lines_isValid;

    m_ledger_isValid = ::OpenAPI::fromJsonValue(m_ledger, json[QString("ledger")]);
    m_ledger_isSet = !json[QString("ledger")].isNull() && m_ledger_isValid;

    m_override_number_series_isValid = ::OpenAPI::fromJsonValue(m_override_number_series, json[QString("overrideNumberSeries")]);
    m_override_number_series_isSet = !json[QString("overrideNumberSeries")].isNull() && m_override_number_series_isValid;

    m_post_period_isValid = ::OpenAPI::fromJsonValue(m_post_period, json[QString("postPeriod")]);
    m_post_period_isSet = !json[QString("postPeriod")].isNull() && m_post_period_isValid;

    m_skip_vat_amount_validation_isValid = ::OpenAPI::fromJsonValue(m_skip_vat_amount_validation, json[QString("skipVatAmountValidation")]);
    m_skip_vat_amount_validation_isSet = !json[QString("skipVatAmountValidation")].isNull() && m_skip_vat_amount_validation_isValid;

    m_transaction_code_isValid = ::OpenAPI::fromJsonValue(m_transaction_code, json[QString("transactionCode")]);
    m_transaction_code_isSet = !json[QString("transactionCode")].isNull() && m_transaction_code_isValid;

    m_transaction_date_isValid = ::OpenAPI::fromJsonValue(m_transaction_date, json[QString("transactionDate")]);
    m_transaction_date_isSet = !json[QString("transactionDate")].isNull() && m_transaction_date_isValid;
}

QString OAIJournalTransactionUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJournalTransactionUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_reversing.isSet()) {
        obj.insert(QString("autoReversing"), ::OpenAPI::toJsonValue(m_auto_reversing));
    }
    if (m_batch_number.isSet()) {
        obj.insert(QString("batchNumber"), ::OpenAPI::toJsonValue(m_batch_number));
    }
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_control_total_in_currency.isSet()) {
        obj.insert(QString("controlTotalInCurrency"), ::OpenAPI::toJsonValue(m_control_total_in_currency));
    }
    if (m_create_vat_transaction.isSet()) {
        obj.insert(QString("createVatTransaction"), ::OpenAPI::toJsonValue(m_create_vat_transaction));
    }
    if (m_currency_id.isSet()) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_exchange_rate.isSet()) {
        obj.insert(QString("exchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_financial_period.isSet()) {
        obj.insert(QString("financialPeriod"), ::OpenAPI::toJsonValue(m_financial_period));
    }
    if (m_hold.isSet()) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_journal_transaction_lines.size() > 0) {
        obj.insert(QString("journalTransactionLines"), ::OpenAPI::toJsonValue(m_journal_transaction_lines));
    }
    if (m_ledger.isSet()) {
        obj.insert(QString("ledger"), ::OpenAPI::toJsonValue(m_ledger));
    }
    if (m_override_number_series.isSet()) {
        obj.insert(QString("overrideNumberSeries"), ::OpenAPI::toJsonValue(m_override_number_series));
    }
    if (m_post_period.isSet()) {
        obj.insert(QString("postPeriod"), ::OpenAPI::toJsonValue(m_post_period));
    }
    if (m_skip_vat_amount_validation.isSet()) {
        obj.insert(QString("skipVatAmountValidation"), ::OpenAPI::toJsonValue(m_skip_vat_amount_validation));
    }
    if (m_transaction_code.isSet()) {
        obj.insert(QString("transactionCode"), ::OpenAPI::toJsonValue(m_transaction_code));
    }
    if (m_transaction_date.isSet()) {
        obj.insert(QString("transactionDate"), ::OpenAPI::toJsonValue(m_transaction_date));
    }
    return obj;
}

OAIDtoValueOfBoolean OAIJournalTransactionUpdateDto::getAutoReversing() const {
    return m_auto_reversing;
}
void OAIJournalTransactionUpdateDto::setAutoReversing(const OAIDtoValueOfBoolean &auto_reversing) {
    m_auto_reversing = auto_reversing;
    m_auto_reversing_isSet = true;
}

bool OAIJournalTransactionUpdateDto::is_auto_reversing_Set() const{
    return m_auto_reversing_isSet;
}

bool OAIJournalTransactionUpdateDto::is_auto_reversing_Valid() const{
    return m_auto_reversing_isValid;
}

OAIDtoValueOfString OAIJournalTransactionUpdateDto::getBatchNumber() const {
    return m_batch_number;
}
void OAIJournalTransactionUpdateDto::setBatchNumber(const OAIDtoValueOfString &batch_number) {
    m_batch_number = batch_number;
    m_batch_number_isSet = true;
}

bool OAIJournalTransactionUpdateDto::is_batch_number_Set() const{
    return m_batch_number_isSet;
}

bool OAIJournalTransactionUpdateDto::is_batch_number_Valid() const{
    return m_batch_number_isValid;
}

OAIDtoValueOfString OAIJournalTransactionUpdateDto::getBranch() const {
    return m_branch;
}
void OAIJournalTransactionUpdateDto::setBranch(const OAIDtoValueOfString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIJournalTransactionUpdateDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIJournalTransactionUpdateDto::is_branch_Valid() const{
    return m_branch_isValid;
}

OAIDtoValueOfDecimal OAIJournalTransactionUpdateDto::getControlTotalInCurrency() const {
    return m_control_total_in_currency;
}
void OAIJournalTransactionUpdateDto::setControlTotalInCurrency(const OAIDtoValueOfDecimal &control_total_in_currency) {
    m_control_total_in_currency = control_total_in_currency;
    m_control_total_in_currency_isSet = true;
}

bool OAIJournalTransactionUpdateDto::is_control_total_in_currency_Set() const{
    return m_control_total_in_currency_isSet;
}

bool OAIJournalTransactionUpdateDto::is_control_total_in_currency_Valid() const{
    return m_control_total_in_currency_isValid;
}

OAIDtoValueOfBoolean OAIJournalTransactionUpdateDto::getCreateVatTransaction() const {
    return m_create_vat_transaction;
}
void OAIJournalTransactionUpdateDto::setCreateVatTransaction(const OAIDtoValueOfBoolean &create_vat_transaction) {
    m_create_vat_transaction = create_vat_transaction;
    m_create_vat_transaction_isSet = true;
}

bool OAIJournalTransactionUpdateDto::is_create_vat_transaction_Set() const{
    return m_create_vat_transaction_isSet;
}

bool OAIJournalTransactionUpdateDto::is_create_vat_transaction_Valid() const{
    return m_create_vat_transaction_isValid;
}

OAIDtoValueOfString OAIJournalTransactionUpdateDto::getCurrencyId() const {
    return m_currency_id;
}
void OAIJournalTransactionUpdateDto::setCurrencyId(const OAIDtoValueOfString &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAIJournalTransactionUpdateDto::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAIJournalTransactionUpdateDto::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

OAIDtoValueOfString OAIJournalTransactionUpdateDto::getDescription() const {
    return m_description;
}
void OAIJournalTransactionUpdateDto::setDescription(const OAIDtoValueOfString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIJournalTransactionUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIJournalTransactionUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIDtoValueOfDecimal OAIJournalTransactionUpdateDto::getExchangeRate() const {
    return m_exchange_rate;
}
void OAIJournalTransactionUpdateDto::setExchangeRate(const OAIDtoValueOfDecimal &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAIJournalTransactionUpdateDto::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAIJournalTransactionUpdateDto::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

OAIFinancialPeriodInJournalTransactionUpdateDto OAIJournalTransactionUpdateDto::getFinancialPeriod() const {
    return m_financial_period;
}
void OAIJournalTransactionUpdateDto::setFinancialPeriod(const OAIFinancialPeriodInJournalTransactionUpdateDto &financial_period) {
    m_financial_period = financial_period;
    m_financial_period_isSet = true;
}

bool OAIJournalTransactionUpdateDto::is_financial_period_Set() const{
    return m_financial_period_isSet;
}

bool OAIJournalTransactionUpdateDto::is_financial_period_Valid() const{
    return m_financial_period_isValid;
}

OAIDtoValueOfBoolean OAIJournalTransactionUpdateDto::getHold() const {
    return m_hold;
}
void OAIJournalTransactionUpdateDto::setHold(const OAIDtoValueOfBoolean &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAIJournalTransactionUpdateDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAIJournalTransactionUpdateDto::is_hold_Valid() const{
    return m_hold_isValid;
}

QList<OAIJournalTransactionLineUpdateDto> OAIJournalTransactionUpdateDto::getJournalTransactionLines() const {
    return m_journal_transaction_lines;
}
void OAIJournalTransactionUpdateDto::setJournalTransactionLines(const QList<OAIJournalTransactionLineUpdateDto> &journal_transaction_lines) {
    m_journal_transaction_lines = journal_transaction_lines;
    m_journal_transaction_lines_isSet = true;
}

bool OAIJournalTransactionUpdateDto::is_journal_transaction_lines_Set() const{
    return m_journal_transaction_lines_isSet;
}

bool OAIJournalTransactionUpdateDto::is_journal_transaction_lines_Valid() const{
    return m_journal_transaction_lines_isValid;
}

OAIDtoValueOfString OAIJournalTransactionUpdateDto::getLedger() const {
    return m_ledger;
}
void OAIJournalTransactionUpdateDto::setLedger(const OAIDtoValueOfString &ledger) {
    m_ledger = ledger;
    m_ledger_isSet = true;
}

bool OAIJournalTransactionUpdateDto::is_ledger_Set() const{
    return m_ledger_isSet;
}

bool OAIJournalTransactionUpdateDto::is_ledger_Valid() const{
    return m_ledger_isValid;
}

OAIDtoValueOfBoolean OAIJournalTransactionUpdateDto::getOverrideNumberSeries() const {
    return m_override_number_series;
}
void OAIJournalTransactionUpdateDto::setOverrideNumberSeries(const OAIDtoValueOfBoolean &override_number_series) {
    m_override_number_series = override_number_series;
    m_override_number_series_isSet = true;
}

bool OAIJournalTransactionUpdateDto::is_override_number_series_Set() const{
    return m_override_number_series_isSet;
}

bool OAIJournalTransactionUpdateDto::is_override_number_series_Valid() const{
    return m_override_number_series_isValid;
}

OAIPostPeriodInJournalTransactionUpdateDto OAIJournalTransactionUpdateDto::getPostPeriod() const {
    return m_post_period;
}
void OAIJournalTransactionUpdateDto::setPostPeriod(const OAIPostPeriodInJournalTransactionUpdateDto &post_period) {
    m_post_period = post_period;
    m_post_period_isSet = true;
}

bool OAIJournalTransactionUpdateDto::is_post_period_Set() const{
    return m_post_period_isSet;
}

bool OAIJournalTransactionUpdateDto::is_post_period_Valid() const{
    return m_post_period_isValid;
}

OAIDtoValueOfBoolean OAIJournalTransactionUpdateDto::getSkipVatAmountValidation() const {
    return m_skip_vat_amount_validation;
}
void OAIJournalTransactionUpdateDto::setSkipVatAmountValidation(const OAIDtoValueOfBoolean &skip_vat_amount_validation) {
    m_skip_vat_amount_validation = skip_vat_amount_validation;
    m_skip_vat_amount_validation_isSet = true;
}

bool OAIJournalTransactionUpdateDto::is_skip_vat_amount_validation_Set() const{
    return m_skip_vat_amount_validation_isSet;
}

bool OAIJournalTransactionUpdateDto::is_skip_vat_amount_validation_Valid() const{
    return m_skip_vat_amount_validation_isValid;
}

OAIDtoValueOfString OAIJournalTransactionUpdateDto::getTransactionCode() const {
    return m_transaction_code;
}
void OAIJournalTransactionUpdateDto::setTransactionCode(const OAIDtoValueOfString &transaction_code) {
    m_transaction_code = transaction_code;
    m_transaction_code_isSet = true;
}

bool OAIJournalTransactionUpdateDto::is_transaction_code_Set() const{
    return m_transaction_code_isSet;
}

bool OAIJournalTransactionUpdateDto::is_transaction_code_Valid() const{
    return m_transaction_code_isValid;
}

OAIDtoValueOfDateTime OAIJournalTransactionUpdateDto::getTransactionDate() const {
    return m_transaction_date;
}
void OAIJournalTransactionUpdateDto::setTransactionDate(const OAIDtoValueOfDateTime &transaction_date) {
    m_transaction_date = transaction_date;
    m_transaction_date_isSet = true;
}

bool OAIJournalTransactionUpdateDto::is_transaction_date_Set() const{
    return m_transaction_date_isSet;
}

bool OAIJournalTransactionUpdateDto::is_transaction_date_Valid() const{
    return m_transaction_date_isValid;
}

bool OAIJournalTransactionUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_reversing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_total_in_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_vat_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_financial_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_journal_transaction_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ledger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_number_series.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_vat_amount_validation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_date.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJournalTransactionUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
