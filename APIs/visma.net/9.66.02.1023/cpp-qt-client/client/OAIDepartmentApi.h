/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDepartmentApi_H
#define OAI_OAIDepartmentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAIDepartmentDto.h"
#include "OAIDepartmentUpdateBaseDto.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDepartmentApi : public QObject {
    Q_OBJECT

public:
    OAIDepartmentApi(const int timeOut = 0);
    ~OAIDepartmentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_department_update_base_dto OAIDepartmentUpdateBaseDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void departmentCreateDepartment(const OAIDepartmentUpdateBaseDto &oai_department_update_base_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void departmentGetAllDepartmentDtos(const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  department_id QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void departmentGetDepartmentBydepartmentId(const QString &department_id, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  department_id QString [required]
    * @param[in]  oai_department_update_base_dto OAIDepartmentUpdateBaseDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void departmentUpdateDepartmentBydepartmentId(const QString &department_id, const OAIDepartmentUpdateBaseDto &oai_department_update_base_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void departmentCreateDepartmentCallback(OAIHttpRequestWorker *worker);
    void departmentGetAllDepartmentDtosCallback(OAIHttpRequestWorker *worker);
    void departmentGetDepartmentBydepartmentIdCallback(OAIHttpRequestWorker *worker);
    void departmentUpdateDepartmentBydepartmentIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void departmentCreateDepartmentSignal(OAIObject summary);
    void departmentGetAllDepartmentDtosSignal(QList<OAIDepartmentDto> summary);
    void departmentGetDepartmentBydepartmentIdSignal(OAIDepartmentDto summary);
    void departmentUpdateDepartmentBydepartmentIdSignal(OAIBackgroundApiAcceptedDto summary);


    void departmentCreateDepartmentSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void departmentGetAllDepartmentDtosSignalFull(OAIHttpRequestWorker *worker, QList<OAIDepartmentDto> summary);
    void departmentGetDepartmentBydepartmentIdSignalFull(OAIHttpRequestWorker *worker, OAIDepartmentDto summary);
    void departmentUpdateDepartmentBydepartmentIdSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);

    Q_DECL_DEPRECATED_X("Use departmentCreateDepartmentSignalError() instead")
    void departmentCreateDepartmentSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void departmentCreateDepartmentSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use departmentGetAllDepartmentDtosSignalError() instead")
    void departmentGetAllDepartmentDtosSignalE(QList<OAIDepartmentDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void departmentGetAllDepartmentDtosSignalError(QList<OAIDepartmentDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use departmentGetDepartmentBydepartmentIdSignalError() instead")
    void departmentGetDepartmentBydepartmentIdSignalE(OAIDepartmentDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void departmentGetDepartmentBydepartmentIdSignalError(OAIDepartmentDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use departmentUpdateDepartmentBydepartmentIdSignalError() instead")
    void departmentUpdateDepartmentBydepartmentIdSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void departmentUpdateDepartmentBydepartmentIdSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use departmentCreateDepartmentSignalErrorFull() instead")
    void departmentCreateDepartmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void departmentCreateDepartmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use departmentGetAllDepartmentDtosSignalErrorFull() instead")
    void departmentGetAllDepartmentDtosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void departmentGetAllDepartmentDtosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use departmentGetDepartmentBydepartmentIdSignalErrorFull() instead")
    void departmentGetDepartmentBydepartmentIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void departmentGetDepartmentBydepartmentIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use departmentUpdateDepartmentBydepartmentIdSignalErrorFull() instead")
    void departmentUpdateDepartmentBydepartmentIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void departmentUpdateDepartmentBydepartmentIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
