/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerContractRecurringSummaryLineDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerContractRecurringSummaryLineDto::OAICustomerContractRecurringSummaryLineDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerContractRecurringSummaryLineDto::OAICustomerContractRecurringSummaryLineDto() {
    this->initializeModel();
}

OAICustomerContractRecurringSummaryLineDto::~OAICustomerContractRecurringSummaryLineDto() {}

void OAICustomerContractRecurringSummaryLineDto::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_extra_usage_price_isSet = false;
    m_extra_usage_price_isValid = false;

    m_included_isSet = false;
    m_included_isValid = false;

    m_invoice_type_isSet = false;
    m_invoice_type_isValid = false;

    m_item_code_isSet = false;
    m_item_code_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_recurring_discount_isSet = false;
    m_recurring_discount_isValid = false;

    m_recurring_price_isSet = false;
    m_recurring_price_isValid = false;

    m_un_invoiced_isSet = false;
    m_un_invoiced_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;

    m_used_total_isSet = false;
    m_used_total_isValid = false;
}

void OAICustomerContractRecurringSummaryLineDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerContractRecurringSummaryLineDto::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_extra_usage_price_isValid = ::OpenAPI::fromJsonValue(m_extra_usage_price, json[QString("extraUsagePrice")]);
    m_extra_usage_price_isSet = !json[QString("extraUsagePrice")].isNull() && m_extra_usage_price_isValid;

    m_included_isValid = ::OpenAPI::fromJsonValue(m_included, json[QString("included")]);
    m_included_isSet = !json[QString("included")].isNull() && m_included_isValid;

    m_invoice_type_isValid = ::OpenAPI::fromJsonValue(m_invoice_type, json[QString("invoiceType")]);
    m_invoice_type_isSet = !json[QString("invoiceType")].isNull() && m_invoice_type_isValid;

    m_item_code_isValid = ::OpenAPI::fromJsonValue(m_item_code, json[QString("itemCode")]);
    m_item_code_isSet = !json[QString("itemCode")].isNull() && m_item_code_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_recurring_discount_isValid = ::OpenAPI::fromJsonValue(m_recurring_discount, json[QString("recurringDiscount")]);
    m_recurring_discount_isSet = !json[QString("recurringDiscount")].isNull() && m_recurring_discount_isValid;

    m_recurring_price_isValid = ::OpenAPI::fromJsonValue(m_recurring_price, json[QString("recurringPrice")]);
    m_recurring_price_isSet = !json[QString("recurringPrice")].isNull() && m_recurring_price_isValid;

    m_un_invoiced_isValid = ::OpenAPI::fromJsonValue(m_un_invoiced, json[QString("unInvoiced")]);
    m_un_invoiced_isSet = !json[QString("unInvoiced")].isNull() && m_un_invoiced_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;

    m_used_total_isValid = ::OpenAPI::fromJsonValue(m_used_total, json[QString("usedTotal")]);
    m_used_total_isSet = !json[QString("usedTotal")].isNull() && m_used_total_isValid;
}

QString OAICustomerContractRecurringSummaryLineDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerContractRecurringSummaryLineDto::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_extra_usage_price_isSet) {
        obj.insert(QString("extraUsagePrice"), ::OpenAPI::toJsonValue(m_extra_usage_price));
    }
    if (m_included_isSet) {
        obj.insert(QString("included"), ::OpenAPI::toJsonValue(m_included));
    }
    if (m_invoice_type_isSet) {
        obj.insert(QString("invoiceType"), ::OpenAPI::toJsonValue(m_invoice_type));
    }
    if (m_item_code_isSet) {
        obj.insert(QString("itemCode"), ::OpenAPI::toJsonValue(m_item_code));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_recurring_discount_isSet) {
        obj.insert(QString("recurringDiscount"), ::OpenAPI::toJsonValue(m_recurring_discount));
    }
    if (m_recurring_price_isSet) {
        obj.insert(QString("recurringPrice"), ::OpenAPI::toJsonValue(m_recurring_price));
    }
    if (m_un_invoiced_isSet) {
        obj.insert(QString("unInvoiced"), ::OpenAPI::toJsonValue(m_un_invoiced));
    }
    if (m_uom_isSet) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    if (m_used_total_isSet) {
        obj.insert(QString("usedTotal"), ::OpenAPI::toJsonValue(m_used_total));
    }
    return obj;
}

QString OAICustomerContractRecurringSummaryLineDto::getDescription() const {
    return m_description;
}
void OAICustomerContractRecurringSummaryLineDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICustomerContractRecurringSummaryLineDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAICustomerContractRecurringSummaryLineDto::is_description_Valid() const{
    return m_description_isValid;
}

double OAICustomerContractRecurringSummaryLineDto::getExtraUsagePrice() const {
    return m_extra_usage_price;
}
void OAICustomerContractRecurringSummaryLineDto::setExtraUsagePrice(const double &extra_usage_price) {
    m_extra_usage_price = extra_usage_price;
    m_extra_usage_price_isSet = true;
}

bool OAICustomerContractRecurringSummaryLineDto::is_extra_usage_price_Set() const{
    return m_extra_usage_price_isSet;
}

bool OAICustomerContractRecurringSummaryLineDto::is_extra_usage_price_Valid() const{
    return m_extra_usage_price_isValid;
}

double OAICustomerContractRecurringSummaryLineDto::getIncluded() const {
    return m_included;
}
void OAICustomerContractRecurringSummaryLineDto::setIncluded(const double &included) {
    m_included = included;
    m_included_isSet = true;
}

bool OAICustomerContractRecurringSummaryLineDto::is_included_Set() const{
    return m_included_isSet;
}

bool OAICustomerContractRecurringSummaryLineDto::is_included_Valid() const{
    return m_included_isValid;
}

QString OAICustomerContractRecurringSummaryLineDto::getInvoiceType() const {
    return m_invoice_type;
}
void OAICustomerContractRecurringSummaryLineDto::setInvoiceType(const QString &invoice_type) {
    m_invoice_type = invoice_type;
    m_invoice_type_isSet = true;
}

bool OAICustomerContractRecurringSummaryLineDto::is_invoice_type_Set() const{
    return m_invoice_type_isSet;
}

bool OAICustomerContractRecurringSummaryLineDto::is_invoice_type_Valid() const{
    return m_invoice_type_isValid;
}

QString OAICustomerContractRecurringSummaryLineDto::getItemCode() const {
    return m_item_code;
}
void OAICustomerContractRecurringSummaryLineDto::setItemCode(const QString &item_code) {
    m_item_code = item_code;
    m_item_code_isSet = true;
}

bool OAICustomerContractRecurringSummaryLineDto::is_item_code_Set() const{
    return m_item_code_isSet;
}

bool OAICustomerContractRecurringSummaryLineDto::is_item_code_Valid() const{
    return m_item_code_isValid;
}

QString OAICustomerContractRecurringSummaryLineDto::getItemId() const {
    return m_item_id;
}
void OAICustomerContractRecurringSummaryLineDto::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAICustomerContractRecurringSummaryLineDto::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAICustomerContractRecurringSummaryLineDto::is_item_id_Valid() const{
    return m_item_id_isValid;
}

double OAICustomerContractRecurringSummaryLineDto::getRecurringDiscount() const {
    return m_recurring_discount;
}
void OAICustomerContractRecurringSummaryLineDto::setRecurringDiscount(const double &recurring_discount) {
    m_recurring_discount = recurring_discount;
    m_recurring_discount_isSet = true;
}

bool OAICustomerContractRecurringSummaryLineDto::is_recurring_discount_Set() const{
    return m_recurring_discount_isSet;
}

bool OAICustomerContractRecurringSummaryLineDto::is_recurring_discount_Valid() const{
    return m_recurring_discount_isValid;
}

double OAICustomerContractRecurringSummaryLineDto::getRecurringPrice() const {
    return m_recurring_price;
}
void OAICustomerContractRecurringSummaryLineDto::setRecurringPrice(const double &recurring_price) {
    m_recurring_price = recurring_price;
    m_recurring_price_isSet = true;
}

bool OAICustomerContractRecurringSummaryLineDto::is_recurring_price_Set() const{
    return m_recurring_price_isSet;
}

bool OAICustomerContractRecurringSummaryLineDto::is_recurring_price_Valid() const{
    return m_recurring_price_isValid;
}

double OAICustomerContractRecurringSummaryLineDto::getUnInvoiced() const {
    return m_un_invoiced;
}
void OAICustomerContractRecurringSummaryLineDto::setUnInvoiced(const double &un_invoiced) {
    m_un_invoiced = un_invoiced;
    m_un_invoiced_isSet = true;
}

bool OAICustomerContractRecurringSummaryLineDto::is_un_invoiced_Set() const{
    return m_un_invoiced_isSet;
}

bool OAICustomerContractRecurringSummaryLineDto::is_un_invoiced_Valid() const{
    return m_un_invoiced_isValid;
}

QString OAICustomerContractRecurringSummaryLineDto::getUom() const {
    return m_uom;
}
void OAICustomerContractRecurringSummaryLineDto::setUom(const QString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAICustomerContractRecurringSummaryLineDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAICustomerContractRecurringSummaryLineDto::is_uom_Valid() const{
    return m_uom_isValid;
}

double OAICustomerContractRecurringSummaryLineDto::getUsedTotal() const {
    return m_used_total;
}
void OAICustomerContractRecurringSummaryLineDto::setUsedTotal(const double &used_total) {
    m_used_total = used_total;
    m_used_total_isSet = true;
}

bool OAICustomerContractRecurringSummaryLineDto::is_used_total_Set() const{
    return m_used_total_isSet;
}

bool OAICustomerContractRecurringSummaryLineDto::is_used_total_Valid() const{
    return m_used_total_isValid;
}

bool OAICustomerContractRecurringSummaryLineDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_usage_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_un_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerContractRecurringSummaryLineDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
