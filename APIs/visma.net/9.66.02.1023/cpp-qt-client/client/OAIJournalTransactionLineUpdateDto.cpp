/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJournalTransactionLineUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJournalTransactionLineUpdateDto::OAIJournalTransactionLineUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJournalTransactionLineUpdateDto::OAIJournalTransactionLineUpdateDto() {
    this->initializeModel();
}

OAIJournalTransactionLineUpdateDto::~OAIJournalTransactionLineUpdateDto() {}

void OAIJournalTransactionLineUpdateDto::initializeModel() {

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_credit_amount_in_currency_isSet = false;
    m_credit_amount_in_currency_isValid = false;

    m_debit_amount_in_currency_isSet = false;
    m_debit_amount_in_currency_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_project_task_isSet = false;
    m_project_task_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_reference_number_isSet = false;
    m_reference_number_isValid = false;

    m_subaccount_isSet = false;
    m_subaccount_isValid = false;

    m_transaction_description_isSet = false;
    m_transaction_description_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;

    m_vat_code_id_isSet = false;
    m_vat_code_id_isValid = false;

    m_vat_id_isSet = false;
    m_vat_id_isValid = false;
}

void OAIJournalTransactionLineUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJournalTransactionLineUpdateDto::fromJsonObject(QJsonObject json) {

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("accountNumber")]);
    m_account_number_isSet = !json[QString("accountNumber")].isNull() && m_account_number_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_credit_amount_in_currency_isValid = ::OpenAPI::fromJsonValue(m_credit_amount_in_currency, json[QString("creditAmountInCurrency")]);
    m_credit_amount_in_currency_isSet = !json[QString("creditAmountInCurrency")].isNull() && m_credit_amount_in_currency_isValid;

    m_debit_amount_in_currency_isValid = ::OpenAPI::fromJsonValue(m_debit_amount_in_currency, json[QString("debitAmountInCurrency")]);
    m_debit_amount_in_currency_isSet = !json[QString("debitAmountInCurrency")].isNull() && m_debit_amount_in_currency_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("lineNumber")]);
    m_line_number_isSet = !json[QString("lineNumber")].isNull() && m_line_number_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_project_task_isValid = ::OpenAPI::fromJsonValue(m_project_task, json[QString("projectTask")]);
    m_project_task_isSet = !json[QString("projectTask")].isNull() && m_project_task_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_reference_number_isValid = ::OpenAPI::fromJsonValue(m_reference_number, json[QString("referenceNumber")]);
    m_reference_number_isSet = !json[QString("referenceNumber")].isNull() && m_reference_number_isValid;

    m_subaccount_isValid = ::OpenAPI::fromJsonValue(m_subaccount, json[QString("subaccount")]);
    m_subaccount_isSet = !json[QString("subaccount")].isNull() && m_subaccount_isValid;

    m_transaction_description_isValid = ::OpenAPI::fromJsonValue(m_transaction_description, json[QString("transactionDescription")]);
    m_transaction_description_isSet = !json[QString("transactionDescription")].isNull() && m_transaction_description_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;

    m_vat_code_id_isValid = ::OpenAPI::fromJsonValue(m_vat_code_id, json[QString("vatCodeId")]);
    m_vat_code_id_isSet = !json[QString("vatCodeId")].isNull() && m_vat_code_id_isValid;

    m_vat_id_isValid = ::OpenAPI::fromJsonValue(m_vat_id, json[QString("vatId")]);
    m_vat_id_isSet = !json[QString("vatId")].isNull() && m_vat_id_isValid;
}

QString OAIJournalTransactionLineUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJournalTransactionLineUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_account_number.isSet()) {
        obj.insert(QString("accountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_credit_amount_in_currency.isSet()) {
        obj.insert(QString("creditAmountInCurrency"), ::OpenAPI::toJsonValue(m_credit_amount_in_currency));
    }
    if (m_debit_amount_in_currency.isSet()) {
        obj.insert(QString("debitAmountInCurrency"), ::OpenAPI::toJsonValue(m_debit_amount_in_currency));
    }
    if (m_line_number.isSet()) {
        obj.insert(QString("lineNumber"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_note.isSet()) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_project_task.isSet()) {
        obj.insert(QString("projectTask"), ::OpenAPI::toJsonValue(m_project_task));
    }
    if (m_quantity.isSet()) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_reference_number.isSet()) {
        obj.insert(QString("referenceNumber"), ::OpenAPI::toJsonValue(m_reference_number));
    }
    if (m_subaccount.size() > 0) {
        obj.insert(QString("subaccount"), ::OpenAPI::toJsonValue(m_subaccount));
    }
    if (m_transaction_description.isSet()) {
        obj.insert(QString("transactionDescription"), ::OpenAPI::toJsonValue(m_transaction_description));
    }
    if (m_uom.isSet()) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    if (m_vat_code_id.isSet()) {
        obj.insert(QString("vatCodeId"), ::OpenAPI::toJsonValue(m_vat_code_id));
    }
    if (m_vat_id.isSet()) {
        obj.insert(QString("vatId"), ::OpenAPI::toJsonValue(m_vat_id));
    }
    return obj;
}

OAIDtoValueOfString OAIJournalTransactionLineUpdateDto::getAccountNumber() const {
    return m_account_number;
}
void OAIJournalTransactionLineUpdateDto::setAccountNumber(const OAIDtoValueOfString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAIJournalTransactionLineUpdateDto::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAIJournalTransactionLineUpdateDto::is_account_number_Valid() const{
    return m_account_number_isValid;
}

OAIDtoValueOfString OAIJournalTransactionLineUpdateDto::getBranch() const {
    return m_branch;
}
void OAIJournalTransactionLineUpdateDto::setBranch(const OAIDtoValueOfString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIJournalTransactionLineUpdateDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIJournalTransactionLineUpdateDto::is_branch_Valid() const{
    return m_branch_isValid;
}

OAIDtoValueOfDecimal OAIJournalTransactionLineUpdateDto::getCreditAmountInCurrency() const {
    return m_credit_amount_in_currency;
}
void OAIJournalTransactionLineUpdateDto::setCreditAmountInCurrency(const OAIDtoValueOfDecimal &credit_amount_in_currency) {
    m_credit_amount_in_currency = credit_amount_in_currency;
    m_credit_amount_in_currency_isSet = true;
}

bool OAIJournalTransactionLineUpdateDto::is_credit_amount_in_currency_Set() const{
    return m_credit_amount_in_currency_isSet;
}

bool OAIJournalTransactionLineUpdateDto::is_credit_amount_in_currency_Valid() const{
    return m_credit_amount_in_currency_isValid;
}

OAIDtoValueOfDecimal OAIJournalTransactionLineUpdateDto::getDebitAmountInCurrency() const {
    return m_debit_amount_in_currency;
}
void OAIJournalTransactionLineUpdateDto::setDebitAmountInCurrency(const OAIDtoValueOfDecimal &debit_amount_in_currency) {
    m_debit_amount_in_currency = debit_amount_in_currency;
    m_debit_amount_in_currency_isSet = true;
}

bool OAIJournalTransactionLineUpdateDto::is_debit_amount_in_currency_Set() const{
    return m_debit_amount_in_currency_isSet;
}

bool OAIJournalTransactionLineUpdateDto::is_debit_amount_in_currency_Valid() const{
    return m_debit_amount_in_currency_isValid;
}

OAIDtoValueOfInt32 OAIJournalTransactionLineUpdateDto::getLineNumber() const {
    return m_line_number;
}
void OAIJournalTransactionLineUpdateDto::setLineNumber(const OAIDtoValueOfInt32 &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAIJournalTransactionLineUpdateDto::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAIJournalTransactionLineUpdateDto::is_line_number_Valid() const{
    return m_line_number_isValid;
}

OAIDtoValueOfString OAIJournalTransactionLineUpdateDto::getNote() const {
    return m_note;
}
void OAIJournalTransactionLineUpdateDto::setNote(const OAIDtoValueOfString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIJournalTransactionLineUpdateDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAIJournalTransactionLineUpdateDto::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIJournalTransactionLineUpdateDto::getOperation() const {
    return m_operation;
}
void OAIJournalTransactionLineUpdateDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIJournalTransactionLineUpdateDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIJournalTransactionLineUpdateDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIDtoValueOfString OAIJournalTransactionLineUpdateDto::getProject() const {
    return m_project;
}
void OAIJournalTransactionLineUpdateDto::setProject(const OAIDtoValueOfString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIJournalTransactionLineUpdateDto::is_project_Set() const{
    return m_project_isSet;
}

bool OAIJournalTransactionLineUpdateDto::is_project_Valid() const{
    return m_project_isValid;
}

OAIDtoValueOfString OAIJournalTransactionLineUpdateDto::getProjectTask() const {
    return m_project_task;
}
void OAIJournalTransactionLineUpdateDto::setProjectTask(const OAIDtoValueOfString &project_task) {
    m_project_task = project_task;
    m_project_task_isSet = true;
}

bool OAIJournalTransactionLineUpdateDto::is_project_task_Set() const{
    return m_project_task_isSet;
}

bool OAIJournalTransactionLineUpdateDto::is_project_task_Valid() const{
    return m_project_task_isValid;
}

OAIDtoValueOfDecimal OAIJournalTransactionLineUpdateDto::getQuantity() const {
    return m_quantity;
}
void OAIJournalTransactionLineUpdateDto::setQuantity(const OAIDtoValueOfDecimal &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIJournalTransactionLineUpdateDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIJournalTransactionLineUpdateDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIDtoValueOfString OAIJournalTransactionLineUpdateDto::getReferenceNumber() const {
    return m_reference_number;
}
void OAIJournalTransactionLineUpdateDto::setReferenceNumber(const OAIDtoValueOfString &reference_number) {
    m_reference_number = reference_number;
    m_reference_number_isSet = true;
}

bool OAIJournalTransactionLineUpdateDto::is_reference_number_Set() const{
    return m_reference_number_isSet;
}

bool OAIJournalTransactionLineUpdateDto::is_reference_number_Valid() const{
    return m_reference_number_isValid;
}

QList<OAISegmentUpdateDto> OAIJournalTransactionLineUpdateDto::getSubaccount() const {
    return m_subaccount;
}
void OAIJournalTransactionLineUpdateDto::setSubaccount(const QList<OAISegmentUpdateDto> &subaccount) {
    m_subaccount = subaccount;
    m_subaccount_isSet = true;
}

bool OAIJournalTransactionLineUpdateDto::is_subaccount_Set() const{
    return m_subaccount_isSet;
}

bool OAIJournalTransactionLineUpdateDto::is_subaccount_Valid() const{
    return m_subaccount_isValid;
}

OAIDtoValueOfString OAIJournalTransactionLineUpdateDto::getTransactionDescription() const {
    return m_transaction_description;
}
void OAIJournalTransactionLineUpdateDto::setTransactionDescription(const OAIDtoValueOfString &transaction_description) {
    m_transaction_description = transaction_description;
    m_transaction_description_isSet = true;
}

bool OAIJournalTransactionLineUpdateDto::is_transaction_description_Set() const{
    return m_transaction_description_isSet;
}

bool OAIJournalTransactionLineUpdateDto::is_transaction_description_Valid() const{
    return m_transaction_description_isValid;
}

OAIDtoValueOfString OAIJournalTransactionLineUpdateDto::getUom() const {
    return m_uom;
}
void OAIJournalTransactionLineUpdateDto::setUom(const OAIDtoValueOfString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAIJournalTransactionLineUpdateDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAIJournalTransactionLineUpdateDto::is_uom_Valid() const{
    return m_uom_isValid;
}

OAIDtoValueOfString OAIJournalTransactionLineUpdateDto::getVatCodeId() const {
    return m_vat_code_id;
}
void OAIJournalTransactionLineUpdateDto::setVatCodeId(const OAIDtoValueOfString &vat_code_id) {
    m_vat_code_id = vat_code_id;
    m_vat_code_id_isSet = true;
}

bool OAIJournalTransactionLineUpdateDto::is_vat_code_id_Set() const{
    return m_vat_code_id_isSet;
}

bool OAIJournalTransactionLineUpdateDto::is_vat_code_id_Valid() const{
    return m_vat_code_id_isValid;
}

OAIDtoValueOfString OAIJournalTransactionLineUpdateDto::getVatId() const {
    return m_vat_id;
}
void OAIJournalTransactionLineUpdateDto::setVatId(const OAIDtoValueOfString &vat_id) {
    m_vat_id = vat_id;
    m_vat_id_isSet = true;
}

bool OAIJournalTransactionLineUpdateDto::is_vat_id_Set() const{
    return m_vat_id_isSet;
}

bool OAIJournalTransactionLineUpdateDto::is_vat_id_Valid() const{
    return m_vat_id_isValid;
}

bool OAIJournalTransactionLineUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_amount_in_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_amount_in_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_code_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJournalTransactionLineUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
