/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesOrderBasicDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesOrderBasicDto::OAISalesOrderBasicDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesOrderBasicDto::OAISalesOrderBasicDto() {
    this->initializeModel();
}

OAISalesOrderBasicDto::~OAISalesOrderBasicDto() {}

void OAISalesOrderBasicDto::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_customer_order_isSet = false;
    m_customer_order_isValid = false;

    m_customer_ref_no_isSet = false;
    m_customer_ref_no_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discount_total_isSet = false;
    m_discount_total_isValid = false;

    m_discount_total_in_base_currency_isSet = false;
    m_discount_total_in_base_currency_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_order_no_isSet = false;
    m_order_no_isValid = false;

    m_order_total_isSet = false;
    m_order_total_isValid = false;

    m_order_total_in_base_currency_isSet = false;
    m_order_total_in_base_currency_isValid = false;

    m_order_type_isSet = false;
    m_order_type_isValid = false;

    m_request_on_isSet = false;
    m_request_on_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tax_total_isSet = false;
    m_tax_total_isValid = false;

    m_tax_total_in_base_currency_isSet = false;
    m_tax_total_in_base_currency_isValid = false;

    m_vat_exempt_total_isSet = false;
    m_vat_exempt_total_isValid = false;

    m_vat_exempt_total_in_base_currency_isSet = false;
    m_vat_exempt_total_in_base_currency_isValid = false;

    m_vat_taxable_total_isSet = false;
    m_vat_taxable_total_isValid = false;

    m_vat_taxable_total_in_base_currency_isSet = false;
    m_vat_taxable_total_in_base_currency_isValid = false;
}

void OAISalesOrderBasicDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesOrderBasicDto::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("contactId")]);
    m_contact_id_isSet = !json[QString("contactId")].isNull() && m_contact_id_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_customer_order_isValid = ::OpenAPI::fromJsonValue(m_customer_order, json[QString("customerOrder")]);
    m_customer_order_isSet = !json[QString("customerOrder")].isNull() && m_customer_order_isValid;

    m_customer_ref_no_isValid = ::OpenAPI::fromJsonValue(m_customer_ref_no, json[QString("customerRefNo")]);
    m_customer_ref_no_isSet = !json[QString("customerRefNo")].isNull() && m_customer_ref_no_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discount_total_isValid = ::OpenAPI::fromJsonValue(m_discount_total, json[QString("discountTotal")]);
    m_discount_total_isSet = !json[QString("discountTotal")].isNull() && m_discount_total_isValid;

    m_discount_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_discount_total_in_base_currency, json[QString("discountTotalInBaseCurrency")]);
    m_discount_total_in_base_currency_isSet = !json[QString("discountTotalInBaseCurrency")].isNull() && m_discount_total_in_base_currency_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("exchangeRate")]);
    m_exchange_rate_isSet = !json[QString("exchangeRate")].isNull() && m_exchange_rate_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_order_no_isValid = ::OpenAPI::fromJsonValue(m_order_no, json[QString("orderNo")]);
    m_order_no_isSet = !json[QString("orderNo")].isNull() && m_order_no_isValid;

    m_order_total_isValid = ::OpenAPI::fromJsonValue(m_order_total, json[QString("orderTotal")]);
    m_order_total_isSet = !json[QString("orderTotal")].isNull() && m_order_total_isValid;

    m_order_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_order_total_in_base_currency, json[QString("orderTotalInBaseCurrency")]);
    m_order_total_in_base_currency_isSet = !json[QString("orderTotalInBaseCurrency")].isNull() && m_order_total_in_base_currency_isValid;

    m_order_type_isValid = ::OpenAPI::fromJsonValue(m_order_type, json[QString("orderType")]);
    m_order_type_isSet = !json[QString("orderType")].isNull() && m_order_type_isValid;

    m_request_on_isValid = ::OpenAPI::fromJsonValue(m_request_on, json[QString("requestOn")]);
    m_request_on_isSet = !json[QString("requestOn")].isNull() && m_request_on_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tax_total_isValid = ::OpenAPI::fromJsonValue(m_tax_total, json[QString("taxTotal")]);
    m_tax_total_isSet = !json[QString("taxTotal")].isNull() && m_tax_total_isValid;

    m_tax_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_tax_total_in_base_currency, json[QString("taxTotalInBaseCurrency")]);
    m_tax_total_in_base_currency_isSet = !json[QString("taxTotalInBaseCurrency")].isNull() && m_tax_total_in_base_currency_isValid;

    m_vat_exempt_total_isValid = ::OpenAPI::fromJsonValue(m_vat_exempt_total, json[QString("vatExemptTotal")]);
    m_vat_exempt_total_isSet = !json[QString("vatExemptTotal")].isNull() && m_vat_exempt_total_isValid;

    m_vat_exempt_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_vat_exempt_total_in_base_currency, json[QString("vatExemptTotalInBaseCurrency")]);
    m_vat_exempt_total_in_base_currency_isSet = !json[QString("vatExemptTotalInBaseCurrency")].isNull() && m_vat_exempt_total_in_base_currency_isValid;

    m_vat_taxable_total_isValid = ::OpenAPI::fromJsonValue(m_vat_taxable_total, json[QString("vatTaxableTotal")]);
    m_vat_taxable_total_isSet = !json[QString("vatTaxableTotal")].isNull() && m_vat_taxable_total_isValid;

    m_vat_taxable_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_vat_taxable_total_in_base_currency, json[QString("vatTaxableTotalInBaseCurrency")]);
    m_vat_taxable_total_in_base_currency_isSet = !json[QString("vatTaxableTotalInBaseCurrency")].isNull() && m_vat_taxable_total_in_base_currency_isValid;
}

QString OAISalesOrderBasicDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesOrderBasicDto::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_contact_id_isSet) {
        obj.insert(QString("contactId"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_customer_order_isSet) {
        obj.insert(QString("customerOrder"), ::OpenAPI::toJsonValue(m_customer_order));
    }
    if (m_customer_ref_no_isSet) {
        obj.insert(QString("customerRefNo"), ::OpenAPI::toJsonValue(m_customer_ref_no));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discount_total_isSet) {
        obj.insert(QString("discountTotal"), ::OpenAPI::toJsonValue(m_discount_total));
    }
    if (m_discount_total_in_base_currency_isSet) {
        obj.insert(QString("discountTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_discount_total_in_base_currency));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_exchange_rate_isSet) {
        obj.insert(QString("exchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_hold_isSet) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_order_no_isSet) {
        obj.insert(QString("orderNo"), ::OpenAPI::toJsonValue(m_order_no));
    }
    if (m_order_total_isSet) {
        obj.insert(QString("orderTotal"), ::OpenAPI::toJsonValue(m_order_total));
    }
    if (m_order_total_in_base_currency_isSet) {
        obj.insert(QString("orderTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_order_total_in_base_currency));
    }
    if (m_order_type_isSet) {
        obj.insert(QString("orderType"), ::OpenAPI::toJsonValue(m_order_type));
    }
    if (m_request_on_isSet) {
        obj.insert(QString("requestOn"), ::OpenAPI::toJsonValue(m_request_on));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tax_total_isSet) {
        obj.insert(QString("taxTotal"), ::OpenAPI::toJsonValue(m_tax_total));
    }
    if (m_tax_total_in_base_currency_isSet) {
        obj.insert(QString("taxTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_tax_total_in_base_currency));
    }
    if (m_vat_exempt_total_isSet) {
        obj.insert(QString("vatExemptTotal"), ::OpenAPI::toJsonValue(m_vat_exempt_total));
    }
    if (m_vat_exempt_total_in_base_currency_isSet) {
        obj.insert(QString("vatExemptTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_vat_exempt_total_in_base_currency));
    }
    if (m_vat_taxable_total_isSet) {
        obj.insert(QString("vatTaxableTotal"), ::OpenAPI::toJsonValue(m_vat_taxable_total));
    }
    if (m_vat_taxable_total_in_base_currency_isSet) {
        obj.insert(QString("vatTaxableTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_vat_taxable_total_in_base_currency));
    }
    return obj;
}

QList<OAIAttachmentDto> OAISalesOrderBasicDto::getAttachments() const {
    return m_attachments;
}
void OAISalesOrderBasicDto::setAttachments(const QList<OAIAttachmentDto> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAISalesOrderBasicDto::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAISalesOrderBasicDto::is_attachments_Valid() const{
    return m_attachments_isValid;
}

OAIBranchNumberInSalesOrderBasicDto OAISalesOrderBasicDto::getBranchNumber() const {
    return m_branch_number;
}
void OAISalesOrderBasicDto::setBranchNumber(const OAIBranchNumberInSalesOrderBasicDto &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAISalesOrderBasicDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAISalesOrderBasicDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

qint32 OAISalesOrderBasicDto::getContactId() const {
    return m_contact_id;
}
void OAISalesOrderBasicDto::setContactId(const qint32 &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAISalesOrderBasicDto::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAISalesOrderBasicDto::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

QString OAISalesOrderBasicDto::getCurrency() const {
    return m_currency;
}
void OAISalesOrderBasicDto::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAISalesOrderBasicDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAISalesOrderBasicDto::is_currency_Valid() const{
    return m_currency_isValid;
}

OAICustomerInSalesOrderBasicDto OAISalesOrderBasicDto::getCustomer() const {
    return m_customer;
}
void OAISalesOrderBasicDto::setCustomer(const OAICustomerInSalesOrderBasicDto &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAISalesOrderBasicDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAISalesOrderBasicDto::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAISalesOrderBasicDto::getCustomerOrder() const {
    return m_customer_order;
}
void OAISalesOrderBasicDto::setCustomerOrder(const QString &customer_order) {
    m_customer_order = customer_order;
    m_customer_order_isSet = true;
}

bool OAISalesOrderBasicDto::is_customer_order_Set() const{
    return m_customer_order_isSet;
}

bool OAISalesOrderBasicDto::is_customer_order_Valid() const{
    return m_customer_order_isValid;
}

QString OAISalesOrderBasicDto::getCustomerRefNo() const {
    return m_customer_ref_no;
}
void OAISalesOrderBasicDto::setCustomerRefNo(const QString &customer_ref_no) {
    m_customer_ref_no = customer_ref_no;
    m_customer_ref_no_isSet = true;
}

bool OAISalesOrderBasicDto::is_customer_ref_no_Set() const{
    return m_customer_ref_no_isSet;
}

bool OAISalesOrderBasicDto::is_customer_ref_no_Valid() const{
    return m_customer_ref_no_isValid;
}

QDateTime OAISalesOrderBasicDto::getDate() const {
    return m_date;
}
void OAISalesOrderBasicDto::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAISalesOrderBasicDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAISalesOrderBasicDto::is_date_Valid() const{
    return m_date_isValid;
}

QString OAISalesOrderBasicDto::getDescription() const {
    return m_description;
}
void OAISalesOrderBasicDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISalesOrderBasicDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAISalesOrderBasicDto::is_description_Valid() const{
    return m_description_isValid;
}

double OAISalesOrderBasicDto::getDiscountTotal() const {
    return m_discount_total;
}
void OAISalesOrderBasicDto::setDiscountTotal(const double &discount_total) {
    m_discount_total = discount_total;
    m_discount_total_isSet = true;
}

bool OAISalesOrderBasicDto::is_discount_total_Set() const{
    return m_discount_total_isSet;
}

bool OAISalesOrderBasicDto::is_discount_total_Valid() const{
    return m_discount_total_isValid;
}

double OAISalesOrderBasicDto::getDiscountTotalInBaseCurrency() const {
    return m_discount_total_in_base_currency;
}
void OAISalesOrderBasicDto::setDiscountTotalInBaseCurrency(const double &discount_total_in_base_currency) {
    m_discount_total_in_base_currency = discount_total_in_base_currency;
    m_discount_total_in_base_currency_isSet = true;
}

bool OAISalesOrderBasicDto::is_discount_total_in_base_currency_Set() const{
    return m_discount_total_in_base_currency_isSet;
}

bool OAISalesOrderBasicDto::is_discount_total_in_base_currency_Valid() const{
    return m_discount_total_in_base_currency_isValid;
}

QString OAISalesOrderBasicDto::getErrorInfo() const {
    return m_error_info;
}
void OAISalesOrderBasicDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAISalesOrderBasicDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAISalesOrderBasicDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

double OAISalesOrderBasicDto::getExchangeRate() const {
    return m_exchange_rate;
}
void OAISalesOrderBasicDto::setExchangeRate(const double &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAISalesOrderBasicDto::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAISalesOrderBasicDto::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

bool OAISalesOrderBasicDto::isHold() const {
    return m_hold;
}
void OAISalesOrderBasicDto::setHold(const bool &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAISalesOrderBasicDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAISalesOrderBasicDto::is_hold_Valid() const{
    return m_hold_isValid;
}

QDateTime OAISalesOrderBasicDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAISalesOrderBasicDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAISalesOrderBasicDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAISalesOrderBasicDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QList<OAISalesOrderDocumentLineDto> OAISalesOrderBasicDto::getLines() const {
    return m_lines;
}
void OAISalesOrderBasicDto::setLines(const QList<OAISalesOrderDocumentLineDto> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAISalesOrderBasicDto::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAISalesOrderBasicDto::is_lines_Valid() const{
    return m_lines_isValid;
}

OAILocationInSalesOrderBasicDto OAISalesOrderBasicDto::getLocation() const {
    return m_location;
}
void OAISalesOrderBasicDto::setLocation(const OAILocationInSalesOrderBasicDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAISalesOrderBasicDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAISalesOrderBasicDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIMetadataDto OAISalesOrderBasicDto::getMetadata() const {
    return m_metadata;
}
void OAISalesOrderBasicDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISalesOrderBasicDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISalesOrderBasicDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAISalesOrderBasicDto::getNote() const {
    return m_note;
}
void OAISalesOrderBasicDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAISalesOrderBasicDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAISalesOrderBasicDto::is_note_Valid() const{
    return m_note_isValid;
}

QString OAISalesOrderBasicDto::getOrderNo() const {
    return m_order_no;
}
void OAISalesOrderBasicDto::setOrderNo(const QString &order_no) {
    m_order_no = order_no;
    m_order_no_isSet = true;
}

bool OAISalesOrderBasicDto::is_order_no_Set() const{
    return m_order_no_isSet;
}

bool OAISalesOrderBasicDto::is_order_no_Valid() const{
    return m_order_no_isValid;
}

double OAISalesOrderBasicDto::getOrderTotal() const {
    return m_order_total;
}
void OAISalesOrderBasicDto::setOrderTotal(const double &order_total) {
    m_order_total = order_total;
    m_order_total_isSet = true;
}

bool OAISalesOrderBasicDto::is_order_total_Set() const{
    return m_order_total_isSet;
}

bool OAISalesOrderBasicDto::is_order_total_Valid() const{
    return m_order_total_isValid;
}

double OAISalesOrderBasicDto::getOrderTotalInBaseCurrency() const {
    return m_order_total_in_base_currency;
}
void OAISalesOrderBasicDto::setOrderTotalInBaseCurrency(const double &order_total_in_base_currency) {
    m_order_total_in_base_currency = order_total_in_base_currency;
    m_order_total_in_base_currency_isSet = true;
}

bool OAISalesOrderBasicDto::is_order_total_in_base_currency_Set() const{
    return m_order_total_in_base_currency_isSet;
}

bool OAISalesOrderBasicDto::is_order_total_in_base_currency_Valid() const{
    return m_order_total_in_base_currency_isValid;
}

QString OAISalesOrderBasicDto::getOrderType() const {
    return m_order_type;
}
void OAISalesOrderBasicDto::setOrderType(const QString &order_type) {
    m_order_type = order_type;
    m_order_type_isSet = true;
}

bool OAISalesOrderBasicDto::is_order_type_Set() const{
    return m_order_type_isSet;
}

bool OAISalesOrderBasicDto::is_order_type_Valid() const{
    return m_order_type_isValid;
}

QDateTime OAISalesOrderBasicDto::getRequestOn() const {
    return m_request_on;
}
void OAISalesOrderBasicDto::setRequestOn(const QDateTime &request_on) {
    m_request_on = request_on;
    m_request_on_isSet = true;
}

bool OAISalesOrderBasicDto::is_request_on_Set() const{
    return m_request_on_isSet;
}

bool OAISalesOrderBasicDto::is_request_on_Valid() const{
    return m_request_on_isValid;
}

QString OAISalesOrderBasicDto::getStatus() const {
    return m_status;
}
void OAISalesOrderBasicDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISalesOrderBasicDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAISalesOrderBasicDto::is_status_Valid() const{
    return m_status_isValid;
}

double OAISalesOrderBasicDto::getTaxTotal() const {
    return m_tax_total;
}
void OAISalesOrderBasicDto::setTaxTotal(const double &tax_total) {
    m_tax_total = tax_total;
    m_tax_total_isSet = true;
}

bool OAISalesOrderBasicDto::is_tax_total_Set() const{
    return m_tax_total_isSet;
}

bool OAISalesOrderBasicDto::is_tax_total_Valid() const{
    return m_tax_total_isValid;
}

double OAISalesOrderBasicDto::getTaxTotalInBaseCurrency() const {
    return m_tax_total_in_base_currency;
}
void OAISalesOrderBasicDto::setTaxTotalInBaseCurrency(const double &tax_total_in_base_currency) {
    m_tax_total_in_base_currency = tax_total_in_base_currency;
    m_tax_total_in_base_currency_isSet = true;
}

bool OAISalesOrderBasicDto::is_tax_total_in_base_currency_Set() const{
    return m_tax_total_in_base_currency_isSet;
}

bool OAISalesOrderBasicDto::is_tax_total_in_base_currency_Valid() const{
    return m_tax_total_in_base_currency_isValid;
}

double OAISalesOrderBasicDto::getVatExemptTotal() const {
    return m_vat_exempt_total;
}
void OAISalesOrderBasicDto::setVatExemptTotal(const double &vat_exempt_total) {
    m_vat_exempt_total = vat_exempt_total;
    m_vat_exempt_total_isSet = true;
}

bool OAISalesOrderBasicDto::is_vat_exempt_total_Set() const{
    return m_vat_exempt_total_isSet;
}

bool OAISalesOrderBasicDto::is_vat_exempt_total_Valid() const{
    return m_vat_exempt_total_isValid;
}

double OAISalesOrderBasicDto::getVatExemptTotalInBaseCurrency() const {
    return m_vat_exempt_total_in_base_currency;
}
void OAISalesOrderBasicDto::setVatExemptTotalInBaseCurrency(const double &vat_exempt_total_in_base_currency) {
    m_vat_exempt_total_in_base_currency = vat_exempt_total_in_base_currency;
    m_vat_exempt_total_in_base_currency_isSet = true;
}

bool OAISalesOrderBasicDto::is_vat_exempt_total_in_base_currency_Set() const{
    return m_vat_exempt_total_in_base_currency_isSet;
}

bool OAISalesOrderBasicDto::is_vat_exempt_total_in_base_currency_Valid() const{
    return m_vat_exempt_total_in_base_currency_isValid;
}

double OAISalesOrderBasicDto::getVatTaxableTotal() const {
    return m_vat_taxable_total;
}
void OAISalesOrderBasicDto::setVatTaxableTotal(const double &vat_taxable_total) {
    m_vat_taxable_total = vat_taxable_total;
    m_vat_taxable_total_isSet = true;
}

bool OAISalesOrderBasicDto::is_vat_taxable_total_Set() const{
    return m_vat_taxable_total_isSet;
}

bool OAISalesOrderBasicDto::is_vat_taxable_total_Valid() const{
    return m_vat_taxable_total_isValid;
}

double OAISalesOrderBasicDto::getVatTaxableTotalInBaseCurrency() const {
    return m_vat_taxable_total_in_base_currency;
}
void OAISalesOrderBasicDto::setVatTaxableTotalInBaseCurrency(const double &vat_taxable_total_in_base_currency) {
    m_vat_taxable_total_in_base_currency = vat_taxable_total_in_base_currency;
    m_vat_taxable_total_in_base_currency_isSet = true;
}

bool OAISalesOrderBasicDto::is_vat_taxable_total_in_base_currency_Set() const{
    return m_vat_taxable_total_in_base_currency_isSet;
}

bool OAISalesOrderBasicDto::is_vat_taxable_total_in_base_currency_Valid() const{
    return m_vat_taxable_total_in_base_currency_isValid;
}

bool OAISalesOrderBasicDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_ref_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_exempt_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_exempt_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_taxable_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_taxable_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesOrderBasicDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
