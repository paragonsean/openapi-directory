/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackagingUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackagingUpdateDto::OAIPackagingUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackagingUpdateDto::OAIPackagingUpdateDto() {
    this->initializeModel();
}

OAIPackagingUpdateDto::~OAIPackagingUpdateDto() {}

void OAIPackagingUpdateDto::initializeModel() {

    m_base_item_volume_isSet = false;
    m_base_item_volume_isValid = false;

    m_base_item_weight_isSet = false;
    m_base_item_weight_isValid = false;

    m_volume_uom_isSet = false;
    m_volume_uom_isValid = false;

    m_weight_uom_isSet = false;
    m_weight_uom_isValid = false;
}

void OAIPackagingUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackagingUpdateDto::fromJsonObject(QJsonObject json) {

    m_base_item_volume_isValid = ::OpenAPI::fromJsonValue(m_base_item_volume, json[QString("baseItemVolume")]);
    m_base_item_volume_isSet = !json[QString("baseItemVolume")].isNull() && m_base_item_volume_isValid;

    m_base_item_weight_isValid = ::OpenAPI::fromJsonValue(m_base_item_weight, json[QString("baseItemWeight")]);
    m_base_item_weight_isSet = !json[QString("baseItemWeight")].isNull() && m_base_item_weight_isValid;

    m_volume_uom_isValid = ::OpenAPI::fromJsonValue(m_volume_uom, json[QString("volumeUOM")]);
    m_volume_uom_isSet = !json[QString("volumeUOM")].isNull() && m_volume_uom_isValid;

    m_weight_uom_isValid = ::OpenAPI::fromJsonValue(m_weight_uom, json[QString("weightUOM")]);
    m_weight_uom_isSet = !json[QString("weightUOM")].isNull() && m_weight_uom_isValid;
}

QString OAIPackagingUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackagingUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_base_item_volume.isSet()) {
        obj.insert(QString("baseItemVolume"), ::OpenAPI::toJsonValue(m_base_item_volume));
    }
    if (m_base_item_weight.isSet()) {
        obj.insert(QString("baseItemWeight"), ::OpenAPI::toJsonValue(m_base_item_weight));
    }
    if (m_volume_uom.isSet()) {
        obj.insert(QString("volumeUOM"), ::OpenAPI::toJsonValue(m_volume_uom));
    }
    if (m_weight_uom.isSet()) {
        obj.insert(QString("weightUOM"), ::OpenAPI::toJsonValue(m_weight_uom));
    }
    return obj;
}

OAIBaseItemVolumeInPackagingUpdateDto OAIPackagingUpdateDto::getBaseItemVolume() const {
    return m_base_item_volume;
}
void OAIPackagingUpdateDto::setBaseItemVolume(const OAIBaseItemVolumeInPackagingUpdateDto &base_item_volume) {
    m_base_item_volume = base_item_volume;
    m_base_item_volume_isSet = true;
}

bool OAIPackagingUpdateDto::is_base_item_volume_Set() const{
    return m_base_item_volume_isSet;
}

bool OAIPackagingUpdateDto::is_base_item_volume_Valid() const{
    return m_base_item_volume_isValid;
}

OAIBaseItemWeightInPackagingUpdateDto OAIPackagingUpdateDto::getBaseItemWeight() const {
    return m_base_item_weight;
}
void OAIPackagingUpdateDto::setBaseItemWeight(const OAIBaseItemWeightInPackagingUpdateDto &base_item_weight) {
    m_base_item_weight = base_item_weight;
    m_base_item_weight_isSet = true;
}

bool OAIPackagingUpdateDto::is_base_item_weight_Set() const{
    return m_base_item_weight_isSet;
}

bool OAIPackagingUpdateDto::is_base_item_weight_Valid() const{
    return m_base_item_weight_isValid;
}

OAIVolumeUOMInPackagingUpdateDto OAIPackagingUpdateDto::getVolumeUom() const {
    return m_volume_uom;
}
void OAIPackagingUpdateDto::setVolumeUom(const OAIVolumeUOMInPackagingUpdateDto &volume_uom) {
    m_volume_uom = volume_uom;
    m_volume_uom_isSet = true;
}

bool OAIPackagingUpdateDto::is_volume_uom_Set() const{
    return m_volume_uom_isSet;
}

bool OAIPackagingUpdateDto::is_volume_uom_Valid() const{
    return m_volume_uom_isValid;
}

OAIWeightUOMInPackagingUpdateDto OAIPackagingUpdateDto::getWeightUom() const {
    return m_weight_uom;
}
void OAIPackagingUpdateDto::setWeightUom(const OAIWeightUOMInPackagingUpdateDto &weight_uom) {
    m_weight_uom = weight_uom;
    m_weight_uom_isSet = true;
}

bool OAIPackagingUpdateDto::is_weight_uom_Set() const{
    return m_weight_uom_isSet;
}

bool OAIPackagingUpdateDto::is_weight_uom_Valid() const{
    return m_weight_uom_isValid;
}

bool OAIPackagingUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_item_volume.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_item_weight.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_uom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_uom.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackagingUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
