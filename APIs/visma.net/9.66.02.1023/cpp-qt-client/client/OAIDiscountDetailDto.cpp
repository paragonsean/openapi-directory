/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscountDetailDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscountDetailDto::OAIDiscountDetailDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscountDetailDto::OAIDiscountDetailDto() {
    this->initializeModel();
}

OAIDiscountDetailDto::~OAIDiscountDetailDto() {}

void OAIDiscountDetailDto::initializeModel() {

    m_discount_isSet = false;
    m_discount_isValid = false;

    m_discount_amt_isSet = false;
    m_discount_amt_isValid = false;

    m_discount_code_isSet = false;
    m_discount_code_isValid = false;

    m_discountable_amt_isSet = false;
    m_discountable_amt_isValid = false;

    m_discountable_qty_isSet = false;
    m_discountable_qty_isValid = false;

    m_free_item_isSet = false;
    m_free_item_isValid = false;

    m_free_item_qty_isSet = false;
    m_free_item_qty_isValid = false;

    m_line_nbr_isSet = false;
    m_line_nbr_isValid = false;

    m_manual_discount_isSet = false;
    m_manual_discount_isValid = false;

    m_sequance_id_isSet = false;
    m_sequance_id_isValid = false;

    m_skip_discount_isSet = false;
    m_skip_discount_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDiscountDetailDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiscountDetailDto::fromJsonObject(QJsonObject json) {

    m_discount_isValid = ::OpenAPI::fromJsonValue(m_discount, json[QString("discount")]);
    m_discount_isSet = !json[QString("discount")].isNull() && m_discount_isValid;

    m_discount_amt_isValid = ::OpenAPI::fromJsonValue(m_discount_amt, json[QString("discountAmt")]);
    m_discount_amt_isSet = !json[QString("discountAmt")].isNull() && m_discount_amt_isValid;

    m_discount_code_isValid = ::OpenAPI::fromJsonValue(m_discount_code, json[QString("discountCode")]);
    m_discount_code_isSet = !json[QString("discountCode")].isNull() && m_discount_code_isValid;

    m_discountable_amt_isValid = ::OpenAPI::fromJsonValue(m_discountable_amt, json[QString("discountableAmt")]);
    m_discountable_amt_isSet = !json[QString("discountableAmt")].isNull() && m_discountable_amt_isValid;

    m_discountable_qty_isValid = ::OpenAPI::fromJsonValue(m_discountable_qty, json[QString("discountableQty")]);
    m_discountable_qty_isSet = !json[QString("discountableQty")].isNull() && m_discountable_qty_isValid;

    m_free_item_isValid = ::OpenAPI::fromJsonValue(m_free_item, json[QString("freeItem")]);
    m_free_item_isSet = !json[QString("freeItem")].isNull() && m_free_item_isValid;

    m_free_item_qty_isValid = ::OpenAPI::fromJsonValue(m_free_item_qty, json[QString("freeItemQty")]);
    m_free_item_qty_isSet = !json[QString("freeItemQty")].isNull() && m_free_item_qty_isValid;

    m_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_line_nbr, json[QString("lineNbr")]);
    m_line_nbr_isSet = !json[QString("lineNbr")].isNull() && m_line_nbr_isValid;

    m_manual_discount_isValid = ::OpenAPI::fromJsonValue(m_manual_discount, json[QString("manualDiscount")]);
    m_manual_discount_isSet = !json[QString("manualDiscount")].isNull() && m_manual_discount_isValid;

    m_sequance_id_isValid = ::OpenAPI::fromJsonValue(m_sequance_id, json[QString("sequanceID")]);
    m_sequance_id_isSet = !json[QString("sequanceID")].isNull() && m_sequance_id_isValid;

    m_skip_discount_isValid = ::OpenAPI::fromJsonValue(m_skip_discount, json[QString("skipDiscount")]);
    m_skip_discount_isSet = !json[QString("skipDiscount")].isNull() && m_skip_discount_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDiscountDetailDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiscountDetailDto::asJsonObject() const {
    QJsonObject obj;
    if (m_discount_isSet) {
        obj.insert(QString("discount"), ::OpenAPI::toJsonValue(m_discount));
    }
    if (m_discount_amt_isSet) {
        obj.insert(QString("discountAmt"), ::OpenAPI::toJsonValue(m_discount_amt));
    }
    if (m_discount_code_isSet) {
        obj.insert(QString("discountCode"), ::OpenAPI::toJsonValue(m_discount_code));
    }
    if (m_discountable_amt_isSet) {
        obj.insert(QString("discountableAmt"), ::OpenAPI::toJsonValue(m_discountable_amt));
    }
    if (m_discountable_qty_isSet) {
        obj.insert(QString("discountableQty"), ::OpenAPI::toJsonValue(m_discountable_qty));
    }
    if (m_free_item_isSet) {
        obj.insert(QString("freeItem"), ::OpenAPI::toJsonValue(m_free_item));
    }
    if (m_free_item_qty_isSet) {
        obj.insert(QString("freeItemQty"), ::OpenAPI::toJsonValue(m_free_item_qty));
    }
    if (m_line_nbr_isSet) {
        obj.insert(QString("lineNbr"), ::OpenAPI::toJsonValue(m_line_nbr));
    }
    if (m_manual_discount_isSet) {
        obj.insert(QString("manualDiscount"), ::OpenAPI::toJsonValue(m_manual_discount));
    }
    if (m_sequance_id_isSet) {
        obj.insert(QString("sequanceID"), ::OpenAPI::toJsonValue(m_sequance_id));
    }
    if (m_skip_discount_isSet) {
        obj.insert(QString("skipDiscount"), ::OpenAPI::toJsonValue(m_skip_discount));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

double OAIDiscountDetailDto::getDiscount() const {
    return m_discount;
}
void OAIDiscountDetailDto::setDiscount(const double &discount) {
    m_discount = discount;
    m_discount_isSet = true;
}

bool OAIDiscountDetailDto::is_discount_Set() const{
    return m_discount_isSet;
}

bool OAIDiscountDetailDto::is_discount_Valid() const{
    return m_discount_isValid;
}

double OAIDiscountDetailDto::getDiscountAmt() const {
    return m_discount_amt;
}
void OAIDiscountDetailDto::setDiscountAmt(const double &discount_amt) {
    m_discount_amt = discount_amt;
    m_discount_amt_isSet = true;
}

bool OAIDiscountDetailDto::is_discount_amt_Set() const{
    return m_discount_amt_isSet;
}

bool OAIDiscountDetailDto::is_discount_amt_Valid() const{
    return m_discount_amt_isValid;
}

QString OAIDiscountDetailDto::getDiscountCode() const {
    return m_discount_code;
}
void OAIDiscountDetailDto::setDiscountCode(const QString &discount_code) {
    m_discount_code = discount_code;
    m_discount_code_isSet = true;
}

bool OAIDiscountDetailDto::is_discount_code_Set() const{
    return m_discount_code_isSet;
}

bool OAIDiscountDetailDto::is_discount_code_Valid() const{
    return m_discount_code_isValid;
}

double OAIDiscountDetailDto::getDiscountableAmt() const {
    return m_discountable_amt;
}
void OAIDiscountDetailDto::setDiscountableAmt(const double &discountable_amt) {
    m_discountable_amt = discountable_amt;
    m_discountable_amt_isSet = true;
}

bool OAIDiscountDetailDto::is_discountable_amt_Set() const{
    return m_discountable_amt_isSet;
}

bool OAIDiscountDetailDto::is_discountable_amt_Valid() const{
    return m_discountable_amt_isValid;
}

double OAIDiscountDetailDto::getDiscountableQty() const {
    return m_discountable_qty;
}
void OAIDiscountDetailDto::setDiscountableQty(const double &discountable_qty) {
    m_discountable_qty = discountable_qty;
    m_discountable_qty_isSet = true;
}

bool OAIDiscountDetailDto::is_discountable_qty_Set() const{
    return m_discountable_qty_isSet;
}

bool OAIDiscountDetailDto::is_discountable_qty_Valid() const{
    return m_discountable_qty_isValid;
}

qint32 OAIDiscountDetailDto::getFreeItem() const {
    return m_free_item;
}
void OAIDiscountDetailDto::setFreeItem(const qint32 &free_item) {
    m_free_item = free_item;
    m_free_item_isSet = true;
}

bool OAIDiscountDetailDto::is_free_item_Set() const{
    return m_free_item_isSet;
}

bool OAIDiscountDetailDto::is_free_item_Valid() const{
    return m_free_item_isValid;
}

double OAIDiscountDetailDto::getFreeItemQty() const {
    return m_free_item_qty;
}
void OAIDiscountDetailDto::setFreeItemQty(const double &free_item_qty) {
    m_free_item_qty = free_item_qty;
    m_free_item_qty_isSet = true;
}

bool OAIDiscountDetailDto::is_free_item_qty_Set() const{
    return m_free_item_qty_isSet;
}

bool OAIDiscountDetailDto::is_free_item_qty_Valid() const{
    return m_free_item_qty_isValid;
}

qint32 OAIDiscountDetailDto::getLineNbr() const {
    return m_line_nbr;
}
void OAIDiscountDetailDto::setLineNbr(const qint32 &line_nbr) {
    m_line_nbr = line_nbr;
    m_line_nbr_isSet = true;
}

bool OAIDiscountDetailDto::is_line_nbr_Set() const{
    return m_line_nbr_isSet;
}

bool OAIDiscountDetailDto::is_line_nbr_Valid() const{
    return m_line_nbr_isValid;
}

bool OAIDiscountDetailDto::isManualDiscount() const {
    return m_manual_discount;
}
void OAIDiscountDetailDto::setManualDiscount(const bool &manual_discount) {
    m_manual_discount = manual_discount;
    m_manual_discount_isSet = true;
}

bool OAIDiscountDetailDto::is_manual_discount_Set() const{
    return m_manual_discount_isSet;
}

bool OAIDiscountDetailDto::is_manual_discount_Valid() const{
    return m_manual_discount_isValid;
}

QString OAIDiscountDetailDto::getSequanceId() const {
    return m_sequance_id;
}
void OAIDiscountDetailDto::setSequanceId(const QString &sequance_id) {
    m_sequance_id = sequance_id;
    m_sequance_id_isSet = true;
}

bool OAIDiscountDetailDto::is_sequance_id_Set() const{
    return m_sequance_id_isSet;
}

bool OAIDiscountDetailDto::is_sequance_id_Valid() const{
    return m_sequance_id_isValid;
}

bool OAIDiscountDetailDto::isSkipDiscount() const {
    return m_skip_discount;
}
void OAIDiscountDetailDto::setSkipDiscount(const bool &skip_discount) {
    m_skip_discount = skip_discount;
    m_skip_discount_isSet = true;
}

bool OAIDiscountDetailDto::is_skip_discount_Set() const{
    return m_skip_discount_isSet;
}

bool OAIDiscountDetailDto::is_skip_discount_Valid() const{
    return m_skip_discount_isValid;
}

QString OAIDiscountDetailDto::getType() const {
    return m_type;
}
void OAIDiscountDetailDto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDiscountDetailDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDiscountDetailDto::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDiscountDetailDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discountable_amt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discountable_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_item_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiscountDetailDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
