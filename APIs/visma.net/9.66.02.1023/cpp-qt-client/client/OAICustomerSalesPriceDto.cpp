/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerSalesPriceDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerSalesPriceDto::OAICustomerSalesPriceDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerSalesPriceDto::OAICustomerSalesPriceDto() {
    this->initializeModel();
}

OAICustomerSalesPriceDto::~OAICustomerSalesPriceDto() {}

void OAICustomerSalesPriceDto::initializeModel() {

    m_break_qty_isSet = false;
    m_break_qty_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_effective_date_isSet = false;
    m_effective_date_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_inventory_id_isSet = false;
    m_inventory_id_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_code_isSet = false;
    m_price_code_isValid = false;

    m_price_type_isSet = false;
    m_price_type_isValid = false;

    m_promotion_isSet = false;
    m_promotion_isValid = false;

    m_record_id_isSet = false;
    m_record_id_isValid = false;

    m_uo_m_isSet = false;
    m_uo_m_isValid = false;

    m_vat_isSet = false;
    m_vat_isValid = false;
}

void OAICustomerSalesPriceDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerSalesPriceDto::fromJsonObject(QJsonObject json) {

    m_break_qty_isValid = ::OpenAPI::fromJsonValue(m_break_qty, json[QString("breakQty")]);
    m_break_qty_isSet = !json[QString("breakQty")].isNull() && m_break_qty_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_effective_date_isValid = ::OpenAPI::fromJsonValue(m_effective_date, json[QString("effectiveDate")]);
    m_effective_date_isSet = !json[QString("effectiveDate")].isNull() && m_effective_date_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_inventory_id_isValid = ::OpenAPI::fromJsonValue(m_inventory_id, json[QString("inventoryId")]);
    m_inventory_id_isSet = !json[QString("inventoryId")].isNull() && m_inventory_id_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_price_code_isValid = ::OpenAPI::fromJsonValue(m_price_code, json[QString("priceCode")]);
    m_price_code_isSet = !json[QString("priceCode")].isNull() && m_price_code_isValid;

    m_price_type_isValid = ::OpenAPI::fromJsonValue(m_price_type, json[QString("priceType")]);
    m_price_type_isSet = !json[QString("priceType")].isNull() && m_price_type_isValid;

    m_promotion_isValid = ::OpenAPI::fromJsonValue(m_promotion, json[QString("promotion")]);
    m_promotion_isSet = !json[QString("promotion")].isNull() && m_promotion_isValid;

    m_record_id_isValid = ::OpenAPI::fromJsonValue(m_record_id, json[QString("recordId")]);
    m_record_id_isSet = !json[QString("recordId")].isNull() && m_record_id_isValid;

    m_uo_m_isValid = ::OpenAPI::fromJsonValue(m_uo_m, json[QString("uoM")]);
    m_uo_m_isSet = !json[QString("uoM")].isNull() && m_uo_m_isValid;

    m_vat_isValid = ::OpenAPI::fromJsonValue(m_vat, json[QString("vat")]);
    m_vat_isSet = !json[QString("vat")].isNull() && m_vat_isValid;
}

QString OAICustomerSalesPriceDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerSalesPriceDto::asJsonObject() const {
    QJsonObject obj;
    if (m_break_qty_isSet) {
        obj.insert(QString("breakQty"), ::OpenAPI::toJsonValue(m_break_qty));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_effective_date_isSet) {
        obj.insert(QString("effectiveDate"), ::OpenAPI::toJsonValue(m_effective_date));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_inventory_id_isSet) {
        obj.insert(QString("inventoryId"), ::OpenAPI::toJsonValue(m_inventory_id));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_code_isSet) {
        obj.insert(QString("priceCode"), ::OpenAPI::toJsonValue(m_price_code));
    }
    if (m_price_type_isSet) {
        obj.insert(QString("priceType"), ::OpenAPI::toJsonValue(m_price_type));
    }
    if (m_promotion_isSet) {
        obj.insert(QString("promotion"), ::OpenAPI::toJsonValue(m_promotion));
    }
    if (m_record_id_isSet) {
        obj.insert(QString("recordId"), ::OpenAPI::toJsonValue(m_record_id));
    }
    if (m_uo_m_isSet) {
        obj.insert(QString("uoM"), ::OpenAPI::toJsonValue(m_uo_m));
    }
    if (m_vat_isSet) {
        obj.insert(QString("vat"), ::OpenAPI::toJsonValue(m_vat));
    }
    return obj;
}

double OAICustomerSalesPriceDto::getBreakQty() const {
    return m_break_qty;
}
void OAICustomerSalesPriceDto::setBreakQty(const double &break_qty) {
    m_break_qty = break_qty;
    m_break_qty_isSet = true;
}

bool OAICustomerSalesPriceDto::is_break_qty_Set() const{
    return m_break_qty_isSet;
}

bool OAICustomerSalesPriceDto::is_break_qty_Valid() const{
    return m_break_qty_isValid;
}

QString OAICustomerSalesPriceDto::getCurrency() const {
    return m_currency;
}
void OAICustomerSalesPriceDto::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICustomerSalesPriceDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICustomerSalesPriceDto::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAICustomerSalesPriceDto::getDescription() const {
    return m_description;
}
void OAICustomerSalesPriceDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICustomerSalesPriceDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAICustomerSalesPriceDto::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAICustomerSalesPriceDto::getEffectiveDate() const {
    return m_effective_date;
}
void OAICustomerSalesPriceDto::setEffectiveDate(const QDateTime &effective_date) {
    m_effective_date = effective_date;
    m_effective_date_isSet = true;
}

bool OAICustomerSalesPriceDto::is_effective_date_Set() const{
    return m_effective_date_isSet;
}

bool OAICustomerSalesPriceDto::is_effective_date_Valid() const{
    return m_effective_date_isValid;
}

QString OAICustomerSalesPriceDto::getErrorInfo() const {
    return m_error_info;
}
void OAICustomerSalesPriceDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAICustomerSalesPriceDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAICustomerSalesPriceDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

QDateTime OAICustomerSalesPriceDto::getExpirationDate() const {
    return m_expiration_date;
}
void OAICustomerSalesPriceDto::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAICustomerSalesPriceDto::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAICustomerSalesPriceDto::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAICustomerSalesPriceDto::getInventoryId() const {
    return m_inventory_id;
}
void OAICustomerSalesPriceDto::setInventoryId(const QString &inventory_id) {
    m_inventory_id = inventory_id;
    m_inventory_id_isSet = true;
}

bool OAICustomerSalesPriceDto::is_inventory_id_Set() const{
    return m_inventory_id_isSet;
}

bool OAICustomerSalesPriceDto::is_inventory_id_Valid() const{
    return m_inventory_id_isValid;
}

QDateTime OAICustomerSalesPriceDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAICustomerSalesPriceDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAICustomerSalesPriceDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAICustomerSalesPriceDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAIMetadataDto OAICustomerSalesPriceDto::getMetadata() const {
    return m_metadata;
}
void OAICustomerSalesPriceDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICustomerSalesPriceDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICustomerSalesPriceDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

double OAICustomerSalesPriceDto::getPrice() const {
    return m_price;
}
void OAICustomerSalesPriceDto::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAICustomerSalesPriceDto::is_price_Set() const{
    return m_price_isSet;
}

bool OAICustomerSalesPriceDto::is_price_Valid() const{
    return m_price_isValid;
}

QString OAICustomerSalesPriceDto::getPriceCode() const {
    return m_price_code;
}
void OAICustomerSalesPriceDto::setPriceCode(const QString &price_code) {
    m_price_code = price_code;
    m_price_code_isSet = true;
}

bool OAICustomerSalesPriceDto::is_price_code_Set() const{
    return m_price_code_isSet;
}

bool OAICustomerSalesPriceDto::is_price_code_Valid() const{
    return m_price_code_isValid;
}

QString OAICustomerSalesPriceDto::getPriceType() const {
    return m_price_type;
}
void OAICustomerSalesPriceDto::setPriceType(const QString &price_type) {
    m_price_type = price_type;
    m_price_type_isSet = true;
}

bool OAICustomerSalesPriceDto::is_price_type_Set() const{
    return m_price_type_isSet;
}

bool OAICustomerSalesPriceDto::is_price_type_Valid() const{
    return m_price_type_isValid;
}

bool OAICustomerSalesPriceDto::isPromotion() const {
    return m_promotion;
}
void OAICustomerSalesPriceDto::setPromotion(const bool &promotion) {
    m_promotion = promotion;
    m_promotion_isSet = true;
}

bool OAICustomerSalesPriceDto::is_promotion_Set() const{
    return m_promotion_isSet;
}

bool OAICustomerSalesPriceDto::is_promotion_Valid() const{
    return m_promotion_isValid;
}

qint32 OAICustomerSalesPriceDto::getRecordId() const {
    return m_record_id;
}
void OAICustomerSalesPriceDto::setRecordId(const qint32 &record_id) {
    m_record_id = record_id;
    m_record_id_isSet = true;
}

bool OAICustomerSalesPriceDto::is_record_id_Set() const{
    return m_record_id_isSet;
}

bool OAICustomerSalesPriceDto::is_record_id_Valid() const{
    return m_record_id_isValid;
}

QString OAICustomerSalesPriceDto::getUoM() const {
    return m_uo_m;
}
void OAICustomerSalesPriceDto::setUoM(const QString &uo_m) {
    m_uo_m = uo_m;
    m_uo_m_isSet = true;
}

bool OAICustomerSalesPriceDto::is_uo_m_Set() const{
    return m_uo_m_isSet;
}

bool OAICustomerSalesPriceDto::is_uo_m_Valid() const{
    return m_uo_m_isValid;
}

QString OAICustomerSalesPriceDto::getVat() const {
    return m_vat;
}
void OAICustomerSalesPriceDto::setVat(const QString &vat) {
    m_vat = vat;
    m_vat_isSet = true;
}

bool OAICustomerSalesPriceDto::is_vat_Set() const{
    return m_vat_isSet;
}

bool OAICustomerSalesPriceDto::is_vat_Valid() const{
    return m_vat_isValid;
}

bool OAICustomerSalesPriceDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_break_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uo_m_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerSalesPriceDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
