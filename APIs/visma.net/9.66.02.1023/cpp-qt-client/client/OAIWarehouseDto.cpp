/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWarehouseDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWarehouseDto::OAIWarehouseDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWarehouseDto::OAIWarehouseDto() {
    this->initializeModel();
}

OAIWarehouseDto::~OAIWarehouseDto() {}

void OAIWarehouseDto::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_avg_default_cost_isSet = false;
    m_avg_default_cost_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_drop_ship_location_isSet = false;
    m_drop_ship_location_isValid = false;

    m_fifo_default_cost_isSet = false;
    m_fifo_default_cost_isValid = false;

    m_location_entry_isSet = false;
    m_location_entry_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_lock_site_pi_count_entry_isSet = false;
    m_lock_site_pi_count_entry_isValid = false;

    m_receipt_location_isSet = false;
    m_receipt_location_isValid = false;

    m_replenishment_class_isSet = false;
    m_replenishment_class_isValid = false;

    m_return_location_isSet = false;
    m_return_location_isValid = false;

    m_ship_location_isSet = false;
    m_ship_location_isValid = false;

    m_warehouse_id_isSet = false;
    m_warehouse_id_isValid = false;
}

void OAIWarehouseDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWarehouseDto::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_avg_default_cost_isValid = ::OpenAPI::fromJsonValue(m_avg_default_cost, json[QString("avgDefaultCost")]);
    m_avg_default_cost_isSet = !json[QString("avgDefaultCost")].isNull() && m_avg_default_cost_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_drop_ship_location_isValid = ::OpenAPI::fromJsonValue(m_drop_ship_location, json[QString("dropShipLocation")]);
    m_drop_ship_location_isSet = !json[QString("dropShipLocation")].isNull() && m_drop_ship_location_isValid;

    m_fifo_default_cost_isValid = ::OpenAPI::fromJsonValue(m_fifo_default_cost, json[QString("fifoDefaultCost")]);
    m_fifo_default_cost_isSet = !json[QString("fifoDefaultCost")].isNull() && m_fifo_default_cost_isValid;

    m_location_entry_isValid = ::OpenAPI::fromJsonValue(m_location_entry, json[QString("locationEntry")]);
    m_location_entry_isSet = !json[QString("locationEntry")].isNull() && m_location_entry_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_lock_site_pi_count_entry_isValid = ::OpenAPI::fromJsonValue(m_lock_site_pi_count_entry, json[QString("lockSitePICountEntry")]);
    m_lock_site_pi_count_entry_isSet = !json[QString("lockSitePICountEntry")].isNull() && m_lock_site_pi_count_entry_isValid;

    m_receipt_location_isValid = ::OpenAPI::fromJsonValue(m_receipt_location, json[QString("receiptLocation")]);
    m_receipt_location_isSet = !json[QString("receiptLocation")].isNull() && m_receipt_location_isValid;

    m_replenishment_class_isValid = ::OpenAPI::fromJsonValue(m_replenishment_class, json[QString("replenishmentClass")]);
    m_replenishment_class_isSet = !json[QString("replenishmentClass")].isNull() && m_replenishment_class_isValid;

    m_return_location_isValid = ::OpenAPI::fromJsonValue(m_return_location, json[QString("returnLocation")]);
    m_return_location_isSet = !json[QString("returnLocation")].isNull() && m_return_location_isValid;

    m_ship_location_isValid = ::OpenAPI::fromJsonValue(m_ship_location, json[QString("shipLocation")]);
    m_ship_location_isSet = !json[QString("shipLocation")].isNull() && m_ship_location_isValid;

    m_warehouse_id_isValid = ::OpenAPI::fromJsonValue(m_warehouse_id, json[QString("warehouseID")]);
    m_warehouse_id_isSet = !json[QString("warehouseID")].isNull() && m_warehouse_id_isValid;
}

QString OAIWarehouseDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWarehouseDto::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_avg_default_cost_isSet) {
        obj.insert(QString("avgDefaultCost"), ::OpenAPI::toJsonValue(m_avg_default_cost));
    }
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_drop_ship_location.isSet()) {
        obj.insert(QString("dropShipLocation"), ::OpenAPI::toJsonValue(m_drop_ship_location));
    }
    if (m_fifo_default_cost_isSet) {
        obj.insert(QString("fifoDefaultCost"), ::OpenAPI::toJsonValue(m_fifo_default_cost));
    }
    if (m_location_entry_isSet) {
        obj.insert(QString("locationEntry"), ::OpenAPI::toJsonValue(m_location_entry));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_lock_site_pi_count_entry_isSet) {
        obj.insert(QString("lockSitePICountEntry"), ::OpenAPI::toJsonValue(m_lock_site_pi_count_entry));
    }
    if (m_receipt_location.isSet()) {
        obj.insert(QString("receiptLocation"), ::OpenAPI::toJsonValue(m_receipt_location));
    }
    if (m_replenishment_class.isSet()) {
        obj.insert(QString("replenishmentClass"), ::OpenAPI::toJsonValue(m_replenishment_class));
    }
    if (m_return_location.isSet()) {
        obj.insert(QString("returnLocation"), ::OpenAPI::toJsonValue(m_return_location));
    }
    if (m_ship_location.isSet()) {
        obj.insert(QString("shipLocation"), ::OpenAPI::toJsonValue(m_ship_location));
    }
    if (m_warehouse_id_isSet) {
        obj.insert(QString("warehouseID"), ::OpenAPI::toJsonValue(m_warehouse_id));
    }
    return obj;
}

bool OAIWarehouseDto::isActive() const {
    return m_active;
}
void OAIWarehouseDto::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIWarehouseDto::is_active_Set() const{
    return m_active_isSet;
}

bool OAIWarehouseDto::is_active_Valid() const{
    return m_active_isValid;
}

OAIAddressInWarehouseDto OAIWarehouseDto::getAddress() const {
    return m_address;
}
void OAIWarehouseDto::setAddress(const OAIAddressInWarehouseDto &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIWarehouseDto::is_address_Set() const{
    return m_address_isSet;
}

bool OAIWarehouseDto::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIWarehouseDto::getAvgDefaultCost() const {
    return m_avg_default_cost;
}
void OAIWarehouseDto::setAvgDefaultCost(const QString &avg_default_cost) {
    m_avg_default_cost = avg_default_cost;
    m_avg_default_cost_isSet = true;
}

bool OAIWarehouseDto::is_avg_default_cost_Set() const{
    return m_avg_default_cost_isSet;
}

bool OAIWarehouseDto::is_avg_default_cost_Valid() const{
    return m_avg_default_cost_isValid;
}

OAIBranchInWarehouseDto OAIWarehouseDto::getBranch() const {
    return m_branch;
}
void OAIWarehouseDto::setBranch(const OAIBranchInWarehouseDto &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIWarehouseDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIWarehouseDto::is_branch_Valid() const{
    return m_branch_isValid;
}

OAIContactInWarehouseDto OAIWarehouseDto::getContact() const {
    return m_contact;
}
void OAIWarehouseDto::setContact(const OAIContactInWarehouseDto &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIWarehouseDto::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIWarehouseDto::is_contact_Valid() const{
    return m_contact_isValid;
}

QString OAIWarehouseDto::getDescription() const {
    return m_description;
}
void OAIWarehouseDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWarehouseDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWarehouseDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIDropShipLocationInWarehouseDto OAIWarehouseDto::getDropShipLocation() const {
    return m_drop_ship_location;
}
void OAIWarehouseDto::setDropShipLocation(const OAIDropShipLocationInWarehouseDto &drop_ship_location) {
    m_drop_ship_location = drop_ship_location;
    m_drop_ship_location_isSet = true;
}

bool OAIWarehouseDto::is_drop_ship_location_Set() const{
    return m_drop_ship_location_isSet;
}

bool OAIWarehouseDto::is_drop_ship_location_Valid() const{
    return m_drop_ship_location_isValid;
}

QString OAIWarehouseDto::getFifoDefaultCost() const {
    return m_fifo_default_cost;
}
void OAIWarehouseDto::setFifoDefaultCost(const QString &fifo_default_cost) {
    m_fifo_default_cost = fifo_default_cost;
    m_fifo_default_cost_isSet = true;
}

bool OAIWarehouseDto::is_fifo_default_cost_Set() const{
    return m_fifo_default_cost_isSet;
}

bool OAIWarehouseDto::is_fifo_default_cost_Valid() const{
    return m_fifo_default_cost_isValid;
}

QString OAIWarehouseDto::getLocationEntry() const {
    return m_location_entry;
}
void OAIWarehouseDto::setLocationEntry(const QString &location_entry) {
    m_location_entry = location_entry;
    m_location_entry_isSet = true;
}

bool OAIWarehouseDto::is_location_entry_Set() const{
    return m_location_entry_isSet;
}

bool OAIWarehouseDto::is_location_entry_Valid() const{
    return m_location_entry_isValid;
}

QList<OAIWarehouseLocationDto> OAIWarehouseDto::getLocations() const {
    return m_locations;
}
void OAIWarehouseDto::setLocations(const QList<OAIWarehouseLocationDto> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIWarehouseDto::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIWarehouseDto::is_locations_Valid() const{
    return m_locations_isValid;
}

bool OAIWarehouseDto::isLockSitePiCountEntry() const {
    return m_lock_site_pi_count_entry;
}
void OAIWarehouseDto::setLockSitePiCountEntry(const bool &lock_site_pi_count_entry) {
    m_lock_site_pi_count_entry = lock_site_pi_count_entry;
    m_lock_site_pi_count_entry_isSet = true;
}

bool OAIWarehouseDto::is_lock_site_pi_count_entry_Set() const{
    return m_lock_site_pi_count_entry_isSet;
}

bool OAIWarehouseDto::is_lock_site_pi_count_entry_Valid() const{
    return m_lock_site_pi_count_entry_isValid;
}

OAIReceiptLocationInWarehouseDto OAIWarehouseDto::getReceiptLocation() const {
    return m_receipt_location;
}
void OAIWarehouseDto::setReceiptLocation(const OAIReceiptLocationInWarehouseDto &receipt_location) {
    m_receipt_location = receipt_location;
    m_receipt_location_isSet = true;
}

bool OAIWarehouseDto::is_receipt_location_Set() const{
    return m_receipt_location_isSet;
}

bool OAIWarehouseDto::is_receipt_location_Valid() const{
    return m_receipt_location_isValid;
}

OAIReplenishmentClassInWarehouseDto OAIWarehouseDto::getReplenishmentClass() const {
    return m_replenishment_class;
}
void OAIWarehouseDto::setReplenishmentClass(const OAIReplenishmentClassInWarehouseDto &replenishment_class) {
    m_replenishment_class = replenishment_class;
    m_replenishment_class_isSet = true;
}

bool OAIWarehouseDto::is_replenishment_class_Set() const{
    return m_replenishment_class_isSet;
}

bool OAIWarehouseDto::is_replenishment_class_Valid() const{
    return m_replenishment_class_isValid;
}

OAIReturnLocationInWarehouseDto OAIWarehouseDto::getReturnLocation() const {
    return m_return_location;
}
void OAIWarehouseDto::setReturnLocation(const OAIReturnLocationInWarehouseDto &return_location) {
    m_return_location = return_location;
    m_return_location_isSet = true;
}

bool OAIWarehouseDto::is_return_location_Set() const{
    return m_return_location_isSet;
}

bool OAIWarehouseDto::is_return_location_Valid() const{
    return m_return_location_isValid;
}

OAIShipLocationInWarehouseDto OAIWarehouseDto::getShipLocation() const {
    return m_ship_location;
}
void OAIWarehouseDto::setShipLocation(const OAIShipLocationInWarehouseDto &ship_location) {
    m_ship_location = ship_location;
    m_ship_location_isSet = true;
}

bool OAIWarehouseDto::is_ship_location_Set() const{
    return m_ship_location_isSet;
}

bool OAIWarehouseDto::is_ship_location_Valid() const{
    return m_ship_location_isValid;
}

QString OAIWarehouseDto::getWarehouseId() const {
    return m_warehouse_id;
}
void OAIWarehouseDto::setWarehouseId(const QString &warehouse_id) {
    m_warehouse_id = warehouse_id;
    m_warehouse_id_isSet = true;
}

bool OAIWarehouseDto::is_warehouse_id_Set() const{
    return m_warehouse_id_isSet;
}

bool OAIWarehouseDto::is_warehouse_id_Valid() const{
    return m_warehouse_id_isValid;
}

bool OAIWarehouseDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_avg_default_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drop_ship_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fifo_default_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_entry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_site_pi_count_entry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replenishment_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWarehouseDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
