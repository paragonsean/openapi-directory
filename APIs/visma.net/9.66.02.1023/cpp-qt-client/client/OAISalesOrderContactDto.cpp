/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesOrderContactDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesOrderContactDto::OAISalesOrderContactDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesOrderContactDto::OAISalesOrderContactDto() {
    this->initializeModel();
}

OAISalesOrderContactDto::~OAISalesOrderContactDto() {}

void OAISalesOrderContactDto::initializeModel() {

    m_attention_isSet = false;
    m_attention_isValid = false;

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_fax_isSet = false;
    m_fax_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_override_contact_isSet = false;
    m_override_contact_isValid = false;

    m_phone1_isSet = false;
    m_phone1_isValid = false;

    m_phone2_isSet = false;
    m_phone2_isValid = false;

    m_web_isSet = false;
    m_web_isValid = false;
}

void OAISalesOrderContactDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesOrderContactDto::fromJsonObject(QJsonObject json) {

    m_attention_isValid = ::OpenAPI::fromJsonValue(m_attention, json[QString("attention")]);
    m_attention_isSet = !json[QString("attention")].isNull() && m_attention_isValid;

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("contactId")]);
    m_contact_id_isSet = !json[QString("contactId")].isNull() && m_contact_id_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_fax_isValid = ::OpenAPI::fromJsonValue(m_fax, json[QString("fax")]);
    m_fax_isSet = !json[QString("fax")].isNull() && m_fax_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_override_contact_isValid = ::OpenAPI::fromJsonValue(m_override_contact, json[QString("overrideContact")]);
    m_override_contact_isSet = !json[QString("overrideContact")].isNull() && m_override_contact_isValid;

    m_phone1_isValid = ::OpenAPI::fromJsonValue(m_phone1, json[QString("phone1")]);
    m_phone1_isSet = !json[QString("phone1")].isNull() && m_phone1_isValid;

    m_phone2_isValid = ::OpenAPI::fromJsonValue(m_phone2, json[QString("phone2")]);
    m_phone2_isSet = !json[QString("phone2")].isNull() && m_phone2_isValid;

    m_web_isValid = ::OpenAPI::fromJsonValue(m_web, json[QString("web")]);
    m_web_isSet = !json[QString("web")].isNull() && m_web_isValid;
}

QString OAISalesOrderContactDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesOrderContactDto::asJsonObject() const {
    QJsonObject obj;
    if (m_attention_isSet) {
        obj.insert(QString("attention"), ::OpenAPI::toJsonValue(m_attention));
    }
    if (m_contact_id_isSet) {
        obj.insert(QString("contactId"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_fax_isSet) {
        obj.insert(QString("fax"), ::OpenAPI::toJsonValue(m_fax));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_override_contact_isSet) {
        obj.insert(QString("overrideContact"), ::OpenAPI::toJsonValue(m_override_contact));
    }
    if (m_phone1_isSet) {
        obj.insert(QString("phone1"), ::OpenAPI::toJsonValue(m_phone1));
    }
    if (m_phone2_isSet) {
        obj.insert(QString("phone2"), ::OpenAPI::toJsonValue(m_phone2));
    }
    if (m_web_isSet) {
        obj.insert(QString("web"), ::OpenAPI::toJsonValue(m_web));
    }
    return obj;
}

QString OAISalesOrderContactDto::getAttention() const {
    return m_attention;
}
void OAISalesOrderContactDto::setAttention(const QString &attention) {
    m_attention = attention;
    m_attention_isSet = true;
}

bool OAISalesOrderContactDto::is_attention_Set() const{
    return m_attention_isSet;
}

bool OAISalesOrderContactDto::is_attention_Valid() const{
    return m_attention_isValid;
}

qint32 OAISalesOrderContactDto::getContactId() const {
    return m_contact_id;
}
void OAISalesOrderContactDto::setContactId(const qint32 &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAISalesOrderContactDto::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAISalesOrderContactDto::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

QString OAISalesOrderContactDto::getEmail() const {
    return m_email;
}
void OAISalesOrderContactDto::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISalesOrderContactDto::is_email_Set() const{
    return m_email_isSet;
}

bool OAISalesOrderContactDto::is_email_Valid() const{
    return m_email_isValid;
}

QString OAISalesOrderContactDto::getFax() const {
    return m_fax;
}
void OAISalesOrderContactDto::setFax(const QString &fax) {
    m_fax = fax;
    m_fax_isSet = true;
}

bool OAISalesOrderContactDto::is_fax_Set() const{
    return m_fax_isSet;
}

bool OAISalesOrderContactDto::is_fax_Valid() const{
    return m_fax_isValid;
}

QString OAISalesOrderContactDto::getName() const {
    return m_name;
}
void OAISalesOrderContactDto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISalesOrderContactDto::is_name_Set() const{
    return m_name_isSet;
}

bool OAISalesOrderContactDto::is_name_Valid() const{
    return m_name_isValid;
}

bool OAISalesOrderContactDto::isOverrideContact() const {
    return m_override_contact;
}
void OAISalesOrderContactDto::setOverrideContact(const bool &override_contact) {
    m_override_contact = override_contact;
    m_override_contact_isSet = true;
}

bool OAISalesOrderContactDto::is_override_contact_Set() const{
    return m_override_contact_isSet;
}

bool OAISalesOrderContactDto::is_override_contact_Valid() const{
    return m_override_contact_isValid;
}

QString OAISalesOrderContactDto::getPhone1() const {
    return m_phone1;
}
void OAISalesOrderContactDto::setPhone1(const QString &phone1) {
    m_phone1 = phone1;
    m_phone1_isSet = true;
}

bool OAISalesOrderContactDto::is_phone1_Set() const{
    return m_phone1_isSet;
}

bool OAISalesOrderContactDto::is_phone1_Valid() const{
    return m_phone1_isValid;
}

QString OAISalesOrderContactDto::getPhone2() const {
    return m_phone2;
}
void OAISalesOrderContactDto::setPhone2(const QString &phone2) {
    m_phone2 = phone2;
    m_phone2_isSet = true;
}

bool OAISalesOrderContactDto::is_phone2_Set() const{
    return m_phone2_isSet;
}

bool OAISalesOrderContactDto::is_phone2_Valid() const{
    return m_phone2_isValid;
}

QString OAISalesOrderContactDto::getWeb() const {
    return m_web;
}
void OAISalesOrderContactDto::setWeb(const QString &web) {
    m_web = web;
    m_web_isSet = true;
}

bool OAISalesOrderContactDto::is_web_Set() const{
    return m_web_isSet;
}

bool OAISalesOrderContactDto::is_web_Valid() const{
    return m_web_isValid;
}

bool OAISalesOrderContactDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attention_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_contact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesOrderContactDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
