/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryReceiptUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryReceiptUpdateDto::OAIInventoryReceiptUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryReceiptUpdateDto::OAIInventoryReceiptUpdateDto() {
    this->initializeModel();
}

OAIInventoryReceiptUpdateDto::~OAIInventoryReceiptUpdateDto() {}

void OAIInventoryReceiptUpdateDto::initializeModel() {

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_control_cost_isSet = false;
    m_control_cost_isValid = false;

    m_control_quantity_isSet = false;
    m_control_quantity_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_external_reference_isSet = false;
    m_external_reference_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_post_period_isSet = false;
    m_post_period_isValid = false;

    m_receipt_lines_isSet = false;
    m_receipt_lines_isValid = false;

    m_reference_number_isSet = false;
    m_reference_number_isValid = false;

    m_transfer_number_isSet = false;
    m_transfer_number_isValid = false;
}

void OAIInventoryReceiptUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryReceiptUpdateDto::fromJsonObject(QJsonObject json) {

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_control_cost_isValid = ::OpenAPI::fromJsonValue(m_control_cost, json[QString("controlCost")]);
    m_control_cost_isSet = !json[QString("controlCost")].isNull() && m_control_cost_isValid;

    m_control_quantity_isValid = ::OpenAPI::fromJsonValue(m_control_quantity, json[QString("controlQuantity")]);
    m_control_quantity_isSet = !json[QString("controlQuantity")].isNull() && m_control_quantity_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_external_reference_isValid = ::OpenAPI::fromJsonValue(m_external_reference, json[QString("externalReference")]);
    m_external_reference_isSet = !json[QString("externalReference")].isNull() && m_external_reference_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_post_period_isValid = ::OpenAPI::fromJsonValue(m_post_period, json[QString("postPeriod")]);
    m_post_period_isSet = !json[QString("postPeriod")].isNull() && m_post_period_isValid;

    m_receipt_lines_isValid = ::OpenAPI::fromJsonValue(m_receipt_lines, json[QString("receiptLines")]);
    m_receipt_lines_isSet = !json[QString("receiptLines")].isNull() && m_receipt_lines_isValid;

    m_reference_number_isValid = ::OpenAPI::fromJsonValue(m_reference_number, json[QString("referenceNumber")]);
    m_reference_number_isSet = !json[QString("referenceNumber")].isNull() && m_reference_number_isValid;

    m_transfer_number_isValid = ::OpenAPI::fromJsonValue(m_transfer_number, json[QString("transferNumber")]);
    m_transfer_number_isSet = !json[QString("transferNumber")].isNull() && m_transfer_number_isValid;
}

QString OAIInventoryReceiptUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryReceiptUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_control_cost.isSet()) {
        obj.insert(QString("controlCost"), ::OpenAPI::toJsonValue(m_control_cost));
    }
    if (m_control_quantity.isSet()) {
        obj.insert(QString("controlQuantity"), ::OpenAPI::toJsonValue(m_control_quantity));
    }
    if (m_date.isSet()) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_external_reference.isSet()) {
        obj.insert(QString("externalReference"), ::OpenAPI::toJsonValue(m_external_reference));
    }
    if (m_hold.isSet()) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_post_period.isSet()) {
        obj.insert(QString("postPeriod"), ::OpenAPI::toJsonValue(m_post_period));
    }
    if (m_receipt_lines.size() > 0) {
        obj.insert(QString("receiptLines"), ::OpenAPI::toJsonValue(m_receipt_lines));
    }
    if (m_reference_number.isSet()) {
        obj.insert(QString("referenceNumber"), ::OpenAPI::toJsonValue(m_reference_number));
    }
    if (m_transfer_number.isSet()) {
        obj.insert(QString("transferNumber"), ::OpenAPI::toJsonValue(m_transfer_number));
    }
    return obj;
}

OAIBranchNumberInInventoryReceiptUpdateDto OAIInventoryReceiptUpdateDto::getBranchNumber() const {
    return m_branch_number;
}
void OAIInventoryReceiptUpdateDto::setBranchNumber(const OAIBranchNumberInInventoryReceiptUpdateDto &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAIInventoryReceiptUpdateDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAIInventoryReceiptUpdateDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

OAIControlCostInInventoryReceiptUpdateDto OAIInventoryReceiptUpdateDto::getControlCost() const {
    return m_control_cost;
}
void OAIInventoryReceiptUpdateDto::setControlCost(const OAIControlCostInInventoryReceiptUpdateDto &control_cost) {
    m_control_cost = control_cost;
    m_control_cost_isSet = true;
}

bool OAIInventoryReceiptUpdateDto::is_control_cost_Set() const{
    return m_control_cost_isSet;
}

bool OAIInventoryReceiptUpdateDto::is_control_cost_Valid() const{
    return m_control_cost_isValid;
}

OAIControlQuantityInInventoryReceiptUpdateDto OAIInventoryReceiptUpdateDto::getControlQuantity() const {
    return m_control_quantity;
}
void OAIInventoryReceiptUpdateDto::setControlQuantity(const OAIControlQuantityInInventoryReceiptUpdateDto &control_quantity) {
    m_control_quantity = control_quantity;
    m_control_quantity_isSet = true;
}

bool OAIInventoryReceiptUpdateDto::is_control_quantity_Set() const{
    return m_control_quantity_isSet;
}

bool OAIInventoryReceiptUpdateDto::is_control_quantity_Valid() const{
    return m_control_quantity_isValid;
}

OAIDateInInventoryReceiptUpdateDto OAIInventoryReceiptUpdateDto::getDate() const {
    return m_date;
}
void OAIInventoryReceiptUpdateDto::setDate(const OAIDateInInventoryReceiptUpdateDto &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIInventoryReceiptUpdateDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAIInventoryReceiptUpdateDto::is_date_Valid() const{
    return m_date_isValid;
}

OAIDescriptionInInventoryReceiptUpdateDto OAIInventoryReceiptUpdateDto::getDescription() const {
    return m_description;
}
void OAIInventoryReceiptUpdateDto::setDescription(const OAIDescriptionInInventoryReceiptUpdateDto &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInventoryReceiptUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInventoryReceiptUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIExternalReferenceInInventoryReceiptUpdateDto OAIInventoryReceiptUpdateDto::getExternalReference() const {
    return m_external_reference;
}
void OAIInventoryReceiptUpdateDto::setExternalReference(const OAIExternalReferenceInInventoryReceiptUpdateDto &external_reference) {
    m_external_reference = external_reference;
    m_external_reference_isSet = true;
}

bool OAIInventoryReceiptUpdateDto::is_external_reference_Set() const{
    return m_external_reference_isSet;
}

bool OAIInventoryReceiptUpdateDto::is_external_reference_Valid() const{
    return m_external_reference_isValid;
}

OAIHoldInInventoryReceiptUpdateDto OAIInventoryReceiptUpdateDto::getHold() const {
    return m_hold;
}
void OAIInventoryReceiptUpdateDto::setHold(const OAIHoldInInventoryReceiptUpdateDto &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAIInventoryReceiptUpdateDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAIInventoryReceiptUpdateDto::is_hold_Valid() const{
    return m_hold_isValid;
}

OAIPostPeriodInInventoryReceiptUpdateDto OAIInventoryReceiptUpdateDto::getPostPeriod() const {
    return m_post_period;
}
void OAIInventoryReceiptUpdateDto::setPostPeriod(const OAIPostPeriodInInventoryReceiptUpdateDto &post_period) {
    m_post_period = post_period;
    m_post_period_isSet = true;
}

bool OAIInventoryReceiptUpdateDto::is_post_period_Set() const{
    return m_post_period_isSet;
}

bool OAIInventoryReceiptUpdateDto::is_post_period_Valid() const{
    return m_post_period_isValid;
}

QList<OAIInventoryReceiptLineUpdateDto> OAIInventoryReceiptUpdateDto::getReceiptLines() const {
    return m_receipt_lines;
}
void OAIInventoryReceiptUpdateDto::setReceiptLines(const QList<OAIInventoryReceiptLineUpdateDto> &receipt_lines) {
    m_receipt_lines = receipt_lines;
    m_receipt_lines_isSet = true;
}

bool OAIInventoryReceiptUpdateDto::is_receipt_lines_Set() const{
    return m_receipt_lines_isSet;
}

bool OAIInventoryReceiptUpdateDto::is_receipt_lines_Valid() const{
    return m_receipt_lines_isValid;
}

OAIReferenceNumberInInventoryReceiptUpdateDto OAIInventoryReceiptUpdateDto::getReferenceNumber() const {
    return m_reference_number;
}
void OAIInventoryReceiptUpdateDto::setReferenceNumber(const OAIReferenceNumberInInventoryReceiptUpdateDto &reference_number) {
    m_reference_number = reference_number;
    m_reference_number_isSet = true;
}

bool OAIInventoryReceiptUpdateDto::is_reference_number_Set() const{
    return m_reference_number_isSet;
}

bool OAIInventoryReceiptUpdateDto::is_reference_number_Valid() const{
    return m_reference_number_isValid;
}

OAITransferNumberInInventoryReceiptUpdateDto OAIInventoryReceiptUpdateDto::getTransferNumber() const {
    return m_transfer_number;
}
void OAIInventoryReceiptUpdateDto::setTransferNumber(const OAITransferNumberInInventoryReceiptUpdateDto &transfer_number) {
    m_transfer_number = transfer_number;
    m_transfer_number_isSet = true;
}

bool OAIInventoryReceiptUpdateDto::is_transfer_number_Set() const{
    return m_transfer_number_isSet;
}

bool OAIInventoryReceiptUpdateDto::is_transfer_number_Valid() const{
    return m_transfer_number_isValid;
}

bool OAIInventoryReceiptUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_quantity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_number.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryReceiptUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
