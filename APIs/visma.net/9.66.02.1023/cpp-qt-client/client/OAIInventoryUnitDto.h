/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInventoryUnitDto.h
 *
 * 
 */

#ifndef OAIInventoryUnitDto_H
#define OAIInventoryUnitDto_H

#include <QJsonObject>

#include "OAIItemClassDto.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIItemClassDto;

class OAIInventoryUnitDto : public OAIObject {
public:
    OAIInventoryUnitDto();
    OAIInventoryUnitDto(QString json);
    ~OAIInventoryUnitDto() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFromUnit() const;
    void setFromUnit(const QString &from_unit);
    bool is_from_unit_Set() const;
    bool is_from_unit_Valid() const;

    qint32 getInventoryId() const;
    void setInventoryId(const qint32 &inventory_id);
    bool is_inventory_id_Set() const;
    bool is_inventory_id_Valid() const;

    OAIItemClassDto getItemClass() const;
    void setItemClass(const OAIItemClassDto &item_class);
    bool is_item_class_Set() const;
    bool is_item_class_Valid() const;

    double getPriceAdjustmentMultiplier() const;
    void setPriceAdjustmentMultiplier(const double &price_adjustment_multiplier);
    bool is_price_adjustment_multiplier_Set() const;
    bool is_price_adjustment_multiplier_Valid() const;

    qint64 getRecordId() const;
    void setRecordId(const qint64 &record_id);
    bool is_record_id_Set() const;
    bool is_record_id_Valid() const;

    QString getSampleToUnit() const;
    void setSampleToUnit(const QString &sample_to_unit);
    bool is_sample_to_unit_Set() const;
    bool is_sample_to_unit_Valid() const;

    QString getToUnit() const;
    void setToUnit(const QString &to_unit);
    bool is_to_unit_Set() const;
    bool is_to_unit_Valid() const;

    QString getUnitMultDiv() const;
    void setUnitMultDiv(const QString &unit_mult_div);
    bool is_unit_mult_div_Set() const;
    bool is_unit_mult_div_Valid() const;

    double getUnitRate() const;
    void setUnitRate(const double &unit_rate);
    bool is_unit_rate_Set() const;
    bool is_unit_rate_Valid() const;

    qint32 getUnitType() const;
    void setUnitType(const qint32 &unit_type);
    bool is_unit_type_Set() const;
    bool is_unit_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_from_unit;
    bool m_from_unit_isSet;
    bool m_from_unit_isValid;

    qint32 m_inventory_id;
    bool m_inventory_id_isSet;
    bool m_inventory_id_isValid;

    OAIItemClassDto m_item_class;
    bool m_item_class_isSet;
    bool m_item_class_isValid;

    double m_price_adjustment_multiplier;
    bool m_price_adjustment_multiplier_isSet;
    bool m_price_adjustment_multiplier_isValid;

    qint64 m_record_id;
    bool m_record_id_isSet;
    bool m_record_id_isValid;

    QString m_sample_to_unit;
    bool m_sample_to_unit_isSet;
    bool m_sample_to_unit_isValid;

    QString m_to_unit;
    bool m_to_unit_isSet;
    bool m_to_unit_isValid;

    QString m_unit_mult_div;
    bool m_unit_mult_div_isSet;
    bool m_unit_mult_div_isValid;

    double m_unit_rate;
    bool m_unit_rate_isSet;
    bool m_unit_rate_isValid;

    qint32 m_unit_type;
    bool m_unit_type_isSet;
    bool m_unit_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInventoryUnitDto)

#endif // OAIInventoryUnitDto_H
