/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseReceiptsDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseReceiptsDto::OAIPurchaseReceiptsDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseReceiptsDto::OAIPurchaseReceiptsDto() {
    this->initializeModel();
}

OAIPurchaseReceiptsDto::~OAIPurchaseReceiptsDto() {}

void OAIPurchaseReceiptsDto::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_receipt_number_isSet = false;
    m_receipt_number_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supplier_name_isSet = false;
    m_supplier_name_isValid = false;

    m_total_amt_isSet = false;
    m_total_amt_isValid = false;

    m_total_qty_isSet = false;
    m_total_qty_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPurchaseReceiptsDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseReceiptsDto::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_receipt_number_isValid = ::OpenAPI::fromJsonValue(m_receipt_number, json[QString("receiptNumber")]);
    m_receipt_number_isSet = !json[QString("receiptNumber")].isNull() && m_receipt_number_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supplier_name_isValid = ::OpenAPI::fromJsonValue(m_supplier_name, json[QString("supplierName")]);
    m_supplier_name_isSet = !json[QString("supplierName")].isNull() && m_supplier_name_isValid;

    m_total_amt_isValid = ::OpenAPI::fromJsonValue(m_total_amt, json[QString("totalAmt")]);
    m_total_amt_isSet = !json[QString("totalAmt")].isNull() && m_total_amt_isValid;

    m_total_qty_isValid = ::OpenAPI::fromJsonValue(m_total_qty, json[QString("totalQty")]);
    m_total_qty_isSet = !json[QString("totalQty")].isNull() && m_total_qty_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPurchaseReceiptsDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseReceiptsDto::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_receipt_number_isSet) {
        obj.insert(QString("receiptNumber"), ::OpenAPI::toJsonValue(m_receipt_number));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supplier_name_isSet) {
        obj.insert(QString("supplierName"), ::OpenAPI::toJsonValue(m_supplier_name));
    }
    if (m_total_amt_isSet) {
        obj.insert(QString("totalAmt"), ::OpenAPI::toJsonValue(m_total_amt));
    }
    if (m_total_qty_isSet) {
        obj.insert(QString("totalQty"), ::OpenAPI::toJsonValue(m_total_qty));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPurchaseReceiptsDto::getCurrency() const {
    return m_currency;
}
void OAIPurchaseReceiptsDto::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPurchaseReceiptsDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPurchaseReceiptsDto::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIPurchaseReceiptsDto::getReceiptNumber() const {
    return m_receipt_number;
}
void OAIPurchaseReceiptsDto::setReceiptNumber(const QString &receipt_number) {
    m_receipt_number = receipt_number;
    m_receipt_number_isSet = true;
}

bool OAIPurchaseReceiptsDto::is_receipt_number_Set() const{
    return m_receipt_number_isSet;
}

bool OAIPurchaseReceiptsDto::is_receipt_number_Valid() const{
    return m_receipt_number_isValid;
}

QString OAIPurchaseReceiptsDto::getStatus() const {
    return m_status;
}
void OAIPurchaseReceiptsDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPurchaseReceiptsDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPurchaseReceiptsDto::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPurchaseReceiptsDto::getSupplierName() const {
    return m_supplier_name;
}
void OAIPurchaseReceiptsDto::setSupplierName(const QString &supplier_name) {
    m_supplier_name = supplier_name;
    m_supplier_name_isSet = true;
}

bool OAIPurchaseReceiptsDto::is_supplier_name_Set() const{
    return m_supplier_name_isSet;
}

bool OAIPurchaseReceiptsDto::is_supplier_name_Valid() const{
    return m_supplier_name_isValid;
}

double OAIPurchaseReceiptsDto::getTotalAmt() const {
    return m_total_amt;
}
void OAIPurchaseReceiptsDto::setTotalAmt(const double &total_amt) {
    m_total_amt = total_amt;
    m_total_amt_isSet = true;
}

bool OAIPurchaseReceiptsDto::is_total_amt_Set() const{
    return m_total_amt_isSet;
}

bool OAIPurchaseReceiptsDto::is_total_amt_Valid() const{
    return m_total_amt_isValid;
}

double OAIPurchaseReceiptsDto::getTotalQty() const {
    return m_total_qty;
}
void OAIPurchaseReceiptsDto::setTotalQty(const double &total_qty) {
    m_total_qty = total_qty;
    m_total_qty_isSet = true;
}

bool OAIPurchaseReceiptsDto::is_total_qty_Set() const{
    return m_total_qty_isSet;
}

bool OAIPurchaseReceiptsDto::is_total_qty_Valid() const{
    return m_total_qty_isValid;
}

QString OAIPurchaseReceiptsDto::getType() const {
    return m_type;
}
void OAIPurchaseReceiptsDto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPurchaseReceiptsDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPurchaseReceiptsDto::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPurchaseReceiptsDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseReceiptsDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
