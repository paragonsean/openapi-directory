/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpenseClaimUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpenseClaimUpdateDto::OAIExpenseClaimUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpenseClaimUpdateDto::OAIExpenseClaimUpdateDto() {
    this->initializeModel();
}

OAIExpenseClaimUpdateDto::~OAIExpenseClaimUpdateDto() {}

void OAIExpenseClaimUpdateDto::initializeModel() {

    m_claimed_by_isSet = false;
    m_claimed_by_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_customer_update_answer_isSet = false;
    m_customer_update_answer_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;
}

void OAIExpenseClaimUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpenseClaimUpdateDto::fromJsonObject(QJsonObject json) {

    m_claimed_by_isValid = ::OpenAPI::fromJsonValue(m_claimed_by, json[QString("claimedBy")]);
    m_claimed_by_isSet = !json[QString("claimedBy")].isNull() && m_claimed_by_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_customer_update_answer_isValid = ::OpenAPI::fromJsonValue(m_customer_update_answer, json[QString("customerUpdateAnswer")]);
    m_customer_update_answer_isSet = !json[QString("customerUpdateAnswer")].isNull() && m_customer_update_answer_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;
}

QString OAIExpenseClaimUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpenseClaimUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_claimed_by.isSet()) {
        obj.insert(QString("claimedBy"), ::OpenAPI::toJsonValue(m_claimed_by));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_customer_update_answer_isSet) {
        obj.insert(QString("customerUpdateAnswer"), ::OpenAPI::toJsonValue(m_customer_update_answer));
    }
    if (m_date.isSet()) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    return obj;
}

OAIClaimedByInExpenseClaimUpdateDto OAIExpenseClaimUpdateDto::getClaimedBy() const {
    return m_claimed_by;
}
void OAIExpenseClaimUpdateDto::setClaimedBy(const OAIClaimedByInExpenseClaimUpdateDto &claimed_by) {
    m_claimed_by = claimed_by;
    m_claimed_by_isSet = true;
}

bool OAIExpenseClaimUpdateDto::is_claimed_by_Set() const{
    return m_claimed_by_isSet;
}

bool OAIExpenseClaimUpdateDto::is_claimed_by_Valid() const{
    return m_claimed_by_isValid;
}

OAICustomerInExpenseClaimUpdateDto OAIExpenseClaimUpdateDto::getCustomer() const {
    return m_customer;
}
void OAIExpenseClaimUpdateDto::setCustomer(const OAICustomerInExpenseClaimUpdateDto &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIExpenseClaimUpdateDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIExpenseClaimUpdateDto::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAIExpenseClaimUpdateDto::getCustomerUpdateAnswer() const {
    return m_customer_update_answer;
}
void OAIExpenseClaimUpdateDto::setCustomerUpdateAnswer(const QString &customer_update_answer) {
    m_customer_update_answer = customer_update_answer;
    m_customer_update_answer_isSet = true;
}

bool OAIExpenseClaimUpdateDto::is_customer_update_answer_Set() const{
    return m_customer_update_answer_isSet;
}

bool OAIExpenseClaimUpdateDto::is_customer_update_answer_Valid() const{
    return m_customer_update_answer_isValid;
}

OAIDateInExpenseClaimUpdateDto OAIExpenseClaimUpdateDto::getDate() const {
    return m_date;
}
void OAIExpenseClaimUpdateDto::setDate(const OAIDateInExpenseClaimUpdateDto &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIExpenseClaimUpdateDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAIExpenseClaimUpdateDto::is_date_Valid() const{
    return m_date_isValid;
}

OAIDescriptionInExpenseClaimUpdateDto OAIExpenseClaimUpdateDto::getDescription() const {
    return m_description;
}
void OAIExpenseClaimUpdateDto::setDescription(const OAIDescriptionInExpenseClaimUpdateDto &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIExpenseClaimUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIExpenseClaimUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIExpenseClaimDetailUpdateDto> OAIExpenseClaimUpdateDto::getDetails() const {
    return m_details;
}
void OAIExpenseClaimUpdateDto::setDetails(const QList<OAIExpenseClaimDetailUpdateDto> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIExpenseClaimUpdateDto::is_details_Set() const{
    return m_details_isSet;
}

bool OAIExpenseClaimUpdateDto::is_details_Valid() const{
    return m_details_isValid;
}

OAILocationInExpenseClaimUpdateDto OAIExpenseClaimUpdateDto::getLocation() const {
    return m_location;
}
void OAIExpenseClaimUpdateDto::setLocation(const OAILocationInExpenseClaimUpdateDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIExpenseClaimUpdateDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIExpenseClaimUpdateDto::is_location_Valid() const{
    return m_location_isValid;
}

bool OAIExpenseClaimUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_claimed_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_update_answer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpenseClaimUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
