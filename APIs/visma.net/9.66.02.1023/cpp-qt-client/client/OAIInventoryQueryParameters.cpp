/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryQueryParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryQueryParameters::OAIInventoryQueryParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryQueryParameters::OAIInventoryQueryParameters() {
    this->initializeModel();
}

OAIInventoryQueryParameters::~OAIInventoryQueryParameters() {}

void OAIInventoryQueryParameters::initializeModel() {

    m_add_cost_price_statistics_isSet = false;
    m_add_cost_price_statistics_isValid = false;

    m_alternate_id_isSet = false;
    m_alternate_id_isValid = false;

    m_attachment_last_modified_date_time_isSet = false;
    m_attachment_last_modified_date_time_isValid = false;

    m_attachment_last_modified_date_time_condition_isSet = false;
    m_attachment_last_modified_date_time_condition_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_availability_last_modified_date_time_isSet = false;
    m_availability_last_modified_date_time_isValid = false;

    m_availability_last_modified_date_time_condition_isSet = false;
    m_availability_last_modified_date_time_condition_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_created_date_time_condition_isSet = false;
    m_created_date_time_condition_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expand_account_information_isSet = false;
    m_expand_account_information_isValid = false;

    m_expand_attachment_isSet = false;
    m_expand_attachment_isValid = false;

    m_expand_attribute_isSet = false;
    m_expand_attribute_isValid = false;

    m_expand_cross_reference_isSet = false;
    m_expand_cross_reference_isValid = false;

    m_expand_inventory_units_isSet = false;
    m_expand_inventory_units_isValid = false;

    m_expand_note_isSet = false;
    m_expand_note_isValid = false;

    m_expand_sales_categories_isSet = false;
    m_expand_sales_categories_isValid = false;

    m_expand_supplier_details_isSet = false;
    m_expand_supplier_details_isValid = false;

    m_expand_warehouse_detail_isSet = false;
    m_expand_warehouse_detail_isValid = false;

    m_greater_than_value_isSet = false;
    m_greater_than_value_isValid = false;

    m_inventory_number_isSet = false;
    m_inventory_number_isValid = false;

    m_inventory_types_isSet = false;
    m_inventory_types_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_last_modified_date_time_condition_isSet = false;
    m_last_modified_date_time_condition_isValid = false;

    m_number_to_read_isSet = false;
    m_number_to_read_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_sales_category_isSet = false;
    m_sales_category_isValid = false;

    m_skip_records_isSet = false;
    m_skip_records_isValid = false;
}

void OAIInventoryQueryParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryQueryParameters::fromJsonObject(QJsonObject json) {

    m_add_cost_price_statistics_isValid = ::OpenAPI::fromJsonValue(m_add_cost_price_statistics, json[QString("addCostPriceStatistics")]);
    m_add_cost_price_statistics_isSet = !json[QString("addCostPriceStatistics")].isNull() && m_add_cost_price_statistics_isValid;

    m_alternate_id_isValid = ::OpenAPI::fromJsonValue(m_alternate_id, json[QString("alternateID")]);
    m_alternate_id_isSet = !json[QString("alternateID")].isNull() && m_alternate_id_isValid;

    m_attachment_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_attachment_last_modified_date_time, json[QString("attachmentLastModifiedDateTime")]);
    m_attachment_last_modified_date_time_isSet = !json[QString("attachmentLastModifiedDateTime")].isNull() && m_attachment_last_modified_date_time_isValid;

    m_attachment_last_modified_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_attachment_last_modified_date_time_condition, json[QString("attachmentLastModifiedDateTimeCondition")]);
    m_attachment_last_modified_date_time_condition_isSet = !json[QString("attachmentLastModifiedDateTimeCondition")].isNull() && m_attachment_last_modified_date_time_condition_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_availability_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_availability_last_modified_date_time, json[QString("availabilityLastModifiedDateTime")]);
    m_availability_last_modified_date_time_isSet = !json[QString("availabilityLastModifiedDateTime")].isNull() && m_availability_last_modified_date_time_isValid;

    m_availability_last_modified_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_availability_last_modified_date_time_condition, json[QString("availabilityLastModifiedDateTimeCondition")]);
    m_availability_last_modified_date_time_condition_isSet = !json[QString("availabilityLastModifiedDateTimeCondition")].isNull() && m_availability_last_modified_date_time_condition_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_created_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_created_date_time_condition, json[QString("createdDateTimeCondition")]);
    m_created_date_time_condition_isSet = !json[QString("createdDateTimeCondition")].isNull() && m_created_date_time_condition_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expand_account_information_isValid = ::OpenAPI::fromJsonValue(m_expand_account_information, json[QString("expandAccountInformation")]);
    m_expand_account_information_isSet = !json[QString("expandAccountInformation")].isNull() && m_expand_account_information_isValid;

    m_expand_attachment_isValid = ::OpenAPI::fromJsonValue(m_expand_attachment, json[QString("expandAttachment")]);
    m_expand_attachment_isSet = !json[QString("expandAttachment")].isNull() && m_expand_attachment_isValid;

    m_expand_attribute_isValid = ::OpenAPI::fromJsonValue(m_expand_attribute, json[QString("expandAttribute")]);
    m_expand_attribute_isSet = !json[QString("expandAttribute")].isNull() && m_expand_attribute_isValid;

    m_expand_cross_reference_isValid = ::OpenAPI::fromJsonValue(m_expand_cross_reference, json[QString("expandCrossReference")]);
    m_expand_cross_reference_isSet = !json[QString("expandCrossReference")].isNull() && m_expand_cross_reference_isValid;

    m_expand_inventory_units_isValid = ::OpenAPI::fromJsonValue(m_expand_inventory_units, json[QString("expandInventoryUnits")]);
    m_expand_inventory_units_isSet = !json[QString("expandInventoryUnits")].isNull() && m_expand_inventory_units_isValid;

    m_expand_note_isValid = ::OpenAPI::fromJsonValue(m_expand_note, json[QString("expandNote")]);
    m_expand_note_isSet = !json[QString("expandNote")].isNull() && m_expand_note_isValid;

    m_expand_sales_categories_isValid = ::OpenAPI::fromJsonValue(m_expand_sales_categories, json[QString("expandSalesCategories")]);
    m_expand_sales_categories_isSet = !json[QString("expandSalesCategories")].isNull() && m_expand_sales_categories_isValid;

    m_expand_supplier_details_isValid = ::OpenAPI::fromJsonValue(m_expand_supplier_details, json[QString("expandSupplierDetails")]);
    m_expand_supplier_details_isSet = !json[QString("expandSupplierDetails")].isNull() && m_expand_supplier_details_isValid;

    m_expand_warehouse_detail_isValid = ::OpenAPI::fromJsonValue(m_expand_warehouse_detail, json[QString("expandWarehouseDetail")]);
    m_expand_warehouse_detail_isSet = !json[QString("expandWarehouseDetail")].isNull() && m_expand_warehouse_detail_isValid;

    m_greater_than_value_isValid = ::OpenAPI::fromJsonValue(m_greater_than_value, json[QString("greaterThanValue")]);
    m_greater_than_value_isSet = !json[QString("greaterThanValue")].isNull() && m_greater_than_value_isValid;

    m_inventory_number_isValid = ::OpenAPI::fromJsonValue(m_inventory_number, json[QString("inventoryNumber")]);
    m_inventory_number_isSet = !json[QString("inventoryNumber")].isNull() && m_inventory_number_isValid;

    m_inventory_types_isValid = ::OpenAPI::fromJsonValue(m_inventory_types, json[QString("inventoryTypes")]);
    m_inventory_types_isSet = !json[QString("inventoryTypes")].isNull() && m_inventory_types_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_last_modified_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time_condition, json[QString("lastModifiedDateTimeCondition")]);
    m_last_modified_date_time_condition_isSet = !json[QString("lastModifiedDateTimeCondition")].isNull() && m_last_modified_date_time_condition_isValid;

    m_number_to_read_isValid = ::OpenAPI::fromJsonValue(m_number_to_read, json[QString("numberToRead")]);
    m_number_to_read_isSet = !json[QString("numberToRead")].isNull() && m_number_to_read_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("pageNumber")]);
    m_page_number_isSet = !json[QString("pageNumber")].isNull() && m_page_number_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_sales_category_isValid = ::OpenAPI::fromJsonValue(m_sales_category, json[QString("salesCategory")]);
    m_sales_category_isSet = !json[QString("salesCategory")].isNull() && m_sales_category_isValid;

    m_skip_records_isValid = ::OpenAPI::fromJsonValue(m_skip_records, json[QString("skipRecords")]);
    m_skip_records_isSet = !json[QString("skipRecords")].isNull() && m_skip_records_isValid;
}

QString OAIInventoryQueryParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryQueryParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_add_cost_price_statistics_isSet) {
        obj.insert(QString("addCostPriceStatistics"), ::OpenAPI::toJsonValue(m_add_cost_price_statistics));
    }
    if (m_alternate_id_isSet) {
        obj.insert(QString("alternateID"), ::OpenAPI::toJsonValue(m_alternate_id));
    }
    if (m_attachment_last_modified_date_time_isSet) {
        obj.insert(QString("attachmentLastModifiedDateTime"), ::OpenAPI::toJsonValue(m_attachment_last_modified_date_time));
    }
    if (m_attachment_last_modified_date_time_condition_isSet) {
        obj.insert(QString("attachmentLastModifiedDateTimeCondition"), ::OpenAPI::toJsonValue(m_attachment_last_modified_date_time_condition));
    }
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_availability_last_modified_date_time_isSet) {
        obj.insert(QString("availabilityLastModifiedDateTime"), ::OpenAPI::toJsonValue(m_availability_last_modified_date_time));
    }
    if (m_availability_last_modified_date_time_condition_isSet) {
        obj.insert(QString("availabilityLastModifiedDateTimeCondition"), ::OpenAPI::toJsonValue(m_availability_last_modified_date_time_condition));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_created_date_time_condition_isSet) {
        obj.insert(QString("createdDateTimeCondition"), ::OpenAPI::toJsonValue(m_created_date_time_condition));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expand_account_information_isSet) {
        obj.insert(QString("expandAccountInformation"), ::OpenAPI::toJsonValue(m_expand_account_information));
    }
    if (m_expand_attachment_isSet) {
        obj.insert(QString("expandAttachment"), ::OpenAPI::toJsonValue(m_expand_attachment));
    }
    if (m_expand_attribute_isSet) {
        obj.insert(QString("expandAttribute"), ::OpenAPI::toJsonValue(m_expand_attribute));
    }
    if (m_expand_cross_reference_isSet) {
        obj.insert(QString("expandCrossReference"), ::OpenAPI::toJsonValue(m_expand_cross_reference));
    }
    if (m_expand_inventory_units_isSet) {
        obj.insert(QString("expandInventoryUnits"), ::OpenAPI::toJsonValue(m_expand_inventory_units));
    }
    if (m_expand_note_isSet) {
        obj.insert(QString("expandNote"), ::OpenAPI::toJsonValue(m_expand_note));
    }
    if (m_expand_sales_categories_isSet) {
        obj.insert(QString("expandSalesCategories"), ::OpenAPI::toJsonValue(m_expand_sales_categories));
    }
    if (m_expand_supplier_details_isSet) {
        obj.insert(QString("expandSupplierDetails"), ::OpenAPI::toJsonValue(m_expand_supplier_details));
    }
    if (m_expand_warehouse_detail_isSet) {
        obj.insert(QString("expandWarehouseDetail"), ::OpenAPI::toJsonValue(m_expand_warehouse_detail));
    }
    if (m_greater_than_value_isSet) {
        obj.insert(QString("greaterThanValue"), ::OpenAPI::toJsonValue(m_greater_than_value));
    }
    if (m_inventory_number_isSet) {
        obj.insert(QString("inventoryNumber"), ::OpenAPI::toJsonValue(m_inventory_number));
    }
    if (m_inventory_types.size() > 0) {
        obj.insert(QString("inventoryTypes"), ::OpenAPI::toJsonValue(m_inventory_types));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_last_modified_date_time_condition_isSet) {
        obj.insert(QString("lastModifiedDateTimeCondition"), ::OpenAPI::toJsonValue(m_last_modified_date_time_condition));
    }
    if (m_number_to_read_isSet) {
        obj.insert(QString("numberToRead"), ::OpenAPI::toJsonValue(m_number_to_read));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("pageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_sales_category_isSet) {
        obj.insert(QString("salesCategory"), ::OpenAPI::toJsonValue(m_sales_category));
    }
    if (m_skip_records_isSet) {
        obj.insert(QString("skipRecords"), ::OpenAPI::toJsonValue(m_skip_records));
    }
    return obj;
}

bool OAIInventoryQueryParameters::isAddCostPriceStatistics() const {
    return m_add_cost_price_statistics;
}
void OAIInventoryQueryParameters::setAddCostPriceStatistics(const bool &add_cost_price_statistics) {
    m_add_cost_price_statistics = add_cost_price_statistics;
    m_add_cost_price_statistics_isSet = true;
}

bool OAIInventoryQueryParameters::is_add_cost_price_statistics_Set() const{
    return m_add_cost_price_statistics_isSet;
}

bool OAIInventoryQueryParameters::is_add_cost_price_statistics_Valid() const{
    return m_add_cost_price_statistics_isValid;
}

QString OAIInventoryQueryParameters::getAlternateId() const {
    return m_alternate_id;
}
void OAIInventoryQueryParameters::setAlternateId(const QString &alternate_id) {
    m_alternate_id = alternate_id;
    m_alternate_id_isSet = true;
}

bool OAIInventoryQueryParameters::is_alternate_id_Set() const{
    return m_alternate_id_isSet;
}

bool OAIInventoryQueryParameters::is_alternate_id_Valid() const{
    return m_alternate_id_isValid;
}

QString OAIInventoryQueryParameters::getAttachmentLastModifiedDateTime() const {
    return m_attachment_last_modified_date_time;
}
void OAIInventoryQueryParameters::setAttachmentLastModifiedDateTime(const QString &attachment_last_modified_date_time) {
    m_attachment_last_modified_date_time = attachment_last_modified_date_time;
    m_attachment_last_modified_date_time_isSet = true;
}

bool OAIInventoryQueryParameters::is_attachment_last_modified_date_time_Set() const{
    return m_attachment_last_modified_date_time_isSet;
}

bool OAIInventoryQueryParameters::is_attachment_last_modified_date_time_Valid() const{
    return m_attachment_last_modified_date_time_isValid;
}

QString OAIInventoryQueryParameters::getAttachmentLastModifiedDateTimeCondition() const {
    return m_attachment_last_modified_date_time_condition;
}
void OAIInventoryQueryParameters::setAttachmentLastModifiedDateTimeCondition(const QString &attachment_last_modified_date_time_condition) {
    m_attachment_last_modified_date_time_condition = attachment_last_modified_date_time_condition;
    m_attachment_last_modified_date_time_condition_isSet = true;
}

bool OAIInventoryQueryParameters::is_attachment_last_modified_date_time_condition_Set() const{
    return m_attachment_last_modified_date_time_condition_isSet;
}

bool OAIInventoryQueryParameters::is_attachment_last_modified_date_time_condition_Valid() const{
    return m_attachment_last_modified_date_time_condition_isValid;
}

QString OAIInventoryQueryParameters::getAttributes() const {
    return m_attributes;
}
void OAIInventoryQueryParameters::setAttributes(const QString &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIInventoryQueryParameters::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIInventoryQueryParameters::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIInventoryQueryParameters::getAvailabilityLastModifiedDateTime() const {
    return m_availability_last_modified_date_time;
}
void OAIInventoryQueryParameters::setAvailabilityLastModifiedDateTime(const QString &availability_last_modified_date_time) {
    m_availability_last_modified_date_time = availability_last_modified_date_time;
    m_availability_last_modified_date_time_isSet = true;
}

bool OAIInventoryQueryParameters::is_availability_last_modified_date_time_Set() const{
    return m_availability_last_modified_date_time_isSet;
}

bool OAIInventoryQueryParameters::is_availability_last_modified_date_time_Valid() const{
    return m_availability_last_modified_date_time_isValid;
}

QString OAIInventoryQueryParameters::getAvailabilityLastModifiedDateTimeCondition() const {
    return m_availability_last_modified_date_time_condition;
}
void OAIInventoryQueryParameters::setAvailabilityLastModifiedDateTimeCondition(const QString &availability_last_modified_date_time_condition) {
    m_availability_last_modified_date_time_condition = availability_last_modified_date_time_condition;
    m_availability_last_modified_date_time_condition_isSet = true;
}

bool OAIInventoryQueryParameters::is_availability_last_modified_date_time_condition_Set() const{
    return m_availability_last_modified_date_time_condition_isSet;
}

bool OAIInventoryQueryParameters::is_availability_last_modified_date_time_condition_Valid() const{
    return m_availability_last_modified_date_time_condition_isValid;
}

QString OAIInventoryQueryParameters::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIInventoryQueryParameters::setCreatedDateTime(const QString &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIInventoryQueryParameters::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIInventoryQueryParameters::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAIInventoryQueryParameters::getCreatedDateTimeCondition() const {
    return m_created_date_time_condition;
}
void OAIInventoryQueryParameters::setCreatedDateTimeCondition(const QString &created_date_time_condition) {
    m_created_date_time_condition = created_date_time_condition;
    m_created_date_time_condition_isSet = true;
}

bool OAIInventoryQueryParameters::is_created_date_time_condition_Set() const{
    return m_created_date_time_condition_isSet;
}

bool OAIInventoryQueryParameters::is_created_date_time_condition_Valid() const{
    return m_created_date_time_condition_isValid;
}

QString OAIInventoryQueryParameters::getDescription() const {
    return m_description;
}
void OAIInventoryQueryParameters::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInventoryQueryParameters::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInventoryQueryParameters::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIInventoryQueryParameters::isExpandAccountInformation() const {
    return m_expand_account_information;
}
void OAIInventoryQueryParameters::setExpandAccountInformation(const bool &expand_account_information) {
    m_expand_account_information = expand_account_information;
    m_expand_account_information_isSet = true;
}

bool OAIInventoryQueryParameters::is_expand_account_information_Set() const{
    return m_expand_account_information_isSet;
}

bool OAIInventoryQueryParameters::is_expand_account_information_Valid() const{
    return m_expand_account_information_isValid;
}

bool OAIInventoryQueryParameters::isExpandAttachment() const {
    return m_expand_attachment;
}
void OAIInventoryQueryParameters::setExpandAttachment(const bool &expand_attachment) {
    m_expand_attachment = expand_attachment;
    m_expand_attachment_isSet = true;
}

bool OAIInventoryQueryParameters::is_expand_attachment_Set() const{
    return m_expand_attachment_isSet;
}

bool OAIInventoryQueryParameters::is_expand_attachment_Valid() const{
    return m_expand_attachment_isValid;
}

bool OAIInventoryQueryParameters::isExpandAttribute() const {
    return m_expand_attribute;
}
void OAIInventoryQueryParameters::setExpandAttribute(const bool &expand_attribute) {
    m_expand_attribute = expand_attribute;
    m_expand_attribute_isSet = true;
}

bool OAIInventoryQueryParameters::is_expand_attribute_Set() const{
    return m_expand_attribute_isSet;
}

bool OAIInventoryQueryParameters::is_expand_attribute_Valid() const{
    return m_expand_attribute_isValid;
}

bool OAIInventoryQueryParameters::isExpandCrossReference() const {
    return m_expand_cross_reference;
}
void OAIInventoryQueryParameters::setExpandCrossReference(const bool &expand_cross_reference) {
    m_expand_cross_reference = expand_cross_reference;
    m_expand_cross_reference_isSet = true;
}

bool OAIInventoryQueryParameters::is_expand_cross_reference_Set() const{
    return m_expand_cross_reference_isSet;
}

bool OAIInventoryQueryParameters::is_expand_cross_reference_Valid() const{
    return m_expand_cross_reference_isValid;
}

bool OAIInventoryQueryParameters::isExpandInventoryUnits() const {
    return m_expand_inventory_units;
}
void OAIInventoryQueryParameters::setExpandInventoryUnits(const bool &expand_inventory_units) {
    m_expand_inventory_units = expand_inventory_units;
    m_expand_inventory_units_isSet = true;
}

bool OAIInventoryQueryParameters::is_expand_inventory_units_Set() const{
    return m_expand_inventory_units_isSet;
}

bool OAIInventoryQueryParameters::is_expand_inventory_units_Valid() const{
    return m_expand_inventory_units_isValid;
}

bool OAIInventoryQueryParameters::isExpandNote() const {
    return m_expand_note;
}
void OAIInventoryQueryParameters::setExpandNote(const bool &expand_note) {
    m_expand_note = expand_note;
    m_expand_note_isSet = true;
}

bool OAIInventoryQueryParameters::is_expand_note_Set() const{
    return m_expand_note_isSet;
}

bool OAIInventoryQueryParameters::is_expand_note_Valid() const{
    return m_expand_note_isValid;
}

bool OAIInventoryQueryParameters::isExpandSalesCategories() const {
    return m_expand_sales_categories;
}
void OAIInventoryQueryParameters::setExpandSalesCategories(const bool &expand_sales_categories) {
    m_expand_sales_categories = expand_sales_categories;
    m_expand_sales_categories_isSet = true;
}

bool OAIInventoryQueryParameters::is_expand_sales_categories_Set() const{
    return m_expand_sales_categories_isSet;
}

bool OAIInventoryQueryParameters::is_expand_sales_categories_Valid() const{
    return m_expand_sales_categories_isValid;
}

bool OAIInventoryQueryParameters::isExpandSupplierDetails() const {
    return m_expand_supplier_details;
}
void OAIInventoryQueryParameters::setExpandSupplierDetails(const bool &expand_supplier_details) {
    m_expand_supplier_details = expand_supplier_details;
    m_expand_supplier_details_isSet = true;
}

bool OAIInventoryQueryParameters::is_expand_supplier_details_Set() const{
    return m_expand_supplier_details_isSet;
}

bool OAIInventoryQueryParameters::is_expand_supplier_details_Valid() const{
    return m_expand_supplier_details_isValid;
}

bool OAIInventoryQueryParameters::isExpandWarehouseDetail() const {
    return m_expand_warehouse_detail;
}
void OAIInventoryQueryParameters::setExpandWarehouseDetail(const bool &expand_warehouse_detail) {
    m_expand_warehouse_detail = expand_warehouse_detail;
    m_expand_warehouse_detail_isSet = true;
}

bool OAIInventoryQueryParameters::is_expand_warehouse_detail_Set() const{
    return m_expand_warehouse_detail_isSet;
}

bool OAIInventoryQueryParameters::is_expand_warehouse_detail_Valid() const{
    return m_expand_warehouse_detail_isValid;
}

QString OAIInventoryQueryParameters::getGreaterThanValue() const {
    return m_greater_than_value;
}
void OAIInventoryQueryParameters::setGreaterThanValue(const QString &greater_than_value) {
    m_greater_than_value = greater_than_value;
    m_greater_than_value_isSet = true;
}

bool OAIInventoryQueryParameters::is_greater_than_value_Set() const{
    return m_greater_than_value_isSet;
}

bool OAIInventoryQueryParameters::is_greater_than_value_Valid() const{
    return m_greater_than_value_isValid;
}

QString OAIInventoryQueryParameters::getInventoryNumber() const {
    return m_inventory_number;
}
void OAIInventoryQueryParameters::setInventoryNumber(const QString &inventory_number) {
    m_inventory_number = inventory_number;
    m_inventory_number_isSet = true;
}

bool OAIInventoryQueryParameters::is_inventory_number_Set() const{
    return m_inventory_number_isSet;
}

bool OAIInventoryQueryParameters::is_inventory_number_Valid() const{
    return m_inventory_number_isValid;
}

QList<QString> OAIInventoryQueryParameters::getInventoryTypes() const {
    return m_inventory_types;
}
void OAIInventoryQueryParameters::setInventoryTypes(const QList<QString> &inventory_types) {
    m_inventory_types = inventory_types;
    m_inventory_types_isSet = true;
}

bool OAIInventoryQueryParameters::is_inventory_types_Set() const{
    return m_inventory_types_isSet;
}

bool OAIInventoryQueryParameters::is_inventory_types_Valid() const{
    return m_inventory_types_isValid;
}

QString OAIInventoryQueryParameters::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIInventoryQueryParameters::setLastModifiedDateTime(const QString &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIInventoryQueryParameters::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIInventoryQueryParameters::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QString OAIInventoryQueryParameters::getLastModifiedDateTimeCondition() const {
    return m_last_modified_date_time_condition;
}
void OAIInventoryQueryParameters::setLastModifiedDateTimeCondition(const QString &last_modified_date_time_condition) {
    m_last_modified_date_time_condition = last_modified_date_time_condition;
    m_last_modified_date_time_condition_isSet = true;
}

bool OAIInventoryQueryParameters::is_last_modified_date_time_condition_Set() const{
    return m_last_modified_date_time_condition_isSet;
}

bool OAIInventoryQueryParameters::is_last_modified_date_time_condition_Valid() const{
    return m_last_modified_date_time_condition_isValid;
}

qint32 OAIInventoryQueryParameters::getNumberToRead() const {
    return m_number_to_read;
}
void OAIInventoryQueryParameters::setNumberToRead(const qint32 &number_to_read) {
    m_number_to_read = number_to_read;
    m_number_to_read_isSet = true;
}

bool OAIInventoryQueryParameters::is_number_to_read_Set() const{
    return m_number_to_read_isSet;
}

bool OAIInventoryQueryParameters::is_number_to_read_Valid() const{
    return m_number_to_read_isValid;
}

qint32 OAIInventoryQueryParameters::getPageNumber() const {
    return m_page_number;
}
void OAIInventoryQueryParameters::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIInventoryQueryParameters::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIInventoryQueryParameters::is_page_number_Valid() const{
    return m_page_number_isValid;
}

qint32 OAIInventoryQueryParameters::getPageSize() const {
    return m_page_size;
}
void OAIInventoryQueryParameters::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIInventoryQueryParameters::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIInventoryQueryParameters::is_page_size_Valid() const{
    return m_page_size_isValid;
}

qint32 OAIInventoryQueryParameters::getSalesCategory() const {
    return m_sales_category;
}
void OAIInventoryQueryParameters::setSalesCategory(const qint32 &sales_category) {
    m_sales_category = sales_category;
    m_sales_category_isSet = true;
}

bool OAIInventoryQueryParameters::is_sales_category_Set() const{
    return m_sales_category_isSet;
}

bool OAIInventoryQueryParameters::is_sales_category_Valid() const{
    return m_sales_category_isValid;
}

qint32 OAIInventoryQueryParameters::getSkipRecords() const {
    return m_skip_records;
}
void OAIInventoryQueryParameters::setSkipRecords(const qint32 &skip_records) {
    m_skip_records = skip_records;
    m_skip_records_isSet = true;
}

bool OAIInventoryQueryParameters::is_skip_records_Set() const{
    return m_skip_records_isSet;
}

bool OAIInventoryQueryParameters::is_skip_records_Valid() const{
    return m_skip_records_isValid;
}

bool OAIInventoryQueryParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_cost_price_statistics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment_last_modified_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_last_modified_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_account_information_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_attachment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_cross_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_inventory_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_sales_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_supplier_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_warehouse_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_greater_than_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_to_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_records_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryQueryParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
