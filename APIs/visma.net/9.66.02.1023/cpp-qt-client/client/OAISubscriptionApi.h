/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISubscriptionApi_H
#define OAI_OAISubscriptionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISubscriptionDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISubscriptionApi : public QObject {
    Q_OBJECT

public:
    OAISubscriptionApi(const int timeOut = 0);
    ~OAISubscriptionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_subscription_dto OAISubscriptionDto [required]
    */
    virtual void createSubscription(const OAISubscriptionDto &oai_subscription_dto);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteSubscription(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void findSubscriptionById(const qint64 &id);


    virtual void getAllSubscriptions();

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_subscription_dto OAISubscriptionDto [required]
    */
    virtual void updateSubscription(const qint64 &id, const OAISubscriptionDto &oai_subscription_dto);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSubscriptionCallback(OAIHttpRequestWorker *worker);
    void deleteSubscriptionCallback(OAIHttpRequestWorker *worker);
    void findSubscriptionByIdCallback(OAIHttpRequestWorker *worker);
    void getAllSubscriptionsCallback(OAIHttpRequestWorker *worker);
    void updateSubscriptionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSubscriptionSignal(OAISubscriptionDto summary);
    void deleteSubscriptionSignal();
    void findSubscriptionByIdSignal(OAISubscriptionDto summary);
    void getAllSubscriptionsSignal(QList<OAISubscriptionDto> summary);
    void updateSubscriptionSignal();


    void createSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionDto summary);
    void deleteSubscriptionSignalFull(OAIHttpRequestWorker *worker);
    void findSubscriptionByIdSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionDto summary);
    void getAllSubscriptionsSignalFull(OAIHttpRequestWorker *worker, QList<OAISubscriptionDto> summary);
    void updateSubscriptionSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createSubscriptionSignalError() instead")
    void createSubscriptionSignalE(OAISubscriptionDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSubscriptionSignalError(OAISubscriptionDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSubscriptionSignalError() instead")
    void deleteSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findSubscriptionByIdSignalError() instead")
    void findSubscriptionByIdSignalE(OAISubscriptionDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findSubscriptionByIdSignalError(OAISubscriptionDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllSubscriptionsSignalError() instead")
    void getAllSubscriptionsSignalE(QList<OAISubscriptionDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllSubscriptionsSignalError(QList<OAISubscriptionDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubscriptionSignalError() instead")
    void updateSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSubscriptionSignalErrorFull() instead")
    void createSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSubscriptionSignalErrorFull() instead")
    void deleteSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findSubscriptionByIdSignalErrorFull() instead")
    void findSubscriptionByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findSubscriptionByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllSubscriptionsSignalErrorFull() instead")
    void getAllSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubscriptionSignalErrorFull() instead")
    void updateSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
