/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscountDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscountDto::OAIDiscountDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscountDto::OAIDiscountDto() {
    this->initializeModel();
}

OAIDiscountDto::~OAIDiscountDto() {}

void OAIDiscountDto::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_branches_isSet = false;
    m_branches_isValid = false;

    m_break_by_isSet = false;
    m_break_by_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_customer_price_classes_isSet = false;
    m_customer_price_classes_isValid = false;

    m_customers_isSet = false;
    m_customers_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discount_breakpoints_isSet = false;
    m_discount_breakpoints_isValid = false;

    m_discount_by_isSet = false;
    m_discount_by_isValid = false;

    m_discount_code_isSet = false;
    m_discount_code_isValid = false;

    m_effective_date_isSet = false;
    m_effective_date_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_free_item_isSet = false;
    m_free_item_isValid = false;

    m_item_price_classes_isSet = false;
    m_item_price_classes_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_last_free_item_isSet = false;
    m_last_free_item_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_last_update_date_isSet = false;
    m_last_update_date_isValid = false;

    m_line_cntr_isSet = false;
    m_line_cntr_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_pending_free_item_isSet = false;
    m_pending_free_item_isValid = false;

    m_promotional_isSet = false;
    m_promotional_isValid = false;

    m_prorate_discount_isSet = false;
    m_prorate_discount_isValid = false;

    m_series_isSet = false;
    m_series_isValid = false;

    m_warehouses_isSet = false;
    m_warehouses_isValid = false;
}

void OAIDiscountDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiscountDto::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_branches_isValid = ::OpenAPI::fromJsonValue(m_branches, json[QString("branches")]);
    m_branches_isSet = !json[QString("branches")].isNull() && m_branches_isValid;

    m_break_by_isValid = ::OpenAPI::fromJsonValue(m_break_by, json[QString("breakBy")]);
    m_break_by_isSet = !json[QString("breakBy")].isNull() && m_break_by_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_customer_price_classes_isValid = ::OpenAPI::fromJsonValue(m_customer_price_classes, json[QString("customerPriceClasses")]);
    m_customer_price_classes_isSet = !json[QString("customerPriceClasses")].isNull() && m_customer_price_classes_isValid;

    m_customers_isValid = ::OpenAPI::fromJsonValue(m_customers, json[QString("customers")]);
    m_customers_isSet = !json[QString("customers")].isNull() && m_customers_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discount_breakpoints_isValid = ::OpenAPI::fromJsonValue(m_discount_breakpoints, json[QString("discountBreakpoints")]);
    m_discount_breakpoints_isSet = !json[QString("discountBreakpoints")].isNull() && m_discount_breakpoints_isValid;

    m_discount_by_isValid = ::OpenAPI::fromJsonValue(m_discount_by, json[QString("discountBy")]);
    m_discount_by_isSet = !json[QString("discountBy")].isNull() && m_discount_by_isValid;

    m_discount_code_isValid = ::OpenAPI::fromJsonValue(m_discount_code, json[QString("discountCode")]);
    m_discount_code_isSet = !json[QString("discountCode")].isNull() && m_discount_code_isValid;

    m_effective_date_isValid = ::OpenAPI::fromJsonValue(m_effective_date, json[QString("effectiveDate")]);
    m_effective_date_isSet = !json[QString("effectiveDate")].isNull() && m_effective_date_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_free_item_isValid = ::OpenAPI::fromJsonValue(m_free_item, json[QString("freeItem")]);
    m_free_item_isSet = !json[QString("freeItem")].isNull() && m_free_item_isValid;

    m_item_price_classes_isValid = ::OpenAPI::fromJsonValue(m_item_price_classes, json[QString("itemPriceClasses")]);
    m_item_price_classes_isSet = !json[QString("itemPriceClasses")].isNull() && m_item_price_classes_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_last_free_item_isValid = ::OpenAPI::fromJsonValue(m_last_free_item, json[QString("lastFreeItem")]);
    m_last_free_item_isSet = !json[QString("lastFreeItem")].isNull() && m_last_free_item_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_last_update_date_isValid = ::OpenAPI::fromJsonValue(m_last_update_date, json[QString("lastUpdateDate")]);
    m_last_update_date_isSet = !json[QString("lastUpdateDate")].isNull() && m_last_update_date_isValid;

    m_line_cntr_isValid = ::OpenAPI::fromJsonValue(m_line_cntr, json[QString("lineCntr")]);
    m_line_cntr_isSet = !json[QString("lineCntr")].isNull() && m_line_cntr_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_pending_free_item_isValid = ::OpenAPI::fromJsonValue(m_pending_free_item, json[QString("pendingFreeItem")]);
    m_pending_free_item_isSet = !json[QString("pendingFreeItem")].isNull() && m_pending_free_item_isValid;

    m_promotional_isValid = ::OpenAPI::fromJsonValue(m_promotional, json[QString("promotional")]);
    m_promotional_isSet = !json[QString("promotional")].isNull() && m_promotional_isValid;

    m_prorate_discount_isValid = ::OpenAPI::fromJsonValue(m_prorate_discount, json[QString("prorateDiscount")]);
    m_prorate_discount_isSet = !json[QString("prorateDiscount")].isNull() && m_prorate_discount_isValid;

    m_series_isValid = ::OpenAPI::fromJsonValue(m_series, json[QString("series")]);
    m_series_isSet = !json[QString("series")].isNull() && m_series_isValid;

    m_warehouses_isValid = ::OpenAPI::fromJsonValue(m_warehouses, json[QString("warehouses")]);
    m_warehouses_isSet = !json[QString("warehouses")].isNull() && m_warehouses_isValid;
}

QString OAIDiscountDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiscountDto::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_branches.size() > 0) {
        obj.insert(QString("branches"), ::OpenAPI::toJsonValue(m_branches));
    }
    if (m_break_by_isSet) {
        obj.insert(QString("breakBy"), ::OpenAPI::toJsonValue(m_break_by));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_customer_price_classes.size() > 0) {
        obj.insert(QString("customerPriceClasses"), ::OpenAPI::toJsonValue(m_customer_price_classes));
    }
    if (m_customers.size() > 0) {
        obj.insert(QString("customers"), ::OpenAPI::toJsonValue(m_customers));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discount_breakpoints.size() > 0) {
        obj.insert(QString("discountBreakpoints"), ::OpenAPI::toJsonValue(m_discount_breakpoints));
    }
    if (m_discount_by_isSet) {
        obj.insert(QString("discountBy"), ::OpenAPI::toJsonValue(m_discount_by));
    }
    if (m_discount_code_isSet) {
        obj.insert(QString("discountCode"), ::OpenAPI::toJsonValue(m_discount_code));
    }
    if (m_effective_date_isSet) {
        obj.insert(QString("effectiveDate"), ::OpenAPI::toJsonValue(m_effective_date));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_free_item_isSet) {
        obj.insert(QString("freeItem"), ::OpenAPI::toJsonValue(m_free_item));
    }
    if (m_item_price_classes.size() > 0) {
        obj.insert(QString("itemPriceClasses"), ::OpenAPI::toJsonValue(m_item_price_classes));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_last_free_item_isSet) {
        obj.insert(QString("lastFreeItem"), ::OpenAPI::toJsonValue(m_last_free_item));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_last_update_date_isSet) {
        obj.insert(QString("lastUpdateDate"), ::OpenAPI::toJsonValue(m_last_update_date));
    }
    if (m_line_cntr_isSet) {
        obj.insert(QString("lineCntr"), ::OpenAPI::toJsonValue(m_line_cntr));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_pending_free_item_isSet) {
        obj.insert(QString("pendingFreeItem"), ::OpenAPI::toJsonValue(m_pending_free_item));
    }
    if (m_promotional_isSet) {
        obj.insert(QString("promotional"), ::OpenAPI::toJsonValue(m_promotional));
    }
    if (m_prorate_discount_isSet) {
        obj.insert(QString("prorateDiscount"), ::OpenAPI::toJsonValue(m_prorate_discount));
    }
    if (m_series_isSet) {
        obj.insert(QString("series"), ::OpenAPI::toJsonValue(m_series));
    }
    if (m_warehouses.size() > 0) {
        obj.insert(QString("warehouses"), ::OpenAPI::toJsonValue(m_warehouses));
    }
    return obj;
}

bool OAIDiscountDto::isActive() const {
    return m_active;
}
void OAIDiscountDto::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIDiscountDto::is_active_Set() const{
    return m_active_isSet;
}

bool OAIDiscountDto::is_active_Valid() const{
    return m_active_isValid;
}

QList<OAIDiscountBranchDto> OAIDiscountDto::getBranches() const {
    return m_branches;
}
void OAIDiscountDto::setBranches(const QList<OAIDiscountBranchDto> &branches) {
    m_branches = branches;
    m_branches_isSet = true;
}

bool OAIDiscountDto::is_branches_Set() const{
    return m_branches_isSet;
}

bool OAIDiscountDto::is_branches_Valid() const{
    return m_branches_isValid;
}

QString OAIDiscountDto::getBreakBy() const {
    return m_break_by;
}
void OAIDiscountDto::setBreakBy(const QString &break_by) {
    m_break_by = break_by;
    m_break_by_isSet = true;
}

bool OAIDiscountDto::is_break_by_Set() const{
    return m_break_by_isSet;
}

bool OAIDiscountDto::is_break_by_Valid() const{
    return m_break_by_isValid;
}

QDateTime OAIDiscountDto::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIDiscountDto::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIDiscountDto::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIDiscountDto::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QList<OAIDiscountCustomerPriceClassDto> OAIDiscountDto::getCustomerPriceClasses() const {
    return m_customer_price_classes;
}
void OAIDiscountDto::setCustomerPriceClasses(const QList<OAIDiscountCustomerPriceClassDto> &customer_price_classes) {
    m_customer_price_classes = customer_price_classes;
    m_customer_price_classes_isSet = true;
}

bool OAIDiscountDto::is_customer_price_classes_Set() const{
    return m_customer_price_classes_isSet;
}

bool OAIDiscountDto::is_customer_price_classes_Valid() const{
    return m_customer_price_classes_isValid;
}

QList<OAIDiscountCustomer2Dto> OAIDiscountDto::getCustomers() const {
    return m_customers;
}
void OAIDiscountDto::setCustomers(const QList<OAIDiscountCustomer2Dto> &customers) {
    m_customers = customers;
    m_customers_isSet = true;
}

bool OAIDiscountDto::is_customers_Set() const{
    return m_customers_isSet;
}

bool OAIDiscountDto::is_customers_Valid() const{
    return m_customers_isValid;
}

QString OAIDiscountDto::getDescription() const {
    return m_description;
}
void OAIDiscountDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDiscountDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDiscountDto::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIDiscountBreakpointDto> OAIDiscountDto::getDiscountBreakpoints() const {
    return m_discount_breakpoints;
}
void OAIDiscountDto::setDiscountBreakpoints(const QList<OAIDiscountBreakpointDto> &discount_breakpoints) {
    m_discount_breakpoints = discount_breakpoints;
    m_discount_breakpoints_isSet = true;
}

bool OAIDiscountDto::is_discount_breakpoints_Set() const{
    return m_discount_breakpoints_isSet;
}

bool OAIDiscountDto::is_discount_breakpoints_Valid() const{
    return m_discount_breakpoints_isValid;
}

QString OAIDiscountDto::getDiscountBy() const {
    return m_discount_by;
}
void OAIDiscountDto::setDiscountBy(const QString &discount_by) {
    m_discount_by = discount_by;
    m_discount_by_isSet = true;
}

bool OAIDiscountDto::is_discount_by_Set() const{
    return m_discount_by_isSet;
}

bool OAIDiscountDto::is_discount_by_Valid() const{
    return m_discount_by_isValid;
}

QString OAIDiscountDto::getDiscountCode() const {
    return m_discount_code;
}
void OAIDiscountDto::setDiscountCode(const QString &discount_code) {
    m_discount_code = discount_code;
    m_discount_code_isSet = true;
}

bool OAIDiscountDto::is_discount_code_Set() const{
    return m_discount_code_isSet;
}

bool OAIDiscountDto::is_discount_code_Valid() const{
    return m_discount_code_isValid;
}

QDateTime OAIDiscountDto::getEffectiveDate() const {
    return m_effective_date;
}
void OAIDiscountDto::setEffectiveDate(const QDateTime &effective_date) {
    m_effective_date = effective_date;
    m_effective_date_isSet = true;
}

bool OAIDiscountDto::is_effective_date_Set() const{
    return m_effective_date_isSet;
}

bool OAIDiscountDto::is_effective_date_Valid() const{
    return m_effective_date_isValid;
}

QString OAIDiscountDto::getErrorInfo() const {
    return m_error_info;
}
void OAIDiscountDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIDiscountDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIDiscountDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

QDateTime OAIDiscountDto::getExpirationDate() const {
    return m_expiration_date;
}
void OAIDiscountDto::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIDiscountDto::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIDiscountDto::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

qint32 OAIDiscountDto::getFreeItem() const {
    return m_free_item;
}
void OAIDiscountDto::setFreeItem(const qint32 &free_item) {
    m_free_item = free_item;
    m_free_item_isSet = true;
}

bool OAIDiscountDto::is_free_item_Set() const{
    return m_free_item_isSet;
}

bool OAIDiscountDto::is_free_item_Valid() const{
    return m_free_item_isValid;
}

QList<OAIDiscountItemPriceClassDto> OAIDiscountDto::getItemPriceClasses() const {
    return m_item_price_classes;
}
void OAIDiscountDto::setItemPriceClasses(const QList<OAIDiscountItemPriceClassDto> &item_price_classes) {
    m_item_price_classes = item_price_classes;
    m_item_price_classes_isSet = true;
}

bool OAIDiscountDto::is_item_price_classes_Set() const{
    return m_item_price_classes_isSet;
}

bool OAIDiscountDto::is_item_price_classes_Valid() const{
    return m_item_price_classes_isValid;
}

QList<OAIDiscountItemDto> OAIDiscountDto::getItems() const {
    return m_items;
}
void OAIDiscountDto::setItems(const QList<OAIDiscountItemDto> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIDiscountDto::is_items_Set() const{
    return m_items_isSet;
}

bool OAIDiscountDto::is_items_Valid() const{
    return m_items_isValid;
}

qint32 OAIDiscountDto::getLastFreeItem() const {
    return m_last_free_item;
}
void OAIDiscountDto::setLastFreeItem(const qint32 &last_free_item) {
    m_last_free_item = last_free_item;
    m_last_free_item_isSet = true;
}

bool OAIDiscountDto::is_last_free_item_Set() const{
    return m_last_free_item_isSet;
}

bool OAIDiscountDto::is_last_free_item_Valid() const{
    return m_last_free_item_isValid;
}

QDateTime OAIDiscountDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIDiscountDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIDiscountDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIDiscountDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QDateTime OAIDiscountDto::getLastUpdateDate() const {
    return m_last_update_date;
}
void OAIDiscountDto::setLastUpdateDate(const QDateTime &last_update_date) {
    m_last_update_date = last_update_date;
    m_last_update_date_isSet = true;
}

bool OAIDiscountDto::is_last_update_date_Set() const{
    return m_last_update_date_isSet;
}

bool OAIDiscountDto::is_last_update_date_Valid() const{
    return m_last_update_date_isValid;
}

qint32 OAIDiscountDto::getLineCntr() const {
    return m_line_cntr;
}
void OAIDiscountDto::setLineCntr(const qint32 &line_cntr) {
    m_line_cntr = line_cntr;
    m_line_cntr_isSet = true;
}

bool OAIDiscountDto::is_line_cntr_Set() const{
    return m_line_cntr_isSet;
}

bool OAIDiscountDto::is_line_cntr_Valid() const{
    return m_line_cntr_isValid;
}

OAIMetadataDto OAIDiscountDto::getMetadata() const {
    return m_metadata;
}
void OAIDiscountDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIDiscountDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIDiscountDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

qint32 OAIDiscountDto::getPendingFreeItem() const {
    return m_pending_free_item;
}
void OAIDiscountDto::setPendingFreeItem(const qint32 &pending_free_item) {
    m_pending_free_item = pending_free_item;
    m_pending_free_item_isSet = true;
}

bool OAIDiscountDto::is_pending_free_item_Set() const{
    return m_pending_free_item_isSet;
}

bool OAIDiscountDto::is_pending_free_item_Valid() const{
    return m_pending_free_item_isValid;
}

bool OAIDiscountDto::isPromotional() const {
    return m_promotional;
}
void OAIDiscountDto::setPromotional(const bool &promotional) {
    m_promotional = promotional;
    m_promotional_isSet = true;
}

bool OAIDiscountDto::is_promotional_Set() const{
    return m_promotional_isSet;
}

bool OAIDiscountDto::is_promotional_Valid() const{
    return m_promotional_isValid;
}

bool OAIDiscountDto::isProrateDiscount() const {
    return m_prorate_discount;
}
void OAIDiscountDto::setProrateDiscount(const bool &prorate_discount) {
    m_prorate_discount = prorate_discount;
    m_prorate_discount_isSet = true;
}

bool OAIDiscountDto::is_prorate_discount_Set() const{
    return m_prorate_discount_isSet;
}

bool OAIDiscountDto::is_prorate_discount_Valid() const{
    return m_prorate_discount_isValid;
}

QString OAIDiscountDto::getSeries() const {
    return m_series;
}
void OAIDiscountDto::setSeries(const QString &series) {
    m_series = series;
    m_series_isSet = true;
}

bool OAIDiscountDto::is_series_Set() const{
    return m_series_isSet;
}

bool OAIDiscountDto::is_series_Valid() const{
    return m_series_isValid;
}

QList<OAIDiscountWarehouseDto> OAIDiscountDto::getWarehouses() const {
    return m_warehouses;
}
void OAIDiscountDto::setWarehouses(const QList<OAIDiscountWarehouseDto> &warehouses) {
    m_warehouses = warehouses;
    m_warehouses_isSet = true;
}

bool OAIDiscountDto::is_warehouses_Set() const{
    return m_warehouses_isSet;
}

bool OAIDiscountDto::is_warehouses_Valid() const{
    return m_warehouses_isValid;
}

bool OAIDiscountDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_break_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_price_classes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_breakpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_price_classes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_free_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_cntr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_free_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotional_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prorate_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouses.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiscountDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
