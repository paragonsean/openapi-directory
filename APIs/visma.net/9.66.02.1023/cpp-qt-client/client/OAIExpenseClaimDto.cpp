/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpenseClaimDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpenseClaimDto::OAIExpenseClaimDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpenseClaimDto::OAIExpenseClaimDto() {
    this->initializeModel();
}

OAIExpenseClaimDto::~OAIExpenseClaimDto() {}

void OAIExpenseClaimDto::initializeModel() {

    m_approval_date_isSet = false;
    m_approval_date_isValid = false;

    m_approval_status_isSet = false;
    m_approval_status_isValid = false;

    m_approval_status_text_isSet = false;
    m_approval_status_text_isValid = false;

    m_claim_total_isSet = false;
    m_claim_total_isValid = false;

    m_claimed_by_isSet = false;
    m_claimed_by_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_department_isSet = false;
    m_department_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_ref_nbr_isSet = false;
    m_ref_nbr_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_vat_exempt_total_isSet = false;
    m_vat_exempt_total_isValid = false;

    m_vat_taxable_total_isSet = false;
    m_vat_taxable_total_isValid = false;
}

void OAIExpenseClaimDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpenseClaimDto::fromJsonObject(QJsonObject json) {

    m_approval_date_isValid = ::OpenAPI::fromJsonValue(m_approval_date, json[QString("approvalDate")]);
    m_approval_date_isSet = !json[QString("approvalDate")].isNull() && m_approval_date_isValid;

    m_approval_status_isValid = ::OpenAPI::fromJsonValue(m_approval_status, json[QString("approvalStatus")]);
    m_approval_status_isSet = !json[QString("approvalStatus")].isNull() && m_approval_status_isValid;

    m_approval_status_text_isValid = ::OpenAPI::fromJsonValue(m_approval_status_text, json[QString("approvalStatusText")]);
    m_approval_status_text_isSet = !json[QString("approvalStatusText")].isNull() && m_approval_status_text_isValid;

    m_claim_total_isValid = ::OpenAPI::fromJsonValue(m_claim_total, json[QString("claimTotal")]);
    m_claim_total_isSet = !json[QString("claimTotal")].isNull() && m_claim_total_isValid;

    m_claimed_by_isValid = ::OpenAPI::fromJsonValue(m_claimed_by, json[QString("claimedBy")]);
    m_claimed_by_isSet = !json[QString("claimedBy")].isNull() && m_claimed_by_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_department_isValid = ::OpenAPI::fromJsonValue(m_department, json[QString("department")]);
    m_department_isSet = !json[QString("department")].isNull() && m_department_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_ref_nbr_isValid = ::OpenAPI::fromJsonValue(m_ref_nbr, json[QString("refNbr")]);
    m_ref_nbr_isSet = !json[QString("refNbr")].isNull() && m_ref_nbr_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_vat_exempt_total_isValid = ::OpenAPI::fromJsonValue(m_vat_exempt_total, json[QString("vatExemptTotal")]);
    m_vat_exempt_total_isSet = !json[QString("vatExemptTotal")].isNull() && m_vat_exempt_total_isValid;

    m_vat_taxable_total_isValid = ::OpenAPI::fromJsonValue(m_vat_taxable_total, json[QString("vatTaxableTotal")]);
    m_vat_taxable_total_isSet = !json[QString("vatTaxableTotal")].isNull() && m_vat_taxable_total_isValid;
}

QString OAIExpenseClaimDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpenseClaimDto::asJsonObject() const {
    QJsonObject obj;
    if (m_approval_date_isSet) {
        obj.insert(QString("approvalDate"), ::OpenAPI::toJsonValue(m_approval_date));
    }
    if (m_approval_status_isSet) {
        obj.insert(QString("approvalStatus"), ::OpenAPI::toJsonValue(m_approval_status));
    }
    if (m_approval_status_text_isSet) {
        obj.insert(QString("approvalStatusText"), ::OpenAPI::toJsonValue(m_approval_status_text));
    }
    if (m_claim_total_isSet) {
        obj.insert(QString("claimTotal"), ::OpenAPI::toJsonValue(m_claim_total));
    }
    if (m_claimed_by.isSet()) {
        obj.insert(QString("claimedBy"), ::OpenAPI::toJsonValue(m_claimed_by));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_department.isSet()) {
        obj.insert(QString("department"), ::OpenAPI::toJsonValue(m_department));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_ref_nbr_isSet) {
        obj.insert(QString("refNbr"), ::OpenAPI::toJsonValue(m_ref_nbr));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_vat_exempt_total_isSet) {
        obj.insert(QString("vatExemptTotal"), ::OpenAPI::toJsonValue(m_vat_exempt_total));
    }
    if (m_vat_taxable_total_isSet) {
        obj.insert(QString("vatTaxableTotal"), ::OpenAPI::toJsonValue(m_vat_taxable_total));
    }
    return obj;
}

QDateTime OAIExpenseClaimDto::getApprovalDate() const {
    return m_approval_date;
}
void OAIExpenseClaimDto::setApprovalDate(const QDateTime &approval_date) {
    m_approval_date = approval_date;
    m_approval_date_isSet = true;
}

bool OAIExpenseClaimDto::is_approval_date_Set() const{
    return m_approval_date_isSet;
}

bool OAIExpenseClaimDto::is_approval_date_Valid() const{
    return m_approval_date_isValid;
}

QString OAIExpenseClaimDto::getApprovalStatus() const {
    return m_approval_status;
}
void OAIExpenseClaimDto::setApprovalStatus(const QString &approval_status) {
    m_approval_status = approval_status;
    m_approval_status_isSet = true;
}

bool OAIExpenseClaimDto::is_approval_status_Set() const{
    return m_approval_status_isSet;
}

bool OAIExpenseClaimDto::is_approval_status_Valid() const{
    return m_approval_status_isValid;
}

QString OAIExpenseClaimDto::getApprovalStatusText() const {
    return m_approval_status_text;
}
void OAIExpenseClaimDto::setApprovalStatusText(const QString &approval_status_text) {
    m_approval_status_text = approval_status_text;
    m_approval_status_text_isSet = true;
}

bool OAIExpenseClaimDto::is_approval_status_text_Set() const{
    return m_approval_status_text_isSet;
}

bool OAIExpenseClaimDto::is_approval_status_text_Valid() const{
    return m_approval_status_text_isValid;
}

double OAIExpenseClaimDto::getClaimTotal() const {
    return m_claim_total;
}
void OAIExpenseClaimDto::setClaimTotal(const double &claim_total) {
    m_claim_total = claim_total;
    m_claim_total_isSet = true;
}

bool OAIExpenseClaimDto::is_claim_total_Set() const{
    return m_claim_total_isSet;
}

bool OAIExpenseClaimDto::is_claim_total_Valid() const{
    return m_claim_total_isValid;
}

OAIClaimedByInExpenseClaimDto OAIExpenseClaimDto::getClaimedBy() const {
    return m_claimed_by;
}
void OAIExpenseClaimDto::setClaimedBy(const OAIClaimedByInExpenseClaimDto &claimed_by) {
    m_claimed_by = claimed_by;
    m_claimed_by_isSet = true;
}

bool OAIExpenseClaimDto::is_claimed_by_Set() const{
    return m_claimed_by_isSet;
}

bool OAIExpenseClaimDto::is_claimed_by_Valid() const{
    return m_claimed_by_isValid;
}

QString OAIExpenseClaimDto::getCurrency() const {
    return m_currency;
}
void OAIExpenseClaimDto::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIExpenseClaimDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIExpenseClaimDto::is_currency_Valid() const{
    return m_currency_isValid;
}

OAICustomerInExpenseClaimDto OAIExpenseClaimDto::getCustomer() const {
    return m_customer;
}
void OAIExpenseClaimDto::setCustomer(const OAICustomerInExpenseClaimDto &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIExpenseClaimDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIExpenseClaimDto::is_customer_Valid() const{
    return m_customer_isValid;
}

QDateTime OAIExpenseClaimDto::getDate() const {
    return m_date;
}
void OAIExpenseClaimDto::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIExpenseClaimDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAIExpenseClaimDto::is_date_Valid() const{
    return m_date_isValid;
}

OAIDepartmentInExpenseClaimDto OAIExpenseClaimDto::getDepartment() const {
    return m_department;
}
void OAIExpenseClaimDto::setDepartment(const OAIDepartmentInExpenseClaimDto &department) {
    m_department = department;
    m_department_isSet = true;
}

bool OAIExpenseClaimDto::is_department_Set() const{
    return m_department_isSet;
}

bool OAIExpenseClaimDto::is_department_Valid() const{
    return m_department_isValid;
}

QString OAIExpenseClaimDto::getDescription() const {
    return m_description;
}
void OAIExpenseClaimDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIExpenseClaimDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIExpenseClaimDto::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIExpenseClaimDetailDto> OAIExpenseClaimDto::getDetails() const {
    return m_details;
}
void OAIExpenseClaimDto::setDetails(const QList<OAIExpenseClaimDetailDto> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIExpenseClaimDto::is_details_Set() const{
    return m_details_isSet;
}

bool OAIExpenseClaimDto::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIExpenseClaimDto::getErrorInfo() const {
    return m_error_info;
}
void OAIExpenseClaimDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIExpenseClaimDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIExpenseClaimDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

QDateTime OAIExpenseClaimDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIExpenseClaimDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIExpenseClaimDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIExpenseClaimDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAILocationInExpenseClaimDto OAIExpenseClaimDto::getLocation() const {
    return m_location;
}
void OAIExpenseClaimDto::setLocation(const OAILocationInExpenseClaimDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIExpenseClaimDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIExpenseClaimDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIMetadataDto OAIExpenseClaimDto::getMetadata() const {
    return m_metadata;
}
void OAIExpenseClaimDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIExpenseClaimDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIExpenseClaimDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIExpenseClaimDto::getRefNbr() const {
    return m_ref_nbr;
}
void OAIExpenseClaimDto::setRefNbr(const QString &ref_nbr) {
    m_ref_nbr = ref_nbr;
    m_ref_nbr_isSet = true;
}

bool OAIExpenseClaimDto::is_ref_nbr_Set() const{
    return m_ref_nbr_isSet;
}

bool OAIExpenseClaimDto::is_ref_nbr_Valid() const{
    return m_ref_nbr_isValid;
}

QString OAIExpenseClaimDto::getStatus() const {
    return m_status;
}
void OAIExpenseClaimDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIExpenseClaimDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIExpenseClaimDto::is_status_Valid() const{
    return m_status_isValid;
}

double OAIExpenseClaimDto::getVatExemptTotal() const {
    return m_vat_exempt_total;
}
void OAIExpenseClaimDto::setVatExemptTotal(const double &vat_exempt_total) {
    m_vat_exempt_total = vat_exempt_total;
    m_vat_exempt_total_isSet = true;
}

bool OAIExpenseClaimDto::is_vat_exempt_total_Set() const{
    return m_vat_exempt_total_isSet;
}

bool OAIExpenseClaimDto::is_vat_exempt_total_Valid() const{
    return m_vat_exempt_total_isValid;
}

double OAIExpenseClaimDto::getVatTaxableTotal() const {
    return m_vat_taxable_total;
}
void OAIExpenseClaimDto::setVatTaxableTotal(const double &vat_taxable_total) {
    m_vat_taxable_total = vat_taxable_total;
    m_vat_taxable_total_isSet = true;
}

bool OAIExpenseClaimDto::is_vat_taxable_total_Set() const{
    return m_vat_taxable_total_isSet;
}

bool OAIExpenseClaimDto::is_vat_taxable_total_Valid() const{
    return m_vat_taxable_total_isValid;
}

bool OAIExpenseClaimDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approval_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval_status_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_claim_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_claimed_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_department.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_exempt_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_taxable_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpenseClaimDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
