/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryTransferLineDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryTransferLineDto::OAIInventoryTransferLineDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryTransferLineDto::OAIInventoryTransferLineDto() {
    this->initializeModel();
}

OAIInventoryTransferLineDto::~OAIInventoryTransferLineDto() {}

void OAIInventoryTransferLineDto::initializeModel() {

    m_allocations_isSet = false;
    m_allocations_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_inventory_item_isSet = false;
    m_inventory_item_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_lot_serial_number_isSet = false;
    m_lot_serial_number_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;

    m_to_location_isSet = false;
    m_to_location_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;
}

void OAIInventoryTransferLineDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryTransferLineDto::fromJsonObject(QJsonObject json) {

    m_allocations_isValid = ::OpenAPI::fromJsonValue(m_allocations, json[QString("allocations")]);
    m_allocations_isSet = !json[QString("allocations")].isNull() && m_allocations_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_inventory_item_isValid = ::OpenAPI::fromJsonValue(m_inventory_item, json[QString("inventoryItem")]);
    m_inventory_item_isSet = !json[QString("inventoryItem")].isNull() && m_inventory_item_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("lineNumber")]);
    m_line_number_isSet = !json[QString("lineNumber")].isNull() && m_line_number_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_lot_serial_number_isValid = ::OpenAPI::fromJsonValue(m_lot_serial_number, json[QString("lotSerialNumber")]);
    m_lot_serial_number_isSet = !json[QString("lotSerialNumber")].isNull() && m_lot_serial_number_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("reasonCode")]);
    m_reason_code_isSet = !json[QString("reasonCode")].isNull() && m_reason_code_isValid;

    m_to_location_isValid = ::OpenAPI::fromJsonValue(m_to_location, json[QString("toLocation")]);
    m_to_location_isSet = !json[QString("toLocation")].isNull() && m_to_location_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;
}

QString OAIInventoryTransferLineDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryTransferLineDto::asJsonObject() const {
    QJsonObject obj;
    if (m_allocations.size() > 0) {
        obj.insert(QString("allocations"), ::OpenAPI::toJsonValue(m_allocations));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_inventory_item.isSet()) {
        obj.insert(QString("inventoryItem"), ::OpenAPI::toJsonValue(m_inventory_item));
    }
    if (m_line_number_isSet) {
        obj.insert(QString("lineNumber"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_lot_serial_number_isSet) {
        obj.insert(QString("lotSerialNumber"), ::OpenAPI::toJsonValue(m_lot_serial_number));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_reason_code.isSet()) {
        obj.insert(QString("reasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    if (m_to_location.isSet()) {
        obj.insert(QString("toLocation"), ::OpenAPI::toJsonValue(m_to_location));
    }
    if (m_uom_isSet) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    return obj;
}

QList<OAIAllocationsBasicDto> OAIInventoryTransferLineDto::getAllocations() const {
    return m_allocations;
}
void OAIInventoryTransferLineDto::setAllocations(const QList<OAIAllocationsBasicDto> &allocations) {
    m_allocations = allocations;
    m_allocations_isSet = true;
}

bool OAIInventoryTransferLineDto::is_allocations_Set() const{
    return m_allocations_isSet;
}

bool OAIInventoryTransferLineDto::is_allocations_Valid() const{
    return m_allocations_isValid;
}

QList<OAIAttachmentDto> OAIInventoryTransferLineDto::getAttachments() const {
    return m_attachments;
}
void OAIInventoryTransferLineDto::setAttachments(const QList<OAIAttachmentDto> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIInventoryTransferLineDto::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIInventoryTransferLineDto::is_attachments_Valid() const{
    return m_attachments_isValid;
}

OAIBranchNumberDto OAIInventoryTransferLineDto::getBranchNumber() const {
    return m_branch_number;
}
void OAIInventoryTransferLineDto::setBranchNumber(const OAIBranchNumberDto &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAIInventoryTransferLineDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAIInventoryTransferLineDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

QString OAIInventoryTransferLineDto::getDescription() const {
    return m_description;
}
void OAIInventoryTransferLineDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInventoryTransferLineDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInventoryTransferLineDto::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIInventoryTransferLineDto::getExpirationDate() const {
    return m_expiration_date;
}
void OAIInventoryTransferLineDto::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIInventoryTransferLineDto::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIInventoryTransferLineDto::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

OAIInventoryItemInInventoryTransferLineDto OAIInventoryTransferLineDto::getInventoryItem() const {
    return m_inventory_item;
}
void OAIInventoryTransferLineDto::setInventoryItem(const OAIInventoryItemInInventoryTransferLineDto &inventory_item) {
    m_inventory_item = inventory_item;
    m_inventory_item_isSet = true;
}

bool OAIInventoryTransferLineDto::is_inventory_item_Set() const{
    return m_inventory_item_isSet;
}

bool OAIInventoryTransferLineDto::is_inventory_item_Valid() const{
    return m_inventory_item_isValid;
}

qint32 OAIInventoryTransferLineDto::getLineNumber() const {
    return m_line_number;
}
void OAIInventoryTransferLineDto::setLineNumber(const qint32 &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAIInventoryTransferLineDto::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAIInventoryTransferLineDto::is_line_number_Valid() const{
    return m_line_number_isValid;
}

OAILocationInInventoryTransferLineDto OAIInventoryTransferLineDto::getLocation() const {
    return m_location;
}
void OAIInventoryTransferLineDto::setLocation(const OAILocationInInventoryTransferLineDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIInventoryTransferLineDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIInventoryTransferLineDto::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIInventoryTransferLineDto::getLotSerialNumber() const {
    return m_lot_serial_number;
}
void OAIInventoryTransferLineDto::setLotSerialNumber(const QString &lot_serial_number) {
    m_lot_serial_number = lot_serial_number;
    m_lot_serial_number_isSet = true;
}

bool OAIInventoryTransferLineDto::is_lot_serial_number_Set() const{
    return m_lot_serial_number_isSet;
}

bool OAIInventoryTransferLineDto::is_lot_serial_number_Valid() const{
    return m_lot_serial_number_isValid;
}

double OAIInventoryTransferLineDto::getQuantity() const {
    return m_quantity;
}
void OAIInventoryTransferLineDto::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIInventoryTransferLineDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIInventoryTransferLineDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIReasonCodeInInventoryTransferLineDto OAIInventoryTransferLineDto::getReasonCode() const {
    return m_reason_code;
}
void OAIInventoryTransferLineDto::setReasonCode(const OAIReasonCodeInInventoryTransferLineDto &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAIInventoryTransferLineDto::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAIInventoryTransferLineDto::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

OAILocationDescriptionDto OAIInventoryTransferLineDto::getToLocation() const {
    return m_to_location;
}
void OAIInventoryTransferLineDto::setToLocation(const OAILocationDescriptionDto &to_location) {
    m_to_location = to_location;
    m_to_location_isSet = true;
}

bool OAIInventoryTransferLineDto::is_to_location_Set() const{
    return m_to_location_isSet;
}

bool OAIInventoryTransferLineDto::is_to_location_Valid() const{
    return m_to_location_isValid;
}

QString OAIInventoryTransferLineDto::getUom() const {
    return m_uom;
}
void OAIInventoryTransferLineDto::setUom(const QString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAIInventoryTransferLineDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAIInventoryTransferLineDto::is_uom_Valid() const{
    return m_uom_isValid;
}

bool OAIInventoryTransferLineDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryTransferLineDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
