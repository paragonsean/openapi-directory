/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountQueryParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountQueryParameters::OAIAccountQueryParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountQueryParameters::OAIAccountQueryParameters() {
    this->initializeModel();
}

OAIAccountQueryParameters::~OAIAccountQueryParameters() {}

void OAIAccountQueryParameters::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_analysis_code_isSet = false;
    m_analysis_code_isValid = false;

    m_external_code1_isSet = false;
    m_external_code1_isValid = false;

    m_external_code2_isSet = false;
    m_external_code2_isValid = false;

    m_greater_than_value_isSet = false;
    m_greater_than_value_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_last_modified_date_time_condition_isSet = false;
    m_last_modified_date_time_condition_isValid = false;

    m_number_to_read_isSet = false;
    m_number_to_read_isValid = false;

    m_public_code_isSet = false;
    m_public_code_isValid = false;

    m_skip_records_isSet = false;
    m_skip_records_isValid = false;
}

void OAIAccountQueryParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountQueryParameters::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_analysis_code_isValid = ::OpenAPI::fromJsonValue(m_analysis_code, json[QString("analysisCode")]);
    m_analysis_code_isSet = !json[QString("analysisCode")].isNull() && m_analysis_code_isValid;

    m_external_code1_isValid = ::OpenAPI::fromJsonValue(m_external_code1, json[QString("externalCode1")]);
    m_external_code1_isSet = !json[QString("externalCode1")].isNull() && m_external_code1_isValid;

    m_external_code2_isValid = ::OpenAPI::fromJsonValue(m_external_code2, json[QString("externalCode2")]);
    m_external_code2_isSet = !json[QString("externalCode2")].isNull() && m_external_code2_isValid;

    m_greater_than_value_isValid = ::OpenAPI::fromJsonValue(m_greater_than_value, json[QString("greaterThanValue")]);
    m_greater_than_value_isSet = !json[QString("greaterThanValue")].isNull() && m_greater_than_value_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_last_modified_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time_condition, json[QString("lastModifiedDateTimeCondition")]);
    m_last_modified_date_time_condition_isSet = !json[QString("lastModifiedDateTimeCondition")].isNull() && m_last_modified_date_time_condition_isValid;

    m_number_to_read_isValid = ::OpenAPI::fromJsonValue(m_number_to_read, json[QString("numberToRead")]);
    m_number_to_read_isSet = !json[QString("numberToRead")].isNull() && m_number_to_read_isValid;

    m_public_code_isValid = ::OpenAPI::fromJsonValue(m_public_code, json[QString("publicCode")]);
    m_public_code_isSet = !json[QString("publicCode")].isNull() && m_public_code_isValid;

    m_skip_records_isValid = ::OpenAPI::fromJsonValue(m_skip_records, json[QString("skipRecords")]);
    m_skip_records_isSet = !json[QString("skipRecords")].isNull() && m_skip_records_isValid;
}

QString OAIAccountQueryParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountQueryParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_analysis_code_isSet) {
        obj.insert(QString("analysisCode"), ::OpenAPI::toJsonValue(m_analysis_code));
    }
    if (m_external_code1_isSet) {
        obj.insert(QString("externalCode1"), ::OpenAPI::toJsonValue(m_external_code1));
    }
    if (m_external_code2_isSet) {
        obj.insert(QString("externalCode2"), ::OpenAPI::toJsonValue(m_external_code2));
    }
    if (m_greater_than_value_isSet) {
        obj.insert(QString("greaterThanValue"), ::OpenAPI::toJsonValue(m_greater_than_value));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_last_modified_date_time_condition_isSet) {
        obj.insert(QString("lastModifiedDateTimeCondition"), ::OpenAPI::toJsonValue(m_last_modified_date_time_condition));
    }
    if (m_number_to_read_isSet) {
        obj.insert(QString("numberToRead"), ::OpenAPI::toJsonValue(m_number_to_read));
    }
    if (m_public_code_isSet) {
        obj.insert(QString("publicCode"), ::OpenAPI::toJsonValue(m_public_code));
    }
    if (m_skip_records_isSet) {
        obj.insert(QString("skipRecords"), ::OpenAPI::toJsonValue(m_skip_records));
    }
    return obj;
}

bool OAIAccountQueryParameters::isActive() const {
    return m_active;
}
void OAIAccountQueryParameters::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIAccountQueryParameters::is_active_Set() const{
    return m_active_isSet;
}

bool OAIAccountQueryParameters::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIAccountQueryParameters::getAnalysisCode() const {
    return m_analysis_code;
}
void OAIAccountQueryParameters::setAnalysisCode(const QString &analysis_code) {
    m_analysis_code = analysis_code;
    m_analysis_code_isSet = true;
}

bool OAIAccountQueryParameters::is_analysis_code_Set() const{
    return m_analysis_code_isSet;
}

bool OAIAccountQueryParameters::is_analysis_code_Valid() const{
    return m_analysis_code_isValid;
}

QString OAIAccountQueryParameters::getExternalCode1() const {
    return m_external_code1;
}
void OAIAccountQueryParameters::setExternalCode1(const QString &external_code1) {
    m_external_code1 = external_code1;
    m_external_code1_isSet = true;
}

bool OAIAccountQueryParameters::is_external_code1_Set() const{
    return m_external_code1_isSet;
}

bool OAIAccountQueryParameters::is_external_code1_Valid() const{
    return m_external_code1_isValid;
}

QString OAIAccountQueryParameters::getExternalCode2() const {
    return m_external_code2;
}
void OAIAccountQueryParameters::setExternalCode2(const QString &external_code2) {
    m_external_code2 = external_code2;
    m_external_code2_isSet = true;
}

bool OAIAccountQueryParameters::is_external_code2_Set() const{
    return m_external_code2_isSet;
}

bool OAIAccountQueryParameters::is_external_code2_Valid() const{
    return m_external_code2_isValid;
}

QString OAIAccountQueryParameters::getGreaterThanValue() const {
    return m_greater_than_value;
}
void OAIAccountQueryParameters::setGreaterThanValue(const QString &greater_than_value) {
    m_greater_than_value = greater_than_value;
    m_greater_than_value_isSet = true;
}

bool OAIAccountQueryParameters::is_greater_than_value_Set() const{
    return m_greater_than_value_isSet;
}

bool OAIAccountQueryParameters::is_greater_than_value_Valid() const{
    return m_greater_than_value_isValid;
}

QString OAIAccountQueryParameters::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIAccountQueryParameters::setLastModifiedDateTime(const QString &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIAccountQueryParameters::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIAccountQueryParameters::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QString OAIAccountQueryParameters::getLastModifiedDateTimeCondition() const {
    return m_last_modified_date_time_condition;
}
void OAIAccountQueryParameters::setLastModifiedDateTimeCondition(const QString &last_modified_date_time_condition) {
    m_last_modified_date_time_condition = last_modified_date_time_condition;
    m_last_modified_date_time_condition_isSet = true;
}

bool OAIAccountQueryParameters::is_last_modified_date_time_condition_Set() const{
    return m_last_modified_date_time_condition_isSet;
}

bool OAIAccountQueryParameters::is_last_modified_date_time_condition_Valid() const{
    return m_last_modified_date_time_condition_isValid;
}

qint32 OAIAccountQueryParameters::getNumberToRead() const {
    return m_number_to_read;
}
void OAIAccountQueryParameters::setNumberToRead(const qint32 &number_to_read) {
    m_number_to_read = number_to_read;
    m_number_to_read_isSet = true;
}

bool OAIAccountQueryParameters::is_number_to_read_Set() const{
    return m_number_to_read_isSet;
}

bool OAIAccountQueryParameters::is_number_to_read_Valid() const{
    return m_number_to_read_isValid;
}

qint32 OAIAccountQueryParameters::getPublicCode() const {
    return m_public_code;
}
void OAIAccountQueryParameters::setPublicCode(const qint32 &public_code) {
    m_public_code = public_code;
    m_public_code_isSet = true;
}

bool OAIAccountQueryParameters::is_public_code_Set() const{
    return m_public_code_isSet;
}

bool OAIAccountQueryParameters::is_public_code_Valid() const{
    return m_public_code_isValid;
}

qint32 OAIAccountQueryParameters::getSkipRecords() const {
    return m_skip_records;
}
void OAIAccountQueryParameters::setSkipRecords(const qint32 &skip_records) {
    m_skip_records = skip_records;
    m_skip_records_isSet = true;
}

bool OAIAccountQueryParameters::is_skip_records_Set() const{
    return m_skip_records_isSet;
}

bool OAIAccountQueryParameters::is_skip_records_Valid() const{
    return m_skip_records_isValid;
}

bool OAIAccountQueryParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_code1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_code2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_greater_than_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_to_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_records_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountQueryParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
