/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventorySummaryDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventorySummaryDto::OAIInventorySummaryDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventorySummaryDto::OAIInventorySummaryDto() {
    this->initializeModel();
}

OAIInventorySummaryDto::~OAIInventorySummaryDto() {}

void OAIInventorySummaryDto::initializeModel() {

    m_available_isSet = false;
    m_available_isValid = false;

    m_available_for_shipment_isSet = false;
    m_available_for_shipment_isValid = false;

    m_base_unit_isSet = false;
    m_base_unit_isValid = false;

    m_drop_ship_for_so_isSet = false;
    m_drop_ship_for_so_isValid = false;

    m_drop_ship_for_so_prepared_isSet = false;
    m_drop_ship_for_so_prepared_isValid = false;

    m_drop_ship_for_so_receipts_isSet = false;
    m_drop_ship_for_so_receipts_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_estimated_total_cost_isSet = false;
    m_estimated_total_cost_isValid = false;

    m_estimated_unit_cost_isSet = false;
    m_estimated_unit_cost_isValid = false;

    m_expired_isSet = false;
    m_expired_isValid = false;

    m_in_assembly_demand_isSet = false;
    m_in_assembly_demand_isValid = false;

    m_in_assembly_supply_isSet = false;
    m_in_assembly_supply_isValid = false;

    m_in_issues_isSet = false;
    m_in_issues_isValid = false;

    m_in_receipts_isSet = false;
    m_in_receipts_isValid = false;

    m_in_transit_isSet = false;
    m_in_transit_isValid = false;

    m_inventory_isSet = false;
    m_inventory_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_not_available_isSet = false;
    m_not_available_isValid = false;

    m_on_hand_isSet = false;
    m_on_hand_isValid = false;

    m_po_receipts_isSet = false;
    m_po_receipts_isValid = false;

    m_purchase_for_so_isSet = false;
    m_purchase_for_so_isValid = false;

    m_purchase_for_so_prepared_isSet = false;
    m_purchase_for_so_prepared_isValid = false;

    m_purchase_for_so_receipts_isSet = false;
    m_purchase_for_so_receipts_isValid = false;

    m_purchase_orders_isSet = false;
    m_purchase_orders_isValid = false;

    m_purchase_prepared_isSet = false;
    m_purchase_prepared_isValid = false;

    m_so_allocated_isSet = false;
    m_so_allocated_isValid = false;

    m_so_back_ordered_isSet = false;
    m_so_back_ordered_isValid = false;

    m_so_booked_isSet = false;
    m_so_booked_isValid = false;

    m_so_shipped_isSet = false;
    m_so_shipped_isValid = false;

    m_so_to_drop_ship_isSet = false;
    m_so_to_drop_ship_isValid = false;

    m_so_to_purchase_isSet = false;
    m_so_to_purchase_isValid = false;

    m_warehouse_isSet = false;
    m_warehouse_isValid = false;
}

void OAIInventorySummaryDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventorySummaryDto::fromJsonObject(QJsonObject json) {

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_available_for_shipment_isValid = ::OpenAPI::fromJsonValue(m_available_for_shipment, json[QString("availableForShipment")]);
    m_available_for_shipment_isSet = !json[QString("availableForShipment")].isNull() && m_available_for_shipment_isValid;

    m_base_unit_isValid = ::OpenAPI::fromJsonValue(m_base_unit, json[QString("baseUnit")]);
    m_base_unit_isSet = !json[QString("baseUnit")].isNull() && m_base_unit_isValid;

    m_drop_ship_for_so_isValid = ::OpenAPI::fromJsonValue(m_drop_ship_for_so, json[QString("dropShipForSO")]);
    m_drop_ship_for_so_isSet = !json[QString("dropShipForSO")].isNull() && m_drop_ship_for_so_isValid;

    m_drop_ship_for_so_prepared_isValid = ::OpenAPI::fromJsonValue(m_drop_ship_for_so_prepared, json[QString("dropShipForSOPrepared")]);
    m_drop_ship_for_so_prepared_isSet = !json[QString("dropShipForSOPrepared")].isNull() && m_drop_ship_for_so_prepared_isValid;

    m_drop_ship_for_so_receipts_isValid = ::OpenAPI::fromJsonValue(m_drop_ship_for_so_receipts, json[QString("dropShipForSOReceipts")]);
    m_drop_ship_for_so_receipts_isSet = !json[QString("dropShipForSOReceipts")].isNull() && m_drop_ship_for_so_receipts_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_estimated_total_cost_isValid = ::OpenAPI::fromJsonValue(m_estimated_total_cost, json[QString("estimatedTotalCost")]);
    m_estimated_total_cost_isSet = !json[QString("estimatedTotalCost")].isNull() && m_estimated_total_cost_isValid;

    m_estimated_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_estimated_unit_cost, json[QString("estimatedUnitCost")]);
    m_estimated_unit_cost_isSet = !json[QString("estimatedUnitCost")].isNull() && m_estimated_unit_cost_isValid;

    m_expired_isValid = ::OpenAPI::fromJsonValue(m_expired, json[QString("expired")]);
    m_expired_isSet = !json[QString("expired")].isNull() && m_expired_isValid;

    m_in_assembly_demand_isValid = ::OpenAPI::fromJsonValue(m_in_assembly_demand, json[QString("inAssemblyDemand")]);
    m_in_assembly_demand_isSet = !json[QString("inAssemblyDemand")].isNull() && m_in_assembly_demand_isValid;

    m_in_assembly_supply_isValid = ::OpenAPI::fromJsonValue(m_in_assembly_supply, json[QString("inAssemblySupply")]);
    m_in_assembly_supply_isSet = !json[QString("inAssemblySupply")].isNull() && m_in_assembly_supply_isValid;

    m_in_issues_isValid = ::OpenAPI::fromJsonValue(m_in_issues, json[QString("inIssues")]);
    m_in_issues_isSet = !json[QString("inIssues")].isNull() && m_in_issues_isValid;

    m_in_receipts_isValid = ::OpenAPI::fromJsonValue(m_in_receipts, json[QString("inReceipts")]);
    m_in_receipts_isSet = !json[QString("inReceipts")].isNull() && m_in_receipts_isValid;

    m_in_transit_isValid = ::OpenAPI::fromJsonValue(m_in_transit, json[QString("inTransit")]);
    m_in_transit_isSet = !json[QString("inTransit")].isNull() && m_in_transit_isValid;

    m_inventory_isValid = ::OpenAPI::fromJsonValue(m_inventory, json[QString("inventory")]);
    m_inventory_isSet = !json[QString("inventory")].isNull() && m_inventory_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_not_available_isValid = ::OpenAPI::fromJsonValue(m_not_available, json[QString("notAvailable")]);
    m_not_available_isSet = !json[QString("notAvailable")].isNull() && m_not_available_isValid;

    m_on_hand_isValid = ::OpenAPI::fromJsonValue(m_on_hand, json[QString("onHand")]);
    m_on_hand_isSet = !json[QString("onHand")].isNull() && m_on_hand_isValid;

    m_po_receipts_isValid = ::OpenAPI::fromJsonValue(m_po_receipts, json[QString("poReceipts")]);
    m_po_receipts_isSet = !json[QString("poReceipts")].isNull() && m_po_receipts_isValid;

    m_purchase_for_so_isValid = ::OpenAPI::fromJsonValue(m_purchase_for_so, json[QString("purchaseForSO")]);
    m_purchase_for_so_isSet = !json[QString("purchaseForSO")].isNull() && m_purchase_for_so_isValid;

    m_purchase_for_so_prepared_isValid = ::OpenAPI::fromJsonValue(m_purchase_for_so_prepared, json[QString("purchaseForSOPrepared")]);
    m_purchase_for_so_prepared_isSet = !json[QString("purchaseForSOPrepared")].isNull() && m_purchase_for_so_prepared_isValid;

    m_purchase_for_so_receipts_isValid = ::OpenAPI::fromJsonValue(m_purchase_for_so_receipts, json[QString("purchaseForSOReceipts")]);
    m_purchase_for_so_receipts_isSet = !json[QString("purchaseForSOReceipts")].isNull() && m_purchase_for_so_receipts_isValid;

    m_purchase_orders_isValid = ::OpenAPI::fromJsonValue(m_purchase_orders, json[QString("purchaseOrders")]);
    m_purchase_orders_isSet = !json[QString("purchaseOrders")].isNull() && m_purchase_orders_isValid;

    m_purchase_prepared_isValid = ::OpenAPI::fromJsonValue(m_purchase_prepared, json[QString("purchasePrepared")]);
    m_purchase_prepared_isSet = !json[QString("purchasePrepared")].isNull() && m_purchase_prepared_isValid;

    m_so_allocated_isValid = ::OpenAPI::fromJsonValue(m_so_allocated, json[QString("soAllocated")]);
    m_so_allocated_isSet = !json[QString("soAllocated")].isNull() && m_so_allocated_isValid;

    m_so_back_ordered_isValid = ::OpenAPI::fromJsonValue(m_so_back_ordered, json[QString("soBackOrdered")]);
    m_so_back_ordered_isSet = !json[QString("soBackOrdered")].isNull() && m_so_back_ordered_isValid;

    m_so_booked_isValid = ::OpenAPI::fromJsonValue(m_so_booked, json[QString("soBooked")]);
    m_so_booked_isSet = !json[QString("soBooked")].isNull() && m_so_booked_isValid;

    m_so_shipped_isValid = ::OpenAPI::fromJsonValue(m_so_shipped, json[QString("soShipped")]);
    m_so_shipped_isSet = !json[QString("soShipped")].isNull() && m_so_shipped_isValid;

    m_so_to_drop_ship_isValid = ::OpenAPI::fromJsonValue(m_so_to_drop_ship, json[QString("soToDropShip")]);
    m_so_to_drop_ship_isSet = !json[QString("soToDropShip")].isNull() && m_so_to_drop_ship_isValid;

    m_so_to_purchase_isValid = ::OpenAPI::fromJsonValue(m_so_to_purchase, json[QString("soToPurchase")]);
    m_so_to_purchase_isSet = !json[QString("soToPurchase")].isNull() && m_so_to_purchase_isValid;

    m_warehouse_isValid = ::OpenAPI::fromJsonValue(m_warehouse, json[QString("warehouse")]);
    m_warehouse_isSet = !json[QString("warehouse")].isNull() && m_warehouse_isValid;
}

QString OAIInventorySummaryDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventorySummaryDto::asJsonObject() const {
    QJsonObject obj;
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_available_for_shipment_isSet) {
        obj.insert(QString("availableForShipment"), ::OpenAPI::toJsonValue(m_available_for_shipment));
    }
    if (m_base_unit_isSet) {
        obj.insert(QString("baseUnit"), ::OpenAPI::toJsonValue(m_base_unit));
    }
    if (m_drop_ship_for_so_isSet) {
        obj.insert(QString("dropShipForSO"), ::OpenAPI::toJsonValue(m_drop_ship_for_so));
    }
    if (m_drop_ship_for_so_prepared_isSet) {
        obj.insert(QString("dropShipForSOPrepared"), ::OpenAPI::toJsonValue(m_drop_ship_for_so_prepared));
    }
    if (m_drop_ship_for_so_receipts_isSet) {
        obj.insert(QString("dropShipForSOReceipts"), ::OpenAPI::toJsonValue(m_drop_ship_for_so_receipts));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_estimated_total_cost_isSet) {
        obj.insert(QString("estimatedTotalCost"), ::OpenAPI::toJsonValue(m_estimated_total_cost));
    }
    if (m_estimated_unit_cost_isSet) {
        obj.insert(QString("estimatedUnitCost"), ::OpenAPI::toJsonValue(m_estimated_unit_cost));
    }
    if (m_expired_isSet) {
        obj.insert(QString("expired"), ::OpenAPI::toJsonValue(m_expired));
    }
    if (m_in_assembly_demand_isSet) {
        obj.insert(QString("inAssemblyDemand"), ::OpenAPI::toJsonValue(m_in_assembly_demand));
    }
    if (m_in_assembly_supply_isSet) {
        obj.insert(QString("inAssemblySupply"), ::OpenAPI::toJsonValue(m_in_assembly_supply));
    }
    if (m_in_issues_isSet) {
        obj.insert(QString("inIssues"), ::OpenAPI::toJsonValue(m_in_issues));
    }
    if (m_in_receipts_isSet) {
        obj.insert(QString("inReceipts"), ::OpenAPI::toJsonValue(m_in_receipts));
    }
    if (m_in_transit_isSet) {
        obj.insert(QString("inTransit"), ::OpenAPI::toJsonValue(m_in_transit));
    }
    if (m_inventory.isSet()) {
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(m_inventory));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_not_available_isSet) {
        obj.insert(QString("notAvailable"), ::OpenAPI::toJsonValue(m_not_available));
    }
    if (m_on_hand_isSet) {
        obj.insert(QString("onHand"), ::OpenAPI::toJsonValue(m_on_hand));
    }
    if (m_po_receipts_isSet) {
        obj.insert(QString("poReceipts"), ::OpenAPI::toJsonValue(m_po_receipts));
    }
    if (m_purchase_for_so_isSet) {
        obj.insert(QString("purchaseForSO"), ::OpenAPI::toJsonValue(m_purchase_for_so));
    }
    if (m_purchase_for_so_prepared_isSet) {
        obj.insert(QString("purchaseForSOPrepared"), ::OpenAPI::toJsonValue(m_purchase_for_so_prepared));
    }
    if (m_purchase_for_so_receipts_isSet) {
        obj.insert(QString("purchaseForSOReceipts"), ::OpenAPI::toJsonValue(m_purchase_for_so_receipts));
    }
    if (m_purchase_orders_isSet) {
        obj.insert(QString("purchaseOrders"), ::OpenAPI::toJsonValue(m_purchase_orders));
    }
    if (m_purchase_prepared_isSet) {
        obj.insert(QString("purchasePrepared"), ::OpenAPI::toJsonValue(m_purchase_prepared));
    }
    if (m_so_allocated_isSet) {
        obj.insert(QString("soAllocated"), ::OpenAPI::toJsonValue(m_so_allocated));
    }
    if (m_so_back_ordered_isSet) {
        obj.insert(QString("soBackOrdered"), ::OpenAPI::toJsonValue(m_so_back_ordered));
    }
    if (m_so_booked_isSet) {
        obj.insert(QString("soBooked"), ::OpenAPI::toJsonValue(m_so_booked));
    }
    if (m_so_shipped_isSet) {
        obj.insert(QString("soShipped"), ::OpenAPI::toJsonValue(m_so_shipped));
    }
    if (m_so_to_drop_ship_isSet) {
        obj.insert(QString("soToDropShip"), ::OpenAPI::toJsonValue(m_so_to_drop_ship));
    }
    if (m_so_to_purchase_isSet) {
        obj.insert(QString("soToPurchase"), ::OpenAPI::toJsonValue(m_so_to_purchase));
    }
    if (m_warehouse.isSet()) {
        obj.insert(QString("warehouse"), ::OpenAPI::toJsonValue(m_warehouse));
    }
    return obj;
}

double OAIInventorySummaryDto::getAvailable() const {
    return m_available;
}
void OAIInventorySummaryDto::setAvailable(const double &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAIInventorySummaryDto::is_available_Set() const{
    return m_available_isSet;
}

bool OAIInventorySummaryDto::is_available_Valid() const{
    return m_available_isValid;
}

double OAIInventorySummaryDto::getAvailableForShipment() const {
    return m_available_for_shipment;
}
void OAIInventorySummaryDto::setAvailableForShipment(const double &available_for_shipment) {
    m_available_for_shipment = available_for_shipment;
    m_available_for_shipment_isSet = true;
}

bool OAIInventorySummaryDto::is_available_for_shipment_Set() const{
    return m_available_for_shipment_isSet;
}

bool OAIInventorySummaryDto::is_available_for_shipment_Valid() const{
    return m_available_for_shipment_isValid;
}

QString OAIInventorySummaryDto::getBaseUnit() const {
    return m_base_unit;
}
void OAIInventorySummaryDto::setBaseUnit(const QString &base_unit) {
    m_base_unit = base_unit;
    m_base_unit_isSet = true;
}

bool OAIInventorySummaryDto::is_base_unit_Set() const{
    return m_base_unit_isSet;
}

bool OAIInventorySummaryDto::is_base_unit_Valid() const{
    return m_base_unit_isValid;
}

double OAIInventorySummaryDto::getDropShipForSo() const {
    return m_drop_ship_for_so;
}
void OAIInventorySummaryDto::setDropShipForSo(const double &drop_ship_for_so) {
    m_drop_ship_for_so = drop_ship_for_so;
    m_drop_ship_for_so_isSet = true;
}

bool OAIInventorySummaryDto::is_drop_ship_for_so_Set() const{
    return m_drop_ship_for_so_isSet;
}

bool OAIInventorySummaryDto::is_drop_ship_for_so_Valid() const{
    return m_drop_ship_for_so_isValid;
}

double OAIInventorySummaryDto::getDropShipForSoPrepared() const {
    return m_drop_ship_for_so_prepared;
}
void OAIInventorySummaryDto::setDropShipForSoPrepared(const double &drop_ship_for_so_prepared) {
    m_drop_ship_for_so_prepared = drop_ship_for_so_prepared;
    m_drop_ship_for_so_prepared_isSet = true;
}

bool OAIInventorySummaryDto::is_drop_ship_for_so_prepared_Set() const{
    return m_drop_ship_for_so_prepared_isSet;
}

bool OAIInventorySummaryDto::is_drop_ship_for_so_prepared_Valid() const{
    return m_drop_ship_for_so_prepared_isValid;
}

double OAIInventorySummaryDto::getDropShipForSoReceipts() const {
    return m_drop_ship_for_so_receipts;
}
void OAIInventorySummaryDto::setDropShipForSoReceipts(const double &drop_ship_for_so_receipts) {
    m_drop_ship_for_so_receipts = drop_ship_for_so_receipts;
    m_drop_ship_for_so_receipts_isSet = true;
}

bool OAIInventorySummaryDto::is_drop_ship_for_so_receipts_Set() const{
    return m_drop_ship_for_so_receipts_isSet;
}

bool OAIInventorySummaryDto::is_drop_ship_for_so_receipts_Valid() const{
    return m_drop_ship_for_so_receipts_isValid;
}

QString OAIInventorySummaryDto::getErrorInfo() const {
    return m_error_info;
}
void OAIInventorySummaryDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIInventorySummaryDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIInventorySummaryDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

double OAIInventorySummaryDto::getEstimatedTotalCost() const {
    return m_estimated_total_cost;
}
void OAIInventorySummaryDto::setEstimatedTotalCost(const double &estimated_total_cost) {
    m_estimated_total_cost = estimated_total_cost;
    m_estimated_total_cost_isSet = true;
}

bool OAIInventorySummaryDto::is_estimated_total_cost_Set() const{
    return m_estimated_total_cost_isSet;
}

bool OAIInventorySummaryDto::is_estimated_total_cost_Valid() const{
    return m_estimated_total_cost_isValid;
}

double OAIInventorySummaryDto::getEstimatedUnitCost() const {
    return m_estimated_unit_cost;
}
void OAIInventorySummaryDto::setEstimatedUnitCost(const double &estimated_unit_cost) {
    m_estimated_unit_cost = estimated_unit_cost;
    m_estimated_unit_cost_isSet = true;
}

bool OAIInventorySummaryDto::is_estimated_unit_cost_Set() const{
    return m_estimated_unit_cost_isSet;
}

bool OAIInventorySummaryDto::is_estimated_unit_cost_Valid() const{
    return m_estimated_unit_cost_isValid;
}

double OAIInventorySummaryDto::getExpired() const {
    return m_expired;
}
void OAIInventorySummaryDto::setExpired(const double &expired) {
    m_expired = expired;
    m_expired_isSet = true;
}

bool OAIInventorySummaryDto::is_expired_Set() const{
    return m_expired_isSet;
}

bool OAIInventorySummaryDto::is_expired_Valid() const{
    return m_expired_isValid;
}

double OAIInventorySummaryDto::getInAssemblyDemand() const {
    return m_in_assembly_demand;
}
void OAIInventorySummaryDto::setInAssemblyDemand(const double &in_assembly_demand) {
    m_in_assembly_demand = in_assembly_demand;
    m_in_assembly_demand_isSet = true;
}

bool OAIInventorySummaryDto::is_in_assembly_demand_Set() const{
    return m_in_assembly_demand_isSet;
}

bool OAIInventorySummaryDto::is_in_assembly_demand_Valid() const{
    return m_in_assembly_demand_isValid;
}

double OAIInventorySummaryDto::getInAssemblySupply() const {
    return m_in_assembly_supply;
}
void OAIInventorySummaryDto::setInAssemblySupply(const double &in_assembly_supply) {
    m_in_assembly_supply = in_assembly_supply;
    m_in_assembly_supply_isSet = true;
}

bool OAIInventorySummaryDto::is_in_assembly_supply_Set() const{
    return m_in_assembly_supply_isSet;
}

bool OAIInventorySummaryDto::is_in_assembly_supply_Valid() const{
    return m_in_assembly_supply_isValid;
}

double OAIInventorySummaryDto::getInIssues() const {
    return m_in_issues;
}
void OAIInventorySummaryDto::setInIssues(const double &in_issues) {
    m_in_issues = in_issues;
    m_in_issues_isSet = true;
}

bool OAIInventorySummaryDto::is_in_issues_Set() const{
    return m_in_issues_isSet;
}

bool OAIInventorySummaryDto::is_in_issues_Valid() const{
    return m_in_issues_isValid;
}

double OAIInventorySummaryDto::getInReceipts() const {
    return m_in_receipts;
}
void OAIInventorySummaryDto::setInReceipts(const double &in_receipts) {
    m_in_receipts = in_receipts;
    m_in_receipts_isSet = true;
}

bool OAIInventorySummaryDto::is_in_receipts_Set() const{
    return m_in_receipts_isSet;
}

bool OAIInventorySummaryDto::is_in_receipts_Valid() const{
    return m_in_receipts_isValid;
}

double OAIInventorySummaryDto::getInTransit() const {
    return m_in_transit;
}
void OAIInventorySummaryDto::setInTransit(const double &in_transit) {
    m_in_transit = in_transit;
    m_in_transit_isSet = true;
}

bool OAIInventorySummaryDto::is_in_transit_Set() const{
    return m_in_transit_isSet;
}

bool OAIInventorySummaryDto::is_in_transit_Valid() const{
    return m_in_transit_isValid;
}

OAIInventoryInInventorySummaryDto OAIInventorySummaryDto::getInventory() const {
    return m_inventory;
}
void OAIInventorySummaryDto::setInventory(const OAIInventoryInInventorySummaryDto &inventory) {
    m_inventory = inventory;
    m_inventory_isSet = true;
}

bool OAIInventorySummaryDto::is_inventory_Set() const{
    return m_inventory_isSet;
}

bool OAIInventorySummaryDto::is_inventory_Valid() const{
    return m_inventory_isValid;
}

OAILocationInInventorySummaryDto OAIInventorySummaryDto::getLocation() const {
    return m_location;
}
void OAIInventorySummaryDto::setLocation(const OAILocationInInventorySummaryDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIInventorySummaryDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIInventorySummaryDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIMetadataDto OAIInventorySummaryDto::getMetadata() const {
    return m_metadata;
}
void OAIInventorySummaryDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIInventorySummaryDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIInventorySummaryDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

double OAIInventorySummaryDto::getNotAvailable() const {
    return m_not_available;
}
void OAIInventorySummaryDto::setNotAvailable(const double &not_available) {
    m_not_available = not_available;
    m_not_available_isSet = true;
}

bool OAIInventorySummaryDto::is_not_available_Set() const{
    return m_not_available_isSet;
}

bool OAIInventorySummaryDto::is_not_available_Valid() const{
    return m_not_available_isValid;
}

double OAIInventorySummaryDto::getOnHand() const {
    return m_on_hand;
}
void OAIInventorySummaryDto::setOnHand(const double &on_hand) {
    m_on_hand = on_hand;
    m_on_hand_isSet = true;
}

bool OAIInventorySummaryDto::is_on_hand_Set() const{
    return m_on_hand_isSet;
}

bool OAIInventorySummaryDto::is_on_hand_Valid() const{
    return m_on_hand_isValid;
}

double OAIInventorySummaryDto::getPoReceipts() const {
    return m_po_receipts;
}
void OAIInventorySummaryDto::setPoReceipts(const double &po_receipts) {
    m_po_receipts = po_receipts;
    m_po_receipts_isSet = true;
}

bool OAIInventorySummaryDto::is_po_receipts_Set() const{
    return m_po_receipts_isSet;
}

bool OAIInventorySummaryDto::is_po_receipts_Valid() const{
    return m_po_receipts_isValid;
}

double OAIInventorySummaryDto::getPurchaseForSo() const {
    return m_purchase_for_so;
}
void OAIInventorySummaryDto::setPurchaseForSo(const double &purchase_for_so) {
    m_purchase_for_so = purchase_for_so;
    m_purchase_for_so_isSet = true;
}

bool OAIInventorySummaryDto::is_purchase_for_so_Set() const{
    return m_purchase_for_so_isSet;
}

bool OAIInventorySummaryDto::is_purchase_for_so_Valid() const{
    return m_purchase_for_so_isValid;
}

double OAIInventorySummaryDto::getPurchaseForSoPrepared() const {
    return m_purchase_for_so_prepared;
}
void OAIInventorySummaryDto::setPurchaseForSoPrepared(const double &purchase_for_so_prepared) {
    m_purchase_for_so_prepared = purchase_for_so_prepared;
    m_purchase_for_so_prepared_isSet = true;
}

bool OAIInventorySummaryDto::is_purchase_for_so_prepared_Set() const{
    return m_purchase_for_so_prepared_isSet;
}

bool OAIInventorySummaryDto::is_purchase_for_so_prepared_Valid() const{
    return m_purchase_for_so_prepared_isValid;
}

double OAIInventorySummaryDto::getPurchaseForSoReceipts() const {
    return m_purchase_for_so_receipts;
}
void OAIInventorySummaryDto::setPurchaseForSoReceipts(const double &purchase_for_so_receipts) {
    m_purchase_for_so_receipts = purchase_for_so_receipts;
    m_purchase_for_so_receipts_isSet = true;
}

bool OAIInventorySummaryDto::is_purchase_for_so_receipts_Set() const{
    return m_purchase_for_so_receipts_isSet;
}

bool OAIInventorySummaryDto::is_purchase_for_so_receipts_Valid() const{
    return m_purchase_for_so_receipts_isValid;
}

double OAIInventorySummaryDto::getPurchaseOrders() const {
    return m_purchase_orders;
}
void OAIInventorySummaryDto::setPurchaseOrders(const double &purchase_orders) {
    m_purchase_orders = purchase_orders;
    m_purchase_orders_isSet = true;
}

bool OAIInventorySummaryDto::is_purchase_orders_Set() const{
    return m_purchase_orders_isSet;
}

bool OAIInventorySummaryDto::is_purchase_orders_Valid() const{
    return m_purchase_orders_isValid;
}

double OAIInventorySummaryDto::getPurchasePrepared() const {
    return m_purchase_prepared;
}
void OAIInventorySummaryDto::setPurchasePrepared(const double &purchase_prepared) {
    m_purchase_prepared = purchase_prepared;
    m_purchase_prepared_isSet = true;
}

bool OAIInventorySummaryDto::is_purchase_prepared_Set() const{
    return m_purchase_prepared_isSet;
}

bool OAIInventorySummaryDto::is_purchase_prepared_Valid() const{
    return m_purchase_prepared_isValid;
}

double OAIInventorySummaryDto::getSoAllocated() const {
    return m_so_allocated;
}
void OAIInventorySummaryDto::setSoAllocated(const double &so_allocated) {
    m_so_allocated = so_allocated;
    m_so_allocated_isSet = true;
}

bool OAIInventorySummaryDto::is_so_allocated_Set() const{
    return m_so_allocated_isSet;
}

bool OAIInventorySummaryDto::is_so_allocated_Valid() const{
    return m_so_allocated_isValid;
}

double OAIInventorySummaryDto::getSoBackOrdered() const {
    return m_so_back_ordered;
}
void OAIInventorySummaryDto::setSoBackOrdered(const double &so_back_ordered) {
    m_so_back_ordered = so_back_ordered;
    m_so_back_ordered_isSet = true;
}

bool OAIInventorySummaryDto::is_so_back_ordered_Set() const{
    return m_so_back_ordered_isSet;
}

bool OAIInventorySummaryDto::is_so_back_ordered_Valid() const{
    return m_so_back_ordered_isValid;
}

double OAIInventorySummaryDto::getSoBooked() const {
    return m_so_booked;
}
void OAIInventorySummaryDto::setSoBooked(const double &so_booked) {
    m_so_booked = so_booked;
    m_so_booked_isSet = true;
}

bool OAIInventorySummaryDto::is_so_booked_Set() const{
    return m_so_booked_isSet;
}

bool OAIInventorySummaryDto::is_so_booked_Valid() const{
    return m_so_booked_isValid;
}

double OAIInventorySummaryDto::getSoShipped() const {
    return m_so_shipped;
}
void OAIInventorySummaryDto::setSoShipped(const double &so_shipped) {
    m_so_shipped = so_shipped;
    m_so_shipped_isSet = true;
}

bool OAIInventorySummaryDto::is_so_shipped_Set() const{
    return m_so_shipped_isSet;
}

bool OAIInventorySummaryDto::is_so_shipped_Valid() const{
    return m_so_shipped_isValid;
}

double OAIInventorySummaryDto::getSoToDropShip() const {
    return m_so_to_drop_ship;
}
void OAIInventorySummaryDto::setSoToDropShip(const double &so_to_drop_ship) {
    m_so_to_drop_ship = so_to_drop_ship;
    m_so_to_drop_ship_isSet = true;
}

bool OAIInventorySummaryDto::is_so_to_drop_ship_Set() const{
    return m_so_to_drop_ship_isSet;
}

bool OAIInventorySummaryDto::is_so_to_drop_ship_Valid() const{
    return m_so_to_drop_ship_isValid;
}

double OAIInventorySummaryDto::getSoToPurchase() const {
    return m_so_to_purchase;
}
void OAIInventorySummaryDto::setSoToPurchase(const double &so_to_purchase) {
    m_so_to_purchase = so_to_purchase;
    m_so_to_purchase_isSet = true;
}

bool OAIInventorySummaryDto::is_so_to_purchase_Set() const{
    return m_so_to_purchase_isSet;
}

bool OAIInventorySummaryDto::is_so_to_purchase_Valid() const{
    return m_so_to_purchase_isValid;
}

OAIWarehouseInInventorySummaryDto OAIInventorySummaryDto::getWarehouse() const {
    return m_warehouse;
}
void OAIInventorySummaryDto::setWarehouse(const OAIWarehouseInInventorySummaryDto &warehouse) {
    m_warehouse = warehouse;
    m_warehouse_isSet = true;
}

bool OAIInventorySummaryDto::is_warehouse_Set() const{
    return m_warehouse_isSet;
}

bool OAIInventorySummaryDto::is_warehouse_Valid() const{
    return m_warehouse_isValid;
}

bool OAIInventorySummaryDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_for_shipment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drop_ship_for_so_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drop_ship_for_so_prepared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drop_ship_for_so_receipts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_total_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_unit_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_assembly_demand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_assembly_supply_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_issues_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_receipts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_transit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_hand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_receipts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_for_so_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_for_so_prepared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_for_so_receipts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_orders_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_prepared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_so_allocated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_so_back_ordered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_so_booked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_so_shipped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_so_to_drop_ship_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_so_to_purchase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventorySummaryDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
