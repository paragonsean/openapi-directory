/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVisibilityDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVisibilityDto::OAIVisibilityDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVisibilityDto::OAIVisibilityDto() {
    this->initializeModel();
}

OAIVisibilityDto::~OAIVisibilityDto() {}

void OAIVisibilityDto::initializeModel() {

    m_visible_in_ap_isSet = false;
    m_visible_in_ap_isValid = false;

    m_visible_in_ar_isSet = false;
    m_visible_in_ar_isValid = false;

    m_visible_in_ca_isSet = false;
    m_visible_in_ca_isValid = false;

    m_visible_in_cr_isSet = false;
    m_visible_in_cr_isValid = false;

    m_visible_in_ea_isSet = false;
    m_visible_in_ea_isValid = false;

    m_visible_in_gl_isSet = false;
    m_visible_in_gl_isValid = false;

    m_visible_in_in_isSet = false;
    m_visible_in_in_isValid = false;

    m_visible_in_po_isSet = false;
    m_visible_in_po_isValid = false;

    m_visible_in_so_isSet = false;
    m_visible_in_so_isValid = false;

    m_visible_in_ta_isSet = false;
    m_visible_in_ta_isValid = false;
}

void OAIVisibilityDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVisibilityDto::fromJsonObject(QJsonObject json) {

    m_visible_in_ap_isValid = ::OpenAPI::fromJsonValue(m_visible_in_ap, json[QString("visibleInAp")]);
    m_visible_in_ap_isSet = !json[QString("visibleInAp")].isNull() && m_visible_in_ap_isValid;

    m_visible_in_ar_isValid = ::OpenAPI::fromJsonValue(m_visible_in_ar, json[QString("visibleInAr")]);
    m_visible_in_ar_isSet = !json[QString("visibleInAr")].isNull() && m_visible_in_ar_isValid;

    m_visible_in_ca_isValid = ::OpenAPI::fromJsonValue(m_visible_in_ca, json[QString("visibleInCa")]);
    m_visible_in_ca_isSet = !json[QString("visibleInCa")].isNull() && m_visible_in_ca_isValid;

    m_visible_in_cr_isValid = ::OpenAPI::fromJsonValue(m_visible_in_cr, json[QString("visibleInCr")]);
    m_visible_in_cr_isSet = !json[QString("visibleInCr")].isNull() && m_visible_in_cr_isValid;

    m_visible_in_ea_isValid = ::OpenAPI::fromJsonValue(m_visible_in_ea, json[QString("visibleInEa")]);
    m_visible_in_ea_isSet = !json[QString("visibleInEa")].isNull() && m_visible_in_ea_isValid;

    m_visible_in_gl_isValid = ::OpenAPI::fromJsonValue(m_visible_in_gl, json[QString("visibleInGl")]);
    m_visible_in_gl_isSet = !json[QString("visibleInGl")].isNull() && m_visible_in_gl_isValid;

    m_visible_in_in_isValid = ::OpenAPI::fromJsonValue(m_visible_in_in, json[QString("visibleInIn")]);
    m_visible_in_in_isSet = !json[QString("visibleInIn")].isNull() && m_visible_in_in_isValid;

    m_visible_in_po_isValid = ::OpenAPI::fromJsonValue(m_visible_in_po, json[QString("visibleInPo")]);
    m_visible_in_po_isSet = !json[QString("visibleInPo")].isNull() && m_visible_in_po_isValid;

    m_visible_in_so_isValid = ::OpenAPI::fromJsonValue(m_visible_in_so, json[QString("visibleInSo")]);
    m_visible_in_so_isSet = !json[QString("visibleInSo")].isNull() && m_visible_in_so_isValid;

    m_visible_in_ta_isValid = ::OpenAPI::fromJsonValue(m_visible_in_ta, json[QString("visibleInTa")]);
    m_visible_in_ta_isSet = !json[QString("visibleInTa")].isNull() && m_visible_in_ta_isValid;
}

QString OAIVisibilityDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVisibilityDto::asJsonObject() const {
    QJsonObject obj;
    if (m_visible_in_ap_isSet) {
        obj.insert(QString("visibleInAp"), ::OpenAPI::toJsonValue(m_visible_in_ap));
    }
    if (m_visible_in_ar_isSet) {
        obj.insert(QString("visibleInAr"), ::OpenAPI::toJsonValue(m_visible_in_ar));
    }
    if (m_visible_in_ca_isSet) {
        obj.insert(QString("visibleInCa"), ::OpenAPI::toJsonValue(m_visible_in_ca));
    }
    if (m_visible_in_cr_isSet) {
        obj.insert(QString("visibleInCr"), ::OpenAPI::toJsonValue(m_visible_in_cr));
    }
    if (m_visible_in_ea_isSet) {
        obj.insert(QString("visibleInEa"), ::OpenAPI::toJsonValue(m_visible_in_ea));
    }
    if (m_visible_in_gl_isSet) {
        obj.insert(QString("visibleInGl"), ::OpenAPI::toJsonValue(m_visible_in_gl));
    }
    if (m_visible_in_in_isSet) {
        obj.insert(QString("visibleInIn"), ::OpenAPI::toJsonValue(m_visible_in_in));
    }
    if (m_visible_in_po_isSet) {
        obj.insert(QString("visibleInPo"), ::OpenAPI::toJsonValue(m_visible_in_po));
    }
    if (m_visible_in_so_isSet) {
        obj.insert(QString("visibleInSo"), ::OpenAPI::toJsonValue(m_visible_in_so));
    }
    if (m_visible_in_ta_isSet) {
        obj.insert(QString("visibleInTa"), ::OpenAPI::toJsonValue(m_visible_in_ta));
    }
    return obj;
}

bool OAIVisibilityDto::isVisibleInAp() const {
    return m_visible_in_ap;
}
void OAIVisibilityDto::setVisibleInAp(const bool &visible_in_ap) {
    m_visible_in_ap = visible_in_ap;
    m_visible_in_ap_isSet = true;
}

bool OAIVisibilityDto::is_visible_in_ap_Set() const{
    return m_visible_in_ap_isSet;
}

bool OAIVisibilityDto::is_visible_in_ap_Valid() const{
    return m_visible_in_ap_isValid;
}

bool OAIVisibilityDto::isVisibleInAr() const {
    return m_visible_in_ar;
}
void OAIVisibilityDto::setVisibleInAr(const bool &visible_in_ar) {
    m_visible_in_ar = visible_in_ar;
    m_visible_in_ar_isSet = true;
}

bool OAIVisibilityDto::is_visible_in_ar_Set() const{
    return m_visible_in_ar_isSet;
}

bool OAIVisibilityDto::is_visible_in_ar_Valid() const{
    return m_visible_in_ar_isValid;
}

bool OAIVisibilityDto::isVisibleInCa() const {
    return m_visible_in_ca;
}
void OAIVisibilityDto::setVisibleInCa(const bool &visible_in_ca) {
    m_visible_in_ca = visible_in_ca;
    m_visible_in_ca_isSet = true;
}

bool OAIVisibilityDto::is_visible_in_ca_Set() const{
    return m_visible_in_ca_isSet;
}

bool OAIVisibilityDto::is_visible_in_ca_Valid() const{
    return m_visible_in_ca_isValid;
}

bool OAIVisibilityDto::isVisibleInCr() const {
    return m_visible_in_cr;
}
void OAIVisibilityDto::setVisibleInCr(const bool &visible_in_cr) {
    m_visible_in_cr = visible_in_cr;
    m_visible_in_cr_isSet = true;
}

bool OAIVisibilityDto::is_visible_in_cr_Set() const{
    return m_visible_in_cr_isSet;
}

bool OAIVisibilityDto::is_visible_in_cr_Valid() const{
    return m_visible_in_cr_isValid;
}

bool OAIVisibilityDto::isVisibleInEa() const {
    return m_visible_in_ea;
}
void OAIVisibilityDto::setVisibleInEa(const bool &visible_in_ea) {
    m_visible_in_ea = visible_in_ea;
    m_visible_in_ea_isSet = true;
}

bool OAIVisibilityDto::is_visible_in_ea_Set() const{
    return m_visible_in_ea_isSet;
}

bool OAIVisibilityDto::is_visible_in_ea_Valid() const{
    return m_visible_in_ea_isValid;
}

bool OAIVisibilityDto::isVisibleInGl() const {
    return m_visible_in_gl;
}
void OAIVisibilityDto::setVisibleInGl(const bool &visible_in_gl) {
    m_visible_in_gl = visible_in_gl;
    m_visible_in_gl_isSet = true;
}

bool OAIVisibilityDto::is_visible_in_gl_Set() const{
    return m_visible_in_gl_isSet;
}

bool OAIVisibilityDto::is_visible_in_gl_Valid() const{
    return m_visible_in_gl_isValid;
}

bool OAIVisibilityDto::isVisibleInIn() const {
    return m_visible_in_in;
}
void OAIVisibilityDto::setVisibleInIn(const bool &visible_in_in) {
    m_visible_in_in = visible_in_in;
    m_visible_in_in_isSet = true;
}

bool OAIVisibilityDto::is_visible_in_in_Set() const{
    return m_visible_in_in_isSet;
}

bool OAIVisibilityDto::is_visible_in_in_Valid() const{
    return m_visible_in_in_isValid;
}

bool OAIVisibilityDto::isVisibleInPo() const {
    return m_visible_in_po;
}
void OAIVisibilityDto::setVisibleInPo(const bool &visible_in_po) {
    m_visible_in_po = visible_in_po;
    m_visible_in_po_isSet = true;
}

bool OAIVisibilityDto::is_visible_in_po_Set() const{
    return m_visible_in_po_isSet;
}

bool OAIVisibilityDto::is_visible_in_po_Valid() const{
    return m_visible_in_po_isValid;
}

bool OAIVisibilityDto::isVisibleInSo() const {
    return m_visible_in_so;
}
void OAIVisibilityDto::setVisibleInSo(const bool &visible_in_so) {
    m_visible_in_so = visible_in_so;
    m_visible_in_so_isSet = true;
}

bool OAIVisibilityDto::is_visible_in_so_Set() const{
    return m_visible_in_so_isSet;
}

bool OAIVisibilityDto::is_visible_in_so_Valid() const{
    return m_visible_in_so_isValid;
}

bool OAIVisibilityDto::isVisibleInTa() const {
    return m_visible_in_ta;
}
void OAIVisibilityDto::setVisibleInTa(const bool &visible_in_ta) {
    m_visible_in_ta = visible_in_ta;
    m_visible_in_ta_isSet = true;
}

bool OAIVisibilityDto::is_visible_in_ta_Set() const{
    return m_visible_in_ta_isSet;
}

bool OAIVisibilityDto::is_visible_in_ta_Valid() const{
    return m_visible_in_ta_isValid;
}

bool OAIVisibilityDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_visible_in_ap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_in_ar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_in_ca_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_in_cr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_in_ea_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_in_gl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_in_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_in_po_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_in_so_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_in_ta_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVisibilityDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
