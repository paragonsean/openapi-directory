/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISummaryInCustomerContractDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISummaryInCustomerContractDto::OAISummaryInCustomerContractDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISummaryInCustomerContractDto::OAISummaryInCustomerContractDto() {
    this->initializeModel();
}

OAISummaryInCustomerContractDto::~OAISummaryInCustomerContractDto() {}

void OAISummaryInCustomerContractDto::initializeModel() {

    m_activation_date_isSet = false;
    m_activation_date_isValid = false;

    m_case_count_item_isSet = false;
    m_case_count_item_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_grace_period_isSet = false;
    m_grace_period_isValid = false;

    m_invoice_account_isSet = false;
    m_invoice_account_isValid = false;

    m_invoice_location_isSet = false;
    m_invoice_location_isValid = false;

    m_invoice_to_isSet = false;
    m_invoice_to_isValid = false;

    m_invoicing_period_isSet = false;
    m_invoicing_period_isValid = false;

    m_invoicing_schedule_starts_on_isSet = false;
    m_invoicing_schedule_starts_on_isValid = false;

    m_last_invoicing_date_isSet = false;
    m_last_invoicing_date_isValid = false;

    m_mass_renewal_isSet = false;
    m_mass_renewal_isValid = false;

    m_next_invoicing_date_isSet = false;
    m_next_invoicing_date_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_renewal_point_isSet = false;
    m_renewal_point_isValid = false;

    m_sales_person_isSet = false;
    m_sales_person_isValid = false;

    m_setup_date_isSet = false;
    m_setup_date_isValid = false;

    m_termination_date_isSet = false;
    m_termination_date_isValid = false;
}

void OAISummaryInCustomerContractDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISummaryInCustomerContractDto::fromJsonObject(QJsonObject json) {

    m_activation_date_isValid = ::OpenAPI::fromJsonValue(m_activation_date, json[QString("activationDate")]);
    m_activation_date_isSet = !json[QString("activationDate")].isNull() && m_activation_date_isValid;

    m_case_count_item_isValid = ::OpenAPI::fromJsonValue(m_case_count_item, json[QString("caseCountItem")]);
    m_case_count_item_isSet = !json[QString("caseCountItem")].isNull() && m_case_count_item_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_grace_period_isValid = ::OpenAPI::fromJsonValue(m_grace_period, json[QString("gracePeriod")]);
    m_grace_period_isSet = !json[QString("gracePeriod")].isNull() && m_grace_period_isValid;

    m_invoice_account_isValid = ::OpenAPI::fromJsonValue(m_invoice_account, json[QString("invoiceAccount")]);
    m_invoice_account_isSet = !json[QString("invoiceAccount")].isNull() && m_invoice_account_isValid;

    m_invoice_location_isValid = ::OpenAPI::fromJsonValue(m_invoice_location, json[QString("invoiceLocation")]);
    m_invoice_location_isSet = !json[QString("invoiceLocation")].isNull() && m_invoice_location_isValid;

    m_invoice_to_isValid = ::OpenAPI::fromJsonValue(m_invoice_to, json[QString("invoiceTo")]);
    m_invoice_to_isSet = !json[QString("invoiceTo")].isNull() && m_invoice_to_isValid;

    m_invoicing_period_isValid = ::OpenAPI::fromJsonValue(m_invoicing_period, json[QString("invoicingPeriod")]);
    m_invoicing_period_isSet = !json[QString("invoicingPeriod")].isNull() && m_invoicing_period_isValid;

    m_invoicing_schedule_starts_on_isValid = ::OpenAPI::fromJsonValue(m_invoicing_schedule_starts_on, json[QString("invoicingScheduleStartsOn")]);
    m_invoicing_schedule_starts_on_isSet = !json[QString("invoicingScheduleStartsOn")].isNull() && m_invoicing_schedule_starts_on_isValid;

    m_last_invoicing_date_isValid = ::OpenAPI::fromJsonValue(m_last_invoicing_date, json[QString("lastInvoicingDate")]);
    m_last_invoicing_date_isSet = !json[QString("lastInvoicingDate")].isNull() && m_last_invoicing_date_isValid;

    m_mass_renewal_isValid = ::OpenAPI::fromJsonValue(m_mass_renewal, json[QString("massRenewal")]);
    m_mass_renewal_isSet = !json[QString("massRenewal")].isNull() && m_mass_renewal_isValid;

    m_next_invoicing_date_isValid = ::OpenAPI::fromJsonValue(m_next_invoicing_date, json[QString("nextInvoicingDate")]);
    m_next_invoicing_date_isSet = !json[QString("nextInvoicingDate")].isNull() && m_next_invoicing_date_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_renewal_point_isValid = ::OpenAPI::fromJsonValue(m_renewal_point, json[QString("renewalPoint")]);
    m_renewal_point_isSet = !json[QString("renewalPoint")].isNull() && m_renewal_point_isValid;

    m_sales_person_isValid = ::OpenAPI::fromJsonValue(m_sales_person, json[QString("salesPerson")]);
    m_sales_person_isSet = !json[QString("salesPerson")].isNull() && m_sales_person_isValid;

    m_setup_date_isValid = ::OpenAPI::fromJsonValue(m_setup_date, json[QString("setupDate")]);
    m_setup_date_isSet = !json[QString("setupDate")].isNull() && m_setup_date_isValid;

    m_termination_date_isValid = ::OpenAPI::fromJsonValue(m_termination_date, json[QString("terminationDate")]);
    m_termination_date_isSet = !json[QString("terminationDate")].isNull() && m_termination_date_isValid;
}

QString OAISummaryInCustomerContractDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISummaryInCustomerContractDto::asJsonObject() const {
    QJsonObject obj;
    if (m_activation_date_isSet) {
        obj.insert(QString("activationDate"), ::OpenAPI::toJsonValue(m_activation_date));
    }
    if (m_case_count_item.isSet()) {
        obj.insert(QString("caseCountItem"), ::OpenAPI::toJsonValue(m_case_count_item));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_grace_period_isSet) {
        obj.insert(QString("gracePeriod"), ::OpenAPI::toJsonValue(m_grace_period));
    }
    if (m_invoice_account.isSet()) {
        obj.insert(QString("invoiceAccount"), ::OpenAPI::toJsonValue(m_invoice_account));
    }
    if (m_invoice_location.isSet()) {
        obj.insert(QString("invoiceLocation"), ::OpenAPI::toJsonValue(m_invoice_location));
    }
    if (m_invoice_to_isSet) {
        obj.insert(QString("invoiceTo"), ::OpenAPI::toJsonValue(m_invoice_to));
    }
    if (m_invoicing_period_isSet) {
        obj.insert(QString("invoicingPeriod"), ::OpenAPI::toJsonValue(m_invoicing_period));
    }
    if (m_invoicing_schedule_starts_on_isSet) {
        obj.insert(QString("invoicingScheduleStartsOn"), ::OpenAPI::toJsonValue(m_invoicing_schedule_starts_on));
    }
    if (m_last_invoicing_date_isSet) {
        obj.insert(QString("lastInvoicingDate"), ::OpenAPI::toJsonValue(m_last_invoicing_date));
    }
    if (m_mass_renewal_isSet) {
        obj.insert(QString("massRenewal"), ::OpenAPI::toJsonValue(m_mass_renewal));
    }
    if (m_next_invoicing_date_isSet) {
        obj.insert(QString("nextInvoicingDate"), ::OpenAPI::toJsonValue(m_next_invoicing_date));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_renewal_point_isSet) {
        obj.insert(QString("renewalPoint"), ::OpenAPI::toJsonValue(m_renewal_point));
    }
    if (m_sales_person.isSet()) {
        obj.insert(QString("salesPerson"), ::OpenAPI::toJsonValue(m_sales_person));
    }
    if (m_setup_date_isSet) {
        obj.insert(QString("setupDate"), ::OpenAPI::toJsonValue(m_setup_date));
    }
    if (m_termination_date_isSet) {
        obj.insert(QString("terminationDate"), ::OpenAPI::toJsonValue(m_termination_date));
    }
    return obj;
}

QDateTime OAISummaryInCustomerContractDto::getActivationDate() const {
    return m_activation_date;
}
void OAISummaryInCustomerContractDto::setActivationDate(const QDateTime &activation_date) {
    m_activation_date = activation_date;
    m_activation_date_isSet = true;
}

bool OAISummaryInCustomerContractDto::is_activation_date_Set() const{
    return m_activation_date_isSet;
}

bool OAISummaryInCustomerContractDto::is_activation_date_Valid() const{
    return m_activation_date_isValid;
}

OAICaseCountItemInCustomerContractSummaryDto OAISummaryInCustomerContractDto::getCaseCountItem() const {
    return m_case_count_item;
}
void OAISummaryInCustomerContractDto::setCaseCountItem(const OAICaseCountItemInCustomerContractSummaryDto &case_count_item) {
    m_case_count_item = case_count_item;
    m_case_count_item_isSet = true;
}

bool OAISummaryInCustomerContractDto::is_case_count_item_Set() const{
    return m_case_count_item_isSet;
}

bool OAISummaryInCustomerContractDto::is_case_count_item_Valid() const{
    return m_case_count_item_isValid;
}

QString OAISummaryInCustomerContractDto::getCurrency() const {
    return m_currency;
}
void OAISummaryInCustomerContractDto::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAISummaryInCustomerContractDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAISummaryInCustomerContractDto::is_currency_Valid() const{
    return m_currency_isValid;
}

QDateTime OAISummaryInCustomerContractDto::getExpirationDate() const {
    return m_expiration_date;
}
void OAISummaryInCustomerContractDto::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAISummaryInCustomerContractDto::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAISummaryInCustomerContractDto::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

qint32 OAISummaryInCustomerContractDto::getGracePeriod() const {
    return m_grace_period;
}
void OAISummaryInCustomerContractDto::setGracePeriod(const qint32 &grace_period) {
    m_grace_period = grace_period;
    m_grace_period_isSet = true;
}

bool OAISummaryInCustomerContractDto::is_grace_period_Set() const{
    return m_grace_period_isSet;
}

bool OAISummaryInCustomerContractDto::is_grace_period_Valid() const{
    return m_grace_period_isValid;
}

OAIInvoiceAccountInCustomerContractSummaryDto OAISummaryInCustomerContractDto::getInvoiceAccount() const {
    return m_invoice_account;
}
void OAISummaryInCustomerContractDto::setInvoiceAccount(const OAIInvoiceAccountInCustomerContractSummaryDto &invoice_account) {
    m_invoice_account = invoice_account;
    m_invoice_account_isSet = true;
}

bool OAISummaryInCustomerContractDto::is_invoice_account_Set() const{
    return m_invoice_account_isSet;
}

bool OAISummaryInCustomerContractDto::is_invoice_account_Valid() const{
    return m_invoice_account_isValid;
}

OAILocationNameDescriptionDto OAISummaryInCustomerContractDto::getInvoiceLocation() const {
    return m_invoice_location;
}
void OAISummaryInCustomerContractDto::setInvoiceLocation(const OAILocationNameDescriptionDto &invoice_location) {
    m_invoice_location = invoice_location;
    m_invoice_location_isSet = true;
}

bool OAISummaryInCustomerContractDto::is_invoice_location_Set() const{
    return m_invoice_location_isSet;
}

bool OAISummaryInCustomerContractDto::is_invoice_location_Valid() const{
    return m_invoice_location_isValid;
}

QString OAISummaryInCustomerContractDto::getInvoiceTo() const {
    return m_invoice_to;
}
void OAISummaryInCustomerContractDto::setInvoiceTo(const QString &invoice_to) {
    m_invoice_to = invoice_to;
    m_invoice_to_isSet = true;
}

bool OAISummaryInCustomerContractDto::is_invoice_to_Set() const{
    return m_invoice_to_isSet;
}

bool OAISummaryInCustomerContractDto::is_invoice_to_Valid() const{
    return m_invoice_to_isValid;
}

QString OAISummaryInCustomerContractDto::getInvoicingPeriod() const {
    return m_invoicing_period;
}
void OAISummaryInCustomerContractDto::setInvoicingPeriod(const QString &invoicing_period) {
    m_invoicing_period = invoicing_period;
    m_invoicing_period_isSet = true;
}

bool OAISummaryInCustomerContractDto::is_invoicing_period_Set() const{
    return m_invoicing_period_isSet;
}

bool OAISummaryInCustomerContractDto::is_invoicing_period_Valid() const{
    return m_invoicing_period_isValid;
}

QDateTime OAISummaryInCustomerContractDto::getInvoicingScheduleStartsOn() const {
    return m_invoicing_schedule_starts_on;
}
void OAISummaryInCustomerContractDto::setInvoicingScheduleStartsOn(const QDateTime &invoicing_schedule_starts_on) {
    m_invoicing_schedule_starts_on = invoicing_schedule_starts_on;
    m_invoicing_schedule_starts_on_isSet = true;
}

bool OAISummaryInCustomerContractDto::is_invoicing_schedule_starts_on_Set() const{
    return m_invoicing_schedule_starts_on_isSet;
}

bool OAISummaryInCustomerContractDto::is_invoicing_schedule_starts_on_Valid() const{
    return m_invoicing_schedule_starts_on_isValid;
}

QDateTime OAISummaryInCustomerContractDto::getLastInvoicingDate() const {
    return m_last_invoicing_date;
}
void OAISummaryInCustomerContractDto::setLastInvoicingDate(const QDateTime &last_invoicing_date) {
    m_last_invoicing_date = last_invoicing_date;
    m_last_invoicing_date_isSet = true;
}

bool OAISummaryInCustomerContractDto::is_last_invoicing_date_Set() const{
    return m_last_invoicing_date_isSet;
}

bool OAISummaryInCustomerContractDto::is_last_invoicing_date_Valid() const{
    return m_last_invoicing_date_isValid;
}

bool OAISummaryInCustomerContractDto::isMassRenewal() const {
    return m_mass_renewal;
}
void OAISummaryInCustomerContractDto::setMassRenewal(const bool &mass_renewal) {
    m_mass_renewal = mass_renewal;
    m_mass_renewal_isSet = true;
}

bool OAISummaryInCustomerContractDto::is_mass_renewal_Set() const{
    return m_mass_renewal_isSet;
}

bool OAISummaryInCustomerContractDto::is_mass_renewal_Valid() const{
    return m_mass_renewal_isValid;
}

QDateTime OAISummaryInCustomerContractDto::getNextInvoicingDate() const {
    return m_next_invoicing_date;
}
void OAISummaryInCustomerContractDto::setNextInvoicingDate(const QDateTime &next_invoicing_date) {
    m_next_invoicing_date = next_invoicing_date;
    m_next_invoicing_date_isSet = true;
}

bool OAISummaryInCustomerContractDto::is_next_invoicing_date_Set() const{
    return m_next_invoicing_date_isSet;
}

bool OAISummaryInCustomerContractDto::is_next_invoicing_date_Valid() const{
    return m_next_invoicing_date_isValid;
}

OAIOwnerInCustomerContractSummaryDto OAISummaryInCustomerContractDto::getOwner() const {
    return m_owner;
}
void OAISummaryInCustomerContractDto::setOwner(const OAIOwnerInCustomerContractSummaryDto &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAISummaryInCustomerContractDto::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAISummaryInCustomerContractDto::is_owner_Valid() const{
    return m_owner_isValid;
}

qint32 OAISummaryInCustomerContractDto::getRenewalPoint() const {
    return m_renewal_point;
}
void OAISummaryInCustomerContractDto::setRenewalPoint(const qint32 &renewal_point) {
    m_renewal_point = renewal_point;
    m_renewal_point_isSet = true;
}

bool OAISummaryInCustomerContractDto::is_renewal_point_Set() const{
    return m_renewal_point_isSet;
}

bool OAISummaryInCustomerContractDto::is_renewal_point_Valid() const{
    return m_renewal_point_isValid;
}

OAISalesPersonInCustomerContractSummaryDto OAISummaryInCustomerContractDto::getSalesPerson() const {
    return m_sales_person;
}
void OAISummaryInCustomerContractDto::setSalesPerson(const OAISalesPersonInCustomerContractSummaryDto &sales_person) {
    m_sales_person = sales_person;
    m_sales_person_isSet = true;
}

bool OAISummaryInCustomerContractDto::is_sales_person_Set() const{
    return m_sales_person_isSet;
}

bool OAISummaryInCustomerContractDto::is_sales_person_Valid() const{
    return m_sales_person_isValid;
}

QDateTime OAISummaryInCustomerContractDto::getSetupDate() const {
    return m_setup_date;
}
void OAISummaryInCustomerContractDto::setSetupDate(const QDateTime &setup_date) {
    m_setup_date = setup_date;
    m_setup_date_isSet = true;
}

bool OAISummaryInCustomerContractDto::is_setup_date_Set() const{
    return m_setup_date_isSet;
}

bool OAISummaryInCustomerContractDto::is_setup_date_Valid() const{
    return m_setup_date_isValid;
}

QDateTime OAISummaryInCustomerContractDto::getTerminationDate() const {
    return m_termination_date;
}
void OAISummaryInCustomerContractDto::setTerminationDate(const QDateTime &termination_date) {
    m_termination_date = termination_date;
    m_termination_date_isSet = true;
}

bool OAISummaryInCustomerContractDto::is_termination_date_Set() const{
    return m_termination_date_isSet;
}

bool OAISummaryInCustomerContractDto::is_termination_date_Valid() const{
    return m_termination_date_isValid;
}

bool OAISummaryInCustomerContractDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_case_count_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grace_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoicing_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoicing_schedule_starts_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_invoicing_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mass_renewal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_invoicing_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewal_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_setup_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISummaryInCustomerContractDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
