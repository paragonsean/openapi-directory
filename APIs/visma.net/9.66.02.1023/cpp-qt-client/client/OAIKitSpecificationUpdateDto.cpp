/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKitSpecificationUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKitSpecificationUpdateDto::OAIKitSpecificationUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKitSpecificationUpdateDto::OAIKitSpecificationUpdateDto() {
    this->initializeModel();
}

OAIKitSpecificationUpdateDto::~OAIKitSpecificationUpdateDto() {}

void OAIKitSpecificationUpdateDto::initializeModel() {

    m_allow_comp_addition_isSet = false;
    m_allow_comp_addition_isValid = false;

    m_descr_isSet = false;
    m_descr_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_non_stock_isSet = false;
    m_is_non_stock_isValid = false;

    m_kit_inventory_id_isSet = false;
    m_kit_inventory_id_isValid = false;

    m_non_stock_component_lines_isSet = false;
    m_non_stock_component_lines_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;

    m_stock_component_lines_isSet = false;
    m_stock_component_lines_isValid = false;
}

void OAIKitSpecificationUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKitSpecificationUpdateDto::fromJsonObject(QJsonObject json) {

    m_allow_comp_addition_isValid = ::OpenAPI::fromJsonValue(m_allow_comp_addition, json[QString("allowCompAddition")]);
    m_allow_comp_addition_isSet = !json[QString("allowCompAddition")].isNull() && m_allow_comp_addition_isValid;

    m_descr_isValid = ::OpenAPI::fromJsonValue(m_descr, json[QString("descr")]);
    m_descr_isSet = !json[QString("descr")].isNull() && m_descr_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_is_non_stock_isValid = ::OpenAPI::fromJsonValue(m_is_non_stock, json[QString("isNonStock")]);
    m_is_non_stock_isSet = !json[QString("isNonStock")].isNull() && m_is_non_stock_isValid;

    m_kit_inventory_id_isValid = ::OpenAPI::fromJsonValue(m_kit_inventory_id, json[QString("kitInventoryID")]);
    m_kit_inventory_id_isSet = !json[QString("kitInventoryID")].isNull() && m_kit_inventory_id_isValid;

    m_non_stock_component_lines_isValid = ::OpenAPI::fromJsonValue(m_non_stock_component_lines, json[QString("nonStockComponentLines")]);
    m_non_stock_component_lines_isSet = !json[QString("nonStockComponentLines")].isNull() && m_non_stock_component_lines_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionID")]);
    m_revision_id_isSet = !json[QString("revisionID")].isNull() && m_revision_id_isValid;

    m_stock_component_lines_isValid = ::OpenAPI::fromJsonValue(m_stock_component_lines, json[QString("stockComponentLines")]);
    m_stock_component_lines_isSet = !json[QString("stockComponentLines")].isNull() && m_stock_component_lines_isValid;
}

QString OAIKitSpecificationUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKitSpecificationUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_comp_addition.isSet()) {
        obj.insert(QString("allowCompAddition"), ::OpenAPI::toJsonValue(m_allow_comp_addition));
    }
    if (m_descr.isSet()) {
        obj.insert(QString("descr"), ::OpenAPI::toJsonValue(m_descr));
    }
    if (m_is_active.isSet()) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_non_stock.isSet()) {
        obj.insert(QString("isNonStock"), ::OpenAPI::toJsonValue(m_is_non_stock));
    }
    if (m_kit_inventory_id.isSet()) {
        obj.insert(QString("kitInventoryID"), ::OpenAPI::toJsonValue(m_kit_inventory_id));
    }
    if (m_non_stock_component_lines.size() > 0) {
        obj.insert(QString("nonStockComponentLines"), ::OpenAPI::toJsonValue(m_non_stock_component_lines));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_revision_id.isSet()) {
        obj.insert(QString("revisionID"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    if (m_stock_component_lines.size() > 0) {
        obj.insert(QString("stockComponentLines"), ::OpenAPI::toJsonValue(m_stock_component_lines));
    }
    return obj;
}

OAIDtoValueOfNullableOfBoolean OAIKitSpecificationUpdateDto::getAllowCompAddition() const {
    return m_allow_comp_addition;
}
void OAIKitSpecificationUpdateDto::setAllowCompAddition(const OAIDtoValueOfNullableOfBoolean &allow_comp_addition) {
    m_allow_comp_addition = allow_comp_addition;
    m_allow_comp_addition_isSet = true;
}

bool OAIKitSpecificationUpdateDto::is_allow_comp_addition_Set() const{
    return m_allow_comp_addition_isSet;
}

bool OAIKitSpecificationUpdateDto::is_allow_comp_addition_Valid() const{
    return m_allow_comp_addition_isValid;
}

OAIDtoValueOfString OAIKitSpecificationUpdateDto::getDescr() const {
    return m_descr;
}
void OAIKitSpecificationUpdateDto::setDescr(const OAIDtoValueOfString &descr) {
    m_descr = descr;
    m_descr_isSet = true;
}

bool OAIKitSpecificationUpdateDto::is_descr_Set() const{
    return m_descr_isSet;
}

bool OAIKitSpecificationUpdateDto::is_descr_Valid() const{
    return m_descr_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIKitSpecificationUpdateDto::getIsActive() const {
    return m_is_active;
}
void OAIKitSpecificationUpdateDto::setIsActive(const OAIDtoValueOfNullableOfBoolean &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIKitSpecificationUpdateDto::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIKitSpecificationUpdateDto::is_is_active_Valid() const{
    return m_is_active_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIKitSpecificationUpdateDto::getIsNonStock() const {
    return m_is_non_stock;
}
void OAIKitSpecificationUpdateDto::setIsNonStock(const OAIDtoValueOfNullableOfBoolean &is_non_stock) {
    m_is_non_stock = is_non_stock;
    m_is_non_stock_isSet = true;
}

bool OAIKitSpecificationUpdateDto::is_is_non_stock_Set() const{
    return m_is_non_stock_isSet;
}

bool OAIKitSpecificationUpdateDto::is_is_non_stock_Valid() const{
    return m_is_non_stock_isValid;
}

OAIDtoValueOfString OAIKitSpecificationUpdateDto::getKitInventoryId() const {
    return m_kit_inventory_id;
}
void OAIKitSpecificationUpdateDto::setKitInventoryId(const OAIDtoValueOfString &kit_inventory_id) {
    m_kit_inventory_id = kit_inventory_id;
    m_kit_inventory_id_isSet = true;
}

bool OAIKitSpecificationUpdateDto::is_kit_inventory_id_Set() const{
    return m_kit_inventory_id_isSet;
}

bool OAIKitSpecificationUpdateDto::is_kit_inventory_id_Valid() const{
    return m_kit_inventory_id_isValid;
}

QList<OAIKitSpecificationNonStockComponentsUpdateDto> OAIKitSpecificationUpdateDto::getNonStockComponentLines() const {
    return m_non_stock_component_lines;
}
void OAIKitSpecificationUpdateDto::setNonStockComponentLines(const QList<OAIKitSpecificationNonStockComponentsUpdateDto> &non_stock_component_lines) {
    m_non_stock_component_lines = non_stock_component_lines;
    m_non_stock_component_lines_isSet = true;
}

bool OAIKitSpecificationUpdateDto::is_non_stock_component_lines_Set() const{
    return m_non_stock_component_lines_isSet;
}

bool OAIKitSpecificationUpdateDto::is_non_stock_component_lines_Valid() const{
    return m_non_stock_component_lines_isValid;
}

QString OAIKitSpecificationUpdateDto::getOperation() const {
    return m_operation;
}
void OAIKitSpecificationUpdateDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIKitSpecificationUpdateDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIKitSpecificationUpdateDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIDtoValueOfString OAIKitSpecificationUpdateDto::getRevisionId() const {
    return m_revision_id;
}
void OAIKitSpecificationUpdateDto::setRevisionId(const OAIDtoValueOfString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAIKitSpecificationUpdateDto::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAIKitSpecificationUpdateDto::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

QList<OAIKitSpecificationStockComponentsUpdateDto> OAIKitSpecificationUpdateDto::getStockComponentLines() const {
    return m_stock_component_lines;
}
void OAIKitSpecificationUpdateDto::setStockComponentLines(const QList<OAIKitSpecificationStockComponentsUpdateDto> &stock_component_lines) {
    m_stock_component_lines = stock_component_lines;
    m_stock_component_lines_isSet = true;
}

bool OAIKitSpecificationUpdateDto::is_stock_component_lines_Set() const{
    return m_stock_component_lines_isSet;
}

bool OAIKitSpecificationUpdateDto::is_stock_component_lines_Valid() const{
    return m_stock_component_lines_isValid;
}

bool OAIKitSpecificationUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_comp_addition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_descr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_non_stock.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kit_inventory_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_stock_component_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_component_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKitSpecificationUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
