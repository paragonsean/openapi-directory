/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILotSerialClassDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILotSerialClassDto::OAILotSerialClassDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILotSerialClassDto::OAILotSerialClassDto() {
    this->initializeModel();
}

OAILotSerialClassDto::~OAILotSerialClassDto() {}

void OAILotSerialClassDto::initializeModel() {

    m_assignment_method_isSet = false;
    m_assignment_method_isValid = false;

    m_auto_generate_next_number_isSet = false;
    m_auto_generate_next_number_isValid = false;

    m_auto_incremental_value_isSet = false;
    m_auto_incremental_value_isValid = false;

    m_auto_incremental_value_between_classes_isSet = false;
    m_auto_incremental_value_between_classes_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issue_method_isSet = false;
    m_issue_method_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_required_for_drop_ship_isSet = false;
    m_required_for_drop_ship_isValid = false;

    m_track_expiration_date_isSet = false;
    m_track_expiration_date_isValid = false;

    m_tracking_method_isSet = false;
    m_tracking_method_isValid = false;
}

void OAILotSerialClassDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILotSerialClassDto::fromJsonObject(QJsonObject json) {

    m_assignment_method_isValid = ::OpenAPI::fromJsonValue(m_assignment_method, json[QString("assignmentMethod")]);
    m_assignment_method_isSet = !json[QString("assignmentMethod")].isNull() && m_assignment_method_isValid;

    m_auto_generate_next_number_isValid = ::OpenAPI::fromJsonValue(m_auto_generate_next_number, json[QString("autoGenerateNextNumber")]);
    m_auto_generate_next_number_isSet = !json[QString("autoGenerateNextNumber")].isNull() && m_auto_generate_next_number_isValid;

    m_auto_incremental_value_isValid = ::OpenAPI::fromJsonValue(m_auto_incremental_value, json[QString("autoIncrementalValue")]);
    m_auto_incremental_value_isSet = !json[QString("autoIncrementalValue")].isNull() && m_auto_incremental_value_isValid;

    m_auto_incremental_value_between_classes_isValid = ::OpenAPI::fromJsonValue(m_auto_incremental_value_between_classes, json[QString("autoIncrementalValueBetweenClasses")]);
    m_auto_incremental_value_between_classes_isSet = !json[QString("autoIncrementalValueBetweenClasses")].isNull() && m_auto_incremental_value_between_classes_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issue_method_isValid = ::OpenAPI::fromJsonValue(m_issue_method, json[QString("issueMethod")]);
    m_issue_method_isSet = !json[QString("issueMethod")].isNull() && m_issue_method_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_required_for_drop_ship_isValid = ::OpenAPI::fromJsonValue(m_required_for_drop_ship, json[QString("requiredForDropShip")]);
    m_required_for_drop_ship_isSet = !json[QString("requiredForDropShip")].isNull() && m_required_for_drop_ship_isValid;

    m_track_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_track_expiration_date, json[QString("trackExpirationDate")]);
    m_track_expiration_date_isSet = !json[QString("trackExpirationDate")].isNull() && m_track_expiration_date_isValid;

    m_tracking_method_isValid = ::OpenAPI::fromJsonValue(m_tracking_method, json[QString("trackingMethod")]);
    m_tracking_method_isSet = !json[QString("trackingMethod")].isNull() && m_tracking_method_isValid;
}

QString OAILotSerialClassDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILotSerialClassDto::asJsonObject() const {
    QJsonObject obj;
    if (m_assignment_method_isSet) {
        obj.insert(QString("assignmentMethod"), ::OpenAPI::toJsonValue(m_assignment_method));
    }
    if (m_auto_generate_next_number_isSet) {
        obj.insert(QString("autoGenerateNextNumber"), ::OpenAPI::toJsonValue(m_auto_generate_next_number));
    }
    if (m_auto_incremental_value_isSet) {
        obj.insert(QString("autoIncrementalValue"), ::OpenAPI::toJsonValue(m_auto_incremental_value));
    }
    if (m_auto_incremental_value_between_classes_isSet) {
        obj.insert(QString("autoIncrementalValueBetweenClasses"), ::OpenAPI::toJsonValue(m_auto_incremental_value_between_classes));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issue_method_isSet) {
        obj.insert(QString("issueMethod"), ::OpenAPI::toJsonValue(m_issue_method));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_required_for_drop_ship_isSet) {
        obj.insert(QString("requiredForDropShip"), ::OpenAPI::toJsonValue(m_required_for_drop_ship));
    }
    if (m_track_expiration_date_isSet) {
        obj.insert(QString("trackExpirationDate"), ::OpenAPI::toJsonValue(m_track_expiration_date));
    }
    if (m_tracking_method_isSet) {
        obj.insert(QString("trackingMethod"), ::OpenAPI::toJsonValue(m_tracking_method));
    }
    return obj;
}

QString OAILotSerialClassDto::getAssignmentMethod() const {
    return m_assignment_method;
}
void OAILotSerialClassDto::setAssignmentMethod(const QString &assignment_method) {
    m_assignment_method = assignment_method;
    m_assignment_method_isSet = true;
}

bool OAILotSerialClassDto::is_assignment_method_Set() const{
    return m_assignment_method_isSet;
}

bool OAILotSerialClassDto::is_assignment_method_Valid() const{
    return m_assignment_method_isValid;
}

bool OAILotSerialClassDto::isAutoGenerateNextNumber() const {
    return m_auto_generate_next_number;
}
void OAILotSerialClassDto::setAutoGenerateNextNumber(const bool &auto_generate_next_number) {
    m_auto_generate_next_number = auto_generate_next_number;
    m_auto_generate_next_number_isSet = true;
}

bool OAILotSerialClassDto::is_auto_generate_next_number_Set() const{
    return m_auto_generate_next_number_isSet;
}

bool OAILotSerialClassDto::is_auto_generate_next_number_Valid() const{
    return m_auto_generate_next_number_isValid;
}

QString OAILotSerialClassDto::getAutoIncrementalValue() const {
    return m_auto_incremental_value;
}
void OAILotSerialClassDto::setAutoIncrementalValue(const QString &auto_incremental_value) {
    m_auto_incremental_value = auto_incremental_value;
    m_auto_incremental_value_isSet = true;
}

bool OAILotSerialClassDto::is_auto_incremental_value_Set() const{
    return m_auto_incremental_value_isSet;
}

bool OAILotSerialClassDto::is_auto_incremental_value_Valid() const{
    return m_auto_incremental_value_isValid;
}

bool OAILotSerialClassDto::isAutoIncrementalValueBetweenClasses() const {
    return m_auto_incremental_value_between_classes;
}
void OAILotSerialClassDto::setAutoIncrementalValueBetweenClasses(const bool &auto_incremental_value_between_classes) {
    m_auto_incremental_value_between_classes = auto_incremental_value_between_classes;
    m_auto_incremental_value_between_classes_isSet = true;
}

bool OAILotSerialClassDto::is_auto_incremental_value_between_classes_Set() const{
    return m_auto_incremental_value_between_classes_isSet;
}

bool OAILotSerialClassDto::is_auto_incremental_value_between_classes_Valid() const{
    return m_auto_incremental_value_between_classes_isValid;
}

QString OAILotSerialClassDto::getDescription() const {
    return m_description;
}
void OAILotSerialClassDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILotSerialClassDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAILotSerialClassDto::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAILotSerialClassDetailDto> OAILotSerialClassDto::getDetails() const {
    return m_details;
}
void OAILotSerialClassDto::setDetails(const QList<OAILotSerialClassDetailDto> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAILotSerialClassDto::is_details_Set() const{
    return m_details_isSet;
}

bool OAILotSerialClassDto::is_details_Valid() const{
    return m_details_isValid;
}

QString OAILotSerialClassDto::getErrorInfo() const {
    return m_error_info;
}
void OAILotSerialClassDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAILotSerialClassDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAILotSerialClassDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

QString OAILotSerialClassDto::getId() const {
    return m_id;
}
void OAILotSerialClassDto::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILotSerialClassDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAILotSerialClassDto::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILotSerialClassDto::getIssueMethod() const {
    return m_issue_method;
}
void OAILotSerialClassDto::setIssueMethod(const QString &issue_method) {
    m_issue_method = issue_method;
    m_issue_method_isSet = true;
}

bool OAILotSerialClassDto::is_issue_method_Set() const{
    return m_issue_method_isSet;
}

bool OAILotSerialClassDto::is_issue_method_Valid() const{
    return m_issue_method_isValid;
}

QDateTime OAILotSerialClassDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAILotSerialClassDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAILotSerialClassDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAILotSerialClassDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAIMetadataDto OAILotSerialClassDto::getMetadata() const {
    return m_metadata;
}
void OAILotSerialClassDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAILotSerialClassDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAILotSerialClassDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

bool OAILotSerialClassDto::isRequiredForDropShip() const {
    return m_required_for_drop_ship;
}
void OAILotSerialClassDto::setRequiredForDropShip(const bool &required_for_drop_ship) {
    m_required_for_drop_ship = required_for_drop_ship;
    m_required_for_drop_ship_isSet = true;
}

bool OAILotSerialClassDto::is_required_for_drop_ship_Set() const{
    return m_required_for_drop_ship_isSet;
}

bool OAILotSerialClassDto::is_required_for_drop_ship_Valid() const{
    return m_required_for_drop_ship_isValid;
}

bool OAILotSerialClassDto::isTrackExpirationDate() const {
    return m_track_expiration_date;
}
void OAILotSerialClassDto::setTrackExpirationDate(const bool &track_expiration_date) {
    m_track_expiration_date = track_expiration_date;
    m_track_expiration_date_isSet = true;
}

bool OAILotSerialClassDto::is_track_expiration_date_Set() const{
    return m_track_expiration_date_isSet;
}

bool OAILotSerialClassDto::is_track_expiration_date_Valid() const{
    return m_track_expiration_date_isValid;
}

QString OAILotSerialClassDto::getTrackingMethod() const {
    return m_tracking_method;
}
void OAILotSerialClassDto::setTrackingMethod(const QString &tracking_method) {
    m_tracking_method = tracking_method;
    m_tracking_method_isSet = true;
}

bool OAILotSerialClassDto::is_tracking_method_Set() const{
    return m_tracking_method_isSet;
}

bool OAILotSerialClassDto::is_tracking_method_Valid() const{
    return m_tracking_method_isValid;
}

bool OAILotSerialClassDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_generate_next_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_incremental_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_incremental_value_between_classes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_for_drop_ship_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_method_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILotSerialClassDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
