/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerInvoiceLineDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerInvoiceLineDto::OAICustomerInvoiceLineDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerInvoiceLineDto::OAICustomerInvoiceLineDto() {
    this->initializeModel();
}

OAICustomerInvoiceLineDto::~OAICustomerInvoiceLineDto() {}

void OAICustomerInvoiceLineDto::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_amount_in_currency_isSet = false;
    m_amount_in_currency_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_deductable_amount_isSet = false;
    m_deductable_amount_isValid = false;

    m_deferral_code_isSet = false;
    m_deferral_code_isValid = false;

    m_deferral_schedule_isSet = false;
    m_deferral_schedule_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_discount_amount_in_currency_isSet = false;
    m_discount_amount_in_currency_isValid = false;

    m_discount_code_isSet = false;
    m_discount_code_isValid = false;

    m_discount_percent_isSet = false;
    m_discount_percent_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_external_link_isSet = false;
    m_external_link_isValid = false;

    m_inventory_number_isSet = false;
    m_inventory_number_isValid = false;

    m_is_rot_rut_deductible_isSet = false;
    m_is_rot_rut_deductible_isValid = false;

    m_item_type_isSet = false;
    m_item_type_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_line_type_isSet = false;
    m_line_type_isValid = false;

    m_manual_amount_isSet = false;
    m_manual_amount_isValid = false;

    m_manual_amount_in_currency_isSet = false;
    m_manual_amount_in_currency_isValid = false;

    m_manual_discount_isSet = false;
    m_manual_discount_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_project_task_isSet = false;
    m_project_task_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_salesperson_isSet = false;
    m_salesperson_isValid = false;

    m_seller_isSet = false;
    m_seller_isValid = false;

    m_so_order_nbr_isSet = false;
    m_so_order_nbr_isValid = false;

    m_so_order_type_isSet = false;
    m_so_order_type_isValid = false;

    m_so_shipment_nbr_isSet = false;
    m_so_shipment_nbr_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_subaccount_isSet = false;
    m_subaccount_isValid = false;

    m_term_end_date_isSet = false;
    m_term_end_date_isValid = false;

    m_term_start_date_isSet = false;
    m_term_start_date_isValid = false;

    m_type_of_work_isSet = false;
    m_type_of_work_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;

    m_unit_price_in_currency_isSet = false;
    m_unit_price_in_currency_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;

    m_vat_code_isSet = false;
    m_vat_code_isValid = false;
}

void OAICustomerInvoiceLineDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerInvoiceLineDto::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_amount_in_currency_isValid = ::OpenAPI::fromJsonValue(m_amount_in_currency, json[QString("amountInCurrency")]);
    m_amount_in_currency_isSet = !json[QString("amountInCurrency")].isNull() && m_amount_in_currency_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_deductable_amount_isValid = ::OpenAPI::fromJsonValue(m_deductable_amount, json[QString("deductableAmount")]);
    m_deductable_amount_isSet = !json[QString("deductableAmount")].isNull() && m_deductable_amount_isValid;

    m_deferral_code_isValid = ::OpenAPI::fromJsonValue(m_deferral_code, json[QString("deferralCode")]);
    m_deferral_code_isSet = !json[QString("deferralCode")].isNull() && m_deferral_code_isValid;

    m_deferral_schedule_isValid = ::OpenAPI::fromJsonValue(m_deferral_schedule, json[QString("deferralSchedule")]);
    m_deferral_schedule_isSet = !json[QString("deferralSchedule")].isNull() && m_deferral_schedule_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("discountAmount")]);
    m_discount_amount_isSet = !json[QString("discountAmount")].isNull() && m_discount_amount_isValid;

    m_discount_amount_in_currency_isValid = ::OpenAPI::fromJsonValue(m_discount_amount_in_currency, json[QString("discountAmountInCurrency")]);
    m_discount_amount_in_currency_isSet = !json[QString("discountAmountInCurrency")].isNull() && m_discount_amount_in_currency_isValid;

    m_discount_code_isValid = ::OpenAPI::fromJsonValue(m_discount_code, json[QString("discountCode")]);
    m_discount_code_isSet = !json[QString("discountCode")].isNull() && m_discount_code_isValid;

    m_discount_percent_isValid = ::OpenAPI::fromJsonValue(m_discount_percent, json[QString("discountPercent")]);
    m_discount_percent_isSet = !json[QString("discountPercent")].isNull() && m_discount_percent_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_external_link_isValid = ::OpenAPI::fromJsonValue(m_external_link, json[QString("externalLink")]);
    m_external_link_isSet = !json[QString("externalLink")].isNull() && m_external_link_isValid;

    m_inventory_number_isValid = ::OpenAPI::fromJsonValue(m_inventory_number, json[QString("inventoryNumber")]);
    m_inventory_number_isSet = !json[QString("inventoryNumber")].isNull() && m_inventory_number_isValid;

    m_is_rot_rut_deductible_isValid = ::OpenAPI::fromJsonValue(m_is_rot_rut_deductible, json[QString("isRotRutDeductible")]);
    m_is_rot_rut_deductible_isSet = !json[QString("isRotRutDeductible")].isNull() && m_is_rot_rut_deductible_isValid;

    m_item_type_isValid = ::OpenAPI::fromJsonValue(m_item_type, json[QString("itemType")]);
    m_item_type_isSet = !json[QString("itemType")].isNull() && m_item_type_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("lineNumber")]);
    m_line_number_isSet = !json[QString("lineNumber")].isNull() && m_line_number_isValid;

    m_line_type_isValid = ::OpenAPI::fromJsonValue(m_line_type, json[QString("lineType")]);
    m_line_type_isSet = !json[QString("lineType")].isNull() && m_line_type_isValid;

    m_manual_amount_isValid = ::OpenAPI::fromJsonValue(m_manual_amount, json[QString("manualAmount")]);
    m_manual_amount_isSet = !json[QString("manualAmount")].isNull() && m_manual_amount_isValid;

    m_manual_amount_in_currency_isValid = ::OpenAPI::fromJsonValue(m_manual_amount_in_currency, json[QString("manualAmountInCurrency")]);
    m_manual_amount_in_currency_isSet = !json[QString("manualAmountInCurrency")].isNull() && m_manual_amount_in_currency_isValid;

    m_manual_discount_isValid = ::OpenAPI::fromJsonValue(m_manual_discount, json[QString("manualDiscount")]);
    m_manual_discount_isSet = !json[QString("manualDiscount")].isNull() && m_manual_discount_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_project_task_isValid = ::OpenAPI::fromJsonValue(m_project_task, json[QString("projectTask")]);
    m_project_task_isSet = !json[QString("projectTask")].isNull() && m_project_task_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_salesperson_isValid = ::OpenAPI::fromJsonValue(m_salesperson, json[QString("salesperson")]);
    m_salesperson_isSet = !json[QString("salesperson")].isNull() && m_salesperson_isValid;

    m_seller_isValid = ::OpenAPI::fromJsonValue(m_seller, json[QString("seller")]);
    m_seller_isSet = !json[QString("seller")].isNull() && m_seller_isValid;

    m_so_order_nbr_isValid = ::OpenAPI::fromJsonValue(m_so_order_nbr, json[QString("soOrderNbr")]);
    m_so_order_nbr_isSet = !json[QString("soOrderNbr")].isNull() && m_so_order_nbr_isValid;

    m_so_order_type_isValid = ::OpenAPI::fromJsonValue(m_so_order_type, json[QString("soOrderType")]);
    m_so_order_type_isSet = !json[QString("soOrderType")].isNull() && m_so_order_type_isValid;

    m_so_shipment_nbr_isValid = ::OpenAPI::fromJsonValue(m_so_shipment_nbr, json[QString("soShipmentNbr")]);
    m_so_shipment_nbr_isSet = !json[QString("soShipmentNbr")].isNull() && m_so_shipment_nbr_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_subaccount_isValid = ::OpenAPI::fromJsonValue(m_subaccount, json[QString("subaccount")]);
    m_subaccount_isSet = !json[QString("subaccount")].isNull() && m_subaccount_isValid;

    m_term_end_date_isValid = ::OpenAPI::fromJsonValue(m_term_end_date, json[QString("termEndDate")]);
    m_term_end_date_isSet = !json[QString("termEndDate")].isNull() && m_term_end_date_isValid;

    m_term_start_date_isValid = ::OpenAPI::fromJsonValue(m_term_start_date, json[QString("termStartDate")]);
    m_term_start_date_isSet = !json[QString("termStartDate")].isNull() && m_term_start_date_isValid;

    m_type_of_work_isValid = ::OpenAPI::fromJsonValue(m_type_of_work, json[QString("typeOfWork")]);
    m_type_of_work_isSet = !json[QString("typeOfWork")].isNull() && m_type_of_work_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;

    m_unit_price_in_currency_isValid = ::OpenAPI::fromJsonValue(m_unit_price_in_currency, json[QString("unitPriceInCurrency")]);
    m_unit_price_in_currency_isSet = !json[QString("unitPriceInCurrency")].isNull() && m_unit_price_in_currency_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;

    m_vat_code_isValid = ::OpenAPI::fromJsonValue(m_vat_code, json[QString("vatCode")]);
    m_vat_code_isSet = !json[QString("vatCode")].isNull() && m_vat_code_isValid;
}

QString OAICustomerInvoiceLineDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerInvoiceLineDto::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_amount_in_currency_isSet) {
        obj.insert(QString("amountInCurrency"), ::OpenAPI::toJsonValue(m_amount_in_currency));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_deductable_amount_isSet) {
        obj.insert(QString("deductableAmount"), ::OpenAPI::toJsonValue(m_deductable_amount));
    }
    if (m_deferral_code_isSet) {
        obj.insert(QString("deferralCode"), ::OpenAPI::toJsonValue(m_deferral_code));
    }
    if (m_deferral_schedule_isSet) {
        obj.insert(QString("deferralSchedule"), ::OpenAPI::toJsonValue(m_deferral_schedule));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discount_amount_isSet) {
        obj.insert(QString("discountAmount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_discount_amount_in_currency_isSet) {
        obj.insert(QString("discountAmountInCurrency"), ::OpenAPI::toJsonValue(m_discount_amount_in_currency));
    }
    if (m_discount_code_isSet) {
        obj.insert(QString("discountCode"), ::OpenAPI::toJsonValue(m_discount_code));
    }
    if (m_discount_percent_isSet) {
        obj.insert(QString("discountPercent"), ::OpenAPI::toJsonValue(m_discount_percent));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_external_link_isSet) {
        obj.insert(QString("externalLink"), ::OpenAPI::toJsonValue(m_external_link));
    }
    if (m_inventory_number_isSet) {
        obj.insert(QString("inventoryNumber"), ::OpenAPI::toJsonValue(m_inventory_number));
    }
    if (m_is_rot_rut_deductible_isSet) {
        obj.insert(QString("isRotRutDeductible"), ::OpenAPI::toJsonValue(m_is_rot_rut_deductible));
    }
    if (m_item_type_isSet) {
        obj.insert(QString("itemType"), ::OpenAPI::toJsonValue(m_item_type));
    }
    if (m_line_number_isSet) {
        obj.insert(QString("lineNumber"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_line_type_isSet) {
        obj.insert(QString("lineType"), ::OpenAPI::toJsonValue(m_line_type));
    }
    if (m_manual_amount_isSet) {
        obj.insert(QString("manualAmount"), ::OpenAPI::toJsonValue(m_manual_amount));
    }
    if (m_manual_amount_in_currency_isSet) {
        obj.insert(QString("manualAmountInCurrency"), ::OpenAPI::toJsonValue(m_manual_amount_in_currency));
    }
    if (m_manual_discount_isSet) {
        obj.insert(QString("manualDiscount"), ::OpenAPI::toJsonValue(m_manual_discount));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_project_task.isSet()) {
        obj.insert(QString("projectTask"), ::OpenAPI::toJsonValue(m_project_task));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_salesperson_isSet) {
        obj.insert(QString("salesperson"), ::OpenAPI::toJsonValue(m_salesperson));
    }
    if (m_seller.isSet()) {
        obj.insert(QString("seller"), ::OpenAPI::toJsonValue(m_seller));
    }
    if (m_so_order_nbr_isSet) {
        obj.insert(QString("soOrderNbr"), ::OpenAPI::toJsonValue(m_so_order_nbr));
    }
    if (m_so_order_type_isSet) {
        obj.insert(QString("soOrderType"), ::OpenAPI::toJsonValue(m_so_order_type));
    }
    if (m_so_shipment_nbr_isSet) {
        obj.insert(QString("soShipmentNbr"), ::OpenAPI::toJsonValue(m_so_shipment_nbr));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_subaccount.isSet()) {
        obj.insert(QString("subaccount"), ::OpenAPI::toJsonValue(m_subaccount));
    }
    if (m_term_end_date_isSet) {
        obj.insert(QString("termEndDate"), ::OpenAPI::toJsonValue(m_term_end_date));
    }
    if (m_term_start_date_isSet) {
        obj.insert(QString("termStartDate"), ::OpenAPI::toJsonValue(m_term_start_date));
    }
    if (m_type_of_work.isSet()) {
        obj.insert(QString("typeOfWork"), ::OpenAPI::toJsonValue(m_type_of_work));
    }
    if (m_unit_price_isSet) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    if (m_unit_price_in_currency_isSet) {
        obj.insert(QString("unitPriceInCurrency"), ::OpenAPI::toJsonValue(m_unit_price_in_currency));
    }
    if (m_uom_isSet) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    if (m_vat_code.isSet()) {
        obj.insert(QString("vatCode"), ::OpenAPI::toJsonValue(m_vat_code));
    }
    return obj;
}

OAIAccountInCustomerInvoiceLineDto OAICustomerInvoiceLineDto::getAccount() const {
    return m_account;
}
void OAICustomerInvoiceLineDto::setAccount(const OAIAccountInCustomerInvoiceLineDto &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_account_Set() const{
    return m_account_isSet;
}

bool OAICustomerInvoiceLineDto::is_account_Valid() const{
    return m_account_isValid;
}

double OAICustomerInvoiceLineDto::getAmount() const {
    return m_amount;
}
void OAICustomerInvoiceLineDto::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAICustomerInvoiceLineDto::is_amount_Valid() const{
    return m_amount_isValid;
}

double OAICustomerInvoiceLineDto::getAmountInCurrency() const {
    return m_amount_in_currency;
}
void OAICustomerInvoiceLineDto::setAmountInCurrency(const double &amount_in_currency) {
    m_amount_in_currency = amount_in_currency;
    m_amount_in_currency_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_amount_in_currency_Set() const{
    return m_amount_in_currency_isSet;
}

bool OAICustomerInvoiceLineDto::is_amount_in_currency_Valid() const{
    return m_amount_in_currency_isValid;
}

QList<OAIAttachmentDto> OAICustomerInvoiceLineDto::getAttachments() const {
    return m_attachments;
}
void OAICustomerInvoiceLineDto::setAttachments(const QList<OAIAttachmentDto> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAICustomerInvoiceLineDto::is_attachments_Valid() const{
    return m_attachments_isValid;
}

OAIBranchNumberInCustomerInvoiceLineDto OAICustomerInvoiceLineDto::getBranchNumber() const {
    return m_branch_number;
}
void OAICustomerInvoiceLineDto::setBranchNumber(const OAIBranchNumberInCustomerInvoiceLineDto &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAICustomerInvoiceLineDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

double OAICustomerInvoiceLineDto::getCost() const {
    return m_cost;
}
void OAICustomerInvoiceLineDto::setCost(const double &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAICustomerInvoiceLineDto::is_cost_Valid() const{
    return m_cost_isValid;
}

double OAICustomerInvoiceLineDto::getDeductableAmount() const {
    return m_deductable_amount;
}
void OAICustomerInvoiceLineDto::setDeductableAmount(const double &deductable_amount) {
    m_deductable_amount = deductable_amount;
    m_deductable_amount_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_deductable_amount_Set() const{
    return m_deductable_amount_isSet;
}

bool OAICustomerInvoiceLineDto::is_deductable_amount_Valid() const{
    return m_deductable_amount_isValid;
}

QString OAICustomerInvoiceLineDto::getDeferralCode() const {
    return m_deferral_code;
}
void OAICustomerInvoiceLineDto::setDeferralCode(const QString &deferral_code) {
    m_deferral_code = deferral_code;
    m_deferral_code_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_deferral_code_Set() const{
    return m_deferral_code_isSet;
}

bool OAICustomerInvoiceLineDto::is_deferral_code_Valid() const{
    return m_deferral_code_isValid;
}

qint32 OAICustomerInvoiceLineDto::getDeferralSchedule() const {
    return m_deferral_schedule;
}
void OAICustomerInvoiceLineDto::setDeferralSchedule(const qint32 &deferral_schedule) {
    m_deferral_schedule = deferral_schedule;
    m_deferral_schedule_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_deferral_schedule_Set() const{
    return m_deferral_schedule_isSet;
}

bool OAICustomerInvoiceLineDto::is_deferral_schedule_Valid() const{
    return m_deferral_schedule_isValid;
}

QString OAICustomerInvoiceLineDto::getDescription() const {
    return m_description;
}
void OAICustomerInvoiceLineDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAICustomerInvoiceLineDto::is_description_Valid() const{
    return m_description_isValid;
}

double OAICustomerInvoiceLineDto::getDiscountAmount() const {
    return m_discount_amount;
}
void OAICustomerInvoiceLineDto::setDiscountAmount(const double &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAICustomerInvoiceLineDto::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

double OAICustomerInvoiceLineDto::getDiscountAmountInCurrency() const {
    return m_discount_amount_in_currency;
}
void OAICustomerInvoiceLineDto::setDiscountAmountInCurrency(const double &discount_amount_in_currency) {
    m_discount_amount_in_currency = discount_amount_in_currency;
    m_discount_amount_in_currency_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_discount_amount_in_currency_Set() const{
    return m_discount_amount_in_currency_isSet;
}

bool OAICustomerInvoiceLineDto::is_discount_amount_in_currency_Valid() const{
    return m_discount_amount_in_currency_isValid;
}

QString OAICustomerInvoiceLineDto::getDiscountCode() const {
    return m_discount_code;
}
void OAICustomerInvoiceLineDto::setDiscountCode(const QString &discount_code) {
    m_discount_code = discount_code;
    m_discount_code_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_discount_code_Set() const{
    return m_discount_code_isSet;
}

bool OAICustomerInvoiceLineDto::is_discount_code_Valid() const{
    return m_discount_code_isValid;
}

double OAICustomerInvoiceLineDto::getDiscountPercent() const {
    return m_discount_percent;
}
void OAICustomerInvoiceLineDto::setDiscountPercent(const double &discount_percent) {
    m_discount_percent = discount_percent;
    m_discount_percent_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_discount_percent_Set() const{
    return m_discount_percent_isSet;
}

bool OAICustomerInvoiceLineDto::is_discount_percent_Valid() const{
    return m_discount_percent_isValid;
}

QDateTime OAICustomerInvoiceLineDto::getEndDate() const {
    return m_end_date;
}
void OAICustomerInvoiceLineDto::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAICustomerInvoiceLineDto::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAICustomerInvoiceLineDto::getExternalLink() const {
    return m_external_link;
}
void OAICustomerInvoiceLineDto::setExternalLink(const QString &external_link) {
    m_external_link = external_link;
    m_external_link_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_external_link_Set() const{
    return m_external_link_isSet;
}

bool OAICustomerInvoiceLineDto::is_external_link_Valid() const{
    return m_external_link_isValid;
}

QString OAICustomerInvoiceLineDto::getInventoryNumber() const {
    return m_inventory_number;
}
void OAICustomerInvoiceLineDto::setInventoryNumber(const QString &inventory_number) {
    m_inventory_number = inventory_number;
    m_inventory_number_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_inventory_number_Set() const{
    return m_inventory_number_isSet;
}

bool OAICustomerInvoiceLineDto::is_inventory_number_Valid() const{
    return m_inventory_number_isValid;
}

bool OAICustomerInvoiceLineDto::isIsRotRutDeductible() const {
    return m_is_rot_rut_deductible;
}
void OAICustomerInvoiceLineDto::setIsRotRutDeductible(const bool &is_rot_rut_deductible) {
    m_is_rot_rut_deductible = is_rot_rut_deductible;
    m_is_rot_rut_deductible_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_is_rot_rut_deductible_Set() const{
    return m_is_rot_rut_deductible_isSet;
}

bool OAICustomerInvoiceLineDto::is_is_rot_rut_deductible_Valid() const{
    return m_is_rot_rut_deductible_isValid;
}

QString OAICustomerInvoiceLineDto::getItemType() const {
    return m_item_type;
}
void OAICustomerInvoiceLineDto::setItemType(const QString &item_type) {
    m_item_type = item_type;
    m_item_type_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_item_type_Set() const{
    return m_item_type_isSet;
}

bool OAICustomerInvoiceLineDto::is_item_type_Valid() const{
    return m_item_type_isValid;
}

qint32 OAICustomerInvoiceLineDto::getLineNumber() const {
    return m_line_number;
}
void OAICustomerInvoiceLineDto::setLineNumber(const qint32 &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAICustomerInvoiceLineDto::is_line_number_Valid() const{
    return m_line_number_isValid;
}

QString OAICustomerInvoiceLineDto::getLineType() const {
    return m_line_type;
}
void OAICustomerInvoiceLineDto::setLineType(const QString &line_type) {
    m_line_type = line_type;
    m_line_type_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_line_type_Set() const{
    return m_line_type_isSet;
}

bool OAICustomerInvoiceLineDto::is_line_type_Valid() const{
    return m_line_type_isValid;
}

double OAICustomerInvoiceLineDto::getManualAmount() const {
    return m_manual_amount;
}
void OAICustomerInvoiceLineDto::setManualAmount(const double &manual_amount) {
    m_manual_amount = manual_amount;
    m_manual_amount_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_manual_amount_Set() const{
    return m_manual_amount_isSet;
}

bool OAICustomerInvoiceLineDto::is_manual_amount_Valid() const{
    return m_manual_amount_isValid;
}

double OAICustomerInvoiceLineDto::getManualAmountInCurrency() const {
    return m_manual_amount_in_currency;
}
void OAICustomerInvoiceLineDto::setManualAmountInCurrency(const double &manual_amount_in_currency) {
    m_manual_amount_in_currency = manual_amount_in_currency;
    m_manual_amount_in_currency_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_manual_amount_in_currency_Set() const{
    return m_manual_amount_in_currency_isSet;
}

bool OAICustomerInvoiceLineDto::is_manual_amount_in_currency_Valid() const{
    return m_manual_amount_in_currency_isValid;
}

bool OAICustomerInvoiceLineDto::isManualDiscount() const {
    return m_manual_discount;
}
void OAICustomerInvoiceLineDto::setManualDiscount(const bool &manual_discount) {
    m_manual_discount = manual_discount;
    m_manual_discount_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_manual_discount_Set() const{
    return m_manual_discount_isSet;
}

bool OAICustomerInvoiceLineDto::is_manual_discount_Valid() const{
    return m_manual_discount_isValid;
}

QString OAICustomerInvoiceLineDto::getNote() const {
    return m_note;
}
void OAICustomerInvoiceLineDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAICustomerInvoiceLineDto::is_note_Valid() const{
    return m_note_isValid;
}

OAIProjectTaskIdDescriptionDto OAICustomerInvoiceLineDto::getProjectTask() const {
    return m_project_task;
}
void OAICustomerInvoiceLineDto::setProjectTask(const OAIProjectTaskIdDescriptionDto &project_task) {
    m_project_task = project_task;
    m_project_task_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_project_task_Set() const{
    return m_project_task_isSet;
}

bool OAICustomerInvoiceLineDto::is_project_task_Valid() const{
    return m_project_task_isValid;
}

double OAICustomerInvoiceLineDto::getQuantity() const {
    return m_quantity;
}
void OAICustomerInvoiceLineDto::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAICustomerInvoiceLineDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAICustomerInvoiceLineDto::getSalesperson() const {
    return m_salesperson;
}
void OAICustomerInvoiceLineDto::setSalesperson(const QString &salesperson) {
    m_salesperson = salesperson;
    m_salesperson_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_salesperson_Set() const{
    return m_salesperson_isSet;
}

bool OAICustomerInvoiceLineDto::is_salesperson_Valid() const{
    return m_salesperson_isValid;
}

OAISellerInCustomerInvoiceLineDto OAICustomerInvoiceLineDto::getSeller() const {
    return m_seller;
}
void OAICustomerInvoiceLineDto::setSeller(const OAISellerInCustomerInvoiceLineDto &seller) {
    m_seller = seller;
    m_seller_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_seller_Set() const{
    return m_seller_isSet;
}

bool OAICustomerInvoiceLineDto::is_seller_Valid() const{
    return m_seller_isValid;
}

QString OAICustomerInvoiceLineDto::getSoOrderNbr() const {
    return m_so_order_nbr;
}
void OAICustomerInvoiceLineDto::setSoOrderNbr(const QString &so_order_nbr) {
    m_so_order_nbr = so_order_nbr;
    m_so_order_nbr_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_so_order_nbr_Set() const{
    return m_so_order_nbr_isSet;
}

bool OAICustomerInvoiceLineDto::is_so_order_nbr_Valid() const{
    return m_so_order_nbr_isValid;
}

QString OAICustomerInvoiceLineDto::getSoOrderType() const {
    return m_so_order_type;
}
void OAICustomerInvoiceLineDto::setSoOrderType(const QString &so_order_type) {
    m_so_order_type = so_order_type;
    m_so_order_type_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_so_order_type_Set() const{
    return m_so_order_type_isSet;
}

bool OAICustomerInvoiceLineDto::is_so_order_type_Valid() const{
    return m_so_order_type_isValid;
}

QString OAICustomerInvoiceLineDto::getSoShipmentNbr() const {
    return m_so_shipment_nbr;
}
void OAICustomerInvoiceLineDto::setSoShipmentNbr(const QString &so_shipment_nbr) {
    m_so_shipment_nbr = so_shipment_nbr;
    m_so_shipment_nbr_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_so_shipment_nbr_Set() const{
    return m_so_shipment_nbr_isSet;
}

bool OAICustomerInvoiceLineDto::is_so_shipment_nbr_Valid() const{
    return m_so_shipment_nbr_isValid;
}

QDateTime OAICustomerInvoiceLineDto::getStartDate() const {
    return m_start_date;
}
void OAICustomerInvoiceLineDto::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAICustomerInvoiceLineDto::is_start_date_Valid() const{
    return m_start_date_isValid;
}

OAISubaccountInCustomerInvoiceLineDto OAICustomerInvoiceLineDto::getSubaccount() const {
    return m_subaccount;
}
void OAICustomerInvoiceLineDto::setSubaccount(const OAISubaccountInCustomerInvoiceLineDto &subaccount) {
    m_subaccount = subaccount;
    m_subaccount_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_subaccount_Set() const{
    return m_subaccount_isSet;
}

bool OAICustomerInvoiceLineDto::is_subaccount_Valid() const{
    return m_subaccount_isValid;
}

QDateTime OAICustomerInvoiceLineDto::getTermEndDate() const {
    return m_term_end_date;
}
void OAICustomerInvoiceLineDto::setTermEndDate(const QDateTime &term_end_date) {
    m_term_end_date = term_end_date;
    m_term_end_date_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_term_end_date_Set() const{
    return m_term_end_date_isSet;
}

bool OAICustomerInvoiceLineDto::is_term_end_date_Valid() const{
    return m_term_end_date_isValid;
}

QDateTime OAICustomerInvoiceLineDto::getTermStartDate() const {
    return m_term_start_date;
}
void OAICustomerInvoiceLineDto::setTermStartDate(const QDateTime &term_start_date) {
    m_term_start_date = term_start_date;
    m_term_start_date_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_term_start_date_Set() const{
    return m_term_start_date_isSet;
}

bool OAICustomerInvoiceLineDto::is_term_start_date_Valid() const{
    return m_term_start_date_isValid;
}

OAIWorkTypeDto OAICustomerInvoiceLineDto::getTypeOfWork() const {
    return m_type_of_work;
}
void OAICustomerInvoiceLineDto::setTypeOfWork(const OAIWorkTypeDto &type_of_work) {
    m_type_of_work = type_of_work;
    m_type_of_work_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_type_of_work_Set() const{
    return m_type_of_work_isSet;
}

bool OAICustomerInvoiceLineDto::is_type_of_work_Valid() const{
    return m_type_of_work_isValid;
}

double OAICustomerInvoiceLineDto::getUnitPrice() const {
    return m_unit_price;
}
void OAICustomerInvoiceLineDto::setUnitPrice(const double &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAICustomerInvoiceLineDto::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

double OAICustomerInvoiceLineDto::getUnitPriceInCurrency() const {
    return m_unit_price_in_currency;
}
void OAICustomerInvoiceLineDto::setUnitPriceInCurrency(const double &unit_price_in_currency) {
    m_unit_price_in_currency = unit_price_in_currency;
    m_unit_price_in_currency_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_unit_price_in_currency_Set() const{
    return m_unit_price_in_currency_isSet;
}

bool OAICustomerInvoiceLineDto::is_unit_price_in_currency_Valid() const{
    return m_unit_price_in_currency_isValid;
}

QString OAICustomerInvoiceLineDto::getUom() const {
    return m_uom;
}
void OAICustomerInvoiceLineDto::setUom(const QString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAICustomerInvoiceLineDto::is_uom_Valid() const{
    return m_uom_isValid;
}

OAIVatCodeInCustomerInvoiceLineDto OAICustomerInvoiceLineDto::getVatCode() const {
    return m_vat_code;
}
void OAICustomerInvoiceLineDto::setVatCode(const OAIVatCodeInCustomerInvoiceLineDto &vat_code) {
    m_vat_code = vat_code;
    m_vat_code_isSet = true;
}

bool OAICustomerInvoiceLineDto::is_vat_code_Set() const{
    return m_vat_code_isSet;
}

bool OAICustomerInvoiceLineDto::is_vat_code_Valid() const{
    return m_vat_code_isValid;
}

bool OAICustomerInvoiceLineDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deductable_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deferral_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deferral_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_rot_rut_deductible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_amount_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_salesperson_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_so_order_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_so_order_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_so_shipment_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_of_work.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_code.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerInvoiceLineDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
