/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmployeeUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmployeeUpdateDto::OAIEmployeeUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmployeeUpdateDto::OAIEmployeeUpdateDto() {
    this->initializeModel();
}

OAIEmployeeUpdateDto::~OAIEmployeeUpdateDto() {}

void OAIEmployeeUpdateDto::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_calendar_isSet = false;
    m_calendar_isValid = false;

    m_company_tree_info_isSet = false;
    m_company_tree_info_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_department_isSet = false;
    m_department_isValid = false;

    m_employee_class_isSet = false;
    m_employee_class_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIEmployeeUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmployeeUpdateDto::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_calendar_isValid = ::OpenAPI::fromJsonValue(m_calendar, json[QString("calendar")]);
    m_calendar_isSet = !json[QString("calendar")].isNull() && m_calendar_isValid;

    m_company_tree_info_isValid = ::OpenAPI::fromJsonValue(m_company_tree_info, json[QString("companyTreeInfo")]);
    m_company_tree_info_isSet = !json[QString("companyTreeInfo")].isNull() && m_company_tree_info_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_department_isValid = ::OpenAPI::fromJsonValue(m_department, json[QString("department")]);
    m_department_isSet = !json[QString("department")].isNull() && m_department_isValid;

    m_employee_class_isValid = ::OpenAPI::fromJsonValue(m_employee_class, json[QString("employeeClass")]);
    m_employee_class_isSet = !json[QString("employeeClass")].isNull() && m_employee_class_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIEmployeeUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmployeeUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_calendar.isSet()) {
        obj.insert(QString("calendar"), ::OpenAPI::toJsonValue(m_calendar));
    }
    if (m_company_tree_info.size() > 0) {
        obj.insert(QString("companyTreeInfo"), ::OpenAPI::toJsonValue(m_company_tree_info));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_department.isSet()) {
        obj.insert(QString("department"), ::OpenAPI::toJsonValue(m_department));
    }
    if (m_employee_class.isSet()) {
        obj.insert(QString("employeeClass"), ::OpenAPI::toJsonValue(m_employee_class));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIAddressInEmployeeUpdateDto OAIEmployeeUpdateDto::getAddress() const {
    return m_address;
}
void OAIEmployeeUpdateDto::setAddress(const OAIAddressInEmployeeUpdateDto &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIEmployeeUpdateDto::is_address_Set() const{
    return m_address_isSet;
}

bool OAIEmployeeUpdateDto::is_address_Valid() const{
    return m_address_isValid;
}

OAIDtoValueOfString OAIEmployeeUpdateDto::getBranch() const {
    return m_branch;
}
void OAIEmployeeUpdateDto::setBranch(const OAIDtoValueOfString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIEmployeeUpdateDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIEmployeeUpdateDto::is_branch_Valid() const{
    return m_branch_isValid;
}

OAIDtoValueOfString OAIEmployeeUpdateDto::getCalendar() const {
    return m_calendar;
}
void OAIEmployeeUpdateDto::setCalendar(const OAIDtoValueOfString &calendar) {
    m_calendar = calendar;
    m_calendar_isSet = true;
}

bool OAIEmployeeUpdateDto::is_calendar_Set() const{
    return m_calendar_isSet;
}

bool OAIEmployeeUpdateDto::is_calendar_Valid() const{
    return m_calendar_isValid;
}

QList<OAICompanyTreeInfoDto> OAIEmployeeUpdateDto::getCompanyTreeInfo() const {
    return m_company_tree_info;
}
void OAIEmployeeUpdateDto::setCompanyTreeInfo(const QList<OAICompanyTreeInfoDto> &company_tree_info) {
    m_company_tree_info = company_tree_info;
    m_company_tree_info_isSet = true;
}

bool OAIEmployeeUpdateDto::is_company_tree_info_Set() const{
    return m_company_tree_info_isSet;
}

bool OAIEmployeeUpdateDto::is_company_tree_info_Valid() const{
    return m_company_tree_info_isValid;
}

OAIContactInEmployeeUpdateDto OAIEmployeeUpdateDto::getContact() const {
    return m_contact;
}
void OAIEmployeeUpdateDto::setContact(const OAIContactInEmployeeUpdateDto &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIEmployeeUpdateDto::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIEmployeeUpdateDto::is_contact_Valid() const{
    return m_contact_isValid;
}

OAIDepartmentInEmployeeUpdateDto OAIEmployeeUpdateDto::getDepartment() const {
    return m_department;
}
void OAIEmployeeUpdateDto::setDepartment(const OAIDepartmentInEmployeeUpdateDto &department) {
    m_department = department;
    m_department_isSet = true;
}

bool OAIEmployeeUpdateDto::is_department_Set() const{
    return m_department_isSet;
}

bool OAIEmployeeUpdateDto::is_department_Valid() const{
    return m_department_isValid;
}

OAIDtoValueOfString OAIEmployeeUpdateDto::getEmployeeClass() const {
    return m_employee_class;
}
void OAIEmployeeUpdateDto::setEmployeeClass(const OAIDtoValueOfString &employee_class) {
    m_employee_class = employee_class;
    m_employee_class_isSet = true;
}

bool OAIEmployeeUpdateDto::is_employee_class_Set() const{
    return m_employee_class_isSet;
}

bool OAIEmployeeUpdateDto::is_employee_class_Valid() const{
    return m_employee_class_isValid;
}

OAIStatusInEmployeeUpdateDto OAIEmployeeUpdateDto::getStatus() const {
    return m_status;
}
void OAIEmployeeUpdateDto::setStatus(const OAIStatusInEmployeeUpdateDto &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEmployeeUpdateDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEmployeeUpdateDto::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIEmployeeUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_calendar.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_tree_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_department.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmployeeUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contact_isValid && true;
}

} // namespace OpenAPI
