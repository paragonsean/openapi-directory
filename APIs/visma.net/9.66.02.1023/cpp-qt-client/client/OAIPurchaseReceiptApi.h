/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPurchaseReceiptApi_H
#define OAI_OAIPurchaseReceiptApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddOrderLinesToPurchaseReceiptActionResultDto.h"
#include "OAIAddOrdersToPurchaseReceiptActionResultDto.h"
#include "OAIBackgroundApiAcceptedDto.h"
#include "OAIObject.h"
#include "OAIPurchaseReceiptDto.h"
#include "OAIPurchaseReceiptOrderLinesListUpdateDto.h"
#include "OAIPurchaseReceiptOrderListUpdateDto.h"
#include "OAIPurchaseReceiptUpdateDto.h"
#include "OAIReleasePurchaseReceiptActionResultDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPurchaseReceiptApi : public QObject {
    Q_OBJECT

public:
    OAIPurchaseReceiptApi(const int timeOut = 0);
    ~OAIPurchaseReceiptApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  receipt_number QString [required]
    * @param[in]  oai_purchase_receipt_order_lines_list_update_dto OAIPurchaseReceiptOrderLinesListUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void purchaseReceiptAddPurchaseOrderLinesByreceiptNumber(const QString &receipt_number, const OAIPurchaseReceiptOrderLinesListUpdateDto &oai_purchase_receipt_order_lines_list_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  receipt_number QString [required]
    * @param[in]  oai_purchase_receipt_order_list_update_dto OAIPurchaseReceiptOrderListUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void purchaseReceiptAddPurchaseOrdersByreceiptNumber(const QString &receipt_number, const OAIPurchaseReceiptOrderListUpdateDto &oai_purchase_receipt_order_list_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  receipt_type QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  supplier QString [optional]
    * @param[in]  po_order_nbr QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void purchaseReceiptGetAllReceiptBasic(const ::OpenAPI::OptionalParam<QString> &receipt_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &supplier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &po_order_nbr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  receipt_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void purchaseReceiptGetPurchaseReceiptBasicByreceiptNumber(const QString &receipt_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_purchase_receipt_update_dto OAIPurchaseReceiptUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void purchaseReceiptPost(const OAIPurchaseReceiptUpdateDto &oai_purchase_receipt_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  receipt_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void purchaseReceiptPrintPurchaseReceiptByreceiptNumber(const QString &receipt_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  receipt_number QString [required]
    * @param[in]  oai_purchase_receipt_update_dto OAIPurchaseReceiptUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void purchaseReceiptPutByreceiptNumber(const QString &receipt_number, const OAIPurchaseReceiptUpdateDto &oai_purchase_receipt_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  receipt_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void purchaseReceiptReleaseInvoiceByreceiptNumber(const QString &receipt_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void purchaseReceiptAddPurchaseOrderLinesByreceiptNumberCallback(OAIHttpRequestWorker *worker);
    void purchaseReceiptAddPurchaseOrdersByreceiptNumberCallback(OAIHttpRequestWorker *worker);
    void purchaseReceiptGetAllReceiptBasicCallback(OAIHttpRequestWorker *worker);
    void purchaseReceiptGetPurchaseReceiptBasicByreceiptNumberCallback(OAIHttpRequestWorker *worker);
    void purchaseReceiptPostCallback(OAIHttpRequestWorker *worker);
    void purchaseReceiptPrintPurchaseReceiptByreceiptNumberCallback(OAIHttpRequestWorker *worker);
    void purchaseReceiptPutByreceiptNumberCallback(OAIHttpRequestWorker *worker);
    void purchaseReceiptReleaseInvoiceByreceiptNumberCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void purchaseReceiptAddPurchaseOrderLinesByreceiptNumberSignal(OAIAddOrderLinesToPurchaseReceiptActionResultDto summary);
    void purchaseReceiptAddPurchaseOrdersByreceiptNumberSignal(OAIAddOrdersToPurchaseReceiptActionResultDto summary);
    void purchaseReceiptGetAllReceiptBasicSignal(QList<OAIPurchaseReceiptDto> summary);
    void purchaseReceiptGetPurchaseReceiptBasicByreceiptNumberSignal(OAIPurchaseReceiptDto summary);
    void purchaseReceiptPostSignal(OAIObject summary);
    void purchaseReceiptPrintPurchaseReceiptByreceiptNumberSignal(OAIObject summary);
    void purchaseReceiptPutByreceiptNumberSignal(OAIBackgroundApiAcceptedDto summary);
    void purchaseReceiptReleaseInvoiceByreceiptNumberSignal(OAIReleasePurchaseReceiptActionResultDto summary);


    void purchaseReceiptAddPurchaseOrderLinesByreceiptNumberSignalFull(OAIHttpRequestWorker *worker, OAIAddOrderLinesToPurchaseReceiptActionResultDto summary);
    void purchaseReceiptAddPurchaseOrdersByreceiptNumberSignalFull(OAIHttpRequestWorker *worker, OAIAddOrdersToPurchaseReceiptActionResultDto summary);
    void purchaseReceiptGetAllReceiptBasicSignalFull(OAIHttpRequestWorker *worker, QList<OAIPurchaseReceiptDto> summary);
    void purchaseReceiptGetPurchaseReceiptBasicByreceiptNumberSignalFull(OAIHttpRequestWorker *worker, OAIPurchaseReceiptDto summary);
    void purchaseReceiptPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void purchaseReceiptPrintPurchaseReceiptByreceiptNumberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void purchaseReceiptPutByreceiptNumberSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);
    void purchaseReceiptReleaseInvoiceByreceiptNumberSignalFull(OAIHttpRequestWorker *worker, OAIReleasePurchaseReceiptActionResultDto summary);

    Q_DECL_DEPRECATED_X("Use purchaseReceiptAddPurchaseOrderLinesByreceiptNumberSignalError() instead")
    void purchaseReceiptAddPurchaseOrderLinesByreceiptNumberSignalE(OAIAddOrderLinesToPurchaseReceiptActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseReceiptAddPurchaseOrderLinesByreceiptNumberSignalError(OAIAddOrderLinesToPurchaseReceiptActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purchaseReceiptAddPurchaseOrdersByreceiptNumberSignalError() instead")
    void purchaseReceiptAddPurchaseOrdersByreceiptNumberSignalE(OAIAddOrdersToPurchaseReceiptActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseReceiptAddPurchaseOrdersByreceiptNumberSignalError(OAIAddOrdersToPurchaseReceiptActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purchaseReceiptGetAllReceiptBasicSignalError() instead")
    void purchaseReceiptGetAllReceiptBasicSignalE(QList<OAIPurchaseReceiptDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseReceiptGetAllReceiptBasicSignalError(QList<OAIPurchaseReceiptDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purchaseReceiptGetPurchaseReceiptBasicByreceiptNumberSignalError() instead")
    void purchaseReceiptGetPurchaseReceiptBasicByreceiptNumberSignalE(OAIPurchaseReceiptDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseReceiptGetPurchaseReceiptBasicByreceiptNumberSignalError(OAIPurchaseReceiptDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purchaseReceiptPostSignalError() instead")
    void purchaseReceiptPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseReceiptPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purchaseReceiptPrintPurchaseReceiptByreceiptNumberSignalError() instead")
    void purchaseReceiptPrintPurchaseReceiptByreceiptNumberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseReceiptPrintPurchaseReceiptByreceiptNumberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purchaseReceiptPutByreceiptNumberSignalError() instead")
    void purchaseReceiptPutByreceiptNumberSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseReceiptPutByreceiptNumberSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purchaseReceiptReleaseInvoiceByreceiptNumberSignalError() instead")
    void purchaseReceiptReleaseInvoiceByreceiptNumberSignalE(OAIReleasePurchaseReceiptActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseReceiptReleaseInvoiceByreceiptNumberSignalError(OAIReleasePurchaseReceiptActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use purchaseReceiptAddPurchaseOrderLinesByreceiptNumberSignalErrorFull() instead")
    void purchaseReceiptAddPurchaseOrderLinesByreceiptNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseReceiptAddPurchaseOrderLinesByreceiptNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purchaseReceiptAddPurchaseOrdersByreceiptNumberSignalErrorFull() instead")
    void purchaseReceiptAddPurchaseOrdersByreceiptNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseReceiptAddPurchaseOrdersByreceiptNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purchaseReceiptGetAllReceiptBasicSignalErrorFull() instead")
    void purchaseReceiptGetAllReceiptBasicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseReceiptGetAllReceiptBasicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purchaseReceiptGetPurchaseReceiptBasicByreceiptNumberSignalErrorFull() instead")
    void purchaseReceiptGetPurchaseReceiptBasicByreceiptNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseReceiptGetPurchaseReceiptBasicByreceiptNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purchaseReceiptPostSignalErrorFull() instead")
    void purchaseReceiptPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseReceiptPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purchaseReceiptPrintPurchaseReceiptByreceiptNumberSignalErrorFull() instead")
    void purchaseReceiptPrintPurchaseReceiptByreceiptNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseReceiptPrintPurchaseReceiptByreceiptNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purchaseReceiptPutByreceiptNumberSignalErrorFull() instead")
    void purchaseReceiptPutByreceiptNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseReceiptPutByreceiptNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purchaseReceiptReleaseInvoiceByreceiptNumberSignalErrorFull() instead")
    void purchaseReceiptReleaseInvoiceByreceiptNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseReceiptReleaseInvoiceByreceiptNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
