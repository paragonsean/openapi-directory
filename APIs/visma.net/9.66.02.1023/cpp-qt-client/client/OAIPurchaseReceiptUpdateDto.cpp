/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseReceiptUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseReceiptUpdateDto::OAIPurchaseReceiptUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseReceiptUpdateDto::OAIPurchaseReceiptUpdateDto() {
    this->initializeModel();
}

OAIPurchaseReceiptUpdateDto::~OAIPurchaseReceiptUpdateDto() {}

void OAIPurchaseReceiptUpdateDto::initializeModel() {

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_control_amount_isSet = false;
    m_control_amount_isValid = false;

    m_control_qty_isSet = false;
    m_control_qty_isValid = false;

    m_create_bill_isSet = false;
    m_create_bill_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_landed_cost_isSet = false;
    m_landed_cost_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_post_period_isSet = false;
    m_post_period_isValid = false;

    m_receipt_nbr_isSet = false;
    m_receipt_nbr_isValid = false;

    m_receipt_type_isSet = false;
    m_receipt_type_isValid = false;

    m_supplier_id_isSet = false;
    m_supplier_id_isValid = false;

    m_supplier_ref_isSet = false;
    m_supplier_ref_isValid = false;

    m_warehouse_id_isSet = false;
    m_warehouse_id_isValid = false;
}

void OAIPurchaseReceiptUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseReceiptUpdateDto::fromJsonObject(QJsonObject json) {

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_control_amount_isValid = ::OpenAPI::fromJsonValue(m_control_amount, json[QString("controlAmount")]);
    m_control_amount_isSet = !json[QString("controlAmount")].isNull() && m_control_amount_isValid;

    m_control_qty_isValid = ::OpenAPI::fromJsonValue(m_control_qty, json[QString("controlQty")]);
    m_control_qty_isSet = !json[QString("controlQty")].isNull() && m_control_qty_isValid;

    m_create_bill_isValid = ::OpenAPI::fromJsonValue(m_create_bill, json[QString("createBill")]);
    m_create_bill_isSet = !json[QString("createBill")].isNull() && m_create_bill_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("exchangeRate")]);
    m_exchange_rate_isSet = !json[QString("exchangeRate")].isNull() && m_exchange_rate_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_landed_cost_isValid = ::OpenAPI::fromJsonValue(m_landed_cost, json[QString("landedCost")]);
    m_landed_cost_isSet = !json[QString("landedCost")].isNull() && m_landed_cost_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_post_period_isValid = ::OpenAPI::fromJsonValue(m_post_period, json[QString("postPeriod")]);
    m_post_period_isSet = !json[QString("postPeriod")].isNull() && m_post_period_isValid;

    m_receipt_nbr_isValid = ::OpenAPI::fromJsonValue(m_receipt_nbr, json[QString("receiptNbr")]);
    m_receipt_nbr_isSet = !json[QString("receiptNbr")].isNull() && m_receipt_nbr_isValid;

    m_receipt_type_isValid = ::OpenAPI::fromJsonValue(m_receipt_type, json[QString("receiptType")]);
    m_receipt_type_isSet = !json[QString("receiptType")].isNull() && m_receipt_type_isValid;

    m_supplier_id_isValid = ::OpenAPI::fromJsonValue(m_supplier_id, json[QString("supplierId")]);
    m_supplier_id_isSet = !json[QString("supplierId")].isNull() && m_supplier_id_isValid;

    m_supplier_ref_isValid = ::OpenAPI::fromJsonValue(m_supplier_ref, json[QString("supplierRef")]);
    m_supplier_ref_isSet = !json[QString("supplierRef")].isNull() && m_supplier_ref_isValid;

    m_warehouse_id_isValid = ::OpenAPI::fromJsonValue(m_warehouse_id, json[QString("warehouseId")]);
    m_warehouse_id_isSet = !json[QString("warehouseId")].isNull() && m_warehouse_id_isValid;
}

QString OAIPurchaseReceiptUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseReceiptUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_control_amount.isSet()) {
        obj.insert(QString("controlAmount"), ::OpenAPI::toJsonValue(m_control_amount));
    }
    if (m_control_qty.isSet()) {
        obj.insert(QString("controlQty"), ::OpenAPI::toJsonValue(m_control_qty));
    }
    if (m_create_bill.isSet()) {
        obj.insert(QString("createBill"), ::OpenAPI::toJsonValue(m_create_bill));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date.isSet()) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_exchange_rate.isSet()) {
        obj.insert(QString("exchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_hold.isSet()) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_landed_cost.size() > 0) {
        obj.insert(QString("landedCost"), ::OpenAPI::toJsonValue(m_landed_cost));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_location_id.isSet()) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_post_period.isSet()) {
        obj.insert(QString("postPeriod"), ::OpenAPI::toJsonValue(m_post_period));
    }
    if (m_receipt_nbr.isSet()) {
        obj.insert(QString("receiptNbr"), ::OpenAPI::toJsonValue(m_receipt_nbr));
    }
    if (m_receipt_type.isSet()) {
        obj.insert(QString("receiptType"), ::OpenAPI::toJsonValue(m_receipt_type));
    }
    if (m_supplier_id.isSet()) {
        obj.insert(QString("supplierId"), ::OpenAPI::toJsonValue(m_supplier_id));
    }
    if (m_supplier_ref.isSet()) {
        obj.insert(QString("supplierRef"), ::OpenAPI::toJsonValue(m_supplier_ref));
    }
    if (m_warehouse_id.isSet()) {
        obj.insert(QString("warehouseId"), ::OpenAPI::toJsonValue(m_warehouse_id));
    }
    return obj;
}

OAIDtoValueOfString OAIPurchaseReceiptUpdateDto::getBranchNumber() const {
    return m_branch_number;
}
void OAIPurchaseReceiptUpdateDto::setBranchNumber(const OAIDtoValueOfString &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAIPurchaseReceiptUpdateDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAIPurchaseReceiptUpdateDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIPurchaseReceiptUpdateDto::getControlAmount() const {
    return m_control_amount;
}
void OAIPurchaseReceiptUpdateDto::setControlAmount(const OAIDtoValueOfNullableOfDecimal &control_amount) {
    m_control_amount = control_amount;
    m_control_amount_isSet = true;
}

bool OAIPurchaseReceiptUpdateDto::is_control_amount_Set() const{
    return m_control_amount_isSet;
}

bool OAIPurchaseReceiptUpdateDto::is_control_amount_Valid() const{
    return m_control_amount_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIPurchaseReceiptUpdateDto::getControlQty() const {
    return m_control_qty;
}
void OAIPurchaseReceiptUpdateDto::setControlQty(const OAIDtoValueOfNullableOfDecimal &control_qty) {
    m_control_qty = control_qty;
    m_control_qty_isSet = true;
}

bool OAIPurchaseReceiptUpdateDto::is_control_qty_Set() const{
    return m_control_qty_isSet;
}

bool OAIPurchaseReceiptUpdateDto::is_control_qty_Valid() const{
    return m_control_qty_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIPurchaseReceiptUpdateDto::getCreateBill() const {
    return m_create_bill;
}
void OAIPurchaseReceiptUpdateDto::setCreateBill(const OAIDtoValueOfNullableOfBoolean &create_bill) {
    m_create_bill = create_bill;
    m_create_bill_isSet = true;
}

bool OAIPurchaseReceiptUpdateDto::is_create_bill_Set() const{
    return m_create_bill_isSet;
}

bool OAIPurchaseReceiptUpdateDto::is_create_bill_Valid() const{
    return m_create_bill_isValid;
}

OAIDtoValueOfString OAIPurchaseReceiptUpdateDto::getCurrency() const {
    return m_currency;
}
void OAIPurchaseReceiptUpdateDto::setCurrency(const OAIDtoValueOfString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPurchaseReceiptUpdateDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPurchaseReceiptUpdateDto::is_currency_Valid() const{
    return m_currency_isValid;
}

OAIDtoValueOfNullableOfDateTime OAIPurchaseReceiptUpdateDto::getDate() const {
    return m_date;
}
void OAIPurchaseReceiptUpdateDto::setDate(const OAIDtoValueOfNullableOfDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIPurchaseReceiptUpdateDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAIPurchaseReceiptUpdateDto::is_date_Valid() const{
    return m_date_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIPurchaseReceiptUpdateDto::getExchangeRate() const {
    return m_exchange_rate;
}
void OAIPurchaseReceiptUpdateDto::setExchangeRate(const OAIDtoValueOfNullableOfDecimal &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAIPurchaseReceiptUpdateDto::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAIPurchaseReceiptUpdateDto::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIPurchaseReceiptUpdateDto::getHold() const {
    return m_hold;
}
void OAIPurchaseReceiptUpdateDto::setHold(const OAIDtoValueOfNullableOfBoolean &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAIPurchaseReceiptUpdateDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAIPurchaseReceiptUpdateDto::is_hold_Valid() const{
    return m_hold_isValid;
}

QList<OAILandedCostUpdateDto> OAIPurchaseReceiptUpdateDto::getLandedCost() const {
    return m_landed_cost;
}
void OAIPurchaseReceiptUpdateDto::setLandedCost(const QList<OAILandedCostUpdateDto> &landed_cost) {
    m_landed_cost = landed_cost;
    m_landed_cost_isSet = true;
}

bool OAIPurchaseReceiptUpdateDto::is_landed_cost_Set() const{
    return m_landed_cost_isSet;
}

bool OAIPurchaseReceiptUpdateDto::is_landed_cost_Valid() const{
    return m_landed_cost_isValid;
}

QList<OAIPurchaseReceiptLineUpdateDto> OAIPurchaseReceiptUpdateDto::getLines() const {
    return m_lines;
}
void OAIPurchaseReceiptUpdateDto::setLines(const QList<OAIPurchaseReceiptLineUpdateDto> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAIPurchaseReceiptUpdateDto::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAIPurchaseReceiptUpdateDto::is_lines_Valid() const{
    return m_lines_isValid;
}

OAIDtoValueOfString OAIPurchaseReceiptUpdateDto::getLocationId() const {
    return m_location_id;
}
void OAIPurchaseReceiptUpdateDto::setLocationId(const OAIDtoValueOfString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIPurchaseReceiptUpdateDto::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIPurchaseReceiptUpdateDto::is_location_id_Valid() const{
    return m_location_id_isValid;
}

OAIPostPeriodInPurchaseReceiptUpdateDto OAIPurchaseReceiptUpdateDto::getPostPeriod() const {
    return m_post_period;
}
void OAIPurchaseReceiptUpdateDto::setPostPeriod(const OAIPostPeriodInPurchaseReceiptUpdateDto &post_period) {
    m_post_period = post_period;
    m_post_period_isSet = true;
}

bool OAIPurchaseReceiptUpdateDto::is_post_period_Set() const{
    return m_post_period_isSet;
}

bool OAIPurchaseReceiptUpdateDto::is_post_period_Valid() const{
    return m_post_period_isValid;
}

OAIDtoValueOfString OAIPurchaseReceiptUpdateDto::getReceiptNbr() const {
    return m_receipt_nbr;
}
void OAIPurchaseReceiptUpdateDto::setReceiptNbr(const OAIDtoValueOfString &receipt_nbr) {
    m_receipt_nbr = receipt_nbr;
    m_receipt_nbr_isSet = true;
}

bool OAIPurchaseReceiptUpdateDto::is_receipt_nbr_Set() const{
    return m_receipt_nbr_isSet;
}

bool OAIPurchaseReceiptUpdateDto::is_receipt_nbr_Valid() const{
    return m_receipt_nbr_isValid;
}

OAIDtoValueOfPurchaseReceiptType OAIPurchaseReceiptUpdateDto::getReceiptType() const {
    return m_receipt_type;
}
void OAIPurchaseReceiptUpdateDto::setReceiptType(const OAIDtoValueOfPurchaseReceiptType &receipt_type) {
    m_receipt_type = receipt_type;
    m_receipt_type_isSet = true;
}

bool OAIPurchaseReceiptUpdateDto::is_receipt_type_Set() const{
    return m_receipt_type_isSet;
}

bool OAIPurchaseReceiptUpdateDto::is_receipt_type_Valid() const{
    return m_receipt_type_isValid;
}

OAIDtoValueOfString OAIPurchaseReceiptUpdateDto::getSupplierId() const {
    return m_supplier_id;
}
void OAIPurchaseReceiptUpdateDto::setSupplierId(const OAIDtoValueOfString &supplier_id) {
    m_supplier_id = supplier_id;
    m_supplier_id_isSet = true;
}

bool OAIPurchaseReceiptUpdateDto::is_supplier_id_Set() const{
    return m_supplier_id_isSet;
}

bool OAIPurchaseReceiptUpdateDto::is_supplier_id_Valid() const{
    return m_supplier_id_isValid;
}

OAIDtoValueOfString OAIPurchaseReceiptUpdateDto::getSupplierRef() const {
    return m_supplier_ref;
}
void OAIPurchaseReceiptUpdateDto::setSupplierRef(const OAIDtoValueOfString &supplier_ref) {
    m_supplier_ref = supplier_ref;
    m_supplier_ref_isSet = true;
}

bool OAIPurchaseReceiptUpdateDto::is_supplier_ref_Set() const{
    return m_supplier_ref_isSet;
}

bool OAIPurchaseReceiptUpdateDto::is_supplier_ref_Valid() const{
    return m_supplier_ref_isValid;
}

OAIDtoValueOfString OAIPurchaseReceiptUpdateDto::getWarehouseId() const {
    return m_warehouse_id;
}
void OAIPurchaseReceiptUpdateDto::setWarehouseId(const OAIDtoValueOfString &warehouse_id) {
    m_warehouse_id = warehouse_id;
    m_warehouse_id_isSet = true;
}

bool OAIPurchaseReceiptUpdateDto::is_warehouse_id_Set() const{
    return m_warehouse_id_isSet;
}

bool OAIPurchaseReceiptUpdateDto::is_warehouse_id_Valid() const{
    return m_warehouse_id_isValid;
}

bool OAIPurchaseReceiptUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_qty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_bill.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_landed_cost.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseReceiptUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
