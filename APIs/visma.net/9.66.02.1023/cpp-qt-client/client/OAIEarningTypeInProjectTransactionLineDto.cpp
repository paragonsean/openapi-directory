/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEarningTypeInProjectTransactionLineDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEarningTypeInProjectTransactionLineDto::OAIEarningTypeInProjectTransactionLineDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEarningTypeInProjectTransactionLineDto::OAIEarningTypeInProjectTransactionLineDto() {
    this->initializeModel();
}

OAIEarningTypeInProjectTransactionLineDto::~OAIEarningTypeInProjectTransactionLineDto() {}

void OAIEarningTypeInProjectTransactionLineDto::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_billable_isSet = false;
    m_is_billable_isValid = false;

    m_is_overtime_isSet = false;
    m_is_overtime_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_overtime_multiplier_isSet = false;
    m_overtime_multiplier_isValid = false;
}

void OAIEarningTypeInProjectTransactionLineDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEarningTypeInProjectTransactionLineDto::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_is_billable_isValid = ::OpenAPI::fromJsonValue(m_is_billable, json[QString("isBillable")]);
    m_is_billable_isSet = !json[QString("isBillable")].isNull() && m_is_billable_isValid;

    m_is_overtime_isValid = ::OpenAPI::fromJsonValue(m_is_overtime, json[QString("isOvertime")]);
    m_is_overtime_isSet = !json[QString("isOvertime")].isNull() && m_is_overtime_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_overtime_multiplier_isValid = ::OpenAPI::fromJsonValue(m_overtime_multiplier, json[QString("overtimeMultiplier")]);
    m_overtime_multiplier_isSet = !json[QString("overtimeMultiplier")].isNull() && m_overtime_multiplier_isValid;
}

QString OAIEarningTypeInProjectTransactionLineDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEarningTypeInProjectTransactionLineDto::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_billable_isSet) {
        obj.insert(QString("isBillable"), ::OpenAPI::toJsonValue(m_is_billable));
    }
    if (m_is_overtime_isSet) {
        obj.insert(QString("isOvertime"), ::OpenAPI::toJsonValue(m_is_overtime));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_overtime_multiplier_isSet) {
        obj.insert(QString("overtimeMultiplier"), ::OpenAPI::toJsonValue(m_overtime_multiplier));
    }
    return obj;
}

QString OAIEarningTypeInProjectTransactionLineDto::getCode() const {
    return m_code;
}
void OAIEarningTypeInProjectTransactionLineDto::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIEarningTypeInProjectTransactionLineDto::is_code_Set() const{
    return m_code_isSet;
}

bool OAIEarningTypeInProjectTransactionLineDto::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIEarningTypeInProjectTransactionLineDto::getDescription() const {
    return m_description;
}
void OAIEarningTypeInProjectTransactionLineDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEarningTypeInProjectTransactionLineDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEarningTypeInProjectTransactionLineDto::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIEarningTypeInProjectTransactionLineDto::isIsActive() const {
    return m_is_active;
}
void OAIEarningTypeInProjectTransactionLineDto::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIEarningTypeInProjectTransactionLineDto::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIEarningTypeInProjectTransactionLineDto::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIEarningTypeInProjectTransactionLineDto::isIsBillable() const {
    return m_is_billable;
}
void OAIEarningTypeInProjectTransactionLineDto::setIsBillable(const bool &is_billable) {
    m_is_billable = is_billable;
    m_is_billable_isSet = true;
}

bool OAIEarningTypeInProjectTransactionLineDto::is_is_billable_Set() const{
    return m_is_billable_isSet;
}

bool OAIEarningTypeInProjectTransactionLineDto::is_is_billable_Valid() const{
    return m_is_billable_isValid;
}

bool OAIEarningTypeInProjectTransactionLineDto::isIsOvertime() const {
    return m_is_overtime;
}
void OAIEarningTypeInProjectTransactionLineDto::setIsOvertime(const bool &is_overtime) {
    m_is_overtime = is_overtime;
    m_is_overtime_isSet = true;
}

bool OAIEarningTypeInProjectTransactionLineDto::is_is_overtime_Set() const{
    return m_is_overtime_isSet;
}

bool OAIEarningTypeInProjectTransactionLineDto::is_is_overtime_Valid() const{
    return m_is_overtime_isValid;
}

QDateTime OAIEarningTypeInProjectTransactionLineDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIEarningTypeInProjectTransactionLineDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIEarningTypeInProjectTransactionLineDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIEarningTypeInProjectTransactionLineDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

double OAIEarningTypeInProjectTransactionLineDto::getOvertimeMultiplier() const {
    return m_overtime_multiplier;
}
void OAIEarningTypeInProjectTransactionLineDto::setOvertimeMultiplier(const double &overtime_multiplier) {
    m_overtime_multiplier = overtime_multiplier;
    m_overtime_multiplier_isSet = true;
}

bool OAIEarningTypeInProjectTransactionLineDto::is_overtime_multiplier_Set() const{
    return m_overtime_multiplier_isSet;
}

bool OAIEarningTypeInProjectTransactionLineDto::is_overtime_multiplier_Valid() const{
    return m_overtime_multiplier_isValid;
}

bool OAIEarningTypeInProjectTransactionLineDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_billable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_overtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overtime_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEarningTypeInProjectTransactionLineDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
