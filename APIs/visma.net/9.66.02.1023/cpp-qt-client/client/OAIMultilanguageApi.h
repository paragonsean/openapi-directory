/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMultilanguageApi_H
#define OAI_OAIMultilanguageApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActiveMultilanguageDto.h"
#include "OAIBackgroundApiAcceptedDto.h"
#include "OAILanguageUpdateDto.h"
#include "OAIMultilanguageDto.h"
#include "OAIMultilanguageTranslationDto.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMultilanguageApi : public QObject {
    Q_OBJECT

public:
    OAIMultilanguageApi(const int timeOut = 0);
    ~OAIMultilanguageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_language_update_dto OAILanguageUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void multilanguageAddDefaultLanguage(const OAILanguageUpdateDto &oai_language_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  inventory_number QString [required]
    * @param[in]  language_iso QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISO(const QString &inventory_number, const QString &language_iso, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void multilanguageGetAllActiveLanguages(const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  inventory_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void multilanguageGetInventoryTranslationsByinventoryNumber(const QString &inventory_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  inventory_number QString [required]
    * @param[in]  language_iso QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISO(const QString &inventory_number, const QString &language_iso, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  inventory_number QString [required]
    * @param[in]  language_iso QString [required]
    * @param[in]  oai_multilanguage_translation_dto OAIMultilanguageTranslationDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISO(const QString &inventory_number, const QString &language_iso, const OAIMultilanguageTranslationDto &oai_multilanguage_translation_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  inventory_number QString [required]
    * @param[in]  language_iso QString [required]
    * @param[in]  oai_multilanguage_translation_dto OAIMultilanguageTranslationDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISO(const QString &inventory_number, const QString &language_iso, const OAIMultilanguageTranslationDto &oai_multilanguage_translation_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void multilanguageAddDefaultLanguageCallback(OAIHttpRequestWorker *worker);
    void multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISOCallback(OAIHttpRequestWorker *worker);
    void multilanguageGetAllActiveLanguagesCallback(OAIHttpRequestWorker *worker);
    void multilanguageGetInventoryTranslationsByinventoryNumberCallback(OAIHttpRequestWorker *worker);
    void multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISOCallback(OAIHttpRequestWorker *worker);
    void multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISOCallback(OAIHttpRequestWorker *worker);
    void multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISOCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void multilanguageAddDefaultLanguageSignal(OAIObject summary);
    void multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignal(OAIBackgroundApiAcceptedDto summary);
    void multilanguageGetAllActiveLanguagesSignal(QList<OAIActiveMultilanguageDto> summary);
    void multilanguageGetInventoryTranslationsByinventoryNumberSignal(QList<OAIMultilanguageDto> summary);
    void multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignal(OAIMultilanguageDto summary);
    void multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignal(OAIObject summary);
    void multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignal(OAIBackgroundApiAcceptedDto summary);


    void multilanguageAddDefaultLanguageSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);
    void multilanguageGetAllActiveLanguagesSignalFull(OAIHttpRequestWorker *worker, QList<OAIActiveMultilanguageDto> summary);
    void multilanguageGetInventoryTranslationsByinventoryNumberSignalFull(OAIHttpRequestWorker *worker, QList<OAIMultilanguageDto> summary);
    void multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalFull(OAIHttpRequestWorker *worker, OAIMultilanguageDto summary);
    void multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);

    Q_DECL_DEPRECATED_X("Use multilanguageAddDefaultLanguageSignalError() instead")
    void multilanguageAddDefaultLanguageSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void multilanguageAddDefaultLanguageSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalError() instead")
    void multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use multilanguageGetAllActiveLanguagesSignalError() instead")
    void multilanguageGetAllActiveLanguagesSignalE(QList<OAIActiveMultilanguageDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void multilanguageGetAllActiveLanguagesSignalError(QList<OAIActiveMultilanguageDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use multilanguageGetInventoryTranslationsByinventoryNumberSignalError() instead")
    void multilanguageGetInventoryTranslationsByinventoryNumberSignalE(QList<OAIMultilanguageDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void multilanguageGetInventoryTranslationsByinventoryNumberSignalError(QList<OAIMultilanguageDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalError() instead")
    void multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalE(OAIMultilanguageDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalError(OAIMultilanguageDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalError() instead")
    void multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalError() instead")
    void multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use multilanguageAddDefaultLanguageSignalErrorFull() instead")
    void multilanguageAddDefaultLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void multilanguageAddDefaultLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalErrorFull() instead")
    void multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use multilanguageGetAllActiveLanguagesSignalErrorFull() instead")
    void multilanguageGetAllActiveLanguagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void multilanguageGetAllActiveLanguagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use multilanguageGetInventoryTranslationsByinventoryNumberSignalErrorFull() instead")
    void multilanguageGetInventoryTranslationsByinventoryNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void multilanguageGetInventoryTranslationsByinventoryNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalErrorFull() instead")
    void multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalErrorFull() instead")
    void multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalErrorFull() instead")
    void multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISOSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
