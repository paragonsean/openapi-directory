/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryReceiptDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryReceiptDto::OAIInventoryReceiptDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryReceiptDto::OAIInventoryReceiptDto() {
    this->initializeModel();
}

OAIInventoryReceiptDto::~OAIInventoryReceiptDto() {}

void OAIInventoryReceiptDto::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_batch_number_isSet = false;
    m_batch_number_isValid = false;

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_control_cost_isSet = false;
    m_control_cost_isValid = false;

    m_control_quantity_isSet = false;
    m_control_quantity_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_external_reference_isSet = false;
    m_external_reference_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_post_period_isSet = false;
    m_post_period_isValid = false;

    m_receipt_lines_isSet = false;
    m_receipt_lines_isValid = false;

    m_reference_number_isSet = false;
    m_reference_number_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_total_cost_isSet = false;
    m_total_cost_isValid = false;

    m_total_quantity_isSet = false;
    m_total_quantity_isValid = false;

    m_transfer_number_isSet = false;
    m_transfer_number_isValid = false;
}

void OAIInventoryReceiptDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryReceiptDto::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_batch_number_isValid = ::OpenAPI::fromJsonValue(m_batch_number, json[QString("batchNumber")]);
    m_batch_number_isSet = !json[QString("batchNumber")].isNull() && m_batch_number_isValid;

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_control_cost_isValid = ::OpenAPI::fromJsonValue(m_control_cost, json[QString("controlCost")]);
    m_control_cost_isSet = !json[QString("controlCost")].isNull() && m_control_cost_isValid;

    m_control_quantity_isValid = ::OpenAPI::fromJsonValue(m_control_quantity, json[QString("controlQuantity")]);
    m_control_quantity_isSet = !json[QString("controlQuantity")].isNull() && m_control_quantity_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_external_reference_isValid = ::OpenAPI::fromJsonValue(m_external_reference, json[QString("externalReference")]);
    m_external_reference_isSet = !json[QString("externalReference")].isNull() && m_external_reference_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_post_period_isValid = ::OpenAPI::fromJsonValue(m_post_period, json[QString("postPeriod")]);
    m_post_period_isSet = !json[QString("postPeriod")].isNull() && m_post_period_isValid;

    m_receipt_lines_isValid = ::OpenAPI::fromJsonValue(m_receipt_lines, json[QString("receiptLines")]);
    m_receipt_lines_isSet = !json[QString("receiptLines")].isNull() && m_receipt_lines_isValid;

    m_reference_number_isValid = ::OpenAPI::fromJsonValue(m_reference_number, json[QString("referenceNumber")]);
    m_reference_number_isSet = !json[QString("referenceNumber")].isNull() && m_reference_number_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_total_cost_isValid = ::OpenAPI::fromJsonValue(m_total_cost, json[QString("totalCost")]);
    m_total_cost_isSet = !json[QString("totalCost")].isNull() && m_total_cost_isValid;

    m_total_quantity_isValid = ::OpenAPI::fromJsonValue(m_total_quantity, json[QString("totalQuantity")]);
    m_total_quantity_isSet = !json[QString("totalQuantity")].isNull() && m_total_quantity_isValid;

    m_transfer_number_isValid = ::OpenAPI::fromJsonValue(m_transfer_number, json[QString("transferNumber")]);
    m_transfer_number_isSet = !json[QString("transferNumber")].isNull() && m_transfer_number_isValid;
}

QString OAIInventoryReceiptDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryReceiptDto::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_batch_number_isSet) {
        obj.insert(QString("batchNumber"), ::OpenAPI::toJsonValue(m_batch_number));
    }
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_control_cost_isSet) {
        obj.insert(QString("controlCost"), ::OpenAPI::toJsonValue(m_control_cost));
    }
    if (m_control_quantity_isSet) {
        obj.insert(QString("controlQuantity"), ::OpenAPI::toJsonValue(m_control_quantity));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_external_reference_isSet) {
        obj.insert(QString("externalReference"), ::OpenAPI::toJsonValue(m_external_reference));
    }
    if (m_hold_isSet) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_post_period_isSet) {
        obj.insert(QString("postPeriod"), ::OpenAPI::toJsonValue(m_post_period));
    }
    if (m_receipt_lines.size() > 0) {
        obj.insert(QString("receiptLines"), ::OpenAPI::toJsonValue(m_receipt_lines));
    }
    if (m_reference_number_isSet) {
        obj.insert(QString("referenceNumber"), ::OpenAPI::toJsonValue(m_reference_number));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_total_cost_isSet) {
        obj.insert(QString("totalCost"), ::OpenAPI::toJsonValue(m_total_cost));
    }
    if (m_total_quantity_isSet) {
        obj.insert(QString("totalQuantity"), ::OpenAPI::toJsonValue(m_total_quantity));
    }
    if (m_transfer_number_isSet) {
        obj.insert(QString("transferNumber"), ::OpenAPI::toJsonValue(m_transfer_number));
    }
    return obj;
}

QList<OAIAttachmentDto> OAIInventoryReceiptDto::getAttachments() const {
    return m_attachments;
}
void OAIInventoryReceiptDto::setAttachments(const QList<OAIAttachmentDto> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIInventoryReceiptDto::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIInventoryReceiptDto::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAIInventoryReceiptDto::getBatchNumber() const {
    return m_batch_number;
}
void OAIInventoryReceiptDto::setBatchNumber(const QString &batch_number) {
    m_batch_number = batch_number;
    m_batch_number_isSet = true;
}

bool OAIInventoryReceiptDto::is_batch_number_Set() const{
    return m_batch_number_isSet;
}

bool OAIInventoryReceiptDto::is_batch_number_Valid() const{
    return m_batch_number_isValid;
}

OAIBranchNumberInInventoryReceiptDto OAIInventoryReceiptDto::getBranchNumber() const {
    return m_branch_number;
}
void OAIInventoryReceiptDto::setBranchNumber(const OAIBranchNumberInInventoryReceiptDto &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAIInventoryReceiptDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAIInventoryReceiptDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

double OAIInventoryReceiptDto::getControlCost() const {
    return m_control_cost;
}
void OAIInventoryReceiptDto::setControlCost(const double &control_cost) {
    m_control_cost = control_cost;
    m_control_cost_isSet = true;
}

bool OAIInventoryReceiptDto::is_control_cost_Set() const{
    return m_control_cost_isSet;
}

bool OAIInventoryReceiptDto::is_control_cost_Valid() const{
    return m_control_cost_isValid;
}

double OAIInventoryReceiptDto::getControlQuantity() const {
    return m_control_quantity;
}
void OAIInventoryReceiptDto::setControlQuantity(const double &control_quantity) {
    m_control_quantity = control_quantity;
    m_control_quantity_isSet = true;
}

bool OAIInventoryReceiptDto::is_control_quantity_Set() const{
    return m_control_quantity_isSet;
}

bool OAIInventoryReceiptDto::is_control_quantity_Valid() const{
    return m_control_quantity_isValid;
}

QDateTime OAIInventoryReceiptDto::getDate() const {
    return m_date;
}
void OAIInventoryReceiptDto::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIInventoryReceiptDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAIInventoryReceiptDto::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIInventoryReceiptDto::getDescription() const {
    return m_description;
}
void OAIInventoryReceiptDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInventoryReceiptDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInventoryReceiptDto::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIInventoryReceiptDto::getErrorInfo() const {
    return m_error_info;
}
void OAIInventoryReceiptDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIInventoryReceiptDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIInventoryReceiptDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

QString OAIInventoryReceiptDto::getExternalReference() const {
    return m_external_reference;
}
void OAIInventoryReceiptDto::setExternalReference(const QString &external_reference) {
    m_external_reference = external_reference;
    m_external_reference_isSet = true;
}

bool OAIInventoryReceiptDto::is_external_reference_Set() const{
    return m_external_reference_isSet;
}

bool OAIInventoryReceiptDto::is_external_reference_Valid() const{
    return m_external_reference_isValid;
}

bool OAIInventoryReceiptDto::isHold() const {
    return m_hold;
}
void OAIInventoryReceiptDto::setHold(const bool &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAIInventoryReceiptDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAIInventoryReceiptDto::is_hold_Valid() const{
    return m_hold_isValid;
}

QDateTime OAIInventoryReceiptDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIInventoryReceiptDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIInventoryReceiptDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIInventoryReceiptDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAIMetadataDto OAIInventoryReceiptDto::getMetadata() const {
    return m_metadata;
}
void OAIInventoryReceiptDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIInventoryReceiptDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIInventoryReceiptDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIInventoryReceiptDto::getPostPeriod() const {
    return m_post_period;
}
void OAIInventoryReceiptDto::setPostPeriod(const QString &post_period) {
    m_post_period = post_period;
    m_post_period_isSet = true;
}

bool OAIInventoryReceiptDto::is_post_period_Set() const{
    return m_post_period_isSet;
}

bool OAIInventoryReceiptDto::is_post_period_Valid() const{
    return m_post_period_isValid;
}

QList<OAIInventoryReceiptLineDto> OAIInventoryReceiptDto::getReceiptLines() const {
    return m_receipt_lines;
}
void OAIInventoryReceiptDto::setReceiptLines(const QList<OAIInventoryReceiptLineDto> &receipt_lines) {
    m_receipt_lines = receipt_lines;
    m_receipt_lines_isSet = true;
}

bool OAIInventoryReceiptDto::is_receipt_lines_Set() const{
    return m_receipt_lines_isSet;
}

bool OAIInventoryReceiptDto::is_receipt_lines_Valid() const{
    return m_receipt_lines_isValid;
}

QString OAIInventoryReceiptDto::getReferenceNumber() const {
    return m_reference_number;
}
void OAIInventoryReceiptDto::setReferenceNumber(const QString &reference_number) {
    m_reference_number = reference_number;
    m_reference_number_isSet = true;
}

bool OAIInventoryReceiptDto::is_reference_number_Set() const{
    return m_reference_number_isSet;
}

bool OAIInventoryReceiptDto::is_reference_number_Valid() const{
    return m_reference_number_isValid;
}

QString OAIInventoryReceiptDto::getStatus() const {
    return m_status;
}
void OAIInventoryReceiptDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInventoryReceiptDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInventoryReceiptDto::is_status_Valid() const{
    return m_status_isValid;
}

double OAIInventoryReceiptDto::getTotalCost() const {
    return m_total_cost;
}
void OAIInventoryReceiptDto::setTotalCost(const double &total_cost) {
    m_total_cost = total_cost;
    m_total_cost_isSet = true;
}

bool OAIInventoryReceiptDto::is_total_cost_Set() const{
    return m_total_cost_isSet;
}

bool OAIInventoryReceiptDto::is_total_cost_Valid() const{
    return m_total_cost_isValid;
}

double OAIInventoryReceiptDto::getTotalQuantity() const {
    return m_total_quantity;
}
void OAIInventoryReceiptDto::setTotalQuantity(const double &total_quantity) {
    m_total_quantity = total_quantity;
    m_total_quantity_isSet = true;
}

bool OAIInventoryReceiptDto::is_total_quantity_Set() const{
    return m_total_quantity_isSet;
}

bool OAIInventoryReceiptDto::is_total_quantity_Valid() const{
    return m_total_quantity_isValid;
}

QString OAIInventoryReceiptDto::getTransferNumber() const {
    return m_transfer_number;
}
void OAIInventoryReceiptDto::setTransferNumber(const QString &transfer_number) {
    m_transfer_number = transfer_number;
    m_transfer_number_isSet = true;
}

bool OAIInventoryReceiptDto::is_transfer_number_Set() const{
    return m_transfer_number_isSet;
}

bool OAIInventoryReceiptDto::is_transfer_number_Valid() const{
    return m_transfer_number_isValid;
}

bool OAIInventoryReceiptDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryReceiptDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
