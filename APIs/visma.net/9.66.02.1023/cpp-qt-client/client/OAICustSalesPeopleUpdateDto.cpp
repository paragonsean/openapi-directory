/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustSalesPeopleUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustSalesPeopleUpdateDto::OAICustSalesPeopleUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustSalesPeopleUpdateDto::OAICustSalesPeopleUpdateDto() {
    this->initializeModel();
}

OAICustSalesPeopleUpdateDto::~OAICustSalesPeopleUpdateDto() {}

void OAICustSalesPeopleUpdateDto::initializeModel() {

    m_commission_pct_isSet = false;
    m_commission_pct_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;
}

void OAICustSalesPeopleUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustSalesPeopleUpdateDto::fromJsonObject(QJsonObject json) {

    m_commission_pct_isValid = ::OpenAPI::fromJsonValue(m_commission_pct, json[QString("commissionPct")]);
    m_commission_pct_isSet = !json[QString("commissionPct")].isNull() && m_commission_pct_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerID")]);
    m_customer_id_isSet = !json[QString("customerID")].isNull() && m_customer_id_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationID")]);
    m_location_id_isSet = !json[QString("locationID")].isNull() && m_location_id_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;
}

QString OAICustSalesPeopleUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustSalesPeopleUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_commission_pct.isSet()) {
        obj.insert(QString("commissionPct"), ::OpenAPI::toJsonValue(m_commission_pct));
    }
    if (m_customer_id.isSet()) {
        obj.insert(QString("customerID"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_location_id.isSet()) {
        obj.insert(QString("locationID"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    return obj;
}

OAIDtoValueOfNullableOfDecimal OAICustSalesPeopleUpdateDto::getCommissionPct() const {
    return m_commission_pct;
}
void OAICustSalesPeopleUpdateDto::setCommissionPct(const OAIDtoValueOfNullableOfDecimal &commission_pct) {
    m_commission_pct = commission_pct;
    m_commission_pct_isSet = true;
}

bool OAICustSalesPeopleUpdateDto::is_commission_pct_Set() const{
    return m_commission_pct_isSet;
}

bool OAICustSalesPeopleUpdateDto::is_commission_pct_Valid() const{
    return m_commission_pct_isValid;
}

OAIDtoValueOfString OAICustSalesPeopleUpdateDto::getCustomerId() const {
    return m_customer_id;
}
void OAICustSalesPeopleUpdateDto::setCustomerId(const OAIDtoValueOfString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAICustSalesPeopleUpdateDto::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAICustSalesPeopleUpdateDto::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

OAIDtoValueOfString OAICustSalesPeopleUpdateDto::getLocationId() const {
    return m_location_id;
}
void OAICustSalesPeopleUpdateDto::setLocationId(const OAIDtoValueOfString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAICustSalesPeopleUpdateDto::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAICustSalesPeopleUpdateDto::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAICustSalesPeopleUpdateDto::getOperation() const {
    return m_operation;
}
void OAICustSalesPeopleUpdateDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAICustSalesPeopleUpdateDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAICustSalesPeopleUpdateDto::is_operation_Valid() const{
    return m_operation_isValid;
}

bool OAICustSalesPeopleUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commission_pct.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustSalesPeopleUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
