/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIExpenseClaimApi_H
#define OAI_OAIExpenseClaimApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAIExpenseClaimDto.h"
#include "OAIExpenseClaimUpdateDto.h"
#include "OAIObject.h"
#include "OAIPutExpenseClaimOnHoldActionResultDto.h"
#include "OAISendExpenseClaimToApprovalActionResultDto.h"
#include "OAISubmitExpenseClaimActionResultDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIExpenseClaimApi : public QObject {
    Q_OBJECT

public:
    OAIExpenseClaimApi(const int timeOut = 0);
    ~OAIExpenseClaimApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_expense_claim_update_dto OAIExpenseClaimUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void expenseClaimCreateExpenseClaim(const OAIExpenseClaimUpdateDto &oai_expense_claim_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  expense_claim_nbr QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void expenseClaimDeleteByexpenseClaimNbr(const QString &expense_claim_nbr, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  status QString [optional]
    * @param[in]  date QDateTime [optional]
    * @param[in]  customer QString [optional]
    * @param[in]  department_id QString [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void expenseClaimGetAll(const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &customer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &department_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  expense_claim_nbr QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void expenseClaimGetExpenseClaimByexpenseClaimNbr(const QString &expense_claim_nbr, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  expense_claim_nbr QString [required]
    * @param[in]  oai_expense_claim_update_dto OAIExpenseClaimUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void expenseClaimPutByexpenseClaimNbr(const QString &expense_claim_nbr, const OAIExpenseClaimUpdateDto &oai_expense_claim_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  expense_claim QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void expenseClaimPutExpenseClaimOnHoldByexpenseClaim(const QString &expense_claim, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  expense_claim QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void expenseClaimSendExpenseClaimToApprovalByexpenseClaim(const QString &expense_claim, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  expense_claim QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void expenseClaimSubmitExpenseClaimByexpenseClaim(const QString &expense_claim, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void expenseClaimCreateExpenseClaimCallback(OAIHttpRequestWorker *worker);
    void expenseClaimDeleteByexpenseClaimNbrCallback(OAIHttpRequestWorker *worker);
    void expenseClaimGetAllCallback(OAIHttpRequestWorker *worker);
    void expenseClaimGetExpenseClaimByexpenseClaimNbrCallback(OAIHttpRequestWorker *worker);
    void expenseClaimPutByexpenseClaimNbrCallback(OAIHttpRequestWorker *worker);
    void expenseClaimPutExpenseClaimOnHoldByexpenseClaimCallback(OAIHttpRequestWorker *worker);
    void expenseClaimSendExpenseClaimToApprovalByexpenseClaimCallback(OAIHttpRequestWorker *worker);
    void expenseClaimSubmitExpenseClaimByexpenseClaimCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void expenseClaimCreateExpenseClaimSignal(OAIObject summary);
    void expenseClaimDeleteByexpenseClaimNbrSignal(OAIBackgroundApiAcceptedDto summary);
    void expenseClaimGetAllSignal(QList<OAIExpenseClaimDto> summary);
    void expenseClaimGetExpenseClaimByexpenseClaimNbrSignal(OAIExpenseClaimDto summary);
    void expenseClaimPutByexpenseClaimNbrSignal(OAIBackgroundApiAcceptedDto summary);
    void expenseClaimPutExpenseClaimOnHoldByexpenseClaimSignal(OAIPutExpenseClaimOnHoldActionResultDto summary);
    void expenseClaimSendExpenseClaimToApprovalByexpenseClaimSignal(OAISendExpenseClaimToApprovalActionResultDto summary);
    void expenseClaimSubmitExpenseClaimByexpenseClaimSignal(OAISubmitExpenseClaimActionResultDto summary);


    void expenseClaimCreateExpenseClaimSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void expenseClaimDeleteByexpenseClaimNbrSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);
    void expenseClaimGetAllSignalFull(OAIHttpRequestWorker *worker, QList<OAIExpenseClaimDto> summary);
    void expenseClaimGetExpenseClaimByexpenseClaimNbrSignalFull(OAIHttpRequestWorker *worker, OAIExpenseClaimDto summary);
    void expenseClaimPutByexpenseClaimNbrSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);
    void expenseClaimPutExpenseClaimOnHoldByexpenseClaimSignalFull(OAIHttpRequestWorker *worker, OAIPutExpenseClaimOnHoldActionResultDto summary);
    void expenseClaimSendExpenseClaimToApprovalByexpenseClaimSignalFull(OAIHttpRequestWorker *worker, OAISendExpenseClaimToApprovalActionResultDto summary);
    void expenseClaimSubmitExpenseClaimByexpenseClaimSignalFull(OAIHttpRequestWorker *worker, OAISubmitExpenseClaimActionResultDto summary);

    Q_DECL_DEPRECATED_X("Use expenseClaimCreateExpenseClaimSignalError() instead")
    void expenseClaimCreateExpenseClaimSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expenseClaimCreateExpenseClaimSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expenseClaimDeleteByexpenseClaimNbrSignalError() instead")
    void expenseClaimDeleteByexpenseClaimNbrSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expenseClaimDeleteByexpenseClaimNbrSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expenseClaimGetAllSignalError() instead")
    void expenseClaimGetAllSignalE(QList<OAIExpenseClaimDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expenseClaimGetAllSignalError(QList<OAIExpenseClaimDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expenseClaimGetExpenseClaimByexpenseClaimNbrSignalError() instead")
    void expenseClaimGetExpenseClaimByexpenseClaimNbrSignalE(OAIExpenseClaimDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expenseClaimGetExpenseClaimByexpenseClaimNbrSignalError(OAIExpenseClaimDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expenseClaimPutByexpenseClaimNbrSignalError() instead")
    void expenseClaimPutByexpenseClaimNbrSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expenseClaimPutByexpenseClaimNbrSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expenseClaimPutExpenseClaimOnHoldByexpenseClaimSignalError() instead")
    void expenseClaimPutExpenseClaimOnHoldByexpenseClaimSignalE(OAIPutExpenseClaimOnHoldActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expenseClaimPutExpenseClaimOnHoldByexpenseClaimSignalError(OAIPutExpenseClaimOnHoldActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expenseClaimSendExpenseClaimToApprovalByexpenseClaimSignalError() instead")
    void expenseClaimSendExpenseClaimToApprovalByexpenseClaimSignalE(OAISendExpenseClaimToApprovalActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expenseClaimSendExpenseClaimToApprovalByexpenseClaimSignalError(OAISendExpenseClaimToApprovalActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expenseClaimSubmitExpenseClaimByexpenseClaimSignalError() instead")
    void expenseClaimSubmitExpenseClaimByexpenseClaimSignalE(OAISubmitExpenseClaimActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expenseClaimSubmitExpenseClaimByexpenseClaimSignalError(OAISubmitExpenseClaimActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use expenseClaimCreateExpenseClaimSignalErrorFull() instead")
    void expenseClaimCreateExpenseClaimSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expenseClaimCreateExpenseClaimSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expenseClaimDeleteByexpenseClaimNbrSignalErrorFull() instead")
    void expenseClaimDeleteByexpenseClaimNbrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expenseClaimDeleteByexpenseClaimNbrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expenseClaimGetAllSignalErrorFull() instead")
    void expenseClaimGetAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expenseClaimGetAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expenseClaimGetExpenseClaimByexpenseClaimNbrSignalErrorFull() instead")
    void expenseClaimGetExpenseClaimByexpenseClaimNbrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expenseClaimGetExpenseClaimByexpenseClaimNbrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expenseClaimPutByexpenseClaimNbrSignalErrorFull() instead")
    void expenseClaimPutByexpenseClaimNbrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expenseClaimPutByexpenseClaimNbrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expenseClaimPutExpenseClaimOnHoldByexpenseClaimSignalErrorFull() instead")
    void expenseClaimPutExpenseClaimOnHoldByexpenseClaimSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expenseClaimPutExpenseClaimOnHoldByexpenseClaimSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expenseClaimSendExpenseClaimToApprovalByexpenseClaimSignalErrorFull() instead")
    void expenseClaimSendExpenseClaimToApprovalByexpenseClaimSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expenseClaimSendExpenseClaimToApprovalByexpenseClaimSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expenseClaimSubmitExpenseClaimByexpenseClaimSignalErrorFull() instead")
    void expenseClaimSubmitExpenseClaimByexpenseClaimSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expenseClaimSubmitExpenseClaimByexpenseClaimSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
