/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectBasicDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectBasicDto::OAIProjectBasicDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectBasicDto::OAIProjectBasicDto() {
    this->initializeModel();
}

OAIProjectBasicDto::~OAIProjectBasicDto() {}

void OAIProjectBasicDto::initializeModel() {

    m_auto_allocate_isSet = false;
    m_auto_allocate_isValid = false;

    m_automatic_release_ar_isSet = false;
    m_automatic_release_ar_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_internal_id_isSet = false;
    m_internal_id_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_public_id_isSet = false;
    m_public_id_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIProjectBasicDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectBasicDto::fromJsonObject(QJsonObject json) {

    m_auto_allocate_isValid = ::OpenAPI::fromJsonValue(m_auto_allocate, json[QString("autoAllocate")]);
    m_auto_allocate_isSet = !json[QString("autoAllocate")].isNull() && m_auto_allocate_isValid;

    m_automatic_release_ar_isValid = ::OpenAPI::fromJsonValue(m_automatic_release_ar, json[QString("automaticReleaseAr")]);
    m_automatic_release_ar_isSet = !json[QString("automaticReleaseAr")].isNull() && m_automatic_release_ar_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_internal_id_isValid = ::OpenAPI::fromJsonValue(m_internal_id, json[QString("internalID")]);
    m_internal_id_isSet = !json[QString("internalID")].isNull() && m_internal_id_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectID")]);
    m_project_id_isSet = !json[QString("projectID")].isNull() && m_project_id_isValid;

    m_public_id_isValid = ::OpenAPI::fromJsonValue(m_public_id, json[QString("publicId")]);
    m_public_id_isSet = !json[QString("publicId")].isNull() && m_public_id_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIProjectBasicDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectBasicDto::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_allocate_isSet) {
        obj.insert(QString("autoAllocate"), ::OpenAPI::toJsonValue(m_auto_allocate));
    }
    if (m_automatic_release_ar_isSet) {
        obj.insert(QString("automaticReleaseAr"), ::OpenAPI::toJsonValue(m_automatic_release_ar));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_hold_isSet) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_internal_id_isSet) {
        obj.insert(QString("internalID"), ::OpenAPI::toJsonValue(m_internal_id));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectID"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_public_id_isSet) {
        obj.insert(QString("publicId"), ::OpenAPI::toJsonValue(m_public_id));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_visibility.isSet()) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

bool OAIProjectBasicDto::isAutoAllocate() const {
    return m_auto_allocate;
}
void OAIProjectBasicDto::setAutoAllocate(const bool &auto_allocate) {
    m_auto_allocate = auto_allocate;
    m_auto_allocate_isSet = true;
}

bool OAIProjectBasicDto::is_auto_allocate_Set() const{
    return m_auto_allocate_isSet;
}

bool OAIProjectBasicDto::is_auto_allocate_Valid() const{
    return m_auto_allocate_isValid;
}

bool OAIProjectBasicDto::isAutomaticReleaseAr() const {
    return m_automatic_release_ar;
}
void OAIProjectBasicDto::setAutomaticReleaseAr(const bool &automatic_release_ar) {
    m_automatic_release_ar = automatic_release_ar;
    m_automatic_release_ar_isSet = true;
}

bool OAIProjectBasicDto::is_automatic_release_ar_Set() const{
    return m_automatic_release_ar_isSet;
}

bool OAIProjectBasicDto::is_automatic_release_ar_Valid() const{
    return m_automatic_release_ar_isValid;
}

OAICustomerInProjectBasicDto OAIProjectBasicDto::getCustomer() const {
    return m_customer;
}
void OAIProjectBasicDto::setCustomer(const OAICustomerInProjectBasicDto &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIProjectBasicDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIProjectBasicDto::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAIProjectBasicDto::getDescription() const {
    return m_description;
}
void OAIProjectBasicDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProjectBasicDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProjectBasicDto::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIProjectBasicDto::getEndDate() const {
    return m_end_date;
}
void OAIProjectBasicDto::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIProjectBasicDto::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIProjectBasicDto::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIProjectBasicDto::getErrorInfo() const {
    return m_error_info;
}
void OAIProjectBasicDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIProjectBasicDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIProjectBasicDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

bool OAIProjectBasicDto::isHold() const {
    return m_hold;
}
void OAIProjectBasicDto::setHold(const bool &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAIProjectBasicDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAIProjectBasicDto::is_hold_Valid() const{
    return m_hold_isValid;
}

qint32 OAIProjectBasicDto::getInternalId() const {
    return m_internal_id;
}
void OAIProjectBasicDto::setInternalId(const qint32 &internal_id) {
    m_internal_id = internal_id;
    m_internal_id_isSet = true;
}

bool OAIProjectBasicDto::is_internal_id_Set() const{
    return m_internal_id_isSet;
}

bool OAIProjectBasicDto::is_internal_id_Valid() const{
    return m_internal_id_isValid;
}

QDateTime OAIProjectBasicDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIProjectBasicDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIProjectBasicDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIProjectBasicDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAIMetadataDto OAIProjectBasicDto::getMetadata() const {
    return m_metadata;
}
void OAIProjectBasicDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIProjectBasicDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIProjectBasicDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIProjectBasicDto::getProjectId() const {
    return m_project_id;
}
void OAIProjectBasicDto::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIProjectBasicDto::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIProjectBasicDto::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIProjectBasicDto::getPublicId() const {
    return m_public_id;
}
void OAIProjectBasicDto::setPublicId(const QString &public_id) {
    m_public_id = public_id;
    m_public_id_isSet = true;
}

bool OAIProjectBasicDto::is_public_id_Set() const{
    return m_public_id_isSet;
}

bool OAIProjectBasicDto::is_public_id_Valid() const{
    return m_public_id_isValid;
}

QDateTime OAIProjectBasicDto::getStartDate() const {
    return m_start_date;
}
void OAIProjectBasicDto::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIProjectBasicDto::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIProjectBasicDto::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIProjectBasicDto::getStatus() const {
    return m_status;
}
void OAIProjectBasicDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProjectBasicDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProjectBasicDto::is_status_Valid() const{
    return m_status_isValid;
}

OAIVisibilityInProjectBasicDto OAIProjectBasicDto::getVisibility() const {
    return m_visibility;
}
void OAIProjectBasicDto::setVisibility(const OAIVisibilityInProjectBasicDto &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIProjectBasicDto::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIProjectBasicDto::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIProjectBasicDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_allocate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automatic_release_ar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectBasicDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
