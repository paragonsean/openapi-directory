/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseOrderBasicDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseOrderBasicDto::OAIPurchaseOrderBasicDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseOrderBasicDto::OAIPurchaseOrderBasicDto() {
    this->initializeModel();
}

OAIPurchaseOrderBasicDto::~OAIPurchaseOrderBasicDto() {}

void OAIPurchaseOrderBasicDto::initializeModel() {

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_control_total_isSet = false;
    m_control_total_isValid = false;

    m_control_total_in_base_currency_isSet = false;
    m_control_total_in_base_currency_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_line_total_isSet = false;
    m_line_total_isValid = false;

    m_line_total_in_base_currency_isSet = false;
    m_line_total_in_base_currency_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_order_nbr_isSet = false;
    m_order_nbr_isValid = false;

    m_order_total_isSet = false;
    m_order_total_isValid = false;

    m_order_total_in_base_currency_isSet = false;
    m_order_total_in_base_currency_isValid = false;

    m_order_type_isSet = false;
    m_order_type_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_promised_on_isSet = false;
    m_promised_on_isValid = false;

    m_purchase_receipts_isSet = false;
    m_purchase_receipts_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supplier_isSet = false;
    m_supplier_isValid = false;

    m_supplier_ref_isSet = false;
    m_supplier_ref_isValid = false;

    m_tax_details_isSet = false;
    m_tax_details_isValid = false;

    m_tax_total_isSet = false;
    m_tax_total_isValid = false;

    m_tax_total_in_base_currency_isSet = false;
    m_tax_total_in_base_currency_isValid = false;

    m_vat_exempt_total_isSet = false;
    m_vat_exempt_total_isValid = false;

    m_vat_exempt_total_in_base_currency_isSet = false;
    m_vat_exempt_total_in_base_currency_isValid = false;
}

void OAIPurchaseOrderBasicDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseOrderBasicDto::fromJsonObject(QJsonObject json) {

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_control_total_isValid = ::OpenAPI::fromJsonValue(m_control_total, json[QString("controlTotal")]);
    m_control_total_isSet = !json[QString("controlTotal")].isNull() && m_control_total_isValid;

    m_control_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_control_total_in_base_currency, json[QString("controlTotalInBaseCurrency")]);
    m_control_total_in_base_currency_isSet = !json[QString("controlTotalInBaseCurrency")].isNull() && m_control_total_in_base_currency_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("exchangeRate")]);
    m_exchange_rate_isSet = !json[QString("exchangeRate")].isNull() && m_exchange_rate_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_line_total_isValid = ::OpenAPI::fromJsonValue(m_line_total, json[QString("lineTotal")]);
    m_line_total_isSet = !json[QString("lineTotal")].isNull() && m_line_total_isValid;

    m_line_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_line_total_in_base_currency, json[QString("lineTotalInBaseCurrency")]);
    m_line_total_in_base_currency_isSet = !json[QString("lineTotalInBaseCurrency")].isNull() && m_line_total_in_base_currency_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_order_nbr_isValid = ::OpenAPI::fromJsonValue(m_order_nbr, json[QString("orderNbr")]);
    m_order_nbr_isSet = !json[QString("orderNbr")].isNull() && m_order_nbr_isValid;

    m_order_total_isValid = ::OpenAPI::fromJsonValue(m_order_total, json[QString("orderTotal")]);
    m_order_total_isSet = !json[QString("orderTotal")].isNull() && m_order_total_isValid;

    m_order_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_order_total_in_base_currency, json[QString("orderTotalInBaseCurrency")]);
    m_order_total_in_base_currency_isSet = !json[QString("orderTotalInBaseCurrency")].isNull() && m_order_total_in_base_currency_isValid;

    m_order_type_isValid = ::OpenAPI::fromJsonValue(m_order_type, json[QString("orderType")]);
    m_order_type_isSet = !json[QString("orderType")].isNull() && m_order_type_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_promised_on_isValid = ::OpenAPI::fromJsonValue(m_promised_on, json[QString("promisedOn")]);
    m_promised_on_isSet = !json[QString("promisedOn")].isNull() && m_promised_on_isValid;

    m_purchase_receipts_isValid = ::OpenAPI::fromJsonValue(m_purchase_receipts, json[QString("purchaseReceipts")]);
    m_purchase_receipts_isSet = !json[QString("purchaseReceipts")].isNull() && m_purchase_receipts_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supplier_isValid = ::OpenAPI::fromJsonValue(m_supplier, json[QString("supplier")]);
    m_supplier_isSet = !json[QString("supplier")].isNull() && m_supplier_isValid;

    m_supplier_ref_isValid = ::OpenAPI::fromJsonValue(m_supplier_ref, json[QString("supplierRef")]);
    m_supplier_ref_isSet = !json[QString("supplierRef")].isNull() && m_supplier_ref_isValid;

    m_tax_details_isValid = ::OpenAPI::fromJsonValue(m_tax_details, json[QString("taxDetails")]);
    m_tax_details_isSet = !json[QString("taxDetails")].isNull() && m_tax_details_isValid;

    m_tax_total_isValid = ::OpenAPI::fromJsonValue(m_tax_total, json[QString("taxTotal")]);
    m_tax_total_isSet = !json[QString("taxTotal")].isNull() && m_tax_total_isValid;

    m_tax_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_tax_total_in_base_currency, json[QString("taxTotalInBaseCurrency")]);
    m_tax_total_in_base_currency_isSet = !json[QString("taxTotalInBaseCurrency")].isNull() && m_tax_total_in_base_currency_isValid;

    m_vat_exempt_total_isValid = ::OpenAPI::fromJsonValue(m_vat_exempt_total, json[QString("vatExemptTotal")]);
    m_vat_exempt_total_isSet = !json[QString("vatExemptTotal")].isNull() && m_vat_exempt_total_isValid;

    m_vat_exempt_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_vat_exempt_total_in_base_currency, json[QString("vatExemptTotalInBaseCurrency")]);
    m_vat_exempt_total_in_base_currency_isSet = !json[QString("vatExemptTotalInBaseCurrency")].isNull() && m_vat_exempt_total_in_base_currency_isValid;
}

QString OAIPurchaseOrderBasicDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseOrderBasicDto::asJsonObject() const {
    QJsonObject obj;
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_control_total_isSet) {
        obj.insert(QString("controlTotal"), ::OpenAPI::toJsonValue(m_control_total));
    }
    if (m_control_total_in_base_currency_isSet) {
        obj.insert(QString("controlTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_control_total_in_base_currency));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_exchange_rate_isSet) {
        obj.insert(QString("exchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_hold_isSet) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_line_total_isSet) {
        obj.insert(QString("lineTotal"), ::OpenAPI::toJsonValue(m_line_total));
    }
    if (m_line_total_in_base_currency_isSet) {
        obj.insert(QString("lineTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_line_total_in_base_currency));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_order_nbr_isSet) {
        obj.insert(QString("orderNbr"), ::OpenAPI::toJsonValue(m_order_nbr));
    }
    if (m_order_total_isSet) {
        obj.insert(QString("orderTotal"), ::OpenAPI::toJsonValue(m_order_total));
    }
    if (m_order_total_in_base_currency_isSet) {
        obj.insert(QString("orderTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_order_total_in_base_currency));
    }
    if (m_order_type_isSet) {
        obj.insert(QString("orderType"), ::OpenAPI::toJsonValue(m_order_type));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_promised_on_isSet) {
        obj.insert(QString("promisedOn"), ::OpenAPI::toJsonValue(m_promised_on));
    }
    if (m_purchase_receipts.size() > 0) {
        obj.insert(QString("purchaseReceipts"), ::OpenAPI::toJsonValue(m_purchase_receipts));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supplier.isSet()) {
        obj.insert(QString("supplier"), ::OpenAPI::toJsonValue(m_supplier));
    }
    if (m_supplier_ref_isSet) {
        obj.insert(QString("supplierRef"), ::OpenAPI::toJsonValue(m_supplier_ref));
    }
    if (m_tax_details.size() > 0) {
        obj.insert(QString("taxDetails"), ::OpenAPI::toJsonValue(m_tax_details));
    }
    if (m_tax_total_isSet) {
        obj.insert(QString("taxTotal"), ::OpenAPI::toJsonValue(m_tax_total));
    }
    if (m_tax_total_in_base_currency_isSet) {
        obj.insert(QString("taxTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_tax_total_in_base_currency));
    }
    if (m_vat_exempt_total_isSet) {
        obj.insert(QString("vatExemptTotal"), ::OpenAPI::toJsonValue(m_vat_exempt_total));
    }
    if (m_vat_exempt_total_in_base_currency_isSet) {
        obj.insert(QString("vatExemptTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_vat_exempt_total_in_base_currency));
    }
    return obj;
}

OAIBranchInPurchaseOrderBasicDto OAIPurchaseOrderBasicDto::getBranch() const {
    return m_branch;
}
void OAIPurchaseOrderBasicDto::setBranch(const OAIBranchInPurchaseOrderBasicDto &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIPurchaseOrderBasicDto::is_branch_Valid() const{
    return m_branch_isValid;
}

double OAIPurchaseOrderBasicDto::getControlTotal() const {
    return m_control_total;
}
void OAIPurchaseOrderBasicDto::setControlTotal(const double &control_total) {
    m_control_total = control_total;
    m_control_total_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_control_total_Set() const{
    return m_control_total_isSet;
}

bool OAIPurchaseOrderBasicDto::is_control_total_Valid() const{
    return m_control_total_isValid;
}

double OAIPurchaseOrderBasicDto::getControlTotalInBaseCurrency() const {
    return m_control_total_in_base_currency;
}
void OAIPurchaseOrderBasicDto::setControlTotalInBaseCurrency(const double &control_total_in_base_currency) {
    m_control_total_in_base_currency = control_total_in_base_currency;
    m_control_total_in_base_currency_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_control_total_in_base_currency_Set() const{
    return m_control_total_in_base_currency_isSet;
}

bool OAIPurchaseOrderBasicDto::is_control_total_in_base_currency_Valid() const{
    return m_control_total_in_base_currency_isValid;
}

QString OAIPurchaseOrderBasicDto::getCurrency() const {
    return m_currency;
}
void OAIPurchaseOrderBasicDto::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPurchaseOrderBasicDto::is_currency_Valid() const{
    return m_currency_isValid;
}

QDateTime OAIPurchaseOrderBasicDto::getDate() const {
    return m_date;
}
void OAIPurchaseOrderBasicDto::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAIPurchaseOrderBasicDto::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIPurchaseOrderBasicDto::getDescription() const {
    return m_description;
}
void OAIPurchaseOrderBasicDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPurchaseOrderBasicDto::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPurchaseOrderBasicDto::getErrorInfo() const {
    return m_error_info;
}
void OAIPurchaseOrderBasicDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIPurchaseOrderBasicDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

double OAIPurchaseOrderBasicDto::getExchangeRate() const {
    return m_exchange_rate;
}
void OAIPurchaseOrderBasicDto::setExchangeRate(const double &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAIPurchaseOrderBasicDto::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

bool OAIPurchaseOrderBasicDto::isHold() const {
    return m_hold;
}
void OAIPurchaseOrderBasicDto::setHold(const bool &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAIPurchaseOrderBasicDto::is_hold_Valid() const{
    return m_hold_isValid;
}

QDateTime OAIPurchaseOrderBasicDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIPurchaseOrderBasicDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIPurchaseOrderBasicDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

double OAIPurchaseOrderBasicDto::getLineTotal() const {
    return m_line_total;
}
void OAIPurchaseOrderBasicDto::setLineTotal(const double &line_total) {
    m_line_total = line_total;
    m_line_total_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_line_total_Set() const{
    return m_line_total_isSet;
}

bool OAIPurchaseOrderBasicDto::is_line_total_Valid() const{
    return m_line_total_isValid;
}

double OAIPurchaseOrderBasicDto::getLineTotalInBaseCurrency() const {
    return m_line_total_in_base_currency;
}
void OAIPurchaseOrderBasicDto::setLineTotalInBaseCurrency(const double &line_total_in_base_currency) {
    m_line_total_in_base_currency = line_total_in_base_currency;
    m_line_total_in_base_currency_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_line_total_in_base_currency_Set() const{
    return m_line_total_in_base_currency_isSet;
}

bool OAIPurchaseOrderBasicDto::is_line_total_in_base_currency_Valid() const{
    return m_line_total_in_base_currency_isValid;
}

QList<OAIPurchaseOrderLineDto> OAIPurchaseOrderBasicDto::getLines() const {
    return m_lines;
}
void OAIPurchaseOrderBasicDto::setLines(const QList<OAIPurchaseOrderLineDto> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAIPurchaseOrderBasicDto::is_lines_Valid() const{
    return m_lines_isValid;
}

OAILocationInPurchaseOrderBasicDto OAIPurchaseOrderBasicDto::getLocation() const {
    return m_location;
}
void OAIPurchaseOrderBasicDto::setLocation(const OAILocationInPurchaseOrderBasicDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIPurchaseOrderBasicDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIMetadataDto OAIPurchaseOrderBasicDto::getMetadata() const {
    return m_metadata;
}
void OAIPurchaseOrderBasicDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPurchaseOrderBasicDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIPurchaseOrderBasicDto::getNote() const {
    return m_note;
}
void OAIPurchaseOrderBasicDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAIPurchaseOrderBasicDto::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIPurchaseOrderBasicDto::getOrderNbr() const {
    return m_order_nbr;
}
void OAIPurchaseOrderBasicDto::setOrderNbr(const QString &order_nbr) {
    m_order_nbr = order_nbr;
    m_order_nbr_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_order_nbr_Set() const{
    return m_order_nbr_isSet;
}

bool OAIPurchaseOrderBasicDto::is_order_nbr_Valid() const{
    return m_order_nbr_isValid;
}

double OAIPurchaseOrderBasicDto::getOrderTotal() const {
    return m_order_total;
}
void OAIPurchaseOrderBasicDto::setOrderTotal(const double &order_total) {
    m_order_total = order_total;
    m_order_total_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_order_total_Set() const{
    return m_order_total_isSet;
}

bool OAIPurchaseOrderBasicDto::is_order_total_Valid() const{
    return m_order_total_isValid;
}

double OAIPurchaseOrderBasicDto::getOrderTotalInBaseCurrency() const {
    return m_order_total_in_base_currency;
}
void OAIPurchaseOrderBasicDto::setOrderTotalInBaseCurrency(const double &order_total_in_base_currency) {
    m_order_total_in_base_currency = order_total_in_base_currency;
    m_order_total_in_base_currency_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_order_total_in_base_currency_Set() const{
    return m_order_total_in_base_currency_isSet;
}

bool OAIPurchaseOrderBasicDto::is_order_total_in_base_currency_Valid() const{
    return m_order_total_in_base_currency_isValid;
}

QString OAIPurchaseOrderBasicDto::getOrderType() const {
    return m_order_type;
}
void OAIPurchaseOrderBasicDto::setOrderType(const QString &order_type) {
    m_order_type = order_type;
    m_order_type_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_order_type_Set() const{
    return m_order_type_isSet;
}

bool OAIPurchaseOrderBasicDto::is_order_type_Valid() const{
    return m_order_type_isValid;
}

OAIOwnerInPurchaseOrderBasicDto OAIPurchaseOrderBasicDto::getOwner() const {
    return m_owner;
}
void OAIPurchaseOrderBasicDto::setOwner(const OAIOwnerInPurchaseOrderBasicDto &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIPurchaseOrderBasicDto::is_owner_Valid() const{
    return m_owner_isValid;
}

QDateTime OAIPurchaseOrderBasicDto::getPromisedOn() const {
    return m_promised_on;
}
void OAIPurchaseOrderBasicDto::setPromisedOn(const QDateTime &promised_on) {
    m_promised_on = promised_on;
    m_promised_on_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_promised_on_Set() const{
    return m_promised_on_isSet;
}

bool OAIPurchaseOrderBasicDto::is_promised_on_Valid() const{
    return m_promised_on_isValid;
}

QList<OAIPurchaseReceiptsDto> OAIPurchaseOrderBasicDto::getPurchaseReceipts() const {
    return m_purchase_receipts;
}
void OAIPurchaseOrderBasicDto::setPurchaseReceipts(const QList<OAIPurchaseReceiptsDto> &purchase_receipts) {
    m_purchase_receipts = purchase_receipts;
    m_purchase_receipts_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_purchase_receipts_Set() const{
    return m_purchase_receipts_isSet;
}

bool OAIPurchaseOrderBasicDto::is_purchase_receipts_Valid() const{
    return m_purchase_receipts_isValid;
}

QString OAIPurchaseOrderBasicDto::getStatus() const {
    return m_status;
}
void OAIPurchaseOrderBasicDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPurchaseOrderBasicDto::is_status_Valid() const{
    return m_status_isValid;
}

OAISupplierInPurchaseOrderBasicDto OAIPurchaseOrderBasicDto::getSupplier() const {
    return m_supplier;
}
void OAIPurchaseOrderBasicDto::setSupplier(const OAISupplierInPurchaseOrderBasicDto &supplier) {
    m_supplier = supplier;
    m_supplier_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_supplier_Set() const{
    return m_supplier_isSet;
}

bool OAIPurchaseOrderBasicDto::is_supplier_Valid() const{
    return m_supplier_isValid;
}

QString OAIPurchaseOrderBasicDto::getSupplierRef() const {
    return m_supplier_ref;
}
void OAIPurchaseOrderBasicDto::setSupplierRef(const QString &supplier_ref) {
    m_supplier_ref = supplier_ref;
    m_supplier_ref_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_supplier_ref_Set() const{
    return m_supplier_ref_isSet;
}

bool OAIPurchaseOrderBasicDto::is_supplier_ref_Valid() const{
    return m_supplier_ref_isValid;
}

QList<OAITaxDetailDto> OAIPurchaseOrderBasicDto::getTaxDetails() const {
    return m_tax_details;
}
void OAIPurchaseOrderBasicDto::setTaxDetails(const QList<OAITaxDetailDto> &tax_details) {
    m_tax_details = tax_details;
    m_tax_details_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_tax_details_Set() const{
    return m_tax_details_isSet;
}

bool OAIPurchaseOrderBasicDto::is_tax_details_Valid() const{
    return m_tax_details_isValid;
}

double OAIPurchaseOrderBasicDto::getTaxTotal() const {
    return m_tax_total;
}
void OAIPurchaseOrderBasicDto::setTaxTotal(const double &tax_total) {
    m_tax_total = tax_total;
    m_tax_total_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_tax_total_Set() const{
    return m_tax_total_isSet;
}

bool OAIPurchaseOrderBasicDto::is_tax_total_Valid() const{
    return m_tax_total_isValid;
}

double OAIPurchaseOrderBasicDto::getTaxTotalInBaseCurrency() const {
    return m_tax_total_in_base_currency;
}
void OAIPurchaseOrderBasicDto::setTaxTotalInBaseCurrency(const double &tax_total_in_base_currency) {
    m_tax_total_in_base_currency = tax_total_in_base_currency;
    m_tax_total_in_base_currency_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_tax_total_in_base_currency_Set() const{
    return m_tax_total_in_base_currency_isSet;
}

bool OAIPurchaseOrderBasicDto::is_tax_total_in_base_currency_Valid() const{
    return m_tax_total_in_base_currency_isValid;
}

double OAIPurchaseOrderBasicDto::getVatExemptTotal() const {
    return m_vat_exempt_total;
}
void OAIPurchaseOrderBasicDto::setVatExemptTotal(const double &vat_exempt_total) {
    m_vat_exempt_total = vat_exempt_total;
    m_vat_exempt_total_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_vat_exempt_total_Set() const{
    return m_vat_exempt_total_isSet;
}

bool OAIPurchaseOrderBasicDto::is_vat_exempt_total_Valid() const{
    return m_vat_exempt_total_isValid;
}

double OAIPurchaseOrderBasicDto::getVatExemptTotalInBaseCurrency() const {
    return m_vat_exempt_total_in_base_currency;
}
void OAIPurchaseOrderBasicDto::setVatExemptTotalInBaseCurrency(const double &vat_exempt_total_in_base_currency) {
    m_vat_exempt_total_in_base_currency = vat_exempt_total_in_base_currency;
    m_vat_exempt_total_in_base_currency_isSet = true;
}

bool OAIPurchaseOrderBasicDto::is_vat_exempt_total_in_base_currency_Set() const{
    return m_vat_exempt_total_in_base_currency_isSet;
}

bool OAIPurchaseOrderBasicDto::is_vat_exempt_total_in_base_currency_Valid() const{
    return m_vat_exempt_total_in_base_currency_isValid;
}

bool OAIPurchaseOrderBasicDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_promised_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_receipts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_exempt_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_exempt_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseOrderBasicDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
