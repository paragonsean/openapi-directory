/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShipmentDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShipmentDto::OAIShipmentDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShipmentDto::OAIShipmentDto() {
    this->initializeModel();
}

OAIShipmentDto::~OAIShipmentDto() {}

void OAIShipmentDto::initializeModel() {

    m_container_isSet = false;
    m_container_isValid = false;

    m_control_quantity_isSet = false;
    m_control_quantity_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_delivery_address_isSet = false;
    m_delivery_address_isValid = false;

    m_delivery_contact_isSet = false;
    m_delivery_contact_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_fob_point_isSet = false;
    m_fob_point_isValid = false;

    m_freight_amt_isSet = false;
    m_freight_amt_isValid = false;

    m_freight_cost_isSet = false;
    m_freight_cost_isValid = false;

    m_from_warehouse_isSet = false;
    m_from_warehouse_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_insurance_isSet = false;
    m_insurance_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_mode_of_trasport_isSet = false;
    m_mode_of_trasport_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_packages_isSet = false;
    m_packages_isValid = false;

    m_packages_weight_isSet = false;
    m_packages_weight_isValid = false;

    m_residential_delivery_isSet = false;
    m_residential_delivery_isValid = false;

    m_saturday_delivery_isSet = false;
    m_saturday_delivery_isValid = false;

    m_ship_via_isSet = false;
    m_ship_via_isValid = false;

    m_shipment_date_isSet = false;
    m_shipment_date_isValid = false;

    m_shipment_detail_lines_isSet = false;
    m_shipment_detail_lines_isValid = false;

    m_shipment_number_isSet = false;
    m_shipment_number_isValid = false;

    m_shipment_order_lines_isSet = false;
    m_shipment_order_lines_isValid = false;

    m_shipment_package_lines_isSet = false;
    m_shipment_package_lines_isValid = false;

    m_shipment_type_isSet = false;
    m_shipment_type_isValid = false;

    m_shipped_quantity_isSet = false;
    m_shipped_quantity_isValid = false;

    m_shipped_volume_isSet = false;
    m_shipped_volume_isValid = false;

    m_shipped_weight_isSet = false;
    m_shipped_weight_isValid = false;

    m_shipping_terms_isSet = false;
    m_shipping_terms_isValid = false;

    m_shipping_zone_isSet = false;
    m_shipping_zone_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_to_warehouse_isSet = false;
    m_to_warehouse_isValid = false;

    m_transaction_type_isSet = false;
    m_transaction_type_isValid = false;

    m_use_customer_account_isSet = false;
    m_use_customer_account_isValid = false;
}

void OAIShipmentDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShipmentDto::fromJsonObject(QJsonObject json) {

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_control_quantity_isValid = ::OpenAPI::fromJsonValue(m_control_quantity, json[QString("controlQuantity")]);
    m_control_quantity_isSet = !json[QString("controlQuantity")].isNull() && m_control_quantity_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_delivery_address_isValid = ::OpenAPI::fromJsonValue(m_delivery_address, json[QString("deliveryAddress")]);
    m_delivery_address_isSet = !json[QString("deliveryAddress")].isNull() && m_delivery_address_isValid;

    m_delivery_contact_isValid = ::OpenAPI::fromJsonValue(m_delivery_contact, json[QString("deliveryContact")]);
    m_delivery_contact_isSet = !json[QString("deliveryContact")].isNull() && m_delivery_contact_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_fob_point_isValid = ::OpenAPI::fromJsonValue(m_fob_point, json[QString("fobPoint")]);
    m_fob_point_isSet = !json[QString("fobPoint")].isNull() && m_fob_point_isValid;

    m_freight_amt_isValid = ::OpenAPI::fromJsonValue(m_freight_amt, json[QString("freightAmt")]);
    m_freight_amt_isSet = !json[QString("freightAmt")].isNull() && m_freight_amt_isValid;

    m_freight_cost_isValid = ::OpenAPI::fromJsonValue(m_freight_cost, json[QString("freightCost")]);
    m_freight_cost_isSet = !json[QString("freightCost")].isNull() && m_freight_cost_isValid;

    m_from_warehouse_isValid = ::OpenAPI::fromJsonValue(m_from_warehouse, json[QString("fromWarehouse")]);
    m_from_warehouse_isSet = !json[QString("fromWarehouse")].isNull() && m_from_warehouse_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_insurance_isValid = ::OpenAPI::fromJsonValue(m_insurance, json[QString("insurance")]);
    m_insurance_isSet = !json[QString("insurance")].isNull() && m_insurance_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_mode_of_trasport_isValid = ::OpenAPI::fromJsonValue(m_mode_of_trasport, json[QString("modeOfTrasport")]);
    m_mode_of_trasport_isSet = !json[QString("modeOfTrasport")].isNull() && m_mode_of_trasport_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_packages_isValid = ::OpenAPI::fromJsonValue(m_packages, json[QString("packages")]);
    m_packages_isSet = !json[QString("packages")].isNull() && m_packages_isValid;

    m_packages_weight_isValid = ::OpenAPI::fromJsonValue(m_packages_weight, json[QString("packagesWeight")]);
    m_packages_weight_isSet = !json[QString("packagesWeight")].isNull() && m_packages_weight_isValid;

    m_residential_delivery_isValid = ::OpenAPI::fromJsonValue(m_residential_delivery, json[QString("residentialDelivery")]);
    m_residential_delivery_isSet = !json[QString("residentialDelivery")].isNull() && m_residential_delivery_isValid;

    m_saturday_delivery_isValid = ::OpenAPI::fromJsonValue(m_saturday_delivery, json[QString("saturdayDelivery")]);
    m_saturday_delivery_isSet = !json[QString("saturdayDelivery")].isNull() && m_saturday_delivery_isValid;

    m_ship_via_isValid = ::OpenAPI::fromJsonValue(m_ship_via, json[QString("shipVia")]);
    m_ship_via_isSet = !json[QString("shipVia")].isNull() && m_ship_via_isValid;

    m_shipment_date_isValid = ::OpenAPI::fromJsonValue(m_shipment_date, json[QString("shipmentDate")]);
    m_shipment_date_isSet = !json[QString("shipmentDate")].isNull() && m_shipment_date_isValid;

    m_shipment_detail_lines_isValid = ::OpenAPI::fromJsonValue(m_shipment_detail_lines, json[QString("shipmentDetailLines")]);
    m_shipment_detail_lines_isSet = !json[QString("shipmentDetailLines")].isNull() && m_shipment_detail_lines_isValid;

    m_shipment_number_isValid = ::OpenAPI::fromJsonValue(m_shipment_number, json[QString("shipmentNumber")]);
    m_shipment_number_isSet = !json[QString("shipmentNumber")].isNull() && m_shipment_number_isValid;

    m_shipment_order_lines_isValid = ::OpenAPI::fromJsonValue(m_shipment_order_lines, json[QString("shipmentOrderLines")]);
    m_shipment_order_lines_isSet = !json[QString("shipmentOrderLines")].isNull() && m_shipment_order_lines_isValid;

    m_shipment_package_lines_isValid = ::OpenAPI::fromJsonValue(m_shipment_package_lines, json[QString("shipmentPackageLines")]);
    m_shipment_package_lines_isSet = !json[QString("shipmentPackageLines")].isNull() && m_shipment_package_lines_isValid;

    m_shipment_type_isValid = ::OpenAPI::fromJsonValue(m_shipment_type, json[QString("shipmentType")]);
    m_shipment_type_isSet = !json[QString("shipmentType")].isNull() && m_shipment_type_isValid;

    m_shipped_quantity_isValid = ::OpenAPI::fromJsonValue(m_shipped_quantity, json[QString("shippedQuantity")]);
    m_shipped_quantity_isSet = !json[QString("shippedQuantity")].isNull() && m_shipped_quantity_isValid;

    m_shipped_volume_isValid = ::OpenAPI::fromJsonValue(m_shipped_volume, json[QString("shippedVolume")]);
    m_shipped_volume_isSet = !json[QString("shippedVolume")].isNull() && m_shipped_volume_isValid;

    m_shipped_weight_isValid = ::OpenAPI::fromJsonValue(m_shipped_weight, json[QString("shippedWeight")]);
    m_shipped_weight_isSet = !json[QString("shippedWeight")].isNull() && m_shipped_weight_isValid;

    m_shipping_terms_isValid = ::OpenAPI::fromJsonValue(m_shipping_terms, json[QString("shippingTerms")]);
    m_shipping_terms_isSet = !json[QString("shippingTerms")].isNull() && m_shipping_terms_isValid;

    m_shipping_zone_isValid = ::OpenAPI::fromJsonValue(m_shipping_zone, json[QString("shippingZone")]);
    m_shipping_zone_isSet = !json[QString("shippingZone")].isNull() && m_shipping_zone_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_to_warehouse_isValid = ::OpenAPI::fromJsonValue(m_to_warehouse, json[QString("toWarehouse")]);
    m_to_warehouse_isSet = !json[QString("toWarehouse")].isNull() && m_to_warehouse_isValid;

    m_transaction_type_isValid = ::OpenAPI::fromJsonValue(m_transaction_type, json[QString("transactionType")]);
    m_transaction_type_isSet = !json[QString("transactionType")].isNull() && m_transaction_type_isValid;

    m_use_customer_account_isValid = ::OpenAPI::fromJsonValue(m_use_customer_account, json[QString("useCustomerAccount")]);
    m_use_customer_account_isSet = !json[QString("useCustomerAccount")].isNull() && m_use_customer_account_isValid;
}

QString OAIShipmentDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShipmentDto::asJsonObject() const {
    QJsonObject obj;
    if (m_container_isSet) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_control_quantity_isSet) {
        obj.insert(QString("controlQuantity"), ::OpenAPI::toJsonValue(m_control_quantity));
    }
    if (m_currency_id_isSet) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_delivery_address.isSet()) {
        obj.insert(QString("deliveryAddress"), ::OpenAPI::toJsonValue(m_delivery_address));
    }
    if (m_delivery_contact.isSet()) {
        obj.insert(QString("deliveryContact"), ::OpenAPI::toJsonValue(m_delivery_contact));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_fob_point.isSet()) {
        obj.insert(QString("fobPoint"), ::OpenAPI::toJsonValue(m_fob_point));
    }
    if (m_freight_amt_isSet) {
        obj.insert(QString("freightAmt"), ::OpenAPI::toJsonValue(m_freight_amt));
    }
    if (m_freight_cost_isSet) {
        obj.insert(QString("freightCost"), ::OpenAPI::toJsonValue(m_freight_cost));
    }
    if (m_from_warehouse.isSet()) {
        obj.insert(QString("fromWarehouse"), ::OpenAPI::toJsonValue(m_from_warehouse));
    }
    if (m_hold_isSet) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_insurance_isSet) {
        obj.insert(QString("insurance"), ::OpenAPI::toJsonValue(m_insurance));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_mode_of_trasport.isSet()) {
        obj.insert(QString("modeOfTrasport"), ::OpenAPI::toJsonValue(m_mode_of_trasport));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_packages_isSet) {
        obj.insert(QString("packages"), ::OpenAPI::toJsonValue(m_packages));
    }
    if (m_packages_weight_isSet) {
        obj.insert(QString("packagesWeight"), ::OpenAPI::toJsonValue(m_packages_weight));
    }
    if (m_residential_delivery_isSet) {
        obj.insert(QString("residentialDelivery"), ::OpenAPI::toJsonValue(m_residential_delivery));
    }
    if (m_saturday_delivery_isSet) {
        obj.insert(QString("saturdayDelivery"), ::OpenAPI::toJsonValue(m_saturday_delivery));
    }
    if (m_ship_via.isSet()) {
        obj.insert(QString("shipVia"), ::OpenAPI::toJsonValue(m_ship_via));
    }
    if (m_shipment_date_isSet) {
        obj.insert(QString("shipmentDate"), ::OpenAPI::toJsonValue(m_shipment_date));
    }
    if (m_shipment_detail_lines.size() > 0) {
        obj.insert(QString("shipmentDetailLines"), ::OpenAPI::toJsonValue(m_shipment_detail_lines));
    }
    if (m_shipment_number_isSet) {
        obj.insert(QString("shipmentNumber"), ::OpenAPI::toJsonValue(m_shipment_number));
    }
    if (m_shipment_order_lines.size() > 0) {
        obj.insert(QString("shipmentOrderLines"), ::OpenAPI::toJsonValue(m_shipment_order_lines));
    }
    if (m_shipment_package_lines.size() > 0) {
        obj.insert(QString("shipmentPackageLines"), ::OpenAPI::toJsonValue(m_shipment_package_lines));
    }
    if (m_shipment_type_isSet) {
        obj.insert(QString("shipmentType"), ::OpenAPI::toJsonValue(m_shipment_type));
    }
    if (m_shipped_quantity_isSet) {
        obj.insert(QString("shippedQuantity"), ::OpenAPI::toJsonValue(m_shipped_quantity));
    }
    if (m_shipped_volume_isSet) {
        obj.insert(QString("shippedVolume"), ::OpenAPI::toJsonValue(m_shipped_volume));
    }
    if (m_shipped_weight_isSet) {
        obj.insert(QString("shippedWeight"), ::OpenAPI::toJsonValue(m_shipped_weight));
    }
    if (m_shipping_terms.isSet()) {
        obj.insert(QString("shippingTerms"), ::OpenAPI::toJsonValue(m_shipping_terms));
    }
    if (m_shipping_zone.isSet()) {
        obj.insert(QString("shippingZone"), ::OpenAPI::toJsonValue(m_shipping_zone));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_to_warehouse.isSet()) {
        obj.insert(QString("toWarehouse"), ::OpenAPI::toJsonValue(m_to_warehouse));
    }
    if (m_transaction_type.isSet()) {
        obj.insert(QString("transactionType"), ::OpenAPI::toJsonValue(m_transaction_type));
    }
    if (m_use_customer_account_isSet) {
        obj.insert(QString("useCustomerAccount"), ::OpenAPI::toJsonValue(m_use_customer_account));
    }
    return obj;
}

bool OAIShipmentDto::isContainer() const {
    return m_container;
}
void OAIShipmentDto::setContainer(const bool &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIShipmentDto::is_container_Set() const{
    return m_container_isSet;
}

bool OAIShipmentDto::is_container_Valid() const{
    return m_container_isValid;
}

double OAIShipmentDto::getControlQuantity() const {
    return m_control_quantity;
}
void OAIShipmentDto::setControlQuantity(const double &control_quantity) {
    m_control_quantity = control_quantity;
    m_control_quantity_isSet = true;
}

bool OAIShipmentDto::is_control_quantity_Set() const{
    return m_control_quantity_isSet;
}

bool OAIShipmentDto::is_control_quantity_Valid() const{
    return m_control_quantity_isValid;
}

QString OAIShipmentDto::getCurrencyId() const {
    return m_currency_id;
}
void OAIShipmentDto::setCurrencyId(const QString &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAIShipmentDto::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAIShipmentDto::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

OAICustomerInShipmentDto OAIShipmentDto::getCustomer() const {
    return m_customer;
}
void OAIShipmentDto::setCustomer(const OAICustomerInShipmentDto &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIShipmentDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIShipmentDto::is_customer_Valid() const{
    return m_customer_isValid;
}

OAIDeliveryAddressInShipmentDto OAIShipmentDto::getDeliveryAddress() const {
    return m_delivery_address;
}
void OAIShipmentDto::setDeliveryAddress(const OAIDeliveryAddressInShipmentDto &delivery_address) {
    m_delivery_address = delivery_address;
    m_delivery_address_isSet = true;
}

bool OAIShipmentDto::is_delivery_address_Set() const{
    return m_delivery_address_isSet;
}

bool OAIShipmentDto::is_delivery_address_Valid() const{
    return m_delivery_address_isValid;
}

OAIDeliveryContactInShipmentDto OAIShipmentDto::getDeliveryContact() const {
    return m_delivery_contact;
}
void OAIShipmentDto::setDeliveryContact(const OAIDeliveryContactInShipmentDto &delivery_contact) {
    m_delivery_contact = delivery_contact;
    m_delivery_contact_isSet = true;
}

bool OAIShipmentDto::is_delivery_contact_Set() const{
    return m_delivery_contact_isSet;
}

bool OAIShipmentDto::is_delivery_contact_Valid() const{
    return m_delivery_contact_isValid;
}

QString OAIShipmentDto::getErrorInfo() const {
    return m_error_info;
}
void OAIShipmentDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIShipmentDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIShipmentDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

OAIFobPointInShipmentDto OAIShipmentDto::getFobPoint() const {
    return m_fob_point;
}
void OAIShipmentDto::setFobPoint(const OAIFobPointInShipmentDto &fob_point) {
    m_fob_point = fob_point;
    m_fob_point_isSet = true;
}

bool OAIShipmentDto::is_fob_point_Set() const{
    return m_fob_point_isSet;
}

bool OAIShipmentDto::is_fob_point_Valid() const{
    return m_fob_point_isValid;
}

double OAIShipmentDto::getFreightAmt() const {
    return m_freight_amt;
}
void OAIShipmentDto::setFreightAmt(const double &freight_amt) {
    m_freight_amt = freight_amt;
    m_freight_amt_isSet = true;
}

bool OAIShipmentDto::is_freight_amt_Set() const{
    return m_freight_amt_isSet;
}

bool OAIShipmentDto::is_freight_amt_Valid() const{
    return m_freight_amt_isValid;
}

double OAIShipmentDto::getFreightCost() const {
    return m_freight_cost;
}
void OAIShipmentDto::setFreightCost(const double &freight_cost) {
    m_freight_cost = freight_cost;
    m_freight_cost_isSet = true;
}

bool OAIShipmentDto::is_freight_cost_Set() const{
    return m_freight_cost_isSet;
}

bool OAIShipmentDto::is_freight_cost_Valid() const{
    return m_freight_cost_isValid;
}

OAIFromWarehouseInShipmentDto OAIShipmentDto::getFromWarehouse() const {
    return m_from_warehouse;
}
void OAIShipmentDto::setFromWarehouse(const OAIFromWarehouseInShipmentDto &from_warehouse) {
    m_from_warehouse = from_warehouse;
    m_from_warehouse_isSet = true;
}

bool OAIShipmentDto::is_from_warehouse_Set() const{
    return m_from_warehouse_isSet;
}

bool OAIShipmentDto::is_from_warehouse_Valid() const{
    return m_from_warehouse_isValid;
}

bool OAIShipmentDto::isHold() const {
    return m_hold;
}
void OAIShipmentDto::setHold(const bool &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAIShipmentDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAIShipmentDto::is_hold_Valid() const{
    return m_hold_isValid;
}

bool OAIShipmentDto::isInsurance() const {
    return m_insurance;
}
void OAIShipmentDto::setInsurance(const bool &insurance) {
    m_insurance = insurance;
    m_insurance_isSet = true;
}

bool OAIShipmentDto::is_insurance_Set() const{
    return m_insurance_isSet;
}

bool OAIShipmentDto::is_insurance_Valid() const{
    return m_insurance_isValid;
}

QDateTime OAIShipmentDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIShipmentDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIShipmentDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIShipmentDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAILocationInShipmentDto OAIShipmentDto::getLocation() const {
    return m_location;
}
void OAIShipmentDto::setLocation(const OAILocationInShipmentDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIShipmentDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIShipmentDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIMetadataDto OAIShipmentDto::getMetadata() const {
    return m_metadata;
}
void OAIShipmentDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIShipmentDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIShipmentDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIModeOfTrasportInShipmentDto OAIShipmentDto::getModeOfTrasport() const {
    return m_mode_of_trasport;
}
void OAIShipmentDto::setModeOfTrasport(const OAIModeOfTrasportInShipmentDto &mode_of_trasport) {
    m_mode_of_trasport = mode_of_trasport;
    m_mode_of_trasport_isSet = true;
}

bool OAIShipmentDto::is_mode_of_trasport_Set() const{
    return m_mode_of_trasport_isSet;
}

bool OAIShipmentDto::is_mode_of_trasport_Valid() const{
    return m_mode_of_trasport_isValid;
}

QString OAIShipmentDto::getNote() const {
    return m_note;
}
void OAIShipmentDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIShipmentDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAIShipmentDto::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIShipmentDto::getOperation() const {
    return m_operation;
}
void OAIShipmentDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIShipmentDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIShipmentDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIOwnerInShipmentDto OAIShipmentDto::getOwner() const {
    return m_owner;
}
void OAIShipmentDto::setOwner(const OAIOwnerInShipmentDto &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIShipmentDto::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIShipmentDto::is_owner_Valid() const{
    return m_owner_isValid;
}

qint32 OAIShipmentDto::getPackages() const {
    return m_packages;
}
void OAIShipmentDto::setPackages(const qint32 &packages) {
    m_packages = packages;
    m_packages_isSet = true;
}

bool OAIShipmentDto::is_packages_Set() const{
    return m_packages_isSet;
}

bool OAIShipmentDto::is_packages_Valid() const{
    return m_packages_isValid;
}

double OAIShipmentDto::getPackagesWeight() const {
    return m_packages_weight;
}
void OAIShipmentDto::setPackagesWeight(const double &packages_weight) {
    m_packages_weight = packages_weight;
    m_packages_weight_isSet = true;
}

bool OAIShipmentDto::is_packages_weight_Set() const{
    return m_packages_weight_isSet;
}

bool OAIShipmentDto::is_packages_weight_Valid() const{
    return m_packages_weight_isValid;
}

bool OAIShipmentDto::isResidentialDelivery() const {
    return m_residential_delivery;
}
void OAIShipmentDto::setResidentialDelivery(const bool &residential_delivery) {
    m_residential_delivery = residential_delivery;
    m_residential_delivery_isSet = true;
}

bool OAIShipmentDto::is_residential_delivery_Set() const{
    return m_residential_delivery_isSet;
}

bool OAIShipmentDto::is_residential_delivery_Valid() const{
    return m_residential_delivery_isValid;
}

bool OAIShipmentDto::isSaturdayDelivery() const {
    return m_saturday_delivery;
}
void OAIShipmentDto::setSaturdayDelivery(const bool &saturday_delivery) {
    m_saturday_delivery = saturday_delivery;
    m_saturday_delivery_isSet = true;
}

bool OAIShipmentDto::is_saturday_delivery_Set() const{
    return m_saturday_delivery_isSet;
}

bool OAIShipmentDto::is_saturday_delivery_Valid() const{
    return m_saturday_delivery_isValid;
}

OAIShipViaInShipmentDto OAIShipmentDto::getShipVia() const {
    return m_ship_via;
}
void OAIShipmentDto::setShipVia(const OAIShipViaInShipmentDto &ship_via) {
    m_ship_via = ship_via;
    m_ship_via_isSet = true;
}

bool OAIShipmentDto::is_ship_via_Set() const{
    return m_ship_via_isSet;
}

bool OAIShipmentDto::is_ship_via_Valid() const{
    return m_ship_via_isValid;
}

QDateTime OAIShipmentDto::getShipmentDate() const {
    return m_shipment_date;
}
void OAIShipmentDto::setShipmentDate(const QDateTime &shipment_date) {
    m_shipment_date = shipment_date;
    m_shipment_date_isSet = true;
}

bool OAIShipmentDto::is_shipment_date_Set() const{
    return m_shipment_date_isSet;
}

bool OAIShipmentDto::is_shipment_date_Valid() const{
    return m_shipment_date_isValid;
}

QList<OAIShipmentDetailLineDto> OAIShipmentDto::getShipmentDetailLines() const {
    return m_shipment_detail_lines;
}
void OAIShipmentDto::setShipmentDetailLines(const QList<OAIShipmentDetailLineDto> &shipment_detail_lines) {
    m_shipment_detail_lines = shipment_detail_lines;
    m_shipment_detail_lines_isSet = true;
}

bool OAIShipmentDto::is_shipment_detail_lines_Set() const{
    return m_shipment_detail_lines_isSet;
}

bool OAIShipmentDto::is_shipment_detail_lines_Valid() const{
    return m_shipment_detail_lines_isValid;
}

QString OAIShipmentDto::getShipmentNumber() const {
    return m_shipment_number;
}
void OAIShipmentDto::setShipmentNumber(const QString &shipment_number) {
    m_shipment_number = shipment_number;
    m_shipment_number_isSet = true;
}

bool OAIShipmentDto::is_shipment_number_Set() const{
    return m_shipment_number_isSet;
}

bool OAIShipmentDto::is_shipment_number_Valid() const{
    return m_shipment_number_isValid;
}

QList<OAIShipmentOrderLineDto> OAIShipmentDto::getShipmentOrderLines() const {
    return m_shipment_order_lines;
}
void OAIShipmentDto::setShipmentOrderLines(const QList<OAIShipmentOrderLineDto> &shipment_order_lines) {
    m_shipment_order_lines = shipment_order_lines;
    m_shipment_order_lines_isSet = true;
}

bool OAIShipmentDto::is_shipment_order_lines_Set() const{
    return m_shipment_order_lines_isSet;
}

bool OAIShipmentDto::is_shipment_order_lines_Valid() const{
    return m_shipment_order_lines_isValid;
}

QList<OAIPackageDetailLineDto> OAIShipmentDto::getShipmentPackageLines() const {
    return m_shipment_package_lines;
}
void OAIShipmentDto::setShipmentPackageLines(const QList<OAIPackageDetailLineDto> &shipment_package_lines) {
    m_shipment_package_lines = shipment_package_lines;
    m_shipment_package_lines_isSet = true;
}

bool OAIShipmentDto::is_shipment_package_lines_Set() const{
    return m_shipment_package_lines_isSet;
}

bool OAIShipmentDto::is_shipment_package_lines_Valid() const{
    return m_shipment_package_lines_isValid;
}

QString OAIShipmentDto::getShipmentType() const {
    return m_shipment_type;
}
void OAIShipmentDto::setShipmentType(const QString &shipment_type) {
    m_shipment_type = shipment_type;
    m_shipment_type_isSet = true;
}

bool OAIShipmentDto::is_shipment_type_Set() const{
    return m_shipment_type_isSet;
}

bool OAIShipmentDto::is_shipment_type_Valid() const{
    return m_shipment_type_isValid;
}

double OAIShipmentDto::getShippedQuantity() const {
    return m_shipped_quantity;
}
void OAIShipmentDto::setShippedQuantity(const double &shipped_quantity) {
    m_shipped_quantity = shipped_quantity;
    m_shipped_quantity_isSet = true;
}

bool OAIShipmentDto::is_shipped_quantity_Set() const{
    return m_shipped_quantity_isSet;
}

bool OAIShipmentDto::is_shipped_quantity_Valid() const{
    return m_shipped_quantity_isValid;
}

double OAIShipmentDto::getShippedVolume() const {
    return m_shipped_volume;
}
void OAIShipmentDto::setShippedVolume(const double &shipped_volume) {
    m_shipped_volume = shipped_volume;
    m_shipped_volume_isSet = true;
}

bool OAIShipmentDto::is_shipped_volume_Set() const{
    return m_shipped_volume_isSet;
}

bool OAIShipmentDto::is_shipped_volume_Valid() const{
    return m_shipped_volume_isValid;
}

double OAIShipmentDto::getShippedWeight() const {
    return m_shipped_weight;
}
void OAIShipmentDto::setShippedWeight(const double &shipped_weight) {
    m_shipped_weight = shipped_weight;
    m_shipped_weight_isSet = true;
}

bool OAIShipmentDto::is_shipped_weight_Set() const{
    return m_shipped_weight_isSet;
}

bool OAIShipmentDto::is_shipped_weight_Valid() const{
    return m_shipped_weight_isValid;
}

OAIShippingTermsInShipmentDto OAIShipmentDto::getShippingTerms() const {
    return m_shipping_terms;
}
void OAIShipmentDto::setShippingTerms(const OAIShippingTermsInShipmentDto &shipping_terms) {
    m_shipping_terms = shipping_terms;
    m_shipping_terms_isSet = true;
}

bool OAIShipmentDto::is_shipping_terms_Set() const{
    return m_shipping_terms_isSet;
}

bool OAIShipmentDto::is_shipping_terms_Valid() const{
    return m_shipping_terms_isValid;
}

OAIShippingZoneInShipmentDto OAIShipmentDto::getShippingZone() const {
    return m_shipping_zone;
}
void OAIShipmentDto::setShippingZone(const OAIShippingZoneInShipmentDto &shipping_zone) {
    m_shipping_zone = shipping_zone;
    m_shipping_zone_isSet = true;
}

bool OAIShipmentDto::is_shipping_zone_Set() const{
    return m_shipping_zone_isSet;
}

bool OAIShipmentDto::is_shipping_zone_Valid() const{
    return m_shipping_zone_isValid;
}

QString OAIShipmentDto::getStatus() const {
    return m_status;
}
void OAIShipmentDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIShipmentDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIShipmentDto::is_status_Valid() const{
    return m_status_isValid;
}

OAIToWarehouseInShipmentDto OAIShipmentDto::getToWarehouse() const {
    return m_to_warehouse;
}
void OAIShipmentDto::setToWarehouse(const OAIToWarehouseInShipmentDto &to_warehouse) {
    m_to_warehouse = to_warehouse;
    m_to_warehouse_isSet = true;
}

bool OAIShipmentDto::is_to_warehouse_Set() const{
    return m_to_warehouse_isSet;
}

bool OAIShipmentDto::is_to_warehouse_Valid() const{
    return m_to_warehouse_isValid;
}

OAITransactionTypeInShipmentDto OAIShipmentDto::getTransactionType() const {
    return m_transaction_type;
}
void OAIShipmentDto::setTransactionType(const OAITransactionTypeInShipmentDto &transaction_type) {
    m_transaction_type = transaction_type;
    m_transaction_type_isSet = true;
}

bool OAIShipmentDto::is_transaction_type_Set() const{
    return m_transaction_type_isSet;
}

bool OAIShipmentDto::is_transaction_type_Valid() const{
    return m_transaction_type_isValid;
}

bool OAIShipmentDto::isUseCustomerAccount() const {
    return m_use_customer_account;
}
void OAIShipmentDto::setUseCustomerAccount(const bool &use_customer_account) {
    m_use_customer_account = use_customer_account;
    m_use_customer_account_isSet = true;
}

bool OAIShipmentDto::is_use_customer_account_Set() const{
    return m_use_customer_account_isSet;
}

bool OAIShipmentDto::is_use_customer_account_Valid() const{
    return m_use_customer_account_isValid;
}

bool OAIShipmentDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fob_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight_amt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_warehouse.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insurance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_of_trasport.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_packages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packages_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_residential_delivery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saturday_delivery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_via.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_detail_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_order_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_package_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipped_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipped_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipped_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_warehouse.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_customer_account_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShipmentDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
