/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupplierUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupplierUpdateDto::OAISupplierUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupplierUpdateDto::OAISupplierUpdateDto() {
    this->initializeModel();
}

OAISupplierUpdateDto::~OAISupplierUpdateDto() {}

void OAISupplierUpdateDto::initializeModel() {

    m_account_reference_isSet = false;
    m_account_reference_isValid = false;

    m_account_used_for_payment_isSet = false;
    m_account_used_for_payment_isValid = false;

    m_attribute_lines_isSet = false;
    m_attribute_lines_isValid = false;

    m_cash_account_isSet = false;
    m_cash_account_isValid = false;

    m_charge_bearer_isSet = false;
    m_charge_bearer_isValid = false;

    m_corporate_id_isSet = false;
    m_corporate_id_isValid = false;

    m_credit_terms_id_isSet = false;
    m_credit_terms_id_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_currency_override_isSet = false;
    m_currency_override_isValid = false;

    m_currency_rate_override_isSet = false;
    m_currency_rate_override_isValid = false;

    m_document_language_isSet = false;
    m_document_language_isValid = false;

    m_gl_accounts_isSet = false;
    m_gl_accounts_isValid = false;

    m_main_address_isSet = false;
    m_main_address_isValid = false;

    m_main_contact_isSet = false;
    m_main_contact_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_override_number_series_isSet = false;
    m_override_number_series_isValid = false;

    m_override_with_class_values_isSet = false;
    m_override_with_class_values_isValid = false;

    m_parent_record_number_isSet = false;
    m_parent_record_number_isValid = false;

    m_pay_separately_isSet = false;
    m_pay_separately_isValid = false;

    m_payment_by_isSet = false;
    m_payment_by_isValid = false;

    m_payment_lead_time_isSet = false;
    m_payment_lead_time_isValid = false;

    m_payment_method_id_isSet = false;
    m_payment_method_id_isValid = false;

    m_payment_ref_display_mask_isSet = false;
    m_payment_ref_display_mask_isValid = false;

    m_remit_address_isSet = false;
    m_remit_address_isValid = false;

    m_remit_contact_isSet = false;
    m_remit_contact_isValid = false;

    m_retainage_apply_isSet = false;
    m_retainage_apply_isValid = false;

    m_retainage_cash_account_id_isSet = false;
    m_retainage_cash_account_id_isValid = false;

    m_retainage_pct_isSet = false;
    m_retainage_pct_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supplier_address_isSet = false;
    m_supplier_address_isValid = false;

    m_supplier_class_id_isSet = false;
    m_supplier_class_id_isValid = false;

    m_supplier_contact_isSet = false;
    m_supplier_contact_isValid = false;

    m_supplier_payment_method_details_isSet = false;
    m_supplier_payment_method_details_isValid = false;

    m_vat_registration_id_isSet = false;
    m_vat_registration_id_isValid = false;

    m_vat_zone_id_isSet = false;
    m_vat_zone_id_isValid = false;
}

void OAISupplierUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupplierUpdateDto::fromJsonObject(QJsonObject json) {

    m_account_reference_isValid = ::OpenAPI::fromJsonValue(m_account_reference, json[QString("accountReference")]);
    m_account_reference_isSet = !json[QString("accountReference")].isNull() && m_account_reference_isValid;

    m_account_used_for_payment_isValid = ::OpenAPI::fromJsonValue(m_account_used_for_payment, json[QString("accountUsedForPayment")]);
    m_account_used_for_payment_isSet = !json[QString("accountUsedForPayment")].isNull() && m_account_used_for_payment_isValid;

    m_attribute_lines_isValid = ::OpenAPI::fromJsonValue(m_attribute_lines, json[QString("attributeLines")]);
    m_attribute_lines_isSet = !json[QString("attributeLines")].isNull() && m_attribute_lines_isValid;

    m_cash_account_isValid = ::OpenAPI::fromJsonValue(m_cash_account, json[QString("cashAccount")]);
    m_cash_account_isSet = !json[QString("cashAccount")].isNull() && m_cash_account_isValid;

    m_charge_bearer_isValid = ::OpenAPI::fromJsonValue(m_charge_bearer, json[QString("chargeBearer")]);
    m_charge_bearer_isSet = !json[QString("chargeBearer")].isNull() && m_charge_bearer_isValid;

    m_corporate_id_isValid = ::OpenAPI::fromJsonValue(m_corporate_id, json[QString("corporateId")]);
    m_corporate_id_isSet = !json[QString("corporateId")].isNull() && m_corporate_id_isValid;

    m_credit_terms_id_isValid = ::OpenAPI::fromJsonValue(m_credit_terms_id, json[QString("creditTermsId")]);
    m_credit_terms_id_isSet = !json[QString("creditTermsId")].isNull() && m_credit_terms_id_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_currency_override_isValid = ::OpenAPI::fromJsonValue(m_currency_override, json[QString("currencyOverride")]);
    m_currency_override_isSet = !json[QString("currencyOverride")].isNull() && m_currency_override_isValid;

    m_currency_rate_override_isValid = ::OpenAPI::fromJsonValue(m_currency_rate_override, json[QString("currencyRateOverride")]);
    m_currency_rate_override_isSet = !json[QString("currencyRateOverride")].isNull() && m_currency_rate_override_isValid;

    m_document_language_isValid = ::OpenAPI::fromJsonValue(m_document_language, json[QString("documentLanguage")]);
    m_document_language_isSet = !json[QString("documentLanguage")].isNull() && m_document_language_isValid;

    m_gl_accounts_isValid = ::OpenAPI::fromJsonValue(m_gl_accounts, json[QString("glAccounts")]);
    m_gl_accounts_isSet = !json[QString("glAccounts")].isNull() && m_gl_accounts_isValid;

    m_main_address_isValid = ::OpenAPI::fromJsonValue(m_main_address, json[QString("mainAddress")]);
    m_main_address_isSet = !json[QString("mainAddress")].isNull() && m_main_address_isValid;

    m_main_contact_isValid = ::OpenAPI::fromJsonValue(m_main_contact, json[QString("mainContact")]);
    m_main_contact_isSet = !json[QString("mainContact")].isNull() && m_main_contact_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_override_number_series_isValid = ::OpenAPI::fromJsonValue(m_override_number_series, json[QString("overrideNumberSeries")]);
    m_override_number_series_isSet = !json[QString("overrideNumberSeries")].isNull() && m_override_number_series_isValid;

    m_override_with_class_values_isValid = ::OpenAPI::fromJsonValue(m_override_with_class_values, json[QString("overrideWithClassValues")]);
    m_override_with_class_values_isSet = !json[QString("overrideWithClassValues")].isNull() && m_override_with_class_values_isValid;

    m_parent_record_number_isValid = ::OpenAPI::fromJsonValue(m_parent_record_number, json[QString("parentRecordNumber")]);
    m_parent_record_number_isSet = !json[QString("parentRecordNumber")].isNull() && m_parent_record_number_isValid;

    m_pay_separately_isValid = ::OpenAPI::fromJsonValue(m_pay_separately, json[QString("paySeparately")]);
    m_pay_separately_isSet = !json[QString("paySeparately")].isNull() && m_pay_separately_isValid;

    m_payment_by_isValid = ::OpenAPI::fromJsonValue(m_payment_by, json[QString("paymentBy")]);
    m_payment_by_isSet = !json[QString("paymentBy")].isNull() && m_payment_by_isValid;

    m_payment_lead_time_isValid = ::OpenAPI::fromJsonValue(m_payment_lead_time, json[QString("paymentLeadTime")]);
    m_payment_lead_time_isSet = !json[QString("paymentLeadTime")].isNull() && m_payment_lead_time_isValid;

    m_payment_method_id_isValid = ::OpenAPI::fromJsonValue(m_payment_method_id, json[QString("paymentMethodId")]);
    m_payment_method_id_isSet = !json[QString("paymentMethodId")].isNull() && m_payment_method_id_isValid;

    m_payment_ref_display_mask_isValid = ::OpenAPI::fromJsonValue(m_payment_ref_display_mask, json[QString("paymentRefDisplayMask")]);
    m_payment_ref_display_mask_isSet = !json[QString("paymentRefDisplayMask")].isNull() && m_payment_ref_display_mask_isValid;

    m_remit_address_isValid = ::OpenAPI::fromJsonValue(m_remit_address, json[QString("remitAddress")]);
    m_remit_address_isSet = !json[QString("remitAddress")].isNull() && m_remit_address_isValid;

    m_remit_contact_isValid = ::OpenAPI::fromJsonValue(m_remit_contact, json[QString("remitContact")]);
    m_remit_contact_isSet = !json[QString("remitContact")].isNull() && m_remit_contact_isValid;

    m_retainage_apply_isValid = ::OpenAPI::fromJsonValue(m_retainage_apply, json[QString("retainageApply")]);
    m_retainage_apply_isSet = !json[QString("retainageApply")].isNull() && m_retainage_apply_isValid;

    m_retainage_cash_account_id_isValid = ::OpenAPI::fromJsonValue(m_retainage_cash_account_id, json[QString("retainageCashAccountID")]);
    m_retainage_cash_account_id_isSet = !json[QString("retainageCashAccountID")].isNull() && m_retainage_cash_account_id_isValid;

    m_retainage_pct_isValid = ::OpenAPI::fromJsonValue(m_retainage_pct, json[QString("retainagePct")]);
    m_retainage_pct_isSet = !json[QString("retainagePct")].isNull() && m_retainage_pct_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supplier_address_isValid = ::OpenAPI::fromJsonValue(m_supplier_address, json[QString("supplierAddress")]);
    m_supplier_address_isSet = !json[QString("supplierAddress")].isNull() && m_supplier_address_isValid;

    m_supplier_class_id_isValid = ::OpenAPI::fromJsonValue(m_supplier_class_id, json[QString("supplierClassId")]);
    m_supplier_class_id_isSet = !json[QString("supplierClassId")].isNull() && m_supplier_class_id_isValid;

    m_supplier_contact_isValid = ::OpenAPI::fromJsonValue(m_supplier_contact, json[QString("supplierContact")]);
    m_supplier_contact_isSet = !json[QString("supplierContact")].isNull() && m_supplier_contact_isValid;

    m_supplier_payment_method_details_isValid = ::OpenAPI::fromJsonValue(m_supplier_payment_method_details, json[QString("supplierPaymentMethodDetails")]);
    m_supplier_payment_method_details_isSet = !json[QString("supplierPaymentMethodDetails")].isNull() && m_supplier_payment_method_details_isValid;

    m_vat_registration_id_isValid = ::OpenAPI::fromJsonValue(m_vat_registration_id, json[QString("vatRegistrationId")]);
    m_vat_registration_id_isSet = !json[QString("vatRegistrationId")].isNull() && m_vat_registration_id_isValid;

    m_vat_zone_id_isValid = ::OpenAPI::fromJsonValue(m_vat_zone_id, json[QString("vatZoneId")]);
    m_vat_zone_id_isSet = !json[QString("vatZoneId")].isNull() && m_vat_zone_id_isValid;
}

QString OAISupplierUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupplierUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_account_reference.isSet()) {
        obj.insert(QString("accountReference"), ::OpenAPI::toJsonValue(m_account_reference));
    }
    if (m_account_used_for_payment.isSet()) {
        obj.insert(QString("accountUsedForPayment"), ::OpenAPI::toJsonValue(m_account_used_for_payment));
    }
    if (m_attribute_lines.size() > 0) {
        obj.insert(QString("attributeLines"), ::OpenAPI::toJsonValue(m_attribute_lines));
    }
    if (m_cash_account.isSet()) {
        obj.insert(QString("cashAccount"), ::OpenAPI::toJsonValue(m_cash_account));
    }
    if (m_charge_bearer.isSet()) {
        obj.insert(QString("chargeBearer"), ::OpenAPI::toJsonValue(m_charge_bearer));
    }
    if (m_corporate_id.isSet()) {
        obj.insert(QString("corporateId"), ::OpenAPI::toJsonValue(m_corporate_id));
    }
    if (m_credit_terms_id.isSet()) {
        obj.insert(QString("creditTermsId"), ::OpenAPI::toJsonValue(m_credit_terms_id));
    }
    if (m_currency_id.isSet()) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_currency_override.isSet()) {
        obj.insert(QString("currencyOverride"), ::OpenAPI::toJsonValue(m_currency_override));
    }
    if (m_currency_rate_override.isSet()) {
        obj.insert(QString("currencyRateOverride"), ::OpenAPI::toJsonValue(m_currency_rate_override));
    }
    if (m_document_language.isSet()) {
        obj.insert(QString("documentLanguage"), ::OpenAPI::toJsonValue(m_document_language));
    }
    if (m_gl_accounts.isSet()) {
        obj.insert(QString("glAccounts"), ::OpenAPI::toJsonValue(m_gl_accounts));
    }
    if (m_main_address.isSet()) {
        obj.insert(QString("mainAddress"), ::OpenAPI::toJsonValue(m_main_address));
    }
    if (m_main_contact.isSet()) {
        obj.insert(QString("mainContact"), ::OpenAPI::toJsonValue(m_main_contact));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_note.isSet()) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_number.isSet()) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_override_number_series.isSet()) {
        obj.insert(QString("overrideNumberSeries"), ::OpenAPI::toJsonValue(m_override_number_series));
    }
    if (m_override_with_class_values_isSet) {
        obj.insert(QString("overrideWithClassValues"), ::OpenAPI::toJsonValue(m_override_with_class_values));
    }
    if (m_parent_record_number.isSet()) {
        obj.insert(QString("parentRecordNumber"), ::OpenAPI::toJsonValue(m_parent_record_number));
    }
    if (m_pay_separately.isSet()) {
        obj.insert(QString("paySeparately"), ::OpenAPI::toJsonValue(m_pay_separately));
    }
    if (m_payment_by.isSet()) {
        obj.insert(QString("paymentBy"), ::OpenAPI::toJsonValue(m_payment_by));
    }
    if (m_payment_lead_time.isSet()) {
        obj.insert(QString("paymentLeadTime"), ::OpenAPI::toJsonValue(m_payment_lead_time));
    }
    if (m_payment_method_id.isSet()) {
        obj.insert(QString("paymentMethodId"), ::OpenAPI::toJsonValue(m_payment_method_id));
    }
    if (m_payment_ref_display_mask.isSet()) {
        obj.insert(QString("paymentRefDisplayMask"), ::OpenAPI::toJsonValue(m_payment_ref_display_mask));
    }
    if (m_remit_address.isSet()) {
        obj.insert(QString("remitAddress"), ::OpenAPI::toJsonValue(m_remit_address));
    }
    if (m_remit_contact.isSet()) {
        obj.insert(QString("remitContact"), ::OpenAPI::toJsonValue(m_remit_contact));
    }
    if (m_retainage_apply.isSet()) {
        obj.insert(QString("retainageApply"), ::OpenAPI::toJsonValue(m_retainage_apply));
    }
    if (m_retainage_cash_account_id.isSet()) {
        obj.insert(QString("retainageCashAccountID"), ::OpenAPI::toJsonValue(m_retainage_cash_account_id));
    }
    if (m_retainage_pct.isSet()) {
        obj.insert(QString("retainagePct"), ::OpenAPI::toJsonValue(m_retainage_pct));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supplier_address.isSet()) {
        obj.insert(QString("supplierAddress"), ::OpenAPI::toJsonValue(m_supplier_address));
    }
    if (m_supplier_class_id.isSet()) {
        obj.insert(QString("supplierClassId"), ::OpenAPI::toJsonValue(m_supplier_class_id));
    }
    if (m_supplier_contact.isSet()) {
        obj.insert(QString("supplierContact"), ::OpenAPI::toJsonValue(m_supplier_contact));
    }
    if (m_supplier_payment_method_details.size() > 0) {
        obj.insert(QString("supplierPaymentMethodDetails"), ::OpenAPI::toJsonValue(m_supplier_payment_method_details));
    }
    if (m_vat_registration_id.isSet()) {
        obj.insert(QString("vatRegistrationId"), ::OpenAPI::toJsonValue(m_vat_registration_id));
    }
    if (m_vat_zone_id.isSet()) {
        obj.insert(QString("vatZoneId"), ::OpenAPI::toJsonValue(m_vat_zone_id));
    }
    return obj;
}

OAIDtoValueOfString OAISupplierUpdateDto::getAccountReference() const {
    return m_account_reference;
}
void OAISupplierUpdateDto::setAccountReference(const OAIDtoValueOfString &account_reference) {
    m_account_reference = account_reference;
    m_account_reference_isSet = true;
}

bool OAISupplierUpdateDto::is_account_reference_Set() const{
    return m_account_reference_isSet;
}

bool OAISupplierUpdateDto::is_account_reference_Valid() const{
    return m_account_reference_isValid;
}

OAIDtoValueOfAccountUsedForPayment OAISupplierUpdateDto::getAccountUsedForPayment() const {
    return m_account_used_for_payment;
}
void OAISupplierUpdateDto::setAccountUsedForPayment(const OAIDtoValueOfAccountUsedForPayment &account_used_for_payment) {
    m_account_used_for_payment = account_used_for_payment;
    m_account_used_for_payment_isSet = true;
}

bool OAISupplierUpdateDto::is_account_used_for_payment_Set() const{
    return m_account_used_for_payment_isSet;
}

bool OAISupplierUpdateDto::is_account_used_for_payment_Valid() const{
    return m_account_used_for_payment_isValid;
}

QList<OAIAttributeLineUpdateDto> OAISupplierUpdateDto::getAttributeLines() const {
    return m_attribute_lines;
}
void OAISupplierUpdateDto::setAttributeLines(const QList<OAIAttributeLineUpdateDto> &attribute_lines) {
    m_attribute_lines = attribute_lines;
    m_attribute_lines_isSet = true;
}

bool OAISupplierUpdateDto::is_attribute_lines_Set() const{
    return m_attribute_lines_isSet;
}

bool OAISupplierUpdateDto::is_attribute_lines_Valid() const{
    return m_attribute_lines_isValid;
}

OAIDtoValueOfString OAISupplierUpdateDto::getCashAccount() const {
    return m_cash_account;
}
void OAISupplierUpdateDto::setCashAccount(const OAIDtoValueOfString &cash_account) {
    m_cash_account = cash_account;
    m_cash_account_isSet = true;
}

bool OAISupplierUpdateDto::is_cash_account_Set() const{
    return m_cash_account_isSet;
}

bool OAISupplierUpdateDto::is_cash_account_Valid() const{
    return m_cash_account_isValid;
}

OAIDtoValueOfSupplierChargeBearer OAISupplierUpdateDto::getChargeBearer() const {
    return m_charge_bearer;
}
void OAISupplierUpdateDto::setChargeBearer(const OAIDtoValueOfSupplierChargeBearer &charge_bearer) {
    m_charge_bearer = charge_bearer;
    m_charge_bearer_isSet = true;
}

bool OAISupplierUpdateDto::is_charge_bearer_Set() const{
    return m_charge_bearer_isSet;
}

bool OAISupplierUpdateDto::is_charge_bearer_Valid() const{
    return m_charge_bearer_isValid;
}

OAIDtoValueOfString OAISupplierUpdateDto::getCorporateId() const {
    return m_corporate_id;
}
void OAISupplierUpdateDto::setCorporateId(const OAIDtoValueOfString &corporate_id) {
    m_corporate_id = corporate_id;
    m_corporate_id_isSet = true;
}

bool OAISupplierUpdateDto::is_corporate_id_Set() const{
    return m_corporate_id_isSet;
}

bool OAISupplierUpdateDto::is_corporate_id_Valid() const{
    return m_corporate_id_isValid;
}

OAIDtoValueOfString OAISupplierUpdateDto::getCreditTermsId() const {
    return m_credit_terms_id;
}
void OAISupplierUpdateDto::setCreditTermsId(const OAIDtoValueOfString &credit_terms_id) {
    m_credit_terms_id = credit_terms_id;
    m_credit_terms_id_isSet = true;
}

bool OAISupplierUpdateDto::is_credit_terms_id_Set() const{
    return m_credit_terms_id_isSet;
}

bool OAISupplierUpdateDto::is_credit_terms_id_Valid() const{
    return m_credit_terms_id_isValid;
}

OAIDtoValueOfString OAISupplierUpdateDto::getCurrencyId() const {
    return m_currency_id;
}
void OAISupplierUpdateDto::setCurrencyId(const OAIDtoValueOfString &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAISupplierUpdateDto::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAISupplierUpdateDto::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISupplierUpdateDto::getCurrencyOverride() const {
    return m_currency_override;
}
void OAISupplierUpdateDto::setCurrencyOverride(const OAIDtoValueOfNullableOfBoolean &currency_override) {
    m_currency_override = currency_override;
    m_currency_override_isSet = true;
}

bool OAISupplierUpdateDto::is_currency_override_Set() const{
    return m_currency_override_isSet;
}

bool OAISupplierUpdateDto::is_currency_override_Valid() const{
    return m_currency_override_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISupplierUpdateDto::getCurrencyRateOverride() const {
    return m_currency_rate_override;
}
void OAISupplierUpdateDto::setCurrencyRateOverride(const OAIDtoValueOfNullableOfBoolean &currency_rate_override) {
    m_currency_rate_override = currency_rate_override;
    m_currency_rate_override_isSet = true;
}

bool OAISupplierUpdateDto::is_currency_rate_override_Set() const{
    return m_currency_rate_override_isSet;
}

bool OAISupplierUpdateDto::is_currency_rate_override_Valid() const{
    return m_currency_rate_override_isValid;
}

OAIDtoValueOfString OAISupplierUpdateDto::getDocumentLanguage() const {
    return m_document_language;
}
void OAISupplierUpdateDto::setDocumentLanguage(const OAIDtoValueOfString &document_language) {
    m_document_language = document_language;
    m_document_language_isSet = true;
}

bool OAISupplierUpdateDto::is_document_language_Set() const{
    return m_document_language_isSet;
}

bool OAISupplierUpdateDto::is_document_language_Valid() const{
    return m_document_language_isValid;
}

OAIDtoValueOfSupplierGlAccountsUpdateDto OAISupplierUpdateDto::getGlAccounts() const {
    return m_gl_accounts;
}
void OAISupplierUpdateDto::setGlAccounts(const OAIDtoValueOfSupplierGlAccountsUpdateDto &gl_accounts) {
    m_gl_accounts = gl_accounts;
    m_gl_accounts_isSet = true;
}

bool OAISupplierUpdateDto::is_gl_accounts_Set() const{
    return m_gl_accounts_isSet;
}

bool OAISupplierUpdateDto::is_gl_accounts_Valid() const{
    return m_gl_accounts_isValid;
}

OAIDtoValueOfAddressUpdateDto OAISupplierUpdateDto::getMainAddress() const {
    return m_main_address;
}
void OAISupplierUpdateDto::setMainAddress(const OAIDtoValueOfAddressUpdateDto &main_address) {
    m_main_address = main_address;
    m_main_address_isSet = true;
}

bool OAISupplierUpdateDto::is_main_address_Set() const{
    return m_main_address_isSet;
}

bool OAISupplierUpdateDto::is_main_address_Valid() const{
    return m_main_address_isValid;
}

OAIDtoValueOfContactInfoUpdateDto OAISupplierUpdateDto::getMainContact() const {
    return m_main_contact;
}
void OAISupplierUpdateDto::setMainContact(const OAIDtoValueOfContactInfoUpdateDto &main_contact) {
    m_main_contact = main_contact;
    m_main_contact_isSet = true;
}

bool OAISupplierUpdateDto::is_main_contact_Set() const{
    return m_main_contact_isSet;
}

bool OAISupplierUpdateDto::is_main_contact_Valid() const{
    return m_main_contact_isValid;
}

OAIDtoValueOfString OAISupplierUpdateDto::getName() const {
    return m_name;
}
void OAISupplierUpdateDto::setName(const OAIDtoValueOfString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISupplierUpdateDto::is_name_Set() const{
    return m_name_isSet;
}

bool OAISupplierUpdateDto::is_name_Valid() const{
    return m_name_isValid;
}

OAIDtoValueOfString OAISupplierUpdateDto::getNote() const {
    return m_note;
}
void OAISupplierUpdateDto::setNote(const OAIDtoValueOfString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAISupplierUpdateDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAISupplierUpdateDto::is_note_Valid() const{
    return m_note_isValid;
}

OAIDtoValueOfString OAISupplierUpdateDto::getNumber() const {
    return m_number;
}
void OAISupplierUpdateDto::setNumber(const OAIDtoValueOfString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAISupplierUpdateDto::is_number_Set() const{
    return m_number_isSet;
}

bool OAISupplierUpdateDto::is_number_Valid() const{
    return m_number_isValid;
}

OAIDtoValueOfBoolean OAISupplierUpdateDto::getOverrideNumberSeries() const {
    return m_override_number_series;
}
void OAISupplierUpdateDto::setOverrideNumberSeries(const OAIDtoValueOfBoolean &override_number_series) {
    m_override_number_series = override_number_series;
    m_override_number_series_isSet = true;
}

bool OAISupplierUpdateDto::is_override_number_series_Set() const{
    return m_override_number_series_isSet;
}

bool OAISupplierUpdateDto::is_override_number_series_Valid() const{
    return m_override_number_series_isValid;
}

bool OAISupplierUpdateDto::isOverrideWithClassValues() const {
    return m_override_with_class_values;
}
void OAISupplierUpdateDto::setOverrideWithClassValues(const bool &override_with_class_values) {
    m_override_with_class_values = override_with_class_values;
    m_override_with_class_values_isSet = true;
}

bool OAISupplierUpdateDto::is_override_with_class_values_Set() const{
    return m_override_with_class_values_isSet;
}

bool OAISupplierUpdateDto::is_override_with_class_values_Valid() const{
    return m_override_with_class_values_isValid;
}

OAIDtoValueOfString OAISupplierUpdateDto::getParentRecordNumber() const {
    return m_parent_record_number;
}
void OAISupplierUpdateDto::setParentRecordNumber(const OAIDtoValueOfString &parent_record_number) {
    m_parent_record_number = parent_record_number;
    m_parent_record_number_isSet = true;
}

bool OAISupplierUpdateDto::is_parent_record_number_Set() const{
    return m_parent_record_number_isSet;
}

bool OAISupplierUpdateDto::is_parent_record_number_Valid() const{
    return m_parent_record_number_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISupplierUpdateDto::getPaySeparately() const {
    return m_pay_separately;
}
void OAISupplierUpdateDto::setPaySeparately(const OAIDtoValueOfNullableOfBoolean &pay_separately) {
    m_pay_separately = pay_separately;
    m_pay_separately_isSet = true;
}

bool OAISupplierUpdateDto::is_pay_separately_Set() const{
    return m_pay_separately_isSet;
}

bool OAISupplierUpdateDto::is_pay_separately_Valid() const{
    return m_pay_separately_isValid;
}

OAIDtoValueOfPaymentBy OAISupplierUpdateDto::getPaymentBy() const {
    return m_payment_by;
}
void OAISupplierUpdateDto::setPaymentBy(const OAIDtoValueOfPaymentBy &payment_by) {
    m_payment_by = payment_by;
    m_payment_by_isSet = true;
}

bool OAISupplierUpdateDto::is_payment_by_Set() const{
    return m_payment_by_isSet;
}

bool OAISupplierUpdateDto::is_payment_by_Valid() const{
    return m_payment_by_isValid;
}

OAIDtoValueOfNullableOfInt16 OAISupplierUpdateDto::getPaymentLeadTime() const {
    return m_payment_lead_time;
}
void OAISupplierUpdateDto::setPaymentLeadTime(const OAIDtoValueOfNullableOfInt16 &payment_lead_time) {
    m_payment_lead_time = payment_lead_time;
    m_payment_lead_time_isSet = true;
}

bool OAISupplierUpdateDto::is_payment_lead_time_Set() const{
    return m_payment_lead_time_isSet;
}

bool OAISupplierUpdateDto::is_payment_lead_time_Valid() const{
    return m_payment_lead_time_isValid;
}

OAIDtoValueOfString OAISupplierUpdateDto::getPaymentMethodId() const {
    return m_payment_method_id;
}
void OAISupplierUpdateDto::setPaymentMethodId(const OAIDtoValueOfString &payment_method_id) {
    m_payment_method_id = payment_method_id;
    m_payment_method_id_isSet = true;
}

bool OAISupplierUpdateDto::is_payment_method_id_Set() const{
    return m_payment_method_id_isSet;
}

bool OAISupplierUpdateDto::is_payment_method_id_Valid() const{
    return m_payment_method_id_isValid;
}

OAIDtoValueOfString OAISupplierUpdateDto::getPaymentRefDisplayMask() const {
    return m_payment_ref_display_mask;
}
void OAISupplierUpdateDto::setPaymentRefDisplayMask(const OAIDtoValueOfString &payment_ref_display_mask) {
    m_payment_ref_display_mask = payment_ref_display_mask;
    m_payment_ref_display_mask_isSet = true;
}

bool OAISupplierUpdateDto::is_payment_ref_display_mask_Set() const{
    return m_payment_ref_display_mask_isSet;
}

bool OAISupplierUpdateDto::is_payment_ref_display_mask_Valid() const{
    return m_payment_ref_display_mask_isValid;
}

OAIDtoValueOfAddressUpdateDto OAISupplierUpdateDto::getRemitAddress() const {
    return m_remit_address;
}
void OAISupplierUpdateDto::setRemitAddress(const OAIDtoValueOfAddressUpdateDto &remit_address) {
    m_remit_address = remit_address;
    m_remit_address_isSet = true;
}

bool OAISupplierUpdateDto::is_remit_address_Set() const{
    return m_remit_address_isSet;
}

bool OAISupplierUpdateDto::is_remit_address_Valid() const{
    return m_remit_address_isValid;
}

OAIDtoValueOfContactInfoUpdateDto OAISupplierUpdateDto::getRemitContact() const {
    return m_remit_contact;
}
void OAISupplierUpdateDto::setRemitContact(const OAIDtoValueOfContactInfoUpdateDto &remit_contact) {
    m_remit_contact = remit_contact;
    m_remit_contact_isSet = true;
}

bool OAISupplierUpdateDto::is_remit_contact_Set() const{
    return m_remit_contact_isSet;
}

bool OAISupplierUpdateDto::is_remit_contact_Valid() const{
    return m_remit_contact_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISupplierUpdateDto::getRetainageApply() const {
    return m_retainage_apply;
}
void OAISupplierUpdateDto::setRetainageApply(const OAIDtoValueOfNullableOfBoolean &retainage_apply) {
    m_retainage_apply = retainage_apply;
    m_retainage_apply_isSet = true;
}

bool OAISupplierUpdateDto::is_retainage_apply_Set() const{
    return m_retainage_apply_isSet;
}

bool OAISupplierUpdateDto::is_retainage_apply_Valid() const{
    return m_retainage_apply_isValid;
}

OAIDtoValueOfString OAISupplierUpdateDto::getRetainageCashAccountId() const {
    return m_retainage_cash_account_id;
}
void OAISupplierUpdateDto::setRetainageCashAccountId(const OAIDtoValueOfString &retainage_cash_account_id) {
    m_retainage_cash_account_id = retainage_cash_account_id;
    m_retainage_cash_account_id_isSet = true;
}

bool OAISupplierUpdateDto::is_retainage_cash_account_id_Set() const{
    return m_retainage_cash_account_id_isSet;
}

bool OAISupplierUpdateDto::is_retainage_cash_account_id_Valid() const{
    return m_retainage_cash_account_id_isValid;
}

OAIDtoValueOfNullableOfDecimal OAISupplierUpdateDto::getRetainagePct() const {
    return m_retainage_pct;
}
void OAISupplierUpdateDto::setRetainagePct(const OAIDtoValueOfNullableOfDecimal &retainage_pct) {
    m_retainage_pct = retainage_pct;
    m_retainage_pct_isSet = true;
}

bool OAISupplierUpdateDto::is_retainage_pct_Set() const{
    return m_retainage_pct_isSet;
}

bool OAISupplierUpdateDto::is_retainage_pct_Valid() const{
    return m_retainage_pct_isValid;
}

OAIDtoValueOfSupplierStatus OAISupplierUpdateDto::getStatus() const {
    return m_status;
}
void OAISupplierUpdateDto::setStatus(const OAIDtoValueOfSupplierStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISupplierUpdateDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAISupplierUpdateDto::is_status_Valid() const{
    return m_status_isValid;
}

OAIDtoValueOfAddressUpdateDto OAISupplierUpdateDto::getSupplierAddress() const {
    return m_supplier_address;
}
void OAISupplierUpdateDto::setSupplierAddress(const OAIDtoValueOfAddressUpdateDto &supplier_address) {
    m_supplier_address = supplier_address;
    m_supplier_address_isSet = true;
}

bool OAISupplierUpdateDto::is_supplier_address_Set() const{
    return m_supplier_address_isSet;
}

bool OAISupplierUpdateDto::is_supplier_address_Valid() const{
    return m_supplier_address_isValid;
}

OAIDtoValueOfString OAISupplierUpdateDto::getSupplierClassId() const {
    return m_supplier_class_id;
}
void OAISupplierUpdateDto::setSupplierClassId(const OAIDtoValueOfString &supplier_class_id) {
    m_supplier_class_id = supplier_class_id;
    m_supplier_class_id_isSet = true;
}

bool OAISupplierUpdateDto::is_supplier_class_id_Set() const{
    return m_supplier_class_id_isSet;
}

bool OAISupplierUpdateDto::is_supplier_class_id_Valid() const{
    return m_supplier_class_id_isValid;
}

OAIDtoValueOfContactInfoUpdateDto OAISupplierUpdateDto::getSupplierContact() const {
    return m_supplier_contact;
}
void OAISupplierUpdateDto::setSupplierContact(const OAIDtoValueOfContactInfoUpdateDto &supplier_contact) {
    m_supplier_contact = supplier_contact;
    m_supplier_contact_isSet = true;
}

bool OAISupplierUpdateDto::is_supplier_contact_Set() const{
    return m_supplier_contact_isSet;
}

bool OAISupplierUpdateDto::is_supplier_contact_Valid() const{
    return m_supplier_contact_isValid;
}

QList<OAISupplierPaymentMethodDetailUpdateDto> OAISupplierUpdateDto::getSupplierPaymentMethodDetails() const {
    return m_supplier_payment_method_details;
}
void OAISupplierUpdateDto::setSupplierPaymentMethodDetails(const QList<OAISupplierPaymentMethodDetailUpdateDto> &supplier_payment_method_details) {
    m_supplier_payment_method_details = supplier_payment_method_details;
    m_supplier_payment_method_details_isSet = true;
}

bool OAISupplierUpdateDto::is_supplier_payment_method_details_Set() const{
    return m_supplier_payment_method_details_isSet;
}

bool OAISupplierUpdateDto::is_supplier_payment_method_details_Valid() const{
    return m_supplier_payment_method_details_isValid;
}

OAIDtoValueOfString OAISupplierUpdateDto::getVatRegistrationId() const {
    return m_vat_registration_id;
}
void OAISupplierUpdateDto::setVatRegistrationId(const OAIDtoValueOfString &vat_registration_id) {
    m_vat_registration_id = vat_registration_id;
    m_vat_registration_id_isSet = true;
}

bool OAISupplierUpdateDto::is_vat_registration_id_Set() const{
    return m_vat_registration_id_isSet;
}

bool OAISupplierUpdateDto::is_vat_registration_id_Valid() const{
    return m_vat_registration_id_isValid;
}

OAIDtoValueOfString OAISupplierUpdateDto::getVatZoneId() const {
    return m_vat_zone_id;
}
void OAISupplierUpdateDto::setVatZoneId(const OAIDtoValueOfString &vat_zone_id) {
    m_vat_zone_id = vat_zone_id;
    m_vat_zone_id_isSet = true;
}

bool OAISupplierUpdateDto::is_vat_zone_id_Set() const{
    return m_vat_zone_id_isSet;
}

bool OAISupplierUpdateDto::is_vat_zone_id_Valid() const{
    return m_vat_zone_id_isValid;
}

bool OAISupplierUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_used_for_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_charge_bearer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_corporate_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_terms_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_rate_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gl_accounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_number_series.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_with_class_values_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_record_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_separately.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_lead_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_ref_display_mask.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remit_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remit_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retainage_apply.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retainage_cash_account_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retainage_pct.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_class_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_payment_method_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_registration_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_zone_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupplierUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
