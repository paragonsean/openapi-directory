/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVatInformationDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVatInformationDto::OAIVatInformationDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVatInformationDto::OAIVatInformationDto() {
    this->initializeModel();
}

OAIVatInformationDto::~OAIVatInformationDto() {}

void OAIVatInformationDto::initializeModel() {

    m_calculate_on_isSet = false;
    m_calculate_on_isValid = false;

    m_cash_discount_isSet = false;
    m_cash_discount_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_deductible_vat_isSet = false;
    m_deductible_vat_isValid = false;

    m_default_non_stock_item_isSet = false;
    m_default_non_stock_item_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_document_text_isSet = false;
    m_document_text_isValid = false;

    m_enter_from_vat_invoice_isSet = false;
    m_enter_from_vat_invoice_isValid = false;

    m_eu_report_code_isSet = false;
    m_eu_report_code_isValid = false;

    m_gl_accounts_isSet = false;
    m_gl_accounts_isValid = false;

    m_includein_vat_exempt_total_isSet = false;
    m_includein_vat_exempt_total_isValid = false;

    m_includein_vat_total_isSet = false;
    m_includein_vat_total_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_not_valid_after_isSet = false;
    m_not_valid_after_isValid = false;

    m_pending_vat_isSet = false;
    m_pending_vat_isValid = false;

    m_reverse_vat_isSet = false;
    m_reverse_vat_isValid = false;

    m_schedules_isSet = false;
    m_schedules_isValid = false;

    m_statistical_vat_isSet = false;
    m_statistical_vat_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vat_agency_id_isSet = false;
    m_vat_agency_id_isValid = false;

    m_vat_category_id_isSet = false;
    m_vat_category_id_isValid = false;

    m_vat_id_isSet = false;
    m_vat_id_isValid = false;

    m_visma_xml_vat_type_isSet = false;
    m_visma_xml_vat_type_isValid = false;

    m_zones_isSet = false;
    m_zones_isValid = false;
}

void OAIVatInformationDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVatInformationDto::fromJsonObject(QJsonObject json) {

    m_calculate_on_isValid = ::OpenAPI::fromJsonValue(m_calculate_on, json[QString("calculateOn")]);
    m_calculate_on_isSet = !json[QString("calculateOn")].isNull() && m_calculate_on_isValid;

    m_cash_discount_isValid = ::OpenAPI::fromJsonValue(m_cash_discount, json[QString("cashDiscount")]);
    m_cash_discount_isSet = !json[QString("cashDiscount")].isNull() && m_cash_discount_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_deductible_vat_isValid = ::OpenAPI::fromJsonValue(m_deductible_vat, json[QString("deductibleVat")]);
    m_deductible_vat_isSet = !json[QString("deductibleVat")].isNull() && m_deductible_vat_isValid;

    m_default_non_stock_item_isValid = ::OpenAPI::fromJsonValue(m_default_non_stock_item, json[QString("defaultNonStockItem")]);
    m_default_non_stock_item_isSet = !json[QString("defaultNonStockItem")].isNull() && m_default_non_stock_item_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_document_text_isValid = ::OpenAPI::fromJsonValue(m_document_text, json[QString("documentText")]);
    m_document_text_isSet = !json[QString("documentText")].isNull() && m_document_text_isValid;

    m_enter_from_vat_invoice_isValid = ::OpenAPI::fromJsonValue(m_enter_from_vat_invoice, json[QString("enterFromVatInvoice")]);
    m_enter_from_vat_invoice_isSet = !json[QString("enterFromVatInvoice")].isNull() && m_enter_from_vat_invoice_isValid;

    m_eu_report_code_isValid = ::OpenAPI::fromJsonValue(m_eu_report_code, json[QString("euReportCode")]);
    m_eu_report_code_isSet = !json[QString("euReportCode")].isNull() && m_eu_report_code_isValid;

    m_gl_accounts_isValid = ::OpenAPI::fromJsonValue(m_gl_accounts, json[QString("glAccounts")]);
    m_gl_accounts_isSet = !json[QString("glAccounts")].isNull() && m_gl_accounts_isValid;

    m_includein_vat_exempt_total_isValid = ::OpenAPI::fromJsonValue(m_includein_vat_exempt_total, json[QString("includeinVatExemptTotal")]);
    m_includein_vat_exempt_total_isSet = !json[QString("includeinVatExemptTotal")].isNull() && m_includein_vat_exempt_total_isValid;

    m_includein_vat_total_isValid = ::OpenAPI::fromJsonValue(m_includein_vat_total, json[QString("includeinVatTotal")]);
    m_includein_vat_total_isSet = !json[QString("includeinVatTotal")].isNull() && m_includein_vat_total_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_not_valid_after_isValid = ::OpenAPI::fromJsonValue(m_not_valid_after, json[QString("notValidAfter")]);
    m_not_valid_after_isSet = !json[QString("notValidAfter")].isNull() && m_not_valid_after_isValid;

    m_pending_vat_isValid = ::OpenAPI::fromJsonValue(m_pending_vat, json[QString("pendingVat")]);
    m_pending_vat_isSet = !json[QString("pendingVat")].isNull() && m_pending_vat_isValid;

    m_reverse_vat_isValid = ::OpenAPI::fromJsonValue(m_reverse_vat, json[QString("reverseVat")]);
    m_reverse_vat_isSet = !json[QString("reverseVat")].isNull() && m_reverse_vat_isValid;

    m_schedules_isValid = ::OpenAPI::fromJsonValue(m_schedules, json[QString("schedules")]);
    m_schedules_isSet = !json[QString("schedules")].isNull() && m_schedules_isValid;

    m_statistical_vat_isValid = ::OpenAPI::fromJsonValue(m_statistical_vat, json[QString("statisticalVat")]);
    m_statistical_vat_isSet = !json[QString("statisticalVat")].isNull() && m_statistical_vat_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vat_agency_id_isValid = ::OpenAPI::fromJsonValue(m_vat_agency_id, json[QString("vatAgencyId")]);
    m_vat_agency_id_isSet = !json[QString("vatAgencyId")].isNull() && m_vat_agency_id_isValid;

    m_vat_category_id_isValid = ::OpenAPI::fromJsonValue(m_vat_category_id, json[QString("vatCategoryId")]);
    m_vat_category_id_isSet = !json[QString("vatCategoryId")].isNull() && m_vat_category_id_isValid;

    m_vat_id_isValid = ::OpenAPI::fromJsonValue(m_vat_id, json[QString("vatId")]);
    m_vat_id_isSet = !json[QString("vatId")].isNull() && m_vat_id_isValid;

    m_visma_xml_vat_type_isValid = ::OpenAPI::fromJsonValue(m_visma_xml_vat_type, json[QString("vismaXmlVatType")]);
    m_visma_xml_vat_type_isSet = !json[QString("vismaXmlVatType")].isNull() && m_visma_xml_vat_type_isValid;

    m_zones_isValid = ::OpenAPI::fromJsonValue(m_zones, json[QString("zones")]);
    m_zones_isSet = !json[QString("zones")].isNull() && m_zones_isValid;
}

QString OAIVatInformationDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVatInformationDto::asJsonObject() const {
    QJsonObject obj;
    if (m_calculate_on_isSet) {
        obj.insert(QString("calculateOn"), ::OpenAPI::toJsonValue(m_calculate_on));
    }
    if (m_cash_discount_isSet) {
        obj.insert(QString("cashDiscount"), ::OpenAPI::toJsonValue(m_cash_discount));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_deductible_vat_isSet) {
        obj.insert(QString("deductibleVat"), ::OpenAPI::toJsonValue(m_deductible_vat));
    }
    if (m_default_non_stock_item.isSet()) {
        obj.insert(QString("defaultNonStockItem"), ::OpenAPI::toJsonValue(m_default_non_stock_item));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_document_text_isSet) {
        obj.insert(QString("documentText"), ::OpenAPI::toJsonValue(m_document_text));
    }
    if (m_enter_from_vat_invoice_isSet) {
        obj.insert(QString("enterFromVatInvoice"), ::OpenAPI::toJsonValue(m_enter_from_vat_invoice));
    }
    if (m_eu_report_code_isSet) {
        obj.insert(QString("euReportCode"), ::OpenAPI::toJsonValue(m_eu_report_code));
    }
    if (m_gl_accounts.isSet()) {
        obj.insert(QString("glAccounts"), ::OpenAPI::toJsonValue(m_gl_accounts));
    }
    if (m_includein_vat_exempt_total_isSet) {
        obj.insert(QString("includeinVatExemptTotal"), ::OpenAPI::toJsonValue(m_includein_vat_exempt_total));
    }
    if (m_includein_vat_total_isSet) {
        obj.insert(QString("includeinVatTotal"), ::OpenAPI::toJsonValue(m_includein_vat_total));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_not_valid_after_isSet) {
        obj.insert(QString("notValidAfter"), ::OpenAPI::toJsonValue(m_not_valid_after));
    }
    if (m_pending_vat_isSet) {
        obj.insert(QString("pendingVat"), ::OpenAPI::toJsonValue(m_pending_vat));
    }
    if (m_reverse_vat_isSet) {
        obj.insert(QString("reverseVat"), ::OpenAPI::toJsonValue(m_reverse_vat));
    }
    if (m_schedules.size() > 0) {
        obj.insert(QString("schedules"), ::OpenAPI::toJsonValue(m_schedules));
    }
    if (m_statistical_vat_isSet) {
        obj.insert(QString("statisticalVat"), ::OpenAPI::toJsonValue(m_statistical_vat));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vat_agency_id.isSet()) {
        obj.insert(QString("vatAgencyId"), ::OpenAPI::toJsonValue(m_vat_agency_id));
    }
    if (m_vat_category_id_isSet) {
        obj.insert(QString("vatCategoryId"), ::OpenAPI::toJsonValue(m_vat_category_id));
    }
    if (m_vat_id_isSet) {
        obj.insert(QString("vatId"), ::OpenAPI::toJsonValue(m_vat_id));
    }
    if (m_visma_xml_vat_type_isSet) {
        obj.insert(QString("vismaXmlVatType"), ::OpenAPI::toJsonValue(m_visma_xml_vat_type));
    }
    if (m_zones.size() > 0) {
        obj.insert(QString("zones"), ::OpenAPI::toJsonValue(m_zones));
    }
    return obj;
}

QString OAIVatInformationDto::getCalculateOn() const {
    return m_calculate_on;
}
void OAIVatInformationDto::setCalculateOn(const QString &calculate_on) {
    m_calculate_on = calculate_on;
    m_calculate_on_isSet = true;
}

bool OAIVatInformationDto::is_calculate_on_Set() const{
    return m_calculate_on_isSet;
}

bool OAIVatInformationDto::is_calculate_on_Valid() const{
    return m_calculate_on_isValid;
}

QString OAIVatInformationDto::getCashDiscount() const {
    return m_cash_discount;
}
void OAIVatInformationDto::setCashDiscount(const QString &cash_discount) {
    m_cash_discount = cash_discount;
    m_cash_discount_isSet = true;
}

bool OAIVatInformationDto::is_cash_discount_Set() const{
    return m_cash_discount_isSet;
}

bool OAIVatInformationDto::is_cash_discount_Valid() const{
    return m_cash_discount_isValid;
}

QList<OAIVatCategoryDto> OAIVatInformationDto::getCategories() const {
    return m_categories;
}
void OAIVatInformationDto::setCategories(const QList<OAIVatCategoryDto> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIVatInformationDto::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIVatInformationDto::is_categories_Valid() const{
    return m_categories_isValid;
}

bool OAIVatInformationDto::isDeductibleVat() const {
    return m_deductible_vat;
}
void OAIVatInformationDto::setDeductibleVat(const bool &deductible_vat) {
    m_deductible_vat = deductible_vat;
    m_deductible_vat_isSet = true;
}

bool OAIVatInformationDto::is_deductible_vat_Set() const{
    return m_deductible_vat_isSet;
}

bool OAIVatInformationDto::is_deductible_vat_Valid() const{
    return m_deductible_vat_isValid;
}

OAIDefaultNonStockItemInVatInformationDto OAIVatInformationDto::getDefaultNonStockItem() const {
    return m_default_non_stock_item;
}
void OAIVatInformationDto::setDefaultNonStockItem(const OAIDefaultNonStockItemInVatInformationDto &default_non_stock_item) {
    m_default_non_stock_item = default_non_stock_item;
    m_default_non_stock_item_isSet = true;
}

bool OAIVatInformationDto::is_default_non_stock_item_Set() const{
    return m_default_non_stock_item_isSet;
}

bool OAIVatInformationDto::is_default_non_stock_item_Valid() const{
    return m_default_non_stock_item_isValid;
}

QString OAIVatInformationDto::getDescription() const {
    return m_description;
}
void OAIVatInformationDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVatInformationDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVatInformationDto::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIVatInformationDto::getDocumentText() const {
    return m_document_text;
}
void OAIVatInformationDto::setDocumentText(const QString &document_text) {
    m_document_text = document_text;
    m_document_text_isSet = true;
}

bool OAIVatInformationDto::is_document_text_Set() const{
    return m_document_text_isSet;
}

bool OAIVatInformationDto::is_document_text_Valid() const{
    return m_document_text_isValid;
}

bool OAIVatInformationDto::isEnterFromVatInvoice() const {
    return m_enter_from_vat_invoice;
}
void OAIVatInformationDto::setEnterFromVatInvoice(const bool &enter_from_vat_invoice) {
    m_enter_from_vat_invoice = enter_from_vat_invoice;
    m_enter_from_vat_invoice_isSet = true;
}

bool OAIVatInformationDto::is_enter_from_vat_invoice_Set() const{
    return m_enter_from_vat_invoice_isSet;
}

bool OAIVatInformationDto::is_enter_from_vat_invoice_Valid() const{
    return m_enter_from_vat_invoice_isValid;
}

QString OAIVatInformationDto::getEuReportCode() const {
    return m_eu_report_code;
}
void OAIVatInformationDto::setEuReportCode(const QString &eu_report_code) {
    m_eu_report_code = eu_report_code;
    m_eu_report_code_isSet = true;
}

bool OAIVatInformationDto::is_eu_report_code_Set() const{
    return m_eu_report_code_isSet;
}

bool OAIVatInformationDto::is_eu_report_code_Valid() const{
    return m_eu_report_code_isValid;
}

OAIGlAccountsInVatInformationDto OAIVatInformationDto::getGlAccounts() const {
    return m_gl_accounts;
}
void OAIVatInformationDto::setGlAccounts(const OAIGlAccountsInVatInformationDto &gl_accounts) {
    m_gl_accounts = gl_accounts;
    m_gl_accounts_isSet = true;
}

bool OAIVatInformationDto::is_gl_accounts_Set() const{
    return m_gl_accounts_isSet;
}

bool OAIVatInformationDto::is_gl_accounts_Valid() const{
    return m_gl_accounts_isValid;
}

bool OAIVatInformationDto::isIncludeinVatExemptTotal() const {
    return m_includein_vat_exempt_total;
}
void OAIVatInformationDto::setIncludeinVatExemptTotal(const bool &includein_vat_exempt_total) {
    m_includein_vat_exempt_total = includein_vat_exempt_total;
    m_includein_vat_exempt_total_isSet = true;
}

bool OAIVatInformationDto::is_includein_vat_exempt_total_Set() const{
    return m_includein_vat_exempt_total_isSet;
}

bool OAIVatInformationDto::is_includein_vat_exempt_total_Valid() const{
    return m_includein_vat_exempt_total_isValid;
}

bool OAIVatInformationDto::isIncludeinVatTotal() const {
    return m_includein_vat_total;
}
void OAIVatInformationDto::setIncludeinVatTotal(const bool &includein_vat_total) {
    m_includein_vat_total = includein_vat_total;
    m_includein_vat_total_isSet = true;
}

bool OAIVatInformationDto::is_includein_vat_total_Set() const{
    return m_includein_vat_total_isSet;
}

bool OAIVatInformationDto::is_includein_vat_total_Valid() const{
    return m_includein_vat_total_isValid;
}

QDateTime OAIVatInformationDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIVatInformationDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIVatInformationDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIVatInformationDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QDateTime OAIVatInformationDto::getNotValidAfter() const {
    return m_not_valid_after;
}
void OAIVatInformationDto::setNotValidAfter(const QDateTime &not_valid_after) {
    m_not_valid_after = not_valid_after;
    m_not_valid_after_isSet = true;
}

bool OAIVatInformationDto::is_not_valid_after_Set() const{
    return m_not_valid_after_isSet;
}

bool OAIVatInformationDto::is_not_valid_after_Valid() const{
    return m_not_valid_after_isValid;
}

bool OAIVatInformationDto::isPendingVat() const {
    return m_pending_vat;
}
void OAIVatInformationDto::setPendingVat(const bool &pending_vat) {
    m_pending_vat = pending_vat;
    m_pending_vat_isSet = true;
}

bool OAIVatInformationDto::is_pending_vat_Set() const{
    return m_pending_vat_isSet;
}

bool OAIVatInformationDto::is_pending_vat_Valid() const{
    return m_pending_vat_isValid;
}

bool OAIVatInformationDto::isReverseVat() const {
    return m_reverse_vat;
}
void OAIVatInformationDto::setReverseVat(const bool &reverse_vat) {
    m_reverse_vat = reverse_vat;
    m_reverse_vat_isSet = true;
}

bool OAIVatInformationDto::is_reverse_vat_Set() const{
    return m_reverse_vat_isSet;
}

bool OAIVatInformationDto::is_reverse_vat_Valid() const{
    return m_reverse_vat_isValid;
}

QList<OAIVatInformationScheduleDto> OAIVatInformationDto::getSchedules() const {
    return m_schedules;
}
void OAIVatInformationDto::setSchedules(const QList<OAIVatInformationScheduleDto> &schedules) {
    m_schedules = schedules;
    m_schedules_isSet = true;
}

bool OAIVatInformationDto::is_schedules_Set() const{
    return m_schedules_isSet;
}

bool OAIVatInformationDto::is_schedules_Valid() const{
    return m_schedules_isValid;
}

bool OAIVatInformationDto::isStatisticalVat() const {
    return m_statistical_vat;
}
void OAIVatInformationDto::setStatisticalVat(const bool &statistical_vat) {
    m_statistical_vat = statistical_vat;
    m_statistical_vat_isSet = true;
}

bool OAIVatInformationDto::is_statistical_vat_Set() const{
    return m_statistical_vat_isSet;
}

bool OAIVatInformationDto::is_statistical_vat_Valid() const{
    return m_statistical_vat_isValid;
}

QString OAIVatInformationDto::getType() const {
    return m_type;
}
void OAIVatInformationDto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIVatInformationDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAIVatInformationDto::is_type_Valid() const{
    return m_type_isValid;
}

OAIVatAgencyIdInVatInformationDto OAIVatInformationDto::getVatAgencyId() const {
    return m_vat_agency_id;
}
void OAIVatInformationDto::setVatAgencyId(const OAIVatAgencyIdInVatInformationDto &vat_agency_id) {
    m_vat_agency_id = vat_agency_id;
    m_vat_agency_id_isSet = true;
}

bool OAIVatInformationDto::is_vat_agency_id_Set() const{
    return m_vat_agency_id_isSet;
}

bool OAIVatInformationDto::is_vat_agency_id_Valid() const{
    return m_vat_agency_id_isValid;
}

QString OAIVatInformationDto::getVatCategoryId() const {
    return m_vat_category_id;
}
void OAIVatInformationDto::setVatCategoryId(const QString &vat_category_id) {
    m_vat_category_id = vat_category_id;
    m_vat_category_id_isSet = true;
}

bool OAIVatInformationDto::is_vat_category_id_Set() const{
    return m_vat_category_id_isSet;
}

bool OAIVatInformationDto::is_vat_category_id_Valid() const{
    return m_vat_category_id_isValid;
}

QString OAIVatInformationDto::getVatId() const {
    return m_vat_id;
}
void OAIVatInformationDto::setVatId(const QString &vat_id) {
    m_vat_id = vat_id;
    m_vat_id_isSet = true;
}

bool OAIVatInformationDto::is_vat_id_Set() const{
    return m_vat_id_isSet;
}

bool OAIVatInformationDto::is_vat_id_Valid() const{
    return m_vat_id_isValid;
}

QString OAIVatInformationDto::getVismaXmlVatType() const {
    return m_visma_xml_vat_type;
}
void OAIVatInformationDto::setVismaXmlVatType(const QString &visma_xml_vat_type) {
    m_visma_xml_vat_type = visma_xml_vat_type;
    m_visma_xml_vat_type_isSet = true;
}

bool OAIVatInformationDto::is_visma_xml_vat_type_Set() const{
    return m_visma_xml_vat_type_isSet;
}

bool OAIVatInformationDto::is_visma_xml_vat_type_Valid() const{
    return m_visma_xml_vat_type_isValid;
}

QList<OAIVatZoneDto> OAIVatInformationDto::getZones() const {
    return m_zones;
}
void OAIVatInformationDto::setZones(const QList<OAIVatZoneDto> &zones) {
    m_zones = zones;
    m_zones_isSet = true;
}

bool OAIVatInformationDto::is_zones_Set() const{
    return m_zones_isSet;
}

bool OAIVatInformationDto::is_zones_Valid() const{
    return m_zones_isValid;
}

bool OAIVatInformationDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calculate_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deductible_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_non_stock_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enter_from_vat_invoice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eu_report_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gl_accounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_includein_vat_exempt_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_includein_vat_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_valid_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reverse_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistical_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_agency_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visma_xml_vat_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zones.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVatInformationDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
