/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWarehouseLocationDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWarehouseLocationDto::OAIWarehouseLocationDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWarehouseLocationDto::OAIWarehouseLocationDto() {
    this->initializeModel();
}

OAIWarehouseLocationDto::~OAIWarehouseLocationDto() {}

void OAIWarehouseLocationDto::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_assembly_valid_isSet = false;
    m_assembly_valid_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_incl_qty_avail_isSet = false;
    m_incl_qty_avail_isValid = false;

    m_is_costed_isSet = false;
    m_is_costed_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_primary_item_isSet = false;
    m_primary_item_isValid = false;

    m_primary_item_class_isSet = false;
    m_primary_item_class_isValid = false;

    m_primary_item_valid_isSet = false;
    m_primary_item_valid_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_project_task_isSet = false;
    m_project_task_isValid = false;

    m_receipts_valid_isSet = false;
    m_receipts_valid_isValid = false;

    m_sales_valid_isSet = false;
    m_sales_valid_isValid = false;

    m_transfers_valid_isSet = false;
    m_transfers_valid_isValid = false;
}

void OAIWarehouseLocationDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWarehouseLocationDto::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_assembly_valid_isValid = ::OpenAPI::fromJsonValue(m_assembly_valid, json[QString("assemblyValid")]);
    m_assembly_valid_isSet = !json[QString("assemblyValid")].isNull() && m_assembly_valid_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_incl_qty_avail_isValid = ::OpenAPI::fromJsonValue(m_incl_qty_avail, json[QString("inclQtyAvail")]);
    m_incl_qty_avail_isSet = !json[QString("inclQtyAvail")].isNull() && m_incl_qty_avail_isValid;

    m_is_costed_isValid = ::OpenAPI::fromJsonValue(m_is_costed, json[QString("isCosted")]);
    m_is_costed_isSet = !json[QString("isCosted")].isNull() && m_is_costed_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_primary_item_isValid = ::OpenAPI::fromJsonValue(m_primary_item, json[QString("primaryItem")]);
    m_primary_item_isSet = !json[QString("primaryItem")].isNull() && m_primary_item_isValid;

    m_primary_item_class_isValid = ::OpenAPI::fromJsonValue(m_primary_item_class, json[QString("primaryItemClass")]);
    m_primary_item_class_isSet = !json[QString("primaryItemClass")].isNull() && m_primary_item_class_isValid;

    m_primary_item_valid_isValid = ::OpenAPI::fromJsonValue(m_primary_item_valid, json[QString("primaryItemValid")]);
    m_primary_item_valid_isSet = !json[QString("primaryItemValid")].isNull() && m_primary_item_valid_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_project_task_isValid = ::OpenAPI::fromJsonValue(m_project_task, json[QString("projectTask")]);
    m_project_task_isSet = !json[QString("projectTask")].isNull() && m_project_task_isValid;

    m_receipts_valid_isValid = ::OpenAPI::fromJsonValue(m_receipts_valid, json[QString("receiptsValid")]);
    m_receipts_valid_isSet = !json[QString("receiptsValid")].isNull() && m_receipts_valid_isValid;

    m_sales_valid_isValid = ::OpenAPI::fromJsonValue(m_sales_valid, json[QString("salesValid")]);
    m_sales_valid_isSet = !json[QString("salesValid")].isNull() && m_sales_valid_isValid;

    m_transfers_valid_isValid = ::OpenAPI::fromJsonValue(m_transfers_valid, json[QString("transfersValid")]);
    m_transfers_valid_isSet = !json[QString("transfersValid")].isNull() && m_transfers_valid_isValid;
}

QString OAIWarehouseLocationDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWarehouseLocationDto::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_assembly_valid_isSet) {
        obj.insert(QString("assemblyValid"), ::OpenAPI::toJsonValue(m_assembly_valid));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_incl_qty_avail_isSet) {
        obj.insert(QString("inclQtyAvail"), ::OpenAPI::toJsonValue(m_incl_qty_avail));
    }
    if (m_is_costed_isSet) {
        obj.insert(QString("isCosted"), ::OpenAPI::toJsonValue(m_is_costed));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_primary_item.isSet()) {
        obj.insert(QString("primaryItem"), ::OpenAPI::toJsonValue(m_primary_item));
    }
    if (m_primary_item_class.isSet()) {
        obj.insert(QString("primaryItemClass"), ::OpenAPI::toJsonValue(m_primary_item_class));
    }
    if (m_primary_item_valid_isSet) {
        obj.insert(QString("primaryItemValid"), ::OpenAPI::toJsonValue(m_primary_item_valid));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_project_task.isSet()) {
        obj.insert(QString("projectTask"), ::OpenAPI::toJsonValue(m_project_task));
    }
    if (m_receipts_valid_isSet) {
        obj.insert(QString("receiptsValid"), ::OpenAPI::toJsonValue(m_receipts_valid));
    }
    if (m_sales_valid_isSet) {
        obj.insert(QString("salesValid"), ::OpenAPI::toJsonValue(m_sales_valid));
    }
    if (m_transfers_valid_isSet) {
        obj.insert(QString("transfersValid"), ::OpenAPI::toJsonValue(m_transfers_valid));
    }
    return obj;
}

bool OAIWarehouseLocationDto::isActive() const {
    return m_active;
}
void OAIWarehouseLocationDto::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIWarehouseLocationDto::is_active_Set() const{
    return m_active_isSet;
}

bool OAIWarehouseLocationDto::is_active_Valid() const{
    return m_active_isValid;
}

bool OAIWarehouseLocationDto::isAssemblyValid() const {
    return m_assembly_valid;
}
void OAIWarehouseLocationDto::setAssemblyValid(const bool &assembly_valid) {
    m_assembly_valid = assembly_valid;
    m_assembly_valid_isSet = true;
}

bool OAIWarehouseLocationDto::is_assembly_valid_Set() const{
    return m_assembly_valid_isSet;
}

bool OAIWarehouseLocationDto::is_assembly_valid_Valid() const{
    return m_assembly_valid_isValid;
}

QString OAIWarehouseLocationDto::getDescription() const {
    return m_description;
}
void OAIWarehouseLocationDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWarehouseLocationDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWarehouseLocationDto::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIWarehouseLocationDto::isInclQtyAvail() const {
    return m_incl_qty_avail;
}
void OAIWarehouseLocationDto::setInclQtyAvail(const bool &incl_qty_avail) {
    m_incl_qty_avail = incl_qty_avail;
    m_incl_qty_avail_isSet = true;
}

bool OAIWarehouseLocationDto::is_incl_qty_avail_Set() const{
    return m_incl_qty_avail_isSet;
}

bool OAIWarehouseLocationDto::is_incl_qty_avail_Valid() const{
    return m_incl_qty_avail_isValid;
}

bool OAIWarehouseLocationDto::isIsCosted() const {
    return m_is_costed;
}
void OAIWarehouseLocationDto::setIsCosted(const bool &is_costed) {
    m_is_costed = is_costed;
    m_is_costed_isSet = true;
}

bool OAIWarehouseLocationDto::is_is_costed_Set() const{
    return m_is_costed_isSet;
}

bool OAIWarehouseLocationDto::is_is_costed_Valid() const{
    return m_is_costed_isValid;
}

QString OAIWarehouseLocationDto::getLocationId() const {
    return m_location_id;
}
void OAIWarehouseLocationDto::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIWarehouseLocationDto::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIWarehouseLocationDto::is_location_id_Valid() const{
    return m_location_id_isValid;
}

OAIPrimaryItemInWarehouseLocationDto OAIWarehouseLocationDto::getPrimaryItem() const {
    return m_primary_item;
}
void OAIWarehouseLocationDto::setPrimaryItem(const OAIPrimaryItemInWarehouseLocationDto &primary_item) {
    m_primary_item = primary_item;
    m_primary_item_isSet = true;
}

bool OAIWarehouseLocationDto::is_primary_item_Set() const{
    return m_primary_item_isSet;
}

bool OAIWarehouseLocationDto::is_primary_item_Valid() const{
    return m_primary_item_isValid;
}

OAIPrimaryItemClassInWarehouseLocationDto OAIWarehouseLocationDto::getPrimaryItemClass() const {
    return m_primary_item_class;
}
void OAIWarehouseLocationDto::setPrimaryItemClass(const OAIPrimaryItemClassInWarehouseLocationDto &primary_item_class) {
    m_primary_item_class = primary_item_class;
    m_primary_item_class_isSet = true;
}

bool OAIWarehouseLocationDto::is_primary_item_class_Set() const{
    return m_primary_item_class_isSet;
}

bool OAIWarehouseLocationDto::is_primary_item_class_Valid() const{
    return m_primary_item_class_isValid;
}

QString OAIWarehouseLocationDto::getPrimaryItemValid() const {
    return m_primary_item_valid;
}
void OAIWarehouseLocationDto::setPrimaryItemValid(const QString &primary_item_valid) {
    m_primary_item_valid = primary_item_valid;
    m_primary_item_valid_isSet = true;
}

bool OAIWarehouseLocationDto::is_primary_item_valid_Set() const{
    return m_primary_item_valid_isSet;
}

bool OAIWarehouseLocationDto::is_primary_item_valid_Valid() const{
    return m_primary_item_valid_isValid;
}

OAIProjectInWarehouseLocationDto OAIWarehouseLocationDto::getProject() const {
    return m_project;
}
void OAIWarehouseLocationDto::setProject(const OAIProjectInWarehouseLocationDto &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIWarehouseLocationDto::is_project_Set() const{
    return m_project_isSet;
}

bool OAIWarehouseLocationDto::is_project_Valid() const{
    return m_project_isValid;
}

OAIProjectTaskInWarehouseLocationDto OAIWarehouseLocationDto::getProjectTask() const {
    return m_project_task;
}
void OAIWarehouseLocationDto::setProjectTask(const OAIProjectTaskInWarehouseLocationDto &project_task) {
    m_project_task = project_task;
    m_project_task_isSet = true;
}

bool OAIWarehouseLocationDto::is_project_task_Set() const{
    return m_project_task_isSet;
}

bool OAIWarehouseLocationDto::is_project_task_Valid() const{
    return m_project_task_isValid;
}

bool OAIWarehouseLocationDto::isReceiptsValid() const {
    return m_receipts_valid;
}
void OAIWarehouseLocationDto::setReceiptsValid(const bool &receipts_valid) {
    m_receipts_valid = receipts_valid;
    m_receipts_valid_isSet = true;
}

bool OAIWarehouseLocationDto::is_receipts_valid_Set() const{
    return m_receipts_valid_isSet;
}

bool OAIWarehouseLocationDto::is_receipts_valid_Valid() const{
    return m_receipts_valid_isValid;
}

bool OAIWarehouseLocationDto::isSalesValid() const {
    return m_sales_valid;
}
void OAIWarehouseLocationDto::setSalesValid(const bool &sales_valid) {
    m_sales_valid = sales_valid;
    m_sales_valid_isSet = true;
}

bool OAIWarehouseLocationDto::is_sales_valid_Set() const{
    return m_sales_valid_isSet;
}

bool OAIWarehouseLocationDto::is_sales_valid_Valid() const{
    return m_sales_valid_isValid;
}

bool OAIWarehouseLocationDto::isTransfersValid() const {
    return m_transfers_valid;
}
void OAIWarehouseLocationDto::setTransfersValid(const bool &transfers_valid) {
    m_transfers_valid = transfers_valid;
    m_transfers_valid_isSet = true;
}

bool OAIWarehouseLocationDto::is_transfers_valid_Set() const{
    return m_transfers_valid_isSet;
}

bool OAIWarehouseLocationDto::is_transfers_valid_Valid() const{
    return m_transfers_valid_isValid;
}

bool OAIWarehouseLocationDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assembly_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incl_qty_avail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_costed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_item_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_item_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipts_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfers_valid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWarehouseLocationDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
