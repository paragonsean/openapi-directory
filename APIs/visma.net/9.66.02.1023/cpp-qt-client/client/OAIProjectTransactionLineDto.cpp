/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectTransactionLineDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectTransactionLineDto::OAIProjectTransactionLineDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectTransactionLineDto::OAIProjectTransactionLineDto() {
    this->initializeModel();
}

OAIProjectTransactionLineDto::~OAIProjectTransactionLineDto() {}

void OAIProjectTransactionLineDto::initializeModel() {

    m_account_group_isSet = false;
    m_account_group_isValid = false;

    m_allocated_isSet = false;
    m_allocated_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_batch_nbr_isSet = false;
    m_batch_nbr_isValid = false;

    m_billable_isSet = false;
    m_billable_isValid = false;

    m_billable_quantity_isSet = false;
    m_billable_quantity_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_credit_account_isSet = false;
    m_credit_account_isValid = false;

    m_credit_account_group_isSet = false;
    m_credit_account_group_isValid = false;

    m_credit_subaccount_isSet = false;
    m_credit_subaccount_isValid = false;

    m_customer_vendor_isSet = false;
    m_customer_vendor_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_debit_account_isSet = false;
    m_debit_account_isValid = false;

    m_debit_account_group_isSet = false;
    m_debit_account_group_isValid = false;

    m_debit_subaccount_isSet = false;
    m_debit_subaccount_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_earning_type_isSet = false;
    m_earning_type_isValid = false;

    m_employee_isSet = false;
    m_employee_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_financial_period_isSet = false;
    m_financial_period_isValid = false;

    m_inventory_id_isSet = false;
    m_inventory_id_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_overtime_multiplier_isSet = false;
    m_overtime_multiplier_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_project_task_isSet = false;
    m_project_task_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_released_isSet = false;
    m_released_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_tran_id_isSet = false;
    m_tran_id_isValid = false;

    m_unit_rate_isSet = false;
    m_unit_rate_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;

    m_use_billable_qty_isSet = false;
    m_use_billable_qty_isValid = false;
}

void OAIProjectTransactionLineDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectTransactionLineDto::fromJsonObject(QJsonObject json) {

    m_account_group_isValid = ::OpenAPI::fromJsonValue(m_account_group, json[QString("accountGroup")]);
    m_account_group_isSet = !json[QString("accountGroup")].isNull() && m_account_group_isValid;

    m_allocated_isValid = ::OpenAPI::fromJsonValue(m_allocated, json[QString("allocated")]);
    m_allocated_isSet = !json[QString("allocated")].isNull() && m_allocated_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_batch_nbr_isValid = ::OpenAPI::fromJsonValue(m_batch_nbr, json[QString("batchNbr")]);
    m_batch_nbr_isSet = !json[QString("batchNbr")].isNull() && m_batch_nbr_isValid;

    m_billable_isValid = ::OpenAPI::fromJsonValue(m_billable, json[QString("billable")]);
    m_billable_isSet = !json[QString("billable")].isNull() && m_billable_isValid;

    m_billable_quantity_isValid = ::OpenAPI::fromJsonValue(m_billable_quantity, json[QString("billableQuantity")]);
    m_billable_quantity_isSet = !json[QString("billableQuantity")].isNull() && m_billable_quantity_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_credit_account_isValid = ::OpenAPI::fromJsonValue(m_credit_account, json[QString("creditAccount")]);
    m_credit_account_isSet = !json[QString("creditAccount")].isNull() && m_credit_account_isValid;

    m_credit_account_group_isValid = ::OpenAPI::fromJsonValue(m_credit_account_group, json[QString("creditAccountGroup")]);
    m_credit_account_group_isSet = !json[QString("creditAccountGroup")].isNull() && m_credit_account_group_isValid;

    m_credit_subaccount_isValid = ::OpenAPI::fromJsonValue(m_credit_subaccount, json[QString("creditSubaccount")]);
    m_credit_subaccount_isSet = !json[QString("creditSubaccount")].isNull() && m_credit_subaccount_isValid;

    m_customer_vendor_isValid = ::OpenAPI::fromJsonValue(m_customer_vendor, json[QString("customerVendor")]);
    m_customer_vendor_isSet = !json[QString("customerVendor")].isNull() && m_customer_vendor_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_debit_account_isValid = ::OpenAPI::fromJsonValue(m_debit_account, json[QString("debitAccount")]);
    m_debit_account_isSet = !json[QString("debitAccount")].isNull() && m_debit_account_isValid;

    m_debit_account_group_isValid = ::OpenAPI::fromJsonValue(m_debit_account_group, json[QString("debitAccountGroup")]);
    m_debit_account_group_isSet = !json[QString("debitAccountGroup")].isNull() && m_debit_account_group_isValid;

    m_debit_subaccount_isValid = ::OpenAPI::fromJsonValue(m_debit_subaccount, json[QString("debitSubaccount")]);
    m_debit_subaccount_isSet = !json[QString("debitSubaccount")].isNull() && m_debit_subaccount_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_earning_type_isValid = ::OpenAPI::fromJsonValue(m_earning_type, json[QString("earningType")]);
    m_earning_type_isSet = !json[QString("earningType")].isNull() && m_earning_type_isValid;

    m_employee_isValid = ::OpenAPI::fromJsonValue(m_employee, json[QString("employee")]);
    m_employee_isSet = !json[QString("employee")].isNull() && m_employee_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_financial_period_isValid = ::OpenAPI::fromJsonValue(m_financial_period, json[QString("financialPeriod")]);
    m_financial_period_isSet = !json[QString("financialPeriod")].isNull() && m_financial_period_isValid;

    m_inventory_id_isValid = ::OpenAPI::fromJsonValue(m_inventory_id, json[QString("inventoryId")]);
    m_inventory_id_isSet = !json[QString("inventoryId")].isNull() && m_inventory_id_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_overtime_multiplier_isValid = ::OpenAPI::fromJsonValue(m_overtime_multiplier, json[QString("overtimeMultiplier")]);
    m_overtime_multiplier_isSet = !json[QString("overtimeMultiplier")].isNull() && m_overtime_multiplier_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_project_task_isValid = ::OpenAPI::fromJsonValue(m_project_task, json[QString("projectTask")]);
    m_project_task_isSet = !json[QString("projectTask")].isNull() && m_project_task_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_released_isValid = ::OpenAPI::fromJsonValue(m_released, json[QString("released")]);
    m_released_isSet = !json[QString("released")].isNull() && m_released_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_tran_id_isValid = ::OpenAPI::fromJsonValue(m_tran_id, json[QString("tranId")]);
    m_tran_id_isSet = !json[QString("tranId")].isNull() && m_tran_id_isValid;

    m_unit_rate_isValid = ::OpenAPI::fromJsonValue(m_unit_rate, json[QString("unitRate")]);
    m_unit_rate_isSet = !json[QString("unitRate")].isNull() && m_unit_rate_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;

    m_use_billable_qty_isValid = ::OpenAPI::fromJsonValue(m_use_billable_qty, json[QString("useBillableQty")]);
    m_use_billable_qty_isSet = !json[QString("useBillableQty")].isNull() && m_use_billable_qty_isValid;
}

QString OAIProjectTransactionLineDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectTransactionLineDto::asJsonObject() const {
    QJsonObject obj;
    if (m_account_group.isSet()) {
        obj.insert(QString("accountGroup"), ::OpenAPI::toJsonValue(m_account_group));
    }
    if (m_allocated_isSet) {
        obj.insert(QString("allocated"), ::OpenAPI::toJsonValue(m_allocated));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_batch_nbr_isSet) {
        obj.insert(QString("batchNbr"), ::OpenAPI::toJsonValue(m_batch_nbr));
    }
    if (m_billable_isSet) {
        obj.insert(QString("billable"), ::OpenAPI::toJsonValue(m_billable));
    }
    if (m_billable_quantity_isSet) {
        obj.insert(QString("billableQuantity"), ::OpenAPI::toJsonValue(m_billable_quantity));
    }
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_credit_account.isSet()) {
        obj.insert(QString("creditAccount"), ::OpenAPI::toJsonValue(m_credit_account));
    }
    if (m_credit_account_group.isSet()) {
        obj.insert(QString("creditAccountGroup"), ::OpenAPI::toJsonValue(m_credit_account_group));
    }
    if (m_credit_subaccount.isSet()) {
        obj.insert(QString("creditSubaccount"), ::OpenAPI::toJsonValue(m_credit_subaccount));
    }
    if (m_customer_vendor.isSet()) {
        obj.insert(QString("customerVendor"), ::OpenAPI::toJsonValue(m_customer_vendor));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_debit_account.isSet()) {
        obj.insert(QString("debitAccount"), ::OpenAPI::toJsonValue(m_debit_account));
    }
    if (m_debit_account_group.isSet()) {
        obj.insert(QString("debitAccountGroup"), ::OpenAPI::toJsonValue(m_debit_account_group));
    }
    if (m_debit_subaccount.isSet()) {
        obj.insert(QString("debitSubaccount"), ::OpenAPI::toJsonValue(m_debit_subaccount));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_earning_type.isSet()) {
        obj.insert(QString("earningType"), ::OpenAPI::toJsonValue(m_earning_type));
    }
    if (m_employee.isSet()) {
        obj.insert(QString("employee"), ::OpenAPI::toJsonValue(m_employee));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_financial_period_isSet) {
        obj.insert(QString("financialPeriod"), ::OpenAPI::toJsonValue(m_financial_period));
    }
    if (m_inventory_id.isSet()) {
        obj.insert(QString("inventoryId"), ::OpenAPI::toJsonValue(m_inventory_id));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_overtime_multiplier_isSet) {
        obj.insert(QString("overtimeMultiplier"), ::OpenAPI::toJsonValue(m_overtime_multiplier));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_project_task.isSet()) {
        obj.insert(QString("projectTask"), ::OpenAPI::toJsonValue(m_project_task));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_released_isSet) {
        obj.insert(QString("released"), ::OpenAPI::toJsonValue(m_released));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_tran_id_isSet) {
        obj.insert(QString("tranId"), ::OpenAPI::toJsonValue(m_tran_id));
    }
    if (m_unit_rate_isSet) {
        obj.insert(QString("unitRate"), ::OpenAPI::toJsonValue(m_unit_rate));
    }
    if (m_uom_isSet) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    if (m_use_billable_qty_isSet) {
        obj.insert(QString("useBillableQty"), ::OpenAPI::toJsonValue(m_use_billable_qty));
    }
    return obj;
}

OAIAccountGroupInProjectTransactionLineDto OAIProjectTransactionLineDto::getAccountGroup() const {
    return m_account_group;
}
void OAIProjectTransactionLineDto::setAccountGroup(const OAIAccountGroupInProjectTransactionLineDto &account_group) {
    m_account_group = account_group;
    m_account_group_isSet = true;
}

bool OAIProjectTransactionLineDto::is_account_group_Set() const{
    return m_account_group_isSet;
}

bool OAIProjectTransactionLineDto::is_account_group_Valid() const{
    return m_account_group_isValid;
}

bool OAIProjectTransactionLineDto::isAllocated() const {
    return m_allocated;
}
void OAIProjectTransactionLineDto::setAllocated(const bool &allocated) {
    m_allocated = allocated;
    m_allocated_isSet = true;
}

bool OAIProjectTransactionLineDto::is_allocated_Set() const{
    return m_allocated_isSet;
}

bool OAIProjectTransactionLineDto::is_allocated_Valid() const{
    return m_allocated_isValid;
}

double OAIProjectTransactionLineDto::getAmount() const {
    return m_amount;
}
void OAIProjectTransactionLineDto::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIProjectTransactionLineDto::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIProjectTransactionLineDto::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIProjectTransactionLineDto::getBatchNbr() const {
    return m_batch_nbr;
}
void OAIProjectTransactionLineDto::setBatchNbr(const QString &batch_nbr) {
    m_batch_nbr = batch_nbr;
    m_batch_nbr_isSet = true;
}

bool OAIProjectTransactionLineDto::is_batch_nbr_Set() const{
    return m_batch_nbr_isSet;
}

bool OAIProjectTransactionLineDto::is_batch_nbr_Valid() const{
    return m_batch_nbr_isValid;
}

bool OAIProjectTransactionLineDto::isBillable() const {
    return m_billable;
}
void OAIProjectTransactionLineDto::setBillable(const bool &billable) {
    m_billable = billable;
    m_billable_isSet = true;
}

bool OAIProjectTransactionLineDto::is_billable_Set() const{
    return m_billable_isSet;
}

bool OAIProjectTransactionLineDto::is_billable_Valid() const{
    return m_billable_isValid;
}

double OAIProjectTransactionLineDto::getBillableQuantity() const {
    return m_billable_quantity;
}
void OAIProjectTransactionLineDto::setBillableQuantity(const double &billable_quantity) {
    m_billable_quantity = billable_quantity;
    m_billable_quantity_isSet = true;
}

bool OAIProjectTransactionLineDto::is_billable_quantity_Set() const{
    return m_billable_quantity_isSet;
}

bool OAIProjectTransactionLineDto::is_billable_quantity_Valid() const{
    return m_billable_quantity_isValid;
}

OAIBranchInProjectTransactionLineDto OAIProjectTransactionLineDto::getBranch() const {
    return m_branch;
}
void OAIProjectTransactionLineDto::setBranch(const OAIBranchInProjectTransactionLineDto &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIProjectTransactionLineDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIProjectTransactionLineDto::is_branch_Valid() const{
    return m_branch_isValid;
}

OAICreditAccountInProjectTransactionLineDto OAIProjectTransactionLineDto::getCreditAccount() const {
    return m_credit_account;
}
void OAIProjectTransactionLineDto::setCreditAccount(const OAICreditAccountInProjectTransactionLineDto &credit_account) {
    m_credit_account = credit_account;
    m_credit_account_isSet = true;
}

bool OAIProjectTransactionLineDto::is_credit_account_Set() const{
    return m_credit_account_isSet;
}

bool OAIProjectTransactionLineDto::is_credit_account_Valid() const{
    return m_credit_account_isValid;
}

OAICreditAccountGroupInProjectTransactionLineDto OAIProjectTransactionLineDto::getCreditAccountGroup() const {
    return m_credit_account_group;
}
void OAIProjectTransactionLineDto::setCreditAccountGroup(const OAICreditAccountGroupInProjectTransactionLineDto &credit_account_group) {
    m_credit_account_group = credit_account_group;
    m_credit_account_group_isSet = true;
}

bool OAIProjectTransactionLineDto::is_credit_account_group_Set() const{
    return m_credit_account_group_isSet;
}

bool OAIProjectTransactionLineDto::is_credit_account_group_Valid() const{
    return m_credit_account_group_isValid;
}

OAICreditSubaccountInProjectTransactionLineDto OAIProjectTransactionLineDto::getCreditSubaccount() const {
    return m_credit_subaccount;
}
void OAIProjectTransactionLineDto::setCreditSubaccount(const OAICreditSubaccountInProjectTransactionLineDto &credit_subaccount) {
    m_credit_subaccount = credit_subaccount;
    m_credit_subaccount_isSet = true;
}

bool OAIProjectTransactionLineDto::is_credit_subaccount_Set() const{
    return m_credit_subaccount_isSet;
}

bool OAIProjectTransactionLineDto::is_credit_subaccount_Valid() const{
    return m_credit_subaccount_isValid;
}

OAICustomerVendorInProjectTransactionLineDto OAIProjectTransactionLineDto::getCustomerVendor() const {
    return m_customer_vendor;
}
void OAIProjectTransactionLineDto::setCustomerVendor(const OAICustomerVendorInProjectTransactionLineDto &customer_vendor) {
    m_customer_vendor = customer_vendor;
    m_customer_vendor_isSet = true;
}

bool OAIProjectTransactionLineDto::is_customer_vendor_Set() const{
    return m_customer_vendor_isSet;
}

bool OAIProjectTransactionLineDto::is_customer_vendor_Valid() const{
    return m_customer_vendor_isValid;
}

QDateTime OAIProjectTransactionLineDto::getDate() const {
    return m_date;
}
void OAIProjectTransactionLineDto::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIProjectTransactionLineDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAIProjectTransactionLineDto::is_date_Valid() const{
    return m_date_isValid;
}

OAIDebitAccountInProjectTransactionLineDto OAIProjectTransactionLineDto::getDebitAccount() const {
    return m_debit_account;
}
void OAIProjectTransactionLineDto::setDebitAccount(const OAIDebitAccountInProjectTransactionLineDto &debit_account) {
    m_debit_account = debit_account;
    m_debit_account_isSet = true;
}

bool OAIProjectTransactionLineDto::is_debit_account_Set() const{
    return m_debit_account_isSet;
}

bool OAIProjectTransactionLineDto::is_debit_account_Valid() const{
    return m_debit_account_isValid;
}

OAIDebitAccountGroupInProjectTransactionLineDto OAIProjectTransactionLineDto::getDebitAccountGroup() const {
    return m_debit_account_group;
}
void OAIProjectTransactionLineDto::setDebitAccountGroup(const OAIDebitAccountGroupInProjectTransactionLineDto &debit_account_group) {
    m_debit_account_group = debit_account_group;
    m_debit_account_group_isSet = true;
}

bool OAIProjectTransactionLineDto::is_debit_account_group_Set() const{
    return m_debit_account_group_isSet;
}

bool OAIProjectTransactionLineDto::is_debit_account_group_Valid() const{
    return m_debit_account_group_isValid;
}

OAIDebitSubaccountInProjectTransactionLineDto OAIProjectTransactionLineDto::getDebitSubaccount() const {
    return m_debit_subaccount;
}
void OAIProjectTransactionLineDto::setDebitSubaccount(const OAIDebitSubaccountInProjectTransactionLineDto &debit_subaccount) {
    m_debit_subaccount = debit_subaccount;
    m_debit_subaccount_isSet = true;
}

bool OAIProjectTransactionLineDto::is_debit_subaccount_Set() const{
    return m_debit_subaccount_isSet;
}

bool OAIProjectTransactionLineDto::is_debit_subaccount_Valid() const{
    return m_debit_subaccount_isValid;
}

QString OAIProjectTransactionLineDto::getDescription() const {
    return m_description;
}
void OAIProjectTransactionLineDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProjectTransactionLineDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProjectTransactionLineDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIEarningTypeInProjectTransactionLineDto OAIProjectTransactionLineDto::getEarningType() const {
    return m_earning_type;
}
void OAIProjectTransactionLineDto::setEarningType(const OAIEarningTypeInProjectTransactionLineDto &earning_type) {
    m_earning_type = earning_type;
    m_earning_type_isSet = true;
}

bool OAIProjectTransactionLineDto::is_earning_type_Set() const{
    return m_earning_type_isSet;
}

bool OAIProjectTransactionLineDto::is_earning_type_Valid() const{
    return m_earning_type_isValid;
}

OAIEmployeeInProjectTransactionLineDto OAIProjectTransactionLineDto::getEmployee() const {
    return m_employee;
}
void OAIProjectTransactionLineDto::setEmployee(const OAIEmployeeInProjectTransactionLineDto &employee) {
    m_employee = employee;
    m_employee_isSet = true;
}

bool OAIProjectTransactionLineDto::is_employee_Set() const{
    return m_employee_isSet;
}

bool OAIProjectTransactionLineDto::is_employee_Valid() const{
    return m_employee_isValid;
}

QDateTime OAIProjectTransactionLineDto::getEndDate() const {
    return m_end_date;
}
void OAIProjectTransactionLineDto::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIProjectTransactionLineDto::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIProjectTransactionLineDto::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIProjectTransactionLineDto::getErrorInfo() const {
    return m_error_info;
}
void OAIProjectTransactionLineDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIProjectTransactionLineDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIProjectTransactionLineDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

QString OAIProjectTransactionLineDto::getFinancialPeriod() const {
    return m_financial_period;
}
void OAIProjectTransactionLineDto::setFinancialPeriod(const QString &financial_period) {
    m_financial_period = financial_period;
    m_financial_period_isSet = true;
}

bool OAIProjectTransactionLineDto::is_financial_period_Set() const{
    return m_financial_period_isSet;
}

bool OAIProjectTransactionLineDto::is_financial_period_Valid() const{
    return m_financial_period_isValid;
}

OAIInventoryIdInProjectTransactionLineDto OAIProjectTransactionLineDto::getInventoryId() const {
    return m_inventory_id;
}
void OAIProjectTransactionLineDto::setInventoryId(const OAIInventoryIdInProjectTransactionLineDto &inventory_id) {
    m_inventory_id = inventory_id;
    m_inventory_id_isSet = true;
}

bool OAIProjectTransactionLineDto::is_inventory_id_Set() const{
    return m_inventory_id_isSet;
}

bool OAIProjectTransactionLineDto::is_inventory_id_Valid() const{
    return m_inventory_id_isValid;
}

QDateTime OAIProjectTransactionLineDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIProjectTransactionLineDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIProjectTransactionLineDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIProjectTransactionLineDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAILocationInProjectTransactionLineDto OAIProjectTransactionLineDto::getLocation() const {
    return m_location;
}
void OAIProjectTransactionLineDto::setLocation(const OAILocationInProjectTransactionLineDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIProjectTransactionLineDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIProjectTransactionLineDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIMetadataDto OAIProjectTransactionLineDto::getMetadata() const {
    return m_metadata;
}
void OAIProjectTransactionLineDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIProjectTransactionLineDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIProjectTransactionLineDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIProjectTransactionLineDto::getNote() const {
    return m_note;
}
void OAIProjectTransactionLineDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIProjectTransactionLineDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAIProjectTransactionLineDto::is_note_Valid() const{
    return m_note_isValid;
}

double OAIProjectTransactionLineDto::getOvertimeMultiplier() const {
    return m_overtime_multiplier;
}
void OAIProjectTransactionLineDto::setOvertimeMultiplier(const double &overtime_multiplier) {
    m_overtime_multiplier = overtime_multiplier;
    m_overtime_multiplier_isSet = true;
}

bool OAIProjectTransactionLineDto::is_overtime_multiplier_Set() const{
    return m_overtime_multiplier_isSet;
}

bool OAIProjectTransactionLineDto::is_overtime_multiplier_Valid() const{
    return m_overtime_multiplier_isValid;
}

OAIProjectInProjectTransactionLineDto OAIProjectTransactionLineDto::getProject() const {
    return m_project;
}
void OAIProjectTransactionLineDto::setProject(const OAIProjectInProjectTransactionLineDto &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIProjectTransactionLineDto::is_project_Set() const{
    return m_project_isSet;
}

bool OAIProjectTransactionLineDto::is_project_Valid() const{
    return m_project_isValid;
}

OAIProjectTaskInProjectTransactionLineDto OAIProjectTransactionLineDto::getProjectTask() const {
    return m_project_task;
}
void OAIProjectTransactionLineDto::setProjectTask(const OAIProjectTaskInProjectTransactionLineDto &project_task) {
    m_project_task = project_task;
    m_project_task_isSet = true;
}

bool OAIProjectTransactionLineDto::is_project_task_Set() const{
    return m_project_task_isSet;
}

bool OAIProjectTransactionLineDto::is_project_task_Valid() const{
    return m_project_task_isValid;
}

double OAIProjectTransactionLineDto::getQuantity() const {
    return m_quantity;
}
void OAIProjectTransactionLineDto::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIProjectTransactionLineDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIProjectTransactionLineDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

bool OAIProjectTransactionLineDto::isReleased() const {
    return m_released;
}
void OAIProjectTransactionLineDto::setReleased(const bool &released) {
    m_released = released;
    m_released_isSet = true;
}

bool OAIProjectTransactionLineDto::is_released_Set() const{
    return m_released_isSet;
}

bool OAIProjectTransactionLineDto::is_released_Valid() const{
    return m_released_isValid;
}

QDateTime OAIProjectTransactionLineDto::getStartDate() const {
    return m_start_date;
}
void OAIProjectTransactionLineDto::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIProjectTransactionLineDto::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIProjectTransactionLineDto::is_start_date_Valid() const{
    return m_start_date_isValid;
}

qint64 OAIProjectTransactionLineDto::getTranId() const {
    return m_tran_id;
}
void OAIProjectTransactionLineDto::setTranId(const qint64 &tran_id) {
    m_tran_id = tran_id;
    m_tran_id_isSet = true;
}

bool OAIProjectTransactionLineDto::is_tran_id_Set() const{
    return m_tran_id_isSet;
}

bool OAIProjectTransactionLineDto::is_tran_id_Valid() const{
    return m_tran_id_isValid;
}

double OAIProjectTransactionLineDto::getUnitRate() const {
    return m_unit_rate;
}
void OAIProjectTransactionLineDto::setUnitRate(const double &unit_rate) {
    m_unit_rate = unit_rate;
    m_unit_rate_isSet = true;
}

bool OAIProjectTransactionLineDto::is_unit_rate_Set() const{
    return m_unit_rate_isSet;
}

bool OAIProjectTransactionLineDto::is_unit_rate_Valid() const{
    return m_unit_rate_isValid;
}

QString OAIProjectTransactionLineDto::getUom() const {
    return m_uom;
}
void OAIProjectTransactionLineDto::setUom(const QString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAIProjectTransactionLineDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAIProjectTransactionLineDto::is_uom_Valid() const{
    return m_uom_isValid;
}

bool OAIProjectTransactionLineDto::isUseBillableQty() const {
    return m_use_billable_qty;
}
void OAIProjectTransactionLineDto::setUseBillableQty(const bool &use_billable_qty) {
    m_use_billable_qty = use_billable_qty;
    m_use_billable_qty_isSet = true;
}

bool OAIProjectTransactionLineDto::is_use_billable_qty_Set() const{
    return m_use_billable_qty_isSet;
}

bool OAIProjectTransactionLineDto::is_use_billable_qty_Valid() const{
    return m_use_billable_qty_isValid;
}

bool OAIProjectTransactionLineDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billable_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_account_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_vendor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_account_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_earning_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_financial_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overtime_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_released_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tran_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_billable_qty_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectTransactionLineDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
