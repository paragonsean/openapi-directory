/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDiscountApi_H
#define OAI_OAIDiscountApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAIBasePaginationDtoOfDiscountDto.h"
#include "OAIDiscountUpdateDto.h"
#include "OAIObject.h"
#include "OAIUpdateDiscountsActionResultDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDiscountApi : public QObject {
    Q_OBJECT

public:
    OAIDiscountApi(const int timeOut = 0);
    ~OAIDiscountApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  discount_code QString [required]
    * @param[in]  series QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void discountDeleteBydiscountCodeseries(const QString &discount_code, const QString &series, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  created_date_time QString [optional]
    * @param[in]  created_date_time_condition QString [optional]
    * @param[in]  discount_code QString [optional]
    * @param[in]  series QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void discountGetDiscounts(const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &discount_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &series = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_discount_update_dto OAIDiscountUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void discountPost(const OAIDiscountUpdateDto &oai_discount_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  discount_code QString [required]
    * @param[in]  series QString [required]
    * @param[in]  oai_discount_update_dto OAIDiscountUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void discountPutBydiscountCodeseries(const QString &discount_code, const QString &series, const OAIDiscountUpdateDto &oai_discount_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  discount_code QString [required]
    * @param[in]  series QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void discountUpdateDiscountsBydiscountCodeseries(const QString &discount_code, const QString &series, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  discount_code QString [required]
    * @param[in]  series QString [required]
    * @param[in]  filter_date QDateTime [required]
    * @param[in]  filer_date QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void discountUpdateDiscountsBydiscountCodeseriesfilerDate(const QString &discount_code, const QString &series, const QDateTime &filter_date, const QString &filer_date, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void discountDeleteBydiscountCodeseriesCallback(OAIHttpRequestWorker *worker);
    void discountGetDiscountsCallback(OAIHttpRequestWorker *worker);
    void discountPostCallback(OAIHttpRequestWorker *worker);
    void discountPutBydiscountCodeseriesCallback(OAIHttpRequestWorker *worker);
    void discountUpdateDiscountsBydiscountCodeseriesCallback(OAIHttpRequestWorker *worker);
    void discountUpdateDiscountsBydiscountCodeseriesfilerDateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void discountDeleteBydiscountCodeseriesSignal(OAIObject summary);
    void discountGetDiscountsSignal(OAIBasePaginationDtoOfDiscountDto summary);
    void discountPostSignal(OAIObject summary);
    void discountPutBydiscountCodeseriesSignal(OAIObject summary);
    void discountUpdateDiscountsBydiscountCodeseriesSignal(OAIUpdateDiscountsActionResultDto summary);
    void discountUpdateDiscountsBydiscountCodeseriesfilerDateSignal(OAIUpdateDiscountsActionResultDto summary);


    void discountDeleteBydiscountCodeseriesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void discountGetDiscountsSignalFull(OAIHttpRequestWorker *worker, OAIBasePaginationDtoOfDiscountDto summary);
    void discountPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void discountPutBydiscountCodeseriesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void discountUpdateDiscountsBydiscountCodeseriesSignalFull(OAIHttpRequestWorker *worker, OAIUpdateDiscountsActionResultDto summary);
    void discountUpdateDiscountsBydiscountCodeseriesfilerDateSignalFull(OAIHttpRequestWorker *worker, OAIUpdateDiscountsActionResultDto summary);

    Q_DECL_DEPRECATED_X("Use discountDeleteBydiscountCodeseriesSignalError() instead")
    void discountDeleteBydiscountCodeseriesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discountDeleteBydiscountCodeseriesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discountGetDiscountsSignalError() instead")
    void discountGetDiscountsSignalE(OAIBasePaginationDtoOfDiscountDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discountGetDiscountsSignalError(OAIBasePaginationDtoOfDiscountDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discountPostSignalError() instead")
    void discountPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discountPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discountPutBydiscountCodeseriesSignalError() instead")
    void discountPutBydiscountCodeseriesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discountPutBydiscountCodeseriesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discountUpdateDiscountsBydiscountCodeseriesSignalError() instead")
    void discountUpdateDiscountsBydiscountCodeseriesSignalE(OAIUpdateDiscountsActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discountUpdateDiscountsBydiscountCodeseriesSignalError(OAIUpdateDiscountsActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discountUpdateDiscountsBydiscountCodeseriesfilerDateSignalError() instead")
    void discountUpdateDiscountsBydiscountCodeseriesfilerDateSignalE(OAIUpdateDiscountsActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discountUpdateDiscountsBydiscountCodeseriesfilerDateSignalError(OAIUpdateDiscountsActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use discountDeleteBydiscountCodeseriesSignalErrorFull() instead")
    void discountDeleteBydiscountCodeseriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discountDeleteBydiscountCodeseriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discountGetDiscountsSignalErrorFull() instead")
    void discountGetDiscountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discountGetDiscountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discountPostSignalErrorFull() instead")
    void discountPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discountPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discountPutBydiscountCodeseriesSignalErrorFull() instead")
    void discountPutBydiscountCodeseriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discountPutBydiscountCodeseriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discountUpdateDiscountsBydiscountCodeseriesSignalErrorFull() instead")
    void discountUpdateDiscountsBydiscountCodeseriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discountUpdateDiscountsBydiscountCodeseriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discountUpdateDiscountsBydiscountCodeseriesfilerDateSignalErrorFull() instead")
    void discountUpdateDiscountsBydiscountCodeseriesfilerDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discountUpdateDiscountsBydiscountCodeseriesfilerDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
