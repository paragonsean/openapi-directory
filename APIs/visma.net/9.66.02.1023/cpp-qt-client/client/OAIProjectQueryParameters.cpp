/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectQueryParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectQueryParameters::OAIProjectQueryParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectQueryParameters::OAIProjectQueryParameters() {
    this->initializeModel();
}

OAIProjectQueryParameters::~OAIProjectQueryParameters() {}

void OAIProjectQueryParameters::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_created_date_time_condition_isSet = false;
    m_created_date_time_condition_isValid = false;

    m_expand_attribute_isSet = false;
    m_expand_attribute_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_last_modified_date_time_condition_isSet = false;
    m_last_modified_date_time_condition_isValid = false;

    m_non_project_isSet = false;
    m_non_project_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_public_id_isSet = false;
    m_public_id_isValid = false;

    m_restricted_employee_isSet = false;
    m_restricted_employee_isValid = false;

    m_restricted_user_isSet = false;
    m_restricted_user_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_system_template_isSet = false;
    m_system_template_isValid = false;

    m_task_status_isSet = false;
    m_task_status_isValid = false;

    m_task_visible_in_ap_isSet = false;
    m_task_visible_in_ap_isValid = false;

    m_task_visible_in_ar_isSet = false;
    m_task_visible_in_ar_isValid = false;

    m_task_visible_in_ca_isSet = false;
    m_task_visible_in_ca_isValid = false;

    m_task_visible_in_cr_isSet = false;
    m_task_visible_in_cr_isValid = false;

    m_task_visible_in_ea_isSet = false;
    m_task_visible_in_ea_isValid = false;

    m_task_visible_in_gl_isSet = false;
    m_task_visible_in_gl_isValid = false;

    m_task_visible_in_in_isSet = false;
    m_task_visible_in_in_isValid = false;

    m_task_visible_in_po_isSet = false;
    m_task_visible_in_po_isValid = false;

    m_task_visible_in_so_isSet = false;
    m_task_visible_in_so_isValid = false;

    m_task_visible_in_ta_isSet = false;
    m_task_visible_in_ta_isValid = false;

    m_visible_in_ap_isSet = false;
    m_visible_in_ap_isValid = false;
}

void OAIProjectQueryParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectQueryParameters::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_created_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_created_date_time_condition, json[QString("createdDateTimeCondition")]);
    m_created_date_time_condition_isSet = !json[QString("createdDateTimeCondition")].isNull() && m_created_date_time_condition_isValid;

    m_expand_attribute_isValid = ::OpenAPI::fromJsonValue(m_expand_attribute, json[QString("expandAttribute")]);
    m_expand_attribute_isSet = !json[QString("expandAttribute")].isNull() && m_expand_attribute_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_last_modified_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time_condition, json[QString("lastModifiedDateTimeCondition")]);
    m_last_modified_date_time_condition_isSet = !json[QString("lastModifiedDateTimeCondition")].isNull() && m_last_modified_date_time_condition_isValid;

    m_non_project_isValid = ::OpenAPI::fromJsonValue(m_non_project, json[QString("nonProject")]);
    m_non_project_isSet = !json[QString("nonProject")].isNull() && m_non_project_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("pageNumber")]);
    m_page_number_isSet = !json[QString("pageNumber")].isNull() && m_page_number_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_public_id_isValid = ::OpenAPI::fromJsonValue(m_public_id, json[QString("publicId")]);
    m_public_id_isSet = !json[QString("publicId")].isNull() && m_public_id_isValid;

    m_restricted_employee_isValid = ::OpenAPI::fromJsonValue(m_restricted_employee, json[QString("restrictedEmployee")]);
    m_restricted_employee_isSet = !json[QString("restrictedEmployee")].isNull() && m_restricted_employee_isValid;

    m_restricted_user_isValid = ::OpenAPI::fromJsonValue(m_restricted_user, json[QString("restrictedUser")]);
    m_restricted_user_isSet = !json[QString("restrictedUser")].isNull() && m_restricted_user_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_system_template_isValid = ::OpenAPI::fromJsonValue(m_system_template, json[QString("systemTemplate")]);
    m_system_template_isSet = !json[QString("systemTemplate")].isNull() && m_system_template_isValid;

    m_task_status_isValid = ::OpenAPI::fromJsonValue(m_task_status, json[QString("taskStatus")]);
    m_task_status_isSet = !json[QString("taskStatus")].isNull() && m_task_status_isValid;

    m_task_visible_in_ap_isValid = ::OpenAPI::fromJsonValue(m_task_visible_in_ap, json[QString("taskVisibleInAp")]);
    m_task_visible_in_ap_isSet = !json[QString("taskVisibleInAp")].isNull() && m_task_visible_in_ap_isValid;

    m_task_visible_in_ar_isValid = ::OpenAPI::fromJsonValue(m_task_visible_in_ar, json[QString("taskVisibleInAr")]);
    m_task_visible_in_ar_isSet = !json[QString("taskVisibleInAr")].isNull() && m_task_visible_in_ar_isValid;

    m_task_visible_in_ca_isValid = ::OpenAPI::fromJsonValue(m_task_visible_in_ca, json[QString("taskVisibleInCa")]);
    m_task_visible_in_ca_isSet = !json[QString("taskVisibleInCa")].isNull() && m_task_visible_in_ca_isValid;

    m_task_visible_in_cr_isValid = ::OpenAPI::fromJsonValue(m_task_visible_in_cr, json[QString("taskVisibleInCr")]);
    m_task_visible_in_cr_isSet = !json[QString("taskVisibleInCr")].isNull() && m_task_visible_in_cr_isValid;

    m_task_visible_in_ea_isValid = ::OpenAPI::fromJsonValue(m_task_visible_in_ea, json[QString("taskVisibleInEa")]);
    m_task_visible_in_ea_isSet = !json[QString("taskVisibleInEa")].isNull() && m_task_visible_in_ea_isValid;

    m_task_visible_in_gl_isValid = ::OpenAPI::fromJsonValue(m_task_visible_in_gl, json[QString("taskVisibleInGl")]);
    m_task_visible_in_gl_isSet = !json[QString("taskVisibleInGl")].isNull() && m_task_visible_in_gl_isValid;

    m_task_visible_in_in_isValid = ::OpenAPI::fromJsonValue(m_task_visible_in_in, json[QString("taskVisibleInIn")]);
    m_task_visible_in_in_isSet = !json[QString("taskVisibleInIn")].isNull() && m_task_visible_in_in_isValid;

    m_task_visible_in_po_isValid = ::OpenAPI::fromJsonValue(m_task_visible_in_po, json[QString("taskVisibleInPo")]);
    m_task_visible_in_po_isSet = !json[QString("taskVisibleInPo")].isNull() && m_task_visible_in_po_isValid;

    m_task_visible_in_so_isValid = ::OpenAPI::fromJsonValue(m_task_visible_in_so, json[QString("taskVisibleInSo")]);
    m_task_visible_in_so_isSet = !json[QString("taskVisibleInSo")].isNull() && m_task_visible_in_so_isValid;

    m_task_visible_in_ta_isValid = ::OpenAPI::fromJsonValue(m_task_visible_in_ta, json[QString("taskVisibleInTa")]);
    m_task_visible_in_ta_isSet = !json[QString("taskVisibleInTa")].isNull() && m_task_visible_in_ta_isValid;

    m_visible_in_ap_isValid = ::OpenAPI::fromJsonValue(m_visible_in_ap, json[QString("visibleInAP")]);
    m_visible_in_ap_isSet = !json[QString("visibleInAP")].isNull() && m_visible_in_ap_isValid;
}

QString OAIProjectQueryParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectQueryParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_created_date_time_condition_isSet) {
        obj.insert(QString("createdDateTimeCondition"), ::OpenAPI::toJsonValue(m_created_date_time_condition));
    }
    if (m_expand_attribute_isSet) {
        obj.insert(QString("expandAttribute"), ::OpenAPI::toJsonValue(m_expand_attribute));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_last_modified_date_time_condition_isSet) {
        obj.insert(QString("lastModifiedDateTimeCondition"), ::OpenAPI::toJsonValue(m_last_modified_date_time_condition));
    }
    if (m_non_project_isSet) {
        obj.insert(QString("nonProject"), ::OpenAPI::toJsonValue(m_non_project));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("pageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_public_id_isSet) {
        obj.insert(QString("publicId"), ::OpenAPI::toJsonValue(m_public_id));
    }
    if (m_restricted_employee_isSet) {
        obj.insert(QString("restrictedEmployee"), ::OpenAPI::toJsonValue(m_restricted_employee));
    }
    if (m_restricted_user_isSet) {
        obj.insert(QString("restrictedUser"), ::OpenAPI::toJsonValue(m_restricted_user));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_system_template_isSet) {
        obj.insert(QString("systemTemplate"), ::OpenAPI::toJsonValue(m_system_template));
    }
    if (m_task_status_isSet) {
        obj.insert(QString("taskStatus"), ::OpenAPI::toJsonValue(m_task_status));
    }
    if (m_task_visible_in_ap_isSet) {
        obj.insert(QString("taskVisibleInAp"), ::OpenAPI::toJsonValue(m_task_visible_in_ap));
    }
    if (m_task_visible_in_ar_isSet) {
        obj.insert(QString("taskVisibleInAr"), ::OpenAPI::toJsonValue(m_task_visible_in_ar));
    }
    if (m_task_visible_in_ca_isSet) {
        obj.insert(QString("taskVisibleInCa"), ::OpenAPI::toJsonValue(m_task_visible_in_ca));
    }
    if (m_task_visible_in_cr_isSet) {
        obj.insert(QString("taskVisibleInCr"), ::OpenAPI::toJsonValue(m_task_visible_in_cr));
    }
    if (m_task_visible_in_ea_isSet) {
        obj.insert(QString("taskVisibleInEa"), ::OpenAPI::toJsonValue(m_task_visible_in_ea));
    }
    if (m_task_visible_in_gl_isSet) {
        obj.insert(QString("taskVisibleInGl"), ::OpenAPI::toJsonValue(m_task_visible_in_gl));
    }
    if (m_task_visible_in_in_isSet) {
        obj.insert(QString("taskVisibleInIn"), ::OpenAPI::toJsonValue(m_task_visible_in_in));
    }
    if (m_task_visible_in_po_isSet) {
        obj.insert(QString("taskVisibleInPo"), ::OpenAPI::toJsonValue(m_task_visible_in_po));
    }
    if (m_task_visible_in_so_isSet) {
        obj.insert(QString("taskVisibleInSo"), ::OpenAPI::toJsonValue(m_task_visible_in_so));
    }
    if (m_task_visible_in_ta_isSet) {
        obj.insert(QString("taskVisibleInTa"), ::OpenAPI::toJsonValue(m_task_visible_in_ta));
    }
    if (m_visible_in_ap_isSet) {
        obj.insert(QString("visibleInAP"), ::OpenAPI::toJsonValue(m_visible_in_ap));
    }
    return obj;
}

QString OAIProjectQueryParameters::getAttributes() const {
    return m_attributes;
}
void OAIProjectQueryParameters::setAttributes(const QString &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIProjectQueryParameters::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIProjectQueryParameters::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIProjectQueryParameters::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIProjectQueryParameters::setCreatedDateTime(const QString &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIProjectQueryParameters::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIProjectQueryParameters::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAIProjectQueryParameters::getCreatedDateTimeCondition() const {
    return m_created_date_time_condition;
}
void OAIProjectQueryParameters::setCreatedDateTimeCondition(const QString &created_date_time_condition) {
    m_created_date_time_condition = created_date_time_condition;
    m_created_date_time_condition_isSet = true;
}

bool OAIProjectQueryParameters::is_created_date_time_condition_Set() const{
    return m_created_date_time_condition_isSet;
}

bool OAIProjectQueryParameters::is_created_date_time_condition_Valid() const{
    return m_created_date_time_condition_isValid;
}

bool OAIProjectQueryParameters::isExpandAttribute() const {
    return m_expand_attribute;
}
void OAIProjectQueryParameters::setExpandAttribute(const bool &expand_attribute) {
    m_expand_attribute = expand_attribute;
    m_expand_attribute_isSet = true;
}

bool OAIProjectQueryParameters::is_expand_attribute_Set() const{
    return m_expand_attribute_isSet;
}

bool OAIProjectQueryParameters::is_expand_attribute_Valid() const{
    return m_expand_attribute_isValid;
}

QString OAIProjectQueryParameters::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIProjectQueryParameters::setLastModifiedDateTime(const QString &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIProjectQueryParameters::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIProjectQueryParameters::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QString OAIProjectQueryParameters::getLastModifiedDateTimeCondition() const {
    return m_last_modified_date_time_condition;
}
void OAIProjectQueryParameters::setLastModifiedDateTimeCondition(const QString &last_modified_date_time_condition) {
    m_last_modified_date_time_condition = last_modified_date_time_condition;
    m_last_modified_date_time_condition_isSet = true;
}

bool OAIProjectQueryParameters::is_last_modified_date_time_condition_Set() const{
    return m_last_modified_date_time_condition_isSet;
}

bool OAIProjectQueryParameters::is_last_modified_date_time_condition_Valid() const{
    return m_last_modified_date_time_condition_isValid;
}

bool OAIProjectQueryParameters::isNonProject() const {
    return m_non_project;
}
void OAIProjectQueryParameters::setNonProject(const bool &non_project) {
    m_non_project = non_project;
    m_non_project_isSet = true;
}

bool OAIProjectQueryParameters::is_non_project_Set() const{
    return m_non_project_isSet;
}

bool OAIProjectQueryParameters::is_non_project_Valid() const{
    return m_non_project_isValid;
}

qint32 OAIProjectQueryParameters::getPageNumber() const {
    return m_page_number;
}
void OAIProjectQueryParameters::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIProjectQueryParameters::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIProjectQueryParameters::is_page_number_Valid() const{
    return m_page_number_isValid;
}

qint32 OAIProjectQueryParameters::getPageSize() const {
    return m_page_size;
}
void OAIProjectQueryParameters::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIProjectQueryParameters::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIProjectQueryParameters::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIProjectQueryParameters::getPublicId() const {
    return m_public_id;
}
void OAIProjectQueryParameters::setPublicId(const QString &public_id) {
    m_public_id = public_id;
    m_public_id_isSet = true;
}

bool OAIProjectQueryParameters::is_public_id_Set() const{
    return m_public_id_isSet;
}

bool OAIProjectQueryParameters::is_public_id_Valid() const{
    return m_public_id_isValid;
}

QString OAIProjectQueryParameters::getRestrictedEmployee() const {
    return m_restricted_employee;
}
void OAIProjectQueryParameters::setRestrictedEmployee(const QString &restricted_employee) {
    m_restricted_employee = restricted_employee;
    m_restricted_employee_isSet = true;
}

bool OAIProjectQueryParameters::is_restricted_employee_Set() const{
    return m_restricted_employee_isSet;
}

bool OAIProjectQueryParameters::is_restricted_employee_Valid() const{
    return m_restricted_employee_isValid;
}

qint64 OAIProjectQueryParameters::getRestrictedUser() const {
    return m_restricted_user;
}
void OAIProjectQueryParameters::setRestrictedUser(const qint64 &restricted_user) {
    m_restricted_user = restricted_user;
    m_restricted_user_isSet = true;
}

bool OAIProjectQueryParameters::is_restricted_user_Set() const{
    return m_restricted_user_isSet;
}

bool OAIProjectQueryParameters::is_restricted_user_Valid() const{
    return m_restricted_user_isValid;
}

QDateTime OAIProjectQueryParameters::getStartDate() const {
    return m_start_date;
}
void OAIProjectQueryParameters::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIProjectQueryParameters::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIProjectQueryParameters::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIProjectQueryParameters::getStatus() const {
    return m_status;
}
void OAIProjectQueryParameters::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProjectQueryParameters::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProjectQueryParameters::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIProjectQueryParameters::isSystemTemplate() const {
    return m_system_template;
}
void OAIProjectQueryParameters::setSystemTemplate(const bool &system_template) {
    m_system_template = system_template;
    m_system_template_isSet = true;
}

bool OAIProjectQueryParameters::is_system_template_Set() const{
    return m_system_template_isSet;
}

bool OAIProjectQueryParameters::is_system_template_Valid() const{
    return m_system_template_isValid;
}

QString OAIProjectQueryParameters::getTaskStatus() const {
    return m_task_status;
}
void OAIProjectQueryParameters::setTaskStatus(const QString &task_status) {
    m_task_status = task_status;
    m_task_status_isSet = true;
}

bool OAIProjectQueryParameters::is_task_status_Set() const{
    return m_task_status_isSet;
}

bool OAIProjectQueryParameters::is_task_status_Valid() const{
    return m_task_status_isValid;
}

bool OAIProjectQueryParameters::isTaskVisibleInAp() const {
    return m_task_visible_in_ap;
}
void OAIProjectQueryParameters::setTaskVisibleInAp(const bool &task_visible_in_ap) {
    m_task_visible_in_ap = task_visible_in_ap;
    m_task_visible_in_ap_isSet = true;
}

bool OAIProjectQueryParameters::is_task_visible_in_ap_Set() const{
    return m_task_visible_in_ap_isSet;
}

bool OAIProjectQueryParameters::is_task_visible_in_ap_Valid() const{
    return m_task_visible_in_ap_isValid;
}

bool OAIProjectQueryParameters::isTaskVisibleInAr() const {
    return m_task_visible_in_ar;
}
void OAIProjectQueryParameters::setTaskVisibleInAr(const bool &task_visible_in_ar) {
    m_task_visible_in_ar = task_visible_in_ar;
    m_task_visible_in_ar_isSet = true;
}

bool OAIProjectQueryParameters::is_task_visible_in_ar_Set() const{
    return m_task_visible_in_ar_isSet;
}

bool OAIProjectQueryParameters::is_task_visible_in_ar_Valid() const{
    return m_task_visible_in_ar_isValid;
}

bool OAIProjectQueryParameters::isTaskVisibleInCa() const {
    return m_task_visible_in_ca;
}
void OAIProjectQueryParameters::setTaskVisibleInCa(const bool &task_visible_in_ca) {
    m_task_visible_in_ca = task_visible_in_ca;
    m_task_visible_in_ca_isSet = true;
}

bool OAIProjectQueryParameters::is_task_visible_in_ca_Set() const{
    return m_task_visible_in_ca_isSet;
}

bool OAIProjectQueryParameters::is_task_visible_in_ca_Valid() const{
    return m_task_visible_in_ca_isValid;
}

bool OAIProjectQueryParameters::isTaskVisibleInCr() const {
    return m_task_visible_in_cr;
}
void OAIProjectQueryParameters::setTaskVisibleInCr(const bool &task_visible_in_cr) {
    m_task_visible_in_cr = task_visible_in_cr;
    m_task_visible_in_cr_isSet = true;
}

bool OAIProjectQueryParameters::is_task_visible_in_cr_Set() const{
    return m_task_visible_in_cr_isSet;
}

bool OAIProjectQueryParameters::is_task_visible_in_cr_Valid() const{
    return m_task_visible_in_cr_isValid;
}

bool OAIProjectQueryParameters::isTaskVisibleInEa() const {
    return m_task_visible_in_ea;
}
void OAIProjectQueryParameters::setTaskVisibleInEa(const bool &task_visible_in_ea) {
    m_task_visible_in_ea = task_visible_in_ea;
    m_task_visible_in_ea_isSet = true;
}

bool OAIProjectQueryParameters::is_task_visible_in_ea_Set() const{
    return m_task_visible_in_ea_isSet;
}

bool OAIProjectQueryParameters::is_task_visible_in_ea_Valid() const{
    return m_task_visible_in_ea_isValid;
}

bool OAIProjectQueryParameters::isTaskVisibleInGl() const {
    return m_task_visible_in_gl;
}
void OAIProjectQueryParameters::setTaskVisibleInGl(const bool &task_visible_in_gl) {
    m_task_visible_in_gl = task_visible_in_gl;
    m_task_visible_in_gl_isSet = true;
}

bool OAIProjectQueryParameters::is_task_visible_in_gl_Set() const{
    return m_task_visible_in_gl_isSet;
}

bool OAIProjectQueryParameters::is_task_visible_in_gl_Valid() const{
    return m_task_visible_in_gl_isValid;
}

bool OAIProjectQueryParameters::isTaskVisibleInIn() const {
    return m_task_visible_in_in;
}
void OAIProjectQueryParameters::setTaskVisibleInIn(const bool &task_visible_in_in) {
    m_task_visible_in_in = task_visible_in_in;
    m_task_visible_in_in_isSet = true;
}

bool OAIProjectQueryParameters::is_task_visible_in_in_Set() const{
    return m_task_visible_in_in_isSet;
}

bool OAIProjectQueryParameters::is_task_visible_in_in_Valid() const{
    return m_task_visible_in_in_isValid;
}

bool OAIProjectQueryParameters::isTaskVisibleInPo() const {
    return m_task_visible_in_po;
}
void OAIProjectQueryParameters::setTaskVisibleInPo(const bool &task_visible_in_po) {
    m_task_visible_in_po = task_visible_in_po;
    m_task_visible_in_po_isSet = true;
}

bool OAIProjectQueryParameters::is_task_visible_in_po_Set() const{
    return m_task_visible_in_po_isSet;
}

bool OAIProjectQueryParameters::is_task_visible_in_po_Valid() const{
    return m_task_visible_in_po_isValid;
}

bool OAIProjectQueryParameters::isTaskVisibleInSo() const {
    return m_task_visible_in_so;
}
void OAIProjectQueryParameters::setTaskVisibleInSo(const bool &task_visible_in_so) {
    m_task_visible_in_so = task_visible_in_so;
    m_task_visible_in_so_isSet = true;
}

bool OAIProjectQueryParameters::is_task_visible_in_so_Set() const{
    return m_task_visible_in_so_isSet;
}

bool OAIProjectQueryParameters::is_task_visible_in_so_Valid() const{
    return m_task_visible_in_so_isValid;
}

bool OAIProjectQueryParameters::isTaskVisibleInTa() const {
    return m_task_visible_in_ta;
}
void OAIProjectQueryParameters::setTaskVisibleInTa(const bool &task_visible_in_ta) {
    m_task_visible_in_ta = task_visible_in_ta;
    m_task_visible_in_ta_isSet = true;
}

bool OAIProjectQueryParameters::is_task_visible_in_ta_Set() const{
    return m_task_visible_in_ta_isSet;
}

bool OAIProjectQueryParameters::is_task_visible_in_ta_Valid() const{
    return m_task_visible_in_ta_isValid;
}

bool OAIProjectQueryParameters::isVisibleInAp() const {
    return m_visible_in_ap;
}
void OAIProjectQueryParameters::setVisibleInAp(const bool &visible_in_ap) {
    m_visible_in_ap = visible_in_ap;
    m_visible_in_ap_isSet = true;
}

bool OAIProjectQueryParameters::is_visible_in_ap_Set() const{
    return m_visible_in_ap_isSet;
}

bool OAIProjectQueryParameters::is_visible_in_ap_Valid() const{
    return m_visible_in_ap_isValid;
}

bool OAIProjectQueryParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_employee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_visible_in_ap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_visible_in_ar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_visible_in_ca_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_visible_in_cr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_visible_in_ea_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_visible_in_gl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_visible_in_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_visible_in_po_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_visible_in_so_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_visible_in_ta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_in_ap_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectQueryParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
