/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpenseClaimDetailDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpenseClaimDetailDto::OAIExpenseClaimDetailDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpenseClaimDetailDto::OAIExpenseClaimDetailDto() {
    this->initializeModel();
}

OAIExpenseClaimDetailDto::~OAIExpenseClaimDetailDto() {}

void OAIExpenseClaimDetailDto::initializeModel() {

    m_amount_in_claim_curr_isSet = false;
    m_amount_in_claim_curr_isValid = false;

    m_approval_status_isSet = false;
    m_approval_status_isValid = false;

    m_approval_status_text_isSet = false;
    m_approval_status_text_isValid = false;

    m_approver_isSet = false;
    m_approver_isValid = false;

    m_ar_reference_nbr_isSet = false;
    m_ar_reference_nbr_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_claim_amount_isSet = false;
    m_claim_amount_isValid = false;

    m_claim_detail_id_isSet = false;
    m_claim_detail_id_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_employee_part_isSet = false;
    m_employee_part_isValid = false;

    m_expense_account_isSet = false;
    m_expense_account_isValid = false;

    m_expense_item_isSet = false;
    m_expense_item_isValid = false;

    m_expense_subaccount_isSet = false;
    m_expense_subaccount_isValid = false;

    m_invoiceable_isSet = false;
    m_invoiceable_isValid = false;

    m_line_id_isSet = false;
    m_line_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_project_task_isSet = false;
    m_project_task_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_ref_nbr_isSet = false;
    m_ref_nbr_isValid = false;

    m_sales_account_isSet = false;
    m_sales_account_isValid = false;

    m_sales_subaccount_isSet = false;
    m_sales_subaccount_isValid = false;

    m_tax_category_isSet = false;
    m_tax_category_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;
}

void OAIExpenseClaimDetailDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpenseClaimDetailDto::fromJsonObject(QJsonObject json) {

    m_amount_in_claim_curr_isValid = ::OpenAPI::fromJsonValue(m_amount_in_claim_curr, json[QString("amountInClaimCurr")]);
    m_amount_in_claim_curr_isSet = !json[QString("amountInClaimCurr")].isNull() && m_amount_in_claim_curr_isValid;

    m_approval_status_isValid = ::OpenAPI::fromJsonValue(m_approval_status, json[QString("approvalStatus")]);
    m_approval_status_isSet = !json[QString("approvalStatus")].isNull() && m_approval_status_isValid;

    m_approval_status_text_isValid = ::OpenAPI::fromJsonValue(m_approval_status_text, json[QString("approvalStatusText")]);
    m_approval_status_text_isSet = !json[QString("approvalStatusText")].isNull() && m_approval_status_text_isValid;

    m_approver_isValid = ::OpenAPI::fromJsonValue(m_approver, json[QString("approver")]);
    m_approver_isSet = !json[QString("approver")].isNull() && m_approver_isValid;

    m_ar_reference_nbr_isValid = ::OpenAPI::fromJsonValue(m_ar_reference_nbr, json[QString("arReferenceNbr")]);
    m_ar_reference_nbr_isSet = !json[QString("arReferenceNbr")].isNull() && m_ar_reference_nbr_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_claim_amount_isValid = ::OpenAPI::fromJsonValue(m_claim_amount, json[QString("claimAmount")]);
    m_claim_amount_isSet = !json[QString("claimAmount")].isNull() && m_claim_amount_isValid;

    m_claim_detail_id_isValid = ::OpenAPI::fromJsonValue(m_claim_detail_id, json[QString("claimDetailId")]);
    m_claim_detail_id_isSet = !json[QString("claimDetailId")].isNull() && m_claim_detail_id_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_employee_part_isValid = ::OpenAPI::fromJsonValue(m_employee_part, json[QString("employeePart")]);
    m_employee_part_isSet = !json[QString("employeePart")].isNull() && m_employee_part_isValid;

    m_expense_account_isValid = ::OpenAPI::fromJsonValue(m_expense_account, json[QString("expenseAccount")]);
    m_expense_account_isSet = !json[QString("expenseAccount")].isNull() && m_expense_account_isValid;

    m_expense_item_isValid = ::OpenAPI::fromJsonValue(m_expense_item, json[QString("expenseItem")]);
    m_expense_item_isSet = !json[QString("expenseItem")].isNull() && m_expense_item_isValid;

    m_expense_subaccount_isValid = ::OpenAPI::fromJsonValue(m_expense_subaccount, json[QString("expenseSubaccount")]);
    m_expense_subaccount_isSet = !json[QString("expenseSubaccount")].isNull() && m_expense_subaccount_isValid;

    m_invoiceable_isValid = ::OpenAPI::fromJsonValue(m_invoiceable, json[QString("invoiceable")]);
    m_invoiceable_isSet = !json[QString("invoiceable")].isNull() && m_invoiceable_isValid;

    m_line_id_isValid = ::OpenAPI::fromJsonValue(m_line_id, json[QString("lineId")]);
    m_line_id_isSet = !json[QString("lineId")].isNull() && m_line_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_project_task_isValid = ::OpenAPI::fromJsonValue(m_project_task, json[QString("projectTask")]);
    m_project_task_isSet = !json[QString("projectTask")].isNull() && m_project_task_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_ref_nbr_isValid = ::OpenAPI::fromJsonValue(m_ref_nbr, json[QString("refNbr")]);
    m_ref_nbr_isSet = !json[QString("refNbr")].isNull() && m_ref_nbr_isValid;

    m_sales_account_isValid = ::OpenAPI::fromJsonValue(m_sales_account, json[QString("salesAccount")]);
    m_sales_account_isSet = !json[QString("salesAccount")].isNull() && m_sales_account_isValid;

    m_sales_subaccount_isValid = ::OpenAPI::fromJsonValue(m_sales_subaccount, json[QString("salesSubaccount")]);
    m_sales_subaccount_isSet = !json[QString("salesSubaccount")].isNull() && m_sales_subaccount_isValid;

    m_tax_category_isValid = ::OpenAPI::fromJsonValue(m_tax_category, json[QString("taxCategory")]);
    m_tax_category_isSet = !json[QString("taxCategory")].isNull() && m_tax_category_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("totalAmount")]);
    m_total_amount_isSet = !json[QString("totalAmount")].isNull() && m_total_amount_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;
}

QString OAIExpenseClaimDetailDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpenseClaimDetailDto::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_in_claim_curr_isSet) {
        obj.insert(QString("amountInClaimCurr"), ::OpenAPI::toJsonValue(m_amount_in_claim_curr));
    }
    if (m_approval_status_isSet) {
        obj.insert(QString("approvalStatus"), ::OpenAPI::toJsonValue(m_approval_status));
    }
    if (m_approval_status_text_isSet) {
        obj.insert(QString("approvalStatusText"), ::OpenAPI::toJsonValue(m_approval_status_text));
    }
    if (m_approver_isSet) {
        obj.insert(QString("approver"), ::OpenAPI::toJsonValue(m_approver));
    }
    if (m_ar_reference_nbr_isSet) {
        obj.insert(QString("arReferenceNbr"), ::OpenAPI::toJsonValue(m_ar_reference_nbr));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_claim_amount_isSet) {
        obj.insert(QString("claimAmount"), ::OpenAPI::toJsonValue(m_claim_amount));
    }
    if (m_claim_detail_id_isSet) {
        obj.insert(QString("claimDetailId"), ::OpenAPI::toJsonValue(m_claim_detail_id));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_employee_part_isSet) {
        obj.insert(QString("employeePart"), ::OpenAPI::toJsonValue(m_employee_part));
    }
    if (m_expense_account.isSet()) {
        obj.insert(QString("expenseAccount"), ::OpenAPI::toJsonValue(m_expense_account));
    }
    if (m_expense_item.isSet()) {
        obj.insert(QString("expenseItem"), ::OpenAPI::toJsonValue(m_expense_item));
    }
    if (m_expense_subaccount.isSet()) {
        obj.insert(QString("expenseSubaccount"), ::OpenAPI::toJsonValue(m_expense_subaccount));
    }
    if (m_invoiceable_isSet) {
        obj.insert(QString("invoiceable"), ::OpenAPI::toJsonValue(m_invoiceable));
    }
    if (m_line_id_isSet) {
        obj.insert(QString("lineId"), ::OpenAPI::toJsonValue(m_line_id));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_project_task.isSet()) {
        obj.insert(QString("projectTask"), ::OpenAPI::toJsonValue(m_project_task));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_ref_nbr_isSet) {
        obj.insert(QString("refNbr"), ::OpenAPI::toJsonValue(m_ref_nbr));
    }
    if (m_sales_account.isSet()) {
        obj.insert(QString("salesAccount"), ::OpenAPI::toJsonValue(m_sales_account));
    }
    if (m_sales_subaccount.isSet()) {
        obj.insert(QString("salesSubaccount"), ::OpenAPI::toJsonValue(m_sales_subaccount));
    }
    if (m_tax_category.isSet()) {
        obj.insert(QString("taxCategory"), ::OpenAPI::toJsonValue(m_tax_category));
    }
    if (m_total_amount_isSet) {
        obj.insert(QString("totalAmount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    if (m_unit_cost_isSet) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_uom_isSet) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    return obj;
}

double OAIExpenseClaimDetailDto::getAmountInClaimCurr() const {
    return m_amount_in_claim_curr;
}
void OAIExpenseClaimDetailDto::setAmountInClaimCurr(const double &amount_in_claim_curr) {
    m_amount_in_claim_curr = amount_in_claim_curr;
    m_amount_in_claim_curr_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_amount_in_claim_curr_Set() const{
    return m_amount_in_claim_curr_isSet;
}

bool OAIExpenseClaimDetailDto::is_amount_in_claim_curr_Valid() const{
    return m_amount_in_claim_curr_isValid;
}

QString OAIExpenseClaimDetailDto::getApprovalStatus() const {
    return m_approval_status;
}
void OAIExpenseClaimDetailDto::setApprovalStatus(const QString &approval_status) {
    m_approval_status = approval_status;
    m_approval_status_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_approval_status_Set() const{
    return m_approval_status_isSet;
}

bool OAIExpenseClaimDetailDto::is_approval_status_Valid() const{
    return m_approval_status_isValid;
}

QString OAIExpenseClaimDetailDto::getApprovalStatusText() const {
    return m_approval_status_text;
}
void OAIExpenseClaimDetailDto::setApprovalStatusText(const QString &approval_status_text) {
    m_approval_status_text = approval_status_text;
    m_approval_status_text_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_approval_status_text_Set() const{
    return m_approval_status_text_isSet;
}

bool OAIExpenseClaimDetailDto::is_approval_status_text_Valid() const{
    return m_approval_status_text_isValid;
}

QString OAIExpenseClaimDetailDto::getApprover() const {
    return m_approver;
}
void OAIExpenseClaimDetailDto::setApprover(const QString &approver) {
    m_approver = approver;
    m_approver_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_approver_Set() const{
    return m_approver_isSet;
}

bool OAIExpenseClaimDetailDto::is_approver_Valid() const{
    return m_approver_isValid;
}

QString OAIExpenseClaimDetailDto::getArReferenceNbr() const {
    return m_ar_reference_nbr;
}
void OAIExpenseClaimDetailDto::setArReferenceNbr(const QString &ar_reference_nbr) {
    m_ar_reference_nbr = ar_reference_nbr;
    m_ar_reference_nbr_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_ar_reference_nbr_Set() const{
    return m_ar_reference_nbr_isSet;
}

bool OAIExpenseClaimDetailDto::is_ar_reference_nbr_Valid() const{
    return m_ar_reference_nbr_isValid;
}

QList<OAIAttachmentDto> OAIExpenseClaimDetailDto::getAttachments() const {
    return m_attachments;
}
void OAIExpenseClaimDetailDto::setAttachments(const QList<OAIAttachmentDto> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIExpenseClaimDetailDto::is_attachments_Valid() const{
    return m_attachments_isValid;
}

OAIBranchInExpenseClaimDetailDto OAIExpenseClaimDetailDto::getBranch() const {
    return m_branch;
}
void OAIExpenseClaimDetailDto::setBranch(const OAIBranchInExpenseClaimDetailDto &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIExpenseClaimDetailDto::is_branch_Valid() const{
    return m_branch_isValid;
}

double OAIExpenseClaimDetailDto::getClaimAmount() const {
    return m_claim_amount;
}
void OAIExpenseClaimDetailDto::setClaimAmount(const double &claim_amount) {
    m_claim_amount = claim_amount;
    m_claim_amount_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_claim_amount_Set() const{
    return m_claim_amount_isSet;
}

bool OAIExpenseClaimDetailDto::is_claim_amount_Valid() const{
    return m_claim_amount_isValid;
}

qint32 OAIExpenseClaimDetailDto::getClaimDetailId() const {
    return m_claim_detail_id;
}
void OAIExpenseClaimDetailDto::setClaimDetailId(const qint32 &claim_detail_id) {
    m_claim_detail_id = claim_detail_id;
    m_claim_detail_id_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_claim_detail_id_Set() const{
    return m_claim_detail_id_isSet;
}

bool OAIExpenseClaimDetailDto::is_claim_detail_id_Valid() const{
    return m_claim_detail_id_isValid;
}

QString OAIExpenseClaimDetailDto::getCurrency() const {
    return m_currency;
}
void OAIExpenseClaimDetailDto::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIExpenseClaimDetailDto::is_currency_Valid() const{
    return m_currency_isValid;
}

OAICustomerInExpenseClaimDetailDto OAIExpenseClaimDetailDto::getCustomer() const {
    return m_customer;
}
void OAIExpenseClaimDetailDto::setCustomer(const OAICustomerInExpenseClaimDetailDto &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIExpenseClaimDetailDto::is_customer_Valid() const{
    return m_customer_isValid;
}

QDateTime OAIExpenseClaimDetailDto::getDate() const {
    return m_date;
}
void OAIExpenseClaimDetailDto::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAIExpenseClaimDetailDto::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIExpenseClaimDetailDto::getDescription() const {
    return m_description;
}
void OAIExpenseClaimDetailDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIExpenseClaimDetailDto::is_description_Valid() const{
    return m_description_isValid;
}

double OAIExpenseClaimDetailDto::getEmployeePart() const {
    return m_employee_part;
}
void OAIExpenseClaimDetailDto::setEmployeePart(const double &employee_part) {
    m_employee_part = employee_part;
    m_employee_part_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_employee_part_Set() const{
    return m_employee_part_isSet;
}

bool OAIExpenseClaimDetailDto::is_employee_part_Valid() const{
    return m_employee_part_isValid;
}

OAIExpenseAccountInExpenseClaimDetailDto OAIExpenseClaimDetailDto::getExpenseAccount() const {
    return m_expense_account;
}
void OAIExpenseClaimDetailDto::setExpenseAccount(const OAIExpenseAccountInExpenseClaimDetailDto &expense_account) {
    m_expense_account = expense_account;
    m_expense_account_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_expense_account_Set() const{
    return m_expense_account_isSet;
}

bool OAIExpenseClaimDetailDto::is_expense_account_Valid() const{
    return m_expense_account_isValid;
}

OAIExpenseItemInExpenseClaimDetailDto OAIExpenseClaimDetailDto::getExpenseItem() const {
    return m_expense_item;
}
void OAIExpenseClaimDetailDto::setExpenseItem(const OAIExpenseItemInExpenseClaimDetailDto &expense_item) {
    m_expense_item = expense_item;
    m_expense_item_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_expense_item_Set() const{
    return m_expense_item_isSet;
}

bool OAIExpenseClaimDetailDto::is_expense_item_Valid() const{
    return m_expense_item_isValid;
}

OAIExpenseSubaccountInExpenseClaimDetailDto OAIExpenseClaimDetailDto::getExpenseSubaccount() const {
    return m_expense_subaccount;
}
void OAIExpenseClaimDetailDto::setExpenseSubaccount(const OAIExpenseSubaccountInExpenseClaimDetailDto &expense_subaccount) {
    m_expense_subaccount = expense_subaccount;
    m_expense_subaccount_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_expense_subaccount_Set() const{
    return m_expense_subaccount_isSet;
}

bool OAIExpenseClaimDetailDto::is_expense_subaccount_Valid() const{
    return m_expense_subaccount_isValid;
}

bool OAIExpenseClaimDetailDto::isInvoiceable() const {
    return m_invoiceable;
}
void OAIExpenseClaimDetailDto::setInvoiceable(const bool &invoiceable) {
    m_invoiceable = invoiceable;
    m_invoiceable_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_invoiceable_Set() const{
    return m_invoiceable_isSet;
}

bool OAIExpenseClaimDetailDto::is_invoiceable_Valid() const{
    return m_invoiceable_isValid;
}

QString OAIExpenseClaimDetailDto::getLineId() const {
    return m_line_id;
}
void OAIExpenseClaimDetailDto::setLineId(const QString &line_id) {
    m_line_id = line_id;
    m_line_id_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_line_id_Set() const{
    return m_line_id_isSet;
}

bool OAIExpenseClaimDetailDto::is_line_id_Valid() const{
    return m_line_id_isValid;
}

OAILocationInExpenseClaimDetailDto OAIExpenseClaimDetailDto::getLocation() const {
    return m_location;
}
void OAIExpenseClaimDetailDto::setLocation(const OAILocationInExpenseClaimDetailDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIExpenseClaimDetailDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIProjectInExpenseClaimDetailDto OAIExpenseClaimDetailDto::getProject() const {
    return m_project;
}
void OAIExpenseClaimDetailDto::setProject(const OAIProjectInExpenseClaimDetailDto &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_project_Set() const{
    return m_project_isSet;
}

bool OAIExpenseClaimDetailDto::is_project_Valid() const{
    return m_project_isValid;
}

OAIProjectTaskInExpenseClaimDetailDto OAIExpenseClaimDetailDto::getProjectTask() const {
    return m_project_task;
}
void OAIExpenseClaimDetailDto::setProjectTask(const OAIProjectTaskInExpenseClaimDetailDto &project_task) {
    m_project_task = project_task;
    m_project_task_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_project_task_Set() const{
    return m_project_task_isSet;
}

bool OAIExpenseClaimDetailDto::is_project_task_Valid() const{
    return m_project_task_isValid;
}

double OAIExpenseClaimDetailDto::getQuantity() const {
    return m_quantity;
}
void OAIExpenseClaimDetailDto::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIExpenseClaimDetailDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIExpenseClaimDetailDto::getRefNbr() const {
    return m_ref_nbr;
}
void OAIExpenseClaimDetailDto::setRefNbr(const QString &ref_nbr) {
    m_ref_nbr = ref_nbr;
    m_ref_nbr_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_ref_nbr_Set() const{
    return m_ref_nbr_isSet;
}

bool OAIExpenseClaimDetailDto::is_ref_nbr_Valid() const{
    return m_ref_nbr_isValid;
}

OAISalesAccountInExpenseClaimDetailDto OAIExpenseClaimDetailDto::getSalesAccount() const {
    return m_sales_account;
}
void OAIExpenseClaimDetailDto::setSalesAccount(const OAISalesAccountInExpenseClaimDetailDto &sales_account) {
    m_sales_account = sales_account;
    m_sales_account_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_sales_account_Set() const{
    return m_sales_account_isSet;
}

bool OAIExpenseClaimDetailDto::is_sales_account_Valid() const{
    return m_sales_account_isValid;
}

OAISalesSubaccountInExpenseClaimDetailDto OAIExpenseClaimDetailDto::getSalesSubaccount() const {
    return m_sales_subaccount;
}
void OAIExpenseClaimDetailDto::setSalesSubaccount(const OAISalesSubaccountInExpenseClaimDetailDto &sales_subaccount) {
    m_sales_subaccount = sales_subaccount;
    m_sales_subaccount_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_sales_subaccount_Set() const{
    return m_sales_subaccount_isSet;
}

bool OAIExpenseClaimDetailDto::is_sales_subaccount_Valid() const{
    return m_sales_subaccount_isValid;
}

OAITaxCategoryInExpenseClaimDetailDto OAIExpenseClaimDetailDto::getTaxCategory() const {
    return m_tax_category;
}
void OAIExpenseClaimDetailDto::setTaxCategory(const OAITaxCategoryInExpenseClaimDetailDto &tax_category) {
    m_tax_category = tax_category;
    m_tax_category_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_tax_category_Set() const{
    return m_tax_category_isSet;
}

bool OAIExpenseClaimDetailDto::is_tax_category_Valid() const{
    return m_tax_category_isValid;
}

double OAIExpenseClaimDetailDto::getTotalAmount() const {
    return m_total_amount;
}
void OAIExpenseClaimDetailDto::setTotalAmount(const double &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAIExpenseClaimDetailDto::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

double OAIExpenseClaimDetailDto::getUnitCost() const {
    return m_unit_cost;
}
void OAIExpenseClaimDetailDto::setUnitCost(const double &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAIExpenseClaimDetailDto::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

QString OAIExpenseClaimDetailDto::getUom() const {
    return m_uom;
}
void OAIExpenseClaimDetailDto::setUom(const QString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAIExpenseClaimDetailDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAIExpenseClaimDetailDto::is_uom_Valid() const{
    return m_uom_isValid;
}

bool OAIExpenseClaimDetailDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_in_claim_curr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval_status_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approver_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ar_reference_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_claim_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_claim_detail_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoiceable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpenseClaimDetailDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
