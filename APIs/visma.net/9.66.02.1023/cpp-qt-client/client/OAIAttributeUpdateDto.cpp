/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributeUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributeUpdateDto::OAIAttributeUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributeUpdateDto::OAIAttributeUpdateDto() {
    this->initializeModel();
}

OAIAttributeUpdateDto::~OAIAttributeUpdateDto() {}

void OAIAttributeUpdateDto::initializeModel() {

    m_attribute_id_isSet = false;
    m_attribute_id_isValid = false;

    m_control_type_isSet = false;
    m_control_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_entry_mask_isSet = false;
    m_entry_mask_isValid = false;

    m_internal_isSet = false;
    m_internal_isValid = false;

    m_reg_exp_isSet = false;
    m_reg_exp_isValid = false;
}

void OAIAttributeUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributeUpdateDto::fromJsonObject(QJsonObject json) {

    m_attribute_id_isValid = ::OpenAPI::fromJsonValue(m_attribute_id, json[QString("attributeID")]);
    m_attribute_id_isSet = !json[QString("attributeID")].isNull() && m_attribute_id_isValid;

    m_control_type_isValid = ::OpenAPI::fromJsonValue(m_control_type, json[QString("controlType")]);
    m_control_type_isSet = !json[QString("controlType")].isNull() && m_control_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_entry_mask_isValid = ::OpenAPI::fromJsonValue(m_entry_mask, json[QString("entryMask")]);
    m_entry_mask_isSet = !json[QString("entryMask")].isNull() && m_entry_mask_isValid;

    m_internal_isValid = ::OpenAPI::fromJsonValue(m_internal, json[QString("internal")]);
    m_internal_isSet = !json[QString("internal")].isNull() && m_internal_isValid;

    m_reg_exp_isValid = ::OpenAPI::fromJsonValue(m_reg_exp, json[QString("regExp")]);
    m_reg_exp_isSet = !json[QString("regExp")].isNull() && m_reg_exp_isValid;
}

QString OAIAttributeUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributeUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_id.isSet()) {
        obj.insert(QString("attributeID"), ::OpenAPI::toJsonValue(m_attribute_id));
    }
    if (m_control_type.isSet()) {
        obj.insert(QString("controlType"), ::OpenAPI::toJsonValue(m_control_type));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_entry_mask.isSet()) {
        obj.insert(QString("entryMask"), ::OpenAPI::toJsonValue(m_entry_mask));
    }
    if (m_internal.isSet()) {
        obj.insert(QString("internal"), ::OpenAPI::toJsonValue(m_internal));
    }
    if (m_reg_exp.isSet()) {
        obj.insert(QString("regExp"), ::OpenAPI::toJsonValue(m_reg_exp));
    }
    return obj;
}

OAIDtoValueOfString OAIAttributeUpdateDto::getAttributeId() const {
    return m_attribute_id;
}
void OAIAttributeUpdateDto::setAttributeId(const OAIDtoValueOfString &attribute_id) {
    m_attribute_id = attribute_id;
    m_attribute_id_isSet = true;
}

bool OAIAttributeUpdateDto::is_attribute_id_Set() const{
    return m_attribute_id_isSet;
}

bool OAIAttributeUpdateDto::is_attribute_id_Valid() const{
    return m_attribute_id_isValid;
}

OAIDtoValueOfAttributeControlType OAIAttributeUpdateDto::getControlType() const {
    return m_control_type;
}
void OAIAttributeUpdateDto::setControlType(const OAIDtoValueOfAttributeControlType &control_type) {
    m_control_type = control_type;
    m_control_type_isSet = true;
}

bool OAIAttributeUpdateDto::is_control_type_Set() const{
    return m_control_type_isSet;
}

bool OAIAttributeUpdateDto::is_control_type_Valid() const{
    return m_control_type_isValid;
}

OAIDtoValueOfString OAIAttributeUpdateDto::getDescription() const {
    return m_description;
}
void OAIAttributeUpdateDto::setDescription(const OAIDtoValueOfString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAttributeUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAttributeUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIAttributeDetailUpdateDto> OAIAttributeUpdateDto::getDetails() const {
    return m_details;
}
void OAIAttributeUpdateDto::setDetails(const QList<OAIAttributeDetailUpdateDto> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIAttributeUpdateDto::is_details_Set() const{
    return m_details_isSet;
}

bool OAIAttributeUpdateDto::is_details_Valid() const{
    return m_details_isValid;
}

OAIDtoValueOfString OAIAttributeUpdateDto::getEntryMask() const {
    return m_entry_mask;
}
void OAIAttributeUpdateDto::setEntryMask(const OAIDtoValueOfString &entry_mask) {
    m_entry_mask = entry_mask;
    m_entry_mask_isSet = true;
}

bool OAIAttributeUpdateDto::is_entry_mask_Set() const{
    return m_entry_mask_isSet;
}

bool OAIAttributeUpdateDto::is_entry_mask_Valid() const{
    return m_entry_mask_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIAttributeUpdateDto::getInternal() const {
    return m_internal;
}
void OAIAttributeUpdateDto::setInternal(const OAIDtoValueOfNullableOfBoolean &internal) {
    m_internal = internal;
    m_internal_isSet = true;
}

bool OAIAttributeUpdateDto::is_internal_Set() const{
    return m_internal_isSet;
}

bool OAIAttributeUpdateDto::is_internal_Valid() const{
    return m_internal_isValid;
}

OAIDtoValueOfString OAIAttributeUpdateDto::getRegExp() const {
    return m_reg_exp;
}
void OAIAttributeUpdateDto::setRegExp(const OAIDtoValueOfString &reg_exp) {
    m_reg_exp = reg_exp;
    m_reg_exp_isSet = true;
}

bool OAIAttributeUpdateDto::is_reg_exp_Set() const{
    return m_reg_exp_isSet;
}

bool OAIAttributeUpdateDto::is_reg_exp_Valid() const{
    return m_reg_exp_isValid;
}

bool OAIAttributeUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_mask.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reg_exp.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributeUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
