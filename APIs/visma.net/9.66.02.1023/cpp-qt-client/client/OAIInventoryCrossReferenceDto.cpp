/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryCrossReferenceDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryCrossReferenceDto::OAIInventoryCrossReferenceDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryCrossReferenceDto::OAIInventoryCrossReferenceDto() {
    this->initializeModel();
}

OAIInventoryCrossReferenceDto::~OAIInventoryCrossReferenceDto() {}

void OAIInventoryCrossReferenceDto::initializeModel() {

    m_alternate_id_isSet = false;
    m_alternate_id_isValid = false;

    m_alternate_type_isSet = false;
    m_alternate_type_isValid = false;

    m_b_account_isSet = false;
    m_b_account_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;
}

void OAIInventoryCrossReferenceDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryCrossReferenceDto::fromJsonObject(QJsonObject json) {

    m_alternate_id_isValid = ::OpenAPI::fromJsonValue(m_alternate_id, json[QString("alternateID")]);
    m_alternate_id_isSet = !json[QString("alternateID")].isNull() && m_alternate_id_isValid;

    m_alternate_type_isValid = ::OpenAPI::fromJsonValue(m_alternate_type, json[QString("alternateType")]);
    m_alternate_type_isSet = !json[QString("alternateType")].isNull() && m_alternate_type_isValid;

    m_b_account_isValid = ::OpenAPI::fromJsonValue(m_b_account, json[QString("bAccount")]);
    m_b_account_isSet = !json[QString("bAccount")].isNull() && m_b_account_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;
}

QString OAIInventoryCrossReferenceDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryCrossReferenceDto::asJsonObject() const {
    QJsonObject obj;
    if (m_alternate_id_isSet) {
        obj.insert(QString("alternateID"), ::OpenAPI::toJsonValue(m_alternate_id));
    }
    if (m_alternate_type_isSet) {
        obj.insert(QString("alternateType"), ::OpenAPI::toJsonValue(m_alternate_type));
    }
    if (m_b_account.isSet()) {
        obj.insert(QString("bAccount"), ::OpenAPI::toJsonValue(m_b_account));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_uom_isSet) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    return obj;
}

QString OAIInventoryCrossReferenceDto::getAlternateId() const {
    return m_alternate_id;
}
void OAIInventoryCrossReferenceDto::setAlternateId(const QString &alternate_id) {
    m_alternate_id = alternate_id;
    m_alternate_id_isSet = true;
}

bool OAIInventoryCrossReferenceDto::is_alternate_id_Set() const{
    return m_alternate_id_isSet;
}

bool OAIInventoryCrossReferenceDto::is_alternate_id_Valid() const{
    return m_alternate_id_isValid;
}

QString OAIInventoryCrossReferenceDto::getAlternateType() const {
    return m_alternate_type;
}
void OAIInventoryCrossReferenceDto::setAlternateType(const QString &alternate_type) {
    m_alternate_type = alternate_type;
    m_alternate_type_isSet = true;
}

bool OAIInventoryCrossReferenceDto::is_alternate_type_Set() const{
    return m_alternate_type_isSet;
}

bool OAIInventoryCrossReferenceDto::is_alternate_type_Valid() const{
    return m_alternate_type_isValid;
}

OAIBAccountInInventoryCrossReferenceDto OAIInventoryCrossReferenceDto::getBAccount() const {
    return m_b_account;
}
void OAIInventoryCrossReferenceDto::setBAccount(const OAIBAccountInInventoryCrossReferenceDto &b_account) {
    m_b_account = b_account;
    m_b_account_isSet = true;
}

bool OAIInventoryCrossReferenceDto::is_b_account_Set() const{
    return m_b_account_isSet;
}

bool OAIInventoryCrossReferenceDto::is_b_account_Valid() const{
    return m_b_account_isValid;
}

QString OAIInventoryCrossReferenceDto::getDescription() const {
    return m_description;
}
void OAIInventoryCrossReferenceDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInventoryCrossReferenceDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInventoryCrossReferenceDto::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIInventoryCrossReferenceDto::getUom() const {
    return m_uom;
}
void OAIInventoryCrossReferenceDto::setUom(const QString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAIInventoryCrossReferenceDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAIInventoryCrossReferenceDto::is_uom_Valid() const{
    return m_uom_isValid;
}

bool OAIInventoryCrossReferenceDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryCrossReferenceDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
