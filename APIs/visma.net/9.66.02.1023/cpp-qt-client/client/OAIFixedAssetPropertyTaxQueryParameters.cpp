/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFixedAssetPropertyTaxQueryParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFixedAssetPropertyTaxQueryParameters::OAIFixedAssetPropertyTaxQueryParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFixedAssetPropertyTaxQueryParameters::OAIFixedAssetPropertyTaxQueryParameters() {
    this->initializeModel();
}

OAIFixedAssetPropertyTaxQueryParameters::~OAIFixedAssetPropertyTaxQueryParameters() {}

void OAIFixedAssetPropertyTaxQueryParameters::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_property_tax_id_isSet = false;
    m_property_tax_id_isValid = false;
}

void OAIFixedAssetPropertyTaxQueryParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFixedAssetPropertyTaxQueryParameters::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("pageNumber")]);
    m_page_number_isSet = !json[QString("pageNumber")].isNull() && m_page_number_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_property_tax_id_isValid = ::OpenAPI::fromJsonValue(m_property_tax_id, json[QString("propertyTaxID")]);
    m_property_tax_id_isSet = !json[QString("propertyTaxID")].isNull() && m_property_tax_id_isValid;
}

QString OAIFixedAssetPropertyTaxQueryParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFixedAssetPropertyTaxQueryParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("pageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_property_tax_id_isSet) {
        obj.insert(QString("propertyTaxID"), ::OpenAPI::toJsonValue(m_property_tax_id));
    }
    return obj;
}

bool OAIFixedAssetPropertyTaxQueryParameters::isActive() const {
    return m_active;
}
void OAIFixedAssetPropertyTaxQueryParameters::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIFixedAssetPropertyTaxQueryParameters::is_active_Set() const{
    return m_active_isSet;
}

bool OAIFixedAssetPropertyTaxQueryParameters::is_active_Valid() const{
    return m_active_isValid;
}

qint32 OAIFixedAssetPropertyTaxQueryParameters::getPageNumber() const {
    return m_page_number;
}
void OAIFixedAssetPropertyTaxQueryParameters::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIFixedAssetPropertyTaxQueryParameters::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIFixedAssetPropertyTaxQueryParameters::is_page_number_Valid() const{
    return m_page_number_isValid;
}

qint32 OAIFixedAssetPropertyTaxQueryParameters::getPageSize() const {
    return m_page_size;
}
void OAIFixedAssetPropertyTaxQueryParameters::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIFixedAssetPropertyTaxQueryParameters::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIFixedAssetPropertyTaxQueryParameters::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIFixedAssetPropertyTaxQueryParameters::getPropertyTaxId() const {
    return m_property_tax_id;
}
void OAIFixedAssetPropertyTaxQueryParameters::setPropertyTaxId(const QString &property_tax_id) {
    m_property_tax_id = property_tax_id;
    m_property_tax_id_isSet = true;
}

bool OAIFixedAssetPropertyTaxQueryParameters::is_property_tax_id_Set() const{
    return m_property_tax_id_isSet;
}

bool OAIFixedAssetPropertyTaxQueryParameters::is_property_tax_id_Valid() const{
    return m_property_tax_id_isValid;
}

bool OAIFixedAssetPropertyTaxQueryParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFixedAssetPropertyTaxQueryParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
