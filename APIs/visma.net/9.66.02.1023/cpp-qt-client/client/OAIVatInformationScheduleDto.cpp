/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVatInformationScheduleDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVatInformationScheduleDto::OAIVatInformationScheduleDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVatInformationScheduleDto::OAIVatInformationScheduleDto() {
    this->initializeModel();
}

OAIVatInformationScheduleDto::~OAIVatInformationScheduleDto() {}

void OAIVatInformationScheduleDto::initializeModel() {

    m_deductible_vat_rate_isSet = false;
    m_deductible_vat_rate_isValid = false;

    m_group_type_isSet = false;
    m_group_type_isValid = false;

    m_max_taxable_amt_isSet = false;
    m_max_taxable_amt_isValid = false;

    m_min_taxable_amt_isSet = false;
    m_min_taxable_amt_isValid = false;

    m_reporting_group_isSet = false;
    m_reporting_group_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_vat_rate_isSet = false;
    m_vat_rate_isValid = false;
}

void OAIVatInformationScheduleDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVatInformationScheduleDto::fromJsonObject(QJsonObject json) {

    m_deductible_vat_rate_isValid = ::OpenAPI::fromJsonValue(m_deductible_vat_rate, json[QString("deductibleVatRate")]);
    m_deductible_vat_rate_isSet = !json[QString("deductibleVatRate")].isNull() && m_deductible_vat_rate_isValid;

    m_group_type_isValid = ::OpenAPI::fromJsonValue(m_group_type, json[QString("groupType")]);
    m_group_type_isSet = !json[QString("groupType")].isNull() && m_group_type_isValid;

    m_max_taxable_amt_isValid = ::OpenAPI::fromJsonValue(m_max_taxable_amt, json[QString("maxTaxableAmt")]);
    m_max_taxable_amt_isSet = !json[QString("maxTaxableAmt")].isNull() && m_max_taxable_amt_isValid;

    m_min_taxable_amt_isValid = ::OpenAPI::fromJsonValue(m_min_taxable_amt, json[QString("minTaxableAmt")]);
    m_min_taxable_amt_isSet = !json[QString("minTaxableAmt")].isNull() && m_min_taxable_amt_isValid;

    m_reporting_group_isValid = ::OpenAPI::fromJsonValue(m_reporting_group, json[QString("reportingGroup")]);
    m_reporting_group_isSet = !json[QString("reportingGroup")].isNull() && m_reporting_group_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_vat_rate_isValid = ::OpenAPI::fromJsonValue(m_vat_rate, json[QString("vatRate")]);
    m_vat_rate_isSet = !json[QString("vatRate")].isNull() && m_vat_rate_isValid;
}

QString OAIVatInformationScheduleDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVatInformationScheduleDto::asJsonObject() const {
    QJsonObject obj;
    if (m_deductible_vat_rate_isSet) {
        obj.insert(QString("deductibleVatRate"), ::OpenAPI::toJsonValue(m_deductible_vat_rate));
    }
    if (m_group_type_isSet) {
        obj.insert(QString("groupType"), ::OpenAPI::toJsonValue(m_group_type));
    }
    if (m_max_taxable_amt_isSet) {
        obj.insert(QString("maxTaxableAmt"), ::OpenAPI::toJsonValue(m_max_taxable_amt));
    }
    if (m_min_taxable_amt_isSet) {
        obj.insert(QString("minTaxableAmt"), ::OpenAPI::toJsonValue(m_min_taxable_amt));
    }
    if (m_reporting_group_isSet) {
        obj.insert(QString("reportingGroup"), ::OpenAPI::toJsonValue(m_reporting_group));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_vat_rate_isSet) {
        obj.insert(QString("vatRate"), ::OpenAPI::toJsonValue(m_vat_rate));
    }
    return obj;
}

double OAIVatInformationScheduleDto::getDeductibleVatRate() const {
    return m_deductible_vat_rate;
}
void OAIVatInformationScheduleDto::setDeductibleVatRate(const double &deductible_vat_rate) {
    m_deductible_vat_rate = deductible_vat_rate;
    m_deductible_vat_rate_isSet = true;
}

bool OAIVatInformationScheduleDto::is_deductible_vat_rate_Set() const{
    return m_deductible_vat_rate_isSet;
}

bool OAIVatInformationScheduleDto::is_deductible_vat_rate_Valid() const{
    return m_deductible_vat_rate_isValid;
}

QString OAIVatInformationScheduleDto::getGroupType() const {
    return m_group_type;
}
void OAIVatInformationScheduleDto::setGroupType(const QString &group_type) {
    m_group_type = group_type;
    m_group_type_isSet = true;
}

bool OAIVatInformationScheduleDto::is_group_type_Set() const{
    return m_group_type_isSet;
}

bool OAIVatInformationScheduleDto::is_group_type_Valid() const{
    return m_group_type_isValid;
}

double OAIVatInformationScheduleDto::getMaxTaxableAmt() const {
    return m_max_taxable_amt;
}
void OAIVatInformationScheduleDto::setMaxTaxableAmt(const double &max_taxable_amt) {
    m_max_taxable_amt = max_taxable_amt;
    m_max_taxable_amt_isSet = true;
}

bool OAIVatInformationScheduleDto::is_max_taxable_amt_Set() const{
    return m_max_taxable_amt_isSet;
}

bool OAIVatInformationScheduleDto::is_max_taxable_amt_Valid() const{
    return m_max_taxable_amt_isValid;
}

double OAIVatInformationScheduleDto::getMinTaxableAmt() const {
    return m_min_taxable_amt;
}
void OAIVatInformationScheduleDto::setMinTaxableAmt(const double &min_taxable_amt) {
    m_min_taxable_amt = min_taxable_amt;
    m_min_taxable_amt_isSet = true;
}

bool OAIVatInformationScheduleDto::is_min_taxable_amt_Set() const{
    return m_min_taxable_amt_isSet;
}

bool OAIVatInformationScheduleDto::is_min_taxable_amt_Valid() const{
    return m_min_taxable_amt_isValid;
}

QString OAIVatInformationScheduleDto::getReportingGroup() const {
    return m_reporting_group;
}
void OAIVatInformationScheduleDto::setReportingGroup(const QString &reporting_group) {
    m_reporting_group = reporting_group;
    m_reporting_group_isSet = true;
}

bool OAIVatInformationScheduleDto::is_reporting_group_Set() const{
    return m_reporting_group_isSet;
}

bool OAIVatInformationScheduleDto::is_reporting_group_Valid() const{
    return m_reporting_group_isValid;
}

QDateTime OAIVatInformationScheduleDto::getStartDate() const {
    return m_start_date;
}
void OAIVatInformationScheduleDto::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIVatInformationScheduleDto::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIVatInformationScheduleDto::is_start_date_Valid() const{
    return m_start_date_isValid;
}

double OAIVatInformationScheduleDto::getVatRate() const {
    return m_vat_rate;
}
void OAIVatInformationScheduleDto::setVatRate(const double &vat_rate) {
    m_vat_rate = vat_rate;
    m_vat_rate_isSet = true;
}

bool OAIVatInformationScheduleDto::is_vat_rate_Set() const{
    return m_vat_rate_isSet;
}

bool OAIVatInformationScheduleDto::is_vat_rate_Valid() const{
    return m_vat_rate_isValid;
}

bool OAIVatInformationScheduleDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deductible_vat_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_taxable_amt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_taxable_amt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporting_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVatInformationScheduleDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
