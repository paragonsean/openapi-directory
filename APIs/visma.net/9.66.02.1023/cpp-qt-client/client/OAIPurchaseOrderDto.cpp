/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseOrderDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseOrderDto::OAIPurchaseOrderDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseOrderDto::OAIPurchaseOrderDto() {
    this->initializeModel();
}

OAIPurchaseOrderDto::~OAIPurchaseOrderDto() {}

void OAIPurchaseOrderDto::initializeModel() {

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_control_total_isSet = false;
    m_control_total_isValid = false;

    m_control_total_in_base_currency_isSet = false;
    m_control_total_in_base_currency_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discount_details_isSet = false;
    m_discount_details_isValid = false;

    m_dont_email_isSet = false;
    m_dont_email_isValid = false;

    m_dont_print_isSet = false;
    m_dont_print_isValid = false;

    m_emailed_isSet = false;
    m_emailed_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_fob_point_isSet = false;
    m_fob_point_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_line_total_isSet = false;
    m_line_total_isValid = false;

    m_line_total_in_base_currency_isSet = false;
    m_line_total_in_base_currency_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_open_balance_isSet = false;
    m_open_balance_isValid = false;

    m_open_quantity_isSet = false;
    m_open_quantity_isValid = false;

    m_order_nbr_isSet = false;
    m_order_nbr_isValid = false;

    m_order_total_isSet = false;
    m_order_total_isValid = false;

    m_order_total_in_base_currency_isSet = false;
    m_order_total_in_base_currency_isValid = false;

    m_order_type_isSet = false;
    m_order_type_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_payment_ref_nbr_isSet = false;
    m_payment_ref_nbr_isValid = false;

    m_printed_isSet = false;
    m_printed_isValid = false;

    m_promised_on_isSet = false;
    m_promised_on_isValid = false;

    m_purchase_receipts_isSet = false;
    m_purchase_receipts_isValid = false;

    m_remit_address_isSet = false;
    m_remit_address_isValid = false;

    m_remit_contact_isSet = false;
    m_remit_contact_isValid = false;

    m_requisition_ref_nbr_isSet = false;
    m_requisition_ref_nbr_isValid = false;

    m_sales_order_nbr_isSet = false;
    m_sales_order_nbr_isValid = false;

    m_sales_order_type_isSet = false;
    m_sales_order_type_isValid = false;

    m_ship_terms_isSet = false;
    m_ship_terms_isValid = false;

    m_ship_to_isSet = false;
    m_ship_to_isValid = false;

    m_ship_via_isSet = false;
    m_ship_via_isValid = false;

    m_shipping_address_isSet = false;
    m_shipping_address_isValid = false;

    m_shipping_contact_isSet = false;
    m_shipping_contact_isValid = false;

    m_shipping_destination_type_isSet = false;
    m_shipping_destination_type_isValid = false;

    m_shipping_location_isSet = false;
    m_shipping_location_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supplier_isSet = false;
    m_supplier_isValid = false;

    m_supplier_ref_isSet = false;
    m_supplier_ref_isValid = false;

    m_supplier_vat_zone_isSet = false;
    m_supplier_vat_zone_isValid = false;

    m_tax_details_isSet = false;
    m_tax_details_isValid = false;

    m_tax_total_isSet = false;
    m_tax_total_isValid = false;

    m_tax_total_in_base_currency_isSet = false;
    m_tax_total_in_base_currency_isValid = false;

    m_terms_isSet = false;
    m_terms_isValid = false;

    m_vat_exempt_total_isSet = false;
    m_vat_exempt_total_isValid = false;

    m_vat_exempt_total_in_base_currency_isSet = false;
    m_vat_exempt_total_in_base_currency_isValid = false;

    m_warehouse_isSet = false;
    m_warehouse_isValid = false;

    m_workgroup_id_isSet = false;
    m_workgroup_id_isValid = false;
}

void OAIPurchaseOrderDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseOrderDto::fromJsonObject(QJsonObject json) {

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_control_total_isValid = ::OpenAPI::fromJsonValue(m_control_total, json[QString("controlTotal")]);
    m_control_total_isSet = !json[QString("controlTotal")].isNull() && m_control_total_isValid;

    m_control_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_control_total_in_base_currency, json[QString("controlTotalInBaseCurrency")]);
    m_control_total_in_base_currency_isSet = !json[QString("controlTotalInBaseCurrency")].isNull() && m_control_total_in_base_currency_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discount_details_isValid = ::OpenAPI::fromJsonValue(m_discount_details, json[QString("discountDetails")]);
    m_discount_details_isSet = !json[QString("discountDetails")].isNull() && m_discount_details_isValid;

    m_dont_email_isValid = ::OpenAPI::fromJsonValue(m_dont_email, json[QString("dontEmail")]);
    m_dont_email_isSet = !json[QString("dontEmail")].isNull() && m_dont_email_isValid;

    m_dont_print_isValid = ::OpenAPI::fromJsonValue(m_dont_print, json[QString("dontPrint")]);
    m_dont_print_isSet = !json[QString("dontPrint")].isNull() && m_dont_print_isValid;

    m_emailed_isValid = ::OpenAPI::fromJsonValue(m_emailed, json[QString("emailed")]);
    m_emailed_isSet = !json[QString("emailed")].isNull() && m_emailed_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("exchangeRate")]);
    m_exchange_rate_isSet = !json[QString("exchangeRate")].isNull() && m_exchange_rate_isValid;

    m_fob_point_isValid = ::OpenAPI::fromJsonValue(m_fob_point, json[QString("fobPoint")]);
    m_fob_point_isSet = !json[QString("fobPoint")].isNull() && m_fob_point_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_line_total_isValid = ::OpenAPI::fromJsonValue(m_line_total, json[QString("lineTotal")]);
    m_line_total_isSet = !json[QString("lineTotal")].isNull() && m_line_total_isValid;

    m_line_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_line_total_in_base_currency, json[QString("lineTotalInBaseCurrency")]);
    m_line_total_in_base_currency_isSet = !json[QString("lineTotalInBaseCurrency")].isNull() && m_line_total_in_base_currency_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_open_balance_isValid = ::OpenAPI::fromJsonValue(m_open_balance, json[QString("openBalance")]);
    m_open_balance_isSet = !json[QString("openBalance")].isNull() && m_open_balance_isValid;

    m_open_quantity_isValid = ::OpenAPI::fromJsonValue(m_open_quantity, json[QString("openQuantity")]);
    m_open_quantity_isSet = !json[QString("openQuantity")].isNull() && m_open_quantity_isValid;

    m_order_nbr_isValid = ::OpenAPI::fromJsonValue(m_order_nbr, json[QString("orderNbr")]);
    m_order_nbr_isSet = !json[QString("orderNbr")].isNull() && m_order_nbr_isValid;

    m_order_total_isValid = ::OpenAPI::fromJsonValue(m_order_total, json[QString("orderTotal")]);
    m_order_total_isSet = !json[QString("orderTotal")].isNull() && m_order_total_isValid;

    m_order_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_order_total_in_base_currency, json[QString("orderTotalInBaseCurrency")]);
    m_order_total_in_base_currency_isSet = !json[QString("orderTotalInBaseCurrency")].isNull() && m_order_total_in_base_currency_isValid;

    m_order_type_isValid = ::OpenAPI::fromJsonValue(m_order_type, json[QString("orderType")]);
    m_order_type_isSet = !json[QString("orderType")].isNull() && m_order_type_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_payment_ref_nbr_isValid = ::OpenAPI::fromJsonValue(m_payment_ref_nbr, json[QString("paymentRefNbr")]);
    m_payment_ref_nbr_isSet = !json[QString("paymentRefNbr")].isNull() && m_payment_ref_nbr_isValid;

    m_printed_isValid = ::OpenAPI::fromJsonValue(m_printed, json[QString("printed")]);
    m_printed_isSet = !json[QString("printed")].isNull() && m_printed_isValid;

    m_promised_on_isValid = ::OpenAPI::fromJsonValue(m_promised_on, json[QString("promisedOn")]);
    m_promised_on_isSet = !json[QString("promisedOn")].isNull() && m_promised_on_isValid;

    m_purchase_receipts_isValid = ::OpenAPI::fromJsonValue(m_purchase_receipts, json[QString("purchaseReceipts")]);
    m_purchase_receipts_isSet = !json[QString("purchaseReceipts")].isNull() && m_purchase_receipts_isValid;

    m_remit_address_isValid = ::OpenAPI::fromJsonValue(m_remit_address, json[QString("remitAddress")]);
    m_remit_address_isSet = !json[QString("remitAddress")].isNull() && m_remit_address_isValid;

    m_remit_contact_isValid = ::OpenAPI::fromJsonValue(m_remit_contact, json[QString("remitContact")]);
    m_remit_contact_isSet = !json[QString("remitContact")].isNull() && m_remit_contact_isValid;

    m_requisition_ref_nbr_isValid = ::OpenAPI::fromJsonValue(m_requisition_ref_nbr, json[QString("requisitionRefNbr")]);
    m_requisition_ref_nbr_isSet = !json[QString("requisitionRefNbr")].isNull() && m_requisition_ref_nbr_isValid;

    m_sales_order_nbr_isValid = ::OpenAPI::fromJsonValue(m_sales_order_nbr, json[QString("salesOrderNbr")]);
    m_sales_order_nbr_isSet = !json[QString("salesOrderNbr")].isNull() && m_sales_order_nbr_isValid;

    m_sales_order_type_isValid = ::OpenAPI::fromJsonValue(m_sales_order_type, json[QString("salesOrderType")]);
    m_sales_order_type_isSet = !json[QString("salesOrderType")].isNull() && m_sales_order_type_isValid;

    m_ship_terms_isValid = ::OpenAPI::fromJsonValue(m_ship_terms, json[QString("shipTerms")]);
    m_ship_terms_isSet = !json[QString("shipTerms")].isNull() && m_ship_terms_isValid;

    m_ship_to_isValid = ::OpenAPI::fromJsonValue(m_ship_to, json[QString("shipTo")]);
    m_ship_to_isSet = !json[QString("shipTo")].isNull() && m_ship_to_isValid;

    m_ship_via_isValid = ::OpenAPI::fromJsonValue(m_ship_via, json[QString("shipVia")]);
    m_ship_via_isSet = !json[QString("shipVia")].isNull() && m_ship_via_isValid;

    m_shipping_address_isValid = ::OpenAPI::fromJsonValue(m_shipping_address, json[QString("shippingAddress")]);
    m_shipping_address_isSet = !json[QString("shippingAddress")].isNull() && m_shipping_address_isValid;

    m_shipping_contact_isValid = ::OpenAPI::fromJsonValue(m_shipping_contact, json[QString("shippingContact")]);
    m_shipping_contact_isSet = !json[QString("shippingContact")].isNull() && m_shipping_contact_isValid;

    m_shipping_destination_type_isValid = ::OpenAPI::fromJsonValue(m_shipping_destination_type, json[QString("shippingDestinationType")]);
    m_shipping_destination_type_isSet = !json[QString("shippingDestinationType")].isNull() && m_shipping_destination_type_isValid;

    m_shipping_location_isValid = ::OpenAPI::fromJsonValue(m_shipping_location, json[QString("shippingLocation")]);
    m_shipping_location_isSet = !json[QString("shippingLocation")].isNull() && m_shipping_location_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supplier_isValid = ::OpenAPI::fromJsonValue(m_supplier, json[QString("supplier")]);
    m_supplier_isSet = !json[QString("supplier")].isNull() && m_supplier_isValid;

    m_supplier_ref_isValid = ::OpenAPI::fromJsonValue(m_supplier_ref, json[QString("supplierRef")]);
    m_supplier_ref_isSet = !json[QString("supplierRef")].isNull() && m_supplier_ref_isValid;

    m_supplier_vat_zone_isValid = ::OpenAPI::fromJsonValue(m_supplier_vat_zone, json[QString("supplierVatZone")]);
    m_supplier_vat_zone_isSet = !json[QString("supplierVatZone")].isNull() && m_supplier_vat_zone_isValid;

    m_tax_details_isValid = ::OpenAPI::fromJsonValue(m_tax_details, json[QString("taxDetails")]);
    m_tax_details_isSet = !json[QString("taxDetails")].isNull() && m_tax_details_isValid;

    m_tax_total_isValid = ::OpenAPI::fromJsonValue(m_tax_total, json[QString("taxTotal")]);
    m_tax_total_isSet = !json[QString("taxTotal")].isNull() && m_tax_total_isValid;

    m_tax_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_tax_total_in_base_currency, json[QString("taxTotalInBaseCurrency")]);
    m_tax_total_in_base_currency_isSet = !json[QString("taxTotalInBaseCurrency")].isNull() && m_tax_total_in_base_currency_isValid;

    m_terms_isValid = ::OpenAPI::fromJsonValue(m_terms, json[QString("terms")]);
    m_terms_isSet = !json[QString("terms")].isNull() && m_terms_isValid;

    m_vat_exempt_total_isValid = ::OpenAPI::fromJsonValue(m_vat_exempt_total, json[QString("vatExemptTotal")]);
    m_vat_exempt_total_isSet = !json[QString("vatExemptTotal")].isNull() && m_vat_exempt_total_isValid;

    m_vat_exempt_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_vat_exempt_total_in_base_currency, json[QString("vatExemptTotalInBaseCurrency")]);
    m_vat_exempt_total_in_base_currency_isSet = !json[QString("vatExemptTotalInBaseCurrency")].isNull() && m_vat_exempt_total_in_base_currency_isValid;

    m_warehouse_isValid = ::OpenAPI::fromJsonValue(m_warehouse, json[QString("warehouse")]);
    m_warehouse_isSet = !json[QString("warehouse")].isNull() && m_warehouse_isValid;

    m_workgroup_id_isValid = ::OpenAPI::fromJsonValue(m_workgroup_id, json[QString("workgroupID")]);
    m_workgroup_id_isSet = !json[QString("workgroupID")].isNull() && m_workgroup_id_isValid;
}

QString OAIPurchaseOrderDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseOrderDto::asJsonObject() const {
    QJsonObject obj;
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_control_total_isSet) {
        obj.insert(QString("controlTotal"), ::OpenAPI::toJsonValue(m_control_total));
    }
    if (m_control_total_in_base_currency_isSet) {
        obj.insert(QString("controlTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_control_total_in_base_currency));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discount_details.size() > 0) {
        obj.insert(QString("discountDetails"), ::OpenAPI::toJsonValue(m_discount_details));
    }
    if (m_dont_email_isSet) {
        obj.insert(QString("dontEmail"), ::OpenAPI::toJsonValue(m_dont_email));
    }
    if (m_dont_print_isSet) {
        obj.insert(QString("dontPrint"), ::OpenAPI::toJsonValue(m_dont_print));
    }
    if (m_emailed_isSet) {
        obj.insert(QString("emailed"), ::OpenAPI::toJsonValue(m_emailed));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_exchange_rate_isSet) {
        obj.insert(QString("exchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_fob_point_isSet) {
        obj.insert(QString("fobPoint"), ::OpenAPI::toJsonValue(m_fob_point));
    }
    if (m_hold_isSet) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_line_total_isSet) {
        obj.insert(QString("lineTotal"), ::OpenAPI::toJsonValue(m_line_total));
    }
    if (m_line_total_in_base_currency_isSet) {
        obj.insert(QString("lineTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_line_total_in_base_currency));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_open_balance_isSet) {
        obj.insert(QString("openBalance"), ::OpenAPI::toJsonValue(m_open_balance));
    }
    if (m_open_quantity_isSet) {
        obj.insert(QString("openQuantity"), ::OpenAPI::toJsonValue(m_open_quantity));
    }
    if (m_order_nbr_isSet) {
        obj.insert(QString("orderNbr"), ::OpenAPI::toJsonValue(m_order_nbr));
    }
    if (m_order_total_isSet) {
        obj.insert(QString("orderTotal"), ::OpenAPI::toJsonValue(m_order_total));
    }
    if (m_order_total_in_base_currency_isSet) {
        obj.insert(QString("orderTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_order_total_in_base_currency));
    }
    if (m_order_type_isSet) {
        obj.insert(QString("orderType"), ::OpenAPI::toJsonValue(m_order_type));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_payment_ref_nbr_isSet) {
        obj.insert(QString("paymentRefNbr"), ::OpenAPI::toJsonValue(m_payment_ref_nbr));
    }
    if (m_printed_isSet) {
        obj.insert(QString("printed"), ::OpenAPI::toJsonValue(m_printed));
    }
    if (m_promised_on_isSet) {
        obj.insert(QString("promisedOn"), ::OpenAPI::toJsonValue(m_promised_on));
    }
    if (m_purchase_receipts.size() > 0) {
        obj.insert(QString("purchaseReceipts"), ::OpenAPI::toJsonValue(m_purchase_receipts));
    }
    if (m_remit_address.isSet()) {
        obj.insert(QString("remitAddress"), ::OpenAPI::toJsonValue(m_remit_address));
    }
    if (m_remit_contact.isSet()) {
        obj.insert(QString("remitContact"), ::OpenAPI::toJsonValue(m_remit_contact));
    }
    if (m_requisition_ref_nbr_isSet) {
        obj.insert(QString("requisitionRefNbr"), ::OpenAPI::toJsonValue(m_requisition_ref_nbr));
    }
    if (m_sales_order_nbr_isSet) {
        obj.insert(QString("salesOrderNbr"), ::OpenAPI::toJsonValue(m_sales_order_nbr));
    }
    if (m_sales_order_type_isSet) {
        obj.insert(QString("salesOrderType"), ::OpenAPI::toJsonValue(m_sales_order_type));
    }
    if (m_ship_terms_isSet) {
        obj.insert(QString("shipTerms"), ::OpenAPI::toJsonValue(m_ship_terms));
    }
    if (m_ship_to.isSet()) {
        obj.insert(QString("shipTo"), ::OpenAPI::toJsonValue(m_ship_to));
    }
    if (m_ship_via_isSet) {
        obj.insert(QString("shipVia"), ::OpenAPI::toJsonValue(m_ship_via));
    }
    if (m_shipping_address.isSet()) {
        obj.insert(QString("shippingAddress"), ::OpenAPI::toJsonValue(m_shipping_address));
    }
    if (m_shipping_contact.isSet()) {
        obj.insert(QString("shippingContact"), ::OpenAPI::toJsonValue(m_shipping_contact));
    }
    if (m_shipping_destination_type_isSet) {
        obj.insert(QString("shippingDestinationType"), ::OpenAPI::toJsonValue(m_shipping_destination_type));
    }
    if (m_shipping_location.isSet()) {
        obj.insert(QString("shippingLocation"), ::OpenAPI::toJsonValue(m_shipping_location));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supplier.isSet()) {
        obj.insert(QString("supplier"), ::OpenAPI::toJsonValue(m_supplier));
    }
    if (m_supplier_ref_isSet) {
        obj.insert(QString("supplierRef"), ::OpenAPI::toJsonValue(m_supplier_ref));
    }
    if (m_supplier_vat_zone.isSet()) {
        obj.insert(QString("supplierVatZone"), ::OpenAPI::toJsonValue(m_supplier_vat_zone));
    }
    if (m_tax_details.size() > 0) {
        obj.insert(QString("taxDetails"), ::OpenAPI::toJsonValue(m_tax_details));
    }
    if (m_tax_total_isSet) {
        obj.insert(QString("taxTotal"), ::OpenAPI::toJsonValue(m_tax_total));
    }
    if (m_tax_total_in_base_currency_isSet) {
        obj.insert(QString("taxTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_tax_total_in_base_currency));
    }
    if (m_terms.isSet()) {
        obj.insert(QString("terms"), ::OpenAPI::toJsonValue(m_terms));
    }
    if (m_vat_exempt_total_isSet) {
        obj.insert(QString("vatExemptTotal"), ::OpenAPI::toJsonValue(m_vat_exempt_total));
    }
    if (m_vat_exempt_total_in_base_currency_isSet) {
        obj.insert(QString("vatExemptTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_vat_exempt_total_in_base_currency));
    }
    if (m_warehouse.isSet()) {
        obj.insert(QString("warehouse"), ::OpenAPI::toJsonValue(m_warehouse));
    }
    if (m_workgroup_id_isSet) {
        obj.insert(QString("workgroupID"), ::OpenAPI::toJsonValue(m_workgroup_id));
    }
    return obj;
}

OAIBranchInPurchaseOrderDto OAIPurchaseOrderDto::getBranch() const {
    return m_branch;
}
void OAIPurchaseOrderDto::setBranch(const OAIBranchInPurchaseOrderDto &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIPurchaseOrderDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIPurchaseOrderDto::is_branch_Valid() const{
    return m_branch_isValid;
}

double OAIPurchaseOrderDto::getControlTotal() const {
    return m_control_total;
}
void OAIPurchaseOrderDto::setControlTotal(const double &control_total) {
    m_control_total = control_total;
    m_control_total_isSet = true;
}

bool OAIPurchaseOrderDto::is_control_total_Set() const{
    return m_control_total_isSet;
}

bool OAIPurchaseOrderDto::is_control_total_Valid() const{
    return m_control_total_isValid;
}

double OAIPurchaseOrderDto::getControlTotalInBaseCurrency() const {
    return m_control_total_in_base_currency;
}
void OAIPurchaseOrderDto::setControlTotalInBaseCurrency(const double &control_total_in_base_currency) {
    m_control_total_in_base_currency = control_total_in_base_currency;
    m_control_total_in_base_currency_isSet = true;
}

bool OAIPurchaseOrderDto::is_control_total_in_base_currency_Set() const{
    return m_control_total_in_base_currency_isSet;
}

bool OAIPurchaseOrderDto::is_control_total_in_base_currency_Valid() const{
    return m_control_total_in_base_currency_isValid;
}

QString OAIPurchaseOrderDto::getCurrency() const {
    return m_currency;
}
void OAIPurchaseOrderDto::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPurchaseOrderDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPurchaseOrderDto::is_currency_Valid() const{
    return m_currency_isValid;
}

QDateTime OAIPurchaseOrderDto::getDate() const {
    return m_date;
}
void OAIPurchaseOrderDto::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIPurchaseOrderDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAIPurchaseOrderDto::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIPurchaseOrderDto::getDescription() const {
    return m_description;
}
void OAIPurchaseOrderDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPurchaseOrderDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPurchaseOrderDto::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIDiscountDetailDto> OAIPurchaseOrderDto::getDiscountDetails() const {
    return m_discount_details;
}
void OAIPurchaseOrderDto::setDiscountDetails(const QList<OAIDiscountDetailDto> &discount_details) {
    m_discount_details = discount_details;
    m_discount_details_isSet = true;
}

bool OAIPurchaseOrderDto::is_discount_details_Set() const{
    return m_discount_details_isSet;
}

bool OAIPurchaseOrderDto::is_discount_details_Valid() const{
    return m_discount_details_isValid;
}

bool OAIPurchaseOrderDto::isDontEmail() const {
    return m_dont_email;
}
void OAIPurchaseOrderDto::setDontEmail(const bool &dont_email) {
    m_dont_email = dont_email;
    m_dont_email_isSet = true;
}

bool OAIPurchaseOrderDto::is_dont_email_Set() const{
    return m_dont_email_isSet;
}

bool OAIPurchaseOrderDto::is_dont_email_Valid() const{
    return m_dont_email_isValid;
}

bool OAIPurchaseOrderDto::isDontPrint() const {
    return m_dont_print;
}
void OAIPurchaseOrderDto::setDontPrint(const bool &dont_print) {
    m_dont_print = dont_print;
    m_dont_print_isSet = true;
}

bool OAIPurchaseOrderDto::is_dont_print_Set() const{
    return m_dont_print_isSet;
}

bool OAIPurchaseOrderDto::is_dont_print_Valid() const{
    return m_dont_print_isValid;
}

bool OAIPurchaseOrderDto::isEmailed() const {
    return m_emailed;
}
void OAIPurchaseOrderDto::setEmailed(const bool &emailed) {
    m_emailed = emailed;
    m_emailed_isSet = true;
}

bool OAIPurchaseOrderDto::is_emailed_Set() const{
    return m_emailed_isSet;
}

bool OAIPurchaseOrderDto::is_emailed_Valid() const{
    return m_emailed_isValid;
}

QString OAIPurchaseOrderDto::getErrorInfo() const {
    return m_error_info;
}
void OAIPurchaseOrderDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIPurchaseOrderDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIPurchaseOrderDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

double OAIPurchaseOrderDto::getExchangeRate() const {
    return m_exchange_rate;
}
void OAIPurchaseOrderDto::setExchangeRate(const double &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAIPurchaseOrderDto::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAIPurchaseOrderDto::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

QString OAIPurchaseOrderDto::getFobPoint() const {
    return m_fob_point;
}
void OAIPurchaseOrderDto::setFobPoint(const QString &fob_point) {
    m_fob_point = fob_point;
    m_fob_point_isSet = true;
}

bool OAIPurchaseOrderDto::is_fob_point_Set() const{
    return m_fob_point_isSet;
}

bool OAIPurchaseOrderDto::is_fob_point_Valid() const{
    return m_fob_point_isValid;
}

bool OAIPurchaseOrderDto::isHold() const {
    return m_hold;
}
void OAIPurchaseOrderDto::setHold(const bool &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAIPurchaseOrderDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAIPurchaseOrderDto::is_hold_Valid() const{
    return m_hold_isValid;
}

QDateTime OAIPurchaseOrderDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIPurchaseOrderDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIPurchaseOrderDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIPurchaseOrderDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

double OAIPurchaseOrderDto::getLineTotal() const {
    return m_line_total;
}
void OAIPurchaseOrderDto::setLineTotal(const double &line_total) {
    m_line_total = line_total;
    m_line_total_isSet = true;
}

bool OAIPurchaseOrderDto::is_line_total_Set() const{
    return m_line_total_isSet;
}

bool OAIPurchaseOrderDto::is_line_total_Valid() const{
    return m_line_total_isValid;
}

double OAIPurchaseOrderDto::getLineTotalInBaseCurrency() const {
    return m_line_total_in_base_currency;
}
void OAIPurchaseOrderDto::setLineTotalInBaseCurrency(const double &line_total_in_base_currency) {
    m_line_total_in_base_currency = line_total_in_base_currency;
    m_line_total_in_base_currency_isSet = true;
}

bool OAIPurchaseOrderDto::is_line_total_in_base_currency_Set() const{
    return m_line_total_in_base_currency_isSet;
}

bool OAIPurchaseOrderDto::is_line_total_in_base_currency_Valid() const{
    return m_line_total_in_base_currency_isValid;
}

QList<OAIPurchaseOrderLineDto> OAIPurchaseOrderDto::getLines() const {
    return m_lines;
}
void OAIPurchaseOrderDto::setLines(const QList<OAIPurchaseOrderLineDto> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAIPurchaseOrderDto::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAIPurchaseOrderDto::is_lines_Valid() const{
    return m_lines_isValid;
}

OAILocationInPurchaseOrderDto OAIPurchaseOrderDto::getLocation() const {
    return m_location;
}
void OAIPurchaseOrderDto::setLocation(const OAILocationInPurchaseOrderDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIPurchaseOrderDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIPurchaseOrderDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIMetadataDto OAIPurchaseOrderDto::getMetadata() const {
    return m_metadata;
}
void OAIPurchaseOrderDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPurchaseOrderDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPurchaseOrderDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIPurchaseOrderDto::getNote() const {
    return m_note;
}
void OAIPurchaseOrderDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIPurchaseOrderDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAIPurchaseOrderDto::is_note_Valid() const{
    return m_note_isValid;
}

double OAIPurchaseOrderDto::getOpenBalance() const {
    return m_open_balance;
}
void OAIPurchaseOrderDto::setOpenBalance(const double &open_balance) {
    m_open_balance = open_balance;
    m_open_balance_isSet = true;
}

bool OAIPurchaseOrderDto::is_open_balance_Set() const{
    return m_open_balance_isSet;
}

bool OAIPurchaseOrderDto::is_open_balance_Valid() const{
    return m_open_balance_isValid;
}

double OAIPurchaseOrderDto::getOpenQuantity() const {
    return m_open_quantity;
}
void OAIPurchaseOrderDto::setOpenQuantity(const double &open_quantity) {
    m_open_quantity = open_quantity;
    m_open_quantity_isSet = true;
}

bool OAIPurchaseOrderDto::is_open_quantity_Set() const{
    return m_open_quantity_isSet;
}

bool OAIPurchaseOrderDto::is_open_quantity_Valid() const{
    return m_open_quantity_isValid;
}

QString OAIPurchaseOrderDto::getOrderNbr() const {
    return m_order_nbr;
}
void OAIPurchaseOrderDto::setOrderNbr(const QString &order_nbr) {
    m_order_nbr = order_nbr;
    m_order_nbr_isSet = true;
}

bool OAIPurchaseOrderDto::is_order_nbr_Set() const{
    return m_order_nbr_isSet;
}

bool OAIPurchaseOrderDto::is_order_nbr_Valid() const{
    return m_order_nbr_isValid;
}

double OAIPurchaseOrderDto::getOrderTotal() const {
    return m_order_total;
}
void OAIPurchaseOrderDto::setOrderTotal(const double &order_total) {
    m_order_total = order_total;
    m_order_total_isSet = true;
}

bool OAIPurchaseOrderDto::is_order_total_Set() const{
    return m_order_total_isSet;
}

bool OAIPurchaseOrderDto::is_order_total_Valid() const{
    return m_order_total_isValid;
}

double OAIPurchaseOrderDto::getOrderTotalInBaseCurrency() const {
    return m_order_total_in_base_currency;
}
void OAIPurchaseOrderDto::setOrderTotalInBaseCurrency(const double &order_total_in_base_currency) {
    m_order_total_in_base_currency = order_total_in_base_currency;
    m_order_total_in_base_currency_isSet = true;
}

bool OAIPurchaseOrderDto::is_order_total_in_base_currency_Set() const{
    return m_order_total_in_base_currency_isSet;
}

bool OAIPurchaseOrderDto::is_order_total_in_base_currency_Valid() const{
    return m_order_total_in_base_currency_isValid;
}

QString OAIPurchaseOrderDto::getOrderType() const {
    return m_order_type;
}
void OAIPurchaseOrderDto::setOrderType(const QString &order_type) {
    m_order_type = order_type;
    m_order_type_isSet = true;
}

bool OAIPurchaseOrderDto::is_order_type_Set() const{
    return m_order_type_isSet;
}

bool OAIPurchaseOrderDto::is_order_type_Valid() const{
    return m_order_type_isValid;
}

OAIOwnerInPurchaseOrderDto OAIPurchaseOrderDto::getOwner() const {
    return m_owner;
}
void OAIPurchaseOrderDto::setOwner(const OAIOwnerInPurchaseOrderDto &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIPurchaseOrderDto::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIPurchaseOrderDto::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIPurchaseOrderDto::getPaymentRefNbr() const {
    return m_payment_ref_nbr;
}
void OAIPurchaseOrderDto::setPaymentRefNbr(const QString &payment_ref_nbr) {
    m_payment_ref_nbr = payment_ref_nbr;
    m_payment_ref_nbr_isSet = true;
}

bool OAIPurchaseOrderDto::is_payment_ref_nbr_Set() const{
    return m_payment_ref_nbr_isSet;
}

bool OAIPurchaseOrderDto::is_payment_ref_nbr_Valid() const{
    return m_payment_ref_nbr_isValid;
}

bool OAIPurchaseOrderDto::isPrinted() const {
    return m_printed;
}
void OAIPurchaseOrderDto::setPrinted(const bool &printed) {
    m_printed = printed;
    m_printed_isSet = true;
}

bool OAIPurchaseOrderDto::is_printed_Set() const{
    return m_printed_isSet;
}

bool OAIPurchaseOrderDto::is_printed_Valid() const{
    return m_printed_isValid;
}

QDateTime OAIPurchaseOrderDto::getPromisedOn() const {
    return m_promised_on;
}
void OAIPurchaseOrderDto::setPromisedOn(const QDateTime &promised_on) {
    m_promised_on = promised_on;
    m_promised_on_isSet = true;
}

bool OAIPurchaseOrderDto::is_promised_on_Set() const{
    return m_promised_on_isSet;
}

bool OAIPurchaseOrderDto::is_promised_on_Valid() const{
    return m_promised_on_isValid;
}

QList<OAIPurchaseReceiptsDto> OAIPurchaseOrderDto::getPurchaseReceipts() const {
    return m_purchase_receipts;
}
void OAIPurchaseOrderDto::setPurchaseReceipts(const QList<OAIPurchaseReceiptsDto> &purchase_receipts) {
    m_purchase_receipts = purchase_receipts;
    m_purchase_receipts_isSet = true;
}

bool OAIPurchaseOrderDto::is_purchase_receipts_Set() const{
    return m_purchase_receipts_isSet;
}

bool OAIPurchaseOrderDto::is_purchase_receipts_Valid() const{
    return m_purchase_receipts_isValid;
}

OAIRemitAddressInPurchaseOrderDto OAIPurchaseOrderDto::getRemitAddress() const {
    return m_remit_address;
}
void OAIPurchaseOrderDto::setRemitAddress(const OAIRemitAddressInPurchaseOrderDto &remit_address) {
    m_remit_address = remit_address;
    m_remit_address_isSet = true;
}

bool OAIPurchaseOrderDto::is_remit_address_Set() const{
    return m_remit_address_isSet;
}

bool OAIPurchaseOrderDto::is_remit_address_Valid() const{
    return m_remit_address_isValid;
}

OAIRemitContactInPurchaseOrderDto OAIPurchaseOrderDto::getRemitContact() const {
    return m_remit_contact;
}
void OAIPurchaseOrderDto::setRemitContact(const OAIRemitContactInPurchaseOrderDto &remit_contact) {
    m_remit_contact = remit_contact;
    m_remit_contact_isSet = true;
}

bool OAIPurchaseOrderDto::is_remit_contact_Set() const{
    return m_remit_contact_isSet;
}

bool OAIPurchaseOrderDto::is_remit_contact_Valid() const{
    return m_remit_contact_isValid;
}

QString OAIPurchaseOrderDto::getRequisitionRefNbr() const {
    return m_requisition_ref_nbr;
}
void OAIPurchaseOrderDto::setRequisitionRefNbr(const QString &requisition_ref_nbr) {
    m_requisition_ref_nbr = requisition_ref_nbr;
    m_requisition_ref_nbr_isSet = true;
}

bool OAIPurchaseOrderDto::is_requisition_ref_nbr_Set() const{
    return m_requisition_ref_nbr_isSet;
}

bool OAIPurchaseOrderDto::is_requisition_ref_nbr_Valid() const{
    return m_requisition_ref_nbr_isValid;
}

QString OAIPurchaseOrderDto::getSalesOrderNbr() const {
    return m_sales_order_nbr;
}
void OAIPurchaseOrderDto::setSalesOrderNbr(const QString &sales_order_nbr) {
    m_sales_order_nbr = sales_order_nbr;
    m_sales_order_nbr_isSet = true;
}

bool OAIPurchaseOrderDto::is_sales_order_nbr_Set() const{
    return m_sales_order_nbr_isSet;
}

bool OAIPurchaseOrderDto::is_sales_order_nbr_Valid() const{
    return m_sales_order_nbr_isValid;
}

QString OAIPurchaseOrderDto::getSalesOrderType() const {
    return m_sales_order_type;
}
void OAIPurchaseOrderDto::setSalesOrderType(const QString &sales_order_type) {
    m_sales_order_type = sales_order_type;
    m_sales_order_type_isSet = true;
}

bool OAIPurchaseOrderDto::is_sales_order_type_Set() const{
    return m_sales_order_type_isSet;
}

bool OAIPurchaseOrderDto::is_sales_order_type_Valid() const{
    return m_sales_order_type_isValid;
}

QString OAIPurchaseOrderDto::getShipTerms() const {
    return m_ship_terms;
}
void OAIPurchaseOrderDto::setShipTerms(const QString &ship_terms) {
    m_ship_terms = ship_terms;
    m_ship_terms_isSet = true;
}

bool OAIPurchaseOrderDto::is_ship_terms_Set() const{
    return m_ship_terms_isSet;
}

bool OAIPurchaseOrderDto::is_ship_terms_Valid() const{
    return m_ship_terms_isValid;
}

OAIShipToInPurchaseOrderDto OAIPurchaseOrderDto::getShipTo() const {
    return m_ship_to;
}
void OAIPurchaseOrderDto::setShipTo(const OAIShipToInPurchaseOrderDto &ship_to) {
    m_ship_to = ship_to;
    m_ship_to_isSet = true;
}

bool OAIPurchaseOrderDto::is_ship_to_Set() const{
    return m_ship_to_isSet;
}

bool OAIPurchaseOrderDto::is_ship_to_Valid() const{
    return m_ship_to_isValid;
}

QString OAIPurchaseOrderDto::getShipVia() const {
    return m_ship_via;
}
void OAIPurchaseOrderDto::setShipVia(const QString &ship_via) {
    m_ship_via = ship_via;
    m_ship_via_isSet = true;
}

bool OAIPurchaseOrderDto::is_ship_via_Set() const{
    return m_ship_via_isSet;
}

bool OAIPurchaseOrderDto::is_ship_via_Valid() const{
    return m_ship_via_isValid;
}

OAIShippingAddressInPurchaseOrderDto OAIPurchaseOrderDto::getShippingAddress() const {
    return m_shipping_address;
}
void OAIPurchaseOrderDto::setShippingAddress(const OAIShippingAddressInPurchaseOrderDto &shipping_address) {
    m_shipping_address = shipping_address;
    m_shipping_address_isSet = true;
}

bool OAIPurchaseOrderDto::is_shipping_address_Set() const{
    return m_shipping_address_isSet;
}

bool OAIPurchaseOrderDto::is_shipping_address_Valid() const{
    return m_shipping_address_isValid;
}

OAIShippingContactInPurchaseOrderDto OAIPurchaseOrderDto::getShippingContact() const {
    return m_shipping_contact;
}
void OAIPurchaseOrderDto::setShippingContact(const OAIShippingContactInPurchaseOrderDto &shipping_contact) {
    m_shipping_contact = shipping_contact;
    m_shipping_contact_isSet = true;
}

bool OAIPurchaseOrderDto::is_shipping_contact_Set() const{
    return m_shipping_contact_isSet;
}

bool OAIPurchaseOrderDto::is_shipping_contact_Valid() const{
    return m_shipping_contact_isValid;
}

QString OAIPurchaseOrderDto::getShippingDestinationType() const {
    return m_shipping_destination_type;
}
void OAIPurchaseOrderDto::setShippingDestinationType(const QString &shipping_destination_type) {
    m_shipping_destination_type = shipping_destination_type;
    m_shipping_destination_type_isSet = true;
}

bool OAIPurchaseOrderDto::is_shipping_destination_type_Set() const{
    return m_shipping_destination_type_isSet;
}

bool OAIPurchaseOrderDto::is_shipping_destination_type_Valid() const{
    return m_shipping_destination_type_isValid;
}

OAIShippingLocationInPurchaseOrderDto OAIPurchaseOrderDto::getShippingLocation() const {
    return m_shipping_location;
}
void OAIPurchaseOrderDto::setShippingLocation(const OAIShippingLocationInPurchaseOrderDto &shipping_location) {
    m_shipping_location = shipping_location;
    m_shipping_location_isSet = true;
}

bool OAIPurchaseOrderDto::is_shipping_location_Set() const{
    return m_shipping_location_isSet;
}

bool OAIPurchaseOrderDto::is_shipping_location_Valid() const{
    return m_shipping_location_isValid;
}

QString OAIPurchaseOrderDto::getStatus() const {
    return m_status;
}
void OAIPurchaseOrderDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPurchaseOrderDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPurchaseOrderDto::is_status_Valid() const{
    return m_status_isValid;
}

OAISupplierInPurchaseOrderDto OAIPurchaseOrderDto::getSupplier() const {
    return m_supplier;
}
void OAIPurchaseOrderDto::setSupplier(const OAISupplierInPurchaseOrderDto &supplier) {
    m_supplier = supplier;
    m_supplier_isSet = true;
}

bool OAIPurchaseOrderDto::is_supplier_Set() const{
    return m_supplier_isSet;
}

bool OAIPurchaseOrderDto::is_supplier_Valid() const{
    return m_supplier_isValid;
}

QString OAIPurchaseOrderDto::getSupplierRef() const {
    return m_supplier_ref;
}
void OAIPurchaseOrderDto::setSupplierRef(const QString &supplier_ref) {
    m_supplier_ref = supplier_ref;
    m_supplier_ref_isSet = true;
}

bool OAIPurchaseOrderDto::is_supplier_ref_Set() const{
    return m_supplier_ref_isSet;
}

bool OAIPurchaseOrderDto::is_supplier_ref_Valid() const{
    return m_supplier_ref_isValid;
}

OAISupplierVatZoneInPurchaseOrderDto OAIPurchaseOrderDto::getSupplierVatZone() const {
    return m_supplier_vat_zone;
}
void OAIPurchaseOrderDto::setSupplierVatZone(const OAISupplierVatZoneInPurchaseOrderDto &supplier_vat_zone) {
    m_supplier_vat_zone = supplier_vat_zone;
    m_supplier_vat_zone_isSet = true;
}

bool OAIPurchaseOrderDto::is_supplier_vat_zone_Set() const{
    return m_supplier_vat_zone_isSet;
}

bool OAIPurchaseOrderDto::is_supplier_vat_zone_Valid() const{
    return m_supplier_vat_zone_isValid;
}

QList<OAITaxDetailDto> OAIPurchaseOrderDto::getTaxDetails() const {
    return m_tax_details;
}
void OAIPurchaseOrderDto::setTaxDetails(const QList<OAITaxDetailDto> &tax_details) {
    m_tax_details = tax_details;
    m_tax_details_isSet = true;
}

bool OAIPurchaseOrderDto::is_tax_details_Set() const{
    return m_tax_details_isSet;
}

bool OAIPurchaseOrderDto::is_tax_details_Valid() const{
    return m_tax_details_isValid;
}

double OAIPurchaseOrderDto::getTaxTotal() const {
    return m_tax_total;
}
void OAIPurchaseOrderDto::setTaxTotal(const double &tax_total) {
    m_tax_total = tax_total;
    m_tax_total_isSet = true;
}

bool OAIPurchaseOrderDto::is_tax_total_Set() const{
    return m_tax_total_isSet;
}

bool OAIPurchaseOrderDto::is_tax_total_Valid() const{
    return m_tax_total_isValid;
}

double OAIPurchaseOrderDto::getTaxTotalInBaseCurrency() const {
    return m_tax_total_in_base_currency;
}
void OAIPurchaseOrderDto::setTaxTotalInBaseCurrency(const double &tax_total_in_base_currency) {
    m_tax_total_in_base_currency = tax_total_in_base_currency;
    m_tax_total_in_base_currency_isSet = true;
}

bool OAIPurchaseOrderDto::is_tax_total_in_base_currency_Set() const{
    return m_tax_total_in_base_currency_isSet;
}

bool OAIPurchaseOrderDto::is_tax_total_in_base_currency_Valid() const{
    return m_tax_total_in_base_currency_isValid;
}

OAITermsInPurchaseOrderDto OAIPurchaseOrderDto::getTerms() const {
    return m_terms;
}
void OAIPurchaseOrderDto::setTerms(const OAITermsInPurchaseOrderDto &terms) {
    m_terms = terms;
    m_terms_isSet = true;
}

bool OAIPurchaseOrderDto::is_terms_Set() const{
    return m_terms_isSet;
}

bool OAIPurchaseOrderDto::is_terms_Valid() const{
    return m_terms_isValid;
}

double OAIPurchaseOrderDto::getVatExemptTotal() const {
    return m_vat_exempt_total;
}
void OAIPurchaseOrderDto::setVatExemptTotal(const double &vat_exempt_total) {
    m_vat_exempt_total = vat_exempt_total;
    m_vat_exempt_total_isSet = true;
}

bool OAIPurchaseOrderDto::is_vat_exempt_total_Set() const{
    return m_vat_exempt_total_isSet;
}

bool OAIPurchaseOrderDto::is_vat_exempt_total_Valid() const{
    return m_vat_exempt_total_isValid;
}

double OAIPurchaseOrderDto::getVatExemptTotalInBaseCurrency() const {
    return m_vat_exempt_total_in_base_currency;
}
void OAIPurchaseOrderDto::setVatExemptTotalInBaseCurrency(const double &vat_exempt_total_in_base_currency) {
    m_vat_exempt_total_in_base_currency = vat_exempt_total_in_base_currency;
    m_vat_exempt_total_in_base_currency_isSet = true;
}

bool OAIPurchaseOrderDto::is_vat_exempt_total_in_base_currency_Set() const{
    return m_vat_exempt_total_in_base_currency_isSet;
}

bool OAIPurchaseOrderDto::is_vat_exempt_total_in_base_currency_Valid() const{
    return m_vat_exempt_total_in_base_currency_isValid;
}

OAIWarehouseInPurchaseOrderDto OAIPurchaseOrderDto::getWarehouse() const {
    return m_warehouse;
}
void OAIPurchaseOrderDto::setWarehouse(const OAIWarehouseInPurchaseOrderDto &warehouse) {
    m_warehouse = warehouse;
    m_warehouse_isSet = true;
}

bool OAIPurchaseOrderDto::is_warehouse_Set() const{
    return m_warehouse_isSet;
}

bool OAIPurchaseOrderDto::is_warehouse_Valid() const{
    return m_warehouse_isValid;
}

qint32 OAIPurchaseOrderDto::getWorkgroupId() const {
    return m_workgroup_id;
}
void OAIPurchaseOrderDto::setWorkgroupId(const qint32 &workgroup_id) {
    m_workgroup_id = workgroup_id;
    m_workgroup_id_isSet = true;
}

bool OAIPurchaseOrderDto::is_workgroup_id_Set() const{
    return m_workgroup_id_isSet;
}

bool OAIPurchaseOrderDto::is_workgroup_id_Valid() const{
    return m_workgroup_id_isValid;
}

bool OAIPurchaseOrderDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dont_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dont_print_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emailed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fob_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_ref_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_printed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promised_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_receipts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_remit_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remit_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requisition_ref_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_order_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_order_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_terms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_to.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_via_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_destination_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_vat_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_exempt_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_exempt_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workgroup_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseOrderDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
