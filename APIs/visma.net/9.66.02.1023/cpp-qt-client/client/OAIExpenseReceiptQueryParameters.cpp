/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpenseReceiptQueryParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpenseReceiptQueryParameters::OAIExpenseReceiptQueryParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpenseReceiptQueryParameters::OAIExpenseReceiptQueryParameters() {
    this->initializeModel();
}

OAIExpenseReceiptQueryParameters::~OAIExpenseReceiptQueryParameters() {}

void OAIExpenseReceiptQueryParameters::initializeModel() {

    m_claimed_by_isSet = false;
    m_claimed_by_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_date_condition_isSet = false;
    m_date_condition_isValid = false;

    m_inventory_isSet = false;
    m_inventory_isValid = false;

    m_invoiceable_isSet = false;
    m_invoiceable_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_project_task_isSet = false;
    m_project_task_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIExpenseReceiptQueryParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpenseReceiptQueryParameters::fromJsonObject(QJsonObject json) {

    m_claimed_by_isValid = ::OpenAPI::fromJsonValue(m_claimed_by, json[QString("claimedBy")]);
    m_claimed_by_isSet = !json[QString("claimedBy")].isNull() && m_claimed_by_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_date_condition_isValid = ::OpenAPI::fromJsonValue(m_date_condition, json[QString("dateCondition")]);
    m_date_condition_isSet = !json[QString("dateCondition")].isNull() && m_date_condition_isValid;

    m_inventory_isValid = ::OpenAPI::fromJsonValue(m_inventory, json[QString("inventory")]);
    m_inventory_isSet = !json[QString("inventory")].isNull() && m_inventory_isValid;

    m_invoiceable_isValid = ::OpenAPI::fromJsonValue(m_invoiceable, json[QString("invoiceable")]);
    m_invoiceable_isSet = !json[QString("invoiceable")].isNull() && m_invoiceable_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_project_task_isValid = ::OpenAPI::fromJsonValue(m_project_task, json[QString("projectTask")]);
    m_project_task_isSet = !json[QString("projectTask")].isNull() && m_project_task_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIExpenseReceiptQueryParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpenseReceiptQueryParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_claimed_by_isSet) {
        obj.insert(QString("claimedBy"), ::OpenAPI::toJsonValue(m_claimed_by));
    }
    if (m_customer_isSet) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_date_condition_isSet) {
        obj.insert(QString("dateCondition"), ::OpenAPI::toJsonValue(m_date_condition));
    }
    if (m_inventory_isSet) {
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(m_inventory));
    }
    if (m_invoiceable_isSet) {
        obj.insert(QString("invoiceable"), ::OpenAPI::toJsonValue(m_invoiceable));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_project_task_isSet) {
        obj.insert(QString("projectTask"), ::OpenAPI::toJsonValue(m_project_task));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIExpenseReceiptQueryParameters::getClaimedBy() const {
    return m_claimed_by;
}
void OAIExpenseReceiptQueryParameters::setClaimedBy(const QString &claimed_by) {
    m_claimed_by = claimed_by;
    m_claimed_by_isSet = true;
}

bool OAIExpenseReceiptQueryParameters::is_claimed_by_Set() const{
    return m_claimed_by_isSet;
}

bool OAIExpenseReceiptQueryParameters::is_claimed_by_Valid() const{
    return m_claimed_by_isValid;
}

QString OAIExpenseReceiptQueryParameters::getCustomer() const {
    return m_customer;
}
void OAIExpenseReceiptQueryParameters::setCustomer(const QString &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIExpenseReceiptQueryParameters::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIExpenseReceiptQueryParameters::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAIExpenseReceiptQueryParameters::getDate() const {
    return m_date;
}
void OAIExpenseReceiptQueryParameters::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIExpenseReceiptQueryParameters::is_date_Set() const{
    return m_date_isSet;
}

bool OAIExpenseReceiptQueryParameters::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIExpenseReceiptQueryParameters::getDateCondition() const {
    return m_date_condition;
}
void OAIExpenseReceiptQueryParameters::setDateCondition(const QString &date_condition) {
    m_date_condition = date_condition;
    m_date_condition_isSet = true;
}

bool OAIExpenseReceiptQueryParameters::is_date_condition_Set() const{
    return m_date_condition_isSet;
}

bool OAIExpenseReceiptQueryParameters::is_date_condition_Valid() const{
    return m_date_condition_isValid;
}

QString OAIExpenseReceiptQueryParameters::getInventory() const {
    return m_inventory;
}
void OAIExpenseReceiptQueryParameters::setInventory(const QString &inventory) {
    m_inventory = inventory;
    m_inventory_isSet = true;
}

bool OAIExpenseReceiptQueryParameters::is_inventory_Set() const{
    return m_inventory_isSet;
}

bool OAIExpenseReceiptQueryParameters::is_inventory_Valid() const{
    return m_inventory_isValid;
}

bool OAIExpenseReceiptQueryParameters::isInvoiceable() const {
    return m_invoiceable;
}
void OAIExpenseReceiptQueryParameters::setInvoiceable(const bool &invoiceable) {
    m_invoiceable = invoiceable;
    m_invoiceable_isSet = true;
}

bool OAIExpenseReceiptQueryParameters::is_invoiceable_Set() const{
    return m_invoiceable_isSet;
}

bool OAIExpenseReceiptQueryParameters::is_invoiceable_Valid() const{
    return m_invoiceable_isValid;
}

QString OAIExpenseReceiptQueryParameters::getProject() const {
    return m_project;
}
void OAIExpenseReceiptQueryParameters::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIExpenseReceiptQueryParameters::is_project_Set() const{
    return m_project_isSet;
}

bool OAIExpenseReceiptQueryParameters::is_project_Valid() const{
    return m_project_isValid;
}

QString OAIExpenseReceiptQueryParameters::getProjectTask() const {
    return m_project_task;
}
void OAIExpenseReceiptQueryParameters::setProjectTask(const QString &project_task) {
    m_project_task = project_task;
    m_project_task_isSet = true;
}

bool OAIExpenseReceiptQueryParameters::is_project_task_Set() const{
    return m_project_task_isSet;
}

bool OAIExpenseReceiptQueryParameters::is_project_task_Valid() const{
    return m_project_task_isValid;
}

QString OAIExpenseReceiptQueryParameters::getStatus() const {
    return m_status;
}
void OAIExpenseReceiptQueryParameters::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIExpenseReceiptQueryParameters::is_status_Set() const{
    return m_status_isSet;
}

bool OAIExpenseReceiptQueryParameters::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIExpenseReceiptQueryParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_claimed_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoiceable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpenseReceiptQueryParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
