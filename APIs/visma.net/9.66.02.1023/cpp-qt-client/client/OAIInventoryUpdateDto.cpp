/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryUpdateDto::OAIInventoryUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryUpdateDto::OAIInventoryUpdateDto() {
    this->initializeModel();
}

OAIInventoryUpdateDto::~OAIInventoryUpdateDto() {}

void OAIInventoryUpdateDto::initializeModel() {

    m_attribute_lines_isSet = false;
    m_attribute_lines_isValid = false;

    m_base_unit_isSet = false;
    m_base_unit_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_cogs_account_isSet = false;
    m_cogs_account_isValid = false;

    m_cogs_subaccount_isSet = false;
    m_cogs_subaccount_isValid = false;

    m_default_issue_from_isSet = false;
    m_default_issue_from_isValid = false;

    m_default_price_isSet = false;
    m_default_price_isValid = false;

    m_default_receipt_to_isSet = false;
    m_default_receipt_to_isValid = false;

    m_default_warehouse_isSet = false;
    m_default_warehouse_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expense_account_isSet = false;
    m_expense_account_isValid = false;

    m_expense_accrual_account_isSet = false;
    m_expense_accrual_account_isValid = false;

    m_expense_eu_account_isSet = false;
    m_expense_eu_account_isValid = false;

    m_expense_import_account_isSet = false;
    m_expense_import_account_isValid = false;

    m_expense_non_taxable_account_isSet = false;
    m_expense_non_taxable_account_isValid = false;

    m_expense_subaccount_isSet = false;
    m_expense_subaccount_isValid = false;

    m_intrastat_isSet = false;
    m_intrastat_isValid = false;

    m_inventory_account_isSet = false;
    m_inventory_account_isValid = false;

    m_inventory_number_isSet = false;
    m_inventory_number_isValid = false;

    m_item_class_isSet = false;
    m_item_class_isValid = false;

    m_kit_item_isSet = false;
    m_kit_item_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_packaging_isSet = false;
    m_packaging_isValid = false;

    m_posting_class_isSet = false;
    m_posting_class_isValid = false;

    m_purchase_unit_isSet = false;
    m_purchase_unit_isValid = false;

    m_sales_account_isSet = false;
    m_sales_account_isValid = false;

    m_sales_eu_account_isSet = false;
    m_sales_eu_account_isValid = false;

    m_sales_export_account_isSet = false;
    m_sales_export_account_isValid = false;

    m_sales_non_taxable_account_isSet = false;
    m_sales_non_taxable_account_isValid = false;

    m_sales_subaccount_isSet = false;
    m_sales_subaccount_isValid = false;

    m_sales_unit_isSet = false;
    m_sales_unit_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supplier_details_isSet = false;
    m_supplier_details_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vat_code_isSet = false;
    m_vat_code_isValid = false;
}

void OAIInventoryUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryUpdateDto::fromJsonObject(QJsonObject json) {

    m_attribute_lines_isValid = ::OpenAPI::fromJsonValue(m_attribute_lines, json[QString("attributeLines")]);
    m_attribute_lines_isSet = !json[QString("attributeLines")].isNull() && m_attribute_lines_isValid;

    m_base_unit_isValid = ::OpenAPI::fromJsonValue(m_base_unit, json[QString("baseUnit")]);
    m_base_unit_isSet = !json[QString("baseUnit")].isNull() && m_base_unit_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_cogs_account_isValid = ::OpenAPI::fromJsonValue(m_cogs_account, json[QString("cogsAccount")]);
    m_cogs_account_isSet = !json[QString("cogsAccount")].isNull() && m_cogs_account_isValid;

    m_cogs_subaccount_isValid = ::OpenAPI::fromJsonValue(m_cogs_subaccount, json[QString("cogsSubaccount")]);
    m_cogs_subaccount_isSet = !json[QString("cogsSubaccount")].isNull() && m_cogs_subaccount_isValid;

    m_default_issue_from_isValid = ::OpenAPI::fromJsonValue(m_default_issue_from, json[QString("defaultIssueFrom")]);
    m_default_issue_from_isSet = !json[QString("defaultIssueFrom")].isNull() && m_default_issue_from_isValid;

    m_default_price_isValid = ::OpenAPI::fromJsonValue(m_default_price, json[QString("defaultPrice")]);
    m_default_price_isSet = !json[QString("defaultPrice")].isNull() && m_default_price_isValid;

    m_default_receipt_to_isValid = ::OpenAPI::fromJsonValue(m_default_receipt_to, json[QString("defaultReceiptTo")]);
    m_default_receipt_to_isSet = !json[QString("defaultReceiptTo")].isNull() && m_default_receipt_to_isValid;

    m_default_warehouse_isValid = ::OpenAPI::fromJsonValue(m_default_warehouse, json[QString("defaultWarehouse")]);
    m_default_warehouse_isSet = !json[QString("defaultWarehouse")].isNull() && m_default_warehouse_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expense_account_isValid = ::OpenAPI::fromJsonValue(m_expense_account, json[QString("expenseAccount")]);
    m_expense_account_isSet = !json[QString("expenseAccount")].isNull() && m_expense_account_isValid;

    m_expense_accrual_account_isValid = ::OpenAPI::fromJsonValue(m_expense_accrual_account, json[QString("expenseAccrualAccount")]);
    m_expense_accrual_account_isSet = !json[QString("expenseAccrualAccount")].isNull() && m_expense_accrual_account_isValid;

    m_expense_eu_account_isValid = ::OpenAPI::fromJsonValue(m_expense_eu_account, json[QString("expenseEuAccount")]);
    m_expense_eu_account_isSet = !json[QString("expenseEuAccount")].isNull() && m_expense_eu_account_isValid;

    m_expense_import_account_isValid = ::OpenAPI::fromJsonValue(m_expense_import_account, json[QString("expenseImportAccount")]);
    m_expense_import_account_isSet = !json[QString("expenseImportAccount")].isNull() && m_expense_import_account_isValid;

    m_expense_non_taxable_account_isValid = ::OpenAPI::fromJsonValue(m_expense_non_taxable_account, json[QString("expenseNonTaxableAccount")]);
    m_expense_non_taxable_account_isSet = !json[QString("expenseNonTaxableAccount")].isNull() && m_expense_non_taxable_account_isValid;

    m_expense_subaccount_isValid = ::OpenAPI::fromJsonValue(m_expense_subaccount, json[QString("expenseSubaccount")]);
    m_expense_subaccount_isSet = !json[QString("expenseSubaccount")].isNull() && m_expense_subaccount_isValid;

    m_intrastat_isValid = ::OpenAPI::fromJsonValue(m_intrastat, json[QString("intrastat")]);
    m_intrastat_isSet = !json[QString("intrastat")].isNull() && m_intrastat_isValid;

    m_inventory_account_isValid = ::OpenAPI::fromJsonValue(m_inventory_account, json[QString("inventoryAccount")]);
    m_inventory_account_isSet = !json[QString("inventoryAccount")].isNull() && m_inventory_account_isValid;

    m_inventory_number_isValid = ::OpenAPI::fromJsonValue(m_inventory_number, json[QString("inventoryNumber")]);
    m_inventory_number_isSet = !json[QString("inventoryNumber")].isNull() && m_inventory_number_isValid;

    m_item_class_isValid = ::OpenAPI::fromJsonValue(m_item_class, json[QString("itemClass")]);
    m_item_class_isSet = !json[QString("itemClass")].isNull() && m_item_class_isValid;

    m_kit_item_isValid = ::OpenAPI::fromJsonValue(m_kit_item, json[QString("kitItem")]);
    m_kit_item_isSet = !json[QString("kitItem")].isNull() && m_kit_item_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_packaging_isValid = ::OpenAPI::fromJsonValue(m_packaging, json[QString("packaging")]);
    m_packaging_isSet = !json[QString("packaging")].isNull() && m_packaging_isValid;

    m_posting_class_isValid = ::OpenAPI::fromJsonValue(m_posting_class, json[QString("postingClass")]);
    m_posting_class_isSet = !json[QString("postingClass")].isNull() && m_posting_class_isValid;

    m_purchase_unit_isValid = ::OpenAPI::fromJsonValue(m_purchase_unit, json[QString("purchaseUnit")]);
    m_purchase_unit_isSet = !json[QString("purchaseUnit")].isNull() && m_purchase_unit_isValid;

    m_sales_account_isValid = ::OpenAPI::fromJsonValue(m_sales_account, json[QString("salesAccount")]);
    m_sales_account_isSet = !json[QString("salesAccount")].isNull() && m_sales_account_isValid;

    m_sales_eu_account_isValid = ::OpenAPI::fromJsonValue(m_sales_eu_account, json[QString("salesEuAccount")]);
    m_sales_eu_account_isSet = !json[QString("salesEuAccount")].isNull() && m_sales_eu_account_isValid;

    m_sales_export_account_isValid = ::OpenAPI::fromJsonValue(m_sales_export_account, json[QString("salesExportAccount")]);
    m_sales_export_account_isSet = !json[QString("salesExportAccount")].isNull() && m_sales_export_account_isValid;

    m_sales_non_taxable_account_isValid = ::OpenAPI::fromJsonValue(m_sales_non_taxable_account, json[QString("salesNonTaxableAccount")]);
    m_sales_non_taxable_account_isSet = !json[QString("salesNonTaxableAccount")].isNull() && m_sales_non_taxable_account_isValid;

    m_sales_subaccount_isValid = ::OpenAPI::fromJsonValue(m_sales_subaccount, json[QString("salesSubaccount")]);
    m_sales_subaccount_isSet = !json[QString("salesSubaccount")].isNull() && m_sales_subaccount_isValid;

    m_sales_unit_isValid = ::OpenAPI::fromJsonValue(m_sales_unit, json[QString("salesUnit")]);
    m_sales_unit_isSet = !json[QString("salesUnit")].isNull() && m_sales_unit_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supplier_details_isValid = ::OpenAPI::fromJsonValue(m_supplier_details, json[QString("supplierDetails")]);
    m_supplier_details_isSet = !json[QString("supplierDetails")].isNull() && m_supplier_details_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vat_code_isValid = ::OpenAPI::fromJsonValue(m_vat_code, json[QString("vatCode")]);
    m_vat_code_isSet = !json[QString("vatCode")].isNull() && m_vat_code_isValid;
}

QString OAIInventoryUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_lines.size() > 0) {
        obj.insert(QString("attributeLines"), ::OpenAPI::toJsonValue(m_attribute_lines));
    }
    if (m_base_unit.isSet()) {
        obj.insert(QString("baseUnit"), ::OpenAPI::toJsonValue(m_base_unit));
    }
    if (m_body.isSet()) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_cogs_account.isSet()) {
        obj.insert(QString("cogsAccount"), ::OpenAPI::toJsonValue(m_cogs_account));
    }
    if (m_cogs_subaccount.size() > 0) {
        obj.insert(QString("cogsSubaccount"), ::OpenAPI::toJsonValue(m_cogs_subaccount));
    }
    if (m_default_issue_from.isSet()) {
        obj.insert(QString("defaultIssueFrom"), ::OpenAPI::toJsonValue(m_default_issue_from));
    }
    if (m_default_price.isSet()) {
        obj.insert(QString("defaultPrice"), ::OpenAPI::toJsonValue(m_default_price));
    }
    if (m_default_receipt_to.isSet()) {
        obj.insert(QString("defaultReceiptTo"), ::OpenAPI::toJsonValue(m_default_receipt_to));
    }
    if (m_default_warehouse.isSet()) {
        obj.insert(QString("defaultWarehouse"), ::OpenAPI::toJsonValue(m_default_warehouse));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expense_account.isSet()) {
        obj.insert(QString("expenseAccount"), ::OpenAPI::toJsonValue(m_expense_account));
    }
    if (m_expense_accrual_account.isSet()) {
        obj.insert(QString("expenseAccrualAccount"), ::OpenAPI::toJsonValue(m_expense_accrual_account));
    }
    if (m_expense_eu_account.isSet()) {
        obj.insert(QString("expenseEuAccount"), ::OpenAPI::toJsonValue(m_expense_eu_account));
    }
    if (m_expense_import_account.isSet()) {
        obj.insert(QString("expenseImportAccount"), ::OpenAPI::toJsonValue(m_expense_import_account));
    }
    if (m_expense_non_taxable_account.isSet()) {
        obj.insert(QString("expenseNonTaxableAccount"), ::OpenAPI::toJsonValue(m_expense_non_taxable_account));
    }
    if (m_expense_subaccount.size() > 0) {
        obj.insert(QString("expenseSubaccount"), ::OpenAPI::toJsonValue(m_expense_subaccount));
    }
    if (m_intrastat.isSet()) {
        obj.insert(QString("intrastat"), ::OpenAPI::toJsonValue(m_intrastat));
    }
    if (m_inventory_account.isSet()) {
        obj.insert(QString("inventoryAccount"), ::OpenAPI::toJsonValue(m_inventory_account));
    }
    if (m_inventory_number.isSet()) {
        obj.insert(QString("inventoryNumber"), ::OpenAPI::toJsonValue(m_inventory_number));
    }
    if (m_item_class.isSet()) {
        obj.insert(QString("itemClass"), ::OpenAPI::toJsonValue(m_item_class));
    }
    if (m_kit_item.isSet()) {
        obj.insert(QString("kitItem"), ::OpenAPI::toJsonValue(m_kit_item));
    }
    if (m_note.isSet()) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_packaging.isSet()) {
        obj.insert(QString("packaging"), ::OpenAPI::toJsonValue(m_packaging));
    }
    if (m_posting_class.isSet()) {
        obj.insert(QString("postingClass"), ::OpenAPI::toJsonValue(m_posting_class));
    }
    if (m_purchase_unit.isSet()) {
        obj.insert(QString("purchaseUnit"), ::OpenAPI::toJsonValue(m_purchase_unit));
    }
    if (m_sales_account.isSet()) {
        obj.insert(QString("salesAccount"), ::OpenAPI::toJsonValue(m_sales_account));
    }
    if (m_sales_eu_account.isSet()) {
        obj.insert(QString("salesEuAccount"), ::OpenAPI::toJsonValue(m_sales_eu_account));
    }
    if (m_sales_export_account.isSet()) {
        obj.insert(QString("salesExportAccount"), ::OpenAPI::toJsonValue(m_sales_export_account));
    }
    if (m_sales_non_taxable_account.isSet()) {
        obj.insert(QString("salesNonTaxableAccount"), ::OpenAPI::toJsonValue(m_sales_non_taxable_account));
    }
    if (m_sales_subaccount.size() > 0) {
        obj.insert(QString("salesSubaccount"), ::OpenAPI::toJsonValue(m_sales_subaccount));
    }
    if (m_sales_unit.isSet()) {
        obj.insert(QString("salesUnit"), ::OpenAPI::toJsonValue(m_sales_unit));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supplier_details.size() > 0) {
        obj.insert(QString("supplierDetails"), ::OpenAPI::toJsonValue(m_supplier_details));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vat_code.isSet()) {
        obj.insert(QString("vatCode"), ::OpenAPI::toJsonValue(m_vat_code));
    }
    return obj;
}

QList<OAIAttributeLineUpdateDto> OAIInventoryUpdateDto::getAttributeLines() const {
    return m_attribute_lines;
}
void OAIInventoryUpdateDto::setAttributeLines(const QList<OAIAttributeLineUpdateDto> &attribute_lines) {
    m_attribute_lines = attribute_lines;
    m_attribute_lines_isSet = true;
}

bool OAIInventoryUpdateDto::is_attribute_lines_Set() const{
    return m_attribute_lines_isSet;
}

bool OAIInventoryUpdateDto::is_attribute_lines_Valid() const{
    return m_attribute_lines_isValid;
}

OAIDtoValueOfString OAIInventoryUpdateDto::getBaseUnit() const {
    return m_base_unit;
}
void OAIInventoryUpdateDto::setBaseUnit(const OAIDtoValueOfString &base_unit) {
    m_base_unit = base_unit;
    m_base_unit_isSet = true;
}

bool OAIInventoryUpdateDto::is_base_unit_Set() const{
    return m_base_unit_isSet;
}

bool OAIInventoryUpdateDto::is_base_unit_Valid() const{
    return m_base_unit_isValid;
}

OAIDtoValueOfString OAIInventoryUpdateDto::getBody() const {
    return m_body;
}
void OAIInventoryUpdateDto::setBody(const OAIDtoValueOfString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIInventoryUpdateDto::is_body_Set() const{
    return m_body_isSet;
}

bool OAIInventoryUpdateDto::is_body_Valid() const{
    return m_body_isValid;
}

OAICogsAccountInInventoryUpdateDto OAIInventoryUpdateDto::getCogsAccount() const {
    return m_cogs_account;
}
void OAIInventoryUpdateDto::setCogsAccount(const OAICogsAccountInInventoryUpdateDto &cogs_account) {
    m_cogs_account = cogs_account;
    m_cogs_account_isSet = true;
}

bool OAIInventoryUpdateDto::is_cogs_account_Set() const{
    return m_cogs_account_isSet;
}

bool OAIInventoryUpdateDto::is_cogs_account_Valid() const{
    return m_cogs_account_isValid;
}

QList<OAISegmentUpdateDto> OAIInventoryUpdateDto::getCogsSubaccount() const {
    return m_cogs_subaccount;
}
void OAIInventoryUpdateDto::setCogsSubaccount(const QList<OAISegmentUpdateDto> &cogs_subaccount) {
    m_cogs_subaccount = cogs_subaccount;
    m_cogs_subaccount_isSet = true;
}

bool OAIInventoryUpdateDto::is_cogs_subaccount_Set() const{
    return m_cogs_subaccount_isSet;
}

bool OAIInventoryUpdateDto::is_cogs_subaccount_Valid() const{
    return m_cogs_subaccount_isValid;
}

OAIDefaultIssueFromInInventoryUpdateDto OAIInventoryUpdateDto::getDefaultIssueFrom() const {
    return m_default_issue_from;
}
void OAIInventoryUpdateDto::setDefaultIssueFrom(const OAIDefaultIssueFromInInventoryUpdateDto &default_issue_from) {
    m_default_issue_from = default_issue_from;
    m_default_issue_from_isSet = true;
}

bool OAIInventoryUpdateDto::is_default_issue_from_Set() const{
    return m_default_issue_from_isSet;
}

bool OAIInventoryUpdateDto::is_default_issue_from_Valid() const{
    return m_default_issue_from_isValid;
}

OAIDefaultPriceInInventoryUpdateDto OAIInventoryUpdateDto::getDefaultPrice() const {
    return m_default_price;
}
void OAIInventoryUpdateDto::setDefaultPrice(const OAIDefaultPriceInInventoryUpdateDto &default_price) {
    m_default_price = default_price;
    m_default_price_isSet = true;
}

bool OAIInventoryUpdateDto::is_default_price_Set() const{
    return m_default_price_isSet;
}

bool OAIInventoryUpdateDto::is_default_price_Valid() const{
    return m_default_price_isValid;
}

OAIDefaultReceiptToInInventoryUpdateDto OAIInventoryUpdateDto::getDefaultReceiptTo() const {
    return m_default_receipt_to;
}
void OAIInventoryUpdateDto::setDefaultReceiptTo(const OAIDefaultReceiptToInInventoryUpdateDto &default_receipt_to) {
    m_default_receipt_to = default_receipt_to;
    m_default_receipt_to_isSet = true;
}

bool OAIInventoryUpdateDto::is_default_receipt_to_Set() const{
    return m_default_receipt_to_isSet;
}

bool OAIInventoryUpdateDto::is_default_receipt_to_Valid() const{
    return m_default_receipt_to_isValid;
}

OAIDefaultWarehouseInInventoryUpdateDto OAIInventoryUpdateDto::getDefaultWarehouse() const {
    return m_default_warehouse;
}
void OAIInventoryUpdateDto::setDefaultWarehouse(const OAIDefaultWarehouseInInventoryUpdateDto &default_warehouse) {
    m_default_warehouse = default_warehouse;
    m_default_warehouse_isSet = true;
}

bool OAIInventoryUpdateDto::is_default_warehouse_Set() const{
    return m_default_warehouse_isSet;
}

bool OAIInventoryUpdateDto::is_default_warehouse_Valid() const{
    return m_default_warehouse_isValid;
}

OAIDtoValueOfString OAIInventoryUpdateDto::getDescription() const {
    return m_description;
}
void OAIInventoryUpdateDto::setDescription(const OAIDtoValueOfString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInventoryUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInventoryUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIExpenseAccountInInventoryUpdateDto OAIInventoryUpdateDto::getExpenseAccount() const {
    return m_expense_account;
}
void OAIInventoryUpdateDto::setExpenseAccount(const OAIExpenseAccountInInventoryUpdateDto &expense_account) {
    m_expense_account = expense_account;
    m_expense_account_isSet = true;
}

bool OAIInventoryUpdateDto::is_expense_account_Set() const{
    return m_expense_account_isSet;
}

bool OAIInventoryUpdateDto::is_expense_account_Valid() const{
    return m_expense_account_isValid;
}

OAIExpenseAccrualAccountInInventoryUpdateDto OAIInventoryUpdateDto::getExpenseAccrualAccount() const {
    return m_expense_accrual_account;
}
void OAIInventoryUpdateDto::setExpenseAccrualAccount(const OAIExpenseAccrualAccountInInventoryUpdateDto &expense_accrual_account) {
    m_expense_accrual_account = expense_accrual_account;
    m_expense_accrual_account_isSet = true;
}

bool OAIInventoryUpdateDto::is_expense_accrual_account_Set() const{
    return m_expense_accrual_account_isSet;
}

bool OAIInventoryUpdateDto::is_expense_accrual_account_Valid() const{
    return m_expense_accrual_account_isValid;
}

OAIDtoValueOfString OAIInventoryUpdateDto::getExpenseEuAccount() const {
    return m_expense_eu_account;
}
void OAIInventoryUpdateDto::setExpenseEuAccount(const OAIDtoValueOfString &expense_eu_account) {
    m_expense_eu_account = expense_eu_account;
    m_expense_eu_account_isSet = true;
}

bool OAIInventoryUpdateDto::is_expense_eu_account_Set() const{
    return m_expense_eu_account_isSet;
}

bool OAIInventoryUpdateDto::is_expense_eu_account_Valid() const{
    return m_expense_eu_account_isValid;
}

OAIDtoValueOfString OAIInventoryUpdateDto::getExpenseImportAccount() const {
    return m_expense_import_account;
}
void OAIInventoryUpdateDto::setExpenseImportAccount(const OAIDtoValueOfString &expense_import_account) {
    m_expense_import_account = expense_import_account;
    m_expense_import_account_isSet = true;
}

bool OAIInventoryUpdateDto::is_expense_import_account_Set() const{
    return m_expense_import_account_isSet;
}

bool OAIInventoryUpdateDto::is_expense_import_account_Valid() const{
    return m_expense_import_account_isValid;
}

OAIDtoValueOfString OAIInventoryUpdateDto::getExpenseNonTaxableAccount() const {
    return m_expense_non_taxable_account;
}
void OAIInventoryUpdateDto::setExpenseNonTaxableAccount(const OAIDtoValueOfString &expense_non_taxable_account) {
    m_expense_non_taxable_account = expense_non_taxable_account;
    m_expense_non_taxable_account_isSet = true;
}

bool OAIInventoryUpdateDto::is_expense_non_taxable_account_Set() const{
    return m_expense_non_taxable_account_isSet;
}

bool OAIInventoryUpdateDto::is_expense_non_taxable_account_Valid() const{
    return m_expense_non_taxable_account_isValid;
}

QList<OAISegmentUpdateDto> OAIInventoryUpdateDto::getExpenseSubaccount() const {
    return m_expense_subaccount;
}
void OAIInventoryUpdateDto::setExpenseSubaccount(const QList<OAISegmentUpdateDto> &expense_subaccount) {
    m_expense_subaccount = expense_subaccount;
    m_expense_subaccount_isSet = true;
}

bool OAIInventoryUpdateDto::is_expense_subaccount_Set() const{
    return m_expense_subaccount_isSet;
}

bool OAIInventoryUpdateDto::is_expense_subaccount_Valid() const{
    return m_expense_subaccount_isValid;
}

OAIIntrastatUpdateDto OAIInventoryUpdateDto::getIntrastat() const {
    return m_intrastat;
}
void OAIInventoryUpdateDto::setIntrastat(const OAIIntrastatUpdateDto &intrastat) {
    m_intrastat = intrastat;
    m_intrastat_isSet = true;
}

bool OAIInventoryUpdateDto::is_intrastat_Set() const{
    return m_intrastat_isSet;
}

bool OAIInventoryUpdateDto::is_intrastat_Valid() const{
    return m_intrastat_isValid;
}

OAIInventoryAccountInInventoryUpdateDto OAIInventoryUpdateDto::getInventoryAccount() const {
    return m_inventory_account;
}
void OAIInventoryUpdateDto::setInventoryAccount(const OAIInventoryAccountInInventoryUpdateDto &inventory_account) {
    m_inventory_account = inventory_account;
    m_inventory_account_isSet = true;
}

bool OAIInventoryUpdateDto::is_inventory_account_Set() const{
    return m_inventory_account_isSet;
}

bool OAIInventoryUpdateDto::is_inventory_account_Valid() const{
    return m_inventory_account_isValid;
}

OAIInventoryNumberInInventoryUpdateDto OAIInventoryUpdateDto::getInventoryNumber() const {
    return m_inventory_number;
}
void OAIInventoryUpdateDto::setInventoryNumber(const OAIInventoryNumberInInventoryUpdateDto &inventory_number) {
    m_inventory_number = inventory_number;
    m_inventory_number_isSet = true;
}

bool OAIInventoryUpdateDto::is_inventory_number_Set() const{
    return m_inventory_number_isSet;
}

bool OAIInventoryUpdateDto::is_inventory_number_Valid() const{
    return m_inventory_number_isValid;
}

OAIItemClassInInventoryUpdateDto OAIInventoryUpdateDto::getItemClass() const {
    return m_item_class;
}
void OAIInventoryUpdateDto::setItemClass(const OAIItemClassInInventoryUpdateDto &item_class) {
    m_item_class = item_class;
    m_item_class_isSet = true;
}

bool OAIInventoryUpdateDto::is_item_class_Set() const{
    return m_item_class_isSet;
}

bool OAIInventoryUpdateDto::is_item_class_Valid() const{
    return m_item_class_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIInventoryUpdateDto::getKitItem() const {
    return m_kit_item;
}
void OAIInventoryUpdateDto::setKitItem(const OAIDtoValueOfNullableOfBoolean &kit_item) {
    m_kit_item = kit_item;
    m_kit_item_isSet = true;
}

bool OAIInventoryUpdateDto::is_kit_item_Set() const{
    return m_kit_item_isSet;
}

bool OAIInventoryUpdateDto::is_kit_item_Valid() const{
    return m_kit_item_isValid;
}

OAIDtoValueOfString OAIInventoryUpdateDto::getNote() const {
    return m_note;
}
void OAIInventoryUpdateDto::setNote(const OAIDtoValueOfString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIInventoryUpdateDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAIInventoryUpdateDto::is_note_Valid() const{
    return m_note_isValid;
}

OAIPackagingUpdateDto OAIInventoryUpdateDto::getPackaging() const {
    return m_packaging;
}
void OAIInventoryUpdateDto::setPackaging(const OAIPackagingUpdateDto &packaging) {
    m_packaging = packaging;
    m_packaging_isSet = true;
}

bool OAIInventoryUpdateDto::is_packaging_Set() const{
    return m_packaging_isSet;
}

bool OAIInventoryUpdateDto::is_packaging_Valid() const{
    return m_packaging_isValid;
}

OAIPostingClassInInventoryUpdateDto OAIInventoryUpdateDto::getPostingClass() const {
    return m_posting_class;
}
void OAIInventoryUpdateDto::setPostingClass(const OAIPostingClassInInventoryUpdateDto &posting_class) {
    m_posting_class = posting_class;
    m_posting_class_isSet = true;
}

bool OAIInventoryUpdateDto::is_posting_class_Set() const{
    return m_posting_class_isSet;
}

bool OAIInventoryUpdateDto::is_posting_class_Valid() const{
    return m_posting_class_isValid;
}

OAIDtoValueOfString OAIInventoryUpdateDto::getPurchaseUnit() const {
    return m_purchase_unit;
}
void OAIInventoryUpdateDto::setPurchaseUnit(const OAIDtoValueOfString &purchase_unit) {
    m_purchase_unit = purchase_unit;
    m_purchase_unit_isSet = true;
}

bool OAIInventoryUpdateDto::is_purchase_unit_Set() const{
    return m_purchase_unit_isSet;
}

bool OAIInventoryUpdateDto::is_purchase_unit_Valid() const{
    return m_purchase_unit_isValid;
}

OAIDtoValueOfString OAIInventoryUpdateDto::getSalesAccount() const {
    return m_sales_account;
}
void OAIInventoryUpdateDto::setSalesAccount(const OAIDtoValueOfString &sales_account) {
    m_sales_account = sales_account;
    m_sales_account_isSet = true;
}

bool OAIInventoryUpdateDto::is_sales_account_Set() const{
    return m_sales_account_isSet;
}

bool OAIInventoryUpdateDto::is_sales_account_Valid() const{
    return m_sales_account_isValid;
}

OAIDtoValueOfString OAIInventoryUpdateDto::getSalesEuAccount() const {
    return m_sales_eu_account;
}
void OAIInventoryUpdateDto::setSalesEuAccount(const OAIDtoValueOfString &sales_eu_account) {
    m_sales_eu_account = sales_eu_account;
    m_sales_eu_account_isSet = true;
}

bool OAIInventoryUpdateDto::is_sales_eu_account_Set() const{
    return m_sales_eu_account_isSet;
}

bool OAIInventoryUpdateDto::is_sales_eu_account_Valid() const{
    return m_sales_eu_account_isValid;
}

OAIDtoValueOfString OAIInventoryUpdateDto::getSalesExportAccount() const {
    return m_sales_export_account;
}
void OAIInventoryUpdateDto::setSalesExportAccount(const OAIDtoValueOfString &sales_export_account) {
    m_sales_export_account = sales_export_account;
    m_sales_export_account_isSet = true;
}

bool OAIInventoryUpdateDto::is_sales_export_account_Set() const{
    return m_sales_export_account_isSet;
}

bool OAIInventoryUpdateDto::is_sales_export_account_Valid() const{
    return m_sales_export_account_isValid;
}

OAIDtoValueOfString OAIInventoryUpdateDto::getSalesNonTaxableAccount() const {
    return m_sales_non_taxable_account;
}
void OAIInventoryUpdateDto::setSalesNonTaxableAccount(const OAIDtoValueOfString &sales_non_taxable_account) {
    m_sales_non_taxable_account = sales_non_taxable_account;
    m_sales_non_taxable_account_isSet = true;
}

bool OAIInventoryUpdateDto::is_sales_non_taxable_account_Set() const{
    return m_sales_non_taxable_account_isSet;
}

bool OAIInventoryUpdateDto::is_sales_non_taxable_account_Valid() const{
    return m_sales_non_taxable_account_isValid;
}

QList<OAISegmentUpdateDto> OAIInventoryUpdateDto::getSalesSubaccount() const {
    return m_sales_subaccount;
}
void OAIInventoryUpdateDto::setSalesSubaccount(const QList<OAISegmentUpdateDto> &sales_subaccount) {
    m_sales_subaccount = sales_subaccount;
    m_sales_subaccount_isSet = true;
}

bool OAIInventoryUpdateDto::is_sales_subaccount_Set() const{
    return m_sales_subaccount_isSet;
}

bool OAIInventoryUpdateDto::is_sales_subaccount_Valid() const{
    return m_sales_subaccount_isValid;
}

OAIDtoValueOfString OAIInventoryUpdateDto::getSalesUnit() const {
    return m_sales_unit;
}
void OAIInventoryUpdateDto::setSalesUnit(const OAIDtoValueOfString &sales_unit) {
    m_sales_unit = sales_unit;
    m_sales_unit_isSet = true;
}

bool OAIInventoryUpdateDto::is_sales_unit_Set() const{
    return m_sales_unit_isSet;
}

bool OAIInventoryUpdateDto::is_sales_unit_Valid() const{
    return m_sales_unit_isValid;
}

OAIDtoValueOfInventoryStatus OAIInventoryUpdateDto::getStatus() const {
    return m_status;
}
void OAIInventoryUpdateDto::setStatus(const OAIDtoValueOfInventoryStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInventoryUpdateDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInventoryUpdateDto::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAISupplierDetailsDto> OAIInventoryUpdateDto::getSupplierDetails() const {
    return m_supplier_details;
}
void OAIInventoryUpdateDto::setSupplierDetails(const QList<OAISupplierDetailsDto> &supplier_details) {
    m_supplier_details = supplier_details;
    m_supplier_details_isSet = true;
}

bool OAIInventoryUpdateDto::is_supplier_details_Set() const{
    return m_supplier_details_isSet;
}

bool OAIInventoryUpdateDto::is_supplier_details_Valid() const{
    return m_supplier_details_isValid;
}

OAIDtoValueOfInventoryType OAIInventoryUpdateDto::getType() const {
    return m_type;
}
void OAIInventoryUpdateDto::setType(const OAIDtoValueOfInventoryType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInventoryUpdateDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInventoryUpdateDto::is_type_Valid() const{
    return m_type_isValid;
}

OAIVatCodeInInventoryUpdateDto OAIInventoryUpdateDto::getVatCode() const {
    return m_vat_code;
}
void OAIInventoryUpdateDto::setVatCode(const OAIVatCodeInInventoryUpdateDto &vat_code) {
    m_vat_code = vat_code;
    m_vat_code_isSet = true;
}

bool OAIInventoryUpdateDto::is_vat_code_Set() const{
    return m_vat_code_isSet;
}

bool OAIInventoryUpdateDto::is_vat_code_Valid() const{
    return m_vat_code_isValid;
}

bool OAIInventoryUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cogs_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cogs_subaccount.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_issue_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_receipt_to.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_warehouse.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_accrual_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_eu_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_import_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_non_taxable_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_subaccount.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_intrastat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kit_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_packaging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_posting_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_eu_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_export_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_non_taxable_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_subaccount.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_code.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
