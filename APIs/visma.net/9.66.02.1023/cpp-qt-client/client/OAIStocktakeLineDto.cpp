/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStocktakeLineDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStocktakeLineDto::OAIStocktakeLineDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStocktakeLineDto::OAIStocktakeLineDto() {
    this->initializeModel();
}

OAIStocktakeLineDto::~OAIStocktakeLineDto() {}

void OAIStocktakeLineDto::initializeModel() {

    m_book_quantity_isSet = false;
    m_book_quantity_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_ext_variance_cost_isSet = false;
    m_ext_variance_cost_isValid = false;

    m_inventory_isSet = false;
    m_inventory_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_line_nbr_isSet = false;
    m_line_nbr_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_lot_serial_nbr_isSet = false;
    m_lot_serial_nbr_isValid = false;

    m_physical_quantity_isSet = false;
    m_physical_quantity_isValid = false;

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tag_nbr_isSet = false;
    m_tag_nbr_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_variance_quantity_isSet = false;
    m_variance_quantity_isValid = false;

    m_warehouse_isSet = false;
    m_warehouse_isValid = false;
}

void OAIStocktakeLineDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStocktakeLineDto::fromJsonObject(QJsonObject json) {

    m_book_quantity_isValid = ::OpenAPI::fromJsonValue(m_book_quantity, json[QString("bookQuantity")]);
    m_book_quantity_isSet = !json[QString("bookQuantity")].isNull() && m_book_quantity_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_ext_variance_cost_isValid = ::OpenAPI::fromJsonValue(m_ext_variance_cost, json[QString("extVarianceCost")]);
    m_ext_variance_cost_isSet = !json[QString("extVarianceCost")].isNull() && m_ext_variance_cost_isValid;

    m_inventory_isValid = ::OpenAPI::fromJsonValue(m_inventory, json[QString("inventory")]);
    m_inventory_isSet = !json[QString("inventory")].isNull() && m_inventory_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_line_nbr, json[QString("lineNbr")]);
    m_line_nbr_isSet = !json[QString("lineNbr")].isNull() && m_line_nbr_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_lot_serial_nbr_isValid = ::OpenAPI::fromJsonValue(m_lot_serial_nbr, json[QString("lotSerialNbr")]);
    m_lot_serial_nbr_isSet = !json[QString("lotSerialNbr")].isNull() && m_lot_serial_nbr_isValid;

    m_physical_quantity_isValid = ::OpenAPI::fromJsonValue(m_physical_quantity, json[QString("physicalQuantity")]);
    m_physical_quantity_isSet = !json[QString("physicalQuantity")].isNull() && m_physical_quantity_isValid;

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("reasonCode")]);
    m_reason_code_isSet = !json[QString("reasonCode")].isNull() && m_reason_code_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tag_nbr_isValid = ::OpenAPI::fromJsonValue(m_tag_nbr, json[QString("tagNbr")]);
    m_tag_nbr_isSet = !json[QString("tagNbr")].isNull() && m_tag_nbr_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_variance_quantity_isValid = ::OpenAPI::fromJsonValue(m_variance_quantity, json[QString("varianceQuantity")]);
    m_variance_quantity_isSet = !json[QString("varianceQuantity")].isNull() && m_variance_quantity_isValid;

    m_warehouse_isValid = ::OpenAPI::fromJsonValue(m_warehouse, json[QString("warehouse")]);
    m_warehouse_isSet = !json[QString("warehouse")].isNull() && m_warehouse_isValid;
}

QString OAIStocktakeLineDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStocktakeLineDto::asJsonObject() const {
    QJsonObject obj;
    if (m_book_quantity_isSet) {
        obj.insert(QString("bookQuantity"), ::OpenAPI::toJsonValue(m_book_quantity));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_ext_variance_cost_isSet) {
        obj.insert(QString("extVarianceCost"), ::OpenAPI::toJsonValue(m_ext_variance_cost));
    }
    if (m_inventory.isSet()) {
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(m_inventory));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_line_nbr_isSet) {
        obj.insert(QString("lineNbr"), ::OpenAPI::toJsonValue(m_line_nbr));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_lot_serial_nbr_isSet) {
        obj.insert(QString("lotSerialNbr"), ::OpenAPI::toJsonValue(m_lot_serial_nbr));
    }
    if (m_physical_quantity_isSet) {
        obj.insert(QString("physicalQuantity"), ::OpenAPI::toJsonValue(m_physical_quantity));
    }
    if (m_reason_code_isSet) {
        obj.insert(QString("reasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tag_nbr_isSet) {
        obj.insert(QString("tagNbr"), ::OpenAPI::toJsonValue(m_tag_nbr));
    }
    if (m_unit_cost_isSet) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_variance_quantity_isSet) {
        obj.insert(QString("varianceQuantity"), ::OpenAPI::toJsonValue(m_variance_quantity));
    }
    if (m_warehouse.isSet()) {
        obj.insert(QString("warehouse"), ::OpenAPI::toJsonValue(m_warehouse));
    }
    return obj;
}

double OAIStocktakeLineDto::getBookQuantity() const {
    return m_book_quantity;
}
void OAIStocktakeLineDto::setBookQuantity(const double &book_quantity) {
    m_book_quantity = book_quantity;
    m_book_quantity_isSet = true;
}

bool OAIStocktakeLineDto::is_book_quantity_Set() const{
    return m_book_quantity_isSet;
}

bool OAIStocktakeLineDto::is_book_quantity_Valid() const{
    return m_book_quantity_isValid;
}

QDateTime OAIStocktakeLineDto::getExpirationDate() const {
    return m_expiration_date;
}
void OAIStocktakeLineDto::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIStocktakeLineDto::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIStocktakeLineDto::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

double OAIStocktakeLineDto::getExtVarianceCost() const {
    return m_ext_variance_cost;
}
void OAIStocktakeLineDto::setExtVarianceCost(const double &ext_variance_cost) {
    m_ext_variance_cost = ext_variance_cost;
    m_ext_variance_cost_isSet = true;
}

bool OAIStocktakeLineDto::is_ext_variance_cost_Set() const{
    return m_ext_variance_cost_isSet;
}

bool OAIStocktakeLineDto::is_ext_variance_cost_Valid() const{
    return m_ext_variance_cost_isValid;
}

OAIInventoryInStocktakeLineDto OAIStocktakeLineDto::getInventory() const {
    return m_inventory;
}
void OAIStocktakeLineDto::setInventory(const OAIInventoryInStocktakeLineDto &inventory) {
    m_inventory = inventory;
    m_inventory_isSet = true;
}

bool OAIStocktakeLineDto::is_inventory_Set() const{
    return m_inventory_isSet;
}

bool OAIStocktakeLineDto::is_inventory_Valid() const{
    return m_inventory_isValid;
}

QDateTime OAIStocktakeLineDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIStocktakeLineDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIStocktakeLineDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIStocktakeLineDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

qint32 OAIStocktakeLineDto::getLineNbr() const {
    return m_line_nbr;
}
void OAIStocktakeLineDto::setLineNbr(const qint32 &line_nbr) {
    m_line_nbr = line_nbr;
    m_line_nbr_isSet = true;
}

bool OAIStocktakeLineDto::is_line_nbr_Set() const{
    return m_line_nbr_isSet;
}

bool OAIStocktakeLineDto::is_line_nbr_Valid() const{
    return m_line_nbr_isValid;
}

OAILocationInStocktakeLineDto OAIStocktakeLineDto::getLocation() const {
    return m_location;
}
void OAIStocktakeLineDto::setLocation(const OAILocationInStocktakeLineDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIStocktakeLineDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIStocktakeLineDto::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIStocktakeLineDto::getLotSerialNbr() const {
    return m_lot_serial_nbr;
}
void OAIStocktakeLineDto::setLotSerialNbr(const QString &lot_serial_nbr) {
    m_lot_serial_nbr = lot_serial_nbr;
    m_lot_serial_nbr_isSet = true;
}

bool OAIStocktakeLineDto::is_lot_serial_nbr_Set() const{
    return m_lot_serial_nbr_isSet;
}

bool OAIStocktakeLineDto::is_lot_serial_nbr_Valid() const{
    return m_lot_serial_nbr_isValid;
}

double OAIStocktakeLineDto::getPhysicalQuantity() const {
    return m_physical_quantity;
}
void OAIStocktakeLineDto::setPhysicalQuantity(const double &physical_quantity) {
    m_physical_quantity = physical_quantity;
    m_physical_quantity_isSet = true;
}

bool OAIStocktakeLineDto::is_physical_quantity_Set() const{
    return m_physical_quantity_isSet;
}

bool OAIStocktakeLineDto::is_physical_quantity_Valid() const{
    return m_physical_quantity_isValid;
}

QString OAIStocktakeLineDto::getReasonCode() const {
    return m_reason_code;
}
void OAIStocktakeLineDto::setReasonCode(const QString &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAIStocktakeLineDto::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAIStocktakeLineDto::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

QString OAIStocktakeLineDto::getStatus() const {
    return m_status;
}
void OAIStocktakeLineDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStocktakeLineDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStocktakeLineDto::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIStocktakeLineDto::getTagNbr() const {
    return m_tag_nbr;
}
void OAIStocktakeLineDto::setTagNbr(const qint32 &tag_nbr) {
    m_tag_nbr = tag_nbr;
    m_tag_nbr_isSet = true;
}

bool OAIStocktakeLineDto::is_tag_nbr_Set() const{
    return m_tag_nbr_isSet;
}

bool OAIStocktakeLineDto::is_tag_nbr_Valid() const{
    return m_tag_nbr_isValid;
}

double OAIStocktakeLineDto::getUnitCost() const {
    return m_unit_cost;
}
void OAIStocktakeLineDto::setUnitCost(const double &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAIStocktakeLineDto::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAIStocktakeLineDto::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

double OAIStocktakeLineDto::getVarianceQuantity() const {
    return m_variance_quantity;
}
void OAIStocktakeLineDto::setVarianceQuantity(const double &variance_quantity) {
    m_variance_quantity = variance_quantity;
    m_variance_quantity_isSet = true;
}

bool OAIStocktakeLineDto::is_variance_quantity_Set() const{
    return m_variance_quantity_isSet;
}

bool OAIStocktakeLineDto::is_variance_quantity_Valid() const{
    return m_variance_quantity_isValid;
}

OAIWarehouseInStocktakeLineDto OAIStocktakeLineDto::getWarehouse() const {
    return m_warehouse;
}
void OAIStocktakeLineDto::setWarehouse(const OAIWarehouseInStocktakeLineDto &warehouse) {
    m_warehouse = warehouse;
    m_warehouse_isSet = true;
}

bool OAIStocktakeLineDto::is_warehouse_Set() const{
    return m_warehouse_isSet;
}

bool OAIStocktakeLineDto::is_warehouse_Valid() const{
    return m_warehouse_isValid;
}

bool OAIStocktakeLineDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_book_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ext_variance_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_serial_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variance_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStocktakeLineDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
