/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClassAttributeDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClassAttributeDto::OAIClassAttributeDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClassAttributeDto::OAIClassAttributeDto() {
    this->initializeModel();
}

OAIClassAttributeDto::~OAIClassAttributeDto() {}

void OAIClassAttributeDto::initializeModel() {

    m_attribute_id_isSet = false;
    m_attribute_id_isValid = false;

    m_attribute_type_isSet = false;
    m_attribute_type_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;
}

void OAIClassAttributeDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClassAttributeDto::fromJsonObject(QJsonObject json) {

    m_attribute_id_isValid = ::OpenAPI::fromJsonValue(m_attribute_id, json[QString("attributeId")]);
    m_attribute_id_isSet = !json[QString("attributeId")].isNull() && m_attribute_id_isValid;

    m_attribute_type_isValid = ::OpenAPI::fromJsonValue(m_attribute_type, json[QString("attributeType")]);
    m_attribute_type_isSet = !json[QString("attributeType")].isNull() && m_attribute_type_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;
}

QString OAIClassAttributeDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClassAttributeDto::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_id_isSet) {
        obj.insert(QString("attributeId"), ::OpenAPI::toJsonValue(m_attribute_id));
    }
    if (m_attribute_type_isSet) {
        obj.insert(QString("attributeType"), ::OpenAPI::toJsonValue(m_attribute_type));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    return obj;
}

QString OAIClassAttributeDto::getAttributeId() const {
    return m_attribute_id;
}
void OAIClassAttributeDto::setAttributeId(const QString &attribute_id) {
    m_attribute_id = attribute_id;
    m_attribute_id_isSet = true;
}

bool OAIClassAttributeDto::is_attribute_id_Set() const{
    return m_attribute_id_isSet;
}

bool OAIClassAttributeDto::is_attribute_id_Valid() const{
    return m_attribute_id_isValid;
}

QString OAIClassAttributeDto::getAttributeType() const {
    return m_attribute_type;
}
void OAIClassAttributeDto::setAttributeType(const QString &attribute_type) {
    m_attribute_type = attribute_type;
    m_attribute_type_isSet = true;
}

bool OAIClassAttributeDto::is_attribute_type_Set() const{
    return m_attribute_type_isSet;
}

bool OAIClassAttributeDto::is_attribute_type_Valid() const{
    return m_attribute_type_isValid;
}

QString OAIClassAttributeDto::getDefaultValue() const {
    return m_default_value;
}
void OAIClassAttributeDto::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIClassAttributeDto::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIClassAttributeDto::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAIClassAttributeDto::getDescription() const {
    return m_description;
}
void OAIClassAttributeDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIClassAttributeDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIClassAttributeDto::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIClassAttributeDetailDto> OAIClassAttributeDto::getDetails() const {
    return m_details;
}
void OAIClassAttributeDto::setDetails(const QList<OAIClassAttributeDetailDto> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIClassAttributeDto::is_details_Set() const{
    return m_details_isSet;
}

bool OAIClassAttributeDto::is_details_Valid() const{
    return m_details_isValid;
}

bool OAIClassAttributeDto::isRequired() const {
    return m_required;
}
void OAIClassAttributeDto::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIClassAttributeDto::is_required_Set() const{
    return m_required_isSet;
}

bool OAIClassAttributeDto::is_required_Valid() const{
    return m_required_isValid;
}

qint32 OAIClassAttributeDto::getSortOrder() const {
    return m_sort_order;
}
void OAIClassAttributeDto::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIClassAttributeDto::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIClassAttributeDto::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAIClassAttributeDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClassAttributeDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
