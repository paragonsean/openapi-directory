/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectUpdateDto::OAIProjectUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectUpdateDto::OAIProjectUpdateDto() {
    this->initializeModel();
}

OAIProjectUpdateDto::~OAIProjectUpdateDto() {}

void OAIProjectUpdateDto::initializeModel() {

    m_allocation_rule_isSet = false;
    m_allocation_rule_isValid = false;

    m_auto_allocate_isSet = false;
    m_auto_allocate_isValid = false;

    m_automatic_release_ar_doc_isSet = false;
    m_automatic_release_ar_doc_isValid = false;

    m_billing_period_isSet = false;
    m_billing_period_isValid = false;

    m_billing_rule_isSet = false;
    m_billing_rule_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_customer_location_isSet = false;
    m_customer_location_isValid = false;

    m_def_account_isSet = false;
    m_def_account_isValid = false;

    m_def_accrual_account_isSet = false;
    m_def_accrual_account_isValid = false;

    m_def_accrual_sub_isSet = false;
    m_def_accrual_sub_isValid = false;

    m_def_sub_isSet = false;
    m_def_sub_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_employees_isSet = false;
    m_employees_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_internal_id_isSet = false;
    m_internal_id_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_project_manager_internal_id_isSet = false;
    m_project_manager_internal_id_isValid = false;

    m_project_manger_isSet = false;
    m_project_manger_isValid = false;

    m_rate_table_isSet = false;
    m_rate_table_isValid = false;

    m_restric_employees_isSet = false;
    m_restric_employees_isValid = false;

    m_restric_equipment_isSet = false;
    m_restric_equipment_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tasks_isSet = false;
    m_tasks_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIProjectUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectUpdateDto::fromJsonObject(QJsonObject json) {

    m_allocation_rule_isValid = ::OpenAPI::fromJsonValue(m_allocation_rule, json[QString("allocationRule")]);
    m_allocation_rule_isSet = !json[QString("allocationRule")].isNull() && m_allocation_rule_isValid;

    m_auto_allocate_isValid = ::OpenAPI::fromJsonValue(m_auto_allocate, json[QString("autoAllocate")]);
    m_auto_allocate_isSet = !json[QString("autoAllocate")].isNull() && m_auto_allocate_isValid;

    m_automatic_release_ar_doc_isValid = ::OpenAPI::fromJsonValue(m_automatic_release_ar_doc, json[QString("automaticReleaseArDoc")]);
    m_automatic_release_ar_doc_isSet = !json[QString("automaticReleaseArDoc")].isNull() && m_automatic_release_ar_doc_isValid;

    m_billing_period_isValid = ::OpenAPI::fromJsonValue(m_billing_period, json[QString("billingPeriod")]);
    m_billing_period_isSet = !json[QString("billingPeriod")].isNull() && m_billing_period_isValid;

    m_billing_rule_isValid = ::OpenAPI::fromJsonValue(m_billing_rule, json[QString("billingRule")]);
    m_billing_rule_isSet = !json[QString("billingRule")].isNull() && m_billing_rule_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_customer_location_isValid = ::OpenAPI::fromJsonValue(m_customer_location, json[QString("customerLocation")]);
    m_customer_location_isSet = !json[QString("customerLocation")].isNull() && m_customer_location_isValid;

    m_def_account_isValid = ::OpenAPI::fromJsonValue(m_def_account, json[QString("defAccount")]);
    m_def_account_isSet = !json[QString("defAccount")].isNull() && m_def_account_isValid;

    m_def_accrual_account_isValid = ::OpenAPI::fromJsonValue(m_def_accrual_account, json[QString("defAccrualAccount")]);
    m_def_accrual_account_isSet = !json[QString("defAccrualAccount")].isNull() && m_def_accrual_account_isValid;

    m_def_accrual_sub_isValid = ::OpenAPI::fromJsonValue(m_def_accrual_sub, json[QString("defAccrualSub")]);
    m_def_accrual_sub_isSet = !json[QString("defAccrualSub")].isNull() && m_def_accrual_sub_isValid;

    m_def_sub_isValid = ::OpenAPI::fromJsonValue(m_def_sub, json[QString("defSub")]);
    m_def_sub_isSet = !json[QString("defSub")].isNull() && m_def_sub_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_employees_isValid = ::OpenAPI::fromJsonValue(m_employees, json[QString("employees")]);
    m_employees_isSet = !json[QString("employees")].isNull() && m_employees_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_internal_id_isValid = ::OpenAPI::fromJsonValue(m_internal_id, json[QString("internalID")]);
    m_internal_id_isSet = !json[QString("internalID")].isNull() && m_internal_id_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectID")]);
    m_project_id_isSet = !json[QString("projectID")].isNull() && m_project_id_isValid;

    m_project_manager_internal_id_isValid = ::OpenAPI::fromJsonValue(m_project_manager_internal_id, json[QString("projectManagerInternalId")]);
    m_project_manager_internal_id_isSet = !json[QString("projectManagerInternalId")].isNull() && m_project_manager_internal_id_isValid;

    m_project_manger_isValid = ::OpenAPI::fromJsonValue(m_project_manger, json[QString("projectManger")]);
    m_project_manger_isSet = !json[QString("projectManger")].isNull() && m_project_manger_isValid;

    m_rate_table_isValid = ::OpenAPI::fromJsonValue(m_rate_table, json[QString("rateTable")]);
    m_rate_table_isSet = !json[QString("rateTable")].isNull() && m_rate_table_isValid;

    m_restric_employees_isValid = ::OpenAPI::fromJsonValue(m_restric_employees, json[QString("restricEmployees")]);
    m_restric_employees_isSet = !json[QString("restricEmployees")].isNull() && m_restric_employees_isValid;

    m_restric_equipment_isValid = ::OpenAPI::fromJsonValue(m_restric_equipment, json[QString("restricEquipment")]);
    m_restric_equipment_isSet = !json[QString("restricEquipment")].isNull() && m_restric_equipment_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tasks_isValid = ::OpenAPI::fromJsonValue(m_tasks, json[QString("tasks")]);
    m_tasks_isSet = !json[QString("tasks")].isNull() && m_tasks_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIProjectUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_allocation_rule.isSet()) {
        obj.insert(QString("allocationRule"), ::OpenAPI::toJsonValue(m_allocation_rule));
    }
    if (m_auto_allocate.isSet()) {
        obj.insert(QString("autoAllocate"), ::OpenAPI::toJsonValue(m_auto_allocate));
    }
    if (m_automatic_release_ar_doc.isSet()) {
        obj.insert(QString("automaticReleaseArDoc"), ::OpenAPI::toJsonValue(m_automatic_release_ar_doc));
    }
    if (m_billing_period.isSet()) {
        obj.insert(QString("billingPeriod"), ::OpenAPI::toJsonValue(m_billing_period));
    }
    if (m_billing_rule.isSet()) {
        obj.insert(QString("billingRule"), ::OpenAPI::toJsonValue(m_billing_rule));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_customer_location.isSet()) {
        obj.insert(QString("customerLocation"), ::OpenAPI::toJsonValue(m_customer_location));
    }
    if (m_def_account.isSet()) {
        obj.insert(QString("defAccount"), ::OpenAPI::toJsonValue(m_def_account));
    }
    if (m_def_accrual_account.isSet()) {
        obj.insert(QString("defAccrualAccount"), ::OpenAPI::toJsonValue(m_def_accrual_account));
    }
    if (m_def_accrual_sub.size() > 0) {
        obj.insert(QString("defAccrualSub"), ::OpenAPI::toJsonValue(m_def_accrual_sub));
    }
    if (m_def_sub.size() > 0) {
        obj.insert(QString("defSub"), ::OpenAPI::toJsonValue(m_def_sub));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_employees.size() > 0) {
        obj.insert(QString("employees"), ::OpenAPI::toJsonValue(m_employees));
    }
    if (m_end_date.isSet()) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_hold.isSet()) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_internal_id.isSet()) {
        obj.insert(QString("internalID"), ::OpenAPI::toJsonValue(m_internal_id));
    }
    if (m_project_id.isSet()) {
        obj.insert(QString("projectID"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_project_manager_internal_id.isSet()) {
        obj.insert(QString("projectManagerInternalId"), ::OpenAPI::toJsonValue(m_project_manager_internal_id));
    }
    if (m_project_manger.isSet()) {
        obj.insert(QString("projectManger"), ::OpenAPI::toJsonValue(m_project_manger));
    }
    if (m_rate_table.isSet()) {
        obj.insert(QString("rateTable"), ::OpenAPI::toJsonValue(m_rate_table));
    }
    if (m_restric_employees.isSet()) {
        obj.insert(QString("restricEmployees"), ::OpenAPI::toJsonValue(m_restric_employees));
    }
    if (m_restric_equipment.isSet()) {
        obj.insert(QString("restricEquipment"), ::OpenAPI::toJsonValue(m_restric_equipment));
    }
    if (m_start_date.isSet()) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tasks.size() > 0) {
        obj.insert(QString("tasks"), ::OpenAPI::toJsonValue(m_tasks));
    }
    if (m_r_template.isSet()) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_visibility.isSet()) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

OAIDtoValueOfString OAIProjectUpdateDto::getAllocationRule() const {
    return m_allocation_rule;
}
void OAIProjectUpdateDto::setAllocationRule(const OAIDtoValueOfString &allocation_rule) {
    m_allocation_rule = allocation_rule;
    m_allocation_rule_isSet = true;
}

bool OAIProjectUpdateDto::is_allocation_rule_Set() const{
    return m_allocation_rule_isSet;
}

bool OAIProjectUpdateDto::is_allocation_rule_Valid() const{
    return m_allocation_rule_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIProjectUpdateDto::getAutoAllocate() const {
    return m_auto_allocate;
}
void OAIProjectUpdateDto::setAutoAllocate(const OAIDtoValueOfNullableOfBoolean &auto_allocate) {
    m_auto_allocate = auto_allocate;
    m_auto_allocate_isSet = true;
}

bool OAIProjectUpdateDto::is_auto_allocate_Set() const{
    return m_auto_allocate_isSet;
}

bool OAIProjectUpdateDto::is_auto_allocate_Valid() const{
    return m_auto_allocate_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIProjectUpdateDto::getAutomaticReleaseArDoc() const {
    return m_automatic_release_ar_doc;
}
void OAIProjectUpdateDto::setAutomaticReleaseArDoc(const OAIDtoValueOfNullableOfBoolean &automatic_release_ar_doc) {
    m_automatic_release_ar_doc = automatic_release_ar_doc;
    m_automatic_release_ar_doc_isSet = true;
}

bool OAIProjectUpdateDto::is_automatic_release_ar_doc_Set() const{
    return m_automatic_release_ar_doc_isSet;
}

bool OAIProjectUpdateDto::is_automatic_release_ar_doc_Valid() const{
    return m_automatic_release_ar_doc_isValid;
}

OAIDtoValueOfNullableOfBillingPeriod OAIProjectUpdateDto::getBillingPeriod() const {
    return m_billing_period;
}
void OAIProjectUpdateDto::setBillingPeriod(const OAIDtoValueOfNullableOfBillingPeriod &billing_period) {
    m_billing_period = billing_period;
    m_billing_period_isSet = true;
}

bool OAIProjectUpdateDto::is_billing_period_Set() const{
    return m_billing_period_isSet;
}

bool OAIProjectUpdateDto::is_billing_period_Valid() const{
    return m_billing_period_isValid;
}

OAIDtoValueOfString OAIProjectUpdateDto::getBillingRule() const {
    return m_billing_rule;
}
void OAIProjectUpdateDto::setBillingRule(const OAIDtoValueOfString &billing_rule) {
    m_billing_rule = billing_rule;
    m_billing_rule_isSet = true;
}

bool OAIProjectUpdateDto::is_billing_rule_Set() const{
    return m_billing_rule_isSet;
}

bool OAIProjectUpdateDto::is_billing_rule_Valid() const{
    return m_billing_rule_isValid;
}

OAIDtoValueOfString OAIProjectUpdateDto::getCustomer() const {
    return m_customer;
}
void OAIProjectUpdateDto::setCustomer(const OAIDtoValueOfString &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIProjectUpdateDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIProjectUpdateDto::is_customer_Valid() const{
    return m_customer_isValid;
}

OAIDtoValueOfString OAIProjectUpdateDto::getCustomerLocation() const {
    return m_customer_location;
}
void OAIProjectUpdateDto::setCustomerLocation(const OAIDtoValueOfString &customer_location) {
    m_customer_location = customer_location;
    m_customer_location_isSet = true;
}

bool OAIProjectUpdateDto::is_customer_location_Set() const{
    return m_customer_location_isSet;
}

bool OAIProjectUpdateDto::is_customer_location_Valid() const{
    return m_customer_location_isValid;
}

OAIDtoValueOfString OAIProjectUpdateDto::getDefAccount() const {
    return m_def_account;
}
void OAIProjectUpdateDto::setDefAccount(const OAIDtoValueOfString &def_account) {
    m_def_account = def_account;
    m_def_account_isSet = true;
}

bool OAIProjectUpdateDto::is_def_account_Set() const{
    return m_def_account_isSet;
}

bool OAIProjectUpdateDto::is_def_account_Valid() const{
    return m_def_account_isValid;
}

OAIDtoValueOfString OAIProjectUpdateDto::getDefAccrualAccount() const {
    return m_def_accrual_account;
}
void OAIProjectUpdateDto::setDefAccrualAccount(const OAIDtoValueOfString &def_accrual_account) {
    m_def_accrual_account = def_accrual_account;
    m_def_accrual_account_isSet = true;
}

bool OAIProjectUpdateDto::is_def_accrual_account_Set() const{
    return m_def_accrual_account_isSet;
}

bool OAIProjectUpdateDto::is_def_accrual_account_Valid() const{
    return m_def_accrual_account_isValid;
}

QList<OAISegmentUpdateDto> OAIProjectUpdateDto::getDefAccrualSub() const {
    return m_def_accrual_sub;
}
void OAIProjectUpdateDto::setDefAccrualSub(const QList<OAISegmentUpdateDto> &def_accrual_sub) {
    m_def_accrual_sub = def_accrual_sub;
    m_def_accrual_sub_isSet = true;
}

bool OAIProjectUpdateDto::is_def_accrual_sub_Set() const{
    return m_def_accrual_sub_isSet;
}

bool OAIProjectUpdateDto::is_def_accrual_sub_Valid() const{
    return m_def_accrual_sub_isValid;
}

QList<OAISegmentUpdateDto> OAIProjectUpdateDto::getDefSub() const {
    return m_def_sub;
}
void OAIProjectUpdateDto::setDefSub(const QList<OAISegmentUpdateDto> &def_sub) {
    m_def_sub = def_sub;
    m_def_sub_isSet = true;
}

bool OAIProjectUpdateDto::is_def_sub_Set() const{
    return m_def_sub_isSet;
}

bool OAIProjectUpdateDto::is_def_sub_Valid() const{
    return m_def_sub_isValid;
}

OAIDescriptionInProjectUpdateDto OAIProjectUpdateDto::getDescription() const {
    return m_description;
}
void OAIProjectUpdateDto::setDescription(const OAIDescriptionInProjectUpdateDto &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProjectUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProjectUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIProjectEmployeeUpdateDto> OAIProjectUpdateDto::getEmployees() const {
    return m_employees;
}
void OAIProjectUpdateDto::setEmployees(const QList<OAIProjectEmployeeUpdateDto> &employees) {
    m_employees = employees;
    m_employees_isSet = true;
}

bool OAIProjectUpdateDto::is_employees_Set() const{
    return m_employees_isSet;
}

bool OAIProjectUpdateDto::is_employees_Valid() const{
    return m_employees_isValid;
}

OAIDtoValueOfNullableOfDateTime OAIProjectUpdateDto::getEndDate() const {
    return m_end_date;
}
void OAIProjectUpdateDto::setEndDate(const OAIDtoValueOfNullableOfDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIProjectUpdateDto::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIProjectUpdateDto::is_end_date_Valid() const{
    return m_end_date_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIProjectUpdateDto::getHold() const {
    return m_hold;
}
void OAIProjectUpdateDto::setHold(const OAIDtoValueOfNullableOfBoolean &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAIProjectUpdateDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAIProjectUpdateDto::is_hold_Valid() const{
    return m_hold_isValid;
}

OAIDtoValueOfNullableOfInt32 OAIProjectUpdateDto::getInternalId() const {
    return m_internal_id;
}
void OAIProjectUpdateDto::setInternalId(const OAIDtoValueOfNullableOfInt32 &internal_id) {
    m_internal_id = internal_id;
    m_internal_id_isSet = true;
}

bool OAIProjectUpdateDto::is_internal_id_Set() const{
    return m_internal_id_isSet;
}

bool OAIProjectUpdateDto::is_internal_id_Valid() const{
    return m_internal_id_isValid;
}

OAIDtoValueOfString OAIProjectUpdateDto::getProjectId() const {
    return m_project_id;
}
void OAIProjectUpdateDto::setProjectId(const OAIDtoValueOfString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIProjectUpdateDto::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIProjectUpdateDto::is_project_id_Valid() const{
    return m_project_id_isValid;
}

OAIDtoValueOfNullableOfInt32 OAIProjectUpdateDto::getProjectManagerInternalId() const {
    return m_project_manager_internal_id;
}
void OAIProjectUpdateDto::setProjectManagerInternalId(const OAIDtoValueOfNullableOfInt32 &project_manager_internal_id) {
    m_project_manager_internal_id = project_manager_internal_id;
    m_project_manager_internal_id_isSet = true;
}

bool OAIProjectUpdateDto::is_project_manager_internal_id_Set() const{
    return m_project_manager_internal_id_isSet;
}

bool OAIProjectUpdateDto::is_project_manager_internal_id_Valid() const{
    return m_project_manager_internal_id_isValid;
}

OAIDtoValueOfString OAIProjectUpdateDto::getProjectManger() const {
    return m_project_manger;
}
void OAIProjectUpdateDto::setProjectManger(const OAIDtoValueOfString &project_manger) {
    m_project_manger = project_manger;
    m_project_manger_isSet = true;
}

bool OAIProjectUpdateDto::is_project_manger_Set() const{
    return m_project_manger_isSet;
}

bool OAIProjectUpdateDto::is_project_manger_Valid() const{
    return m_project_manger_isValid;
}

OAIDtoValueOfString OAIProjectUpdateDto::getRateTable() const {
    return m_rate_table;
}
void OAIProjectUpdateDto::setRateTable(const OAIDtoValueOfString &rate_table) {
    m_rate_table = rate_table;
    m_rate_table_isSet = true;
}

bool OAIProjectUpdateDto::is_rate_table_Set() const{
    return m_rate_table_isSet;
}

bool OAIProjectUpdateDto::is_rate_table_Valid() const{
    return m_rate_table_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIProjectUpdateDto::getRestricEmployees() const {
    return m_restric_employees;
}
void OAIProjectUpdateDto::setRestricEmployees(const OAIDtoValueOfNullableOfBoolean &restric_employees) {
    m_restric_employees = restric_employees;
    m_restric_employees_isSet = true;
}

bool OAIProjectUpdateDto::is_restric_employees_Set() const{
    return m_restric_employees_isSet;
}

bool OAIProjectUpdateDto::is_restric_employees_Valid() const{
    return m_restric_employees_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIProjectUpdateDto::getRestricEquipment() const {
    return m_restric_equipment;
}
void OAIProjectUpdateDto::setRestricEquipment(const OAIDtoValueOfNullableOfBoolean &restric_equipment) {
    m_restric_equipment = restric_equipment;
    m_restric_equipment_isSet = true;
}

bool OAIProjectUpdateDto::is_restric_equipment_Set() const{
    return m_restric_equipment_isSet;
}

bool OAIProjectUpdateDto::is_restric_equipment_Valid() const{
    return m_restric_equipment_isValid;
}

OAIStartDateInProjectUpdateDto OAIProjectUpdateDto::getStartDate() const {
    return m_start_date;
}
void OAIProjectUpdateDto::setStartDate(const OAIStartDateInProjectUpdateDto &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIProjectUpdateDto::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIProjectUpdateDto::is_start_date_Valid() const{
    return m_start_date_isValid;
}

OAIDtoValueOfNullableOfProjectStatus OAIProjectUpdateDto::getStatus() const {
    return m_status;
}
void OAIProjectUpdateDto::setStatus(const OAIDtoValueOfNullableOfProjectStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProjectUpdateDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProjectUpdateDto::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAITaskUpdateDto> OAIProjectUpdateDto::getTasks() const {
    return m_tasks;
}
void OAIProjectUpdateDto::setTasks(const QList<OAITaskUpdateDto> &tasks) {
    m_tasks = tasks;
    m_tasks_isSet = true;
}

bool OAIProjectUpdateDto::is_tasks_Set() const{
    return m_tasks_isSet;
}

bool OAIProjectUpdateDto::is_tasks_Valid() const{
    return m_tasks_isValid;
}

OAIDtoValueOfString OAIProjectUpdateDto::getRTemplate() const {
    return m_r_template;
}
void OAIProjectUpdateDto::setRTemplate(const OAIDtoValueOfString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIProjectUpdateDto::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIProjectUpdateDto::is_r_template_Valid() const{
    return m_r_template_isValid;
}

OAIVisibilityUpdateDto OAIProjectUpdateDto::getVisibility() const {
    return m_visibility;
}
void OAIProjectUpdateDto::setVisibility(const OAIVisibilityUpdateDto &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIProjectUpdateDto::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIProjectUpdateDto::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIProjectUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocation_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_allocate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_automatic_release_ar_doc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_def_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_def_accrual_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_def_accrual_sub.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_def_sub.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_manager_internal_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_manger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restric_employees.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restric_equipment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tasks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_start_date_isValid && true;
}

} // namespace OpenAPI
