/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryReceiptLineDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryReceiptLineDto::OAIInventoryReceiptLineDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryReceiptLineDto::OAIInventoryReceiptLineDto() {
    this->initializeModel();
}

OAIInventoryReceiptLineDto::~OAIInventoryReceiptLineDto() {}

void OAIInventoryReceiptLineDto::initializeModel() {

    m_allocations_isSet = false;
    m_allocations_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ext_cost_isSet = false;
    m_ext_cost_isValid = false;

    m_inventory_item_isSet = false;
    m_inventory_item_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_project_task_isSet = false;
    m_project_task_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;

    m_warehouse_isSet = false;
    m_warehouse_isValid = false;
}

void OAIInventoryReceiptLineDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryReceiptLineDto::fromJsonObject(QJsonObject json) {

    m_allocations_isValid = ::OpenAPI::fromJsonValue(m_allocations, json[QString("allocations")]);
    m_allocations_isSet = !json[QString("allocations")].isNull() && m_allocations_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ext_cost_isValid = ::OpenAPI::fromJsonValue(m_ext_cost, json[QString("extCost")]);
    m_ext_cost_isSet = !json[QString("extCost")].isNull() && m_ext_cost_isValid;

    m_inventory_item_isValid = ::OpenAPI::fromJsonValue(m_inventory_item, json[QString("inventoryItem")]);
    m_inventory_item_isSet = !json[QString("inventoryItem")].isNull() && m_inventory_item_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("lineNumber")]);
    m_line_number_isSet = !json[QString("lineNumber")].isNull() && m_line_number_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_project_task_isValid = ::OpenAPI::fromJsonValue(m_project_task, json[QString("projectTask")]);
    m_project_task_isSet = !json[QString("projectTask")].isNull() && m_project_task_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("reasonCode")]);
    m_reason_code_isSet = !json[QString("reasonCode")].isNull() && m_reason_code_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;

    m_warehouse_isValid = ::OpenAPI::fromJsonValue(m_warehouse, json[QString("warehouse")]);
    m_warehouse_isSet = !json[QString("warehouse")].isNull() && m_warehouse_isValid;
}

QString OAIInventoryReceiptLineDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryReceiptLineDto::asJsonObject() const {
    QJsonObject obj;
    if (m_allocations.size() > 0) {
        obj.insert(QString("allocations"), ::OpenAPI::toJsonValue(m_allocations));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ext_cost_isSet) {
        obj.insert(QString("extCost"), ::OpenAPI::toJsonValue(m_ext_cost));
    }
    if (m_inventory_item.isSet()) {
        obj.insert(QString("inventoryItem"), ::OpenAPI::toJsonValue(m_inventory_item));
    }
    if (m_line_number_isSet) {
        obj.insert(QString("lineNumber"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_project_task.isSet()) {
        obj.insert(QString("projectTask"), ::OpenAPI::toJsonValue(m_project_task));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_reason_code.isSet()) {
        obj.insert(QString("reasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    if (m_unit_cost_isSet) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_uom_isSet) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    if (m_warehouse.isSet()) {
        obj.insert(QString("warehouse"), ::OpenAPI::toJsonValue(m_warehouse));
    }
    return obj;
}

QList<OAIINAllocationsDto> OAIInventoryReceiptLineDto::getAllocations() const {
    return m_allocations;
}
void OAIInventoryReceiptLineDto::setAllocations(const QList<OAIINAllocationsDto> &allocations) {
    m_allocations = allocations;
    m_allocations_isSet = true;
}

bool OAIInventoryReceiptLineDto::is_allocations_Set() const{
    return m_allocations_isSet;
}

bool OAIInventoryReceiptLineDto::is_allocations_Valid() const{
    return m_allocations_isValid;
}

QList<OAIAttachmentDto> OAIInventoryReceiptLineDto::getAttachments() const {
    return m_attachments;
}
void OAIInventoryReceiptLineDto::setAttachments(const QList<OAIAttachmentDto> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIInventoryReceiptLineDto::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIInventoryReceiptLineDto::is_attachments_Valid() const{
    return m_attachments_isValid;
}

OAIBranchNumberDto OAIInventoryReceiptLineDto::getBranchNumber() const {
    return m_branch_number;
}
void OAIInventoryReceiptLineDto::setBranchNumber(const OAIBranchNumberDto &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAIInventoryReceiptLineDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAIInventoryReceiptLineDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

QString OAIInventoryReceiptLineDto::getDescription() const {
    return m_description;
}
void OAIInventoryReceiptLineDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInventoryReceiptLineDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInventoryReceiptLineDto::is_description_Valid() const{
    return m_description_isValid;
}

double OAIInventoryReceiptLineDto::getExtCost() const {
    return m_ext_cost;
}
void OAIInventoryReceiptLineDto::setExtCost(const double &ext_cost) {
    m_ext_cost = ext_cost;
    m_ext_cost_isSet = true;
}

bool OAIInventoryReceiptLineDto::is_ext_cost_Set() const{
    return m_ext_cost_isSet;
}

bool OAIInventoryReceiptLineDto::is_ext_cost_Valid() const{
    return m_ext_cost_isValid;
}

OAIInventoryItemInInventoryReceiptLineDto OAIInventoryReceiptLineDto::getInventoryItem() const {
    return m_inventory_item;
}
void OAIInventoryReceiptLineDto::setInventoryItem(const OAIInventoryItemInInventoryReceiptLineDto &inventory_item) {
    m_inventory_item = inventory_item;
    m_inventory_item_isSet = true;
}

bool OAIInventoryReceiptLineDto::is_inventory_item_Set() const{
    return m_inventory_item_isSet;
}

bool OAIInventoryReceiptLineDto::is_inventory_item_Valid() const{
    return m_inventory_item_isValid;
}

qint32 OAIInventoryReceiptLineDto::getLineNumber() const {
    return m_line_number;
}
void OAIInventoryReceiptLineDto::setLineNumber(const qint32 &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAIInventoryReceiptLineDto::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAIInventoryReceiptLineDto::is_line_number_Valid() const{
    return m_line_number_isValid;
}

OAILocationInInventoryReceiptLineDto OAIInventoryReceiptLineDto::getLocation() const {
    return m_location;
}
void OAIInventoryReceiptLineDto::setLocation(const OAILocationInInventoryReceiptLineDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIInventoryReceiptLineDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIInventoryReceiptLineDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIProjectInInventoryReceiptLineDto OAIInventoryReceiptLineDto::getProject() const {
    return m_project;
}
void OAIInventoryReceiptLineDto::setProject(const OAIProjectInInventoryReceiptLineDto &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIInventoryReceiptLineDto::is_project_Set() const{
    return m_project_isSet;
}

bool OAIInventoryReceiptLineDto::is_project_Valid() const{
    return m_project_isValid;
}

OAIProjectTaskInInventoryReceiptLineDto OAIInventoryReceiptLineDto::getProjectTask() const {
    return m_project_task;
}
void OAIInventoryReceiptLineDto::setProjectTask(const OAIProjectTaskInInventoryReceiptLineDto &project_task) {
    m_project_task = project_task;
    m_project_task_isSet = true;
}

bool OAIInventoryReceiptLineDto::is_project_task_Set() const{
    return m_project_task_isSet;
}

bool OAIInventoryReceiptLineDto::is_project_task_Valid() const{
    return m_project_task_isValid;
}

double OAIInventoryReceiptLineDto::getQuantity() const {
    return m_quantity;
}
void OAIInventoryReceiptLineDto::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIInventoryReceiptLineDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIInventoryReceiptLineDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIReasonCodeInInventoryReceiptLineDto OAIInventoryReceiptLineDto::getReasonCode() const {
    return m_reason_code;
}
void OAIInventoryReceiptLineDto::setReasonCode(const OAIReasonCodeInInventoryReceiptLineDto &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAIInventoryReceiptLineDto::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAIInventoryReceiptLineDto::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

double OAIInventoryReceiptLineDto::getUnitCost() const {
    return m_unit_cost;
}
void OAIInventoryReceiptLineDto::setUnitCost(const double &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAIInventoryReceiptLineDto::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAIInventoryReceiptLineDto::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

QString OAIInventoryReceiptLineDto::getUom() const {
    return m_uom;
}
void OAIInventoryReceiptLineDto::setUom(const QString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAIInventoryReceiptLineDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAIInventoryReceiptLineDto::is_uom_Valid() const{
    return m_uom_isValid;
}

OAIWarehouseInInventoryReceiptLineDto OAIInventoryReceiptLineDto::getWarehouse() const {
    return m_warehouse;
}
void OAIInventoryReceiptLineDto::setWarehouse(const OAIWarehouseInInventoryReceiptLineDto &warehouse) {
    m_warehouse = warehouse;
    m_warehouse_isSet = true;
}

bool OAIInventoryReceiptLineDto::is_warehouse_Set() const{
    return m_warehouse_isSet;
}

bool OAIInventoryReceiptLineDto::is_warehouse_Valid() const{
    return m_warehouse_isValid;
}

bool OAIInventoryReceiptLineDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ext_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryReceiptLineDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
