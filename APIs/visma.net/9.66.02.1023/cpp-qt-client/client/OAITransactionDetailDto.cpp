/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionDetailDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionDetailDto::OAITransactionDetailDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionDetailDto::OAITransactionDetailDto() {
    this->initializeModel();
}

OAITransactionDetailDto::~OAITransactionDetailDto() {}

void OAITransactionDetailDto::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_item_isSet = false;
    m_item_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_non_billable_isSet = false;
    m_non_billable_isValid = false;

    m_offset_account_isSet = false;
    m_offset_account_isValid = false;

    m_offset_cash_account_isSet = false;
    m_offset_cash_account_isValid = false;

    m_offset_sub_account_isSet = false;
    m_offset_sub_account_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_project_task_isSet = false;
    m_project_task_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_tax_category_isSet = false;
    m_tax_category_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;
}

void OAITransactionDetailDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionDetailDto::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("item")]);
    m_item_isSet = !json[QString("item")].isNull() && m_item_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("lineNumber")]);
    m_line_number_isSet = !json[QString("lineNumber")].isNull() && m_line_number_isValid;

    m_non_billable_isValid = ::OpenAPI::fromJsonValue(m_non_billable, json[QString("nonBillable")]);
    m_non_billable_isSet = !json[QString("nonBillable")].isNull() && m_non_billable_isValid;

    m_offset_account_isValid = ::OpenAPI::fromJsonValue(m_offset_account, json[QString("offsetAccount")]);
    m_offset_account_isSet = !json[QString("offsetAccount")].isNull() && m_offset_account_isValid;

    m_offset_cash_account_isValid = ::OpenAPI::fromJsonValue(m_offset_cash_account, json[QString("offsetCashAccount")]);
    m_offset_cash_account_isSet = !json[QString("offsetCashAccount")].isNull() && m_offset_cash_account_isValid;

    m_offset_sub_account_isValid = ::OpenAPI::fromJsonValue(m_offset_sub_account, json[QString("offsetSubAccount")]);
    m_offset_sub_account_isSet = !json[QString("offsetSubAccount")].isNull() && m_offset_sub_account_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_project_task_isValid = ::OpenAPI::fromJsonValue(m_project_task, json[QString("projectTask")]);
    m_project_task_isSet = !json[QString("projectTask")].isNull() && m_project_task_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_tax_category_isValid = ::OpenAPI::fromJsonValue(m_tax_category, json[QString("taxCategory")]);
    m_tax_category_isSet = !json[QString("taxCategory")].isNull() && m_tax_category_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;
}

QString OAITransactionDetailDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionDetailDto::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_item.isSet()) {
        obj.insert(QString("item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_line_number_isSet) {
        obj.insert(QString("lineNumber"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_non_billable_isSet) {
        obj.insert(QString("nonBillable"), ::OpenAPI::toJsonValue(m_non_billable));
    }
    if (m_offset_account.isSet()) {
        obj.insert(QString("offsetAccount"), ::OpenAPI::toJsonValue(m_offset_account));
    }
    if (m_offset_cash_account.isSet()) {
        obj.insert(QString("offsetCashAccount"), ::OpenAPI::toJsonValue(m_offset_cash_account));
    }
    if (m_offset_sub_account.isSet()) {
        obj.insert(QString("offsetSubAccount"), ::OpenAPI::toJsonValue(m_offset_sub_account));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_project_task.isSet()) {
        obj.insert(QString("projectTask"), ::OpenAPI::toJsonValue(m_project_task));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_tax_category.isSet()) {
        obj.insert(QString("taxCategory"), ::OpenAPI::toJsonValue(m_tax_category));
    }
    if (m_uom_isSet) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    return obj;
}

double OAITransactionDetailDto::getAmount() const {
    return m_amount;
}
void OAITransactionDetailDto::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAITransactionDetailDto::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAITransactionDetailDto::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIBranchInTransactionDetailDto OAITransactionDetailDto::getBranch() const {
    return m_branch;
}
void OAITransactionDetailDto::setBranch(const OAIBranchInTransactionDetailDto &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAITransactionDetailDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAITransactionDetailDto::is_branch_Valid() const{
    return m_branch_isValid;
}

QString OAITransactionDetailDto::getDescription() const {
    return m_description;
}
void OAITransactionDetailDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITransactionDetailDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAITransactionDetailDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIItemInTransactionDetailDto OAITransactionDetailDto::getItem() const {
    return m_item;
}
void OAITransactionDetailDto::setItem(const OAIItemInTransactionDetailDto &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAITransactionDetailDto::is_item_Set() const{
    return m_item_isSet;
}

bool OAITransactionDetailDto::is_item_Valid() const{
    return m_item_isValid;
}

qint32 OAITransactionDetailDto::getLineNumber() const {
    return m_line_number;
}
void OAITransactionDetailDto::setLineNumber(const qint32 &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAITransactionDetailDto::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAITransactionDetailDto::is_line_number_Valid() const{
    return m_line_number_isValid;
}

bool OAITransactionDetailDto::isNonBillable() const {
    return m_non_billable;
}
void OAITransactionDetailDto::setNonBillable(const bool &non_billable) {
    m_non_billable = non_billable;
    m_non_billable_isSet = true;
}

bool OAITransactionDetailDto::is_non_billable_Set() const{
    return m_non_billable_isSet;
}

bool OAITransactionDetailDto::is_non_billable_Valid() const{
    return m_non_billable_isValid;
}

OAIAccountNumberTypeDescriptionDto OAITransactionDetailDto::getOffsetAccount() const {
    return m_offset_account;
}
void OAITransactionDetailDto::setOffsetAccount(const OAIAccountNumberTypeDescriptionDto &offset_account) {
    m_offset_account = offset_account;
    m_offset_account_isSet = true;
}

bool OAITransactionDetailDto::is_offset_account_Set() const{
    return m_offset_account_isSet;
}

bool OAITransactionDetailDto::is_offset_account_Valid() const{
    return m_offset_account_isValid;
}

OAIAccountNumberTypeDescriptionDto OAITransactionDetailDto::getOffsetCashAccount() const {
    return m_offset_cash_account;
}
void OAITransactionDetailDto::setOffsetCashAccount(const OAIAccountNumberTypeDescriptionDto &offset_cash_account) {
    m_offset_cash_account = offset_cash_account;
    m_offset_cash_account_isSet = true;
}

bool OAITransactionDetailDto::is_offset_cash_account_Set() const{
    return m_offset_cash_account_isSet;
}

bool OAITransactionDetailDto::is_offset_cash_account_Valid() const{
    return m_offset_cash_account_isValid;
}

OAIOffsetSubAccountInTransactionDetailDto OAITransactionDetailDto::getOffsetSubAccount() const {
    return m_offset_sub_account;
}
void OAITransactionDetailDto::setOffsetSubAccount(const OAIOffsetSubAccountInTransactionDetailDto &offset_sub_account) {
    m_offset_sub_account = offset_sub_account;
    m_offset_sub_account_isSet = true;
}

bool OAITransactionDetailDto::is_offset_sub_account_Set() const{
    return m_offset_sub_account_isSet;
}

bool OAITransactionDetailDto::is_offset_sub_account_Valid() const{
    return m_offset_sub_account_isValid;
}

double OAITransactionDetailDto::getPrice() const {
    return m_price;
}
void OAITransactionDetailDto::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAITransactionDetailDto::is_price_Set() const{
    return m_price_isSet;
}

bool OAITransactionDetailDto::is_price_Valid() const{
    return m_price_isValid;
}

OAIProjectInTransactionDetailDto OAITransactionDetailDto::getProject() const {
    return m_project;
}
void OAITransactionDetailDto::setProject(const OAIProjectInTransactionDetailDto &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAITransactionDetailDto::is_project_Set() const{
    return m_project_isSet;
}

bool OAITransactionDetailDto::is_project_Valid() const{
    return m_project_isValid;
}

OAIProjectTaskInTransactionDetailDto OAITransactionDetailDto::getProjectTask() const {
    return m_project_task;
}
void OAITransactionDetailDto::setProjectTask(const OAIProjectTaskInTransactionDetailDto &project_task) {
    m_project_task = project_task;
    m_project_task_isSet = true;
}

bool OAITransactionDetailDto::is_project_task_Set() const{
    return m_project_task_isSet;
}

bool OAITransactionDetailDto::is_project_task_Valid() const{
    return m_project_task_isValid;
}

double OAITransactionDetailDto::getQuantity() const {
    return m_quantity;
}
void OAITransactionDetailDto::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAITransactionDetailDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAITransactionDetailDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAITaxCategoryInTransactionDetailDto OAITransactionDetailDto::getTaxCategory() const {
    return m_tax_category;
}
void OAITransactionDetailDto::setTaxCategory(const OAITaxCategoryInTransactionDetailDto &tax_category) {
    m_tax_category = tax_category;
    m_tax_category_isSet = true;
}

bool OAITransactionDetailDto::is_tax_category_Set() const{
    return m_tax_category_isSet;
}

bool OAITransactionDetailDto::is_tax_category_Valid() const{
    return m_tax_category_isValid;
}

QString OAITransactionDetailDto::getUom() const {
    return m_uom;
}
void OAITransactionDetailDto::setUom(const QString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAITransactionDetailDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAITransactionDetailDto::is_uom_Valid() const{
    return m_uom_isValid;
}

bool OAITransactionDetailDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_billable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_cash_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_sub_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionDetailDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
