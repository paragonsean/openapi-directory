/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesOrderBasicUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesOrderBasicUpdateDto::OAISalesOrderBasicUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesOrderBasicUpdateDto::OAISalesOrderBasicUpdateDto() {
    this->initializeModel();
}

OAISalesOrderBasicUpdateDto::~OAISalesOrderBasicUpdateDto() {}

void OAISalesOrderBasicUpdateDto::initializeModel() {

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_customer_order_isSet = false;
    m_customer_order_isValid = false;

    m_customer_ref_no_isSet = false;
    m_customer_ref_no_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_gln_isSet = false;
    m_gln_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_order_number_isSet = false;
    m_order_number_isValid = false;

    m_order_type_isSet = false;
    m_order_type_isValid = false;

    m_override_number_series_isSet = false;
    m_override_number_series_isValid = false;

    m_recalculate_shipment_isSet = false;
    m_recalculate_shipment_isValid = false;

    m_request_on_isSet = false;
    m_request_on_isValid = false;

    m_vat_registration_id_isSet = false;
    m_vat_registration_id_isValid = false;
}

void OAISalesOrderBasicUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesOrderBasicUpdateDto::fromJsonObject(QJsonObject json) {

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("contactId")]);
    m_contact_id_isSet = !json[QString("contactId")].isNull() && m_contact_id_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_customer_order_isValid = ::OpenAPI::fromJsonValue(m_customer_order, json[QString("customerOrder")]);
    m_customer_order_isSet = !json[QString("customerOrder")].isNull() && m_customer_order_isValid;

    m_customer_ref_no_isValid = ::OpenAPI::fromJsonValue(m_customer_ref_no, json[QString("customerRefNo")]);
    m_customer_ref_no_isSet = !json[QString("customerRefNo")].isNull() && m_customer_ref_no_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_gln_isValid = ::OpenAPI::fromJsonValue(m_gln, json[QString("gln")]);
    m_gln_isSet = !json[QString("gln")].isNull() && m_gln_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_order_number_isValid = ::OpenAPI::fromJsonValue(m_order_number, json[QString("orderNumber")]);
    m_order_number_isSet = !json[QString("orderNumber")].isNull() && m_order_number_isValid;

    m_order_type_isValid = ::OpenAPI::fromJsonValue(m_order_type, json[QString("orderType")]);
    m_order_type_isSet = !json[QString("orderType")].isNull() && m_order_type_isValid;

    m_override_number_series_isValid = ::OpenAPI::fromJsonValue(m_override_number_series, json[QString("overrideNumberSeries")]);
    m_override_number_series_isSet = !json[QString("overrideNumberSeries")].isNull() && m_override_number_series_isValid;

    m_recalculate_shipment_isValid = ::OpenAPI::fromJsonValue(m_recalculate_shipment, json[QString("recalculateShipment")]);
    m_recalculate_shipment_isSet = !json[QString("recalculateShipment")].isNull() && m_recalculate_shipment_isValid;

    m_request_on_isValid = ::OpenAPI::fromJsonValue(m_request_on, json[QString("requestOn")]);
    m_request_on_isSet = !json[QString("requestOn")].isNull() && m_request_on_isValid;

    m_vat_registration_id_isValid = ::OpenAPI::fromJsonValue(m_vat_registration_id, json[QString("vatRegistrationId")]);
    m_vat_registration_id_isSet = !json[QString("vatRegistrationId")].isNull() && m_vat_registration_id_isValid;
}

QString OAISalesOrderBasicUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesOrderBasicUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_contact_id.isSet()) {
        obj.insert(QString("contactId"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_customer_order.isSet()) {
        obj.insert(QString("customerOrder"), ::OpenAPI::toJsonValue(m_customer_order));
    }
    if (m_customer_ref_no.isSet()) {
        obj.insert(QString("customerRefNo"), ::OpenAPI::toJsonValue(m_customer_ref_no));
    }
    if (m_date.isSet()) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_gln.isSet()) {
        obj.insert(QString("gln"), ::OpenAPI::toJsonValue(m_gln));
    }
    if (m_hold.isSet()) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_note.isSet()) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_order_number.isSet()) {
        obj.insert(QString("orderNumber"), ::OpenAPI::toJsonValue(m_order_number));
    }
    if (m_order_type.isSet()) {
        obj.insert(QString("orderType"), ::OpenAPI::toJsonValue(m_order_type));
    }
    if (m_override_number_series.isSet()) {
        obj.insert(QString("overrideNumberSeries"), ::OpenAPI::toJsonValue(m_override_number_series));
    }
    if (m_recalculate_shipment.isSet()) {
        obj.insert(QString("recalculateShipment"), ::OpenAPI::toJsonValue(m_recalculate_shipment));
    }
    if (m_request_on.isSet()) {
        obj.insert(QString("requestOn"), ::OpenAPI::toJsonValue(m_request_on));
    }
    if (m_vat_registration_id.isSet()) {
        obj.insert(QString("vatRegistrationId"), ::OpenAPI::toJsonValue(m_vat_registration_id));
    }
    return obj;
}

OAIDtoValueOfString OAISalesOrderBasicUpdateDto::getBranchNumber() const {
    return m_branch_number;
}
void OAISalesOrderBasicUpdateDto::setBranchNumber(const OAIDtoValueOfString &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAISalesOrderBasicUpdateDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAISalesOrderBasicUpdateDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

OAIDtoValueOfNullableOfInt32 OAISalesOrderBasicUpdateDto::getContactId() const {
    return m_contact_id;
}
void OAISalesOrderBasicUpdateDto::setContactId(const OAIDtoValueOfNullableOfInt32 &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAISalesOrderBasicUpdateDto::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAISalesOrderBasicUpdateDto::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

OAIDtoValueOfString OAISalesOrderBasicUpdateDto::getCurrency() const {
    return m_currency;
}
void OAISalesOrderBasicUpdateDto::setCurrency(const OAIDtoValueOfString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAISalesOrderBasicUpdateDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAISalesOrderBasicUpdateDto::is_currency_Valid() const{
    return m_currency_isValid;
}

OAICustomerInSalesOrderBasicUpdateDto OAISalesOrderBasicUpdateDto::getCustomer() const {
    return m_customer;
}
void OAISalesOrderBasicUpdateDto::setCustomer(const OAICustomerInSalesOrderBasicUpdateDto &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAISalesOrderBasicUpdateDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAISalesOrderBasicUpdateDto::is_customer_Valid() const{
    return m_customer_isValid;
}

OAIDtoValueOfString OAISalesOrderBasicUpdateDto::getCustomerOrder() const {
    return m_customer_order;
}
void OAISalesOrderBasicUpdateDto::setCustomerOrder(const OAIDtoValueOfString &customer_order) {
    m_customer_order = customer_order;
    m_customer_order_isSet = true;
}

bool OAISalesOrderBasicUpdateDto::is_customer_order_Set() const{
    return m_customer_order_isSet;
}

bool OAISalesOrderBasicUpdateDto::is_customer_order_Valid() const{
    return m_customer_order_isValid;
}

OAIDtoValueOfString OAISalesOrderBasicUpdateDto::getCustomerRefNo() const {
    return m_customer_ref_no;
}
void OAISalesOrderBasicUpdateDto::setCustomerRefNo(const OAIDtoValueOfString &customer_ref_no) {
    m_customer_ref_no = customer_ref_no;
    m_customer_ref_no_isSet = true;
}

bool OAISalesOrderBasicUpdateDto::is_customer_ref_no_Set() const{
    return m_customer_ref_no_isSet;
}

bool OAISalesOrderBasicUpdateDto::is_customer_ref_no_Valid() const{
    return m_customer_ref_no_isValid;
}

OAIDtoValueOfNullableOfDateTime OAISalesOrderBasicUpdateDto::getDate() const {
    return m_date;
}
void OAISalesOrderBasicUpdateDto::setDate(const OAIDtoValueOfNullableOfDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAISalesOrderBasicUpdateDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAISalesOrderBasicUpdateDto::is_date_Valid() const{
    return m_date_isValid;
}

OAIDtoValueOfString OAISalesOrderBasicUpdateDto::getDescription() const {
    return m_description;
}
void OAISalesOrderBasicUpdateDto::setDescription(const OAIDtoValueOfString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISalesOrderBasicUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAISalesOrderBasicUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIGlnInSalesOrderBasicUpdateDto OAISalesOrderBasicUpdateDto::getGln() const {
    return m_gln;
}
void OAISalesOrderBasicUpdateDto::setGln(const OAIGlnInSalesOrderBasicUpdateDto &gln) {
    m_gln = gln;
    m_gln_isSet = true;
}

bool OAISalesOrderBasicUpdateDto::is_gln_Set() const{
    return m_gln_isSet;
}

bool OAISalesOrderBasicUpdateDto::is_gln_Valid() const{
    return m_gln_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISalesOrderBasicUpdateDto::getHold() const {
    return m_hold;
}
void OAISalesOrderBasicUpdateDto::setHold(const OAIDtoValueOfNullableOfBoolean &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAISalesOrderBasicUpdateDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAISalesOrderBasicUpdateDto::is_hold_Valid() const{
    return m_hold_isValid;
}

QList<OAISalesOrderBasicLineUpdateDto> OAISalesOrderBasicUpdateDto::getLines() const {
    return m_lines;
}
void OAISalesOrderBasicUpdateDto::setLines(const QList<OAISalesOrderBasicLineUpdateDto> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAISalesOrderBasicUpdateDto::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAISalesOrderBasicUpdateDto::is_lines_Valid() const{
    return m_lines_isValid;
}

OAIDtoValueOfString OAISalesOrderBasicUpdateDto::getLocation() const {
    return m_location;
}
void OAISalesOrderBasicUpdateDto::setLocation(const OAIDtoValueOfString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAISalesOrderBasicUpdateDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAISalesOrderBasicUpdateDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIDtoValueOfString OAISalesOrderBasicUpdateDto::getNote() const {
    return m_note;
}
void OAISalesOrderBasicUpdateDto::setNote(const OAIDtoValueOfString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAISalesOrderBasicUpdateDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAISalesOrderBasicUpdateDto::is_note_Valid() const{
    return m_note_isValid;
}

OAIDtoValueOfString OAISalesOrderBasicUpdateDto::getOrderNumber() const {
    return m_order_number;
}
void OAISalesOrderBasicUpdateDto::setOrderNumber(const OAIDtoValueOfString &order_number) {
    m_order_number = order_number;
    m_order_number_isSet = true;
}

bool OAISalesOrderBasicUpdateDto::is_order_number_Set() const{
    return m_order_number_isSet;
}

bool OAISalesOrderBasicUpdateDto::is_order_number_Valid() const{
    return m_order_number_isValid;
}

OAIOrderTypeInSalesOrderBasicUpdateDto OAISalesOrderBasicUpdateDto::getOrderType() const {
    return m_order_type;
}
void OAISalesOrderBasicUpdateDto::setOrderType(const OAIOrderTypeInSalesOrderBasicUpdateDto &order_type) {
    m_order_type = order_type;
    m_order_type_isSet = true;
}

bool OAISalesOrderBasicUpdateDto::is_order_type_Set() const{
    return m_order_type_isSet;
}

bool OAISalesOrderBasicUpdateDto::is_order_type_Valid() const{
    return m_order_type_isValid;
}

OAIDtoValueOfBoolean OAISalesOrderBasicUpdateDto::getOverrideNumberSeries() const {
    return m_override_number_series;
}
void OAISalesOrderBasicUpdateDto::setOverrideNumberSeries(const OAIDtoValueOfBoolean &override_number_series) {
    m_override_number_series = override_number_series;
    m_override_number_series_isSet = true;
}

bool OAISalesOrderBasicUpdateDto::is_override_number_series_Set() const{
    return m_override_number_series_isSet;
}

bool OAISalesOrderBasicUpdateDto::is_override_number_series_Valid() const{
    return m_override_number_series_isValid;
}

OAIDtoValueOfBoolean OAISalesOrderBasicUpdateDto::getRecalculateShipment() const {
    return m_recalculate_shipment;
}
void OAISalesOrderBasicUpdateDto::setRecalculateShipment(const OAIDtoValueOfBoolean &recalculate_shipment) {
    m_recalculate_shipment = recalculate_shipment;
    m_recalculate_shipment_isSet = true;
}

bool OAISalesOrderBasicUpdateDto::is_recalculate_shipment_Set() const{
    return m_recalculate_shipment_isSet;
}

bool OAISalesOrderBasicUpdateDto::is_recalculate_shipment_Valid() const{
    return m_recalculate_shipment_isValid;
}

OAIDtoValueOfNullableOfDateTime OAISalesOrderBasicUpdateDto::getRequestOn() const {
    return m_request_on;
}
void OAISalesOrderBasicUpdateDto::setRequestOn(const OAIDtoValueOfNullableOfDateTime &request_on) {
    m_request_on = request_on;
    m_request_on_isSet = true;
}

bool OAISalesOrderBasicUpdateDto::is_request_on_Set() const{
    return m_request_on_isSet;
}

bool OAISalesOrderBasicUpdateDto::is_request_on_Valid() const{
    return m_request_on_isValid;
}

OAIVatRegistrationIdInSalesOrderBasicUpdateDto OAISalesOrderBasicUpdateDto::getVatRegistrationId() const {
    return m_vat_registration_id;
}
void OAISalesOrderBasicUpdateDto::setVatRegistrationId(const OAIVatRegistrationIdInSalesOrderBasicUpdateDto &vat_registration_id) {
    m_vat_registration_id = vat_registration_id;
    m_vat_registration_id_isSet = true;
}

bool OAISalesOrderBasicUpdateDto::is_vat_registration_id_Set() const{
    return m_vat_registration_id_isSet;
}

bool OAISalesOrderBasicUpdateDto::is_vat_registration_id_Valid() const{
    return m_vat_registration_id_isValid;
}

bool OAISalesOrderBasicUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_ref_no.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gln.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_number_series.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recalculate_shipment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_on.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_registration_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesOrderBasicUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_order_type_isValid && true;
}

} // namespace OpenAPI
