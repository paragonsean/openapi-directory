/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupplierInvoiceDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupplierInvoiceDto::OAISupplierInvoiceDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupplierInvoiceDto::OAISupplierInvoiceDto() {
    this->initializeModel();
}

OAISupplierInvoiceDto::~OAISupplierInvoiceDto() {}

void OAISupplierInvoiceDto::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_approval_details_isSet = false;
    m_approval_details_isValid = false;

    m_approval_status_isSet = false;
    m_approval_status_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_balance_in_currency_isSet = false;
    m_balance_in_currency_isValid = false;

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_buyer_reference_isSet = false;
    m_buyer_reference_isValid = false;

    m_cash_account_isSet = false;
    m_cash_account_isValid = false;

    m_cash_discount_isSet = false;
    m_cash_discount_isValid = false;

    m_cash_discount_date_isSet = false;
    m_cash_discount_date_isValid = false;

    m_cash_discount_in_currency_isSet = false;
    m_cash_discount_in_currency_isValid = false;

    m_closed_financial_period_isSet = false;
    m_closed_financial_period_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_credit_terms_isSet = false;
    m_credit_terms_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_cury_retainage_total_isSet = false;
    m_cury_retainage_total_isValid = false;

    m_cury_retainage_unreleased_amt_isSet = false;
    m_cury_retainage_unreleased_amt_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_detail_total_isSet = false;
    m_detail_total_isValid = false;

    m_detail_total_in_currency_isSet = false;
    m_detail_total_in_currency_isValid = false;

    m_discount_total_isSet = false;
    m_discount_total_isValid = false;

    m_discount_total_in_currency_isSet = false;
    m_discount_total_in_currency_isValid = false;

    m_document_type_isSet = false;
    m_document_type_isValid = false;

    m_document_version_number_isSet = false;
    m_document_version_number_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_financial_period_isSet = false;
    m_financial_period_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_invoice_lines_isSet = false;
    m_invoice_lines_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_orig_invoice_date_isSet = false;
    m_orig_invoice_date_isValid = false;

    m_pay_date_isSet = false;
    m_pay_date_isValid = false;

    m_pay_selected_isSet = false;
    m_pay_selected_isValid = false;

    m_payment_message_isSet = false;
    m_payment_message_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_payment_ref_no_isSet = false;
    m_payment_ref_no_isValid = false;

    m_post_period_isSet = false;
    m_post_period_isValid = false;

    m_reference_number_isSet = false;
    m_reference_number_isValid = false;

    m_retainage_apply_isSet = false;
    m_retainage_apply_isValid = false;

    m_rounding_diff_isSet = false;
    m_rounding_diff_isValid = false;

    m_rounding_diff_in_currency_isSet = false;
    m_rounding_diff_in_currency_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supplier_isSet = false;
    m_supplier_isValid = false;

    m_supplier_reference_isSet = false;
    m_supplier_reference_isValid = false;

    m_supplier_tax_zone_isSet = false;
    m_supplier_tax_zone_isValid = false;

    m_tax_calculation_mode_isSet = false;
    m_tax_calculation_mode_isValid = false;

    m_tax_detail_lines_isSet = false;
    m_tax_detail_lines_isValid = false;

    m_vat_amount_isSet = false;
    m_vat_amount_isValid = false;

    m_vat_exempt_total_isSet = false;
    m_vat_exempt_total_isValid = false;

    m_vat_exempt_total_in_currency_isSet = false;
    m_vat_exempt_total_in_currency_isValid = false;

    m_vat_taxable_total_isSet = false;
    m_vat_taxable_total_isValid = false;

    m_vat_taxable_total_in_currency_isSet = false;
    m_vat_taxable_total_in_currency_isValid = false;

    m_vat_total_isSet = false;
    m_vat_total_isValid = false;

    m_vat_total_in_currency_isSet = false;
    m_vat_total_in_currency_isValid = false;

    m_withholding_tax_isSet = false;
    m_withholding_tax_isValid = false;

    m_withholding_tax_in_currency_isSet = false;
    m_withholding_tax_in_currency_isValid = false;
}

void OAISupplierInvoiceDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupplierInvoiceDto::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_approval_details_isValid = ::OpenAPI::fromJsonValue(m_approval_details, json[QString("approvalDetails")]);
    m_approval_details_isSet = !json[QString("approvalDetails")].isNull() && m_approval_details_isValid;

    m_approval_status_isValid = ::OpenAPI::fromJsonValue(m_approval_status, json[QString("approvalStatus")]);
    m_approval_status_isSet = !json[QString("approvalStatus")].isNull() && m_approval_status_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_balance_in_currency_isValid = ::OpenAPI::fromJsonValue(m_balance_in_currency, json[QString("balanceInCurrency")]);
    m_balance_in_currency_isSet = !json[QString("balanceInCurrency")].isNull() && m_balance_in_currency_isValid;

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_buyer_reference_isValid = ::OpenAPI::fromJsonValue(m_buyer_reference, json[QString("buyerReference")]);
    m_buyer_reference_isSet = !json[QString("buyerReference")].isNull() && m_buyer_reference_isValid;

    m_cash_account_isValid = ::OpenAPI::fromJsonValue(m_cash_account, json[QString("cashAccount")]);
    m_cash_account_isSet = !json[QString("cashAccount")].isNull() && m_cash_account_isValid;

    m_cash_discount_isValid = ::OpenAPI::fromJsonValue(m_cash_discount, json[QString("cashDiscount")]);
    m_cash_discount_isSet = !json[QString("cashDiscount")].isNull() && m_cash_discount_isValid;

    m_cash_discount_date_isValid = ::OpenAPI::fromJsonValue(m_cash_discount_date, json[QString("cashDiscountDate")]);
    m_cash_discount_date_isSet = !json[QString("cashDiscountDate")].isNull() && m_cash_discount_date_isValid;

    m_cash_discount_in_currency_isValid = ::OpenAPI::fromJsonValue(m_cash_discount_in_currency, json[QString("cashDiscountInCurrency")]);
    m_cash_discount_in_currency_isSet = !json[QString("cashDiscountInCurrency")].isNull() && m_cash_discount_in_currency_isValid;

    m_closed_financial_period_isValid = ::OpenAPI::fromJsonValue(m_closed_financial_period, json[QString("closedFinancialPeriod")]);
    m_closed_financial_period_isSet = !json[QString("closedFinancialPeriod")].isNull() && m_closed_financial_period_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_credit_terms_isValid = ::OpenAPI::fromJsonValue(m_credit_terms, json[QString("creditTerms")]);
    m_credit_terms_isSet = !json[QString("creditTerms")].isNull() && m_credit_terms_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_cury_retainage_total_isValid = ::OpenAPI::fromJsonValue(m_cury_retainage_total, json[QString("curyRetainageTotal")]);
    m_cury_retainage_total_isSet = !json[QString("curyRetainageTotal")].isNull() && m_cury_retainage_total_isValid;

    m_cury_retainage_unreleased_amt_isValid = ::OpenAPI::fromJsonValue(m_cury_retainage_unreleased_amt, json[QString("curyRetainageUnreleasedAmt")]);
    m_cury_retainage_unreleased_amt_isSet = !json[QString("curyRetainageUnreleasedAmt")].isNull() && m_cury_retainage_unreleased_amt_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_detail_total_isValid = ::OpenAPI::fromJsonValue(m_detail_total, json[QString("detailTotal")]);
    m_detail_total_isSet = !json[QString("detailTotal")].isNull() && m_detail_total_isValid;

    m_detail_total_in_currency_isValid = ::OpenAPI::fromJsonValue(m_detail_total_in_currency, json[QString("detailTotalInCurrency")]);
    m_detail_total_in_currency_isSet = !json[QString("detailTotalInCurrency")].isNull() && m_detail_total_in_currency_isValid;

    m_discount_total_isValid = ::OpenAPI::fromJsonValue(m_discount_total, json[QString("discountTotal")]);
    m_discount_total_isSet = !json[QString("discountTotal")].isNull() && m_discount_total_isValid;

    m_discount_total_in_currency_isValid = ::OpenAPI::fromJsonValue(m_discount_total_in_currency, json[QString("discountTotalInCurrency")]);
    m_discount_total_in_currency_isSet = !json[QString("discountTotalInCurrency")].isNull() && m_discount_total_in_currency_isValid;

    m_document_type_isValid = ::OpenAPI::fromJsonValue(m_document_type, json[QString("documentType")]);
    m_document_type_isSet = !json[QString("documentType")].isNull() && m_document_type_isValid;

    m_document_version_number_isValid = ::OpenAPI::fromJsonValue(m_document_version_number, json[QString("documentVersionNumber")]);
    m_document_version_number_isSet = !json[QString("documentVersionNumber")].isNull() && m_document_version_number_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("exchangeRate")]);
    m_exchange_rate_isSet = !json[QString("exchangeRate")].isNull() && m_exchange_rate_isValid;

    m_financial_period_isValid = ::OpenAPI::fromJsonValue(m_financial_period, json[QString("financialPeriod")]);
    m_financial_period_isSet = !json[QString("financialPeriod")].isNull() && m_financial_period_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_invoice_lines_isValid = ::OpenAPI::fromJsonValue(m_invoice_lines, json[QString("invoiceLines")]);
    m_invoice_lines_isSet = !json[QString("invoiceLines")].isNull() && m_invoice_lines_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_orig_invoice_date_isValid = ::OpenAPI::fromJsonValue(m_orig_invoice_date, json[QString("origInvoiceDate")]);
    m_orig_invoice_date_isSet = !json[QString("origInvoiceDate")].isNull() && m_orig_invoice_date_isValid;

    m_pay_date_isValid = ::OpenAPI::fromJsonValue(m_pay_date, json[QString("payDate")]);
    m_pay_date_isSet = !json[QString("payDate")].isNull() && m_pay_date_isValid;

    m_pay_selected_isValid = ::OpenAPI::fromJsonValue(m_pay_selected, json[QString("paySelected")]);
    m_pay_selected_isSet = !json[QString("paySelected")].isNull() && m_pay_selected_isValid;

    m_payment_message_isValid = ::OpenAPI::fromJsonValue(m_payment_message, json[QString("paymentMessage")]);
    m_payment_message_isSet = !json[QString("paymentMessage")].isNull() && m_payment_message_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_payment_ref_no_isValid = ::OpenAPI::fromJsonValue(m_payment_ref_no, json[QString("paymentRefNo")]);
    m_payment_ref_no_isSet = !json[QString("paymentRefNo")].isNull() && m_payment_ref_no_isValid;

    m_post_period_isValid = ::OpenAPI::fromJsonValue(m_post_period, json[QString("postPeriod")]);
    m_post_period_isSet = !json[QString("postPeriod")].isNull() && m_post_period_isValid;

    m_reference_number_isValid = ::OpenAPI::fromJsonValue(m_reference_number, json[QString("referenceNumber")]);
    m_reference_number_isSet = !json[QString("referenceNumber")].isNull() && m_reference_number_isValid;

    m_retainage_apply_isValid = ::OpenAPI::fromJsonValue(m_retainage_apply, json[QString("retainageApply")]);
    m_retainage_apply_isSet = !json[QString("retainageApply")].isNull() && m_retainage_apply_isValid;

    m_rounding_diff_isValid = ::OpenAPI::fromJsonValue(m_rounding_diff, json[QString("roundingDiff")]);
    m_rounding_diff_isSet = !json[QString("roundingDiff")].isNull() && m_rounding_diff_isValid;

    m_rounding_diff_in_currency_isValid = ::OpenAPI::fromJsonValue(m_rounding_diff_in_currency, json[QString("roundingDiffInCurrency")]);
    m_rounding_diff_in_currency_isSet = !json[QString("roundingDiffInCurrency")].isNull() && m_rounding_diff_in_currency_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supplier_isValid = ::OpenAPI::fromJsonValue(m_supplier, json[QString("supplier")]);
    m_supplier_isSet = !json[QString("supplier")].isNull() && m_supplier_isValid;

    m_supplier_reference_isValid = ::OpenAPI::fromJsonValue(m_supplier_reference, json[QString("supplierReference")]);
    m_supplier_reference_isSet = !json[QString("supplierReference")].isNull() && m_supplier_reference_isValid;

    m_supplier_tax_zone_isValid = ::OpenAPI::fromJsonValue(m_supplier_tax_zone, json[QString("supplierTaxZone")]);
    m_supplier_tax_zone_isSet = !json[QString("supplierTaxZone")].isNull() && m_supplier_tax_zone_isValid;

    m_tax_calculation_mode_isValid = ::OpenAPI::fromJsonValue(m_tax_calculation_mode, json[QString("taxCalculationMode")]);
    m_tax_calculation_mode_isSet = !json[QString("taxCalculationMode")].isNull() && m_tax_calculation_mode_isValid;

    m_tax_detail_lines_isValid = ::OpenAPI::fromJsonValue(m_tax_detail_lines, json[QString("taxDetailLines")]);
    m_tax_detail_lines_isSet = !json[QString("taxDetailLines")].isNull() && m_tax_detail_lines_isValid;

    m_vat_amount_isValid = ::OpenAPI::fromJsonValue(m_vat_amount, json[QString("vatAmount")]);
    m_vat_amount_isSet = !json[QString("vatAmount")].isNull() && m_vat_amount_isValid;

    m_vat_exempt_total_isValid = ::OpenAPI::fromJsonValue(m_vat_exempt_total, json[QString("vatExemptTotal")]);
    m_vat_exempt_total_isSet = !json[QString("vatExemptTotal")].isNull() && m_vat_exempt_total_isValid;

    m_vat_exempt_total_in_currency_isValid = ::OpenAPI::fromJsonValue(m_vat_exempt_total_in_currency, json[QString("vatExemptTotalInCurrency")]);
    m_vat_exempt_total_in_currency_isSet = !json[QString("vatExemptTotalInCurrency")].isNull() && m_vat_exempt_total_in_currency_isValid;

    m_vat_taxable_total_isValid = ::OpenAPI::fromJsonValue(m_vat_taxable_total, json[QString("vatTaxableTotal")]);
    m_vat_taxable_total_isSet = !json[QString("vatTaxableTotal")].isNull() && m_vat_taxable_total_isValid;

    m_vat_taxable_total_in_currency_isValid = ::OpenAPI::fromJsonValue(m_vat_taxable_total_in_currency, json[QString("vatTaxableTotalInCurrency")]);
    m_vat_taxable_total_in_currency_isSet = !json[QString("vatTaxableTotalInCurrency")].isNull() && m_vat_taxable_total_in_currency_isValid;

    m_vat_total_isValid = ::OpenAPI::fromJsonValue(m_vat_total, json[QString("vatTotal")]);
    m_vat_total_isSet = !json[QString("vatTotal")].isNull() && m_vat_total_isValid;

    m_vat_total_in_currency_isValid = ::OpenAPI::fromJsonValue(m_vat_total_in_currency, json[QString("vatTotalInCurrency")]);
    m_vat_total_in_currency_isSet = !json[QString("vatTotalInCurrency")].isNull() && m_vat_total_in_currency_isValid;

    m_withholding_tax_isValid = ::OpenAPI::fromJsonValue(m_withholding_tax, json[QString("withholdingTax")]);
    m_withholding_tax_isSet = !json[QString("withholdingTax")].isNull() && m_withholding_tax_isValid;

    m_withholding_tax_in_currency_isValid = ::OpenAPI::fromJsonValue(m_withholding_tax_in_currency, json[QString("withholdingTaxInCurrency")]);
    m_withholding_tax_in_currency_isSet = !json[QString("withholdingTaxInCurrency")].isNull() && m_withholding_tax_in_currency_isValid;
}

QString OAISupplierInvoiceDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupplierInvoiceDto::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_approval_details.isSet()) {
        obj.insert(QString("approvalDetails"), ::OpenAPI::toJsonValue(m_approval_details));
    }
    if (m_approval_status_isSet) {
        obj.insert(QString("approvalStatus"), ::OpenAPI::toJsonValue(m_approval_status));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_balance_in_currency_isSet) {
        obj.insert(QString("balanceInCurrency"), ::OpenAPI::toJsonValue(m_balance_in_currency));
    }
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_buyer_reference_isSet) {
        obj.insert(QString("buyerReference"), ::OpenAPI::toJsonValue(m_buyer_reference));
    }
    if (m_cash_account_isSet) {
        obj.insert(QString("cashAccount"), ::OpenAPI::toJsonValue(m_cash_account));
    }
    if (m_cash_discount_isSet) {
        obj.insert(QString("cashDiscount"), ::OpenAPI::toJsonValue(m_cash_discount));
    }
    if (m_cash_discount_date_isSet) {
        obj.insert(QString("cashDiscountDate"), ::OpenAPI::toJsonValue(m_cash_discount_date));
    }
    if (m_cash_discount_in_currency_isSet) {
        obj.insert(QString("cashDiscountInCurrency"), ::OpenAPI::toJsonValue(m_cash_discount_in_currency));
    }
    if (m_closed_financial_period_isSet) {
        obj.insert(QString("closedFinancialPeriod"), ::OpenAPI::toJsonValue(m_closed_financial_period));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_credit_terms.isSet()) {
        obj.insert(QString("creditTerms"), ::OpenAPI::toJsonValue(m_credit_terms));
    }
    if (m_currency_id_isSet) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_cury_retainage_total_isSet) {
        obj.insert(QString("curyRetainageTotal"), ::OpenAPI::toJsonValue(m_cury_retainage_total));
    }
    if (m_cury_retainage_unreleased_amt_isSet) {
        obj.insert(QString("curyRetainageUnreleasedAmt"), ::OpenAPI::toJsonValue(m_cury_retainage_unreleased_amt));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_detail_total_isSet) {
        obj.insert(QString("detailTotal"), ::OpenAPI::toJsonValue(m_detail_total));
    }
    if (m_detail_total_in_currency_isSet) {
        obj.insert(QString("detailTotalInCurrency"), ::OpenAPI::toJsonValue(m_detail_total_in_currency));
    }
    if (m_discount_total_isSet) {
        obj.insert(QString("discountTotal"), ::OpenAPI::toJsonValue(m_discount_total));
    }
    if (m_discount_total_in_currency_isSet) {
        obj.insert(QString("discountTotalInCurrency"), ::OpenAPI::toJsonValue(m_discount_total_in_currency));
    }
    if (m_document_type_isSet) {
        obj.insert(QString("documentType"), ::OpenAPI::toJsonValue(m_document_type));
    }
    if (m_document_version_number_isSet) {
        obj.insert(QString("documentVersionNumber"), ::OpenAPI::toJsonValue(m_document_version_number));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_exchange_rate_isSet) {
        obj.insert(QString("exchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_financial_period_isSet) {
        obj.insert(QString("financialPeriod"), ::OpenAPI::toJsonValue(m_financial_period));
    }
    if (m_hold_isSet) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_invoice_lines.size() > 0) {
        obj.insert(QString("invoiceLines"), ::OpenAPI::toJsonValue(m_invoice_lines));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_orig_invoice_date_isSet) {
        obj.insert(QString("origInvoiceDate"), ::OpenAPI::toJsonValue(m_orig_invoice_date));
    }
    if (m_pay_date_isSet) {
        obj.insert(QString("payDate"), ::OpenAPI::toJsonValue(m_pay_date));
    }
    if (m_pay_selected_isSet) {
        obj.insert(QString("paySelected"), ::OpenAPI::toJsonValue(m_pay_selected));
    }
    if (m_payment_message_isSet) {
        obj.insert(QString("paymentMessage"), ::OpenAPI::toJsonValue(m_payment_message));
    }
    if (m_payment_method.isSet()) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_payment_ref_no_isSet) {
        obj.insert(QString("paymentRefNo"), ::OpenAPI::toJsonValue(m_payment_ref_no));
    }
    if (m_post_period_isSet) {
        obj.insert(QString("postPeriod"), ::OpenAPI::toJsonValue(m_post_period));
    }
    if (m_reference_number_isSet) {
        obj.insert(QString("referenceNumber"), ::OpenAPI::toJsonValue(m_reference_number));
    }
    if (m_retainage_apply_isSet) {
        obj.insert(QString("retainageApply"), ::OpenAPI::toJsonValue(m_retainage_apply));
    }
    if (m_rounding_diff_isSet) {
        obj.insert(QString("roundingDiff"), ::OpenAPI::toJsonValue(m_rounding_diff));
    }
    if (m_rounding_diff_in_currency_isSet) {
        obj.insert(QString("roundingDiffInCurrency"), ::OpenAPI::toJsonValue(m_rounding_diff_in_currency));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supplier.isSet()) {
        obj.insert(QString("supplier"), ::OpenAPI::toJsonValue(m_supplier));
    }
    if (m_supplier_reference_isSet) {
        obj.insert(QString("supplierReference"), ::OpenAPI::toJsonValue(m_supplier_reference));
    }
    if (m_supplier_tax_zone.isSet()) {
        obj.insert(QString("supplierTaxZone"), ::OpenAPI::toJsonValue(m_supplier_tax_zone));
    }
    if (m_tax_calculation_mode_isSet) {
        obj.insert(QString("taxCalculationMode"), ::OpenAPI::toJsonValue(m_tax_calculation_mode));
    }
    if (m_tax_detail_lines.size() > 0) {
        obj.insert(QString("taxDetailLines"), ::OpenAPI::toJsonValue(m_tax_detail_lines));
    }
    if (m_vat_amount_isSet) {
        obj.insert(QString("vatAmount"), ::OpenAPI::toJsonValue(m_vat_amount));
    }
    if (m_vat_exempt_total_isSet) {
        obj.insert(QString("vatExemptTotal"), ::OpenAPI::toJsonValue(m_vat_exempt_total));
    }
    if (m_vat_exempt_total_in_currency_isSet) {
        obj.insert(QString("vatExemptTotalInCurrency"), ::OpenAPI::toJsonValue(m_vat_exempt_total_in_currency));
    }
    if (m_vat_taxable_total_isSet) {
        obj.insert(QString("vatTaxableTotal"), ::OpenAPI::toJsonValue(m_vat_taxable_total));
    }
    if (m_vat_taxable_total_in_currency_isSet) {
        obj.insert(QString("vatTaxableTotalInCurrency"), ::OpenAPI::toJsonValue(m_vat_taxable_total_in_currency));
    }
    if (m_vat_total_isSet) {
        obj.insert(QString("vatTotal"), ::OpenAPI::toJsonValue(m_vat_total));
    }
    if (m_vat_total_in_currency_isSet) {
        obj.insert(QString("vatTotalInCurrency"), ::OpenAPI::toJsonValue(m_vat_total_in_currency));
    }
    if (m_withholding_tax_isSet) {
        obj.insert(QString("withholdingTax"), ::OpenAPI::toJsonValue(m_withholding_tax));
    }
    if (m_withholding_tax_in_currency_isSet) {
        obj.insert(QString("withholdingTaxInCurrency"), ::OpenAPI::toJsonValue(m_withholding_tax_in_currency));
    }
    return obj;
}

double OAISupplierInvoiceDto::getAmount() const {
    return m_amount;
}
void OAISupplierInvoiceDto::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAISupplierInvoiceDto::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAISupplierInvoiceDto::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIApprovalDetailsInSupplierInvoiceDto OAISupplierInvoiceDto::getApprovalDetails() const {
    return m_approval_details;
}
void OAISupplierInvoiceDto::setApprovalDetails(const OAIApprovalDetailsInSupplierInvoiceDto &approval_details) {
    m_approval_details = approval_details;
    m_approval_details_isSet = true;
}

bool OAISupplierInvoiceDto::is_approval_details_Set() const{
    return m_approval_details_isSet;
}

bool OAISupplierInvoiceDto::is_approval_details_Valid() const{
    return m_approval_details_isValid;
}

QString OAISupplierInvoiceDto::getApprovalStatus() const {
    return m_approval_status;
}
void OAISupplierInvoiceDto::setApprovalStatus(const QString &approval_status) {
    m_approval_status = approval_status;
    m_approval_status_isSet = true;
}

bool OAISupplierInvoiceDto::is_approval_status_Set() const{
    return m_approval_status_isSet;
}

bool OAISupplierInvoiceDto::is_approval_status_Valid() const{
    return m_approval_status_isValid;
}

QList<OAIAttachmentDto> OAISupplierInvoiceDto::getAttachments() const {
    return m_attachments;
}
void OAISupplierInvoiceDto::setAttachments(const QList<OAIAttachmentDto> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAISupplierInvoiceDto::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAISupplierInvoiceDto::is_attachments_Valid() const{
    return m_attachments_isValid;
}

double OAISupplierInvoiceDto::getBalance() const {
    return m_balance;
}
void OAISupplierInvoiceDto::setBalance(const double &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAISupplierInvoiceDto::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAISupplierInvoiceDto::is_balance_Valid() const{
    return m_balance_isValid;
}

double OAISupplierInvoiceDto::getBalanceInCurrency() const {
    return m_balance_in_currency;
}
void OAISupplierInvoiceDto::setBalanceInCurrency(const double &balance_in_currency) {
    m_balance_in_currency = balance_in_currency;
    m_balance_in_currency_isSet = true;
}

bool OAISupplierInvoiceDto::is_balance_in_currency_Set() const{
    return m_balance_in_currency_isSet;
}

bool OAISupplierInvoiceDto::is_balance_in_currency_Valid() const{
    return m_balance_in_currency_isValid;
}

OAIBranchNumberDto OAISupplierInvoiceDto::getBranchNumber() const {
    return m_branch_number;
}
void OAISupplierInvoiceDto::setBranchNumber(const OAIBranchNumberDto &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAISupplierInvoiceDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAISupplierInvoiceDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

QString OAISupplierInvoiceDto::getBuyerReference() const {
    return m_buyer_reference;
}
void OAISupplierInvoiceDto::setBuyerReference(const QString &buyer_reference) {
    m_buyer_reference = buyer_reference;
    m_buyer_reference_isSet = true;
}

bool OAISupplierInvoiceDto::is_buyer_reference_Set() const{
    return m_buyer_reference_isSet;
}

bool OAISupplierInvoiceDto::is_buyer_reference_Valid() const{
    return m_buyer_reference_isValid;
}

QString OAISupplierInvoiceDto::getCashAccount() const {
    return m_cash_account;
}
void OAISupplierInvoiceDto::setCashAccount(const QString &cash_account) {
    m_cash_account = cash_account;
    m_cash_account_isSet = true;
}

bool OAISupplierInvoiceDto::is_cash_account_Set() const{
    return m_cash_account_isSet;
}

bool OAISupplierInvoiceDto::is_cash_account_Valid() const{
    return m_cash_account_isValid;
}

double OAISupplierInvoiceDto::getCashDiscount() const {
    return m_cash_discount;
}
void OAISupplierInvoiceDto::setCashDiscount(const double &cash_discount) {
    m_cash_discount = cash_discount;
    m_cash_discount_isSet = true;
}

bool OAISupplierInvoiceDto::is_cash_discount_Set() const{
    return m_cash_discount_isSet;
}

bool OAISupplierInvoiceDto::is_cash_discount_Valid() const{
    return m_cash_discount_isValid;
}

QDateTime OAISupplierInvoiceDto::getCashDiscountDate() const {
    return m_cash_discount_date;
}
void OAISupplierInvoiceDto::setCashDiscountDate(const QDateTime &cash_discount_date) {
    m_cash_discount_date = cash_discount_date;
    m_cash_discount_date_isSet = true;
}

bool OAISupplierInvoiceDto::is_cash_discount_date_Set() const{
    return m_cash_discount_date_isSet;
}

bool OAISupplierInvoiceDto::is_cash_discount_date_Valid() const{
    return m_cash_discount_date_isValid;
}

double OAISupplierInvoiceDto::getCashDiscountInCurrency() const {
    return m_cash_discount_in_currency;
}
void OAISupplierInvoiceDto::setCashDiscountInCurrency(const double &cash_discount_in_currency) {
    m_cash_discount_in_currency = cash_discount_in_currency;
    m_cash_discount_in_currency_isSet = true;
}

bool OAISupplierInvoiceDto::is_cash_discount_in_currency_Set() const{
    return m_cash_discount_in_currency_isSet;
}

bool OAISupplierInvoiceDto::is_cash_discount_in_currency_Valid() const{
    return m_cash_discount_in_currency_isValid;
}

QString OAISupplierInvoiceDto::getClosedFinancialPeriod() const {
    return m_closed_financial_period;
}
void OAISupplierInvoiceDto::setClosedFinancialPeriod(const QString &closed_financial_period) {
    m_closed_financial_period = closed_financial_period;
    m_closed_financial_period_isSet = true;
}

bool OAISupplierInvoiceDto::is_closed_financial_period_Set() const{
    return m_closed_financial_period_isSet;
}

bool OAISupplierInvoiceDto::is_closed_financial_period_Valid() const{
    return m_closed_financial_period_isValid;
}

QDateTime OAISupplierInvoiceDto::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAISupplierInvoiceDto::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAISupplierInvoiceDto::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAISupplierInvoiceDto::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

OAICreditTermsInSupplierInvoiceDto OAISupplierInvoiceDto::getCreditTerms() const {
    return m_credit_terms;
}
void OAISupplierInvoiceDto::setCreditTerms(const OAICreditTermsInSupplierInvoiceDto &credit_terms) {
    m_credit_terms = credit_terms;
    m_credit_terms_isSet = true;
}

bool OAISupplierInvoiceDto::is_credit_terms_Set() const{
    return m_credit_terms_isSet;
}

bool OAISupplierInvoiceDto::is_credit_terms_Valid() const{
    return m_credit_terms_isValid;
}

QString OAISupplierInvoiceDto::getCurrencyId() const {
    return m_currency_id;
}
void OAISupplierInvoiceDto::setCurrencyId(const QString &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAISupplierInvoiceDto::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAISupplierInvoiceDto::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

double OAISupplierInvoiceDto::getCuryRetainageTotal() const {
    return m_cury_retainage_total;
}
void OAISupplierInvoiceDto::setCuryRetainageTotal(const double &cury_retainage_total) {
    m_cury_retainage_total = cury_retainage_total;
    m_cury_retainage_total_isSet = true;
}

bool OAISupplierInvoiceDto::is_cury_retainage_total_Set() const{
    return m_cury_retainage_total_isSet;
}

bool OAISupplierInvoiceDto::is_cury_retainage_total_Valid() const{
    return m_cury_retainage_total_isValid;
}

double OAISupplierInvoiceDto::getCuryRetainageUnreleasedAmt() const {
    return m_cury_retainage_unreleased_amt;
}
void OAISupplierInvoiceDto::setCuryRetainageUnreleasedAmt(const double &cury_retainage_unreleased_amt) {
    m_cury_retainage_unreleased_amt = cury_retainage_unreleased_amt;
    m_cury_retainage_unreleased_amt_isSet = true;
}

bool OAISupplierInvoiceDto::is_cury_retainage_unreleased_amt_Set() const{
    return m_cury_retainage_unreleased_amt_isSet;
}

bool OAISupplierInvoiceDto::is_cury_retainage_unreleased_amt_Valid() const{
    return m_cury_retainage_unreleased_amt_isValid;
}

QDateTime OAISupplierInvoiceDto::getDate() const {
    return m_date;
}
void OAISupplierInvoiceDto::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAISupplierInvoiceDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAISupplierInvoiceDto::is_date_Valid() const{
    return m_date_isValid;
}

QString OAISupplierInvoiceDto::getDescription() const {
    return m_description;
}
void OAISupplierInvoiceDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISupplierInvoiceDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAISupplierInvoiceDto::is_description_Valid() const{
    return m_description_isValid;
}

double OAISupplierInvoiceDto::getDetailTotal() const {
    return m_detail_total;
}
void OAISupplierInvoiceDto::setDetailTotal(const double &detail_total) {
    m_detail_total = detail_total;
    m_detail_total_isSet = true;
}

bool OAISupplierInvoiceDto::is_detail_total_Set() const{
    return m_detail_total_isSet;
}

bool OAISupplierInvoiceDto::is_detail_total_Valid() const{
    return m_detail_total_isValid;
}

double OAISupplierInvoiceDto::getDetailTotalInCurrency() const {
    return m_detail_total_in_currency;
}
void OAISupplierInvoiceDto::setDetailTotalInCurrency(const double &detail_total_in_currency) {
    m_detail_total_in_currency = detail_total_in_currency;
    m_detail_total_in_currency_isSet = true;
}

bool OAISupplierInvoiceDto::is_detail_total_in_currency_Set() const{
    return m_detail_total_in_currency_isSet;
}

bool OAISupplierInvoiceDto::is_detail_total_in_currency_Valid() const{
    return m_detail_total_in_currency_isValid;
}

double OAISupplierInvoiceDto::getDiscountTotal() const {
    return m_discount_total;
}
void OAISupplierInvoiceDto::setDiscountTotal(const double &discount_total) {
    m_discount_total = discount_total;
    m_discount_total_isSet = true;
}

bool OAISupplierInvoiceDto::is_discount_total_Set() const{
    return m_discount_total_isSet;
}

bool OAISupplierInvoiceDto::is_discount_total_Valid() const{
    return m_discount_total_isValid;
}

double OAISupplierInvoiceDto::getDiscountTotalInCurrency() const {
    return m_discount_total_in_currency;
}
void OAISupplierInvoiceDto::setDiscountTotalInCurrency(const double &discount_total_in_currency) {
    m_discount_total_in_currency = discount_total_in_currency;
    m_discount_total_in_currency_isSet = true;
}

bool OAISupplierInvoiceDto::is_discount_total_in_currency_Set() const{
    return m_discount_total_in_currency_isSet;
}

bool OAISupplierInvoiceDto::is_discount_total_in_currency_Valid() const{
    return m_discount_total_in_currency_isValid;
}

QString OAISupplierInvoiceDto::getDocumentType() const {
    return m_document_type;
}
void OAISupplierInvoiceDto::setDocumentType(const QString &document_type) {
    m_document_type = document_type;
    m_document_type_isSet = true;
}

bool OAISupplierInvoiceDto::is_document_type_Set() const{
    return m_document_type_isSet;
}

bool OAISupplierInvoiceDto::is_document_type_Valid() const{
    return m_document_type_isValid;
}

qint64 OAISupplierInvoiceDto::getDocumentVersionNumber() const {
    return m_document_version_number;
}
void OAISupplierInvoiceDto::setDocumentVersionNumber(const qint64 &document_version_number) {
    m_document_version_number = document_version_number;
    m_document_version_number_isSet = true;
}

bool OAISupplierInvoiceDto::is_document_version_number_Set() const{
    return m_document_version_number_isSet;
}

bool OAISupplierInvoiceDto::is_document_version_number_Valid() const{
    return m_document_version_number_isValid;
}

QDateTime OAISupplierInvoiceDto::getDueDate() const {
    return m_due_date;
}
void OAISupplierInvoiceDto::setDueDate(const QDateTime &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAISupplierInvoiceDto::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAISupplierInvoiceDto::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QString OAISupplierInvoiceDto::getErrorInfo() const {
    return m_error_info;
}
void OAISupplierInvoiceDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAISupplierInvoiceDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAISupplierInvoiceDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

double OAISupplierInvoiceDto::getExchangeRate() const {
    return m_exchange_rate;
}
void OAISupplierInvoiceDto::setExchangeRate(const double &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAISupplierInvoiceDto::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAISupplierInvoiceDto::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

QString OAISupplierInvoiceDto::getFinancialPeriod() const {
    return m_financial_period;
}
void OAISupplierInvoiceDto::setFinancialPeriod(const QString &financial_period) {
    m_financial_period = financial_period;
    m_financial_period_isSet = true;
}

bool OAISupplierInvoiceDto::is_financial_period_Set() const{
    return m_financial_period_isSet;
}

bool OAISupplierInvoiceDto::is_financial_period_Valid() const{
    return m_financial_period_isValid;
}

bool OAISupplierInvoiceDto::isHold() const {
    return m_hold;
}
void OAISupplierInvoiceDto::setHold(const bool &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAISupplierInvoiceDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAISupplierInvoiceDto::is_hold_Valid() const{
    return m_hold_isValid;
}

QList<OAISupplierInvoiceLineDto> OAISupplierInvoiceDto::getInvoiceLines() const {
    return m_invoice_lines;
}
void OAISupplierInvoiceDto::setInvoiceLines(const QList<OAISupplierInvoiceLineDto> &invoice_lines) {
    m_invoice_lines = invoice_lines;
    m_invoice_lines_isSet = true;
}

bool OAISupplierInvoiceDto::is_invoice_lines_Set() const{
    return m_invoice_lines_isSet;
}

bool OAISupplierInvoiceDto::is_invoice_lines_Valid() const{
    return m_invoice_lines_isValid;
}

QDateTime OAISupplierInvoiceDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAISupplierInvoiceDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAISupplierInvoiceDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAISupplierInvoiceDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAILocationInSupplierInvoiceDto OAISupplierInvoiceDto::getLocation() const {
    return m_location;
}
void OAISupplierInvoiceDto::setLocation(const OAILocationInSupplierInvoiceDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAISupplierInvoiceDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAISupplierInvoiceDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIMetadataDto OAISupplierInvoiceDto::getMetadata() const {
    return m_metadata;
}
void OAISupplierInvoiceDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISupplierInvoiceDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISupplierInvoiceDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAISupplierInvoiceDto::getNote() const {
    return m_note;
}
void OAISupplierInvoiceDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAISupplierInvoiceDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAISupplierInvoiceDto::is_note_Valid() const{
    return m_note_isValid;
}

QDateTime OAISupplierInvoiceDto::getOrigInvoiceDate() const {
    return m_orig_invoice_date;
}
void OAISupplierInvoiceDto::setOrigInvoiceDate(const QDateTime &orig_invoice_date) {
    m_orig_invoice_date = orig_invoice_date;
    m_orig_invoice_date_isSet = true;
}

bool OAISupplierInvoiceDto::is_orig_invoice_date_Set() const{
    return m_orig_invoice_date_isSet;
}

bool OAISupplierInvoiceDto::is_orig_invoice_date_Valid() const{
    return m_orig_invoice_date_isValid;
}

QDateTime OAISupplierInvoiceDto::getPayDate() const {
    return m_pay_date;
}
void OAISupplierInvoiceDto::setPayDate(const QDateTime &pay_date) {
    m_pay_date = pay_date;
    m_pay_date_isSet = true;
}

bool OAISupplierInvoiceDto::is_pay_date_Set() const{
    return m_pay_date_isSet;
}

bool OAISupplierInvoiceDto::is_pay_date_Valid() const{
    return m_pay_date_isValid;
}

bool OAISupplierInvoiceDto::isPaySelected() const {
    return m_pay_selected;
}
void OAISupplierInvoiceDto::setPaySelected(const bool &pay_selected) {
    m_pay_selected = pay_selected;
    m_pay_selected_isSet = true;
}

bool OAISupplierInvoiceDto::is_pay_selected_Set() const{
    return m_pay_selected_isSet;
}

bool OAISupplierInvoiceDto::is_pay_selected_Valid() const{
    return m_pay_selected_isValid;
}

QString OAISupplierInvoiceDto::getPaymentMessage() const {
    return m_payment_message;
}
void OAISupplierInvoiceDto::setPaymentMessage(const QString &payment_message) {
    m_payment_message = payment_message;
    m_payment_message_isSet = true;
}

bool OAISupplierInvoiceDto::is_payment_message_Set() const{
    return m_payment_message_isSet;
}

bool OAISupplierInvoiceDto::is_payment_message_Valid() const{
    return m_payment_message_isValid;
}

OAIPaymentMethodInSupplierInvoiceDto OAISupplierInvoiceDto::getPaymentMethod() const {
    return m_payment_method;
}
void OAISupplierInvoiceDto::setPaymentMethod(const OAIPaymentMethodInSupplierInvoiceDto &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAISupplierInvoiceDto::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAISupplierInvoiceDto::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAISupplierInvoiceDto::getPaymentRefNo() const {
    return m_payment_ref_no;
}
void OAISupplierInvoiceDto::setPaymentRefNo(const QString &payment_ref_no) {
    m_payment_ref_no = payment_ref_no;
    m_payment_ref_no_isSet = true;
}

bool OAISupplierInvoiceDto::is_payment_ref_no_Set() const{
    return m_payment_ref_no_isSet;
}

bool OAISupplierInvoiceDto::is_payment_ref_no_Valid() const{
    return m_payment_ref_no_isValid;
}

QString OAISupplierInvoiceDto::getPostPeriod() const {
    return m_post_period;
}
void OAISupplierInvoiceDto::setPostPeriod(const QString &post_period) {
    m_post_period = post_period;
    m_post_period_isSet = true;
}

bool OAISupplierInvoiceDto::is_post_period_Set() const{
    return m_post_period_isSet;
}

bool OAISupplierInvoiceDto::is_post_period_Valid() const{
    return m_post_period_isValid;
}

QString OAISupplierInvoiceDto::getReferenceNumber() const {
    return m_reference_number;
}
void OAISupplierInvoiceDto::setReferenceNumber(const QString &reference_number) {
    m_reference_number = reference_number;
    m_reference_number_isSet = true;
}

bool OAISupplierInvoiceDto::is_reference_number_Set() const{
    return m_reference_number_isSet;
}

bool OAISupplierInvoiceDto::is_reference_number_Valid() const{
    return m_reference_number_isValid;
}

bool OAISupplierInvoiceDto::isRetainageApply() const {
    return m_retainage_apply;
}
void OAISupplierInvoiceDto::setRetainageApply(const bool &retainage_apply) {
    m_retainage_apply = retainage_apply;
    m_retainage_apply_isSet = true;
}

bool OAISupplierInvoiceDto::is_retainage_apply_Set() const{
    return m_retainage_apply_isSet;
}

bool OAISupplierInvoiceDto::is_retainage_apply_Valid() const{
    return m_retainage_apply_isValid;
}

double OAISupplierInvoiceDto::getRoundingDiff() const {
    return m_rounding_diff;
}
void OAISupplierInvoiceDto::setRoundingDiff(const double &rounding_diff) {
    m_rounding_diff = rounding_diff;
    m_rounding_diff_isSet = true;
}

bool OAISupplierInvoiceDto::is_rounding_diff_Set() const{
    return m_rounding_diff_isSet;
}

bool OAISupplierInvoiceDto::is_rounding_diff_Valid() const{
    return m_rounding_diff_isValid;
}

double OAISupplierInvoiceDto::getRoundingDiffInCurrency() const {
    return m_rounding_diff_in_currency;
}
void OAISupplierInvoiceDto::setRoundingDiffInCurrency(const double &rounding_diff_in_currency) {
    m_rounding_diff_in_currency = rounding_diff_in_currency;
    m_rounding_diff_in_currency_isSet = true;
}

bool OAISupplierInvoiceDto::is_rounding_diff_in_currency_Set() const{
    return m_rounding_diff_in_currency_isSet;
}

bool OAISupplierInvoiceDto::is_rounding_diff_in_currency_Valid() const{
    return m_rounding_diff_in_currency_isValid;
}

QString OAISupplierInvoiceDto::getStatus() const {
    return m_status;
}
void OAISupplierInvoiceDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISupplierInvoiceDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAISupplierInvoiceDto::is_status_Valid() const{
    return m_status_isValid;
}

OAISupplierInSupplierInvoiceDto OAISupplierInvoiceDto::getSupplier() const {
    return m_supplier;
}
void OAISupplierInvoiceDto::setSupplier(const OAISupplierInSupplierInvoiceDto &supplier) {
    m_supplier = supplier;
    m_supplier_isSet = true;
}

bool OAISupplierInvoiceDto::is_supplier_Set() const{
    return m_supplier_isSet;
}

bool OAISupplierInvoiceDto::is_supplier_Valid() const{
    return m_supplier_isValid;
}

QString OAISupplierInvoiceDto::getSupplierReference() const {
    return m_supplier_reference;
}
void OAISupplierInvoiceDto::setSupplierReference(const QString &supplier_reference) {
    m_supplier_reference = supplier_reference;
    m_supplier_reference_isSet = true;
}

bool OAISupplierInvoiceDto::is_supplier_reference_Set() const{
    return m_supplier_reference_isSet;
}

bool OAISupplierInvoiceDto::is_supplier_reference_Valid() const{
    return m_supplier_reference_isValid;
}

OAISupplierTaxZoneInSupplierInvoiceDto OAISupplierInvoiceDto::getSupplierTaxZone() const {
    return m_supplier_tax_zone;
}
void OAISupplierInvoiceDto::setSupplierTaxZone(const OAISupplierTaxZoneInSupplierInvoiceDto &supplier_tax_zone) {
    m_supplier_tax_zone = supplier_tax_zone;
    m_supplier_tax_zone_isSet = true;
}

bool OAISupplierInvoiceDto::is_supplier_tax_zone_Set() const{
    return m_supplier_tax_zone_isSet;
}

bool OAISupplierInvoiceDto::is_supplier_tax_zone_Valid() const{
    return m_supplier_tax_zone_isValid;
}

QString OAISupplierInvoiceDto::getTaxCalculationMode() const {
    return m_tax_calculation_mode;
}
void OAISupplierInvoiceDto::setTaxCalculationMode(const QString &tax_calculation_mode) {
    m_tax_calculation_mode = tax_calculation_mode;
    m_tax_calculation_mode_isSet = true;
}

bool OAISupplierInvoiceDto::is_tax_calculation_mode_Set() const{
    return m_tax_calculation_mode_isSet;
}

bool OAISupplierInvoiceDto::is_tax_calculation_mode_Valid() const{
    return m_tax_calculation_mode_isValid;
}

QList<OAITaxDetailDto> OAISupplierInvoiceDto::getTaxDetailLines() const {
    return m_tax_detail_lines;
}
void OAISupplierInvoiceDto::setTaxDetailLines(const QList<OAITaxDetailDto> &tax_detail_lines) {
    m_tax_detail_lines = tax_detail_lines;
    m_tax_detail_lines_isSet = true;
}

bool OAISupplierInvoiceDto::is_tax_detail_lines_Set() const{
    return m_tax_detail_lines_isSet;
}

bool OAISupplierInvoiceDto::is_tax_detail_lines_Valid() const{
    return m_tax_detail_lines_isValid;
}

double OAISupplierInvoiceDto::getVatAmount() const {
    return m_vat_amount;
}
void OAISupplierInvoiceDto::setVatAmount(const double &vat_amount) {
    m_vat_amount = vat_amount;
    m_vat_amount_isSet = true;
}

bool OAISupplierInvoiceDto::is_vat_amount_Set() const{
    return m_vat_amount_isSet;
}

bool OAISupplierInvoiceDto::is_vat_amount_Valid() const{
    return m_vat_amount_isValid;
}

double OAISupplierInvoiceDto::getVatExemptTotal() const {
    return m_vat_exempt_total;
}
void OAISupplierInvoiceDto::setVatExemptTotal(const double &vat_exempt_total) {
    m_vat_exempt_total = vat_exempt_total;
    m_vat_exempt_total_isSet = true;
}

bool OAISupplierInvoiceDto::is_vat_exempt_total_Set() const{
    return m_vat_exempt_total_isSet;
}

bool OAISupplierInvoiceDto::is_vat_exempt_total_Valid() const{
    return m_vat_exempt_total_isValid;
}

double OAISupplierInvoiceDto::getVatExemptTotalInCurrency() const {
    return m_vat_exempt_total_in_currency;
}
void OAISupplierInvoiceDto::setVatExemptTotalInCurrency(const double &vat_exempt_total_in_currency) {
    m_vat_exempt_total_in_currency = vat_exempt_total_in_currency;
    m_vat_exempt_total_in_currency_isSet = true;
}

bool OAISupplierInvoiceDto::is_vat_exempt_total_in_currency_Set() const{
    return m_vat_exempt_total_in_currency_isSet;
}

bool OAISupplierInvoiceDto::is_vat_exempt_total_in_currency_Valid() const{
    return m_vat_exempt_total_in_currency_isValid;
}

double OAISupplierInvoiceDto::getVatTaxableTotal() const {
    return m_vat_taxable_total;
}
void OAISupplierInvoiceDto::setVatTaxableTotal(const double &vat_taxable_total) {
    m_vat_taxable_total = vat_taxable_total;
    m_vat_taxable_total_isSet = true;
}

bool OAISupplierInvoiceDto::is_vat_taxable_total_Set() const{
    return m_vat_taxable_total_isSet;
}

bool OAISupplierInvoiceDto::is_vat_taxable_total_Valid() const{
    return m_vat_taxable_total_isValid;
}

double OAISupplierInvoiceDto::getVatTaxableTotalInCurrency() const {
    return m_vat_taxable_total_in_currency;
}
void OAISupplierInvoiceDto::setVatTaxableTotalInCurrency(const double &vat_taxable_total_in_currency) {
    m_vat_taxable_total_in_currency = vat_taxable_total_in_currency;
    m_vat_taxable_total_in_currency_isSet = true;
}

bool OAISupplierInvoiceDto::is_vat_taxable_total_in_currency_Set() const{
    return m_vat_taxable_total_in_currency_isSet;
}

bool OAISupplierInvoiceDto::is_vat_taxable_total_in_currency_Valid() const{
    return m_vat_taxable_total_in_currency_isValid;
}

double OAISupplierInvoiceDto::getVatTotal() const {
    return m_vat_total;
}
void OAISupplierInvoiceDto::setVatTotal(const double &vat_total) {
    m_vat_total = vat_total;
    m_vat_total_isSet = true;
}

bool OAISupplierInvoiceDto::is_vat_total_Set() const{
    return m_vat_total_isSet;
}

bool OAISupplierInvoiceDto::is_vat_total_Valid() const{
    return m_vat_total_isValid;
}

double OAISupplierInvoiceDto::getVatTotalInCurrency() const {
    return m_vat_total_in_currency;
}
void OAISupplierInvoiceDto::setVatTotalInCurrency(const double &vat_total_in_currency) {
    m_vat_total_in_currency = vat_total_in_currency;
    m_vat_total_in_currency_isSet = true;
}

bool OAISupplierInvoiceDto::is_vat_total_in_currency_Set() const{
    return m_vat_total_in_currency_isSet;
}

bool OAISupplierInvoiceDto::is_vat_total_in_currency_Valid() const{
    return m_vat_total_in_currency_isValid;
}

double OAISupplierInvoiceDto::getWithholdingTax() const {
    return m_withholding_tax;
}
void OAISupplierInvoiceDto::setWithholdingTax(const double &withholding_tax) {
    m_withholding_tax = withholding_tax;
    m_withholding_tax_isSet = true;
}

bool OAISupplierInvoiceDto::is_withholding_tax_Set() const{
    return m_withholding_tax_isSet;
}

bool OAISupplierInvoiceDto::is_withholding_tax_Valid() const{
    return m_withholding_tax_isValid;
}

double OAISupplierInvoiceDto::getWithholdingTaxInCurrency() const {
    return m_withholding_tax_in_currency;
}
void OAISupplierInvoiceDto::setWithholdingTaxInCurrency(const double &withholding_tax_in_currency) {
    m_withholding_tax_in_currency = withholding_tax_in_currency;
    m_withholding_tax_in_currency_isSet = true;
}

bool OAISupplierInvoiceDto::is_withholding_tax_in_currency_Set() const{
    return m_withholding_tax_in_currency_isSet;
}

bool OAISupplierInvoiceDto::is_withholding_tax_in_currency_Valid() const{
    return m_withholding_tax_in_currency_isValid;
}

bool OAISupplierInvoiceDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_discount_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_discount_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_financial_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cury_retainage_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cury_retainage_unreleased_amt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_total_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_total_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_financial_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orig_invoice_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_selected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_ref_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retainage_apply_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rounding_diff_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rounding_diff_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_tax_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_calculation_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_detail_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_exempt_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_exempt_total_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_taxable_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_taxable_total_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_total_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_withholding_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_withholding_tax_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupplierInvoiceDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
