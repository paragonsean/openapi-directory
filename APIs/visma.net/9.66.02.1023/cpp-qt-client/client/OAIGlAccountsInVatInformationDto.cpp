/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlAccountsInVatInformationDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlAccountsInVatInformationDto::OAIGlAccountsInVatInformationDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlAccountsInVatInformationDto::OAIGlAccountsInVatInformationDto() {
    this->initializeModel();
}

OAIGlAccountsInVatInformationDto::~OAIGlAccountsInVatInformationDto() {}

void OAIGlAccountsInVatInformationDto::initializeModel() {

    m_vat_claimable_account_isSet = false;
    m_vat_claimable_account_isValid = false;

    m_vat_claimable_subccount_isSet = false;
    m_vat_claimable_subccount_isValid = false;

    m_vat_payable_account_isSet = false;
    m_vat_payable_account_isValid = false;

    m_vat_payable_subaccount_isSet = false;
    m_vat_payable_subaccount_isValid = false;
}

void OAIGlAccountsInVatInformationDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlAccountsInVatInformationDto::fromJsonObject(QJsonObject json) {

    m_vat_claimable_account_isValid = ::OpenAPI::fromJsonValue(m_vat_claimable_account, json[QString("vatClaimableAccount")]);
    m_vat_claimable_account_isSet = !json[QString("vatClaimableAccount")].isNull() && m_vat_claimable_account_isValid;

    m_vat_claimable_subccount_isValid = ::OpenAPI::fromJsonValue(m_vat_claimable_subccount, json[QString("vatClaimableSubccount")]);
    m_vat_claimable_subccount_isSet = !json[QString("vatClaimableSubccount")].isNull() && m_vat_claimable_subccount_isValid;

    m_vat_payable_account_isValid = ::OpenAPI::fromJsonValue(m_vat_payable_account, json[QString("vatPayableAccount")]);
    m_vat_payable_account_isSet = !json[QString("vatPayableAccount")].isNull() && m_vat_payable_account_isValid;

    m_vat_payable_subaccount_isValid = ::OpenAPI::fromJsonValue(m_vat_payable_subaccount, json[QString("vatPayableSubaccount")]);
    m_vat_payable_subaccount_isSet = !json[QString("vatPayableSubaccount")].isNull() && m_vat_payable_subaccount_isValid;
}

QString OAIGlAccountsInVatInformationDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlAccountsInVatInformationDto::asJsonObject() const {
    QJsonObject obj;
    if (m_vat_claimable_account.isSet()) {
        obj.insert(QString("vatClaimableAccount"), ::OpenAPI::toJsonValue(m_vat_claimable_account));
    }
    if (m_vat_claimable_subccount.isSet()) {
        obj.insert(QString("vatClaimableSubccount"), ::OpenAPI::toJsonValue(m_vat_claimable_subccount));
    }
    if (m_vat_payable_account.isSet()) {
        obj.insert(QString("vatPayableAccount"), ::OpenAPI::toJsonValue(m_vat_payable_account));
    }
    if (m_vat_payable_subaccount.isSet()) {
        obj.insert(QString("vatPayableSubaccount"), ::OpenAPI::toJsonValue(m_vat_payable_subaccount));
    }
    return obj;
}

OAIVatClaimableAccountInVatGlAccountsDto OAIGlAccountsInVatInformationDto::getVatClaimableAccount() const {
    return m_vat_claimable_account;
}
void OAIGlAccountsInVatInformationDto::setVatClaimableAccount(const OAIVatClaimableAccountInVatGlAccountsDto &vat_claimable_account) {
    m_vat_claimable_account = vat_claimable_account;
    m_vat_claimable_account_isSet = true;
}

bool OAIGlAccountsInVatInformationDto::is_vat_claimable_account_Set() const{
    return m_vat_claimable_account_isSet;
}

bool OAIGlAccountsInVatInformationDto::is_vat_claimable_account_Valid() const{
    return m_vat_claimable_account_isValid;
}

OAIVatClaimableSubccountInVatGlAccountsDto OAIGlAccountsInVatInformationDto::getVatClaimableSubccount() const {
    return m_vat_claimable_subccount;
}
void OAIGlAccountsInVatInformationDto::setVatClaimableSubccount(const OAIVatClaimableSubccountInVatGlAccountsDto &vat_claimable_subccount) {
    m_vat_claimable_subccount = vat_claimable_subccount;
    m_vat_claimable_subccount_isSet = true;
}

bool OAIGlAccountsInVatInformationDto::is_vat_claimable_subccount_Set() const{
    return m_vat_claimable_subccount_isSet;
}

bool OAIGlAccountsInVatInformationDto::is_vat_claimable_subccount_Valid() const{
    return m_vat_claimable_subccount_isValid;
}

OAIVatPayableAccountInVatGlAccountsDto OAIGlAccountsInVatInformationDto::getVatPayableAccount() const {
    return m_vat_payable_account;
}
void OAIGlAccountsInVatInformationDto::setVatPayableAccount(const OAIVatPayableAccountInVatGlAccountsDto &vat_payable_account) {
    m_vat_payable_account = vat_payable_account;
    m_vat_payable_account_isSet = true;
}

bool OAIGlAccountsInVatInformationDto::is_vat_payable_account_Set() const{
    return m_vat_payable_account_isSet;
}

bool OAIGlAccountsInVatInformationDto::is_vat_payable_account_Valid() const{
    return m_vat_payable_account_isValid;
}

OAIVatPayableSubaccountInVatGlAccountsDto OAIGlAccountsInVatInformationDto::getVatPayableSubaccount() const {
    return m_vat_payable_subaccount;
}
void OAIGlAccountsInVatInformationDto::setVatPayableSubaccount(const OAIVatPayableSubaccountInVatGlAccountsDto &vat_payable_subaccount) {
    m_vat_payable_subaccount = vat_payable_subaccount;
    m_vat_payable_subaccount_isSet = true;
}

bool OAIGlAccountsInVatInformationDto::is_vat_payable_subaccount_Set() const{
    return m_vat_payable_subaccount_isSet;
}

bool OAIGlAccountsInVatInformationDto::is_vat_payable_subaccount_Valid() const{
    return m_vat_payable_subaccount_isValid;
}

bool OAIGlAccountsInVatInformationDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vat_claimable_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_claimable_subccount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_payable_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_payable_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlAccountsInVatInformationDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
