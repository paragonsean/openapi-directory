/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerContractDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerContractDto::OAICustomerContractDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerContractDto::OAICustomerContractDto() {
    this->initializeModel();
}

OAICustomerContractDto::~OAICustomerContractDto() {}

void OAICustomerContractDto::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_contract_id_isSet = false;
    m_contract_id_isValid = false;

    m_contract_template_isSet = false;
    m_contract_template_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAICustomerContractDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerContractDto::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_contract_id_isValid = ::OpenAPI::fromJsonValue(m_contract_id, json[QString("contractId")]);
    m_contract_id_isSet = !json[QString("contractId")].isNull() && m_contract_id_isValid;

    m_contract_template_isValid = ::OpenAPI::fromJsonValue(m_contract_template, json[QString("contractTemplate")]);
    m_contract_template_isSet = !json[QString("contractTemplate")].isNull() && m_contract_template_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;
}

QString OAICustomerContractDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerContractDto::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_contract_id_isSet) {
        obj.insert(QString("contractId"), ::OpenAPI::toJsonValue(m_contract_id));
    }
    if (m_contract_template.isSet()) {
        obj.insert(QString("contractTemplate"), ::OpenAPI::toJsonValue(m_contract_template));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_details.isSet()) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_summary.isSet()) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QList<OAIAttributeIdValueDto> OAICustomerContractDto::getAttributes() const {
    return m_attributes;
}
void OAICustomerContractDto::setAttributes(const QList<OAIAttributeIdValueDto> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAICustomerContractDto::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAICustomerContractDto::is_attributes_Valid() const{
    return m_attributes_isValid;
}

double OAICustomerContractDto::getBalance() const {
    return m_balance;
}
void OAICustomerContractDto::setBalance(const double &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAICustomerContractDto::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAICustomerContractDto::is_balance_Valid() const{
    return m_balance_isValid;
}

QString OAICustomerContractDto::getContractId() const {
    return m_contract_id;
}
void OAICustomerContractDto::setContractId(const QString &contract_id) {
    m_contract_id = contract_id;
    m_contract_id_isSet = true;
}

bool OAICustomerContractDto::is_contract_id_Set() const{
    return m_contract_id_isSet;
}

bool OAICustomerContractDto::is_contract_id_Valid() const{
    return m_contract_id_isValid;
}

OAIContractTemplateInCustomerContractDto OAICustomerContractDto::getContractTemplate() const {
    return m_contract_template;
}
void OAICustomerContractDto::setContractTemplate(const OAIContractTemplateInCustomerContractDto &contract_template) {
    m_contract_template = contract_template;
    m_contract_template_isSet = true;
}

bool OAICustomerContractDto::is_contract_template_Set() const{
    return m_contract_template_isSet;
}

bool OAICustomerContractDto::is_contract_template_Valid() const{
    return m_contract_template_isValid;
}

OAICustomerInCustomerContractDto OAICustomerContractDto::getCustomer() const {
    return m_customer;
}
void OAICustomerContractDto::setCustomer(const OAICustomerInCustomerContractDto &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAICustomerContractDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAICustomerContractDto::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAICustomerContractDto::getDescription() const {
    return m_description;
}
void OAICustomerContractDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICustomerContractDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAICustomerContractDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIDetailsInCustomerContractDto OAICustomerContractDto::getDetails() const {
    return m_details;
}
void OAICustomerContractDto::setDetails(const OAIDetailsInCustomerContractDto &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAICustomerContractDto::is_details_Set() const{
    return m_details_isSet;
}

bool OAICustomerContractDto::is_details_Valid() const{
    return m_details_isValid;
}

QDateTime OAICustomerContractDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAICustomerContractDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAICustomerContractDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAICustomerContractDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAILocationInCustomerContractDto OAICustomerContractDto::getLocation() const {
    return m_location;
}
void OAICustomerContractDto::setLocation(const OAILocationInCustomerContractDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAICustomerContractDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAICustomerContractDto::is_location_Valid() const{
    return m_location_isValid;
}

QString OAICustomerContractDto::getStatus() const {
    return m_status;
}
void OAICustomerContractDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICustomerContractDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAICustomerContractDto::is_status_Valid() const{
    return m_status_isValid;
}

OAISummaryInCustomerContractDto OAICustomerContractDto::getSummary() const {
    return m_summary;
}
void OAICustomerContractDto::setSummary(const OAISummaryInCustomerContractDto &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAICustomerContractDto::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAICustomerContractDto::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAICustomerContractDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerContractDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
