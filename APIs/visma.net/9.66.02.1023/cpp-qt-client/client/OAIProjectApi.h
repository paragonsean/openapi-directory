/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectApi_H
#define OAI_OAIProjectApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAIChangeProjectIdActionDto.h"
#include "OAIChangeProjectIdActionResultDto.h"
#include "OAIObject.h"
#include "OAIProjectDto.h"
#include "OAIProjectUpdateDto.h"
#include "OAITaskExtendedDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectApi : public QObject {
    Q_OBJECT

public:
    OAIProjectApi(const int timeOut = 0);
    ~OAIProjectApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  internal_id qint32 [required]
    * @param[in]  oai_change_project_id_action_dto OAIChangeProjectIdActionDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void projectChangeProjectIDActionByinternalId(const qint32 &internal_id, const OAIChangeProjectIdActionDto &oai_change_project_id_action_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  status QString [optional]
    * @param[in]  system_template bool [optional]
    * @param[in]  visible_in_ap bool [optional]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  expand_attribute bool [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  task_status QString [optional]
    * @param[in]  task_visible_in_ap bool [optional]
    * @param[in]  task_visible_in_ar bool [optional]
    * @param[in]  task_visible_in_ca bool [optional]
    * @param[in]  task_visible_in_cr bool [optional]
    * @param[in]  task_visible_in_ea bool [optional]
    * @param[in]  task_visible_in_gl bool [optional]
    * @param[in]  task_visible_in_in bool [optional]
    * @param[in]  task_visible_in_po bool [optional]
    * @param[in]  task_visible_in_so bool [optional]
    * @param[in]  task_visible_in_ta bool [optional]
    * @param[in]  non_project bool [optional]
    * @param[in]  public_id QString [optional]
    * @param[in]  restricted_employee QString [optional]
    * @param[in]  restricted_user qint64 [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  created_date_time QString [optional]
    * @param[in]  created_date_time_condition QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void projectGetAll(const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &system_template = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &visible_in_ap = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &expand_attribute = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &task_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &task_visible_in_ap = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &task_visible_in_ar = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &task_visible_in_ca = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &task_visible_in_cr = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &task_visible_in_ea = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &task_visible_in_gl = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &task_visible_in_in = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &task_visible_in_po = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &task_visible_in_so = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &task_visible_in_ta = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &non_project = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &public_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &restricted_employee = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &restricted_user = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  internal_id qint32 [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void projectGetByinternalID(const qint32 &internal_id, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void projectGetByprojectID(const QString &project_id, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [optional]
    * @param[in]  public_id QString [optional]
    * @param[in]  project_internal_id qint32 [optional]
    * @param[in]  description QString [optional]
    * @param[in]  task_cd QString [optional]
    * @param[in]  task_cd_desc QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  visible_in_ap bool [optional]
    * @param[in]  visible_in_ar bool [optional]
    * @param[in]  visible_in_ca bool [optional]
    * @param[in]  visible_in_cr bool [optional]
    * @param[in]  visible_in_ea bool [optional]
    * @param[in]  visible_in_gl bool [optional]
    * @param[in]  visible_in_in bool [optional]
    * @param[in]  visible_in_po bool [optional]
    * @param[in]  visible_in_so bool [optional]
    * @param[in]  visible_in_ta bool [optional]
    * @param[in]  restricted_employee QString [optional]
    * @param[in]  restricted_user qint64 [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  created_date_time QString [optional]
    * @param[in]  created_date_time_condition QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void projectGetTasks(const ::OpenAPI::OptionalParam<QString> &project_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &public_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &project_internal_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &task_cd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &task_cd_desc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &visible_in_ap = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &visible_in_ar = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &visible_in_ca = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &visible_in_cr = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &visible_in_ea = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &visible_in_gl = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &visible_in_in = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &visible_in_po = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &visible_in_so = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &visible_in_ta = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &restricted_employee = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &restricted_user = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_project_update_dto OAIProjectUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void projectPost(const OAIProjectUpdateDto &oai_project_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  internal_id qint32 [required]
    * @param[in]  oai_project_update_dto OAIProjectUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void projectPutByinternalId(const qint32 &internal_id, const OAIProjectUpdateDto &oai_project_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_project_update_dto OAIProjectUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void projectPutByprojectId(const QString &project_id, const OAIProjectUpdateDto &oai_project_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void projectChangeProjectIDActionByinternalIdCallback(OAIHttpRequestWorker *worker);
    void projectGetAllCallback(OAIHttpRequestWorker *worker);
    void projectGetByinternalIDCallback(OAIHttpRequestWorker *worker);
    void projectGetByprojectIDCallback(OAIHttpRequestWorker *worker);
    void projectGetTasksCallback(OAIHttpRequestWorker *worker);
    void projectPostCallback(OAIHttpRequestWorker *worker);
    void projectPutByinternalIdCallback(OAIHttpRequestWorker *worker);
    void projectPutByprojectIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void projectChangeProjectIDActionByinternalIdSignal(OAIChangeProjectIdActionResultDto summary);
    void projectGetAllSignal(QList<OAIProjectDto> summary);
    void projectGetByinternalIDSignal(OAIProjectDto summary);
    void projectGetByprojectIDSignal(OAIProjectDto summary);
    void projectGetTasksSignal(QList<OAITaskExtendedDto> summary);
    void projectPostSignal(OAIObject summary);
    void projectPutByinternalIdSignal(OAIBackgroundApiAcceptedDto summary);
    void projectPutByprojectIdSignal(OAIBackgroundApiAcceptedDto summary);


    void projectChangeProjectIDActionByinternalIdSignalFull(OAIHttpRequestWorker *worker, OAIChangeProjectIdActionResultDto summary);
    void projectGetAllSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectDto> summary);
    void projectGetByinternalIDSignalFull(OAIHttpRequestWorker *worker, OAIProjectDto summary);
    void projectGetByprojectIDSignalFull(OAIHttpRequestWorker *worker, OAIProjectDto summary);
    void projectGetTasksSignalFull(OAIHttpRequestWorker *worker, QList<OAITaskExtendedDto> summary);
    void projectPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void projectPutByinternalIdSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);
    void projectPutByprojectIdSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);

    Q_DECL_DEPRECATED_X("Use projectChangeProjectIDActionByinternalIdSignalError() instead")
    void projectChangeProjectIDActionByinternalIdSignalE(OAIChangeProjectIdActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectChangeProjectIDActionByinternalIdSignalError(OAIChangeProjectIdActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectGetAllSignalError() instead")
    void projectGetAllSignalE(QList<OAIProjectDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectGetAllSignalError(QList<OAIProjectDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectGetByinternalIDSignalError() instead")
    void projectGetByinternalIDSignalE(OAIProjectDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectGetByinternalIDSignalError(OAIProjectDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectGetByprojectIDSignalError() instead")
    void projectGetByprojectIDSignalE(OAIProjectDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectGetByprojectIDSignalError(OAIProjectDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectGetTasksSignalError() instead")
    void projectGetTasksSignalE(QList<OAITaskExtendedDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectGetTasksSignalError(QList<OAITaskExtendedDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectPostSignalError() instead")
    void projectPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectPutByinternalIdSignalError() instead")
    void projectPutByinternalIdSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectPutByinternalIdSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectPutByprojectIdSignalError() instead")
    void projectPutByprojectIdSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectPutByprojectIdSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use projectChangeProjectIDActionByinternalIdSignalErrorFull() instead")
    void projectChangeProjectIDActionByinternalIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectChangeProjectIDActionByinternalIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectGetAllSignalErrorFull() instead")
    void projectGetAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectGetAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectGetByinternalIDSignalErrorFull() instead")
    void projectGetByinternalIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectGetByinternalIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectGetByprojectIDSignalErrorFull() instead")
    void projectGetByprojectIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectGetByprojectIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectGetTasksSignalErrorFull() instead")
    void projectGetTasksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectGetTasksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectPostSignalErrorFull() instead")
    void projectPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectPutByinternalIdSignalErrorFull() instead")
    void projectPutByinternalIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectPutByinternalIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectPutByprojectIdSignalErrorFull() instead")
    void projectPutByprojectIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectPutByprojectIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
