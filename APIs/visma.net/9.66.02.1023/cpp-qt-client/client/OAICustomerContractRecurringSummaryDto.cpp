/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerContractRecurringSummaryDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerContractRecurringSummaryDto::OAICustomerContractRecurringSummaryDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerContractRecurringSummaryDto::OAICustomerContractRecurringSummaryDto() {
    this->initializeModel();
}

OAICustomerContractRecurringSummaryDto::~OAICustomerContractRecurringSummaryDto() {}

void OAICustomerContractRecurringSummaryDto::initializeModel() {

    m_extra_usage_total_isSet = false;
    m_extra_usage_total_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_recurring_total_isSet = false;
    m_recurring_total_isValid = false;

    m_total_due_isSet = false;
    m_total_due_isValid = false;
}

void OAICustomerContractRecurringSummaryDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerContractRecurringSummaryDto::fromJsonObject(QJsonObject json) {

    m_extra_usage_total_isValid = ::OpenAPI::fromJsonValue(m_extra_usage_total, json[QString("extraUsageTotal")]);
    m_extra_usage_total_isSet = !json[QString("extraUsageTotal")].isNull() && m_extra_usage_total_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_recurring_total_isValid = ::OpenAPI::fromJsonValue(m_recurring_total, json[QString("recurringTotal")]);
    m_recurring_total_isSet = !json[QString("recurringTotal")].isNull() && m_recurring_total_isValid;

    m_total_due_isValid = ::OpenAPI::fromJsonValue(m_total_due, json[QString("totalDue")]);
    m_total_due_isSet = !json[QString("totalDue")].isNull() && m_total_due_isValid;
}

QString OAICustomerContractRecurringSummaryDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerContractRecurringSummaryDto::asJsonObject() const {
    QJsonObject obj;
    if (m_extra_usage_total_isSet) {
        obj.insert(QString("extraUsageTotal"), ::OpenAPI::toJsonValue(m_extra_usage_total));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_recurring_total_isSet) {
        obj.insert(QString("recurringTotal"), ::OpenAPI::toJsonValue(m_recurring_total));
    }
    if (m_total_due_isSet) {
        obj.insert(QString("totalDue"), ::OpenAPI::toJsonValue(m_total_due));
    }
    return obj;
}

double OAICustomerContractRecurringSummaryDto::getExtraUsageTotal() const {
    return m_extra_usage_total;
}
void OAICustomerContractRecurringSummaryDto::setExtraUsageTotal(const double &extra_usage_total) {
    m_extra_usage_total = extra_usage_total;
    m_extra_usage_total_isSet = true;
}

bool OAICustomerContractRecurringSummaryDto::is_extra_usage_total_Set() const{
    return m_extra_usage_total_isSet;
}

bool OAICustomerContractRecurringSummaryDto::is_extra_usage_total_Valid() const{
    return m_extra_usage_total_isValid;
}

QList<OAICustomerContractRecurringSummaryLineDto> OAICustomerContractRecurringSummaryDto::getLines() const {
    return m_lines;
}
void OAICustomerContractRecurringSummaryDto::setLines(const QList<OAICustomerContractRecurringSummaryLineDto> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAICustomerContractRecurringSummaryDto::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAICustomerContractRecurringSummaryDto::is_lines_Valid() const{
    return m_lines_isValid;
}

double OAICustomerContractRecurringSummaryDto::getRecurringTotal() const {
    return m_recurring_total;
}
void OAICustomerContractRecurringSummaryDto::setRecurringTotal(const double &recurring_total) {
    m_recurring_total = recurring_total;
    m_recurring_total_isSet = true;
}

bool OAICustomerContractRecurringSummaryDto::is_recurring_total_Set() const{
    return m_recurring_total_isSet;
}

bool OAICustomerContractRecurringSummaryDto::is_recurring_total_Valid() const{
    return m_recurring_total_isValid;
}

double OAICustomerContractRecurringSummaryDto::getTotalDue() const {
    return m_total_due;
}
void OAICustomerContractRecurringSummaryDto::setTotalDue(const double &total_due) {
    m_total_due = total_due;
    m_total_due_isSet = true;
}

bool OAICustomerContractRecurringSummaryDto::is_total_due_Set() const{
    return m_total_due_isSet;
}

bool OAICustomerContractRecurringSummaryDto::is_total_due_Valid() const{
    return m_total_due_isValid;
}

bool OAICustomerContractRecurringSummaryDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extra_usage_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_due_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerContractRecurringSummaryDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
