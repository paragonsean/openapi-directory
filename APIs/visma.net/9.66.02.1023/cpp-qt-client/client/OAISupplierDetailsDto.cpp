/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupplierDetailsDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupplierDetailsDto::OAISupplierDetailsDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupplierDetailsDto::OAISupplierDetailsDto() {
    this->initializeModel();
}

OAISupplierDetailsDto::~OAISupplierDetailsDto() {}

void OAISupplierDetailsDto::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_eoq_isSet = false;
    m_eoq_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_lot_size_isSet = false;
    m_lot_size_isValid = false;

    m_max_order_qty_isSet = false;
    m_max_order_qty_isValid = false;

    m_min_order_freq_isSet = false;
    m_min_order_freq_isValid = false;

    m_min_order_qty_isSet = false;
    m_min_order_qty_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_override_isSet = false;
    m_override_isValid = false;

    m_purchase_unit_isSet = false;
    m_purchase_unit_isValid = false;

    m_shipment_lead_time_isSet = false;
    m_shipment_lead_time_isValid = false;

    m_supplier_id_isSet = false;
    m_supplier_id_isValid = false;

    m_supplier_item_id_isSet = false;
    m_supplier_item_id_isValid = false;
}

void OAISupplierDetailsDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupplierDetailsDto::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyID")]);
    m_currency_id_isSet = !json[QString("currencyID")].isNull() && m_currency_id_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_eoq_isValid = ::OpenAPI::fromJsonValue(m_eoq, json[QString("eoq")]);
    m_eoq_isSet = !json[QString("eoq")].isNull() && m_eoq_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_lot_size_isValid = ::OpenAPI::fromJsonValue(m_lot_size, json[QString("lotSize")]);
    m_lot_size_isSet = !json[QString("lotSize")].isNull() && m_lot_size_isValid;

    m_max_order_qty_isValid = ::OpenAPI::fromJsonValue(m_max_order_qty, json[QString("maxOrderQty")]);
    m_max_order_qty_isSet = !json[QString("maxOrderQty")].isNull() && m_max_order_qty_isValid;

    m_min_order_freq_isValid = ::OpenAPI::fromJsonValue(m_min_order_freq, json[QString("minOrderFreq")]);
    m_min_order_freq_isSet = !json[QString("minOrderFreq")].isNull() && m_min_order_freq_isValid;

    m_min_order_qty_isValid = ::OpenAPI::fromJsonValue(m_min_order_qty, json[QString("minOrderQty")]);
    m_min_order_qty_isSet = !json[QString("minOrderQty")].isNull() && m_min_order_qty_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_override_isValid = ::OpenAPI::fromJsonValue(m_override, json[QString("override")]);
    m_override_isSet = !json[QString("override")].isNull() && m_override_isValid;

    m_purchase_unit_isValid = ::OpenAPI::fromJsonValue(m_purchase_unit, json[QString("purchaseUnit")]);
    m_purchase_unit_isSet = !json[QString("purchaseUnit")].isNull() && m_purchase_unit_isValid;

    m_shipment_lead_time_isValid = ::OpenAPI::fromJsonValue(m_shipment_lead_time, json[QString("shipmentLeadTime")]);
    m_shipment_lead_time_isSet = !json[QString("shipmentLeadTime")].isNull() && m_shipment_lead_time_isValid;

    m_supplier_id_isValid = ::OpenAPI::fromJsonValue(m_supplier_id, json[QString("supplierID")]);
    m_supplier_id_isSet = !json[QString("supplierID")].isNull() && m_supplier_id_isValid;

    m_supplier_item_id_isValid = ::OpenAPI::fromJsonValue(m_supplier_item_id, json[QString("supplierItemID")]);
    m_supplier_item_id_isSet = !json[QString("supplierItemID")].isNull() && m_supplier_item_id_isValid;
}

QString OAISupplierDetailsDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupplierDetailsDto::asJsonObject() const {
    QJsonObject obj;
    if (m_active.isSet()) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_currency_id.isSet()) {
        obj.insert(QString("currencyID"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_r_default.isSet()) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_eoq.isSet()) {
        obj.insert(QString("eoq"), ::OpenAPI::toJsonValue(m_eoq));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_lot_size.isSet()) {
        obj.insert(QString("lotSize"), ::OpenAPI::toJsonValue(m_lot_size));
    }
    if (m_max_order_qty.isSet()) {
        obj.insert(QString("maxOrderQty"), ::OpenAPI::toJsonValue(m_max_order_qty));
    }
    if (m_min_order_freq.isSet()) {
        obj.insert(QString("minOrderFreq"), ::OpenAPI::toJsonValue(m_min_order_freq));
    }
    if (m_min_order_qty.isSet()) {
        obj.insert(QString("minOrderQty"), ::OpenAPI::toJsonValue(m_min_order_qty));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_override.isSet()) {
        obj.insert(QString("override"), ::OpenAPI::toJsonValue(m_override));
    }
    if (m_purchase_unit.isSet()) {
        obj.insert(QString("purchaseUnit"), ::OpenAPI::toJsonValue(m_purchase_unit));
    }
    if (m_shipment_lead_time.isSet()) {
        obj.insert(QString("shipmentLeadTime"), ::OpenAPI::toJsonValue(m_shipment_lead_time));
    }
    if (m_supplier_id.isSet()) {
        obj.insert(QString("supplierID"), ::OpenAPI::toJsonValue(m_supplier_id));
    }
    if (m_supplier_item_id.isSet()) {
        obj.insert(QString("supplierItemID"), ::OpenAPI::toJsonValue(m_supplier_item_id));
    }
    return obj;
}

OAIDtoValueOfBoolean OAISupplierDetailsDto::getActive() const {
    return m_active;
}
void OAISupplierDetailsDto::setActive(const OAIDtoValueOfBoolean &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAISupplierDetailsDto::is_active_Set() const{
    return m_active_isSet;
}

bool OAISupplierDetailsDto::is_active_Valid() const{
    return m_active_isValid;
}

OAIDtoValueOfString OAISupplierDetailsDto::getCurrencyId() const {
    return m_currency_id;
}
void OAISupplierDetailsDto::setCurrencyId(const OAIDtoValueOfString &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAISupplierDetailsDto::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAISupplierDetailsDto::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

OAIDtoValueOfBoolean OAISupplierDetailsDto::getRDefault() const {
    return m_r_default;
}
void OAISupplierDetailsDto::setRDefault(const OAIDtoValueOfBoolean &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAISupplierDetailsDto::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAISupplierDetailsDto::is_r_default_Valid() const{
    return m_r_default_isValid;
}

OAIDtoValueOfDecimal OAISupplierDetailsDto::getEoq() const {
    return m_eoq;
}
void OAISupplierDetailsDto::setEoq(const OAIDtoValueOfDecimal &eoq) {
    m_eoq = eoq;
    m_eoq_isSet = true;
}

bool OAISupplierDetailsDto::is_eoq_Set() const{
    return m_eoq_isSet;
}

bool OAISupplierDetailsDto::is_eoq_Valid() const{
    return m_eoq_isValid;
}

OAIDtoValueOfString OAISupplierDetailsDto::getLocation() const {
    return m_location;
}
void OAISupplierDetailsDto::setLocation(const OAIDtoValueOfString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAISupplierDetailsDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAISupplierDetailsDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIDtoValueOfDecimal OAISupplierDetailsDto::getLotSize() const {
    return m_lot_size;
}
void OAISupplierDetailsDto::setLotSize(const OAIDtoValueOfDecimal &lot_size) {
    m_lot_size = lot_size;
    m_lot_size_isSet = true;
}

bool OAISupplierDetailsDto::is_lot_size_Set() const{
    return m_lot_size_isSet;
}

bool OAISupplierDetailsDto::is_lot_size_Valid() const{
    return m_lot_size_isValid;
}

OAIDtoValueOfDecimal OAISupplierDetailsDto::getMaxOrderQty() const {
    return m_max_order_qty;
}
void OAISupplierDetailsDto::setMaxOrderQty(const OAIDtoValueOfDecimal &max_order_qty) {
    m_max_order_qty = max_order_qty;
    m_max_order_qty_isSet = true;
}

bool OAISupplierDetailsDto::is_max_order_qty_Set() const{
    return m_max_order_qty_isSet;
}

bool OAISupplierDetailsDto::is_max_order_qty_Valid() const{
    return m_max_order_qty_isValid;
}

OAIDtoValueOfInt32 OAISupplierDetailsDto::getMinOrderFreq() const {
    return m_min_order_freq;
}
void OAISupplierDetailsDto::setMinOrderFreq(const OAIDtoValueOfInt32 &min_order_freq) {
    m_min_order_freq = min_order_freq;
    m_min_order_freq_isSet = true;
}

bool OAISupplierDetailsDto::is_min_order_freq_Set() const{
    return m_min_order_freq_isSet;
}

bool OAISupplierDetailsDto::is_min_order_freq_Valid() const{
    return m_min_order_freq_isValid;
}

OAIDtoValueOfDecimal OAISupplierDetailsDto::getMinOrderQty() const {
    return m_min_order_qty;
}
void OAISupplierDetailsDto::setMinOrderQty(const OAIDtoValueOfDecimal &min_order_qty) {
    m_min_order_qty = min_order_qty;
    m_min_order_qty_isSet = true;
}

bool OAISupplierDetailsDto::is_min_order_qty_Set() const{
    return m_min_order_qty_isSet;
}

bool OAISupplierDetailsDto::is_min_order_qty_Valid() const{
    return m_min_order_qty_isValid;
}

QString OAISupplierDetailsDto::getOperation() const {
    return m_operation;
}
void OAISupplierDetailsDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAISupplierDetailsDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAISupplierDetailsDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIDtoValueOfBoolean OAISupplierDetailsDto::getOverride() const {
    return m_override;
}
void OAISupplierDetailsDto::setOverride(const OAIDtoValueOfBoolean &override) {
    m_override = override;
    m_override_isSet = true;
}

bool OAISupplierDetailsDto::is_override_Set() const{
    return m_override_isSet;
}

bool OAISupplierDetailsDto::is_override_Valid() const{
    return m_override_isValid;
}

OAIDtoValueOfString OAISupplierDetailsDto::getPurchaseUnit() const {
    return m_purchase_unit;
}
void OAISupplierDetailsDto::setPurchaseUnit(const OAIDtoValueOfString &purchase_unit) {
    m_purchase_unit = purchase_unit;
    m_purchase_unit_isSet = true;
}

bool OAISupplierDetailsDto::is_purchase_unit_Set() const{
    return m_purchase_unit_isSet;
}

bool OAISupplierDetailsDto::is_purchase_unit_Valid() const{
    return m_purchase_unit_isValid;
}

OAIDtoValueOfInt16 OAISupplierDetailsDto::getShipmentLeadTime() const {
    return m_shipment_lead_time;
}
void OAISupplierDetailsDto::setShipmentLeadTime(const OAIDtoValueOfInt16 &shipment_lead_time) {
    m_shipment_lead_time = shipment_lead_time;
    m_shipment_lead_time_isSet = true;
}

bool OAISupplierDetailsDto::is_shipment_lead_time_Set() const{
    return m_shipment_lead_time_isSet;
}

bool OAISupplierDetailsDto::is_shipment_lead_time_Valid() const{
    return m_shipment_lead_time_isValid;
}

OAIDtoValueOfString OAISupplierDetailsDto::getSupplierId() const {
    return m_supplier_id;
}
void OAISupplierDetailsDto::setSupplierId(const OAIDtoValueOfString &supplier_id) {
    m_supplier_id = supplier_id;
    m_supplier_id_isSet = true;
}

bool OAISupplierDetailsDto::is_supplier_id_Set() const{
    return m_supplier_id_isSet;
}

bool OAISupplierDetailsDto::is_supplier_id_Valid() const{
    return m_supplier_id_isValid;
}

OAIDtoValueOfString OAISupplierDetailsDto::getSupplierItemId() const {
    return m_supplier_item_id;
}
void OAISupplierDetailsDto::setSupplierItemId(const OAIDtoValueOfString &supplier_item_id) {
    m_supplier_item_id = supplier_item_id;
    m_supplier_item_id_isSet = true;
}

bool OAISupplierDetailsDto::is_supplier_item_id_Set() const{
    return m_supplier_item_id_isSet;
}

bool OAISupplierDetailsDto::is_supplier_item_id_Valid() const{
    return m_supplier_item_id_isValid;
}

bool OAISupplierDetailsDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eoq.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_order_qty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_order_freq.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_order_qty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_lead_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_item_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupplierDetailsDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
