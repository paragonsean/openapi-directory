/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKitAssemblyStockComponentsUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKitAssemblyStockComponentsUpdateDto::OAIKitAssemblyStockComponentsUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKitAssemblyStockComponentsUpdateDto::OAIKitAssemblyStockComponentsUpdateDto() {
    this->initializeModel();
}

OAIKitAssemblyStockComponentsUpdateDto::~OAIKitAssemblyStockComponentsUpdateDto() {}

void OAIKitAssemblyStockComponentsUpdateDto::initializeModel() {

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_line_nbr_isSet = false;
    m_line_nbr_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;

    m_stock_component_line_allocations_isSet = false;
    m_stock_component_line_allocations_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_uo_m_isSet = false;
    m_uo_m_isValid = false;
}

void OAIKitAssemblyStockComponentsUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKitAssemblyStockComponentsUpdateDto::fromJsonObject(QJsonObject json) {

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_line_nbr, json[QString("lineNbr")]);
    m_line_nbr_isSet = !json[QString("lineNbr")].isNull() && m_line_nbr_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("reasonCode")]);
    m_reason_code_isSet = !json[QString("reasonCode")].isNull() && m_reason_code_isValid;

    m_stock_component_line_allocations_isValid = ::OpenAPI::fromJsonValue(m_stock_component_line_allocations, json[QString("stockComponentLineAllocations")]);
    m_stock_component_line_allocations_isSet = !json[QString("stockComponentLineAllocations")].isNull() && m_stock_component_line_allocations_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_uo_m_isValid = ::OpenAPI::fromJsonValue(m_uo_m, json[QString("uoM")]);
    m_uo_m_isSet = !json[QString("uoM")].isNull() && m_uo_m_isValid;
}

QString OAIKitAssemblyStockComponentsUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKitAssemblyStockComponentsUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_item_id.isSet()) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_line_nbr.isSet()) {
        obj.insert(QString("lineNbr"), ::OpenAPI::toJsonValue(m_line_nbr));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_quantity.isSet()) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_reason_code.isSet()) {
        obj.insert(QString("reasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    if (m_stock_component_line_allocations.size() > 0) {
        obj.insert(QString("stockComponentLineAllocations"), ::OpenAPI::toJsonValue(m_stock_component_line_allocations));
    }
    if (m_unit_cost.isSet()) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_uo_m.isSet()) {
        obj.insert(QString("uoM"), ::OpenAPI::toJsonValue(m_uo_m));
    }
    return obj;
}

OAIDtoValueOfString OAIKitAssemblyStockComponentsUpdateDto::getItemId() const {
    return m_item_id;
}
void OAIKitAssemblyStockComponentsUpdateDto::setItemId(const OAIDtoValueOfString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIKitAssemblyStockComponentsUpdateDto::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIKitAssemblyStockComponentsUpdateDto::is_item_id_Valid() const{
    return m_item_id_isValid;
}

OAIDtoValueOfInt32 OAIKitAssemblyStockComponentsUpdateDto::getLineNbr() const {
    return m_line_nbr;
}
void OAIKitAssemblyStockComponentsUpdateDto::setLineNbr(const OAIDtoValueOfInt32 &line_nbr) {
    m_line_nbr = line_nbr;
    m_line_nbr_isSet = true;
}

bool OAIKitAssemblyStockComponentsUpdateDto::is_line_nbr_Set() const{
    return m_line_nbr_isSet;
}

bool OAIKitAssemblyStockComponentsUpdateDto::is_line_nbr_Valid() const{
    return m_line_nbr_isValid;
}

OAIDtoValueOfString OAIKitAssemblyStockComponentsUpdateDto::getLocation() const {
    return m_location;
}
void OAIKitAssemblyStockComponentsUpdateDto::setLocation(const OAIDtoValueOfString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIKitAssemblyStockComponentsUpdateDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIKitAssemblyStockComponentsUpdateDto::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIKitAssemblyStockComponentsUpdateDto::getOperation() const {
    return m_operation;
}
void OAIKitAssemblyStockComponentsUpdateDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIKitAssemblyStockComponentsUpdateDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIKitAssemblyStockComponentsUpdateDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIDtoValueOfDecimal OAIKitAssemblyStockComponentsUpdateDto::getQuantity() const {
    return m_quantity;
}
void OAIKitAssemblyStockComponentsUpdateDto::setQuantity(const OAIDtoValueOfDecimal &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIKitAssemblyStockComponentsUpdateDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIKitAssemblyStockComponentsUpdateDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIDtoValueOfString OAIKitAssemblyStockComponentsUpdateDto::getReasonCode() const {
    return m_reason_code;
}
void OAIKitAssemblyStockComponentsUpdateDto::setReasonCode(const OAIDtoValueOfString &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAIKitAssemblyStockComponentsUpdateDto::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAIKitAssemblyStockComponentsUpdateDto::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

QList<OAIKitAssemblyStockComponentAllocationsUpdateDto> OAIKitAssemblyStockComponentsUpdateDto::getStockComponentLineAllocations() const {
    return m_stock_component_line_allocations;
}
void OAIKitAssemblyStockComponentsUpdateDto::setStockComponentLineAllocations(const QList<OAIKitAssemblyStockComponentAllocationsUpdateDto> &stock_component_line_allocations) {
    m_stock_component_line_allocations = stock_component_line_allocations;
    m_stock_component_line_allocations_isSet = true;
}

bool OAIKitAssemblyStockComponentsUpdateDto::is_stock_component_line_allocations_Set() const{
    return m_stock_component_line_allocations_isSet;
}

bool OAIKitAssemblyStockComponentsUpdateDto::is_stock_component_line_allocations_Valid() const{
    return m_stock_component_line_allocations_isValid;
}

OAIDtoValueOfDecimal OAIKitAssemblyStockComponentsUpdateDto::getUnitCost() const {
    return m_unit_cost;
}
void OAIKitAssemblyStockComponentsUpdateDto::setUnitCost(const OAIDtoValueOfDecimal &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAIKitAssemblyStockComponentsUpdateDto::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAIKitAssemblyStockComponentsUpdateDto::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

OAIDtoValueOfString OAIKitAssemblyStockComponentsUpdateDto::getUoM() const {
    return m_uo_m;
}
void OAIKitAssemblyStockComponentsUpdateDto::setUoM(const OAIDtoValueOfString &uo_m) {
    m_uo_m = uo_m;
    m_uo_m_isSet = true;
}

bool OAIKitAssemblyStockComponentsUpdateDto::is_uo_m_Set() const{
    return m_uo_m_isSet;
}

bool OAIKitAssemblyStockComponentsUpdateDto::is_uo_m_Valid() const{
    return m_uo_m_isValid;
}

bool OAIKitAssemblyStockComponentsUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_component_line_allocations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uo_m.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKitAssemblyStockComponentsUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
