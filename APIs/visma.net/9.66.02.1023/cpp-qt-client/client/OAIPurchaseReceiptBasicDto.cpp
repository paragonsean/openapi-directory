/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseReceiptBasicDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseReceiptBasicDto::OAIPurchaseReceiptBasicDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseReceiptBasicDto::OAIPurchaseReceiptBasicDto() {
    this->initializeModel();
}

OAIPurchaseReceiptBasicDto::~OAIPurchaseReceiptBasicDto() {}

void OAIPurchaseReceiptBasicDto::initializeModel() {

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_control_qty_isSet = false;
    m_control_qty_isValid = false;

    m_control_total_isSet = false;
    m_control_total_isValid = false;

    m_create_bill_isSet = false;
    m_create_bill_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_post_period_isSet = false;
    m_post_period_isValid = false;

    m_receipt_nbr_isSet = false;
    m_receipt_nbr_isValid = false;

    m_receipt_type_isSet = false;
    m_receipt_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supplier_isSet = false;
    m_supplier_isValid = false;

    m_supplier_ref_isSet = false;
    m_supplier_ref_isValid = false;

    m_total_amt_isSet = false;
    m_total_amt_isValid = false;

    m_total_qty_isSet = false;
    m_total_qty_isValid = false;

    m_vat_exempt_total_isSet = false;
    m_vat_exempt_total_isValid = false;

    m_vat_taxable_total_isSet = false;
    m_vat_taxable_total_isValid = false;

    m_warehouse_isSet = false;
    m_warehouse_isValid = false;
}

void OAIPurchaseReceiptBasicDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseReceiptBasicDto::fromJsonObject(QJsonObject json) {

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_control_qty_isValid = ::OpenAPI::fromJsonValue(m_control_qty, json[QString("controlQty")]);
    m_control_qty_isSet = !json[QString("controlQty")].isNull() && m_control_qty_isValid;

    m_control_total_isValid = ::OpenAPI::fromJsonValue(m_control_total, json[QString("controlTotal")]);
    m_control_total_isSet = !json[QString("controlTotal")].isNull() && m_control_total_isValid;

    m_create_bill_isValid = ::OpenAPI::fromJsonValue(m_create_bill, json[QString("createBill")]);
    m_create_bill_isSet = !json[QString("createBill")].isNull() && m_create_bill_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("exchangeRate")]);
    m_exchange_rate_isSet = !json[QString("exchangeRate")].isNull() && m_exchange_rate_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_post_period_isValid = ::OpenAPI::fromJsonValue(m_post_period, json[QString("postPeriod")]);
    m_post_period_isSet = !json[QString("postPeriod")].isNull() && m_post_period_isValid;

    m_receipt_nbr_isValid = ::OpenAPI::fromJsonValue(m_receipt_nbr, json[QString("receiptNbr")]);
    m_receipt_nbr_isSet = !json[QString("receiptNbr")].isNull() && m_receipt_nbr_isValid;

    m_receipt_type_isValid = ::OpenAPI::fromJsonValue(m_receipt_type, json[QString("receiptType")]);
    m_receipt_type_isSet = !json[QString("receiptType")].isNull() && m_receipt_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supplier_isValid = ::OpenAPI::fromJsonValue(m_supplier, json[QString("supplier")]);
    m_supplier_isSet = !json[QString("supplier")].isNull() && m_supplier_isValid;

    m_supplier_ref_isValid = ::OpenAPI::fromJsonValue(m_supplier_ref, json[QString("supplierRef")]);
    m_supplier_ref_isSet = !json[QString("supplierRef")].isNull() && m_supplier_ref_isValid;

    m_total_amt_isValid = ::OpenAPI::fromJsonValue(m_total_amt, json[QString("totalAmt")]);
    m_total_amt_isSet = !json[QString("totalAmt")].isNull() && m_total_amt_isValid;

    m_total_qty_isValid = ::OpenAPI::fromJsonValue(m_total_qty, json[QString("totalQty")]);
    m_total_qty_isSet = !json[QString("totalQty")].isNull() && m_total_qty_isValid;

    m_vat_exempt_total_isValid = ::OpenAPI::fromJsonValue(m_vat_exempt_total, json[QString("vatExemptTotal")]);
    m_vat_exempt_total_isSet = !json[QString("vatExemptTotal")].isNull() && m_vat_exempt_total_isValid;

    m_vat_taxable_total_isValid = ::OpenAPI::fromJsonValue(m_vat_taxable_total, json[QString("vatTaxableTotal")]);
    m_vat_taxable_total_isSet = !json[QString("vatTaxableTotal")].isNull() && m_vat_taxable_total_isValid;

    m_warehouse_isValid = ::OpenAPI::fromJsonValue(m_warehouse, json[QString("warehouse")]);
    m_warehouse_isSet = !json[QString("warehouse")].isNull() && m_warehouse_isValid;
}

QString OAIPurchaseReceiptBasicDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseReceiptBasicDto::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_control_qty_isSet) {
        obj.insert(QString("controlQty"), ::OpenAPI::toJsonValue(m_control_qty));
    }
    if (m_control_total_isSet) {
        obj.insert(QString("controlTotal"), ::OpenAPI::toJsonValue(m_control_total));
    }
    if (m_create_bill_isSet) {
        obj.insert(QString("createBill"), ::OpenAPI::toJsonValue(m_create_bill));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_exchange_rate_isSet) {
        obj.insert(QString("exchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_hold_isSet) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_post_period_isSet) {
        obj.insert(QString("postPeriod"), ::OpenAPI::toJsonValue(m_post_period));
    }
    if (m_receipt_nbr_isSet) {
        obj.insert(QString("receiptNbr"), ::OpenAPI::toJsonValue(m_receipt_nbr));
    }
    if (m_receipt_type_isSet) {
        obj.insert(QString("receiptType"), ::OpenAPI::toJsonValue(m_receipt_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supplier.isSet()) {
        obj.insert(QString("supplier"), ::OpenAPI::toJsonValue(m_supplier));
    }
    if (m_supplier_ref_isSet) {
        obj.insert(QString("supplierRef"), ::OpenAPI::toJsonValue(m_supplier_ref));
    }
    if (m_total_amt_isSet) {
        obj.insert(QString("totalAmt"), ::OpenAPI::toJsonValue(m_total_amt));
    }
    if (m_total_qty_isSet) {
        obj.insert(QString("totalQty"), ::OpenAPI::toJsonValue(m_total_qty));
    }
    if (m_vat_exempt_total_isSet) {
        obj.insert(QString("vatExemptTotal"), ::OpenAPI::toJsonValue(m_vat_exempt_total));
    }
    if (m_vat_taxable_total_isSet) {
        obj.insert(QString("vatTaxableTotal"), ::OpenAPI::toJsonValue(m_vat_taxable_total));
    }
    if (m_warehouse.isSet()) {
        obj.insert(QString("warehouse"), ::OpenAPI::toJsonValue(m_warehouse));
    }
    return obj;
}

OAIBranchNumberInPurchaseReceiptBasicDto OAIPurchaseReceiptBasicDto::getBranchNumber() const {
    return m_branch_number;
}
void OAIPurchaseReceiptBasicDto::setBranchNumber(const OAIBranchNumberInPurchaseReceiptBasicDto &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

double OAIPurchaseReceiptBasicDto::getControlQty() const {
    return m_control_qty;
}
void OAIPurchaseReceiptBasicDto::setControlQty(const double &control_qty) {
    m_control_qty = control_qty;
    m_control_qty_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_control_qty_Set() const{
    return m_control_qty_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_control_qty_Valid() const{
    return m_control_qty_isValid;
}

double OAIPurchaseReceiptBasicDto::getControlTotal() const {
    return m_control_total;
}
void OAIPurchaseReceiptBasicDto::setControlTotal(const double &control_total) {
    m_control_total = control_total;
    m_control_total_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_control_total_Set() const{
    return m_control_total_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_control_total_Valid() const{
    return m_control_total_isValid;
}

bool OAIPurchaseReceiptBasicDto::isCreateBill() const {
    return m_create_bill;
}
void OAIPurchaseReceiptBasicDto::setCreateBill(const bool &create_bill) {
    m_create_bill = create_bill;
    m_create_bill_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_create_bill_Set() const{
    return m_create_bill_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_create_bill_Valid() const{
    return m_create_bill_isValid;
}

QString OAIPurchaseReceiptBasicDto::getCurrency() const {
    return m_currency;
}
void OAIPurchaseReceiptBasicDto::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_currency_Valid() const{
    return m_currency_isValid;
}

QDateTime OAIPurchaseReceiptBasicDto::getDate() const {
    return m_date;
}
void OAIPurchaseReceiptBasicDto::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIPurchaseReceiptBasicDto::getErrorInfo() const {
    return m_error_info;
}
void OAIPurchaseReceiptBasicDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

double OAIPurchaseReceiptBasicDto::getExchangeRate() const {
    return m_exchange_rate;
}
void OAIPurchaseReceiptBasicDto::setExchangeRate(const double &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

bool OAIPurchaseReceiptBasicDto::isHold() const {
    return m_hold;
}
void OAIPurchaseReceiptBasicDto::setHold(const bool &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_hold_Valid() const{
    return m_hold_isValid;
}

QDateTime OAIPurchaseReceiptBasicDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIPurchaseReceiptBasicDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QList<OAIPurchaseReceiptLineDto> OAIPurchaseReceiptBasicDto::getLines() const {
    return m_lines;
}
void OAIPurchaseReceiptBasicDto::setLines(const QList<OAIPurchaseReceiptLineDto> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_lines_Valid() const{
    return m_lines_isValid;
}

OAILocationInPurchaseReceiptBasicDto OAIPurchaseReceiptBasicDto::getLocation() const {
    return m_location;
}
void OAIPurchaseReceiptBasicDto::setLocation(const OAILocationInPurchaseReceiptBasicDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIMetadataDto OAIPurchaseReceiptBasicDto::getMetadata() const {
    return m_metadata;
}
void OAIPurchaseReceiptBasicDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIPurchaseReceiptBasicDto::getPostPeriod() const {
    return m_post_period;
}
void OAIPurchaseReceiptBasicDto::setPostPeriod(const QString &post_period) {
    m_post_period = post_period;
    m_post_period_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_post_period_Set() const{
    return m_post_period_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_post_period_Valid() const{
    return m_post_period_isValid;
}

QString OAIPurchaseReceiptBasicDto::getReceiptNbr() const {
    return m_receipt_nbr;
}
void OAIPurchaseReceiptBasicDto::setReceiptNbr(const QString &receipt_nbr) {
    m_receipt_nbr = receipt_nbr;
    m_receipt_nbr_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_receipt_nbr_Set() const{
    return m_receipt_nbr_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_receipt_nbr_Valid() const{
    return m_receipt_nbr_isValid;
}

QString OAIPurchaseReceiptBasicDto::getReceiptType() const {
    return m_receipt_type;
}
void OAIPurchaseReceiptBasicDto::setReceiptType(const QString &receipt_type) {
    m_receipt_type = receipt_type;
    m_receipt_type_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_receipt_type_Set() const{
    return m_receipt_type_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_receipt_type_Valid() const{
    return m_receipt_type_isValid;
}

QString OAIPurchaseReceiptBasicDto::getStatus() const {
    return m_status;
}
void OAIPurchaseReceiptBasicDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_status_Valid() const{
    return m_status_isValid;
}

OAISupplierInPurchaseReceiptBasicDto OAIPurchaseReceiptBasicDto::getSupplier() const {
    return m_supplier;
}
void OAIPurchaseReceiptBasicDto::setSupplier(const OAISupplierInPurchaseReceiptBasicDto &supplier) {
    m_supplier = supplier;
    m_supplier_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_supplier_Set() const{
    return m_supplier_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_supplier_Valid() const{
    return m_supplier_isValid;
}

QString OAIPurchaseReceiptBasicDto::getSupplierRef() const {
    return m_supplier_ref;
}
void OAIPurchaseReceiptBasicDto::setSupplierRef(const QString &supplier_ref) {
    m_supplier_ref = supplier_ref;
    m_supplier_ref_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_supplier_ref_Set() const{
    return m_supplier_ref_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_supplier_ref_Valid() const{
    return m_supplier_ref_isValid;
}

double OAIPurchaseReceiptBasicDto::getTotalAmt() const {
    return m_total_amt;
}
void OAIPurchaseReceiptBasicDto::setTotalAmt(const double &total_amt) {
    m_total_amt = total_amt;
    m_total_amt_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_total_amt_Set() const{
    return m_total_amt_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_total_amt_Valid() const{
    return m_total_amt_isValid;
}

double OAIPurchaseReceiptBasicDto::getTotalQty() const {
    return m_total_qty;
}
void OAIPurchaseReceiptBasicDto::setTotalQty(const double &total_qty) {
    m_total_qty = total_qty;
    m_total_qty_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_total_qty_Set() const{
    return m_total_qty_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_total_qty_Valid() const{
    return m_total_qty_isValid;
}

double OAIPurchaseReceiptBasicDto::getVatExemptTotal() const {
    return m_vat_exempt_total;
}
void OAIPurchaseReceiptBasicDto::setVatExemptTotal(const double &vat_exempt_total) {
    m_vat_exempt_total = vat_exempt_total;
    m_vat_exempt_total_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_vat_exempt_total_Set() const{
    return m_vat_exempt_total_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_vat_exempt_total_Valid() const{
    return m_vat_exempt_total_isValid;
}

double OAIPurchaseReceiptBasicDto::getVatTaxableTotal() const {
    return m_vat_taxable_total;
}
void OAIPurchaseReceiptBasicDto::setVatTaxableTotal(const double &vat_taxable_total) {
    m_vat_taxable_total = vat_taxable_total;
    m_vat_taxable_total_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_vat_taxable_total_Set() const{
    return m_vat_taxable_total_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_vat_taxable_total_Valid() const{
    return m_vat_taxable_total_isValid;
}

OAIWarehouseInPurchaseReceiptBasicDto OAIPurchaseReceiptBasicDto::getWarehouse() const {
    return m_warehouse;
}
void OAIPurchaseReceiptBasicDto::setWarehouse(const OAIWarehouseInPurchaseReceiptBasicDto &warehouse) {
    m_warehouse = warehouse;
    m_warehouse_isSet = true;
}

bool OAIPurchaseReceiptBasicDto::is_warehouse_Set() const{
    return m_warehouse_isSet;
}

bool OAIPurchaseReceiptBasicDto::is_warehouse_Valid() const{
    return m_warehouse_isValid;
}

bool OAIPurchaseReceiptBasicDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_bill_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_exempt_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_taxable_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseReceiptBasicDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
