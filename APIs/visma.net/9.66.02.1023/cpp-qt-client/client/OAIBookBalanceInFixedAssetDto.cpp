/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBookBalanceInFixedAssetDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBookBalanceInFixedAssetDto::OAIBookBalanceInFixedAssetDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBookBalanceInFixedAssetDto::OAIBookBalanceInFixedAssetDto() {
    this->initializeModel();
}

OAIBookBalanceInFixedAssetDto::~OAIBookBalanceInFixedAssetDto() {}

void OAIBookBalanceInFixedAssetDto::initializeModel() {

    m_acquisition_cost_isSet = false;
    m_acquisition_cost_isValid = false;

    m_book_isSet = false;
    m_book_isValid = false;

    m_depreciation_from_date_isSet = false;
    m_depreciation_from_date_isValid = false;

    m_depreciation_from_period_isSet = false;
    m_depreciation_from_period_isValid = false;

    m_depreciation_method_id_isSet = false;
    m_depreciation_method_id_isValid = false;

    m_depreciation_to_period_isSet = false;
    m_depreciation_to_period_isValid = false;

    m_last_depreciation_period_isSet = false;
    m_last_depreciation_period_isValid = false;

    m_salvage_amount_isSet = false;
    m_salvage_amount_isValid = false;

    m_useful_life_isSet = false;
    m_useful_life_isValid = false;
}

void OAIBookBalanceInFixedAssetDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBookBalanceInFixedAssetDto::fromJsonObject(QJsonObject json) {

    m_acquisition_cost_isValid = ::OpenAPI::fromJsonValue(m_acquisition_cost, json[QString("acquisitionCost")]);
    m_acquisition_cost_isSet = !json[QString("acquisitionCost")].isNull() && m_acquisition_cost_isValid;

    m_book_isValid = ::OpenAPI::fromJsonValue(m_book, json[QString("book")]);
    m_book_isSet = !json[QString("book")].isNull() && m_book_isValid;

    m_depreciation_from_date_isValid = ::OpenAPI::fromJsonValue(m_depreciation_from_date, json[QString("depreciationFromDate")]);
    m_depreciation_from_date_isSet = !json[QString("depreciationFromDate")].isNull() && m_depreciation_from_date_isValid;

    m_depreciation_from_period_isValid = ::OpenAPI::fromJsonValue(m_depreciation_from_period, json[QString("depreciationFromPeriod")]);
    m_depreciation_from_period_isSet = !json[QString("depreciationFromPeriod")].isNull() && m_depreciation_from_period_isValid;

    m_depreciation_method_id_isValid = ::OpenAPI::fromJsonValue(m_depreciation_method_id, json[QString("depreciationMethodID")]);
    m_depreciation_method_id_isSet = !json[QString("depreciationMethodID")].isNull() && m_depreciation_method_id_isValid;

    m_depreciation_to_period_isValid = ::OpenAPI::fromJsonValue(m_depreciation_to_period, json[QString("depreciationToPeriod")]);
    m_depreciation_to_period_isSet = !json[QString("depreciationToPeriod")].isNull() && m_depreciation_to_period_isValid;

    m_last_depreciation_period_isValid = ::OpenAPI::fromJsonValue(m_last_depreciation_period, json[QString("lastDepreciationPeriod")]);
    m_last_depreciation_period_isSet = !json[QString("lastDepreciationPeriod")].isNull() && m_last_depreciation_period_isValid;

    m_salvage_amount_isValid = ::OpenAPI::fromJsonValue(m_salvage_amount, json[QString("salvageAmount")]);
    m_salvage_amount_isSet = !json[QString("salvageAmount")].isNull() && m_salvage_amount_isValid;

    m_useful_life_isValid = ::OpenAPI::fromJsonValue(m_useful_life, json[QString("usefulLife")]);
    m_useful_life_isSet = !json[QString("usefulLife")].isNull() && m_useful_life_isValid;
}

QString OAIBookBalanceInFixedAssetDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBookBalanceInFixedAssetDto::asJsonObject() const {
    QJsonObject obj;
    if (m_acquisition_cost_isSet) {
        obj.insert(QString("acquisitionCost"), ::OpenAPI::toJsonValue(m_acquisition_cost));
    }
    if (m_book.isSet()) {
        obj.insert(QString("book"), ::OpenAPI::toJsonValue(m_book));
    }
    if (m_depreciation_from_date_isSet) {
        obj.insert(QString("depreciationFromDate"), ::OpenAPI::toJsonValue(m_depreciation_from_date));
    }
    if (m_depreciation_from_period_isSet) {
        obj.insert(QString("depreciationFromPeriod"), ::OpenAPI::toJsonValue(m_depreciation_from_period));
    }
    if (m_depreciation_method_id_isSet) {
        obj.insert(QString("depreciationMethodID"), ::OpenAPI::toJsonValue(m_depreciation_method_id));
    }
    if (m_depreciation_to_period_isSet) {
        obj.insert(QString("depreciationToPeriod"), ::OpenAPI::toJsonValue(m_depreciation_to_period));
    }
    if (m_last_depreciation_period_isSet) {
        obj.insert(QString("lastDepreciationPeriod"), ::OpenAPI::toJsonValue(m_last_depreciation_period));
    }
    if (m_salvage_amount_isSet) {
        obj.insert(QString("salvageAmount"), ::OpenAPI::toJsonValue(m_salvage_amount));
    }
    if (m_useful_life_isSet) {
        obj.insert(QString("usefulLife"), ::OpenAPI::toJsonValue(m_useful_life));
    }
    return obj;
}

double OAIBookBalanceInFixedAssetDto::getAcquisitionCost() const {
    return m_acquisition_cost;
}
void OAIBookBalanceInFixedAssetDto::setAcquisitionCost(const double &acquisition_cost) {
    m_acquisition_cost = acquisition_cost;
    m_acquisition_cost_isSet = true;
}

bool OAIBookBalanceInFixedAssetDto::is_acquisition_cost_Set() const{
    return m_acquisition_cost_isSet;
}

bool OAIBookBalanceInFixedAssetDto::is_acquisition_cost_Valid() const{
    return m_acquisition_cost_isValid;
}

OAIBookInBookBalanceDto OAIBookBalanceInFixedAssetDto::getBook() const {
    return m_book;
}
void OAIBookBalanceInFixedAssetDto::setBook(const OAIBookInBookBalanceDto &book) {
    m_book = book;
    m_book_isSet = true;
}

bool OAIBookBalanceInFixedAssetDto::is_book_Set() const{
    return m_book_isSet;
}

bool OAIBookBalanceInFixedAssetDto::is_book_Valid() const{
    return m_book_isValid;
}

QDateTime OAIBookBalanceInFixedAssetDto::getDepreciationFromDate() const {
    return m_depreciation_from_date;
}
void OAIBookBalanceInFixedAssetDto::setDepreciationFromDate(const QDateTime &depreciation_from_date) {
    m_depreciation_from_date = depreciation_from_date;
    m_depreciation_from_date_isSet = true;
}

bool OAIBookBalanceInFixedAssetDto::is_depreciation_from_date_Set() const{
    return m_depreciation_from_date_isSet;
}

bool OAIBookBalanceInFixedAssetDto::is_depreciation_from_date_Valid() const{
    return m_depreciation_from_date_isValid;
}

QString OAIBookBalanceInFixedAssetDto::getDepreciationFromPeriod() const {
    return m_depreciation_from_period;
}
void OAIBookBalanceInFixedAssetDto::setDepreciationFromPeriod(const QString &depreciation_from_period) {
    m_depreciation_from_period = depreciation_from_period;
    m_depreciation_from_period_isSet = true;
}

bool OAIBookBalanceInFixedAssetDto::is_depreciation_from_period_Set() const{
    return m_depreciation_from_period_isSet;
}

bool OAIBookBalanceInFixedAssetDto::is_depreciation_from_period_Valid() const{
    return m_depreciation_from_period_isValid;
}

QString OAIBookBalanceInFixedAssetDto::getDepreciationMethodId() const {
    return m_depreciation_method_id;
}
void OAIBookBalanceInFixedAssetDto::setDepreciationMethodId(const QString &depreciation_method_id) {
    m_depreciation_method_id = depreciation_method_id;
    m_depreciation_method_id_isSet = true;
}

bool OAIBookBalanceInFixedAssetDto::is_depreciation_method_id_Set() const{
    return m_depreciation_method_id_isSet;
}

bool OAIBookBalanceInFixedAssetDto::is_depreciation_method_id_Valid() const{
    return m_depreciation_method_id_isValid;
}

QString OAIBookBalanceInFixedAssetDto::getDepreciationToPeriod() const {
    return m_depreciation_to_period;
}
void OAIBookBalanceInFixedAssetDto::setDepreciationToPeriod(const QString &depreciation_to_period) {
    m_depreciation_to_period = depreciation_to_period;
    m_depreciation_to_period_isSet = true;
}

bool OAIBookBalanceInFixedAssetDto::is_depreciation_to_period_Set() const{
    return m_depreciation_to_period_isSet;
}

bool OAIBookBalanceInFixedAssetDto::is_depreciation_to_period_Valid() const{
    return m_depreciation_to_period_isValid;
}

QString OAIBookBalanceInFixedAssetDto::getLastDepreciationPeriod() const {
    return m_last_depreciation_period;
}
void OAIBookBalanceInFixedAssetDto::setLastDepreciationPeriod(const QString &last_depreciation_period) {
    m_last_depreciation_period = last_depreciation_period;
    m_last_depreciation_period_isSet = true;
}

bool OAIBookBalanceInFixedAssetDto::is_last_depreciation_period_Set() const{
    return m_last_depreciation_period_isSet;
}

bool OAIBookBalanceInFixedAssetDto::is_last_depreciation_period_Valid() const{
    return m_last_depreciation_period_isValid;
}

double OAIBookBalanceInFixedAssetDto::getSalvageAmount() const {
    return m_salvage_amount;
}
void OAIBookBalanceInFixedAssetDto::setSalvageAmount(const double &salvage_amount) {
    m_salvage_amount = salvage_amount;
    m_salvage_amount_isSet = true;
}

bool OAIBookBalanceInFixedAssetDto::is_salvage_amount_Set() const{
    return m_salvage_amount_isSet;
}

bool OAIBookBalanceInFixedAssetDto::is_salvage_amount_Valid() const{
    return m_salvage_amount_isValid;
}

double OAIBookBalanceInFixedAssetDto::getUsefulLife() const {
    return m_useful_life;
}
void OAIBookBalanceInFixedAssetDto::setUsefulLife(const double &useful_life) {
    m_useful_life = useful_life;
    m_useful_life_isSet = true;
}

bool OAIBookBalanceInFixedAssetDto::is_useful_life_Set() const{
    return m_useful_life_isSet;
}

bool OAIBookBalanceInFixedAssetDto::is_useful_life_Valid() const{
    return m_useful_life_isValid;
}

bool OAIBookBalanceInFixedAssetDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquisition_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_book.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_depreciation_from_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depreciation_from_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depreciation_method_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depreciation_to_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_depreciation_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_salvage_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_useful_life_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBookBalanceInFixedAssetDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
