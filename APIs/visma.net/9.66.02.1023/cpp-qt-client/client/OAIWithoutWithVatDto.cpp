/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWithoutWithVatDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWithoutWithVatDto::OAIWithoutWithVatDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWithoutWithVatDto::OAIWithoutWithVatDto() {
    this->initializeModel();
}

OAIWithoutWithVatDto::~OAIWithoutWithVatDto() {}

void OAIWithoutWithVatDto::initializeModel() {

    m_with_vat_isSet = false;
    m_with_vat_isValid = false;

    m_without_vat_isSet = false;
    m_without_vat_isValid = false;
}

void OAIWithoutWithVatDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWithoutWithVatDto::fromJsonObject(QJsonObject json) {

    m_with_vat_isValid = ::OpenAPI::fromJsonValue(m_with_vat, json[QString("withVat")]);
    m_with_vat_isSet = !json[QString("withVat")].isNull() && m_with_vat_isValid;

    m_without_vat_isValid = ::OpenAPI::fromJsonValue(m_without_vat, json[QString("withoutVat")]);
    m_without_vat_isSet = !json[QString("withoutVat")].isNull() && m_without_vat_isValid;
}

QString OAIWithoutWithVatDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWithoutWithVatDto::asJsonObject() const {
    QJsonObject obj;
    if (m_with_vat_isSet) {
        obj.insert(QString("withVat"), ::OpenAPI::toJsonValue(m_with_vat));
    }
    if (m_without_vat_isSet) {
        obj.insert(QString("withoutVat"), ::OpenAPI::toJsonValue(m_without_vat));
    }
    return obj;
}

double OAIWithoutWithVatDto::getWithVat() const {
    return m_with_vat;
}
void OAIWithoutWithVatDto::setWithVat(const double &with_vat) {
    m_with_vat = with_vat;
    m_with_vat_isSet = true;
}

bool OAIWithoutWithVatDto::is_with_vat_Set() const{
    return m_with_vat_isSet;
}

bool OAIWithoutWithVatDto::is_with_vat_Valid() const{
    return m_with_vat_isValid;
}

double OAIWithoutWithVatDto::getWithoutVat() const {
    return m_without_vat;
}
void OAIWithoutWithVatDto::setWithoutVat(const double &without_vat) {
    m_without_vat = without_vat;
    m_without_vat_isSet = true;
}

bool OAIWithoutWithVatDto::is_without_vat_Set() const{
    return m_without_vat_isSet;
}

bool OAIWithoutWithVatDto::is_without_vat_Valid() const{
    return m_without_vat_isValid;
}

bool OAIWithoutWithVatDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_with_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_without_vat_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWithoutWithVatDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
