/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICashTransactionDetailUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICashTransactionDetailUpdateDto::OAICashTransactionDetailUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICashTransactionDetailUpdateDto::OAICashTransactionDetailUpdateDto() {
    this->initializeModel();
}

OAICashTransactionDetailUpdateDto::~OAICashTransactionDetailUpdateDto() {}

void OAICashTransactionDetailUpdateDto::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_inventory_number_isSet = false;
    m_inventory_number_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_not_invoiceable_isSet = false;
    m_not_invoiceable_isValid = false;

    m_offset_account_isSet = false;
    m_offset_account_isValid = false;

    m_offset_subaccount_isSet = false;
    m_offset_subaccount_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_project_task_isSet = false;
    m_project_task_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;

    m_vat_code_isSet = false;
    m_vat_code_isValid = false;
}

void OAICashTransactionDetailUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICashTransactionDetailUpdateDto::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_inventory_number_isValid = ::OpenAPI::fromJsonValue(m_inventory_number, json[QString("inventoryNumber")]);
    m_inventory_number_isSet = !json[QString("inventoryNumber")].isNull() && m_inventory_number_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("lineNumber")]);
    m_line_number_isSet = !json[QString("lineNumber")].isNull() && m_line_number_isValid;

    m_not_invoiceable_isValid = ::OpenAPI::fromJsonValue(m_not_invoiceable, json[QString("notInvoiceable")]);
    m_not_invoiceable_isSet = !json[QString("notInvoiceable")].isNull() && m_not_invoiceable_isValid;

    m_offset_account_isValid = ::OpenAPI::fromJsonValue(m_offset_account, json[QString("offsetAccount")]);
    m_offset_account_isSet = !json[QString("offsetAccount")].isNull() && m_offset_account_isValid;

    m_offset_subaccount_isValid = ::OpenAPI::fromJsonValue(m_offset_subaccount, json[QString("offsetSubaccount")]);
    m_offset_subaccount_isSet = !json[QString("offsetSubaccount")].isNull() && m_offset_subaccount_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_project_task_isValid = ::OpenAPI::fromJsonValue(m_project_task, json[QString("projectTask")]);
    m_project_task_isSet = !json[QString("projectTask")].isNull() && m_project_task_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;

    m_vat_code_isValid = ::OpenAPI::fromJsonValue(m_vat_code, json[QString("vatCode")]);
    m_vat_code_isSet = !json[QString("vatCode")].isNull() && m_vat_code_isValid;
}

QString OAICashTransactionDetailUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICashTransactionDetailUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_inventory_number.isSet()) {
        obj.insert(QString("inventoryNumber"), ::OpenAPI::toJsonValue(m_inventory_number));
    }
    if (m_line_number.isSet()) {
        obj.insert(QString("lineNumber"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_not_invoiceable.isSet()) {
        obj.insert(QString("notInvoiceable"), ::OpenAPI::toJsonValue(m_not_invoiceable));
    }
    if (m_offset_account.isSet()) {
        obj.insert(QString("offsetAccount"), ::OpenAPI::toJsonValue(m_offset_account));
    }
    if (m_offset_subaccount.size() > 0) {
        obj.insert(QString("offsetSubaccount"), ::OpenAPI::toJsonValue(m_offset_subaccount));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_project_task.isSet()) {
        obj.insert(QString("projectTask"), ::OpenAPI::toJsonValue(m_project_task));
    }
    if (m_quantity.isSet()) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_uom.isSet()) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    if (m_vat_code.isSet()) {
        obj.insert(QString("vatCode"), ::OpenAPI::toJsonValue(m_vat_code));
    }
    return obj;
}

OAIDtoValueOfNullableOfDecimal OAICashTransactionDetailUpdateDto::getAmount() const {
    return m_amount;
}
void OAICashTransactionDetailUpdateDto::setAmount(const OAIDtoValueOfNullableOfDecimal &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAICashTransactionDetailUpdateDto::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAICashTransactionDetailUpdateDto::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIDtoValueOfString OAICashTransactionDetailUpdateDto::getBranchNumber() const {
    return m_branch_number;
}
void OAICashTransactionDetailUpdateDto::setBranchNumber(const OAIDtoValueOfString &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAICashTransactionDetailUpdateDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAICashTransactionDetailUpdateDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

OAIDtoValueOfString OAICashTransactionDetailUpdateDto::getDescription() const {
    return m_description;
}
void OAICashTransactionDetailUpdateDto::setDescription(const OAIDtoValueOfString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICashTransactionDetailUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAICashTransactionDetailUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIDtoValueOfString OAICashTransactionDetailUpdateDto::getInventoryNumber() const {
    return m_inventory_number;
}
void OAICashTransactionDetailUpdateDto::setInventoryNumber(const OAIDtoValueOfString &inventory_number) {
    m_inventory_number = inventory_number;
    m_inventory_number_isSet = true;
}

bool OAICashTransactionDetailUpdateDto::is_inventory_number_Set() const{
    return m_inventory_number_isSet;
}

bool OAICashTransactionDetailUpdateDto::is_inventory_number_Valid() const{
    return m_inventory_number_isValid;
}

OAIDtoValueOfInt32 OAICashTransactionDetailUpdateDto::getLineNumber() const {
    return m_line_number;
}
void OAICashTransactionDetailUpdateDto::setLineNumber(const OAIDtoValueOfInt32 &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAICashTransactionDetailUpdateDto::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAICashTransactionDetailUpdateDto::is_line_number_Valid() const{
    return m_line_number_isValid;
}

OAIDtoValueOfNullableOfBoolean OAICashTransactionDetailUpdateDto::getNotInvoiceable() const {
    return m_not_invoiceable;
}
void OAICashTransactionDetailUpdateDto::setNotInvoiceable(const OAIDtoValueOfNullableOfBoolean &not_invoiceable) {
    m_not_invoiceable = not_invoiceable;
    m_not_invoiceable_isSet = true;
}

bool OAICashTransactionDetailUpdateDto::is_not_invoiceable_Set() const{
    return m_not_invoiceable_isSet;
}

bool OAICashTransactionDetailUpdateDto::is_not_invoiceable_Valid() const{
    return m_not_invoiceable_isValid;
}

OAIDtoValueOfString OAICashTransactionDetailUpdateDto::getOffsetAccount() const {
    return m_offset_account;
}
void OAICashTransactionDetailUpdateDto::setOffsetAccount(const OAIDtoValueOfString &offset_account) {
    m_offset_account = offset_account;
    m_offset_account_isSet = true;
}

bool OAICashTransactionDetailUpdateDto::is_offset_account_Set() const{
    return m_offset_account_isSet;
}

bool OAICashTransactionDetailUpdateDto::is_offset_account_Valid() const{
    return m_offset_account_isValid;
}

QList<OAISegmentUpdateDto> OAICashTransactionDetailUpdateDto::getOffsetSubaccount() const {
    return m_offset_subaccount;
}
void OAICashTransactionDetailUpdateDto::setOffsetSubaccount(const QList<OAISegmentUpdateDto> &offset_subaccount) {
    m_offset_subaccount = offset_subaccount;
    m_offset_subaccount_isSet = true;
}

bool OAICashTransactionDetailUpdateDto::is_offset_subaccount_Set() const{
    return m_offset_subaccount_isSet;
}

bool OAICashTransactionDetailUpdateDto::is_offset_subaccount_Valid() const{
    return m_offset_subaccount_isValid;
}

QString OAICashTransactionDetailUpdateDto::getOperation() const {
    return m_operation;
}
void OAICashTransactionDetailUpdateDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAICashTransactionDetailUpdateDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAICashTransactionDetailUpdateDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIDtoValueOfNullableOfDecimal OAICashTransactionDetailUpdateDto::getPrice() const {
    return m_price;
}
void OAICashTransactionDetailUpdateDto::setPrice(const OAIDtoValueOfNullableOfDecimal &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAICashTransactionDetailUpdateDto::is_price_Set() const{
    return m_price_isSet;
}

bool OAICashTransactionDetailUpdateDto::is_price_Valid() const{
    return m_price_isValid;
}

OAIDtoValueOfString OAICashTransactionDetailUpdateDto::getProject() const {
    return m_project;
}
void OAICashTransactionDetailUpdateDto::setProject(const OAIDtoValueOfString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAICashTransactionDetailUpdateDto::is_project_Set() const{
    return m_project_isSet;
}

bool OAICashTransactionDetailUpdateDto::is_project_Valid() const{
    return m_project_isValid;
}

OAIDtoValueOfString OAICashTransactionDetailUpdateDto::getProjectTask() const {
    return m_project_task;
}
void OAICashTransactionDetailUpdateDto::setProjectTask(const OAIDtoValueOfString &project_task) {
    m_project_task = project_task;
    m_project_task_isSet = true;
}

bool OAICashTransactionDetailUpdateDto::is_project_task_Set() const{
    return m_project_task_isSet;
}

bool OAICashTransactionDetailUpdateDto::is_project_task_Valid() const{
    return m_project_task_isValid;
}

OAIDtoValueOfNullableOfDecimal OAICashTransactionDetailUpdateDto::getQuantity() const {
    return m_quantity;
}
void OAICashTransactionDetailUpdateDto::setQuantity(const OAIDtoValueOfNullableOfDecimal &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAICashTransactionDetailUpdateDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAICashTransactionDetailUpdateDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIDtoValueOfString OAICashTransactionDetailUpdateDto::getUom() const {
    return m_uom;
}
void OAICashTransactionDetailUpdateDto::setUom(const OAIDtoValueOfString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAICashTransactionDetailUpdateDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAICashTransactionDetailUpdateDto::is_uom_Valid() const{
    return m_uom_isValid;
}

OAIDtoValueOfString OAICashTransactionDetailUpdateDto::getVatCode() const {
    return m_vat_code;
}
void OAICashTransactionDetailUpdateDto::setVatCode(const OAIDtoValueOfString &vat_code) {
    m_vat_code = vat_code;
    m_vat_code_isSet = true;
}

bool OAICashTransactionDetailUpdateDto::is_vat_code_Set() const{
    return m_vat_code_isSet;
}

bool OAICashTransactionDetailUpdateDto::is_vat_code_Valid() const{
    return m_vat_code_isValid;
}

bool OAICashTransactionDetailUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_invoiceable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_subaccount.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_code.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICashTransactionDetailUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
