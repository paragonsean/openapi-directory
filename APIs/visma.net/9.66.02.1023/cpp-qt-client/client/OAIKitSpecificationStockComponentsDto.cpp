/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKitSpecificationStockComponentsDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKitSpecificationStockComponentsDto::OAIKitSpecificationStockComponentsDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKitSpecificationStockComponentsDto::OAIKitSpecificationStockComponentsDto() {
    this->initializeModel();
}

OAIKitSpecificationStockComponentsDto::~OAIKitSpecificationStockComponentsDto() {}

void OAIKitSpecificationStockComponentsDto::initializeModel() {

    m_allow_component_qty_variance_isSet = false;
    m_allow_component_qty_variance_isValid = false;

    m_allow_component_substitution_isSet = false;
    m_allow_component_substitution_isValid = false;

    m_component_id_isSet = false;
    m_component_id_isValid = false;

    m_component_qty_isSet = false;
    m_component_qty_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disassembly_coeff_isSet = false;
    m_disassembly_coeff_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_line_nbr_isSet = false;
    m_line_nbr_isValid = false;

    m_max_component_qty_isSet = false;
    m_max_component_qty_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_min_component_qty_isSet = false;
    m_min_component_qty_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;
}

void OAIKitSpecificationStockComponentsDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKitSpecificationStockComponentsDto::fromJsonObject(QJsonObject json) {

    m_allow_component_qty_variance_isValid = ::OpenAPI::fromJsonValue(m_allow_component_qty_variance, json[QString("allowComponentQtyVariance")]);
    m_allow_component_qty_variance_isSet = !json[QString("allowComponentQtyVariance")].isNull() && m_allow_component_qty_variance_isValid;

    m_allow_component_substitution_isValid = ::OpenAPI::fromJsonValue(m_allow_component_substitution, json[QString("allowComponentSubstitution")]);
    m_allow_component_substitution_isSet = !json[QString("allowComponentSubstitution")].isNull() && m_allow_component_substitution_isValid;

    m_component_id_isValid = ::OpenAPI::fromJsonValue(m_component_id, json[QString("componentID")]);
    m_component_id_isSet = !json[QString("componentID")].isNull() && m_component_id_isValid;

    m_component_qty_isValid = ::OpenAPI::fromJsonValue(m_component_qty, json[QString("componentQty")]);
    m_component_qty_isSet = !json[QString("componentQty")].isNull() && m_component_qty_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disassembly_coeff_isValid = ::OpenAPI::fromJsonValue(m_disassembly_coeff, json[QString("disassemblyCoeff")]);
    m_disassembly_coeff_isSet = !json[QString("disassemblyCoeff")].isNull() && m_disassembly_coeff_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_line_nbr, json[QString("lineNbr")]);
    m_line_nbr_isSet = !json[QString("lineNbr")].isNull() && m_line_nbr_isValid;

    m_max_component_qty_isValid = ::OpenAPI::fromJsonValue(m_max_component_qty, json[QString("maxComponentQty")]);
    m_max_component_qty_isSet = !json[QString("maxComponentQty")].isNull() && m_max_component_qty_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_min_component_qty_isValid = ::OpenAPI::fromJsonValue(m_min_component_qty, json[QString("minComponentQty")]);
    m_min_component_qty_isSet = !json[QString("minComponentQty")].isNull() && m_min_component_qty_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;
}

QString OAIKitSpecificationStockComponentsDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKitSpecificationStockComponentsDto::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_component_qty_variance_isSet) {
        obj.insert(QString("allowComponentQtyVariance"), ::OpenAPI::toJsonValue(m_allow_component_qty_variance));
    }
    if (m_allow_component_substitution_isSet) {
        obj.insert(QString("allowComponentSubstitution"), ::OpenAPI::toJsonValue(m_allow_component_substitution));
    }
    if (m_component_id_isSet) {
        obj.insert(QString("componentID"), ::OpenAPI::toJsonValue(m_component_id));
    }
    if (m_component_qty_isSet) {
        obj.insert(QString("componentQty"), ::OpenAPI::toJsonValue(m_component_qty));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disassembly_coeff_isSet) {
        obj.insert(QString("disassemblyCoeff"), ::OpenAPI::toJsonValue(m_disassembly_coeff));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_line_nbr_isSet) {
        obj.insert(QString("lineNbr"), ::OpenAPI::toJsonValue(m_line_nbr));
    }
    if (m_max_component_qty_isSet) {
        obj.insert(QString("maxComponentQty"), ::OpenAPI::toJsonValue(m_max_component_qty));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_min_component_qty_isSet) {
        obj.insert(QString("minComponentQty"), ::OpenAPI::toJsonValue(m_min_component_qty));
    }
    if (m_uom_isSet) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    return obj;
}

bool OAIKitSpecificationStockComponentsDto::isAllowComponentQtyVariance() const {
    return m_allow_component_qty_variance;
}
void OAIKitSpecificationStockComponentsDto::setAllowComponentQtyVariance(const bool &allow_component_qty_variance) {
    m_allow_component_qty_variance = allow_component_qty_variance;
    m_allow_component_qty_variance_isSet = true;
}

bool OAIKitSpecificationStockComponentsDto::is_allow_component_qty_variance_Set() const{
    return m_allow_component_qty_variance_isSet;
}

bool OAIKitSpecificationStockComponentsDto::is_allow_component_qty_variance_Valid() const{
    return m_allow_component_qty_variance_isValid;
}

bool OAIKitSpecificationStockComponentsDto::isAllowComponentSubstitution() const {
    return m_allow_component_substitution;
}
void OAIKitSpecificationStockComponentsDto::setAllowComponentSubstitution(const bool &allow_component_substitution) {
    m_allow_component_substitution = allow_component_substitution;
    m_allow_component_substitution_isSet = true;
}

bool OAIKitSpecificationStockComponentsDto::is_allow_component_substitution_Set() const{
    return m_allow_component_substitution_isSet;
}

bool OAIKitSpecificationStockComponentsDto::is_allow_component_substitution_Valid() const{
    return m_allow_component_substitution_isValid;
}

QString OAIKitSpecificationStockComponentsDto::getComponentId() const {
    return m_component_id;
}
void OAIKitSpecificationStockComponentsDto::setComponentId(const QString &component_id) {
    m_component_id = component_id;
    m_component_id_isSet = true;
}

bool OAIKitSpecificationStockComponentsDto::is_component_id_Set() const{
    return m_component_id_isSet;
}

bool OAIKitSpecificationStockComponentsDto::is_component_id_Valid() const{
    return m_component_id_isValid;
}

double OAIKitSpecificationStockComponentsDto::getComponentQty() const {
    return m_component_qty;
}
void OAIKitSpecificationStockComponentsDto::setComponentQty(const double &component_qty) {
    m_component_qty = component_qty;
    m_component_qty_isSet = true;
}

bool OAIKitSpecificationStockComponentsDto::is_component_qty_Set() const{
    return m_component_qty_isSet;
}

bool OAIKitSpecificationStockComponentsDto::is_component_qty_Valid() const{
    return m_component_qty_isValid;
}

QString OAIKitSpecificationStockComponentsDto::getDescription() const {
    return m_description;
}
void OAIKitSpecificationStockComponentsDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIKitSpecificationStockComponentsDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIKitSpecificationStockComponentsDto::is_description_Valid() const{
    return m_description_isValid;
}

double OAIKitSpecificationStockComponentsDto::getDisassemblyCoeff() const {
    return m_disassembly_coeff;
}
void OAIKitSpecificationStockComponentsDto::setDisassemblyCoeff(const double &disassembly_coeff) {
    m_disassembly_coeff = disassembly_coeff;
    m_disassembly_coeff_isSet = true;
}

bool OAIKitSpecificationStockComponentsDto::is_disassembly_coeff_Set() const{
    return m_disassembly_coeff_isSet;
}

bool OAIKitSpecificationStockComponentsDto::is_disassembly_coeff_Valid() const{
    return m_disassembly_coeff_isValid;
}

QString OAIKitSpecificationStockComponentsDto::getErrorInfo() const {
    return m_error_info;
}
void OAIKitSpecificationStockComponentsDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIKitSpecificationStockComponentsDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIKitSpecificationStockComponentsDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

qint32 OAIKitSpecificationStockComponentsDto::getLineNbr() const {
    return m_line_nbr;
}
void OAIKitSpecificationStockComponentsDto::setLineNbr(const qint32 &line_nbr) {
    m_line_nbr = line_nbr;
    m_line_nbr_isSet = true;
}

bool OAIKitSpecificationStockComponentsDto::is_line_nbr_Set() const{
    return m_line_nbr_isSet;
}

bool OAIKitSpecificationStockComponentsDto::is_line_nbr_Valid() const{
    return m_line_nbr_isValid;
}

double OAIKitSpecificationStockComponentsDto::getMaxComponentQty() const {
    return m_max_component_qty;
}
void OAIKitSpecificationStockComponentsDto::setMaxComponentQty(const double &max_component_qty) {
    m_max_component_qty = max_component_qty;
    m_max_component_qty_isSet = true;
}

bool OAIKitSpecificationStockComponentsDto::is_max_component_qty_Set() const{
    return m_max_component_qty_isSet;
}

bool OAIKitSpecificationStockComponentsDto::is_max_component_qty_Valid() const{
    return m_max_component_qty_isValid;
}

OAIMetadataDto OAIKitSpecificationStockComponentsDto::getMetadata() const {
    return m_metadata;
}
void OAIKitSpecificationStockComponentsDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIKitSpecificationStockComponentsDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIKitSpecificationStockComponentsDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

double OAIKitSpecificationStockComponentsDto::getMinComponentQty() const {
    return m_min_component_qty;
}
void OAIKitSpecificationStockComponentsDto::setMinComponentQty(const double &min_component_qty) {
    m_min_component_qty = min_component_qty;
    m_min_component_qty_isSet = true;
}

bool OAIKitSpecificationStockComponentsDto::is_min_component_qty_Set() const{
    return m_min_component_qty_isSet;
}

bool OAIKitSpecificationStockComponentsDto::is_min_component_qty_Valid() const{
    return m_min_component_qty_isValid;
}

QString OAIKitSpecificationStockComponentsDto::getUom() const {
    return m_uom;
}
void OAIKitSpecificationStockComponentsDto::setUom(const QString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAIKitSpecificationStockComponentsDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAIKitSpecificationStockComponentsDto::is_uom_Valid() const{
    return m_uom_isValid;
}

bool OAIKitSpecificationStockComponentsDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_component_qty_variance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_component_substitution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disassembly_coeff_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_component_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_component_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKitSpecificationStockComponentsDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
