/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscountBreakpointDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscountBreakpointDto::OAIDiscountBreakpointDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscountBreakpointDto::OAIDiscountBreakpointDto() {
    this->initializeModel();
}

OAIDiscountBreakpointDto::~OAIDiscountBreakpointDto() {}

void OAIDiscountBreakpointDto::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_amount_to_isSet = false;
    m_amount_to_isValid = false;

    m_break_amount_isSet = false;
    m_break_amount_isValid = false;

    m_break_quantity_isSet = false;
    m_break_quantity_isValid = false;

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_discount_percent_isSet = false;
    m_discount_percent_isValid = false;

    m_effective_date_isSet = false;
    m_effective_date_isValid = false;

    m_free_item_qty_isSet = false;
    m_free_item_qty_isValid = false;

    m_last_amount_to_isSet = false;
    m_last_amount_to_isValid = false;

    m_last_break_amount_isSet = false;
    m_last_break_amount_isValid = false;

    m_last_break_quantity_isSet = false;
    m_last_break_quantity_isValid = false;

    m_last_discount_isSet = false;
    m_last_discount_isValid = false;

    m_last_discount_amount_isSet = false;
    m_last_discount_amount_isValid = false;

    m_last_discount_percent_isSet = false;
    m_last_discount_percent_isValid = false;

    m_last_free_item_qty_isSet = false;
    m_last_free_item_qty_isValid = false;

    m_last_quantity_to_isSet = false;
    m_last_quantity_to_isValid = false;

    m_line_nbr_isSet = false;
    m_line_nbr_isValid = false;

    m_pending_break_amount_isSet = false;
    m_pending_break_amount_isValid = false;

    m_pending_break_quantity_isSet = false;
    m_pending_break_quantity_isValid = false;

    m_pending_date_isSet = false;
    m_pending_date_isValid = false;

    m_pending_discount_amount_isSet = false;
    m_pending_discount_amount_isValid = false;

    m_pending_discount_percent_isSet = false;
    m_pending_discount_percent_isValid = false;

    m_pending_free_item_qty_isSet = false;
    m_pending_free_item_qty_isValid = false;

    m_quantity_to_isSet = false;
    m_quantity_to_isValid = false;
}

void OAIDiscountBreakpointDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiscountBreakpointDto::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_amount_to_isValid = ::OpenAPI::fromJsonValue(m_amount_to, json[QString("amountTo")]);
    m_amount_to_isSet = !json[QString("amountTo")].isNull() && m_amount_to_isValid;

    m_break_amount_isValid = ::OpenAPI::fromJsonValue(m_break_amount, json[QString("breakAmount")]);
    m_break_amount_isSet = !json[QString("breakAmount")].isNull() && m_break_amount_isValid;

    m_break_quantity_isValid = ::OpenAPI::fromJsonValue(m_break_quantity, json[QString("breakQuantity")]);
    m_break_quantity_isSet = !json[QString("breakQuantity")].isNull() && m_break_quantity_isValid;

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("discountAmount")]);
    m_discount_amount_isSet = !json[QString("discountAmount")].isNull() && m_discount_amount_isValid;

    m_discount_percent_isValid = ::OpenAPI::fromJsonValue(m_discount_percent, json[QString("discountPercent")]);
    m_discount_percent_isSet = !json[QString("discountPercent")].isNull() && m_discount_percent_isValid;

    m_effective_date_isValid = ::OpenAPI::fromJsonValue(m_effective_date, json[QString("effectiveDate")]);
    m_effective_date_isSet = !json[QString("effectiveDate")].isNull() && m_effective_date_isValid;

    m_free_item_qty_isValid = ::OpenAPI::fromJsonValue(m_free_item_qty, json[QString("freeItemQty")]);
    m_free_item_qty_isSet = !json[QString("freeItemQty")].isNull() && m_free_item_qty_isValid;

    m_last_amount_to_isValid = ::OpenAPI::fromJsonValue(m_last_amount_to, json[QString("lastAmountTo")]);
    m_last_amount_to_isSet = !json[QString("lastAmountTo")].isNull() && m_last_amount_to_isValid;

    m_last_break_amount_isValid = ::OpenAPI::fromJsonValue(m_last_break_amount, json[QString("lastBreakAmount")]);
    m_last_break_amount_isSet = !json[QString("lastBreakAmount")].isNull() && m_last_break_amount_isValid;

    m_last_break_quantity_isValid = ::OpenAPI::fromJsonValue(m_last_break_quantity, json[QString("lastBreakQuantity")]);
    m_last_break_quantity_isSet = !json[QString("lastBreakQuantity")].isNull() && m_last_break_quantity_isValid;

    m_last_discount_isValid = ::OpenAPI::fromJsonValue(m_last_discount, json[QString("lastDiscount")]);
    m_last_discount_isSet = !json[QString("lastDiscount")].isNull() && m_last_discount_isValid;

    m_last_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_last_discount_amount, json[QString("lastDiscountAmount")]);
    m_last_discount_amount_isSet = !json[QString("lastDiscountAmount")].isNull() && m_last_discount_amount_isValid;

    m_last_discount_percent_isValid = ::OpenAPI::fromJsonValue(m_last_discount_percent, json[QString("lastDiscountPercent")]);
    m_last_discount_percent_isSet = !json[QString("lastDiscountPercent")].isNull() && m_last_discount_percent_isValid;

    m_last_free_item_qty_isValid = ::OpenAPI::fromJsonValue(m_last_free_item_qty, json[QString("lastFreeItemQty")]);
    m_last_free_item_qty_isSet = !json[QString("lastFreeItemQty")].isNull() && m_last_free_item_qty_isValid;

    m_last_quantity_to_isValid = ::OpenAPI::fromJsonValue(m_last_quantity_to, json[QString("lastQuantityTo")]);
    m_last_quantity_to_isSet = !json[QString("lastQuantityTo")].isNull() && m_last_quantity_to_isValid;

    m_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_line_nbr, json[QString("lineNbr")]);
    m_line_nbr_isSet = !json[QString("lineNbr")].isNull() && m_line_nbr_isValid;

    m_pending_break_amount_isValid = ::OpenAPI::fromJsonValue(m_pending_break_amount, json[QString("pendingBreakAmount")]);
    m_pending_break_amount_isSet = !json[QString("pendingBreakAmount")].isNull() && m_pending_break_amount_isValid;

    m_pending_break_quantity_isValid = ::OpenAPI::fromJsonValue(m_pending_break_quantity, json[QString("pendingBreakQuantity")]);
    m_pending_break_quantity_isSet = !json[QString("pendingBreakQuantity")].isNull() && m_pending_break_quantity_isValid;

    m_pending_date_isValid = ::OpenAPI::fromJsonValue(m_pending_date, json[QString("pendingDate")]);
    m_pending_date_isSet = !json[QString("pendingDate")].isNull() && m_pending_date_isValid;

    m_pending_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_pending_discount_amount, json[QString("pendingDiscountAmount")]);
    m_pending_discount_amount_isSet = !json[QString("pendingDiscountAmount")].isNull() && m_pending_discount_amount_isValid;

    m_pending_discount_percent_isValid = ::OpenAPI::fromJsonValue(m_pending_discount_percent, json[QString("pendingDiscountPercent")]);
    m_pending_discount_percent_isSet = !json[QString("pendingDiscountPercent")].isNull() && m_pending_discount_percent_isValid;

    m_pending_free_item_qty_isValid = ::OpenAPI::fromJsonValue(m_pending_free_item_qty, json[QString("pendingFreeItemQty")]);
    m_pending_free_item_qty_isSet = !json[QString("pendingFreeItemQty")].isNull() && m_pending_free_item_qty_isValid;

    m_quantity_to_isValid = ::OpenAPI::fromJsonValue(m_quantity_to, json[QString("quantityTo")]);
    m_quantity_to_isSet = !json[QString("quantityTo")].isNull() && m_quantity_to_isValid;
}

QString OAIDiscountBreakpointDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiscountBreakpointDto::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_amount_to_isSet) {
        obj.insert(QString("amountTo"), ::OpenAPI::toJsonValue(m_amount_to));
    }
    if (m_break_amount_isSet) {
        obj.insert(QString("breakAmount"), ::OpenAPI::toJsonValue(m_break_amount));
    }
    if (m_break_quantity_isSet) {
        obj.insert(QString("breakQuantity"), ::OpenAPI::toJsonValue(m_break_quantity));
    }
    if (m_discount_amount_isSet) {
        obj.insert(QString("discountAmount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_discount_percent_isSet) {
        obj.insert(QString("discountPercent"), ::OpenAPI::toJsonValue(m_discount_percent));
    }
    if (m_effective_date_isSet) {
        obj.insert(QString("effectiveDate"), ::OpenAPI::toJsonValue(m_effective_date));
    }
    if (m_free_item_qty_isSet) {
        obj.insert(QString("freeItemQty"), ::OpenAPI::toJsonValue(m_free_item_qty));
    }
    if (m_last_amount_to_isSet) {
        obj.insert(QString("lastAmountTo"), ::OpenAPI::toJsonValue(m_last_amount_to));
    }
    if (m_last_break_amount_isSet) {
        obj.insert(QString("lastBreakAmount"), ::OpenAPI::toJsonValue(m_last_break_amount));
    }
    if (m_last_break_quantity_isSet) {
        obj.insert(QString("lastBreakQuantity"), ::OpenAPI::toJsonValue(m_last_break_quantity));
    }
    if (m_last_discount_isSet) {
        obj.insert(QString("lastDiscount"), ::OpenAPI::toJsonValue(m_last_discount));
    }
    if (m_last_discount_amount_isSet) {
        obj.insert(QString("lastDiscountAmount"), ::OpenAPI::toJsonValue(m_last_discount_amount));
    }
    if (m_last_discount_percent_isSet) {
        obj.insert(QString("lastDiscountPercent"), ::OpenAPI::toJsonValue(m_last_discount_percent));
    }
    if (m_last_free_item_qty_isSet) {
        obj.insert(QString("lastFreeItemQty"), ::OpenAPI::toJsonValue(m_last_free_item_qty));
    }
    if (m_last_quantity_to_isSet) {
        obj.insert(QString("lastQuantityTo"), ::OpenAPI::toJsonValue(m_last_quantity_to));
    }
    if (m_line_nbr_isSet) {
        obj.insert(QString("lineNbr"), ::OpenAPI::toJsonValue(m_line_nbr));
    }
    if (m_pending_break_amount_isSet) {
        obj.insert(QString("pendingBreakAmount"), ::OpenAPI::toJsonValue(m_pending_break_amount));
    }
    if (m_pending_break_quantity_isSet) {
        obj.insert(QString("pendingBreakQuantity"), ::OpenAPI::toJsonValue(m_pending_break_quantity));
    }
    if (m_pending_date_isSet) {
        obj.insert(QString("pendingDate"), ::OpenAPI::toJsonValue(m_pending_date));
    }
    if (m_pending_discount_amount_isSet) {
        obj.insert(QString("pendingDiscountAmount"), ::OpenAPI::toJsonValue(m_pending_discount_amount));
    }
    if (m_pending_discount_percent_isSet) {
        obj.insert(QString("pendingDiscountPercent"), ::OpenAPI::toJsonValue(m_pending_discount_percent));
    }
    if (m_pending_free_item_qty_isSet) {
        obj.insert(QString("pendingFreeItemQty"), ::OpenAPI::toJsonValue(m_pending_free_item_qty));
    }
    if (m_quantity_to_isSet) {
        obj.insert(QString("quantityTo"), ::OpenAPI::toJsonValue(m_quantity_to));
    }
    return obj;
}

bool OAIDiscountBreakpointDto::isActive() const {
    return m_active;
}
void OAIDiscountBreakpointDto::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIDiscountBreakpointDto::is_active_Set() const{
    return m_active_isSet;
}

bool OAIDiscountBreakpointDto::is_active_Valid() const{
    return m_active_isValid;
}

double OAIDiscountBreakpointDto::getAmountTo() const {
    return m_amount_to;
}
void OAIDiscountBreakpointDto::setAmountTo(const double &amount_to) {
    m_amount_to = amount_to;
    m_amount_to_isSet = true;
}

bool OAIDiscountBreakpointDto::is_amount_to_Set() const{
    return m_amount_to_isSet;
}

bool OAIDiscountBreakpointDto::is_amount_to_Valid() const{
    return m_amount_to_isValid;
}

double OAIDiscountBreakpointDto::getBreakAmount() const {
    return m_break_amount;
}
void OAIDiscountBreakpointDto::setBreakAmount(const double &break_amount) {
    m_break_amount = break_amount;
    m_break_amount_isSet = true;
}

bool OAIDiscountBreakpointDto::is_break_amount_Set() const{
    return m_break_amount_isSet;
}

bool OAIDiscountBreakpointDto::is_break_amount_Valid() const{
    return m_break_amount_isValid;
}

double OAIDiscountBreakpointDto::getBreakQuantity() const {
    return m_break_quantity;
}
void OAIDiscountBreakpointDto::setBreakQuantity(const double &break_quantity) {
    m_break_quantity = break_quantity;
    m_break_quantity_isSet = true;
}

bool OAIDiscountBreakpointDto::is_break_quantity_Set() const{
    return m_break_quantity_isSet;
}

bool OAIDiscountBreakpointDto::is_break_quantity_Valid() const{
    return m_break_quantity_isValid;
}

double OAIDiscountBreakpointDto::getDiscountAmount() const {
    return m_discount_amount;
}
void OAIDiscountBreakpointDto::setDiscountAmount(const double &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAIDiscountBreakpointDto::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAIDiscountBreakpointDto::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

double OAIDiscountBreakpointDto::getDiscountPercent() const {
    return m_discount_percent;
}
void OAIDiscountBreakpointDto::setDiscountPercent(const double &discount_percent) {
    m_discount_percent = discount_percent;
    m_discount_percent_isSet = true;
}

bool OAIDiscountBreakpointDto::is_discount_percent_Set() const{
    return m_discount_percent_isSet;
}

bool OAIDiscountBreakpointDto::is_discount_percent_Valid() const{
    return m_discount_percent_isValid;
}

QDateTime OAIDiscountBreakpointDto::getEffectiveDate() const {
    return m_effective_date;
}
void OAIDiscountBreakpointDto::setEffectiveDate(const QDateTime &effective_date) {
    m_effective_date = effective_date;
    m_effective_date_isSet = true;
}

bool OAIDiscountBreakpointDto::is_effective_date_Set() const{
    return m_effective_date_isSet;
}

bool OAIDiscountBreakpointDto::is_effective_date_Valid() const{
    return m_effective_date_isValid;
}

double OAIDiscountBreakpointDto::getFreeItemQty() const {
    return m_free_item_qty;
}
void OAIDiscountBreakpointDto::setFreeItemQty(const double &free_item_qty) {
    m_free_item_qty = free_item_qty;
    m_free_item_qty_isSet = true;
}

bool OAIDiscountBreakpointDto::is_free_item_qty_Set() const{
    return m_free_item_qty_isSet;
}

bool OAIDiscountBreakpointDto::is_free_item_qty_Valid() const{
    return m_free_item_qty_isValid;
}

double OAIDiscountBreakpointDto::getLastAmountTo() const {
    return m_last_amount_to;
}
void OAIDiscountBreakpointDto::setLastAmountTo(const double &last_amount_to) {
    m_last_amount_to = last_amount_to;
    m_last_amount_to_isSet = true;
}

bool OAIDiscountBreakpointDto::is_last_amount_to_Set() const{
    return m_last_amount_to_isSet;
}

bool OAIDiscountBreakpointDto::is_last_amount_to_Valid() const{
    return m_last_amount_to_isValid;
}

double OAIDiscountBreakpointDto::getLastBreakAmount() const {
    return m_last_break_amount;
}
void OAIDiscountBreakpointDto::setLastBreakAmount(const double &last_break_amount) {
    m_last_break_amount = last_break_amount;
    m_last_break_amount_isSet = true;
}

bool OAIDiscountBreakpointDto::is_last_break_amount_Set() const{
    return m_last_break_amount_isSet;
}

bool OAIDiscountBreakpointDto::is_last_break_amount_Valid() const{
    return m_last_break_amount_isValid;
}

double OAIDiscountBreakpointDto::getLastBreakQuantity() const {
    return m_last_break_quantity;
}
void OAIDiscountBreakpointDto::setLastBreakQuantity(const double &last_break_quantity) {
    m_last_break_quantity = last_break_quantity;
    m_last_break_quantity_isSet = true;
}

bool OAIDiscountBreakpointDto::is_last_break_quantity_Set() const{
    return m_last_break_quantity_isSet;
}

bool OAIDiscountBreakpointDto::is_last_break_quantity_Valid() const{
    return m_last_break_quantity_isValid;
}

double OAIDiscountBreakpointDto::getLastDiscount() const {
    return m_last_discount;
}
void OAIDiscountBreakpointDto::setLastDiscount(const double &last_discount) {
    m_last_discount = last_discount;
    m_last_discount_isSet = true;
}

bool OAIDiscountBreakpointDto::is_last_discount_Set() const{
    return m_last_discount_isSet;
}

bool OAIDiscountBreakpointDto::is_last_discount_Valid() const{
    return m_last_discount_isValid;
}

double OAIDiscountBreakpointDto::getLastDiscountAmount() const {
    return m_last_discount_amount;
}
void OAIDiscountBreakpointDto::setLastDiscountAmount(const double &last_discount_amount) {
    m_last_discount_amount = last_discount_amount;
    m_last_discount_amount_isSet = true;
}

bool OAIDiscountBreakpointDto::is_last_discount_amount_Set() const{
    return m_last_discount_amount_isSet;
}

bool OAIDiscountBreakpointDto::is_last_discount_amount_Valid() const{
    return m_last_discount_amount_isValid;
}

double OAIDiscountBreakpointDto::getLastDiscountPercent() const {
    return m_last_discount_percent;
}
void OAIDiscountBreakpointDto::setLastDiscountPercent(const double &last_discount_percent) {
    m_last_discount_percent = last_discount_percent;
    m_last_discount_percent_isSet = true;
}

bool OAIDiscountBreakpointDto::is_last_discount_percent_Set() const{
    return m_last_discount_percent_isSet;
}

bool OAIDiscountBreakpointDto::is_last_discount_percent_Valid() const{
    return m_last_discount_percent_isValid;
}

double OAIDiscountBreakpointDto::getLastFreeItemQty() const {
    return m_last_free_item_qty;
}
void OAIDiscountBreakpointDto::setLastFreeItemQty(const double &last_free_item_qty) {
    m_last_free_item_qty = last_free_item_qty;
    m_last_free_item_qty_isSet = true;
}

bool OAIDiscountBreakpointDto::is_last_free_item_qty_Set() const{
    return m_last_free_item_qty_isSet;
}

bool OAIDiscountBreakpointDto::is_last_free_item_qty_Valid() const{
    return m_last_free_item_qty_isValid;
}

double OAIDiscountBreakpointDto::getLastQuantityTo() const {
    return m_last_quantity_to;
}
void OAIDiscountBreakpointDto::setLastQuantityTo(const double &last_quantity_to) {
    m_last_quantity_to = last_quantity_to;
    m_last_quantity_to_isSet = true;
}

bool OAIDiscountBreakpointDto::is_last_quantity_to_Set() const{
    return m_last_quantity_to_isSet;
}

bool OAIDiscountBreakpointDto::is_last_quantity_to_Valid() const{
    return m_last_quantity_to_isValid;
}

qint32 OAIDiscountBreakpointDto::getLineNbr() const {
    return m_line_nbr;
}
void OAIDiscountBreakpointDto::setLineNbr(const qint32 &line_nbr) {
    m_line_nbr = line_nbr;
    m_line_nbr_isSet = true;
}

bool OAIDiscountBreakpointDto::is_line_nbr_Set() const{
    return m_line_nbr_isSet;
}

bool OAIDiscountBreakpointDto::is_line_nbr_Valid() const{
    return m_line_nbr_isValid;
}

double OAIDiscountBreakpointDto::getPendingBreakAmount() const {
    return m_pending_break_amount;
}
void OAIDiscountBreakpointDto::setPendingBreakAmount(const double &pending_break_amount) {
    m_pending_break_amount = pending_break_amount;
    m_pending_break_amount_isSet = true;
}

bool OAIDiscountBreakpointDto::is_pending_break_amount_Set() const{
    return m_pending_break_amount_isSet;
}

bool OAIDiscountBreakpointDto::is_pending_break_amount_Valid() const{
    return m_pending_break_amount_isValid;
}

double OAIDiscountBreakpointDto::getPendingBreakQuantity() const {
    return m_pending_break_quantity;
}
void OAIDiscountBreakpointDto::setPendingBreakQuantity(const double &pending_break_quantity) {
    m_pending_break_quantity = pending_break_quantity;
    m_pending_break_quantity_isSet = true;
}

bool OAIDiscountBreakpointDto::is_pending_break_quantity_Set() const{
    return m_pending_break_quantity_isSet;
}

bool OAIDiscountBreakpointDto::is_pending_break_quantity_Valid() const{
    return m_pending_break_quantity_isValid;
}

QDateTime OAIDiscountBreakpointDto::getPendingDate() const {
    return m_pending_date;
}
void OAIDiscountBreakpointDto::setPendingDate(const QDateTime &pending_date) {
    m_pending_date = pending_date;
    m_pending_date_isSet = true;
}

bool OAIDiscountBreakpointDto::is_pending_date_Set() const{
    return m_pending_date_isSet;
}

bool OAIDiscountBreakpointDto::is_pending_date_Valid() const{
    return m_pending_date_isValid;
}

double OAIDiscountBreakpointDto::getPendingDiscountAmount() const {
    return m_pending_discount_amount;
}
void OAIDiscountBreakpointDto::setPendingDiscountAmount(const double &pending_discount_amount) {
    m_pending_discount_amount = pending_discount_amount;
    m_pending_discount_amount_isSet = true;
}

bool OAIDiscountBreakpointDto::is_pending_discount_amount_Set() const{
    return m_pending_discount_amount_isSet;
}

bool OAIDiscountBreakpointDto::is_pending_discount_amount_Valid() const{
    return m_pending_discount_amount_isValid;
}

double OAIDiscountBreakpointDto::getPendingDiscountPercent() const {
    return m_pending_discount_percent;
}
void OAIDiscountBreakpointDto::setPendingDiscountPercent(const double &pending_discount_percent) {
    m_pending_discount_percent = pending_discount_percent;
    m_pending_discount_percent_isSet = true;
}

bool OAIDiscountBreakpointDto::is_pending_discount_percent_Set() const{
    return m_pending_discount_percent_isSet;
}

bool OAIDiscountBreakpointDto::is_pending_discount_percent_Valid() const{
    return m_pending_discount_percent_isValid;
}

double OAIDiscountBreakpointDto::getPendingFreeItemQty() const {
    return m_pending_free_item_qty;
}
void OAIDiscountBreakpointDto::setPendingFreeItemQty(const double &pending_free_item_qty) {
    m_pending_free_item_qty = pending_free_item_qty;
    m_pending_free_item_qty_isSet = true;
}

bool OAIDiscountBreakpointDto::is_pending_free_item_qty_Set() const{
    return m_pending_free_item_qty_isSet;
}

bool OAIDiscountBreakpointDto::is_pending_free_item_qty_Valid() const{
    return m_pending_free_item_qty_isValid;
}

double OAIDiscountBreakpointDto::getQuantityTo() const {
    return m_quantity_to;
}
void OAIDiscountBreakpointDto::setQuantityTo(const double &quantity_to) {
    m_quantity_to = quantity_to;
    m_quantity_to_isSet = true;
}

bool OAIDiscountBreakpointDto::is_quantity_to_Set() const{
    return m_quantity_to_isSet;
}

bool OAIDiscountBreakpointDto::is_quantity_to_Valid() const{
    return m_quantity_to_isValid;
}

bool OAIDiscountBreakpointDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_break_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_break_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_item_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_amount_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_break_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_break_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_discount_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_free_item_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_quantity_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_break_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_break_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_discount_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_free_item_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiscountBreakpointDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
