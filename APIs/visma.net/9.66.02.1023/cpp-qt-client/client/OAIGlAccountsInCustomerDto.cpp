/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlAccountsInCustomerDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlAccountsInCustomerDto::OAIGlAccountsInCustomerDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlAccountsInCustomerDto::OAIGlAccountsInCustomerDto() {
    this->initializeModel();
}

OAIGlAccountsInCustomerDto::~OAIGlAccountsInCustomerDto() {}

void OAIGlAccountsInCustomerDto::initializeModel() {

    m_cash_discount_account_isSet = false;
    m_cash_discount_account_isValid = false;

    m_cash_discount_subaccount_isSet = false;
    m_cash_discount_subaccount_isValid = false;

    m_customer_ledger_account_isSet = false;
    m_customer_ledger_account_isValid = false;

    m_customer_ledger_subaccount_isSet = false;
    m_customer_ledger_subaccount_isValid = false;

    m_discount_account_isSet = false;
    m_discount_account_isValid = false;

    m_discount_subaccount_isSet = false;
    m_discount_subaccount_isValid = false;

    m_freight_account_isSet = false;
    m_freight_account_isValid = false;

    m_freight_subaccount_isSet = false;
    m_freight_subaccount_isValid = false;

    m_prepayment_account_isSet = false;
    m_prepayment_account_isValid = false;

    m_prepayment_subaccount_isSet = false;
    m_prepayment_subaccount_isValid = false;

    m_sales_account_isSet = false;
    m_sales_account_isValid = false;

    m_sales_eu_account_isSet = false;
    m_sales_eu_account_isValid = false;

    m_sales_export_account_isSet = false;
    m_sales_export_account_isValid = false;

    m_sales_non_taxable_account_isSet = false;
    m_sales_non_taxable_account_isValid = false;

    m_sales_subaccount_isSet = false;
    m_sales_subaccount_isValid = false;
}

void OAIGlAccountsInCustomerDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlAccountsInCustomerDto::fromJsonObject(QJsonObject json) {

    m_cash_discount_account_isValid = ::OpenAPI::fromJsonValue(m_cash_discount_account, json[QString("cashDiscountAccount")]);
    m_cash_discount_account_isSet = !json[QString("cashDiscountAccount")].isNull() && m_cash_discount_account_isValid;

    m_cash_discount_subaccount_isValid = ::OpenAPI::fromJsonValue(m_cash_discount_subaccount, json[QString("cashDiscountSubaccount")]);
    m_cash_discount_subaccount_isSet = !json[QString("cashDiscountSubaccount")].isNull() && m_cash_discount_subaccount_isValid;

    m_customer_ledger_account_isValid = ::OpenAPI::fromJsonValue(m_customer_ledger_account, json[QString("customerLedgerAccount")]);
    m_customer_ledger_account_isSet = !json[QString("customerLedgerAccount")].isNull() && m_customer_ledger_account_isValid;

    m_customer_ledger_subaccount_isValid = ::OpenAPI::fromJsonValue(m_customer_ledger_subaccount, json[QString("customerLedgerSubaccount")]);
    m_customer_ledger_subaccount_isSet = !json[QString("customerLedgerSubaccount")].isNull() && m_customer_ledger_subaccount_isValid;

    m_discount_account_isValid = ::OpenAPI::fromJsonValue(m_discount_account, json[QString("discountAccount")]);
    m_discount_account_isSet = !json[QString("discountAccount")].isNull() && m_discount_account_isValid;

    m_discount_subaccount_isValid = ::OpenAPI::fromJsonValue(m_discount_subaccount, json[QString("discountSubaccount")]);
    m_discount_subaccount_isSet = !json[QString("discountSubaccount")].isNull() && m_discount_subaccount_isValid;

    m_freight_account_isValid = ::OpenAPI::fromJsonValue(m_freight_account, json[QString("freightAccount")]);
    m_freight_account_isSet = !json[QString("freightAccount")].isNull() && m_freight_account_isValid;

    m_freight_subaccount_isValid = ::OpenAPI::fromJsonValue(m_freight_subaccount, json[QString("freightSubaccount")]);
    m_freight_subaccount_isSet = !json[QString("freightSubaccount")].isNull() && m_freight_subaccount_isValid;

    m_prepayment_account_isValid = ::OpenAPI::fromJsonValue(m_prepayment_account, json[QString("prepaymentAccount")]);
    m_prepayment_account_isSet = !json[QString("prepaymentAccount")].isNull() && m_prepayment_account_isValid;

    m_prepayment_subaccount_isValid = ::OpenAPI::fromJsonValue(m_prepayment_subaccount, json[QString("prepaymentSubaccount")]);
    m_prepayment_subaccount_isSet = !json[QString("prepaymentSubaccount")].isNull() && m_prepayment_subaccount_isValid;

    m_sales_account_isValid = ::OpenAPI::fromJsonValue(m_sales_account, json[QString("salesAccount")]);
    m_sales_account_isSet = !json[QString("salesAccount")].isNull() && m_sales_account_isValid;

    m_sales_eu_account_isValid = ::OpenAPI::fromJsonValue(m_sales_eu_account, json[QString("salesEuAccount")]);
    m_sales_eu_account_isSet = !json[QString("salesEuAccount")].isNull() && m_sales_eu_account_isValid;

    m_sales_export_account_isValid = ::OpenAPI::fromJsonValue(m_sales_export_account, json[QString("salesExportAccount")]);
    m_sales_export_account_isSet = !json[QString("salesExportAccount")].isNull() && m_sales_export_account_isValid;

    m_sales_non_taxable_account_isValid = ::OpenAPI::fromJsonValue(m_sales_non_taxable_account, json[QString("salesNonTaxableAccount")]);
    m_sales_non_taxable_account_isSet = !json[QString("salesNonTaxableAccount")].isNull() && m_sales_non_taxable_account_isValid;

    m_sales_subaccount_isValid = ::OpenAPI::fromJsonValue(m_sales_subaccount, json[QString("salesSubaccount")]);
    m_sales_subaccount_isSet = !json[QString("salesSubaccount")].isNull() && m_sales_subaccount_isValid;
}

QString OAIGlAccountsInCustomerDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlAccountsInCustomerDto::asJsonObject() const {
    QJsonObject obj;
    if (m_cash_discount_account.isSet()) {
        obj.insert(QString("cashDiscountAccount"), ::OpenAPI::toJsonValue(m_cash_discount_account));
    }
    if (m_cash_discount_subaccount.isSet()) {
        obj.insert(QString("cashDiscountSubaccount"), ::OpenAPI::toJsonValue(m_cash_discount_subaccount));
    }
    if (m_customer_ledger_account.isSet()) {
        obj.insert(QString("customerLedgerAccount"), ::OpenAPI::toJsonValue(m_customer_ledger_account));
    }
    if (m_customer_ledger_subaccount.isSet()) {
        obj.insert(QString("customerLedgerSubaccount"), ::OpenAPI::toJsonValue(m_customer_ledger_subaccount));
    }
    if (m_discount_account.isSet()) {
        obj.insert(QString("discountAccount"), ::OpenAPI::toJsonValue(m_discount_account));
    }
    if (m_discount_subaccount.isSet()) {
        obj.insert(QString("discountSubaccount"), ::OpenAPI::toJsonValue(m_discount_subaccount));
    }
    if (m_freight_account.isSet()) {
        obj.insert(QString("freightAccount"), ::OpenAPI::toJsonValue(m_freight_account));
    }
    if (m_freight_subaccount.isSet()) {
        obj.insert(QString("freightSubaccount"), ::OpenAPI::toJsonValue(m_freight_subaccount));
    }
    if (m_prepayment_account.isSet()) {
        obj.insert(QString("prepaymentAccount"), ::OpenAPI::toJsonValue(m_prepayment_account));
    }
    if (m_prepayment_subaccount.isSet()) {
        obj.insert(QString("prepaymentSubaccount"), ::OpenAPI::toJsonValue(m_prepayment_subaccount));
    }
    if (m_sales_account.isSet()) {
        obj.insert(QString("salesAccount"), ::OpenAPI::toJsonValue(m_sales_account));
    }
    if (m_sales_eu_account.isSet()) {
        obj.insert(QString("salesEuAccount"), ::OpenAPI::toJsonValue(m_sales_eu_account));
    }
    if (m_sales_export_account.isSet()) {
        obj.insert(QString("salesExportAccount"), ::OpenAPI::toJsonValue(m_sales_export_account));
    }
    if (m_sales_non_taxable_account.isSet()) {
        obj.insert(QString("salesNonTaxableAccount"), ::OpenAPI::toJsonValue(m_sales_non_taxable_account));
    }
    if (m_sales_subaccount.isSet()) {
        obj.insert(QString("salesSubaccount"), ::OpenAPI::toJsonValue(m_sales_subaccount));
    }
    return obj;
}

OAIAccountNumberTypeDescriptionDto OAIGlAccountsInCustomerDto::getCashDiscountAccount() const {
    return m_cash_discount_account;
}
void OAIGlAccountsInCustomerDto::setCashDiscountAccount(const OAIAccountNumberTypeDescriptionDto &cash_discount_account) {
    m_cash_discount_account = cash_discount_account;
    m_cash_discount_account_isSet = true;
}

bool OAIGlAccountsInCustomerDto::is_cash_discount_account_Set() const{
    return m_cash_discount_account_isSet;
}

bool OAIGlAccountsInCustomerDto::is_cash_discount_account_Valid() const{
    return m_cash_discount_account_isValid;
}

OAISubAccountDto OAIGlAccountsInCustomerDto::getCashDiscountSubaccount() const {
    return m_cash_discount_subaccount;
}
void OAIGlAccountsInCustomerDto::setCashDiscountSubaccount(const OAISubAccountDto &cash_discount_subaccount) {
    m_cash_discount_subaccount = cash_discount_subaccount;
    m_cash_discount_subaccount_isSet = true;
}

bool OAIGlAccountsInCustomerDto::is_cash_discount_subaccount_Set() const{
    return m_cash_discount_subaccount_isSet;
}

bool OAIGlAccountsInCustomerDto::is_cash_discount_subaccount_Valid() const{
    return m_cash_discount_subaccount_isValid;
}

OAIAccountNumberTypeDescriptionDto OAIGlAccountsInCustomerDto::getCustomerLedgerAccount() const {
    return m_customer_ledger_account;
}
void OAIGlAccountsInCustomerDto::setCustomerLedgerAccount(const OAIAccountNumberTypeDescriptionDto &customer_ledger_account) {
    m_customer_ledger_account = customer_ledger_account;
    m_customer_ledger_account_isSet = true;
}

bool OAIGlAccountsInCustomerDto::is_customer_ledger_account_Set() const{
    return m_customer_ledger_account_isSet;
}

bool OAIGlAccountsInCustomerDto::is_customer_ledger_account_Valid() const{
    return m_customer_ledger_account_isValid;
}

OAISubAccountDto OAIGlAccountsInCustomerDto::getCustomerLedgerSubaccount() const {
    return m_customer_ledger_subaccount;
}
void OAIGlAccountsInCustomerDto::setCustomerLedgerSubaccount(const OAISubAccountDto &customer_ledger_subaccount) {
    m_customer_ledger_subaccount = customer_ledger_subaccount;
    m_customer_ledger_subaccount_isSet = true;
}

bool OAIGlAccountsInCustomerDto::is_customer_ledger_subaccount_Set() const{
    return m_customer_ledger_subaccount_isSet;
}

bool OAIGlAccountsInCustomerDto::is_customer_ledger_subaccount_Valid() const{
    return m_customer_ledger_subaccount_isValid;
}

OAIAccountNumberTypeDescriptionDto OAIGlAccountsInCustomerDto::getDiscountAccount() const {
    return m_discount_account;
}
void OAIGlAccountsInCustomerDto::setDiscountAccount(const OAIAccountNumberTypeDescriptionDto &discount_account) {
    m_discount_account = discount_account;
    m_discount_account_isSet = true;
}

bool OAIGlAccountsInCustomerDto::is_discount_account_Set() const{
    return m_discount_account_isSet;
}

bool OAIGlAccountsInCustomerDto::is_discount_account_Valid() const{
    return m_discount_account_isValid;
}

OAISubAccountDto OAIGlAccountsInCustomerDto::getDiscountSubaccount() const {
    return m_discount_subaccount;
}
void OAIGlAccountsInCustomerDto::setDiscountSubaccount(const OAISubAccountDto &discount_subaccount) {
    m_discount_subaccount = discount_subaccount;
    m_discount_subaccount_isSet = true;
}

bool OAIGlAccountsInCustomerDto::is_discount_subaccount_Set() const{
    return m_discount_subaccount_isSet;
}

bool OAIGlAccountsInCustomerDto::is_discount_subaccount_Valid() const{
    return m_discount_subaccount_isValid;
}

OAIAccountNumberTypeDescriptionDto OAIGlAccountsInCustomerDto::getFreightAccount() const {
    return m_freight_account;
}
void OAIGlAccountsInCustomerDto::setFreightAccount(const OAIAccountNumberTypeDescriptionDto &freight_account) {
    m_freight_account = freight_account;
    m_freight_account_isSet = true;
}

bool OAIGlAccountsInCustomerDto::is_freight_account_Set() const{
    return m_freight_account_isSet;
}

bool OAIGlAccountsInCustomerDto::is_freight_account_Valid() const{
    return m_freight_account_isValid;
}

OAISubAccountDto OAIGlAccountsInCustomerDto::getFreightSubaccount() const {
    return m_freight_subaccount;
}
void OAIGlAccountsInCustomerDto::setFreightSubaccount(const OAISubAccountDto &freight_subaccount) {
    m_freight_subaccount = freight_subaccount;
    m_freight_subaccount_isSet = true;
}

bool OAIGlAccountsInCustomerDto::is_freight_subaccount_Set() const{
    return m_freight_subaccount_isSet;
}

bool OAIGlAccountsInCustomerDto::is_freight_subaccount_Valid() const{
    return m_freight_subaccount_isValid;
}

OAIAccountNumberTypeDescriptionDto OAIGlAccountsInCustomerDto::getPrepaymentAccount() const {
    return m_prepayment_account;
}
void OAIGlAccountsInCustomerDto::setPrepaymentAccount(const OAIAccountNumberTypeDescriptionDto &prepayment_account) {
    m_prepayment_account = prepayment_account;
    m_prepayment_account_isSet = true;
}

bool OAIGlAccountsInCustomerDto::is_prepayment_account_Set() const{
    return m_prepayment_account_isSet;
}

bool OAIGlAccountsInCustomerDto::is_prepayment_account_Valid() const{
    return m_prepayment_account_isValid;
}

OAISubAccountDto OAIGlAccountsInCustomerDto::getPrepaymentSubaccount() const {
    return m_prepayment_subaccount;
}
void OAIGlAccountsInCustomerDto::setPrepaymentSubaccount(const OAISubAccountDto &prepayment_subaccount) {
    m_prepayment_subaccount = prepayment_subaccount;
    m_prepayment_subaccount_isSet = true;
}

bool OAIGlAccountsInCustomerDto::is_prepayment_subaccount_Set() const{
    return m_prepayment_subaccount_isSet;
}

bool OAIGlAccountsInCustomerDto::is_prepayment_subaccount_Valid() const{
    return m_prepayment_subaccount_isValid;
}

OAIAccountNumberTypeDescriptionDto OAIGlAccountsInCustomerDto::getSalesAccount() const {
    return m_sales_account;
}
void OAIGlAccountsInCustomerDto::setSalesAccount(const OAIAccountNumberTypeDescriptionDto &sales_account) {
    m_sales_account = sales_account;
    m_sales_account_isSet = true;
}

bool OAIGlAccountsInCustomerDto::is_sales_account_Set() const{
    return m_sales_account_isSet;
}

bool OAIGlAccountsInCustomerDto::is_sales_account_Valid() const{
    return m_sales_account_isValid;
}

OAIAccountNumberTypeDescriptionDto OAIGlAccountsInCustomerDto::getSalesEuAccount() const {
    return m_sales_eu_account;
}
void OAIGlAccountsInCustomerDto::setSalesEuAccount(const OAIAccountNumberTypeDescriptionDto &sales_eu_account) {
    m_sales_eu_account = sales_eu_account;
    m_sales_eu_account_isSet = true;
}

bool OAIGlAccountsInCustomerDto::is_sales_eu_account_Set() const{
    return m_sales_eu_account_isSet;
}

bool OAIGlAccountsInCustomerDto::is_sales_eu_account_Valid() const{
    return m_sales_eu_account_isValid;
}

OAIAccountNumberTypeDescriptionDto OAIGlAccountsInCustomerDto::getSalesExportAccount() const {
    return m_sales_export_account;
}
void OAIGlAccountsInCustomerDto::setSalesExportAccount(const OAIAccountNumberTypeDescriptionDto &sales_export_account) {
    m_sales_export_account = sales_export_account;
    m_sales_export_account_isSet = true;
}

bool OAIGlAccountsInCustomerDto::is_sales_export_account_Set() const{
    return m_sales_export_account_isSet;
}

bool OAIGlAccountsInCustomerDto::is_sales_export_account_Valid() const{
    return m_sales_export_account_isValid;
}

OAIAccountNumberTypeDescriptionDto OAIGlAccountsInCustomerDto::getSalesNonTaxableAccount() const {
    return m_sales_non_taxable_account;
}
void OAIGlAccountsInCustomerDto::setSalesNonTaxableAccount(const OAIAccountNumberTypeDescriptionDto &sales_non_taxable_account) {
    m_sales_non_taxable_account = sales_non_taxable_account;
    m_sales_non_taxable_account_isSet = true;
}

bool OAIGlAccountsInCustomerDto::is_sales_non_taxable_account_Set() const{
    return m_sales_non_taxable_account_isSet;
}

bool OAIGlAccountsInCustomerDto::is_sales_non_taxable_account_Valid() const{
    return m_sales_non_taxable_account_isValid;
}

OAISubAccountDto OAIGlAccountsInCustomerDto::getSalesSubaccount() const {
    return m_sales_subaccount;
}
void OAIGlAccountsInCustomerDto::setSalesSubaccount(const OAISubAccountDto &sales_subaccount) {
    m_sales_subaccount = sales_subaccount;
    m_sales_subaccount_isSet = true;
}

bool OAIGlAccountsInCustomerDto::is_sales_subaccount_Set() const{
    return m_sales_subaccount_isSet;
}

bool OAIGlAccountsInCustomerDto::is_sales_subaccount_Valid() const{
    return m_sales_subaccount_isValid;
}

bool OAIGlAccountsInCustomerDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cash_discount_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_discount_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_ledger_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_ledger_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prepayment_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prepayment_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_eu_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_export_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_non_taxable_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlAccountsInCustomerDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
