/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISalesOrderBasicV2Api_H
#define OAI_OAISalesOrderBasicV2Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAICreateShipmentActionDto.h"
#include "OAICreateShipmentActionResultDto.h"
#include "OAIObject.h"
#include "OAISalesOrderBasicUpdateDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISalesOrderBasicV2Api : public QObject {
    Q_OBJECT

public:
    OAISalesOrderBasicV2Api(const int timeOut = 0);
    ~OAISalesOrderBasicV2Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  order_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    Q_DECL_DEPRECATED virtual void salesOrderBasicV2CreateHeaderAttachmentByorderNumber(const QString &order_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_number QString [required]
    * @param[in]  order_type QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderBasicV2CreateHeaderAttachmentByorderNumberorderType(const QString &order_number, const QString &order_type, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_number QString [required]
    * @param[in]  line_number qint32 [required]
    * @param[in]  erp_api_background QString [optional]
    */
    Q_DECL_DEPRECATED virtual void salesOrderBasicV2CreateLineAttachmentByorderNumberlineNumber(const QString &order_number, const qint32 &line_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_number QString [required]
    * @param[in]  order_type QString [required]
    * @param[in]  line_number qint32 [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderBasicV2CreateLineAttachmentByorderNumberorderTypelineNumber(const QString &order_number, const QString &order_type, const qint32 &line_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sale_order_number QString [required]
    * @param[in]  oai_create_shipment_action_dto OAICreateShipmentActionDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderBasicV2CreateShipmentActionBysaleOrderNumber(const QString &sale_order_number, const OAICreateShipmentActionDto &oai_create_shipment_action_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_sales_order_basic_update_dto OAISalesOrderBasicUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderBasicV2Post(const OAISalesOrderBasicUpdateDto &oai_sales_order_basic_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void salesOrderBasicV2CreateHeaderAttachmentByorderNumberCallback(OAIHttpRequestWorker *worker);
    void salesOrderBasicV2CreateHeaderAttachmentByorderNumberorderTypeCallback(OAIHttpRequestWorker *worker);
    void salesOrderBasicV2CreateLineAttachmentByorderNumberlineNumberCallback(OAIHttpRequestWorker *worker);
    void salesOrderBasicV2CreateLineAttachmentByorderNumberorderTypelineNumberCallback(OAIHttpRequestWorker *worker);
    void salesOrderBasicV2CreateShipmentActionBysaleOrderNumberCallback(OAIHttpRequestWorker *worker);
    void salesOrderBasicV2PostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void salesOrderBasicV2CreateHeaderAttachmentByorderNumberSignal(OAIObject summary);
    void salesOrderBasicV2CreateHeaderAttachmentByorderNumberorderTypeSignal(OAIObject summary);
    void salesOrderBasicV2CreateLineAttachmentByorderNumberlineNumberSignal(OAIObject summary);
    void salesOrderBasicV2CreateLineAttachmentByorderNumberorderTypelineNumberSignal(OAIObject summary);
    void salesOrderBasicV2CreateShipmentActionBysaleOrderNumberSignal(OAIBackgroundApiAcceptedDto summary);
    void salesOrderBasicV2PostSignal(OAIObject summary);


    void salesOrderBasicV2CreateHeaderAttachmentByorderNumberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesOrderBasicV2CreateHeaderAttachmentByorderNumberorderTypeSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesOrderBasicV2CreateLineAttachmentByorderNumberlineNumberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesOrderBasicV2CreateLineAttachmentByorderNumberorderTypelineNumberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesOrderBasicV2CreateShipmentActionBysaleOrderNumberSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);
    void salesOrderBasicV2PostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use salesOrderBasicV2CreateHeaderAttachmentByorderNumberSignalError() instead")
    void salesOrderBasicV2CreateHeaderAttachmentByorderNumberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicV2CreateHeaderAttachmentByorderNumberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicV2CreateHeaderAttachmentByorderNumberorderTypeSignalError() instead")
    void salesOrderBasicV2CreateHeaderAttachmentByorderNumberorderTypeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicV2CreateHeaderAttachmentByorderNumberorderTypeSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicV2CreateLineAttachmentByorderNumberlineNumberSignalError() instead")
    void salesOrderBasicV2CreateLineAttachmentByorderNumberlineNumberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicV2CreateLineAttachmentByorderNumberlineNumberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicV2CreateLineAttachmentByorderNumberorderTypelineNumberSignalError() instead")
    void salesOrderBasicV2CreateLineAttachmentByorderNumberorderTypelineNumberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicV2CreateLineAttachmentByorderNumberorderTypelineNumberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicV2CreateShipmentActionBysaleOrderNumberSignalError() instead")
    void salesOrderBasicV2CreateShipmentActionBysaleOrderNumberSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicV2CreateShipmentActionBysaleOrderNumberSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicV2PostSignalError() instead")
    void salesOrderBasicV2PostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicV2PostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use salesOrderBasicV2CreateHeaderAttachmentByorderNumberSignalErrorFull() instead")
    void salesOrderBasicV2CreateHeaderAttachmentByorderNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicV2CreateHeaderAttachmentByorderNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicV2CreateHeaderAttachmentByorderNumberorderTypeSignalErrorFull() instead")
    void salesOrderBasicV2CreateHeaderAttachmentByorderNumberorderTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicV2CreateHeaderAttachmentByorderNumberorderTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicV2CreateLineAttachmentByorderNumberlineNumberSignalErrorFull() instead")
    void salesOrderBasicV2CreateLineAttachmentByorderNumberlineNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicV2CreateLineAttachmentByorderNumberlineNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicV2CreateLineAttachmentByorderNumberorderTypelineNumberSignalErrorFull() instead")
    void salesOrderBasicV2CreateLineAttachmentByorderNumberorderTypelineNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicV2CreateLineAttachmentByorderNumberorderTypelineNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicV2CreateShipmentActionBysaleOrderNumberSignalErrorFull() instead")
    void salesOrderBasicV2CreateShipmentActionBysaleOrderNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicV2CreateShipmentActionBysaleOrderNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderBasicV2PostSignalErrorFull() instead")
    void salesOrderBasicV2PostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderBasicV2PostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
