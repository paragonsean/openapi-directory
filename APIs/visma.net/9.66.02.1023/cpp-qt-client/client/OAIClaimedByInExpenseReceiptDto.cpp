/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClaimedByInExpenseReceiptDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClaimedByInExpenseReceiptDto::OAIClaimedByInExpenseReceiptDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClaimedByInExpenseReceiptDto::OAIClaimedByInExpenseReceiptDto() {
    this->initializeModel();
}

OAIClaimedByInExpenseReceiptDto::~OAIClaimedByInExpenseReceiptDto() {}

void OAIClaimedByInExpenseReceiptDto::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_calendar_id_isSet = false;
    m_calendar_id_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_department_isSet = false;
    m_department_isValid = false;

    m_employee_class_isSet = false;
    m_employee_class_isValid = false;

    m_employee_id_isSet = false;
    m_employee_id_isValid = false;

    m_employee_login_isSet = false;
    m_employee_login_isValid = false;

    m_employee_name_isSet = false;
    m_employee_name_isValid = false;

    m_employee_number_isSet = false;
    m_employee_number_isValid = false;

    m_employee_user_id_isSet = false;
    m_employee_user_id_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_work_group_description_isSet = false;
    m_work_group_description_isValid = false;
}

void OAIClaimedByInExpenseReceiptDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClaimedByInExpenseReceiptDto::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_calendar_id_isValid = ::OpenAPI::fromJsonValue(m_calendar_id, json[QString("calendarID")]);
    m_calendar_id_isSet = !json[QString("calendarID")].isNull() && m_calendar_id_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_department_isValid = ::OpenAPI::fromJsonValue(m_department, json[QString("department")]);
    m_department_isSet = !json[QString("department")].isNull() && m_department_isValid;

    m_employee_class_isValid = ::OpenAPI::fromJsonValue(m_employee_class, json[QString("employeeClass")]);
    m_employee_class_isSet = !json[QString("employeeClass")].isNull() && m_employee_class_isValid;

    m_employee_id_isValid = ::OpenAPI::fromJsonValue(m_employee_id, json[QString("employeeId")]);
    m_employee_id_isSet = !json[QString("employeeId")].isNull() && m_employee_id_isValid;

    m_employee_login_isValid = ::OpenAPI::fromJsonValue(m_employee_login, json[QString("employeeLogin")]);
    m_employee_login_isSet = !json[QString("employeeLogin")].isNull() && m_employee_login_isValid;

    m_employee_name_isValid = ::OpenAPI::fromJsonValue(m_employee_name, json[QString("employeeName")]);
    m_employee_name_isSet = !json[QString("employeeName")].isNull() && m_employee_name_isValid;

    m_employee_number_isValid = ::OpenAPI::fromJsonValue(m_employee_number, json[QString("employeeNumber")]);
    m_employee_number_isSet = !json[QString("employeeNumber")].isNull() && m_employee_number_isValid;

    m_employee_user_id_isValid = ::OpenAPI::fromJsonValue(m_employee_user_id, json[QString("employeeUserId")]);
    m_employee_user_id_isSet = !json[QString("employeeUserId")].isNull() && m_employee_user_id_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_work_group_description_isValid = ::OpenAPI::fromJsonValue(m_work_group_description, json[QString("workGroupDescription")]);
    m_work_group_description_isSet = !json[QString("workGroupDescription")].isNull() && m_work_group_description_isValid;
}

QString OAIClaimedByInExpenseReceiptDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClaimedByInExpenseReceiptDto::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_calendar_id_isSet) {
        obj.insert(QString("calendarID"), ::OpenAPI::toJsonValue(m_calendar_id));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_department_isSet) {
        obj.insert(QString("department"), ::OpenAPI::toJsonValue(m_department));
    }
    if (m_employee_class.isSet()) {
        obj.insert(QString("employeeClass"), ::OpenAPI::toJsonValue(m_employee_class));
    }
    if (m_employee_id_isSet) {
        obj.insert(QString("employeeId"), ::OpenAPI::toJsonValue(m_employee_id));
    }
    if (m_employee_login_isSet) {
        obj.insert(QString("employeeLogin"), ::OpenAPI::toJsonValue(m_employee_login));
    }
    if (m_employee_name_isSet) {
        obj.insert(QString("employeeName"), ::OpenAPI::toJsonValue(m_employee_name));
    }
    if (m_employee_number_isSet) {
        obj.insert(QString("employeeNumber"), ::OpenAPI::toJsonValue(m_employee_number));
    }
    if (m_employee_user_id_isSet) {
        obj.insert(QString("employeeUserId"), ::OpenAPI::toJsonValue(m_employee_user_id));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_work_group_description.size() > 0) {
        obj.insert(QString("workGroupDescription"), ::OpenAPI::toJsonValue(m_work_group_description));
    }
    return obj;
}

OAIAddressInEmployeeDto OAIClaimedByInExpenseReceiptDto::getAddress() const {
    return m_address;
}
void OAIClaimedByInExpenseReceiptDto::setAddress(const OAIAddressInEmployeeDto &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIClaimedByInExpenseReceiptDto::is_address_Set() const{
    return m_address_isSet;
}

bool OAIClaimedByInExpenseReceiptDto::is_address_Valid() const{
    return m_address_isValid;
}

OAIBranchNumberDto OAIClaimedByInExpenseReceiptDto::getBranch() const {
    return m_branch;
}
void OAIClaimedByInExpenseReceiptDto::setBranch(const OAIBranchNumberDto &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIClaimedByInExpenseReceiptDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIClaimedByInExpenseReceiptDto::is_branch_Valid() const{
    return m_branch_isValid;
}

QString OAIClaimedByInExpenseReceiptDto::getCalendarId() const {
    return m_calendar_id;
}
void OAIClaimedByInExpenseReceiptDto::setCalendarId(const QString &calendar_id) {
    m_calendar_id = calendar_id;
    m_calendar_id_isSet = true;
}

bool OAIClaimedByInExpenseReceiptDto::is_calendar_id_Set() const{
    return m_calendar_id_isSet;
}

bool OAIClaimedByInExpenseReceiptDto::is_calendar_id_Valid() const{
    return m_calendar_id_isValid;
}

OAIContactInEmployeeDto OAIClaimedByInExpenseReceiptDto::getContact() const {
    return m_contact;
}
void OAIClaimedByInExpenseReceiptDto::setContact(const OAIContactInEmployeeDto &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIClaimedByInExpenseReceiptDto::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIClaimedByInExpenseReceiptDto::is_contact_Valid() const{
    return m_contact_isValid;
}

QString OAIClaimedByInExpenseReceiptDto::getDepartment() const {
    return m_department;
}
void OAIClaimedByInExpenseReceiptDto::setDepartment(const QString &department) {
    m_department = department;
    m_department_isSet = true;
}

bool OAIClaimedByInExpenseReceiptDto::is_department_Set() const{
    return m_department_isSet;
}

bool OAIClaimedByInExpenseReceiptDto::is_department_Valid() const{
    return m_department_isValid;
}

OAIEmployeeClassInEmployeeDto OAIClaimedByInExpenseReceiptDto::getEmployeeClass() const {
    return m_employee_class;
}
void OAIClaimedByInExpenseReceiptDto::setEmployeeClass(const OAIEmployeeClassInEmployeeDto &employee_class) {
    m_employee_class = employee_class;
    m_employee_class_isSet = true;
}

bool OAIClaimedByInExpenseReceiptDto::is_employee_class_Set() const{
    return m_employee_class_isSet;
}

bool OAIClaimedByInExpenseReceiptDto::is_employee_class_Valid() const{
    return m_employee_class_isValid;
}

qint32 OAIClaimedByInExpenseReceiptDto::getEmployeeId() const {
    return m_employee_id;
}
void OAIClaimedByInExpenseReceiptDto::setEmployeeId(const qint32 &employee_id) {
    m_employee_id = employee_id;
    m_employee_id_isSet = true;
}

bool OAIClaimedByInExpenseReceiptDto::is_employee_id_Set() const{
    return m_employee_id_isSet;
}

bool OAIClaimedByInExpenseReceiptDto::is_employee_id_Valid() const{
    return m_employee_id_isValid;
}

QString OAIClaimedByInExpenseReceiptDto::getEmployeeLogin() const {
    return m_employee_login;
}
void OAIClaimedByInExpenseReceiptDto::setEmployeeLogin(const QString &employee_login) {
    m_employee_login = employee_login;
    m_employee_login_isSet = true;
}

bool OAIClaimedByInExpenseReceiptDto::is_employee_login_Set() const{
    return m_employee_login_isSet;
}

bool OAIClaimedByInExpenseReceiptDto::is_employee_login_Valid() const{
    return m_employee_login_isValid;
}

QString OAIClaimedByInExpenseReceiptDto::getEmployeeName() const {
    return m_employee_name;
}
void OAIClaimedByInExpenseReceiptDto::setEmployeeName(const QString &employee_name) {
    m_employee_name = employee_name;
    m_employee_name_isSet = true;
}

bool OAIClaimedByInExpenseReceiptDto::is_employee_name_Set() const{
    return m_employee_name_isSet;
}

bool OAIClaimedByInExpenseReceiptDto::is_employee_name_Valid() const{
    return m_employee_name_isValid;
}

QString OAIClaimedByInExpenseReceiptDto::getEmployeeNumber() const {
    return m_employee_number;
}
void OAIClaimedByInExpenseReceiptDto::setEmployeeNumber(const QString &employee_number) {
    m_employee_number = employee_number;
    m_employee_number_isSet = true;
}

bool OAIClaimedByInExpenseReceiptDto::is_employee_number_Set() const{
    return m_employee_number_isSet;
}

bool OAIClaimedByInExpenseReceiptDto::is_employee_number_Valid() const{
    return m_employee_number_isValid;
}

QString OAIClaimedByInExpenseReceiptDto::getEmployeeUserId() const {
    return m_employee_user_id;
}
void OAIClaimedByInExpenseReceiptDto::setEmployeeUserId(const QString &employee_user_id) {
    m_employee_user_id = employee_user_id;
    m_employee_user_id_isSet = true;
}

bool OAIClaimedByInExpenseReceiptDto::is_employee_user_id_Set() const{
    return m_employee_user_id_isSet;
}

bool OAIClaimedByInExpenseReceiptDto::is_employee_user_id_Valid() const{
    return m_employee_user_id_isValid;
}

QString OAIClaimedByInExpenseReceiptDto::getErrorInfo() const {
    return m_error_info;
}
void OAIClaimedByInExpenseReceiptDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIClaimedByInExpenseReceiptDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIClaimedByInExpenseReceiptDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

QDateTime OAIClaimedByInExpenseReceiptDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIClaimedByInExpenseReceiptDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIClaimedByInExpenseReceiptDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIClaimedByInExpenseReceiptDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAIMetadataDto OAIClaimedByInExpenseReceiptDto::getMetadata() const {
    return m_metadata;
}
void OAIClaimedByInExpenseReceiptDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIClaimedByInExpenseReceiptDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIClaimedByInExpenseReceiptDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIClaimedByInExpenseReceiptDto::getStatus() const {
    return m_status;
}
void OAIClaimedByInExpenseReceiptDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIClaimedByInExpenseReceiptDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIClaimedByInExpenseReceiptDto::is_status_Valid() const{
    return m_status_isValid;
}

QList<QString> OAIClaimedByInExpenseReceiptDto::getWorkGroupDescription() const {
    return m_work_group_description;
}
void OAIClaimedByInExpenseReceiptDto::setWorkGroupDescription(const QList<QString> &work_group_description) {
    m_work_group_description = work_group_description;
    m_work_group_description_isSet = true;
}

bool OAIClaimedByInExpenseReceiptDto::is_work_group_description_Set() const{
    return m_work_group_description_isSet;
}

bool OAIClaimedByInExpenseReceiptDto::is_work_group_description_Valid() const{
    return m_work_group_description_isValid;
}

bool OAIClaimedByInExpenseReceiptDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_calendar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_department_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_group_description.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClaimedByInExpenseReceiptDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
