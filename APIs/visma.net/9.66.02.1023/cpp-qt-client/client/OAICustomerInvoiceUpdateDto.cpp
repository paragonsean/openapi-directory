/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerInvoiceUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerInvoiceUpdateDto::OAICustomerInvoiceUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerInvoiceUpdateDto::OAICustomerInvoiceUpdateDto() {
    this->initializeModel();
}

OAICustomerInvoiceUpdateDto::~OAICustomerInvoiceUpdateDto() {}

void OAICustomerInvoiceUpdateDto::initializeModel() {

    m_accounting_cost_ref_isSet = false;
    m_accounting_cost_ref_isValid = false;

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_cash_account_isSet = false;
    m_cash_account_isValid = false;

    m_cash_discount_date_isSet = false;
    m_cash_discount_date_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_contract_doc_ref_isSet = false;
    m_contract_doc_ref_isValid = false;

    m_credit_terms_id_isSet = false;
    m_credit_terms_id_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_customer_number_isSet = false;
    m_customer_number_isValid = false;

    m_customer_project_isSet = false;
    m_customer_project_isValid = false;

    m_customer_ref_number_isSet = false;
    m_customer_ref_number_isValid = false;

    m_customer_vat_zone_id_isSet = false;
    m_customer_vat_zone_id_isValid = false;

    m_document_date_isSet = false;
    m_document_date_isValid = false;

    m_document_due_date_isSet = false;
    m_document_due_date_isValid = false;

    m_domestic_services_deductible_document_isSet = false;
    m_domestic_services_deductible_document_isValid = false;

    m_dont_email_isSet = false;
    m_dont_email_isValid = false;

    m_dont_print_isSet = false;
    m_dont_print_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_external_reference_isSet = false;
    m_external_reference_isValid = false;

    m_financial_period_isSet = false;
    m_financial_period_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_invoice_contact_isSet = false;
    m_invoice_contact_isValid = false;

    m_invoice_lines_isSet = false;
    m_invoice_lines_isValid = false;

    m_invoice_text_isSet = false;
    m_invoice_text_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_orig_invoice_date_isSet = false;
    m_orig_invoice_date_isValid = false;

    m_originator_doc_ref_isSet = false;
    m_originator_doc_ref_isValid = false;

    m_override_number_series_isSet = false;
    m_override_number_series_isValid = false;

    m_payment_method_id_isSet = false;
    m_payment_method_id_isValid = false;

    m_payment_reference_isSet = false;
    m_payment_reference_isValid = false;

    m_post_period_isSet = false;
    m_post_period_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_reference_number_isSet = false;
    m_reference_number_isValid = false;

    m_rot_rut_details_isSet = false;
    m_rot_rut_details_isValid = false;

    m_sales_person_id_isSet = false;
    m_sales_person_id_isValid = false;

    m_salesperson_isSet = false;
    m_salesperson_isValid = false;

    m_send_to_auto_invoice_isSet = false;
    m_send_to_auto_invoice_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_tax_detail_lines_isSet = false;
    m_tax_detail_lines_isValid = false;
}

void OAICustomerInvoiceUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerInvoiceUpdateDto::fromJsonObject(QJsonObject json) {

    m_accounting_cost_ref_isValid = ::OpenAPI::fromJsonValue(m_accounting_cost_ref, json[QString("accountingCostRef")]);
    m_accounting_cost_ref_isSet = !json[QString("accountingCostRef")].isNull() && m_accounting_cost_ref_isValid;

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billingAddress")]);
    m_billing_address_isSet = !json[QString("billingAddress")].isNull() && m_billing_address_isValid;

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_cash_account_isValid = ::OpenAPI::fromJsonValue(m_cash_account, json[QString("cashAccount")]);
    m_cash_account_isSet = !json[QString("cashAccount")].isNull() && m_cash_account_isValid;

    m_cash_discount_date_isValid = ::OpenAPI::fromJsonValue(m_cash_discount_date, json[QString("cashDiscountDate")]);
    m_cash_discount_date_isSet = !json[QString("cashDiscountDate")].isNull() && m_cash_discount_date_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_contract_doc_ref_isValid = ::OpenAPI::fromJsonValue(m_contract_doc_ref, json[QString("contractDocRef")]);
    m_contract_doc_ref_isSet = !json[QString("contractDocRef")].isNull() && m_contract_doc_ref_isValid;

    m_credit_terms_id_isValid = ::OpenAPI::fromJsonValue(m_credit_terms_id, json[QString("creditTermsId")]);
    m_credit_terms_id_isSet = !json[QString("creditTermsId")].isNull() && m_credit_terms_id_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_customer_number_isValid = ::OpenAPI::fromJsonValue(m_customer_number, json[QString("customerNumber")]);
    m_customer_number_isSet = !json[QString("customerNumber")].isNull() && m_customer_number_isValid;

    m_customer_project_isValid = ::OpenAPI::fromJsonValue(m_customer_project, json[QString("customerProject")]);
    m_customer_project_isSet = !json[QString("customerProject")].isNull() && m_customer_project_isValid;

    m_customer_ref_number_isValid = ::OpenAPI::fromJsonValue(m_customer_ref_number, json[QString("customerRefNumber")]);
    m_customer_ref_number_isSet = !json[QString("customerRefNumber")].isNull() && m_customer_ref_number_isValid;

    m_customer_vat_zone_id_isValid = ::OpenAPI::fromJsonValue(m_customer_vat_zone_id, json[QString("customerVatZoneId")]);
    m_customer_vat_zone_id_isSet = !json[QString("customerVatZoneId")].isNull() && m_customer_vat_zone_id_isValid;

    m_document_date_isValid = ::OpenAPI::fromJsonValue(m_document_date, json[QString("documentDate")]);
    m_document_date_isSet = !json[QString("documentDate")].isNull() && m_document_date_isValid;

    m_document_due_date_isValid = ::OpenAPI::fromJsonValue(m_document_due_date, json[QString("documentDueDate")]);
    m_document_due_date_isSet = !json[QString("documentDueDate")].isNull() && m_document_due_date_isValid;

    m_domestic_services_deductible_document_isValid = ::OpenAPI::fromJsonValue(m_domestic_services_deductible_document, json[QString("domesticServicesDeductibleDocument")]);
    m_domestic_services_deductible_document_isSet = !json[QString("domesticServicesDeductibleDocument")].isNull() && m_domestic_services_deductible_document_isValid;

    m_dont_email_isValid = ::OpenAPI::fromJsonValue(m_dont_email, json[QString("dontEmail")]);
    m_dont_email_isSet = !json[QString("dontEmail")].isNull() && m_dont_email_isValid;

    m_dont_print_isValid = ::OpenAPI::fromJsonValue(m_dont_print, json[QString("dontPrint")]);
    m_dont_print_isSet = !json[QString("dontPrint")].isNull() && m_dont_print_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("exchangeRate")]);
    m_exchange_rate_isSet = !json[QString("exchangeRate")].isNull() && m_exchange_rate_isValid;

    m_external_reference_isValid = ::OpenAPI::fromJsonValue(m_external_reference, json[QString("externalReference")]);
    m_external_reference_isSet = !json[QString("externalReference")].isNull() && m_external_reference_isValid;

    m_financial_period_isValid = ::OpenAPI::fromJsonValue(m_financial_period, json[QString("financialPeriod")]);
    m_financial_period_isSet = !json[QString("financialPeriod")].isNull() && m_financial_period_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_invoice_contact_isValid = ::OpenAPI::fromJsonValue(m_invoice_contact, json[QString("invoiceContact")]);
    m_invoice_contact_isSet = !json[QString("invoiceContact")].isNull() && m_invoice_contact_isValid;

    m_invoice_lines_isValid = ::OpenAPI::fromJsonValue(m_invoice_lines, json[QString("invoiceLines")]);
    m_invoice_lines_isSet = !json[QString("invoiceLines")].isNull() && m_invoice_lines_isValid;

    m_invoice_text_isValid = ::OpenAPI::fromJsonValue(m_invoice_text, json[QString("invoiceText")]);
    m_invoice_text_isSet = !json[QString("invoiceText")].isNull() && m_invoice_text_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_orig_invoice_date_isValid = ::OpenAPI::fromJsonValue(m_orig_invoice_date, json[QString("origInvoiceDate")]);
    m_orig_invoice_date_isSet = !json[QString("origInvoiceDate")].isNull() && m_orig_invoice_date_isValid;

    m_originator_doc_ref_isValid = ::OpenAPI::fromJsonValue(m_originator_doc_ref, json[QString("originatorDocRef")]);
    m_originator_doc_ref_isSet = !json[QString("originatorDocRef")].isNull() && m_originator_doc_ref_isValid;

    m_override_number_series_isValid = ::OpenAPI::fromJsonValue(m_override_number_series, json[QString("overrideNumberSeries")]);
    m_override_number_series_isSet = !json[QString("overrideNumberSeries")].isNull() && m_override_number_series_isValid;

    m_payment_method_id_isValid = ::OpenAPI::fromJsonValue(m_payment_method_id, json[QString("paymentMethodId")]);
    m_payment_method_id_isSet = !json[QString("paymentMethodId")].isNull() && m_payment_method_id_isValid;

    m_payment_reference_isValid = ::OpenAPI::fromJsonValue(m_payment_reference, json[QString("paymentReference")]);
    m_payment_reference_isSet = !json[QString("paymentReference")].isNull() && m_payment_reference_isValid;

    m_post_period_isValid = ::OpenAPI::fromJsonValue(m_post_period, json[QString("postPeriod")]);
    m_post_period_isSet = !json[QString("postPeriod")].isNull() && m_post_period_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_reference_number_isValid = ::OpenAPI::fromJsonValue(m_reference_number, json[QString("referenceNumber")]);
    m_reference_number_isSet = !json[QString("referenceNumber")].isNull() && m_reference_number_isValid;

    m_rot_rut_details_isValid = ::OpenAPI::fromJsonValue(m_rot_rut_details, json[QString("rotRutDetails")]);
    m_rot_rut_details_isSet = !json[QString("rotRutDetails")].isNull() && m_rot_rut_details_isValid;

    m_sales_person_id_isValid = ::OpenAPI::fromJsonValue(m_sales_person_id, json[QString("salesPersonID")]);
    m_sales_person_id_isSet = !json[QString("salesPersonID")].isNull() && m_sales_person_id_isValid;

    m_salesperson_isValid = ::OpenAPI::fromJsonValue(m_salesperson, json[QString("salesperson")]);
    m_salesperson_isSet = !json[QString("salesperson")].isNull() && m_salesperson_isValid;

    m_send_to_auto_invoice_isValid = ::OpenAPI::fromJsonValue(m_send_to_auto_invoice, json[QString("sendToAutoInvoice")]);
    m_send_to_auto_invoice_isSet = !json[QString("sendToAutoInvoice")].isNull() && m_send_to_auto_invoice_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_tax_detail_lines_isValid = ::OpenAPI::fromJsonValue(m_tax_detail_lines, json[QString("taxDetailLines")]);
    m_tax_detail_lines_isSet = !json[QString("taxDetailLines")].isNull() && m_tax_detail_lines_isValid;
}

QString OAICustomerInvoiceUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerInvoiceUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_accounting_cost_ref.isSet()) {
        obj.insert(QString("accountingCostRef"), ::OpenAPI::toJsonValue(m_accounting_cost_ref));
    }
    if (m_billing_address.isSet()) {
        obj.insert(QString("billingAddress"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_cash_account.isSet()) {
        obj.insert(QString("cashAccount"), ::OpenAPI::toJsonValue(m_cash_account));
    }
    if (m_cash_discount_date.isSet()) {
        obj.insert(QString("cashDiscountDate"), ::OpenAPI::toJsonValue(m_cash_discount_date));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_contract_doc_ref.isSet()) {
        obj.insert(QString("contractDocRef"), ::OpenAPI::toJsonValue(m_contract_doc_ref));
    }
    if (m_credit_terms_id.isSet()) {
        obj.insert(QString("creditTermsId"), ::OpenAPI::toJsonValue(m_credit_terms_id));
    }
    if (m_currency_id.isSet()) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_customer_number.isSet()) {
        obj.insert(QString("customerNumber"), ::OpenAPI::toJsonValue(m_customer_number));
    }
    if (m_customer_project.isSet()) {
        obj.insert(QString("customerProject"), ::OpenAPI::toJsonValue(m_customer_project));
    }
    if (m_customer_ref_number.isSet()) {
        obj.insert(QString("customerRefNumber"), ::OpenAPI::toJsonValue(m_customer_ref_number));
    }
    if (m_customer_vat_zone_id.isSet()) {
        obj.insert(QString("customerVatZoneId"), ::OpenAPI::toJsonValue(m_customer_vat_zone_id));
    }
    if (m_document_date.isSet()) {
        obj.insert(QString("documentDate"), ::OpenAPI::toJsonValue(m_document_date));
    }
    if (m_document_due_date.isSet()) {
        obj.insert(QString("documentDueDate"), ::OpenAPI::toJsonValue(m_document_due_date));
    }
    if (m_domestic_services_deductible_document.isSet()) {
        obj.insert(QString("domesticServicesDeductibleDocument"), ::OpenAPI::toJsonValue(m_domestic_services_deductible_document));
    }
    if (m_dont_email.isSet()) {
        obj.insert(QString("dontEmail"), ::OpenAPI::toJsonValue(m_dont_email));
    }
    if (m_dont_print.isSet()) {
        obj.insert(QString("dontPrint"), ::OpenAPI::toJsonValue(m_dont_print));
    }
    if (m_end_date.isSet()) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_exchange_rate.isSet()) {
        obj.insert(QString("exchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_external_reference.isSet()) {
        obj.insert(QString("externalReference"), ::OpenAPI::toJsonValue(m_external_reference));
    }
    if (m_financial_period.isSet()) {
        obj.insert(QString("financialPeriod"), ::OpenAPI::toJsonValue(m_financial_period));
    }
    if (m_hold.isSet()) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_invoice_contact.isSet()) {
        obj.insert(QString("invoiceContact"), ::OpenAPI::toJsonValue(m_invoice_contact));
    }
    if (m_invoice_lines.size() > 0) {
        obj.insert(QString("invoiceLines"), ::OpenAPI::toJsonValue(m_invoice_lines));
    }
    if (m_invoice_text.isSet()) {
        obj.insert(QString("invoiceText"), ::OpenAPI::toJsonValue(m_invoice_text));
    }
    if (m_location_id.isSet()) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_note.isSet()) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_orig_invoice_date.isSet()) {
        obj.insert(QString("origInvoiceDate"), ::OpenAPI::toJsonValue(m_orig_invoice_date));
    }
    if (m_originator_doc_ref.isSet()) {
        obj.insert(QString("originatorDocRef"), ::OpenAPI::toJsonValue(m_originator_doc_ref));
    }
    if (m_override_number_series.isSet()) {
        obj.insert(QString("overrideNumberSeries"), ::OpenAPI::toJsonValue(m_override_number_series));
    }
    if (m_payment_method_id.isSet()) {
        obj.insert(QString("paymentMethodId"), ::OpenAPI::toJsonValue(m_payment_method_id));
    }
    if (m_payment_reference.isSet()) {
        obj.insert(QString("paymentReference"), ::OpenAPI::toJsonValue(m_payment_reference));
    }
    if (m_post_period.isSet()) {
        obj.insert(QString("postPeriod"), ::OpenAPI::toJsonValue(m_post_period));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_reference_number.isSet()) {
        obj.insert(QString("referenceNumber"), ::OpenAPI::toJsonValue(m_reference_number));
    }
    if (m_rot_rut_details.isSet()) {
        obj.insert(QString("rotRutDetails"), ::OpenAPI::toJsonValue(m_rot_rut_details));
    }
    if (m_sales_person_id.isSet()) {
        obj.insert(QString("salesPersonID"), ::OpenAPI::toJsonValue(m_sales_person_id));
    }
    if (m_salesperson.isSet()) {
        obj.insert(QString("salesperson"), ::OpenAPI::toJsonValue(m_salesperson));
    }
    if (m_send_to_auto_invoice.isSet()) {
        obj.insert(QString("sendToAutoInvoice"), ::OpenAPI::toJsonValue(m_send_to_auto_invoice));
    }
    if (m_start_date.isSet()) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_tax_detail_lines.size() > 0) {
        obj.insert(QString("taxDetailLines"), ::OpenAPI::toJsonValue(m_tax_detail_lines));
    }
    return obj;
}

OAIDtoValueOfString OAICustomerInvoiceUpdateDto::getAccountingCostRef() const {
    return m_accounting_cost_ref;
}
void OAICustomerInvoiceUpdateDto::setAccountingCostRef(const OAIDtoValueOfString &accounting_cost_ref) {
    m_accounting_cost_ref = accounting_cost_ref;
    m_accounting_cost_ref_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_accounting_cost_ref_Set() const{
    return m_accounting_cost_ref_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_accounting_cost_ref_Valid() const{
    return m_accounting_cost_ref_isValid;
}

OAIDtoValueOfSalesInvoiceAddressUpdateDto OAICustomerInvoiceUpdateDto::getBillingAddress() const {
    return m_billing_address;
}
void OAICustomerInvoiceUpdateDto::setBillingAddress(const OAIDtoValueOfSalesInvoiceAddressUpdateDto &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

OAIDtoValueOfString OAICustomerInvoiceUpdateDto::getBranchNumber() const {
    return m_branch_number;
}
void OAICustomerInvoiceUpdateDto::setBranchNumber(const OAIDtoValueOfString &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

OAIDtoValueOfString OAICustomerInvoiceUpdateDto::getCashAccount() const {
    return m_cash_account;
}
void OAICustomerInvoiceUpdateDto::setCashAccount(const OAIDtoValueOfString &cash_account) {
    m_cash_account = cash_account;
    m_cash_account_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_cash_account_Set() const{
    return m_cash_account_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_cash_account_Valid() const{
    return m_cash_account_isValid;
}

OAIDtoValueOfDateTime OAICustomerInvoiceUpdateDto::getCashDiscountDate() const {
    return m_cash_discount_date;
}
void OAICustomerInvoiceUpdateDto::setCashDiscountDate(const OAIDtoValueOfDateTime &cash_discount_date) {
    m_cash_discount_date = cash_discount_date;
    m_cash_discount_date_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_cash_discount_date_Set() const{
    return m_cash_discount_date_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_cash_discount_date_Valid() const{
    return m_cash_discount_date_isValid;
}

OAIDtoValueOfNullableOfInt32 OAICustomerInvoiceUpdateDto::getContact() const {
    return m_contact;
}
void OAICustomerInvoiceUpdateDto::setContact(const OAIDtoValueOfNullableOfInt32 &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_contact_Valid() const{
    return m_contact_isValid;
}

OAIDtoValueOfString OAICustomerInvoiceUpdateDto::getContractDocRef() const {
    return m_contract_doc_ref;
}
void OAICustomerInvoiceUpdateDto::setContractDocRef(const OAIDtoValueOfString &contract_doc_ref) {
    m_contract_doc_ref = contract_doc_ref;
    m_contract_doc_ref_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_contract_doc_ref_Set() const{
    return m_contract_doc_ref_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_contract_doc_ref_Valid() const{
    return m_contract_doc_ref_isValid;
}

OAIDtoValueOfString OAICustomerInvoiceUpdateDto::getCreditTermsId() const {
    return m_credit_terms_id;
}
void OAICustomerInvoiceUpdateDto::setCreditTermsId(const OAIDtoValueOfString &credit_terms_id) {
    m_credit_terms_id = credit_terms_id;
    m_credit_terms_id_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_credit_terms_id_Set() const{
    return m_credit_terms_id_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_credit_terms_id_Valid() const{
    return m_credit_terms_id_isValid;
}

OAIDtoValueOfString OAICustomerInvoiceUpdateDto::getCurrencyId() const {
    return m_currency_id;
}
void OAICustomerInvoiceUpdateDto::setCurrencyId(const OAIDtoValueOfString &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

OAIDtoValueOfString OAICustomerInvoiceUpdateDto::getCustomerNumber() const {
    return m_customer_number;
}
void OAICustomerInvoiceUpdateDto::setCustomerNumber(const OAIDtoValueOfString &customer_number) {
    m_customer_number = customer_number;
    m_customer_number_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_customer_number_Set() const{
    return m_customer_number_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_customer_number_Valid() const{
    return m_customer_number_isValid;
}

OAIDtoValueOfString OAICustomerInvoiceUpdateDto::getCustomerProject() const {
    return m_customer_project;
}
void OAICustomerInvoiceUpdateDto::setCustomerProject(const OAIDtoValueOfString &customer_project) {
    m_customer_project = customer_project;
    m_customer_project_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_customer_project_Set() const{
    return m_customer_project_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_customer_project_Valid() const{
    return m_customer_project_isValid;
}

OAIDtoValueOfString OAICustomerInvoiceUpdateDto::getCustomerRefNumber() const {
    return m_customer_ref_number;
}
void OAICustomerInvoiceUpdateDto::setCustomerRefNumber(const OAIDtoValueOfString &customer_ref_number) {
    m_customer_ref_number = customer_ref_number;
    m_customer_ref_number_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_customer_ref_number_Set() const{
    return m_customer_ref_number_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_customer_ref_number_Valid() const{
    return m_customer_ref_number_isValid;
}

OAIDtoValueOfString OAICustomerInvoiceUpdateDto::getCustomerVatZoneId() const {
    return m_customer_vat_zone_id;
}
void OAICustomerInvoiceUpdateDto::setCustomerVatZoneId(const OAIDtoValueOfString &customer_vat_zone_id) {
    m_customer_vat_zone_id = customer_vat_zone_id;
    m_customer_vat_zone_id_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_customer_vat_zone_id_Set() const{
    return m_customer_vat_zone_id_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_customer_vat_zone_id_Valid() const{
    return m_customer_vat_zone_id_isValid;
}

OAIDtoValueOfDateTime OAICustomerInvoiceUpdateDto::getDocumentDate() const {
    return m_document_date;
}
void OAICustomerInvoiceUpdateDto::setDocumentDate(const OAIDtoValueOfDateTime &document_date) {
    m_document_date = document_date;
    m_document_date_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_document_date_Set() const{
    return m_document_date_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_document_date_Valid() const{
    return m_document_date_isValid;
}

OAIDtoValueOfDateTime OAICustomerInvoiceUpdateDto::getDocumentDueDate() const {
    return m_document_due_date;
}
void OAICustomerInvoiceUpdateDto::setDocumentDueDate(const OAIDtoValueOfDateTime &document_due_date) {
    m_document_due_date = document_due_date;
    m_document_due_date_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_document_due_date_Set() const{
    return m_document_due_date_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_document_due_date_Valid() const{
    return m_document_due_date_isValid;
}

OAIDtoValueOfNullableOfBoolean OAICustomerInvoiceUpdateDto::getDomesticServicesDeductibleDocument() const {
    return m_domestic_services_deductible_document;
}
void OAICustomerInvoiceUpdateDto::setDomesticServicesDeductibleDocument(const OAIDtoValueOfNullableOfBoolean &domestic_services_deductible_document) {
    m_domestic_services_deductible_document = domestic_services_deductible_document;
    m_domestic_services_deductible_document_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_domestic_services_deductible_document_Set() const{
    return m_domestic_services_deductible_document_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_domestic_services_deductible_document_Valid() const{
    return m_domestic_services_deductible_document_isValid;
}

OAIDtoValueOfBoolean OAICustomerInvoiceUpdateDto::getDontEmail() const {
    return m_dont_email;
}
void OAICustomerInvoiceUpdateDto::setDontEmail(const OAIDtoValueOfBoolean &dont_email) {
    m_dont_email = dont_email;
    m_dont_email_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_dont_email_Set() const{
    return m_dont_email_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_dont_email_Valid() const{
    return m_dont_email_isValid;
}

OAIDtoValueOfBoolean OAICustomerInvoiceUpdateDto::getDontPrint() const {
    return m_dont_print;
}
void OAICustomerInvoiceUpdateDto::setDontPrint(const OAIDtoValueOfBoolean &dont_print) {
    m_dont_print = dont_print;
    m_dont_print_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_dont_print_Set() const{
    return m_dont_print_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_dont_print_Valid() const{
    return m_dont_print_isValid;
}

OAIDtoValueOfNullableOfDateTime OAICustomerInvoiceUpdateDto::getEndDate() const {
    return m_end_date;
}
void OAICustomerInvoiceUpdateDto::setEndDate(const OAIDtoValueOfNullableOfDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_end_date_Valid() const{
    return m_end_date_isValid;
}

OAIDtoValueOfDecimal OAICustomerInvoiceUpdateDto::getExchangeRate() const {
    return m_exchange_rate;
}
void OAICustomerInvoiceUpdateDto::setExchangeRate(const OAIDtoValueOfDecimal &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

OAIDtoValueOfString OAICustomerInvoiceUpdateDto::getExternalReference() const {
    return m_external_reference;
}
void OAICustomerInvoiceUpdateDto::setExternalReference(const OAIDtoValueOfString &external_reference) {
    m_external_reference = external_reference;
    m_external_reference_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_external_reference_Set() const{
    return m_external_reference_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_external_reference_Valid() const{
    return m_external_reference_isValid;
}

OAIFinancialPeriodInCustomerInvoiceUpdateDto OAICustomerInvoiceUpdateDto::getFinancialPeriod() const {
    return m_financial_period;
}
void OAICustomerInvoiceUpdateDto::setFinancialPeriod(const OAIFinancialPeriodInCustomerInvoiceUpdateDto &financial_period) {
    m_financial_period = financial_period;
    m_financial_period_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_financial_period_Set() const{
    return m_financial_period_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_financial_period_Valid() const{
    return m_financial_period_isValid;
}

OAIDtoValueOfBoolean OAICustomerInvoiceUpdateDto::getHold() const {
    return m_hold;
}
void OAICustomerInvoiceUpdateDto::setHold(const OAIDtoValueOfBoolean &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_hold_Valid() const{
    return m_hold_isValid;
}

OAIDtoValueOfSalesInvoiceContactUpdateDto OAICustomerInvoiceUpdateDto::getInvoiceContact() const {
    return m_invoice_contact;
}
void OAICustomerInvoiceUpdateDto::setInvoiceContact(const OAIDtoValueOfSalesInvoiceContactUpdateDto &invoice_contact) {
    m_invoice_contact = invoice_contact;
    m_invoice_contact_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_invoice_contact_Set() const{
    return m_invoice_contact_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_invoice_contact_Valid() const{
    return m_invoice_contact_isValid;
}

QList<OAICustomerInvoiceLinesUpdateDto> OAICustomerInvoiceUpdateDto::getInvoiceLines() const {
    return m_invoice_lines;
}
void OAICustomerInvoiceUpdateDto::setInvoiceLines(const QList<OAICustomerInvoiceLinesUpdateDto> &invoice_lines) {
    m_invoice_lines = invoice_lines;
    m_invoice_lines_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_invoice_lines_Set() const{
    return m_invoice_lines_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_invoice_lines_Valid() const{
    return m_invoice_lines_isValid;
}

OAIDtoValueOfString OAICustomerInvoiceUpdateDto::getInvoiceText() const {
    return m_invoice_text;
}
void OAICustomerInvoiceUpdateDto::setInvoiceText(const OAIDtoValueOfString &invoice_text) {
    m_invoice_text = invoice_text;
    m_invoice_text_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_invoice_text_Set() const{
    return m_invoice_text_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_invoice_text_Valid() const{
    return m_invoice_text_isValid;
}

OAIDtoValueOfString OAICustomerInvoiceUpdateDto::getLocationId() const {
    return m_location_id;
}
void OAICustomerInvoiceUpdateDto::setLocationId(const OAIDtoValueOfString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_location_id_Valid() const{
    return m_location_id_isValid;
}

OAIDtoValueOfString OAICustomerInvoiceUpdateDto::getNote() const {
    return m_note;
}
void OAICustomerInvoiceUpdateDto::setNote(const OAIDtoValueOfString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_note_Valid() const{
    return m_note_isValid;
}

OAIDtoValueOfDateTime OAICustomerInvoiceUpdateDto::getOrigInvoiceDate() const {
    return m_orig_invoice_date;
}
void OAICustomerInvoiceUpdateDto::setOrigInvoiceDate(const OAIDtoValueOfDateTime &orig_invoice_date) {
    m_orig_invoice_date = orig_invoice_date;
    m_orig_invoice_date_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_orig_invoice_date_Set() const{
    return m_orig_invoice_date_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_orig_invoice_date_Valid() const{
    return m_orig_invoice_date_isValid;
}

OAIDtoValueOfString OAICustomerInvoiceUpdateDto::getOriginatorDocRef() const {
    return m_originator_doc_ref;
}
void OAICustomerInvoiceUpdateDto::setOriginatorDocRef(const OAIDtoValueOfString &originator_doc_ref) {
    m_originator_doc_ref = originator_doc_ref;
    m_originator_doc_ref_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_originator_doc_ref_Set() const{
    return m_originator_doc_ref_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_originator_doc_ref_Valid() const{
    return m_originator_doc_ref_isValid;
}

OAIOverrideNumberSeriesInCustomerInvoiceUpdateDto OAICustomerInvoiceUpdateDto::getOverrideNumberSeries() const {
    return m_override_number_series;
}
void OAICustomerInvoiceUpdateDto::setOverrideNumberSeries(const OAIOverrideNumberSeriesInCustomerInvoiceUpdateDto &override_number_series) {
    m_override_number_series = override_number_series;
    m_override_number_series_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_override_number_series_Set() const{
    return m_override_number_series_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_override_number_series_Valid() const{
    return m_override_number_series_isValid;
}

OAIDtoValueOfString OAICustomerInvoiceUpdateDto::getPaymentMethodId() const {
    return m_payment_method_id;
}
void OAICustomerInvoiceUpdateDto::setPaymentMethodId(const OAIDtoValueOfString &payment_method_id) {
    m_payment_method_id = payment_method_id;
    m_payment_method_id_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_payment_method_id_Set() const{
    return m_payment_method_id_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_payment_method_id_Valid() const{
    return m_payment_method_id_isValid;
}

OAIDtoValueOfString OAICustomerInvoiceUpdateDto::getPaymentReference() const {
    return m_payment_reference;
}
void OAICustomerInvoiceUpdateDto::setPaymentReference(const OAIDtoValueOfString &payment_reference) {
    m_payment_reference = payment_reference;
    m_payment_reference_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_payment_reference_Set() const{
    return m_payment_reference_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_payment_reference_Valid() const{
    return m_payment_reference_isValid;
}

OAIPostPeriodInCustomerInvoiceUpdateDto OAICustomerInvoiceUpdateDto::getPostPeriod() const {
    return m_post_period;
}
void OAICustomerInvoiceUpdateDto::setPostPeriod(const OAIPostPeriodInCustomerInvoiceUpdateDto &post_period) {
    m_post_period = post_period;
    m_post_period_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_post_period_Set() const{
    return m_post_period_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_post_period_Valid() const{
    return m_post_period_isValid;
}

OAIDtoValueOfString OAICustomerInvoiceUpdateDto::getProject() const {
    return m_project;
}
void OAICustomerInvoiceUpdateDto::setProject(const OAIDtoValueOfString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_project_Set() const{
    return m_project_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_project_Valid() const{
    return m_project_isValid;
}

OAIDtoValueOfString OAICustomerInvoiceUpdateDto::getReferenceNumber() const {
    return m_reference_number;
}
void OAICustomerInvoiceUpdateDto::setReferenceNumber(const OAIDtoValueOfString &reference_number) {
    m_reference_number = reference_number;
    m_reference_number_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_reference_number_Set() const{
    return m_reference_number_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_reference_number_Valid() const{
    return m_reference_number_isValid;
}

OAIRotRutUpdateDto OAICustomerInvoiceUpdateDto::getRotRutDetails() const {
    return m_rot_rut_details;
}
void OAICustomerInvoiceUpdateDto::setRotRutDetails(const OAIRotRutUpdateDto &rot_rut_details) {
    m_rot_rut_details = rot_rut_details;
    m_rot_rut_details_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_rot_rut_details_Set() const{
    return m_rot_rut_details_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_rot_rut_details_Valid() const{
    return m_rot_rut_details_isValid;
}

OAISalesPersonIDInCustomerInvoiceUpdateDto OAICustomerInvoiceUpdateDto::getSalesPersonId() const {
    return m_sales_person_id;
}
void OAICustomerInvoiceUpdateDto::setSalesPersonId(const OAISalesPersonIDInCustomerInvoiceUpdateDto &sales_person_id) {
    m_sales_person_id = sales_person_id;
    m_sales_person_id_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_sales_person_id_Set() const{
    return m_sales_person_id_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_sales_person_id_Valid() const{
    return m_sales_person_id_isValid;
}

OAISalespersonInCustomerInvoiceUpdateDto OAICustomerInvoiceUpdateDto::getSalesperson() const {
    return m_salesperson;
}
void OAICustomerInvoiceUpdateDto::setSalesperson(const OAISalespersonInCustomerInvoiceUpdateDto &salesperson) {
    m_salesperson = salesperson;
    m_salesperson_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_salesperson_Set() const{
    return m_salesperson_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_salesperson_Valid() const{
    return m_salesperson_isValid;
}

OAIDtoValueOfNullableOfBoolean OAICustomerInvoiceUpdateDto::getSendToAutoInvoice() const {
    return m_send_to_auto_invoice;
}
void OAICustomerInvoiceUpdateDto::setSendToAutoInvoice(const OAIDtoValueOfNullableOfBoolean &send_to_auto_invoice) {
    m_send_to_auto_invoice = send_to_auto_invoice;
    m_send_to_auto_invoice_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_send_to_auto_invoice_Set() const{
    return m_send_to_auto_invoice_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_send_to_auto_invoice_Valid() const{
    return m_send_to_auto_invoice_isValid;
}

OAIDtoValueOfNullableOfDateTime OAICustomerInvoiceUpdateDto::getStartDate() const {
    return m_start_date;
}
void OAICustomerInvoiceUpdateDto::setStartDate(const OAIDtoValueOfNullableOfDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QList<OAITaxDetailUpdateDto> OAICustomerInvoiceUpdateDto::getTaxDetailLines() const {
    return m_tax_detail_lines;
}
void OAICustomerInvoiceUpdateDto::setTaxDetailLines(const QList<OAITaxDetailUpdateDto> &tax_detail_lines) {
    m_tax_detail_lines = tax_detail_lines;
    m_tax_detail_lines_isSet = true;
}

bool OAICustomerInvoiceUpdateDto::is_tax_detail_lines_Set() const{
    return m_tax_detail_lines_isSet;
}

bool OAICustomerInvoiceUpdateDto::is_tax_detail_lines_Valid() const{
    return m_tax_detail_lines_isValid;
}

bool OAICustomerInvoiceUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounting_cost_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_discount_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_doc_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_terms_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_ref_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_vat_zone_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_due_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domestic_services_deductible_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dont_email.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dont_print.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_financial_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_orig_invoice_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_originator_doc_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_number_series.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rot_rut_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_person_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_salesperson.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_to_auto_invoice.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_detail_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerInvoiceUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
