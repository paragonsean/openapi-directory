/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShippingAddressInPurchaseOrderDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShippingAddressInPurchaseOrderDto::OAIShippingAddressInPurchaseOrderDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShippingAddressInPurchaseOrderDto::OAIShippingAddressInPurchaseOrderDto() {
    this->initializeModel();
}

OAIShippingAddressInPurchaseOrderDto::~OAIShippingAddressInPurchaseOrderDto() {}

void OAIShippingAddressInPurchaseOrderDto::initializeModel() {

    m_address_id_isSet = false;
    m_address_id_isValid = false;

    m_address_line1_isSet = false;
    m_address_line1_isValid = false;

    m_address_line2_isSet = false;
    m_address_line2_isValid = false;

    m_address_line3_isSet = false;
    m_address_line3_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_county_isSet = false;
    m_county_isValid = false;

    m_override_address_isSet = false;
    m_override_address_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;
}

void OAIShippingAddressInPurchaseOrderDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShippingAddressInPurchaseOrderDto::fromJsonObject(QJsonObject json) {

    m_address_id_isValid = ::OpenAPI::fromJsonValue(m_address_id, json[QString("addressId")]);
    m_address_id_isSet = !json[QString("addressId")].isNull() && m_address_id_isValid;

    m_address_line1_isValid = ::OpenAPI::fromJsonValue(m_address_line1, json[QString("addressLine1")]);
    m_address_line1_isSet = !json[QString("addressLine1")].isNull() && m_address_line1_isValid;

    m_address_line2_isValid = ::OpenAPI::fromJsonValue(m_address_line2, json[QString("addressLine2")]);
    m_address_line2_isSet = !json[QString("addressLine2")].isNull() && m_address_line2_isValid;

    m_address_line3_isValid = ::OpenAPI::fromJsonValue(m_address_line3, json[QString("addressLine3")]);
    m_address_line3_isSet = !json[QString("addressLine3")].isNull() && m_address_line3_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_county_isValid = ::OpenAPI::fromJsonValue(m_county, json[QString("county")]);
    m_county_isSet = !json[QString("county")].isNull() && m_county_isValid;

    m_override_address_isValid = ::OpenAPI::fromJsonValue(m_override_address, json[QString("overrideAddress")]);
    m_override_address_isSet = !json[QString("overrideAddress")].isNull() && m_override_address_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;
}

QString OAIShippingAddressInPurchaseOrderDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShippingAddressInPurchaseOrderDto::asJsonObject() const {
    QJsonObject obj;
    if (m_address_id_isSet) {
        obj.insert(QString("addressId"), ::OpenAPI::toJsonValue(m_address_id));
    }
    if (m_address_line1_isSet) {
        obj.insert(QString("addressLine1"), ::OpenAPI::toJsonValue(m_address_line1));
    }
    if (m_address_line2_isSet) {
        obj.insert(QString("addressLine2"), ::OpenAPI::toJsonValue(m_address_line2));
    }
    if (m_address_line3_isSet) {
        obj.insert(QString("addressLine3"), ::OpenAPI::toJsonValue(m_address_line3));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_county.isSet()) {
        obj.insert(QString("county"), ::OpenAPI::toJsonValue(m_county));
    }
    if (m_override_address_isSet) {
        obj.insert(QString("overrideAddress"), ::OpenAPI::toJsonValue(m_override_address));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    return obj;
}

qint32 OAIShippingAddressInPurchaseOrderDto::getAddressId() const {
    return m_address_id;
}
void OAIShippingAddressInPurchaseOrderDto::setAddressId(const qint32 &address_id) {
    m_address_id = address_id;
    m_address_id_isSet = true;
}

bool OAIShippingAddressInPurchaseOrderDto::is_address_id_Set() const{
    return m_address_id_isSet;
}

bool OAIShippingAddressInPurchaseOrderDto::is_address_id_Valid() const{
    return m_address_id_isValid;
}

QString OAIShippingAddressInPurchaseOrderDto::getAddressLine1() const {
    return m_address_line1;
}
void OAIShippingAddressInPurchaseOrderDto::setAddressLine1(const QString &address_line1) {
    m_address_line1 = address_line1;
    m_address_line1_isSet = true;
}

bool OAIShippingAddressInPurchaseOrderDto::is_address_line1_Set() const{
    return m_address_line1_isSet;
}

bool OAIShippingAddressInPurchaseOrderDto::is_address_line1_Valid() const{
    return m_address_line1_isValid;
}

QString OAIShippingAddressInPurchaseOrderDto::getAddressLine2() const {
    return m_address_line2;
}
void OAIShippingAddressInPurchaseOrderDto::setAddressLine2(const QString &address_line2) {
    m_address_line2 = address_line2;
    m_address_line2_isSet = true;
}

bool OAIShippingAddressInPurchaseOrderDto::is_address_line2_Set() const{
    return m_address_line2_isSet;
}

bool OAIShippingAddressInPurchaseOrderDto::is_address_line2_Valid() const{
    return m_address_line2_isValid;
}

QString OAIShippingAddressInPurchaseOrderDto::getAddressLine3() const {
    return m_address_line3;
}
void OAIShippingAddressInPurchaseOrderDto::setAddressLine3(const QString &address_line3) {
    m_address_line3 = address_line3;
    m_address_line3_isSet = true;
}

bool OAIShippingAddressInPurchaseOrderDto::is_address_line3_Set() const{
    return m_address_line3_isSet;
}

bool OAIShippingAddressInPurchaseOrderDto::is_address_line3_Valid() const{
    return m_address_line3_isValid;
}

QString OAIShippingAddressInPurchaseOrderDto::getCity() const {
    return m_city;
}
void OAIShippingAddressInPurchaseOrderDto::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIShippingAddressInPurchaseOrderDto::is_city_Set() const{
    return m_city_isSet;
}

bool OAIShippingAddressInPurchaseOrderDto::is_city_Valid() const{
    return m_city_isValid;
}

OAICountryInPurchaseOrderAddressDto OAIShippingAddressInPurchaseOrderDto::getCountry() const {
    return m_country;
}
void OAIShippingAddressInPurchaseOrderDto::setCountry(const OAICountryInPurchaseOrderAddressDto &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIShippingAddressInPurchaseOrderDto::is_country_Set() const{
    return m_country_isSet;
}

bool OAIShippingAddressInPurchaseOrderDto::is_country_Valid() const{
    return m_country_isValid;
}

OAICountyInPurchaseOrderAddressDto OAIShippingAddressInPurchaseOrderDto::getCounty() const {
    return m_county;
}
void OAIShippingAddressInPurchaseOrderDto::setCounty(const OAICountyInPurchaseOrderAddressDto &county) {
    m_county = county;
    m_county_isSet = true;
}

bool OAIShippingAddressInPurchaseOrderDto::is_county_Set() const{
    return m_county_isSet;
}

bool OAIShippingAddressInPurchaseOrderDto::is_county_Valid() const{
    return m_county_isValid;
}

bool OAIShippingAddressInPurchaseOrderDto::isOverrideAddress() const {
    return m_override_address;
}
void OAIShippingAddressInPurchaseOrderDto::setOverrideAddress(const bool &override_address) {
    m_override_address = override_address;
    m_override_address_isSet = true;
}

bool OAIShippingAddressInPurchaseOrderDto::is_override_address_Set() const{
    return m_override_address_isSet;
}

bool OAIShippingAddressInPurchaseOrderDto::is_override_address_Valid() const{
    return m_override_address_isValid;
}

QString OAIShippingAddressInPurchaseOrderDto::getPostalCode() const {
    return m_postal_code;
}
void OAIShippingAddressInPurchaseOrderDto::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIShippingAddressInPurchaseOrderDto::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIShippingAddressInPurchaseOrderDto::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

bool OAIShippingAddressInPurchaseOrderDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_county.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShippingAddressInPurchaseOrderDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
