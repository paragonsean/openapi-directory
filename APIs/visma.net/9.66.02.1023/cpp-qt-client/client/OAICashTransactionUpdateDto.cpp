/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICashTransactionUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICashTransactionUpdateDto::OAICashTransactionUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICashTransactionUpdateDto::OAICashTransactionUpdateDto() {
    this->initializeModel();
}

OAICashTransactionUpdateDto::~OAICashTransactionUpdateDto() {}

void OAICashTransactionUpdateDto::initializeModel() {

    m_cash_account_isSet = false;
    m_cash_account_isValid = false;

    m_cash_transaction_details_isSet = false;
    m_cash_transaction_details_isValid = false;

    m_cash_transaction_tax_details_isSet = false;
    m_cash_transaction_tax_details_isValid = false;

    m_control_total_isSet = false;
    m_control_total_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_document_ref_isSet = false;
    m_document_ref_isValid = false;

    m_entry_type_isSet = false;
    m_entry_type_isValid = false;

    m_finanacial_period_isSet = false;
    m_finanacial_period_isValid = false;

    m_financial_period_isSet = false;
    m_financial_period_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_override_number_series_isSet = false;
    m_override_number_series_isValid = false;

    m_reference_number_isSet = false;
    m_reference_number_isValid = false;

    m_tax_calculation_mode_isSet = false;
    m_tax_calculation_mode_isValid = false;

    m_tran_date_isSet = false;
    m_tran_date_isValid = false;

    m_vat_amount_isSet = false;
    m_vat_amount_isValid = false;

    m_vat_zone_isSet = false;
    m_vat_zone_isValid = false;
}

void OAICashTransactionUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICashTransactionUpdateDto::fromJsonObject(QJsonObject json) {

    m_cash_account_isValid = ::OpenAPI::fromJsonValue(m_cash_account, json[QString("cashAccount")]);
    m_cash_account_isSet = !json[QString("cashAccount")].isNull() && m_cash_account_isValid;

    m_cash_transaction_details_isValid = ::OpenAPI::fromJsonValue(m_cash_transaction_details, json[QString("cashTransactionDetails")]);
    m_cash_transaction_details_isSet = !json[QString("cashTransactionDetails")].isNull() && m_cash_transaction_details_isValid;

    m_cash_transaction_tax_details_isValid = ::OpenAPI::fromJsonValue(m_cash_transaction_tax_details, json[QString("cashTransactionTaxDetails")]);
    m_cash_transaction_tax_details_isSet = !json[QString("cashTransactionTaxDetails")].isNull() && m_cash_transaction_tax_details_isValid;

    m_control_total_isValid = ::OpenAPI::fromJsonValue(m_control_total, json[QString("controlTotal")]);
    m_control_total_isSet = !json[QString("controlTotal")].isNull() && m_control_total_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_document_ref_isValid = ::OpenAPI::fromJsonValue(m_document_ref, json[QString("documentRef")]);
    m_document_ref_isSet = !json[QString("documentRef")].isNull() && m_document_ref_isValid;

    m_entry_type_isValid = ::OpenAPI::fromJsonValue(m_entry_type, json[QString("entryType")]);
    m_entry_type_isSet = !json[QString("entryType")].isNull() && m_entry_type_isValid;

    m_finanacial_period_isValid = ::OpenAPI::fromJsonValue(m_finanacial_period, json[QString("finanacialPeriod")]);
    m_finanacial_period_isSet = !json[QString("finanacialPeriod")].isNull() && m_finanacial_period_isValid;

    m_financial_period_isValid = ::OpenAPI::fromJsonValue(m_financial_period, json[QString("financialPeriod")]);
    m_financial_period_isSet = !json[QString("financialPeriod")].isNull() && m_financial_period_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_override_number_series_isValid = ::OpenAPI::fromJsonValue(m_override_number_series, json[QString("overrideNumberSeries")]);
    m_override_number_series_isSet = !json[QString("overrideNumberSeries")].isNull() && m_override_number_series_isValid;

    m_reference_number_isValid = ::OpenAPI::fromJsonValue(m_reference_number, json[QString("referenceNumber")]);
    m_reference_number_isSet = !json[QString("referenceNumber")].isNull() && m_reference_number_isValid;

    m_tax_calculation_mode_isValid = ::OpenAPI::fromJsonValue(m_tax_calculation_mode, json[QString("taxCalculationMode")]);
    m_tax_calculation_mode_isSet = !json[QString("taxCalculationMode")].isNull() && m_tax_calculation_mode_isValid;

    m_tran_date_isValid = ::OpenAPI::fromJsonValue(m_tran_date, json[QString("tranDate")]);
    m_tran_date_isSet = !json[QString("tranDate")].isNull() && m_tran_date_isValid;

    m_vat_amount_isValid = ::OpenAPI::fromJsonValue(m_vat_amount, json[QString("vatAmount")]);
    m_vat_amount_isSet = !json[QString("vatAmount")].isNull() && m_vat_amount_isValid;

    m_vat_zone_isValid = ::OpenAPI::fromJsonValue(m_vat_zone, json[QString("vatZone")]);
    m_vat_zone_isSet = !json[QString("vatZone")].isNull() && m_vat_zone_isValid;
}

QString OAICashTransactionUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICashTransactionUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_cash_account.isSet()) {
        obj.insert(QString("cashAccount"), ::OpenAPI::toJsonValue(m_cash_account));
    }
    if (m_cash_transaction_details.size() > 0) {
        obj.insert(QString("cashTransactionDetails"), ::OpenAPI::toJsonValue(m_cash_transaction_details));
    }
    if (m_cash_transaction_tax_details.size() > 0) {
        obj.insert(QString("cashTransactionTaxDetails"), ::OpenAPI::toJsonValue(m_cash_transaction_tax_details));
    }
    if (m_control_total.isSet()) {
        obj.insert(QString("controlTotal"), ::OpenAPI::toJsonValue(m_control_total));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_document_ref.isSet()) {
        obj.insert(QString("documentRef"), ::OpenAPI::toJsonValue(m_document_ref));
    }
    if (m_entry_type.isSet()) {
        obj.insert(QString("entryType"), ::OpenAPI::toJsonValue(m_entry_type));
    }
    if (m_finanacial_period.isSet()) {
        obj.insert(QString("finanacialPeriod"), ::OpenAPI::toJsonValue(m_finanacial_period));
    }
    if (m_financial_period.isSet()) {
        obj.insert(QString("financialPeriod"), ::OpenAPI::toJsonValue(m_financial_period));
    }
    if (m_hold.isSet()) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_override_number_series.isSet()) {
        obj.insert(QString("overrideNumberSeries"), ::OpenAPI::toJsonValue(m_override_number_series));
    }
    if (m_reference_number.isSet()) {
        obj.insert(QString("referenceNumber"), ::OpenAPI::toJsonValue(m_reference_number));
    }
    if (m_tax_calculation_mode.isSet()) {
        obj.insert(QString("taxCalculationMode"), ::OpenAPI::toJsonValue(m_tax_calculation_mode));
    }
    if (m_tran_date.isSet()) {
        obj.insert(QString("tranDate"), ::OpenAPI::toJsonValue(m_tran_date));
    }
    if (m_vat_amount.isSet()) {
        obj.insert(QString("vatAmount"), ::OpenAPI::toJsonValue(m_vat_amount));
    }
    if (m_vat_zone.isSet()) {
        obj.insert(QString("vatZone"), ::OpenAPI::toJsonValue(m_vat_zone));
    }
    return obj;
}

OAIDtoValueOfString OAICashTransactionUpdateDto::getCashAccount() const {
    return m_cash_account;
}
void OAICashTransactionUpdateDto::setCashAccount(const OAIDtoValueOfString &cash_account) {
    m_cash_account = cash_account;
    m_cash_account_isSet = true;
}

bool OAICashTransactionUpdateDto::is_cash_account_Set() const{
    return m_cash_account_isSet;
}

bool OAICashTransactionUpdateDto::is_cash_account_Valid() const{
    return m_cash_account_isValid;
}

QList<OAICashTransactionDetailUpdateDto> OAICashTransactionUpdateDto::getCashTransactionDetails() const {
    return m_cash_transaction_details;
}
void OAICashTransactionUpdateDto::setCashTransactionDetails(const QList<OAICashTransactionDetailUpdateDto> &cash_transaction_details) {
    m_cash_transaction_details = cash_transaction_details;
    m_cash_transaction_details_isSet = true;
}

bool OAICashTransactionUpdateDto::is_cash_transaction_details_Set() const{
    return m_cash_transaction_details_isSet;
}

bool OAICashTransactionUpdateDto::is_cash_transaction_details_Valid() const{
    return m_cash_transaction_details_isValid;
}

QList<OAICashTransactionTaxDetailUpdateDto> OAICashTransactionUpdateDto::getCashTransactionTaxDetails() const {
    return m_cash_transaction_tax_details;
}
void OAICashTransactionUpdateDto::setCashTransactionTaxDetails(const QList<OAICashTransactionTaxDetailUpdateDto> &cash_transaction_tax_details) {
    m_cash_transaction_tax_details = cash_transaction_tax_details;
    m_cash_transaction_tax_details_isSet = true;
}

bool OAICashTransactionUpdateDto::is_cash_transaction_tax_details_Set() const{
    return m_cash_transaction_tax_details_isSet;
}

bool OAICashTransactionUpdateDto::is_cash_transaction_tax_details_Valid() const{
    return m_cash_transaction_tax_details_isValid;
}

OAIDtoValueOfNullableOfDecimal OAICashTransactionUpdateDto::getControlTotal() const {
    return m_control_total;
}
void OAICashTransactionUpdateDto::setControlTotal(const OAIDtoValueOfNullableOfDecimal &control_total) {
    m_control_total = control_total;
    m_control_total_isSet = true;
}

bool OAICashTransactionUpdateDto::is_control_total_Set() const{
    return m_control_total_isSet;
}

bool OAICashTransactionUpdateDto::is_control_total_Valid() const{
    return m_control_total_isValid;
}

OAIDtoValueOfString OAICashTransactionUpdateDto::getDescription() const {
    return m_description;
}
void OAICashTransactionUpdateDto::setDescription(const OAIDtoValueOfString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICashTransactionUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAICashTransactionUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIDtoValueOfString OAICashTransactionUpdateDto::getDocumentRef() const {
    return m_document_ref;
}
void OAICashTransactionUpdateDto::setDocumentRef(const OAIDtoValueOfString &document_ref) {
    m_document_ref = document_ref;
    m_document_ref_isSet = true;
}

bool OAICashTransactionUpdateDto::is_document_ref_Set() const{
    return m_document_ref_isSet;
}

bool OAICashTransactionUpdateDto::is_document_ref_Valid() const{
    return m_document_ref_isValid;
}

OAIDtoValueOfString OAICashTransactionUpdateDto::getEntryType() const {
    return m_entry_type;
}
void OAICashTransactionUpdateDto::setEntryType(const OAIDtoValueOfString &entry_type) {
    m_entry_type = entry_type;
    m_entry_type_isSet = true;
}

bool OAICashTransactionUpdateDto::is_entry_type_Set() const{
    return m_entry_type_isSet;
}

bool OAICashTransactionUpdateDto::is_entry_type_Valid() const{
    return m_entry_type_isValid;
}

OAIFinanacialPeriodInCashTransactionUpdateDto OAICashTransactionUpdateDto::getFinanacialPeriod() const {
    return m_finanacial_period;
}
void OAICashTransactionUpdateDto::setFinanacialPeriod(const OAIFinanacialPeriodInCashTransactionUpdateDto &finanacial_period) {
    m_finanacial_period = finanacial_period;
    m_finanacial_period_isSet = true;
}

bool OAICashTransactionUpdateDto::is_finanacial_period_Set() const{
    return m_finanacial_period_isSet;
}

bool OAICashTransactionUpdateDto::is_finanacial_period_Valid() const{
    return m_finanacial_period_isValid;
}

OAIFinancialPeriodInCashTransactionUpdateDto OAICashTransactionUpdateDto::getFinancialPeriod() const {
    return m_financial_period;
}
void OAICashTransactionUpdateDto::setFinancialPeriod(const OAIFinancialPeriodInCashTransactionUpdateDto &financial_period) {
    m_financial_period = financial_period;
    m_financial_period_isSet = true;
}

bool OAICashTransactionUpdateDto::is_financial_period_Set() const{
    return m_financial_period_isSet;
}

bool OAICashTransactionUpdateDto::is_financial_period_Valid() const{
    return m_financial_period_isValid;
}

OAIDtoValueOfNullableOfBoolean OAICashTransactionUpdateDto::getHold() const {
    return m_hold;
}
void OAICashTransactionUpdateDto::setHold(const OAIDtoValueOfNullableOfBoolean &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAICashTransactionUpdateDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAICashTransactionUpdateDto::is_hold_Valid() const{
    return m_hold_isValid;
}

OAIDtoValueOfBoolean OAICashTransactionUpdateDto::getOverrideNumberSeries() const {
    return m_override_number_series;
}
void OAICashTransactionUpdateDto::setOverrideNumberSeries(const OAIDtoValueOfBoolean &override_number_series) {
    m_override_number_series = override_number_series;
    m_override_number_series_isSet = true;
}

bool OAICashTransactionUpdateDto::is_override_number_series_Set() const{
    return m_override_number_series_isSet;
}

bool OAICashTransactionUpdateDto::is_override_number_series_Valid() const{
    return m_override_number_series_isValid;
}

OAIDtoValueOfString OAICashTransactionUpdateDto::getReferenceNumber() const {
    return m_reference_number;
}
void OAICashTransactionUpdateDto::setReferenceNumber(const OAIDtoValueOfString &reference_number) {
    m_reference_number = reference_number;
    m_reference_number_isSet = true;
}

bool OAICashTransactionUpdateDto::is_reference_number_Set() const{
    return m_reference_number_isSet;
}

bool OAICashTransactionUpdateDto::is_reference_number_Valid() const{
    return m_reference_number_isValid;
}

OAIDtoValueOfNullableOfTaxCalcMode OAICashTransactionUpdateDto::getTaxCalculationMode() const {
    return m_tax_calculation_mode;
}
void OAICashTransactionUpdateDto::setTaxCalculationMode(const OAIDtoValueOfNullableOfTaxCalcMode &tax_calculation_mode) {
    m_tax_calculation_mode = tax_calculation_mode;
    m_tax_calculation_mode_isSet = true;
}

bool OAICashTransactionUpdateDto::is_tax_calculation_mode_Set() const{
    return m_tax_calculation_mode_isSet;
}

bool OAICashTransactionUpdateDto::is_tax_calculation_mode_Valid() const{
    return m_tax_calculation_mode_isValid;
}

OAIDtoValueOfNullableOfDateTime OAICashTransactionUpdateDto::getTranDate() const {
    return m_tran_date;
}
void OAICashTransactionUpdateDto::setTranDate(const OAIDtoValueOfNullableOfDateTime &tran_date) {
    m_tran_date = tran_date;
    m_tran_date_isSet = true;
}

bool OAICashTransactionUpdateDto::is_tran_date_Set() const{
    return m_tran_date_isSet;
}

bool OAICashTransactionUpdateDto::is_tran_date_Valid() const{
    return m_tran_date_isValid;
}

OAIDtoValueOfNullableOfDecimal OAICashTransactionUpdateDto::getVatAmount() const {
    return m_vat_amount;
}
void OAICashTransactionUpdateDto::setVatAmount(const OAIDtoValueOfNullableOfDecimal &vat_amount) {
    m_vat_amount = vat_amount;
    m_vat_amount_isSet = true;
}

bool OAICashTransactionUpdateDto::is_vat_amount_Set() const{
    return m_vat_amount_isSet;
}

bool OAICashTransactionUpdateDto::is_vat_amount_Valid() const{
    return m_vat_amount_isValid;
}

OAIDtoValueOfString OAICashTransactionUpdateDto::getVatZone() const {
    return m_vat_zone;
}
void OAICashTransactionUpdateDto::setVatZone(const OAIDtoValueOfString &vat_zone) {
    m_vat_zone = vat_zone;
    m_vat_zone_isSet = true;
}

bool OAICashTransactionUpdateDto::is_vat_zone_Set() const{
    return m_vat_zone_isSet;
}

bool OAICashTransactionUpdateDto::is_vat_zone_Valid() const{
    return m_vat_zone_isValid;
}

bool OAICashTransactionUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cash_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_transaction_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_transaction_tax_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_total.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_finanacial_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_financial_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_number_series.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_calculation_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tran_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICashTransactionUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
