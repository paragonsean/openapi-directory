/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupplierInvoiceUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupplierInvoiceUpdateDto::OAISupplierInvoiceUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupplierInvoiceUpdateDto::OAISupplierInvoiceUpdateDto() {
    this->initializeModel();
}

OAISupplierInvoiceUpdateDto::~OAISupplierInvoiceUpdateDto() {}

void OAISupplierInvoiceUpdateDto::initializeModel() {

    m_add_po_receipt_lines_isSet = false;
    m_add_po_receipt_lines_isValid = false;

    m_add_purchase_orders_isSet = false;
    m_add_purchase_orders_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_apply_retainage_isSet = false;
    m_apply_retainage_isValid = false;

    m_approval_details_isSet = false;
    m_approval_details_isValid = false;

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_cash_account_isSet = false;
    m_cash_account_isValid = false;

    m_cash_discount_date_isSet = false;
    m_cash_discount_date_isValid = false;

    m_credit_terms_id_isSet = false;
    m_credit_terms_id_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_document_type_isSet = false;
    m_document_type_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_financial_period_isSet = false;
    m_financial_period_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_invoice_lines_isSet = false;
    m_invoice_lines_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_orig_invoice_date_isSet = false;
    m_orig_invoice_date_isValid = false;

    m_override_number_series_isSet = false;
    m_override_number_series_isValid = false;

    m_pay_date_isSet = false;
    m_pay_date_isValid = false;

    m_pay_selected_isSet = false;
    m_pay_selected_isValid = false;

    m_payment_message_isSet = false;
    m_payment_message_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_payment_ref_no_isSet = false;
    m_payment_ref_no_isValid = false;

    m_post_period_isSet = false;
    m_post_period_isValid = false;

    m_reference_number_isSet = false;
    m_reference_number_isValid = false;

    m_rounding_diff_in_currency_isSet = false;
    m_rounding_diff_in_currency_isValid = false;

    m_supplier_number_isSet = false;
    m_supplier_number_isValid = false;

    m_supplier_reference_isSet = false;
    m_supplier_reference_isValid = false;

    m_supplier_tax_zone_isSet = false;
    m_supplier_tax_zone_isValid = false;

    m_tax_calculation_mode_isSet = false;
    m_tax_calculation_mode_isValid = false;

    m_tax_detail_lines_isSet = false;
    m_tax_detail_lines_isValid = false;

    m_validate_line_details_isSet = false;
    m_validate_line_details_isValid = false;

    m_vat_amount_isSet = false;
    m_vat_amount_isValid = false;
}

void OAISupplierInvoiceUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupplierInvoiceUpdateDto::fromJsonObject(QJsonObject json) {

    m_add_po_receipt_lines_isValid = ::OpenAPI::fromJsonValue(m_add_po_receipt_lines, json[QString("addPOReceiptLines")]);
    m_add_po_receipt_lines_isSet = !json[QString("addPOReceiptLines")].isNull() && m_add_po_receipt_lines_isValid;

    m_add_purchase_orders_isValid = ::OpenAPI::fromJsonValue(m_add_purchase_orders, json[QString("addPurchaseOrders")]);
    m_add_purchase_orders_isSet = !json[QString("addPurchaseOrders")].isNull() && m_add_purchase_orders_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_apply_retainage_isValid = ::OpenAPI::fromJsonValue(m_apply_retainage, json[QString("applyRetainage")]);
    m_apply_retainage_isSet = !json[QString("applyRetainage")].isNull() && m_apply_retainage_isValid;

    m_approval_details_isValid = ::OpenAPI::fromJsonValue(m_approval_details, json[QString("approvalDetails")]);
    m_approval_details_isSet = !json[QString("approvalDetails")].isNull() && m_approval_details_isValid;

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_cash_account_isValid = ::OpenAPI::fromJsonValue(m_cash_account, json[QString("cashAccount")]);
    m_cash_account_isSet = !json[QString("cashAccount")].isNull() && m_cash_account_isValid;

    m_cash_discount_date_isValid = ::OpenAPI::fromJsonValue(m_cash_discount_date, json[QString("cashDiscountDate")]);
    m_cash_discount_date_isSet = !json[QString("cashDiscountDate")].isNull() && m_cash_discount_date_isValid;

    m_credit_terms_id_isValid = ::OpenAPI::fromJsonValue(m_credit_terms_id, json[QString("creditTermsId")]);
    m_credit_terms_id_isSet = !json[QString("creditTermsId")].isNull() && m_credit_terms_id_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_document_type_isValid = ::OpenAPI::fromJsonValue(m_document_type, json[QString("documentType")]);
    m_document_type_isSet = !json[QString("documentType")].isNull() && m_document_type_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("exchangeRate")]);
    m_exchange_rate_isSet = !json[QString("exchangeRate")].isNull() && m_exchange_rate_isValid;

    m_financial_period_isValid = ::OpenAPI::fromJsonValue(m_financial_period, json[QString("financialPeriod")]);
    m_financial_period_isSet = !json[QString("financialPeriod")].isNull() && m_financial_period_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_invoice_lines_isValid = ::OpenAPI::fromJsonValue(m_invoice_lines, json[QString("invoiceLines")]);
    m_invoice_lines_isSet = !json[QString("invoiceLines")].isNull() && m_invoice_lines_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_orig_invoice_date_isValid = ::OpenAPI::fromJsonValue(m_orig_invoice_date, json[QString("origInvoiceDate")]);
    m_orig_invoice_date_isSet = !json[QString("origInvoiceDate")].isNull() && m_orig_invoice_date_isValid;

    m_override_number_series_isValid = ::OpenAPI::fromJsonValue(m_override_number_series, json[QString("overrideNumberSeries")]);
    m_override_number_series_isSet = !json[QString("overrideNumberSeries")].isNull() && m_override_number_series_isValid;

    m_pay_date_isValid = ::OpenAPI::fromJsonValue(m_pay_date, json[QString("payDate")]);
    m_pay_date_isSet = !json[QString("payDate")].isNull() && m_pay_date_isValid;

    m_pay_selected_isValid = ::OpenAPI::fromJsonValue(m_pay_selected, json[QString("paySelected")]);
    m_pay_selected_isSet = !json[QString("paySelected")].isNull() && m_pay_selected_isValid;

    m_payment_message_isValid = ::OpenAPI::fromJsonValue(m_payment_message, json[QString("paymentMessage")]);
    m_payment_message_isSet = !json[QString("paymentMessage")].isNull() && m_payment_message_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_payment_ref_no_isValid = ::OpenAPI::fromJsonValue(m_payment_ref_no, json[QString("paymentRefNo")]);
    m_payment_ref_no_isSet = !json[QString("paymentRefNo")].isNull() && m_payment_ref_no_isValid;

    m_post_period_isValid = ::OpenAPI::fromJsonValue(m_post_period, json[QString("postPeriod")]);
    m_post_period_isSet = !json[QString("postPeriod")].isNull() && m_post_period_isValid;

    m_reference_number_isValid = ::OpenAPI::fromJsonValue(m_reference_number, json[QString("referenceNumber")]);
    m_reference_number_isSet = !json[QString("referenceNumber")].isNull() && m_reference_number_isValid;

    m_rounding_diff_in_currency_isValid = ::OpenAPI::fromJsonValue(m_rounding_diff_in_currency, json[QString("roundingDiffInCurrency")]);
    m_rounding_diff_in_currency_isSet = !json[QString("roundingDiffInCurrency")].isNull() && m_rounding_diff_in_currency_isValid;

    m_supplier_number_isValid = ::OpenAPI::fromJsonValue(m_supplier_number, json[QString("supplierNumber")]);
    m_supplier_number_isSet = !json[QString("supplierNumber")].isNull() && m_supplier_number_isValid;

    m_supplier_reference_isValid = ::OpenAPI::fromJsonValue(m_supplier_reference, json[QString("supplierReference")]);
    m_supplier_reference_isSet = !json[QString("supplierReference")].isNull() && m_supplier_reference_isValid;

    m_supplier_tax_zone_isValid = ::OpenAPI::fromJsonValue(m_supplier_tax_zone, json[QString("supplierTaxZone")]);
    m_supplier_tax_zone_isSet = !json[QString("supplierTaxZone")].isNull() && m_supplier_tax_zone_isValid;

    m_tax_calculation_mode_isValid = ::OpenAPI::fromJsonValue(m_tax_calculation_mode, json[QString("taxCalculationMode")]);
    m_tax_calculation_mode_isSet = !json[QString("taxCalculationMode")].isNull() && m_tax_calculation_mode_isValid;

    m_tax_detail_lines_isValid = ::OpenAPI::fromJsonValue(m_tax_detail_lines, json[QString("taxDetailLines")]);
    m_tax_detail_lines_isSet = !json[QString("taxDetailLines")].isNull() && m_tax_detail_lines_isValid;

    m_validate_line_details_isValid = ::OpenAPI::fromJsonValue(m_validate_line_details, json[QString("validateLineDetails")]);
    m_validate_line_details_isSet = !json[QString("validateLineDetails")].isNull() && m_validate_line_details_isValid;

    m_vat_amount_isValid = ::OpenAPI::fromJsonValue(m_vat_amount, json[QString("vatAmount")]);
    m_vat_amount_isSet = !json[QString("vatAmount")].isNull() && m_vat_amount_isValid;
}

QString OAISupplierInvoiceUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupplierInvoiceUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_add_po_receipt_lines.size() > 0) {
        obj.insert(QString("addPOReceiptLines"), ::OpenAPI::toJsonValue(m_add_po_receipt_lines));
    }
    if (m_add_purchase_orders.size() > 0) {
        obj.insert(QString("addPurchaseOrders"), ::OpenAPI::toJsonValue(m_add_purchase_orders));
    }
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_apply_retainage.isSet()) {
        obj.insert(QString("applyRetainage"), ::OpenAPI::toJsonValue(m_apply_retainage));
    }
    if (m_approval_details.isSet()) {
        obj.insert(QString("approvalDetails"), ::OpenAPI::toJsonValue(m_approval_details));
    }
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_cash_account.isSet()) {
        obj.insert(QString("cashAccount"), ::OpenAPI::toJsonValue(m_cash_account));
    }
    if (m_cash_discount_date.isSet()) {
        obj.insert(QString("cashDiscountDate"), ::OpenAPI::toJsonValue(m_cash_discount_date));
    }
    if (m_credit_terms_id.isSet()) {
        obj.insert(QString("creditTermsId"), ::OpenAPI::toJsonValue(m_credit_terms_id));
    }
    if (m_currency_id.isSet()) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_date.isSet()) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_document_type.isSet()) {
        obj.insert(QString("documentType"), ::OpenAPI::toJsonValue(m_document_type));
    }
    if (m_due_date.isSet()) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_exchange_rate.isSet()) {
        obj.insert(QString("exchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_financial_period.isSet()) {
        obj.insert(QString("financialPeriod"), ::OpenAPI::toJsonValue(m_financial_period));
    }
    if (m_hold.isSet()) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_invoice_lines.size() > 0) {
        obj.insert(QString("invoiceLines"), ::OpenAPI::toJsonValue(m_invoice_lines));
    }
    if (m_location_id.isSet()) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_note.isSet()) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_orig_invoice_date.isSet()) {
        obj.insert(QString("origInvoiceDate"), ::OpenAPI::toJsonValue(m_orig_invoice_date));
    }
    if (m_override_number_series.isSet()) {
        obj.insert(QString("overrideNumberSeries"), ::OpenAPI::toJsonValue(m_override_number_series));
    }
    if (m_pay_date.isSet()) {
        obj.insert(QString("payDate"), ::OpenAPI::toJsonValue(m_pay_date));
    }
    if (m_pay_selected.isSet()) {
        obj.insert(QString("paySelected"), ::OpenAPI::toJsonValue(m_pay_selected));
    }
    if (m_payment_message.isSet()) {
        obj.insert(QString("paymentMessage"), ::OpenAPI::toJsonValue(m_payment_message));
    }
    if (m_payment_method.isSet()) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_payment_ref_no.isSet()) {
        obj.insert(QString("paymentRefNo"), ::OpenAPI::toJsonValue(m_payment_ref_no));
    }
    if (m_post_period.isSet()) {
        obj.insert(QString("postPeriod"), ::OpenAPI::toJsonValue(m_post_period));
    }
    if (m_reference_number.isSet()) {
        obj.insert(QString("referenceNumber"), ::OpenAPI::toJsonValue(m_reference_number));
    }
    if (m_rounding_diff_in_currency.isSet()) {
        obj.insert(QString("roundingDiffInCurrency"), ::OpenAPI::toJsonValue(m_rounding_diff_in_currency));
    }
    if (m_supplier_number.isSet()) {
        obj.insert(QString("supplierNumber"), ::OpenAPI::toJsonValue(m_supplier_number));
    }
    if (m_supplier_reference.isSet()) {
        obj.insert(QString("supplierReference"), ::OpenAPI::toJsonValue(m_supplier_reference));
    }
    if (m_supplier_tax_zone.isSet()) {
        obj.insert(QString("supplierTaxZone"), ::OpenAPI::toJsonValue(m_supplier_tax_zone));
    }
    if (m_tax_calculation_mode.isSet()) {
        obj.insert(QString("taxCalculationMode"), ::OpenAPI::toJsonValue(m_tax_calculation_mode));
    }
    if (m_tax_detail_lines.size() > 0) {
        obj.insert(QString("taxDetailLines"), ::OpenAPI::toJsonValue(m_tax_detail_lines));
    }
    if (m_validate_line_details.isSet()) {
        obj.insert(QString("validateLineDetails"), ::OpenAPI::toJsonValue(m_validate_line_details));
    }
    if (m_vat_amount.isSet()) {
        obj.insert(QString("vatAmount"), ::OpenAPI::toJsonValue(m_vat_amount));
    }
    return obj;
}

QList<OAIAddPOReceiptLineDto> OAISupplierInvoiceUpdateDto::getAddPoReceiptLines() const {
    return m_add_po_receipt_lines;
}
void OAISupplierInvoiceUpdateDto::setAddPoReceiptLines(const QList<OAIAddPOReceiptLineDto> &add_po_receipt_lines) {
    m_add_po_receipt_lines = add_po_receipt_lines;
    m_add_po_receipt_lines_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_add_po_receipt_lines_Set() const{
    return m_add_po_receipt_lines_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_add_po_receipt_lines_Valid() const{
    return m_add_po_receipt_lines_isValid;
}

QList<OAIAddPurchaseOrderDto> OAISupplierInvoiceUpdateDto::getAddPurchaseOrders() const {
    return m_add_purchase_orders;
}
void OAISupplierInvoiceUpdateDto::setAddPurchaseOrders(const QList<OAIAddPurchaseOrderDto> &add_purchase_orders) {
    m_add_purchase_orders = add_purchase_orders;
    m_add_purchase_orders_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_add_purchase_orders_Set() const{
    return m_add_purchase_orders_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_add_purchase_orders_Valid() const{
    return m_add_purchase_orders_isValid;
}

OAIDtoValueOfDecimal OAISupplierInvoiceUpdateDto::getAmount() const {
    return m_amount;
}
void OAISupplierInvoiceUpdateDto::setAmount(const OAIDtoValueOfDecimal &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISupplierInvoiceUpdateDto::getApplyRetainage() const {
    return m_apply_retainage;
}
void OAISupplierInvoiceUpdateDto::setApplyRetainage(const OAIDtoValueOfNullableOfBoolean &apply_retainage) {
    m_apply_retainage = apply_retainage;
    m_apply_retainage_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_apply_retainage_Set() const{
    return m_apply_retainage_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_apply_retainage_Valid() const{
    return m_apply_retainage_isValid;
}

OAIApprovalDetailsUpdateDto OAISupplierInvoiceUpdateDto::getApprovalDetails() const {
    return m_approval_details;
}
void OAISupplierInvoiceUpdateDto::setApprovalDetails(const OAIApprovalDetailsUpdateDto &approval_details) {
    m_approval_details = approval_details;
    m_approval_details_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_approval_details_Set() const{
    return m_approval_details_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_approval_details_Valid() const{
    return m_approval_details_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceUpdateDto::getBranchNumber() const {
    return m_branch_number;
}
void OAISupplierInvoiceUpdateDto::setBranchNumber(const OAIDtoValueOfString &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceUpdateDto::getCashAccount() const {
    return m_cash_account;
}
void OAISupplierInvoiceUpdateDto::setCashAccount(const OAIDtoValueOfString &cash_account) {
    m_cash_account = cash_account;
    m_cash_account_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_cash_account_Set() const{
    return m_cash_account_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_cash_account_Valid() const{
    return m_cash_account_isValid;
}

OAIDtoValueOfDateTime OAISupplierInvoiceUpdateDto::getCashDiscountDate() const {
    return m_cash_discount_date;
}
void OAISupplierInvoiceUpdateDto::setCashDiscountDate(const OAIDtoValueOfDateTime &cash_discount_date) {
    m_cash_discount_date = cash_discount_date;
    m_cash_discount_date_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_cash_discount_date_Set() const{
    return m_cash_discount_date_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_cash_discount_date_Valid() const{
    return m_cash_discount_date_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceUpdateDto::getCreditTermsId() const {
    return m_credit_terms_id;
}
void OAISupplierInvoiceUpdateDto::setCreditTermsId(const OAIDtoValueOfString &credit_terms_id) {
    m_credit_terms_id = credit_terms_id;
    m_credit_terms_id_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_credit_terms_id_Set() const{
    return m_credit_terms_id_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_credit_terms_id_Valid() const{
    return m_credit_terms_id_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceUpdateDto::getCurrencyId() const {
    return m_currency_id;
}
void OAISupplierInvoiceUpdateDto::setCurrencyId(const OAIDtoValueOfString &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

OAIDtoValueOfDateTime OAISupplierInvoiceUpdateDto::getDate() const {
    return m_date;
}
void OAISupplierInvoiceUpdateDto::setDate(const OAIDtoValueOfDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_date_Valid() const{
    return m_date_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceUpdateDto::getDescription() const {
    return m_description;
}
void OAISupplierInvoiceUpdateDto::setDescription(const OAIDtoValueOfString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIDtoValueOfNullableOfSupplierInvoiceTypes OAISupplierInvoiceUpdateDto::getDocumentType() const {
    return m_document_type;
}
void OAISupplierInvoiceUpdateDto::setDocumentType(const OAIDtoValueOfNullableOfSupplierInvoiceTypes &document_type) {
    m_document_type = document_type;
    m_document_type_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_document_type_Set() const{
    return m_document_type_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_document_type_Valid() const{
    return m_document_type_isValid;
}

OAIDtoValueOfDateTime OAISupplierInvoiceUpdateDto::getDueDate() const {
    return m_due_date;
}
void OAISupplierInvoiceUpdateDto::setDueDate(const OAIDtoValueOfDateTime &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_due_date_Valid() const{
    return m_due_date_isValid;
}

OAIDtoValueOfDecimal OAISupplierInvoiceUpdateDto::getExchangeRate() const {
    return m_exchange_rate;
}
void OAISupplierInvoiceUpdateDto::setExchangeRate(const OAIDtoValueOfDecimal &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

OAIFinancialPeriodInSupplierInvoiceUpdateDto OAISupplierInvoiceUpdateDto::getFinancialPeriod() const {
    return m_financial_period;
}
void OAISupplierInvoiceUpdateDto::setFinancialPeriod(const OAIFinancialPeriodInSupplierInvoiceUpdateDto &financial_period) {
    m_financial_period = financial_period;
    m_financial_period_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_financial_period_Set() const{
    return m_financial_period_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_financial_period_Valid() const{
    return m_financial_period_isValid;
}

OAIDtoValueOfBoolean OAISupplierInvoiceUpdateDto::getHold() const {
    return m_hold;
}
void OAISupplierInvoiceUpdateDto::setHold(const OAIDtoValueOfBoolean &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_hold_Valid() const{
    return m_hold_isValid;
}

QList<OAISupplierInvoiceLineUpdateDto> OAISupplierInvoiceUpdateDto::getInvoiceLines() const {
    return m_invoice_lines;
}
void OAISupplierInvoiceUpdateDto::setInvoiceLines(const QList<OAISupplierInvoiceLineUpdateDto> &invoice_lines) {
    m_invoice_lines = invoice_lines;
    m_invoice_lines_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_invoice_lines_Set() const{
    return m_invoice_lines_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_invoice_lines_Valid() const{
    return m_invoice_lines_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceUpdateDto::getLocationId() const {
    return m_location_id;
}
void OAISupplierInvoiceUpdateDto::setLocationId(const OAIDtoValueOfString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_location_id_Valid() const{
    return m_location_id_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceUpdateDto::getNote() const {
    return m_note;
}
void OAISupplierInvoiceUpdateDto::setNote(const OAIDtoValueOfString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_note_Valid() const{
    return m_note_isValid;
}

OAIDtoValueOfDateTime OAISupplierInvoiceUpdateDto::getOrigInvoiceDate() const {
    return m_orig_invoice_date;
}
void OAISupplierInvoiceUpdateDto::setOrigInvoiceDate(const OAIDtoValueOfDateTime &orig_invoice_date) {
    m_orig_invoice_date = orig_invoice_date;
    m_orig_invoice_date_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_orig_invoice_date_Set() const{
    return m_orig_invoice_date_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_orig_invoice_date_Valid() const{
    return m_orig_invoice_date_isValid;
}

OAIDtoValueOfBoolean OAISupplierInvoiceUpdateDto::getOverrideNumberSeries() const {
    return m_override_number_series;
}
void OAISupplierInvoiceUpdateDto::setOverrideNumberSeries(const OAIDtoValueOfBoolean &override_number_series) {
    m_override_number_series = override_number_series;
    m_override_number_series_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_override_number_series_Set() const{
    return m_override_number_series_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_override_number_series_Valid() const{
    return m_override_number_series_isValid;
}

OAIDtoValueOfDateTime OAISupplierInvoiceUpdateDto::getPayDate() const {
    return m_pay_date;
}
void OAISupplierInvoiceUpdateDto::setPayDate(const OAIDtoValueOfDateTime &pay_date) {
    m_pay_date = pay_date;
    m_pay_date_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_pay_date_Set() const{
    return m_pay_date_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_pay_date_Valid() const{
    return m_pay_date_isValid;
}

OAIPaySelectedInSupplierInvoiceUpdateDto OAISupplierInvoiceUpdateDto::getPaySelected() const {
    return m_pay_selected;
}
void OAISupplierInvoiceUpdateDto::setPaySelected(const OAIPaySelectedInSupplierInvoiceUpdateDto &pay_selected) {
    m_pay_selected = pay_selected;
    m_pay_selected_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_pay_selected_Set() const{
    return m_pay_selected_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_pay_selected_Valid() const{
    return m_pay_selected_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceUpdateDto::getPaymentMessage() const {
    return m_payment_message;
}
void OAISupplierInvoiceUpdateDto::setPaymentMessage(const OAIDtoValueOfString &payment_message) {
    m_payment_message = payment_message;
    m_payment_message_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_payment_message_Set() const{
    return m_payment_message_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_payment_message_Valid() const{
    return m_payment_message_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceUpdateDto::getPaymentMethod() const {
    return m_payment_method;
}
void OAISupplierInvoiceUpdateDto::setPaymentMethod(const OAIDtoValueOfString &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceUpdateDto::getPaymentRefNo() const {
    return m_payment_ref_no;
}
void OAISupplierInvoiceUpdateDto::setPaymentRefNo(const OAIDtoValueOfString &payment_ref_no) {
    m_payment_ref_no = payment_ref_no;
    m_payment_ref_no_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_payment_ref_no_Set() const{
    return m_payment_ref_no_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_payment_ref_no_Valid() const{
    return m_payment_ref_no_isValid;
}

OAIPostPeriodInSupplierInvoiceUpdateDto OAISupplierInvoiceUpdateDto::getPostPeriod() const {
    return m_post_period;
}
void OAISupplierInvoiceUpdateDto::setPostPeriod(const OAIPostPeriodInSupplierInvoiceUpdateDto &post_period) {
    m_post_period = post_period;
    m_post_period_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_post_period_Set() const{
    return m_post_period_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_post_period_Valid() const{
    return m_post_period_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceUpdateDto::getReferenceNumber() const {
    return m_reference_number;
}
void OAISupplierInvoiceUpdateDto::setReferenceNumber(const OAIDtoValueOfString &reference_number) {
    m_reference_number = reference_number;
    m_reference_number_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_reference_number_Set() const{
    return m_reference_number_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_reference_number_Valid() const{
    return m_reference_number_isValid;
}

OAIDtoValueOfDecimal OAISupplierInvoiceUpdateDto::getRoundingDiffInCurrency() const {
    return m_rounding_diff_in_currency;
}
void OAISupplierInvoiceUpdateDto::setRoundingDiffInCurrency(const OAIDtoValueOfDecimal &rounding_diff_in_currency) {
    m_rounding_diff_in_currency = rounding_diff_in_currency;
    m_rounding_diff_in_currency_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_rounding_diff_in_currency_Set() const{
    return m_rounding_diff_in_currency_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_rounding_diff_in_currency_Valid() const{
    return m_rounding_diff_in_currency_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceUpdateDto::getSupplierNumber() const {
    return m_supplier_number;
}
void OAISupplierInvoiceUpdateDto::setSupplierNumber(const OAIDtoValueOfString &supplier_number) {
    m_supplier_number = supplier_number;
    m_supplier_number_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_supplier_number_Set() const{
    return m_supplier_number_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_supplier_number_Valid() const{
    return m_supplier_number_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceUpdateDto::getSupplierReference() const {
    return m_supplier_reference;
}
void OAISupplierInvoiceUpdateDto::setSupplierReference(const OAIDtoValueOfString &supplier_reference) {
    m_supplier_reference = supplier_reference;
    m_supplier_reference_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_supplier_reference_Set() const{
    return m_supplier_reference_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_supplier_reference_Valid() const{
    return m_supplier_reference_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceUpdateDto::getSupplierTaxZone() const {
    return m_supplier_tax_zone;
}
void OAISupplierInvoiceUpdateDto::setSupplierTaxZone(const OAIDtoValueOfString &supplier_tax_zone) {
    m_supplier_tax_zone = supplier_tax_zone;
    m_supplier_tax_zone_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_supplier_tax_zone_Set() const{
    return m_supplier_tax_zone_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_supplier_tax_zone_Valid() const{
    return m_supplier_tax_zone_isValid;
}

OAIDtoValueOfNullableOfTaxCalcMode OAISupplierInvoiceUpdateDto::getTaxCalculationMode() const {
    return m_tax_calculation_mode;
}
void OAISupplierInvoiceUpdateDto::setTaxCalculationMode(const OAIDtoValueOfNullableOfTaxCalcMode &tax_calculation_mode) {
    m_tax_calculation_mode = tax_calculation_mode;
    m_tax_calculation_mode_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_tax_calculation_mode_Set() const{
    return m_tax_calculation_mode_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_tax_calculation_mode_Valid() const{
    return m_tax_calculation_mode_isValid;
}

QList<OAITaxDetailUpdateDto> OAISupplierInvoiceUpdateDto::getTaxDetailLines() const {
    return m_tax_detail_lines;
}
void OAISupplierInvoiceUpdateDto::setTaxDetailLines(const QList<OAITaxDetailUpdateDto> &tax_detail_lines) {
    m_tax_detail_lines = tax_detail_lines;
    m_tax_detail_lines_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_tax_detail_lines_Set() const{
    return m_tax_detail_lines_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_tax_detail_lines_Valid() const{
    return m_tax_detail_lines_isValid;
}

OAIValidateLineDetailsInSupplierInvoiceUpdateDto OAISupplierInvoiceUpdateDto::getValidateLineDetails() const {
    return m_validate_line_details;
}
void OAISupplierInvoiceUpdateDto::setValidateLineDetails(const OAIValidateLineDetailsInSupplierInvoiceUpdateDto &validate_line_details) {
    m_validate_line_details = validate_line_details;
    m_validate_line_details_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_validate_line_details_Set() const{
    return m_validate_line_details_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_validate_line_details_Valid() const{
    return m_validate_line_details_isValid;
}

OAIDtoValueOfDecimal OAISupplierInvoiceUpdateDto::getVatAmount() const {
    return m_vat_amount;
}
void OAISupplierInvoiceUpdateDto::setVatAmount(const OAIDtoValueOfDecimal &vat_amount) {
    m_vat_amount = vat_amount;
    m_vat_amount_isSet = true;
}

bool OAISupplierInvoiceUpdateDto::is_vat_amount_Set() const{
    return m_vat_amount_isSet;
}

bool OAISupplierInvoiceUpdateDto::is_vat_amount_Valid() const{
    return m_vat_amount_isValid;
}

bool OAISupplierInvoiceUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_po_receipt_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_purchase_orders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_apply_retainage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_discount_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_terms_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_financial_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_orig_invoice_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_number_series.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_selected.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_ref_no.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rounding_diff_in_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_tax_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_calculation_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_detail_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_line_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupplierInvoiceUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
