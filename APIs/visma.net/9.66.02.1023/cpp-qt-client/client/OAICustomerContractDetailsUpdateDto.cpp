/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerContractDetailsUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerContractDetailsUpdateDto::OAICustomerContractDetailsUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerContractDetailsUpdateDto::OAICustomerContractDetailsUpdateDto() {
    this->initializeModel();
}

OAICustomerContractDetailsUpdateDto::~OAICustomerContractDetailsUpdateDto() {}

void OAICustomerContractDetailsUpdateDto::initializeModel() {

    m_contract_detail_id_isSet = false;
    m_contract_detail_id_isValid = false;

    m_extra_usage_price_isSet = false;
    m_extra_usage_price_isValid = false;

    m_included_isSet = false;
    m_included_isValid = false;

    m_item_code_isSet = false;
    m_item_code_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_recurring_price_isSet = false;
    m_recurring_price_isValid = false;

    m_renewal_price_isSet = false;
    m_renewal_price_isValid = false;

    m_setup_price_isSet = false;
    m_setup_price_isValid = false;
}

void OAICustomerContractDetailsUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerContractDetailsUpdateDto::fromJsonObject(QJsonObject json) {

    m_contract_detail_id_isValid = ::OpenAPI::fromJsonValue(m_contract_detail_id, json[QString("contractDetailId")]);
    m_contract_detail_id_isSet = !json[QString("contractDetailId")].isNull() && m_contract_detail_id_isValid;

    m_extra_usage_price_isValid = ::OpenAPI::fromJsonValue(m_extra_usage_price, json[QString("extraUsagePrice")]);
    m_extra_usage_price_isSet = !json[QString("extraUsagePrice")].isNull() && m_extra_usage_price_isValid;

    m_included_isValid = ::OpenAPI::fromJsonValue(m_included, json[QString("included")]);
    m_included_isSet = !json[QString("included")].isNull() && m_included_isValid;

    m_item_code_isValid = ::OpenAPI::fromJsonValue(m_item_code, json[QString("itemCode")]);
    m_item_code_isSet = !json[QString("itemCode")].isNull() && m_item_code_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_recurring_price_isValid = ::OpenAPI::fromJsonValue(m_recurring_price, json[QString("recurringPrice")]);
    m_recurring_price_isSet = !json[QString("recurringPrice")].isNull() && m_recurring_price_isValid;

    m_renewal_price_isValid = ::OpenAPI::fromJsonValue(m_renewal_price, json[QString("renewalPrice")]);
    m_renewal_price_isSet = !json[QString("renewalPrice")].isNull() && m_renewal_price_isValid;

    m_setup_price_isValid = ::OpenAPI::fromJsonValue(m_setup_price, json[QString("setupPrice")]);
    m_setup_price_isSet = !json[QString("setupPrice")].isNull() && m_setup_price_isValid;
}

QString OAICustomerContractDetailsUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerContractDetailsUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_contract_detail_id.isSet()) {
        obj.insert(QString("contractDetailId"), ::OpenAPI::toJsonValue(m_contract_detail_id));
    }
    if (m_extra_usage_price.isSet()) {
        obj.insert(QString("extraUsagePrice"), ::OpenAPI::toJsonValue(m_extra_usage_price));
    }
    if (m_included.isSet()) {
        obj.insert(QString("included"), ::OpenAPI::toJsonValue(m_included));
    }
    if (m_item_code.isSet()) {
        obj.insert(QString("itemCode"), ::OpenAPI::toJsonValue(m_item_code));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_recurring_price.isSet()) {
        obj.insert(QString("recurringPrice"), ::OpenAPI::toJsonValue(m_recurring_price));
    }
    if (m_renewal_price.isSet()) {
        obj.insert(QString("renewalPrice"), ::OpenAPI::toJsonValue(m_renewal_price));
    }
    if (m_setup_price.isSet()) {
        obj.insert(QString("setupPrice"), ::OpenAPI::toJsonValue(m_setup_price));
    }
    return obj;
}

OAIDtoValueOfInt32 OAICustomerContractDetailsUpdateDto::getContractDetailId() const {
    return m_contract_detail_id;
}
void OAICustomerContractDetailsUpdateDto::setContractDetailId(const OAIDtoValueOfInt32 &contract_detail_id) {
    m_contract_detail_id = contract_detail_id;
    m_contract_detail_id_isSet = true;
}

bool OAICustomerContractDetailsUpdateDto::is_contract_detail_id_Set() const{
    return m_contract_detail_id_isSet;
}

bool OAICustomerContractDetailsUpdateDto::is_contract_detail_id_Valid() const{
    return m_contract_detail_id_isValid;
}

OAIDtoValueOfNullableOfDecimal OAICustomerContractDetailsUpdateDto::getExtraUsagePrice() const {
    return m_extra_usage_price;
}
void OAICustomerContractDetailsUpdateDto::setExtraUsagePrice(const OAIDtoValueOfNullableOfDecimal &extra_usage_price) {
    m_extra_usage_price = extra_usage_price;
    m_extra_usage_price_isSet = true;
}

bool OAICustomerContractDetailsUpdateDto::is_extra_usage_price_Set() const{
    return m_extra_usage_price_isSet;
}

bool OAICustomerContractDetailsUpdateDto::is_extra_usage_price_Valid() const{
    return m_extra_usage_price_isValid;
}

OAIDtoValueOfNullableOfDecimal OAICustomerContractDetailsUpdateDto::getIncluded() const {
    return m_included;
}
void OAICustomerContractDetailsUpdateDto::setIncluded(const OAIDtoValueOfNullableOfDecimal &included) {
    m_included = included;
    m_included_isSet = true;
}

bool OAICustomerContractDetailsUpdateDto::is_included_Set() const{
    return m_included_isSet;
}

bool OAICustomerContractDetailsUpdateDto::is_included_Valid() const{
    return m_included_isValid;
}

OAIDtoValueOfString OAICustomerContractDetailsUpdateDto::getItemCode() const {
    return m_item_code;
}
void OAICustomerContractDetailsUpdateDto::setItemCode(const OAIDtoValueOfString &item_code) {
    m_item_code = item_code;
    m_item_code_isSet = true;
}

bool OAICustomerContractDetailsUpdateDto::is_item_code_Set() const{
    return m_item_code_isSet;
}

bool OAICustomerContractDetailsUpdateDto::is_item_code_Valid() const{
    return m_item_code_isValid;
}

QString OAICustomerContractDetailsUpdateDto::getOperation() const {
    return m_operation;
}
void OAICustomerContractDetailsUpdateDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAICustomerContractDetailsUpdateDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAICustomerContractDetailsUpdateDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIDtoValueOfNullableOfDecimal OAICustomerContractDetailsUpdateDto::getRecurringPrice() const {
    return m_recurring_price;
}
void OAICustomerContractDetailsUpdateDto::setRecurringPrice(const OAIDtoValueOfNullableOfDecimal &recurring_price) {
    m_recurring_price = recurring_price;
    m_recurring_price_isSet = true;
}

bool OAICustomerContractDetailsUpdateDto::is_recurring_price_Set() const{
    return m_recurring_price_isSet;
}

bool OAICustomerContractDetailsUpdateDto::is_recurring_price_Valid() const{
    return m_recurring_price_isValid;
}

OAIDtoValueOfNullableOfDecimal OAICustomerContractDetailsUpdateDto::getRenewalPrice() const {
    return m_renewal_price;
}
void OAICustomerContractDetailsUpdateDto::setRenewalPrice(const OAIDtoValueOfNullableOfDecimal &renewal_price) {
    m_renewal_price = renewal_price;
    m_renewal_price_isSet = true;
}

bool OAICustomerContractDetailsUpdateDto::is_renewal_price_Set() const{
    return m_renewal_price_isSet;
}

bool OAICustomerContractDetailsUpdateDto::is_renewal_price_Valid() const{
    return m_renewal_price_isValid;
}

OAIDtoValueOfNullableOfDecimal OAICustomerContractDetailsUpdateDto::getSetupPrice() const {
    return m_setup_price;
}
void OAICustomerContractDetailsUpdateDto::setSetupPrice(const OAIDtoValueOfNullableOfDecimal &setup_price) {
    m_setup_price = setup_price;
    m_setup_price_isSet = true;
}

bool OAICustomerContractDetailsUpdateDto::is_setup_price_Set() const{
    return m_setup_price_isSet;
}

bool OAICustomerContractDetailsUpdateDto::is_setup_price_Valid() const{
    return m_setup_price_isValid;
}

bool OAICustomerContractDetailsUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contract_detail_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_usage_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_included.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewal_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_setup_price.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerContractDetailsUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
