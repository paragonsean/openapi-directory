/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISupplierPaymentApi_H
#define OAI_OAISupplierPaymentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAIObject.h"
#include "OAIReleasePaymentActionResultDto.h"
#include "OAIReleaseSupplierPaymentActionDto.h"
#include "OAISupplierPaymentDto.h"
#include "OAISupplierPaymentUpdateDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISupplierPaymentApi : public QObject {
    Q_OBJECT

public:
    OAISupplierPaymentApi(const int timeOut = 0);
    ~OAISupplierPaymentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_supplier_payment_update_dto OAISupplierPaymentUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void supplierPaymentCreateSupplierPayment(const OAISupplierPaymentUpdateDto &oai_supplier_payment_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  invoice_ref_nbr QString [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  supplier QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void supplierPaymentGetAllPayments(const ::OpenAPI::OptionalParam<QString> &invoice_ref_nbr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &supplier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  payment_type QString [required]
    * @param[in]  payment_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void supplierPaymentGetByTypeBypaymentTypepaymentNumber(const QString &payment_type, const QString &payment_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  payment_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void supplierPaymentGetBypaymentNumber(const QString &payment_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  payment_number QString [required]
    * @param[in]  oai_supplier_payment_update_dto OAISupplierPaymentUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void supplierPaymentPutBypaymentNumber(const QString &payment_number, const OAISupplierPaymentUpdateDto &oai_supplier_payment_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  payment_number QString [required]
    * @param[in]  oai_release_supplier_payment_action_dto OAIReleaseSupplierPaymentActionDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void supplierPaymentReleasePaymentBypaymentNumber(const QString &payment_number, const OAIReleaseSupplierPaymentActionDto &oai_release_supplier_payment_action_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void supplierPaymentCreateSupplierPaymentCallback(OAIHttpRequestWorker *worker);
    void supplierPaymentGetAllPaymentsCallback(OAIHttpRequestWorker *worker);
    void supplierPaymentGetByTypeBypaymentTypepaymentNumberCallback(OAIHttpRequestWorker *worker);
    void supplierPaymentGetBypaymentNumberCallback(OAIHttpRequestWorker *worker);
    void supplierPaymentPutBypaymentNumberCallback(OAIHttpRequestWorker *worker);
    void supplierPaymentReleasePaymentBypaymentNumberCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void supplierPaymentCreateSupplierPaymentSignal(OAIObject summary);
    void supplierPaymentGetAllPaymentsSignal(QList<OAISupplierPaymentDto> summary);
    void supplierPaymentGetByTypeBypaymentTypepaymentNumberSignal(OAISupplierPaymentDto summary);
    void supplierPaymentGetBypaymentNumberSignal(OAISupplierPaymentDto summary);
    void supplierPaymentPutBypaymentNumberSignal(OAIBackgroundApiAcceptedDto summary);
    void supplierPaymentReleasePaymentBypaymentNumberSignal(OAIReleasePaymentActionResultDto summary);


    void supplierPaymentCreateSupplierPaymentSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void supplierPaymentGetAllPaymentsSignalFull(OAIHttpRequestWorker *worker, QList<OAISupplierPaymentDto> summary);
    void supplierPaymentGetByTypeBypaymentTypepaymentNumberSignalFull(OAIHttpRequestWorker *worker, OAISupplierPaymentDto summary);
    void supplierPaymentGetBypaymentNumberSignalFull(OAIHttpRequestWorker *worker, OAISupplierPaymentDto summary);
    void supplierPaymentPutBypaymentNumberSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);
    void supplierPaymentReleasePaymentBypaymentNumberSignalFull(OAIHttpRequestWorker *worker, OAIReleasePaymentActionResultDto summary);

    Q_DECL_DEPRECATED_X("Use supplierPaymentCreateSupplierPaymentSignalError() instead")
    void supplierPaymentCreateSupplierPaymentSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierPaymentCreateSupplierPaymentSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierPaymentGetAllPaymentsSignalError() instead")
    void supplierPaymentGetAllPaymentsSignalE(QList<OAISupplierPaymentDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierPaymentGetAllPaymentsSignalError(QList<OAISupplierPaymentDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierPaymentGetByTypeBypaymentTypepaymentNumberSignalError() instead")
    void supplierPaymentGetByTypeBypaymentTypepaymentNumberSignalE(OAISupplierPaymentDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierPaymentGetByTypeBypaymentTypepaymentNumberSignalError(OAISupplierPaymentDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierPaymentGetBypaymentNumberSignalError() instead")
    void supplierPaymentGetBypaymentNumberSignalE(OAISupplierPaymentDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierPaymentGetBypaymentNumberSignalError(OAISupplierPaymentDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierPaymentPutBypaymentNumberSignalError() instead")
    void supplierPaymentPutBypaymentNumberSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierPaymentPutBypaymentNumberSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierPaymentReleasePaymentBypaymentNumberSignalError() instead")
    void supplierPaymentReleasePaymentBypaymentNumberSignalE(OAIReleasePaymentActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierPaymentReleasePaymentBypaymentNumberSignalError(OAIReleasePaymentActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use supplierPaymentCreateSupplierPaymentSignalErrorFull() instead")
    void supplierPaymentCreateSupplierPaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierPaymentCreateSupplierPaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierPaymentGetAllPaymentsSignalErrorFull() instead")
    void supplierPaymentGetAllPaymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierPaymentGetAllPaymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierPaymentGetByTypeBypaymentTypepaymentNumberSignalErrorFull() instead")
    void supplierPaymentGetByTypeBypaymentTypepaymentNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierPaymentGetByTypeBypaymentTypepaymentNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierPaymentGetBypaymentNumberSignalErrorFull() instead")
    void supplierPaymentGetBypaymentNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierPaymentGetBypaymentNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierPaymentPutBypaymentNumberSignalErrorFull() instead")
    void supplierPaymentPutBypaymentNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierPaymentPutBypaymentNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierPaymentReleasePaymentBypaymentNumberSignalErrorFull() instead")
    void supplierPaymentReleasePaymentBypaymentNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierPaymentReleasePaymentBypaymentNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
