/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreditNoteUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreditNoteUpdateDto::OAICreditNoteUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreditNoteUpdateDto::OAICreditNoteUpdateDto() {
    this->initializeModel();
}

OAICreditNoteUpdateDto::~OAICreditNoteUpdateDto() {}

void OAICreditNoteUpdateDto::initializeModel() {

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_cash_account_isSet = false;
    m_cash_account_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_customer_number_isSet = false;
    m_customer_number_isValid = false;

    m_customer_ref_number_isSet = false;
    m_customer_ref_number_isValid = false;

    m_document_date_isSet = false;
    m_document_date_isValid = false;

    m_dont_email_isSet = false;
    m_dont_email_isValid = false;

    m_dont_print_isSet = false;
    m_dont_print_isValid = false;

    m_external_reference_isSet = false;
    m_external_reference_isValid = false;

    m_financial_period_isSet = false;
    m_financial_period_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_invoice_lines_isSet = false;
    m_invoice_lines_isValid = false;

    m_invoice_text_isSet = false;
    m_invoice_text_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_orig_invoice_date_isSet = false;
    m_orig_invoice_date_isValid = false;

    m_post_period_isSet = false;
    m_post_period_isValid = false;

    m_reference_number_isSet = false;
    m_reference_number_isValid = false;

    m_sales_person_id_isSet = false;
    m_sales_person_id_isValid = false;

    m_salesperson_isSet = false;
    m_salesperson_isValid = false;
}

void OAICreditNoteUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreditNoteUpdateDto::fromJsonObject(QJsonObject json) {

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_cash_account_isValid = ::OpenAPI::fromJsonValue(m_cash_account, json[QString("cashAccount")]);
    m_cash_account_isSet = !json[QString("cashAccount")].isNull() && m_cash_account_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_customer_number_isValid = ::OpenAPI::fromJsonValue(m_customer_number, json[QString("customerNumber")]);
    m_customer_number_isSet = !json[QString("customerNumber")].isNull() && m_customer_number_isValid;

    m_customer_ref_number_isValid = ::OpenAPI::fromJsonValue(m_customer_ref_number, json[QString("customerRefNumber")]);
    m_customer_ref_number_isSet = !json[QString("customerRefNumber")].isNull() && m_customer_ref_number_isValid;

    m_document_date_isValid = ::OpenAPI::fromJsonValue(m_document_date, json[QString("documentDate")]);
    m_document_date_isSet = !json[QString("documentDate")].isNull() && m_document_date_isValid;

    m_dont_email_isValid = ::OpenAPI::fromJsonValue(m_dont_email, json[QString("dontEmail")]);
    m_dont_email_isSet = !json[QString("dontEmail")].isNull() && m_dont_email_isValid;

    m_dont_print_isValid = ::OpenAPI::fromJsonValue(m_dont_print, json[QString("dontPrint")]);
    m_dont_print_isSet = !json[QString("dontPrint")].isNull() && m_dont_print_isValid;

    m_external_reference_isValid = ::OpenAPI::fromJsonValue(m_external_reference, json[QString("externalReference")]);
    m_external_reference_isSet = !json[QString("externalReference")].isNull() && m_external_reference_isValid;

    m_financial_period_isValid = ::OpenAPI::fromJsonValue(m_financial_period, json[QString("financialPeriod")]);
    m_financial_period_isSet = !json[QString("financialPeriod")].isNull() && m_financial_period_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_invoice_lines_isValid = ::OpenAPI::fromJsonValue(m_invoice_lines, json[QString("invoiceLines")]);
    m_invoice_lines_isSet = !json[QString("invoiceLines")].isNull() && m_invoice_lines_isValid;

    m_invoice_text_isValid = ::OpenAPI::fromJsonValue(m_invoice_text, json[QString("invoiceText")]);
    m_invoice_text_isSet = !json[QString("invoiceText")].isNull() && m_invoice_text_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_orig_invoice_date_isValid = ::OpenAPI::fromJsonValue(m_orig_invoice_date, json[QString("origInvoiceDate")]);
    m_orig_invoice_date_isSet = !json[QString("origInvoiceDate")].isNull() && m_orig_invoice_date_isValid;

    m_post_period_isValid = ::OpenAPI::fromJsonValue(m_post_period, json[QString("postPeriod")]);
    m_post_period_isSet = !json[QString("postPeriod")].isNull() && m_post_period_isValid;

    m_reference_number_isValid = ::OpenAPI::fromJsonValue(m_reference_number, json[QString("referenceNumber")]);
    m_reference_number_isSet = !json[QString("referenceNumber")].isNull() && m_reference_number_isValid;

    m_sales_person_id_isValid = ::OpenAPI::fromJsonValue(m_sales_person_id, json[QString("salesPersonID")]);
    m_sales_person_id_isSet = !json[QString("salesPersonID")].isNull() && m_sales_person_id_isValid;

    m_salesperson_isValid = ::OpenAPI::fromJsonValue(m_salesperson, json[QString("salesperson")]);
    m_salesperson_isSet = !json[QString("salesperson")].isNull() && m_salesperson_isValid;
}

QString OAICreditNoteUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreditNoteUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_cash_account.isSet()) {
        obj.insert(QString("cashAccount"), ::OpenAPI::toJsonValue(m_cash_account));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_currency_id.isSet()) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_customer_number.isSet()) {
        obj.insert(QString("customerNumber"), ::OpenAPI::toJsonValue(m_customer_number));
    }
    if (m_customer_ref_number.isSet()) {
        obj.insert(QString("customerRefNumber"), ::OpenAPI::toJsonValue(m_customer_ref_number));
    }
    if (m_document_date.isSet()) {
        obj.insert(QString("documentDate"), ::OpenAPI::toJsonValue(m_document_date));
    }
    if (m_dont_email.isSet()) {
        obj.insert(QString("dontEmail"), ::OpenAPI::toJsonValue(m_dont_email));
    }
    if (m_dont_print.isSet()) {
        obj.insert(QString("dontPrint"), ::OpenAPI::toJsonValue(m_dont_print));
    }
    if (m_external_reference.isSet()) {
        obj.insert(QString("externalReference"), ::OpenAPI::toJsonValue(m_external_reference));
    }
    if (m_financial_period.isSet()) {
        obj.insert(QString("financialPeriod"), ::OpenAPI::toJsonValue(m_financial_period));
    }
    if (m_hold.isSet()) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_invoice_lines.size() > 0) {
        obj.insert(QString("invoiceLines"), ::OpenAPI::toJsonValue(m_invoice_lines));
    }
    if (m_invoice_text.isSet()) {
        obj.insert(QString("invoiceText"), ::OpenAPI::toJsonValue(m_invoice_text));
    }
    if (m_location_id.isSet()) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_note.isSet()) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_orig_invoice_date.isSet()) {
        obj.insert(QString("origInvoiceDate"), ::OpenAPI::toJsonValue(m_orig_invoice_date));
    }
    if (m_post_period.isSet()) {
        obj.insert(QString("postPeriod"), ::OpenAPI::toJsonValue(m_post_period));
    }
    if (m_reference_number.isSet()) {
        obj.insert(QString("referenceNumber"), ::OpenAPI::toJsonValue(m_reference_number));
    }
    if (m_sales_person_id.isSet()) {
        obj.insert(QString("salesPersonID"), ::OpenAPI::toJsonValue(m_sales_person_id));
    }
    if (m_salesperson.isSet()) {
        obj.insert(QString("salesperson"), ::OpenAPI::toJsonValue(m_salesperson));
    }
    return obj;
}

OAIDtoValueOfString OAICreditNoteUpdateDto::getBranchNumber() const {
    return m_branch_number;
}
void OAICreditNoteUpdateDto::setBranchNumber(const OAIDtoValueOfString &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAICreditNoteUpdateDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAICreditNoteUpdateDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

OAIDtoValueOfString OAICreditNoteUpdateDto::getCashAccount() const {
    return m_cash_account;
}
void OAICreditNoteUpdateDto::setCashAccount(const OAIDtoValueOfString &cash_account) {
    m_cash_account = cash_account;
    m_cash_account_isSet = true;
}

bool OAICreditNoteUpdateDto::is_cash_account_Set() const{
    return m_cash_account_isSet;
}

bool OAICreditNoteUpdateDto::is_cash_account_Valid() const{
    return m_cash_account_isValid;
}

OAIDtoValueOfNullableOfInt32 OAICreditNoteUpdateDto::getContact() const {
    return m_contact;
}
void OAICreditNoteUpdateDto::setContact(const OAIDtoValueOfNullableOfInt32 &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAICreditNoteUpdateDto::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAICreditNoteUpdateDto::is_contact_Valid() const{
    return m_contact_isValid;
}

OAIDtoValueOfString OAICreditNoteUpdateDto::getCurrencyId() const {
    return m_currency_id;
}
void OAICreditNoteUpdateDto::setCurrencyId(const OAIDtoValueOfString &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAICreditNoteUpdateDto::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAICreditNoteUpdateDto::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

OAIDtoValueOfString OAICreditNoteUpdateDto::getCustomerNumber() const {
    return m_customer_number;
}
void OAICreditNoteUpdateDto::setCustomerNumber(const OAIDtoValueOfString &customer_number) {
    m_customer_number = customer_number;
    m_customer_number_isSet = true;
}

bool OAICreditNoteUpdateDto::is_customer_number_Set() const{
    return m_customer_number_isSet;
}

bool OAICreditNoteUpdateDto::is_customer_number_Valid() const{
    return m_customer_number_isValid;
}

OAIDtoValueOfString OAICreditNoteUpdateDto::getCustomerRefNumber() const {
    return m_customer_ref_number;
}
void OAICreditNoteUpdateDto::setCustomerRefNumber(const OAIDtoValueOfString &customer_ref_number) {
    m_customer_ref_number = customer_ref_number;
    m_customer_ref_number_isSet = true;
}

bool OAICreditNoteUpdateDto::is_customer_ref_number_Set() const{
    return m_customer_ref_number_isSet;
}

bool OAICreditNoteUpdateDto::is_customer_ref_number_Valid() const{
    return m_customer_ref_number_isValid;
}

OAIDtoValueOfDateTime OAICreditNoteUpdateDto::getDocumentDate() const {
    return m_document_date;
}
void OAICreditNoteUpdateDto::setDocumentDate(const OAIDtoValueOfDateTime &document_date) {
    m_document_date = document_date;
    m_document_date_isSet = true;
}

bool OAICreditNoteUpdateDto::is_document_date_Set() const{
    return m_document_date_isSet;
}

bool OAICreditNoteUpdateDto::is_document_date_Valid() const{
    return m_document_date_isValid;
}

OAIDtoValueOfBoolean OAICreditNoteUpdateDto::getDontEmail() const {
    return m_dont_email;
}
void OAICreditNoteUpdateDto::setDontEmail(const OAIDtoValueOfBoolean &dont_email) {
    m_dont_email = dont_email;
    m_dont_email_isSet = true;
}

bool OAICreditNoteUpdateDto::is_dont_email_Set() const{
    return m_dont_email_isSet;
}

bool OAICreditNoteUpdateDto::is_dont_email_Valid() const{
    return m_dont_email_isValid;
}

OAIDtoValueOfBoolean OAICreditNoteUpdateDto::getDontPrint() const {
    return m_dont_print;
}
void OAICreditNoteUpdateDto::setDontPrint(const OAIDtoValueOfBoolean &dont_print) {
    m_dont_print = dont_print;
    m_dont_print_isSet = true;
}

bool OAICreditNoteUpdateDto::is_dont_print_Set() const{
    return m_dont_print_isSet;
}

bool OAICreditNoteUpdateDto::is_dont_print_Valid() const{
    return m_dont_print_isValid;
}

OAIDtoValueOfString OAICreditNoteUpdateDto::getExternalReference() const {
    return m_external_reference;
}
void OAICreditNoteUpdateDto::setExternalReference(const OAIDtoValueOfString &external_reference) {
    m_external_reference = external_reference;
    m_external_reference_isSet = true;
}

bool OAICreditNoteUpdateDto::is_external_reference_Set() const{
    return m_external_reference_isSet;
}

bool OAICreditNoteUpdateDto::is_external_reference_Valid() const{
    return m_external_reference_isValid;
}

OAIFinancialPeriodInCreditNoteUpdateDto OAICreditNoteUpdateDto::getFinancialPeriod() const {
    return m_financial_period;
}
void OAICreditNoteUpdateDto::setFinancialPeriod(const OAIFinancialPeriodInCreditNoteUpdateDto &financial_period) {
    m_financial_period = financial_period;
    m_financial_period_isSet = true;
}

bool OAICreditNoteUpdateDto::is_financial_period_Set() const{
    return m_financial_period_isSet;
}

bool OAICreditNoteUpdateDto::is_financial_period_Valid() const{
    return m_financial_period_isValid;
}

OAIDtoValueOfBoolean OAICreditNoteUpdateDto::getHold() const {
    return m_hold;
}
void OAICreditNoteUpdateDto::setHold(const OAIDtoValueOfBoolean &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAICreditNoteUpdateDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAICreditNoteUpdateDto::is_hold_Valid() const{
    return m_hold_isValid;
}

QList<OAICreditNoteLineUpdateDto> OAICreditNoteUpdateDto::getInvoiceLines() const {
    return m_invoice_lines;
}
void OAICreditNoteUpdateDto::setInvoiceLines(const QList<OAICreditNoteLineUpdateDto> &invoice_lines) {
    m_invoice_lines = invoice_lines;
    m_invoice_lines_isSet = true;
}

bool OAICreditNoteUpdateDto::is_invoice_lines_Set() const{
    return m_invoice_lines_isSet;
}

bool OAICreditNoteUpdateDto::is_invoice_lines_Valid() const{
    return m_invoice_lines_isValid;
}

OAIDtoValueOfString OAICreditNoteUpdateDto::getInvoiceText() const {
    return m_invoice_text;
}
void OAICreditNoteUpdateDto::setInvoiceText(const OAIDtoValueOfString &invoice_text) {
    m_invoice_text = invoice_text;
    m_invoice_text_isSet = true;
}

bool OAICreditNoteUpdateDto::is_invoice_text_Set() const{
    return m_invoice_text_isSet;
}

bool OAICreditNoteUpdateDto::is_invoice_text_Valid() const{
    return m_invoice_text_isValid;
}

OAIDtoValueOfString OAICreditNoteUpdateDto::getLocationId() const {
    return m_location_id;
}
void OAICreditNoteUpdateDto::setLocationId(const OAIDtoValueOfString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAICreditNoteUpdateDto::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAICreditNoteUpdateDto::is_location_id_Valid() const{
    return m_location_id_isValid;
}

OAIDtoValueOfString OAICreditNoteUpdateDto::getNote() const {
    return m_note;
}
void OAICreditNoteUpdateDto::setNote(const OAIDtoValueOfString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAICreditNoteUpdateDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAICreditNoteUpdateDto::is_note_Valid() const{
    return m_note_isValid;
}

OAIDtoValueOfDateTime OAICreditNoteUpdateDto::getOrigInvoiceDate() const {
    return m_orig_invoice_date;
}
void OAICreditNoteUpdateDto::setOrigInvoiceDate(const OAIDtoValueOfDateTime &orig_invoice_date) {
    m_orig_invoice_date = orig_invoice_date;
    m_orig_invoice_date_isSet = true;
}

bool OAICreditNoteUpdateDto::is_orig_invoice_date_Set() const{
    return m_orig_invoice_date_isSet;
}

bool OAICreditNoteUpdateDto::is_orig_invoice_date_Valid() const{
    return m_orig_invoice_date_isValid;
}

OAIPostPeriodInCreditNoteUpdateDto OAICreditNoteUpdateDto::getPostPeriod() const {
    return m_post_period;
}
void OAICreditNoteUpdateDto::setPostPeriod(const OAIPostPeriodInCreditNoteUpdateDto &post_period) {
    m_post_period = post_period;
    m_post_period_isSet = true;
}

bool OAICreditNoteUpdateDto::is_post_period_Set() const{
    return m_post_period_isSet;
}

bool OAICreditNoteUpdateDto::is_post_period_Valid() const{
    return m_post_period_isValid;
}

OAIDtoValueOfString OAICreditNoteUpdateDto::getReferenceNumber() const {
    return m_reference_number;
}
void OAICreditNoteUpdateDto::setReferenceNumber(const OAIDtoValueOfString &reference_number) {
    m_reference_number = reference_number;
    m_reference_number_isSet = true;
}

bool OAICreditNoteUpdateDto::is_reference_number_Set() const{
    return m_reference_number_isSet;
}

bool OAICreditNoteUpdateDto::is_reference_number_Valid() const{
    return m_reference_number_isValid;
}

OAISalesPersonIDInCreditNoteUpdateDto OAICreditNoteUpdateDto::getSalesPersonId() const {
    return m_sales_person_id;
}
void OAICreditNoteUpdateDto::setSalesPersonId(const OAISalesPersonIDInCreditNoteUpdateDto &sales_person_id) {
    m_sales_person_id = sales_person_id;
    m_sales_person_id_isSet = true;
}

bool OAICreditNoteUpdateDto::is_sales_person_id_Set() const{
    return m_sales_person_id_isSet;
}

bool OAICreditNoteUpdateDto::is_sales_person_id_Valid() const{
    return m_sales_person_id_isValid;
}

OAISalespersonInCreditNoteUpdateDto OAICreditNoteUpdateDto::getSalesperson() const {
    return m_salesperson;
}
void OAICreditNoteUpdateDto::setSalesperson(const OAISalespersonInCreditNoteUpdateDto &salesperson) {
    m_salesperson = salesperson;
    m_salesperson_isSet = true;
}

bool OAICreditNoteUpdateDto::is_salesperson_Set() const{
    return m_salesperson_isSet;
}

bool OAICreditNoteUpdateDto::is_salesperson_Valid() const{
    return m_salesperson_isValid;
}

bool OAICreditNoteUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_ref_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dont_email.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dont_print.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_financial_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_orig_invoice_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_person_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_salesperson.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreditNoteUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
