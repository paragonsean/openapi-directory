/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFixedAssetDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFixedAssetDto::OAIFixedAssetDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFixedAssetDto::OAIFixedAssetDto() {
    this->initializeModel();
}

OAIFixedAssetDto::~OAIFixedAssetDto() {}

void OAIFixedAssetDto::initializeModel() {

    m_accounts_isSet = false;
    m_accounts_isValid = false;

    m_asset_id_isSet = false;
    m_asset_id_isValid = false;

    m_book_balance_isSet = false;
    m_book_balance_isValid = false;

    m_class_id_isSet = false;
    m_class_id_isValid = false;

    m_depreciable_isSet = false;
    m_depreciable_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_is_tangible_isSet = false;
    m_is_tangible_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_parent_asset_id_isSet = false;
    m_parent_asset_id_isValid = false;

    m_property_tax_isSet = false;
    m_property_tax_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_record_type_isSet = false;
    m_record_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_useful_life_isSet = false;
    m_useful_life_isValid = false;
}

void OAIFixedAssetDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFixedAssetDto::fromJsonObject(QJsonObject json) {

    m_accounts_isValid = ::OpenAPI::fromJsonValue(m_accounts, json[QString("accounts")]);
    m_accounts_isSet = !json[QString("accounts")].isNull() && m_accounts_isValid;

    m_asset_id_isValid = ::OpenAPI::fromJsonValue(m_asset_id, json[QString("assetID")]);
    m_asset_id_isSet = !json[QString("assetID")].isNull() && m_asset_id_isValid;

    m_book_balance_isValid = ::OpenAPI::fromJsonValue(m_book_balance, json[QString("bookBalance")]);
    m_book_balance_isSet = !json[QString("bookBalance")].isNull() && m_book_balance_isValid;

    m_class_id_isValid = ::OpenAPI::fromJsonValue(m_class_id, json[QString("classID")]);
    m_class_id_isSet = !json[QString("classID")].isNull() && m_class_id_isValid;

    m_depreciable_isValid = ::OpenAPI::fromJsonValue(m_depreciable, json[QString("depreciable")]);
    m_depreciable_isSet = !json[QString("depreciable")].isNull() && m_depreciable_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_is_tangible_isValid = ::OpenAPI::fromJsonValue(m_is_tangible, json[QString("isTangible")]);
    m_is_tangible_isSet = !json[QString("isTangible")].isNull() && m_is_tangible_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_parent_asset_id_isValid = ::OpenAPI::fromJsonValue(m_parent_asset_id, json[QString("parentAssetID")]);
    m_parent_asset_id_isSet = !json[QString("parentAssetID")].isNull() && m_parent_asset_id_isValid;

    m_property_tax_isValid = ::OpenAPI::fromJsonValue(m_property_tax, json[QString("propertyTax")]);
    m_property_tax_isSet = !json[QString("propertyTax")].isNull() && m_property_tax_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_record_type_isValid = ::OpenAPI::fromJsonValue(m_record_type, json[QString("recordType")]);
    m_record_type_isSet = !json[QString("recordType")].isNull() && m_record_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_useful_life_isValid = ::OpenAPI::fromJsonValue(m_useful_life, json[QString("usefulLife")]);
    m_useful_life_isSet = !json[QString("usefulLife")].isNull() && m_useful_life_isValid;
}

QString OAIFixedAssetDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFixedAssetDto::asJsonObject() const {
    QJsonObject obj;
    if (m_accounts.isSet()) {
        obj.insert(QString("accounts"), ::OpenAPI::toJsonValue(m_accounts));
    }
    if (m_asset_id_isSet) {
        obj.insert(QString("assetID"), ::OpenAPI::toJsonValue(m_asset_id));
    }
    if (m_book_balance.isSet()) {
        obj.insert(QString("bookBalance"), ::OpenAPI::toJsonValue(m_book_balance));
    }
    if (m_class_id_isSet) {
        obj.insert(QString("classID"), ::OpenAPI::toJsonValue(m_class_id));
    }
    if (m_depreciable_isSet) {
        obj.insert(QString("depreciable"), ::OpenAPI::toJsonValue(m_depreciable));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_details.isSet()) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_is_tangible_isSet) {
        obj.insert(QString("isTangible"), ::OpenAPI::toJsonValue(m_is_tangible));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_parent_asset_id_isSet) {
        obj.insert(QString("parentAssetID"), ::OpenAPI::toJsonValue(m_parent_asset_id));
    }
    if (m_property_tax.isSet()) {
        obj.insert(QString("propertyTax"), ::OpenAPI::toJsonValue(m_property_tax));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_record_type_isSet) {
        obj.insert(QString("recordType"), ::OpenAPI::toJsonValue(m_record_type));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_useful_life_isSet) {
        obj.insert(QString("usefulLife"), ::OpenAPI::toJsonValue(m_useful_life));
    }
    return obj;
}

OAIAccountsInFixedAssetDto OAIFixedAssetDto::getAccounts() const {
    return m_accounts;
}
void OAIFixedAssetDto::setAccounts(const OAIAccountsInFixedAssetDto &accounts) {
    m_accounts = accounts;
    m_accounts_isSet = true;
}

bool OAIFixedAssetDto::is_accounts_Set() const{
    return m_accounts_isSet;
}

bool OAIFixedAssetDto::is_accounts_Valid() const{
    return m_accounts_isValid;
}

QString OAIFixedAssetDto::getAssetId() const {
    return m_asset_id;
}
void OAIFixedAssetDto::setAssetId(const QString &asset_id) {
    m_asset_id = asset_id;
    m_asset_id_isSet = true;
}

bool OAIFixedAssetDto::is_asset_id_Set() const{
    return m_asset_id_isSet;
}

bool OAIFixedAssetDto::is_asset_id_Valid() const{
    return m_asset_id_isValid;
}

OAIBookBalanceInFixedAssetDto OAIFixedAssetDto::getBookBalance() const {
    return m_book_balance;
}
void OAIFixedAssetDto::setBookBalance(const OAIBookBalanceInFixedAssetDto &book_balance) {
    m_book_balance = book_balance;
    m_book_balance_isSet = true;
}

bool OAIFixedAssetDto::is_book_balance_Set() const{
    return m_book_balance_isSet;
}

bool OAIFixedAssetDto::is_book_balance_Valid() const{
    return m_book_balance_isValid;
}

QString OAIFixedAssetDto::getClassId() const {
    return m_class_id;
}
void OAIFixedAssetDto::setClassId(const QString &class_id) {
    m_class_id = class_id;
    m_class_id_isSet = true;
}

bool OAIFixedAssetDto::is_class_id_Set() const{
    return m_class_id_isSet;
}

bool OAIFixedAssetDto::is_class_id_Valid() const{
    return m_class_id_isValid;
}

bool OAIFixedAssetDto::isDepreciable() const {
    return m_depreciable;
}
void OAIFixedAssetDto::setDepreciable(const bool &depreciable) {
    m_depreciable = depreciable;
    m_depreciable_isSet = true;
}

bool OAIFixedAssetDto::is_depreciable_Set() const{
    return m_depreciable_isSet;
}

bool OAIFixedAssetDto::is_depreciable_Valid() const{
    return m_depreciable_isValid;
}

QString OAIFixedAssetDto::getDescription() const {
    return m_description;
}
void OAIFixedAssetDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFixedAssetDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFixedAssetDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIDetailsInFixedAssetDto OAIFixedAssetDto::getDetails() const {
    return m_details;
}
void OAIFixedAssetDto::setDetails(const OAIDetailsInFixedAssetDto &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIFixedAssetDto::is_details_Set() const{
    return m_details_isSet;
}

bool OAIFixedAssetDto::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIFixedAssetDto::getErrorInfo() const {
    return m_error_info;
}
void OAIFixedAssetDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIFixedAssetDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIFixedAssetDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

bool OAIFixedAssetDto::isIsTangible() const {
    return m_is_tangible;
}
void OAIFixedAssetDto::setIsTangible(const bool &is_tangible) {
    m_is_tangible = is_tangible;
    m_is_tangible_isSet = true;
}

bool OAIFixedAssetDto::is_is_tangible_Set() const{
    return m_is_tangible_isSet;
}

bool OAIFixedAssetDto::is_is_tangible_Valid() const{
    return m_is_tangible_isValid;
}

QDateTime OAIFixedAssetDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIFixedAssetDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIFixedAssetDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIFixedAssetDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAILocationInFixedAssetDto OAIFixedAssetDto::getLocation() const {
    return m_location;
}
void OAIFixedAssetDto::setLocation(const OAILocationInFixedAssetDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIFixedAssetDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIFixedAssetDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIMetadataDto OAIFixedAssetDto::getMetadata() const {
    return m_metadata;
}
void OAIFixedAssetDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIFixedAssetDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIFixedAssetDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIFixedAssetDto::getParentAssetId() const {
    return m_parent_asset_id;
}
void OAIFixedAssetDto::setParentAssetId(const QString &parent_asset_id) {
    m_parent_asset_id = parent_asset_id;
    m_parent_asset_id_isSet = true;
}

bool OAIFixedAssetDto::is_parent_asset_id_Set() const{
    return m_parent_asset_id_isSet;
}

bool OAIFixedAssetDto::is_parent_asset_id_Valid() const{
    return m_parent_asset_id_isValid;
}

OAIPropertyTaxInFixedAssetDto OAIFixedAssetDto::getPropertyTax() const {
    return m_property_tax;
}
void OAIFixedAssetDto::setPropertyTax(const OAIPropertyTaxInFixedAssetDto &property_tax) {
    m_property_tax = property_tax;
    m_property_tax_isSet = true;
}

bool OAIFixedAssetDto::is_property_tax_Set() const{
    return m_property_tax_isSet;
}

bool OAIFixedAssetDto::is_property_tax_Valid() const{
    return m_property_tax_isValid;
}

double OAIFixedAssetDto::getQuantity() const {
    return m_quantity;
}
void OAIFixedAssetDto::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIFixedAssetDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIFixedAssetDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIFixedAssetDto::getRecordType() const {
    return m_record_type;
}
void OAIFixedAssetDto::setRecordType(const QString &record_type) {
    m_record_type = record_type;
    m_record_type_isSet = true;
}

bool OAIFixedAssetDto::is_record_type_Set() const{
    return m_record_type_isSet;
}

bool OAIFixedAssetDto::is_record_type_Valid() const{
    return m_record_type_isValid;
}

OAITypeInFixedAssetDto OAIFixedAssetDto::getType() const {
    return m_type;
}
void OAIFixedAssetDto::setType(const OAITypeInFixedAssetDto &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFixedAssetDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFixedAssetDto::is_type_Valid() const{
    return m_type_isValid;
}

double OAIFixedAssetDto::getUsefulLife() const {
    return m_useful_life;
}
void OAIFixedAssetDto::setUsefulLife(const double &useful_life) {
    m_useful_life = useful_life;
    m_useful_life_isSet = true;
}

bool OAIFixedAssetDto::is_useful_life_Set() const{
    return m_useful_life_isSet;
}

bool OAIFixedAssetDto::is_useful_life_Valid() const{
    return m_useful_life_isValid;
}

bool OAIFixedAssetDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_book_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depreciable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_tangible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_tax.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_useful_life_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFixedAssetDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
