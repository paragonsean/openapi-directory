/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationDto::OAINotificationDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationDto::OAINotificationDto() {
    this->initializeModel();
}

OAINotificationDto::~OAINotificationDto() {}

void OAINotificationDto::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_context_id_isSet = false;
    m_context_id_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_resource_uri_isSet = false;
    m_resource_uri_isValid = false;
}

void OAINotificationDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationDto::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_context_id_isValid = ::OpenAPI::fromJsonValue(m_context_id, json[QString("contextId")]);
    m_context_id_isSet = !json[QString("contextId")].isNull() && m_context_id_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("eventId")]);
    m_event_id_isSet = !json[QString("eventId")].isNull() && m_event_id_isValid;

    m_resource_uri_isValid = ::OpenAPI::fromJsonValue(m_resource_uri, json[QString("resourceUri")]);
    m_resource_uri_isSet = !json[QString("resourceUri")].isNull() && m_resource_uri_isValid;
}

QString OAINotificationDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationDto::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_context_id_isSet) {
        obj.insert(QString("contextId"), ::OpenAPI::toJsonValue(m_context_id));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("eventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_resource_uri_isSet) {
        obj.insert(QString("resourceUri"), ::OpenAPI::toJsonValue(m_resource_uri));
    }
    return obj;
}

QString OAINotificationDto::getAction() const {
    return m_action;
}
void OAINotificationDto::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAINotificationDto::is_action_Set() const{
    return m_action_isSet;
}

bool OAINotificationDto::is_action_Valid() const{
    return m_action_isValid;
}

QString OAINotificationDto::getContextId() const {
    return m_context_id;
}
void OAINotificationDto::setContextId(const QString &context_id) {
    m_context_id = context_id;
    m_context_id_isSet = true;
}

bool OAINotificationDto::is_context_id_Set() const{
    return m_context_id_isSet;
}

bool OAINotificationDto::is_context_id_Valid() const{
    return m_context_id_isValid;
}

QString OAINotificationDto::getEventId() const {
    return m_event_id;
}
void OAINotificationDto::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAINotificationDto::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAINotificationDto::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QString OAINotificationDto::getResourceUri() const {
    return m_resource_uri;
}
void OAINotificationDto::setResourceUri(const QString &resource_uri) {
    m_resource_uri = resource_uri;
    m_resource_uri_isSet = true;
}

bool OAINotificationDto::is_resource_uri_Set() const{
    return m_resource_uri_isSet;
}

bool OAINotificationDto::is_resource_uri_Valid() const{
    return m_resource_uri_isValid;
}

bool OAINotificationDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
