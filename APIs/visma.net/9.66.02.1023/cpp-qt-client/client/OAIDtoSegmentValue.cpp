/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDtoSegmentValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDtoSegmentValue::OAIDtoSegmentValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDtoSegmentValue::OAIDtoSegmentValue() {
    this->initializeModel();
}

OAIDtoSegmentValue::~OAIDtoSegmentValue() {}

void OAIDtoSegmentValue::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_mapped_seg_value_isSet = false;
    m_mapped_seg_value_isValid = false;

    m_public_id_isSet = false;
    m_public_id_isValid = false;

    m_segment_id_isSet = false;
    m_segment_id_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;

    m_value_id_isSet = false;
    m_value_id_isValid = false;
}

void OAIDtoSegmentValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDtoSegmentValue::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_mapped_seg_value_isValid = ::OpenAPI::fromJsonValue(m_mapped_seg_value, json[QString("mappedSegValue")]);
    m_mapped_seg_value_isSet = !json[QString("mappedSegValue")].isNull() && m_mapped_seg_value_isValid;

    m_public_id_isValid = ::OpenAPI::fromJsonValue(m_public_id, json[QString("publicId")]);
    m_public_id_isSet = !json[QString("publicId")].isNull() && m_public_id_isValid;

    m_segment_id_isValid = ::OpenAPI::fromJsonValue(m_segment_id, json[QString("segmentId")]);
    m_segment_id_isSet = !json[QString("segmentId")].isNull() && m_segment_id_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("timeStamp")]);
    m_time_stamp_isSet = !json[QString("timeStamp")].isNull() && m_time_stamp_isValid;

    m_value_id_isValid = ::OpenAPI::fromJsonValue(m_value_id, json[QString("valueId")]);
    m_value_id_isSet = !json[QString("valueId")].isNull() && m_value_id_isValid;
}

QString OAIDtoSegmentValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDtoSegmentValue::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_mapped_seg_value_isSet) {
        obj.insert(QString("mappedSegValue"), ::OpenAPI::toJsonValue(m_mapped_seg_value));
    }
    if (m_public_id_isSet) {
        obj.insert(QString("publicId"), ::OpenAPI::toJsonValue(m_public_id));
    }
    if (m_segment_id_isSet) {
        obj.insert(QString("segmentId"), ::OpenAPI::toJsonValue(m_segment_id));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("timeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    if (m_value_id_isSet) {
        obj.insert(QString("valueId"), ::OpenAPI::toJsonValue(m_value_id));
    }
    return obj;
}

bool OAIDtoSegmentValue::isActive() const {
    return m_active;
}
void OAIDtoSegmentValue::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIDtoSegmentValue::is_active_Set() const{
    return m_active_isSet;
}

bool OAIDtoSegmentValue::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIDtoSegmentValue::getDescription() const {
    return m_description;
}
void OAIDtoSegmentValue::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDtoSegmentValue::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDtoSegmentValue::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIDtoSegmentValue::getLastModified() const {
    return m_last_modified;
}
void OAIDtoSegmentValue::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIDtoSegmentValue::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIDtoSegmentValue::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QString OAIDtoSegmentValue::getMappedSegValue() const {
    return m_mapped_seg_value;
}
void OAIDtoSegmentValue::setMappedSegValue(const QString &mapped_seg_value) {
    m_mapped_seg_value = mapped_seg_value;
    m_mapped_seg_value_isSet = true;
}

bool OAIDtoSegmentValue::is_mapped_seg_value_Set() const{
    return m_mapped_seg_value_isSet;
}

bool OAIDtoSegmentValue::is_mapped_seg_value_Valid() const{
    return m_mapped_seg_value_isValid;
}

QString OAIDtoSegmentValue::getPublicId() const {
    return m_public_id;
}
void OAIDtoSegmentValue::setPublicId(const QString &public_id) {
    m_public_id = public_id;
    m_public_id_isSet = true;
}

bool OAIDtoSegmentValue::is_public_id_Set() const{
    return m_public_id_isSet;
}

bool OAIDtoSegmentValue::is_public_id_Valid() const{
    return m_public_id_isValid;
}

qint32 OAIDtoSegmentValue::getSegmentId() const {
    return m_segment_id;
}
void OAIDtoSegmentValue::setSegmentId(const qint32 &segment_id) {
    m_segment_id = segment_id;
    m_segment_id_isSet = true;
}

bool OAIDtoSegmentValue::is_segment_id_Set() const{
    return m_segment_id_isSet;
}

bool OAIDtoSegmentValue::is_segment_id_Valid() const{
    return m_segment_id_isValid;
}

QString OAIDtoSegmentValue::getTimeStamp() const {
    return m_time_stamp;
}
void OAIDtoSegmentValue::setTimeStamp(const QString &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIDtoSegmentValue::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIDtoSegmentValue::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

QString OAIDtoSegmentValue::getValueId() const {
    return m_value_id;
}
void OAIDtoSegmentValue::setValueId(const QString &value_id) {
    m_value_id = value_id;
    m_value_id_isSet = true;
}

bool OAIDtoSegmentValue::is_value_id_Set() const{
    return m_value_id_isSet;
}

bool OAIDtoSegmentValue::is_value_id_Valid() const{
    return m_value_id_isValid;
}

bool OAIDtoSegmentValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapped_seg_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDtoSegmentValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
