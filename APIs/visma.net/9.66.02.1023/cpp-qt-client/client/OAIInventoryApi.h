/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInventoryApi_H
#define OAI_OAIInventoryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAIBarCodeDto.h"
#include "OAIChangeInventoryNbrActionDto.h"
#include "OAIChangeInventoryNbrActionResultDto.h"
#include "OAIInventoryCrossReferenceDto.h"
#include "OAIInventoryCrossReferenceUpdateDto.h"
#include "OAIInventoryDto.h"
#include "OAIInventoryUpdateDto.h"
#include "OAIItemClassDto.h"
#include "OAIObject.h"
#include "OAIPostingClassDto.h"
#include "OAIUpdateCostActionResultDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInventoryApi : public QObject {
    Q_OBJECT

public:
    OAIInventoryApi(const int timeOut = 0);
    ~OAIInventoryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  internal_id qint32 [required]
    * @param[in]  oai_change_inventory_nbr_action_dto OAIChangeInventoryNbrActionDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryChangeInventoryNbrActionByinternalId(const qint32 &internal_id, const OAIChangeInventoryNbrActionDto &oai_change_inventory_nbr_action_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  inventory_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryCreateInventoryAttachmentByinventoryNumber(const QString &inventory_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  inventory_number QString [required]
    * @param[in]  oai_inventory_cross_reference_update_dto OAIInventoryCrossReferenceUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryCreateInventoryCrossReferencesByinventoryNumber(const QString &inventory_number, const OAIInventoryCrossReferenceUpdateDto &oai_inventory_cross_reference_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page_size qint32 [optional]
    * @param[in]  alternate_id QString [optional]
    * @param[in]  inventory_number QString [optional]
    * @param[in]  sales_category qint32 [optional]
    * @param[in]  add_cost_price_statistics bool [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  availability_last_modified_date_time QString [optional]
    * @param[in]  availability_last_modified_date_time_condition QString [optional]
    * @param[in]  inventory_types QList<QString> [optional]
    * @param[in]  expand_cross_reference bool [optional]
    * @param[in]  expand_attachment bool [optional]
    * @param[in]  expand_attribute bool [optional]
    * @param[in]  expand_warehouse_detail bool [optional]
    * @param[in]  expand_account_information bool [optional]
    * @param[in]  expand_inventory_units bool [optional]
    * @param[in]  expand_supplier_details bool [optional]
    * @param[in]  expand_sales_categories bool [optional]
    * @param[in]  expand_note bool [optional]
    * @param[in]  attachment_last_modified_date_time QString [optional]
    * @param[in]  attachment_last_modified_date_time_condition QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  created_date_time QString [optional]
    * @param[in]  created_date_time_condition QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryGetAll(const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &alternate_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &inventory_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &sales_category = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &add_cost_price_statistics = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &availability_last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &availability_last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &inventory_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &expand_cross_reference = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_attachment = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_attribute = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_warehouse_detail = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_account_information = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_inventory_units = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_supplier_details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_sales_categories = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_note = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &attachment_last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attachment_last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  inventory_id qint32 [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryGetByinventoryId(const qint32 &inventory_id, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  inventory_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryGetByinventoryNumber(const QString &inventory_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  inventory_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryGetInventoryCrossReferencesByinventoryNumber(const QString &inventory_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  receipt_nbr QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryGetInventoryPOReceiptTakeBarCodesByreceiptNbr(const QString &receipt_nbr, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_nbr QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryGetInventorySalesOrderBarCodesByorderNbr(const QString &order_nbr, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  shipment_nbr QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryGetInventoryShipmentBarCodesByshipmentNbr(const QString &shipment_nbr, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  reference_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryGetInventoryStockTakeBarCodesByreferenceNumber(const QString &reference_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryGetItemClasses(const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryGetItemPostClasses(const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item_class_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryGetSpecificItemClassByitemClassNumber(const QString &item_class_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_inventory_update_dto OAIInventoryUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryPost(const OAIInventoryUpdateDto &oai_inventory_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  inventory_id qint32 [required]
    * @param[in]  oai_inventory_update_dto OAIInventoryUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryPutByinventoryID(const qint32 &inventory_id, const OAIInventoryUpdateDto &oai_inventory_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  inventory_number QString [required]
    * @param[in]  oai_inventory_update_dto OAIInventoryUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryPutByinventoryNumber(const QString &inventory_number, const OAIInventoryUpdateDto &oai_inventory_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  inventory_cd QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryUpdateCostNonStockItemByinventoryCd(const QString &inventory_cd, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  inventory_number QString [required]
    * @param[in]  alternate_type QString [required]
    * @param[in]  alternate_id QString [required]
    * @param[in]  oai_inventory_cross_reference_update_dto OAIInventoryCrossReferenceUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryUpdateInventoryCrossReferencesByinventoryNumberalternateTypealternateId(const QString &inventory_number, const QString &alternate_type, const QString &alternate_id, const OAIInventoryCrossReferenceUpdateDto &oai_inventory_cross_reference_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void inventoryChangeInventoryNbrActionByinternalIdCallback(OAIHttpRequestWorker *worker);
    void inventoryCreateInventoryAttachmentByinventoryNumberCallback(OAIHttpRequestWorker *worker);
    void inventoryCreateInventoryCrossReferencesByinventoryNumberCallback(OAIHttpRequestWorker *worker);
    void inventoryGetAllCallback(OAIHttpRequestWorker *worker);
    void inventoryGetByinventoryIdCallback(OAIHttpRequestWorker *worker);
    void inventoryGetByinventoryNumberCallback(OAIHttpRequestWorker *worker);
    void inventoryGetInventoryCrossReferencesByinventoryNumberCallback(OAIHttpRequestWorker *worker);
    void inventoryGetInventoryPOReceiptTakeBarCodesByreceiptNbrCallback(OAIHttpRequestWorker *worker);
    void inventoryGetInventorySalesOrderBarCodesByorderNbrCallback(OAIHttpRequestWorker *worker);
    void inventoryGetInventoryShipmentBarCodesByshipmentNbrCallback(OAIHttpRequestWorker *worker);
    void inventoryGetInventoryStockTakeBarCodesByreferenceNumberCallback(OAIHttpRequestWorker *worker);
    void inventoryGetItemClassesCallback(OAIHttpRequestWorker *worker);
    void inventoryGetItemPostClassesCallback(OAIHttpRequestWorker *worker);
    void inventoryGetSpecificItemClassByitemClassNumberCallback(OAIHttpRequestWorker *worker);
    void inventoryPostCallback(OAIHttpRequestWorker *worker);
    void inventoryPutByinventoryIDCallback(OAIHttpRequestWorker *worker);
    void inventoryPutByinventoryNumberCallback(OAIHttpRequestWorker *worker);
    void inventoryUpdateCostNonStockItemByinventoryCdCallback(OAIHttpRequestWorker *worker);
    void inventoryUpdateInventoryCrossReferencesByinventoryNumberalternateTypealternateIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void inventoryChangeInventoryNbrActionByinternalIdSignal(OAIChangeInventoryNbrActionResultDto summary);
    void inventoryCreateInventoryAttachmentByinventoryNumberSignal(OAIObject summary);
    void inventoryCreateInventoryCrossReferencesByinventoryNumberSignal(OAIObject summary);
    void inventoryGetAllSignal(QList<OAIInventoryDto> summary);
    void inventoryGetByinventoryIdSignal(OAIInventoryDto summary);
    void inventoryGetByinventoryNumberSignal(OAIInventoryDto summary);
    void inventoryGetInventoryCrossReferencesByinventoryNumberSignal(QList<OAIInventoryCrossReferenceDto> summary);
    void inventoryGetInventoryPOReceiptTakeBarCodesByreceiptNbrSignal(QList<OAIBarCodeDto> summary);
    void inventoryGetInventorySalesOrderBarCodesByorderNbrSignal(QList<OAIBarCodeDto> summary);
    void inventoryGetInventoryShipmentBarCodesByshipmentNbrSignal(QList<OAIBarCodeDto> summary);
    void inventoryGetInventoryStockTakeBarCodesByreferenceNumberSignal(QList<OAIBarCodeDto> summary);
    void inventoryGetItemClassesSignal(QList<OAIItemClassDto> summary);
    void inventoryGetItemPostClassesSignal(QList<OAIPostingClassDto> summary);
    void inventoryGetSpecificItemClassByitemClassNumberSignal(OAIItemClassDto summary);
    void inventoryPostSignal(OAIObject summary);
    void inventoryPutByinventoryIDSignal(OAIBackgroundApiAcceptedDto summary);
    void inventoryPutByinventoryNumberSignal(OAIBackgroundApiAcceptedDto summary);
    void inventoryUpdateCostNonStockItemByinventoryCdSignal(OAIUpdateCostActionResultDto summary);
    void inventoryUpdateInventoryCrossReferencesByinventoryNumberalternateTypealternateIdSignal(OAIObject summary);


    void inventoryChangeInventoryNbrActionByinternalIdSignalFull(OAIHttpRequestWorker *worker, OAIChangeInventoryNbrActionResultDto summary);
    void inventoryCreateInventoryAttachmentByinventoryNumberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void inventoryCreateInventoryCrossReferencesByinventoryNumberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void inventoryGetAllSignalFull(OAIHttpRequestWorker *worker, QList<OAIInventoryDto> summary);
    void inventoryGetByinventoryIdSignalFull(OAIHttpRequestWorker *worker, OAIInventoryDto summary);
    void inventoryGetByinventoryNumberSignalFull(OAIHttpRequestWorker *worker, OAIInventoryDto summary);
    void inventoryGetInventoryCrossReferencesByinventoryNumberSignalFull(OAIHttpRequestWorker *worker, QList<OAIInventoryCrossReferenceDto> summary);
    void inventoryGetInventoryPOReceiptTakeBarCodesByreceiptNbrSignalFull(OAIHttpRequestWorker *worker, QList<OAIBarCodeDto> summary);
    void inventoryGetInventorySalesOrderBarCodesByorderNbrSignalFull(OAIHttpRequestWorker *worker, QList<OAIBarCodeDto> summary);
    void inventoryGetInventoryShipmentBarCodesByshipmentNbrSignalFull(OAIHttpRequestWorker *worker, QList<OAIBarCodeDto> summary);
    void inventoryGetInventoryStockTakeBarCodesByreferenceNumberSignalFull(OAIHttpRequestWorker *worker, QList<OAIBarCodeDto> summary);
    void inventoryGetItemClassesSignalFull(OAIHttpRequestWorker *worker, QList<OAIItemClassDto> summary);
    void inventoryGetItemPostClassesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPostingClassDto> summary);
    void inventoryGetSpecificItemClassByitemClassNumberSignalFull(OAIHttpRequestWorker *worker, OAIItemClassDto summary);
    void inventoryPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void inventoryPutByinventoryIDSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);
    void inventoryPutByinventoryNumberSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);
    void inventoryUpdateCostNonStockItemByinventoryCdSignalFull(OAIHttpRequestWorker *worker, OAIUpdateCostActionResultDto summary);
    void inventoryUpdateInventoryCrossReferencesByinventoryNumberalternateTypealternateIdSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use inventoryChangeInventoryNbrActionByinternalIdSignalError() instead")
    void inventoryChangeInventoryNbrActionByinternalIdSignalE(OAIChangeInventoryNbrActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryChangeInventoryNbrActionByinternalIdSignalError(OAIChangeInventoryNbrActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryCreateInventoryAttachmentByinventoryNumberSignalError() instead")
    void inventoryCreateInventoryAttachmentByinventoryNumberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryCreateInventoryAttachmentByinventoryNumberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryCreateInventoryCrossReferencesByinventoryNumberSignalError() instead")
    void inventoryCreateInventoryCrossReferencesByinventoryNumberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryCreateInventoryCrossReferencesByinventoryNumberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryGetAllSignalError() instead")
    void inventoryGetAllSignalE(QList<OAIInventoryDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryGetAllSignalError(QList<OAIInventoryDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryGetByinventoryIdSignalError() instead")
    void inventoryGetByinventoryIdSignalE(OAIInventoryDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryGetByinventoryIdSignalError(OAIInventoryDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryGetByinventoryNumberSignalError() instead")
    void inventoryGetByinventoryNumberSignalE(OAIInventoryDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryGetByinventoryNumberSignalError(OAIInventoryDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryGetInventoryCrossReferencesByinventoryNumberSignalError() instead")
    void inventoryGetInventoryCrossReferencesByinventoryNumberSignalE(QList<OAIInventoryCrossReferenceDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryGetInventoryCrossReferencesByinventoryNumberSignalError(QList<OAIInventoryCrossReferenceDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryGetInventoryPOReceiptTakeBarCodesByreceiptNbrSignalError() instead")
    void inventoryGetInventoryPOReceiptTakeBarCodesByreceiptNbrSignalE(QList<OAIBarCodeDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryGetInventoryPOReceiptTakeBarCodesByreceiptNbrSignalError(QList<OAIBarCodeDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryGetInventorySalesOrderBarCodesByorderNbrSignalError() instead")
    void inventoryGetInventorySalesOrderBarCodesByorderNbrSignalE(QList<OAIBarCodeDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryGetInventorySalesOrderBarCodesByorderNbrSignalError(QList<OAIBarCodeDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryGetInventoryShipmentBarCodesByshipmentNbrSignalError() instead")
    void inventoryGetInventoryShipmentBarCodesByshipmentNbrSignalE(QList<OAIBarCodeDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryGetInventoryShipmentBarCodesByshipmentNbrSignalError(QList<OAIBarCodeDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryGetInventoryStockTakeBarCodesByreferenceNumberSignalError() instead")
    void inventoryGetInventoryStockTakeBarCodesByreferenceNumberSignalE(QList<OAIBarCodeDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryGetInventoryStockTakeBarCodesByreferenceNumberSignalError(QList<OAIBarCodeDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryGetItemClassesSignalError() instead")
    void inventoryGetItemClassesSignalE(QList<OAIItemClassDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryGetItemClassesSignalError(QList<OAIItemClassDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryGetItemPostClassesSignalError() instead")
    void inventoryGetItemPostClassesSignalE(QList<OAIPostingClassDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryGetItemPostClassesSignalError(QList<OAIPostingClassDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryGetSpecificItemClassByitemClassNumberSignalError() instead")
    void inventoryGetSpecificItemClassByitemClassNumberSignalE(OAIItemClassDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryGetSpecificItemClassByitemClassNumberSignalError(OAIItemClassDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryPostSignalError() instead")
    void inventoryPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryPutByinventoryIDSignalError() instead")
    void inventoryPutByinventoryIDSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryPutByinventoryIDSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryPutByinventoryNumberSignalError() instead")
    void inventoryPutByinventoryNumberSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryPutByinventoryNumberSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryUpdateCostNonStockItemByinventoryCdSignalError() instead")
    void inventoryUpdateCostNonStockItemByinventoryCdSignalE(OAIUpdateCostActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryUpdateCostNonStockItemByinventoryCdSignalError(OAIUpdateCostActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryUpdateInventoryCrossReferencesByinventoryNumberalternateTypealternateIdSignalError() instead")
    void inventoryUpdateInventoryCrossReferencesByinventoryNumberalternateTypealternateIdSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryUpdateInventoryCrossReferencesByinventoryNumberalternateTypealternateIdSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use inventoryChangeInventoryNbrActionByinternalIdSignalErrorFull() instead")
    void inventoryChangeInventoryNbrActionByinternalIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryChangeInventoryNbrActionByinternalIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryCreateInventoryAttachmentByinventoryNumberSignalErrorFull() instead")
    void inventoryCreateInventoryAttachmentByinventoryNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryCreateInventoryAttachmentByinventoryNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryCreateInventoryCrossReferencesByinventoryNumberSignalErrorFull() instead")
    void inventoryCreateInventoryCrossReferencesByinventoryNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryCreateInventoryCrossReferencesByinventoryNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryGetAllSignalErrorFull() instead")
    void inventoryGetAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryGetAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryGetByinventoryIdSignalErrorFull() instead")
    void inventoryGetByinventoryIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryGetByinventoryIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryGetByinventoryNumberSignalErrorFull() instead")
    void inventoryGetByinventoryNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryGetByinventoryNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryGetInventoryCrossReferencesByinventoryNumberSignalErrorFull() instead")
    void inventoryGetInventoryCrossReferencesByinventoryNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryGetInventoryCrossReferencesByinventoryNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryGetInventoryPOReceiptTakeBarCodesByreceiptNbrSignalErrorFull() instead")
    void inventoryGetInventoryPOReceiptTakeBarCodesByreceiptNbrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryGetInventoryPOReceiptTakeBarCodesByreceiptNbrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryGetInventorySalesOrderBarCodesByorderNbrSignalErrorFull() instead")
    void inventoryGetInventorySalesOrderBarCodesByorderNbrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryGetInventorySalesOrderBarCodesByorderNbrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryGetInventoryShipmentBarCodesByshipmentNbrSignalErrorFull() instead")
    void inventoryGetInventoryShipmentBarCodesByshipmentNbrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryGetInventoryShipmentBarCodesByshipmentNbrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryGetInventoryStockTakeBarCodesByreferenceNumberSignalErrorFull() instead")
    void inventoryGetInventoryStockTakeBarCodesByreferenceNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryGetInventoryStockTakeBarCodesByreferenceNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryGetItemClassesSignalErrorFull() instead")
    void inventoryGetItemClassesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryGetItemClassesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryGetItemPostClassesSignalErrorFull() instead")
    void inventoryGetItemPostClassesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryGetItemPostClassesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryGetSpecificItemClassByitemClassNumberSignalErrorFull() instead")
    void inventoryGetSpecificItemClassByitemClassNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryGetSpecificItemClassByitemClassNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryPostSignalErrorFull() instead")
    void inventoryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryPutByinventoryIDSignalErrorFull() instead")
    void inventoryPutByinventoryIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryPutByinventoryIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryPutByinventoryNumberSignalErrorFull() instead")
    void inventoryPutByinventoryNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryPutByinventoryNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryUpdateCostNonStockItemByinventoryCdSignalErrorFull() instead")
    void inventoryUpdateCostNonStockItemByinventoryCdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryUpdateCostNonStockItemByinventoryCdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryUpdateInventoryCrossReferencesByinventoryNumberalternateTypealternateIdSignalErrorFull() instead")
    void inventoryUpdateInventoryCrossReferencesByinventoryNumberalternateTypealternateIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryUpdateInventoryCrossReferencesByinventoryNumberalternateTypealternateIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
