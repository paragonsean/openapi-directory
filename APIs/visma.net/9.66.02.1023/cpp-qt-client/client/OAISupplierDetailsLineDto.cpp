/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupplierDetailsLineDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupplierDetailsLineDto::OAISupplierDetailsLineDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupplierDetailsLineDto::OAISupplierDetailsLineDto() {
    this->initializeModel();
}

OAISupplierDetailsLineDto::~OAISupplierDetailsLineDto() {}

void OAISupplierDetailsLineDto::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_eoq_isSet = false;
    m_eoq_isValid = false;

    m_last_supplier_price_isSet = false;
    m_last_supplier_price_isValid = false;

    m_lead_time_isSet = false;
    m_lead_time_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_lot_size_isSet = false;
    m_lot_size_isValid = false;

    m_max_order_qty_isSet = false;
    m_max_order_qty_isValid = false;

    m_min_order_freq_isSet = false;
    m_min_order_freq_isValid = false;

    m_min_order_qty_isSet = false;
    m_min_order_qty_isValid = false;

    m_override_isSet = false;
    m_override_isValid = false;

    m_purchase_unit_isSet = false;
    m_purchase_unit_isValid = false;

    m_shipment_lead_time_isSet = false;
    m_shipment_lead_time_isValid = false;

    m_supplier_id_isSet = false;
    m_supplier_id_isValid = false;

    m_supplier_item_id_isSet = false;
    m_supplier_item_id_isValid = false;

    m_supplier_name_isSet = false;
    m_supplier_name_isValid = false;

    m_warehouse_isSet = false;
    m_warehouse_isValid = false;
}

void OAISupplierDetailsLineDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupplierDetailsLineDto::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_eoq_isValid = ::OpenAPI::fromJsonValue(m_eoq, json[QString("eoq")]);
    m_eoq_isSet = !json[QString("eoq")].isNull() && m_eoq_isValid;

    m_last_supplier_price_isValid = ::OpenAPI::fromJsonValue(m_last_supplier_price, json[QString("lastSupplierPrice")]);
    m_last_supplier_price_isSet = !json[QString("lastSupplierPrice")].isNull() && m_last_supplier_price_isValid;

    m_lead_time_isValid = ::OpenAPI::fromJsonValue(m_lead_time, json[QString("leadTime")]);
    m_lead_time_isSet = !json[QString("leadTime")].isNull() && m_lead_time_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_lot_size_isValid = ::OpenAPI::fromJsonValue(m_lot_size, json[QString("lotSize")]);
    m_lot_size_isSet = !json[QString("lotSize")].isNull() && m_lot_size_isValid;

    m_max_order_qty_isValid = ::OpenAPI::fromJsonValue(m_max_order_qty, json[QString("maxOrderQty")]);
    m_max_order_qty_isSet = !json[QString("maxOrderQty")].isNull() && m_max_order_qty_isValid;

    m_min_order_freq_isValid = ::OpenAPI::fromJsonValue(m_min_order_freq, json[QString("minOrderFreq")]);
    m_min_order_freq_isSet = !json[QString("minOrderFreq")].isNull() && m_min_order_freq_isValid;

    m_min_order_qty_isValid = ::OpenAPI::fromJsonValue(m_min_order_qty, json[QString("minOrderQty")]);
    m_min_order_qty_isSet = !json[QString("minOrderQty")].isNull() && m_min_order_qty_isValid;

    m_override_isValid = ::OpenAPI::fromJsonValue(m_override, json[QString("override")]);
    m_override_isSet = !json[QString("override")].isNull() && m_override_isValid;

    m_purchase_unit_isValid = ::OpenAPI::fromJsonValue(m_purchase_unit, json[QString("purchaseUnit")]);
    m_purchase_unit_isSet = !json[QString("purchaseUnit")].isNull() && m_purchase_unit_isValid;

    m_shipment_lead_time_isValid = ::OpenAPI::fromJsonValue(m_shipment_lead_time, json[QString("shipmentLeadTime")]);
    m_shipment_lead_time_isSet = !json[QString("shipmentLeadTime")].isNull() && m_shipment_lead_time_isValid;

    m_supplier_id_isValid = ::OpenAPI::fromJsonValue(m_supplier_id, json[QString("supplierId")]);
    m_supplier_id_isSet = !json[QString("supplierId")].isNull() && m_supplier_id_isValid;

    m_supplier_item_id_isValid = ::OpenAPI::fromJsonValue(m_supplier_item_id, json[QString("supplierItemId")]);
    m_supplier_item_id_isSet = !json[QString("supplierItemId")].isNull() && m_supplier_item_id_isValid;

    m_supplier_name_isValid = ::OpenAPI::fromJsonValue(m_supplier_name, json[QString("supplierName")]);
    m_supplier_name_isSet = !json[QString("supplierName")].isNull() && m_supplier_name_isValid;

    m_warehouse_isValid = ::OpenAPI::fromJsonValue(m_warehouse, json[QString("warehouse")]);
    m_warehouse_isSet = !json[QString("warehouse")].isNull() && m_warehouse_isValid;
}

QString OAISupplierDetailsLineDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupplierDetailsLineDto::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_currency_id_isSet) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_eoq_isSet) {
        obj.insert(QString("eoq"), ::OpenAPI::toJsonValue(m_eoq));
    }
    if (m_last_supplier_price_isSet) {
        obj.insert(QString("lastSupplierPrice"), ::OpenAPI::toJsonValue(m_last_supplier_price));
    }
    if (m_lead_time_isSet) {
        obj.insert(QString("leadTime"), ::OpenAPI::toJsonValue(m_lead_time));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_lot_size_isSet) {
        obj.insert(QString("lotSize"), ::OpenAPI::toJsonValue(m_lot_size));
    }
    if (m_max_order_qty_isSet) {
        obj.insert(QString("maxOrderQty"), ::OpenAPI::toJsonValue(m_max_order_qty));
    }
    if (m_min_order_freq_isSet) {
        obj.insert(QString("minOrderFreq"), ::OpenAPI::toJsonValue(m_min_order_freq));
    }
    if (m_min_order_qty_isSet) {
        obj.insert(QString("minOrderQty"), ::OpenAPI::toJsonValue(m_min_order_qty));
    }
    if (m_override_isSet) {
        obj.insert(QString("override"), ::OpenAPI::toJsonValue(m_override));
    }
    if (m_purchase_unit_isSet) {
        obj.insert(QString("purchaseUnit"), ::OpenAPI::toJsonValue(m_purchase_unit));
    }
    if (m_shipment_lead_time_isSet) {
        obj.insert(QString("shipmentLeadTime"), ::OpenAPI::toJsonValue(m_shipment_lead_time));
    }
    if (m_supplier_id_isSet) {
        obj.insert(QString("supplierId"), ::OpenAPI::toJsonValue(m_supplier_id));
    }
    if (m_supplier_item_id_isSet) {
        obj.insert(QString("supplierItemId"), ::OpenAPI::toJsonValue(m_supplier_item_id));
    }
    if (m_supplier_name_isSet) {
        obj.insert(QString("supplierName"), ::OpenAPI::toJsonValue(m_supplier_name));
    }
    if (m_warehouse_isSet) {
        obj.insert(QString("warehouse"), ::OpenAPI::toJsonValue(m_warehouse));
    }
    return obj;
}

bool OAISupplierDetailsLineDto::isActive() const {
    return m_active;
}
void OAISupplierDetailsLineDto::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAISupplierDetailsLineDto::is_active_Set() const{
    return m_active_isSet;
}

bool OAISupplierDetailsLineDto::is_active_Valid() const{
    return m_active_isValid;
}

QString OAISupplierDetailsLineDto::getCurrencyId() const {
    return m_currency_id;
}
void OAISupplierDetailsLineDto::setCurrencyId(const QString &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAISupplierDetailsLineDto::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAISupplierDetailsLineDto::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

bool OAISupplierDetailsLineDto::isRDefault() const {
    return m_r_default;
}
void OAISupplierDetailsLineDto::setRDefault(const bool &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAISupplierDetailsLineDto::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAISupplierDetailsLineDto::is_r_default_Valid() const{
    return m_r_default_isValid;
}

double OAISupplierDetailsLineDto::getEoq() const {
    return m_eoq;
}
void OAISupplierDetailsLineDto::setEoq(const double &eoq) {
    m_eoq = eoq;
    m_eoq_isSet = true;
}

bool OAISupplierDetailsLineDto::is_eoq_Set() const{
    return m_eoq_isSet;
}

bool OAISupplierDetailsLineDto::is_eoq_Valid() const{
    return m_eoq_isValid;
}

double OAISupplierDetailsLineDto::getLastSupplierPrice() const {
    return m_last_supplier_price;
}
void OAISupplierDetailsLineDto::setLastSupplierPrice(const double &last_supplier_price) {
    m_last_supplier_price = last_supplier_price;
    m_last_supplier_price_isSet = true;
}

bool OAISupplierDetailsLineDto::is_last_supplier_price_Set() const{
    return m_last_supplier_price_isSet;
}

bool OAISupplierDetailsLineDto::is_last_supplier_price_Valid() const{
    return m_last_supplier_price_isValid;
}

qint32 OAISupplierDetailsLineDto::getLeadTime() const {
    return m_lead_time;
}
void OAISupplierDetailsLineDto::setLeadTime(const qint32 &lead_time) {
    m_lead_time = lead_time;
    m_lead_time_isSet = true;
}

bool OAISupplierDetailsLineDto::is_lead_time_Set() const{
    return m_lead_time_isSet;
}

bool OAISupplierDetailsLineDto::is_lead_time_Valid() const{
    return m_lead_time_isValid;
}

QString OAISupplierDetailsLineDto::getLocation() const {
    return m_location;
}
void OAISupplierDetailsLineDto::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAISupplierDetailsLineDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAISupplierDetailsLineDto::is_location_Valid() const{
    return m_location_isValid;
}

double OAISupplierDetailsLineDto::getLotSize() const {
    return m_lot_size;
}
void OAISupplierDetailsLineDto::setLotSize(const double &lot_size) {
    m_lot_size = lot_size;
    m_lot_size_isSet = true;
}

bool OAISupplierDetailsLineDto::is_lot_size_Set() const{
    return m_lot_size_isSet;
}

bool OAISupplierDetailsLineDto::is_lot_size_Valid() const{
    return m_lot_size_isValid;
}

double OAISupplierDetailsLineDto::getMaxOrderQty() const {
    return m_max_order_qty;
}
void OAISupplierDetailsLineDto::setMaxOrderQty(const double &max_order_qty) {
    m_max_order_qty = max_order_qty;
    m_max_order_qty_isSet = true;
}

bool OAISupplierDetailsLineDto::is_max_order_qty_Set() const{
    return m_max_order_qty_isSet;
}

bool OAISupplierDetailsLineDto::is_max_order_qty_Valid() const{
    return m_max_order_qty_isValid;
}

qint32 OAISupplierDetailsLineDto::getMinOrderFreq() const {
    return m_min_order_freq;
}
void OAISupplierDetailsLineDto::setMinOrderFreq(const qint32 &min_order_freq) {
    m_min_order_freq = min_order_freq;
    m_min_order_freq_isSet = true;
}

bool OAISupplierDetailsLineDto::is_min_order_freq_Set() const{
    return m_min_order_freq_isSet;
}

bool OAISupplierDetailsLineDto::is_min_order_freq_Valid() const{
    return m_min_order_freq_isValid;
}

double OAISupplierDetailsLineDto::getMinOrderQty() const {
    return m_min_order_qty;
}
void OAISupplierDetailsLineDto::setMinOrderQty(const double &min_order_qty) {
    m_min_order_qty = min_order_qty;
    m_min_order_qty_isSet = true;
}

bool OAISupplierDetailsLineDto::is_min_order_qty_Set() const{
    return m_min_order_qty_isSet;
}

bool OAISupplierDetailsLineDto::is_min_order_qty_Valid() const{
    return m_min_order_qty_isValid;
}

bool OAISupplierDetailsLineDto::isOverride() const {
    return m_override;
}
void OAISupplierDetailsLineDto::setOverride(const bool &override) {
    m_override = override;
    m_override_isSet = true;
}

bool OAISupplierDetailsLineDto::is_override_Set() const{
    return m_override_isSet;
}

bool OAISupplierDetailsLineDto::is_override_Valid() const{
    return m_override_isValid;
}

QString OAISupplierDetailsLineDto::getPurchaseUnit() const {
    return m_purchase_unit;
}
void OAISupplierDetailsLineDto::setPurchaseUnit(const QString &purchase_unit) {
    m_purchase_unit = purchase_unit;
    m_purchase_unit_isSet = true;
}

bool OAISupplierDetailsLineDto::is_purchase_unit_Set() const{
    return m_purchase_unit_isSet;
}

bool OAISupplierDetailsLineDto::is_purchase_unit_Valid() const{
    return m_purchase_unit_isValid;
}

qint32 OAISupplierDetailsLineDto::getShipmentLeadTime() const {
    return m_shipment_lead_time;
}
void OAISupplierDetailsLineDto::setShipmentLeadTime(const qint32 &shipment_lead_time) {
    m_shipment_lead_time = shipment_lead_time;
    m_shipment_lead_time_isSet = true;
}

bool OAISupplierDetailsLineDto::is_shipment_lead_time_Set() const{
    return m_shipment_lead_time_isSet;
}

bool OAISupplierDetailsLineDto::is_shipment_lead_time_Valid() const{
    return m_shipment_lead_time_isValid;
}

QString OAISupplierDetailsLineDto::getSupplierId() const {
    return m_supplier_id;
}
void OAISupplierDetailsLineDto::setSupplierId(const QString &supplier_id) {
    m_supplier_id = supplier_id;
    m_supplier_id_isSet = true;
}

bool OAISupplierDetailsLineDto::is_supplier_id_Set() const{
    return m_supplier_id_isSet;
}

bool OAISupplierDetailsLineDto::is_supplier_id_Valid() const{
    return m_supplier_id_isValid;
}

QString OAISupplierDetailsLineDto::getSupplierItemId() const {
    return m_supplier_item_id;
}
void OAISupplierDetailsLineDto::setSupplierItemId(const QString &supplier_item_id) {
    m_supplier_item_id = supplier_item_id;
    m_supplier_item_id_isSet = true;
}

bool OAISupplierDetailsLineDto::is_supplier_item_id_Set() const{
    return m_supplier_item_id_isSet;
}

bool OAISupplierDetailsLineDto::is_supplier_item_id_Valid() const{
    return m_supplier_item_id_isValid;
}

QString OAISupplierDetailsLineDto::getSupplierName() const {
    return m_supplier_name;
}
void OAISupplierDetailsLineDto::setSupplierName(const QString &supplier_name) {
    m_supplier_name = supplier_name;
    m_supplier_name_isSet = true;
}

bool OAISupplierDetailsLineDto::is_supplier_name_Set() const{
    return m_supplier_name_isSet;
}

bool OAISupplierDetailsLineDto::is_supplier_name_Valid() const{
    return m_supplier_name_isValid;
}

QString OAISupplierDetailsLineDto::getWarehouse() const {
    return m_warehouse;
}
void OAISupplierDetailsLineDto::setWarehouse(const QString &warehouse) {
    m_warehouse = warehouse;
    m_warehouse_isSet = true;
}

bool OAISupplierDetailsLineDto::is_warehouse_Set() const{
    return m_warehouse_isSet;
}

bool OAISupplierDetailsLineDto::is_warehouse_Valid() const{
    return m_warehouse_isValid;
}

bool OAISupplierDetailsLineDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eoq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_supplier_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_order_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_order_freq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_order_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_lead_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupplierDetailsLineDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
