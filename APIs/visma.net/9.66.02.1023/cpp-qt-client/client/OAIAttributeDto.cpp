/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributeDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributeDto::OAIAttributeDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributeDto::OAIAttributeDto() {
    this->initializeModel();
}

OAIAttributeDto::~OAIAttributeDto() {}

void OAIAttributeDto::initializeModel() {

    m_attribute_id_isSet = false;
    m_attribute_id_isValid = false;

    m_control_type_isSet = false;
    m_control_type_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_entry_mask_isSet = false;
    m_entry_mask_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_internal_isSet = false;
    m_internal_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_reg_exp_isSet = false;
    m_reg_exp_isValid = false;
}

void OAIAttributeDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributeDto::fromJsonObject(QJsonObject json) {

    m_attribute_id_isValid = ::OpenAPI::fromJsonValue(m_attribute_id, json[QString("attributeID")]);
    m_attribute_id_isSet = !json[QString("attributeID")].isNull() && m_attribute_id_isValid;

    m_control_type_isValid = ::OpenAPI::fromJsonValue(m_control_type, json[QString("controlType")]);
    m_control_type_isSet = !json[QString("controlType")].isNull() && m_control_type_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_entry_mask_isValid = ::OpenAPI::fromJsonValue(m_entry_mask, json[QString("entryMask")]);
    m_entry_mask_isSet = !json[QString("entryMask")].isNull() && m_entry_mask_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_internal_isValid = ::OpenAPI::fromJsonValue(m_internal, json[QString("internal")]);
    m_internal_isSet = !json[QString("internal")].isNull() && m_internal_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_reg_exp_isValid = ::OpenAPI::fromJsonValue(m_reg_exp, json[QString("regExp")]);
    m_reg_exp_isSet = !json[QString("regExp")].isNull() && m_reg_exp_isValid;
}

QString OAIAttributeDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributeDto::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_id_isSet) {
        obj.insert(QString("attributeID"), ::OpenAPI::toJsonValue(m_attribute_id));
    }
    if (m_control_type_isSet) {
        obj.insert(QString("controlType"), ::OpenAPI::toJsonValue(m_control_type));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_entry_mask_isSet) {
        obj.insert(QString("entryMask"), ::OpenAPI::toJsonValue(m_entry_mask));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_internal_isSet) {
        obj.insert(QString("internal"), ::OpenAPI::toJsonValue(m_internal));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_reg_exp_isSet) {
        obj.insert(QString("regExp"), ::OpenAPI::toJsonValue(m_reg_exp));
    }
    return obj;
}

QString OAIAttributeDto::getAttributeId() const {
    return m_attribute_id;
}
void OAIAttributeDto::setAttributeId(const QString &attribute_id) {
    m_attribute_id = attribute_id;
    m_attribute_id_isSet = true;
}

bool OAIAttributeDto::is_attribute_id_Set() const{
    return m_attribute_id_isSet;
}

bool OAIAttributeDto::is_attribute_id_Valid() const{
    return m_attribute_id_isValid;
}

QString OAIAttributeDto::getControlType() const {
    return m_control_type;
}
void OAIAttributeDto::setControlType(const QString &control_type) {
    m_control_type = control_type;
    m_control_type_isSet = true;
}

bool OAIAttributeDto::is_control_type_Set() const{
    return m_control_type_isSet;
}

bool OAIAttributeDto::is_control_type_Valid() const{
    return m_control_type_isValid;
}

QDateTime OAIAttributeDto::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIAttributeDto::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIAttributeDto::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIAttributeDto::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAIAttributeDto::getDescription() const {
    return m_description;
}
void OAIAttributeDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAttributeDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAttributeDto::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIAttributeDetailDto> OAIAttributeDto::getDetails() const {
    return m_details;
}
void OAIAttributeDto::setDetails(const QList<OAIAttributeDetailDto> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIAttributeDto::is_details_Set() const{
    return m_details_isSet;
}

bool OAIAttributeDto::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIAttributeDto::getEntryMask() const {
    return m_entry_mask;
}
void OAIAttributeDto::setEntryMask(const QString &entry_mask) {
    m_entry_mask = entry_mask;
    m_entry_mask_isSet = true;
}

bool OAIAttributeDto::is_entry_mask_Set() const{
    return m_entry_mask_isSet;
}

bool OAIAttributeDto::is_entry_mask_Valid() const{
    return m_entry_mask_isValid;
}

QString OAIAttributeDto::getErrorInfo() const {
    return m_error_info;
}
void OAIAttributeDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIAttributeDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIAttributeDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

bool OAIAttributeDto::isInternal() const {
    return m_internal;
}
void OAIAttributeDto::setInternal(const bool &internal) {
    m_internal = internal;
    m_internal_isSet = true;
}

bool OAIAttributeDto::is_internal_Set() const{
    return m_internal_isSet;
}

bool OAIAttributeDto::is_internal_Valid() const{
    return m_internal_isValid;
}

QDateTime OAIAttributeDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIAttributeDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIAttributeDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIAttributeDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAIMetadataDto OAIAttributeDto::getMetadata() const {
    return m_metadata;
}
void OAIAttributeDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIAttributeDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIAttributeDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIAttributeDto::getRegExp() const {
    return m_reg_exp;
}
void OAIAttributeDto::setRegExp(const QString &reg_exp) {
    m_reg_exp = reg_exp;
    m_reg_exp_isSet = true;
}

bool OAIAttributeDto::is_reg_exp_Set() const{
    return m_reg_exp_isSet;
}

bool OAIAttributeDto::is_reg_exp_Valid() const{
    return m_reg_exp_isValid;
}

bool OAIAttributeDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reg_exp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributeDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
