/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseReceiptLineDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseReceiptLineDto::OAIPurchaseReceiptLineDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseReceiptLineDto::OAIPurchaseReceiptLineDto() {
    this->initializeModel();
}

OAIPurchaseReceiptLineDto::~OAIPurchaseReceiptLineDto() {}

void OAIPurchaseReceiptLineDto::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_account_description_isSet = false;
    m_account_description_isValid = false;

    m_actual_account_isSet = false;
    m_actual_account_isValid = false;

    m_actual_sub_isSet = false;
    m_actual_sub_isValid = false;

    m_allocations_isSet = false;
    m_allocations_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_complete_po_line_isSet = false;
    m_complete_po_line_isValid = false;

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_discount_code_isSet = false;
    m_discount_code_isValid = false;

    m_discount_percent_isSet = false;
    m_discount_percent_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_ext_cost_isSet = false;
    m_ext_cost_isValid = false;

    m_inventory_isSet = false;
    m_inventory_isValid = false;

    m_line_nbr_isSet = false;
    m_line_nbr_isValid = false;

    m_line_type_isSet = false;
    m_line_type_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_lot_serial_number_isSet = false;
    m_lot_serial_number_isValid = false;

    m_manual_discount_isSet = false;
    m_manual_discount_isValid = false;

    m_open_qty_isSet = false;
    m_open_qty_isValid = false;

    m_order_qty_isSet = false;
    m_order_qty_isValid = false;

    m_po_order_line_nbr_isSet = false;
    m_po_order_line_nbr_isValid = false;

    m_po_order_nbr_isSet = false;
    m_po_order_nbr_isValid = false;

    m_po_order_type_isSet = false;
    m_po_order_type_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_project_task_isSet = false;
    m_project_task_isValid = false;

    m_receipt_qty_isSet = false;
    m_receipt_qty_isValid = false;

    m_sub_isSet = false;
    m_sub_isValid = false;

    m_tax_category_isSet = false;
    m_tax_category_isValid = false;

    m_transaction_description_isSet = false;
    m_transaction_description_isValid = false;

    m_transfer_order_line_nbr_isSet = false;
    m_transfer_order_line_nbr_isValid = false;

    m_transfer_order_nbr_isSet = false;
    m_transfer_order_nbr_isValid = false;

    m_transfer_order_type_isSet = false;
    m_transfer_order_type_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;

    m_warehouse_isSet = false;
    m_warehouse_isValid = false;
}

void OAIPurchaseReceiptLineDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseReceiptLineDto::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_account_description_isValid = ::OpenAPI::fromJsonValue(m_account_description, json[QString("accountDescription")]);
    m_account_description_isSet = !json[QString("accountDescription")].isNull() && m_account_description_isValid;

    m_actual_account_isValid = ::OpenAPI::fromJsonValue(m_actual_account, json[QString("actualAccount")]);
    m_actual_account_isSet = !json[QString("actualAccount")].isNull() && m_actual_account_isValid;

    m_actual_sub_isValid = ::OpenAPI::fromJsonValue(m_actual_sub, json[QString("actualSub")]);
    m_actual_sub_isSet = !json[QString("actualSub")].isNull() && m_actual_sub_isValid;

    m_allocations_isValid = ::OpenAPI::fromJsonValue(m_allocations, json[QString("allocations")]);
    m_allocations_isSet = !json[QString("allocations")].isNull() && m_allocations_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_complete_po_line_isValid = ::OpenAPI::fromJsonValue(m_complete_po_line, json[QString("completePoLine")]);
    m_complete_po_line_isSet = !json[QString("completePoLine")].isNull() && m_complete_po_line_isValid;

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("discountAmount")]);
    m_discount_amount_isSet = !json[QString("discountAmount")].isNull() && m_discount_amount_isValid;

    m_discount_code_isValid = ::OpenAPI::fromJsonValue(m_discount_code, json[QString("discountCode")]);
    m_discount_code_isSet = !json[QString("discountCode")].isNull() && m_discount_code_isValid;

    m_discount_percent_isValid = ::OpenAPI::fromJsonValue(m_discount_percent, json[QString("discountPercent")]);
    m_discount_percent_isSet = !json[QString("discountPercent")].isNull() && m_discount_percent_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_ext_cost_isValid = ::OpenAPI::fromJsonValue(m_ext_cost, json[QString("extCost")]);
    m_ext_cost_isSet = !json[QString("extCost")].isNull() && m_ext_cost_isValid;

    m_inventory_isValid = ::OpenAPI::fromJsonValue(m_inventory, json[QString("inventory")]);
    m_inventory_isSet = !json[QString("inventory")].isNull() && m_inventory_isValid;

    m_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_line_nbr, json[QString("lineNbr")]);
    m_line_nbr_isSet = !json[QString("lineNbr")].isNull() && m_line_nbr_isValid;

    m_line_type_isValid = ::OpenAPI::fromJsonValue(m_line_type, json[QString("lineType")]);
    m_line_type_isSet = !json[QString("lineType")].isNull() && m_line_type_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_lot_serial_number_isValid = ::OpenAPI::fromJsonValue(m_lot_serial_number, json[QString("lotSerialNumber")]);
    m_lot_serial_number_isSet = !json[QString("lotSerialNumber")].isNull() && m_lot_serial_number_isValid;

    m_manual_discount_isValid = ::OpenAPI::fromJsonValue(m_manual_discount, json[QString("manualDiscount")]);
    m_manual_discount_isSet = !json[QString("manualDiscount")].isNull() && m_manual_discount_isValid;

    m_open_qty_isValid = ::OpenAPI::fromJsonValue(m_open_qty, json[QString("openQty")]);
    m_open_qty_isSet = !json[QString("openQty")].isNull() && m_open_qty_isValid;

    m_order_qty_isValid = ::OpenAPI::fromJsonValue(m_order_qty, json[QString("orderQty")]);
    m_order_qty_isSet = !json[QString("orderQty")].isNull() && m_order_qty_isValid;

    m_po_order_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_po_order_line_nbr, json[QString("poOrderLineNbr")]);
    m_po_order_line_nbr_isSet = !json[QString("poOrderLineNbr")].isNull() && m_po_order_line_nbr_isValid;

    m_po_order_nbr_isValid = ::OpenAPI::fromJsonValue(m_po_order_nbr, json[QString("poOrderNbr")]);
    m_po_order_nbr_isSet = !json[QString("poOrderNbr")].isNull() && m_po_order_nbr_isValid;

    m_po_order_type_isValid = ::OpenAPI::fromJsonValue(m_po_order_type, json[QString("poOrderType")]);
    m_po_order_type_isSet = !json[QString("poOrderType")].isNull() && m_po_order_type_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_project_task_isValid = ::OpenAPI::fromJsonValue(m_project_task, json[QString("projectTask")]);
    m_project_task_isSet = !json[QString("projectTask")].isNull() && m_project_task_isValid;

    m_receipt_qty_isValid = ::OpenAPI::fromJsonValue(m_receipt_qty, json[QString("receiptQty")]);
    m_receipt_qty_isSet = !json[QString("receiptQty")].isNull() && m_receipt_qty_isValid;

    m_sub_isValid = ::OpenAPI::fromJsonValue(m_sub, json[QString("sub")]);
    m_sub_isSet = !json[QString("sub")].isNull() && m_sub_isValid;

    m_tax_category_isValid = ::OpenAPI::fromJsonValue(m_tax_category, json[QString("taxCategory")]);
    m_tax_category_isSet = !json[QString("taxCategory")].isNull() && m_tax_category_isValid;

    m_transaction_description_isValid = ::OpenAPI::fromJsonValue(m_transaction_description, json[QString("transactionDescription")]);
    m_transaction_description_isSet = !json[QString("transactionDescription")].isNull() && m_transaction_description_isValid;

    m_transfer_order_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_transfer_order_line_nbr, json[QString("transferOrderLineNbr")]);
    m_transfer_order_line_nbr_isSet = !json[QString("transferOrderLineNbr")].isNull() && m_transfer_order_line_nbr_isValid;

    m_transfer_order_nbr_isValid = ::OpenAPI::fromJsonValue(m_transfer_order_nbr, json[QString("transferOrderNbr")]);
    m_transfer_order_nbr_isSet = !json[QString("transferOrderNbr")].isNull() && m_transfer_order_nbr_isValid;

    m_transfer_order_type_isValid = ::OpenAPI::fromJsonValue(m_transfer_order_type, json[QString("transferOrderType")]);
    m_transfer_order_type_isSet = !json[QString("transferOrderType")].isNull() && m_transfer_order_type_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;

    m_warehouse_isValid = ::OpenAPI::fromJsonValue(m_warehouse, json[QString("warehouse")]);
    m_warehouse_isSet = !json[QString("warehouse")].isNull() && m_warehouse_isValid;
}

QString OAIPurchaseReceiptLineDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseReceiptLineDto::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_account_description_isSet) {
        obj.insert(QString("accountDescription"), ::OpenAPI::toJsonValue(m_account_description));
    }
    if (m_actual_account.isSet()) {
        obj.insert(QString("actualAccount"), ::OpenAPI::toJsonValue(m_actual_account));
    }
    if (m_actual_sub.isSet()) {
        obj.insert(QString("actualSub"), ::OpenAPI::toJsonValue(m_actual_sub));
    }
    if (m_allocations.size() > 0) {
        obj.insert(QString("allocations"), ::OpenAPI::toJsonValue(m_allocations));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_complete_po_line_isSet) {
        obj.insert(QString("completePoLine"), ::OpenAPI::toJsonValue(m_complete_po_line));
    }
    if (m_discount_amount_isSet) {
        obj.insert(QString("discountAmount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_discount_code.isSet()) {
        obj.insert(QString("discountCode"), ::OpenAPI::toJsonValue(m_discount_code));
    }
    if (m_discount_percent_isSet) {
        obj.insert(QString("discountPercent"), ::OpenAPI::toJsonValue(m_discount_percent));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_ext_cost_isSet) {
        obj.insert(QString("extCost"), ::OpenAPI::toJsonValue(m_ext_cost));
    }
    if (m_inventory.isSet()) {
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(m_inventory));
    }
    if (m_line_nbr_isSet) {
        obj.insert(QString("lineNbr"), ::OpenAPI::toJsonValue(m_line_nbr));
    }
    if (m_line_type_isSet) {
        obj.insert(QString("lineType"), ::OpenAPI::toJsonValue(m_line_type));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_lot_serial_number_isSet) {
        obj.insert(QString("lotSerialNumber"), ::OpenAPI::toJsonValue(m_lot_serial_number));
    }
    if (m_manual_discount_isSet) {
        obj.insert(QString("manualDiscount"), ::OpenAPI::toJsonValue(m_manual_discount));
    }
    if (m_open_qty_isSet) {
        obj.insert(QString("openQty"), ::OpenAPI::toJsonValue(m_open_qty));
    }
    if (m_order_qty_isSet) {
        obj.insert(QString("orderQty"), ::OpenAPI::toJsonValue(m_order_qty));
    }
    if (m_po_order_line_nbr_isSet) {
        obj.insert(QString("poOrderLineNbr"), ::OpenAPI::toJsonValue(m_po_order_line_nbr));
    }
    if (m_po_order_nbr_isSet) {
        obj.insert(QString("poOrderNbr"), ::OpenAPI::toJsonValue(m_po_order_nbr));
    }
    if (m_po_order_type_isSet) {
        obj.insert(QString("poOrderType"), ::OpenAPI::toJsonValue(m_po_order_type));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_project_task.isSet()) {
        obj.insert(QString("projectTask"), ::OpenAPI::toJsonValue(m_project_task));
    }
    if (m_receipt_qty_isSet) {
        obj.insert(QString("receiptQty"), ::OpenAPI::toJsonValue(m_receipt_qty));
    }
    if (m_sub.isSet()) {
        obj.insert(QString("sub"), ::OpenAPI::toJsonValue(m_sub));
    }
    if (m_tax_category.isSet()) {
        obj.insert(QString("taxCategory"), ::OpenAPI::toJsonValue(m_tax_category));
    }
    if (m_transaction_description_isSet) {
        obj.insert(QString("transactionDescription"), ::OpenAPI::toJsonValue(m_transaction_description));
    }
    if (m_transfer_order_line_nbr_isSet) {
        obj.insert(QString("transferOrderLineNbr"), ::OpenAPI::toJsonValue(m_transfer_order_line_nbr));
    }
    if (m_transfer_order_nbr_isSet) {
        obj.insert(QString("transferOrderNbr"), ::OpenAPI::toJsonValue(m_transfer_order_nbr));
    }
    if (m_transfer_order_type_isSet) {
        obj.insert(QString("transferOrderType"), ::OpenAPI::toJsonValue(m_transfer_order_type));
    }
    if (m_unit_cost_isSet) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_uom_isSet) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    if (m_warehouse.isSet()) {
        obj.insert(QString("warehouse"), ::OpenAPI::toJsonValue(m_warehouse));
    }
    return obj;
}

OAIAccountInPurchaseReceiptLineDto OAIPurchaseReceiptLineDto::getAccount() const {
    return m_account;
}
void OAIPurchaseReceiptLineDto::setAccount(const OAIAccountInPurchaseReceiptLineDto &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_account_Set() const{
    return m_account_isSet;
}

bool OAIPurchaseReceiptLineDto::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIPurchaseReceiptLineDto::getAccountDescription() const {
    return m_account_description;
}
void OAIPurchaseReceiptLineDto::setAccountDescription(const QString &account_description) {
    m_account_description = account_description;
    m_account_description_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_account_description_Set() const{
    return m_account_description_isSet;
}

bool OAIPurchaseReceiptLineDto::is_account_description_Valid() const{
    return m_account_description_isValid;
}

OAIActualAccountInPurchaseReceiptLineDto OAIPurchaseReceiptLineDto::getActualAccount() const {
    return m_actual_account;
}
void OAIPurchaseReceiptLineDto::setActualAccount(const OAIActualAccountInPurchaseReceiptLineDto &actual_account) {
    m_actual_account = actual_account;
    m_actual_account_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_actual_account_Set() const{
    return m_actual_account_isSet;
}

bool OAIPurchaseReceiptLineDto::is_actual_account_Valid() const{
    return m_actual_account_isValid;
}

OAIActualSubInPurchaseReceiptLineDto OAIPurchaseReceiptLineDto::getActualSub() const {
    return m_actual_sub;
}
void OAIPurchaseReceiptLineDto::setActualSub(const OAIActualSubInPurchaseReceiptLineDto &actual_sub) {
    m_actual_sub = actual_sub;
    m_actual_sub_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_actual_sub_Set() const{
    return m_actual_sub_isSet;
}

bool OAIPurchaseReceiptLineDto::is_actual_sub_Valid() const{
    return m_actual_sub_isValid;
}

QList<OAIAllocationsDto> OAIPurchaseReceiptLineDto::getAllocations() const {
    return m_allocations;
}
void OAIPurchaseReceiptLineDto::setAllocations(const QList<OAIAllocationsDto> &allocations) {
    m_allocations = allocations;
    m_allocations_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_allocations_Set() const{
    return m_allocations_isSet;
}

bool OAIPurchaseReceiptLineDto::is_allocations_Valid() const{
    return m_allocations_isValid;
}

double OAIPurchaseReceiptLineDto::getAmount() const {
    return m_amount;
}
void OAIPurchaseReceiptLineDto::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPurchaseReceiptLineDto::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIBranchInPurchaseReceiptLineDto OAIPurchaseReceiptLineDto::getBranch() const {
    return m_branch;
}
void OAIPurchaseReceiptLineDto::setBranch(const OAIBranchInPurchaseReceiptLineDto &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIPurchaseReceiptLineDto::is_branch_Valid() const{
    return m_branch_isValid;
}

OAIBranchNumberInPurchaseReceiptLineDto OAIPurchaseReceiptLineDto::getBranchNumber() const {
    return m_branch_number;
}
void OAIPurchaseReceiptLineDto::setBranchNumber(const OAIBranchNumberInPurchaseReceiptLineDto &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAIPurchaseReceiptLineDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

bool OAIPurchaseReceiptLineDto::isCompletePoLine() const {
    return m_complete_po_line;
}
void OAIPurchaseReceiptLineDto::setCompletePoLine(const bool &complete_po_line) {
    m_complete_po_line = complete_po_line;
    m_complete_po_line_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_complete_po_line_Set() const{
    return m_complete_po_line_isSet;
}

bool OAIPurchaseReceiptLineDto::is_complete_po_line_Valid() const{
    return m_complete_po_line_isValid;
}

double OAIPurchaseReceiptLineDto::getDiscountAmount() const {
    return m_discount_amount;
}
void OAIPurchaseReceiptLineDto::setDiscountAmount(const double &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAIPurchaseReceiptLineDto::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

OAIDiscountCodeInPurchaseReceiptLineDto OAIPurchaseReceiptLineDto::getDiscountCode() const {
    return m_discount_code;
}
void OAIPurchaseReceiptLineDto::setDiscountCode(const OAIDiscountCodeInPurchaseReceiptLineDto &discount_code) {
    m_discount_code = discount_code;
    m_discount_code_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_discount_code_Set() const{
    return m_discount_code_isSet;
}

bool OAIPurchaseReceiptLineDto::is_discount_code_Valid() const{
    return m_discount_code_isValid;
}

double OAIPurchaseReceiptLineDto::getDiscountPercent() const {
    return m_discount_percent;
}
void OAIPurchaseReceiptLineDto::setDiscountPercent(const double &discount_percent) {
    m_discount_percent = discount_percent;
    m_discount_percent_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_discount_percent_Set() const{
    return m_discount_percent_isSet;
}

bool OAIPurchaseReceiptLineDto::is_discount_percent_Valid() const{
    return m_discount_percent_isValid;
}

QDateTime OAIPurchaseReceiptLineDto::getExpirationDate() const {
    return m_expiration_date;
}
void OAIPurchaseReceiptLineDto::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIPurchaseReceiptLineDto::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

double OAIPurchaseReceiptLineDto::getExtCost() const {
    return m_ext_cost;
}
void OAIPurchaseReceiptLineDto::setExtCost(const double &ext_cost) {
    m_ext_cost = ext_cost;
    m_ext_cost_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_ext_cost_Set() const{
    return m_ext_cost_isSet;
}

bool OAIPurchaseReceiptLineDto::is_ext_cost_Valid() const{
    return m_ext_cost_isValid;
}

OAIInventoryNumberDescriptionDto OAIPurchaseReceiptLineDto::getInventory() const {
    return m_inventory;
}
void OAIPurchaseReceiptLineDto::setInventory(const OAIInventoryNumberDescriptionDto &inventory) {
    m_inventory = inventory;
    m_inventory_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_inventory_Set() const{
    return m_inventory_isSet;
}

bool OAIPurchaseReceiptLineDto::is_inventory_Valid() const{
    return m_inventory_isValid;
}

qint32 OAIPurchaseReceiptLineDto::getLineNbr() const {
    return m_line_nbr;
}
void OAIPurchaseReceiptLineDto::setLineNbr(const qint32 &line_nbr) {
    m_line_nbr = line_nbr;
    m_line_nbr_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_line_nbr_Set() const{
    return m_line_nbr_isSet;
}

bool OAIPurchaseReceiptLineDto::is_line_nbr_Valid() const{
    return m_line_nbr_isValid;
}

QString OAIPurchaseReceiptLineDto::getLineType() const {
    return m_line_type;
}
void OAIPurchaseReceiptLineDto::setLineType(const QString &line_type) {
    m_line_type = line_type;
    m_line_type_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_line_type_Set() const{
    return m_line_type_isSet;
}

bool OAIPurchaseReceiptLineDto::is_line_type_Valid() const{
    return m_line_type_isValid;
}

OAILocationInPurchaseReceiptLineDto OAIPurchaseReceiptLineDto::getLocation() const {
    return m_location;
}
void OAIPurchaseReceiptLineDto::setLocation(const OAILocationInPurchaseReceiptLineDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIPurchaseReceiptLineDto::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIPurchaseReceiptLineDto::getLotSerialNumber() const {
    return m_lot_serial_number;
}
void OAIPurchaseReceiptLineDto::setLotSerialNumber(const QString &lot_serial_number) {
    m_lot_serial_number = lot_serial_number;
    m_lot_serial_number_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_lot_serial_number_Set() const{
    return m_lot_serial_number_isSet;
}

bool OAIPurchaseReceiptLineDto::is_lot_serial_number_Valid() const{
    return m_lot_serial_number_isValid;
}

bool OAIPurchaseReceiptLineDto::isManualDiscount() const {
    return m_manual_discount;
}
void OAIPurchaseReceiptLineDto::setManualDiscount(const bool &manual_discount) {
    m_manual_discount = manual_discount;
    m_manual_discount_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_manual_discount_Set() const{
    return m_manual_discount_isSet;
}

bool OAIPurchaseReceiptLineDto::is_manual_discount_Valid() const{
    return m_manual_discount_isValid;
}

double OAIPurchaseReceiptLineDto::getOpenQty() const {
    return m_open_qty;
}
void OAIPurchaseReceiptLineDto::setOpenQty(const double &open_qty) {
    m_open_qty = open_qty;
    m_open_qty_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_open_qty_Set() const{
    return m_open_qty_isSet;
}

bool OAIPurchaseReceiptLineDto::is_open_qty_Valid() const{
    return m_open_qty_isValid;
}

double OAIPurchaseReceiptLineDto::getOrderQty() const {
    return m_order_qty;
}
void OAIPurchaseReceiptLineDto::setOrderQty(const double &order_qty) {
    m_order_qty = order_qty;
    m_order_qty_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_order_qty_Set() const{
    return m_order_qty_isSet;
}

bool OAIPurchaseReceiptLineDto::is_order_qty_Valid() const{
    return m_order_qty_isValid;
}

qint32 OAIPurchaseReceiptLineDto::getPoOrderLineNbr() const {
    return m_po_order_line_nbr;
}
void OAIPurchaseReceiptLineDto::setPoOrderLineNbr(const qint32 &po_order_line_nbr) {
    m_po_order_line_nbr = po_order_line_nbr;
    m_po_order_line_nbr_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_po_order_line_nbr_Set() const{
    return m_po_order_line_nbr_isSet;
}

bool OAIPurchaseReceiptLineDto::is_po_order_line_nbr_Valid() const{
    return m_po_order_line_nbr_isValid;
}

QString OAIPurchaseReceiptLineDto::getPoOrderNbr() const {
    return m_po_order_nbr;
}
void OAIPurchaseReceiptLineDto::setPoOrderNbr(const QString &po_order_nbr) {
    m_po_order_nbr = po_order_nbr;
    m_po_order_nbr_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_po_order_nbr_Set() const{
    return m_po_order_nbr_isSet;
}

bool OAIPurchaseReceiptLineDto::is_po_order_nbr_Valid() const{
    return m_po_order_nbr_isValid;
}

QString OAIPurchaseReceiptLineDto::getPoOrderType() const {
    return m_po_order_type;
}
void OAIPurchaseReceiptLineDto::setPoOrderType(const QString &po_order_type) {
    m_po_order_type = po_order_type;
    m_po_order_type_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_po_order_type_Set() const{
    return m_po_order_type_isSet;
}

bool OAIPurchaseReceiptLineDto::is_po_order_type_Valid() const{
    return m_po_order_type_isValid;
}

OAIProjectInPurchaseReceiptLineDto OAIPurchaseReceiptLineDto::getProject() const {
    return m_project;
}
void OAIPurchaseReceiptLineDto::setProject(const OAIProjectInPurchaseReceiptLineDto &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_project_Set() const{
    return m_project_isSet;
}

bool OAIPurchaseReceiptLineDto::is_project_Valid() const{
    return m_project_isValid;
}

OAIProjectTaskInPurchaseReceiptLineDto OAIPurchaseReceiptLineDto::getProjectTask() const {
    return m_project_task;
}
void OAIPurchaseReceiptLineDto::setProjectTask(const OAIProjectTaskInPurchaseReceiptLineDto &project_task) {
    m_project_task = project_task;
    m_project_task_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_project_task_Set() const{
    return m_project_task_isSet;
}

bool OAIPurchaseReceiptLineDto::is_project_task_Valid() const{
    return m_project_task_isValid;
}

double OAIPurchaseReceiptLineDto::getReceiptQty() const {
    return m_receipt_qty;
}
void OAIPurchaseReceiptLineDto::setReceiptQty(const double &receipt_qty) {
    m_receipt_qty = receipt_qty;
    m_receipt_qty_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_receipt_qty_Set() const{
    return m_receipt_qty_isSet;
}

bool OAIPurchaseReceiptLineDto::is_receipt_qty_Valid() const{
    return m_receipt_qty_isValid;
}

OAISubInPurchaseReceiptLineDto OAIPurchaseReceiptLineDto::getSub() const {
    return m_sub;
}
void OAIPurchaseReceiptLineDto::setSub(const OAISubInPurchaseReceiptLineDto &sub) {
    m_sub = sub;
    m_sub_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_sub_Set() const{
    return m_sub_isSet;
}

bool OAIPurchaseReceiptLineDto::is_sub_Valid() const{
    return m_sub_isValid;
}

OAITaxCategoryInPurchaseReceiptLineDto OAIPurchaseReceiptLineDto::getTaxCategory() const {
    return m_tax_category;
}
void OAIPurchaseReceiptLineDto::setTaxCategory(const OAITaxCategoryInPurchaseReceiptLineDto &tax_category) {
    m_tax_category = tax_category;
    m_tax_category_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_tax_category_Set() const{
    return m_tax_category_isSet;
}

bool OAIPurchaseReceiptLineDto::is_tax_category_Valid() const{
    return m_tax_category_isValid;
}

QString OAIPurchaseReceiptLineDto::getTransactionDescription() const {
    return m_transaction_description;
}
void OAIPurchaseReceiptLineDto::setTransactionDescription(const QString &transaction_description) {
    m_transaction_description = transaction_description;
    m_transaction_description_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_transaction_description_Set() const{
    return m_transaction_description_isSet;
}

bool OAIPurchaseReceiptLineDto::is_transaction_description_Valid() const{
    return m_transaction_description_isValid;
}

qint32 OAIPurchaseReceiptLineDto::getTransferOrderLineNbr() const {
    return m_transfer_order_line_nbr;
}
void OAIPurchaseReceiptLineDto::setTransferOrderLineNbr(const qint32 &transfer_order_line_nbr) {
    m_transfer_order_line_nbr = transfer_order_line_nbr;
    m_transfer_order_line_nbr_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_transfer_order_line_nbr_Set() const{
    return m_transfer_order_line_nbr_isSet;
}

bool OAIPurchaseReceiptLineDto::is_transfer_order_line_nbr_Valid() const{
    return m_transfer_order_line_nbr_isValid;
}

QString OAIPurchaseReceiptLineDto::getTransferOrderNbr() const {
    return m_transfer_order_nbr;
}
void OAIPurchaseReceiptLineDto::setTransferOrderNbr(const QString &transfer_order_nbr) {
    m_transfer_order_nbr = transfer_order_nbr;
    m_transfer_order_nbr_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_transfer_order_nbr_Set() const{
    return m_transfer_order_nbr_isSet;
}

bool OAIPurchaseReceiptLineDto::is_transfer_order_nbr_Valid() const{
    return m_transfer_order_nbr_isValid;
}

QString OAIPurchaseReceiptLineDto::getTransferOrderType() const {
    return m_transfer_order_type;
}
void OAIPurchaseReceiptLineDto::setTransferOrderType(const QString &transfer_order_type) {
    m_transfer_order_type = transfer_order_type;
    m_transfer_order_type_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_transfer_order_type_Set() const{
    return m_transfer_order_type_isSet;
}

bool OAIPurchaseReceiptLineDto::is_transfer_order_type_Valid() const{
    return m_transfer_order_type_isValid;
}

double OAIPurchaseReceiptLineDto::getUnitCost() const {
    return m_unit_cost;
}
void OAIPurchaseReceiptLineDto::setUnitCost(const double &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAIPurchaseReceiptLineDto::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

QString OAIPurchaseReceiptLineDto::getUom() const {
    return m_uom;
}
void OAIPurchaseReceiptLineDto::setUom(const QString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAIPurchaseReceiptLineDto::is_uom_Valid() const{
    return m_uom_isValid;
}

OAIWarehouseInPurchaseReceiptLineDto OAIPurchaseReceiptLineDto::getWarehouse() const {
    return m_warehouse;
}
void OAIPurchaseReceiptLineDto::setWarehouse(const OAIWarehouseInPurchaseReceiptLineDto &warehouse) {
    m_warehouse = warehouse;
    m_warehouse_isSet = true;
}

bool OAIPurchaseReceiptLineDto::is_warehouse_Set() const{
    return m_warehouse_isSet;
}

bool OAIPurchaseReceiptLineDto::is_warehouse_Valid() const{
    return m_warehouse_isValid;
}

bool OAIPurchaseReceiptLineDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_sub.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_complete_po_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ext_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_order_line_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_order_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_order_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_order_line_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_order_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_order_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseReceiptLineDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
