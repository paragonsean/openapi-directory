/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerContractDetailsLineDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerContractDetailsLineDto::OAICustomerContractDetailsLineDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerContractDetailsLineDto::OAICustomerContractDetailsLineDto() {
    this->initializeModel();
}

OAICustomerContractDetailsLineDto::~OAICustomerContractDetailsLineDto() {}

void OAICustomerContractDetailsLineDto::initializeModel() {

    m_contract_detail_id_isSet = false;
    m_contract_detail_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_difference_isSet = false;
    m_difference_isValid = false;

    m_extra_usage_price_isSet = false;
    m_extra_usage_price_isValid = false;

    m_included_isSet = false;
    m_included_isValid = false;

    m_invoice_type_isSet = false;
    m_invoice_type_isValid = false;

    m_item_code_isSet = false;
    m_item_code_isValid = false;

    m_recurring_discount_isSet = false;
    m_recurring_discount_isValid = false;

    m_recurring_price_isSet = false;
    m_recurring_price_isValid = false;

    m_renewal_discount_isSet = false;
    m_renewal_discount_isValid = false;

    m_renewal_price_isSet = false;
    m_renewal_price_isValid = false;

    m_setup_discount_isSet = false;
    m_setup_discount_isValid = false;

    m_setup_price_isSet = false;
    m_setup_price_isValid = false;
}

void OAICustomerContractDetailsLineDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerContractDetailsLineDto::fromJsonObject(QJsonObject json) {

    m_contract_detail_id_isValid = ::OpenAPI::fromJsonValue(m_contract_detail_id, json[QString("contractDetailId")]);
    m_contract_detail_id_isSet = !json[QString("contractDetailId")].isNull() && m_contract_detail_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_difference_isValid = ::OpenAPI::fromJsonValue(m_difference, json[QString("difference")]);
    m_difference_isSet = !json[QString("difference")].isNull() && m_difference_isValid;

    m_extra_usage_price_isValid = ::OpenAPI::fromJsonValue(m_extra_usage_price, json[QString("extraUsagePrice")]);
    m_extra_usage_price_isSet = !json[QString("extraUsagePrice")].isNull() && m_extra_usage_price_isValid;

    m_included_isValid = ::OpenAPI::fromJsonValue(m_included, json[QString("included")]);
    m_included_isSet = !json[QString("included")].isNull() && m_included_isValid;

    m_invoice_type_isValid = ::OpenAPI::fromJsonValue(m_invoice_type, json[QString("invoiceType")]);
    m_invoice_type_isSet = !json[QString("invoiceType")].isNull() && m_invoice_type_isValid;

    m_item_code_isValid = ::OpenAPI::fromJsonValue(m_item_code, json[QString("itemCode")]);
    m_item_code_isSet = !json[QString("itemCode")].isNull() && m_item_code_isValid;

    m_recurring_discount_isValid = ::OpenAPI::fromJsonValue(m_recurring_discount, json[QString("recurringDiscount")]);
    m_recurring_discount_isSet = !json[QString("recurringDiscount")].isNull() && m_recurring_discount_isValid;

    m_recurring_price_isValid = ::OpenAPI::fromJsonValue(m_recurring_price, json[QString("recurringPrice")]);
    m_recurring_price_isSet = !json[QString("recurringPrice")].isNull() && m_recurring_price_isValid;

    m_renewal_discount_isValid = ::OpenAPI::fromJsonValue(m_renewal_discount, json[QString("renewalDiscount")]);
    m_renewal_discount_isSet = !json[QString("renewalDiscount")].isNull() && m_renewal_discount_isValid;

    m_renewal_price_isValid = ::OpenAPI::fromJsonValue(m_renewal_price, json[QString("renewalPrice")]);
    m_renewal_price_isSet = !json[QString("renewalPrice")].isNull() && m_renewal_price_isValid;

    m_setup_discount_isValid = ::OpenAPI::fromJsonValue(m_setup_discount, json[QString("setupDiscount")]);
    m_setup_discount_isSet = !json[QString("setupDiscount")].isNull() && m_setup_discount_isValid;

    m_setup_price_isValid = ::OpenAPI::fromJsonValue(m_setup_price, json[QString("setupPrice")]);
    m_setup_price_isSet = !json[QString("setupPrice")].isNull() && m_setup_price_isValid;
}

QString OAICustomerContractDetailsLineDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerContractDetailsLineDto::asJsonObject() const {
    QJsonObject obj;
    if (m_contract_detail_id_isSet) {
        obj.insert(QString("contractDetailId"), ::OpenAPI::toJsonValue(m_contract_detail_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_difference_isSet) {
        obj.insert(QString("difference"), ::OpenAPI::toJsonValue(m_difference));
    }
    if (m_extra_usage_price_isSet) {
        obj.insert(QString("extraUsagePrice"), ::OpenAPI::toJsonValue(m_extra_usage_price));
    }
    if (m_included_isSet) {
        obj.insert(QString("included"), ::OpenAPI::toJsonValue(m_included));
    }
    if (m_invoice_type_isSet) {
        obj.insert(QString("invoiceType"), ::OpenAPI::toJsonValue(m_invoice_type));
    }
    if (m_item_code_isSet) {
        obj.insert(QString("itemCode"), ::OpenAPI::toJsonValue(m_item_code));
    }
    if (m_recurring_discount_isSet) {
        obj.insert(QString("recurringDiscount"), ::OpenAPI::toJsonValue(m_recurring_discount));
    }
    if (m_recurring_price_isSet) {
        obj.insert(QString("recurringPrice"), ::OpenAPI::toJsonValue(m_recurring_price));
    }
    if (m_renewal_discount_isSet) {
        obj.insert(QString("renewalDiscount"), ::OpenAPI::toJsonValue(m_renewal_discount));
    }
    if (m_renewal_price_isSet) {
        obj.insert(QString("renewalPrice"), ::OpenAPI::toJsonValue(m_renewal_price));
    }
    if (m_setup_discount_isSet) {
        obj.insert(QString("setupDiscount"), ::OpenAPI::toJsonValue(m_setup_discount));
    }
    if (m_setup_price_isSet) {
        obj.insert(QString("setupPrice"), ::OpenAPI::toJsonValue(m_setup_price));
    }
    return obj;
}

qint32 OAICustomerContractDetailsLineDto::getContractDetailId() const {
    return m_contract_detail_id;
}
void OAICustomerContractDetailsLineDto::setContractDetailId(const qint32 &contract_detail_id) {
    m_contract_detail_id = contract_detail_id;
    m_contract_detail_id_isSet = true;
}

bool OAICustomerContractDetailsLineDto::is_contract_detail_id_Set() const{
    return m_contract_detail_id_isSet;
}

bool OAICustomerContractDetailsLineDto::is_contract_detail_id_Valid() const{
    return m_contract_detail_id_isValid;
}

QString OAICustomerContractDetailsLineDto::getDescription() const {
    return m_description;
}
void OAICustomerContractDetailsLineDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICustomerContractDetailsLineDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAICustomerContractDetailsLineDto::is_description_Valid() const{
    return m_description_isValid;
}

double OAICustomerContractDetailsLineDto::getDifference() const {
    return m_difference;
}
void OAICustomerContractDetailsLineDto::setDifference(const double &difference) {
    m_difference = difference;
    m_difference_isSet = true;
}

bool OAICustomerContractDetailsLineDto::is_difference_Set() const{
    return m_difference_isSet;
}

bool OAICustomerContractDetailsLineDto::is_difference_Valid() const{
    return m_difference_isValid;
}

double OAICustomerContractDetailsLineDto::getExtraUsagePrice() const {
    return m_extra_usage_price;
}
void OAICustomerContractDetailsLineDto::setExtraUsagePrice(const double &extra_usage_price) {
    m_extra_usage_price = extra_usage_price;
    m_extra_usage_price_isSet = true;
}

bool OAICustomerContractDetailsLineDto::is_extra_usage_price_Set() const{
    return m_extra_usage_price_isSet;
}

bool OAICustomerContractDetailsLineDto::is_extra_usage_price_Valid() const{
    return m_extra_usage_price_isValid;
}

double OAICustomerContractDetailsLineDto::getIncluded() const {
    return m_included;
}
void OAICustomerContractDetailsLineDto::setIncluded(const double &included) {
    m_included = included;
    m_included_isSet = true;
}

bool OAICustomerContractDetailsLineDto::is_included_Set() const{
    return m_included_isSet;
}

bool OAICustomerContractDetailsLineDto::is_included_Valid() const{
    return m_included_isValid;
}

QString OAICustomerContractDetailsLineDto::getInvoiceType() const {
    return m_invoice_type;
}
void OAICustomerContractDetailsLineDto::setInvoiceType(const QString &invoice_type) {
    m_invoice_type = invoice_type;
    m_invoice_type_isSet = true;
}

bool OAICustomerContractDetailsLineDto::is_invoice_type_Set() const{
    return m_invoice_type_isSet;
}

bool OAICustomerContractDetailsLineDto::is_invoice_type_Valid() const{
    return m_invoice_type_isValid;
}

QString OAICustomerContractDetailsLineDto::getItemCode() const {
    return m_item_code;
}
void OAICustomerContractDetailsLineDto::setItemCode(const QString &item_code) {
    m_item_code = item_code;
    m_item_code_isSet = true;
}

bool OAICustomerContractDetailsLineDto::is_item_code_Set() const{
    return m_item_code_isSet;
}

bool OAICustomerContractDetailsLineDto::is_item_code_Valid() const{
    return m_item_code_isValid;
}

double OAICustomerContractDetailsLineDto::getRecurringDiscount() const {
    return m_recurring_discount;
}
void OAICustomerContractDetailsLineDto::setRecurringDiscount(const double &recurring_discount) {
    m_recurring_discount = recurring_discount;
    m_recurring_discount_isSet = true;
}

bool OAICustomerContractDetailsLineDto::is_recurring_discount_Set() const{
    return m_recurring_discount_isSet;
}

bool OAICustomerContractDetailsLineDto::is_recurring_discount_Valid() const{
    return m_recurring_discount_isValid;
}

double OAICustomerContractDetailsLineDto::getRecurringPrice() const {
    return m_recurring_price;
}
void OAICustomerContractDetailsLineDto::setRecurringPrice(const double &recurring_price) {
    m_recurring_price = recurring_price;
    m_recurring_price_isSet = true;
}

bool OAICustomerContractDetailsLineDto::is_recurring_price_Set() const{
    return m_recurring_price_isSet;
}

bool OAICustomerContractDetailsLineDto::is_recurring_price_Valid() const{
    return m_recurring_price_isValid;
}

double OAICustomerContractDetailsLineDto::getRenewalDiscount() const {
    return m_renewal_discount;
}
void OAICustomerContractDetailsLineDto::setRenewalDiscount(const double &renewal_discount) {
    m_renewal_discount = renewal_discount;
    m_renewal_discount_isSet = true;
}

bool OAICustomerContractDetailsLineDto::is_renewal_discount_Set() const{
    return m_renewal_discount_isSet;
}

bool OAICustomerContractDetailsLineDto::is_renewal_discount_Valid() const{
    return m_renewal_discount_isValid;
}

double OAICustomerContractDetailsLineDto::getRenewalPrice() const {
    return m_renewal_price;
}
void OAICustomerContractDetailsLineDto::setRenewalPrice(const double &renewal_price) {
    m_renewal_price = renewal_price;
    m_renewal_price_isSet = true;
}

bool OAICustomerContractDetailsLineDto::is_renewal_price_Set() const{
    return m_renewal_price_isSet;
}

bool OAICustomerContractDetailsLineDto::is_renewal_price_Valid() const{
    return m_renewal_price_isValid;
}

double OAICustomerContractDetailsLineDto::getSetupDiscount() const {
    return m_setup_discount;
}
void OAICustomerContractDetailsLineDto::setSetupDiscount(const double &setup_discount) {
    m_setup_discount = setup_discount;
    m_setup_discount_isSet = true;
}

bool OAICustomerContractDetailsLineDto::is_setup_discount_Set() const{
    return m_setup_discount_isSet;
}

bool OAICustomerContractDetailsLineDto::is_setup_discount_Valid() const{
    return m_setup_discount_isValid;
}

double OAICustomerContractDetailsLineDto::getSetupPrice() const {
    return m_setup_price;
}
void OAICustomerContractDetailsLineDto::setSetupPrice(const double &setup_price) {
    m_setup_price = setup_price;
    m_setup_price_isSet = true;
}

bool OAICustomerContractDetailsLineDto::is_setup_price_Set() const{
    return m_setup_price_isSet;
}

bool OAICustomerContractDetailsLineDto::is_setup_price_Valid() const{
    return m_setup_price_isValid;
}

bool OAICustomerContractDetailsLineDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contract_detail_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_difference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_usage_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewal_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewal_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_setup_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_setup_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerContractDetailsLineDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
