/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICashTranTaxDetailDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICashTranTaxDetailDto::OAICashTranTaxDetailDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICashTranTaxDetailDto::OAICashTranTaxDetailDto() {
    this->initializeModel();
}

OAICashTranTaxDetailDto::~OAICashTranTaxDetailDto() {}

void OAICashTranTaxDetailDto::initializeModel() {

    m_deductible_tax_rate_isSet = false;
    m_deductible_tax_rate_isValid = false;

    m_expense_amount_isSet = false;
    m_expense_amount_isValid = false;

    m_include_in_vat_exempt_total_isSet = false;
    m_include_in_vat_exempt_total_isValid = false;

    m_pending_vat_isSet = false;
    m_pending_vat_isValid = false;

    m_reverse_vat_isSet = false;
    m_reverse_vat_isValid = false;

    m_statistical_vat_isSet = false;
    m_statistical_vat_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_tax_rate_isSet = false;
    m_tax_rate_isValid = false;

    m_tax_type_isSet = false;
    m_tax_type_isValid = false;

    m_taxable_amount_isSet = false;
    m_taxable_amount_isValid = false;
}

void OAICashTranTaxDetailDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICashTranTaxDetailDto::fromJsonObject(QJsonObject json) {

    m_deductible_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_deductible_tax_rate, json[QString("deductibleTaxRate")]);
    m_deductible_tax_rate_isSet = !json[QString("deductibleTaxRate")].isNull() && m_deductible_tax_rate_isValid;

    m_expense_amount_isValid = ::OpenAPI::fromJsonValue(m_expense_amount, json[QString("expenseAmount")]);
    m_expense_amount_isSet = !json[QString("expenseAmount")].isNull() && m_expense_amount_isValid;

    m_include_in_vat_exempt_total_isValid = ::OpenAPI::fromJsonValue(m_include_in_vat_exempt_total, json[QString("includeInVatExemptTotal")]);
    m_include_in_vat_exempt_total_isSet = !json[QString("includeInVatExemptTotal")].isNull() && m_include_in_vat_exempt_total_isValid;

    m_pending_vat_isValid = ::OpenAPI::fromJsonValue(m_pending_vat, json[QString("pendingVat")]);
    m_pending_vat_isSet = !json[QString("pendingVat")].isNull() && m_pending_vat_isValid;

    m_reverse_vat_isValid = ::OpenAPI::fromJsonValue(m_reverse_vat, json[QString("reverseVat")]);
    m_reverse_vat_isSet = !json[QString("reverseVat")].isNull() && m_reverse_vat_isValid;

    m_statistical_vat_isValid = ::OpenAPI::fromJsonValue(m_statistical_vat, json[QString("statisticalVat")]);
    m_statistical_vat_isSet = !json[QString("statisticalVat")].isNull() && m_statistical_vat_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("taxAmount")]);
    m_tax_amount_isSet = !json[QString("taxAmount")].isNull() && m_tax_amount_isValid;

    m_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_tax_rate, json[QString("taxRate")]);
    m_tax_rate_isSet = !json[QString("taxRate")].isNull() && m_tax_rate_isValid;

    m_tax_type_isValid = ::OpenAPI::fromJsonValue(m_tax_type, json[QString("taxType")]);
    m_tax_type_isSet = !json[QString("taxType")].isNull() && m_tax_type_isValid;

    m_taxable_amount_isValid = ::OpenAPI::fromJsonValue(m_taxable_amount, json[QString("taxableAmount")]);
    m_taxable_amount_isSet = !json[QString("taxableAmount")].isNull() && m_taxable_amount_isValid;
}

QString OAICashTranTaxDetailDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICashTranTaxDetailDto::asJsonObject() const {
    QJsonObject obj;
    if (m_deductible_tax_rate_isSet) {
        obj.insert(QString("deductibleTaxRate"), ::OpenAPI::toJsonValue(m_deductible_tax_rate));
    }
    if (m_expense_amount_isSet) {
        obj.insert(QString("expenseAmount"), ::OpenAPI::toJsonValue(m_expense_amount));
    }
    if (m_include_in_vat_exempt_total_isSet) {
        obj.insert(QString("includeInVatExemptTotal"), ::OpenAPI::toJsonValue(m_include_in_vat_exempt_total));
    }
    if (m_pending_vat_isSet) {
        obj.insert(QString("pendingVat"), ::OpenAPI::toJsonValue(m_pending_vat));
    }
    if (m_reverse_vat_isSet) {
        obj.insert(QString("reverseVat"), ::OpenAPI::toJsonValue(m_reverse_vat));
    }
    if (m_statistical_vat_isSet) {
        obj.insert(QString("statisticalVat"), ::OpenAPI::toJsonValue(m_statistical_vat));
    }
    if (m_tax.isSet()) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_tax_amount_isSet) {
        obj.insert(QString("taxAmount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_tax_rate_isSet) {
        obj.insert(QString("taxRate"), ::OpenAPI::toJsonValue(m_tax_rate));
    }
    if (m_tax_type_isSet) {
        obj.insert(QString("taxType"), ::OpenAPI::toJsonValue(m_tax_type));
    }
    if (m_taxable_amount_isSet) {
        obj.insert(QString("taxableAmount"), ::OpenAPI::toJsonValue(m_taxable_amount));
    }
    return obj;
}

double OAICashTranTaxDetailDto::getDeductibleTaxRate() const {
    return m_deductible_tax_rate;
}
void OAICashTranTaxDetailDto::setDeductibleTaxRate(const double &deductible_tax_rate) {
    m_deductible_tax_rate = deductible_tax_rate;
    m_deductible_tax_rate_isSet = true;
}

bool OAICashTranTaxDetailDto::is_deductible_tax_rate_Set() const{
    return m_deductible_tax_rate_isSet;
}

bool OAICashTranTaxDetailDto::is_deductible_tax_rate_Valid() const{
    return m_deductible_tax_rate_isValid;
}

double OAICashTranTaxDetailDto::getExpenseAmount() const {
    return m_expense_amount;
}
void OAICashTranTaxDetailDto::setExpenseAmount(const double &expense_amount) {
    m_expense_amount = expense_amount;
    m_expense_amount_isSet = true;
}

bool OAICashTranTaxDetailDto::is_expense_amount_Set() const{
    return m_expense_amount_isSet;
}

bool OAICashTranTaxDetailDto::is_expense_amount_Valid() const{
    return m_expense_amount_isValid;
}

bool OAICashTranTaxDetailDto::isIncludeInVatExemptTotal() const {
    return m_include_in_vat_exempt_total;
}
void OAICashTranTaxDetailDto::setIncludeInVatExemptTotal(const bool &include_in_vat_exempt_total) {
    m_include_in_vat_exempt_total = include_in_vat_exempt_total;
    m_include_in_vat_exempt_total_isSet = true;
}

bool OAICashTranTaxDetailDto::is_include_in_vat_exempt_total_Set() const{
    return m_include_in_vat_exempt_total_isSet;
}

bool OAICashTranTaxDetailDto::is_include_in_vat_exempt_total_Valid() const{
    return m_include_in_vat_exempt_total_isValid;
}

bool OAICashTranTaxDetailDto::isPendingVat() const {
    return m_pending_vat;
}
void OAICashTranTaxDetailDto::setPendingVat(const bool &pending_vat) {
    m_pending_vat = pending_vat;
    m_pending_vat_isSet = true;
}

bool OAICashTranTaxDetailDto::is_pending_vat_Set() const{
    return m_pending_vat_isSet;
}

bool OAICashTranTaxDetailDto::is_pending_vat_Valid() const{
    return m_pending_vat_isValid;
}

bool OAICashTranTaxDetailDto::isReverseVat() const {
    return m_reverse_vat;
}
void OAICashTranTaxDetailDto::setReverseVat(const bool &reverse_vat) {
    m_reverse_vat = reverse_vat;
    m_reverse_vat_isSet = true;
}

bool OAICashTranTaxDetailDto::is_reverse_vat_Set() const{
    return m_reverse_vat_isSet;
}

bool OAICashTranTaxDetailDto::is_reverse_vat_Valid() const{
    return m_reverse_vat_isValid;
}

bool OAICashTranTaxDetailDto::isStatisticalVat() const {
    return m_statistical_vat;
}
void OAICashTranTaxDetailDto::setStatisticalVat(const bool &statistical_vat) {
    m_statistical_vat = statistical_vat;
    m_statistical_vat_isSet = true;
}

bool OAICashTranTaxDetailDto::is_statistical_vat_Set() const{
    return m_statistical_vat_isSet;
}

bool OAICashTranTaxDetailDto::is_statistical_vat_Valid() const{
    return m_statistical_vat_isValid;
}

OAITaxInCashTranTaxDetailDto OAICashTranTaxDetailDto::getTax() const {
    return m_tax;
}
void OAICashTranTaxDetailDto::setTax(const OAITaxInCashTranTaxDetailDto &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAICashTranTaxDetailDto::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAICashTranTaxDetailDto::is_tax_Valid() const{
    return m_tax_isValid;
}

double OAICashTranTaxDetailDto::getTaxAmount() const {
    return m_tax_amount;
}
void OAICashTranTaxDetailDto::setTaxAmount(const double &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAICashTranTaxDetailDto::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAICashTranTaxDetailDto::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

double OAICashTranTaxDetailDto::getTaxRate() const {
    return m_tax_rate;
}
void OAICashTranTaxDetailDto::setTaxRate(const double &tax_rate) {
    m_tax_rate = tax_rate;
    m_tax_rate_isSet = true;
}

bool OAICashTranTaxDetailDto::is_tax_rate_Set() const{
    return m_tax_rate_isSet;
}

bool OAICashTranTaxDetailDto::is_tax_rate_Valid() const{
    return m_tax_rate_isValid;
}

QString OAICashTranTaxDetailDto::getTaxType() const {
    return m_tax_type;
}
void OAICashTranTaxDetailDto::setTaxType(const QString &tax_type) {
    m_tax_type = tax_type;
    m_tax_type_isSet = true;
}

bool OAICashTranTaxDetailDto::is_tax_type_Set() const{
    return m_tax_type_isSet;
}

bool OAICashTranTaxDetailDto::is_tax_type_Valid() const{
    return m_tax_type_isValid;
}

double OAICashTranTaxDetailDto::getTaxableAmount() const {
    return m_taxable_amount;
}
void OAICashTranTaxDetailDto::setTaxableAmount(const double &taxable_amount) {
    m_taxable_amount = taxable_amount;
    m_taxable_amount_isSet = true;
}

bool OAICashTranTaxDetailDto::is_taxable_amount_Set() const{
    return m_taxable_amount_isSet;
}

bool OAICashTranTaxDetailDto::is_taxable_amount_Valid() const{
    return m_taxable_amount_isValid;
}

bool OAICashTranTaxDetailDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deductible_tax_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_in_vat_exempt_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reverse_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistical_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxable_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICashTranTaxDetailDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
