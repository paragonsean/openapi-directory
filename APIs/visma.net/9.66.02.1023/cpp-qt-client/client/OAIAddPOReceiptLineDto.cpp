/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddPOReceiptLineDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddPOReceiptLineDto::OAIAddPOReceiptLineDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddPOReceiptLineDto::OAIAddPOReceiptLineDto() {
    this->initializeModel();
}

OAIAddPOReceiptLineDto::~OAIAddPOReceiptLineDto() {}

void OAIAddPOReceiptLineDto::initializeModel() {

    m_cost_in_currency_isSet = false;
    m_cost_in_currency_isValid = false;

    m_po_receipt_line_number_isSet = false;
    m_po_receipt_line_number_isValid = false;

    m_po_receipt_number_isSet = false;
    m_po_receipt_number_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_unit_cost_in_currency_isSet = false;
    m_unit_cost_in_currency_isValid = false;
}

void OAIAddPOReceiptLineDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddPOReceiptLineDto::fromJsonObject(QJsonObject json) {

    m_cost_in_currency_isValid = ::OpenAPI::fromJsonValue(m_cost_in_currency, json[QString("costInCurrency")]);
    m_cost_in_currency_isSet = !json[QString("costInCurrency")].isNull() && m_cost_in_currency_isValid;

    m_po_receipt_line_number_isValid = ::OpenAPI::fromJsonValue(m_po_receipt_line_number, json[QString("poReceiptLineNumber")]);
    m_po_receipt_line_number_isSet = !json[QString("poReceiptLineNumber")].isNull() && m_po_receipt_line_number_isValid;

    m_po_receipt_number_isValid = ::OpenAPI::fromJsonValue(m_po_receipt_number, json[QString("poReceiptNumber")]);
    m_po_receipt_number_isSet = !json[QString("poReceiptNumber")].isNull() && m_po_receipt_number_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_unit_cost_in_currency_isValid = ::OpenAPI::fromJsonValue(m_unit_cost_in_currency, json[QString("unitCostInCurrency")]);
    m_unit_cost_in_currency_isSet = !json[QString("unitCostInCurrency")].isNull() && m_unit_cost_in_currency_isValid;
}

QString OAIAddPOReceiptLineDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddPOReceiptLineDto::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_in_currency.isSet()) {
        obj.insert(QString("costInCurrency"), ::OpenAPI::toJsonValue(m_cost_in_currency));
    }
    if (m_po_receipt_line_number.isSet()) {
        obj.insert(QString("poReceiptLineNumber"), ::OpenAPI::toJsonValue(m_po_receipt_line_number));
    }
    if (m_po_receipt_number.isSet()) {
        obj.insert(QString("poReceiptNumber"), ::OpenAPI::toJsonValue(m_po_receipt_number));
    }
    if (m_quantity.isSet()) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_unit_cost_in_currency.isSet()) {
        obj.insert(QString("unitCostInCurrency"), ::OpenAPI::toJsonValue(m_unit_cost_in_currency));
    }
    return obj;
}

OAIDtoValueOfNullableOfDecimal OAIAddPOReceiptLineDto::getCostInCurrency() const {
    return m_cost_in_currency;
}
void OAIAddPOReceiptLineDto::setCostInCurrency(const OAIDtoValueOfNullableOfDecimal &cost_in_currency) {
    m_cost_in_currency = cost_in_currency;
    m_cost_in_currency_isSet = true;
}

bool OAIAddPOReceiptLineDto::is_cost_in_currency_Set() const{
    return m_cost_in_currency_isSet;
}

bool OAIAddPOReceiptLineDto::is_cost_in_currency_Valid() const{
    return m_cost_in_currency_isValid;
}

OAIDtoValueOfNullableOfInt32 OAIAddPOReceiptLineDto::getPoReceiptLineNumber() const {
    return m_po_receipt_line_number;
}
void OAIAddPOReceiptLineDto::setPoReceiptLineNumber(const OAIDtoValueOfNullableOfInt32 &po_receipt_line_number) {
    m_po_receipt_line_number = po_receipt_line_number;
    m_po_receipt_line_number_isSet = true;
}

bool OAIAddPOReceiptLineDto::is_po_receipt_line_number_Set() const{
    return m_po_receipt_line_number_isSet;
}

bool OAIAddPOReceiptLineDto::is_po_receipt_line_number_Valid() const{
    return m_po_receipt_line_number_isValid;
}

OAIDtoValueOfString OAIAddPOReceiptLineDto::getPoReceiptNumber() const {
    return m_po_receipt_number;
}
void OAIAddPOReceiptLineDto::setPoReceiptNumber(const OAIDtoValueOfString &po_receipt_number) {
    m_po_receipt_number = po_receipt_number;
    m_po_receipt_number_isSet = true;
}

bool OAIAddPOReceiptLineDto::is_po_receipt_number_Set() const{
    return m_po_receipt_number_isSet;
}

bool OAIAddPOReceiptLineDto::is_po_receipt_number_Valid() const{
    return m_po_receipt_number_isValid;
}

OAIDtoValueOfDecimal OAIAddPOReceiptLineDto::getQuantity() const {
    return m_quantity;
}
void OAIAddPOReceiptLineDto::setQuantity(const OAIDtoValueOfDecimal &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIAddPOReceiptLineDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIAddPOReceiptLineDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIAddPOReceiptLineDto::getUnitCostInCurrency() const {
    return m_unit_cost_in_currency;
}
void OAIAddPOReceiptLineDto::setUnitCostInCurrency(const OAIDtoValueOfNullableOfDecimal &unit_cost_in_currency) {
    m_unit_cost_in_currency = unit_cost_in_currency;
    m_unit_cost_in_currency_isSet = true;
}

bool OAIAddPOReceiptLineDto::is_unit_cost_in_currency_Set() const{
    return m_unit_cost_in_currency_isSet;
}

bool OAIAddPOReceiptLineDto::is_unit_cost_in_currency_Valid() const{
    return m_unit_cost_in_currency_isValid;
}

bool OAIAddPOReceiptLineDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_in_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_receipt_line_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_receipt_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost_in_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddPOReceiptLineDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
