/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContractUsageDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContractUsageDto::OAIContractUsageDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContractUsageDto::OAIContractUsageDto() {
    this->initializeModel();
}

OAIContractUsageDto::~OAIContractUsageDto() {}

void OAIContractUsageDto::initializeModel() {

    m_contract_isSet = false;
    m_contract_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_transaction_isSet = false;
    m_transaction_isValid = false;
}

void OAIContractUsageDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContractUsageDto::fromJsonObject(QJsonObject json) {

    m_contract_isValid = ::OpenAPI::fromJsonValue(m_contract, json[QString("contract")]);
    m_contract_isSet = !json[QString("contract")].isNull() && m_contract_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_transaction_isValid = ::OpenAPI::fromJsonValue(m_transaction, json[QString("transaction")]);
    m_transaction_isSet = !json[QString("transaction")].isNull() && m_transaction_isValid;
}

QString OAIContractUsageDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContractUsageDto::asJsonObject() const {
    QJsonObject obj;
    if (m_contract_isSet) {
        obj.insert(QString("contract"), ::OpenAPI::toJsonValue(m_contract));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_transaction.size() > 0) {
        obj.insert(QString("transaction"), ::OpenAPI::toJsonValue(m_transaction));
    }
    return obj;
}

QString OAIContractUsageDto::getContract() const {
    return m_contract;
}
void OAIContractUsageDto::setContract(const QString &contract) {
    m_contract = contract;
    m_contract_isSet = true;
}

bool OAIContractUsageDto::is_contract_Set() const{
    return m_contract_isSet;
}

bool OAIContractUsageDto::is_contract_Valid() const{
    return m_contract_isValid;
}

QDateTime OAIContractUsageDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIContractUsageDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIContractUsageDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIContractUsageDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QList<OAIContractUsageLineDto> OAIContractUsageDto::getTransaction() const {
    return m_transaction;
}
void OAIContractUsageDto::setTransaction(const QList<OAIContractUsageLineDto> &transaction) {
    m_transaction = transaction;
    m_transaction_isSet = true;
}

bool OAIContractUsageDto::is_transaction_Set() const{
    return m_transaction_isSet;
}

bool OAIContractUsageDto::is_transaction_Valid() const{
    return m_transaction_isValid;
}

bool OAIContractUsageDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contract_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContractUsageDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
