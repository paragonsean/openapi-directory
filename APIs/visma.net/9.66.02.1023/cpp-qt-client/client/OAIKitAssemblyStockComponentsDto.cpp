/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKitAssemblyStockComponentsDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKitAssemblyStockComponentsDto::OAIKitAssemblyStockComponentsDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKitAssemblyStockComponentsDto::OAIKitAssemblyStockComponentsDto() {
    this->initializeModel();
}

OAIKitAssemblyStockComponentsDto::~OAIKitAssemblyStockComponentsDto() {}

void OAIKitAssemblyStockComponentsDto::initializeModel() {

    m_allocations_isSet = false;
    m_allocations_isValid = false;

    m_allow_component_qty_variance_isSet = false;
    m_allow_component_qty_variance_isValid = false;

    m_allow_component_substitution_isSet = false;
    m_allow_component_substitution_isValid = false;

    m_component_qty_isSet = false;
    m_component_qty_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disassembly_coeff_isSet = false;
    m_disassembly_coeff_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_line_nbr_isSet = false;
    m_line_nbr_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_max_component_qty_isSet = false;
    m_max_component_qty_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_min_component_qty_isSet = false;
    m_min_component_qty_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_uo_m_isSet = false;
    m_uo_m_isValid = false;
}

void OAIKitAssemblyStockComponentsDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKitAssemblyStockComponentsDto::fromJsonObject(QJsonObject json) {

    m_allocations_isValid = ::OpenAPI::fromJsonValue(m_allocations, json[QString("allocations")]);
    m_allocations_isSet = !json[QString("allocations")].isNull() && m_allocations_isValid;

    m_allow_component_qty_variance_isValid = ::OpenAPI::fromJsonValue(m_allow_component_qty_variance, json[QString("allowComponentQtyVariance")]);
    m_allow_component_qty_variance_isSet = !json[QString("allowComponentQtyVariance")].isNull() && m_allow_component_qty_variance_isValid;

    m_allow_component_substitution_isValid = ::OpenAPI::fromJsonValue(m_allow_component_substitution, json[QString("allowComponentSubstitution")]);
    m_allow_component_substitution_isSet = !json[QString("allowComponentSubstitution")].isNull() && m_allow_component_substitution_isValid;

    m_component_qty_isValid = ::OpenAPI::fromJsonValue(m_component_qty, json[QString("componentQty")]);
    m_component_qty_isSet = !json[QString("componentQty")].isNull() && m_component_qty_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disassembly_coeff_isValid = ::OpenAPI::fromJsonValue(m_disassembly_coeff, json[QString("disassemblyCoeff")]);
    m_disassembly_coeff_isSet = !json[QString("disassemblyCoeff")].isNull() && m_disassembly_coeff_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_line_nbr, json[QString("lineNbr")]);
    m_line_nbr_isSet = !json[QString("lineNbr")].isNull() && m_line_nbr_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_max_component_qty_isValid = ::OpenAPI::fromJsonValue(m_max_component_qty, json[QString("maxComponentQty")]);
    m_max_component_qty_isSet = !json[QString("maxComponentQty")].isNull() && m_max_component_qty_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_min_component_qty_isValid = ::OpenAPI::fromJsonValue(m_min_component_qty, json[QString("minComponentQty")]);
    m_min_component_qty_isSet = !json[QString("minComponentQty")].isNull() && m_min_component_qty_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("reasonCode")]);
    m_reason_code_isSet = !json[QString("reasonCode")].isNull() && m_reason_code_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_uo_m_isValid = ::OpenAPI::fromJsonValue(m_uo_m, json[QString("uoM")]);
    m_uo_m_isSet = !json[QString("uoM")].isNull() && m_uo_m_isValid;
}

QString OAIKitAssemblyStockComponentsDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKitAssemblyStockComponentsDto::asJsonObject() const {
    QJsonObject obj;
    if (m_allocations.size() > 0) {
        obj.insert(QString("allocations"), ::OpenAPI::toJsonValue(m_allocations));
    }
    if (m_allow_component_qty_variance_isSet) {
        obj.insert(QString("allowComponentQtyVariance"), ::OpenAPI::toJsonValue(m_allow_component_qty_variance));
    }
    if (m_allow_component_substitution_isSet) {
        obj.insert(QString("allowComponentSubstitution"), ::OpenAPI::toJsonValue(m_allow_component_substitution));
    }
    if (m_component_qty_isSet) {
        obj.insert(QString("componentQty"), ::OpenAPI::toJsonValue(m_component_qty));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disassembly_coeff_isSet) {
        obj.insert(QString("disassemblyCoeff"), ::OpenAPI::toJsonValue(m_disassembly_coeff));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_line_nbr_isSet) {
        obj.insert(QString("lineNbr"), ::OpenAPI::toJsonValue(m_line_nbr));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_max_component_qty_isSet) {
        obj.insert(QString("maxComponentQty"), ::OpenAPI::toJsonValue(m_max_component_qty));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_min_component_qty_isSet) {
        obj.insert(QString("minComponentQty"), ::OpenAPI::toJsonValue(m_min_component_qty));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_reason_code_isSet) {
        obj.insert(QString("reasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    if (m_unit_cost_isSet) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_uo_m_isSet) {
        obj.insert(QString("uoM"), ::OpenAPI::toJsonValue(m_uo_m));
    }
    return obj;
}

QList<OAIINAllocationsDto> OAIKitAssemblyStockComponentsDto::getAllocations() const {
    return m_allocations;
}
void OAIKitAssemblyStockComponentsDto::setAllocations(const QList<OAIINAllocationsDto> &allocations) {
    m_allocations = allocations;
    m_allocations_isSet = true;
}

bool OAIKitAssemblyStockComponentsDto::is_allocations_Set() const{
    return m_allocations_isSet;
}

bool OAIKitAssemblyStockComponentsDto::is_allocations_Valid() const{
    return m_allocations_isValid;
}

bool OAIKitAssemblyStockComponentsDto::isAllowComponentQtyVariance() const {
    return m_allow_component_qty_variance;
}
void OAIKitAssemblyStockComponentsDto::setAllowComponentQtyVariance(const bool &allow_component_qty_variance) {
    m_allow_component_qty_variance = allow_component_qty_variance;
    m_allow_component_qty_variance_isSet = true;
}

bool OAIKitAssemblyStockComponentsDto::is_allow_component_qty_variance_Set() const{
    return m_allow_component_qty_variance_isSet;
}

bool OAIKitAssemblyStockComponentsDto::is_allow_component_qty_variance_Valid() const{
    return m_allow_component_qty_variance_isValid;
}

bool OAIKitAssemblyStockComponentsDto::isAllowComponentSubstitution() const {
    return m_allow_component_substitution;
}
void OAIKitAssemblyStockComponentsDto::setAllowComponentSubstitution(const bool &allow_component_substitution) {
    m_allow_component_substitution = allow_component_substitution;
    m_allow_component_substitution_isSet = true;
}

bool OAIKitAssemblyStockComponentsDto::is_allow_component_substitution_Set() const{
    return m_allow_component_substitution_isSet;
}

bool OAIKitAssemblyStockComponentsDto::is_allow_component_substitution_Valid() const{
    return m_allow_component_substitution_isValid;
}

double OAIKitAssemblyStockComponentsDto::getComponentQty() const {
    return m_component_qty;
}
void OAIKitAssemblyStockComponentsDto::setComponentQty(const double &component_qty) {
    m_component_qty = component_qty;
    m_component_qty_isSet = true;
}

bool OAIKitAssemblyStockComponentsDto::is_component_qty_Set() const{
    return m_component_qty_isSet;
}

bool OAIKitAssemblyStockComponentsDto::is_component_qty_Valid() const{
    return m_component_qty_isValid;
}

QString OAIKitAssemblyStockComponentsDto::getDescription() const {
    return m_description;
}
void OAIKitAssemblyStockComponentsDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIKitAssemblyStockComponentsDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIKitAssemblyStockComponentsDto::is_description_Valid() const{
    return m_description_isValid;
}

double OAIKitAssemblyStockComponentsDto::getDisassemblyCoeff() const {
    return m_disassembly_coeff;
}
void OAIKitAssemblyStockComponentsDto::setDisassemblyCoeff(const double &disassembly_coeff) {
    m_disassembly_coeff = disassembly_coeff;
    m_disassembly_coeff_isSet = true;
}

bool OAIKitAssemblyStockComponentsDto::is_disassembly_coeff_Set() const{
    return m_disassembly_coeff_isSet;
}

bool OAIKitAssemblyStockComponentsDto::is_disassembly_coeff_Valid() const{
    return m_disassembly_coeff_isValid;
}

QString OAIKitAssemblyStockComponentsDto::getErrorInfo() const {
    return m_error_info;
}
void OAIKitAssemblyStockComponentsDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIKitAssemblyStockComponentsDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIKitAssemblyStockComponentsDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

QString OAIKitAssemblyStockComponentsDto::getItemId() const {
    return m_item_id;
}
void OAIKitAssemblyStockComponentsDto::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIKitAssemblyStockComponentsDto::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIKitAssemblyStockComponentsDto::is_item_id_Valid() const{
    return m_item_id_isValid;
}

qint32 OAIKitAssemblyStockComponentsDto::getLineNbr() const {
    return m_line_nbr;
}
void OAIKitAssemblyStockComponentsDto::setLineNbr(const qint32 &line_nbr) {
    m_line_nbr = line_nbr;
    m_line_nbr_isSet = true;
}

bool OAIKitAssemblyStockComponentsDto::is_line_nbr_Set() const{
    return m_line_nbr_isSet;
}

bool OAIKitAssemblyStockComponentsDto::is_line_nbr_Valid() const{
    return m_line_nbr_isValid;
}

QString OAIKitAssemblyStockComponentsDto::getLocation() const {
    return m_location;
}
void OAIKitAssemblyStockComponentsDto::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIKitAssemblyStockComponentsDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIKitAssemblyStockComponentsDto::is_location_Valid() const{
    return m_location_isValid;
}

double OAIKitAssemblyStockComponentsDto::getMaxComponentQty() const {
    return m_max_component_qty;
}
void OAIKitAssemblyStockComponentsDto::setMaxComponentQty(const double &max_component_qty) {
    m_max_component_qty = max_component_qty;
    m_max_component_qty_isSet = true;
}

bool OAIKitAssemblyStockComponentsDto::is_max_component_qty_Set() const{
    return m_max_component_qty_isSet;
}

bool OAIKitAssemblyStockComponentsDto::is_max_component_qty_Valid() const{
    return m_max_component_qty_isValid;
}

OAIMetadataDto OAIKitAssemblyStockComponentsDto::getMetadata() const {
    return m_metadata;
}
void OAIKitAssemblyStockComponentsDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIKitAssemblyStockComponentsDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIKitAssemblyStockComponentsDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

double OAIKitAssemblyStockComponentsDto::getMinComponentQty() const {
    return m_min_component_qty;
}
void OAIKitAssemblyStockComponentsDto::setMinComponentQty(const double &min_component_qty) {
    m_min_component_qty = min_component_qty;
    m_min_component_qty_isSet = true;
}

bool OAIKitAssemblyStockComponentsDto::is_min_component_qty_Set() const{
    return m_min_component_qty_isSet;
}

bool OAIKitAssemblyStockComponentsDto::is_min_component_qty_Valid() const{
    return m_min_component_qty_isValid;
}

double OAIKitAssemblyStockComponentsDto::getQuantity() const {
    return m_quantity;
}
void OAIKitAssemblyStockComponentsDto::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIKitAssemblyStockComponentsDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIKitAssemblyStockComponentsDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIKitAssemblyStockComponentsDto::getReasonCode() const {
    return m_reason_code;
}
void OAIKitAssemblyStockComponentsDto::setReasonCode(const QString &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAIKitAssemblyStockComponentsDto::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAIKitAssemblyStockComponentsDto::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

double OAIKitAssemblyStockComponentsDto::getUnitCost() const {
    return m_unit_cost;
}
void OAIKitAssemblyStockComponentsDto::setUnitCost(const double &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAIKitAssemblyStockComponentsDto::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAIKitAssemblyStockComponentsDto::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

QString OAIKitAssemblyStockComponentsDto::getUoM() const {
    return m_uo_m;
}
void OAIKitAssemblyStockComponentsDto::setUoM(const QString &uo_m) {
    m_uo_m = uo_m;
    m_uo_m_isSet = true;
}

bool OAIKitAssemblyStockComponentsDto::is_uo_m_Set() const{
    return m_uo_m_isSet;
}

bool OAIKitAssemblyStockComponentsDto::is_uo_m_Valid() const{
    return m_uo_m_isValid;
}

bool OAIKitAssemblyStockComponentsDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_component_qty_variance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_component_substitution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disassembly_coeff_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_component_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_component_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uo_m_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKitAssemblyStockComponentsDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
