/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionDto::OAISubscriptionDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionDto::OAISubscriptionDto() {
    this->initializeModel();
}

OAISubscriptionDto::~OAISubscriptionDto() {}

void OAISubscriptionDto::initializeModel() {

    m_event_isSet = false;
    m_event_isValid = false;

    m_hook_uri_isSet = false;
    m_hook_uri_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAISubscriptionDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionDto::fromJsonObject(QJsonObject json) {

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_hook_uri_isValid = ::OpenAPI::fromJsonValue(m_hook_uri, json[QString("hookUri")]);
    m_hook_uri_isSet = !json[QString("hookUri")].isNull() && m_hook_uri_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAISubscriptionDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionDto::asJsonObject() const {
    QJsonObject obj;
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_hook_uri_isSet) {
        obj.insert(QString("hookUri"), ::OpenAPI::toJsonValue(m_hook_uri));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAISubscriptionDto::getEvent() const {
    return m_event;
}
void OAISubscriptionDto::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAISubscriptionDto::is_event_Set() const{
    return m_event_isSet;
}

bool OAISubscriptionDto::is_event_Valid() const{
    return m_event_isValid;
}

QString OAISubscriptionDto::getHookUri() const {
    return m_hook_uri;
}
void OAISubscriptionDto::setHookUri(const QString &hook_uri) {
    m_hook_uri = hook_uri;
    m_hook_uri_isSet = true;
}

bool OAISubscriptionDto::is_hook_uri_Set() const{
    return m_hook_uri_isSet;
}

bool OAISubscriptionDto::is_hook_uri_Valid() const{
    return m_hook_uri_isValid;
}

qint64 OAISubscriptionDto::getId() const {
    return m_id;
}
void OAISubscriptionDto::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubscriptionDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubscriptionDto::is_id_Valid() const{
    return m_id_isValid;
}

bool OAISubscriptionDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hook_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_isValid && m_hook_uri_isValid && true;
}

} // namespace OpenAPI
