/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShipmentDetailLineAddDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShipmentDetailLineAddDto::OAIShipmentDetailLineAddDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShipmentDetailLineAddDto::OAIShipmentDetailLineAddDto() {
    this->initializeModel();
}

OAIShipmentDetailLineAddDto::~OAIShipmentDetailLineAddDto() {}

void OAIShipmentDetailLineAddDto::initializeModel() {

    m_inventory_number_isSet = false;
    m_inventory_number_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_shipped_qty_isSet = false;
    m_shipped_qty_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;

    m_warehouse_isSet = false;
    m_warehouse_isValid = false;
}

void OAIShipmentDetailLineAddDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShipmentDetailLineAddDto::fromJsonObject(QJsonObject json) {

    m_inventory_number_isValid = ::OpenAPI::fromJsonValue(m_inventory_number, json[QString("inventoryNumber")]);
    m_inventory_number_isSet = !json[QString("inventoryNumber")].isNull() && m_inventory_number_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("lineNumber")]);
    m_line_number_isSet = !json[QString("lineNumber")].isNull() && m_line_number_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_shipped_qty_isValid = ::OpenAPI::fromJsonValue(m_shipped_qty, json[QString("shippedQty")]);
    m_shipped_qty_isSet = !json[QString("shippedQty")].isNull() && m_shipped_qty_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;

    m_warehouse_isValid = ::OpenAPI::fromJsonValue(m_warehouse, json[QString("warehouse")]);
    m_warehouse_isSet = !json[QString("warehouse")].isNull() && m_warehouse_isValid;
}

QString OAIShipmentDetailLineAddDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShipmentDetailLineAddDto::asJsonObject() const {
    QJsonObject obj;
    if (m_inventory_number.isSet()) {
        obj.insert(QString("inventoryNumber"), ::OpenAPI::toJsonValue(m_inventory_number));
    }
    if (m_line_number.isSet()) {
        obj.insert(QString("lineNumber"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_shipped_qty.isSet()) {
        obj.insert(QString("shippedQty"), ::OpenAPI::toJsonValue(m_shipped_qty));
    }
    if (m_uom.isSet()) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    if (m_warehouse.isSet()) {
        obj.insert(QString("warehouse"), ::OpenAPI::toJsonValue(m_warehouse));
    }
    return obj;
}

OAIDtoValueOfString OAIShipmentDetailLineAddDto::getInventoryNumber() const {
    return m_inventory_number;
}
void OAIShipmentDetailLineAddDto::setInventoryNumber(const OAIDtoValueOfString &inventory_number) {
    m_inventory_number = inventory_number;
    m_inventory_number_isSet = true;
}

bool OAIShipmentDetailLineAddDto::is_inventory_number_Set() const{
    return m_inventory_number_isSet;
}

bool OAIShipmentDetailLineAddDto::is_inventory_number_Valid() const{
    return m_inventory_number_isValid;
}

OAIDtoValueOfInt32 OAIShipmentDetailLineAddDto::getLineNumber() const {
    return m_line_number;
}
void OAIShipmentDetailLineAddDto::setLineNumber(const OAIDtoValueOfInt32 &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAIShipmentDetailLineAddDto::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAIShipmentDetailLineAddDto::is_line_number_Valid() const{
    return m_line_number_isValid;
}

OAIDtoValueOfString OAIShipmentDetailLineAddDto::getLocation() const {
    return m_location;
}
void OAIShipmentDetailLineAddDto::setLocation(const OAIDtoValueOfString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIShipmentDetailLineAddDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIShipmentDetailLineAddDto::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIShipmentDetailLineAddDto::getOperation() const {
    return m_operation;
}
void OAIShipmentDetailLineAddDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIShipmentDetailLineAddDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIShipmentDetailLineAddDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIShipmentDetailLineAddDto::getShippedQty() const {
    return m_shipped_qty;
}
void OAIShipmentDetailLineAddDto::setShippedQty(const OAIDtoValueOfNullableOfDecimal &shipped_qty) {
    m_shipped_qty = shipped_qty;
    m_shipped_qty_isSet = true;
}

bool OAIShipmentDetailLineAddDto::is_shipped_qty_Set() const{
    return m_shipped_qty_isSet;
}

bool OAIShipmentDetailLineAddDto::is_shipped_qty_Valid() const{
    return m_shipped_qty_isValid;
}

OAIDtoValueOfString OAIShipmentDetailLineAddDto::getUom() const {
    return m_uom;
}
void OAIShipmentDetailLineAddDto::setUom(const OAIDtoValueOfString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAIShipmentDetailLineAddDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAIShipmentDetailLineAddDto::is_uom_Valid() const{
    return m_uom_isValid;
}

OAIDtoValueOfString OAIShipmentDetailLineAddDto::getWarehouse() const {
    return m_warehouse;
}
void OAIShipmentDetailLineAddDto::setWarehouse(const OAIDtoValueOfString &warehouse) {
    m_warehouse = warehouse;
    m_warehouse_isSet = true;
}

bool OAIShipmentDetailLineAddDto::is_warehouse_Set() const{
    return m_warehouse_isSet;
}

bool OAIShipmentDetailLineAddDto::is_warehouse_Valid() const{
    return m_warehouse_isValid;
}

bool OAIShipmentDetailLineAddDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inventory_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipped_qty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShipmentDetailLineAddDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_inventory_number_isValid && true;
}

} // namespace OpenAPI
