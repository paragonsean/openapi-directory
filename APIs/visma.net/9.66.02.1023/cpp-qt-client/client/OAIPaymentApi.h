/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPaymentApi_H
#define OAI_OAIPaymentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAIObject.h"
#include "OAIPaymentDto.h"
#include "OAIPaymentUpdateDto.h"
#include "OAIReleasePaymentActionDto.h"
#include "OAIReleasePaymentActionResultDto.h"
#include "OAIVoidPaymentActionDto.h"
#include "OAIVoidPaymentActionResultDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPaymentApi : public QObject {
    Q_OBJECT

public:
    OAIPaymentApi(const int timeOut = 0);
    ~OAIPaymentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_payment_update_dto OAIPaymentUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    Q_DECL_DEPRECATED virtual void paymentCreatePayment(const OAIPaymentUpdateDto &oai_payment_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  payment_nbr QString [optional]
    * @param[in]  payment_type QString [optional]
    * @param[in]  customer QString [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  invoice_ref_nbr QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    Q_DECL_DEPRECATED virtual void paymentGetAllPayments(const ::OpenAPI::OptionalParam<QString> &payment_nbr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &payment_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &invoice_ref_nbr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  payment_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    Q_DECL_DEPRECATED virtual void paymentGetBypaymentNumber(const QString &payment_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  payment_number QString [required]
    * @param[in]  oai_payment_update_dto OAIPaymentUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    Q_DECL_DEPRECATED virtual void paymentPutBypaymentNumber(const QString &payment_number, const OAIPaymentUpdateDto &oai_payment_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  payment_number QString [required]
    * @param[in]  oai_release_payment_action_dto OAIReleasePaymentActionDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    Q_DECL_DEPRECATED virtual void paymentReleasePaymentBypaymentNumber(const QString &payment_number, const OAIReleasePaymentActionDto &oai_release_payment_action_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  payment_number QString [required]
    * @param[in]  oai_void_payment_action_dto OAIVoidPaymentActionDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    Q_DECL_DEPRECATED virtual void paymentVoidPaymentBypaymentNumber(const QString &payment_number, const OAIVoidPaymentActionDto &oai_void_payment_action_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void paymentCreatePaymentCallback(OAIHttpRequestWorker *worker);
    void paymentGetAllPaymentsCallback(OAIHttpRequestWorker *worker);
    void paymentGetBypaymentNumberCallback(OAIHttpRequestWorker *worker);
    void paymentPutBypaymentNumberCallback(OAIHttpRequestWorker *worker);
    void paymentReleasePaymentBypaymentNumberCallback(OAIHttpRequestWorker *worker);
    void paymentVoidPaymentBypaymentNumberCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void paymentCreatePaymentSignal(OAIObject summary);
    void paymentGetAllPaymentsSignal(QList<OAIPaymentDto> summary);
    void paymentGetBypaymentNumberSignal(OAIPaymentDto summary);
    void paymentPutBypaymentNumberSignal(OAIBackgroundApiAcceptedDto summary);
    void paymentReleasePaymentBypaymentNumberSignal(OAIReleasePaymentActionResultDto summary);
    void paymentVoidPaymentBypaymentNumberSignal(OAIVoidPaymentActionResultDto summary);


    void paymentCreatePaymentSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void paymentGetAllPaymentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPaymentDto> summary);
    void paymentGetBypaymentNumberSignalFull(OAIHttpRequestWorker *worker, OAIPaymentDto summary);
    void paymentPutBypaymentNumberSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);
    void paymentReleasePaymentBypaymentNumberSignalFull(OAIHttpRequestWorker *worker, OAIReleasePaymentActionResultDto summary);
    void paymentVoidPaymentBypaymentNumberSignalFull(OAIHttpRequestWorker *worker, OAIVoidPaymentActionResultDto summary);

    Q_DECL_DEPRECATED_X("Use paymentCreatePaymentSignalError() instead")
    void paymentCreatePaymentSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentCreatePaymentSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentGetAllPaymentsSignalError() instead")
    void paymentGetAllPaymentsSignalE(QList<OAIPaymentDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentGetAllPaymentsSignalError(QList<OAIPaymentDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentGetBypaymentNumberSignalError() instead")
    void paymentGetBypaymentNumberSignalE(OAIPaymentDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentGetBypaymentNumberSignalError(OAIPaymentDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentPutBypaymentNumberSignalError() instead")
    void paymentPutBypaymentNumberSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentPutBypaymentNumberSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentReleasePaymentBypaymentNumberSignalError() instead")
    void paymentReleasePaymentBypaymentNumberSignalE(OAIReleasePaymentActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentReleasePaymentBypaymentNumberSignalError(OAIReleasePaymentActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentVoidPaymentBypaymentNumberSignalError() instead")
    void paymentVoidPaymentBypaymentNumberSignalE(OAIVoidPaymentActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentVoidPaymentBypaymentNumberSignalError(OAIVoidPaymentActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use paymentCreatePaymentSignalErrorFull() instead")
    void paymentCreatePaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentCreatePaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentGetAllPaymentsSignalErrorFull() instead")
    void paymentGetAllPaymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentGetAllPaymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentGetBypaymentNumberSignalErrorFull() instead")
    void paymentGetBypaymentNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentGetBypaymentNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentPutBypaymentNumberSignalErrorFull() instead")
    void paymentPutBypaymentNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentPutBypaymentNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentReleasePaymentBypaymentNumberSignalErrorFull() instead")
    void paymentReleasePaymentBypaymentNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentReleasePaymentBypaymentNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentVoidPaymentBypaymentNumberSignalErrorFull() instead")
    void paymentVoidPaymentBypaymentNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentVoidPaymentBypaymentNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
