/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryDto::OAIInventoryDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryDto::OAIInventoryDto() {
    this->initializeModel();
}

OAIInventoryDto::~OAIInventoryDto() {}

void OAIInventoryDto::initializeModel() {

    m_account_information_isSet = false;
    m_account_information_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_base_unit_isSet = false;
    m_base_unit_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_cost_price_statistics_isSet = false;
    m_cost_price_statistics_isValid = false;

    m_cross_references_isSet = false;
    m_cross_references_isValid = false;

    m_current_cost_isSet = false;
    m_current_cost_isValid = false;

    m_default_issue_from_isSet = false;
    m_default_issue_from_isValid = false;

    m_default_price_isSet = false;
    m_default_price_isValid = false;

    m_default_receipt_to_isSet = false;
    m_default_receipt_to_isValid = false;

    m_default_warehouse_isSet = false;
    m_default_warehouse_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_effective_date_isSet = false;
    m_effective_date_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_intrastat_isSet = false;
    m_intrastat_isValid = false;

    m_inventory_id_isSet = false;
    m_inventory_id_isValid = false;

    m_inventory_number_isSet = false;
    m_inventory_number_isValid = false;

    m_inventory_units_isSet = false;
    m_inventory_units_isValid = false;

    m_item_class_isSet = false;
    m_item_class_isValid = false;

    m_kit_item_isSet = false;
    m_kit_item_isValid = false;

    m_last_cost_isSet = false;
    m_last_cost_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_lot_serial_class_isSet = false;
    m_lot_serial_class_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_packaging_isSet = false;
    m_packaging_isValid = false;

    m_pending_cost_isSet = false;
    m_pending_cost_isValid = false;

    m_pending_cost_date_isSet = false;
    m_pending_cost_date_isValid = false;

    m_posting_class_isSet = false;
    m_posting_class_isValid = false;

    m_price_class_isSet = false;
    m_price_class_isValid = false;

    m_price_class_id_isSet = false;
    m_price_class_id_isValid = false;

    m_price_manager_isSet = false;
    m_price_manager_isValid = false;

    m_price_manager_id_isSet = false;
    m_price_manager_id_isValid = false;

    m_price_workgroup_id_isSet = false;
    m_price_workgroup_id_isValid = false;

    m_purchase_unit_isSet = false;
    m_purchase_unit_isValid = false;

    m_recommended_price_isSet = false;
    m_recommended_price_isValid = false;

    m_sales_categories_isSet = false;
    m_sales_categories_isValid = false;

    m_sales_unit_isSet = false;
    m_sales_unit_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_stock_item_isSet = false;
    m_stock_item_isValid = false;

    m_supplier_details_isSet = false;
    m_supplier_details_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vat_code_isSet = false;
    m_vat_code_isValid = false;

    m_warehouse_details_isSet = false;
    m_warehouse_details_isValid = false;
}

void OAIInventoryDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryDto::fromJsonObject(QJsonObject json) {

    m_account_information_isValid = ::OpenAPI::fromJsonValue(m_account_information, json[QString("accountInformation")]);
    m_account_information_isSet = !json[QString("accountInformation")].isNull() && m_account_information_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_base_unit_isValid = ::OpenAPI::fromJsonValue(m_base_unit, json[QString("baseUnit")]);
    m_base_unit_isSet = !json[QString("baseUnit")].isNull() && m_base_unit_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_cost_price_statistics_isValid = ::OpenAPI::fromJsonValue(m_cost_price_statistics, json[QString("costPriceStatistics")]);
    m_cost_price_statistics_isSet = !json[QString("costPriceStatistics")].isNull() && m_cost_price_statistics_isValid;

    m_cross_references_isValid = ::OpenAPI::fromJsonValue(m_cross_references, json[QString("crossReferences")]);
    m_cross_references_isSet = !json[QString("crossReferences")].isNull() && m_cross_references_isValid;

    m_current_cost_isValid = ::OpenAPI::fromJsonValue(m_current_cost, json[QString("currentCost")]);
    m_current_cost_isSet = !json[QString("currentCost")].isNull() && m_current_cost_isValid;

    m_default_issue_from_isValid = ::OpenAPI::fromJsonValue(m_default_issue_from, json[QString("defaultIssueFrom")]);
    m_default_issue_from_isSet = !json[QString("defaultIssueFrom")].isNull() && m_default_issue_from_isValid;

    m_default_price_isValid = ::OpenAPI::fromJsonValue(m_default_price, json[QString("defaultPrice")]);
    m_default_price_isSet = !json[QString("defaultPrice")].isNull() && m_default_price_isValid;

    m_default_receipt_to_isValid = ::OpenAPI::fromJsonValue(m_default_receipt_to, json[QString("defaultReceiptTo")]);
    m_default_receipt_to_isSet = !json[QString("defaultReceiptTo")].isNull() && m_default_receipt_to_isValid;

    m_default_warehouse_isValid = ::OpenAPI::fromJsonValue(m_default_warehouse, json[QString("defaultWarehouse")]);
    m_default_warehouse_isSet = !json[QString("defaultWarehouse")].isNull() && m_default_warehouse_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_effective_date_isValid = ::OpenAPI::fromJsonValue(m_effective_date, json[QString("effectiveDate")]);
    m_effective_date_isSet = !json[QString("effectiveDate")].isNull() && m_effective_date_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_intrastat_isValid = ::OpenAPI::fromJsonValue(m_intrastat, json[QString("intrastat")]);
    m_intrastat_isSet = !json[QString("intrastat")].isNull() && m_intrastat_isValid;

    m_inventory_id_isValid = ::OpenAPI::fromJsonValue(m_inventory_id, json[QString("inventoryId")]);
    m_inventory_id_isSet = !json[QString("inventoryId")].isNull() && m_inventory_id_isValid;

    m_inventory_number_isValid = ::OpenAPI::fromJsonValue(m_inventory_number, json[QString("inventoryNumber")]);
    m_inventory_number_isSet = !json[QString("inventoryNumber")].isNull() && m_inventory_number_isValid;

    m_inventory_units_isValid = ::OpenAPI::fromJsonValue(m_inventory_units, json[QString("inventoryUnits")]);
    m_inventory_units_isSet = !json[QString("inventoryUnits")].isNull() && m_inventory_units_isValid;

    m_item_class_isValid = ::OpenAPI::fromJsonValue(m_item_class, json[QString("itemClass")]);
    m_item_class_isSet = !json[QString("itemClass")].isNull() && m_item_class_isValid;

    m_kit_item_isValid = ::OpenAPI::fromJsonValue(m_kit_item, json[QString("kitItem")]);
    m_kit_item_isSet = !json[QString("kitItem")].isNull() && m_kit_item_isValid;

    m_last_cost_isValid = ::OpenAPI::fromJsonValue(m_last_cost, json[QString("lastCost")]);
    m_last_cost_isSet = !json[QString("lastCost")].isNull() && m_last_cost_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_lot_serial_class_isValid = ::OpenAPI::fromJsonValue(m_lot_serial_class, json[QString("lotSerialClass")]);
    m_lot_serial_class_isSet = !json[QString("lotSerialClass")].isNull() && m_lot_serial_class_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_packaging_isValid = ::OpenAPI::fromJsonValue(m_packaging, json[QString("packaging")]);
    m_packaging_isSet = !json[QString("packaging")].isNull() && m_packaging_isValid;

    m_pending_cost_isValid = ::OpenAPI::fromJsonValue(m_pending_cost, json[QString("pendingCost")]);
    m_pending_cost_isSet = !json[QString("pendingCost")].isNull() && m_pending_cost_isValid;

    m_pending_cost_date_isValid = ::OpenAPI::fromJsonValue(m_pending_cost_date, json[QString("pendingCostDate")]);
    m_pending_cost_date_isSet = !json[QString("pendingCostDate")].isNull() && m_pending_cost_date_isValid;

    m_posting_class_isValid = ::OpenAPI::fromJsonValue(m_posting_class, json[QString("postingClass")]);
    m_posting_class_isSet = !json[QString("postingClass")].isNull() && m_posting_class_isValid;

    m_price_class_isValid = ::OpenAPI::fromJsonValue(m_price_class, json[QString("priceClass")]);
    m_price_class_isSet = !json[QString("priceClass")].isNull() && m_price_class_isValid;

    m_price_class_id_isValid = ::OpenAPI::fromJsonValue(m_price_class_id, json[QString("priceClassID")]);
    m_price_class_id_isSet = !json[QString("priceClassID")].isNull() && m_price_class_id_isValid;

    m_price_manager_isValid = ::OpenAPI::fromJsonValue(m_price_manager, json[QString("priceManager")]);
    m_price_manager_isSet = !json[QString("priceManager")].isNull() && m_price_manager_isValid;

    m_price_manager_id_isValid = ::OpenAPI::fromJsonValue(m_price_manager_id, json[QString("priceManagerID")]);
    m_price_manager_id_isSet = !json[QString("priceManagerID")].isNull() && m_price_manager_id_isValid;

    m_price_workgroup_id_isValid = ::OpenAPI::fromJsonValue(m_price_workgroup_id, json[QString("priceWorkgroupID")]);
    m_price_workgroup_id_isSet = !json[QString("priceWorkgroupID")].isNull() && m_price_workgroup_id_isValid;

    m_purchase_unit_isValid = ::OpenAPI::fromJsonValue(m_purchase_unit, json[QString("purchaseUnit")]);
    m_purchase_unit_isSet = !json[QString("purchaseUnit")].isNull() && m_purchase_unit_isValid;

    m_recommended_price_isValid = ::OpenAPI::fromJsonValue(m_recommended_price, json[QString("recommendedPrice")]);
    m_recommended_price_isSet = !json[QString("recommendedPrice")].isNull() && m_recommended_price_isValid;

    m_sales_categories_isValid = ::OpenAPI::fromJsonValue(m_sales_categories, json[QString("salesCategories")]);
    m_sales_categories_isSet = !json[QString("salesCategories")].isNull() && m_sales_categories_isValid;

    m_sales_unit_isValid = ::OpenAPI::fromJsonValue(m_sales_unit, json[QString("salesUnit")]);
    m_sales_unit_isSet = !json[QString("salesUnit")].isNull() && m_sales_unit_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_stock_item_isValid = ::OpenAPI::fromJsonValue(m_stock_item, json[QString("stockItem")]);
    m_stock_item_isSet = !json[QString("stockItem")].isNull() && m_stock_item_isValid;

    m_supplier_details_isValid = ::OpenAPI::fromJsonValue(m_supplier_details, json[QString("supplierDetails")]);
    m_supplier_details_isSet = !json[QString("supplierDetails")].isNull() && m_supplier_details_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vat_code_isValid = ::OpenAPI::fromJsonValue(m_vat_code, json[QString("vatCode")]);
    m_vat_code_isSet = !json[QString("vatCode")].isNull() && m_vat_code_isValid;

    m_warehouse_details_isValid = ::OpenAPI::fromJsonValue(m_warehouse_details, json[QString("warehouseDetails")]);
    m_warehouse_details_isSet = !json[QString("warehouseDetails")].isNull() && m_warehouse_details_isValid;
}

QString OAIInventoryDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryDto::asJsonObject() const {
    QJsonObject obj;
    if (m_account_information.isSet()) {
        obj.insert(QString("accountInformation"), ::OpenAPI::toJsonValue(m_account_information));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_base_unit_isSet) {
        obj.insert(QString("baseUnit"), ::OpenAPI::toJsonValue(m_base_unit));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_cost_price_statistics.isSet()) {
        obj.insert(QString("costPriceStatistics"), ::OpenAPI::toJsonValue(m_cost_price_statistics));
    }
    if (m_cross_references.size() > 0) {
        obj.insert(QString("crossReferences"), ::OpenAPI::toJsonValue(m_cross_references));
    }
    if (m_current_cost_isSet) {
        obj.insert(QString("currentCost"), ::OpenAPI::toJsonValue(m_current_cost));
    }
    if (m_default_issue_from.isSet()) {
        obj.insert(QString("defaultIssueFrom"), ::OpenAPI::toJsonValue(m_default_issue_from));
    }
    if (m_default_price_isSet) {
        obj.insert(QString("defaultPrice"), ::OpenAPI::toJsonValue(m_default_price));
    }
    if (m_default_receipt_to.isSet()) {
        obj.insert(QString("defaultReceiptTo"), ::OpenAPI::toJsonValue(m_default_receipt_to));
    }
    if (m_default_warehouse.isSet()) {
        obj.insert(QString("defaultWarehouse"), ::OpenAPI::toJsonValue(m_default_warehouse));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_effective_date_isSet) {
        obj.insert(QString("effectiveDate"), ::OpenAPI::toJsonValue(m_effective_date));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_intrastat.isSet()) {
        obj.insert(QString("intrastat"), ::OpenAPI::toJsonValue(m_intrastat));
    }
    if (m_inventory_id_isSet) {
        obj.insert(QString("inventoryId"), ::OpenAPI::toJsonValue(m_inventory_id));
    }
    if (m_inventory_number_isSet) {
        obj.insert(QString("inventoryNumber"), ::OpenAPI::toJsonValue(m_inventory_number));
    }
    if (m_inventory_units.size() > 0) {
        obj.insert(QString("inventoryUnits"), ::OpenAPI::toJsonValue(m_inventory_units));
    }
    if (m_item_class.isSet()) {
        obj.insert(QString("itemClass"), ::OpenAPI::toJsonValue(m_item_class));
    }
    if (m_kit_item_isSet) {
        obj.insert(QString("kitItem"), ::OpenAPI::toJsonValue(m_kit_item));
    }
    if (m_last_cost_isSet) {
        obj.insert(QString("lastCost"), ::OpenAPI::toJsonValue(m_last_cost));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_lot_serial_class.isSet()) {
        obj.insert(QString("lotSerialClass"), ::OpenAPI::toJsonValue(m_lot_serial_class));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_packaging.isSet()) {
        obj.insert(QString("packaging"), ::OpenAPI::toJsonValue(m_packaging));
    }
    if (m_pending_cost_isSet) {
        obj.insert(QString("pendingCost"), ::OpenAPI::toJsonValue(m_pending_cost));
    }
    if (m_pending_cost_date_isSet) {
        obj.insert(QString("pendingCostDate"), ::OpenAPI::toJsonValue(m_pending_cost_date));
    }
    if (m_posting_class.isSet()) {
        obj.insert(QString("postingClass"), ::OpenAPI::toJsonValue(m_posting_class));
    }
    if (m_price_class.isSet()) {
        obj.insert(QString("priceClass"), ::OpenAPI::toJsonValue(m_price_class));
    }
    if (m_price_class_id_isSet) {
        obj.insert(QString("priceClassID"), ::OpenAPI::toJsonValue(m_price_class_id));
    }
    if (m_price_manager.isSet()) {
        obj.insert(QString("priceManager"), ::OpenAPI::toJsonValue(m_price_manager));
    }
    if (m_price_manager_id_isSet) {
        obj.insert(QString("priceManagerID"), ::OpenAPI::toJsonValue(m_price_manager_id));
    }
    if (m_price_workgroup_id_isSet) {
        obj.insert(QString("priceWorkgroupID"), ::OpenAPI::toJsonValue(m_price_workgroup_id));
    }
    if (m_purchase_unit_isSet) {
        obj.insert(QString("purchaseUnit"), ::OpenAPI::toJsonValue(m_purchase_unit));
    }
    if (m_recommended_price_isSet) {
        obj.insert(QString("recommendedPrice"), ::OpenAPI::toJsonValue(m_recommended_price));
    }
    if (m_sales_categories.size() > 0) {
        obj.insert(QString("salesCategories"), ::OpenAPI::toJsonValue(m_sales_categories));
    }
    if (m_sales_unit_isSet) {
        obj.insert(QString("salesUnit"), ::OpenAPI::toJsonValue(m_sales_unit));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_stock_item_isSet) {
        obj.insert(QString("stockItem"), ::OpenAPI::toJsonValue(m_stock_item));
    }
    if (m_supplier_details.size() > 0) {
        obj.insert(QString("supplierDetails"), ::OpenAPI::toJsonValue(m_supplier_details));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vat_code.isSet()) {
        obj.insert(QString("vatCode"), ::OpenAPI::toJsonValue(m_vat_code));
    }
    if (m_warehouse_details.size() > 0) {
        obj.insert(QString("warehouseDetails"), ::OpenAPI::toJsonValue(m_warehouse_details));
    }
    return obj;
}

OAIAccountInformationInInventoryDto OAIInventoryDto::getAccountInformation() const {
    return m_account_information;
}
void OAIInventoryDto::setAccountInformation(const OAIAccountInformationInInventoryDto &account_information) {
    m_account_information = account_information;
    m_account_information_isSet = true;
}

bool OAIInventoryDto::is_account_information_Set() const{
    return m_account_information_isSet;
}

bool OAIInventoryDto::is_account_information_Valid() const{
    return m_account_information_isValid;
}

QList<OAIAttachmentDto> OAIInventoryDto::getAttachments() const {
    return m_attachments;
}
void OAIInventoryDto::setAttachments(const QList<OAIAttachmentDto> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIInventoryDto::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIInventoryDto::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QList<OAIAttributeIdValueDto> OAIInventoryDto::getAttributes() const {
    return m_attributes;
}
void OAIInventoryDto::setAttributes(const QList<OAIAttributeIdValueDto> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIInventoryDto::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIInventoryDto::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIInventoryDto::getBaseUnit() const {
    return m_base_unit;
}
void OAIInventoryDto::setBaseUnit(const QString &base_unit) {
    m_base_unit = base_unit;
    m_base_unit_isSet = true;
}

bool OAIInventoryDto::is_base_unit_Set() const{
    return m_base_unit_isSet;
}

bool OAIInventoryDto::is_base_unit_Valid() const{
    return m_base_unit_isValid;
}

QString OAIInventoryDto::getBody() const {
    return m_body;
}
void OAIInventoryDto::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIInventoryDto::is_body_Set() const{
    return m_body_isSet;
}

bool OAIInventoryDto::is_body_Valid() const{
    return m_body_isValid;
}

OAICostPriceStatisticsInInventoryDto OAIInventoryDto::getCostPriceStatistics() const {
    return m_cost_price_statistics;
}
void OAIInventoryDto::setCostPriceStatistics(const OAICostPriceStatisticsInInventoryDto &cost_price_statistics) {
    m_cost_price_statistics = cost_price_statistics;
    m_cost_price_statistics_isSet = true;
}

bool OAIInventoryDto::is_cost_price_statistics_Set() const{
    return m_cost_price_statistics_isSet;
}

bool OAIInventoryDto::is_cost_price_statistics_Valid() const{
    return m_cost_price_statistics_isValid;
}

QList<OAIInventoryCrossReferenceDto> OAIInventoryDto::getCrossReferences() const {
    return m_cross_references;
}
void OAIInventoryDto::setCrossReferences(const QList<OAIInventoryCrossReferenceDto> &cross_references) {
    m_cross_references = cross_references;
    m_cross_references_isSet = true;
}

bool OAIInventoryDto::is_cross_references_Set() const{
    return m_cross_references_isSet;
}

bool OAIInventoryDto::is_cross_references_Valid() const{
    return m_cross_references_isValid;
}

double OAIInventoryDto::getCurrentCost() const {
    return m_current_cost;
}
void OAIInventoryDto::setCurrentCost(const double &current_cost) {
    m_current_cost = current_cost;
    m_current_cost_isSet = true;
}

bool OAIInventoryDto::is_current_cost_Set() const{
    return m_current_cost_isSet;
}

bool OAIInventoryDto::is_current_cost_Valid() const{
    return m_current_cost_isValid;
}

OAIDefaultIssueFromInInventoryDto OAIInventoryDto::getDefaultIssueFrom() const {
    return m_default_issue_from;
}
void OAIInventoryDto::setDefaultIssueFrom(const OAIDefaultIssueFromInInventoryDto &default_issue_from) {
    m_default_issue_from = default_issue_from;
    m_default_issue_from_isSet = true;
}

bool OAIInventoryDto::is_default_issue_from_Set() const{
    return m_default_issue_from_isSet;
}

bool OAIInventoryDto::is_default_issue_from_Valid() const{
    return m_default_issue_from_isValid;
}

double OAIInventoryDto::getDefaultPrice() const {
    return m_default_price;
}
void OAIInventoryDto::setDefaultPrice(const double &default_price) {
    m_default_price = default_price;
    m_default_price_isSet = true;
}

bool OAIInventoryDto::is_default_price_Set() const{
    return m_default_price_isSet;
}

bool OAIInventoryDto::is_default_price_Valid() const{
    return m_default_price_isValid;
}

OAIDefaultReceiptToInInventoryDto OAIInventoryDto::getDefaultReceiptTo() const {
    return m_default_receipt_to;
}
void OAIInventoryDto::setDefaultReceiptTo(const OAIDefaultReceiptToInInventoryDto &default_receipt_to) {
    m_default_receipt_to = default_receipt_to;
    m_default_receipt_to_isSet = true;
}

bool OAIInventoryDto::is_default_receipt_to_Set() const{
    return m_default_receipt_to_isSet;
}

bool OAIInventoryDto::is_default_receipt_to_Valid() const{
    return m_default_receipt_to_isValid;
}

OAIDefaultWarehouseInInventoryDto OAIInventoryDto::getDefaultWarehouse() const {
    return m_default_warehouse;
}
void OAIInventoryDto::setDefaultWarehouse(const OAIDefaultWarehouseInInventoryDto &default_warehouse) {
    m_default_warehouse = default_warehouse;
    m_default_warehouse_isSet = true;
}

bool OAIInventoryDto::is_default_warehouse_Set() const{
    return m_default_warehouse_isSet;
}

bool OAIInventoryDto::is_default_warehouse_Valid() const{
    return m_default_warehouse_isValid;
}

QString OAIInventoryDto::getDescription() const {
    return m_description;
}
void OAIInventoryDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInventoryDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInventoryDto::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIInventoryDto::getEffectiveDate() const {
    return m_effective_date;
}
void OAIInventoryDto::setEffectiveDate(const QDateTime &effective_date) {
    m_effective_date = effective_date;
    m_effective_date_isSet = true;
}

bool OAIInventoryDto::is_effective_date_Set() const{
    return m_effective_date_isSet;
}

bool OAIInventoryDto::is_effective_date_Valid() const{
    return m_effective_date_isValid;
}

QString OAIInventoryDto::getErrorInfo() const {
    return m_error_info;
}
void OAIInventoryDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIInventoryDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIInventoryDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

OAIIntrastatInInventoryDto OAIInventoryDto::getIntrastat() const {
    return m_intrastat;
}
void OAIInventoryDto::setIntrastat(const OAIIntrastatInInventoryDto &intrastat) {
    m_intrastat = intrastat;
    m_intrastat_isSet = true;
}

bool OAIInventoryDto::is_intrastat_Set() const{
    return m_intrastat_isSet;
}

bool OAIInventoryDto::is_intrastat_Valid() const{
    return m_intrastat_isValid;
}

qint32 OAIInventoryDto::getInventoryId() const {
    return m_inventory_id;
}
void OAIInventoryDto::setInventoryId(const qint32 &inventory_id) {
    m_inventory_id = inventory_id;
    m_inventory_id_isSet = true;
}

bool OAIInventoryDto::is_inventory_id_Set() const{
    return m_inventory_id_isSet;
}

bool OAIInventoryDto::is_inventory_id_Valid() const{
    return m_inventory_id_isValid;
}

QString OAIInventoryDto::getInventoryNumber() const {
    return m_inventory_number;
}
void OAIInventoryDto::setInventoryNumber(const QString &inventory_number) {
    m_inventory_number = inventory_number;
    m_inventory_number_isSet = true;
}

bool OAIInventoryDto::is_inventory_number_Set() const{
    return m_inventory_number_isSet;
}

bool OAIInventoryDto::is_inventory_number_Valid() const{
    return m_inventory_number_isValid;
}

QList<OAIInventoryUnitDto> OAIInventoryDto::getInventoryUnits() const {
    return m_inventory_units;
}
void OAIInventoryDto::setInventoryUnits(const QList<OAIInventoryUnitDto> &inventory_units) {
    m_inventory_units = inventory_units;
    m_inventory_units_isSet = true;
}

bool OAIInventoryDto::is_inventory_units_Set() const{
    return m_inventory_units_isSet;
}

bool OAIInventoryDto::is_inventory_units_Valid() const{
    return m_inventory_units_isValid;
}

OAIItemClassInInventoryDto OAIInventoryDto::getItemClass() const {
    return m_item_class;
}
void OAIInventoryDto::setItemClass(const OAIItemClassInInventoryDto &item_class) {
    m_item_class = item_class;
    m_item_class_isSet = true;
}

bool OAIInventoryDto::is_item_class_Set() const{
    return m_item_class_isSet;
}

bool OAIInventoryDto::is_item_class_Valid() const{
    return m_item_class_isValid;
}

bool OAIInventoryDto::isKitItem() const {
    return m_kit_item;
}
void OAIInventoryDto::setKitItem(const bool &kit_item) {
    m_kit_item = kit_item;
    m_kit_item_isSet = true;
}

bool OAIInventoryDto::is_kit_item_Set() const{
    return m_kit_item_isSet;
}

bool OAIInventoryDto::is_kit_item_Valid() const{
    return m_kit_item_isValid;
}

double OAIInventoryDto::getLastCost() const {
    return m_last_cost;
}
void OAIInventoryDto::setLastCost(const double &last_cost) {
    m_last_cost = last_cost;
    m_last_cost_isSet = true;
}

bool OAIInventoryDto::is_last_cost_Set() const{
    return m_last_cost_isSet;
}

bool OAIInventoryDto::is_last_cost_Valid() const{
    return m_last_cost_isValid;
}

QDateTime OAIInventoryDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIInventoryDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIInventoryDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIInventoryDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAILotSerialClassInInventoryDto OAIInventoryDto::getLotSerialClass() const {
    return m_lot_serial_class;
}
void OAIInventoryDto::setLotSerialClass(const OAILotSerialClassInInventoryDto &lot_serial_class) {
    m_lot_serial_class = lot_serial_class;
    m_lot_serial_class_isSet = true;
}

bool OAIInventoryDto::is_lot_serial_class_Set() const{
    return m_lot_serial_class_isSet;
}

bool OAIInventoryDto::is_lot_serial_class_Valid() const{
    return m_lot_serial_class_isValid;
}

OAIMetadataDto OAIInventoryDto::getMetadata() const {
    return m_metadata;
}
void OAIInventoryDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIInventoryDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIInventoryDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIInventoryDto::getNote() const {
    return m_note;
}
void OAIInventoryDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIInventoryDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAIInventoryDto::is_note_Valid() const{
    return m_note_isValid;
}

OAIPackagingInInventoryDto OAIInventoryDto::getPackaging() const {
    return m_packaging;
}
void OAIInventoryDto::setPackaging(const OAIPackagingInInventoryDto &packaging) {
    m_packaging = packaging;
    m_packaging_isSet = true;
}

bool OAIInventoryDto::is_packaging_Set() const{
    return m_packaging_isSet;
}

bool OAIInventoryDto::is_packaging_Valid() const{
    return m_packaging_isValid;
}

double OAIInventoryDto::getPendingCost() const {
    return m_pending_cost;
}
void OAIInventoryDto::setPendingCost(const double &pending_cost) {
    m_pending_cost = pending_cost;
    m_pending_cost_isSet = true;
}

bool OAIInventoryDto::is_pending_cost_Set() const{
    return m_pending_cost_isSet;
}

bool OAIInventoryDto::is_pending_cost_Valid() const{
    return m_pending_cost_isValid;
}

QDateTime OAIInventoryDto::getPendingCostDate() const {
    return m_pending_cost_date;
}
void OAIInventoryDto::setPendingCostDate(const QDateTime &pending_cost_date) {
    m_pending_cost_date = pending_cost_date;
    m_pending_cost_date_isSet = true;
}

bool OAIInventoryDto::is_pending_cost_date_Set() const{
    return m_pending_cost_date_isSet;
}

bool OAIInventoryDto::is_pending_cost_date_Valid() const{
    return m_pending_cost_date_isValid;
}

OAIPostingClassInInventoryDto OAIInventoryDto::getPostingClass() const {
    return m_posting_class;
}
void OAIInventoryDto::setPostingClass(const OAIPostingClassInInventoryDto &posting_class) {
    m_posting_class = posting_class;
    m_posting_class_isSet = true;
}

bool OAIInventoryDto::is_posting_class_Set() const{
    return m_posting_class_isSet;
}

bool OAIInventoryDto::is_posting_class_Valid() const{
    return m_posting_class_isValid;
}

OAIPriceClassInInventoryDto OAIInventoryDto::getPriceClass() const {
    return m_price_class;
}
void OAIInventoryDto::setPriceClass(const OAIPriceClassInInventoryDto &price_class) {
    m_price_class = price_class;
    m_price_class_isSet = true;
}

bool OAIInventoryDto::is_price_class_Set() const{
    return m_price_class_isSet;
}

bool OAIInventoryDto::is_price_class_Valid() const{
    return m_price_class_isValid;
}

QString OAIInventoryDto::getPriceClassId() const {
    return m_price_class_id;
}
void OAIInventoryDto::setPriceClassId(const QString &price_class_id) {
    m_price_class_id = price_class_id;
    m_price_class_id_isSet = true;
}

bool OAIInventoryDto::is_price_class_id_Set() const{
    return m_price_class_id_isSet;
}

bool OAIInventoryDto::is_price_class_id_Valid() const{
    return m_price_class_id_isValid;
}

OAIPriceManagerInInventoryDto OAIInventoryDto::getPriceManager() const {
    return m_price_manager;
}
void OAIInventoryDto::setPriceManager(const OAIPriceManagerInInventoryDto &price_manager) {
    m_price_manager = price_manager;
    m_price_manager_isSet = true;
}

bool OAIInventoryDto::is_price_manager_Set() const{
    return m_price_manager_isSet;
}

bool OAIInventoryDto::is_price_manager_Valid() const{
    return m_price_manager_isValid;
}

QString OAIInventoryDto::getPriceManagerId() const {
    return m_price_manager_id;
}
void OAIInventoryDto::setPriceManagerId(const QString &price_manager_id) {
    m_price_manager_id = price_manager_id;
    m_price_manager_id_isSet = true;
}

bool OAIInventoryDto::is_price_manager_id_Set() const{
    return m_price_manager_id_isSet;
}

bool OAIInventoryDto::is_price_manager_id_Valid() const{
    return m_price_manager_id_isValid;
}

qint32 OAIInventoryDto::getPriceWorkgroupId() const {
    return m_price_workgroup_id;
}
void OAIInventoryDto::setPriceWorkgroupId(const qint32 &price_workgroup_id) {
    m_price_workgroup_id = price_workgroup_id;
    m_price_workgroup_id_isSet = true;
}

bool OAIInventoryDto::is_price_workgroup_id_Set() const{
    return m_price_workgroup_id_isSet;
}

bool OAIInventoryDto::is_price_workgroup_id_Valid() const{
    return m_price_workgroup_id_isValid;
}

QString OAIInventoryDto::getPurchaseUnit() const {
    return m_purchase_unit;
}
void OAIInventoryDto::setPurchaseUnit(const QString &purchase_unit) {
    m_purchase_unit = purchase_unit;
    m_purchase_unit_isSet = true;
}

bool OAIInventoryDto::is_purchase_unit_Set() const{
    return m_purchase_unit_isSet;
}

bool OAIInventoryDto::is_purchase_unit_Valid() const{
    return m_purchase_unit_isValid;
}

double OAIInventoryDto::getRecommendedPrice() const {
    return m_recommended_price;
}
void OAIInventoryDto::setRecommendedPrice(const double &recommended_price) {
    m_recommended_price = recommended_price;
    m_recommended_price_isSet = true;
}

bool OAIInventoryDto::is_recommended_price_Set() const{
    return m_recommended_price_isSet;
}

bool OAIInventoryDto::is_recommended_price_Valid() const{
    return m_recommended_price_isValid;
}

QList<OAISalesCategoryLineDto> OAIInventoryDto::getSalesCategories() const {
    return m_sales_categories;
}
void OAIInventoryDto::setSalesCategories(const QList<OAISalesCategoryLineDto> &sales_categories) {
    m_sales_categories = sales_categories;
    m_sales_categories_isSet = true;
}

bool OAIInventoryDto::is_sales_categories_Set() const{
    return m_sales_categories_isSet;
}

bool OAIInventoryDto::is_sales_categories_Valid() const{
    return m_sales_categories_isValid;
}

QString OAIInventoryDto::getSalesUnit() const {
    return m_sales_unit;
}
void OAIInventoryDto::setSalesUnit(const QString &sales_unit) {
    m_sales_unit = sales_unit;
    m_sales_unit_isSet = true;
}

bool OAIInventoryDto::is_sales_unit_Set() const{
    return m_sales_unit_isSet;
}

bool OAIInventoryDto::is_sales_unit_Valid() const{
    return m_sales_unit_isValid;
}

QString OAIInventoryDto::getStatus() const {
    return m_status;
}
void OAIInventoryDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInventoryDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInventoryDto::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIInventoryDto::isStockItem() const {
    return m_stock_item;
}
void OAIInventoryDto::setStockItem(const bool &stock_item) {
    m_stock_item = stock_item;
    m_stock_item_isSet = true;
}

bool OAIInventoryDto::is_stock_item_Set() const{
    return m_stock_item_isSet;
}

bool OAIInventoryDto::is_stock_item_Valid() const{
    return m_stock_item_isValid;
}

QList<OAISupplierDetailsLineDto> OAIInventoryDto::getSupplierDetails() const {
    return m_supplier_details;
}
void OAIInventoryDto::setSupplierDetails(const QList<OAISupplierDetailsLineDto> &supplier_details) {
    m_supplier_details = supplier_details;
    m_supplier_details_isSet = true;
}

bool OAIInventoryDto::is_supplier_details_Set() const{
    return m_supplier_details_isSet;
}

bool OAIInventoryDto::is_supplier_details_Valid() const{
    return m_supplier_details_isValid;
}

QString OAIInventoryDto::getType() const {
    return m_type;
}
void OAIInventoryDto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInventoryDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInventoryDto::is_type_Valid() const{
    return m_type_isValid;
}

OAIVatCodeInInventoryDto OAIInventoryDto::getVatCode() const {
    return m_vat_code;
}
void OAIInventoryDto::setVatCode(const OAIVatCodeInInventoryDto &vat_code) {
    m_vat_code = vat_code;
    m_vat_code_isSet = true;
}

bool OAIInventoryDto::is_vat_code_Set() const{
    return m_vat_code_isSet;
}

bool OAIInventoryDto::is_vat_code_Valid() const{
    return m_vat_code_isValid;
}

QList<OAIWarehouseDetailDto> OAIInventoryDto::getWarehouseDetails() const {
    return m_warehouse_details;
}
void OAIInventoryDto::setWarehouseDetails(const QList<OAIWarehouseDetailDto> &warehouse_details) {
    m_warehouse_details = warehouse_details;
    m_warehouse_details_isSet = true;
}

bool OAIInventoryDto::is_warehouse_details_Set() const{
    return m_warehouse_details_isSet;
}

bool OAIInventoryDto::is_warehouse_details_Valid() const{
    return m_warehouse_details_isValid;
}

bool OAIInventoryDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_price_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cross_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_issue_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_receipt_to.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_warehouse.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intrastat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_units.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kit_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_serial_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packaging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_cost_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_posting_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_class_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_manager.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_manager_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_workgroup_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
