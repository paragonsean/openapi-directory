/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEmployeeApi_H
#define OAI_OAIEmployeeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAIChangeEmployeeNrActionDto.h"
#include "OAIChangeEmployeeNrActionResultDto.h"
#include "OAIEmployeeCreateDTO.h"
#include "OAIEmployeeDto.h"
#include "OAIEmployeeUpdateDto.h"
#include "OAIExpenseClaimDto.h"
#include "OAIExpenseReceiptDto.h"
#include "OAIObject.h"
#include "OAITimeCardDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEmployeeApi : public QObject {
    Q_OBJECT

public:
    OAIEmployeeApi(const int timeOut = 0);
    ~OAIEmployeeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  internal_id qint32 [required]
    * @param[in]  oai_change_employee_nr_action_dto OAIChangeEmployeeNrActionDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void employeeChangeEmployeeNrActionByinternalId(const qint32 &internal_id, const OAIChangeEmployeeNrActionDto &oai_change_employee_nr_action_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_employee_create_dto OAIEmployeeCreateDTO [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void employeeCreateEmployee(const OAIEmployeeCreateDTO &oai_employee_create_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  linked_to_user bool [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void employeeGetAllEmployees(const ::OpenAPI::OptionalParam<bool> &linked_to_user = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  employee_cd QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void employeeGetEmployeeByemployeeCd(const QString &employee_cd, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  employee_cd QString [required]
    * @param[in]  status QString [optional]
    * @param[in]  date QDateTime [optional]
    * @param[in]  customer QString [optional]
    * @param[in]  department_id QString [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void employeeGetEmployeeExpenseClaimsByemployeeCd(const QString &employee_cd, const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &customer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &department_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  employee_cd QString [required]
    * @param[in]  date QString [optional]
    * @param[in]  date_condition QString [optional]
    * @param[in]  inventory QString [optional]
    * @param[in]  project QString [optional]
    * @param[in]  claimed_by QString [optional]
    * @param[in]  project_task QString [optional]
    * @param[in]  invoiceable bool [optional]
    * @param[in]  status QString [optional]
    * @param[in]  customer QString [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void employeeGetEmployeeExpenseReceiptsByemployeeCd(const QString &employee_cd, const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &inventory = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &claimed_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_task = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &invoiceable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  employee_cd QString [required]
    * @param[in]  status QString [optional]
    * @param[in]  week QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void employeeGetEmployeeTimeCardsByemployeeCd(const QString &employee_cd, const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &week = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  employee_cd QString [required]
    * @param[in]  oai_employee_update_dto OAIEmployeeUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void employeePutByemployeeCd(const QString &employee_cd, const OAIEmployeeUpdateDto &oai_employee_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void employeeChangeEmployeeNrActionByinternalIdCallback(OAIHttpRequestWorker *worker);
    void employeeCreateEmployeeCallback(OAIHttpRequestWorker *worker);
    void employeeGetAllEmployeesCallback(OAIHttpRequestWorker *worker);
    void employeeGetEmployeeByemployeeCdCallback(OAIHttpRequestWorker *worker);
    void employeeGetEmployeeExpenseClaimsByemployeeCdCallback(OAIHttpRequestWorker *worker);
    void employeeGetEmployeeExpenseReceiptsByemployeeCdCallback(OAIHttpRequestWorker *worker);
    void employeeGetEmployeeTimeCardsByemployeeCdCallback(OAIHttpRequestWorker *worker);
    void employeePutByemployeeCdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void employeeChangeEmployeeNrActionByinternalIdSignal(OAIChangeEmployeeNrActionResultDto summary);
    void employeeCreateEmployeeSignal(OAIObject summary);
    void employeeGetAllEmployeesSignal(QList<OAIEmployeeDto> summary);
    void employeeGetEmployeeByemployeeCdSignal(OAIEmployeeDto summary);
    void employeeGetEmployeeExpenseClaimsByemployeeCdSignal(QList<OAIExpenseClaimDto> summary);
    void employeeGetEmployeeExpenseReceiptsByemployeeCdSignal(QList<OAIExpenseReceiptDto> summary);
    void employeeGetEmployeeTimeCardsByemployeeCdSignal(QList<OAITimeCardDto> summary);
    void employeePutByemployeeCdSignal(OAIBackgroundApiAcceptedDto summary);


    void employeeChangeEmployeeNrActionByinternalIdSignalFull(OAIHttpRequestWorker *worker, OAIChangeEmployeeNrActionResultDto summary);
    void employeeCreateEmployeeSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void employeeGetAllEmployeesSignalFull(OAIHttpRequestWorker *worker, QList<OAIEmployeeDto> summary);
    void employeeGetEmployeeByemployeeCdSignalFull(OAIHttpRequestWorker *worker, OAIEmployeeDto summary);
    void employeeGetEmployeeExpenseClaimsByemployeeCdSignalFull(OAIHttpRequestWorker *worker, QList<OAIExpenseClaimDto> summary);
    void employeeGetEmployeeExpenseReceiptsByemployeeCdSignalFull(OAIHttpRequestWorker *worker, QList<OAIExpenseReceiptDto> summary);
    void employeeGetEmployeeTimeCardsByemployeeCdSignalFull(OAIHttpRequestWorker *worker, QList<OAITimeCardDto> summary);
    void employeePutByemployeeCdSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);

    Q_DECL_DEPRECATED_X("Use employeeChangeEmployeeNrActionByinternalIdSignalError() instead")
    void employeeChangeEmployeeNrActionByinternalIdSignalE(OAIChangeEmployeeNrActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void employeeChangeEmployeeNrActionByinternalIdSignalError(OAIChangeEmployeeNrActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use employeeCreateEmployeeSignalError() instead")
    void employeeCreateEmployeeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void employeeCreateEmployeeSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use employeeGetAllEmployeesSignalError() instead")
    void employeeGetAllEmployeesSignalE(QList<OAIEmployeeDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void employeeGetAllEmployeesSignalError(QList<OAIEmployeeDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use employeeGetEmployeeByemployeeCdSignalError() instead")
    void employeeGetEmployeeByemployeeCdSignalE(OAIEmployeeDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void employeeGetEmployeeByemployeeCdSignalError(OAIEmployeeDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use employeeGetEmployeeExpenseClaimsByemployeeCdSignalError() instead")
    void employeeGetEmployeeExpenseClaimsByemployeeCdSignalE(QList<OAIExpenseClaimDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void employeeGetEmployeeExpenseClaimsByemployeeCdSignalError(QList<OAIExpenseClaimDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use employeeGetEmployeeExpenseReceiptsByemployeeCdSignalError() instead")
    void employeeGetEmployeeExpenseReceiptsByemployeeCdSignalE(QList<OAIExpenseReceiptDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void employeeGetEmployeeExpenseReceiptsByemployeeCdSignalError(QList<OAIExpenseReceiptDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use employeeGetEmployeeTimeCardsByemployeeCdSignalError() instead")
    void employeeGetEmployeeTimeCardsByemployeeCdSignalE(QList<OAITimeCardDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void employeeGetEmployeeTimeCardsByemployeeCdSignalError(QList<OAITimeCardDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use employeePutByemployeeCdSignalError() instead")
    void employeePutByemployeeCdSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void employeePutByemployeeCdSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use employeeChangeEmployeeNrActionByinternalIdSignalErrorFull() instead")
    void employeeChangeEmployeeNrActionByinternalIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void employeeChangeEmployeeNrActionByinternalIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use employeeCreateEmployeeSignalErrorFull() instead")
    void employeeCreateEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void employeeCreateEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use employeeGetAllEmployeesSignalErrorFull() instead")
    void employeeGetAllEmployeesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void employeeGetAllEmployeesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use employeeGetEmployeeByemployeeCdSignalErrorFull() instead")
    void employeeGetEmployeeByemployeeCdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void employeeGetEmployeeByemployeeCdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use employeeGetEmployeeExpenseClaimsByemployeeCdSignalErrorFull() instead")
    void employeeGetEmployeeExpenseClaimsByemployeeCdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void employeeGetEmployeeExpenseClaimsByemployeeCdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use employeeGetEmployeeExpenseReceiptsByemployeeCdSignalErrorFull() instead")
    void employeeGetEmployeeExpenseReceiptsByemployeeCdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void employeeGetEmployeeExpenseReceiptsByemployeeCdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use employeeGetEmployeeTimeCardsByemployeeCdSignalErrorFull() instead")
    void employeeGetEmployeeTimeCardsByemployeeCdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void employeeGetEmployeeTimeCardsByemployeeCdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use employeePutByemployeeCdSignalErrorFull() instead")
    void employeePutByemployeeCdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void employeePutByemployeeCdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
