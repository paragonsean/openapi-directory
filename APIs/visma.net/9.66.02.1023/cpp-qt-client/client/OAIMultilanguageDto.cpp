/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMultilanguageDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMultilanguageDto::OAIMultilanguageDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMultilanguageDto::OAIMultilanguageDto() {
    this->initializeModel();
}

OAIMultilanguageDto::~OAIMultilanguageDto() {}

void OAIMultilanguageDto::initializeModel() {

    m_is_translated_isSet = false;
    m_is_translated_isValid = false;

    m_language_iso_isSet = false;
    m_language_iso_isValid = false;

    m_translation_isSet = false;
    m_translation_isValid = false;
}

void OAIMultilanguageDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMultilanguageDto::fromJsonObject(QJsonObject json) {

    m_is_translated_isValid = ::OpenAPI::fromJsonValue(m_is_translated, json[QString("isTranslated")]);
    m_is_translated_isSet = !json[QString("isTranslated")].isNull() && m_is_translated_isValid;

    m_language_iso_isValid = ::OpenAPI::fromJsonValue(m_language_iso, json[QString("languageISO")]);
    m_language_iso_isSet = !json[QString("languageISO")].isNull() && m_language_iso_isValid;

    m_translation_isValid = ::OpenAPI::fromJsonValue(m_translation, json[QString("translation")]);
    m_translation_isSet = !json[QString("translation")].isNull() && m_translation_isValid;
}

QString OAIMultilanguageDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMultilanguageDto::asJsonObject() const {
    QJsonObject obj;
    if (m_is_translated_isSet) {
        obj.insert(QString("isTranslated"), ::OpenAPI::toJsonValue(m_is_translated));
    }
    if (m_language_iso_isSet) {
        obj.insert(QString("languageISO"), ::OpenAPI::toJsonValue(m_language_iso));
    }
    if (m_translation_isSet) {
        obj.insert(QString("translation"), ::OpenAPI::toJsonValue(m_translation));
    }
    return obj;
}

bool OAIMultilanguageDto::isIsTranslated() const {
    return m_is_translated;
}
void OAIMultilanguageDto::setIsTranslated(const bool &is_translated) {
    m_is_translated = is_translated;
    m_is_translated_isSet = true;
}

bool OAIMultilanguageDto::is_is_translated_Set() const{
    return m_is_translated_isSet;
}

bool OAIMultilanguageDto::is_is_translated_Valid() const{
    return m_is_translated_isValid;
}

QString OAIMultilanguageDto::getLanguageIso() const {
    return m_language_iso;
}
void OAIMultilanguageDto::setLanguageIso(const QString &language_iso) {
    m_language_iso = language_iso;
    m_language_iso_isSet = true;
}

bool OAIMultilanguageDto::is_language_iso_Set() const{
    return m_language_iso_isSet;
}

bool OAIMultilanguageDto::is_language_iso_Valid() const{
    return m_language_iso_isValid;
}

QString OAIMultilanguageDto::getTranslation() const {
    return m_translation;
}
void OAIMultilanguageDto::setTranslation(const QString &translation) {
    m_translation = translation;
    m_translation_isSet = true;
}

bool OAIMultilanguageDto::is_translation_Set() const{
    return m_translation_isSet;
}

bool OAIMultilanguageDto::is_translation_Valid() const{
    return m_translation_isValid;
}

bool OAIMultilanguageDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_translated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_iso_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMultilanguageDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
