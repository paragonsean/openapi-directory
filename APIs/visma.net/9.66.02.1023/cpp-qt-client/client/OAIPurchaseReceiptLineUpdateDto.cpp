/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseReceiptLineUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseReceiptLineUpdateDto::OAIPurchaseReceiptLineUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseReceiptLineUpdateDto::OAIPurchaseReceiptLineUpdateDto() {
    this->initializeModel();
}

OAIPurchaseReceiptLineUpdateDto::~OAIPurchaseReceiptLineUpdateDto() {}

void OAIPurchaseReceiptLineUpdateDto::initializeModel() {

    m_account_description_isSet = false;
    m_account_description_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_actual_account_id_isSet = false;
    m_actual_account_id_isValid = false;

    m_actual_subaccount_isSet = false;
    m_actual_subaccount_isValid = false;

    m_allocations_isSet = false;
    m_allocations_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_branch_id_isSet = false;
    m_branch_id_isValid = false;

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_complete_po_line_isSet = false;
    m_complete_po_line_isValid = false;

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_discount_code_id_isSet = false;
    m_discount_code_id_isValid = false;

    m_discount_percent_isSet = false;
    m_discount_percent_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_ext_cost_isSet = false;
    m_ext_cost_isValid = false;

    m_inventory_id_isSet = false;
    m_inventory_id_isValid = false;

    m_line_nbr_isSet = false;
    m_line_nbr_isValid = false;

    m_line_type_isSet = false;
    m_line_type_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_lot_serial_number_isSet = false;
    m_lot_serial_number_isValid = false;

    m_manual_discount_isSet = false;
    m_manual_discount_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_po_order_line_nbr_isSet = false;
    m_po_order_line_nbr_isValid = false;

    m_po_order_nbr_isSet = false;
    m_po_order_nbr_isValid = false;

    m_po_order_type_isSet = false;
    m_po_order_type_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_project_task_id_isSet = false;
    m_project_task_id_isValid = false;

    m_receipt_qty_isSet = false;
    m_receipt_qty_isValid = false;

    m_subaccount_isSet = false;
    m_subaccount_isValid = false;

    m_tax_category_id_isSet = false;
    m_tax_category_id_isValid = false;

    m_transaction_description_isSet = false;
    m_transaction_description_isValid = false;

    m_transfer_order_line_nbr_isSet = false;
    m_transfer_order_line_nbr_isValid = false;

    m_transfer_order_nbr_isSet = false;
    m_transfer_order_nbr_isValid = false;

    m_transfer_order_type_isSet = false;
    m_transfer_order_type_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;

    m_warehouse_id_isSet = false;
    m_warehouse_id_isValid = false;
}

void OAIPurchaseReceiptLineUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseReceiptLineUpdateDto::fromJsonObject(QJsonObject json) {

    m_account_description_isValid = ::OpenAPI::fromJsonValue(m_account_description, json[QString("accountDescription")]);
    m_account_description_isSet = !json[QString("accountDescription")].isNull() && m_account_description_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_actual_account_id_isValid = ::OpenAPI::fromJsonValue(m_actual_account_id, json[QString("actualAccountId")]);
    m_actual_account_id_isSet = !json[QString("actualAccountId")].isNull() && m_actual_account_id_isValid;

    m_actual_subaccount_isValid = ::OpenAPI::fromJsonValue(m_actual_subaccount, json[QString("actualSubaccount")]);
    m_actual_subaccount_isSet = !json[QString("actualSubaccount")].isNull() && m_actual_subaccount_isValid;

    m_allocations_isValid = ::OpenAPI::fromJsonValue(m_allocations, json[QString("allocations")]);
    m_allocations_isSet = !json[QString("allocations")].isNull() && m_allocations_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_branch_id_isValid = ::OpenAPI::fromJsonValue(m_branch_id, json[QString("branchId")]);
    m_branch_id_isSet = !json[QString("branchId")].isNull() && m_branch_id_isValid;

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_complete_po_line_isValid = ::OpenAPI::fromJsonValue(m_complete_po_line, json[QString("completePoLine")]);
    m_complete_po_line_isSet = !json[QString("completePoLine")].isNull() && m_complete_po_line_isValid;

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("discountAmount")]);
    m_discount_amount_isSet = !json[QString("discountAmount")].isNull() && m_discount_amount_isValid;

    m_discount_code_id_isValid = ::OpenAPI::fromJsonValue(m_discount_code_id, json[QString("discountCodeId")]);
    m_discount_code_id_isSet = !json[QString("discountCodeId")].isNull() && m_discount_code_id_isValid;

    m_discount_percent_isValid = ::OpenAPI::fromJsonValue(m_discount_percent, json[QString("discountPercent")]);
    m_discount_percent_isSet = !json[QString("discountPercent")].isNull() && m_discount_percent_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_ext_cost_isValid = ::OpenAPI::fromJsonValue(m_ext_cost, json[QString("extCost")]);
    m_ext_cost_isSet = !json[QString("extCost")].isNull() && m_ext_cost_isValid;

    m_inventory_id_isValid = ::OpenAPI::fromJsonValue(m_inventory_id, json[QString("inventoryId")]);
    m_inventory_id_isSet = !json[QString("inventoryId")].isNull() && m_inventory_id_isValid;

    m_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_line_nbr, json[QString("lineNbr")]);
    m_line_nbr_isSet = !json[QString("lineNbr")].isNull() && m_line_nbr_isValid;

    m_line_type_isValid = ::OpenAPI::fromJsonValue(m_line_type, json[QString("lineType")]);
    m_line_type_isSet = !json[QString("lineType")].isNull() && m_line_type_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_lot_serial_number_isValid = ::OpenAPI::fromJsonValue(m_lot_serial_number, json[QString("lotSerialNumber")]);
    m_lot_serial_number_isSet = !json[QString("lotSerialNumber")].isNull() && m_lot_serial_number_isValid;

    m_manual_discount_isValid = ::OpenAPI::fromJsonValue(m_manual_discount, json[QString("manualDiscount")]);
    m_manual_discount_isSet = !json[QString("manualDiscount")].isNull() && m_manual_discount_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_po_order_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_po_order_line_nbr, json[QString("poOrderLineNbr")]);
    m_po_order_line_nbr_isSet = !json[QString("poOrderLineNbr")].isNull() && m_po_order_line_nbr_isValid;

    m_po_order_nbr_isValid = ::OpenAPI::fromJsonValue(m_po_order_nbr, json[QString("poOrderNbr")]);
    m_po_order_nbr_isSet = !json[QString("poOrderNbr")].isNull() && m_po_order_nbr_isValid;

    m_po_order_type_isValid = ::OpenAPI::fromJsonValue(m_po_order_type, json[QString("poOrderType")]);
    m_po_order_type_isSet = !json[QString("poOrderType")].isNull() && m_po_order_type_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_project_task_id_isValid = ::OpenAPI::fromJsonValue(m_project_task_id, json[QString("projectTaskId")]);
    m_project_task_id_isSet = !json[QString("projectTaskId")].isNull() && m_project_task_id_isValid;

    m_receipt_qty_isValid = ::OpenAPI::fromJsonValue(m_receipt_qty, json[QString("receiptQty")]);
    m_receipt_qty_isSet = !json[QString("receiptQty")].isNull() && m_receipt_qty_isValid;

    m_subaccount_isValid = ::OpenAPI::fromJsonValue(m_subaccount, json[QString("subaccount")]);
    m_subaccount_isSet = !json[QString("subaccount")].isNull() && m_subaccount_isValid;

    m_tax_category_id_isValid = ::OpenAPI::fromJsonValue(m_tax_category_id, json[QString("taxCategoryId")]);
    m_tax_category_id_isSet = !json[QString("taxCategoryId")].isNull() && m_tax_category_id_isValid;

    m_transaction_description_isValid = ::OpenAPI::fromJsonValue(m_transaction_description, json[QString("transactionDescription")]);
    m_transaction_description_isSet = !json[QString("transactionDescription")].isNull() && m_transaction_description_isValid;

    m_transfer_order_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_transfer_order_line_nbr, json[QString("transferOrderLineNbr")]);
    m_transfer_order_line_nbr_isSet = !json[QString("transferOrderLineNbr")].isNull() && m_transfer_order_line_nbr_isValid;

    m_transfer_order_nbr_isValid = ::OpenAPI::fromJsonValue(m_transfer_order_nbr, json[QString("transferOrderNbr")]);
    m_transfer_order_nbr_isSet = !json[QString("transferOrderNbr")].isNull() && m_transfer_order_nbr_isValid;

    m_transfer_order_type_isValid = ::OpenAPI::fromJsonValue(m_transfer_order_type, json[QString("transferOrderType")]);
    m_transfer_order_type_isSet = !json[QString("transferOrderType")].isNull() && m_transfer_order_type_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;

    m_warehouse_id_isValid = ::OpenAPI::fromJsonValue(m_warehouse_id, json[QString("warehouseId")]);
    m_warehouse_id_isSet = !json[QString("warehouseId")].isNull() && m_warehouse_id_isValid;
}

QString OAIPurchaseReceiptLineUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseReceiptLineUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_account_description.isSet()) {
        obj.insert(QString("accountDescription"), ::OpenAPI::toJsonValue(m_account_description));
    }
    if (m_account_id.isSet()) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_actual_account_id.isSet()) {
        obj.insert(QString("actualAccountId"), ::OpenAPI::toJsonValue(m_actual_account_id));
    }
    if (m_actual_subaccount.size() > 0) {
        obj.insert(QString("actualSubaccount"), ::OpenAPI::toJsonValue(m_actual_subaccount));
    }
    if (m_allocations.size() > 0) {
        obj.insert(QString("allocations"), ::OpenAPI::toJsonValue(m_allocations));
    }
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_branch_id.isSet()) {
        obj.insert(QString("branchId"), ::OpenAPI::toJsonValue(m_branch_id));
    }
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_complete_po_line.isSet()) {
        obj.insert(QString("completePoLine"), ::OpenAPI::toJsonValue(m_complete_po_line));
    }
    if (m_discount_amount.isSet()) {
        obj.insert(QString("discountAmount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_discount_code_id.isSet()) {
        obj.insert(QString("discountCodeId"), ::OpenAPI::toJsonValue(m_discount_code_id));
    }
    if (m_discount_percent.isSet()) {
        obj.insert(QString("discountPercent"), ::OpenAPI::toJsonValue(m_discount_percent));
    }
    if (m_expiration_date.isSet()) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_ext_cost.isSet()) {
        obj.insert(QString("extCost"), ::OpenAPI::toJsonValue(m_ext_cost));
    }
    if (m_inventory_id.isSet()) {
        obj.insert(QString("inventoryId"), ::OpenAPI::toJsonValue(m_inventory_id));
    }
    if (m_line_nbr.isSet()) {
        obj.insert(QString("lineNbr"), ::OpenAPI::toJsonValue(m_line_nbr));
    }
    if (m_line_type.isSet()) {
        obj.insert(QString("lineType"), ::OpenAPI::toJsonValue(m_line_type));
    }
    if (m_location_id.isSet()) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_lot_serial_number.isSet()) {
        obj.insert(QString("lotSerialNumber"), ::OpenAPI::toJsonValue(m_lot_serial_number));
    }
    if (m_manual_discount.isSet()) {
        obj.insert(QString("manualDiscount"), ::OpenAPI::toJsonValue(m_manual_discount));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_po_order_line_nbr.isSet()) {
        obj.insert(QString("poOrderLineNbr"), ::OpenAPI::toJsonValue(m_po_order_line_nbr));
    }
    if (m_po_order_nbr.isSet()) {
        obj.insert(QString("poOrderNbr"), ::OpenAPI::toJsonValue(m_po_order_nbr));
    }
    if (m_po_order_type.isSet()) {
        obj.insert(QString("poOrderType"), ::OpenAPI::toJsonValue(m_po_order_type));
    }
    if (m_project_id.isSet()) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_project_task_id.isSet()) {
        obj.insert(QString("projectTaskId"), ::OpenAPI::toJsonValue(m_project_task_id));
    }
    if (m_receipt_qty.isSet()) {
        obj.insert(QString("receiptQty"), ::OpenAPI::toJsonValue(m_receipt_qty));
    }
    if (m_subaccount.size() > 0) {
        obj.insert(QString("subaccount"), ::OpenAPI::toJsonValue(m_subaccount));
    }
    if (m_tax_category_id.isSet()) {
        obj.insert(QString("taxCategoryId"), ::OpenAPI::toJsonValue(m_tax_category_id));
    }
    if (m_transaction_description.isSet()) {
        obj.insert(QString("transactionDescription"), ::OpenAPI::toJsonValue(m_transaction_description));
    }
    if (m_transfer_order_line_nbr.isSet()) {
        obj.insert(QString("transferOrderLineNbr"), ::OpenAPI::toJsonValue(m_transfer_order_line_nbr));
    }
    if (m_transfer_order_nbr.isSet()) {
        obj.insert(QString("transferOrderNbr"), ::OpenAPI::toJsonValue(m_transfer_order_nbr));
    }
    if (m_transfer_order_type.isSet()) {
        obj.insert(QString("transferOrderType"), ::OpenAPI::toJsonValue(m_transfer_order_type));
    }
    if (m_unit_cost.isSet()) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_uom.isSet()) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    if (m_warehouse_id.isSet()) {
        obj.insert(QString("warehouseId"), ::OpenAPI::toJsonValue(m_warehouse_id));
    }
    return obj;
}

OAIAccountDescriptionInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getAccountDescription() const {
    return m_account_description;
}
void OAIPurchaseReceiptLineUpdateDto::setAccountDescription(const OAIAccountDescriptionInPurchaseReceiptLineUpdateDto &account_description) {
    m_account_description = account_description;
    m_account_description_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_account_description_Set() const{
    return m_account_description_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_account_description_Valid() const{
    return m_account_description_isValid;
}

OAIAccountIdInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getAccountId() const {
    return m_account_id;
}
void OAIPurchaseReceiptLineUpdateDto::setAccountId(const OAIAccountIdInPurchaseReceiptLineUpdateDto &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIActualAccountIdInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getActualAccountId() const {
    return m_actual_account_id;
}
void OAIPurchaseReceiptLineUpdateDto::setActualAccountId(const OAIActualAccountIdInPurchaseReceiptLineUpdateDto &actual_account_id) {
    m_actual_account_id = actual_account_id;
    m_actual_account_id_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_actual_account_id_Set() const{
    return m_actual_account_id_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_actual_account_id_Valid() const{
    return m_actual_account_id_isValid;
}

QList<OAISegmentUpdateDto> OAIPurchaseReceiptLineUpdateDto::getActualSubaccount() const {
    return m_actual_subaccount;
}
void OAIPurchaseReceiptLineUpdateDto::setActualSubaccount(const QList<OAISegmentUpdateDto> &actual_subaccount) {
    m_actual_subaccount = actual_subaccount;
    m_actual_subaccount_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_actual_subaccount_Set() const{
    return m_actual_subaccount_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_actual_subaccount_Valid() const{
    return m_actual_subaccount_isValid;
}

QList<OAIAllocationsUpdateDto> OAIPurchaseReceiptLineUpdateDto::getAllocations() const {
    return m_allocations;
}
void OAIPurchaseReceiptLineUpdateDto::setAllocations(const QList<OAIAllocationsUpdateDto> &allocations) {
    m_allocations = allocations;
    m_allocations_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_allocations_Set() const{
    return m_allocations_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_allocations_Valid() const{
    return m_allocations_isValid;
}

OAIAmountInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getAmount() const {
    return m_amount;
}
void OAIPurchaseReceiptLineUpdateDto::setAmount(const OAIAmountInPurchaseReceiptLineUpdateDto &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIBranchIdInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getBranchId() const {
    return m_branch_id;
}
void OAIPurchaseReceiptLineUpdateDto::setBranchId(const OAIBranchIdInPurchaseReceiptLineUpdateDto &branch_id) {
    m_branch_id = branch_id;
    m_branch_id_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_branch_id_Set() const{
    return m_branch_id_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_branch_id_Valid() const{
    return m_branch_id_isValid;
}

OAIBranchNumberInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getBranchNumber() const {
    return m_branch_number;
}
void OAIPurchaseReceiptLineUpdateDto::setBranchNumber(const OAIBranchNumberInPurchaseReceiptLineUpdateDto &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

OAICompletePoLineInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getCompletePoLine() const {
    return m_complete_po_line;
}
void OAIPurchaseReceiptLineUpdateDto::setCompletePoLine(const OAICompletePoLineInPurchaseReceiptLineUpdateDto &complete_po_line) {
    m_complete_po_line = complete_po_line;
    m_complete_po_line_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_complete_po_line_Set() const{
    return m_complete_po_line_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_complete_po_line_Valid() const{
    return m_complete_po_line_isValid;
}

OAIDiscountAmountInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getDiscountAmount() const {
    return m_discount_amount;
}
void OAIPurchaseReceiptLineUpdateDto::setDiscountAmount(const OAIDiscountAmountInPurchaseReceiptLineUpdateDto &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

OAIDiscountCodeIdInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getDiscountCodeId() const {
    return m_discount_code_id;
}
void OAIPurchaseReceiptLineUpdateDto::setDiscountCodeId(const OAIDiscountCodeIdInPurchaseReceiptLineUpdateDto &discount_code_id) {
    m_discount_code_id = discount_code_id;
    m_discount_code_id_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_discount_code_id_Set() const{
    return m_discount_code_id_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_discount_code_id_Valid() const{
    return m_discount_code_id_isValid;
}

OAIDiscountPercentInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getDiscountPercent() const {
    return m_discount_percent;
}
void OAIPurchaseReceiptLineUpdateDto::setDiscountPercent(const OAIDiscountPercentInPurchaseReceiptLineUpdateDto &discount_percent) {
    m_discount_percent = discount_percent;
    m_discount_percent_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_discount_percent_Set() const{
    return m_discount_percent_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_discount_percent_Valid() const{
    return m_discount_percent_isValid;
}

OAIExpirationDateInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getExpirationDate() const {
    return m_expiration_date;
}
void OAIPurchaseReceiptLineUpdateDto::setExpirationDate(const OAIExpirationDateInPurchaseReceiptLineUpdateDto &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

OAIExtCostInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getExtCost() const {
    return m_ext_cost;
}
void OAIPurchaseReceiptLineUpdateDto::setExtCost(const OAIExtCostInPurchaseReceiptLineUpdateDto &ext_cost) {
    m_ext_cost = ext_cost;
    m_ext_cost_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_ext_cost_Set() const{
    return m_ext_cost_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_ext_cost_Valid() const{
    return m_ext_cost_isValid;
}

OAIInventoryIdInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getInventoryId() const {
    return m_inventory_id;
}
void OAIPurchaseReceiptLineUpdateDto::setInventoryId(const OAIInventoryIdInPurchaseReceiptLineUpdateDto &inventory_id) {
    m_inventory_id = inventory_id;
    m_inventory_id_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_inventory_id_Set() const{
    return m_inventory_id_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_inventory_id_Valid() const{
    return m_inventory_id_isValid;
}

OAILineNbrInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getLineNbr() const {
    return m_line_nbr;
}
void OAIPurchaseReceiptLineUpdateDto::setLineNbr(const OAILineNbrInPurchaseReceiptLineUpdateDto &line_nbr) {
    m_line_nbr = line_nbr;
    m_line_nbr_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_line_nbr_Set() const{
    return m_line_nbr_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_line_nbr_Valid() const{
    return m_line_nbr_isValid;
}

OAILineTypeInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getLineType() const {
    return m_line_type;
}
void OAIPurchaseReceiptLineUpdateDto::setLineType(const OAILineTypeInPurchaseReceiptLineUpdateDto &line_type) {
    m_line_type = line_type;
    m_line_type_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_line_type_Set() const{
    return m_line_type_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_line_type_Valid() const{
    return m_line_type_isValid;
}

OAILocationIdInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getLocationId() const {
    return m_location_id;
}
void OAIPurchaseReceiptLineUpdateDto::setLocationId(const OAILocationIdInPurchaseReceiptLineUpdateDto &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_location_id_Valid() const{
    return m_location_id_isValid;
}

OAIDtoValueOfString OAIPurchaseReceiptLineUpdateDto::getLotSerialNumber() const {
    return m_lot_serial_number;
}
void OAIPurchaseReceiptLineUpdateDto::setLotSerialNumber(const OAIDtoValueOfString &lot_serial_number) {
    m_lot_serial_number = lot_serial_number;
    m_lot_serial_number_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_lot_serial_number_Set() const{
    return m_lot_serial_number_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_lot_serial_number_Valid() const{
    return m_lot_serial_number_isValid;
}

OAIManualDiscountInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getManualDiscount() const {
    return m_manual_discount;
}
void OAIPurchaseReceiptLineUpdateDto::setManualDiscount(const OAIManualDiscountInPurchaseReceiptLineUpdateDto &manual_discount) {
    m_manual_discount = manual_discount;
    m_manual_discount_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_manual_discount_Set() const{
    return m_manual_discount_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_manual_discount_Valid() const{
    return m_manual_discount_isValid;
}

QString OAIPurchaseReceiptLineUpdateDto::getOperation() const {
    return m_operation;
}
void OAIPurchaseReceiptLineUpdateDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIPoOrderLineNbrInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getPoOrderLineNbr() const {
    return m_po_order_line_nbr;
}
void OAIPurchaseReceiptLineUpdateDto::setPoOrderLineNbr(const OAIPoOrderLineNbrInPurchaseReceiptLineUpdateDto &po_order_line_nbr) {
    m_po_order_line_nbr = po_order_line_nbr;
    m_po_order_line_nbr_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_po_order_line_nbr_Set() const{
    return m_po_order_line_nbr_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_po_order_line_nbr_Valid() const{
    return m_po_order_line_nbr_isValid;
}

OAIPoOrderNbrInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getPoOrderNbr() const {
    return m_po_order_nbr;
}
void OAIPurchaseReceiptLineUpdateDto::setPoOrderNbr(const OAIPoOrderNbrInPurchaseReceiptLineUpdateDto &po_order_nbr) {
    m_po_order_nbr = po_order_nbr;
    m_po_order_nbr_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_po_order_nbr_Set() const{
    return m_po_order_nbr_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_po_order_nbr_Valid() const{
    return m_po_order_nbr_isValid;
}

OAIPoOrderTypeInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getPoOrderType() const {
    return m_po_order_type;
}
void OAIPurchaseReceiptLineUpdateDto::setPoOrderType(const OAIPoOrderTypeInPurchaseReceiptLineUpdateDto &po_order_type) {
    m_po_order_type = po_order_type;
    m_po_order_type_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_po_order_type_Set() const{
    return m_po_order_type_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_po_order_type_Valid() const{
    return m_po_order_type_isValid;
}

OAIProjectIdInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getProjectId() const {
    return m_project_id;
}
void OAIPurchaseReceiptLineUpdateDto::setProjectId(const OAIProjectIdInPurchaseReceiptLineUpdateDto &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_project_id_Valid() const{
    return m_project_id_isValid;
}

OAIProjectTaskIdInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getProjectTaskId() const {
    return m_project_task_id;
}
void OAIPurchaseReceiptLineUpdateDto::setProjectTaskId(const OAIProjectTaskIdInPurchaseReceiptLineUpdateDto &project_task_id) {
    m_project_task_id = project_task_id;
    m_project_task_id_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_project_task_id_Set() const{
    return m_project_task_id_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_project_task_id_Valid() const{
    return m_project_task_id_isValid;
}

OAIReceiptQtyInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getReceiptQty() const {
    return m_receipt_qty;
}
void OAIPurchaseReceiptLineUpdateDto::setReceiptQty(const OAIReceiptQtyInPurchaseReceiptLineUpdateDto &receipt_qty) {
    m_receipt_qty = receipt_qty;
    m_receipt_qty_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_receipt_qty_Set() const{
    return m_receipt_qty_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_receipt_qty_Valid() const{
    return m_receipt_qty_isValid;
}

QList<OAISegmentUpdateDto> OAIPurchaseReceiptLineUpdateDto::getSubaccount() const {
    return m_subaccount;
}
void OAIPurchaseReceiptLineUpdateDto::setSubaccount(const QList<OAISegmentUpdateDto> &subaccount) {
    m_subaccount = subaccount;
    m_subaccount_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_subaccount_Set() const{
    return m_subaccount_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_subaccount_Valid() const{
    return m_subaccount_isValid;
}

OAITaxCategoryIdInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getTaxCategoryId() const {
    return m_tax_category_id;
}
void OAIPurchaseReceiptLineUpdateDto::setTaxCategoryId(const OAITaxCategoryIdInPurchaseReceiptLineUpdateDto &tax_category_id) {
    m_tax_category_id = tax_category_id;
    m_tax_category_id_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_tax_category_id_Set() const{
    return m_tax_category_id_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_tax_category_id_Valid() const{
    return m_tax_category_id_isValid;
}

OAITransactionDescriptionInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getTransactionDescription() const {
    return m_transaction_description;
}
void OAIPurchaseReceiptLineUpdateDto::setTransactionDescription(const OAITransactionDescriptionInPurchaseReceiptLineUpdateDto &transaction_description) {
    m_transaction_description = transaction_description;
    m_transaction_description_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_transaction_description_Set() const{
    return m_transaction_description_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_transaction_description_Valid() const{
    return m_transaction_description_isValid;
}

OAITransferOrderLineNbrInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getTransferOrderLineNbr() const {
    return m_transfer_order_line_nbr;
}
void OAIPurchaseReceiptLineUpdateDto::setTransferOrderLineNbr(const OAITransferOrderLineNbrInPurchaseReceiptLineUpdateDto &transfer_order_line_nbr) {
    m_transfer_order_line_nbr = transfer_order_line_nbr;
    m_transfer_order_line_nbr_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_transfer_order_line_nbr_Set() const{
    return m_transfer_order_line_nbr_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_transfer_order_line_nbr_Valid() const{
    return m_transfer_order_line_nbr_isValid;
}

OAITransferOrderNbrInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getTransferOrderNbr() const {
    return m_transfer_order_nbr;
}
void OAIPurchaseReceiptLineUpdateDto::setTransferOrderNbr(const OAITransferOrderNbrInPurchaseReceiptLineUpdateDto &transfer_order_nbr) {
    m_transfer_order_nbr = transfer_order_nbr;
    m_transfer_order_nbr_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_transfer_order_nbr_Set() const{
    return m_transfer_order_nbr_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_transfer_order_nbr_Valid() const{
    return m_transfer_order_nbr_isValid;
}

OAITransferOrderTypeInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getTransferOrderType() const {
    return m_transfer_order_type;
}
void OAIPurchaseReceiptLineUpdateDto::setTransferOrderType(const OAITransferOrderTypeInPurchaseReceiptLineUpdateDto &transfer_order_type) {
    m_transfer_order_type = transfer_order_type;
    m_transfer_order_type_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_transfer_order_type_Set() const{
    return m_transfer_order_type_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_transfer_order_type_Valid() const{
    return m_transfer_order_type_isValid;
}

OAIUnitCostInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getUnitCost() const {
    return m_unit_cost;
}
void OAIPurchaseReceiptLineUpdateDto::setUnitCost(const OAIUnitCostInPurchaseReceiptLineUpdateDto &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

OAIUomInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getUom() const {
    return m_uom;
}
void OAIPurchaseReceiptLineUpdateDto::setUom(const OAIUomInPurchaseReceiptLineUpdateDto &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_uom_Valid() const{
    return m_uom_isValid;
}

OAIWarehouseIdInPurchaseReceiptLineUpdateDto OAIPurchaseReceiptLineUpdateDto::getWarehouseId() const {
    return m_warehouse_id;
}
void OAIPurchaseReceiptLineUpdateDto::setWarehouseId(const OAIWarehouseIdInPurchaseReceiptLineUpdateDto &warehouse_id) {
    m_warehouse_id = warehouse_id;
    m_warehouse_id_isSet = true;
}

bool OAIPurchaseReceiptLineUpdateDto::is_warehouse_id_Set() const{
    return m_warehouse_id_isSet;
}

bool OAIPurchaseReceiptLineUpdateDto::is_warehouse_id_Valid() const{
    return m_warehouse_id_isValid;
}

bool OAIPurchaseReceiptLineUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_account_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_subaccount.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_complete_po_line.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_code_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_percent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ext_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_serial_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_discount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_order_line_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_order_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_order_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_qty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_category_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_order_line_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_order_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_order_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseReceiptLineUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
