/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICurrencyRateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICurrencyRateParameters::OAICurrencyRateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICurrencyRateParameters::OAICurrencyRateParameters() {
    this->initializeModel();
}

OAICurrencyRateParameters::~OAICurrencyRateParameters() {}

void OAICurrencyRateParameters::initializeModel() {

    m_from_currency_isSet = false;
    m_from_currency_isValid = false;

    m_from_date_isSet = false;
    m_from_date_isValid = false;

    m_rate_type_isSet = false;
    m_rate_type_isValid = false;

    m_to_currency_isSet = false;
    m_to_currency_isValid = false;

    m_to_date_isSet = false;
    m_to_date_isValid = false;
}

void OAICurrencyRateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICurrencyRateParameters::fromJsonObject(QJsonObject json) {

    m_from_currency_isValid = ::OpenAPI::fromJsonValue(m_from_currency, json[QString("fromCurrency")]);
    m_from_currency_isSet = !json[QString("fromCurrency")].isNull() && m_from_currency_isValid;

    m_from_date_isValid = ::OpenAPI::fromJsonValue(m_from_date, json[QString("fromDate")]);
    m_from_date_isSet = !json[QString("fromDate")].isNull() && m_from_date_isValid;

    m_rate_type_isValid = ::OpenAPI::fromJsonValue(m_rate_type, json[QString("rateType")]);
    m_rate_type_isSet = !json[QString("rateType")].isNull() && m_rate_type_isValid;

    m_to_currency_isValid = ::OpenAPI::fromJsonValue(m_to_currency, json[QString("toCurrency")]);
    m_to_currency_isSet = !json[QString("toCurrency")].isNull() && m_to_currency_isValid;

    m_to_date_isValid = ::OpenAPI::fromJsonValue(m_to_date, json[QString("toDate")]);
    m_to_date_isSet = !json[QString("toDate")].isNull() && m_to_date_isValid;
}

QString OAICurrencyRateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICurrencyRateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_from_currency_isSet) {
        obj.insert(QString("fromCurrency"), ::OpenAPI::toJsonValue(m_from_currency));
    }
    if (m_from_date_isSet) {
        obj.insert(QString("fromDate"), ::OpenAPI::toJsonValue(m_from_date));
    }
    if (m_rate_type_isSet) {
        obj.insert(QString("rateType"), ::OpenAPI::toJsonValue(m_rate_type));
    }
    if (m_to_currency_isSet) {
        obj.insert(QString("toCurrency"), ::OpenAPI::toJsonValue(m_to_currency));
    }
    if (m_to_date_isSet) {
        obj.insert(QString("toDate"), ::OpenAPI::toJsonValue(m_to_date));
    }
    return obj;
}

QString OAICurrencyRateParameters::getFromCurrency() const {
    return m_from_currency;
}
void OAICurrencyRateParameters::setFromCurrency(const QString &from_currency) {
    m_from_currency = from_currency;
    m_from_currency_isSet = true;
}

bool OAICurrencyRateParameters::is_from_currency_Set() const{
    return m_from_currency_isSet;
}

bool OAICurrencyRateParameters::is_from_currency_Valid() const{
    return m_from_currency_isValid;
}

QDateTime OAICurrencyRateParameters::getFromDate() const {
    return m_from_date;
}
void OAICurrencyRateParameters::setFromDate(const QDateTime &from_date) {
    m_from_date = from_date;
    m_from_date_isSet = true;
}

bool OAICurrencyRateParameters::is_from_date_Set() const{
    return m_from_date_isSet;
}

bool OAICurrencyRateParameters::is_from_date_Valid() const{
    return m_from_date_isValid;
}

QString OAICurrencyRateParameters::getRateType() const {
    return m_rate_type;
}
void OAICurrencyRateParameters::setRateType(const QString &rate_type) {
    m_rate_type = rate_type;
    m_rate_type_isSet = true;
}

bool OAICurrencyRateParameters::is_rate_type_Set() const{
    return m_rate_type_isSet;
}

bool OAICurrencyRateParameters::is_rate_type_Valid() const{
    return m_rate_type_isValid;
}

QString OAICurrencyRateParameters::getToCurrency() const {
    return m_to_currency;
}
void OAICurrencyRateParameters::setToCurrency(const QString &to_currency) {
    m_to_currency = to_currency;
    m_to_currency_isSet = true;
}

bool OAICurrencyRateParameters::is_to_currency_Set() const{
    return m_to_currency_isSet;
}

bool OAICurrencyRateParameters::is_to_currency_Valid() const{
    return m_to_currency_isValid;
}

QDateTime OAICurrencyRateParameters::getToDate() const {
    return m_to_date;
}
void OAICurrencyRateParameters::setToDate(const QDateTime &to_date) {
    m_to_date = to_date;
    m_to_date_isSet = true;
}

bool OAICurrencyRateParameters::is_to_date_Set() const{
    return m_to_date_isSet;
}

bool OAICurrencyRateParameters::is_to_date_Valid() const{
    return m_to_date_isValid;
}

bool OAICurrencyRateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICurrencyRateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
