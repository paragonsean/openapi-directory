/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpenseReceiptUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpenseReceiptUpdateDto::OAIExpenseReceiptUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpenseReceiptUpdateDto::OAIExpenseReceiptUpdateDto() {
    this->initializeModel();
}

OAIExpenseReceiptUpdateDto::~OAIExpenseReceiptUpdateDto() {}

void OAIExpenseReceiptUpdateDto::initializeModel() {

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_claimed_by_isSet = false;
    m_claimed_by_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_employee_part_isSet = false;
    m_employee_part_isValid = false;

    m_expense_account_isSet = false;
    m_expense_account_isValid = false;

    m_expense_claim_isSet = false;
    m_expense_claim_isValid = false;

    m_expense_sub_isSet = false;
    m_expense_sub_isValid = false;

    m_inventory_isSet = false;
    m_inventory_isValid = false;

    m_invoiceable_isSet = false;
    m_invoiceable_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_project_task_isSet = false;
    m_project_task_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_ref_nbr_isSet = false;
    m_ref_nbr_isValid = false;

    m_sales_account_isSet = false;
    m_sales_account_isValid = false;

    m_sales_sub_isSet = false;
    m_sales_sub_isValid = false;

    m_tax_category_isSet = false;
    m_tax_category_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;
}

void OAIExpenseReceiptUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpenseReceiptUpdateDto::fromJsonObject(QJsonObject json) {

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_claimed_by_isValid = ::OpenAPI::fromJsonValue(m_claimed_by, json[QString("claimedBy")]);
    m_claimed_by_isSet = !json[QString("claimedBy")].isNull() && m_claimed_by_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_employee_part_isValid = ::OpenAPI::fromJsonValue(m_employee_part, json[QString("employeePart")]);
    m_employee_part_isSet = !json[QString("employeePart")].isNull() && m_employee_part_isValid;

    m_expense_account_isValid = ::OpenAPI::fromJsonValue(m_expense_account, json[QString("expenseAccount")]);
    m_expense_account_isSet = !json[QString("expenseAccount")].isNull() && m_expense_account_isValid;

    m_expense_claim_isValid = ::OpenAPI::fromJsonValue(m_expense_claim, json[QString("expenseClaim")]);
    m_expense_claim_isSet = !json[QString("expenseClaim")].isNull() && m_expense_claim_isValid;

    m_expense_sub_isValid = ::OpenAPI::fromJsonValue(m_expense_sub, json[QString("expenseSub")]);
    m_expense_sub_isSet = !json[QString("expenseSub")].isNull() && m_expense_sub_isValid;

    m_inventory_isValid = ::OpenAPI::fromJsonValue(m_inventory, json[QString("inventory")]);
    m_inventory_isSet = !json[QString("inventory")].isNull() && m_inventory_isValid;

    m_invoiceable_isValid = ::OpenAPI::fromJsonValue(m_invoiceable, json[QString("invoiceable")]);
    m_invoiceable_isSet = !json[QString("invoiceable")].isNull() && m_invoiceable_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_project_task_isValid = ::OpenAPI::fromJsonValue(m_project_task, json[QString("projectTask")]);
    m_project_task_isSet = !json[QString("projectTask")].isNull() && m_project_task_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_ref_nbr_isValid = ::OpenAPI::fromJsonValue(m_ref_nbr, json[QString("refNbr")]);
    m_ref_nbr_isSet = !json[QString("refNbr")].isNull() && m_ref_nbr_isValid;

    m_sales_account_isValid = ::OpenAPI::fromJsonValue(m_sales_account, json[QString("salesAccount")]);
    m_sales_account_isSet = !json[QString("salesAccount")].isNull() && m_sales_account_isValid;

    m_sales_sub_isValid = ::OpenAPI::fromJsonValue(m_sales_sub, json[QString("salesSub")]);
    m_sales_sub_isSet = !json[QString("salesSub")].isNull() && m_sales_sub_isValid;

    m_tax_category_isValid = ::OpenAPI::fromJsonValue(m_tax_category, json[QString("taxCategory")]);
    m_tax_category_isSet = !json[QString("taxCategory")].isNull() && m_tax_category_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("totalAmount")]);
    m_total_amount_isSet = !json[QString("totalAmount")].isNull() && m_total_amount_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;
}

QString OAIExpenseReceiptUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpenseReceiptUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_claimed_by.isSet()) {
        obj.insert(QString("claimedBy"), ::OpenAPI::toJsonValue(m_claimed_by));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_date.isSet()) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_employee_part.isSet()) {
        obj.insert(QString("employeePart"), ::OpenAPI::toJsonValue(m_employee_part));
    }
    if (m_expense_account.isSet()) {
        obj.insert(QString("expenseAccount"), ::OpenAPI::toJsonValue(m_expense_account));
    }
    if (m_expense_claim.isSet()) {
        obj.insert(QString("expenseClaim"), ::OpenAPI::toJsonValue(m_expense_claim));
    }
    if (m_expense_sub.isSet()) {
        obj.insert(QString("expenseSub"), ::OpenAPI::toJsonValue(m_expense_sub));
    }
    if (m_inventory.isSet()) {
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(m_inventory));
    }
    if (m_invoiceable.isSet()) {
        obj.insert(QString("invoiceable"), ::OpenAPI::toJsonValue(m_invoiceable));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_project_task.isSet()) {
        obj.insert(QString("projectTask"), ::OpenAPI::toJsonValue(m_project_task));
    }
    if (m_quantity.isSet()) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_ref_nbr.isSet()) {
        obj.insert(QString("refNbr"), ::OpenAPI::toJsonValue(m_ref_nbr));
    }
    if (m_sales_account.isSet()) {
        obj.insert(QString("salesAccount"), ::OpenAPI::toJsonValue(m_sales_account));
    }
    if (m_sales_sub.isSet()) {
        obj.insert(QString("salesSub"), ::OpenAPI::toJsonValue(m_sales_sub));
    }
    if (m_tax_category.isSet()) {
        obj.insert(QString("taxCategory"), ::OpenAPI::toJsonValue(m_tax_category));
    }
    if (m_total_amount.isSet()) {
        obj.insert(QString("totalAmount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    if (m_unit_cost.isSet()) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_uom.isSet()) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    return obj;
}

OAIDtoValueOfString OAIExpenseReceiptUpdateDto::getBranch() const {
    return m_branch;
}
void OAIExpenseReceiptUpdateDto::setBranch(const OAIDtoValueOfString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_branch_Valid() const{
    return m_branch_isValid;
}

OAIDtoValueOfString OAIExpenseReceiptUpdateDto::getClaimedBy() const {
    return m_claimed_by;
}
void OAIExpenseReceiptUpdateDto::setClaimedBy(const OAIDtoValueOfString &claimed_by) {
    m_claimed_by = claimed_by;
    m_claimed_by_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_claimed_by_Set() const{
    return m_claimed_by_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_claimed_by_Valid() const{
    return m_claimed_by_isValid;
}

OAIDtoValueOfString OAIExpenseReceiptUpdateDto::getCurrency() const {
    return m_currency;
}
void OAIExpenseReceiptUpdateDto::setCurrency(const OAIDtoValueOfString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_currency_Valid() const{
    return m_currency_isValid;
}

OAIDtoValueOfString OAIExpenseReceiptUpdateDto::getCustomer() const {
    return m_customer;
}
void OAIExpenseReceiptUpdateDto::setCustomer(const OAIDtoValueOfString &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_customer_Valid() const{
    return m_customer_isValid;
}

OAIDtoValueOfNullableOfDateTime OAIExpenseReceiptUpdateDto::getDate() const {
    return m_date;
}
void OAIExpenseReceiptUpdateDto::setDate(const OAIDtoValueOfNullableOfDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_date_Valid() const{
    return m_date_isValid;
}

OAIDtoValueOfString OAIExpenseReceiptUpdateDto::getDescription() const {
    return m_description;
}
void OAIExpenseReceiptUpdateDto::setDescription(const OAIDtoValueOfString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIExpenseReceiptUpdateDto::getEmployeePart() const {
    return m_employee_part;
}
void OAIExpenseReceiptUpdateDto::setEmployeePart(const OAIDtoValueOfNullableOfDecimal &employee_part) {
    m_employee_part = employee_part;
    m_employee_part_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_employee_part_Set() const{
    return m_employee_part_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_employee_part_Valid() const{
    return m_employee_part_isValid;
}

OAIDtoValueOfString OAIExpenseReceiptUpdateDto::getExpenseAccount() const {
    return m_expense_account;
}
void OAIExpenseReceiptUpdateDto::setExpenseAccount(const OAIDtoValueOfString &expense_account) {
    m_expense_account = expense_account;
    m_expense_account_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_expense_account_Set() const{
    return m_expense_account_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_expense_account_Valid() const{
    return m_expense_account_isValid;
}

OAIDtoValueOfString OAIExpenseReceiptUpdateDto::getExpenseClaim() const {
    return m_expense_claim;
}
void OAIExpenseReceiptUpdateDto::setExpenseClaim(const OAIDtoValueOfString &expense_claim) {
    m_expense_claim = expense_claim;
    m_expense_claim_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_expense_claim_Set() const{
    return m_expense_claim_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_expense_claim_Valid() const{
    return m_expense_claim_isValid;
}

OAIDtoValueOfString OAIExpenseReceiptUpdateDto::getExpenseSub() const {
    return m_expense_sub;
}
void OAIExpenseReceiptUpdateDto::setExpenseSub(const OAIDtoValueOfString &expense_sub) {
    m_expense_sub = expense_sub;
    m_expense_sub_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_expense_sub_Set() const{
    return m_expense_sub_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_expense_sub_Valid() const{
    return m_expense_sub_isValid;
}

OAIDtoValueOfString OAIExpenseReceiptUpdateDto::getInventory() const {
    return m_inventory;
}
void OAIExpenseReceiptUpdateDto::setInventory(const OAIDtoValueOfString &inventory) {
    m_inventory = inventory;
    m_inventory_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_inventory_Set() const{
    return m_inventory_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_inventory_Valid() const{
    return m_inventory_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIExpenseReceiptUpdateDto::getInvoiceable() const {
    return m_invoiceable;
}
void OAIExpenseReceiptUpdateDto::setInvoiceable(const OAIDtoValueOfNullableOfBoolean &invoiceable) {
    m_invoiceable = invoiceable;
    m_invoiceable_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_invoiceable_Set() const{
    return m_invoiceable_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_invoiceable_Valid() const{
    return m_invoiceable_isValid;
}

OAIDtoValueOfString OAIExpenseReceiptUpdateDto::getLocation() const {
    return m_location;
}
void OAIExpenseReceiptUpdateDto::setLocation(const OAIDtoValueOfString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIDtoValueOfString OAIExpenseReceiptUpdateDto::getProject() const {
    return m_project;
}
void OAIExpenseReceiptUpdateDto::setProject(const OAIDtoValueOfString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_project_Set() const{
    return m_project_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_project_Valid() const{
    return m_project_isValid;
}

OAIDtoValueOfString OAIExpenseReceiptUpdateDto::getProjectTask() const {
    return m_project_task;
}
void OAIExpenseReceiptUpdateDto::setProjectTask(const OAIDtoValueOfString &project_task) {
    m_project_task = project_task;
    m_project_task_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_project_task_Set() const{
    return m_project_task_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_project_task_Valid() const{
    return m_project_task_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIExpenseReceiptUpdateDto::getQuantity() const {
    return m_quantity;
}
void OAIExpenseReceiptUpdateDto::setQuantity(const OAIDtoValueOfNullableOfDecimal &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIDtoValueOfString OAIExpenseReceiptUpdateDto::getRefNbr() const {
    return m_ref_nbr;
}
void OAIExpenseReceiptUpdateDto::setRefNbr(const OAIDtoValueOfString &ref_nbr) {
    m_ref_nbr = ref_nbr;
    m_ref_nbr_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_ref_nbr_Set() const{
    return m_ref_nbr_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_ref_nbr_Valid() const{
    return m_ref_nbr_isValid;
}

OAIDtoValueOfString OAIExpenseReceiptUpdateDto::getSalesAccount() const {
    return m_sales_account;
}
void OAIExpenseReceiptUpdateDto::setSalesAccount(const OAIDtoValueOfString &sales_account) {
    m_sales_account = sales_account;
    m_sales_account_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_sales_account_Set() const{
    return m_sales_account_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_sales_account_Valid() const{
    return m_sales_account_isValid;
}

OAIDtoValueOfString OAIExpenseReceiptUpdateDto::getSalesSub() const {
    return m_sales_sub;
}
void OAIExpenseReceiptUpdateDto::setSalesSub(const OAIDtoValueOfString &sales_sub) {
    m_sales_sub = sales_sub;
    m_sales_sub_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_sales_sub_Set() const{
    return m_sales_sub_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_sales_sub_Valid() const{
    return m_sales_sub_isValid;
}

OAIDtoValueOfString OAIExpenseReceiptUpdateDto::getTaxCategory() const {
    return m_tax_category;
}
void OAIExpenseReceiptUpdateDto::setTaxCategory(const OAIDtoValueOfString &tax_category) {
    m_tax_category = tax_category;
    m_tax_category_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_tax_category_Set() const{
    return m_tax_category_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_tax_category_Valid() const{
    return m_tax_category_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIExpenseReceiptUpdateDto::getTotalAmount() const {
    return m_total_amount;
}
void OAIExpenseReceiptUpdateDto::setTotalAmount(const OAIDtoValueOfNullableOfDecimal &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIExpenseReceiptUpdateDto::getUnitCost() const {
    return m_unit_cost;
}
void OAIExpenseReceiptUpdateDto::setUnitCost(const OAIDtoValueOfNullableOfDecimal &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

OAIDtoValueOfString OAIExpenseReceiptUpdateDto::getUom() const {
    return m_uom;
}
void OAIExpenseReceiptUpdateDto::setUom(const OAIDtoValueOfString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAIExpenseReceiptUpdateDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAIExpenseReceiptUpdateDto::is_uom_Valid() const{
    return m_uom_isValid;
}

bool OAIExpenseReceiptUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_claimed_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_part.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_claim.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_sub.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoiceable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_sub.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpenseReceiptUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
