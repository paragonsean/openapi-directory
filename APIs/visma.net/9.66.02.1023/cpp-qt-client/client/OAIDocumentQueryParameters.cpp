/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentQueryParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentQueryParameters::OAIDocumentQueryParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentQueryParameters::OAIDocumentQueryParameters() {
    this->initializeModel();
}

OAIDocumentQueryParameters::~OAIDocumentQueryParameters() {}

void OAIDocumentQueryParameters::initializeModel() {

    m_closed_financial_period_isSet = false;
    m_closed_financial_period_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_created_date_time_condition_isSet = false;
    m_created_date_time_condition_isValid = false;

    m_customer_ref_number_isSet = false;
    m_customer_ref_number_isValid = false;

    m_document_due_date_isSet = false;
    m_document_due_date_isValid = false;

    m_document_type_isSet = false;
    m_document_type_isValid = false;

    m_dunning_letter_date_time_isSet = false;
    m_dunning_letter_date_time_isValid = false;

    m_dunning_letter_date_time_condition_isSet = false;
    m_dunning_letter_date_time_condition_isValid = false;

    m_dunning_level_isSet = false;
    m_dunning_level_isValid = false;

    m_expand_applications_isSet = false;
    m_expand_applications_isValid = false;

    m_expand_attachments_isSet = false;
    m_expand_attachments_isValid = false;

    m_expand_dunning_information_isSet = false;
    m_expand_dunning_information_isValid = false;

    m_expand_invoice_address_isSet = false;
    m_expand_invoice_address_isValid = false;

    m_expand_tax_details_isSet = false;
    m_expand_tax_details_isValid = false;

    m_external_reference_isSet = false;
    m_external_reference_isValid = false;

    m_financial_period_isSet = false;
    m_financial_period_isValid = false;

    m_greater_than_value_isSet = false;
    m_greater_than_value_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_last_modified_date_time_condition_isSet = false;
    m_last_modified_date_time_condition_isValid = false;

    m_number_to_read_isSet = false;
    m_number_to_read_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_payment_reference_isSet = false;
    m_payment_reference_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_released_isSet = false;
    m_released_isValid = false;

    m_skip_records_isSet = false;
    m_skip_records_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDocumentQueryParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentQueryParameters::fromJsonObject(QJsonObject json) {

    m_closed_financial_period_isValid = ::OpenAPI::fromJsonValue(m_closed_financial_period, json[QString("closedFinancialPeriod")]);
    m_closed_financial_period_isSet = !json[QString("closedFinancialPeriod")].isNull() && m_closed_financial_period_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_created_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_created_date_time_condition, json[QString("createdDateTimeCondition")]);
    m_created_date_time_condition_isSet = !json[QString("createdDateTimeCondition")].isNull() && m_created_date_time_condition_isValid;

    m_customer_ref_number_isValid = ::OpenAPI::fromJsonValue(m_customer_ref_number, json[QString("customerRefNumber")]);
    m_customer_ref_number_isSet = !json[QString("customerRefNumber")].isNull() && m_customer_ref_number_isValid;

    m_document_due_date_isValid = ::OpenAPI::fromJsonValue(m_document_due_date, json[QString("documentDueDate")]);
    m_document_due_date_isSet = !json[QString("documentDueDate")].isNull() && m_document_due_date_isValid;

    m_document_type_isValid = ::OpenAPI::fromJsonValue(m_document_type, json[QString("documentType")]);
    m_document_type_isSet = !json[QString("documentType")].isNull() && m_document_type_isValid;

    m_dunning_letter_date_time_isValid = ::OpenAPI::fromJsonValue(m_dunning_letter_date_time, json[QString("dunningLetterDateTime")]);
    m_dunning_letter_date_time_isSet = !json[QString("dunningLetterDateTime")].isNull() && m_dunning_letter_date_time_isValid;

    m_dunning_letter_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_dunning_letter_date_time_condition, json[QString("dunningLetterDateTimeCondition")]);
    m_dunning_letter_date_time_condition_isSet = !json[QString("dunningLetterDateTimeCondition")].isNull() && m_dunning_letter_date_time_condition_isValid;

    m_dunning_level_isValid = ::OpenAPI::fromJsonValue(m_dunning_level, json[QString("dunningLevel")]);
    m_dunning_level_isSet = !json[QString("dunningLevel")].isNull() && m_dunning_level_isValid;

    m_expand_applications_isValid = ::OpenAPI::fromJsonValue(m_expand_applications, json[QString("expandApplications")]);
    m_expand_applications_isSet = !json[QString("expandApplications")].isNull() && m_expand_applications_isValid;

    m_expand_attachments_isValid = ::OpenAPI::fromJsonValue(m_expand_attachments, json[QString("expandAttachments")]);
    m_expand_attachments_isSet = !json[QString("expandAttachments")].isNull() && m_expand_attachments_isValid;

    m_expand_dunning_information_isValid = ::OpenAPI::fromJsonValue(m_expand_dunning_information, json[QString("expandDunningInformation")]);
    m_expand_dunning_information_isSet = !json[QString("expandDunningInformation")].isNull() && m_expand_dunning_information_isValid;

    m_expand_invoice_address_isValid = ::OpenAPI::fromJsonValue(m_expand_invoice_address, json[QString("expandInvoiceAddress")]);
    m_expand_invoice_address_isSet = !json[QString("expandInvoiceAddress")].isNull() && m_expand_invoice_address_isValid;

    m_expand_tax_details_isValid = ::OpenAPI::fromJsonValue(m_expand_tax_details, json[QString("expandTaxDetails")]);
    m_expand_tax_details_isSet = !json[QString("expandTaxDetails")].isNull() && m_expand_tax_details_isValid;

    m_external_reference_isValid = ::OpenAPI::fromJsonValue(m_external_reference, json[QString("externalReference")]);
    m_external_reference_isSet = !json[QString("externalReference")].isNull() && m_external_reference_isValid;

    m_financial_period_isValid = ::OpenAPI::fromJsonValue(m_financial_period, json[QString("financialPeriod")]);
    m_financial_period_isSet = !json[QString("financialPeriod")].isNull() && m_financial_period_isValid;

    m_greater_than_value_isValid = ::OpenAPI::fromJsonValue(m_greater_than_value, json[QString("greaterThanValue")]);
    m_greater_than_value_isSet = !json[QString("greaterThanValue")].isNull() && m_greater_than_value_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_last_modified_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time_condition, json[QString("lastModifiedDateTimeCondition")]);
    m_last_modified_date_time_condition_isSet = !json[QString("lastModifiedDateTimeCondition")].isNull() && m_last_modified_date_time_condition_isValid;

    m_number_to_read_isValid = ::OpenAPI::fromJsonValue(m_number_to_read, json[QString("numberToRead")]);
    m_number_to_read_isSet = !json[QString("numberToRead")].isNull() && m_number_to_read_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("pageNumber")]);
    m_page_number_isSet = !json[QString("pageNumber")].isNull() && m_page_number_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_payment_reference_isValid = ::OpenAPI::fromJsonValue(m_payment_reference, json[QString("paymentReference")]);
    m_payment_reference_isSet = !json[QString("paymentReference")].isNull() && m_payment_reference_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_released_isValid = ::OpenAPI::fromJsonValue(m_released, json[QString("released")]);
    m_released_isSet = !json[QString("released")].isNull() && m_released_isValid;

    m_skip_records_isValid = ::OpenAPI::fromJsonValue(m_skip_records, json[QString("skipRecords")]);
    m_skip_records_isSet = !json[QString("skipRecords")].isNull() && m_skip_records_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDocumentQueryParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentQueryParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_closed_financial_period_isSet) {
        obj.insert(QString("closedFinancialPeriod"), ::OpenAPI::toJsonValue(m_closed_financial_period));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_created_date_time_condition_isSet) {
        obj.insert(QString("createdDateTimeCondition"), ::OpenAPI::toJsonValue(m_created_date_time_condition));
    }
    if (m_customer_ref_number_isSet) {
        obj.insert(QString("customerRefNumber"), ::OpenAPI::toJsonValue(m_customer_ref_number));
    }
    if (m_document_due_date_isSet) {
        obj.insert(QString("documentDueDate"), ::OpenAPI::toJsonValue(m_document_due_date));
    }
    if (m_document_type_isSet) {
        obj.insert(QString("documentType"), ::OpenAPI::toJsonValue(m_document_type));
    }
    if (m_dunning_letter_date_time_isSet) {
        obj.insert(QString("dunningLetterDateTime"), ::OpenAPI::toJsonValue(m_dunning_letter_date_time));
    }
    if (m_dunning_letter_date_time_condition_isSet) {
        obj.insert(QString("dunningLetterDateTimeCondition"), ::OpenAPI::toJsonValue(m_dunning_letter_date_time_condition));
    }
    if (m_dunning_level_isSet) {
        obj.insert(QString("dunningLevel"), ::OpenAPI::toJsonValue(m_dunning_level));
    }
    if (m_expand_applications_isSet) {
        obj.insert(QString("expandApplications"), ::OpenAPI::toJsonValue(m_expand_applications));
    }
    if (m_expand_attachments_isSet) {
        obj.insert(QString("expandAttachments"), ::OpenAPI::toJsonValue(m_expand_attachments));
    }
    if (m_expand_dunning_information_isSet) {
        obj.insert(QString("expandDunningInformation"), ::OpenAPI::toJsonValue(m_expand_dunning_information));
    }
    if (m_expand_invoice_address_isSet) {
        obj.insert(QString("expandInvoiceAddress"), ::OpenAPI::toJsonValue(m_expand_invoice_address));
    }
    if (m_expand_tax_details_isSet) {
        obj.insert(QString("expandTaxDetails"), ::OpenAPI::toJsonValue(m_expand_tax_details));
    }
    if (m_external_reference_isSet) {
        obj.insert(QString("externalReference"), ::OpenAPI::toJsonValue(m_external_reference));
    }
    if (m_financial_period_isSet) {
        obj.insert(QString("financialPeriod"), ::OpenAPI::toJsonValue(m_financial_period));
    }
    if (m_greater_than_value_isSet) {
        obj.insert(QString("greaterThanValue"), ::OpenAPI::toJsonValue(m_greater_than_value));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_last_modified_date_time_condition_isSet) {
        obj.insert(QString("lastModifiedDateTimeCondition"), ::OpenAPI::toJsonValue(m_last_modified_date_time_condition));
    }
    if (m_number_to_read_isSet) {
        obj.insert(QString("numberToRead"), ::OpenAPI::toJsonValue(m_number_to_read));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("pageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_payment_reference_isSet) {
        obj.insert(QString("paymentReference"), ::OpenAPI::toJsonValue(m_payment_reference));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_released_isSet) {
        obj.insert(QString("released"), ::OpenAPI::toJsonValue(m_released));
    }
    if (m_skip_records_isSet) {
        obj.insert(QString("skipRecords"), ::OpenAPI::toJsonValue(m_skip_records));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDocumentQueryParameters::getClosedFinancialPeriod() const {
    return m_closed_financial_period;
}
void OAIDocumentQueryParameters::setClosedFinancialPeriod(const QString &closed_financial_period) {
    m_closed_financial_period = closed_financial_period;
    m_closed_financial_period_isSet = true;
}

bool OAIDocumentQueryParameters::is_closed_financial_period_Set() const{
    return m_closed_financial_period_isSet;
}

bool OAIDocumentQueryParameters::is_closed_financial_period_Valid() const{
    return m_closed_financial_period_isValid;
}

QString OAIDocumentQueryParameters::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIDocumentQueryParameters::setCreatedDateTime(const QString &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIDocumentQueryParameters::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIDocumentQueryParameters::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAIDocumentQueryParameters::getCreatedDateTimeCondition() const {
    return m_created_date_time_condition;
}
void OAIDocumentQueryParameters::setCreatedDateTimeCondition(const QString &created_date_time_condition) {
    m_created_date_time_condition = created_date_time_condition;
    m_created_date_time_condition_isSet = true;
}

bool OAIDocumentQueryParameters::is_created_date_time_condition_Set() const{
    return m_created_date_time_condition_isSet;
}

bool OAIDocumentQueryParameters::is_created_date_time_condition_Valid() const{
    return m_created_date_time_condition_isValid;
}

QString OAIDocumentQueryParameters::getCustomerRefNumber() const {
    return m_customer_ref_number;
}
void OAIDocumentQueryParameters::setCustomerRefNumber(const QString &customer_ref_number) {
    m_customer_ref_number = customer_ref_number;
    m_customer_ref_number_isSet = true;
}

bool OAIDocumentQueryParameters::is_customer_ref_number_Set() const{
    return m_customer_ref_number_isSet;
}

bool OAIDocumentQueryParameters::is_customer_ref_number_Valid() const{
    return m_customer_ref_number_isValid;
}

QDateTime OAIDocumentQueryParameters::getDocumentDueDate() const {
    return m_document_due_date;
}
void OAIDocumentQueryParameters::setDocumentDueDate(const QDateTime &document_due_date) {
    m_document_due_date = document_due_date;
    m_document_due_date_isSet = true;
}

bool OAIDocumentQueryParameters::is_document_due_date_Set() const{
    return m_document_due_date_isSet;
}

bool OAIDocumentQueryParameters::is_document_due_date_Valid() const{
    return m_document_due_date_isValid;
}

QString OAIDocumentQueryParameters::getDocumentType() const {
    return m_document_type;
}
void OAIDocumentQueryParameters::setDocumentType(const QString &document_type) {
    m_document_type = document_type;
    m_document_type_isSet = true;
}

bool OAIDocumentQueryParameters::is_document_type_Set() const{
    return m_document_type_isSet;
}

bool OAIDocumentQueryParameters::is_document_type_Valid() const{
    return m_document_type_isValid;
}

QString OAIDocumentQueryParameters::getDunningLetterDateTime() const {
    return m_dunning_letter_date_time;
}
void OAIDocumentQueryParameters::setDunningLetterDateTime(const QString &dunning_letter_date_time) {
    m_dunning_letter_date_time = dunning_letter_date_time;
    m_dunning_letter_date_time_isSet = true;
}

bool OAIDocumentQueryParameters::is_dunning_letter_date_time_Set() const{
    return m_dunning_letter_date_time_isSet;
}

bool OAIDocumentQueryParameters::is_dunning_letter_date_time_Valid() const{
    return m_dunning_letter_date_time_isValid;
}

QString OAIDocumentQueryParameters::getDunningLetterDateTimeCondition() const {
    return m_dunning_letter_date_time_condition;
}
void OAIDocumentQueryParameters::setDunningLetterDateTimeCondition(const QString &dunning_letter_date_time_condition) {
    m_dunning_letter_date_time_condition = dunning_letter_date_time_condition;
    m_dunning_letter_date_time_condition_isSet = true;
}

bool OAIDocumentQueryParameters::is_dunning_letter_date_time_condition_Set() const{
    return m_dunning_letter_date_time_condition_isSet;
}

bool OAIDocumentQueryParameters::is_dunning_letter_date_time_condition_Valid() const{
    return m_dunning_letter_date_time_condition_isValid;
}

qint32 OAIDocumentQueryParameters::getDunningLevel() const {
    return m_dunning_level;
}
void OAIDocumentQueryParameters::setDunningLevel(const qint32 &dunning_level) {
    m_dunning_level = dunning_level;
    m_dunning_level_isSet = true;
}

bool OAIDocumentQueryParameters::is_dunning_level_Set() const{
    return m_dunning_level_isSet;
}

bool OAIDocumentQueryParameters::is_dunning_level_Valid() const{
    return m_dunning_level_isValid;
}

bool OAIDocumentQueryParameters::isExpandApplications() const {
    return m_expand_applications;
}
void OAIDocumentQueryParameters::setExpandApplications(const bool &expand_applications) {
    m_expand_applications = expand_applications;
    m_expand_applications_isSet = true;
}

bool OAIDocumentQueryParameters::is_expand_applications_Set() const{
    return m_expand_applications_isSet;
}

bool OAIDocumentQueryParameters::is_expand_applications_Valid() const{
    return m_expand_applications_isValid;
}

bool OAIDocumentQueryParameters::isExpandAttachments() const {
    return m_expand_attachments;
}
void OAIDocumentQueryParameters::setExpandAttachments(const bool &expand_attachments) {
    m_expand_attachments = expand_attachments;
    m_expand_attachments_isSet = true;
}

bool OAIDocumentQueryParameters::is_expand_attachments_Set() const{
    return m_expand_attachments_isSet;
}

bool OAIDocumentQueryParameters::is_expand_attachments_Valid() const{
    return m_expand_attachments_isValid;
}

bool OAIDocumentQueryParameters::isExpandDunningInformation() const {
    return m_expand_dunning_information;
}
void OAIDocumentQueryParameters::setExpandDunningInformation(const bool &expand_dunning_information) {
    m_expand_dunning_information = expand_dunning_information;
    m_expand_dunning_information_isSet = true;
}

bool OAIDocumentQueryParameters::is_expand_dunning_information_Set() const{
    return m_expand_dunning_information_isSet;
}

bool OAIDocumentQueryParameters::is_expand_dunning_information_Valid() const{
    return m_expand_dunning_information_isValid;
}

bool OAIDocumentQueryParameters::isExpandInvoiceAddress() const {
    return m_expand_invoice_address;
}
void OAIDocumentQueryParameters::setExpandInvoiceAddress(const bool &expand_invoice_address) {
    m_expand_invoice_address = expand_invoice_address;
    m_expand_invoice_address_isSet = true;
}

bool OAIDocumentQueryParameters::is_expand_invoice_address_Set() const{
    return m_expand_invoice_address_isSet;
}

bool OAIDocumentQueryParameters::is_expand_invoice_address_Valid() const{
    return m_expand_invoice_address_isValid;
}

bool OAIDocumentQueryParameters::isExpandTaxDetails() const {
    return m_expand_tax_details;
}
void OAIDocumentQueryParameters::setExpandTaxDetails(const bool &expand_tax_details) {
    m_expand_tax_details = expand_tax_details;
    m_expand_tax_details_isSet = true;
}

bool OAIDocumentQueryParameters::is_expand_tax_details_Set() const{
    return m_expand_tax_details_isSet;
}

bool OAIDocumentQueryParameters::is_expand_tax_details_Valid() const{
    return m_expand_tax_details_isValid;
}

QString OAIDocumentQueryParameters::getExternalReference() const {
    return m_external_reference;
}
void OAIDocumentQueryParameters::setExternalReference(const QString &external_reference) {
    m_external_reference = external_reference;
    m_external_reference_isSet = true;
}

bool OAIDocumentQueryParameters::is_external_reference_Set() const{
    return m_external_reference_isSet;
}

bool OAIDocumentQueryParameters::is_external_reference_Valid() const{
    return m_external_reference_isValid;
}

QString OAIDocumentQueryParameters::getFinancialPeriod() const {
    return m_financial_period;
}
void OAIDocumentQueryParameters::setFinancialPeriod(const QString &financial_period) {
    m_financial_period = financial_period;
    m_financial_period_isSet = true;
}

bool OAIDocumentQueryParameters::is_financial_period_Set() const{
    return m_financial_period_isSet;
}

bool OAIDocumentQueryParameters::is_financial_period_Valid() const{
    return m_financial_period_isValid;
}

QString OAIDocumentQueryParameters::getGreaterThanValue() const {
    return m_greater_than_value;
}
void OAIDocumentQueryParameters::setGreaterThanValue(const QString &greater_than_value) {
    m_greater_than_value = greater_than_value;
    m_greater_than_value_isSet = true;
}

bool OAIDocumentQueryParameters::is_greater_than_value_Set() const{
    return m_greater_than_value_isSet;
}

bool OAIDocumentQueryParameters::is_greater_than_value_Valid() const{
    return m_greater_than_value_isValid;
}

QString OAIDocumentQueryParameters::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIDocumentQueryParameters::setLastModifiedDateTime(const QString &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIDocumentQueryParameters::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIDocumentQueryParameters::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QString OAIDocumentQueryParameters::getLastModifiedDateTimeCondition() const {
    return m_last_modified_date_time_condition;
}
void OAIDocumentQueryParameters::setLastModifiedDateTimeCondition(const QString &last_modified_date_time_condition) {
    m_last_modified_date_time_condition = last_modified_date_time_condition;
    m_last_modified_date_time_condition_isSet = true;
}

bool OAIDocumentQueryParameters::is_last_modified_date_time_condition_Set() const{
    return m_last_modified_date_time_condition_isSet;
}

bool OAIDocumentQueryParameters::is_last_modified_date_time_condition_Valid() const{
    return m_last_modified_date_time_condition_isValid;
}

qint32 OAIDocumentQueryParameters::getNumberToRead() const {
    return m_number_to_read;
}
void OAIDocumentQueryParameters::setNumberToRead(const qint32 &number_to_read) {
    m_number_to_read = number_to_read;
    m_number_to_read_isSet = true;
}

bool OAIDocumentQueryParameters::is_number_to_read_Set() const{
    return m_number_to_read_isSet;
}

bool OAIDocumentQueryParameters::is_number_to_read_Valid() const{
    return m_number_to_read_isValid;
}

qint32 OAIDocumentQueryParameters::getPageNumber() const {
    return m_page_number;
}
void OAIDocumentQueryParameters::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIDocumentQueryParameters::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIDocumentQueryParameters::is_page_number_Valid() const{
    return m_page_number_isValid;
}

qint32 OAIDocumentQueryParameters::getPageSize() const {
    return m_page_size;
}
void OAIDocumentQueryParameters::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIDocumentQueryParameters::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIDocumentQueryParameters::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIDocumentQueryParameters::getPaymentReference() const {
    return m_payment_reference;
}
void OAIDocumentQueryParameters::setPaymentReference(const QString &payment_reference) {
    m_payment_reference = payment_reference;
    m_payment_reference_isSet = true;
}

bool OAIDocumentQueryParameters::is_payment_reference_Set() const{
    return m_payment_reference_isSet;
}

bool OAIDocumentQueryParameters::is_payment_reference_Valid() const{
    return m_payment_reference_isValid;
}

QString OAIDocumentQueryParameters::getProject() const {
    return m_project;
}
void OAIDocumentQueryParameters::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIDocumentQueryParameters::is_project_Set() const{
    return m_project_isSet;
}

bool OAIDocumentQueryParameters::is_project_Valid() const{
    return m_project_isValid;
}

qint32 OAIDocumentQueryParameters::getReleased() const {
    return m_released;
}
void OAIDocumentQueryParameters::setReleased(const qint32 &released) {
    m_released = released;
    m_released_isSet = true;
}

bool OAIDocumentQueryParameters::is_released_Set() const{
    return m_released_isSet;
}

bool OAIDocumentQueryParameters::is_released_Valid() const{
    return m_released_isValid;
}

qint32 OAIDocumentQueryParameters::getSkipRecords() const {
    return m_skip_records;
}
void OAIDocumentQueryParameters::setSkipRecords(const qint32 &skip_records) {
    m_skip_records = skip_records;
    m_skip_records_isSet = true;
}

bool OAIDocumentQueryParameters::is_skip_records_Set() const{
    return m_skip_records_isSet;
}

bool OAIDocumentQueryParameters::is_skip_records_Valid() const{
    return m_skip_records_isValid;
}

QString OAIDocumentQueryParameters::getStatus() const {
    return m_status;
}
void OAIDocumentQueryParameters::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDocumentQueryParameters::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDocumentQueryParameters::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDocumentQueryParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closed_financial_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_ref_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dunning_letter_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dunning_letter_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dunning_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_applications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_attachments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_dunning_information_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_invoice_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_tax_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_financial_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_greater_than_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_to_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_released_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentQueryParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
