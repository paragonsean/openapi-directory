/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupplierDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupplierDto::OAISupplierDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupplierDto::OAISupplierDto() {
    this->initializeModel();
}

OAISupplierDto::~OAISupplierDto() {}

void OAISupplierDto::initializeModel() {

    m_account_reference_isSet = false;
    m_account_reference_isValid = false;

    m_account_used_for_payment_isSet = false;
    m_account_used_for_payment_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_cash_account_isSet = false;
    m_cash_account_isValid = false;

    m_charge_bearer_isSet = false;
    m_charge_bearer_isValid = false;

    m_corporate_id_isSet = false;
    m_corporate_id_isValid = false;

    m_credit_terms_isSet = false;
    m_credit_terms_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_document_language_isSet = false;
    m_document_language_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_gl_accounts_isSet = false;
    m_gl_accounts_isValid = false;

    m_internal_id_isSet = false;
    m_internal_id_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_main_address_isSet = false;
    m_main_address_isValid = false;

    m_main_contact_isSet = false;
    m_main_contact_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_parent_record_isSet = false;
    m_parent_record_isValid = false;

    m_pay_separately_isSet = false;
    m_pay_separately_isValid = false;

    m_payment_by_isSet = false;
    m_payment_by_isValid = false;

    m_payment_lead_time_isSet = false;
    m_payment_lead_time_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_payment_ref_display_mask_isSet = false;
    m_payment_ref_display_mask_isValid = false;

    m_remit_address_isSet = false;
    m_remit_address_isValid = false;

    m_remit_contact_isSet = false;
    m_remit_contact_isValid = false;

    m_retainage_apply_isSet = false;
    m_retainage_apply_isValid = false;

    m_retainage_cash_account_id_isSet = false;
    m_retainage_cash_account_id_isValid = false;

    m_retainage_pct_isSet = false;
    m_retainage_pct_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supplier_address_isSet = false;
    m_supplier_address_isValid = false;

    m_supplier_class_isSet = false;
    m_supplier_class_isValid = false;

    m_supplier_contact_isSet = false;
    m_supplier_contact_isValid = false;

    m_supplier_payment_method_details_isSet = false;
    m_supplier_payment_method_details_isValid = false;

    m_vat_registration_id_isSet = false;
    m_vat_registration_id_isValid = false;

    m_vat_zone_isSet = false;
    m_vat_zone_isValid = false;
}

void OAISupplierDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupplierDto::fromJsonObject(QJsonObject json) {

    m_account_reference_isValid = ::OpenAPI::fromJsonValue(m_account_reference, json[QString("accountReference")]);
    m_account_reference_isSet = !json[QString("accountReference")].isNull() && m_account_reference_isValid;

    m_account_used_for_payment_isValid = ::OpenAPI::fromJsonValue(m_account_used_for_payment, json[QString("accountUsedForPayment")]);
    m_account_used_for_payment_isSet = !json[QString("accountUsedForPayment")].isNull() && m_account_used_for_payment_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_cash_account_isValid = ::OpenAPI::fromJsonValue(m_cash_account, json[QString("cashAccount")]);
    m_cash_account_isSet = !json[QString("cashAccount")].isNull() && m_cash_account_isValid;

    m_charge_bearer_isValid = ::OpenAPI::fromJsonValue(m_charge_bearer, json[QString("chargeBearer")]);
    m_charge_bearer_isSet = !json[QString("chargeBearer")].isNull() && m_charge_bearer_isValid;

    m_corporate_id_isValid = ::OpenAPI::fromJsonValue(m_corporate_id, json[QString("corporateId")]);
    m_corporate_id_isSet = !json[QString("corporateId")].isNull() && m_corporate_id_isValid;

    m_credit_terms_isValid = ::OpenAPI::fromJsonValue(m_credit_terms, json[QString("creditTerms")]);
    m_credit_terms_isSet = !json[QString("creditTerms")].isNull() && m_credit_terms_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_document_language_isValid = ::OpenAPI::fromJsonValue(m_document_language, json[QString("documentLanguage")]);
    m_document_language_isSet = !json[QString("documentLanguage")].isNull() && m_document_language_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_gl_accounts_isValid = ::OpenAPI::fromJsonValue(m_gl_accounts, json[QString("glAccounts")]);
    m_gl_accounts_isSet = !json[QString("glAccounts")].isNull() && m_gl_accounts_isValid;

    m_internal_id_isValid = ::OpenAPI::fromJsonValue(m_internal_id, json[QString("internalId")]);
    m_internal_id_isSet = !json[QString("internalId")].isNull() && m_internal_id_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_main_address_isValid = ::OpenAPI::fromJsonValue(m_main_address, json[QString("mainAddress")]);
    m_main_address_isSet = !json[QString("mainAddress")].isNull() && m_main_address_isValid;

    m_main_contact_isValid = ::OpenAPI::fromJsonValue(m_main_contact, json[QString("mainContact")]);
    m_main_contact_isSet = !json[QString("mainContact")].isNull() && m_main_contact_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_parent_record_isValid = ::OpenAPI::fromJsonValue(m_parent_record, json[QString("parentRecord")]);
    m_parent_record_isSet = !json[QString("parentRecord")].isNull() && m_parent_record_isValid;

    m_pay_separately_isValid = ::OpenAPI::fromJsonValue(m_pay_separately, json[QString("paySeparately")]);
    m_pay_separately_isSet = !json[QString("paySeparately")].isNull() && m_pay_separately_isValid;

    m_payment_by_isValid = ::OpenAPI::fromJsonValue(m_payment_by, json[QString("paymentBy")]);
    m_payment_by_isSet = !json[QString("paymentBy")].isNull() && m_payment_by_isValid;

    m_payment_lead_time_isValid = ::OpenAPI::fromJsonValue(m_payment_lead_time, json[QString("paymentLeadTime")]);
    m_payment_lead_time_isSet = !json[QString("paymentLeadTime")].isNull() && m_payment_lead_time_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_payment_ref_display_mask_isValid = ::OpenAPI::fromJsonValue(m_payment_ref_display_mask, json[QString("paymentRefDisplayMask")]);
    m_payment_ref_display_mask_isSet = !json[QString("paymentRefDisplayMask")].isNull() && m_payment_ref_display_mask_isValid;

    m_remit_address_isValid = ::OpenAPI::fromJsonValue(m_remit_address, json[QString("remitAddress")]);
    m_remit_address_isSet = !json[QString("remitAddress")].isNull() && m_remit_address_isValid;

    m_remit_contact_isValid = ::OpenAPI::fromJsonValue(m_remit_contact, json[QString("remitContact")]);
    m_remit_contact_isSet = !json[QString("remitContact")].isNull() && m_remit_contact_isValid;

    m_retainage_apply_isValid = ::OpenAPI::fromJsonValue(m_retainage_apply, json[QString("retainageApply")]);
    m_retainage_apply_isSet = !json[QString("retainageApply")].isNull() && m_retainage_apply_isValid;

    m_retainage_cash_account_id_isValid = ::OpenAPI::fromJsonValue(m_retainage_cash_account_id, json[QString("retainageCashAccountID")]);
    m_retainage_cash_account_id_isSet = !json[QString("retainageCashAccountID")].isNull() && m_retainage_cash_account_id_isValid;

    m_retainage_pct_isValid = ::OpenAPI::fromJsonValue(m_retainage_pct, json[QString("retainagePct")]);
    m_retainage_pct_isSet = !json[QString("retainagePct")].isNull() && m_retainage_pct_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supplier_address_isValid = ::OpenAPI::fromJsonValue(m_supplier_address, json[QString("supplierAddress")]);
    m_supplier_address_isSet = !json[QString("supplierAddress")].isNull() && m_supplier_address_isValid;

    m_supplier_class_isValid = ::OpenAPI::fromJsonValue(m_supplier_class, json[QString("supplierClass")]);
    m_supplier_class_isSet = !json[QString("supplierClass")].isNull() && m_supplier_class_isValid;

    m_supplier_contact_isValid = ::OpenAPI::fromJsonValue(m_supplier_contact, json[QString("supplierContact")]);
    m_supplier_contact_isSet = !json[QString("supplierContact")].isNull() && m_supplier_contact_isValid;

    m_supplier_payment_method_details_isValid = ::OpenAPI::fromJsonValue(m_supplier_payment_method_details, json[QString("supplierPaymentMethodDetails")]);
    m_supplier_payment_method_details_isSet = !json[QString("supplierPaymentMethodDetails")].isNull() && m_supplier_payment_method_details_isValid;

    m_vat_registration_id_isValid = ::OpenAPI::fromJsonValue(m_vat_registration_id, json[QString("vatRegistrationId")]);
    m_vat_registration_id_isSet = !json[QString("vatRegistrationId")].isNull() && m_vat_registration_id_isValid;

    m_vat_zone_isValid = ::OpenAPI::fromJsonValue(m_vat_zone, json[QString("vatZone")]);
    m_vat_zone_isSet = !json[QString("vatZone")].isNull() && m_vat_zone_isValid;
}

QString OAISupplierDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupplierDto::asJsonObject() const {
    QJsonObject obj;
    if (m_account_reference_isSet) {
        obj.insert(QString("accountReference"), ::OpenAPI::toJsonValue(m_account_reference));
    }
    if (m_account_used_for_payment_isSet) {
        obj.insert(QString("accountUsedForPayment"), ::OpenAPI::toJsonValue(m_account_used_for_payment));
    }
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_cash_account_isSet) {
        obj.insert(QString("cashAccount"), ::OpenAPI::toJsonValue(m_cash_account));
    }
    if (m_charge_bearer_isSet) {
        obj.insert(QString("chargeBearer"), ::OpenAPI::toJsonValue(m_charge_bearer));
    }
    if (m_corporate_id_isSet) {
        obj.insert(QString("corporateId"), ::OpenAPI::toJsonValue(m_corporate_id));
    }
    if (m_credit_terms.isSet()) {
        obj.insert(QString("creditTerms"), ::OpenAPI::toJsonValue(m_credit_terms));
    }
    if (m_currency_id_isSet) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_document_language_isSet) {
        obj.insert(QString("documentLanguage"), ::OpenAPI::toJsonValue(m_document_language));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_gl_accounts.isSet()) {
        obj.insert(QString("glAccounts"), ::OpenAPI::toJsonValue(m_gl_accounts));
    }
    if (m_internal_id_isSet) {
        obj.insert(QString("internalId"), ::OpenAPI::toJsonValue(m_internal_id));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_main_address.isSet()) {
        obj.insert(QString("mainAddress"), ::OpenAPI::toJsonValue(m_main_address));
    }
    if (m_main_contact.isSet()) {
        obj.insert(QString("mainContact"), ::OpenAPI::toJsonValue(m_main_contact));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_parent_record.isSet()) {
        obj.insert(QString("parentRecord"), ::OpenAPI::toJsonValue(m_parent_record));
    }
    if (m_pay_separately_isSet) {
        obj.insert(QString("paySeparately"), ::OpenAPI::toJsonValue(m_pay_separately));
    }
    if (m_payment_by_isSet) {
        obj.insert(QString("paymentBy"), ::OpenAPI::toJsonValue(m_payment_by));
    }
    if (m_payment_lead_time_isSet) {
        obj.insert(QString("paymentLeadTime"), ::OpenAPI::toJsonValue(m_payment_lead_time));
    }
    if (m_payment_method.isSet()) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_payment_ref_display_mask_isSet) {
        obj.insert(QString("paymentRefDisplayMask"), ::OpenAPI::toJsonValue(m_payment_ref_display_mask));
    }
    if (m_remit_address.isSet()) {
        obj.insert(QString("remitAddress"), ::OpenAPI::toJsonValue(m_remit_address));
    }
    if (m_remit_contact.isSet()) {
        obj.insert(QString("remitContact"), ::OpenAPI::toJsonValue(m_remit_contact));
    }
    if (m_retainage_apply_isSet) {
        obj.insert(QString("retainageApply"), ::OpenAPI::toJsonValue(m_retainage_apply));
    }
    if (m_retainage_cash_account_id_isSet) {
        obj.insert(QString("retainageCashAccountID"), ::OpenAPI::toJsonValue(m_retainage_cash_account_id));
    }
    if (m_retainage_pct_isSet) {
        obj.insert(QString("retainagePct"), ::OpenAPI::toJsonValue(m_retainage_pct));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supplier_address.isSet()) {
        obj.insert(QString("supplierAddress"), ::OpenAPI::toJsonValue(m_supplier_address));
    }
    if (m_supplier_class.isSet()) {
        obj.insert(QString("supplierClass"), ::OpenAPI::toJsonValue(m_supplier_class));
    }
    if (m_supplier_contact.isSet()) {
        obj.insert(QString("supplierContact"), ::OpenAPI::toJsonValue(m_supplier_contact));
    }
    if (m_supplier_payment_method_details.size() > 0) {
        obj.insert(QString("supplierPaymentMethodDetails"), ::OpenAPI::toJsonValue(m_supplier_payment_method_details));
    }
    if (m_vat_registration_id_isSet) {
        obj.insert(QString("vatRegistrationId"), ::OpenAPI::toJsonValue(m_vat_registration_id));
    }
    if (m_vat_zone.isSet()) {
        obj.insert(QString("vatZone"), ::OpenAPI::toJsonValue(m_vat_zone));
    }
    return obj;
}

QString OAISupplierDto::getAccountReference() const {
    return m_account_reference;
}
void OAISupplierDto::setAccountReference(const QString &account_reference) {
    m_account_reference = account_reference;
    m_account_reference_isSet = true;
}

bool OAISupplierDto::is_account_reference_Set() const{
    return m_account_reference_isSet;
}

bool OAISupplierDto::is_account_reference_Valid() const{
    return m_account_reference_isValid;
}

QString OAISupplierDto::getAccountUsedForPayment() const {
    return m_account_used_for_payment;
}
void OAISupplierDto::setAccountUsedForPayment(const QString &account_used_for_payment) {
    m_account_used_for_payment = account_used_for_payment;
    m_account_used_for_payment_isSet = true;
}

bool OAISupplierDto::is_account_used_for_payment_Set() const{
    return m_account_used_for_payment_isSet;
}

bool OAISupplierDto::is_account_used_for_payment_Valid() const{
    return m_account_used_for_payment_isValid;
}

QList<OAIAttributeIdValueDto> OAISupplierDto::getAttributes() const {
    return m_attributes;
}
void OAISupplierDto::setAttributes(const QList<OAIAttributeIdValueDto> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAISupplierDto::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAISupplierDto::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAISupplierDto::getCashAccount() const {
    return m_cash_account;
}
void OAISupplierDto::setCashAccount(const QString &cash_account) {
    m_cash_account = cash_account;
    m_cash_account_isSet = true;
}

bool OAISupplierDto::is_cash_account_Set() const{
    return m_cash_account_isSet;
}

bool OAISupplierDto::is_cash_account_Valid() const{
    return m_cash_account_isValid;
}

QString OAISupplierDto::getChargeBearer() const {
    return m_charge_bearer;
}
void OAISupplierDto::setChargeBearer(const QString &charge_bearer) {
    m_charge_bearer = charge_bearer;
    m_charge_bearer_isSet = true;
}

bool OAISupplierDto::is_charge_bearer_Set() const{
    return m_charge_bearer_isSet;
}

bool OAISupplierDto::is_charge_bearer_Valid() const{
    return m_charge_bearer_isValid;
}

QString OAISupplierDto::getCorporateId() const {
    return m_corporate_id;
}
void OAISupplierDto::setCorporateId(const QString &corporate_id) {
    m_corporate_id = corporate_id;
    m_corporate_id_isSet = true;
}

bool OAISupplierDto::is_corporate_id_Set() const{
    return m_corporate_id_isSet;
}

bool OAISupplierDto::is_corporate_id_Valid() const{
    return m_corporate_id_isValid;
}

OAICreditTermsInSupplierDto OAISupplierDto::getCreditTerms() const {
    return m_credit_terms;
}
void OAISupplierDto::setCreditTerms(const OAICreditTermsInSupplierDto &credit_terms) {
    m_credit_terms = credit_terms;
    m_credit_terms_isSet = true;
}

bool OAISupplierDto::is_credit_terms_Set() const{
    return m_credit_terms_isSet;
}

bool OAISupplierDto::is_credit_terms_Valid() const{
    return m_credit_terms_isValid;
}

QString OAISupplierDto::getCurrencyId() const {
    return m_currency_id;
}
void OAISupplierDto::setCurrencyId(const QString &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAISupplierDto::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAISupplierDto::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

QString OAISupplierDto::getDocumentLanguage() const {
    return m_document_language;
}
void OAISupplierDto::setDocumentLanguage(const QString &document_language) {
    m_document_language = document_language;
    m_document_language_isSet = true;
}

bool OAISupplierDto::is_document_language_Set() const{
    return m_document_language_isSet;
}

bool OAISupplierDto::is_document_language_Valid() const{
    return m_document_language_isValid;
}

QString OAISupplierDto::getErrorInfo() const {
    return m_error_info;
}
void OAISupplierDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAISupplierDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAISupplierDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

OAIGlAccountsInSupplierDto OAISupplierDto::getGlAccounts() const {
    return m_gl_accounts;
}
void OAISupplierDto::setGlAccounts(const OAIGlAccountsInSupplierDto &gl_accounts) {
    m_gl_accounts = gl_accounts;
    m_gl_accounts_isSet = true;
}

bool OAISupplierDto::is_gl_accounts_Set() const{
    return m_gl_accounts_isSet;
}

bool OAISupplierDto::is_gl_accounts_Valid() const{
    return m_gl_accounts_isValid;
}

qint32 OAISupplierDto::getInternalId() const {
    return m_internal_id;
}
void OAISupplierDto::setInternalId(const qint32 &internal_id) {
    m_internal_id = internal_id;
    m_internal_id_isSet = true;
}

bool OAISupplierDto::is_internal_id_Set() const{
    return m_internal_id_isSet;
}

bool OAISupplierDto::is_internal_id_Valid() const{
    return m_internal_id_isValid;
}

QDateTime OAISupplierDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAISupplierDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAISupplierDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAISupplierDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAILocationInSupplierDto OAISupplierDto::getLocation() const {
    return m_location;
}
void OAISupplierDto::setLocation(const OAILocationInSupplierDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAISupplierDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAISupplierDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIMainAddressInSupplierDto OAISupplierDto::getMainAddress() const {
    return m_main_address;
}
void OAISupplierDto::setMainAddress(const OAIMainAddressInSupplierDto &main_address) {
    m_main_address = main_address;
    m_main_address_isSet = true;
}

bool OAISupplierDto::is_main_address_Set() const{
    return m_main_address_isSet;
}

bool OAISupplierDto::is_main_address_Valid() const{
    return m_main_address_isValid;
}

OAIMainContactInSupplierDto OAISupplierDto::getMainContact() const {
    return m_main_contact;
}
void OAISupplierDto::setMainContact(const OAIMainContactInSupplierDto &main_contact) {
    m_main_contact = main_contact;
    m_main_contact_isSet = true;
}

bool OAISupplierDto::is_main_contact_Set() const{
    return m_main_contact_isSet;
}

bool OAISupplierDto::is_main_contact_Valid() const{
    return m_main_contact_isValid;
}

OAIMetadataDto OAISupplierDto::getMetadata() const {
    return m_metadata;
}
void OAISupplierDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISupplierDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISupplierDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAISupplierDto::getName() const {
    return m_name;
}
void OAISupplierDto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISupplierDto::is_name_Set() const{
    return m_name_isSet;
}

bool OAISupplierDto::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISupplierDto::getNote() const {
    return m_note;
}
void OAISupplierDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAISupplierDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAISupplierDto::is_note_Valid() const{
    return m_note_isValid;
}

QString OAISupplierDto::getNumber() const {
    return m_number;
}
void OAISupplierDto::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAISupplierDto::is_number_Set() const{
    return m_number_isSet;
}

bool OAISupplierDto::is_number_Valid() const{
    return m_number_isValid;
}

OAIParentRecordInSupplierDto OAISupplierDto::getParentRecord() const {
    return m_parent_record;
}
void OAISupplierDto::setParentRecord(const OAIParentRecordInSupplierDto &parent_record) {
    m_parent_record = parent_record;
    m_parent_record_isSet = true;
}

bool OAISupplierDto::is_parent_record_Set() const{
    return m_parent_record_isSet;
}

bool OAISupplierDto::is_parent_record_Valid() const{
    return m_parent_record_isValid;
}

bool OAISupplierDto::isPaySeparately() const {
    return m_pay_separately;
}
void OAISupplierDto::setPaySeparately(const bool &pay_separately) {
    m_pay_separately = pay_separately;
    m_pay_separately_isSet = true;
}

bool OAISupplierDto::is_pay_separately_Set() const{
    return m_pay_separately_isSet;
}

bool OAISupplierDto::is_pay_separately_Valid() const{
    return m_pay_separately_isValid;
}

QString OAISupplierDto::getPaymentBy() const {
    return m_payment_by;
}
void OAISupplierDto::setPaymentBy(const QString &payment_by) {
    m_payment_by = payment_by;
    m_payment_by_isSet = true;
}

bool OAISupplierDto::is_payment_by_Set() const{
    return m_payment_by_isSet;
}

bool OAISupplierDto::is_payment_by_Valid() const{
    return m_payment_by_isValid;
}

qint32 OAISupplierDto::getPaymentLeadTime() const {
    return m_payment_lead_time;
}
void OAISupplierDto::setPaymentLeadTime(const qint32 &payment_lead_time) {
    m_payment_lead_time = payment_lead_time;
    m_payment_lead_time_isSet = true;
}

bool OAISupplierDto::is_payment_lead_time_Set() const{
    return m_payment_lead_time_isSet;
}

bool OAISupplierDto::is_payment_lead_time_Valid() const{
    return m_payment_lead_time_isValid;
}

OAIPaymentMethodInSupplierDto OAISupplierDto::getPaymentMethod() const {
    return m_payment_method;
}
void OAISupplierDto::setPaymentMethod(const OAIPaymentMethodInSupplierDto &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAISupplierDto::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAISupplierDto::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAISupplierDto::getPaymentRefDisplayMask() const {
    return m_payment_ref_display_mask;
}
void OAISupplierDto::setPaymentRefDisplayMask(const QString &payment_ref_display_mask) {
    m_payment_ref_display_mask = payment_ref_display_mask;
    m_payment_ref_display_mask_isSet = true;
}

bool OAISupplierDto::is_payment_ref_display_mask_Set() const{
    return m_payment_ref_display_mask_isSet;
}

bool OAISupplierDto::is_payment_ref_display_mask_Valid() const{
    return m_payment_ref_display_mask_isValid;
}

OAIRemitAddressInSupplierDto OAISupplierDto::getRemitAddress() const {
    return m_remit_address;
}
void OAISupplierDto::setRemitAddress(const OAIRemitAddressInSupplierDto &remit_address) {
    m_remit_address = remit_address;
    m_remit_address_isSet = true;
}

bool OAISupplierDto::is_remit_address_Set() const{
    return m_remit_address_isSet;
}

bool OAISupplierDto::is_remit_address_Valid() const{
    return m_remit_address_isValid;
}

OAIRemitContactInSupplierDto OAISupplierDto::getRemitContact() const {
    return m_remit_contact;
}
void OAISupplierDto::setRemitContact(const OAIRemitContactInSupplierDto &remit_contact) {
    m_remit_contact = remit_contact;
    m_remit_contact_isSet = true;
}

bool OAISupplierDto::is_remit_contact_Set() const{
    return m_remit_contact_isSet;
}

bool OAISupplierDto::is_remit_contact_Valid() const{
    return m_remit_contact_isValid;
}

bool OAISupplierDto::isRetainageApply() const {
    return m_retainage_apply;
}
void OAISupplierDto::setRetainageApply(const bool &retainage_apply) {
    m_retainage_apply = retainage_apply;
    m_retainage_apply_isSet = true;
}

bool OAISupplierDto::is_retainage_apply_Set() const{
    return m_retainage_apply_isSet;
}

bool OAISupplierDto::is_retainage_apply_Valid() const{
    return m_retainage_apply_isValid;
}

QString OAISupplierDto::getRetainageCashAccountId() const {
    return m_retainage_cash_account_id;
}
void OAISupplierDto::setRetainageCashAccountId(const QString &retainage_cash_account_id) {
    m_retainage_cash_account_id = retainage_cash_account_id;
    m_retainage_cash_account_id_isSet = true;
}

bool OAISupplierDto::is_retainage_cash_account_id_Set() const{
    return m_retainage_cash_account_id_isSet;
}

bool OAISupplierDto::is_retainage_cash_account_id_Valid() const{
    return m_retainage_cash_account_id_isValid;
}

double OAISupplierDto::getRetainagePct() const {
    return m_retainage_pct;
}
void OAISupplierDto::setRetainagePct(const double &retainage_pct) {
    m_retainage_pct = retainage_pct;
    m_retainage_pct_isSet = true;
}

bool OAISupplierDto::is_retainage_pct_Set() const{
    return m_retainage_pct_isSet;
}

bool OAISupplierDto::is_retainage_pct_Valid() const{
    return m_retainage_pct_isValid;
}

QString OAISupplierDto::getStatus() const {
    return m_status;
}
void OAISupplierDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISupplierDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAISupplierDto::is_status_Valid() const{
    return m_status_isValid;
}

OAISupplierAddressInSupplierDto OAISupplierDto::getSupplierAddress() const {
    return m_supplier_address;
}
void OAISupplierDto::setSupplierAddress(const OAISupplierAddressInSupplierDto &supplier_address) {
    m_supplier_address = supplier_address;
    m_supplier_address_isSet = true;
}

bool OAISupplierDto::is_supplier_address_Set() const{
    return m_supplier_address_isSet;
}

bool OAISupplierDto::is_supplier_address_Valid() const{
    return m_supplier_address_isValid;
}

OAISupplierClassInSupplierDto OAISupplierDto::getSupplierClass() const {
    return m_supplier_class;
}
void OAISupplierDto::setSupplierClass(const OAISupplierClassInSupplierDto &supplier_class) {
    m_supplier_class = supplier_class;
    m_supplier_class_isSet = true;
}

bool OAISupplierDto::is_supplier_class_Set() const{
    return m_supplier_class_isSet;
}

bool OAISupplierDto::is_supplier_class_Valid() const{
    return m_supplier_class_isValid;
}

OAISupplierContactInSupplierDto OAISupplierDto::getSupplierContact() const {
    return m_supplier_contact;
}
void OAISupplierDto::setSupplierContact(const OAISupplierContactInSupplierDto &supplier_contact) {
    m_supplier_contact = supplier_contact;
    m_supplier_contact_isSet = true;
}

bool OAISupplierDto::is_supplier_contact_Set() const{
    return m_supplier_contact_isSet;
}

bool OAISupplierDto::is_supplier_contact_Valid() const{
    return m_supplier_contact_isValid;
}

QList<OAISupplierPaymentMethodDetailDto> OAISupplierDto::getSupplierPaymentMethodDetails() const {
    return m_supplier_payment_method_details;
}
void OAISupplierDto::setSupplierPaymentMethodDetails(const QList<OAISupplierPaymentMethodDetailDto> &supplier_payment_method_details) {
    m_supplier_payment_method_details = supplier_payment_method_details;
    m_supplier_payment_method_details_isSet = true;
}

bool OAISupplierDto::is_supplier_payment_method_details_Set() const{
    return m_supplier_payment_method_details_isSet;
}

bool OAISupplierDto::is_supplier_payment_method_details_Valid() const{
    return m_supplier_payment_method_details_isValid;
}

QString OAISupplierDto::getVatRegistrationId() const {
    return m_vat_registration_id;
}
void OAISupplierDto::setVatRegistrationId(const QString &vat_registration_id) {
    m_vat_registration_id = vat_registration_id;
    m_vat_registration_id_isSet = true;
}

bool OAISupplierDto::is_vat_registration_id_Set() const{
    return m_vat_registration_id_isSet;
}

bool OAISupplierDto::is_vat_registration_id_Valid() const{
    return m_vat_registration_id_isValid;
}

OAIVatZoneInSupplierDto OAISupplierDto::getVatZone() const {
    return m_vat_zone;
}
void OAISupplierDto::setVatZone(const OAIVatZoneInSupplierDto &vat_zone) {
    m_vat_zone = vat_zone;
    m_vat_zone_isSet = true;
}

bool OAISupplierDto::is_vat_zone_Set() const{
    return m_vat_zone_isSet;
}

bool OAISupplierDto::is_vat_zone_Valid() const{
    return m_vat_zone_isValid;
}

bool OAISupplierDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_used_for_payment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_charge_bearer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_corporate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gl_accounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_record.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_separately_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_lead_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_ref_display_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remit_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remit_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retainage_apply_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retainage_cash_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retainage_pct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_payment_method_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_registration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupplierDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
