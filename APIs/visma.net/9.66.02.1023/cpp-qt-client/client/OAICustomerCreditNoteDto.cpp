/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerCreditNoteDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerCreditNoteDto::OAICustomerCreditNoteDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerCreditNoteDto::OAICustomerCreditNoteDto() {
    this->initializeModel();
}

OAICustomerCreditNoteDto::~OAICustomerCreditNoteDto() {}

void OAICustomerCreditNoteDto::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_amount_in_currency_isSet = false;
    m_amount_in_currency_isValid = false;

    m_applications_isSet = false;
    m_applications_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_balance_in_currency_isSet = false;
    m_balance_in_currency_isValid = false;

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_cash_account_isSet = false;
    m_cash_account_isValid = false;

    m_cash_discount_isSet = false;
    m_cash_discount_isValid = false;

    m_cash_discount_date_isSet = false;
    m_cash_discount_date_isValid = false;

    m_cash_discount_in_currency_isSet = false;
    m_cash_discount_in_currency_isValid = false;

    m_closed_financial_period_isSet = false;
    m_closed_financial_period_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_credit_terms_isSet = false;
    m_credit_terms_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_customer_project_isSet = false;
    m_customer_project_isValid = false;

    m_customer_ref_number_isSet = false;
    m_customer_ref_number_isValid = false;

    m_customer_vat_zone_isSet = false;
    m_customer_vat_zone_isValid = false;

    m_detail_total_isSet = false;
    m_detail_total_isValid = false;

    m_detail_total_in_currency_isSet = false;
    m_detail_total_in_currency_isValid = false;

    m_discount_total_isSet = false;
    m_discount_total_isValid = false;

    m_discount_total_in_currency_isSet = false;
    m_discount_total_in_currency_isValid = false;

    m_document_date_isSet = false;
    m_document_date_isValid = false;

    m_document_due_date_isSet = false;
    m_document_due_date_isValid = false;

    m_document_type_isSet = false;
    m_document_type_isValid = false;

    m_dont_email_isSet = false;
    m_dont_email_isValid = false;

    m_dont_print_isSet = false;
    m_dont_print_isValid = false;

    m_dunning_letter_date_isSet = false;
    m_dunning_letter_date_isValid = false;

    m_dunning_letter_level_isSet = false;
    m_dunning_letter_level_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_external_reference_isSet = false;
    m_external_reference_isValid = false;

    m_financial_period_isSet = false;
    m_financial_period_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_invoice_address_isSet = false;
    m_invoice_address_isValid = false;

    m_invoice_contact_isSet = false;
    m_invoice_contact_isValid = false;

    m_invoice_text_isSet = false;
    m_invoice_text_isValid = false;

    m_is_rot_rut_deductible_isSet = false;
    m_is_rot_rut_deductible_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_orig_invoice_date_isSet = false;
    m_orig_invoice_date_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_payment_reference_isSet = false;
    m_payment_reference_isValid = false;

    m_post_period_isSet = false;
    m_post_period_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_reference_number_isSet = false;
    m_reference_number_isValid = false;

    m_rounding_diff_isSet = false;
    m_rounding_diff_isValid = false;

    m_sales_person_isSet = false;
    m_sales_person_isValid = false;

    m_sales_person_descr_isSet = false;
    m_sales_person_descr_isValid = false;

    m_sales_person_id_isSet = false;
    m_sales_person_id_isValid = false;

    m_send_to_auto_invoice_isSet = false;
    m_send_to_auto_invoice_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subaccount_isSet = false;
    m_subaccount_isValid = false;

    m_tax_details_isSet = false;
    m_tax_details_isValid = false;

    m_vat_exempt_total_isSet = false;
    m_vat_exempt_total_isValid = false;

    m_vat_exempt_total_in_currency_isSet = false;
    m_vat_exempt_total_in_currency_isValid = false;

    m_vat_taxable_total_isSet = false;
    m_vat_taxable_total_isValid = false;

    m_vat_taxable_total_in_currency_isSet = false;
    m_vat_taxable_total_in_currency_isValid = false;

    m_vat_total_isSet = false;
    m_vat_total_isValid = false;

    m_vat_total_in_currency_isSet = false;
    m_vat_total_in_currency_isValid = false;
}

void OAICustomerCreditNoteDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerCreditNoteDto::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_amount_in_currency_isValid = ::OpenAPI::fromJsonValue(m_amount_in_currency, json[QString("amountInCurrency")]);
    m_amount_in_currency_isSet = !json[QString("amountInCurrency")].isNull() && m_amount_in_currency_isValid;

    m_applications_isValid = ::OpenAPI::fromJsonValue(m_applications, json[QString("applications")]);
    m_applications_isSet = !json[QString("applications")].isNull() && m_applications_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_balance_in_currency_isValid = ::OpenAPI::fromJsonValue(m_balance_in_currency, json[QString("balanceInCurrency")]);
    m_balance_in_currency_isSet = !json[QString("balanceInCurrency")].isNull() && m_balance_in_currency_isValid;

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_cash_account_isValid = ::OpenAPI::fromJsonValue(m_cash_account, json[QString("cashAccount")]);
    m_cash_account_isSet = !json[QString("cashAccount")].isNull() && m_cash_account_isValid;

    m_cash_discount_isValid = ::OpenAPI::fromJsonValue(m_cash_discount, json[QString("cashDiscount")]);
    m_cash_discount_isSet = !json[QString("cashDiscount")].isNull() && m_cash_discount_isValid;

    m_cash_discount_date_isValid = ::OpenAPI::fromJsonValue(m_cash_discount_date, json[QString("cashDiscountDate")]);
    m_cash_discount_date_isSet = !json[QString("cashDiscountDate")].isNull() && m_cash_discount_date_isValid;

    m_cash_discount_in_currency_isValid = ::OpenAPI::fromJsonValue(m_cash_discount_in_currency, json[QString("cashDiscountInCurrency")]);
    m_cash_discount_in_currency_isSet = !json[QString("cashDiscountInCurrency")].isNull() && m_cash_discount_in_currency_isValid;

    m_closed_financial_period_isValid = ::OpenAPI::fromJsonValue(m_closed_financial_period, json[QString("closedFinancialPeriod")]);
    m_closed_financial_period_isSet = !json[QString("closedFinancialPeriod")].isNull() && m_closed_financial_period_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_credit_terms_isValid = ::OpenAPI::fromJsonValue(m_credit_terms, json[QString("creditTerms")]);
    m_credit_terms_isSet = !json[QString("creditTerms")].isNull() && m_credit_terms_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_customer_project_isValid = ::OpenAPI::fromJsonValue(m_customer_project, json[QString("customerProject")]);
    m_customer_project_isSet = !json[QString("customerProject")].isNull() && m_customer_project_isValid;

    m_customer_ref_number_isValid = ::OpenAPI::fromJsonValue(m_customer_ref_number, json[QString("customerRefNumber")]);
    m_customer_ref_number_isSet = !json[QString("customerRefNumber")].isNull() && m_customer_ref_number_isValid;

    m_customer_vat_zone_isValid = ::OpenAPI::fromJsonValue(m_customer_vat_zone, json[QString("customerVatZone")]);
    m_customer_vat_zone_isSet = !json[QString("customerVatZone")].isNull() && m_customer_vat_zone_isValid;

    m_detail_total_isValid = ::OpenAPI::fromJsonValue(m_detail_total, json[QString("detailTotal")]);
    m_detail_total_isSet = !json[QString("detailTotal")].isNull() && m_detail_total_isValid;

    m_detail_total_in_currency_isValid = ::OpenAPI::fromJsonValue(m_detail_total_in_currency, json[QString("detailTotalInCurrency")]);
    m_detail_total_in_currency_isSet = !json[QString("detailTotalInCurrency")].isNull() && m_detail_total_in_currency_isValid;

    m_discount_total_isValid = ::OpenAPI::fromJsonValue(m_discount_total, json[QString("discountTotal")]);
    m_discount_total_isSet = !json[QString("discountTotal")].isNull() && m_discount_total_isValid;

    m_discount_total_in_currency_isValid = ::OpenAPI::fromJsonValue(m_discount_total_in_currency, json[QString("discountTotalInCurrency")]);
    m_discount_total_in_currency_isSet = !json[QString("discountTotalInCurrency")].isNull() && m_discount_total_in_currency_isValid;

    m_document_date_isValid = ::OpenAPI::fromJsonValue(m_document_date, json[QString("documentDate")]);
    m_document_date_isSet = !json[QString("documentDate")].isNull() && m_document_date_isValid;

    m_document_due_date_isValid = ::OpenAPI::fromJsonValue(m_document_due_date, json[QString("documentDueDate")]);
    m_document_due_date_isSet = !json[QString("documentDueDate")].isNull() && m_document_due_date_isValid;

    m_document_type_isValid = ::OpenAPI::fromJsonValue(m_document_type, json[QString("documentType")]);
    m_document_type_isSet = !json[QString("documentType")].isNull() && m_document_type_isValid;

    m_dont_email_isValid = ::OpenAPI::fromJsonValue(m_dont_email, json[QString("dontEmail")]);
    m_dont_email_isSet = !json[QString("dontEmail")].isNull() && m_dont_email_isValid;

    m_dont_print_isValid = ::OpenAPI::fromJsonValue(m_dont_print, json[QString("dontPrint")]);
    m_dont_print_isSet = !json[QString("dontPrint")].isNull() && m_dont_print_isValid;

    m_dunning_letter_date_isValid = ::OpenAPI::fromJsonValue(m_dunning_letter_date, json[QString("dunningLetterDate")]);
    m_dunning_letter_date_isSet = !json[QString("dunningLetterDate")].isNull() && m_dunning_letter_date_isValid;

    m_dunning_letter_level_isValid = ::OpenAPI::fromJsonValue(m_dunning_letter_level, json[QString("dunningLetterLevel")]);
    m_dunning_letter_level_isSet = !json[QString("dunningLetterLevel")].isNull() && m_dunning_letter_level_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("exchangeRate")]);
    m_exchange_rate_isSet = !json[QString("exchangeRate")].isNull() && m_exchange_rate_isValid;

    m_external_reference_isValid = ::OpenAPI::fromJsonValue(m_external_reference, json[QString("externalReference")]);
    m_external_reference_isSet = !json[QString("externalReference")].isNull() && m_external_reference_isValid;

    m_financial_period_isValid = ::OpenAPI::fromJsonValue(m_financial_period, json[QString("financialPeriod")]);
    m_financial_period_isSet = !json[QString("financialPeriod")].isNull() && m_financial_period_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_invoice_address_isValid = ::OpenAPI::fromJsonValue(m_invoice_address, json[QString("invoiceAddress")]);
    m_invoice_address_isSet = !json[QString("invoiceAddress")].isNull() && m_invoice_address_isValid;

    m_invoice_contact_isValid = ::OpenAPI::fromJsonValue(m_invoice_contact, json[QString("invoiceContact")]);
    m_invoice_contact_isSet = !json[QString("invoiceContact")].isNull() && m_invoice_contact_isValid;

    m_invoice_text_isValid = ::OpenAPI::fromJsonValue(m_invoice_text, json[QString("invoiceText")]);
    m_invoice_text_isSet = !json[QString("invoiceText")].isNull() && m_invoice_text_isValid;

    m_is_rot_rut_deductible_isValid = ::OpenAPI::fromJsonValue(m_is_rot_rut_deductible, json[QString("isRotRutDeductible")]);
    m_is_rot_rut_deductible_isSet = !json[QString("isRotRutDeductible")].isNull() && m_is_rot_rut_deductible_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_orig_invoice_date_isValid = ::OpenAPI::fromJsonValue(m_orig_invoice_date, json[QString("origInvoiceDate")]);
    m_orig_invoice_date_isSet = !json[QString("origInvoiceDate")].isNull() && m_orig_invoice_date_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_payment_reference_isValid = ::OpenAPI::fromJsonValue(m_payment_reference, json[QString("paymentReference")]);
    m_payment_reference_isSet = !json[QString("paymentReference")].isNull() && m_payment_reference_isValid;

    m_post_period_isValid = ::OpenAPI::fromJsonValue(m_post_period, json[QString("postPeriod")]);
    m_post_period_isSet = !json[QString("postPeriod")].isNull() && m_post_period_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_reference_number_isValid = ::OpenAPI::fromJsonValue(m_reference_number, json[QString("referenceNumber")]);
    m_reference_number_isSet = !json[QString("referenceNumber")].isNull() && m_reference_number_isValid;

    m_rounding_diff_isValid = ::OpenAPI::fromJsonValue(m_rounding_diff, json[QString("roundingDiff")]);
    m_rounding_diff_isSet = !json[QString("roundingDiff")].isNull() && m_rounding_diff_isValid;

    m_sales_person_isValid = ::OpenAPI::fromJsonValue(m_sales_person, json[QString("salesPerson")]);
    m_sales_person_isSet = !json[QString("salesPerson")].isNull() && m_sales_person_isValid;

    m_sales_person_descr_isValid = ::OpenAPI::fromJsonValue(m_sales_person_descr, json[QString("salesPersonDescr")]);
    m_sales_person_descr_isSet = !json[QString("salesPersonDescr")].isNull() && m_sales_person_descr_isValid;

    m_sales_person_id_isValid = ::OpenAPI::fromJsonValue(m_sales_person_id, json[QString("salesPersonID")]);
    m_sales_person_id_isSet = !json[QString("salesPersonID")].isNull() && m_sales_person_id_isValid;

    m_send_to_auto_invoice_isValid = ::OpenAPI::fromJsonValue(m_send_to_auto_invoice, json[QString("sendToAutoInvoice")]);
    m_send_to_auto_invoice_isSet = !json[QString("sendToAutoInvoice")].isNull() && m_send_to_auto_invoice_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subaccount_isValid = ::OpenAPI::fromJsonValue(m_subaccount, json[QString("subaccount")]);
    m_subaccount_isSet = !json[QString("subaccount")].isNull() && m_subaccount_isValid;

    m_tax_details_isValid = ::OpenAPI::fromJsonValue(m_tax_details, json[QString("taxDetails")]);
    m_tax_details_isSet = !json[QString("taxDetails")].isNull() && m_tax_details_isValid;

    m_vat_exempt_total_isValid = ::OpenAPI::fromJsonValue(m_vat_exempt_total, json[QString("vatExemptTotal")]);
    m_vat_exempt_total_isSet = !json[QString("vatExemptTotal")].isNull() && m_vat_exempt_total_isValid;

    m_vat_exempt_total_in_currency_isValid = ::OpenAPI::fromJsonValue(m_vat_exempt_total_in_currency, json[QString("vatExemptTotalInCurrency")]);
    m_vat_exempt_total_in_currency_isSet = !json[QString("vatExemptTotalInCurrency")].isNull() && m_vat_exempt_total_in_currency_isValid;

    m_vat_taxable_total_isValid = ::OpenAPI::fromJsonValue(m_vat_taxable_total, json[QString("vatTaxableTotal")]);
    m_vat_taxable_total_isSet = !json[QString("vatTaxableTotal")].isNull() && m_vat_taxable_total_isValid;

    m_vat_taxable_total_in_currency_isValid = ::OpenAPI::fromJsonValue(m_vat_taxable_total_in_currency, json[QString("vatTaxableTotalInCurrency")]);
    m_vat_taxable_total_in_currency_isSet = !json[QString("vatTaxableTotalInCurrency")].isNull() && m_vat_taxable_total_in_currency_isValid;

    m_vat_total_isValid = ::OpenAPI::fromJsonValue(m_vat_total, json[QString("vatTotal")]);
    m_vat_total_isSet = !json[QString("vatTotal")].isNull() && m_vat_total_isValid;

    m_vat_total_in_currency_isValid = ::OpenAPI::fromJsonValue(m_vat_total_in_currency, json[QString("vatTotalInCurrency")]);
    m_vat_total_in_currency_isSet = !json[QString("vatTotalInCurrency")].isNull() && m_vat_total_in_currency_isValid;
}

QString OAICustomerCreditNoteDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerCreditNoteDto::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_amount_in_currency_isSet) {
        obj.insert(QString("amountInCurrency"), ::OpenAPI::toJsonValue(m_amount_in_currency));
    }
    if (m_applications.size() > 0) {
        obj.insert(QString("applications"), ::OpenAPI::toJsonValue(m_applications));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_balance_in_currency_isSet) {
        obj.insert(QString("balanceInCurrency"), ::OpenAPI::toJsonValue(m_balance_in_currency));
    }
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_cash_account_isSet) {
        obj.insert(QString("cashAccount"), ::OpenAPI::toJsonValue(m_cash_account));
    }
    if (m_cash_discount_isSet) {
        obj.insert(QString("cashDiscount"), ::OpenAPI::toJsonValue(m_cash_discount));
    }
    if (m_cash_discount_date_isSet) {
        obj.insert(QString("cashDiscountDate"), ::OpenAPI::toJsonValue(m_cash_discount_date));
    }
    if (m_cash_discount_in_currency_isSet) {
        obj.insert(QString("cashDiscountInCurrency"), ::OpenAPI::toJsonValue(m_cash_discount_in_currency));
    }
    if (m_closed_financial_period_isSet) {
        obj.insert(QString("closedFinancialPeriod"), ::OpenAPI::toJsonValue(m_closed_financial_period));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_credit_terms.isSet()) {
        obj.insert(QString("creditTerms"), ::OpenAPI::toJsonValue(m_credit_terms));
    }
    if (m_currency_id_isSet) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_customer_project_isSet) {
        obj.insert(QString("customerProject"), ::OpenAPI::toJsonValue(m_customer_project));
    }
    if (m_customer_ref_number_isSet) {
        obj.insert(QString("customerRefNumber"), ::OpenAPI::toJsonValue(m_customer_ref_number));
    }
    if (m_customer_vat_zone.isSet()) {
        obj.insert(QString("customerVatZone"), ::OpenAPI::toJsonValue(m_customer_vat_zone));
    }
    if (m_detail_total_isSet) {
        obj.insert(QString("detailTotal"), ::OpenAPI::toJsonValue(m_detail_total));
    }
    if (m_detail_total_in_currency_isSet) {
        obj.insert(QString("detailTotalInCurrency"), ::OpenAPI::toJsonValue(m_detail_total_in_currency));
    }
    if (m_discount_total_isSet) {
        obj.insert(QString("discountTotal"), ::OpenAPI::toJsonValue(m_discount_total));
    }
    if (m_discount_total_in_currency_isSet) {
        obj.insert(QString("discountTotalInCurrency"), ::OpenAPI::toJsonValue(m_discount_total_in_currency));
    }
    if (m_document_date_isSet) {
        obj.insert(QString("documentDate"), ::OpenAPI::toJsonValue(m_document_date));
    }
    if (m_document_due_date_isSet) {
        obj.insert(QString("documentDueDate"), ::OpenAPI::toJsonValue(m_document_due_date));
    }
    if (m_document_type_isSet) {
        obj.insert(QString("documentType"), ::OpenAPI::toJsonValue(m_document_type));
    }
    if (m_dont_email_isSet) {
        obj.insert(QString("dontEmail"), ::OpenAPI::toJsonValue(m_dont_email));
    }
    if (m_dont_print_isSet) {
        obj.insert(QString("dontPrint"), ::OpenAPI::toJsonValue(m_dont_print));
    }
    if (m_dunning_letter_date_isSet) {
        obj.insert(QString("dunningLetterDate"), ::OpenAPI::toJsonValue(m_dunning_letter_date));
    }
    if (m_dunning_letter_level_isSet) {
        obj.insert(QString("dunningLetterLevel"), ::OpenAPI::toJsonValue(m_dunning_letter_level));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_exchange_rate_isSet) {
        obj.insert(QString("exchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_external_reference_isSet) {
        obj.insert(QString("externalReference"), ::OpenAPI::toJsonValue(m_external_reference));
    }
    if (m_financial_period_isSet) {
        obj.insert(QString("financialPeriod"), ::OpenAPI::toJsonValue(m_financial_period));
    }
    if (m_hold_isSet) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_invoice_address.isSet()) {
        obj.insert(QString("invoiceAddress"), ::OpenAPI::toJsonValue(m_invoice_address));
    }
    if (m_invoice_contact.isSet()) {
        obj.insert(QString("invoiceContact"), ::OpenAPI::toJsonValue(m_invoice_contact));
    }
    if (m_invoice_text_isSet) {
        obj.insert(QString("invoiceText"), ::OpenAPI::toJsonValue(m_invoice_text));
    }
    if (m_is_rot_rut_deductible_isSet) {
        obj.insert(QString("isRotRutDeductible"), ::OpenAPI::toJsonValue(m_is_rot_rut_deductible));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_orig_invoice_date_isSet) {
        obj.insert(QString("origInvoiceDate"), ::OpenAPI::toJsonValue(m_orig_invoice_date));
    }
    if (m_payment_method.isSet()) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_payment_reference_isSet) {
        obj.insert(QString("paymentReference"), ::OpenAPI::toJsonValue(m_payment_reference));
    }
    if (m_post_period_isSet) {
        obj.insert(QString("postPeriod"), ::OpenAPI::toJsonValue(m_post_period));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_reference_number_isSet) {
        obj.insert(QString("referenceNumber"), ::OpenAPI::toJsonValue(m_reference_number));
    }
    if (m_rounding_diff_isSet) {
        obj.insert(QString("roundingDiff"), ::OpenAPI::toJsonValue(m_rounding_diff));
    }
    if (m_sales_person.isSet()) {
        obj.insert(QString("salesPerson"), ::OpenAPI::toJsonValue(m_sales_person));
    }
    if (m_sales_person_descr_isSet) {
        obj.insert(QString("salesPersonDescr"), ::OpenAPI::toJsonValue(m_sales_person_descr));
    }
    if (m_sales_person_id_isSet) {
        obj.insert(QString("salesPersonID"), ::OpenAPI::toJsonValue(m_sales_person_id));
    }
    if (m_send_to_auto_invoice_isSet) {
        obj.insert(QString("sendToAutoInvoice"), ::OpenAPI::toJsonValue(m_send_to_auto_invoice));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subaccount.isSet()) {
        obj.insert(QString("subaccount"), ::OpenAPI::toJsonValue(m_subaccount));
    }
    if (m_tax_details.size() > 0) {
        obj.insert(QString("taxDetails"), ::OpenAPI::toJsonValue(m_tax_details));
    }
    if (m_vat_exempt_total_isSet) {
        obj.insert(QString("vatExemptTotal"), ::OpenAPI::toJsonValue(m_vat_exempt_total));
    }
    if (m_vat_exempt_total_in_currency_isSet) {
        obj.insert(QString("vatExemptTotalInCurrency"), ::OpenAPI::toJsonValue(m_vat_exempt_total_in_currency));
    }
    if (m_vat_taxable_total_isSet) {
        obj.insert(QString("vatTaxableTotal"), ::OpenAPI::toJsonValue(m_vat_taxable_total));
    }
    if (m_vat_taxable_total_in_currency_isSet) {
        obj.insert(QString("vatTaxableTotalInCurrency"), ::OpenAPI::toJsonValue(m_vat_taxable_total_in_currency));
    }
    if (m_vat_total_isSet) {
        obj.insert(QString("vatTotal"), ::OpenAPI::toJsonValue(m_vat_total));
    }
    if (m_vat_total_in_currency_isSet) {
        obj.insert(QString("vatTotalInCurrency"), ::OpenAPI::toJsonValue(m_vat_total_in_currency));
    }
    return obj;
}

OAIAccountInCustomerCreditNoteDto OAICustomerCreditNoteDto::getAccount() const {
    return m_account;
}
void OAICustomerCreditNoteDto::setAccount(const OAIAccountInCustomerCreditNoteDto &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAICustomerCreditNoteDto::is_account_Set() const{
    return m_account_isSet;
}

bool OAICustomerCreditNoteDto::is_account_Valid() const{
    return m_account_isValid;
}

double OAICustomerCreditNoteDto::getAmount() const {
    return m_amount;
}
void OAICustomerCreditNoteDto::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAICustomerCreditNoteDto::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAICustomerCreditNoteDto::is_amount_Valid() const{
    return m_amount_isValid;
}

double OAICustomerCreditNoteDto::getAmountInCurrency() const {
    return m_amount_in_currency;
}
void OAICustomerCreditNoteDto::setAmountInCurrency(const double &amount_in_currency) {
    m_amount_in_currency = amount_in_currency;
    m_amount_in_currency_isSet = true;
}

bool OAICustomerCreditNoteDto::is_amount_in_currency_Set() const{
    return m_amount_in_currency_isSet;
}

bool OAICustomerCreditNoteDto::is_amount_in_currency_Valid() const{
    return m_amount_in_currency_isValid;
}

QList<OAIArAdjustDto> OAICustomerCreditNoteDto::getApplications() const {
    return m_applications;
}
void OAICustomerCreditNoteDto::setApplications(const QList<OAIArAdjustDto> &applications) {
    m_applications = applications;
    m_applications_isSet = true;
}

bool OAICustomerCreditNoteDto::is_applications_Set() const{
    return m_applications_isSet;
}

bool OAICustomerCreditNoteDto::is_applications_Valid() const{
    return m_applications_isValid;
}

QList<OAIAttachmentDto> OAICustomerCreditNoteDto::getAttachments() const {
    return m_attachments;
}
void OAICustomerCreditNoteDto::setAttachments(const QList<OAIAttachmentDto> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAICustomerCreditNoteDto::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAICustomerCreditNoteDto::is_attachments_Valid() const{
    return m_attachments_isValid;
}

double OAICustomerCreditNoteDto::getBalance() const {
    return m_balance;
}
void OAICustomerCreditNoteDto::setBalance(const double &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAICustomerCreditNoteDto::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAICustomerCreditNoteDto::is_balance_Valid() const{
    return m_balance_isValid;
}

double OAICustomerCreditNoteDto::getBalanceInCurrency() const {
    return m_balance_in_currency;
}
void OAICustomerCreditNoteDto::setBalanceInCurrency(const double &balance_in_currency) {
    m_balance_in_currency = balance_in_currency;
    m_balance_in_currency_isSet = true;
}

bool OAICustomerCreditNoteDto::is_balance_in_currency_Set() const{
    return m_balance_in_currency_isSet;
}

bool OAICustomerCreditNoteDto::is_balance_in_currency_Valid() const{
    return m_balance_in_currency_isValid;
}

OAIBranchNumberInCustomerCreditNoteDto OAICustomerCreditNoteDto::getBranchNumber() const {
    return m_branch_number;
}
void OAICustomerCreditNoteDto::setBranchNumber(const OAIBranchNumberInCustomerCreditNoteDto &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAICustomerCreditNoteDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAICustomerCreditNoteDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

QString OAICustomerCreditNoteDto::getCashAccount() const {
    return m_cash_account;
}
void OAICustomerCreditNoteDto::setCashAccount(const QString &cash_account) {
    m_cash_account = cash_account;
    m_cash_account_isSet = true;
}

bool OAICustomerCreditNoteDto::is_cash_account_Set() const{
    return m_cash_account_isSet;
}

bool OAICustomerCreditNoteDto::is_cash_account_Valid() const{
    return m_cash_account_isValid;
}

double OAICustomerCreditNoteDto::getCashDiscount() const {
    return m_cash_discount;
}
void OAICustomerCreditNoteDto::setCashDiscount(const double &cash_discount) {
    m_cash_discount = cash_discount;
    m_cash_discount_isSet = true;
}

bool OAICustomerCreditNoteDto::is_cash_discount_Set() const{
    return m_cash_discount_isSet;
}

bool OAICustomerCreditNoteDto::is_cash_discount_Valid() const{
    return m_cash_discount_isValid;
}

QDateTime OAICustomerCreditNoteDto::getCashDiscountDate() const {
    return m_cash_discount_date;
}
void OAICustomerCreditNoteDto::setCashDiscountDate(const QDateTime &cash_discount_date) {
    m_cash_discount_date = cash_discount_date;
    m_cash_discount_date_isSet = true;
}

bool OAICustomerCreditNoteDto::is_cash_discount_date_Set() const{
    return m_cash_discount_date_isSet;
}

bool OAICustomerCreditNoteDto::is_cash_discount_date_Valid() const{
    return m_cash_discount_date_isValid;
}

double OAICustomerCreditNoteDto::getCashDiscountInCurrency() const {
    return m_cash_discount_in_currency;
}
void OAICustomerCreditNoteDto::setCashDiscountInCurrency(const double &cash_discount_in_currency) {
    m_cash_discount_in_currency = cash_discount_in_currency;
    m_cash_discount_in_currency_isSet = true;
}

bool OAICustomerCreditNoteDto::is_cash_discount_in_currency_Set() const{
    return m_cash_discount_in_currency_isSet;
}

bool OAICustomerCreditNoteDto::is_cash_discount_in_currency_Valid() const{
    return m_cash_discount_in_currency_isValid;
}

QString OAICustomerCreditNoteDto::getClosedFinancialPeriod() const {
    return m_closed_financial_period;
}
void OAICustomerCreditNoteDto::setClosedFinancialPeriod(const QString &closed_financial_period) {
    m_closed_financial_period = closed_financial_period;
    m_closed_financial_period_isSet = true;
}

bool OAICustomerCreditNoteDto::is_closed_financial_period_Set() const{
    return m_closed_financial_period_isSet;
}

bool OAICustomerCreditNoteDto::is_closed_financial_period_Valid() const{
    return m_closed_financial_period_isValid;
}

OAIContactInCustomerCreditNoteDto OAICustomerCreditNoteDto::getContact() const {
    return m_contact;
}
void OAICustomerCreditNoteDto::setContact(const OAIContactInCustomerCreditNoteDto &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAICustomerCreditNoteDto::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAICustomerCreditNoteDto::is_contact_Valid() const{
    return m_contact_isValid;
}

QDateTime OAICustomerCreditNoteDto::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAICustomerCreditNoteDto::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAICustomerCreditNoteDto::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAICustomerCreditNoteDto::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

OAICreditTermsInCustomerCreditNoteDto OAICustomerCreditNoteDto::getCreditTerms() const {
    return m_credit_terms;
}
void OAICustomerCreditNoteDto::setCreditTerms(const OAICreditTermsInCustomerCreditNoteDto &credit_terms) {
    m_credit_terms = credit_terms;
    m_credit_terms_isSet = true;
}

bool OAICustomerCreditNoteDto::is_credit_terms_Set() const{
    return m_credit_terms_isSet;
}

bool OAICustomerCreditNoteDto::is_credit_terms_Valid() const{
    return m_credit_terms_isValid;
}

QString OAICustomerCreditNoteDto::getCurrencyId() const {
    return m_currency_id;
}
void OAICustomerCreditNoteDto::setCurrencyId(const QString &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAICustomerCreditNoteDto::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAICustomerCreditNoteDto::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

OAICustomerInCustomerCreditNoteDto OAICustomerCreditNoteDto::getCustomer() const {
    return m_customer;
}
void OAICustomerCreditNoteDto::setCustomer(const OAICustomerInCustomerCreditNoteDto &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAICustomerCreditNoteDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAICustomerCreditNoteDto::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAICustomerCreditNoteDto::getCustomerProject() const {
    return m_customer_project;
}
void OAICustomerCreditNoteDto::setCustomerProject(const QString &customer_project) {
    m_customer_project = customer_project;
    m_customer_project_isSet = true;
}

bool OAICustomerCreditNoteDto::is_customer_project_Set() const{
    return m_customer_project_isSet;
}

bool OAICustomerCreditNoteDto::is_customer_project_Valid() const{
    return m_customer_project_isValid;
}

QString OAICustomerCreditNoteDto::getCustomerRefNumber() const {
    return m_customer_ref_number;
}
void OAICustomerCreditNoteDto::setCustomerRefNumber(const QString &customer_ref_number) {
    m_customer_ref_number = customer_ref_number;
    m_customer_ref_number_isSet = true;
}

bool OAICustomerCreditNoteDto::is_customer_ref_number_Set() const{
    return m_customer_ref_number_isSet;
}

bool OAICustomerCreditNoteDto::is_customer_ref_number_Valid() const{
    return m_customer_ref_number_isValid;
}

OAICustomerVatZoneInCustomerCreditNoteDto OAICustomerCreditNoteDto::getCustomerVatZone() const {
    return m_customer_vat_zone;
}
void OAICustomerCreditNoteDto::setCustomerVatZone(const OAICustomerVatZoneInCustomerCreditNoteDto &customer_vat_zone) {
    m_customer_vat_zone = customer_vat_zone;
    m_customer_vat_zone_isSet = true;
}

bool OAICustomerCreditNoteDto::is_customer_vat_zone_Set() const{
    return m_customer_vat_zone_isSet;
}

bool OAICustomerCreditNoteDto::is_customer_vat_zone_Valid() const{
    return m_customer_vat_zone_isValid;
}

double OAICustomerCreditNoteDto::getDetailTotal() const {
    return m_detail_total;
}
void OAICustomerCreditNoteDto::setDetailTotal(const double &detail_total) {
    m_detail_total = detail_total;
    m_detail_total_isSet = true;
}

bool OAICustomerCreditNoteDto::is_detail_total_Set() const{
    return m_detail_total_isSet;
}

bool OAICustomerCreditNoteDto::is_detail_total_Valid() const{
    return m_detail_total_isValid;
}

double OAICustomerCreditNoteDto::getDetailTotalInCurrency() const {
    return m_detail_total_in_currency;
}
void OAICustomerCreditNoteDto::setDetailTotalInCurrency(const double &detail_total_in_currency) {
    m_detail_total_in_currency = detail_total_in_currency;
    m_detail_total_in_currency_isSet = true;
}

bool OAICustomerCreditNoteDto::is_detail_total_in_currency_Set() const{
    return m_detail_total_in_currency_isSet;
}

bool OAICustomerCreditNoteDto::is_detail_total_in_currency_Valid() const{
    return m_detail_total_in_currency_isValid;
}

double OAICustomerCreditNoteDto::getDiscountTotal() const {
    return m_discount_total;
}
void OAICustomerCreditNoteDto::setDiscountTotal(const double &discount_total) {
    m_discount_total = discount_total;
    m_discount_total_isSet = true;
}

bool OAICustomerCreditNoteDto::is_discount_total_Set() const{
    return m_discount_total_isSet;
}

bool OAICustomerCreditNoteDto::is_discount_total_Valid() const{
    return m_discount_total_isValid;
}

double OAICustomerCreditNoteDto::getDiscountTotalInCurrency() const {
    return m_discount_total_in_currency;
}
void OAICustomerCreditNoteDto::setDiscountTotalInCurrency(const double &discount_total_in_currency) {
    m_discount_total_in_currency = discount_total_in_currency;
    m_discount_total_in_currency_isSet = true;
}

bool OAICustomerCreditNoteDto::is_discount_total_in_currency_Set() const{
    return m_discount_total_in_currency_isSet;
}

bool OAICustomerCreditNoteDto::is_discount_total_in_currency_Valid() const{
    return m_discount_total_in_currency_isValid;
}

QDateTime OAICustomerCreditNoteDto::getDocumentDate() const {
    return m_document_date;
}
void OAICustomerCreditNoteDto::setDocumentDate(const QDateTime &document_date) {
    m_document_date = document_date;
    m_document_date_isSet = true;
}

bool OAICustomerCreditNoteDto::is_document_date_Set() const{
    return m_document_date_isSet;
}

bool OAICustomerCreditNoteDto::is_document_date_Valid() const{
    return m_document_date_isValid;
}

QDateTime OAICustomerCreditNoteDto::getDocumentDueDate() const {
    return m_document_due_date;
}
void OAICustomerCreditNoteDto::setDocumentDueDate(const QDateTime &document_due_date) {
    m_document_due_date = document_due_date;
    m_document_due_date_isSet = true;
}

bool OAICustomerCreditNoteDto::is_document_due_date_Set() const{
    return m_document_due_date_isSet;
}

bool OAICustomerCreditNoteDto::is_document_due_date_Valid() const{
    return m_document_due_date_isValid;
}

QString OAICustomerCreditNoteDto::getDocumentType() const {
    return m_document_type;
}
void OAICustomerCreditNoteDto::setDocumentType(const QString &document_type) {
    m_document_type = document_type;
    m_document_type_isSet = true;
}

bool OAICustomerCreditNoteDto::is_document_type_Set() const{
    return m_document_type_isSet;
}

bool OAICustomerCreditNoteDto::is_document_type_Valid() const{
    return m_document_type_isValid;
}

bool OAICustomerCreditNoteDto::isDontEmail() const {
    return m_dont_email;
}
void OAICustomerCreditNoteDto::setDontEmail(const bool &dont_email) {
    m_dont_email = dont_email;
    m_dont_email_isSet = true;
}

bool OAICustomerCreditNoteDto::is_dont_email_Set() const{
    return m_dont_email_isSet;
}

bool OAICustomerCreditNoteDto::is_dont_email_Valid() const{
    return m_dont_email_isValid;
}

bool OAICustomerCreditNoteDto::isDontPrint() const {
    return m_dont_print;
}
void OAICustomerCreditNoteDto::setDontPrint(const bool &dont_print) {
    m_dont_print = dont_print;
    m_dont_print_isSet = true;
}

bool OAICustomerCreditNoteDto::is_dont_print_Set() const{
    return m_dont_print_isSet;
}

bool OAICustomerCreditNoteDto::is_dont_print_Valid() const{
    return m_dont_print_isValid;
}

QDateTime OAICustomerCreditNoteDto::getDunningLetterDate() const {
    return m_dunning_letter_date;
}
void OAICustomerCreditNoteDto::setDunningLetterDate(const QDateTime &dunning_letter_date) {
    m_dunning_letter_date = dunning_letter_date;
    m_dunning_letter_date_isSet = true;
}

bool OAICustomerCreditNoteDto::is_dunning_letter_date_Set() const{
    return m_dunning_letter_date_isSet;
}

bool OAICustomerCreditNoteDto::is_dunning_letter_date_Valid() const{
    return m_dunning_letter_date_isValid;
}

qint32 OAICustomerCreditNoteDto::getDunningLetterLevel() const {
    return m_dunning_letter_level;
}
void OAICustomerCreditNoteDto::setDunningLetterLevel(const qint32 &dunning_letter_level) {
    m_dunning_letter_level = dunning_letter_level;
    m_dunning_letter_level_isSet = true;
}

bool OAICustomerCreditNoteDto::is_dunning_letter_level_Set() const{
    return m_dunning_letter_level_isSet;
}

bool OAICustomerCreditNoteDto::is_dunning_letter_level_Valid() const{
    return m_dunning_letter_level_isValid;
}

QString OAICustomerCreditNoteDto::getErrorInfo() const {
    return m_error_info;
}
void OAICustomerCreditNoteDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAICustomerCreditNoteDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAICustomerCreditNoteDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

double OAICustomerCreditNoteDto::getExchangeRate() const {
    return m_exchange_rate;
}
void OAICustomerCreditNoteDto::setExchangeRate(const double &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAICustomerCreditNoteDto::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAICustomerCreditNoteDto::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

QString OAICustomerCreditNoteDto::getExternalReference() const {
    return m_external_reference;
}
void OAICustomerCreditNoteDto::setExternalReference(const QString &external_reference) {
    m_external_reference = external_reference;
    m_external_reference_isSet = true;
}

bool OAICustomerCreditNoteDto::is_external_reference_Set() const{
    return m_external_reference_isSet;
}

bool OAICustomerCreditNoteDto::is_external_reference_Valid() const{
    return m_external_reference_isValid;
}

QString OAICustomerCreditNoteDto::getFinancialPeriod() const {
    return m_financial_period;
}
void OAICustomerCreditNoteDto::setFinancialPeriod(const QString &financial_period) {
    m_financial_period = financial_period;
    m_financial_period_isSet = true;
}

bool OAICustomerCreditNoteDto::is_financial_period_Set() const{
    return m_financial_period_isSet;
}

bool OAICustomerCreditNoteDto::is_financial_period_Valid() const{
    return m_financial_period_isValid;
}

bool OAICustomerCreditNoteDto::isHold() const {
    return m_hold;
}
void OAICustomerCreditNoteDto::setHold(const bool &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAICustomerCreditNoteDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAICustomerCreditNoteDto::is_hold_Valid() const{
    return m_hold_isValid;
}

OAIInvoiceAddressInCustomerCreditNoteDto OAICustomerCreditNoteDto::getInvoiceAddress() const {
    return m_invoice_address;
}
void OAICustomerCreditNoteDto::setInvoiceAddress(const OAIInvoiceAddressInCustomerCreditNoteDto &invoice_address) {
    m_invoice_address = invoice_address;
    m_invoice_address_isSet = true;
}

bool OAICustomerCreditNoteDto::is_invoice_address_Set() const{
    return m_invoice_address_isSet;
}

bool OAICustomerCreditNoteDto::is_invoice_address_Valid() const{
    return m_invoice_address_isValid;
}

OAIInvoiceContactInCustomerCreditNoteDto OAICustomerCreditNoteDto::getInvoiceContact() const {
    return m_invoice_contact;
}
void OAICustomerCreditNoteDto::setInvoiceContact(const OAIInvoiceContactInCustomerCreditNoteDto &invoice_contact) {
    m_invoice_contact = invoice_contact;
    m_invoice_contact_isSet = true;
}

bool OAICustomerCreditNoteDto::is_invoice_contact_Set() const{
    return m_invoice_contact_isSet;
}

bool OAICustomerCreditNoteDto::is_invoice_contact_Valid() const{
    return m_invoice_contact_isValid;
}

QString OAICustomerCreditNoteDto::getInvoiceText() const {
    return m_invoice_text;
}
void OAICustomerCreditNoteDto::setInvoiceText(const QString &invoice_text) {
    m_invoice_text = invoice_text;
    m_invoice_text_isSet = true;
}

bool OAICustomerCreditNoteDto::is_invoice_text_Set() const{
    return m_invoice_text_isSet;
}

bool OAICustomerCreditNoteDto::is_invoice_text_Valid() const{
    return m_invoice_text_isValid;
}

bool OAICustomerCreditNoteDto::isIsRotRutDeductible() const {
    return m_is_rot_rut_deductible;
}
void OAICustomerCreditNoteDto::setIsRotRutDeductible(const bool &is_rot_rut_deductible) {
    m_is_rot_rut_deductible = is_rot_rut_deductible;
    m_is_rot_rut_deductible_isSet = true;
}

bool OAICustomerCreditNoteDto::is_is_rot_rut_deductible_Set() const{
    return m_is_rot_rut_deductible_isSet;
}

bool OAICustomerCreditNoteDto::is_is_rot_rut_deductible_Valid() const{
    return m_is_rot_rut_deductible_isValid;
}

QDateTime OAICustomerCreditNoteDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAICustomerCreditNoteDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAICustomerCreditNoteDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAICustomerCreditNoteDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QList<OAICustomerCreditNoteLineDto> OAICustomerCreditNoteDto::getLines() const {
    return m_lines;
}
void OAICustomerCreditNoteDto::setLines(const QList<OAICustomerCreditNoteLineDto> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAICustomerCreditNoteDto::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAICustomerCreditNoteDto::is_lines_Valid() const{
    return m_lines_isValid;
}

OAILocationInCustomerCreditNoteDto OAICustomerCreditNoteDto::getLocation() const {
    return m_location;
}
void OAICustomerCreditNoteDto::setLocation(const OAILocationInCustomerCreditNoteDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAICustomerCreditNoteDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAICustomerCreditNoteDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIMetadataDto OAICustomerCreditNoteDto::getMetadata() const {
    return m_metadata;
}
void OAICustomerCreditNoteDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICustomerCreditNoteDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICustomerCreditNoteDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAICustomerCreditNoteDto::getNote() const {
    return m_note;
}
void OAICustomerCreditNoteDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAICustomerCreditNoteDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAICustomerCreditNoteDto::is_note_Valid() const{
    return m_note_isValid;
}

QDateTime OAICustomerCreditNoteDto::getOrigInvoiceDate() const {
    return m_orig_invoice_date;
}
void OAICustomerCreditNoteDto::setOrigInvoiceDate(const QDateTime &orig_invoice_date) {
    m_orig_invoice_date = orig_invoice_date;
    m_orig_invoice_date_isSet = true;
}

bool OAICustomerCreditNoteDto::is_orig_invoice_date_Set() const{
    return m_orig_invoice_date_isSet;
}

bool OAICustomerCreditNoteDto::is_orig_invoice_date_Valid() const{
    return m_orig_invoice_date_isValid;
}

OAIPaymentMethodInCustomerCreditNoteDto OAICustomerCreditNoteDto::getPaymentMethod() const {
    return m_payment_method;
}
void OAICustomerCreditNoteDto::setPaymentMethod(const OAIPaymentMethodInCustomerCreditNoteDto &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAICustomerCreditNoteDto::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAICustomerCreditNoteDto::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAICustomerCreditNoteDto::getPaymentReference() const {
    return m_payment_reference;
}
void OAICustomerCreditNoteDto::setPaymentReference(const QString &payment_reference) {
    m_payment_reference = payment_reference;
    m_payment_reference_isSet = true;
}

bool OAICustomerCreditNoteDto::is_payment_reference_Set() const{
    return m_payment_reference_isSet;
}

bool OAICustomerCreditNoteDto::is_payment_reference_Valid() const{
    return m_payment_reference_isValid;
}

QString OAICustomerCreditNoteDto::getPostPeriod() const {
    return m_post_period;
}
void OAICustomerCreditNoteDto::setPostPeriod(const QString &post_period) {
    m_post_period = post_period;
    m_post_period_isSet = true;
}

bool OAICustomerCreditNoteDto::is_post_period_Set() const{
    return m_post_period_isSet;
}

bool OAICustomerCreditNoteDto::is_post_period_Valid() const{
    return m_post_period_isValid;
}

OAIProjectInCustomerCreditNoteDto OAICustomerCreditNoteDto::getProject() const {
    return m_project;
}
void OAICustomerCreditNoteDto::setProject(const OAIProjectInCustomerCreditNoteDto &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAICustomerCreditNoteDto::is_project_Set() const{
    return m_project_isSet;
}

bool OAICustomerCreditNoteDto::is_project_Valid() const{
    return m_project_isValid;
}

QString OAICustomerCreditNoteDto::getReferenceNumber() const {
    return m_reference_number;
}
void OAICustomerCreditNoteDto::setReferenceNumber(const QString &reference_number) {
    m_reference_number = reference_number;
    m_reference_number_isSet = true;
}

bool OAICustomerCreditNoteDto::is_reference_number_Set() const{
    return m_reference_number_isSet;
}

bool OAICustomerCreditNoteDto::is_reference_number_Valid() const{
    return m_reference_number_isValid;
}

double OAICustomerCreditNoteDto::getRoundingDiff() const {
    return m_rounding_diff;
}
void OAICustomerCreditNoteDto::setRoundingDiff(const double &rounding_diff) {
    m_rounding_diff = rounding_diff;
    m_rounding_diff_isSet = true;
}

bool OAICustomerCreditNoteDto::is_rounding_diff_Set() const{
    return m_rounding_diff_isSet;
}

bool OAICustomerCreditNoteDto::is_rounding_diff_Valid() const{
    return m_rounding_diff_isValid;
}

OAISalesPersonInCustomerCreditNoteDto OAICustomerCreditNoteDto::getSalesPerson() const {
    return m_sales_person;
}
void OAICustomerCreditNoteDto::setSalesPerson(const OAISalesPersonInCustomerCreditNoteDto &sales_person) {
    m_sales_person = sales_person;
    m_sales_person_isSet = true;
}

bool OAICustomerCreditNoteDto::is_sales_person_Set() const{
    return m_sales_person_isSet;
}

bool OAICustomerCreditNoteDto::is_sales_person_Valid() const{
    return m_sales_person_isValid;
}

QString OAICustomerCreditNoteDto::getSalesPersonDescr() const {
    return m_sales_person_descr;
}
void OAICustomerCreditNoteDto::setSalesPersonDescr(const QString &sales_person_descr) {
    m_sales_person_descr = sales_person_descr;
    m_sales_person_descr_isSet = true;
}

bool OAICustomerCreditNoteDto::is_sales_person_descr_Set() const{
    return m_sales_person_descr_isSet;
}

bool OAICustomerCreditNoteDto::is_sales_person_descr_Valid() const{
    return m_sales_person_descr_isValid;
}

qint32 OAICustomerCreditNoteDto::getSalesPersonId() const {
    return m_sales_person_id;
}
void OAICustomerCreditNoteDto::setSalesPersonId(const qint32 &sales_person_id) {
    m_sales_person_id = sales_person_id;
    m_sales_person_id_isSet = true;
}

bool OAICustomerCreditNoteDto::is_sales_person_id_Set() const{
    return m_sales_person_id_isSet;
}

bool OAICustomerCreditNoteDto::is_sales_person_id_Valid() const{
    return m_sales_person_id_isValid;
}

bool OAICustomerCreditNoteDto::isSendToAutoInvoice() const {
    return m_send_to_auto_invoice;
}
void OAICustomerCreditNoteDto::setSendToAutoInvoice(const bool &send_to_auto_invoice) {
    m_send_to_auto_invoice = send_to_auto_invoice;
    m_send_to_auto_invoice_isSet = true;
}

bool OAICustomerCreditNoteDto::is_send_to_auto_invoice_Set() const{
    return m_send_to_auto_invoice_isSet;
}

bool OAICustomerCreditNoteDto::is_send_to_auto_invoice_Valid() const{
    return m_send_to_auto_invoice_isValid;
}

QString OAICustomerCreditNoteDto::getStatus() const {
    return m_status;
}
void OAICustomerCreditNoteDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICustomerCreditNoteDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAICustomerCreditNoteDto::is_status_Valid() const{
    return m_status_isValid;
}

OAISubaccountInCustomerCreditNoteDto OAICustomerCreditNoteDto::getSubaccount() const {
    return m_subaccount;
}
void OAICustomerCreditNoteDto::setSubaccount(const OAISubaccountInCustomerCreditNoteDto &subaccount) {
    m_subaccount = subaccount;
    m_subaccount_isSet = true;
}

bool OAICustomerCreditNoteDto::is_subaccount_Set() const{
    return m_subaccount_isSet;
}

bool OAICustomerCreditNoteDto::is_subaccount_Valid() const{
    return m_subaccount_isValid;
}

QList<OAITaxDetailDto> OAICustomerCreditNoteDto::getTaxDetails() const {
    return m_tax_details;
}
void OAICustomerCreditNoteDto::setTaxDetails(const QList<OAITaxDetailDto> &tax_details) {
    m_tax_details = tax_details;
    m_tax_details_isSet = true;
}

bool OAICustomerCreditNoteDto::is_tax_details_Set() const{
    return m_tax_details_isSet;
}

bool OAICustomerCreditNoteDto::is_tax_details_Valid() const{
    return m_tax_details_isValid;
}

double OAICustomerCreditNoteDto::getVatExemptTotal() const {
    return m_vat_exempt_total;
}
void OAICustomerCreditNoteDto::setVatExemptTotal(const double &vat_exempt_total) {
    m_vat_exempt_total = vat_exempt_total;
    m_vat_exempt_total_isSet = true;
}

bool OAICustomerCreditNoteDto::is_vat_exempt_total_Set() const{
    return m_vat_exempt_total_isSet;
}

bool OAICustomerCreditNoteDto::is_vat_exempt_total_Valid() const{
    return m_vat_exempt_total_isValid;
}

double OAICustomerCreditNoteDto::getVatExemptTotalInCurrency() const {
    return m_vat_exempt_total_in_currency;
}
void OAICustomerCreditNoteDto::setVatExemptTotalInCurrency(const double &vat_exempt_total_in_currency) {
    m_vat_exempt_total_in_currency = vat_exempt_total_in_currency;
    m_vat_exempt_total_in_currency_isSet = true;
}

bool OAICustomerCreditNoteDto::is_vat_exempt_total_in_currency_Set() const{
    return m_vat_exempt_total_in_currency_isSet;
}

bool OAICustomerCreditNoteDto::is_vat_exempt_total_in_currency_Valid() const{
    return m_vat_exempt_total_in_currency_isValid;
}

double OAICustomerCreditNoteDto::getVatTaxableTotal() const {
    return m_vat_taxable_total;
}
void OAICustomerCreditNoteDto::setVatTaxableTotal(const double &vat_taxable_total) {
    m_vat_taxable_total = vat_taxable_total;
    m_vat_taxable_total_isSet = true;
}

bool OAICustomerCreditNoteDto::is_vat_taxable_total_Set() const{
    return m_vat_taxable_total_isSet;
}

bool OAICustomerCreditNoteDto::is_vat_taxable_total_Valid() const{
    return m_vat_taxable_total_isValid;
}

double OAICustomerCreditNoteDto::getVatTaxableTotalInCurrency() const {
    return m_vat_taxable_total_in_currency;
}
void OAICustomerCreditNoteDto::setVatTaxableTotalInCurrency(const double &vat_taxable_total_in_currency) {
    m_vat_taxable_total_in_currency = vat_taxable_total_in_currency;
    m_vat_taxable_total_in_currency_isSet = true;
}

bool OAICustomerCreditNoteDto::is_vat_taxable_total_in_currency_Set() const{
    return m_vat_taxable_total_in_currency_isSet;
}

bool OAICustomerCreditNoteDto::is_vat_taxable_total_in_currency_Valid() const{
    return m_vat_taxable_total_in_currency_isValid;
}

double OAICustomerCreditNoteDto::getVatTotal() const {
    return m_vat_total;
}
void OAICustomerCreditNoteDto::setVatTotal(const double &vat_total) {
    m_vat_total = vat_total;
    m_vat_total_isSet = true;
}

bool OAICustomerCreditNoteDto::is_vat_total_Set() const{
    return m_vat_total_isSet;
}

bool OAICustomerCreditNoteDto::is_vat_total_Valid() const{
    return m_vat_total_isValid;
}

double OAICustomerCreditNoteDto::getVatTotalInCurrency() const {
    return m_vat_total_in_currency;
}
void OAICustomerCreditNoteDto::setVatTotalInCurrency(const double &vat_total_in_currency) {
    m_vat_total_in_currency = vat_total_in_currency;
    m_vat_total_in_currency_isSet = true;
}

bool OAICustomerCreditNoteDto::is_vat_total_in_currency_Set() const{
    return m_vat_total_in_currency_isSet;
}

bool OAICustomerCreditNoteDto::is_vat_total_in_currency_Valid() const{
    return m_vat_total_in_currency_isValid;
}

bool OAICustomerCreditNoteDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_applications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_discount_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_discount_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_financial_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_ref_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_vat_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_total_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_total_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dont_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dont_print_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dunning_letter_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dunning_letter_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_financial_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_rot_rut_deductible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orig_invoice_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rounding_diff_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_person_descr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_person_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_to_auto_invoice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_exempt_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_exempt_total_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_taxable_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_taxable_total_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_total_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerCreditNoteDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
