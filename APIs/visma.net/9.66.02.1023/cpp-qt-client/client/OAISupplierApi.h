/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISupplierApi_H
#define OAI_OAISupplierApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAIContactDto.h"
#include "OAIObject.h"
#include "OAISupplierBalanceDto.h"
#include "OAISupplierClassDto.h"
#include "OAISupplierDocumentDto.h"
#include "OAISupplierDto.h"
#include "OAISupplierInvoiceDto.h"
#include "OAISupplierPOBalanceDto.h"
#include "OAISupplierUpdateDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISupplierApi : public QObject {
    Q_OBJECT

public:
    OAISupplierApi(const int timeOut = 0);
    ~OAISupplierApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  vat_registration_id QString [optional]
    * @param[in]  corporate_id QString [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  expand_account_information bool [optional]
    * @param[in]  expand_note bool [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void supplierGetAll(const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vat_registration_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &corporate_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &expand_account_information = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_note = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  supplier_cd QString [required]
    * @param[in]  display_name QString [optional]
    * @param[in]  active QString [optional]
    * @param[in]  first_name QString [optional]
    * @param[in]  last_name QString [optional]
    * @param[in]  business_account QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void supplierGetAllContactForSupplierBysupplierCd(const QString &supplier_cd, const ::OpenAPI::OptionalParam<QString> &display_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &active = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  supplier_number QString [required]
    * @param[in]  document_type QString [optional]
    * @param[in]  released qint32 [optional]
    * @param[in]  project QString [optional]
    * @param[in]  expand_approval bool [optional]
    * @param[in]  expand_note bool [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  status QString [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  created_date_time QString [optional]
    * @param[in]  created_date_time_condition QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void supplierGetAllDocumentsForSupplierBysupplierNumber(const QString &supplier_number, const ::OpenAPI::OptionalParam<QString> &document_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &released = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &project = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &expand_approval = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_note = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  supplier_number QString [required]
    * @param[in]  expand_attachment bool [optional]
    * @param[in]  document_type QString [optional]
    * @param[in]  released qint32 [optional]
    * @param[in]  project QString [optional]
    * @param[in]  expand_approval bool [optional]
    * @param[in]  expand_note bool [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  status QString [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  created_date_time QString [optional]
    * @param[in]  created_date_time_condition QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void supplierGetAllInvoicesForSupplierBysupplierNumber(const QString &supplier_number, const ::OpenAPI::OptionalParam<bool> &expand_attachment = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &document_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &released = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &project = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &expand_approval = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_note = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void supplierGetAllSupplierBalance(const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void supplierGetAllSupplierClasses(const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void supplierGetAllSupplierPOBalance(const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  supplier_cd QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void supplierGetBysupplierCd(const QString &supplier_cd, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  supplier_class_id QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void supplierGetSpecificSupplierClassBysupplierClassId(const QString &supplier_class_id, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  supplier_cd QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void supplierGetSupplierBalanceBysupplierCd(const QString &supplier_cd, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  supplier_cd QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void supplierGetSupplierPOBalanceBysupplierCd(const QString &supplier_cd, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_supplier_update_dto OAISupplierUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void supplierPost(const OAISupplierUpdateDto &oai_supplier_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  supplier_cd QString [required]
    * @param[in]  oai_supplier_update_dto OAISupplierUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void supplierPutBysupplierCd(const QString &supplier_cd, const OAISupplierUpdateDto &oai_supplier_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void supplierGetAllCallback(OAIHttpRequestWorker *worker);
    void supplierGetAllContactForSupplierBysupplierCdCallback(OAIHttpRequestWorker *worker);
    void supplierGetAllDocumentsForSupplierBysupplierNumberCallback(OAIHttpRequestWorker *worker);
    void supplierGetAllInvoicesForSupplierBysupplierNumberCallback(OAIHttpRequestWorker *worker);
    void supplierGetAllSupplierBalanceCallback(OAIHttpRequestWorker *worker);
    void supplierGetAllSupplierClassesCallback(OAIHttpRequestWorker *worker);
    void supplierGetAllSupplierPOBalanceCallback(OAIHttpRequestWorker *worker);
    void supplierGetBysupplierCdCallback(OAIHttpRequestWorker *worker);
    void supplierGetSpecificSupplierClassBysupplierClassIdCallback(OAIHttpRequestWorker *worker);
    void supplierGetSupplierBalanceBysupplierCdCallback(OAIHttpRequestWorker *worker);
    void supplierGetSupplierPOBalanceBysupplierCdCallback(OAIHttpRequestWorker *worker);
    void supplierPostCallback(OAIHttpRequestWorker *worker);
    void supplierPutBysupplierCdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void supplierGetAllSignal(QList<OAISupplierDto> summary);
    void supplierGetAllContactForSupplierBysupplierCdSignal(QList<OAIContactDto> summary);
    void supplierGetAllDocumentsForSupplierBysupplierNumberSignal(QList<OAISupplierDocumentDto> summary);
    void supplierGetAllInvoicesForSupplierBysupplierNumberSignal(QList<OAISupplierInvoiceDto> summary);
    void supplierGetAllSupplierBalanceSignal(QList<OAISupplierBalanceDto> summary);
    void supplierGetAllSupplierClassesSignal(QList<OAISupplierClassDto> summary);
    void supplierGetAllSupplierPOBalanceSignal(QList<OAISupplierPOBalanceDto> summary);
    void supplierGetBysupplierCdSignal(OAISupplierDto summary);
    void supplierGetSpecificSupplierClassBysupplierClassIdSignal(OAISupplierClassDto summary);
    void supplierGetSupplierBalanceBysupplierCdSignal(OAISupplierBalanceDto summary);
    void supplierGetSupplierPOBalanceBysupplierCdSignal(OAISupplierPOBalanceDto summary);
    void supplierPostSignal(OAIObject summary);
    void supplierPutBysupplierCdSignal(OAIBackgroundApiAcceptedDto summary);


    void supplierGetAllSignalFull(OAIHttpRequestWorker *worker, QList<OAISupplierDto> summary);
    void supplierGetAllContactForSupplierBysupplierCdSignalFull(OAIHttpRequestWorker *worker, QList<OAIContactDto> summary);
    void supplierGetAllDocumentsForSupplierBysupplierNumberSignalFull(OAIHttpRequestWorker *worker, QList<OAISupplierDocumentDto> summary);
    void supplierGetAllInvoicesForSupplierBysupplierNumberSignalFull(OAIHttpRequestWorker *worker, QList<OAISupplierInvoiceDto> summary);
    void supplierGetAllSupplierBalanceSignalFull(OAIHttpRequestWorker *worker, QList<OAISupplierBalanceDto> summary);
    void supplierGetAllSupplierClassesSignalFull(OAIHttpRequestWorker *worker, QList<OAISupplierClassDto> summary);
    void supplierGetAllSupplierPOBalanceSignalFull(OAIHttpRequestWorker *worker, QList<OAISupplierPOBalanceDto> summary);
    void supplierGetBysupplierCdSignalFull(OAIHttpRequestWorker *worker, OAISupplierDto summary);
    void supplierGetSpecificSupplierClassBysupplierClassIdSignalFull(OAIHttpRequestWorker *worker, OAISupplierClassDto summary);
    void supplierGetSupplierBalanceBysupplierCdSignalFull(OAIHttpRequestWorker *worker, OAISupplierBalanceDto summary);
    void supplierGetSupplierPOBalanceBysupplierCdSignalFull(OAIHttpRequestWorker *worker, OAISupplierPOBalanceDto summary);
    void supplierPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void supplierPutBysupplierCdSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);

    Q_DECL_DEPRECATED_X("Use supplierGetAllSignalError() instead")
    void supplierGetAllSignalE(QList<OAISupplierDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierGetAllSignalError(QList<OAISupplierDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierGetAllContactForSupplierBysupplierCdSignalError() instead")
    void supplierGetAllContactForSupplierBysupplierCdSignalE(QList<OAIContactDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierGetAllContactForSupplierBysupplierCdSignalError(QList<OAIContactDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierGetAllDocumentsForSupplierBysupplierNumberSignalError() instead")
    void supplierGetAllDocumentsForSupplierBysupplierNumberSignalE(QList<OAISupplierDocumentDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierGetAllDocumentsForSupplierBysupplierNumberSignalError(QList<OAISupplierDocumentDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierGetAllInvoicesForSupplierBysupplierNumberSignalError() instead")
    void supplierGetAllInvoicesForSupplierBysupplierNumberSignalE(QList<OAISupplierInvoiceDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierGetAllInvoicesForSupplierBysupplierNumberSignalError(QList<OAISupplierInvoiceDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierGetAllSupplierBalanceSignalError() instead")
    void supplierGetAllSupplierBalanceSignalE(QList<OAISupplierBalanceDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierGetAllSupplierBalanceSignalError(QList<OAISupplierBalanceDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierGetAllSupplierClassesSignalError() instead")
    void supplierGetAllSupplierClassesSignalE(QList<OAISupplierClassDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierGetAllSupplierClassesSignalError(QList<OAISupplierClassDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierGetAllSupplierPOBalanceSignalError() instead")
    void supplierGetAllSupplierPOBalanceSignalE(QList<OAISupplierPOBalanceDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierGetAllSupplierPOBalanceSignalError(QList<OAISupplierPOBalanceDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierGetBysupplierCdSignalError() instead")
    void supplierGetBysupplierCdSignalE(OAISupplierDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierGetBysupplierCdSignalError(OAISupplierDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierGetSpecificSupplierClassBysupplierClassIdSignalError() instead")
    void supplierGetSpecificSupplierClassBysupplierClassIdSignalE(OAISupplierClassDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierGetSpecificSupplierClassBysupplierClassIdSignalError(OAISupplierClassDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierGetSupplierBalanceBysupplierCdSignalError() instead")
    void supplierGetSupplierBalanceBysupplierCdSignalE(OAISupplierBalanceDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierGetSupplierBalanceBysupplierCdSignalError(OAISupplierBalanceDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierGetSupplierPOBalanceBysupplierCdSignalError() instead")
    void supplierGetSupplierPOBalanceBysupplierCdSignalE(OAISupplierPOBalanceDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierGetSupplierPOBalanceBysupplierCdSignalError(OAISupplierPOBalanceDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierPostSignalError() instead")
    void supplierPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierPutBysupplierCdSignalError() instead")
    void supplierPutBysupplierCdSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierPutBysupplierCdSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use supplierGetAllSignalErrorFull() instead")
    void supplierGetAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierGetAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierGetAllContactForSupplierBysupplierCdSignalErrorFull() instead")
    void supplierGetAllContactForSupplierBysupplierCdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierGetAllContactForSupplierBysupplierCdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierGetAllDocumentsForSupplierBysupplierNumberSignalErrorFull() instead")
    void supplierGetAllDocumentsForSupplierBysupplierNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierGetAllDocumentsForSupplierBysupplierNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierGetAllInvoicesForSupplierBysupplierNumberSignalErrorFull() instead")
    void supplierGetAllInvoicesForSupplierBysupplierNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierGetAllInvoicesForSupplierBysupplierNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierGetAllSupplierBalanceSignalErrorFull() instead")
    void supplierGetAllSupplierBalanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierGetAllSupplierBalanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierGetAllSupplierClassesSignalErrorFull() instead")
    void supplierGetAllSupplierClassesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierGetAllSupplierClassesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierGetAllSupplierPOBalanceSignalErrorFull() instead")
    void supplierGetAllSupplierPOBalanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierGetAllSupplierPOBalanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierGetBysupplierCdSignalErrorFull() instead")
    void supplierGetBysupplierCdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierGetBysupplierCdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierGetSpecificSupplierClassBysupplierClassIdSignalErrorFull() instead")
    void supplierGetSpecificSupplierClassBysupplierClassIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierGetSpecificSupplierClassBysupplierClassIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierGetSupplierBalanceBysupplierCdSignalErrorFull() instead")
    void supplierGetSupplierBalanceBysupplierCdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierGetSupplierBalanceBysupplierCdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierGetSupplierPOBalanceBysupplierCdSignalErrorFull() instead")
    void supplierGetSupplierPOBalanceBysupplierCdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierGetSupplierPOBalanceBysupplierCdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierPostSignalErrorFull() instead")
    void supplierPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use supplierPutBysupplierCdSignalErrorFull() instead")
    void supplierPutBysupplierCdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void supplierPutBysupplierCdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
