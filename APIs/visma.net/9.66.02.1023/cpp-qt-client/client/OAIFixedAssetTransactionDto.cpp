/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFixedAssetTransactionDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFixedAssetTransactionDto::OAIFixedAssetTransactionDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFixedAssetTransactionDto::OAIFixedAssetTransactionDto() {
    this->initializeModel();
}

OAIFixedAssetTransactionDto::~OAIFixedAssetTransactionDto() {}

void OAIFixedAssetTransactionDto::initializeModel() {

    m_accounts_isSet = false;
    m_accounts_isValid = false;

    m_asset_id_isSet = false;
    m_asset_id_isValid = false;

    m_batch_no_isSet = false;
    m_batch_no_isValid = false;

    m_book_id_isSet = false;
    m_book_id_isValid = false;

    m_branch_id_isSet = false;
    m_branch_id_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_line_no_isSet = false;
    m_line_no_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_ref_no_isSet = false;
    m_ref_no_isValid = false;

    m_r_register_isSet = false;
    m_r_register_isValid = false;

    m_transaction_amount_isSet = false;
    m_transaction_amount_isValid = false;

    m_transaction_date_isSet = false;
    m_transaction_date_isValid = false;

    m_transaction_description_isSet = false;
    m_transaction_description_isValid = false;

    m_transaction_period_id_isSet = false;
    m_transaction_period_id_isValid = false;

    m_transaction_type_isSet = false;
    m_transaction_type_isValid = false;
}

void OAIFixedAssetTransactionDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFixedAssetTransactionDto::fromJsonObject(QJsonObject json) {

    m_accounts_isValid = ::OpenAPI::fromJsonValue(m_accounts, json[QString("accounts")]);
    m_accounts_isSet = !json[QString("accounts")].isNull() && m_accounts_isValid;

    m_asset_id_isValid = ::OpenAPI::fromJsonValue(m_asset_id, json[QString("assetID")]);
    m_asset_id_isSet = !json[QString("assetID")].isNull() && m_asset_id_isValid;

    m_batch_no_isValid = ::OpenAPI::fromJsonValue(m_batch_no, json[QString("batchNo")]);
    m_batch_no_isSet = !json[QString("batchNo")].isNull() && m_batch_no_isValid;

    m_book_id_isValid = ::OpenAPI::fromJsonValue(m_book_id, json[QString("bookID")]);
    m_book_id_isSet = !json[QString("bookID")].isNull() && m_book_id_isValid;

    m_branch_id_isValid = ::OpenAPI::fromJsonValue(m_branch_id, json[QString("branchID")]);
    m_branch_id_isSet = !json[QString("branchID")].isNull() && m_branch_id_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_line_no_isValid = ::OpenAPI::fromJsonValue(m_line_no, json[QString("lineNo")]);
    m_line_no_isSet = !json[QString("lineNo")].isNull() && m_line_no_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_ref_no_isValid = ::OpenAPI::fromJsonValue(m_ref_no, json[QString("refNo")]);
    m_ref_no_isSet = !json[QString("refNo")].isNull() && m_ref_no_isValid;

    m_r_register_isValid = ::OpenAPI::fromJsonValue(m_r_register, json[QString("register")]);
    m_r_register_isSet = !json[QString("register")].isNull() && m_r_register_isValid;

    m_transaction_amount_isValid = ::OpenAPI::fromJsonValue(m_transaction_amount, json[QString("transactionAmount")]);
    m_transaction_amount_isSet = !json[QString("transactionAmount")].isNull() && m_transaction_amount_isValid;

    m_transaction_date_isValid = ::OpenAPI::fromJsonValue(m_transaction_date, json[QString("transactionDate")]);
    m_transaction_date_isSet = !json[QString("transactionDate")].isNull() && m_transaction_date_isValid;

    m_transaction_description_isValid = ::OpenAPI::fromJsonValue(m_transaction_description, json[QString("transactionDescription")]);
    m_transaction_description_isSet = !json[QString("transactionDescription")].isNull() && m_transaction_description_isValid;

    m_transaction_period_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_period_id, json[QString("transactionPeriodID")]);
    m_transaction_period_id_isSet = !json[QString("transactionPeriodID")].isNull() && m_transaction_period_id_isValid;

    m_transaction_type_isValid = ::OpenAPI::fromJsonValue(m_transaction_type, json[QString("transactionType")]);
    m_transaction_type_isSet = !json[QString("transactionType")].isNull() && m_transaction_type_isValid;
}

QString OAIFixedAssetTransactionDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFixedAssetTransactionDto::asJsonObject() const {
    QJsonObject obj;
    if (m_accounts.isSet()) {
        obj.insert(QString("accounts"), ::OpenAPI::toJsonValue(m_accounts));
    }
    if (m_asset_id_isSet) {
        obj.insert(QString("assetID"), ::OpenAPI::toJsonValue(m_asset_id));
    }
    if (m_batch_no_isSet) {
        obj.insert(QString("batchNo"), ::OpenAPI::toJsonValue(m_batch_no));
    }
    if (m_book_id_isSet) {
        obj.insert(QString("bookID"), ::OpenAPI::toJsonValue(m_book_id));
    }
    if (m_branch_id_isSet) {
        obj.insert(QString("branchID"), ::OpenAPI::toJsonValue(m_branch_id));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_line_no_isSet) {
        obj.insert(QString("lineNo"), ::OpenAPI::toJsonValue(m_line_no));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_ref_no_isSet) {
        obj.insert(QString("refNo"), ::OpenAPI::toJsonValue(m_ref_no));
    }
    if (m_r_register.isSet()) {
        obj.insert(QString("register"), ::OpenAPI::toJsonValue(m_r_register));
    }
    if (m_transaction_amount_isSet) {
        obj.insert(QString("transactionAmount"), ::OpenAPI::toJsonValue(m_transaction_amount));
    }
    if (m_transaction_date_isSet) {
        obj.insert(QString("transactionDate"), ::OpenAPI::toJsonValue(m_transaction_date));
    }
    if (m_transaction_description_isSet) {
        obj.insert(QString("transactionDescription"), ::OpenAPI::toJsonValue(m_transaction_description));
    }
    if (m_transaction_period_id_isSet) {
        obj.insert(QString("transactionPeriodID"), ::OpenAPI::toJsonValue(m_transaction_period_id));
    }
    if (m_transaction_type_isSet) {
        obj.insert(QString("transactionType"), ::OpenAPI::toJsonValue(m_transaction_type));
    }
    return obj;
}

OAIAccountsInFixedAssetTransactionDto OAIFixedAssetTransactionDto::getAccounts() const {
    return m_accounts;
}
void OAIFixedAssetTransactionDto::setAccounts(const OAIAccountsInFixedAssetTransactionDto &accounts) {
    m_accounts = accounts;
    m_accounts_isSet = true;
}

bool OAIFixedAssetTransactionDto::is_accounts_Set() const{
    return m_accounts_isSet;
}

bool OAIFixedAssetTransactionDto::is_accounts_Valid() const{
    return m_accounts_isValid;
}

QString OAIFixedAssetTransactionDto::getAssetId() const {
    return m_asset_id;
}
void OAIFixedAssetTransactionDto::setAssetId(const QString &asset_id) {
    m_asset_id = asset_id;
    m_asset_id_isSet = true;
}

bool OAIFixedAssetTransactionDto::is_asset_id_Set() const{
    return m_asset_id_isSet;
}

bool OAIFixedAssetTransactionDto::is_asset_id_Valid() const{
    return m_asset_id_isValid;
}

QString OAIFixedAssetTransactionDto::getBatchNo() const {
    return m_batch_no;
}
void OAIFixedAssetTransactionDto::setBatchNo(const QString &batch_no) {
    m_batch_no = batch_no;
    m_batch_no_isSet = true;
}

bool OAIFixedAssetTransactionDto::is_batch_no_Set() const{
    return m_batch_no_isSet;
}

bool OAIFixedAssetTransactionDto::is_batch_no_Valid() const{
    return m_batch_no_isValid;
}

QString OAIFixedAssetTransactionDto::getBookId() const {
    return m_book_id;
}
void OAIFixedAssetTransactionDto::setBookId(const QString &book_id) {
    m_book_id = book_id;
    m_book_id_isSet = true;
}

bool OAIFixedAssetTransactionDto::is_book_id_Set() const{
    return m_book_id_isSet;
}

bool OAIFixedAssetTransactionDto::is_book_id_Valid() const{
    return m_book_id_isValid;
}

QString OAIFixedAssetTransactionDto::getBranchId() const {
    return m_branch_id;
}
void OAIFixedAssetTransactionDto::setBranchId(const QString &branch_id) {
    m_branch_id = branch_id;
    m_branch_id_isSet = true;
}

bool OAIFixedAssetTransactionDto::is_branch_id_Set() const{
    return m_branch_id_isSet;
}

bool OAIFixedAssetTransactionDto::is_branch_id_Valid() const{
    return m_branch_id_isValid;
}

QString OAIFixedAssetTransactionDto::getErrorInfo() const {
    return m_error_info;
}
void OAIFixedAssetTransactionDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIFixedAssetTransactionDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIFixedAssetTransactionDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

QDateTime OAIFixedAssetTransactionDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIFixedAssetTransactionDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIFixedAssetTransactionDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIFixedAssetTransactionDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

qint32 OAIFixedAssetTransactionDto::getLineNo() const {
    return m_line_no;
}
void OAIFixedAssetTransactionDto::setLineNo(const qint32 &line_no) {
    m_line_no = line_no;
    m_line_no_isSet = true;
}

bool OAIFixedAssetTransactionDto::is_line_no_Set() const{
    return m_line_no_isSet;
}

bool OAIFixedAssetTransactionDto::is_line_no_Valid() const{
    return m_line_no_isValid;
}

OAIMetadataDto OAIFixedAssetTransactionDto::getMetadata() const {
    return m_metadata;
}
void OAIFixedAssetTransactionDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIFixedAssetTransactionDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIFixedAssetTransactionDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIFixedAssetTransactionDto::getOrigin() const {
    return m_origin;
}
void OAIFixedAssetTransactionDto::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIFixedAssetTransactionDto::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIFixedAssetTransactionDto::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIFixedAssetTransactionDto::getRefNo() const {
    return m_ref_no;
}
void OAIFixedAssetTransactionDto::setRefNo(const QString &ref_no) {
    m_ref_no = ref_no;
    m_ref_no_isSet = true;
}

bool OAIFixedAssetTransactionDto::is_ref_no_Set() const{
    return m_ref_no_isSet;
}

bool OAIFixedAssetTransactionDto::is_ref_no_Valid() const{
    return m_ref_no_isValid;
}

OAIRegisterInFixedAssetTransactionDto OAIFixedAssetTransactionDto::getRRegister() const {
    return m_r_register;
}
void OAIFixedAssetTransactionDto::setRRegister(const OAIRegisterInFixedAssetTransactionDto &r_register) {
    m_r_register = r_register;
    m_r_register_isSet = true;
}

bool OAIFixedAssetTransactionDto::is_r_register_Set() const{
    return m_r_register_isSet;
}

bool OAIFixedAssetTransactionDto::is_r_register_Valid() const{
    return m_r_register_isValid;
}

double OAIFixedAssetTransactionDto::getTransactionAmount() const {
    return m_transaction_amount;
}
void OAIFixedAssetTransactionDto::setTransactionAmount(const double &transaction_amount) {
    m_transaction_amount = transaction_amount;
    m_transaction_amount_isSet = true;
}

bool OAIFixedAssetTransactionDto::is_transaction_amount_Set() const{
    return m_transaction_amount_isSet;
}

bool OAIFixedAssetTransactionDto::is_transaction_amount_Valid() const{
    return m_transaction_amount_isValid;
}

QDateTime OAIFixedAssetTransactionDto::getTransactionDate() const {
    return m_transaction_date;
}
void OAIFixedAssetTransactionDto::setTransactionDate(const QDateTime &transaction_date) {
    m_transaction_date = transaction_date;
    m_transaction_date_isSet = true;
}

bool OAIFixedAssetTransactionDto::is_transaction_date_Set() const{
    return m_transaction_date_isSet;
}

bool OAIFixedAssetTransactionDto::is_transaction_date_Valid() const{
    return m_transaction_date_isValid;
}

QString OAIFixedAssetTransactionDto::getTransactionDescription() const {
    return m_transaction_description;
}
void OAIFixedAssetTransactionDto::setTransactionDescription(const QString &transaction_description) {
    m_transaction_description = transaction_description;
    m_transaction_description_isSet = true;
}

bool OAIFixedAssetTransactionDto::is_transaction_description_Set() const{
    return m_transaction_description_isSet;
}

bool OAIFixedAssetTransactionDto::is_transaction_description_Valid() const{
    return m_transaction_description_isValid;
}

QString OAIFixedAssetTransactionDto::getTransactionPeriodId() const {
    return m_transaction_period_id;
}
void OAIFixedAssetTransactionDto::setTransactionPeriodId(const QString &transaction_period_id) {
    m_transaction_period_id = transaction_period_id;
    m_transaction_period_id_isSet = true;
}

bool OAIFixedAssetTransactionDto::is_transaction_period_id_Set() const{
    return m_transaction_period_id_isSet;
}

bool OAIFixedAssetTransactionDto::is_transaction_period_id_Valid() const{
    return m_transaction_period_id_isValid;
}

QString OAIFixedAssetTransactionDto::getTransactionType() const {
    return m_transaction_type;
}
void OAIFixedAssetTransactionDto::setTransactionType(const QString &transaction_type) {
    m_transaction_type = transaction_type;
    m_transaction_type_isSet = true;
}

bool OAIFixedAssetTransactionDto::is_transaction_type_Set() const{
    return m_transaction_type_isSet;
}

bool OAIFixedAssetTransactionDto::is_transaction_type_Valid() const{
    return m_transaction_type_isValid;
}

bool OAIFixedAssetTransactionDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_book_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_register.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_period_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFixedAssetTransactionDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
