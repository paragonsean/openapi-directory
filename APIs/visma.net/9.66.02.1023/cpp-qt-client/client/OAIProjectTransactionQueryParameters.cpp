/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectTransactionQueryParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectTransactionQueryParameters::OAIProjectTransactionQueryParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectTransactionQueryParameters::OAIProjectTransactionQueryParameters() {
    this->initializeModel();
}

OAIProjectTransactionQueryParameters::~OAIProjectTransactionQueryParameters() {}

void OAIProjectTransactionQueryParameters::initializeModel() {

    m_billable_isSet = false;
    m_billable_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_created_date_time_condition_isSet = false;
    m_created_date_time_condition_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_expand_note_isSet = false;
    m_expand_note_isValid = false;

    m_from_period_isSet = false;
    m_from_period_isValid = false;

    m_greater_than_value_isSet = false;
    m_greater_than_value_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_last_modified_date_time_condition_isSet = false;
    m_last_modified_date_time_condition_isValid = false;

    m_module_isSet = false;
    m_module_isValid = false;

    m_number_to_read_isSet = false;
    m_number_to_read_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_project_task_isSet = false;
    m_project_task_isValid = false;

    m_skip_records_isSet = false;
    m_skip_records_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_to_period_isSet = false;
    m_to_period_isValid = false;
}

void OAIProjectTransactionQueryParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectTransactionQueryParameters::fromJsonObject(QJsonObject json) {

    m_billable_isValid = ::OpenAPI::fromJsonValue(m_billable, json[QString("billable")]);
    m_billable_isSet = !json[QString("billable")].isNull() && m_billable_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_created_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_created_date_time_condition, json[QString("createdDateTimeCondition")]);
    m_created_date_time_condition_isSet = !json[QString("createdDateTimeCondition")].isNull() && m_created_date_time_condition_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_expand_note_isValid = ::OpenAPI::fromJsonValue(m_expand_note, json[QString("expandNote")]);
    m_expand_note_isSet = !json[QString("expandNote")].isNull() && m_expand_note_isValid;

    m_from_period_isValid = ::OpenAPI::fromJsonValue(m_from_period, json[QString("fromPeriod")]);
    m_from_period_isSet = !json[QString("fromPeriod")].isNull() && m_from_period_isValid;

    m_greater_than_value_isValid = ::OpenAPI::fromJsonValue(m_greater_than_value, json[QString("greaterThanValue")]);
    m_greater_than_value_isSet = !json[QString("greaterThanValue")].isNull() && m_greater_than_value_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_last_modified_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time_condition, json[QString("lastModifiedDateTimeCondition")]);
    m_last_modified_date_time_condition_isSet = !json[QString("lastModifiedDateTimeCondition")].isNull() && m_last_modified_date_time_condition_isValid;

    m_module_isValid = ::OpenAPI::fromJsonValue(m_module, json[QString("module")]);
    m_module_isSet = !json[QString("module")].isNull() && m_module_isValid;

    m_number_to_read_isValid = ::OpenAPI::fromJsonValue(m_number_to_read, json[QString("numberToRead")]);
    m_number_to_read_isSet = !json[QString("numberToRead")].isNull() && m_number_to_read_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("pageNumber")]);
    m_page_number_isSet = !json[QString("pageNumber")].isNull() && m_page_number_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_project_task_isValid = ::OpenAPI::fromJsonValue(m_project_task, json[QString("projectTask")]);
    m_project_task_isSet = !json[QString("projectTask")].isNull() && m_project_task_isValid;

    m_skip_records_isValid = ::OpenAPI::fromJsonValue(m_skip_records, json[QString("skipRecords")]);
    m_skip_records_isSet = !json[QString("skipRecords")].isNull() && m_skip_records_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_to_period_isValid = ::OpenAPI::fromJsonValue(m_to_period, json[QString("toPeriod")]);
    m_to_period_isSet = !json[QString("toPeriod")].isNull() && m_to_period_isValid;
}

QString OAIProjectTransactionQueryParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectTransactionQueryParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_billable_isSet) {
        obj.insert(QString("billable"), ::OpenAPI::toJsonValue(m_billable));
    }
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_created_date_time_condition_isSet) {
        obj.insert(QString("createdDateTimeCondition"), ::OpenAPI::toJsonValue(m_created_date_time_condition));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_expand_note_isSet) {
        obj.insert(QString("expandNote"), ::OpenAPI::toJsonValue(m_expand_note));
    }
    if (m_from_period_isSet) {
        obj.insert(QString("fromPeriod"), ::OpenAPI::toJsonValue(m_from_period));
    }
    if (m_greater_than_value_isSet) {
        obj.insert(QString("greaterThanValue"), ::OpenAPI::toJsonValue(m_greater_than_value));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_last_modified_date_time_condition_isSet) {
        obj.insert(QString("lastModifiedDateTimeCondition"), ::OpenAPI::toJsonValue(m_last_modified_date_time_condition));
    }
    if (m_module_isSet) {
        obj.insert(QString("module"), ::OpenAPI::toJsonValue(m_module));
    }
    if (m_number_to_read_isSet) {
        obj.insert(QString("numberToRead"), ::OpenAPI::toJsonValue(m_number_to_read));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("pageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_project_task_isSet) {
        obj.insert(QString("projectTask"), ::OpenAPI::toJsonValue(m_project_task));
    }
    if (m_skip_records_isSet) {
        obj.insert(QString("skipRecords"), ::OpenAPI::toJsonValue(m_skip_records));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_to_period_isSet) {
        obj.insert(QString("toPeriod"), ::OpenAPI::toJsonValue(m_to_period));
    }
    return obj;
}

bool OAIProjectTransactionQueryParameters::isBillable() const {
    return m_billable;
}
void OAIProjectTransactionQueryParameters::setBillable(const bool &billable) {
    m_billable = billable;
    m_billable_isSet = true;
}

bool OAIProjectTransactionQueryParameters::is_billable_Set() const{
    return m_billable_isSet;
}

bool OAIProjectTransactionQueryParameters::is_billable_Valid() const{
    return m_billable_isValid;
}

QString OAIProjectTransactionQueryParameters::getBranch() const {
    return m_branch;
}
void OAIProjectTransactionQueryParameters::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIProjectTransactionQueryParameters::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIProjectTransactionQueryParameters::is_branch_Valid() const{
    return m_branch_isValid;
}

QString OAIProjectTransactionQueryParameters::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIProjectTransactionQueryParameters::setCreatedDateTime(const QString &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIProjectTransactionQueryParameters::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIProjectTransactionQueryParameters::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAIProjectTransactionQueryParameters::getCreatedDateTimeCondition() const {
    return m_created_date_time_condition;
}
void OAIProjectTransactionQueryParameters::setCreatedDateTimeCondition(const QString &created_date_time_condition) {
    m_created_date_time_condition = created_date_time_condition;
    m_created_date_time_condition_isSet = true;
}

bool OAIProjectTransactionQueryParameters::is_created_date_time_condition_Set() const{
    return m_created_date_time_condition_isSet;
}

bool OAIProjectTransactionQueryParameters::is_created_date_time_condition_Valid() const{
    return m_created_date_time_condition_isValid;
}

QDateTime OAIProjectTransactionQueryParameters::getDate() const {
    return m_date;
}
void OAIProjectTransactionQueryParameters::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIProjectTransactionQueryParameters::is_date_Set() const{
    return m_date_isSet;
}

bool OAIProjectTransactionQueryParameters::is_date_Valid() const{
    return m_date_isValid;
}

bool OAIProjectTransactionQueryParameters::isExpandNote() const {
    return m_expand_note;
}
void OAIProjectTransactionQueryParameters::setExpandNote(const bool &expand_note) {
    m_expand_note = expand_note;
    m_expand_note_isSet = true;
}

bool OAIProjectTransactionQueryParameters::is_expand_note_Set() const{
    return m_expand_note_isSet;
}

bool OAIProjectTransactionQueryParameters::is_expand_note_Valid() const{
    return m_expand_note_isValid;
}

QString OAIProjectTransactionQueryParameters::getFromPeriod() const {
    return m_from_period;
}
void OAIProjectTransactionQueryParameters::setFromPeriod(const QString &from_period) {
    m_from_period = from_period;
    m_from_period_isSet = true;
}

bool OAIProjectTransactionQueryParameters::is_from_period_Set() const{
    return m_from_period_isSet;
}

bool OAIProjectTransactionQueryParameters::is_from_period_Valid() const{
    return m_from_period_isValid;
}

QString OAIProjectTransactionQueryParameters::getGreaterThanValue() const {
    return m_greater_than_value;
}
void OAIProjectTransactionQueryParameters::setGreaterThanValue(const QString &greater_than_value) {
    m_greater_than_value = greater_than_value;
    m_greater_than_value_isSet = true;
}

bool OAIProjectTransactionQueryParameters::is_greater_than_value_Set() const{
    return m_greater_than_value_isSet;
}

bool OAIProjectTransactionQueryParameters::is_greater_than_value_Valid() const{
    return m_greater_than_value_isValid;
}

QString OAIProjectTransactionQueryParameters::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIProjectTransactionQueryParameters::setLastModifiedDateTime(const QString &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIProjectTransactionQueryParameters::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIProjectTransactionQueryParameters::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QString OAIProjectTransactionQueryParameters::getLastModifiedDateTimeCondition() const {
    return m_last_modified_date_time_condition;
}
void OAIProjectTransactionQueryParameters::setLastModifiedDateTimeCondition(const QString &last_modified_date_time_condition) {
    m_last_modified_date_time_condition = last_modified_date_time_condition;
    m_last_modified_date_time_condition_isSet = true;
}

bool OAIProjectTransactionQueryParameters::is_last_modified_date_time_condition_Set() const{
    return m_last_modified_date_time_condition_isSet;
}

bool OAIProjectTransactionQueryParameters::is_last_modified_date_time_condition_Valid() const{
    return m_last_modified_date_time_condition_isValid;
}

QString OAIProjectTransactionQueryParameters::getModule() const {
    return m_module;
}
void OAIProjectTransactionQueryParameters::setModule(const QString &module) {
    m_module = module;
    m_module_isSet = true;
}

bool OAIProjectTransactionQueryParameters::is_module_Set() const{
    return m_module_isSet;
}

bool OAIProjectTransactionQueryParameters::is_module_Valid() const{
    return m_module_isValid;
}

qint32 OAIProjectTransactionQueryParameters::getNumberToRead() const {
    return m_number_to_read;
}
void OAIProjectTransactionQueryParameters::setNumberToRead(const qint32 &number_to_read) {
    m_number_to_read = number_to_read;
    m_number_to_read_isSet = true;
}

bool OAIProjectTransactionQueryParameters::is_number_to_read_Set() const{
    return m_number_to_read_isSet;
}

bool OAIProjectTransactionQueryParameters::is_number_to_read_Valid() const{
    return m_number_to_read_isValid;
}

qint32 OAIProjectTransactionQueryParameters::getPageNumber() const {
    return m_page_number;
}
void OAIProjectTransactionQueryParameters::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIProjectTransactionQueryParameters::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIProjectTransactionQueryParameters::is_page_number_Valid() const{
    return m_page_number_isValid;
}

qint32 OAIProjectTransactionQueryParameters::getPageSize() const {
    return m_page_size;
}
void OAIProjectTransactionQueryParameters::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIProjectTransactionQueryParameters::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIProjectTransactionQueryParameters::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIProjectTransactionQueryParameters::getProject() const {
    return m_project;
}
void OAIProjectTransactionQueryParameters::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIProjectTransactionQueryParameters::is_project_Set() const{
    return m_project_isSet;
}

bool OAIProjectTransactionQueryParameters::is_project_Valid() const{
    return m_project_isValid;
}

QString OAIProjectTransactionQueryParameters::getProjectTask() const {
    return m_project_task;
}
void OAIProjectTransactionQueryParameters::setProjectTask(const QString &project_task) {
    m_project_task = project_task;
    m_project_task_isSet = true;
}

bool OAIProjectTransactionQueryParameters::is_project_task_Set() const{
    return m_project_task_isSet;
}

bool OAIProjectTransactionQueryParameters::is_project_task_Valid() const{
    return m_project_task_isValid;
}

qint32 OAIProjectTransactionQueryParameters::getSkipRecords() const {
    return m_skip_records;
}
void OAIProjectTransactionQueryParameters::setSkipRecords(const qint32 &skip_records) {
    m_skip_records = skip_records;
    m_skip_records_isSet = true;
}

bool OAIProjectTransactionQueryParameters::is_skip_records_Set() const{
    return m_skip_records_isSet;
}

bool OAIProjectTransactionQueryParameters::is_skip_records_Valid() const{
    return m_skip_records_isValid;
}

QString OAIProjectTransactionQueryParameters::getStatus() const {
    return m_status;
}
void OAIProjectTransactionQueryParameters::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProjectTransactionQueryParameters::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProjectTransactionQueryParameters::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIProjectTransactionQueryParameters::getToPeriod() const {
    return m_to_period;
}
void OAIProjectTransactionQueryParameters::setToPeriod(const QString &to_period) {
    m_to_period = to_period;
    m_to_period_isSet = true;
}

bool OAIProjectTransactionQueryParameters::is_to_period_Set() const{
    return m_to_period_isSet;
}

bool OAIProjectTransactionQueryParameters::is_to_period_Valid() const{
    return m_to_period_isValid;
}

bool OAIProjectTransactionQueryParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_greater_than_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_to_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectTransactionQueryParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
