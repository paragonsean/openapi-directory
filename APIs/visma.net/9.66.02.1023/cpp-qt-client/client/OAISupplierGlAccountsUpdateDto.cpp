/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupplierGlAccountsUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupplierGlAccountsUpdateDto::OAISupplierGlAccountsUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupplierGlAccountsUpdateDto::OAISupplierGlAccountsUpdateDto() {
    this->initializeModel();
}

OAISupplierGlAccountsUpdateDto::~OAISupplierGlAccountsUpdateDto() {}

void OAISupplierGlAccountsUpdateDto::initializeModel() {

    m_expense_account_isSet = false;
    m_expense_account_isValid = false;

    m_expense_account_import_isSet = false;
    m_expense_account_import_isValid = false;

    m_expense_account_non_tax_isSet = false;
    m_expense_account_non_tax_isValid = false;

    m_expense_eu_account_isSet = false;
    m_expense_eu_account_isValid = false;

    m_expense_subaccount_isSet = false;
    m_expense_subaccount_isValid = false;

    m_supplier_account_isSet = false;
    m_supplier_account_isValid = false;
}

void OAISupplierGlAccountsUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupplierGlAccountsUpdateDto::fromJsonObject(QJsonObject json) {

    m_expense_account_isValid = ::OpenAPI::fromJsonValue(m_expense_account, json[QString("expenseAccount")]);
    m_expense_account_isSet = !json[QString("expenseAccount")].isNull() && m_expense_account_isValid;

    m_expense_account_import_isValid = ::OpenAPI::fromJsonValue(m_expense_account_import, json[QString("expenseAccountImport")]);
    m_expense_account_import_isSet = !json[QString("expenseAccountImport")].isNull() && m_expense_account_import_isValid;

    m_expense_account_non_tax_isValid = ::OpenAPI::fromJsonValue(m_expense_account_non_tax, json[QString("expenseAccountNonTax")]);
    m_expense_account_non_tax_isSet = !json[QString("expenseAccountNonTax")].isNull() && m_expense_account_non_tax_isValid;

    m_expense_eu_account_isValid = ::OpenAPI::fromJsonValue(m_expense_eu_account, json[QString("expenseEUAccount")]);
    m_expense_eu_account_isSet = !json[QString("expenseEUAccount")].isNull() && m_expense_eu_account_isValid;

    m_expense_subaccount_isValid = ::OpenAPI::fromJsonValue(m_expense_subaccount, json[QString("expenseSubaccount")]);
    m_expense_subaccount_isSet = !json[QString("expenseSubaccount")].isNull() && m_expense_subaccount_isValid;

    m_supplier_account_isValid = ::OpenAPI::fromJsonValue(m_supplier_account, json[QString("supplierAccount")]);
    m_supplier_account_isSet = !json[QString("supplierAccount")].isNull() && m_supplier_account_isValid;
}

QString OAISupplierGlAccountsUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupplierGlAccountsUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_expense_account.isSet()) {
        obj.insert(QString("expenseAccount"), ::OpenAPI::toJsonValue(m_expense_account));
    }
    if (m_expense_account_import.isSet()) {
        obj.insert(QString("expenseAccountImport"), ::OpenAPI::toJsonValue(m_expense_account_import));
    }
    if (m_expense_account_non_tax.isSet()) {
        obj.insert(QString("expenseAccountNonTax"), ::OpenAPI::toJsonValue(m_expense_account_non_tax));
    }
    if (m_expense_eu_account.isSet()) {
        obj.insert(QString("expenseEUAccount"), ::OpenAPI::toJsonValue(m_expense_eu_account));
    }
    if (m_expense_subaccount.isSet()) {
        obj.insert(QString("expenseSubaccount"), ::OpenAPI::toJsonValue(m_expense_subaccount));
    }
    if (m_supplier_account.isSet()) {
        obj.insert(QString("supplierAccount"), ::OpenAPI::toJsonValue(m_supplier_account));
    }
    return obj;
}

OAIDtoValueOfString OAISupplierGlAccountsUpdateDto::getExpenseAccount() const {
    return m_expense_account;
}
void OAISupplierGlAccountsUpdateDto::setExpenseAccount(const OAIDtoValueOfString &expense_account) {
    m_expense_account = expense_account;
    m_expense_account_isSet = true;
}

bool OAISupplierGlAccountsUpdateDto::is_expense_account_Set() const{
    return m_expense_account_isSet;
}

bool OAISupplierGlAccountsUpdateDto::is_expense_account_Valid() const{
    return m_expense_account_isValid;
}

OAIDtoValueOfString OAISupplierGlAccountsUpdateDto::getExpenseAccountImport() const {
    return m_expense_account_import;
}
void OAISupplierGlAccountsUpdateDto::setExpenseAccountImport(const OAIDtoValueOfString &expense_account_import) {
    m_expense_account_import = expense_account_import;
    m_expense_account_import_isSet = true;
}

bool OAISupplierGlAccountsUpdateDto::is_expense_account_import_Set() const{
    return m_expense_account_import_isSet;
}

bool OAISupplierGlAccountsUpdateDto::is_expense_account_import_Valid() const{
    return m_expense_account_import_isValid;
}

OAIDtoValueOfString OAISupplierGlAccountsUpdateDto::getExpenseAccountNonTax() const {
    return m_expense_account_non_tax;
}
void OAISupplierGlAccountsUpdateDto::setExpenseAccountNonTax(const OAIDtoValueOfString &expense_account_non_tax) {
    m_expense_account_non_tax = expense_account_non_tax;
    m_expense_account_non_tax_isSet = true;
}

bool OAISupplierGlAccountsUpdateDto::is_expense_account_non_tax_Set() const{
    return m_expense_account_non_tax_isSet;
}

bool OAISupplierGlAccountsUpdateDto::is_expense_account_non_tax_Valid() const{
    return m_expense_account_non_tax_isValid;
}

OAIDtoValueOfString OAISupplierGlAccountsUpdateDto::getExpenseEuAccount() const {
    return m_expense_eu_account;
}
void OAISupplierGlAccountsUpdateDto::setExpenseEuAccount(const OAIDtoValueOfString &expense_eu_account) {
    m_expense_eu_account = expense_eu_account;
    m_expense_eu_account_isSet = true;
}

bool OAISupplierGlAccountsUpdateDto::is_expense_eu_account_Set() const{
    return m_expense_eu_account_isSet;
}

bool OAISupplierGlAccountsUpdateDto::is_expense_eu_account_Valid() const{
    return m_expense_eu_account_isValid;
}

OAIDtoValueOfString OAISupplierGlAccountsUpdateDto::getExpenseSubaccount() const {
    return m_expense_subaccount;
}
void OAISupplierGlAccountsUpdateDto::setExpenseSubaccount(const OAIDtoValueOfString &expense_subaccount) {
    m_expense_subaccount = expense_subaccount;
    m_expense_subaccount_isSet = true;
}

bool OAISupplierGlAccountsUpdateDto::is_expense_subaccount_Set() const{
    return m_expense_subaccount_isSet;
}

bool OAISupplierGlAccountsUpdateDto::is_expense_subaccount_Valid() const{
    return m_expense_subaccount_isValid;
}

OAIDtoValueOfString OAISupplierGlAccountsUpdateDto::getSupplierAccount() const {
    return m_supplier_account;
}
void OAISupplierGlAccountsUpdateDto::setSupplierAccount(const OAIDtoValueOfString &supplier_account) {
    m_supplier_account = supplier_account;
    m_supplier_account_isSet = true;
}

bool OAISupplierGlAccountsUpdateDto::is_supplier_account_Set() const{
    return m_supplier_account_isSet;
}

bool OAISupplierGlAccountsUpdateDto::is_supplier_account_Valid() const{
    return m_supplier_account_isValid;
}

bool OAISupplierGlAccountsUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expense_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_account_import.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_account_non_tax.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_eu_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_account.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupplierGlAccountsUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
