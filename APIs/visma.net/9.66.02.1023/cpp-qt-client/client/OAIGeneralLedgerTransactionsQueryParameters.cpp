/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeneralLedgerTransactionsQueryParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeneralLedgerTransactionsQueryParameters::OAIGeneralLedgerTransactionsQueryParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeneralLedgerTransactionsQueryParameters::OAIGeneralLedgerTransactionsQueryParameters() {
    this->initializeModel();
}

OAIGeneralLedgerTransactionsQueryParameters::~OAIGeneralLedgerTransactionsQueryParameters() {}

void OAIGeneralLedgerTransactionsQueryParameters::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_expand_account_info_isSet = false;
    m_expand_account_info_isValid = false;

    m_expand_branch_info_isSet = false;
    m_expand_branch_info_isValid = false;

    m_from_date_isSet = false;
    m_from_date_isValid = false;

    m_from_period_isSet = false;
    m_from_period_isValid = false;

    m_include_transaction_balance_isSet = false;
    m_include_transaction_balance_isValid = false;

    m_include_unposted_isSet = false;
    m_include_unposted_isValid = false;

    m_include_unreleased_isSet = false;
    m_include_unreleased_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_last_modified_date_time_condition_isSet = false;
    m_last_modified_date_time_condition_isValid = false;

    m_ledger_isSet = false;
    m_ledger_isValid = false;

    m_number_to_read_isSet = false;
    m_number_to_read_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_skip_records_isSet = false;
    m_skip_records_isValid = false;

    m_subaccount_id_isSet = false;
    m_subaccount_id_isValid = false;

    m_to_date_isSet = false;
    m_to_date_isValid = false;

    m_to_period_isSet = false;
    m_to_period_isValid = false;
}

void OAIGeneralLedgerTransactionsQueryParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeneralLedgerTransactionsQueryParameters::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_expand_account_info_isValid = ::OpenAPI::fromJsonValue(m_expand_account_info, json[QString("expandAccountInfo")]);
    m_expand_account_info_isSet = !json[QString("expandAccountInfo")].isNull() && m_expand_account_info_isValid;

    m_expand_branch_info_isValid = ::OpenAPI::fromJsonValue(m_expand_branch_info, json[QString("expandBranchInfo")]);
    m_expand_branch_info_isSet = !json[QString("expandBranchInfo")].isNull() && m_expand_branch_info_isValid;

    m_from_date_isValid = ::OpenAPI::fromJsonValue(m_from_date, json[QString("fromDate")]);
    m_from_date_isSet = !json[QString("fromDate")].isNull() && m_from_date_isValid;

    m_from_period_isValid = ::OpenAPI::fromJsonValue(m_from_period, json[QString("fromPeriod")]);
    m_from_period_isSet = !json[QString("fromPeriod")].isNull() && m_from_period_isValid;

    m_include_transaction_balance_isValid = ::OpenAPI::fromJsonValue(m_include_transaction_balance, json[QString("includeTransactionBalance")]);
    m_include_transaction_balance_isSet = !json[QString("includeTransactionBalance")].isNull() && m_include_transaction_balance_isValid;

    m_include_unposted_isValid = ::OpenAPI::fromJsonValue(m_include_unposted, json[QString("includeUnposted")]);
    m_include_unposted_isSet = !json[QString("includeUnposted")].isNull() && m_include_unposted_isValid;

    m_include_unreleased_isValid = ::OpenAPI::fromJsonValue(m_include_unreleased, json[QString("includeUnreleased")]);
    m_include_unreleased_isSet = !json[QString("includeUnreleased")].isNull() && m_include_unreleased_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_last_modified_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time_condition, json[QString("lastModifiedDateTimeCondition")]);
    m_last_modified_date_time_condition_isSet = !json[QString("lastModifiedDateTimeCondition")].isNull() && m_last_modified_date_time_condition_isValid;

    m_ledger_isValid = ::OpenAPI::fromJsonValue(m_ledger, json[QString("ledger")]);
    m_ledger_isSet = !json[QString("ledger")].isNull() && m_ledger_isValid;

    m_number_to_read_isValid = ::OpenAPI::fromJsonValue(m_number_to_read, json[QString("numberToRead")]);
    m_number_to_read_isSet = !json[QString("numberToRead")].isNull() && m_number_to_read_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("pageNumber")]);
    m_page_number_isSet = !json[QString("pageNumber")].isNull() && m_page_number_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_skip_records_isValid = ::OpenAPI::fromJsonValue(m_skip_records, json[QString("skipRecords")]);
    m_skip_records_isSet = !json[QString("skipRecords")].isNull() && m_skip_records_isValid;

    m_subaccount_id_isValid = ::OpenAPI::fromJsonValue(m_subaccount_id, json[QString("subaccountId")]);
    m_subaccount_id_isSet = !json[QString("subaccountId")].isNull() && m_subaccount_id_isValid;

    m_to_date_isValid = ::OpenAPI::fromJsonValue(m_to_date, json[QString("toDate")]);
    m_to_date_isSet = !json[QString("toDate")].isNull() && m_to_date_isValid;

    m_to_period_isValid = ::OpenAPI::fromJsonValue(m_to_period, json[QString("toPeriod")]);
    m_to_period_isSet = !json[QString("toPeriod")].isNull() && m_to_period_isValid;
}

QString OAIGeneralLedgerTransactionsQueryParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeneralLedgerTransactionsQueryParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_expand_account_info_isSet) {
        obj.insert(QString("expandAccountInfo"), ::OpenAPI::toJsonValue(m_expand_account_info));
    }
    if (m_expand_branch_info_isSet) {
        obj.insert(QString("expandBranchInfo"), ::OpenAPI::toJsonValue(m_expand_branch_info));
    }
    if (m_from_date_isSet) {
        obj.insert(QString("fromDate"), ::OpenAPI::toJsonValue(m_from_date));
    }
    if (m_from_period_isSet) {
        obj.insert(QString("fromPeriod"), ::OpenAPI::toJsonValue(m_from_period));
    }
    if (m_include_transaction_balance_isSet) {
        obj.insert(QString("includeTransactionBalance"), ::OpenAPI::toJsonValue(m_include_transaction_balance));
    }
    if (m_include_unposted_isSet) {
        obj.insert(QString("includeUnposted"), ::OpenAPI::toJsonValue(m_include_unposted));
    }
    if (m_include_unreleased_isSet) {
        obj.insert(QString("includeUnreleased"), ::OpenAPI::toJsonValue(m_include_unreleased));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_last_modified_date_time_condition_isSet) {
        obj.insert(QString("lastModifiedDateTimeCondition"), ::OpenAPI::toJsonValue(m_last_modified_date_time_condition));
    }
    if (m_ledger_isSet) {
        obj.insert(QString("ledger"), ::OpenAPI::toJsonValue(m_ledger));
    }
    if (m_number_to_read_isSet) {
        obj.insert(QString("numberToRead"), ::OpenAPI::toJsonValue(m_number_to_read));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("pageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_skip_records_isSet) {
        obj.insert(QString("skipRecords"), ::OpenAPI::toJsonValue(m_skip_records));
    }
    if (m_subaccount_id_isSet) {
        obj.insert(QString("subaccountId"), ::OpenAPI::toJsonValue(m_subaccount_id));
    }
    if (m_to_date_isSet) {
        obj.insert(QString("toDate"), ::OpenAPI::toJsonValue(m_to_date));
    }
    if (m_to_period_isSet) {
        obj.insert(QString("toPeriod"), ::OpenAPI::toJsonValue(m_to_period));
    }
    return obj;
}

QString OAIGeneralLedgerTransactionsQueryParameters::getAccount() const {
    return m_account;
}
void OAIGeneralLedgerTransactionsQueryParameters::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_account_Set() const{
    return m_account_isSet;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIGeneralLedgerTransactionsQueryParameters::getBranch() const {
    return m_branch;
}
void OAIGeneralLedgerTransactionsQueryParameters::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_branch_Valid() const{
    return m_branch_isValid;
}

bool OAIGeneralLedgerTransactionsQueryParameters::isExpandAccountInfo() const {
    return m_expand_account_info;
}
void OAIGeneralLedgerTransactionsQueryParameters::setExpandAccountInfo(const bool &expand_account_info) {
    m_expand_account_info = expand_account_info;
    m_expand_account_info_isSet = true;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_expand_account_info_Set() const{
    return m_expand_account_info_isSet;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_expand_account_info_Valid() const{
    return m_expand_account_info_isValid;
}

bool OAIGeneralLedgerTransactionsQueryParameters::isExpandBranchInfo() const {
    return m_expand_branch_info;
}
void OAIGeneralLedgerTransactionsQueryParameters::setExpandBranchInfo(const bool &expand_branch_info) {
    m_expand_branch_info = expand_branch_info;
    m_expand_branch_info_isSet = true;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_expand_branch_info_Set() const{
    return m_expand_branch_info_isSet;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_expand_branch_info_Valid() const{
    return m_expand_branch_info_isValid;
}

QString OAIGeneralLedgerTransactionsQueryParameters::getFromDate() const {
    return m_from_date;
}
void OAIGeneralLedgerTransactionsQueryParameters::setFromDate(const QString &from_date) {
    m_from_date = from_date;
    m_from_date_isSet = true;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_from_date_Set() const{
    return m_from_date_isSet;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_from_date_Valid() const{
    return m_from_date_isValid;
}

QString OAIGeneralLedgerTransactionsQueryParameters::getFromPeriod() const {
    return m_from_period;
}
void OAIGeneralLedgerTransactionsQueryParameters::setFromPeriod(const QString &from_period) {
    m_from_period = from_period;
    m_from_period_isSet = true;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_from_period_Set() const{
    return m_from_period_isSet;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_from_period_Valid() const{
    return m_from_period_isValid;
}

bool OAIGeneralLedgerTransactionsQueryParameters::isIncludeTransactionBalance() const {
    return m_include_transaction_balance;
}
void OAIGeneralLedgerTransactionsQueryParameters::setIncludeTransactionBalance(const bool &include_transaction_balance) {
    m_include_transaction_balance = include_transaction_balance;
    m_include_transaction_balance_isSet = true;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_include_transaction_balance_Set() const{
    return m_include_transaction_balance_isSet;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_include_transaction_balance_Valid() const{
    return m_include_transaction_balance_isValid;
}

bool OAIGeneralLedgerTransactionsQueryParameters::isIncludeUnposted() const {
    return m_include_unposted;
}
void OAIGeneralLedgerTransactionsQueryParameters::setIncludeUnposted(const bool &include_unposted) {
    m_include_unposted = include_unposted;
    m_include_unposted_isSet = true;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_include_unposted_Set() const{
    return m_include_unposted_isSet;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_include_unposted_Valid() const{
    return m_include_unposted_isValid;
}

bool OAIGeneralLedgerTransactionsQueryParameters::isIncludeUnreleased() const {
    return m_include_unreleased;
}
void OAIGeneralLedgerTransactionsQueryParameters::setIncludeUnreleased(const bool &include_unreleased) {
    m_include_unreleased = include_unreleased;
    m_include_unreleased_isSet = true;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_include_unreleased_Set() const{
    return m_include_unreleased_isSet;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_include_unreleased_Valid() const{
    return m_include_unreleased_isValid;
}

QString OAIGeneralLedgerTransactionsQueryParameters::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIGeneralLedgerTransactionsQueryParameters::setLastModifiedDateTime(const QString &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QString OAIGeneralLedgerTransactionsQueryParameters::getLastModifiedDateTimeCondition() const {
    return m_last_modified_date_time_condition;
}
void OAIGeneralLedgerTransactionsQueryParameters::setLastModifiedDateTimeCondition(const QString &last_modified_date_time_condition) {
    m_last_modified_date_time_condition = last_modified_date_time_condition;
    m_last_modified_date_time_condition_isSet = true;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_last_modified_date_time_condition_Set() const{
    return m_last_modified_date_time_condition_isSet;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_last_modified_date_time_condition_Valid() const{
    return m_last_modified_date_time_condition_isValid;
}

QString OAIGeneralLedgerTransactionsQueryParameters::getLedger() const {
    return m_ledger;
}
void OAIGeneralLedgerTransactionsQueryParameters::setLedger(const QString &ledger) {
    m_ledger = ledger;
    m_ledger_isSet = true;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_ledger_Set() const{
    return m_ledger_isSet;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_ledger_Valid() const{
    return m_ledger_isValid;
}

qint32 OAIGeneralLedgerTransactionsQueryParameters::getNumberToRead() const {
    return m_number_to_read;
}
void OAIGeneralLedgerTransactionsQueryParameters::setNumberToRead(const qint32 &number_to_read) {
    m_number_to_read = number_to_read;
    m_number_to_read_isSet = true;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_number_to_read_Set() const{
    return m_number_to_read_isSet;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_number_to_read_Valid() const{
    return m_number_to_read_isValid;
}

qint32 OAIGeneralLedgerTransactionsQueryParameters::getPageNumber() const {
    return m_page_number;
}
void OAIGeneralLedgerTransactionsQueryParameters::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_page_number_Valid() const{
    return m_page_number_isValid;
}

qint32 OAIGeneralLedgerTransactionsQueryParameters::getPageSize() const {
    return m_page_size;
}
void OAIGeneralLedgerTransactionsQueryParameters::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_page_size_Valid() const{
    return m_page_size_isValid;
}

qint32 OAIGeneralLedgerTransactionsQueryParameters::getSkipRecords() const {
    return m_skip_records;
}
void OAIGeneralLedgerTransactionsQueryParameters::setSkipRecords(const qint32 &skip_records) {
    m_skip_records = skip_records;
    m_skip_records_isSet = true;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_skip_records_Set() const{
    return m_skip_records_isSet;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_skip_records_Valid() const{
    return m_skip_records_isValid;
}

QString OAIGeneralLedgerTransactionsQueryParameters::getSubaccountId() const {
    return m_subaccount_id;
}
void OAIGeneralLedgerTransactionsQueryParameters::setSubaccountId(const QString &subaccount_id) {
    m_subaccount_id = subaccount_id;
    m_subaccount_id_isSet = true;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_subaccount_id_Set() const{
    return m_subaccount_id_isSet;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_subaccount_id_Valid() const{
    return m_subaccount_id_isValid;
}

QString OAIGeneralLedgerTransactionsQueryParameters::getToDate() const {
    return m_to_date;
}
void OAIGeneralLedgerTransactionsQueryParameters::setToDate(const QString &to_date) {
    m_to_date = to_date;
    m_to_date_isSet = true;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_to_date_Set() const{
    return m_to_date_isSet;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_to_date_Valid() const{
    return m_to_date_isValid;
}

QString OAIGeneralLedgerTransactionsQueryParameters::getToPeriod() const {
    return m_to_period;
}
void OAIGeneralLedgerTransactionsQueryParameters::setToPeriod(const QString &to_period) {
    m_to_period = to_period;
    m_to_period_isSet = true;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_to_period_Set() const{
    return m_to_period_isSet;
}

bool OAIGeneralLedgerTransactionsQueryParameters::is_to_period_Valid() const{
    return m_to_period_isValid;
}

bool OAIGeneralLedgerTransactionsQueryParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_account_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_branch_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_transaction_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_unposted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_unreleased_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ledger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_to_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeneralLedgerTransactionsQueryParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ledger_isValid && true;
}

} // namespace OpenAPI
