/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupplierPaymentAdjustmentDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupplierPaymentAdjustmentDto::OAISupplierPaymentAdjustmentDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupplierPaymentAdjustmentDto::OAISupplierPaymentAdjustmentDto() {
    this->initializeModel();
}

OAISupplierPaymentAdjustmentDto::~OAISupplierPaymentAdjustmentDto() {}

void OAISupplierPaymentAdjustmentDto::initializeModel() {

    m_amount_paid_isSet = false;
    m_amount_paid_isValid = false;

    m_application_period_isSet = false;
    m_application_period_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_batch_number_isSet = false;
    m_batch_number_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_cash_discount_balance_isSet = false;
    m_cash_discount_balance_isValid = false;

    m_cash_discount_date_isSet = false;
    m_cash_discount_date_isValid = false;

    m_cash_discount_taken_isSet = false;
    m_cash_discount_taken_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_doc_type_isSet = false;
    m_doc_type_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_invoice_ref_nbr_isSet = false;
    m_invoice_ref_nbr_isValid = false;

    m_post_period_isSet = false;
    m_post_period_isValid = false;

    m_supplier_ref_isSet = false;
    m_supplier_ref_isValid = false;

    m_withholding_tax_isSet = false;
    m_withholding_tax_isValid = false;
}

void OAISupplierPaymentAdjustmentDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupplierPaymentAdjustmentDto::fromJsonObject(QJsonObject json) {

    m_amount_paid_isValid = ::OpenAPI::fromJsonValue(m_amount_paid, json[QString("amountPaid")]);
    m_amount_paid_isSet = !json[QString("amountPaid")].isNull() && m_amount_paid_isValid;

    m_application_period_isValid = ::OpenAPI::fromJsonValue(m_application_period, json[QString("applicationPeriod")]);
    m_application_period_isSet = !json[QString("applicationPeriod")].isNull() && m_application_period_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_batch_number_isValid = ::OpenAPI::fromJsonValue(m_batch_number, json[QString("batchNumber")]);
    m_batch_number_isSet = !json[QString("batchNumber")].isNull() && m_batch_number_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_cash_discount_balance_isValid = ::OpenAPI::fromJsonValue(m_cash_discount_balance, json[QString("cashDiscountBalance")]);
    m_cash_discount_balance_isSet = !json[QString("cashDiscountBalance")].isNull() && m_cash_discount_balance_isValid;

    m_cash_discount_date_isValid = ::OpenAPI::fromJsonValue(m_cash_discount_date, json[QString("cashDiscountDate")]);
    m_cash_discount_date_isSet = !json[QString("cashDiscountDate")].isNull() && m_cash_discount_date_isValid;

    m_cash_discount_taken_isValid = ::OpenAPI::fromJsonValue(m_cash_discount_taken, json[QString("cashDiscountTaken")]);
    m_cash_discount_taken_isSet = !json[QString("cashDiscountTaken")].isNull() && m_cash_discount_taken_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_doc_type_isValid = ::OpenAPI::fromJsonValue(m_doc_type, json[QString("docType")]);
    m_doc_type_isSet = !json[QString("docType")].isNull() && m_doc_type_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_invoice_ref_nbr_isValid = ::OpenAPI::fromJsonValue(m_invoice_ref_nbr, json[QString("invoiceRefNbr")]);
    m_invoice_ref_nbr_isSet = !json[QString("invoiceRefNbr")].isNull() && m_invoice_ref_nbr_isValid;

    m_post_period_isValid = ::OpenAPI::fromJsonValue(m_post_period, json[QString("postPeriod")]);
    m_post_period_isSet = !json[QString("postPeriod")].isNull() && m_post_period_isValid;

    m_supplier_ref_isValid = ::OpenAPI::fromJsonValue(m_supplier_ref, json[QString("supplierRef")]);
    m_supplier_ref_isSet = !json[QString("supplierRef")].isNull() && m_supplier_ref_isValid;

    m_withholding_tax_isValid = ::OpenAPI::fromJsonValue(m_withholding_tax, json[QString("withholdingTax")]);
    m_withholding_tax_isSet = !json[QString("withholdingTax")].isNull() && m_withholding_tax_isValid;
}

QString OAISupplierPaymentAdjustmentDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupplierPaymentAdjustmentDto::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_paid_isSet) {
        obj.insert(QString("amountPaid"), ::OpenAPI::toJsonValue(m_amount_paid));
    }
    if (m_application_period_isSet) {
        obj.insert(QString("applicationPeriod"), ::OpenAPI::toJsonValue(m_application_period));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_batch_number_isSet) {
        obj.insert(QString("batchNumber"), ::OpenAPI::toJsonValue(m_batch_number));
    }
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_cash_discount_balance_isSet) {
        obj.insert(QString("cashDiscountBalance"), ::OpenAPI::toJsonValue(m_cash_discount_balance));
    }
    if (m_cash_discount_date_isSet) {
        obj.insert(QString("cashDiscountDate"), ::OpenAPI::toJsonValue(m_cash_discount_date));
    }
    if (m_cash_discount_taken_isSet) {
        obj.insert(QString("cashDiscountTaken"), ::OpenAPI::toJsonValue(m_cash_discount_taken));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_doc_type_isSet) {
        obj.insert(QString("docType"), ::OpenAPI::toJsonValue(m_doc_type));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_invoice_ref_nbr_isSet) {
        obj.insert(QString("invoiceRefNbr"), ::OpenAPI::toJsonValue(m_invoice_ref_nbr));
    }
    if (m_post_period_isSet) {
        obj.insert(QString("postPeriod"), ::OpenAPI::toJsonValue(m_post_period));
    }
    if (m_supplier_ref_isSet) {
        obj.insert(QString("supplierRef"), ::OpenAPI::toJsonValue(m_supplier_ref));
    }
    if (m_withholding_tax_isSet) {
        obj.insert(QString("withholdingTax"), ::OpenAPI::toJsonValue(m_withholding_tax));
    }
    return obj;
}

double OAISupplierPaymentAdjustmentDto::getAmountPaid() const {
    return m_amount_paid;
}
void OAISupplierPaymentAdjustmentDto::setAmountPaid(const double &amount_paid) {
    m_amount_paid = amount_paid;
    m_amount_paid_isSet = true;
}

bool OAISupplierPaymentAdjustmentDto::is_amount_paid_Set() const{
    return m_amount_paid_isSet;
}

bool OAISupplierPaymentAdjustmentDto::is_amount_paid_Valid() const{
    return m_amount_paid_isValid;
}

QString OAISupplierPaymentAdjustmentDto::getApplicationPeriod() const {
    return m_application_period;
}
void OAISupplierPaymentAdjustmentDto::setApplicationPeriod(const QString &application_period) {
    m_application_period = application_period;
    m_application_period_isSet = true;
}

bool OAISupplierPaymentAdjustmentDto::is_application_period_Set() const{
    return m_application_period_isSet;
}

bool OAISupplierPaymentAdjustmentDto::is_application_period_Valid() const{
    return m_application_period_isValid;
}

double OAISupplierPaymentAdjustmentDto::getBalance() const {
    return m_balance;
}
void OAISupplierPaymentAdjustmentDto::setBalance(const double &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAISupplierPaymentAdjustmentDto::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAISupplierPaymentAdjustmentDto::is_balance_Valid() const{
    return m_balance_isValid;
}

QString OAISupplierPaymentAdjustmentDto::getBatchNumber() const {
    return m_batch_number;
}
void OAISupplierPaymentAdjustmentDto::setBatchNumber(const QString &batch_number) {
    m_batch_number = batch_number;
    m_batch_number_isSet = true;
}

bool OAISupplierPaymentAdjustmentDto::is_batch_number_Set() const{
    return m_batch_number_isSet;
}

bool OAISupplierPaymentAdjustmentDto::is_batch_number_Valid() const{
    return m_batch_number_isValid;
}

QString OAISupplierPaymentAdjustmentDto::getBranch() const {
    return m_branch;
}
void OAISupplierPaymentAdjustmentDto::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAISupplierPaymentAdjustmentDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAISupplierPaymentAdjustmentDto::is_branch_Valid() const{
    return m_branch_isValid;
}

double OAISupplierPaymentAdjustmentDto::getCashDiscountBalance() const {
    return m_cash_discount_balance;
}
void OAISupplierPaymentAdjustmentDto::setCashDiscountBalance(const double &cash_discount_balance) {
    m_cash_discount_balance = cash_discount_balance;
    m_cash_discount_balance_isSet = true;
}

bool OAISupplierPaymentAdjustmentDto::is_cash_discount_balance_Set() const{
    return m_cash_discount_balance_isSet;
}

bool OAISupplierPaymentAdjustmentDto::is_cash_discount_balance_Valid() const{
    return m_cash_discount_balance_isValid;
}

QDateTime OAISupplierPaymentAdjustmentDto::getCashDiscountDate() const {
    return m_cash_discount_date;
}
void OAISupplierPaymentAdjustmentDto::setCashDiscountDate(const QDateTime &cash_discount_date) {
    m_cash_discount_date = cash_discount_date;
    m_cash_discount_date_isSet = true;
}

bool OAISupplierPaymentAdjustmentDto::is_cash_discount_date_Set() const{
    return m_cash_discount_date_isSet;
}

bool OAISupplierPaymentAdjustmentDto::is_cash_discount_date_Valid() const{
    return m_cash_discount_date_isValid;
}

double OAISupplierPaymentAdjustmentDto::getCashDiscountTaken() const {
    return m_cash_discount_taken;
}
void OAISupplierPaymentAdjustmentDto::setCashDiscountTaken(const double &cash_discount_taken) {
    m_cash_discount_taken = cash_discount_taken;
    m_cash_discount_taken_isSet = true;
}

bool OAISupplierPaymentAdjustmentDto::is_cash_discount_taken_Set() const{
    return m_cash_discount_taken_isSet;
}

bool OAISupplierPaymentAdjustmentDto::is_cash_discount_taken_Valid() const{
    return m_cash_discount_taken_isValid;
}

QString OAISupplierPaymentAdjustmentDto::getCurrency() const {
    return m_currency;
}
void OAISupplierPaymentAdjustmentDto::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAISupplierPaymentAdjustmentDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAISupplierPaymentAdjustmentDto::is_currency_Valid() const{
    return m_currency_isValid;
}

QDateTime OAISupplierPaymentAdjustmentDto::getDate() const {
    return m_date;
}
void OAISupplierPaymentAdjustmentDto::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAISupplierPaymentAdjustmentDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAISupplierPaymentAdjustmentDto::is_date_Valid() const{
    return m_date_isValid;
}

QString OAISupplierPaymentAdjustmentDto::getDescription() const {
    return m_description;
}
void OAISupplierPaymentAdjustmentDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISupplierPaymentAdjustmentDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAISupplierPaymentAdjustmentDto::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISupplierPaymentAdjustmentDto::getDocType() const {
    return m_doc_type;
}
void OAISupplierPaymentAdjustmentDto::setDocType(const QString &doc_type) {
    m_doc_type = doc_type;
    m_doc_type_isSet = true;
}

bool OAISupplierPaymentAdjustmentDto::is_doc_type_Set() const{
    return m_doc_type_isSet;
}

bool OAISupplierPaymentAdjustmentDto::is_doc_type_Valid() const{
    return m_doc_type_isValid;
}

QDateTime OAISupplierPaymentAdjustmentDto::getDueDate() const {
    return m_due_date;
}
void OAISupplierPaymentAdjustmentDto::setDueDate(const QDateTime &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAISupplierPaymentAdjustmentDto::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAISupplierPaymentAdjustmentDto::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QString OAISupplierPaymentAdjustmentDto::getInvoiceRefNbr() const {
    return m_invoice_ref_nbr;
}
void OAISupplierPaymentAdjustmentDto::setInvoiceRefNbr(const QString &invoice_ref_nbr) {
    m_invoice_ref_nbr = invoice_ref_nbr;
    m_invoice_ref_nbr_isSet = true;
}

bool OAISupplierPaymentAdjustmentDto::is_invoice_ref_nbr_Set() const{
    return m_invoice_ref_nbr_isSet;
}

bool OAISupplierPaymentAdjustmentDto::is_invoice_ref_nbr_Valid() const{
    return m_invoice_ref_nbr_isValid;
}

QString OAISupplierPaymentAdjustmentDto::getPostPeriod() const {
    return m_post_period;
}
void OAISupplierPaymentAdjustmentDto::setPostPeriod(const QString &post_period) {
    m_post_period = post_period;
    m_post_period_isSet = true;
}

bool OAISupplierPaymentAdjustmentDto::is_post_period_Set() const{
    return m_post_period_isSet;
}

bool OAISupplierPaymentAdjustmentDto::is_post_period_Valid() const{
    return m_post_period_isValid;
}

QString OAISupplierPaymentAdjustmentDto::getSupplierRef() const {
    return m_supplier_ref;
}
void OAISupplierPaymentAdjustmentDto::setSupplierRef(const QString &supplier_ref) {
    m_supplier_ref = supplier_ref;
    m_supplier_ref_isSet = true;
}

bool OAISupplierPaymentAdjustmentDto::is_supplier_ref_Set() const{
    return m_supplier_ref_isSet;
}

bool OAISupplierPaymentAdjustmentDto::is_supplier_ref_Valid() const{
    return m_supplier_ref_isValid;
}

double OAISupplierPaymentAdjustmentDto::getWithholdingTax() const {
    return m_withholding_tax;
}
void OAISupplierPaymentAdjustmentDto::setWithholdingTax(const double &withholding_tax) {
    m_withholding_tax = withholding_tax;
    m_withholding_tax_isSet = true;
}

bool OAISupplierPaymentAdjustmentDto::is_withholding_tax_Set() const{
    return m_withholding_tax_isSet;
}

bool OAISupplierPaymentAdjustmentDto::is_withholding_tax_Valid() const{
    return m_withholding_tax_isValid;
}

bool OAISupplierPaymentAdjustmentDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_discount_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_discount_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_discount_taken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_ref_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_withholding_tax_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupplierPaymentAdjustmentDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
