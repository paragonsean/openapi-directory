/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreditTermDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreditTermDto::OAICreditTermDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreditTermDto::OAICreditTermDto() {
    this->initializeModel();
}

OAICreditTermDto::~OAICreditTermDto() {}

void OAICreditTermDto::initializeModel() {

    m_calculation_type_isSet = false;
    m_calculation_type_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_delay_days_isSet = false;
    m_delay_days_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discount_day_isSet = false;
    m_discount_day_isValid = false;

    m_discount_percent_isSet = false;
    m_discount_percent_isValid = false;

    m_discount_type_isSet = false;
    m_discount_type_isValid = false;

    m_due_date_type_isSet = false;
    m_due_date_type_isValid = false;

    m_due_day1_isSet = false;
    m_due_day1_isValid = false;

    m_due_day1_day_from1_isSet = false;
    m_due_day1_day_from1_isValid = false;

    m_due_day1_day_to1_isSet = false;
    m_due_day1_day_to1_isValid = false;

    m_due_day2_isSet = false;
    m_due_day2_isValid = false;

    m_due_day2_day_from1_isSet = false;
    m_due_day2_day_from1_isValid = false;

    m_due_day2_day_to1_isSet = false;
    m_due_day2_day_to1_isValid = false;

    m_instalment_frequency_isSet = false;
    m_instalment_frequency_isValid = false;

    m_instalment_method_isSet = false;
    m_instalment_method_isValid = false;

    m_instalment_type_isSet = false;
    m_instalment_type_isValid = false;

    m_instalments_schedule_isSet = false;
    m_instalments_schedule_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_move_due_date_if_on_the_weekend_isSet = false;
    m_move_due_date_if_on_the_weekend_isValid = false;

    m_number_of_instalments_isSet = false;
    m_number_of_instalments_isValid = false;

    m_terms_id_isSet = false;
    m_terms_id_isValid = false;

    m_visible_to_isSet = false;
    m_visible_to_isValid = false;
}

void OAICreditTermDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreditTermDto::fromJsonObject(QJsonObject json) {

    m_calculation_type_isValid = ::OpenAPI::fromJsonValue(m_calculation_type, json[QString("calculationType")]);
    m_calculation_type_isSet = !json[QString("calculationType")].isNull() && m_calculation_type_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_delay_days_isValid = ::OpenAPI::fromJsonValue(m_delay_days, json[QString("delayDays")]);
    m_delay_days_isSet = !json[QString("delayDays")].isNull() && m_delay_days_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discount_day_isValid = ::OpenAPI::fromJsonValue(m_discount_day, json[QString("discountDay")]);
    m_discount_day_isSet = !json[QString("discountDay")].isNull() && m_discount_day_isValid;

    m_discount_percent_isValid = ::OpenAPI::fromJsonValue(m_discount_percent, json[QString("discountPercent")]);
    m_discount_percent_isSet = !json[QString("discountPercent")].isNull() && m_discount_percent_isValid;

    m_discount_type_isValid = ::OpenAPI::fromJsonValue(m_discount_type, json[QString("discountType")]);
    m_discount_type_isSet = !json[QString("discountType")].isNull() && m_discount_type_isValid;

    m_due_date_type_isValid = ::OpenAPI::fromJsonValue(m_due_date_type, json[QString("dueDateType")]);
    m_due_date_type_isSet = !json[QString("dueDateType")].isNull() && m_due_date_type_isValid;

    m_due_day1_isValid = ::OpenAPI::fromJsonValue(m_due_day1, json[QString("dueDay1")]);
    m_due_day1_isSet = !json[QString("dueDay1")].isNull() && m_due_day1_isValid;

    m_due_day1_day_from1_isValid = ::OpenAPI::fromJsonValue(m_due_day1_day_from1, json[QString("dueDay1DayFrom1")]);
    m_due_day1_day_from1_isSet = !json[QString("dueDay1DayFrom1")].isNull() && m_due_day1_day_from1_isValid;

    m_due_day1_day_to1_isValid = ::OpenAPI::fromJsonValue(m_due_day1_day_to1, json[QString("dueDay1DayTo1")]);
    m_due_day1_day_to1_isSet = !json[QString("dueDay1DayTo1")].isNull() && m_due_day1_day_to1_isValid;

    m_due_day2_isValid = ::OpenAPI::fromJsonValue(m_due_day2, json[QString("dueDay2")]);
    m_due_day2_isSet = !json[QString("dueDay2")].isNull() && m_due_day2_isValid;

    m_due_day2_day_from1_isValid = ::OpenAPI::fromJsonValue(m_due_day2_day_from1, json[QString("dueDay2DayFrom1")]);
    m_due_day2_day_from1_isSet = !json[QString("dueDay2DayFrom1")].isNull() && m_due_day2_day_from1_isValid;

    m_due_day2_day_to1_isValid = ::OpenAPI::fromJsonValue(m_due_day2_day_to1, json[QString("dueDay2DayTo1")]);
    m_due_day2_day_to1_isSet = !json[QString("dueDay2DayTo1")].isNull() && m_due_day2_day_to1_isValid;

    m_instalment_frequency_isValid = ::OpenAPI::fromJsonValue(m_instalment_frequency, json[QString("instalmentFrequency")]);
    m_instalment_frequency_isSet = !json[QString("instalmentFrequency")].isNull() && m_instalment_frequency_isValid;

    m_instalment_method_isValid = ::OpenAPI::fromJsonValue(m_instalment_method, json[QString("instalmentMethod")]);
    m_instalment_method_isSet = !json[QString("instalmentMethod")].isNull() && m_instalment_method_isValid;

    m_instalment_type_isValid = ::OpenAPI::fromJsonValue(m_instalment_type, json[QString("instalmentType")]);
    m_instalment_type_isSet = !json[QString("instalmentType")].isNull() && m_instalment_type_isValid;

    m_instalments_schedule_isValid = ::OpenAPI::fromJsonValue(m_instalments_schedule, json[QString("instalmentsSchedule")]);
    m_instalments_schedule_isSet = !json[QString("instalmentsSchedule")].isNull() && m_instalments_schedule_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_move_due_date_if_on_the_weekend_isValid = ::OpenAPI::fromJsonValue(m_move_due_date_if_on_the_weekend, json[QString("moveDueDateIfOnTheWeekend")]);
    m_move_due_date_if_on_the_weekend_isSet = !json[QString("moveDueDateIfOnTheWeekend")].isNull() && m_move_due_date_if_on_the_weekend_isValid;

    m_number_of_instalments_isValid = ::OpenAPI::fromJsonValue(m_number_of_instalments, json[QString("numberOfInstalments")]);
    m_number_of_instalments_isSet = !json[QString("numberOfInstalments")].isNull() && m_number_of_instalments_isValid;

    m_terms_id_isValid = ::OpenAPI::fromJsonValue(m_terms_id, json[QString("termsId")]);
    m_terms_id_isSet = !json[QString("termsId")].isNull() && m_terms_id_isValid;

    m_visible_to_isValid = ::OpenAPI::fromJsonValue(m_visible_to, json[QString("visibleTo")]);
    m_visible_to_isSet = !json[QString("visibleTo")].isNull() && m_visible_to_isValid;
}

QString OAICreditTermDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreditTermDto::asJsonObject() const {
    QJsonObject obj;
    if (m_calculation_type_isSet) {
        obj.insert(QString("calculationType"), ::OpenAPI::toJsonValue(m_calculation_type));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_delay_days_isSet) {
        obj.insert(QString("delayDays"), ::OpenAPI::toJsonValue(m_delay_days));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discount_day_isSet) {
        obj.insert(QString("discountDay"), ::OpenAPI::toJsonValue(m_discount_day));
    }
    if (m_discount_percent_isSet) {
        obj.insert(QString("discountPercent"), ::OpenAPI::toJsonValue(m_discount_percent));
    }
    if (m_discount_type_isSet) {
        obj.insert(QString("discountType"), ::OpenAPI::toJsonValue(m_discount_type));
    }
    if (m_due_date_type_isSet) {
        obj.insert(QString("dueDateType"), ::OpenAPI::toJsonValue(m_due_date_type));
    }
    if (m_due_day1_isSet) {
        obj.insert(QString("dueDay1"), ::OpenAPI::toJsonValue(m_due_day1));
    }
    if (m_due_day1_day_from1_isSet) {
        obj.insert(QString("dueDay1DayFrom1"), ::OpenAPI::toJsonValue(m_due_day1_day_from1));
    }
    if (m_due_day1_day_to1_isSet) {
        obj.insert(QString("dueDay1DayTo1"), ::OpenAPI::toJsonValue(m_due_day1_day_to1));
    }
    if (m_due_day2_isSet) {
        obj.insert(QString("dueDay2"), ::OpenAPI::toJsonValue(m_due_day2));
    }
    if (m_due_day2_day_from1_isSet) {
        obj.insert(QString("dueDay2DayFrom1"), ::OpenAPI::toJsonValue(m_due_day2_day_from1));
    }
    if (m_due_day2_day_to1_isSet) {
        obj.insert(QString("dueDay2DayTo1"), ::OpenAPI::toJsonValue(m_due_day2_day_to1));
    }
    if (m_instalment_frequency_isSet) {
        obj.insert(QString("instalmentFrequency"), ::OpenAPI::toJsonValue(m_instalment_frequency));
    }
    if (m_instalment_method_isSet) {
        obj.insert(QString("instalmentMethod"), ::OpenAPI::toJsonValue(m_instalment_method));
    }
    if (m_instalment_type_isSet) {
        obj.insert(QString("instalmentType"), ::OpenAPI::toJsonValue(m_instalment_type));
    }
    if (m_instalments_schedule.size() > 0) {
        obj.insert(QString("instalmentsSchedule"), ::OpenAPI::toJsonValue(m_instalments_schedule));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_move_due_date_if_on_the_weekend_isSet) {
        obj.insert(QString("moveDueDateIfOnTheWeekend"), ::OpenAPI::toJsonValue(m_move_due_date_if_on_the_weekend));
    }
    if (m_number_of_instalments_isSet) {
        obj.insert(QString("numberOfInstalments"), ::OpenAPI::toJsonValue(m_number_of_instalments));
    }
    if (m_terms_id_isSet) {
        obj.insert(QString("termsId"), ::OpenAPI::toJsonValue(m_terms_id));
    }
    if (m_visible_to_isSet) {
        obj.insert(QString("visibleTo"), ::OpenAPI::toJsonValue(m_visible_to));
    }
    return obj;
}

QString OAICreditTermDto::getCalculationType() const {
    return m_calculation_type;
}
void OAICreditTermDto::setCalculationType(const QString &calculation_type) {
    m_calculation_type = calculation_type;
    m_calculation_type_isSet = true;
}

bool OAICreditTermDto::is_calculation_type_Set() const{
    return m_calculation_type_isSet;
}

bool OAICreditTermDto::is_calculation_type_Valid() const{
    return m_calculation_type_isValid;
}

QDateTime OAICreditTermDto::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAICreditTermDto::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAICreditTermDto::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAICreditTermDto::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

qint32 OAICreditTermDto::getDelayDays() const {
    return m_delay_days;
}
void OAICreditTermDto::setDelayDays(const qint32 &delay_days) {
    m_delay_days = delay_days;
    m_delay_days_isSet = true;
}

bool OAICreditTermDto::is_delay_days_Set() const{
    return m_delay_days_isSet;
}

bool OAICreditTermDto::is_delay_days_Valid() const{
    return m_delay_days_isValid;
}

QString OAICreditTermDto::getDescription() const {
    return m_description;
}
void OAICreditTermDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreditTermDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreditTermDto::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAICreditTermDto::getDiscountDay() const {
    return m_discount_day;
}
void OAICreditTermDto::setDiscountDay(const qint32 &discount_day) {
    m_discount_day = discount_day;
    m_discount_day_isSet = true;
}

bool OAICreditTermDto::is_discount_day_Set() const{
    return m_discount_day_isSet;
}

bool OAICreditTermDto::is_discount_day_Valid() const{
    return m_discount_day_isValid;
}

double OAICreditTermDto::getDiscountPercent() const {
    return m_discount_percent;
}
void OAICreditTermDto::setDiscountPercent(const double &discount_percent) {
    m_discount_percent = discount_percent;
    m_discount_percent_isSet = true;
}

bool OAICreditTermDto::is_discount_percent_Set() const{
    return m_discount_percent_isSet;
}

bool OAICreditTermDto::is_discount_percent_Valid() const{
    return m_discount_percent_isValid;
}

QString OAICreditTermDto::getDiscountType() const {
    return m_discount_type;
}
void OAICreditTermDto::setDiscountType(const QString &discount_type) {
    m_discount_type = discount_type;
    m_discount_type_isSet = true;
}

bool OAICreditTermDto::is_discount_type_Set() const{
    return m_discount_type_isSet;
}

bool OAICreditTermDto::is_discount_type_Valid() const{
    return m_discount_type_isValid;
}

QString OAICreditTermDto::getDueDateType() const {
    return m_due_date_type;
}
void OAICreditTermDto::setDueDateType(const QString &due_date_type) {
    m_due_date_type = due_date_type;
    m_due_date_type_isSet = true;
}

bool OAICreditTermDto::is_due_date_type_Set() const{
    return m_due_date_type_isSet;
}

bool OAICreditTermDto::is_due_date_type_Valid() const{
    return m_due_date_type_isValid;
}

qint32 OAICreditTermDto::getDueDay1() const {
    return m_due_day1;
}
void OAICreditTermDto::setDueDay1(const qint32 &due_day1) {
    m_due_day1 = due_day1;
    m_due_day1_isSet = true;
}

bool OAICreditTermDto::is_due_day1_Set() const{
    return m_due_day1_isSet;
}

bool OAICreditTermDto::is_due_day1_Valid() const{
    return m_due_day1_isValid;
}

qint32 OAICreditTermDto::getDueDay1DayFrom1() const {
    return m_due_day1_day_from1;
}
void OAICreditTermDto::setDueDay1DayFrom1(const qint32 &due_day1_day_from1) {
    m_due_day1_day_from1 = due_day1_day_from1;
    m_due_day1_day_from1_isSet = true;
}

bool OAICreditTermDto::is_due_day1_day_from1_Set() const{
    return m_due_day1_day_from1_isSet;
}

bool OAICreditTermDto::is_due_day1_day_from1_Valid() const{
    return m_due_day1_day_from1_isValid;
}

qint32 OAICreditTermDto::getDueDay1DayTo1() const {
    return m_due_day1_day_to1;
}
void OAICreditTermDto::setDueDay1DayTo1(const qint32 &due_day1_day_to1) {
    m_due_day1_day_to1 = due_day1_day_to1;
    m_due_day1_day_to1_isSet = true;
}

bool OAICreditTermDto::is_due_day1_day_to1_Set() const{
    return m_due_day1_day_to1_isSet;
}

bool OAICreditTermDto::is_due_day1_day_to1_Valid() const{
    return m_due_day1_day_to1_isValid;
}

qint32 OAICreditTermDto::getDueDay2() const {
    return m_due_day2;
}
void OAICreditTermDto::setDueDay2(const qint32 &due_day2) {
    m_due_day2 = due_day2;
    m_due_day2_isSet = true;
}

bool OAICreditTermDto::is_due_day2_Set() const{
    return m_due_day2_isSet;
}

bool OAICreditTermDto::is_due_day2_Valid() const{
    return m_due_day2_isValid;
}

qint32 OAICreditTermDto::getDueDay2DayFrom1() const {
    return m_due_day2_day_from1;
}
void OAICreditTermDto::setDueDay2DayFrom1(const qint32 &due_day2_day_from1) {
    m_due_day2_day_from1 = due_day2_day_from1;
    m_due_day2_day_from1_isSet = true;
}

bool OAICreditTermDto::is_due_day2_day_from1_Set() const{
    return m_due_day2_day_from1_isSet;
}

bool OAICreditTermDto::is_due_day2_day_from1_Valid() const{
    return m_due_day2_day_from1_isValid;
}

qint32 OAICreditTermDto::getDueDay2DayTo1() const {
    return m_due_day2_day_to1;
}
void OAICreditTermDto::setDueDay2DayTo1(const qint32 &due_day2_day_to1) {
    m_due_day2_day_to1 = due_day2_day_to1;
    m_due_day2_day_to1_isSet = true;
}

bool OAICreditTermDto::is_due_day2_day_to1_Set() const{
    return m_due_day2_day_to1_isSet;
}

bool OAICreditTermDto::is_due_day2_day_to1_Valid() const{
    return m_due_day2_day_to1_isValid;
}

QString OAICreditTermDto::getInstalmentFrequency() const {
    return m_instalment_frequency;
}
void OAICreditTermDto::setInstalmentFrequency(const QString &instalment_frequency) {
    m_instalment_frequency = instalment_frequency;
    m_instalment_frequency_isSet = true;
}

bool OAICreditTermDto::is_instalment_frequency_Set() const{
    return m_instalment_frequency_isSet;
}

bool OAICreditTermDto::is_instalment_frequency_Valid() const{
    return m_instalment_frequency_isValid;
}

QString OAICreditTermDto::getInstalmentMethod() const {
    return m_instalment_method;
}
void OAICreditTermDto::setInstalmentMethod(const QString &instalment_method) {
    m_instalment_method = instalment_method;
    m_instalment_method_isSet = true;
}

bool OAICreditTermDto::is_instalment_method_Set() const{
    return m_instalment_method_isSet;
}

bool OAICreditTermDto::is_instalment_method_Valid() const{
    return m_instalment_method_isValid;
}

QString OAICreditTermDto::getInstalmentType() const {
    return m_instalment_type;
}
void OAICreditTermDto::setInstalmentType(const QString &instalment_type) {
    m_instalment_type = instalment_type;
    m_instalment_type_isSet = true;
}

bool OAICreditTermDto::is_instalment_type_Set() const{
    return m_instalment_type_isSet;
}

bool OAICreditTermDto::is_instalment_type_Valid() const{
    return m_instalment_type_isValid;
}

QList<OAIInstalmentSchedule> OAICreditTermDto::getInstalmentsSchedule() const {
    return m_instalments_schedule;
}
void OAICreditTermDto::setInstalmentsSchedule(const QList<OAIInstalmentSchedule> &instalments_schedule) {
    m_instalments_schedule = instalments_schedule;
    m_instalments_schedule_isSet = true;
}

bool OAICreditTermDto::is_instalments_schedule_Set() const{
    return m_instalments_schedule_isSet;
}

bool OAICreditTermDto::is_instalments_schedule_Valid() const{
    return m_instalments_schedule_isValid;
}

QDateTime OAICreditTermDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAICreditTermDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAICreditTermDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAICreditTermDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QString OAICreditTermDto::getMoveDueDateIfOnTheWeekend() const {
    return m_move_due_date_if_on_the_weekend;
}
void OAICreditTermDto::setMoveDueDateIfOnTheWeekend(const QString &move_due_date_if_on_the_weekend) {
    m_move_due_date_if_on_the_weekend = move_due_date_if_on_the_weekend;
    m_move_due_date_if_on_the_weekend_isSet = true;
}

bool OAICreditTermDto::is_move_due_date_if_on_the_weekend_Set() const{
    return m_move_due_date_if_on_the_weekend_isSet;
}

bool OAICreditTermDto::is_move_due_date_if_on_the_weekend_Valid() const{
    return m_move_due_date_if_on_the_weekend_isValid;
}

qint32 OAICreditTermDto::getNumberOfInstalments() const {
    return m_number_of_instalments;
}
void OAICreditTermDto::setNumberOfInstalments(const qint32 &number_of_instalments) {
    m_number_of_instalments = number_of_instalments;
    m_number_of_instalments_isSet = true;
}

bool OAICreditTermDto::is_number_of_instalments_Set() const{
    return m_number_of_instalments_isSet;
}

bool OAICreditTermDto::is_number_of_instalments_Valid() const{
    return m_number_of_instalments_isValid;
}

QString OAICreditTermDto::getTermsId() const {
    return m_terms_id;
}
void OAICreditTermDto::setTermsId(const QString &terms_id) {
    m_terms_id = terms_id;
    m_terms_id_isSet = true;
}

bool OAICreditTermDto::is_terms_id_Set() const{
    return m_terms_id_isSet;
}

bool OAICreditTermDto::is_terms_id_Valid() const{
    return m_terms_id_isValid;
}

QString OAICreditTermDto::getVisibleTo() const {
    return m_visible_to;
}
void OAICreditTermDto::setVisibleTo(const QString &visible_to) {
    m_visible_to = visible_to;
    m_visible_to_isSet = true;
}

bool OAICreditTermDto::is_visible_to_Set() const{
    return m_visible_to_isSet;
}

bool OAICreditTermDto::is_visible_to_Valid() const{
    return m_visible_to_isValid;
}

bool OAICreditTermDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calculation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delay_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_day1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_day1_day_from1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_day1_day_to1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_day2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_day2_day_from1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_day2_day_to1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instalment_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instalment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instalment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instalments_schedule.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_move_due_date_if_on_the_weekend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_instalments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreditTermDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
