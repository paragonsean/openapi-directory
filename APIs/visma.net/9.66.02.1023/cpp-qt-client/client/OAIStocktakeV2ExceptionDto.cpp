/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStocktakeV2ExceptionDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStocktakeV2ExceptionDto::OAIStocktakeV2ExceptionDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStocktakeV2ExceptionDto::OAIStocktakeV2ExceptionDto() {
    this->initializeModel();
}

OAIStocktakeV2ExceptionDto::~OAIStocktakeV2ExceptionDto() {}

void OAIStocktakeV2ExceptionDto::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_inventory_id_isSet = false;
    m_inventory_id_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_lot_serial_number_isSet = false;
    m_lot_serial_number_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_physical_quantity_isSet = false;
    m_physical_quantity_isValid = false;

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;
}

void OAIStocktakeV2ExceptionDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStocktakeV2ExceptionDto::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_inventory_id_isValid = ::OpenAPI::fromJsonValue(m_inventory_id, json[QString("inventoryId")]);
    m_inventory_id_isSet = !json[QString("inventoryId")].isNull() && m_inventory_id_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_lot_serial_number_isValid = ::OpenAPI::fromJsonValue(m_lot_serial_number, json[QString("lotSerialNumber")]);
    m_lot_serial_number_isSet = !json[QString("lotSerialNumber")].isNull() && m_lot_serial_number_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_physical_quantity_isValid = ::OpenAPI::fromJsonValue(m_physical_quantity, json[QString("physicalQuantity")]);
    m_physical_quantity_isSet = !json[QString("physicalQuantity")].isNull() && m_physical_quantity_isValid;

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("reasonCode")]);
    m_reason_code_isSet = !json[QString("reasonCode")].isNull() && m_reason_code_isValid;
}

QString OAIStocktakeV2ExceptionDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStocktakeV2ExceptionDto::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_inventory_id_isSet) {
        obj.insert(QString("inventoryId"), ::OpenAPI::toJsonValue(m_inventory_id));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_lot_serial_number_isSet) {
        obj.insert(QString("lotSerialNumber"), ::OpenAPI::toJsonValue(m_lot_serial_number));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_physical_quantity_isSet) {
        obj.insert(QString("physicalQuantity"), ::OpenAPI::toJsonValue(m_physical_quantity));
    }
    if (m_reason_code_isSet) {
        obj.insert(QString("reasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    return obj;
}

QString OAIStocktakeV2ExceptionDto::getErrorCode() const {
    return m_error_code;
}
void OAIStocktakeV2ExceptionDto::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIStocktakeV2ExceptionDto::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIStocktakeV2ExceptionDto::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QDateTime OAIStocktakeV2ExceptionDto::getExpirationDate() const {
    return m_expiration_date;
}
void OAIStocktakeV2ExceptionDto::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIStocktakeV2ExceptionDto::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIStocktakeV2ExceptionDto::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAIStocktakeV2ExceptionDto::getInventoryId() const {
    return m_inventory_id;
}
void OAIStocktakeV2ExceptionDto::setInventoryId(const QString &inventory_id) {
    m_inventory_id = inventory_id;
    m_inventory_id_isSet = true;
}

bool OAIStocktakeV2ExceptionDto::is_inventory_id_Set() const{
    return m_inventory_id_isSet;
}

bool OAIStocktakeV2ExceptionDto::is_inventory_id_Valid() const{
    return m_inventory_id_isValid;
}

QString OAIStocktakeV2ExceptionDto::getLocationId() const {
    return m_location_id;
}
void OAIStocktakeV2ExceptionDto::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIStocktakeV2ExceptionDto::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIStocktakeV2ExceptionDto::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIStocktakeV2ExceptionDto::getLotSerialNumber() const {
    return m_lot_serial_number;
}
void OAIStocktakeV2ExceptionDto::setLotSerialNumber(const QString &lot_serial_number) {
    m_lot_serial_number = lot_serial_number;
    m_lot_serial_number_isSet = true;
}

bool OAIStocktakeV2ExceptionDto::is_lot_serial_number_Set() const{
    return m_lot_serial_number_isSet;
}

bool OAIStocktakeV2ExceptionDto::is_lot_serial_number_Valid() const{
    return m_lot_serial_number_isValid;
}

QString OAIStocktakeV2ExceptionDto::getMessage() const {
    return m_message;
}
void OAIStocktakeV2ExceptionDto::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIStocktakeV2ExceptionDto::is_message_Set() const{
    return m_message_isSet;
}

bool OAIStocktakeV2ExceptionDto::is_message_Valid() const{
    return m_message_isValid;
}

double OAIStocktakeV2ExceptionDto::getPhysicalQuantity() const {
    return m_physical_quantity;
}
void OAIStocktakeV2ExceptionDto::setPhysicalQuantity(const double &physical_quantity) {
    m_physical_quantity = physical_quantity;
    m_physical_quantity_isSet = true;
}

bool OAIStocktakeV2ExceptionDto::is_physical_quantity_Set() const{
    return m_physical_quantity_isSet;
}

bool OAIStocktakeV2ExceptionDto::is_physical_quantity_Valid() const{
    return m_physical_quantity_isValid;
}

QString OAIStocktakeV2ExceptionDto::getReasonCode() const {
    return m_reason_code;
}
void OAIStocktakeV2ExceptionDto::setReasonCode(const QString &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAIStocktakeV2ExceptionDto::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAIStocktakeV2ExceptionDto::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

bool OAIStocktakeV2ExceptionDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStocktakeV2ExceptionDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
