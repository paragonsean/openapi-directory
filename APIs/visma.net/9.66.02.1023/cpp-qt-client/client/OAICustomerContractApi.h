/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomerContractApi_H
#define OAI_OAICustomerContractApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAICustomerContractDetailsDto.h"
#include "OAICustomerContractDto.h"
#include "OAICustomerContractRecurringSummaryDto.h"
#include "OAICustomerContractSummaryDto.h"
#include "OAICustomerContractUpdateDto.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomerContractApi : public QObject {
    Q_OBJECT

public:
    OAICustomerContractApi(const int timeOut = 0);
    ~OAICustomerContractApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  contract_id QString [required]
    * @param[in]  activation_date QDateTime [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerContractActivateContractBycontractId(const QString &contract_id, const ::OpenAPI::OptionalParam<QDateTime> &activation_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  contract_id QString [required]
    * @param[in]  activation_date QDateTime [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerContractActivateUpgradeBycontractId(const QString &contract_id, const ::OpenAPI::OptionalParam<QDateTime> &activation_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_customer_contract_update_dto OAICustomerContractUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerContractCreateCustomerContract(const OAICustomerContractUpdateDto &oai_customer_contract_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  contract_template QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  customer QString [optional]
    * @param[in]  expand_summary bool [optional]
    * @param[in]  expand_details bool [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  expand_attributes bool [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerContractGetAll(const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contract_template = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &expand_summary = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &expand_attributes = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  contract_id QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerContractGetCustomerContractBycontractId(const QString &contract_id, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  contract_id QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerContractGetCustomerContractDetailsBycontractId(const QString &contract_id, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  contract_id QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerContractGetCustomerContractRecurringSummaryBycontractId(const QString &contract_id, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  contract_id QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerContractGetCustomerContractSummaryBycontractId(const QString &contract_id, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  contract_id QString [required]
    * @param[in]  oai_customer_contract_update_dto OAICustomerContractUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerContractPutBycontractId(const QString &contract_id, const OAICustomerContractUpdateDto &oai_customer_contract_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  contract_id QString [required]
    * @param[in]  activation_date QDateTime [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerContractSetupAndActivateContractBycontractId(const QString &contract_id, const ::OpenAPI::OptionalParam<QDateTime> &activation_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  contract_id QString [required]
    * @param[in]  setup_date QDateTime [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerContractSetupContractBycontractId(const QString &contract_id, const ::OpenAPI::OptionalParam<QDateTime> &setup_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  contract_id QString [required]
    * @param[in]  termination_date QDateTime [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerContractTerminateContractBycontractId(const QString &contract_id, const ::OpenAPI::OptionalParam<QDateTime> &termination_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  contract_id QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerContractUpgradeContractBycontractId(const QString &contract_id, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void customerContractActivateContractBycontractIdCallback(OAIHttpRequestWorker *worker);
    void customerContractActivateUpgradeBycontractIdCallback(OAIHttpRequestWorker *worker);
    void customerContractCreateCustomerContractCallback(OAIHttpRequestWorker *worker);
    void customerContractGetAllCallback(OAIHttpRequestWorker *worker);
    void customerContractGetCustomerContractBycontractIdCallback(OAIHttpRequestWorker *worker);
    void customerContractGetCustomerContractDetailsBycontractIdCallback(OAIHttpRequestWorker *worker);
    void customerContractGetCustomerContractRecurringSummaryBycontractIdCallback(OAIHttpRequestWorker *worker);
    void customerContractGetCustomerContractSummaryBycontractIdCallback(OAIHttpRequestWorker *worker);
    void customerContractPutBycontractIdCallback(OAIHttpRequestWorker *worker);
    void customerContractSetupAndActivateContractBycontractIdCallback(OAIHttpRequestWorker *worker);
    void customerContractSetupContractBycontractIdCallback(OAIHttpRequestWorker *worker);
    void customerContractTerminateContractBycontractIdCallback(OAIHttpRequestWorker *worker);
    void customerContractUpgradeContractBycontractIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void customerContractActivateContractBycontractIdSignal(OAIObject summary);
    void customerContractActivateUpgradeBycontractIdSignal(OAIObject summary);
    void customerContractCreateCustomerContractSignal(OAIObject summary);
    void customerContractGetAllSignal(QList<OAICustomerContractDto> summary);
    void customerContractGetCustomerContractBycontractIdSignal(OAICustomerContractDto summary);
    void customerContractGetCustomerContractDetailsBycontractIdSignal(OAICustomerContractDetailsDto summary);
    void customerContractGetCustomerContractRecurringSummaryBycontractIdSignal(OAICustomerContractRecurringSummaryDto summary);
    void customerContractGetCustomerContractSummaryBycontractIdSignal(OAICustomerContractSummaryDto summary);
    void customerContractPutBycontractIdSignal(OAIBackgroundApiAcceptedDto summary);
    void customerContractSetupAndActivateContractBycontractIdSignal(OAIObject summary);
    void customerContractSetupContractBycontractIdSignal(OAIObject summary);
    void customerContractTerminateContractBycontractIdSignal(OAIObject summary);
    void customerContractUpgradeContractBycontractIdSignal(OAIObject summary);


    void customerContractActivateContractBycontractIdSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void customerContractActivateUpgradeBycontractIdSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void customerContractCreateCustomerContractSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void customerContractGetAllSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomerContractDto> summary);
    void customerContractGetCustomerContractBycontractIdSignalFull(OAIHttpRequestWorker *worker, OAICustomerContractDto summary);
    void customerContractGetCustomerContractDetailsBycontractIdSignalFull(OAIHttpRequestWorker *worker, OAICustomerContractDetailsDto summary);
    void customerContractGetCustomerContractRecurringSummaryBycontractIdSignalFull(OAIHttpRequestWorker *worker, OAICustomerContractRecurringSummaryDto summary);
    void customerContractGetCustomerContractSummaryBycontractIdSignalFull(OAIHttpRequestWorker *worker, OAICustomerContractSummaryDto summary);
    void customerContractPutBycontractIdSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);
    void customerContractSetupAndActivateContractBycontractIdSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void customerContractSetupContractBycontractIdSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void customerContractTerminateContractBycontractIdSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void customerContractUpgradeContractBycontractIdSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use customerContractActivateContractBycontractIdSignalError() instead")
    void customerContractActivateContractBycontractIdSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractActivateContractBycontractIdSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractActivateUpgradeBycontractIdSignalError() instead")
    void customerContractActivateUpgradeBycontractIdSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractActivateUpgradeBycontractIdSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractCreateCustomerContractSignalError() instead")
    void customerContractCreateCustomerContractSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractCreateCustomerContractSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractGetAllSignalError() instead")
    void customerContractGetAllSignalE(QList<OAICustomerContractDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractGetAllSignalError(QList<OAICustomerContractDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractGetCustomerContractBycontractIdSignalError() instead")
    void customerContractGetCustomerContractBycontractIdSignalE(OAICustomerContractDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractGetCustomerContractBycontractIdSignalError(OAICustomerContractDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractGetCustomerContractDetailsBycontractIdSignalError() instead")
    void customerContractGetCustomerContractDetailsBycontractIdSignalE(OAICustomerContractDetailsDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractGetCustomerContractDetailsBycontractIdSignalError(OAICustomerContractDetailsDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractGetCustomerContractRecurringSummaryBycontractIdSignalError() instead")
    void customerContractGetCustomerContractRecurringSummaryBycontractIdSignalE(OAICustomerContractRecurringSummaryDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractGetCustomerContractRecurringSummaryBycontractIdSignalError(OAICustomerContractRecurringSummaryDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractGetCustomerContractSummaryBycontractIdSignalError() instead")
    void customerContractGetCustomerContractSummaryBycontractIdSignalE(OAICustomerContractSummaryDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractGetCustomerContractSummaryBycontractIdSignalError(OAICustomerContractSummaryDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractPutBycontractIdSignalError() instead")
    void customerContractPutBycontractIdSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractPutBycontractIdSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractSetupAndActivateContractBycontractIdSignalError() instead")
    void customerContractSetupAndActivateContractBycontractIdSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractSetupAndActivateContractBycontractIdSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractSetupContractBycontractIdSignalError() instead")
    void customerContractSetupContractBycontractIdSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractSetupContractBycontractIdSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractTerminateContractBycontractIdSignalError() instead")
    void customerContractTerminateContractBycontractIdSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractTerminateContractBycontractIdSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractUpgradeContractBycontractIdSignalError() instead")
    void customerContractUpgradeContractBycontractIdSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractUpgradeContractBycontractIdSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use customerContractActivateContractBycontractIdSignalErrorFull() instead")
    void customerContractActivateContractBycontractIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractActivateContractBycontractIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractActivateUpgradeBycontractIdSignalErrorFull() instead")
    void customerContractActivateUpgradeBycontractIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractActivateUpgradeBycontractIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractCreateCustomerContractSignalErrorFull() instead")
    void customerContractCreateCustomerContractSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractCreateCustomerContractSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractGetAllSignalErrorFull() instead")
    void customerContractGetAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractGetAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractGetCustomerContractBycontractIdSignalErrorFull() instead")
    void customerContractGetCustomerContractBycontractIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractGetCustomerContractBycontractIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractGetCustomerContractDetailsBycontractIdSignalErrorFull() instead")
    void customerContractGetCustomerContractDetailsBycontractIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractGetCustomerContractDetailsBycontractIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractGetCustomerContractRecurringSummaryBycontractIdSignalErrorFull() instead")
    void customerContractGetCustomerContractRecurringSummaryBycontractIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractGetCustomerContractRecurringSummaryBycontractIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractGetCustomerContractSummaryBycontractIdSignalErrorFull() instead")
    void customerContractGetCustomerContractSummaryBycontractIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractGetCustomerContractSummaryBycontractIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractPutBycontractIdSignalErrorFull() instead")
    void customerContractPutBycontractIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractPutBycontractIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractSetupAndActivateContractBycontractIdSignalErrorFull() instead")
    void customerContractSetupAndActivateContractBycontractIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractSetupAndActivateContractBycontractIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractSetupContractBycontractIdSignalErrorFull() instead")
    void customerContractSetupContractBycontractIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractSetupContractBycontractIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractTerminateContractBycontractIdSignalErrorFull() instead")
    void customerContractTerminateContractBycontractIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractTerminateContractBycontractIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerContractUpgradeContractBycontractIdSignalErrorFull() instead")
    void customerContractUpgradeContractBycontractIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerContractUpgradeContractBycontractIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
