/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectTransactionDocumentDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectTransactionDocumentDto::OAIProjectTransactionDocumentDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectTransactionDocumentDto::OAIProjectTransactionDocumentDto() {
    this->initializeModel();
}

OAIProjectTransactionDocumentDto::~OAIProjectTransactionDocumentDto() {}

void OAIProjectTransactionDocumentDto::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_module_isSet = false;
    m_module_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_orig_doc_nbr_isSet = false;
    m_orig_doc_nbr_isValid = false;

    m_orig_doc_type_isSet = false;
    m_orig_doc_type_isValid = false;

    m_ref_nbr_isSet = false;
    m_ref_nbr_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIProjectTransactionDocumentDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectTransactionDocumentDto::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_module_isValid = ::OpenAPI::fromJsonValue(m_module, json[QString("module")]);
    m_module_isSet = !json[QString("module")].isNull() && m_module_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_orig_doc_nbr_isValid = ::OpenAPI::fromJsonValue(m_orig_doc_nbr, json[QString("origDocNbr")]);
    m_orig_doc_nbr_isSet = !json[QString("origDocNbr")].isNull() && m_orig_doc_nbr_isValid;

    m_orig_doc_type_isValid = ::OpenAPI::fromJsonValue(m_orig_doc_type, json[QString("origDocType")]);
    m_orig_doc_type_isSet = !json[QString("origDocType")].isNull() && m_orig_doc_type_isValid;

    m_ref_nbr_isValid = ::OpenAPI::fromJsonValue(m_ref_nbr, json[QString("refNbr")]);
    m_ref_nbr_isSet = !json[QString("refNbr")].isNull() && m_ref_nbr_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIProjectTransactionDocumentDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectTransactionDocumentDto::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_module_isSet) {
        obj.insert(QString("module"), ::OpenAPI::toJsonValue(m_module));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_orig_doc_nbr_isSet) {
        obj.insert(QString("origDocNbr"), ::OpenAPI::toJsonValue(m_orig_doc_nbr));
    }
    if (m_orig_doc_type_isSet) {
        obj.insert(QString("origDocType"), ::OpenAPI::toJsonValue(m_orig_doc_type));
    }
    if (m_ref_nbr_isSet) {
        obj.insert(QString("refNbr"), ::OpenAPI::toJsonValue(m_ref_nbr));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIProjectTransactionDocumentDto::getDescription() const {
    return m_description;
}
void OAIProjectTransactionDocumentDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProjectTransactionDocumentDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProjectTransactionDocumentDto::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIProjectTransactionDocumentDto::getErrorInfo() const {
    return m_error_info;
}
void OAIProjectTransactionDocumentDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIProjectTransactionDocumentDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIProjectTransactionDocumentDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

QList<OAIProjectTransactionLineDto> OAIProjectTransactionDocumentDto::getLines() const {
    return m_lines;
}
void OAIProjectTransactionDocumentDto::setLines(const QList<OAIProjectTransactionLineDto> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAIProjectTransactionDocumentDto::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAIProjectTransactionDocumentDto::is_lines_Valid() const{
    return m_lines_isValid;
}

OAIMetadataDto OAIProjectTransactionDocumentDto::getMetadata() const {
    return m_metadata;
}
void OAIProjectTransactionDocumentDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIProjectTransactionDocumentDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIProjectTransactionDocumentDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIProjectTransactionDocumentDto::getModule() const {
    return m_module;
}
void OAIProjectTransactionDocumentDto::setModule(const QString &module) {
    m_module = module;
    m_module_isSet = true;
}

bool OAIProjectTransactionDocumentDto::is_module_Set() const{
    return m_module_isSet;
}

bool OAIProjectTransactionDocumentDto::is_module_Valid() const{
    return m_module_isValid;
}

QString OAIProjectTransactionDocumentDto::getNote() const {
    return m_note;
}
void OAIProjectTransactionDocumentDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIProjectTransactionDocumentDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAIProjectTransactionDocumentDto::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIProjectTransactionDocumentDto::getOrigDocNbr() const {
    return m_orig_doc_nbr;
}
void OAIProjectTransactionDocumentDto::setOrigDocNbr(const QString &orig_doc_nbr) {
    m_orig_doc_nbr = orig_doc_nbr;
    m_orig_doc_nbr_isSet = true;
}

bool OAIProjectTransactionDocumentDto::is_orig_doc_nbr_Set() const{
    return m_orig_doc_nbr_isSet;
}

bool OAIProjectTransactionDocumentDto::is_orig_doc_nbr_Valid() const{
    return m_orig_doc_nbr_isValid;
}

QString OAIProjectTransactionDocumentDto::getOrigDocType() const {
    return m_orig_doc_type;
}
void OAIProjectTransactionDocumentDto::setOrigDocType(const QString &orig_doc_type) {
    m_orig_doc_type = orig_doc_type;
    m_orig_doc_type_isSet = true;
}

bool OAIProjectTransactionDocumentDto::is_orig_doc_type_Set() const{
    return m_orig_doc_type_isSet;
}

bool OAIProjectTransactionDocumentDto::is_orig_doc_type_Valid() const{
    return m_orig_doc_type_isValid;
}

QString OAIProjectTransactionDocumentDto::getRefNbr() const {
    return m_ref_nbr;
}
void OAIProjectTransactionDocumentDto::setRefNbr(const QString &ref_nbr) {
    m_ref_nbr = ref_nbr;
    m_ref_nbr_isSet = true;
}

bool OAIProjectTransactionDocumentDto::is_ref_nbr_Set() const{
    return m_ref_nbr_isSet;
}

bool OAIProjectTransactionDocumentDto::is_ref_nbr_Valid() const{
    return m_ref_nbr_isValid;
}

QString OAIProjectTransactionDocumentDto::getStatus() const {
    return m_status;
}
void OAIProjectTransactionDocumentDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProjectTransactionDocumentDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProjectTransactionDocumentDto::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIProjectTransactionDocumentDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orig_doc_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orig_doc_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectTransactionDocumentDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
