/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStocktakeV2Dto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStocktakeV2Dto::OAIStocktakeV2Dto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStocktakeV2Dto::OAIStocktakeV2Dto() {
    this->initializeModel();
}

OAIStocktakeV2Dto::~OAIStocktakeV2Dto() {}

void OAIStocktakeV2Dto::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_freeze_date_isSet = false;
    m_freeze_date_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_number_of_lines_isSet = false;
    m_number_of_lines_isValid = false;

    m_physical_qty_isSet = false;
    m_physical_qty_isValid = false;

    m_reference_nbr_isSet = false;
    m_reference_nbr_isValid = false;

    m_summary_status_isSet = false;
    m_summary_status_isValid = false;

    m_variance_cost_isSet = false;
    m_variance_cost_isValid = false;

    m_variance_qty_isSet = false;
    m_variance_qty_isValid = false;
}

void OAIStocktakeV2Dto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStocktakeV2Dto::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_freeze_date_isValid = ::OpenAPI::fromJsonValue(m_freeze_date, json[QString("freezeDate")]);
    m_freeze_date_isSet = !json[QString("freezeDate")].isNull() && m_freeze_date_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_number_of_lines_isValid = ::OpenAPI::fromJsonValue(m_number_of_lines, json[QString("numberOfLines")]);
    m_number_of_lines_isSet = !json[QString("numberOfLines")].isNull() && m_number_of_lines_isValid;

    m_physical_qty_isValid = ::OpenAPI::fromJsonValue(m_physical_qty, json[QString("physicalQty")]);
    m_physical_qty_isSet = !json[QString("physicalQty")].isNull() && m_physical_qty_isValid;

    m_reference_nbr_isValid = ::OpenAPI::fromJsonValue(m_reference_nbr, json[QString("referenceNbr")]);
    m_reference_nbr_isSet = !json[QString("referenceNbr")].isNull() && m_reference_nbr_isValid;

    m_summary_status_isValid = ::OpenAPI::fromJsonValue(m_summary_status, json[QString("summaryStatus")]);
    m_summary_status_isSet = !json[QString("summaryStatus")].isNull() && m_summary_status_isValid;

    m_variance_cost_isValid = ::OpenAPI::fromJsonValue(m_variance_cost, json[QString("varianceCost")]);
    m_variance_cost_isSet = !json[QString("varianceCost")].isNull() && m_variance_cost_isValid;

    m_variance_qty_isValid = ::OpenAPI::fromJsonValue(m_variance_qty, json[QString("varianceQty")]);
    m_variance_qty_isSet = !json[QString("varianceQty")].isNull() && m_variance_qty_isValid;
}

QString OAIStocktakeV2Dto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStocktakeV2Dto::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_freeze_date_isSet) {
        obj.insert(QString("freezeDate"), ::OpenAPI::toJsonValue(m_freeze_date));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_number_of_lines_isSet) {
        obj.insert(QString("numberOfLines"), ::OpenAPI::toJsonValue(m_number_of_lines));
    }
    if (m_physical_qty_isSet) {
        obj.insert(QString("physicalQty"), ::OpenAPI::toJsonValue(m_physical_qty));
    }
    if (m_reference_nbr_isSet) {
        obj.insert(QString("referenceNbr"), ::OpenAPI::toJsonValue(m_reference_nbr));
    }
    if (m_summary_status_isSet) {
        obj.insert(QString("summaryStatus"), ::OpenAPI::toJsonValue(m_summary_status));
    }
    if (m_variance_cost_isSet) {
        obj.insert(QString("varianceCost"), ::OpenAPI::toJsonValue(m_variance_cost));
    }
    if (m_variance_qty_isSet) {
        obj.insert(QString("varianceQty"), ::OpenAPI::toJsonValue(m_variance_qty));
    }
    return obj;
}

QString OAIStocktakeV2Dto::getDescription() const {
    return m_description;
}
void OAIStocktakeV2Dto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStocktakeV2Dto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStocktakeV2Dto::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIStocktakeV2Dto::getErrorInfo() const {
    return m_error_info;
}
void OAIStocktakeV2Dto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIStocktakeV2Dto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIStocktakeV2Dto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

QDateTime OAIStocktakeV2Dto::getFreezeDate() const {
    return m_freeze_date;
}
void OAIStocktakeV2Dto::setFreezeDate(const QDateTime &freeze_date) {
    m_freeze_date = freeze_date;
    m_freeze_date_isSet = true;
}

bool OAIStocktakeV2Dto::is_freeze_date_Set() const{
    return m_freeze_date_isSet;
}

bool OAIStocktakeV2Dto::is_freeze_date_Valid() const{
    return m_freeze_date_isValid;
}

QDateTime OAIStocktakeV2Dto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIStocktakeV2Dto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIStocktakeV2Dto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIStocktakeV2Dto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QList<OAIStocktakeLineV2Dto> OAIStocktakeV2Dto::getLines() const {
    return m_lines;
}
void OAIStocktakeV2Dto::setLines(const QList<OAIStocktakeLineV2Dto> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAIStocktakeV2Dto::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAIStocktakeV2Dto::is_lines_Valid() const{
    return m_lines_isValid;
}

OAIMetadataDto OAIStocktakeV2Dto::getMetadata() const {
    return m_metadata;
}
void OAIStocktakeV2Dto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIStocktakeV2Dto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIStocktakeV2Dto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

qint32 OAIStocktakeV2Dto::getNumberOfLines() const {
    return m_number_of_lines;
}
void OAIStocktakeV2Dto::setNumberOfLines(const qint32 &number_of_lines) {
    m_number_of_lines = number_of_lines;
    m_number_of_lines_isSet = true;
}

bool OAIStocktakeV2Dto::is_number_of_lines_Set() const{
    return m_number_of_lines_isSet;
}

bool OAIStocktakeV2Dto::is_number_of_lines_Valid() const{
    return m_number_of_lines_isValid;
}

double OAIStocktakeV2Dto::getPhysicalQty() const {
    return m_physical_qty;
}
void OAIStocktakeV2Dto::setPhysicalQty(const double &physical_qty) {
    m_physical_qty = physical_qty;
    m_physical_qty_isSet = true;
}

bool OAIStocktakeV2Dto::is_physical_qty_Set() const{
    return m_physical_qty_isSet;
}

bool OAIStocktakeV2Dto::is_physical_qty_Valid() const{
    return m_physical_qty_isValid;
}

QString OAIStocktakeV2Dto::getReferenceNbr() const {
    return m_reference_nbr;
}
void OAIStocktakeV2Dto::setReferenceNbr(const QString &reference_nbr) {
    m_reference_nbr = reference_nbr;
    m_reference_nbr_isSet = true;
}

bool OAIStocktakeV2Dto::is_reference_nbr_Set() const{
    return m_reference_nbr_isSet;
}

bool OAIStocktakeV2Dto::is_reference_nbr_Valid() const{
    return m_reference_nbr_isValid;
}

QString OAIStocktakeV2Dto::getSummaryStatus() const {
    return m_summary_status;
}
void OAIStocktakeV2Dto::setSummaryStatus(const QString &summary_status) {
    m_summary_status = summary_status;
    m_summary_status_isSet = true;
}

bool OAIStocktakeV2Dto::is_summary_status_Set() const{
    return m_summary_status_isSet;
}

bool OAIStocktakeV2Dto::is_summary_status_Valid() const{
    return m_summary_status_isValid;
}

double OAIStocktakeV2Dto::getVarianceCost() const {
    return m_variance_cost;
}
void OAIStocktakeV2Dto::setVarianceCost(const double &variance_cost) {
    m_variance_cost = variance_cost;
    m_variance_cost_isSet = true;
}

bool OAIStocktakeV2Dto::is_variance_cost_Set() const{
    return m_variance_cost_isSet;
}

bool OAIStocktakeV2Dto::is_variance_cost_Valid() const{
    return m_variance_cost_isValid;
}

double OAIStocktakeV2Dto::getVarianceQty() const {
    return m_variance_qty;
}
void OAIStocktakeV2Dto::setVarianceQty(const double &variance_qty) {
    m_variance_qty = variance_qty;
    m_variance_qty_isSet = true;
}

bool OAIStocktakeV2Dto::is_variance_qty_Set() const{
    return m_variance_qty_isSet;
}

bool OAIStocktakeV2Dto::is_variance_qty_Valid() const{
    return m_variance_qty_isValid;
}

bool OAIStocktakeV2Dto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_freeze_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_lines_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variance_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variance_qty_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStocktakeV2Dto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
