/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICostPriceStatisticsDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICostPriceStatisticsDto::OAICostPriceStatisticsDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICostPriceStatisticsDto::OAICostPriceStatisticsDto() {
    this->initializeModel();
}

OAICostPriceStatisticsDto::~OAICostPriceStatisticsDto() {}

void OAICostPriceStatisticsDto::initializeModel() {

    m_average_cost_isSet = false;
    m_average_cost_isValid = false;

    m_last_cost_isSet = false;
    m_last_cost_isValid = false;

    m_max_cost_isSet = false;
    m_max_cost_isValid = false;

    m_min_cost_isSet = false;
    m_min_cost_isValid = false;
}

void OAICostPriceStatisticsDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICostPriceStatisticsDto::fromJsonObject(QJsonObject json) {

    m_average_cost_isValid = ::OpenAPI::fromJsonValue(m_average_cost, json[QString("averageCost")]);
    m_average_cost_isSet = !json[QString("averageCost")].isNull() && m_average_cost_isValid;

    m_last_cost_isValid = ::OpenAPI::fromJsonValue(m_last_cost, json[QString("lastCost")]);
    m_last_cost_isSet = !json[QString("lastCost")].isNull() && m_last_cost_isValid;

    m_max_cost_isValid = ::OpenAPI::fromJsonValue(m_max_cost, json[QString("maxCost")]);
    m_max_cost_isSet = !json[QString("maxCost")].isNull() && m_max_cost_isValid;

    m_min_cost_isValid = ::OpenAPI::fromJsonValue(m_min_cost, json[QString("minCost")]);
    m_min_cost_isSet = !json[QString("minCost")].isNull() && m_min_cost_isValid;
}

QString OAICostPriceStatisticsDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICostPriceStatisticsDto::asJsonObject() const {
    QJsonObject obj;
    if (m_average_cost_isSet) {
        obj.insert(QString("averageCost"), ::OpenAPI::toJsonValue(m_average_cost));
    }
    if (m_last_cost_isSet) {
        obj.insert(QString("lastCost"), ::OpenAPI::toJsonValue(m_last_cost));
    }
    if (m_max_cost_isSet) {
        obj.insert(QString("maxCost"), ::OpenAPI::toJsonValue(m_max_cost));
    }
    if (m_min_cost_isSet) {
        obj.insert(QString("minCost"), ::OpenAPI::toJsonValue(m_min_cost));
    }
    return obj;
}

double OAICostPriceStatisticsDto::getAverageCost() const {
    return m_average_cost;
}
void OAICostPriceStatisticsDto::setAverageCost(const double &average_cost) {
    m_average_cost = average_cost;
    m_average_cost_isSet = true;
}

bool OAICostPriceStatisticsDto::is_average_cost_Set() const{
    return m_average_cost_isSet;
}

bool OAICostPriceStatisticsDto::is_average_cost_Valid() const{
    return m_average_cost_isValid;
}

double OAICostPriceStatisticsDto::getLastCost() const {
    return m_last_cost;
}
void OAICostPriceStatisticsDto::setLastCost(const double &last_cost) {
    m_last_cost = last_cost;
    m_last_cost_isSet = true;
}

bool OAICostPriceStatisticsDto::is_last_cost_Set() const{
    return m_last_cost_isSet;
}

bool OAICostPriceStatisticsDto::is_last_cost_Valid() const{
    return m_last_cost_isValid;
}

double OAICostPriceStatisticsDto::getMaxCost() const {
    return m_max_cost;
}
void OAICostPriceStatisticsDto::setMaxCost(const double &max_cost) {
    m_max_cost = max_cost;
    m_max_cost_isSet = true;
}

bool OAICostPriceStatisticsDto::is_max_cost_Set() const{
    return m_max_cost_isSet;
}

bool OAICostPriceStatisticsDto::is_max_cost_Valid() const{
    return m_max_cost_isValid;
}

double OAICostPriceStatisticsDto::getMinCost() const {
    return m_min_cost;
}
void OAICostPriceStatisticsDto::setMinCost(const double &min_cost) {
    m_min_cost = min_cost;
    m_min_cost_isSet = true;
}

bool OAICostPriceStatisticsDto::is_min_cost_Set() const{
    return m_min_cost_isSet;
}

bool OAICostPriceStatisticsDto::is_min_cost_Valid() const{
    return m_min_cost_isValid;
}

bool OAICostPriceStatisticsDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_cost_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICostPriceStatisticsDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
