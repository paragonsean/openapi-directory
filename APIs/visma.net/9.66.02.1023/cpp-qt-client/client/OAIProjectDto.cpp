/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectDto::OAIProjectDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectDto::OAIProjectDto() {
    this->initializeModel();
}

OAIProjectDto::~OAIProjectDto() {}

void OAIProjectDto::initializeModel() {

    m_allocation_rule_isSet = false;
    m_allocation_rule_isValid = false;

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_auto_allocate_isSet = false;
    m_auto_allocate_isValid = false;

    m_automatic_release_ar_isSet = false;
    m_automatic_release_ar_isValid = false;

    m_billing_period_isSet = false;
    m_billing_period_isValid = false;

    m_billing_rule_isSet = false;
    m_billing_rule_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_customer_location_isSet = false;
    m_customer_location_isValid = false;

    m_def_account_isSet = false;
    m_def_account_isValid = false;

    m_def_accrual_account_isSet = false;
    m_def_accrual_account_isValid = false;

    m_def_accrual_sub_isSet = false;
    m_def_accrual_sub_isValid = false;

    m_def_sub_isSet = false;
    m_def_sub_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_employees_isSet = false;
    m_employees_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_expenses_isSet = false;
    m_expenses_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_income_isSet = false;
    m_income_isValid = false;

    m_internal_id_isSet = false;
    m_internal_id_isValid = false;

    m_last_billing_date_isSet = false;
    m_last_billing_date_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_liability_isSet = false;
    m_liability_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_next_billing_date_isSet = false;
    m_next_billing_date_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_project_manager_isSet = false;
    m_project_manager_isValid = false;

    m_public_id_isSet = false;
    m_public_id_isValid = false;

    m_rate_table_isSet = false;
    m_rate_table_isValid = false;

    m_restrict_employees_isSet = false;
    m_restrict_employees_isValid = false;

    m_restrict_equipment_isSet = false;
    m_restrict_equipment_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_system_template_isSet = false;
    m_system_template_isValid = false;

    m_tasks_isSet = false;
    m_tasks_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIProjectDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectDto::fromJsonObject(QJsonObject json) {

    m_allocation_rule_isValid = ::OpenAPI::fromJsonValue(m_allocation_rule, json[QString("allocationRule")]);
    m_allocation_rule_isSet = !json[QString("allocationRule")].isNull() && m_allocation_rule_isValid;

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_auto_allocate_isValid = ::OpenAPI::fromJsonValue(m_auto_allocate, json[QString("autoAllocate")]);
    m_auto_allocate_isSet = !json[QString("autoAllocate")].isNull() && m_auto_allocate_isValid;

    m_automatic_release_ar_isValid = ::OpenAPI::fromJsonValue(m_automatic_release_ar, json[QString("automaticReleaseAr")]);
    m_automatic_release_ar_isSet = !json[QString("automaticReleaseAr")].isNull() && m_automatic_release_ar_isValid;

    m_billing_period_isValid = ::OpenAPI::fromJsonValue(m_billing_period, json[QString("billingPeriod")]);
    m_billing_period_isSet = !json[QString("billingPeriod")].isNull() && m_billing_period_isValid;

    m_billing_rule_isValid = ::OpenAPI::fromJsonValue(m_billing_rule, json[QString("billingRule")]);
    m_billing_rule_isSet = !json[QString("billingRule")].isNull() && m_billing_rule_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_customer_location_isValid = ::OpenAPI::fromJsonValue(m_customer_location, json[QString("customerLocation")]);
    m_customer_location_isSet = !json[QString("customerLocation")].isNull() && m_customer_location_isValid;

    m_def_account_isValid = ::OpenAPI::fromJsonValue(m_def_account, json[QString("defAccount")]);
    m_def_account_isSet = !json[QString("defAccount")].isNull() && m_def_account_isValid;

    m_def_accrual_account_isValid = ::OpenAPI::fromJsonValue(m_def_accrual_account, json[QString("defAccrualAccount")]);
    m_def_accrual_account_isSet = !json[QString("defAccrualAccount")].isNull() && m_def_accrual_account_isValid;

    m_def_accrual_sub_isValid = ::OpenAPI::fromJsonValue(m_def_accrual_sub, json[QString("defAccrualSub")]);
    m_def_accrual_sub_isSet = !json[QString("defAccrualSub")].isNull() && m_def_accrual_sub_isValid;

    m_def_sub_isValid = ::OpenAPI::fromJsonValue(m_def_sub, json[QString("defSub")]);
    m_def_sub_isSet = !json[QString("defSub")].isNull() && m_def_sub_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_employees_isValid = ::OpenAPI::fromJsonValue(m_employees, json[QString("employees")]);
    m_employees_isSet = !json[QString("employees")].isNull() && m_employees_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_expenses_isValid = ::OpenAPI::fromJsonValue(m_expenses, json[QString("expenses")]);
    m_expenses_isSet = !json[QString("expenses")].isNull() && m_expenses_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_income_isValid = ::OpenAPI::fromJsonValue(m_income, json[QString("income")]);
    m_income_isSet = !json[QString("income")].isNull() && m_income_isValid;

    m_internal_id_isValid = ::OpenAPI::fromJsonValue(m_internal_id, json[QString("internalID")]);
    m_internal_id_isSet = !json[QString("internalID")].isNull() && m_internal_id_isValid;

    m_last_billing_date_isValid = ::OpenAPI::fromJsonValue(m_last_billing_date, json[QString("lastBillingDate")]);
    m_last_billing_date_isSet = !json[QString("lastBillingDate")].isNull() && m_last_billing_date_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_liability_isValid = ::OpenAPI::fromJsonValue(m_liability, json[QString("liability")]);
    m_liability_isSet = !json[QString("liability")].isNull() && m_liability_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_next_billing_date_isValid = ::OpenAPI::fromJsonValue(m_next_billing_date, json[QString("nextBillingDate")]);
    m_next_billing_date_isSet = !json[QString("nextBillingDate")].isNull() && m_next_billing_date_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectID")]);
    m_project_id_isSet = !json[QString("projectID")].isNull() && m_project_id_isValid;

    m_project_manager_isValid = ::OpenAPI::fromJsonValue(m_project_manager, json[QString("projectManager")]);
    m_project_manager_isSet = !json[QString("projectManager")].isNull() && m_project_manager_isValid;

    m_public_id_isValid = ::OpenAPI::fromJsonValue(m_public_id, json[QString("publicId")]);
    m_public_id_isSet = !json[QString("publicId")].isNull() && m_public_id_isValid;

    m_rate_table_isValid = ::OpenAPI::fromJsonValue(m_rate_table, json[QString("rateTable")]);
    m_rate_table_isSet = !json[QString("rateTable")].isNull() && m_rate_table_isValid;

    m_restrict_employees_isValid = ::OpenAPI::fromJsonValue(m_restrict_employees, json[QString("restrictEmployees")]);
    m_restrict_employees_isSet = !json[QString("restrictEmployees")].isNull() && m_restrict_employees_isValid;

    m_restrict_equipment_isValid = ::OpenAPI::fromJsonValue(m_restrict_equipment, json[QString("restrictEquipment")]);
    m_restrict_equipment_isSet = !json[QString("restrictEquipment")].isNull() && m_restrict_equipment_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_system_template_isValid = ::OpenAPI::fromJsonValue(m_system_template, json[QString("systemTemplate")]);
    m_system_template_isSet = !json[QString("systemTemplate")].isNull() && m_system_template_isValid;

    m_tasks_isValid = ::OpenAPI::fromJsonValue(m_tasks, json[QString("tasks")]);
    m_tasks_isSet = !json[QString("tasks")].isNull() && m_tasks_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIProjectDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectDto::asJsonObject() const {
    QJsonObject obj;
    if (m_allocation_rule.isSet()) {
        obj.insert(QString("allocationRule"), ::OpenAPI::toJsonValue(m_allocation_rule));
    }
    if (m_assets_isSet) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_auto_allocate_isSet) {
        obj.insert(QString("autoAllocate"), ::OpenAPI::toJsonValue(m_auto_allocate));
    }
    if (m_automatic_release_ar_isSet) {
        obj.insert(QString("automaticReleaseAr"), ::OpenAPI::toJsonValue(m_automatic_release_ar));
    }
    if (m_billing_period_isSet) {
        obj.insert(QString("billingPeriod"), ::OpenAPI::toJsonValue(m_billing_period));
    }
    if (m_billing_rule.isSet()) {
        obj.insert(QString("billingRule"), ::OpenAPI::toJsonValue(m_billing_rule));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_customer_location.isSet()) {
        obj.insert(QString("customerLocation"), ::OpenAPI::toJsonValue(m_customer_location));
    }
    if (m_def_account.isSet()) {
        obj.insert(QString("defAccount"), ::OpenAPI::toJsonValue(m_def_account));
    }
    if (m_def_accrual_account.isSet()) {
        obj.insert(QString("defAccrualAccount"), ::OpenAPI::toJsonValue(m_def_accrual_account));
    }
    if (m_def_accrual_sub.isSet()) {
        obj.insert(QString("defAccrualSub"), ::OpenAPI::toJsonValue(m_def_accrual_sub));
    }
    if (m_def_sub.isSet()) {
        obj.insert(QString("defSub"), ::OpenAPI::toJsonValue(m_def_sub));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_employees.size() > 0) {
        obj.insert(QString("employees"), ::OpenAPI::toJsonValue(m_employees));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_expenses_isSet) {
        obj.insert(QString("expenses"), ::OpenAPI::toJsonValue(m_expenses));
    }
    if (m_hold_isSet) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_income_isSet) {
        obj.insert(QString("income"), ::OpenAPI::toJsonValue(m_income));
    }
    if (m_internal_id_isSet) {
        obj.insert(QString("internalID"), ::OpenAPI::toJsonValue(m_internal_id));
    }
    if (m_last_billing_date_isSet) {
        obj.insert(QString("lastBillingDate"), ::OpenAPI::toJsonValue(m_last_billing_date));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_liability_isSet) {
        obj.insert(QString("liability"), ::OpenAPI::toJsonValue(m_liability));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_next_billing_date_isSet) {
        obj.insert(QString("nextBillingDate"), ::OpenAPI::toJsonValue(m_next_billing_date));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectID"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_project_manager.isSet()) {
        obj.insert(QString("projectManager"), ::OpenAPI::toJsonValue(m_project_manager));
    }
    if (m_public_id_isSet) {
        obj.insert(QString("publicId"), ::OpenAPI::toJsonValue(m_public_id));
    }
    if (m_rate_table.isSet()) {
        obj.insert(QString("rateTable"), ::OpenAPI::toJsonValue(m_rate_table));
    }
    if (m_restrict_employees_isSet) {
        obj.insert(QString("restrictEmployees"), ::OpenAPI::toJsonValue(m_restrict_employees));
    }
    if (m_restrict_equipment_isSet) {
        obj.insert(QString("restrictEquipment"), ::OpenAPI::toJsonValue(m_restrict_equipment));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_system_template_isSet) {
        obj.insert(QString("systemTemplate"), ::OpenAPI::toJsonValue(m_system_template));
    }
    if (m_tasks.size() > 0) {
        obj.insert(QString("tasks"), ::OpenAPI::toJsonValue(m_tasks));
    }
    if (m_r_template.isSet()) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_visibility.isSet()) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

OAIAllocationRuleInProjectDto OAIProjectDto::getAllocationRule() const {
    return m_allocation_rule;
}
void OAIProjectDto::setAllocationRule(const OAIAllocationRuleInProjectDto &allocation_rule) {
    m_allocation_rule = allocation_rule;
    m_allocation_rule_isSet = true;
}

bool OAIProjectDto::is_allocation_rule_Set() const{
    return m_allocation_rule_isSet;
}

bool OAIProjectDto::is_allocation_rule_Valid() const{
    return m_allocation_rule_isValid;
}

double OAIProjectDto::getAssets() const {
    return m_assets;
}
void OAIProjectDto::setAssets(const double &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAIProjectDto::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAIProjectDto::is_assets_Valid() const{
    return m_assets_isValid;
}

QList<OAIAttributeIdValueDto> OAIProjectDto::getAttributes() const {
    return m_attributes;
}
void OAIProjectDto::setAttributes(const QList<OAIAttributeIdValueDto> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIProjectDto::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIProjectDto::is_attributes_Valid() const{
    return m_attributes_isValid;
}

bool OAIProjectDto::isAutoAllocate() const {
    return m_auto_allocate;
}
void OAIProjectDto::setAutoAllocate(const bool &auto_allocate) {
    m_auto_allocate = auto_allocate;
    m_auto_allocate_isSet = true;
}

bool OAIProjectDto::is_auto_allocate_Set() const{
    return m_auto_allocate_isSet;
}

bool OAIProjectDto::is_auto_allocate_Valid() const{
    return m_auto_allocate_isValid;
}

bool OAIProjectDto::isAutomaticReleaseAr() const {
    return m_automatic_release_ar;
}
void OAIProjectDto::setAutomaticReleaseAr(const bool &automatic_release_ar) {
    m_automatic_release_ar = automatic_release_ar;
    m_automatic_release_ar_isSet = true;
}

bool OAIProjectDto::is_automatic_release_ar_Set() const{
    return m_automatic_release_ar_isSet;
}

bool OAIProjectDto::is_automatic_release_ar_Valid() const{
    return m_automatic_release_ar_isValid;
}

QString OAIProjectDto::getBillingPeriod() const {
    return m_billing_period;
}
void OAIProjectDto::setBillingPeriod(const QString &billing_period) {
    m_billing_period = billing_period;
    m_billing_period_isSet = true;
}

bool OAIProjectDto::is_billing_period_Set() const{
    return m_billing_period_isSet;
}

bool OAIProjectDto::is_billing_period_Valid() const{
    return m_billing_period_isValid;
}

OAIBillingRuleInProjectDto OAIProjectDto::getBillingRule() const {
    return m_billing_rule;
}
void OAIProjectDto::setBillingRule(const OAIBillingRuleInProjectDto &billing_rule) {
    m_billing_rule = billing_rule;
    m_billing_rule_isSet = true;
}

bool OAIProjectDto::is_billing_rule_Set() const{
    return m_billing_rule_isSet;
}

bool OAIProjectDto::is_billing_rule_Valid() const{
    return m_billing_rule_isValid;
}

OAICustomerInProjectDto OAIProjectDto::getCustomer() const {
    return m_customer;
}
void OAIProjectDto::setCustomer(const OAICustomerInProjectDto &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIProjectDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIProjectDto::is_customer_Valid() const{
    return m_customer_isValid;
}

OAICustomerLocationInProjectDto OAIProjectDto::getCustomerLocation() const {
    return m_customer_location;
}
void OAIProjectDto::setCustomerLocation(const OAICustomerLocationInProjectDto &customer_location) {
    m_customer_location = customer_location;
    m_customer_location_isSet = true;
}

bool OAIProjectDto::is_customer_location_Set() const{
    return m_customer_location_isSet;
}

bool OAIProjectDto::is_customer_location_Valid() const{
    return m_customer_location_isValid;
}

OAIDefAccountInProjectDto OAIProjectDto::getDefAccount() const {
    return m_def_account;
}
void OAIProjectDto::setDefAccount(const OAIDefAccountInProjectDto &def_account) {
    m_def_account = def_account;
    m_def_account_isSet = true;
}

bool OAIProjectDto::is_def_account_Set() const{
    return m_def_account_isSet;
}

bool OAIProjectDto::is_def_account_Valid() const{
    return m_def_account_isValid;
}

OAIDefAccrualAccountInProjectDto OAIProjectDto::getDefAccrualAccount() const {
    return m_def_accrual_account;
}
void OAIProjectDto::setDefAccrualAccount(const OAIDefAccrualAccountInProjectDto &def_accrual_account) {
    m_def_accrual_account = def_accrual_account;
    m_def_accrual_account_isSet = true;
}

bool OAIProjectDto::is_def_accrual_account_Set() const{
    return m_def_accrual_account_isSet;
}

bool OAIProjectDto::is_def_accrual_account_Valid() const{
    return m_def_accrual_account_isValid;
}

OAIDefAccrualSubInProjectDto OAIProjectDto::getDefAccrualSub() const {
    return m_def_accrual_sub;
}
void OAIProjectDto::setDefAccrualSub(const OAIDefAccrualSubInProjectDto &def_accrual_sub) {
    m_def_accrual_sub = def_accrual_sub;
    m_def_accrual_sub_isSet = true;
}

bool OAIProjectDto::is_def_accrual_sub_Set() const{
    return m_def_accrual_sub_isSet;
}

bool OAIProjectDto::is_def_accrual_sub_Valid() const{
    return m_def_accrual_sub_isValid;
}

OAIDefSubInProjectDto OAIProjectDto::getDefSub() const {
    return m_def_sub;
}
void OAIProjectDto::setDefSub(const OAIDefSubInProjectDto &def_sub) {
    m_def_sub = def_sub;
    m_def_sub_isSet = true;
}

bool OAIProjectDto::is_def_sub_Set() const{
    return m_def_sub_isSet;
}

bool OAIProjectDto::is_def_sub_Valid() const{
    return m_def_sub_isValid;
}

QString OAIProjectDto::getDescription() const {
    return m_description;
}
void OAIProjectDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProjectDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProjectDto::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIEmployeeDto> OAIProjectDto::getEmployees() const {
    return m_employees;
}
void OAIProjectDto::setEmployees(const QList<OAIEmployeeDto> &employees) {
    m_employees = employees;
    m_employees_isSet = true;
}

bool OAIProjectDto::is_employees_Set() const{
    return m_employees_isSet;
}

bool OAIProjectDto::is_employees_Valid() const{
    return m_employees_isValid;
}

QDateTime OAIProjectDto::getEndDate() const {
    return m_end_date;
}
void OAIProjectDto::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIProjectDto::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIProjectDto::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIProjectDto::getErrorInfo() const {
    return m_error_info;
}
void OAIProjectDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIProjectDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIProjectDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

double OAIProjectDto::getExpenses() const {
    return m_expenses;
}
void OAIProjectDto::setExpenses(const double &expenses) {
    m_expenses = expenses;
    m_expenses_isSet = true;
}

bool OAIProjectDto::is_expenses_Set() const{
    return m_expenses_isSet;
}

bool OAIProjectDto::is_expenses_Valid() const{
    return m_expenses_isValid;
}

bool OAIProjectDto::isHold() const {
    return m_hold;
}
void OAIProjectDto::setHold(const bool &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAIProjectDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAIProjectDto::is_hold_Valid() const{
    return m_hold_isValid;
}

double OAIProjectDto::getIncome() const {
    return m_income;
}
void OAIProjectDto::setIncome(const double &income) {
    m_income = income;
    m_income_isSet = true;
}

bool OAIProjectDto::is_income_Set() const{
    return m_income_isSet;
}

bool OAIProjectDto::is_income_Valid() const{
    return m_income_isValid;
}

qint32 OAIProjectDto::getInternalId() const {
    return m_internal_id;
}
void OAIProjectDto::setInternalId(const qint32 &internal_id) {
    m_internal_id = internal_id;
    m_internal_id_isSet = true;
}

bool OAIProjectDto::is_internal_id_Set() const{
    return m_internal_id_isSet;
}

bool OAIProjectDto::is_internal_id_Valid() const{
    return m_internal_id_isValid;
}

QDateTime OAIProjectDto::getLastBillingDate() const {
    return m_last_billing_date;
}
void OAIProjectDto::setLastBillingDate(const QDateTime &last_billing_date) {
    m_last_billing_date = last_billing_date;
    m_last_billing_date_isSet = true;
}

bool OAIProjectDto::is_last_billing_date_Set() const{
    return m_last_billing_date_isSet;
}

bool OAIProjectDto::is_last_billing_date_Valid() const{
    return m_last_billing_date_isValid;
}

QDateTime OAIProjectDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIProjectDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIProjectDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIProjectDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

double OAIProjectDto::getLiability() const {
    return m_liability;
}
void OAIProjectDto::setLiability(const double &liability) {
    m_liability = liability;
    m_liability_isSet = true;
}

bool OAIProjectDto::is_liability_Set() const{
    return m_liability_isSet;
}

bool OAIProjectDto::is_liability_Valid() const{
    return m_liability_isValid;
}

OAIMetadataDto OAIProjectDto::getMetadata() const {
    return m_metadata;
}
void OAIProjectDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIProjectDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIProjectDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QDateTime OAIProjectDto::getNextBillingDate() const {
    return m_next_billing_date;
}
void OAIProjectDto::setNextBillingDate(const QDateTime &next_billing_date) {
    m_next_billing_date = next_billing_date;
    m_next_billing_date_isSet = true;
}

bool OAIProjectDto::is_next_billing_date_Set() const{
    return m_next_billing_date_isSet;
}

bool OAIProjectDto::is_next_billing_date_Valid() const{
    return m_next_billing_date_isValid;
}

QString OAIProjectDto::getProjectId() const {
    return m_project_id;
}
void OAIProjectDto::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIProjectDto::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIProjectDto::is_project_id_Valid() const{
    return m_project_id_isValid;
}

OAIProjectManagerInProjectDto OAIProjectDto::getProjectManager() const {
    return m_project_manager;
}
void OAIProjectDto::setProjectManager(const OAIProjectManagerInProjectDto &project_manager) {
    m_project_manager = project_manager;
    m_project_manager_isSet = true;
}

bool OAIProjectDto::is_project_manager_Set() const{
    return m_project_manager_isSet;
}

bool OAIProjectDto::is_project_manager_Valid() const{
    return m_project_manager_isValid;
}

QString OAIProjectDto::getPublicId() const {
    return m_public_id;
}
void OAIProjectDto::setPublicId(const QString &public_id) {
    m_public_id = public_id;
    m_public_id_isSet = true;
}

bool OAIProjectDto::is_public_id_Set() const{
    return m_public_id_isSet;
}

bool OAIProjectDto::is_public_id_Valid() const{
    return m_public_id_isValid;
}

OAIRateTableInProjectDto OAIProjectDto::getRateTable() const {
    return m_rate_table;
}
void OAIProjectDto::setRateTable(const OAIRateTableInProjectDto &rate_table) {
    m_rate_table = rate_table;
    m_rate_table_isSet = true;
}

bool OAIProjectDto::is_rate_table_Set() const{
    return m_rate_table_isSet;
}

bool OAIProjectDto::is_rate_table_Valid() const{
    return m_rate_table_isValid;
}

bool OAIProjectDto::isRestrictEmployees() const {
    return m_restrict_employees;
}
void OAIProjectDto::setRestrictEmployees(const bool &restrict_employees) {
    m_restrict_employees = restrict_employees;
    m_restrict_employees_isSet = true;
}

bool OAIProjectDto::is_restrict_employees_Set() const{
    return m_restrict_employees_isSet;
}

bool OAIProjectDto::is_restrict_employees_Valid() const{
    return m_restrict_employees_isValid;
}

bool OAIProjectDto::isRestrictEquipment() const {
    return m_restrict_equipment;
}
void OAIProjectDto::setRestrictEquipment(const bool &restrict_equipment) {
    m_restrict_equipment = restrict_equipment;
    m_restrict_equipment_isSet = true;
}

bool OAIProjectDto::is_restrict_equipment_Set() const{
    return m_restrict_equipment_isSet;
}

bool OAIProjectDto::is_restrict_equipment_Valid() const{
    return m_restrict_equipment_isValid;
}

QDateTime OAIProjectDto::getStartDate() const {
    return m_start_date;
}
void OAIProjectDto::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIProjectDto::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIProjectDto::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIProjectDto::getStatus() const {
    return m_status;
}
void OAIProjectDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProjectDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProjectDto::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIProjectDto::isSystemTemplate() const {
    return m_system_template;
}
void OAIProjectDto::setSystemTemplate(const bool &system_template) {
    m_system_template = system_template;
    m_system_template_isSet = true;
}

bool OAIProjectDto::is_system_template_Set() const{
    return m_system_template_isSet;
}

bool OAIProjectDto::is_system_template_Valid() const{
    return m_system_template_isValid;
}

QList<OAITaskDto> OAIProjectDto::getTasks() const {
    return m_tasks;
}
void OAIProjectDto::setTasks(const QList<OAITaskDto> &tasks) {
    m_tasks = tasks;
    m_tasks_isSet = true;
}

bool OAIProjectDto::is_tasks_Set() const{
    return m_tasks_isSet;
}

bool OAIProjectDto::is_tasks_Valid() const{
    return m_tasks_isValid;
}

OAITemplateInProjectDto OAIProjectDto::getRTemplate() const {
    return m_r_template;
}
void OAIProjectDto::setRTemplate(const OAITemplateInProjectDto &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIProjectDto::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIProjectDto::is_r_template_Valid() const{
    return m_r_template_isValid;
}

OAIVisibilityInProjectDto OAIProjectDto::getVisibility() const {
    return m_visibility;
}
void OAIProjectDto::setVisibility(const OAIVisibilityInProjectDto &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIProjectDto::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIProjectDto::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIProjectDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocation_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_allocate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automatic_release_ar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_def_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_def_accrual_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_def_accrual_sub.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_def_sub.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expenses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_income_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_billing_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_billing_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_manager.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrict_employees_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrict_equipment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tasks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
