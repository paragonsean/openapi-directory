/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskQueryParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskQueryParameters::OAITaskQueryParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskQueryParameters::OAITaskQueryParameters() {
    this->initializeModel();
}

OAITaskQueryParameters::~OAITaskQueryParameters() {}

void OAITaskQueryParameters::initializeModel() {

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_created_date_time_condition_isSet = false;
    m_created_date_time_condition_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_greater_than_value_isSet = false;
    m_greater_than_value_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_last_modified_date_time_condition_isSet = false;
    m_last_modified_date_time_condition_isValid = false;

    m_number_to_read_isSet = false;
    m_number_to_read_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_project_internal_id_isSet = false;
    m_project_internal_id_isValid = false;

    m_public_id_isSet = false;
    m_public_id_isValid = false;

    m_restricted_employee_isSet = false;
    m_restricted_employee_isValid = false;

    m_restricted_user_isSet = false;
    m_restricted_user_isValid = false;

    m_skip_records_isSet = false;
    m_skip_records_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_task_cd_isSet = false;
    m_task_cd_isValid = false;

    m_task_cd_desc_isSet = false;
    m_task_cd_desc_isValid = false;

    m_visible_in_ap_isSet = false;
    m_visible_in_ap_isValid = false;

    m_visible_in_ar_isSet = false;
    m_visible_in_ar_isValid = false;

    m_visible_in_ca_isSet = false;
    m_visible_in_ca_isValid = false;

    m_visible_in_cr_isSet = false;
    m_visible_in_cr_isValid = false;

    m_visible_in_ea_isSet = false;
    m_visible_in_ea_isValid = false;

    m_visible_in_gl_isSet = false;
    m_visible_in_gl_isValid = false;

    m_visible_in_in_isSet = false;
    m_visible_in_in_isValid = false;

    m_visible_in_po_isSet = false;
    m_visible_in_po_isValid = false;

    m_visible_in_so_isSet = false;
    m_visible_in_so_isValid = false;

    m_visible_in_ta_isSet = false;
    m_visible_in_ta_isValid = false;
}

void OAITaskQueryParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskQueryParameters::fromJsonObject(QJsonObject json) {

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_created_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_created_date_time_condition, json[QString("createdDateTimeCondition")]);
    m_created_date_time_condition_isSet = !json[QString("createdDateTimeCondition")].isNull() && m_created_date_time_condition_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_greater_than_value_isValid = ::OpenAPI::fromJsonValue(m_greater_than_value, json[QString("greaterThanValue")]);
    m_greater_than_value_isSet = !json[QString("greaterThanValue")].isNull() && m_greater_than_value_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_last_modified_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time_condition, json[QString("lastModifiedDateTimeCondition")]);
    m_last_modified_date_time_condition_isSet = !json[QString("lastModifiedDateTimeCondition")].isNull() && m_last_modified_date_time_condition_isValid;

    m_number_to_read_isValid = ::OpenAPI::fromJsonValue(m_number_to_read, json[QString("numberToRead")]);
    m_number_to_read_isSet = !json[QString("numberToRead")].isNull() && m_number_to_read_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("pageNumber")]);
    m_page_number_isSet = !json[QString("pageNumber")].isNull() && m_page_number_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_project_internal_id_isValid = ::OpenAPI::fromJsonValue(m_project_internal_id, json[QString("projectInternalId")]);
    m_project_internal_id_isSet = !json[QString("projectInternalId")].isNull() && m_project_internal_id_isValid;

    m_public_id_isValid = ::OpenAPI::fromJsonValue(m_public_id, json[QString("publicId")]);
    m_public_id_isSet = !json[QString("publicId")].isNull() && m_public_id_isValid;

    m_restricted_employee_isValid = ::OpenAPI::fromJsonValue(m_restricted_employee, json[QString("restrictedEmployee")]);
    m_restricted_employee_isSet = !json[QString("restrictedEmployee")].isNull() && m_restricted_employee_isValid;

    m_restricted_user_isValid = ::OpenAPI::fromJsonValue(m_restricted_user, json[QString("restrictedUser")]);
    m_restricted_user_isSet = !json[QString("restrictedUser")].isNull() && m_restricted_user_isValid;

    m_skip_records_isValid = ::OpenAPI::fromJsonValue(m_skip_records, json[QString("skipRecords")]);
    m_skip_records_isSet = !json[QString("skipRecords")].isNull() && m_skip_records_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_task_cd_isValid = ::OpenAPI::fromJsonValue(m_task_cd, json[QString("taskCd")]);
    m_task_cd_isSet = !json[QString("taskCd")].isNull() && m_task_cd_isValid;

    m_task_cd_desc_isValid = ::OpenAPI::fromJsonValue(m_task_cd_desc, json[QString("taskCdDesc")]);
    m_task_cd_desc_isSet = !json[QString("taskCdDesc")].isNull() && m_task_cd_desc_isValid;

    m_visible_in_ap_isValid = ::OpenAPI::fromJsonValue(m_visible_in_ap, json[QString("visibleInAp")]);
    m_visible_in_ap_isSet = !json[QString("visibleInAp")].isNull() && m_visible_in_ap_isValid;

    m_visible_in_ar_isValid = ::OpenAPI::fromJsonValue(m_visible_in_ar, json[QString("visibleInAr")]);
    m_visible_in_ar_isSet = !json[QString("visibleInAr")].isNull() && m_visible_in_ar_isValid;

    m_visible_in_ca_isValid = ::OpenAPI::fromJsonValue(m_visible_in_ca, json[QString("visibleInCa")]);
    m_visible_in_ca_isSet = !json[QString("visibleInCa")].isNull() && m_visible_in_ca_isValid;

    m_visible_in_cr_isValid = ::OpenAPI::fromJsonValue(m_visible_in_cr, json[QString("visibleInCr")]);
    m_visible_in_cr_isSet = !json[QString("visibleInCr")].isNull() && m_visible_in_cr_isValid;

    m_visible_in_ea_isValid = ::OpenAPI::fromJsonValue(m_visible_in_ea, json[QString("visibleInEa")]);
    m_visible_in_ea_isSet = !json[QString("visibleInEa")].isNull() && m_visible_in_ea_isValid;

    m_visible_in_gl_isValid = ::OpenAPI::fromJsonValue(m_visible_in_gl, json[QString("visibleInGl")]);
    m_visible_in_gl_isSet = !json[QString("visibleInGl")].isNull() && m_visible_in_gl_isValid;

    m_visible_in_in_isValid = ::OpenAPI::fromJsonValue(m_visible_in_in, json[QString("visibleInIn")]);
    m_visible_in_in_isSet = !json[QString("visibleInIn")].isNull() && m_visible_in_in_isValid;

    m_visible_in_po_isValid = ::OpenAPI::fromJsonValue(m_visible_in_po, json[QString("visibleInPo")]);
    m_visible_in_po_isSet = !json[QString("visibleInPo")].isNull() && m_visible_in_po_isValid;

    m_visible_in_so_isValid = ::OpenAPI::fromJsonValue(m_visible_in_so, json[QString("visibleInSo")]);
    m_visible_in_so_isSet = !json[QString("visibleInSo")].isNull() && m_visible_in_so_isValid;

    m_visible_in_ta_isValid = ::OpenAPI::fromJsonValue(m_visible_in_ta, json[QString("visibleInTa")]);
    m_visible_in_ta_isSet = !json[QString("visibleInTa")].isNull() && m_visible_in_ta_isValid;
}

QString OAITaskQueryParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskQueryParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_created_date_time_condition_isSet) {
        obj.insert(QString("createdDateTimeCondition"), ::OpenAPI::toJsonValue(m_created_date_time_condition));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_greater_than_value_isSet) {
        obj.insert(QString("greaterThanValue"), ::OpenAPI::toJsonValue(m_greater_than_value));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_last_modified_date_time_condition_isSet) {
        obj.insert(QString("lastModifiedDateTimeCondition"), ::OpenAPI::toJsonValue(m_last_modified_date_time_condition));
    }
    if (m_number_to_read_isSet) {
        obj.insert(QString("numberToRead"), ::OpenAPI::toJsonValue(m_number_to_read));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("pageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_project_internal_id_isSet) {
        obj.insert(QString("projectInternalId"), ::OpenAPI::toJsonValue(m_project_internal_id));
    }
    if (m_public_id_isSet) {
        obj.insert(QString("publicId"), ::OpenAPI::toJsonValue(m_public_id));
    }
    if (m_restricted_employee_isSet) {
        obj.insert(QString("restrictedEmployee"), ::OpenAPI::toJsonValue(m_restricted_employee));
    }
    if (m_restricted_user_isSet) {
        obj.insert(QString("restrictedUser"), ::OpenAPI::toJsonValue(m_restricted_user));
    }
    if (m_skip_records_isSet) {
        obj.insert(QString("skipRecords"), ::OpenAPI::toJsonValue(m_skip_records));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_task_cd_isSet) {
        obj.insert(QString("taskCd"), ::OpenAPI::toJsonValue(m_task_cd));
    }
    if (m_task_cd_desc_isSet) {
        obj.insert(QString("taskCdDesc"), ::OpenAPI::toJsonValue(m_task_cd_desc));
    }
    if (m_visible_in_ap_isSet) {
        obj.insert(QString("visibleInAp"), ::OpenAPI::toJsonValue(m_visible_in_ap));
    }
    if (m_visible_in_ar_isSet) {
        obj.insert(QString("visibleInAr"), ::OpenAPI::toJsonValue(m_visible_in_ar));
    }
    if (m_visible_in_ca_isSet) {
        obj.insert(QString("visibleInCa"), ::OpenAPI::toJsonValue(m_visible_in_ca));
    }
    if (m_visible_in_cr_isSet) {
        obj.insert(QString("visibleInCr"), ::OpenAPI::toJsonValue(m_visible_in_cr));
    }
    if (m_visible_in_ea_isSet) {
        obj.insert(QString("visibleInEa"), ::OpenAPI::toJsonValue(m_visible_in_ea));
    }
    if (m_visible_in_gl_isSet) {
        obj.insert(QString("visibleInGl"), ::OpenAPI::toJsonValue(m_visible_in_gl));
    }
    if (m_visible_in_in_isSet) {
        obj.insert(QString("visibleInIn"), ::OpenAPI::toJsonValue(m_visible_in_in));
    }
    if (m_visible_in_po_isSet) {
        obj.insert(QString("visibleInPo"), ::OpenAPI::toJsonValue(m_visible_in_po));
    }
    if (m_visible_in_so_isSet) {
        obj.insert(QString("visibleInSo"), ::OpenAPI::toJsonValue(m_visible_in_so));
    }
    if (m_visible_in_ta_isSet) {
        obj.insert(QString("visibleInTa"), ::OpenAPI::toJsonValue(m_visible_in_ta));
    }
    return obj;
}

QString OAITaskQueryParameters::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAITaskQueryParameters::setCreatedDateTime(const QString &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAITaskQueryParameters::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAITaskQueryParameters::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAITaskQueryParameters::getCreatedDateTimeCondition() const {
    return m_created_date_time_condition;
}
void OAITaskQueryParameters::setCreatedDateTimeCondition(const QString &created_date_time_condition) {
    m_created_date_time_condition = created_date_time_condition;
    m_created_date_time_condition_isSet = true;
}

bool OAITaskQueryParameters::is_created_date_time_condition_Set() const{
    return m_created_date_time_condition_isSet;
}

bool OAITaskQueryParameters::is_created_date_time_condition_Valid() const{
    return m_created_date_time_condition_isValid;
}

QString OAITaskQueryParameters::getDescription() const {
    return m_description;
}
void OAITaskQueryParameters::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITaskQueryParameters::is_description_Set() const{
    return m_description_isSet;
}

bool OAITaskQueryParameters::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITaskQueryParameters::getGreaterThanValue() const {
    return m_greater_than_value;
}
void OAITaskQueryParameters::setGreaterThanValue(const QString &greater_than_value) {
    m_greater_than_value = greater_than_value;
    m_greater_than_value_isSet = true;
}

bool OAITaskQueryParameters::is_greater_than_value_Set() const{
    return m_greater_than_value_isSet;
}

bool OAITaskQueryParameters::is_greater_than_value_Valid() const{
    return m_greater_than_value_isValid;
}

QString OAITaskQueryParameters::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAITaskQueryParameters::setLastModifiedDateTime(const QString &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAITaskQueryParameters::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAITaskQueryParameters::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QString OAITaskQueryParameters::getLastModifiedDateTimeCondition() const {
    return m_last_modified_date_time_condition;
}
void OAITaskQueryParameters::setLastModifiedDateTimeCondition(const QString &last_modified_date_time_condition) {
    m_last_modified_date_time_condition = last_modified_date_time_condition;
    m_last_modified_date_time_condition_isSet = true;
}

bool OAITaskQueryParameters::is_last_modified_date_time_condition_Set() const{
    return m_last_modified_date_time_condition_isSet;
}

bool OAITaskQueryParameters::is_last_modified_date_time_condition_Valid() const{
    return m_last_modified_date_time_condition_isValid;
}

qint32 OAITaskQueryParameters::getNumberToRead() const {
    return m_number_to_read;
}
void OAITaskQueryParameters::setNumberToRead(const qint32 &number_to_read) {
    m_number_to_read = number_to_read;
    m_number_to_read_isSet = true;
}

bool OAITaskQueryParameters::is_number_to_read_Set() const{
    return m_number_to_read_isSet;
}

bool OAITaskQueryParameters::is_number_to_read_Valid() const{
    return m_number_to_read_isValid;
}

qint32 OAITaskQueryParameters::getPageNumber() const {
    return m_page_number;
}
void OAITaskQueryParameters::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAITaskQueryParameters::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAITaskQueryParameters::is_page_number_Valid() const{
    return m_page_number_isValid;
}

qint32 OAITaskQueryParameters::getPageSize() const {
    return m_page_size;
}
void OAITaskQueryParameters::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAITaskQueryParameters::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAITaskQueryParameters::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAITaskQueryParameters::getProjectId() const {
    return m_project_id;
}
void OAITaskQueryParameters::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAITaskQueryParameters::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAITaskQueryParameters::is_project_id_Valid() const{
    return m_project_id_isValid;
}

qint32 OAITaskQueryParameters::getProjectInternalId() const {
    return m_project_internal_id;
}
void OAITaskQueryParameters::setProjectInternalId(const qint32 &project_internal_id) {
    m_project_internal_id = project_internal_id;
    m_project_internal_id_isSet = true;
}

bool OAITaskQueryParameters::is_project_internal_id_Set() const{
    return m_project_internal_id_isSet;
}

bool OAITaskQueryParameters::is_project_internal_id_Valid() const{
    return m_project_internal_id_isValid;
}

QString OAITaskQueryParameters::getPublicId() const {
    return m_public_id;
}
void OAITaskQueryParameters::setPublicId(const QString &public_id) {
    m_public_id = public_id;
    m_public_id_isSet = true;
}

bool OAITaskQueryParameters::is_public_id_Set() const{
    return m_public_id_isSet;
}

bool OAITaskQueryParameters::is_public_id_Valid() const{
    return m_public_id_isValid;
}

QString OAITaskQueryParameters::getRestrictedEmployee() const {
    return m_restricted_employee;
}
void OAITaskQueryParameters::setRestrictedEmployee(const QString &restricted_employee) {
    m_restricted_employee = restricted_employee;
    m_restricted_employee_isSet = true;
}

bool OAITaskQueryParameters::is_restricted_employee_Set() const{
    return m_restricted_employee_isSet;
}

bool OAITaskQueryParameters::is_restricted_employee_Valid() const{
    return m_restricted_employee_isValid;
}

qint64 OAITaskQueryParameters::getRestrictedUser() const {
    return m_restricted_user;
}
void OAITaskQueryParameters::setRestrictedUser(const qint64 &restricted_user) {
    m_restricted_user = restricted_user;
    m_restricted_user_isSet = true;
}

bool OAITaskQueryParameters::is_restricted_user_Set() const{
    return m_restricted_user_isSet;
}

bool OAITaskQueryParameters::is_restricted_user_Valid() const{
    return m_restricted_user_isValid;
}

qint32 OAITaskQueryParameters::getSkipRecords() const {
    return m_skip_records;
}
void OAITaskQueryParameters::setSkipRecords(const qint32 &skip_records) {
    m_skip_records = skip_records;
    m_skip_records_isSet = true;
}

bool OAITaskQueryParameters::is_skip_records_Set() const{
    return m_skip_records_isSet;
}

bool OAITaskQueryParameters::is_skip_records_Valid() const{
    return m_skip_records_isValid;
}

QString OAITaskQueryParameters::getStatus() const {
    return m_status;
}
void OAITaskQueryParameters::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITaskQueryParameters::is_status_Set() const{
    return m_status_isSet;
}

bool OAITaskQueryParameters::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITaskQueryParameters::getTaskCd() const {
    return m_task_cd;
}
void OAITaskQueryParameters::setTaskCd(const QString &task_cd) {
    m_task_cd = task_cd;
    m_task_cd_isSet = true;
}

bool OAITaskQueryParameters::is_task_cd_Set() const{
    return m_task_cd_isSet;
}

bool OAITaskQueryParameters::is_task_cd_Valid() const{
    return m_task_cd_isValid;
}

QString OAITaskQueryParameters::getTaskCdDesc() const {
    return m_task_cd_desc;
}
void OAITaskQueryParameters::setTaskCdDesc(const QString &task_cd_desc) {
    m_task_cd_desc = task_cd_desc;
    m_task_cd_desc_isSet = true;
}

bool OAITaskQueryParameters::is_task_cd_desc_Set() const{
    return m_task_cd_desc_isSet;
}

bool OAITaskQueryParameters::is_task_cd_desc_Valid() const{
    return m_task_cd_desc_isValid;
}

bool OAITaskQueryParameters::isVisibleInAp() const {
    return m_visible_in_ap;
}
void OAITaskQueryParameters::setVisibleInAp(const bool &visible_in_ap) {
    m_visible_in_ap = visible_in_ap;
    m_visible_in_ap_isSet = true;
}

bool OAITaskQueryParameters::is_visible_in_ap_Set() const{
    return m_visible_in_ap_isSet;
}

bool OAITaskQueryParameters::is_visible_in_ap_Valid() const{
    return m_visible_in_ap_isValid;
}

bool OAITaskQueryParameters::isVisibleInAr() const {
    return m_visible_in_ar;
}
void OAITaskQueryParameters::setVisibleInAr(const bool &visible_in_ar) {
    m_visible_in_ar = visible_in_ar;
    m_visible_in_ar_isSet = true;
}

bool OAITaskQueryParameters::is_visible_in_ar_Set() const{
    return m_visible_in_ar_isSet;
}

bool OAITaskQueryParameters::is_visible_in_ar_Valid() const{
    return m_visible_in_ar_isValid;
}

bool OAITaskQueryParameters::isVisibleInCa() const {
    return m_visible_in_ca;
}
void OAITaskQueryParameters::setVisibleInCa(const bool &visible_in_ca) {
    m_visible_in_ca = visible_in_ca;
    m_visible_in_ca_isSet = true;
}

bool OAITaskQueryParameters::is_visible_in_ca_Set() const{
    return m_visible_in_ca_isSet;
}

bool OAITaskQueryParameters::is_visible_in_ca_Valid() const{
    return m_visible_in_ca_isValid;
}

bool OAITaskQueryParameters::isVisibleInCr() const {
    return m_visible_in_cr;
}
void OAITaskQueryParameters::setVisibleInCr(const bool &visible_in_cr) {
    m_visible_in_cr = visible_in_cr;
    m_visible_in_cr_isSet = true;
}

bool OAITaskQueryParameters::is_visible_in_cr_Set() const{
    return m_visible_in_cr_isSet;
}

bool OAITaskQueryParameters::is_visible_in_cr_Valid() const{
    return m_visible_in_cr_isValid;
}

bool OAITaskQueryParameters::isVisibleInEa() const {
    return m_visible_in_ea;
}
void OAITaskQueryParameters::setVisibleInEa(const bool &visible_in_ea) {
    m_visible_in_ea = visible_in_ea;
    m_visible_in_ea_isSet = true;
}

bool OAITaskQueryParameters::is_visible_in_ea_Set() const{
    return m_visible_in_ea_isSet;
}

bool OAITaskQueryParameters::is_visible_in_ea_Valid() const{
    return m_visible_in_ea_isValid;
}

bool OAITaskQueryParameters::isVisibleInGl() const {
    return m_visible_in_gl;
}
void OAITaskQueryParameters::setVisibleInGl(const bool &visible_in_gl) {
    m_visible_in_gl = visible_in_gl;
    m_visible_in_gl_isSet = true;
}

bool OAITaskQueryParameters::is_visible_in_gl_Set() const{
    return m_visible_in_gl_isSet;
}

bool OAITaskQueryParameters::is_visible_in_gl_Valid() const{
    return m_visible_in_gl_isValid;
}

bool OAITaskQueryParameters::isVisibleInIn() const {
    return m_visible_in_in;
}
void OAITaskQueryParameters::setVisibleInIn(const bool &visible_in_in) {
    m_visible_in_in = visible_in_in;
    m_visible_in_in_isSet = true;
}

bool OAITaskQueryParameters::is_visible_in_in_Set() const{
    return m_visible_in_in_isSet;
}

bool OAITaskQueryParameters::is_visible_in_in_Valid() const{
    return m_visible_in_in_isValid;
}

bool OAITaskQueryParameters::isVisibleInPo() const {
    return m_visible_in_po;
}
void OAITaskQueryParameters::setVisibleInPo(const bool &visible_in_po) {
    m_visible_in_po = visible_in_po;
    m_visible_in_po_isSet = true;
}

bool OAITaskQueryParameters::is_visible_in_po_Set() const{
    return m_visible_in_po_isSet;
}

bool OAITaskQueryParameters::is_visible_in_po_Valid() const{
    return m_visible_in_po_isValid;
}

bool OAITaskQueryParameters::isVisibleInSo() const {
    return m_visible_in_so;
}
void OAITaskQueryParameters::setVisibleInSo(const bool &visible_in_so) {
    m_visible_in_so = visible_in_so;
    m_visible_in_so_isSet = true;
}

bool OAITaskQueryParameters::is_visible_in_so_Set() const{
    return m_visible_in_so_isSet;
}

bool OAITaskQueryParameters::is_visible_in_so_Valid() const{
    return m_visible_in_so_isValid;
}

bool OAITaskQueryParameters::isVisibleInTa() const {
    return m_visible_in_ta;
}
void OAITaskQueryParameters::setVisibleInTa(const bool &visible_in_ta) {
    m_visible_in_ta = visible_in_ta;
    m_visible_in_ta_isSet = true;
}

bool OAITaskQueryParameters::is_visible_in_ta_Set() const{
    return m_visible_in_ta_isSet;
}

bool OAITaskQueryParameters::is_visible_in_ta_Valid() const{
    return m_visible_in_ta_isValid;
}

bool OAITaskQueryParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_greater_than_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_to_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_internal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_employee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_cd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_cd_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_in_ap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_in_ar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_in_ca_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_in_cr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_in_ea_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_in_gl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_in_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_in_po_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_in_so_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_in_ta_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskQueryParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
