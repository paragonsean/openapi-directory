/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesPersonQueryParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesPersonQueryParameters::OAISalesPersonQueryParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesPersonQueryParameters::OAISalesPersonQueryParameters() {
    this->initializeModel();
}

OAISalesPersonQueryParameters::~OAISalesPersonQueryParameters() {}

void OAISalesPersonQueryParameters::initializeModel() {

    m_commission_pct_isSet = false;
    m_commission_pct_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_created_date_time_condition_isSet = false;
    m_created_date_time_condition_isValid = false;

    m_greater_than_value_isSet = false;
    m_greater_than_value_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_last_modified_date_time_condition_isSet = false;
    m_last_modified_date_time_condition_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_to_read_isSet = false;
    m_number_to_read_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_sales_sub_isSet = false;
    m_sales_sub_isValid = false;

    m_salesperson_cd_isSet = false;
    m_salesperson_cd_isValid = false;

    m_skip_records_isSet = false;
    m_skip_records_isValid = false;
}

void OAISalesPersonQueryParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesPersonQueryParameters::fromJsonObject(QJsonObject json) {

    m_commission_pct_isValid = ::OpenAPI::fromJsonValue(m_commission_pct, json[QString("commissionPct")]);
    m_commission_pct_isSet = !json[QString("commissionPct")].isNull() && m_commission_pct_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_created_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_created_date_time_condition, json[QString("createdDateTimeCondition")]);
    m_created_date_time_condition_isSet = !json[QString("createdDateTimeCondition")].isNull() && m_created_date_time_condition_isValid;

    m_greater_than_value_isValid = ::OpenAPI::fromJsonValue(m_greater_than_value, json[QString("greaterThanValue")]);
    m_greater_than_value_isSet = !json[QString("greaterThanValue")].isNull() && m_greater_than_value_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_last_modified_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time_condition, json[QString("lastModifiedDateTimeCondition")]);
    m_last_modified_date_time_condition_isSet = !json[QString("lastModifiedDateTimeCondition")].isNull() && m_last_modified_date_time_condition_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_to_read_isValid = ::OpenAPI::fromJsonValue(m_number_to_read, json[QString("numberToRead")]);
    m_number_to_read_isSet = !json[QString("numberToRead")].isNull() && m_number_to_read_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("pageNumber")]);
    m_page_number_isSet = !json[QString("pageNumber")].isNull() && m_page_number_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_sales_sub_isValid = ::OpenAPI::fromJsonValue(m_sales_sub, json[QString("salesSub")]);
    m_sales_sub_isSet = !json[QString("salesSub")].isNull() && m_sales_sub_isValid;

    m_salesperson_cd_isValid = ::OpenAPI::fromJsonValue(m_salesperson_cd, json[QString("salespersonCD")]);
    m_salesperson_cd_isSet = !json[QString("salespersonCD")].isNull() && m_salesperson_cd_isValid;

    m_skip_records_isValid = ::OpenAPI::fromJsonValue(m_skip_records, json[QString("skipRecords")]);
    m_skip_records_isSet = !json[QString("skipRecords")].isNull() && m_skip_records_isValid;
}

QString OAISalesPersonQueryParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesPersonQueryParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_commission_pct_isSet) {
        obj.insert(QString("commissionPct"), ::OpenAPI::toJsonValue(m_commission_pct));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_created_date_time_condition_isSet) {
        obj.insert(QString("createdDateTimeCondition"), ::OpenAPI::toJsonValue(m_created_date_time_condition));
    }
    if (m_greater_than_value_isSet) {
        obj.insert(QString("greaterThanValue"), ::OpenAPI::toJsonValue(m_greater_than_value));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_last_modified_date_time_condition_isSet) {
        obj.insert(QString("lastModifiedDateTimeCondition"), ::OpenAPI::toJsonValue(m_last_modified_date_time_condition));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_to_read_isSet) {
        obj.insert(QString("numberToRead"), ::OpenAPI::toJsonValue(m_number_to_read));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("pageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_sales_sub_isSet) {
        obj.insert(QString("salesSub"), ::OpenAPI::toJsonValue(m_sales_sub));
    }
    if (m_salesperson_cd_isSet) {
        obj.insert(QString("salespersonCD"), ::OpenAPI::toJsonValue(m_salesperson_cd));
    }
    if (m_skip_records_isSet) {
        obj.insert(QString("skipRecords"), ::OpenAPI::toJsonValue(m_skip_records));
    }
    return obj;
}

double OAISalesPersonQueryParameters::getCommissionPct() const {
    return m_commission_pct;
}
void OAISalesPersonQueryParameters::setCommissionPct(const double &commission_pct) {
    m_commission_pct = commission_pct;
    m_commission_pct_isSet = true;
}

bool OAISalesPersonQueryParameters::is_commission_pct_Set() const{
    return m_commission_pct_isSet;
}

bool OAISalesPersonQueryParameters::is_commission_pct_Valid() const{
    return m_commission_pct_isValid;
}

QString OAISalesPersonQueryParameters::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAISalesPersonQueryParameters::setCreatedDateTime(const QString &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAISalesPersonQueryParameters::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAISalesPersonQueryParameters::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAISalesPersonQueryParameters::getCreatedDateTimeCondition() const {
    return m_created_date_time_condition;
}
void OAISalesPersonQueryParameters::setCreatedDateTimeCondition(const QString &created_date_time_condition) {
    m_created_date_time_condition = created_date_time_condition;
    m_created_date_time_condition_isSet = true;
}

bool OAISalesPersonQueryParameters::is_created_date_time_condition_Set() const{
    return m_created_date_time_condition_isSet;
}

bool OAISalesPersonQueryParameters::is_created_date_time_condition_Valid() const{
    return m_created_date_time_condition_isValid;
}

QString OAISalesPersonQueryParameters::getGreaterThanValue() const {
    return m_greater_than_value;
}
void OAISalesPersonQueryParameters::setGreaterThanValue(const QString &greater_than_value) {
    m_greater_than_value = greater_than_value;
    m_greater_than_value_isSet = true;
}

bool OAISalesPersonQueryParameters::is_greater_than_value_Set() const{
    return m_greater_than_value_isSet;
}

bool OAISalesPersonQueryParameters::is_greater_than_value_Valid() const{
    return m_greater_than_value_isValid;
}

bool OAISalesPersonQueryParameters::isIsActive() const {
    return m_is_active;
}
void OAISalesPersonQueryParameters::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAISalesPersonQueryParameters::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAISalesPersonQueryParameters::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAISalesPersonQueryParameters::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAISalesPersonQueryParameters::setLastModifiedDateTime(const QString &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAISalesPersonQueryParameters::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAISalesPersonQueryParameters::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QString OAISalesPersonQueryParameters::getLastModifiedDateTimeCondition() const {
    return m_last_modified_date_time_condition;
}
void OAISalesPersonQueryParameters::setLastModifiedDateTimeCondition(const QString &last_modified_date_time_condition) {
    m_last_modified_date_time_condition = last_modified_date_time_condition;
    m_last_modified_date_time_condition_isSet = true;
}

bool OAISalesPersonQueryParameters::is_last_modified_date_time_condition_Set() const{
    return m_last_modified_date_time_condition_isSet;
}

bool OAISalesPersonQueryParameters::is_last_modified_date_time_condition_Valid() const{
    return m_last_modified_date_time_condition_isValid;
}

QString OAISalesPersonQueryParameters::getName() const {
    return m_name;
}
void OAISalesPersonQueryParameters::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISalesPersonQueryParameters::is_name_Set() const{
    return m_name_isSet;
}

bool OAISalesPersonQueryParameters::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAISalesPersonQueryParameters::getNumberToRead() const {
    return m_number_to_read;
}
void OAISalesPersonQueryParameters::setNumberToRead(const qint32 &number_to_read) {
    m_number_to_read = number_to_read;
    m_number_to_read_isSet = true;
}

bool OAISalesPersonQueryParameters::is_number_to_read_Set() const{
    return m_number_to_read_isSet;
}

bool OAISalesPersonQueryParameters::is_number_to_read_Valid() const{
    return m_number_to_read_isValid;
}

qint32 OAISalesPersonQueryParameters::getPageNumber() const {
    return m_page_number;
}
void OAISalesPersonQueryParameters::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAISalesPersonQueryParameters::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAISalesPersonQueryParameters::is_page_number_Valid() const{
    return m_page_number_isValid;
}

qint32 OAISalesPersonQueryParameters::getPageSize() const {
    return m_page_size;
}
void OAISalesPersonQueryParameters::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAISalesPersonQueryParameters::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAISalesPersonQueryParameters::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAISalesPersonQueryParameters::getSalesSub() const {
    return m_sales_sub;
}
void OAISalesPersonQueryParameters::setSalesSub(const QString &sales_sub) {
    m_sales_sub = sales_sub;
    m_sales_sub_isSet = true;
}

bool OAISalesPersonQueryParameters::is_sales_sub_Set() const{
    return m_sales_sub_isSet;
}

bool OAISalesPersonQueryParameters::is_sales_sub_Valid() const{
    return m_sales_sub_isValid;
}

QString OAISalesPersonQueryParameters::getSalespersonCd() const {
    return m_salesperson_cd;
}
void OAISalesPersonQueryParameters::setSalespersonCd(const QString &salesperson_cd) {
    m_salesperson_cd = salesperson_cd;
    m_salesperson_cd_isSet = true;
}

bool OAISalesPersonQueryParameters::is_salesperson_cd_Set() const{
    return m_salesperson_cd_isSet;
}

bool OAISalesPersonQueryParameters::is_salesperson_cd_Valid() const{
    return m_salesperson_cd_isValid;
}

qint32 OAISalesPersonQueryParameters::getSkipRecords() const {
    return m_skip_records;
}
void OAISalesPersonQueryParameters::setSkipRecords(const qint32 &skip_records) {
    m_skip_records = skip_records;
    m_skip_records_isSet = true;
}

bool OAISalesPersonQueryParameters::is_skip_records_Set() const{
    return m_skip_records_isSet;
}

bool OAISalesPersonQueryParameters::is_skip_records_Valid() const{
    return m_skip_records_isValid;
}

bool OAISalesPersonQueryParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commission_pct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_greater_than_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_to_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_sub_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_salesperson_cd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_records_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesPersonQueryParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
