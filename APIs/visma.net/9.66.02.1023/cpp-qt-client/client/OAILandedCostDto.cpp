/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILandedCostDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILandedCostDto::OAILandedCostDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILandedCostDto::OAILandedCostDto() {
    this->initializeModel();
}

OAILandedCostDto::~OAILandedCostDto() {}

void OAILandedCostDto::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_ap_bill_date_isSet = false;
    m_ap_bill_date_isValid = false;

    m_ap_doc_type_isSet = false;
    m_ap_doc_type_isValid = false;

    m_ap_ref_nbr_isSet = false;
    m_ap_ref_nbr_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_in_doc_type_isSet = false;
    m_in_doc_type_isValid = false;

    m_in_ref_nbr_isSet = false;
    m_in_ref_nbr_isValid = false;

    m_inventory_isSet = false;
    m_inventory_isValid = false;

    m_landed_cost_code_isSet = false;
    m_landed_cost_code_isValid = false;

    m_line_nbr_isSet = false;
    m_line_nbr_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_postpone_purchase_invoice_creation_isSet = false;
    m_postpone_purchase_invoice_creation_isValid = false;

    m_purchase_invoice_nbr_isSet = false;
    m_purchase_invoice_nbr_isValid = false;

    m_supplier_isSet = false;
    m_supplier_isValid = false;

    m_tax_category_isSet = false;
    m_tax_category_isValid = false;

    m_terms_isSet = false;
    m_terms_isValid = false;
}

void OAILandedCostDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILandedCostDto::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_ap_bill_date_isValid = ::OpenAPI::fromJsonValue(m_ap_bill_date, json[QString("apBillDate")]);
    m_ap_bill_date_isSet = !json[QString("apBillDate")].isNull() && m_ap_bill_date_isValid;

    m_ap_doc_type_isValid = ::OpenAPI::fromJsonValue(m_ap_doc_type, json[QString("apDocType")]);
    m_ap_doc_type_isSet = !json[QString("apDocType")].isNull() && m_ap_doc_type_isValid;

    m_ap_ref_nbr_isValid = ::OpenAPI::fromJsonValue(m_ap_ref_nbr, json[QString("apRefNbr")]);
    m_ap_ref_nbr_isSet = !json[QString("apRefNbr")].isNull() && m_ap_ref_nbr_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_in_doc_type_isValid = ::OpenAPI::fromJsonValue(m_in_doc_type, json[QString("inDocType")]);
    m_in_doc_type_isSet = !json[QString("inDocType")].isNull() && m_in_doc_type_isValid;

    m_in_ref_nbr_isValid = ::OpenAPI::fromJsonValue(m_in_ref_nbr, json[QString("inRefNbr")]);
    m_in_ref_nbr_isSet = !json[QString("inRefNbr")].isNull() && m_in_ref_nbr_isValid;

    m_inventory_isValid = ::OpenAPI::fromJsonValue(m_inventory, json[QString("inventory")]);
    m_inventory_isSet = !json[QString("inventory")].isNull() && m_inventory_isValid;

    m_landed_cost_code_isValid = ::OpenAPI::fromJsonValue(m_landed_cost_code, json[QString("landedCostCode")]);
    m_landed_cost_code_isSet = !json[QString("landedCostCode")].isNull() && m_landed_cost_code_isValid;

    m_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_line_nbr, json[QString("lineNbr")]);
    m_line_nbr_isSet = !json[QString("lineNbr")].isNull() && m_line_nbr_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_postpone_purchase_invoice_creation_isValid = ::OpenAPI::fromJsonValue(m_postpone_purchase_invoice_creation, json[QString("postponePurchaseInvoiceCreation")]);
    m_postpone_purchase_invoice_creation_isSet = !json[QString("postponePurchaseInvoiceCreation")].isNull() && m_postpone_purchase_invoice_creation_isValid;

    m_purchase_invoice_nbr_isValid = ::OpenAPI::fromJsonValue(m_purchase_invoice_nbr, json[QString("purchaseInvoiceNbr")]);
    m_purchase_invoice_nbr_isSet = !json[QString("purchaseInvoiceNbr")].isNull() && m_purchase_invoice_nbr_isValid;

    m_supplier_isValid = ::OpenAPI::fromJsonValue(m_supplier, json[QString("supplier")]);
    m_supplier_isSet = !json[QString("supplier")].isNull() && m_supplier_isValid;

    m_tax_category_isValid = ::OpenAPI::fromJsonValue(m_tax_category, json[QString("taxCategory")]);
    m_tax_category_isSet = !json[QString("taxCategory")].isNull() && m_tax_category_isValid;

    m_terms_isValid = ::OpenAPI::fromJsonValue(m_terms, json[QString("terms")]);
    m_terms_isSet = !json[QString("terms")].isNull() && m_terms_isValid;
}

QString OAILandedCostDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILandedCostDto::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_ap_bill_date_isSet) {
        obj.insert(QString("apBillDate"), ::OpenAPI::toJsonValue(m_ap_bill_date));
    }
    if (m_ap_doc_type_isSet) {
        obj.insert(QString("apDocType"), ::OpenAPI::toJsonValue(m_ap_doc_type));
    }
    if (m_ap_ref_nbr_isSet) {
        obj.insert(QString("apRefNbr"), ::OpenAPI::toJsonValue(m_ap_ref_nbr));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_in_doc_type_isSet) {
        obj.insert(QString("inDocType"), ::OpenAPI::toJsonValue(m_in_doc_type));
    }
    if (m_in_ref_nbr_isSet) {
        obj.insert(QString("inRefNbr"), ::OpenAPI::toJsonValue(m_in_ref_nbr));
    }
    if (m_inventory.isSet()) {
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(m_inventory));
    }
    if (m_landed_cost_code_isSet) {
        obj.insert(QString("landedCostCode"), ::OpenAPI::toJsonValue(m_landed_cost_code));
    }
    if (m_line_nbr_isSet) {
        obj.insert(QString("lineNbr"), ::OpenAPI::toJsonValue(m_line_nbr));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_postpone_purchase_invoice_creation_isSet) {
        obj.insert(QString("postponePurchaseInvoiceCreation"), ::OpenAPI::toJsonValue(m_postpone_purchase_invoice_creation));
    }
    if (m_purchase_invoice_nbr_isSet) {
        obj.insert(QString("purchaseInvoiceNbr"), ::OpenAPI::toJsonValue(m_purchase_invoice_nbr));
    }
    if (m_supplier.isSet()) {
        obj.insert(QString("supplier"), ::OpenAPI::toJsonValue(m_supplier));
    }
    if (m_tax_category.isSet()) {
        obj.insert(QString("taxCategory"), ::OpenAPI::toJsonValue(m_tax_category));
    }
    if (m_terms.isSet()) {
        obj.insert(QString("terms"), ::OpenAPI::toJsonValue(m_terms));
    }
    return obj;
}

double OAILandedCostDto::getAmount() const {
    return m_amount;
}
void OAILandedCostDto::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAILandedCostDto::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAILandedCostDto::is_amount_Valid() const{
    return m_amount_isValid;
}

QDateTime OAILandedCostDto::getApBillDate() const {
    return m_ap_bill_date;
}
void OAILandedCostDto::setApBillDate(const QDateTime &ap_bill_date) {
    m_ap_bill_date = ap_bill_date;
    m_ap_bill_date_isSet = true;
}

bool OAILandedCostDto::is_ap_bill_date_Set() const{
    return m_ap_bill_date_isSet;
}

bool OAILandedCostDto::is_ap_bill_date_Valid() const{
    return m_ap_bill_date_isValid;
}

QString OAILandedCostDto::getApDocType() const {
    return m_ap_doc_type;
}
void OAILandedCostDto::setApDocType(const QString &ap_doc_type) {
    m_ap_doc_type = ap_doc_type;
    m_ap_doc_type_isSet = true;
}

bool OAILandedCostDto::is_ap_doc_type_Set() const{
    return m_ap_doc_type_isSet;
}

bool OAILandedCostDto::is_ap_doc_type_Valid() const{
    return m_ap_doc_type_isValid;
}

QString OAILandedCostDto::getApRefNbr() const {
    return m_ap_ref_nbr;
}
void OAILandedCostDto::setApRefNbr(const QString &ap_ref_nbr) {
    m_ap_ref_nbr = ap_ref_nbr;
    m_ap_ref_nbr_isSet = true;
}

bool OAILandedCostDto::is_ap_ref_nbr_Set() const{
    return m_ap_ref_nbr_isSet;
}

bool OAILandedCostDto::is_ap_ref_nbr_Valid() const{
    return m_ap_ref_nbr_isValid;
}

QString OAILandedCostDto::getCurrency() const {
    return m_currency;
}
void OAILandedCostDto::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAILandedCostDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAILandedCostDto::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAILandedCostDto::getDescription() const {
    return m_description;
}
void OAILandedCostDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILandedCostDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAILandedCostDto::is_description_Valid() const{
    return m_description_isValid;
}

QString OAILandedCostDto::getInDocType() const {
    return m_in_doc_type;
}
void OAILandedCostDto::setInDocType(const QString &in_doc_type) {
    m_in_doc_type = in_doc_type;
    m_in_doc_type_isSet = true;
}

bool OAILandedCostDto::is_in_doc_type_Set() const{
    return m_in_doc_type_isSet;
}

bool OAILandedCostDto::is_in_doc_type_Valid() const{
    return m_in_doc_type_isValid;
}

QString OAILandedCostDto::getInRefNbr() const {
    return m_in_ref_nbr;
}
void OAILandedCostDto::setInRefNbr(const QString &in_ref_nbr) {
    m_in_ref_nbr = in_ref_nbr;
    m_in_ref_nbr_isSet = true;
}

bool OAILandedCostDto::is_in_ref_nbr_Set() const{
    return m_in_ref_nbr_isSet;
}

bool OAILandedCostDto::is_in_ref_nbr_Valid() const{
    return m_in_ref_nbr_isValid;
}

OAIInventoryNumberDescriptionDto OAILandedCostDto::getInventory() const {
    return m_inventory;
}
void OAILandedCostDto::setInventory(const OAIInventoryNumberDescriptionDto &inventory) {
    m_inventory = inventory;
    m_inventory_isSet = true;
}

bool OAILandedCostDto::is_inventory_Set() const{
    return m_inventory_isSet;
}

bool OAILandedCostDto::is_inventory_Valid() const{
    return m_inventory_isValid;
}

QString OAILandedCostDto::getLandedCostCode() const {
    return m_landed_cost_code;
}
void OAILandedCostDto::setLandedCostCode(const QString &landed_cost_code) {
    m_landed_cost_code = landed_cost_code;
    m_landed_cost_code_isSet = true;
}

bool OAILandedCostDto::is_landed_cost_code_Set() const{
    return m_landed_cost_code_isSet;
}

bool OAILandedCostDto::is_landed_cost_code_Valid() const{
    return m_landed_cost_code_isValid;
}

qint32 OAILandedCostDto::getLineNbr() const {
    return m_line_nbr;
}
void OAILandedCostDto::setLineNbr(const qint32 &line_nbr) {
    m_line_nbr = line_nbr;
    m_line_nbr_isSet = true;
}

bool OAILandedCostDto::is_line_nbr_Set() const{
    return m_line_nbr_isSet;
}

bool OAILandedCostDto::is_line_nbr_Valid() const{
    return m_line_nbr_isValid;
}

OAILocationInLandedCostDto OAILandedCostDto::getLocation() const {
    return m_location;
}
void OAILandedCostDto::setLocation(const OAILocationInLandedCostDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAILandedCostDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAILandedCostDto::is_location_Valid() const{
    return m_location_isValid;
}

bool OAILandedCostDto::isPostponePurchaseInvoiceCreation() const {
    return m_postpone_purchase_invoice_creation;
}
void OAILandedCostDto::setPostponePurchaseInvoiceCreation(const bool &postpone_purchase_invoice_creation) {
    m_postpone_purchase_invoice_creation = postpone_purchase_invoice_creation;
    m_postpone_purchase_invoice_creation_isSet = true;
}

bool OAILandedCostDto::is_postpone_purchase_invoice_creation_Set() const{
    return m_postpone_purchase_invoice_creation_isSet;
}

bool OAILandedCostDto::is_postpone_purchase_invoice_creation_Valid() const{
    return m_postpone_purchase_invoice_creation_isValid;
}

QString OAILandedCostDto::getPurchaseInvoiceNbr() const {
    return m_purchase_invoice_nbr;
}
void OAILandedCostDto::setPurchaseInvoiceNbr(const QString &purchase_invoice_nbr) {
    m_purchase_invoice_nbr = purchase_invoice_nbr;
    m_purchase_invoice_nbr_isSet = true;
}

bool OAILandedCostDto::is_purchase_invoice_nbr_Set() const{
    return m_purchase_invoice_nbr_isSet;
}

bool OAILandedCostDto::is_purchase_invoice_nbr_Valid() const{
    return m_purchase_invoice_nbr_isValid;
}

OAISupplierInLandedCostDto OAILandedCostDto::getSupplier() const {
    return m_supplier;
}
void OAILandedCostDto::setSupplier(const OAISupplierInLandedCostDto &supplier) {
    m_supplier = supplier;
    m_supplier_isSet = true;
}

bool OAILandedCostDto::is_supplier_Set() const{
    return m_supplier_isSet;
}

bool OAILandedCostDto::is_supplier_Valid() const{
    return m_supplier_isValid;
}

OAITaxCategoryInLandedCostDto OAILandedCostDto::getTaxCategory() const {
    return m_tax_category;
}
void OAILandedCostDto::setTaxCategory(const OAITaxCategoryInLandedCostDto &tax_category) {
    m_tax_category = tax_category;
    m_tax_category_isSet = true;
}

bool OAILandedCostDto::is_tax_category_Set() const{
    return m_tax_category_isSet;
}

bool OAILandedCostDto::is_tax_category_Valid() const{
    return m_tax_category_isValid;
}

OAITermsInLandedCostDto OAILandedCostDto::getTerms() const {
    return m_terms;
}
void OAILandedCostDto::setTerms(const OAITermsInLandedCostDto &terms) {
    m_terms = terms;
    m_terms_isSet = true;
}

bool OAILandedCostDto::is_terms_Set() const{
    return m_terms_isSet;
}

bool OAILandedCostDto::is_terms_Valid() const{
    return m_terms_isValid;
}

bool OAILandedCostDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ap_bill_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ap_doc_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ap_ref_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_doc_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_ref_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_landed_cost_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_postpone_purchase_invoice_creation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_invoice_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILandedCostDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
