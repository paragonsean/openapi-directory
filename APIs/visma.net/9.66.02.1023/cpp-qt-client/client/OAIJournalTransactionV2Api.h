/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJournalTransactionV2Api_H
#define OAI_OAIJournalTransactionV2Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAIJournalTransactionDto.h"
#include "OAIJournalTransactionUpdateDto.h"
#include "OAIObject.h"
#include "OAIReleaseJournalTransactionActionResultDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJournalTransactionV2Api : public QObject {
    Q_OBJECT

public:
    OAIJournalTransactionV2Api(const int timeOut = 0);
    ~OAIJournalTransactionV2Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  module QString [required]
    * @param[in]  journal_transaction_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void journalTransactionV2AddHeaderAttachmentBymodulejournalTransactionNumber(const QString &module, const QString &journal_transaction_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  module QString [required]
    * @param[in]  journal_transaction_number QString [required]
    * @param[in]  line_number qint32 [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void journalTransactionV2AddLineAttachmentBymodulejournalTransactionNumberlineNumber(const QString &module, const QString &journal_transaction_number, const qint32 &line_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  period_id QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  module QString [optional]
    * @param[in]  released_batch bool [optional]
    * @param[in]  expand_attachments bool [optional]
    * @param[in]  branch QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void journalTransactionV2GetAllJournalTransactions(const ::OpenAPI::OptionalParam<QString> &period_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &released_batch = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_attachments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &branch = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  journal_transaction_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumber(const QString &journal_transaction_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_journal_transaction_update_dto OAIJournalTransactionUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void journalTransactionV2Post(const OAIJournalTransactionUpdateDto &oai_journal_transaction_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  journal_transaction_number QString [required]
    * @param[in]  oai_journal_transaction_update_dto OAIJournalTransactionUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void journalTransactionV2PutByjournalTransactionNumber(const QString &journal_transaction_number, const OAIJournalTransactionUpdateDto &oai_journal_transaction_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  journal_transaction_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumber(const QString &journal_transaction_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void journalTransactionV2AddHeaderAttachmentBymodulejournalTransactionNumberCallback(OAIHttpRequestWorker *worker);
    void journalTransactionV2AddLineAttachmentBymodulejournalTransactionNumberlineNumberCallback(OAIHttpRequestWorker *worker);
    void journalTransactionV2GetAllJournalTransactionsCallback(OAIHttpRequestWorker *worker);
    void journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumberCallback(OAIHttpRequestWorker *worker);
    void journalTransactionV2PostCallback(OAIHttpRequestWorker *worker);
    void journalTransactionV2PutByjournalTransactionNumberCallback(OAIHttpRequestWorker *worker);
    void journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumberCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void journalTransactionV2AddHeaderAttachmentBymodulejournalTransactionNumberSignal(OAIObject summary);
    void journalTransactionV2AddLineAttachmentBymodulejournalTransactionNumberlineNumberSignal(OAIObject summary);
    void journalTransactionV2GetAllJournalTransactionsSignal(QList<OAIJournalTransactionDto> summary);
    void journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumberSignal(OAIJournalTransactionDto summary);
    void journalTransactionV2PostSignal(OAIObject summary);
    void journalTransactionV2PutByjournalTransactionNumberSignal(OAIBackgroundApiAcceptedDto summary);
    void journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumberSignal(OAIReleaseJournalTransactionActionResultDto summary);


    void journalTransactionV2AddHeaderAttachmentBymodulejournalTransactionNumberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void journalTransactionV2AddLineAttachmentBymodulejournalTransactionNumberlineNumberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void journalTransactionV2GetAllJournalTransactionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIJournalTransactionDto> summary);
    void journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumberSignalFull(OAIHttpRequestWorker *worker, OAIJournalTransactionDto summary);
    void journalTransactionV2PostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void journalTransactionV2PutByjournalTransactionNumberSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);
    void journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumberSignalFull(OAIHttpRequestWorker *worker, OAIReleaseJournalTransactionActionResultDto summary);

    Q_DECL_DEPRECATED_X("Use journalTransactionV2AddHeaderAttachmentBymodulejournalTransactionNumberSignalError() instead")
    void journalTransactionV2AddHeaderAttachmentBymodulejournalTransactionNumberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void journalTransactionV2AddHeaderAttachmentBymodulejournalTransactionNumberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use journalTransactionV2AddLineAttachmentBymodulejournalTransactionNumberlineNumberSignalError() instead")
    void journalTransactionV2AddLineAttachmentBymodulejournalTransactionNumberlineNumberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void journalTransactionV2AddLineAttachmentBymodulejournalTransactionNumberlineNumberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use journalTransactionV2GetAllJournalTransactionsSignalError() instead")
    void journalTransactionV2GetAllJournalTransactionsSignalE(QList<OAIJournalTransactionDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void journalTransactionV2GetAllJournalTransactionsSignalError(QList<OAIJournalTransactionDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumberSignalError() instead")
    void journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumberSignalE(OAIJournalTransactionDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumberSignalError(OAIJournalTransactionDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use journalTransactionV2PostSignalError() instead")
    void journalTransactionV2PostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void journalTransactionV2PostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use journalTransactionV2PutByjournalTransactionNumberSignalError() instead")
    void journalTransactionV2PutByjournalTransactionNumberSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void journalTransactionV2PutByjournalTransactionNumberSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumberSignalError() instead")
    void journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumberSignalE(OAIReleaseJournalTransactionActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumberSignalError(OAIReleaseJournalTransactionActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use journalTransactionV2AddHeaderAttachmentBymodulejournalTransactionNumberSignalErrorFull() instead")
    void journalTransactionV2AddHeaderAttachmentBymodulejournalTransactionNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void journalTransactionV2AddHeaderAttachmentBymodulejournalTransactionNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use journalTransactionV2AddLineAttachmentBymodulejournalTransactionNumberlineNumberSignalErrorFull() instead")
    void journalTransactionV2AddLineAttachmentBymodulejournalTransactionNumberlineNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void journalTransactionV2AddLineAttachmentBymodulejournalTransactionNumberlineNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use journalTransactionV2GetAllJournalTransactionsSignalErrorFull() instead")
    void journalTransactionV2GetAllJournalTransactionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void journalTransactionV2GetAllJournalTransactionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumberSignalErrorFull() instead")
    void journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use journalTransactionV2PostSignalErrorFull() instead")
    void journalTransactionV2PostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void journalTransactionV2PostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use journalTransactionV2PutByjournalTransactionNumberSignalErrorFull() instead")
    void journalTransactionV2PutByjournalTransactionNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void journalTransactionV2PutByjournalTransactionNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumberSignalErrorFull() instead")
    void journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
