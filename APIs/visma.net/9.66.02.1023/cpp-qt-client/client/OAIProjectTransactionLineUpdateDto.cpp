/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectTransactionLineUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectTransactionLineUpdateDto::OAIProjectTransactionLineUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectTransactionLineUpdateDto::OAIProjectTransactionLineUpdateDto() {
    this->initializeModel();
}

OAIProjectTransactionLineUpdateDto::~OAIProjectTransactionLineUpdateDto() {}

void OAIProjectTransactionLineUpdateDto::initializeModel() {

    m_account_group_isSet = false;
    m_account_group_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_batch_nbr_isSet = false;
    m_batch_nbr_isValid = false;

    m_billable_isSet = false;
    m_billable_isValid = false;

    m_billable_quantity_isSet = false;
    m_billable_quantity_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_credit_account_isSet = false;
    m_credit_account_isValid = false;

    m_credit_subaccount_isSet = false;
    m_credit_subaccount_isValid = false;

    m_customer_vendor_isSet = false;
    m_customer_vendor_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_debit_account_isSet = false;
    m_debit_account_isValid = false;

    m_debit_subaccount_isSet = false;
    m_debit_subaccount_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_employee_isSet = false;
    m_employee_isValid = false;

    m_financial_period_isSet = false;
    m_financial_period_isValid = false;

    m_inventory_id_isSet = false;
    m_inventory_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_project_task_isSet = false;
    m_project_task_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_tran_id_isSet = false;
    m_tran_id_isValid = false;

    m_unit_rate_isSet = false;
    m_unit_rate_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;

    m_use_billable_qty_isSet = false;
    m_use_billable_qty_isValid = false;
}

void OAIProjectTransactionLineUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectTransactionLineUpdateDto::fromJsonObject(QJsonObject json) {

    m_account_group_isValid = ::OpenAPI::fromJsonValue(m_account_group, json[QString("accountGroup")]);
    m_account_group_isSet = !json[QString("accountGroup")].isNull() && m_account_group_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_batch_nbr_isValid = ::OpenAPI::fromJsonValue(m_batch_nbr, json[QString("batchNbr")]);
    m_batch_nbr_isSet = !json[QString("batchNbr")].isNull() && m_batch_nbr_isValid;

    m_billable_isValid = ::OpenAPI::fromJsonValue(m_billable, json[QString("billable")]);
    m_billable_isSet = !json[QString("billable")].isNull() && m_billable_isValid;

    m_billable_quantity_isValid = ::OpenAPI::fromJsonValue(m_billable_quantity, json[QString("billableQuantity")]);
    m_billable_quantity_isSet = !json[QString("billableQuantity")].isNull() && m_billable_quantity_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_credit_account_isValid = ::OpenAPI::fromJsonValue(m_credit_account, json[QString("creditAccount")]);
    m_credit_account_isSet = !json[QString("creditAccount")].isNull() && m_credit_account_isValid;

    m_credit_subaccount_isValid = ::OpenAPI::fromJsonValue(m_credit_subaccount, json[QString("creditSubaccount")]);
    m_credit_subaccount_isSet = !json[QString("creditSubaccount")].isNull() && m_credit_subaccount_isValid;

    m_customer_vendor_isValid = ::OpenAPI::fromJsonValue(m_customer_vendor, json[QString("customerVendor")]);
    m_customer_vendor_isSet = !json[QString("customerVendor")].isNull() && m_customer_vendor_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_debit_account_isValid = ::OpenAPI::fromJsonValue(m_debit_account, json[QString("debitAccount")]);
    m_debit_account_isSet = !json[QString("debitAccount")].isNull() && m_debit_account_isValid;

    m_debit_subaccount_isValid = ::OpenAPI::fromJsonValue(m_debit_subaccount, json[QString("debitSubaccount")]);
    m_debit_subaccount_isSet = !json[QString("debitSubaccount")].isNull() && m_debit_subaccount_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_employee_isValid = ::OpenAPI::fromJsonValue(m_employee, json[QString("employee")]);
    m_employee_isSet = !json[QString("employee")].isNull() && m_employee_isValid;

    m_financial_period_isValid = ::OpenAPI::fromJsonValue(m_financial_period, json[QString("financialPeriod")]);
    m_financial_period_isSet = !json[QString("financialPeriod")].isNull() && m_financial_period_isValid;

    m_inventory_id_isValid = ::OpenAPI::fromJsonValue(m_inventory_id, json[QString("inventoryId")]);
    m_inventory_id_isSet = !json[QString("inventoryId")].isNull() && m_inventory_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_project_task_isValid = ::OpenAPI::fromJsonValue(m_project_task, json[QString("projectTask")]);
    m_project_task_isSet = !json[QString("projectTask")].isNull() && m_project_task_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_tran_id_isValid = ::OpenAPI::fromJsonValue(m_tran_id, json[QString("tranId")]);
    m_tran_id_isSet = !json[QString("tranId")].isNull() && m_tran_id_isValid;

    m_unit_rate_isValid = ::OpenAPI::fromJsonValue(m_unit_rate, json[QString("unitRate")]);
    m_unit_rate_isSet = !json[QString("unitRate")].isNull() && m_unit_rate_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;

    m_use_billable_qty_isValid = ::OpenAPI::fromJsonValue(m_use_billable_qty, json[QString("useBillableQty")]);
    m_use_billable_qty_isSet = !json[QString("useBillableQty")].isNull() && m_use_billable_qty_isValid;
}

QString OAIProjectTransactionLineUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectTransactionLineUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_account_group.isSet()) {
        obj.insert(QString("accountGroup"), ::OpenAPI::toJsonValue(m_account_group));
    }
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_batch_nbr.isSet()) {
        obj.insert(QString("batchNbr"), ::OpenAPI::toJsonValue(m_batch_nbr));
    }
    if (m_billable.isSet()) {
        obj.insert(QString("billable"), ::OpenAPI::toJsonValue(m_billable));
    }
    if (m_billable_quantity.isSet()) {
        obj.insert(QString("billableQuantity"), ::OpenAPI::toJsonValue(m_billable_quantity));
    }
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_credit_account.isSet()) {
        obj.insert(QString("creditAccount"), ::OpenAPI::toJsonValue(m_credit_account));
    }
    if (m_credit_subaccount.isSet()) {
        obj.insert(QString("creditSubaccount"), ::OpenAPI::toJsonValue(m_credit_subaccount));
    }
    if (m_customer_vendor.isSet()) {
        obj.insert(QString("customerVendor"), ::OpenAPI::toJsonValue(m_customer_vendor));
    }
    if (m_date.isSet()) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_debit_account.isSet()) {
        obj.insert(QString("debitAccount"), ::OpenAPI::toJsonValue(m_debit_account));
    }
    if (m_debit_subaccount.isSet()) {
        obj.insert(QString("debitSubaccount"), ::OpenAPI::toJsonValue(m_debit_subaccount));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_employee.isSet()) {
        obj.insert(QString("employee"), ::OpenAPI::toJsonValue(m_employee));
    }
    if (m_financial_period.isSet()) {
        obj.insert(QString("financialPeriod"), ::OpenAPI::toJsonValue(m_financial_period));
    }
    if (m_inventory_id.isSet()) {
        obj.insert(QString("inventoryId"), ::OpenAPI::toJsonValue(m_inventory_id));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_note.isSet()) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_project_task.isSet()) {
        obj.insert(QString("projectTask"), ::OpenAPI::toJsonValue(m_project_task));
    }
    if (m_quantity.isSet()) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_tran_id.isSet()) {
        obj.insert(QString("tranId"), ::OpenAPI::toJsonValue(m_tran_id));
    }
    if (m_unit_rate.isSet()) {
        obj.insert(QString("unitRate"), ::OpenAPI::toJsonValue(m_unit_rate));
    }
    if (m_uom.isSet()) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    if (m_use_billable_qty.isSet()) {
        obj.insert(QString("useBillableQty"), ::OpenAPI::toJsonValue(m_use_billable_qty));
    }
    return obj;
}

OAIDtoValueOfString OAIProjectTransactionLineUpdateDto::getAccountGroup() const {
    return m_account_group;
}
void OAIProjectTransactionLineUpdateDto::setAccountGroup(const OAIDtoValueOfString &account_group) {
    m_account_group = account_group;
    m_account_group_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_account_group_Set() const{
    return m_account_group_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_account_group_Valid() const{
    return m_account_group_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIProjectTransactionLineUpdateDto::getAmount() const {
    return m_amount;
}
void OAIProjectTransactionLineUpdateDto::setAmount(const OAIDtoValueOfNullableOfDecimal &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIDtoValueOfString OAIProjectTransactionLineUpdateDto::getBatchNbr() const {
    return m_batch_nbr;
}
void OAIProjectTransactionLineUpdateDto::setBatchNbr(const OAIDtoValueOfString &batch_nbr) {
    m_batch_nbr = batch_nbr;
    m_batch_nbr_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_batch_nbr_Set() const{
    return m_batch_nbr_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_batch_nbr_Valid() const{
    return m_batch_nbr_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIProjectTransactionLineUpdateDto::getBillable() const {
    return m_billable;
}
void OAIProjectTransactionLineUpdateDto::setBillable(const OAIDtoValueOfNullableOfBoolean &billable) {
    m_billable = billable;
    m_billable_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_billable_Set() const{
    return m_billable_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_billable_Valid() const{
    return m_billable_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIProjectTransactionLineUpdateDto::getBillableQuantity() const {
    return m_billable_quantity;
}
void OAIProjectTransactionLineUpdateDto::setBillableQuantity(const OAIDtoValueOfNullableOfDecimal &billable_quantity) {
    m_billable_quantity = billable_quantity;
    m_billable_quantity_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_billable_quantity_Set() const{
    return m_billable_quantity_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_billable_quantity_Valid() const{
    return m_billable_quantity_isValid;
}

OAIDtoValueOfString OAIProjectTransactionLineUpdateDto::getBranch() const {
    return m_branch;
}
void OAIProjectTransactionLineUpdateDto::setBranch(const OAIDtoValueOfString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_branch_Valid() const{
    return m_branch_isValid;
}

OAIDtoValueOfString OAIProjectTransactionLineUpdateDto::getCreditAccount() const {
    return m_credit_account;
}
void OAIProjectTransactionLineUpdateDto::setCreditAccount(const OAIDtoValueOfString &credit_account) {
    m_credit_account = credit_account;
    m_credit_account_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_credit_account_Set() const{
    return m_credit_account_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_credit_account_Valid() const{
    return m_credit_account_isValid;
}

OAIDtoValueOfString OAIProjectTransactionLineUpdateDto::getCreditSubaccount() const {
    return m_credit_subaccount;
}
void OAIProjectTransactionLineUpdateDto::setCreditSubaccount(const OAIDtoValueOfString &credit_subaccount) {
    m_credit_subaccount = credit_subaccount;
    m_credit_subaccount_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_credit_subaccount_Set() const{
    return m_credit_subaccount_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_credit_subaccount_Valid() const{
    return m_credit_subaccount_isValid;
}

OAIDtoValueOfString OAIProjectTransactionLineUpdateDto::getCustomerVendor() const {
    return m_customer_vendor;
}
void OAIProjectTransactionLineUpdateDto::setCustomerVendor(const OAIDtoValueOfString &customer_vendor) {
    m_customer_vendor = customer_vendor;
    m_customer_vendor_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_customer_vendor_Set() const{
    return m_customer_vendor_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_customer_vendor_Valid() const{
    return m_customer_vendor_isValid;
}

OAIDtoValueOfNullableOfDateTime OAIProjectTransactionLineUpdateDto::getDate() const {
    return m_date;
}
void OAIProjectTransactionLineUpdateDto::setDate(const OAIDtoValueOfNullableOfDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_date_Valid() const{
    return m_date_isValid;
}

OAIDtoValueOfString OAIProjectTransactionLineUpdateDto::getDebitAccount() const {
    return m_debit_account;
}
void OAIProjectTransactionLineUpdateDto::setDebitAccount(const OAIDtoValueOfString &debit_account) {
    m_debit_account = debit_account;
    m_debit_account_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_debit_account_Set() const{
    return m_debit_account_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_debit_account_Valid() const{
    return m_debit_account_isValid;
}

OAIDtoValueOfString OAIProjectTransactionLineUpdateDto::getDebitSubaccount() const {
    return m_debit_subaccount;
}
void OAIProjectTransactionLineUpdateDto::setDebitSubaccount(const OAIDtoValueOfString &debit_subaccount) {
    m_debit_subaccount = debit_subaccount;
    m_debit_subaccount_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_debit_subaccount_Set() const{
    return m_debit_subaccount_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_debit_subaccount_Valid() const{
    return m_debit_subaccount_isValid;
}

OAIDtoValueOfString OAIProjectTransactionLineUpdateDto::getDescription() const {
    return m_description;
}
void OAIProjectTransactionLineUpdateDto::setDescription(const OAIDtoValueOfString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIDtoValueOfString OAIProjectTransactionLineUpdateDto::getEmployee() const {
    return m_employee;
}
void OAIProjectTransactionLineUpdateDto::setEmployee(const OAIDtoValueOfString &employee) {
    m_employee = employee;
    m_employee_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_employee_Set() const{
    return m_employee_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_employee_Valid() const{
    return m_employee_isValid;
}

OAIDtoValueOfString OAIProjectTransactionLineUpdateDto::getFinancialPeriod() const {
    return m_financial_period;
}
void OAIProjectTransactionLineUpdateDto::setFinancialPeriod(const OAIDtoValueOfString &financial_period) {
    m_financial_period = financial_period;
    m_financial_period_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_financial_period_Set() const{
    return m_financial_period_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_financial_period_Valid() const{
    return m_financial_period_isValid;
}

OAIDtoValueOfString OAIProjectTransactionLineUpdateDto::getInventoryId() const {
    return m_inventory_id;
}
void OAIProjectTransactionLineUpdateDto::setInventoryId(const OAIDtoValueOfString &inventory_id) {
    m_inventory_id = inventory_id;
    m_inventory_id_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_inventory_id_Set() const{
    return m_inventory_id_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_inventory_id_Valid() const{
    return m_inventory_id_isValid;
}

OAIDtoValueOfString OAIProjectTransactionLineUpdateDto::getLocation() const {
    return m_location;
}
void OAIProjectTransactionLineUpdateDto::setLocation(const OAIDtoValueOfString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIDtoValueOfString OAIProjectTransactionLineUpdateDto::getNote() const {
    return m_note;
}
void OAIProjectTransactionLineUpdateDto::setNote(const OAIDtoValueOfString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIProjectTransactionLineUpdateDto::getOperation() const {
    return m_operation;
}
void OAIProjectTransactionLineUpdateDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIDtoValueOfString OAIProjectTransactionLineUpdateDto::getProject() const {
    return m_project;
}
void OAIProjectTransactionLineUpdateDto::setProject(const OAIDtoValueOfString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_project_Set() const{
    return m_project_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_project_Valid() const{
    return m_project_isValid;
}

OAIDtoValueOfString OAIProjectTransactionLineUpdateDto::getProjectTask() const {
    return m_project_task;
}
void OAIProjectTransactionLineUpdateDto::setProjectTask(const OAIDtoValueOfString &project_task) {
    m_project_task = project_task;
    m_project_task_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_project_task_Set() const{
    return m_project_task_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_project_task_Valid() const{
    return m_project_task_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIProjectTransactionLineUpdateDto::getQuantity() const {
    return m_quantity;
}
void OAIProjectTransactionLineUpdateDto::setQuantity(const OAIDtoValueOfNullableOfDecimal &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIDtoValueOfInt64 OAIProjectTransactionLineUpdateDto::getTranId() const {
    return m_tran_id;
}
void OAIProjectTransactionLineUpdateDto::setTranId(const OAIDtoValueOfInt64 &tran_id) {
    m_tran_id = tran_id;
    m_tran_id_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_tran_id_Set() const{
    return m_tran_id_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_tran_id_Valid() const{
    return m_tran_id_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIProjectTransactionLineUpdateDto::getUnitRate() const {
    return m_unit_rate;
}
void OAIProjectTransactionLineUpdateDto::setUnitRate(const OAIDtoValueOfNullableOfDecimal &unit_rate) {
    m_unit_rate = unit_rate;
    m_unit_rate_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_unit_rate_Set() const{
    return m_unit_rate_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_unit_rate_Valid() const{
    return m_unit_rate_isValid;
}

OAIDtoValueOfString OAIProjectTransactionLineUpdateDto::getUom() const {
    return m_uom;
}
void OAIProjectTransactionLineUpdateDto::setUom(const OAIDtoValueOfString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_uom_Valid() const{
    return m_uom_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIProjectTransactionLineUpdateDto::getUseBillableQty() const {
    return m_use_billable_qty;
}
void OAIProjectTransactionLineUpdateDto::setUseBillableQty(const OAIDtoValueOfNullableOfBoolean &use_billable_qty) {
    m_use_billable_qty = use_billable_qty;
    m_use_billable_qty_isSet = true;
}

bool OAIProjectTransactionLineUpdateDto::is_use_billable_qty_Set() const{
    return m_use_billable_qty_isSet;
}

bool OAIProjectTransactionLineUpdateDto::is_use_billable_qty_Valid() const{
    return m_use_billable_qty_isValid;
}

bool OAIProjectTransactionLineUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billable_quantity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_vendor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_financial_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tran_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_billable_qty.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectTransactionLineUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
