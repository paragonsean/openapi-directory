/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKitSpecificationNonStockComponentsUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKitSpecificationNonStockComponentsUpdateDto::OAIKitSpecificationNonStockComponentsUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKitSpecificationNonStockComponentsUpdateDto::OAIKitSpecificationNonStockComponentsUpdateDto() {
    this->initializeModel();
}

OAIKitSpecificationNonStockComponentsUpdateDto::~OAIKitSpecificationNonStockComponentsUpdateDto() {}

void OAIKitSpecificationNonStockComponentsUpdateDto::initializeModel() {

    m_allow_qty_variation_isSet = false;
    m_allow_qty_variation_isValid = false;

    m_comp_inventory_id_isSet = false;
    m_comp_inventory_id_isValid = false;

    m_dflt_comp_qty_isSet = false;
    m_dflt_comp_qty_isValid = false;

    m_line_nbr_isSet = false;
    m_line_nbr_isValid = false;

    m_max_comp_qty_isSet = false;
    m_max_comp_qty_isValid = false;

    m_min_comp_qty_isSet = false;
    m_min_comp_qty_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;
}

void OAIKitSpecificationNonStockComponentsUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKitSpecificationNonStockComponentsUpdateDto::fromJsonObject(QJsonObject json) {

    m_allow_qty_variation_isValid = ::OpenAPI::fromJsonValue(m_allow_qty_variation, json[QString("allowQtyVariation")]);
    m_allow_qty_variation_isSet = !json[QString("allowQtyVariation")].isNull() && m_allow_qty_variation_isValid;

    m_comp_inventory_id_isValid = ::OpenAPI::fromJsonValue(m_comp_inventory_id, json[QString("compInventoryID")]);
    m_comp_inventory_id_isSet = !json[QString("compInventoryID")].isNull() && m_comp_inventory_id_isValid;

    m_dflt_comp_qty_isValid = ::OpenAPI::fromJsonValue(m_dflt_comp_qty, json[QString("dfltCompQty")]);
    m_dflt_comp_qty_isSet = !json[QString("dfltCompQty")].isNull() && m_dflt_comp_qty_isValid;

    m_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_line_nbr, json[QString("lineNbr")]);
    m_line_nbr_isSet = !json[QString("lineNbr")].isNull() && m_line_nbr_isValid;

    m_max_comp_qty_isValid = ::OpenAPI::fromJsonValue(m_max_comp_qty, json[QString("maxCompQty")]);
    m_max_comp_qty_isSet = !json[QString("maxCompQty")].isNull() && m_max_comp_qty_isValid;

    m_min_comp_qty_isValid = ::OpenAPI::fromJsonValue(m_min_comp_qty, json[QString("minCompQty")]);
    m_min_comp_qty_isSet = !json[QString("minCompQty")].isNull() && m_min_comp_qty_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;
}

QString OAIKitSpecificationNonStockComponentsUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKitSpecificationNonStockComponentsUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_qty_variation.isSet()) {
        obj.insert(QString("allowQtyVariation"), ::OpenAPI::toJsonValue(m_allow_qty_variation));
    }
    if (m_comp_inventory_id.isSet()) {
        obj.insert(QString("compInventoryID"), ::OpenAPI::toJsonValue(m_comp_inventory_id));
    }
    if (m_dflt_comp_qty.isSet()) {
        obj.insert(QString("dfltCompQty"), ::OpenAPI::toJsonValue(m_dflt_comp_qty));
    }
    if (m_line_nbr.isSet()) {
        obj.insert(QString("lineNbr"), ::OpenAPI::toJsonValue(m_line_nbr));
    }
    if (m_max_comp_qty.isSet()) {
        obj.insert(QString("maxCompQty"), ::OpenAPI::toJsonValue(m_max_comp_qty));
    }
    if (m_min_comp_qty.isSet()) {
        obj.insert(QString("minCompQty"), ::OpenAPI::toJsonValue(m_min_comp_qty));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_uom.isSet()) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    return obj;
}

OAIDtoValueOfNullableOfBoolean OAIKitSpecificationNonStockComponentsUpdateDto::getAllowQtyVariation() const {
    return m_allow_qty_variation;
}
void OAIKitSpecificationNonStockComponentsUpdateDto::setAllowQtyVariation(const OAIDtoValueOfNullableOfBoolean &allow_qty_variation) {
    m_allow_qty_variation = allow_qty_variation;
    m_allow_qty_variation_isSet = true;
}

bool OAIKitSpecificationNonStockComponentsUpdateDto::is_allow_qty_variation_Set() const{
    return m_allow_qty_variation_isSet;
}

bool OAIKitSpecificationNonStockComponentsUpdateDto::is_allow_qty_variation_Valid() const{
    return m_allow_qty_variation_isValid;
}

OAIDtoValueOfString OAIKitSpecificationNonStockComponentsUpdateDto::getCompInventoryId() const {
    return m_comp_inventory_id;
}
void OAIKitSpecificationNonStockComponentsUpdateDto::setCompInventoryId(const OAIDtoValueOfString &comp_inventory_id) {
    m_comp_inventory_id = comp_inventory_id;
    m_comp_inventory_id_isSet = true;
}

bool OAIKitSpecificationNonStockComponentsUpdateDto::is_comp_inventory_id_Set() const{
    return m_comp_inventory_id_isSet;
}

bool OAIKitSpecificationNonStockComponentsUpdateDto::is_comp_inventory_id_Valid() const{
    return m_comp_inventory_id_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIKitSpecificationNonStockComponentsUpdateDto::getDfltCompQty() const {
    return m_dflt_comp_qty;
}
void OAIKitSpecificationNonStockComponentsUpdateDto::setDfltCompQty(const OAIDtoValueOfNullableOfDecimal &dflt_comp_qty) {
    m_dflt_comp_qty = dflt_comp_qty;
    m_dflt_comp_qty_isSet = true;
}

bool OAIKitSpecificationNonStockComponentsUpdateDto::is_dflt_comp_qty_Set() const{
    return m_dflt_comp_qty_isSet;
}

bool OAIKitSpecificationNonStockComponentsUpdateDto::is_dflt_comp_qty_Valid() const{
    return m_dflt_comp_qty_isValid;
}

OAIDtoValueOfNullableOfInt32 OAIKitSpecificationNonStockComponentsUpdateDto::getLineNbr() const {
    return m_line_nbr;
}
void OAIKitSpecificationNonStockComponentsUpdateDto::setLineNbr(const OAIDtoValueOfNullableOfInt32 &line_nbr) {
    m_line_nbr = line_nbr;
    m_line_nbr_isSet = true;
}

bool OAIKitSpecificationNonStockComponentsUpdateDto::is_line_nbr_Set() const{
    return m_line_nbr_isSet;
}

bool OAIKitSpecificationNonStockComponentsUpdateDto::is_line_nbr_Valid() const{
    return m_line_nbr_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIKitSpecificationNonStockComponentsUpdateDto::getMaxCompQty() const {
    return m_max_comp_qty;
}
void OAIKitSpecificationNonStockComponentsUpdateDto::setMaxCompQty(const OAIDtoValueOfNullableOfDecimal &max_comp_qty) {
    m_max_comp_qty = max_comp_qty;
    m_max_comp_qty_isSet = true;
}

bool OAIKitSpecificationNonStockComponentsUpdateDto::is_max_comp_qty_Set() const{
    return m_max_comp_qty_isSet;
}

bool OAIKitSpecificationNonStockComponentsUpdateDto::is_max_comp_qty_Valid() const{
    return m_max_comp_qty_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIKitSpecificationNonStockComponentsUpdateDto::getMinCompQty() const {
    return m_min_comp_qty;
}
void OAIKitSpecificationNonStockComponentsUpdateDto::setMinCompQty(const OAIDtoValueOfNullableOfDecimal &min_comp_qty) {
    m_min_comp_qty = min_comp_qty;
    m_min_comp_qty_isSet = true;
}

bool OAIKitSpecificationNonStockComponentsUpdateDto::is_min_comp_qty_Set() const{
    return m_min_comp_qty_isSet;
}

bool OAIKitSpecificationNonStockComponentsUpdateDto::is_min_comp_qty_Valid() const{
    return m_min_comp_qty_isValid;
}

QString OAIKitSpecificationNonStockComponentsUpdateDto::getOperation() const {
    return m_operation;
}
void OAIKitSpecificationNonStockComponentsUpdateDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIKitSpecificationNonStockComponentsUpdateDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIKitSpecificationNonStockComponentsUpdateDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIDtoValueOfString OAIKitSpecificationNonStockComponentsUpdateDto::getUom() const {
    return m_uom;
}
void OAIKitSpecificationNonStockComponentsUpdateDto::setUom(const OAIDtoValueOfString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAIKitSpecificationNonStockComponentsUpdateDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAIKitSpecificationNonStockComponentsUpdateDto::is_uom_Valid() const{
    return m_uom_isValid;
}

bool OAIKitSpecificationNonStockComponentsUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_qty_variation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comp_inventory_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dflt_comp_qty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_comp_qty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_comp_qty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKitSpecificationNonStockComponentsUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
