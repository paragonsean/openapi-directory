/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISalesOrderApi_H
#define OAI_OAISalesOrderApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAICancelSalesOrderActionDto.h"
#include "OAICancelSalesOrderActionResultDto.h"
#include "OAICreateShipmentActionDto.h"
#include "OAICreateShipmentActionResultDto.h"
#include "OAIObject.h"
#include "OAIReopenSalesOrderActionDto.h"
#include "OAIReopenSalesOrderActionResultDto.h"
#include "OAIRotRutBasicDto.h"
#include "OAISOCommissionDto.h"
#include "OAISalesOrderDto.h"
#include "OAISalesOrderUpdateDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISalesOrderApi : public QObject {
    Q_OBJECT

public:
    OAISalesOrderApi(const int timeOut = 0);
    ~OAISalesOrderApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  sale_order_number QString [required]
    * @param[in]  oai_cancel_sales_order_action_dto OAICancelSalesOrderActionDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderCancelSalesOrderBysaleOrderNumber(const QString &sale_order_number, const OAICancelSalesOrderActionDto &oai_cancel_sales_order_action_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    Q_DECL_DEPRECATED virtual void salesOrderCreateHeaderAttachmentByorderNumber(const QString &order_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_number QString [required]
    * @param[in]  order_type QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderCreateHeaderAttachmentByorderNumberorderType(const QString &order_number, const QString &order_type, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_number QString [required]
    * @param[in]  line_number qint32 [required]
    * @param[in]  erp_api_background QString [optional]
    */
    Q_DECL_DEPRECATED virtual void salesOrderCreateLineAttachmentByorderNumberlineNumber(const QString &order_number, const qint32 &line_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_number QString [required]
    * @param[in]  order_type QString [required]
    * @param[in]  line_number qint32 [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderCreateLineAttachmentByorderNumberorderTypelineNumber(const QString &order_number, const QString &order_type, const qint32 &line_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sale_order_number QString [required]
    * @param[in]  oai_create_shipment_action_dto OAICreateShipmentActionDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderCreateShipmentActionBysaleOrderNumber(const QString &sale_order_number, const OAICreateShipmentActionDto &oai_create_shipment_action_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_type QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  show_notes bool [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderGetAllOrders(const ::OpenAPI::OptionalParam<QString> &order_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_notes = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_nbr QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderGetByorderNbr(const QString &order_nbr, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_type QString [required]
    * @param[in]  order_nbr QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderGetCommissionsByorderTypeorderNbr(const QString &order_type, const QString &order_nbr, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_type QString [required]
    * @param[in]  order_nbr QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderGetOrderByTypeByorderTypeorderNbr(const QString &order_type, const QString &order_nbr, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_type QString [required]
    * @param[in]  order_nbr QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderGetROTRUTByorderTypeorderNbr(const QString &order_type, const QString &order_nbr, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_sales_order_update_dto OAISalesOrderUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderPost(const OAISalesOrderUpdateDto &oai_sales_order_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_number QString [required]
    * @param[in]  order_type QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderPrintOrderByorderNumberorderType(const QString &order_number, const QString &order_type, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_nbr QString [required]
    * @param[in]  oai_sales_order_update_dto OAISalesOrderUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderPutByorderNbr(const QString &order_nbr, const OAISalesOrderUpdateDto &oai_sales_order_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sales_order_number QString [required]
    * @param[in]  oai_reopen_sales_order_action_dto OAIReopenSalesOrderActionDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderReopenSalesOrderBysalesOrderNumber(const QString &sales_order_number, const OAIReopenSalesOrderActionDto &oai_reopen_sales_order_action_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void salesOrderCancelSalesOrderBysaleOrderNumberCallback(OAIHttpRequestWorker *worker);
    void salesOrderCreateHeaderAttachmentByorderNumberCallback(OAIHttpRequestWorker *worker);
    void salesOrderCreateHeaderAttachmentByorderNumberorderTypeCallback(OAIHttpRequestWorker *worker);
    void salesOrderCreateLineAttachmentByorderNumberlineNumberCallback(OAIHttpRequestWorker *worker);
    void salesOrderCreateLineAttachmentByorderNumberorderTypelineNumberCallback(OAIHttpRequestWorker *worker);
    void salesOrderCreateShipmentActionBysaleOrderNumberCallback(OAIHttpRequestWorker *worker);
    void salesOrderGetAllOrdersCallback(OAIHttpRequestWorker *worker);
    void salesOrderGetByorderNbrCallback(OAIHttpRequestWorker *worker);
    void salesOrderGetCommissionsByorderTypeorderNbrCallback(OAIHttpRequestWorker *worker);
    void salesOrderGetOrderByTypeByorderTypeorderNbrCallback(OAIHttpRequestWorker *worker);
    void salesOrderGetROTRUTByorderTypeorderNbrCallback(OAIHttpRequestWorker *worker);
    void salesOrderPostCallback(OAIHttpRequestWorker *worker);
    void salesOrderPrintOrderByorderNumberorderTypeCallback(OAIHttpRequestWorker *worker);
    void salesOrderPutByorderNbrCallback(OAIHttpRequestWorker *worker);
    void salesOrderReopenSalesOrderBysalesOrderNumberCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void salesOrderCancelSalesOrderBysaleOrderNumberSignal(OAICancelSalesOrderActionResultDto summary);
    void salesOrderCreateHeaderAttachmentByorderNumberSignal(OAIObject summary);
    void salesOrderCreateHeaderAttachmentByorderNumberorderTypeSignal(OAIObject summary);
    void salesOrderCreateLineAttachmentByorderNumberlineNumberSignal(OAIObject summary);
    void salesOrderCreateLineAttachmentByorderNumberorderTypelineNumberSignal(OAIObject summary);
    void salesOrderCreateShipmentActionBysaleOrderNumberSignal(OAICreateShipmentActionResultDto summary);
    void salesOrderGetAllOrdersSignal(QList<OAISalesOrderDto> summary);
    void salesOrderGetByorderNbrSignal(OAISalesOrderDto summary);
    void salesOrderGetCommissionsByorderTypeorderNbrSignal(QList<OAISOCommissionDto> summary);
    void salesOrderGetOrderByTypeByorderTypeorderNbrSignal(OAISalesOrderDto summary);
    void salesOrderGetROTRUTByorderTypeorderNbrSignal(OAIRotRutBasicDto summary);
    void salesOrderPostSignal(OAIObject summary);
    void salesOrderPrintOrderByorderNumberorderTypeSignal(OAIObject summary);
    void salesOrderPutByorderNbrSignal(OAIBackgroundApiAcceptedDto summary);
    void salesOrderReopenSalesOrderBysalesOrderNumberSignal(OAIReopenSalesOrderActionResultDto summary);


    void salesOrderCancelSalesOrderBysaleOrderNumberSignalFull(OAIHttpRequestWorker *worker, OAICancelSalesOrderActionResultDto summary);
    void salesOrderCreateHeaderAttachmentByorderNumberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesOrderCreateHeaderAttachmentByorderNumberorderTypeSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesOrderCreateLineAttachmentByorderNumberlineNumberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesOrderCreateLineAttachmentByorderNumberorderTypelineNumberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesOrderCreateShipmentActionBysaleOrderNumberSignalFull(OAIHttpRequestWorker *worker, OAICreateShipmentActionResultDto summary);
    void salesOrderGetAllOrdersSignalFull(OAIHttpRequestWorker *worker, QList<OAISalesOrderDto> summary);
    void salesOrderGetByorderNbrSignalFull(OAIHttpRequestWorker *worker, OAISalesOrderDto summary);
    void salesOrderGetCommissionsByorderTypeorderNbrSignalFull(OAIHttpRequestWorker *worker, QList<OAISOCommissionDto> summary);
    void salesOrderGetOrderByTypeByorderTypeorderNbrSignalFull(OAIHttpRequestWorker *worker, OAISalesOrderDto summary);
    void salesOrderGetROTRUTByorderTypeorderNbrSignalFull(OAIHttpRequestWorker *worker, OAIRotRutBasicDto summary);
    void salesOrderPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesOrderPrintOrderByorderNumberorderTypeSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesOrderPutByorderNbrSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);
    void salesOrderReopenSalesOrderBysalesOrderNumberSignalFull(OAIHttpRequestWorker *worker, OAIReopenSalesOrderActionResultDto summary);

    Q_DECL_DEPRECATED_X("Use salesOrderCancelSalesOrderBysaleOrderNumberSignalError() instead")
    void salesOrderCancelSalesOrderBysaleOrderNumberSignalE(OAICancelSalesOrderActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderCancelSalesOrderBysaleOrderNumberSignalError(OAICancelSalesOrderActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderCreateHeaderAttachmentByorderNumberSignalError() instead")
    void salesOrderCreateHeaderAttachmentByorderNumberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderCreateHeaderAttachmentByorderNumberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderCreateHeaderAttachmentByorderNumberorderTypeSignalError() instead")
    void salesOrderCreateHeaderAttachmentByorderNumberorderTypeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderCreateHeaderAttachmentByorderNumberorderTypeSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderCreateLineAttachmentByorderNumberlineNumberSignalError() instead")
    void salesOrderCreateLineAttachmentByorderNumberlineNumberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderCreateLineAttachmentByorderNumberlineNumberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderCreateLineAttachmentByorderNumberorderTypelineNumberSignalError() instead")
    void salesOrderCreateLineAttachmentByorderNumberorderTypelineNumberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderCreateLineAttachmentByorderNumberorderTypelineNumberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderCreateShipmentActionBysaleOrderNumberSignalError() instead")
    void salesOrderCreateShipmentActionBysaleOrderNumberSignalE(OAICreateShipmentActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderCreateShipmentActionBysaleOrderNumberSignalError(OAICreateShipmentActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderGetAllOrdersSignalError() instead")
    void salesOrderGetAllOrdersSignalE(QList<OAISalesOrderDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderGetAllOrdersSignalError(QList<OAISalesOrderDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderGetByorderNbrSignalError() instead")
    void salesOrderGetByorderNbrSignalE(OAISalesOrderDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderGetByorderNbrSignalError(OAISalesOrderDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderGetCommissionsByorderTypeorderNbrSignalError() instead")
    void salesOrderGetCommissionsByorderTypeorderNbrSignalE(QList<OAISOCommissionDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderGetCommissionsByorderTypeorderNbrSignalError(QList<OAISOCommissionDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderGetOrderByTypeByorderTypeorderNbrSignalError() instead")
    void salesOrderGetOrderByTypeByorderTypeorderNbrSignalE(OAISalesOrderDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderGetOrderByTypeByorderTypeorderNbrSignalError(OAISalesOrderDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderGetROTRUTByorderTypeorderNbrSignalError() instead")
    void salesOrderGetROTRUTByorderTypeorderNbrSignalE(OAIRotRutBasicDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderGetROTRUTByorderTypeorderNbrSignalError(OAIRotRutBasicDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderPostSignalError() instead")
    void salesOrderPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderPrintOrderByorderNumberorderTypeSignalError() instead")
    void salesOrderPrintOrderByorderNumberorderTypeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderPrintOrderByorderNumberorderTypeSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderPutByorderNbrSignalError() instead")
    void salesOrderPutByorderNbrSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderPutByorderNbrSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderReopenSalesOrderBysalesOrderNumberSignalError() instead")
    void salesOrderReopenSalesOrderBysalesOrderNumberSignalE(OAIReopenSalesOrderActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderReopenSalesOrderBysalesOrderNumberSignalError(OAIReopenSalesOrderActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use salesOrderCancelSalesOrderBysaleOrderNumberSignalErrorFull() instead")
    void salesOrderCancelSalesOrderBysaleOrderNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderCancelSalesOrderBysaleOrderNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderCreateHeaderAttachmentByorderNumberSignalErrorFull() instead")
    void salesOrderCreateHeaderAttachmentByorderNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderCreateHeaderAttachmentByorderNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderCreateHeaderAttachmentByorderNumberorderTypeSignalErrorFull() instead")
    void salesOrderCreateHeaderAttachmentByorderNumberorderTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderCreateHeaderAttachmentByorderNumberorderTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderCreateLineAttachmentByorderNumberlineNumberSignalErrorFull() instead")
    void salesOrderCreateLineAttachmentByorderNumberlineNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderCreateLineAttachmentByorderNumberlineNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderCreateLineAttachmentByorderNumberorderTypelineNumberSignalErrorFull() instead")
    void salesOrderCreateLineAttachmentByorderNumberorderTypelineNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderCreateLineAttachmentByorderNumberorderTypelineNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderCreateShipmentActionBysaleOrderNumberSignalErrorFull() instead")
    void salesOrderCreateShipmentActionBysaleOrderNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderCreateShipmentActionBysaleOrderNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderGetAllOrdersSignalErrorFull() instead")
    void salesOrderGetAllOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderGetAllOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderGetByorderNbrSignalErrorFull() instead")
    void salesOrderGetByorderNbrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderGetByorderNbrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderGetCommissionsByorderTypeorderNbrSignalErrorFull() instead")
    void salesOrderGetCommissionsByorderTypeorderNbrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderGetCommissionsByorderTypeorderNbrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderGetOrderByTypeByorderTypeorderNbrSignalErrorFull() instead")
    void salesOrderGetOrderByTypeByorderTypeorderNbrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderGetOrderByTypeByorderTypeorderNbrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderGetROTRUTByorderTypeorderNbrSignalErrorFull() instead")
    void salesOrderGetROTRUTByorderTypeorderNbrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderGetROTRUTByorderTypeorderNbrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderPostSignalErrorFull() instead")
    void salesOrderPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderPrintOrderByorderNumberorderTypeSignalErrorFull() instead")
    void salesOrderPrintOrderByorderNumberorderTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderPrintOrderByorderNumberorderTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderPutByorderNbrSignalErrorFull() instead")
    void salesOrderPutByorderNbrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderPutByorderNbrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderReopenSalesOrderBysalesOrderNumberSignalErrorFull() instead")
    void salesOrderReopenSalesOrderBysalesOrderNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderReopenSalesOrderBysalesOrderNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
