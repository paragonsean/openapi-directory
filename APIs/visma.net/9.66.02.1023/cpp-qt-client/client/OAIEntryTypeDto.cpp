/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntryTypeDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntryTypeDto::OAIEntryTypeDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntryTypeDto::OAIEntryTypeDto() {
    this->initializeModel();
}

OAIEntryTypeDto::~OAIEntryTypeDto() {}

void OAIEntryTypeDto::initializeModel() {

    m_business_account_isSet = false;
    m_business_account_isValid = false;

    m_default_offset_account_isSet = false;
    m_default_offset_account_isValid = false;

    m_default_offset_account_branch_isSet = false;
    m_default_offset_account_branch_isValid = false;

    m_default_offset_subaccount_isSet = false;
    m_default_offset_subaccount_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disable_receipt_isSet = false;
    m_disable_receipt_isValid = false;

    m_entry_type_id_isSet = false;
    m_entry_type_id_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_module_isSet = false;
    m_module_isValid = false;

    m_offset_account_branch_isSet = false;
    m_offset_account_branch_isValid = false;

    m_offset_account_override_isSet = false;
    m_offset_account_override_isValid = false;

    m_offset_subaccount_override_isSet = false;
    m_offset_subaccount_override_isValid = false;

    m_reclasification_account_isSet = false;
    m_reclasification_account_isValid = false;

    m_reclasification_account_override_isSet = false;
    m_reclasification_account_override_isValid = false;

    m_tax_calculation_mode_isSet = false;
    m_tax_calculation_mode_isValid = false;

    m_use_for_payments_reclasification_isSet = false;
    m_use_for_payments_reclasification_isValid = false;

    m_vat_zone_isSet = false;
    m_vat_zone_isValid = false;
}

void OAIEntryTypeDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntryTypeDto::fromJsonObject(QJsonObject json) {

    m_business_account_isValid = ::OpenAPI::fromJsonValue(m_business_account, json[QString("businessAccount")]);
    m_business_account_isSet = !json[QString("businessAccount")].isNull() && m_business_account_isValid;

    m_default_offset_account_isValid = ::OpenAPI::fromJsonValue(m_default_offset_account, json[QString("defaultOffsetAccount")]);
    m_default_offset_account_isSet = !json[QString("defaultOffsetAccount")].isNull() && m_default_offset_account_isValid;

    m_default_offset_account_branch_isValid = ::OpenAPI::fromJsonValue(m_default_offset_account_branch, json[QString("defaultOffsetAccountBranch")]);
    m_default_offset_account_branch_isSet = !json[QString("defaultOffsetAccountBranch")].isNull() && m_default_offset_account_branch_isValid;

    m_default_offset_subaccount_isValid = ::OpenAPI::fromJsonValue(m_default_offset_subaccount, json[QString("defaultOffsetSubaccount")]);
    m_default_offset_subaccount_isSet = !json[QString("defaultOffsetSubaccount")].isNull() && m_default_offset_subaccount_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disable_receipt_isValid = ::OpenAPI::fromJsonValue(m_disable_receipt, json[QString("disableReceipt")]);
    m_disable_receipt_isSet = !json[QString("disableReceipt")].isNull() && m_disable_receipt_isValid;

    m_entry_type_id_isValid = ::OpenAPI::fromJsonValue(m_entry_type_id, json[QString("entryTypeId")]);
    m_entry_type_id_isSet = !json[QString("entryTypeId")].isNull() && m_entry_type_id_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_module_isValid = ::OpenAPI::fromJsonValue(m_module, json[QString("module")]);
    m_module_isSet = !json[QString("module")].isNull() && m_module_isValid;

    m_offset_account_branch_isValid = ::OpenAPI::fromJsonValue(m_offset_account_branch, json[QString("offsetAccountBranch")]);
    m_offset_account_branch_isSet = !json[QString("offsetAccountBranch")].isNull() && m_offset_account_branch_isValid;

    m_offset_account_override_isValid = ::OpenAPI::fromJsonValue(m_offset_account_override, json[QString("offsetAccountOverride")]);
    m_offset_account_override_isSet = !json[QString("offsetAccountOverride")].isNull() && m_offset_account_override_isValid;

    m_offset_subaccount_override_isValid = ::OpenAPI::fromJsonValue(m_offset_subaccount_override, json[QString("offsetSubaccountOverride")]);
    m_offset_subaccount_override_isSet = !json[QString("offsetSubaccountOverride")].isNull() && m_offset_subaccount_override_isValid;

    m_reclasification_account_isValid = ::OpenAPI::fromJsonValue(m_reclasification_account, json[QString("reclasificationAccount")]);
    m_reclasification_account_isSet = !json[QString("reclasificationAccount")].isNull() && m_reclasification_account_isValid;

    m_reclasification_account_override_isValid = ::OpenAPI::fromJsonValue(m_reclasification_account_override, json[QString("reclasificationAccountOverride")]);
    m_reclasification_account_override_isSet = !json[QString("reclasificationAccountOverride")].isNull() && m_reclasification_account_override_isValid;

    m_tax_calculation_mode_isValid = ::OpenAPI::fromJsonValue(m_tax_calculation_mode, json[QString("taxCalculationMode")]);
    m_tax_calculation_mode_isSet = !json[QString("taxCalculationMode")].isNull() && m_tax_calculation_mode_isValid;

    m_use_for_payments_reclasification_isValid = ::OpenAPI::fromJsonValue(m_use_for_payments_reclasification, json[QString("useForPaymentsReclasification")]);
    m_use_for_payments_reclasification_isSet = !json[QString("useForPaymentsReclasification")].isNull() && m_use_for_payments_reclasification_isValid;

    m_vat_zone_isValid = ::OpenAPI::fromJsonValue(m_vat_zone, json[QString("vatZone")]);
    m_vat_zone_isSet = !json[QString("vatZone")].isNull() && m_vat_zone_isValid;
}

QString OAIEntryTypeDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntryTypeDto::asJsonObject() const {
    QJsonObject obj;
    if (m_business_account.isSet()) {
        obj.insert(QString("businessAccount"), ::OpenAPI::toJsonValue(m_business_account));
    }
    if (m_default_offset_account.isSet()) {
        obj.insert(QString("defaultOffsetAccount"), ::OpenAPI::toJsonValue(m_default_offset_account));
    }
    if (m_default_offset_account_branch.isSet()) {
        obj.insert(QString("defaultOffsetAccountBranch"), ::OpenAPI::toJsonValue(m_default_offset_account_branch));
    }
    if (m_default_offset_subaccount.isSet()) {
        obj.insert(QString("defaultOffsetSubaccount"), ::OpenAPI::toJsonValue(m_default_offset_subaccount));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disable_receipt_isSet) {
        obj.insert(QString("disableReceipt"), ::OpenAPI::toJsonValue(m_disable_receipt));
    }
    if (m_entry_type_id_isSet) {
        obj.insert(QString("entryTypeId"), ::OpenAPI::toJsonValue(m_entry_type_id));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_module_isSet) {
        obj.insert(QString("module"), ::OpenAPI::toJsonValue(m_module));
    }
    if (m_offset_account_branch.isSet()) {
        obj.insert(QString("offsetAccountBranch"), ::OpenAPI::toJsonValue(m_offset_account_branch));
    }
    if (m_offset_account_override.isSet()) {
        obj.insert(QString("offsetAccountOverride"), ::OpenAPI::toJsonValue(m_offset_account_override));
    }
    if (m_offset_subaccount_override.isSet()) {
        obj.insert(QString("offsetSubaccountOverride"), ::OpenAPI::toJsonValue(m_offset_subaccount_override));
    }
    if (m_reclasification_account.isSet()) {
        obj.insert(QString("reclasificationAccount"), ::OpenAPI::toJsonValue(m_reclasification_account));
    }
    if (m_reclasification_account_override.isSet()) {
        obj.insert(QString("reclasificationAccountOverride"), ::OpenAPI::toJsonValue(m_reclasification_account_override));
    }
    if (m_tax_calculation_mode_isSet) {
        obj.insert(QString("taxCalculationMode"), ::OpenAPI::toJsonValue(m_tax_calculation_mode));
    }
    if (m_use_for_payments_reclasification_isSet) {
        obj.insert(QString("useForPaymentsReclasification"), ::OpenAPI::toJsonValue(m_use_for_payments_reclasification));
    }
    if (m_vat_zone.isSet()) {
        obj.insert(QString("vatZone"), ::OpenAPI::toJsonValue(m_vat_zone));
    }
    return obj;
}

OAIBusinessAccountInEntryTypeDto OAIEntryTypeDto::getBusinessAccount() const {
    return m_business_account;
}
void OAIEntryTypeDto::setBusinessAccount(const OAIBusinessAccountInEntryTypeDto &business_account) {
    m_business_account = business_account;
    m_business_account_isSet = true;
}

bool OAIEntryTypeDto::is_business_account_Set() const{
    return m_business_account_isSet;
}

bool OAIEntryTypeDto::is_business_account_Valid() const{
    return m_business_account_isValid;
}

OAIDefaultOffsetAccountInEntryTypeDto OAIEntryTypeDto::getDefaultOffsetAccount() const {
    return m_default_offset_account;
}
void OAIEntryTypeDto::setDefaultOffsetAccount(const OAIDefaultOffsetAccountInEntryTypeDto &default_offset_account) {
    m_default_offset_account = default_offset_account;
    m_default_offset_account_isSet = true;
}

bool OAIEntryTypeDto::is_default_offset_account_Set() const{
    return m_default_offset_account_isSet;
}

bool OAIEntryTypeDto::is_default_offset_account_Valid() const{
    return m_default_offset_account_isValid;
}

OAIDefaultOffsetAccountBranchInEntryTypeDto OAIEntryTypeDto::getDefaultOffsetAccountBranch() const {
    return m_default_offset_account_branch;
}
void OAIEntryTypeDto::setDefaultOffsetAccountBranch(const OAIDefaultOffsetAccountBranchInEntryTypeDto &default_offset_account_branch) {
    m_default_offset_account_branch = default_offset_account_branch;
    m_default_offset_account_branch_isSet = true;
}

bool OAIEntryTypeDto::is_default_offset_account_branch_Set() const{
    return m_default_offset_account_branch_isSet;
}

bool OAIEntryTypeDto::is_default_offset_account_branch_Valid() const{
    return m_default_offset_account_branch_isValid;
}

OAIDefaultOffsetSubaccountInEntryTypeDto OAIEntryTypeDto::getDefaultOffsetSubaccount() const {
    return m_default_offset_subaccount;
}
void OAIEntryTypeDto::setDefaultOffsetSubaccount(const OAIDefaultOffsetSubaccountInEntryTypeDto &default_offset_subaccount) {
    m_default_offset_subaccount = default_offset_subaccount;
    m_default_offset_subaccount_isSet = true;
}

bool OAIEntryTypeDto::is_default_offset_subaccount_Set() const{
    return m_default_offset_subaccount_isSet;
}

bool OAIEntryTypeDto::is_default_offset_subaccount_Valid() const{
    return m_default_offset_subaccount_isValid;
}

QString OAIEntryTypeDto::getDescription() const {
    return m_description;
}
void OAIEntryTypeDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEntryTypeDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEntryTypeDto::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEntryTypeDto::getDisableReceipt() const {
    return m_disable_receipt;
}
void OAIEntryTypeDto::setDisableReceipt(const QString &disable_receipt) {
    m_disable_receipt = disable_receipt;
    m_disable_receipt_isSet = true;
}

bool OAIEntryTypeDto::is_disable_receipt_Set() const{
    return m_disable_receipt_isSet;
}

bool OAIEntryTypeDto::is_disable_receipt_Valid() const{
    return m_disable_receipt_isValid;
}

QString OAIEntryTypeDto::getEntryTypeId() const {
    return m_entry_type_id;
}
void OAIEntryTypeDto::setEntryTypeId(const QString &entry_type_id) {
    m_entry_type_id = entry_type_id;
    m_entry_type_id_isSet = true;
}

bool OAIEntryTypeDto::is_entry_type_id_Set() const{
    return m_entry_type_id_isSet;
}

bool OAIEntryTypeDto::is_entry_type_id_Valid() const{
    return m_entry_type_id_isValid;
}

QDateTime OAIEntryTypeDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIEntryTypeDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIEntryTypeDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIEntryTypeDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QString OAIEntryTypeDto::getModule() const {
    return m_module;
}
void OAIEntryTypeDto::setModule(const QString &module) {
    m_module = module;
    m_module_isSet = true;
}

bool OAIEntryTypeDto::is_module_Set() const{
    return m_module_isSet;
}

bool OAIEntryTypeDto::is_module_Valid() const{
    return m_module_isValid;
}

OAIOffsetAccountBranchInEntryTypeDto OAIEntryTypeDto::getOffsetAccountBranch() const {
    return m_offset_account_branch;
}
void OAIEntryTypeDto::setOffsetAccountBranch(const OAIOffsetAccountBranchInEntryTypeDto &offset_account_branch) {
    m_offset_account_branch = offset_account_branch;
    m_offset_account_branch_isSet = true;
}

bool OAIEntryTypeDto::is_offset_account_branch_Set() const{
    return m_offset_account_branch_isSet;
}

bool OAIEntryTypeDto::is_offset_account_branch_Valid() const{
    return m_offset_account_branch_isValid;
}

OAIOffsetAccountOverrideInEntryTypeDto OAIEntryTypeDto::getOffsetAccountOverride() const {
    return m_offset_account_override;
}
void OAIEntryTypeDto::setOffsetAccountOverride(const OAIOffsetAccountOverrideInEntryTypeDto &offset_account_override) {
    m_offset_account_override = offset_account_override;
    m_offset_account_override_isSet = true;
}

bool OAIEntryTypeDto::is_offset_account_override_Set() const{
    return m_offset_account_override_isSet;
}

bool OAIEntryTypeDto::is_offset_account_override_Valid() const{
    return m_offset_account_override_isValid;
}

OAIOffsetSubaccountOverrideInEntryTypeDto OAIEntryTypeDto::getOffsetSubaccountOverride() const {
    return m_offset_subaccount_override;
}
void OAIEntryTypeDto::setOffsetSubaccountOverride(const OAIOffsetSubaccountOverrideInEntryTypeDto &offset_subaccount_override) {
    m_offset_subaccount_override = offset_subaccount_override;
    m_offset_subaccount_override_isSet = true;
}

bool OAIEntryTypeDto::is_offset_subaccount_override_Set() const{
    return m_offset_subaccount_override_isSet;
}

bool OAIEntryTypeDto::is_offset_subaccount_override_Valid() const{
    return m_offset_subaccount_override_isValid;
}

OAIReclasificationAccountInEntryTypeDto OAIEntryTypeDto::getReclasificationAccount() const {
    return m_reclasification_account;
}
void OAIEntryTypeDto::setReclasificationAccount(const OAIReclasificationAccountInEntryTypeDto &reclasification_account) {
    m_reclasification_account = reclasification_account;
    m_reclasification_account_isSet = true;
}

bool OAIEntryTypeDto::is_reclasification_account_Set() const{
    return m_reclasification_account_isSet;
}

bool OAIEntryTypeDto::is_reclasification_account_Valid() const{
    return m_reclasification_account_isValid;
}

OAIReclasificationAccountOverrideInEntryTypeDto OAIEntryTypeDto::getReclasificationAccountOverride() const {
    return m_reclasification_account_override;
}
void OAIEntryTypeDto::setReclasificationAccountOverride(const OAIReclasificationAccountOverrideInEntryTypeDto &reclasification_account_override) {
    m_reclasification_account_override = reclasification_account_override;
    m_reclasification_account_override_isSet = true;
}

bool OAIEntryTypeDto::is_reclasification_account_override_Set() const{
    return m_reclasification_account_override_isSet;
}

bool OAIEntryTypeDto::is_reclasification_account_override_Valid() const{
    return m_reclasification_account_override_isValid;
}

QString OAIEntryTypeDto::getTaxCalculationMode() const {
    return m_tax_calculation_mode;
}
void OAIEntryTypeDto::setTaxCalculationMode(const QString &tax_calculation_mode) {
    m_tax_calculation_mode = tax_calculation_mode;
    m_tax_calculation_mode_isSet = true;
}

bool OAIEntryTypeDto::is_tax_calculation_mode_Set() const{
    return m_tax_calculation_mode_isSet;
}

bool OAIEntryTypeDto::is_tax_calculation_mode_Valid() const{
    return m_tax_calculation_mode_isValid;
}

bool OAIEntryTypeDto::isUseForPaymentsReclasification() const {
    return m_use_for_payments_reclasification;
}
void OAIEntryTypeDto::setUseForPaymentsReclasification(const bool &use_for_payments_reclasification) {
    m_use_for_payments_reclasification = use_for_payments_reclasification;
    m_use_for_payments_reclasification_isSet = true;
}

bool OAIEntryTypeDto::is_use_for_payments_reclasification_Set() const{
    return m_use_for_payments_reclasification_isSet;
}

bool OAIEntryTypeDto::is_use_for_payments_reclasification_Valid() const{
    return m_use_for_payments_reclasification_isValid;
}

OAIVatZoneInEntryTypeDto OAIEntryTypeDto::getVatZone() const {
    return m_vat_zone;
}
void OAIEntryTypeDto::setVatZone(const OAIVatZoneInEntryTypeDto &vat_zone) {
    m_vat_zone = vat_zone;
    m_vat_zone_isSet = true;
}

bool OAIEntryTypeDto::is_vat_zone_Set() const{
    return m_vat_zone_isSet;
}

bool OAIEntryTypeDto::is_vat_zone_Valid() const{
    return m_vat_zone_isValid;
}

bool OAIEntryTypeDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_business_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_offset_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_offset_account_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_offset_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_receipt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_account_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_account_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_subaccount_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reclasification_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reclasification_account_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_calculation_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_for_payments_reclasification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntryTypeDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
