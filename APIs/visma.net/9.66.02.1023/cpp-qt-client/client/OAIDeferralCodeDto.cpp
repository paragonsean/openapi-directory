/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeferralCodeDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeferralCodeDto::OAIDeferralCodeDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeferralCodeDto::OAIDeferralCodeDto() {
    this->initializeModel();
}

OAIDeferralCodeDto::~OAIDeferralCodeDto() {}

void OAIDeferralCodeDto::initializeModel() {

    m_code_type_isSet = false;
    m_code_type_isValid = false;

    m_deferral_account_isSet = false;
    m_deferral_account_isValid = false;

    m_deferral_code_isSet = false;
    m_deferral_code_isValid = false;

    m_deferral_sub_isSet = false;
    m_deferral_sub_isValid = false;

    m_deferred_revenue_from_item_isSet = false;
    m_deferred_revenue_from_item_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_recognition_method_isSet = false;
    m_recognition_method_isValid = false;
}

void OAIDeferralCodeDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeferralCodeDto::fromJsonObject(QJsonObject json) {

    m_code_type_isValid = ::OpenAPI::fromJsonValue(m_code_type, json[QString("codeType")]);
    m_code_type_isSet = !json[QString("codeType")].isNull() && m_code_type_isValid;

    m_deferral_account_isValid = ::OpenAPI::fromJsonValue(m_deferral_account, json[QString("deferralAccount")]);
    m_deferral_account_isSet = !json[QString("deferralAccount")].isNull() && m_deferral_account_isValid;

    m_deferral_code_isValid = ::OpenAPI::fromJsonValue(m_deferral_code, json[QString("deferralCode")]);
    m_deferral_code_isSet = !json[QString("deferralCode")].isNull() && m_deferral_code_isValid;

    m_deferral_sub_isValid = ::OpenAPI::fromJsonValue(m_deferral_sub, json[QString("deferralSub")]);
    m_deferral_sub_isSet = !json[QString("deferralSub")].isNull() && m_deferral_sub_isValid;

    m_deferred_revenue_from_item_isValid = ::OpenAPI::fromJsonValue(m_deferred_revenue_from_item, json[QString("deferredRevenueFromItem")]);
    m_deferred_revenue_from_item_isSet = !json[QString("deferredRevenueFromItem")].isNull() && m_deferred_revenue_from_item_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_recognition_method_isValid = ::OpenAPI::fromJsonValue(m_recognition_method, json[QString("recognitionMethod")]);
    m_recognition_method_isSet = !json[QString("recognitionMethod")].isNull() && m_recognition_method_isValid;
}

QString OAIDeferralCodeDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeferralCodeDto::asJsonObject() const {
    QJsonObject obj;
    if (m_code_type_isSet) {
        obj.insert(QString("codeType"), ::OpenAPI::toJsonValue(m_code_type));
    }
    if (m_deferral_account.isSet()) {
        obj.insert(QString("deferralAccount"), ::OpenAPI::toJsonValue(m_deferral_account));
    }
    if (m_deferral_code_isSet) {
        obj.insert(QString("deferralCode"), ::OpenAPI::toJsonValue(m_deferral_code));
    }
    if (m_deferral_sub.isSet()) {
        obj.insert(QString("deferralSub"), ::OpenAPI::toJsonValue(m_deferral_sub));
    }
    if (m_deferred_revenue_from_item_isSet) {
        obj.insert(QString("deferredRevenueFromItem"), ::OpenAPI::toJsonValue(m_deferred_revenue_from_item));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_recognition_method_isSet) {
        obj.insert(QString("recognitionMethod"), ::OpenAPI::toJsonValue(m_recognition_method));
    }
    return obj;
}

QString OAIDeferralCodeDto::getCodeType() const {
    return m_code_type;
}
void OAIDeferralCodeDto::setCodeType(const QString &code_type) {
    m_code_type = code_type;
    m_code_type_isSet = true;
}

bool OAIDeferralCodeDto::is_code_type_Set() const{
    return m_code_type_isSet;
}

bool OAIDeferralCodeDto::is_code_type_Valid() const{
    return m_code_type_isValid;
}

OAIDeferralAccountInDeferralCodeDto OAIDeferralCodeDto::getDeferralAccount() const {
    return m_deferral_account;
}
void OAIDeferralCodeDto::setDeferralAccount(const OAIDeferralAccountInDeferralCodeDto &deferral_account) {
    m_deferral_account = deferral_account;
    m_deferral_account_isSet = true;
}

bool OAIDeferralCodeDto::is_deferral_account_Set() const{
    return m_deferral_account_isSet;
}

bool OAIDeferralCodeDto::is_deferral_account_Valid() const{
    return m_deferral_account_isValid;
}

QString OAIDeferralCodeDto::getDeferralCode() const {
    return m_deferral_code;
}
void OAIDeferralCodeDto::setDeferralCode(const QString &deferral_code) {
    m_deferral_code = deferral_code;
    m_deferral_code_isSet = true;
}

bool OAIDeferralCodeDto::is_deferral_code_Set() const{
    return m_deferral_code_isSet;
}

bool OAIDeferralCodeDto::is_deferral_code_Valid() const{
    return m_deferral_code_isValid;
}

OAIDeferralSubInDeferralCodeDto OAIDeferralCodeDto::getDeferralSub() const {
    return m_deferral_sub;
}
void OAIDeferralCodeDto::setDeferralSub(const OAIDeferralSubInDeferralCodeDto &deferral_sub) {
    m_deferral_sub = deferral_sub;
    m_deferral_sub_isSet = true;
}

bool OAIDeferralCodeDto::is_deferral_sub_Set() const{
    return m_deferral_sub_isSet;
}

bool OAIDeferralCodeDto::is_deferral_sub_Valid() const{
    return m_deferral_sub_isValid;
}

bool OAIDeferralCodeDto::isDeferredRevenueFromItem() const {
    return m_deferred_revenue_from_item;
}
void OAIDeferralCodeDto::setDeferredRevenueFromItem(const bool &deferred_revenue_from_item) {
    m_deferred_revenue_from_item = deferred_revenue_from_item;
    m_deferred_revenue_from_item_isSet = true;
}

bool OAIDeferralCodeDto::is_deferred_revenue_from_item_Set() const{
    return m_deferred_revenue_from_item_isSet;
}

bool OAIDeferralCodeDto::is_deferred_revenue_from_item_Valid() const{
    return m_deferred_revenue_from_item_isValid;
}

QString OAIDeferralCodeDto::getDescription() const {
    return m_description;
}
void OAIDeferralCodeDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDeferralCodeDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDeferralCodeDto::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDeferralCodeDto::getErrorInfo() const {
    return m_error_info;
}
void OAIDeferralCodeDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIDeferralCodeDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIDeferralCodeDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

OAIMetadataDto OAIDeferralCodeDto::getMetadata() const {
    return m_metadata;
}
void OAIDeferralCodeDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIDeferralCodeDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIDeferralCodeDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIDeferralCodeDto::getRecognitionMethod() const {
    return m_recognition_method;
}
void OAIDeferralCodeDto::setRecognitionMethod(const QString &recognition_method) {
    m_recognition_method = recognition_method;
    m_recognition_method_isSet = true;
}

bool OAIDeferralCodeDto::is_recognition_method_Set() const{
    return m_recognition_method_isSet;
}

bool OAIDeferralCodeDto::is_recognition_method_Valid() const{
    return m_recognition_method_isValid;
}

bool OAIDeferralCodeDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deferral_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deferral_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deferral_sub.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deferred_revenue_from_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recognition_method_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeferralCodeDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
