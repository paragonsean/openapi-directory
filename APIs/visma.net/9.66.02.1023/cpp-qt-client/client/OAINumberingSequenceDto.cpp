/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumberingSequenceDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumberingSequenceDto::OAINumberingSequenceDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumberingSequenceDto::OAINumberingSequenceDto() {
    this->initializeModel();
}

OAINumberingSequenceDto::~OAINumberingSequenceDto() {}

void OAINumberingSequenceDto::initializeModel() {

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_end_nbr_isSet = false;
    m_end_nbr_isValid = false;

    m_last_nbr_isSet = false;
    m_last_nbr_isValid = false;

    m_nbr_step_isSet = false;
    m_nbr_step_isValid = false;

    m_next_number_isSet = false;
    m_next_number_isValid = false;

    m_numbering_id_isSet = false;
    m_numbering_id_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_start_nbr_isSet = false;
    m_start_nbr_isValid = false;

    m_warn_nbr_isSet = false;
    m_warn_nbr_isValid = false;
}

void OAINumberingSequenceDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumberingSequenceDto::fromJsonObject(QJsonObject json) {

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_end_nbr_isValid = ::OpenAPI::fromJsonValue(m_end_nbr, json[QString("endNbr")]);
    m_end_nbr_isSet = !json[QString("endNbr")].isNull() && m_end_nbr_isValid;

    m_last_nbr_isValid = ::OpenAPI::fromJsonValue(m_last_nbr, json[QString("lastNbr")]);
    m_last_nbr_isSet = !json[QString("lastNbr")].isNull() && m_last_nbr_isValid;

    m_nbr_step_isValid = ::OpenAPI::fromJsonValue(m_nbr_step, json[QString("nbrStep")]);
    m_nbr_step_isSet = !json[QString("nbrStep")].isNull() && m_nbr_step_isValid;

    m_next_number_isValid = ::OpenAPI::fromJsonValue(m_next_number, json[QString("nextNumber")]);
    m_next_number_isSet = !json[QString("nextNumber")].isNull() && m_next_number_isValid;

    m_numbering_id_isValid = ::OpenAPI::fromJsonValue(m_numbering_id, json[QString("numberingId")]);
    m_numbering_id_isSet = !json[QString("numberingId")].isNull() && m_numbering_id_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_start_nbr_isValid = ::OpenAPI::fromJsonValue(m_start_nbr, json[QString("startNbr")]);
    m_start_nbr_isSet = !json[QString("startNbr")].isNull() && m_start_nbr_isValid;

    m_warn_nbr_isValid = ::OpenAPI::fromJsonValue(m_warn_nbr, json[QString("warnNbr")]);
    m_warn_nbr_isSet = !json[QString("warnNbr")].isNull() && m_warn_nbr_isValid;
}

QString OAINumberingSequenceDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumberingSequenceDto::asJsonObject() const {
    QJsonObject obj;
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_end_nbr_isSet) {
        obj.insert(QString("endNbr"), ::OpenAPI::toJsonValue(m_end_nbr));
    }
    if (m_last_nbr_isSet) {
        obj.insert(QString("lastNbr"), ::OpenAPI::toJsonValue(m_last_nbr));
    }
    if (m_nbr_step_isSet) {
        obj.insert(QString("nbrStep"), ::OpenAPI::toJsonValue(m_nbr_step));
    }
    if (m_next_number_isSet) {
        obj.insert(QString("nextNumber"), ::OpenAPI::toJsonValue(m_next_number));
    }
    if (m_numbering_id_isSet) {
        obj.insert(QString("numberingId"), ::OpenAPI::toJsonValue(m_numbering_id));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_start_nbr_isSet) {
        obj.insert(QString("startNbr"), ::OpenAPI::toJsonValue(m_start_nbr));
    }
    if (m_warn_nbr_isSet) {
        obj.insert(QString("warnNbr"), ::OpenAPI::toJsonValue(m_warn_nbr));
    }
    return obj;
}

OAIBranchInNumberingSequenceDto OAINumberingSequenceDto::getBranch() const {
    return m_branch;
}
void OAINumberingSequenceDto::setBranch(const OAIBranchInNumberingSequenceDto &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAINumberingSequenceDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAINumberingSequenceDto::is_branch_Valid() const{
    return m_branch_isValid;
}

QString OAINumberingSequenceDto::getEndNbr() const {
    return m_end_nbr;
}
void OAINumberingSequenceDto::setEndNbr(const QString &end_nbr) {
    m_end_nbr = end_nbr;
    m_end_nbr_isSet = true;
}

bool OAINumberingSequenceDto::is_end_nbr_Set() const{
    return m_end_nbr_isSet;
}

bool OAINumberingSequenceDto::is_end_nbr_Valid() const{
    return m_end_nbr_isValid;
}

QString OAINumberingSequenceDto::getLastNbr() const {
    return m_last_nbr;
}
void OAINumberingSequenceDto::setLastNbr(const QString &last_nbr) {
    m_last_nbr = last_nbr;
    m_last_nbr_isSet = true;
}

bool OAINumberingSequenceDto::is_last_nbr_Set() const{
    return m_last_nbr_isSet;
}

bool OAINumberingSequenceDto::is_last_nbr_Valid() const{
    return m_last_nbr_isValid;
}

qint32 OAINumberingSequenceDto::getNbrStep() const {
    return m_nbr_step;
}
void OAINumberingSequenceDto::setNbrStep(const qint32 &nbr_step) {
    m_nbr_step = nbr_step;
    m_nbr_step_isSet = true;
}

bool OAINumberingSequenceDto::is_nbr_step_Set() const{
    return m_nbr_step_isSet;
}

bool OAINumberingSequenceDto::is_nbr_step_Valid() const{
    return m_nbr_step_isValid;
}

QString OAINumberingSequenceDto::getNextNumber() const {
    return m_next_number;
}
void OAINumberingSequenceDto::setNextNumber(const QString &next_number) {
    m_next_number = next_number;
    m_next_number_isSet = true;
}

bool OAINumberingSequenceDto::is_next_number_Set() const{
    return m_next_number_isSet;
}

bool OAINumberingSequenceDto::is_next_number_Valid() const{
    return m_next_number_isValid;
}

QString OAINumberingSequenceDto::getNumberingId() const {
    return m_numbering_id;
}
void OAINumberingSequenceDto::setNumberingId(const QString &numbering_id) {
    m_numbering_id = numbering_id;
    m_numbering_id_isSet = true;
}

bool OAINumberingSequenceDto::is_numbering_id_Set() const{
    return m_numbering_id_isSet;
}

bool OAINumberingSequenceDto::is_numbering_id_Valid() const{
    return m_numbering_id_isValid;
}

QDateTime OAINumberingSequenceDto::getStartDate() const {
    return m_start_date;
}
void OAINumberingSequenceDto::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAINumberingSequenceDto::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAINumberingSequenceDto::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAINumberingSequenceDto::getStartNbr() const {
    return m_start_nbr;
}
void OAINumberingSequenceDto::setStartNbr(const QString &start_nbr) {
    m_start_nbr = start_nbr;
    m_start_nbr_isSet = true;
}

bool OAINumberingSequenceDto::is_start_nbr_Set() const{
    return m_start_nbr_isSet;
}

bool OAINumberingSequenceDto::is_start_nbr_Valid() const{
    return m_start_nbr_isValid;
}

QString OAINumberingSequenceDto::getWarnNbr() const {
    return m_warn_nbr;
}
void OAINumberingSequenceDto::setWarnNbr(const QString &warn_nbr) {
    m_warn_nbr = warn_nbr;
    m_warn_nbr_isSet = true;
}

bool OAINumberingSequenceDto::is_warn_nbr_Set() const{
    return m_warn_nbr_isSet;
}

bool OAINumberingSequenceDto::is_warn_nbr_Valid() const{
    return m_warn_nbr_isValid;
}

bool OAINumberingSequenceDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nbr_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_numbering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warn_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumberingSequenceDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
