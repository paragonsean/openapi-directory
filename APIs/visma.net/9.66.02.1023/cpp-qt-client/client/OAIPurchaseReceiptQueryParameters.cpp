/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseReceiptQueryParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseReceiptQueryParameters::OAIPurchaseReceiptQueryParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseReceiptQueryParameters::OAIPurchaseReceiptQueryParameters() {
    this->initializeModel();
}

OAIPurchaseReceiptQueryParameters::~OAIPurchaseReceiptQueryParameters() {}

void OAIPurchaseReceiptQueryParameters::initializeModel() {

    m_greater_than_value_isSet = false;
    m_greater_than_value_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_last_modified_date_time_condition_isSet = false;
    m_last_modified_date_time_condition_isValid = false;

    m_number_to_read_isSet = false;
    m_number_to_read_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_po_order_nbr_isSet = false;
    m_po_order_nbr_isValid = false;

    m_receipt_type_isSet = false;
    m_receipt_type_isValid = false;

    m_skip_records_isSet = false;
    m_skip_records_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supplier_isSet = false;
    m_supplier_isValid = false;
}

void OAIPurchaseReceiptQueryParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseReceiptQueryParameters::fromJsonObject(QJsonObject json) {

    m_greater_than_value_isValid = ::OpenAPI::fromJsonValue(m_greater_than_value, json[QString("greaterThanValue")]);
    m_greater_than_value_isSet = !json[QString("greaterThanValue")].isNull() && m_greater_than_value_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_last_modified_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time_condition, json[QString("lastModifiedDateTimeCondition")]);
    m_last_modified_date_time_condition_isSet = !json[QString("lastModifiedDateTimeCondition")].isNull() && m_last_modified_date_time_condition_isValid;

    m_number_to_read_isValid = ::OpenAPI::fromJsonValue(m_number_to_read, json[QString("numberToRead")]);
    m_number_to_read_isSet = !json[QString("numberToRead")].isNull() && m_number_to_read_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("pageNumber")]);
    m_page_number_isSet = !json[QString("pageNumber")].isNull() && m_page_number_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_po_order_nbr_isValid = ::OpenAPI::fromJsonValue(m_po_order_nbr, json[QString("poOrderNbr")]);
    m_po_order_nbr_isSet = !json[QString("poOrderNbr")].isNull() && m_po_order_nbr_isValid;

    m_receipt_type_isValid = ::OpenAPI::fromJsonValue(m_receipt_type, json[QString("receiptType")]);
    m_receipt_type_isSet = !json[QString("receiptType")].isNull() && m_receipt_type_isValid;

    m_skip_records_isValid = ::OpenAPI::fromJsonValue(m_skip_records, json[QString("skipRecords")]);
    m_skip_records_isSet = !json[QString("skipRecords")].isNull() && m_skip_records_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supplier_isValid = ::OpenAPI::fromJsonValue(m_supplier, json[QString("supplier")]);
    m_supplier_isSet = !json[QString("supplier")].isNull() && m_supplier_isValid;
}

QString OAIPurchaseReceiptQueryParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseReceiptQueryParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_greater_than_value_isSet) {
        obj.insert(QString("greaterThanValue"), ::OpenAPI::toJsonValue(m_greater_than_value));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_last_modified_date_time_condition_isSet) {
        obj.insert(QString("lastModifiedDateTimeCondition"), ::OpenAPI::toJsonValue(m_last_modified_date_time_condition));
    }
    if (m_number_to_read_isSet) {
        obj.insert(QString("numberToRead"), ::OpenAPI::toJsonValue(m_number_to_read));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("pageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_po_order_nbr_isSet) {
        obj.insert(QString("poOrderNbr"), ::OpenAPI::toJsonValue(m_po_order_nbr));
    }
    if (m_receipt_type_isSet) {
        obj.insert(QString("receiptType"), ::OpenAPI::toJsonValue(m_receipt_type));
    }
    if (m_skip_records_isSet) {
        obj.insert(QString("skipRecords"), ::OpenAPI::toJsonValue(m_skip_records));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supplier_isSet) {
        obj.insert(QString("supplier"), ::OpenAPI::toJsonValue(m_supplier));
    }
    return obj;
}

QString OAIPurchaseReceiptQueryParameters::getGreaterThanValue() const {
    return m_greater_than_value;
}
void OAIPurchaseReceiptQueryParameters::setGreaterThanValue(const QString &greater_than_value) {
    m_greater_than_value = greater_than_value;
    m_greater_than_value_isSet = true;
}

bool OAIPurchaseReceiptQueryParameters::is_greater_than_value_Set() const{
    return m_greater_than_value_isSet;
}

bool OAIPurchaseReceiptQueryParameters::is_greater_than_value_Valid() const{
    return m_greater_than_value_isValid;
}

QString OAIPurchaseReceiptQueryParameters::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIPurchaseReceiptQueryParameters::setLastModifiedDateTime(const QString &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIPurchaseReceiptQueryParameters::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIPurchaseReceiptQueryParameters::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QString OAIPurchaseReceiptQueryParameters::getLastModifiedDateTimeCondition() const {
    return m_last_modified_date_time_condition;
}
void OAIPurchaseReceiptQueryParameters::setLastModifiedDateTimeCondition(const QString &last_modified_date_time_condition) {
    m_last_modified_date_time_condition = last_modified_date_time_condition;
    m_last_modified_date_time_condition_isSet = true;
}

bool OAIPurchaseReceiptQueryParameters::is_last_modified_date_time_condition_Set() const{
    return m_last_modified_date_time_condition_isSet;
}

bool OAIPurchaseReceiptQueryParameters::is_last_modified_date_time_condition_Valid() const{
    return m_last_modified_date_time_condition_isValid;
}

qint32 OAIPurchaseReceiptQueryParameters::getNumberToRead() const {
    return m_number_to_read;
}
void OAIPurchaseReceiptQueryParameters::setNumberToRead(const qint32 &number_to_read) {
    m_number_to_read = number_to_read;
    m_number_to_read_isSet = true;
}

bool OAIPurchaseReceiptQueryParameters::is_number_to_read_Set() const{
    return m_number_to_read_isSet;
}

bool OAIPurchaseReceiptQueryParameters::is_number_to_read_Valid() const{
    return m_number_to_read_isValid;
}

qint32 OAIPurchaseReceiptQueryParameters::getPageNumber() const {
    return m_page_number;
}
void OAIPurchaseReceiptQueryParameters::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIPurchaseReceiptQueryParameters::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIPurchaseReceiptQueryParameters::is_page_number_Valid() const{
    return m_page_number_isValid;
}

qint32 OAIPurchaseReceiptQueryParameters::getPageSize() const {
    return m_page_size;
}
void OAIPurchaseReceiptQueryParameters::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIPurchaseReceiptQueryParameters::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIPurchaseReceiptQueryParameters::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIPurchaseReceiptQueryParameters::getPoOrderNbr() const {
    return m_po_order_nbr;
}
void OAIPurchaseReceiptQueryParameters::setPoOrderNbr(const QString &po_order_nbr) {
    m_po_order_nbr = po_order_nbr;
    m_po_order_nbr_isSet = true;
}

bool OAIPurchaseReceiptQueryParameters::is_po_order_nbr_Set() const{
    return m_po_order_nbr_isSet;
}

bool OAIPurchaseReceiptQueryParameters::is_po_order_nbr_Valid() const{
    return m_po_order_nbr_isValid;
}

QString OAIPurchaseReceiptQueryParameters::getReceiptType() const {
    return m_receipt_type;
}
void OAIPurchaseReceiptQueryParameters::setReceiptType(const QString &receipt_type) {
    m_receipt_type = receipt_type;
    m_receipt_type_isSet = true;
}

bool OAIPurchaseReceiptQueryParameters::is_receipt_type_Set() const{
    return m_receipt_type_isSet;
}

bool OAIPurchaseReceiptQueryParameters::is_receipt_type_Valid() const{
    return m_receipt_type_isValid;
}

qint32 OAIPurchaseReceiptQueryParameters::getSkipRecords() const {
    return m_skip_records;
}
void OAIPurchaseReceiptQueryParameters::setSkipRecords(const qint32 &skip_records) {
    m_skip_records = skip_records;
    m_skip_records_isSet = true;
}

bool OAIPurchaseReceiptQueryParameters::is_skip_records_Set() const{
    return m_skip_records_isSet;
}

bool OAIPurchaseReceiptQueryParameters::is_skip_records_Valid() const{
    return m_skip_records_isValid;
}

QString OAIPurchaseReceiptQueryParameters::getStatus() const {
    return m_status;
}
void OAIPurchaseReceiptQueryParameters::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPurchaseReceiptQueryParameters::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPurchaseReceiptQueryParameters::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPurchaseReceiptQueryParameters::getSupplier() const {
    return m_supplier;
}
void OAIPurchaseReceiptQueryParameters::setSupplier(const QString &supplier) {
    m_supplier = supplier;
    m_supplier_isSet = true;
}

bool OAIPurchaseReceiptQueryParameters::is_supplier_Set() const{
    return m_supplier_isSet;
}

bool OAIPurchaseReceiptQueryParameters::is_supplier_Valid() const{
    return m_supplier_isValid;
}

bool OAIPurchaseReceiptQueryParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_greater_than_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_to_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_order_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseReceiptQueryParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
