/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILedgerDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILedgerDto::OAILedgerDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILedgerDto::OAILedgerDto() {
    this->initializeModel();
}

OAILedgerDto::~OAILedgerDto() {}

void OAILedgerDto::initializeModel() {

    m_balance_type_isSet = false;
    m_balance_type_isValid = false;

    m_branch_accounting_isSet = false;
    m_branch_accounting_isValid = false;

    m_consol_branch_isSet = false;
    m_consol_branch_isValid = false;

    m_consolidation_source_isSet = false;
    m_consolidation_source_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_internal_id_isSet = false;
    m_internal_id_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_post_inter_company_isSet = false;
    m_post_inter_company_isValid = false;
}

void OAILedgerDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILedgerDto::fromJsonObject(QJsonObject json) {

    m_balance_type_isValid = ::OpenAPI::fromJsonValue(m_balance_type, json[QString("balanceType")]);
    m_balance_type_isSet = !json[QString("balanceType")].isNull() && m_balance_type_isValid;

    m_branch_accounting_isValid = ::OpenAPI::fromJsonValue(m_branch_accounting, json[QString("branchAccounting")]);
    m_branch_accounting_isSet = !json[QString("branchAccounting")].isNull() && m_branch_accounting_isValid;

    m_consol_branch_isValid = ::OpenAPI::fromJsonValue(m_consol_branch, json[QString("consolBranch")]);
    m_consol_branch_isSet = !json[QString("consolBranch")].isNull() && m_consol_branch_isValid;

    m_consolidation_source_isValid = ::OpenAPI::fromJsonValue(m_consolidation_source, json[QString("consolidationSource")]);
    m_consolidation_source_isSet = !json[QString("consolidationSource")].isNull() && m_consolidation_source_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_internal_id_isValid = ::OpenAPI::fromJsonValue(m_internal_id, json[QString("internalId")]);
    m_internal_id_isSet = !json[QString("internalId")].isNull() && m_internal_id_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_post_inter_company_isValid = ::OpenAPI::fromJsonValue(m_post_inter_company, json[QString("postInterCompany")]);
    m_post_inter_company_isSet = !json[QString("postInterCompany")].isNull() && m_post_inter_company_isValid;
}

QString OAILedgerDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILedgerDto::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_type_isSet) {
        obj.insert(QString("balanceType"), ::OpenAPI::toJsonValue(m_balance_type));
    }
    if (m_branch_accounting_isSet) {
        obj.insert(QString("branchAccounting"), ::OpenAPI::toJsonValue(m_branch_accounting));
    }
    if (m_consol_branch.isSet()) {
        obj.insert(QString("consolBranch"), ::OpenAPI::toJsonValue(m_consol_branch));
    }
    if (m_consolidation_source_isSet) {
        obj.insert(QString("consolidationSource"), ::OpenAPI::toJsonValue(m_consolidation_source));
    }
    if (m_currency_id_isSet) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_internal_id_isSet) {
        obj.insert(QString("internalId"), ::OpenAPI::toJsonValue(m_internal_id));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_post_inter_company_isSet) {
        obj.insert(QString("postInterCompany"), ::OpenAPI::toJsonValue(m_post_inter_company));
    }
    return obj;
}

QString OAILedgerDto::getBalanceType() const {
    return m_balance_type;
}
void OAILedgerDto::setBalanceType(const QString &balance_type) {
    m_balance_type = balance_type;
    m_balance_type_isSet = true;
}

bool OAILedgerDto::is_balance_type_Set() const{
    return m_balance_type_isSet;
}

bool OAILedgerDto::is_balance_type_Valid() const{
    return m_balance_type_isValid;
}

bool OAILedgerDto::isBranchAccounting() const {
    return m_branch_accounting;
}
void OAILedgerDto::setBranchAccounting(const bool &branch_accounting) {
    m_branch_accounting = branch_accounting;
    m_branch_accounting_isSet = true;
}

bool OAILedgerDto::is_branch_accounting_Set() const{
    return m_branch_accounting_isSet;
}

bool OAILedgerDto::is_branch_accounting_Valid() const{
    return m_branch_accounting_isValid;
}

OAIConsolBranchInLedgerDto OAILedgerDto::getConsolBranch() const {
    return m_consol_branch;
}
void OAILedgerDto::setConsolBranch(const OAIConsolBranchInLedgerDto &consol_branch) {
    m_consol_branch = consol_branch;
    m_consol_branch_isSet = true;
}

bool OAILedgerDto::is_consol_branch_Set() const{
    return m_consol_branch_isSet;
}

bool OAILedgerDto::is_consol_branch_Valid() const{
    return m_consol_branch_isValid;
}

bool OAILedgerDto::isConsolidationSource() const {
    return m_consolidation_source;
}
void OAILedgerDto::setConsolidationSource(const bool &consolidation_source) {
    m_consolidation_source = consolidation_source;
    m_consolidation_source_isSet = true;
}

bool OAILedgerDto::is_consolidation_source_Set() const{
    return m_consolidation_source_isSet;
}

bool OAILedgerDto::is_consolidation_source_Valid() const{
    return m_consolidation_source_isValid;
}

QString OAILedgerDto::getCurrencyId() const {
    return m_currency_id;
}
void OAILedgerDto::setCurrencyId(const QString &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAILedgerDto::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAILedgerDto::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

QString OAILedgerDto::getDescription() const {
    return m_description;
}
void OAILedgerDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILedgerDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAILedgerDto::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAILedgerDto::getInternalId() const {
    return m_internal_id;
}
void OAILedgerDto::setInternalId(const qint32 &internal_id) {
    m_internal_id = internal_id;
    m_internal_id_isSet = true;
}

bool OAILedgerDto::is_internal_id_Set() const{
    return m_internal_id_isSet;
}

bool OAILedgerDto::is_internal_id_Valid() const{
    return m_internal_id_isValid;
}

QDateTime OAILedgerDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAILedgerDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAILedgerDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAILedgerDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QString OAILedgerDto::getNumber() const {
    return m_number;
}
void OAILedgerDto::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAILedgerDto::is_number_Set() const{
    return m_number_isSet;
}

bool OAILedgerDto::is_number_Valid() const{
    return m_number_isValid;
}

bool OAILedgerDto::isPostInterCompany() const {
    return m_post_inter_company;
}
void OAILedgerDto::setPostInterCompany(const bool &post_inter_company) {
    m_post_inter_company = post_inter_company;
    m_post_inter_company_isSet = true;
}

bool OAILedgerDto::is_post_inter_company_Set() const{
    return m_post_inter_company_isSet;
}

bool OAILedgerDto::is_post_inter_company_Valid() const{
    return m_post_inter_company_isValid;
}

bool OAILedgerDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_accounting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consol_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consolidation_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_inter_company_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILedgerDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
