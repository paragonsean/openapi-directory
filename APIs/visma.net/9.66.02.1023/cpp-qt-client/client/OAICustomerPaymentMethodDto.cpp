/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerPaymentMethodDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerPaymentMethodDto::OAICustomerPaymentMethodDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerPaymentMethodDto::OAICustomerPaymentMethodDto() {
    this->initializeModel();
}

OAICustomerPaymentMethodDto::~OAICustomerPaymentMethodDto() {}

void OAICustomerPaymentMethodDto::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_card_or_account_no_isSet = false;
    m_card_or_account_no_isValid = false;

    m_cash_account_isSet = false;
    m_cash_account_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_payment_method_details_isSet = false;
    m_payment_method_details_isValid = false;
}

void OAICustomerPaymentMethodDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerPaymentMethodDto::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_card_or_account_no_isValid = ::OpenAPI::fromJsonValue(m_card_or_account_no, json[QString("cardOrAccountNo")]);
    m_card_or_account_no_isSet = !json[QString("cardOrAccountNo")].isNull() && m_card_or_account_no_isValid;

    m_cash_account_isValid = ::OpenAPI::fromJsonValue(m_cash_account, json[QString("cashAccount")]);
    m_cash_account_isSet = !json[QString("cashAccount")].isNull() && m_cash_account_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_payment_method_details_isValid = ::OpenAPI::fromJsonValue(m_payment_method_details, json[QString("paymentMethodDetails")]);
    m_payment_method_details_isSet = !json[QString("paymentMethodDetails")].isNull() && m_payment_method_details_isValid;
}

QString OAICustomerPaymentMethodDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerPaymentMethodDto::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_card_or_account_no_isSet) {
        obj.insert(QString("cardOrAccountNo"), ::OpenAPI::toJsonValue(m_card_or_account_no));
    }
    if (m_cash_account.isSet()) {
        obj.insert(QString("cashAccount"), ::OpenAPI::toJsonValue(m_cash_account));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_payment_method.isSet()) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_payment_method_details.size() > 0) {
        obj.insert(QString("paymentMethodDetails"), ::OpenAPI::toJsonValue(m_payment_method_details));
    }
    return obj;
}

bool OAICustomerPaymentMethodDto::isActive() const {
    return m_active;
}
void OAICustomerPaymentMethodDto::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAICustomerPaymentMethodDto::is_active_Set() const{
    return m_active_isSet;
}

bool OAICustomerPaymentMethodDto::is_active_Valid() const{
    return m_active_isValid;
}

QString OAICustomerPaymentMethodDto::getCardOrAccountNo() const {
    return m_card_or_account_no;
}
void OAICustomerPaymentMethodDto::setCardOrAccountNo(const QString &card_or_account_no) {
    m_card_or_account_no = card_or_account_no;
    m_card_or_account_no_isSet = true;
}

bool OAICustomerPaymentMethodDto::is_card_or_account_no_Set() const{
    return m_card_or_account_no_isSet;
}

bool OAICustomerPaymentMethodDto::is_card_or_account_no_Valid() const{
    return m_card_or_account_no_isValid;
}

OAICashAccountInCustomerPaymentMethodDto OAICustomerPaymentMethodDto::getCashAccount() const {
    return m_cash_account;
}
void OAICustomerPaymentMethodDto::setCashAccount(const OAICashAccountInCustomerPaymentMethodDto &cash_account) {
    m_cash_account = cash_account;
    m_cash_account_isSet = true;
}

bool OAICustomerPaymentMethodDto::is_cash_account_Set() const{
    return m_cash_account_isSet;
}

bool OAICustomerPaymentMethodDto::is_cash_account_Valid() const{
    return m_cash_account_isValid;
}

OAICustomerInCustomerPaymentMethodDto OAICustomerPaymentMethodDto::getCustomer() const {
    return m_customer;
}
void OAICustomerPaymentMethodDto::setCustomer(const OAICustomerInCustomerPaymentMethodDto &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAICustomerPaymentMethodDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAICustomerPaymentMethodDto::is_customer_Valid() const{
    return m_customer_isValid;
}

OAIPaymentMethodInCustomerPaymentMethodDto OAICustomerPaymentMethodDto::getPaymentMethod() const {
    return m_payment_method;
}
void OAICustomerPaymentMethodDto::setPaymentMethod(const OAIPaymentMethodInCustomerPaymentMethodDto &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAICustomerPaymentMethodDto::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAICustomerPaymentMethodDto::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QList<OAICustomerPaymentMethodDetailDto> OAICustomerPaymentMethodDto::getPaymentMethodDetails() const {
    return m_payment_method_details;
}
void OAICustomerPaymentMethodDto::setPaymentMethodDetails(const QList<OAICustomerPaymentMethodDetailDto> &payment_method_details) {
    m_payment_method_details = payment_method_details;
    m_payment_method_details_isSet = true;
}

bool OAICustomerPaymentMethodDto::is_payment_method_details_Set() const{
    return m_payment_method_details_isSet;
}

bool OAICustomerPaymentMethodDto::is_payment_method_details_Valid() const{
    return m_payment_method_details_isValid;
}

bool OAICustomerPaymentMethodDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_or_account_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerPaymentMethodDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
