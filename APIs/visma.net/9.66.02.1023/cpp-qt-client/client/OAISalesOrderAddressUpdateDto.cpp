/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesOrderAddressUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesOrderAddressUpdateDto::OAISalesOrderAddressUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesOrderAddressUpdateDto::OAISalesOrderAddressUpdateDto() {
    this->initializeModel();
}

OAISalesOrderAddressUpdateDto::~OAISalesOrderAddressUpdateDto() {}

void OAISalesOrderAddressUpdateDto::initializeModel() {

    m_address_line1_isSet = false;
    m_address_line1_isValid = false;

    m_address_line2_isSet = false;
    m_address_line2_isValid = false;

    m_address_line3_isSet = false;
    m_address_line3_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_id_isSet = false;
    m_country_id_isValid = false;

    m_county_isSet = false;
    m_county_isValid = false;

    m_override_address_isSet = false;
    m_override_address_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;
}

void OAISalesOrderAddressUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesOrderAddressUpdateDto::fromJsonObject(QJsonObject json) {

    m_address_line1_isValid = ::OpenAPI::fromJsonValue(m_address_line1, json[QString("addressLine1")]);
    m_address_line1_isSet = !json[QString("addressLine1")].isNull() && m_address_line1_isValid;

    m_address_line2_isValid = ::OpenAPI::fromJsonValue(m_address_line2, json[QString("addressLine2")]);
    m_address_line2_isSet = !json[QString("addressLine2")].isNull() && m_address_line2_isValid;

    m_address_line3_isValid = ::OpenAPI::fromJsonValue(m_address_line3, json[QString("addressLine3")]);
    m_address_line3_isSet = !json[QString("addressLine3")].isNull() && m_address_line3_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_id_isValid = ::OpenAPI::fromJsonValue(m_country_id, json[QString("countryId")]);
    m_country_id_isSet = !json[QString("countryId")].isNull() && m_country_id_isValid;

    m_county_isValid = ::OpenAPI::fromJsonValue(m_county, json[QString("county")]);
    m_county_isSet = !json[QString("county")].isNull() && m_county_isValid;

    m_override_address_isValid = ::OpenAPI::fromJsonValue(m_override_address, json[QString("overrideAddress")]);
    m_override_address_isSet = !json[QString("overrideAddress")].isNull() && m_override_address_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;
}

QString OAISalesOrderAddressUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesOrderAddressUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_address_line1.isSet()) {
        obj.insert(QString("addressLine1"), ::OpenAPI::toJsonValue(m_address_line1));
    }
    if (m_address_line2.isSet()) {
        obj.insert(QString("addressLine2"), ::OpenAPI::toJsonValue(m_address_line2));
    }
    if (m_address_line3.isSet()) {
        obj.insert(QString("addressLine3"), ::OpenAPI::toJsonValue(m_address_line3));
    }
    if (m_city.isSet()) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_id.isSet()) {
        obj.insert(QString("countryId"), ::OpenAPI::toJsonValue(m_country_id));
    }
    if (m_county.isSet()) {
        obj.insert(QString("county"), ::OpenAPI::toJsonValue(m_county));
    }
    if (m_override_address.isSet()) {
        obj.insert(QString("overrideAddress"), ::OpenAPI::toJsonValue(m_override_address));
    }
    if (m_postal_code.isSet()) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    return obj;
}

OAIDtoValueOfString OAISalesOrderAddressUpdateDto::getAddressLine1() const {
    return m_address_line1;
}
void OAISalesOrderAddressUpdateDto::setAddressLine1(const OAIDtoValueOfString &address_line1) {
    m_address_line1 = address_line1;
    m_address_line1_isSet = true;
}

bool OAISalesOrderAddressUpdateDto::is_address_line1_Set() const{
    return m_address_line1_isSet;
}

bool OAISalesOrderAddressUpdateDto::is_address_line1_Valid() const{
    return m_address_line1_isValid;
}

OAIDtoValueOfString OAISalesOrderAddressUpdateDto::getAddressLine2() const {
    return m_address_line2;
}
void OAISalesOrderAddressUpdateDto::setAddressLine2(const OAIDtoValueOfString &address_line2) {
    m_address_line2 = address_line2;
    m_address_line2_isSet = true;
}

bool OAISalesOrderAddressUpdateDto::is_address_line2_Set() const{
    return m_address_line2_isSet;
}

bool OAISalesOrderAddressUpdateDto::is_address_line2_Valid() const{
    return m_address_line2_isValid;
}

OAIDtoValueOfString OAISalesOrderAddressUpdateDto::getAddressLine3() const {
    return m_address_line3;
}
void OAISalesOrderAddressUpdateDto::setAddressLine3(const OAIDtoValueOfString &address_line3) {
    m_address_line3 = address_line3;
    m_address_line3_isSet = true;
}

bool OAISalesOrderAddressUpdateDto::is_address_line3_Set() const{
    return m_address_line3_isSet;
}

bool OAISalesOrderAddressUpdateDto::is_address_line3_Valid() const{
    return m_address_line3_isValid;
}

OAIDtoValueOfString OAISalesOrderAddressUpdateDto::getCity() const {
    return m_city;
}
void OAISalesOrderAddressUpdateDto::setCity(const OAIDtoValueOfString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAISalesOrderAddressUpdateDto::is_city_Set() const{
    return m_city_isSet;
}

bool OAISalesOrderAddressUpdateDto::is_city_Valid() const{
    return m_city_isValid;
}

OAIDtoValueOfString OAISalesOrderAddressUpdateDto::getCountryId() const {
    return m_country_id;
}
void OAISalesOrderAddressUpdateDto::setCountryId(const OAIDtoValueOfString &country_id) {
    m_country_id = country_id;
    m_country_id_isSet = true;
}

bool OAISalesOrderAddressUpdateDto::is_country_id_Set() const{
    return m_country_id_isSet;
}

bool OAISalesOrderAddressUpdateDto::is_country_id_Valid() const{
    return m_country_id_isValid;
}

OAIDtoValueOfString OAISalesOrderAddressUpdateDto::getCounty() const {
    return m_county;
}
void OAISalesOrderAddressUpdateDto::setCounty(const OAIDtoValueOfString &county) {
    m_county = county;
    m_county_isSet = true;
}

bool OAISalesOrderAddressUpdateDto::is_county_Set() const{
    return m_county_isSet;
}

bool OAISalesOrderAddressUpdateDto::is_county_Valid() const{
    return m_county_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISalesOrderAddressUpdateDto::getOverrideAddress() const {
    return m_override_address;
}
void OAISalesOrderAddressUpdateDto::setOverrideAddress(const OAIDtoValueOfNullableOfBoolean &override_address) {
    m_override_address = override_address;
    m_override_address_isSet = true;
}

bool OAISalesOrderAddressUpdateDto::is_override_address_Set() const{
    return m_override_address_isSet;
}

bool OAISalesOrderAddressUpdateDto::is_override_address_Valid() const{
    return m_override_address_isValid;
}

OAIDtoValueOfString OAISalesOrderAddressUpdateDto::getPostalCode() const {
    return m_postal_code;
}
void OAISalesOrderAddressUpdateDto::setPostalCode(const OAIDtoValueOfString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAISalesOrderAddressUpdateDto::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAISalesOrderAddressUpdateDto::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

bool OAISalesOrderAddressUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_line1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_city.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_county.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesOrderAddressUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
