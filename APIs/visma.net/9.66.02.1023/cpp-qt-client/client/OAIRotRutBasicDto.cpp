/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRotRutBasicDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRotRutBasicDto::OAIRotRutBasicDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRotRutBasicDto::OAIRotRutBasicDto() {
    this->initializeModel();
}

OAIRotRutBasicDto::~OAIRotRutBasicDto() {}

void OAIRotRutBasicDto::initializeModel() {

    m_appartment_isSet = false;
    m_appartment_isValid = false;

    m_distributed_automaticaly_isSet = false;
    m_distributed_automaticaly_isValid = false;

    m_distribution_isSet = false;
    m_distribution_isValid = false;

    m_estate_isSet = false;
    m_estate_isValid = false;

    m_organization_nbr_isSet = false;
    m_organization_nbr_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRotRutBasicDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRotRutBasicDto::fromJsonObject(QJsonObject json) {

    m_appartment_isValid = ::OpenAPI::fromJsonValue(m_appartment, json[QString("appartment")]);
    m_appartment_isSet = !json[QString("appartment")].isNull() && m_appartment_isValid;

    m_distributed_automaticaly_isValid = ::OpenAPI::fromJsonValue(m_distributed_automaticaly, json[QString("distributedAutomaticaly")]);
    m_distributed_automaticaly_isSet = !json[QString("distributedAutomaticaly")].isNull() && m_distributed_automaticaly_isValid;

    m_distribution_isValid = ::OpenAPI::fromJsonValue(m_distribution, json[QString("distribution")]);
    m_distribution_isSet = !json[QString("distribution")].isNull() && m_distribution_isValid;

    m_estate_isValid = ::OpenAPI::fromJsonValue(m_estate, json[QString("estate")]);
    m_estate_isSet = !json[QString("estate")].isNull() && m_estate_isValid;

    m_organization_nbr_isValid = ::OpenAPI::fromJsonValue(m_organization_nbr, json[QString("organizationNbr")]);
    m_organization_nbr_isSet = !json[QString("organizationNbr")].isNull() && m_organization_nbr_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRotRutBasicDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRotRutBasicDto::asJsonObject() const {
    QJsonObject obj;
    if (m_appartment_isSet) {
        obj.insert(QString("appartment"), ::OpenAPI::toJsonValue(m_appartment));
    }
    if (m_distributed_automaticaly_isSet) {
        obj.insert(QString("distributedAutomaticaly"), ::OpenAPI::toJsonValue(m_distributed_automaticaly));
    }
    if (m_distribution.size() > 0) {
        obj.insert(QString("distribution"), ::OpenAPI::toJsonValue(m_distribution));
    }
    if (m_estate_isSet) {
        obj.insert(QString("estate"), ::OpenAPI::toJsonValue(m_estate));
    }
    if (m_organization_nbr_isSet) {
        obj.insert(QString("organizationNbr"), ::OpenAPI::toJsonValue(m_organization_nbr));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIRotRutBasicDto::getAppartment() const {
    return m_appartment;
}
void OAIRotRutBasicDto::setAppartment(const QString &appartment) {
    m_appartment = appartment;
    m_appartment_isSet = true;
}

bool OAIRotRutBasicDto::is_appartment_Set() const{
    return m_appartment_isSet;
}

bool OAIRotRutBasicDto::is_appartment_Valid() const{
    return m_appartment_isValid;
}

bool OAIRotRutBasicDto::isDistributedAutomaticaly() const {
    return m_distributed_automaticaly;
}
void OAIRotRutBasicDto::setDistributedAutomaticaly(const bool &distributed_automaticaly) {
    m_distributed_automaticaly = distributed_automaticaly;
    m_distributed_automaticaly_isSet = true;
}

bool OAIRotRutBasicDto::is_distributed_automaticaly_Set() const{
    return m_distributed_automaticaly_isSet;
}

bool OAIRotRutBasicDto::is_distributed_automaticaly_Valid() const{
    return m_distributed_automaticaly_isValid;
}

QList<OAIRotRutDistributionDto> OAIRotRutBasicDto::getDistribution() const {
    return m_distribution;
}
void OAIRotRutBasicDto::setDistribution(const QList<OAIRotRutDistributionDto> &distribution) {
    m_distribution = distribution;
    m_distribution_isSet = true;
}

bool OAIRotRutBasicDto::is_distribution_Set() const{
    return m_distribution_isSet;
}

bool OAIRotRutBasicDto::is_distribution_Valid() const{
    return m_distribution_isValid;
}

QString OAIRotRutBasicDto::getEstate() const {
    return m_estate;
}
void OAIRotRutBasicDto::setEstate(const QString &estate) {
    m_estate = estate;
    m_estate_isSet = true;
}

bool OAIRotRutBasicDto::is_estate_Set() const{
    return m_estate_isSet;
}

bool OAIRotRutBasicDto::is_estate_Valid() const{
    return m_estate_isValid;
}

QString OAIRotRutBasicDto::getOrganizationNbr() const {
    return m_organization_nbr;
}
void OAIRotRutBasicDto::setOrganizationNbr(const QString &organization_nbr) {
    m_organization_nbr = organization_nbr;
    m_organization_nbr_isSet = true;
}

bool OAIRotRutBasicDto::is_organization_nbr_Set() const{
    return m_organization_nbr_isSet;
}

bool OAIRotRutBasicDto::is_organization_nbr_Valid() const{
    return m_organization_nbr_isValid;
}

QString OAIRotRutBasicDto::getType() const {
    return m_type;
}
void OAIRotRutBasicDto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRotRutBasicDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRotRutBasicDto::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRotRutBasicDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_appartment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distributed_automaticaly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_estate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRotRutBasicDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
