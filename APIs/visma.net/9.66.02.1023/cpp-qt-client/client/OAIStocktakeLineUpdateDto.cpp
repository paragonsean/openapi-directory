/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStocktakeLineUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStocktakeLineUpdateDto::OAIStocktakeLineUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStocktakeLineUpdateDto::OAIStocktakeLineUpdateDto() {
    this->initializeModel();
}

OAIStocktakeLineUpdateDto::~OAIStocktakeLineUpdateDto() {}

void OAIStocktakeLineUpdateDto::initializeModel() {

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_inventory_id_isSet = false;
    m_inventory_id_isValid = false;

    m_line_nbr_isSet = false;
    m_line_nbr_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_lot_serial_number_isSet = false;
    m_lot_serial_number_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_physical_quantity_isSet = false;
    m_physical_quantity_isValid = false;

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;
}

void OAIStocktakeLineUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStocktakeLineUpdateDto::fromJsonObject(QJsonObject json) {

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_inventory_id_isValid = ::OpenAPI::fromJsonValue(m_inventory_id, json[QString("inventoryId")]);
    m_inventory_id_isSet = !json[QString("inventoryId")].isNull() && m_inventory_id_isValid;

    m_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_line_nbr, json[QString("lineNbr")]);
    m_line_nbr_isSet = !json[QString("lineNbr")].isNull() && m_line_nbr_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_lot_serial_number_isValid = ::OpenAPI::fromJsonValue(m_lot_serial_number, json[QString("lotSerialNumber")]);
    m_lot_serial_number_isSet = !json[QString("lotSerialNumber")].isNull() && m_lot_serial_number_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_physical_quantity_isValid = ::OpenAPI::fromJsonValue(m_physical_quantity, json[QString("physicalQuantity")]);
    m_physical_quantity_isSet = !json[QString("physicalQuantity")].isNull() && m_physical_quantity_isValid;

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("reasonCode")]);
    m_reason_code_isSet = !json[QString("reasonCode")].isNull() && m_reason_code_isValid;
}

QString OAIStocktakeLineUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStocktakeLineUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_expiration_date.isSet()) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_inventory_id.isSet()) {
        obj.insert(QString("inventoryId"), ::OpenAPI::toJsonValue(m_inventory_id));
    }
    if (m_line_nbr.isSet()) {
        obj.insert(QString("lineNbr"), ::OpenAPI::toJsonValue(m_line_nbr));
    }
    if (m_location_id.isSet()) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_lot_serial_number.isSet()) {
        obj.insert(QString("lotSerialNumber"), ::OpenAPI::toJsonValue(m_lot_serial_number));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_physical_quantity.isSet()) {
        obj.insert(QString("physicalQuantity"), ::OpenAPI::toJsonValue(m_physical_quantity));
    }
    if (m_reason_code.isSet()) {
        obj.insert(QString("reasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    return obj;
}

OAIDtoValueOfNullableOfDateTime OAIStocktakeLineUpdateDto::getExpirationDate() const {
    return m_expiration_date;
}
void OAIStocktakeLineUpdateDto::setExpirationDate(const OAIDtoValueOfNullableOfDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIStocktakeLineUpdateDto::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIStocktakeLineUpdateDto::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

OAIDtoValueOfString OAIStocktakeLineUpdateDto::getInventoryId() const {
    return m_inventory_id;
}
void OAIStocktakeLineUpdateDto::setInventoryId(const OAIDtoValueOfString &inventory_id) {
    m_inventory_id = inventory_id;
    m_inventory_id_isSet = true;
}

bool OAIStocktakeLineUpdateDto::is_inventory_id_Set() const{
    return m_inventory_id_isSet;
}

bool OAIStocktakeLineUpdateDto::is_inventory_id_Valid() const{
    return m_inventory_id_isValid;
}

OAIDtoValueOfNullableOfInt32 OAIStocktakeLineUpdateDto::getLineNbr() const {
    return m_line_nbr;
}
void OAIStocktakeLineUpdateDto::setLineNbr(const OAIDtoValueOfNullableOfInt32 &line_nbr) {
    m_line_nbr = line_nbr;
    m_line_nbr_isSet = true;
}

bool OAIStocktakeLineUpdateDto::is_line_nbr_Set() const{
    return m_line_nbr_isSet;
}

bool OAIStocktakeLineUpdateDto::is_line_nbr_Valid() const{
    return m_line_nbr_isValid;
}

OAIDtoValueOfString OAIStocktakeLineUpdateDto::getLocationId() const {
    return m_location_id;
}
void OAIStocktakeLineUpdateDto::setLocationId(const OAIDtoValueOfString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIStocktakeLineUpdateDto::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIStocktakeLineUpdateDto::is_location_id_Valid() const{
    return m_location_id_isValid;
}

OAIDtoValueOfString OAIStocktakeLineUpdateDto::getLotSerialNumber() const {
    return m_lot_serial_number;
}
void OAIStocktakeLineUpdateDto::setLotSerialNumber(const OAIDtoValueOfString &lot_serial_number) {
    m_lot_serial_number = lot_serial_number;
    m_lot_serial_number_isSet = true;
}

bool OAIStocktakeLineUpdateDto::is_lot_serial_number_Set() const{
    return m_lot_serial_number_isSet;
}

bool OAIStocktakeLineUpdateDto::is_lot_serial_number_Valid() const{
    return m_lot_serial_number_isValid;
}

QString OAIStocktakeLineUpdateDto::getOperation() const {
    return m_operation;
}
void OAIStocktakeLineUpdateDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIStocktakeLineUpdateDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIStocktakeLineUpdateDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIStocktakeLineUpdateDto::getPhysicalQuantity() const {
    return m_physical_quantity;
}
void OAIStocktakeLineUpdateDto::setPhysicalQuantity(const OAIDtoValueOfNullableOfDecimal &physical_quantity) {
    m_physical_quantity = physical_quantity;
    m_physical_quantity_isSet = true;
}

bool OAIStocktakeLineUpdateDto::is_physical_quantity_Set() const{
    return m_physical_quantity_isSet;
}

bool OAIStocktakeLineUpdateDto::is_physical_quantity_Valid() const{
    return m_physical_quantity_isValid;
}

OAIDtoValueOfString OAIStocktakeLineUpdateDto::getReasonCode() const {
    return m_reason_code;
}
void OAIStocktakeLineUpdateDto::setReasonCode(const OAIDtoValueOfString &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAIStocktakeLineUpdateDto::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAIStocktakeLineUpdateDto::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

bool OAIStocktakeLineUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiration_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_serial_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_quantity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_code.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStocktakeLineUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
