/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseOrderLineUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseOrderLineUpdateDto::OAIPurchaseOrderLineUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseOrderLineUpdateDto::OAIPurchaseOrderLineUpdateDto() {
    this->initializeModel();
}

OAIPurchaseOrderLineUpdateDto::~OAIPurchaseOrderLineUpdateDto() {}

void OAIPurchaseOrderLineUpdateDto::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_alternate_id_isSet = false;
    m_alternate_id_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_complete_on_isSet = false;
    m_complete_on_isValid = false;

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_discount_code_isSet = false;
    m_discount_code_isValid = false;

    m_discount_percent_isSet = false;
    m_discount_percent_isValid = false;

    m_ext_cost_isSet = false;
    m_ext_cost_isValid = false;

    m_inventory_isSet = false;
    m_inventory_isValid = false;

    m_line_description_isSet = false;
    m_line_description_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_line_type_isSet = false;
    m_line_type_isValid = false;

    m_manual_discount_isSet = false;
    m_manual_discount_isValid = false;

    m_max_receipt_isSet = false;
    m_max_receipt_isValid = false;

    m_min_receipt_isSet = false;
    m_min_receipt_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_order_qty_isSet = false;
    m_order_qty_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_project_task_isSet = false;
    m_project_task_isValid = false;

    m_promised_isSet = false;
    m_promised_isValid = false;

    m_receipt_action_isSet = false;
    m_receipt_action_isValid = false;

    m_requested_isSet = false;
    m_requested_isValid = false;

    m_sub_isSet = false;
    m_sub_isValid = false;

    m_tax_category_isSet = false;
    m_tax_category_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;

    m_warehouse_isSet = false;
    m_warehouse_isValid = false;
}

void OAIPurchaseOrderLineUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseOrderLineUpdateDto::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_alternate_id_isValid = ::OpenAPI::fromJsonValue(m_alternate_id, json[QString("alternateId")]);
    m_alternate_id_isSet = !json[QString("alternateId")].isNull() && m_alternate_id_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_complete_on_isValid = ::OpenAPI::fromJsonValue(m_complete_on, json[QString("completeOn")]);
    m_complete_on_isSet = !json[QString("completeOn")].isNull() && m_complete_on_isValid;

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("discountAmount")]);
    m_discount_amount_isSet = !json[QString("discountAmount")].isNull() && m_discount_amount_isValid;

    m_discount_code_isValid = ::OpenAPI::fromJsonValue(m_discount_code, json[QString("discountCode")]);
    m_discount_code_isSet = !json[QString("discountCode")].isNull() && m_discount_code_isValid;

    m_discount_percent_isValid = ::OpenAPI::fromJsonValue(m_discount_percent, json[QString("discountPercent")]);
    m_discount_percent_isSet = !json[QString("discountPercent")].isNull() && m_discount_percent_isValid;

    m_ext_cost_isValid = ::OpenAPI::fromJsonValue(m_ext_cost, json[QString("extCost")]);
    m_ext_cost_isSet = !json[QString("extCost")].isNull() && m_ext_cost_isValid;

    m_inventory_isValid = ::OpenAPI::fromJsonValue(m_inventory, json[QString("inventory")]);
    m_inventory_isSet = !json[QString("inventory")].isNull() && m_inventory_isValid;

    m_line_description_isValid = ::OpenAPI::fromJsonValue(m_line_description, json[QString("lineDescription")]);
    m_line_description_isSet = !json[QString("lineDescription")].isNull() && m_line_description_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("lineNumber")]);
    m_line_number_isSet = !json[QString("lineNumber")].isNull() && m_line_number_isValid;

    m_line_type_isValid = ::OpenAPI::fromJsonValue(m_line_type, json[QString("lineType")]);
    m_line_type_isSet = !json[QString("lineType")].isNull() && m_line_type_isValid;

    m_manual_discount_isValid = ::OpenAPI::fromJsonValue(m_manual_discount, json[QString("manualDiscount")]);
    m_manual_discount_isSet = !json[QString("manualDiscount")].isNull() && m_manual_discount_isValid;

    m_max_receipt_isValid = ::OpenAPI::fromJsonValue(m_max_receipt, json[QString("maxReceipt")]);
    m_max_receipt_isSet = !json[QString("maxReceipt")].isNull() && m_max_receipt_isValid;

    m_min_receipt_isValid = ::OpenAPI::fromJsonValue(m_min_receipt, json[QString("minReceipt")]);
    m_min_receipt_isSet = !json[QString("minReceipt")].isNull() && m_min_receipt_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_order_qty_isValid = ::OpenAPI::fromJsonValue(m_order_qty, json[QString("orderQty")]);
    m_order_qty_isSet = !json[QString("orderQty")].isNull() && m_order_qty_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_project_task_isValid = ::OpenAPI::fromJsonValue(m_project_task, json[QString("projectTask")]);
    m_project_task_isSet = !json[QString("projectTask")].isNull() && m_project_task_isValid;

    m_promised_isValid = ::OpenAPI::fromJsonValue(m_promised, json[QString("promised")]);
    m_promised_isSet = !json[QString("promised")].isNull() && m_promised_isValid;

    m_receipt_action_isValid = ::OpenAPI::fromJsonValue(m_receipt_action, json[QString("receiptAction")]);
    m_receipt_action_isSet = !json[QString("receiptAction")].isNull() && m_receipt_action_isValid;

    m_requested_isValid = ::OpenAPI::fromJsonValue(m_requested, json[QString("requested")]);
    m_requested_isSet = !json[QString("requested")].isNull() && m_requested_isValid;

    m_sub_isValid = ::OpenAPI::fromJsonValue(m_sub, json[QString("sub")]);
    m_sub_isSet = !json[QString("sub")].isNull() && m_sub_isValid;

    m_tax_category_isValid = ::OpenAPI::fromJsonValue(m_tax_category, json[QString("taxCategory")]);
    m_tax_category_isSet = !json[QString("taxCategory")].isNull() && m_tax_category_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;

    m_warehouse_isValid = ::OpenAPI::fromJsonValue(m_warehouse, json[QString("warehouse")]);
    m_warehouse_isSet = !json[QString("warehouse")].isNull() && m_warehouse_isValid;
}

QString OAIPurchaseOrderLineUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseOrderLineUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_alternate_id.isSet()) {
        obj.insert(QString("alternateId"), ::OpenAPI::toJsonValue(m_alternate_id));
    }
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_complete_on.isSet()) {
        obj.insert(QString("completeOn"), ::OpenAPI::toJsonValue(m_complete_on));
    }
    if (m_discount_amount.isSet()) {
        obj.insert(QString("discountAmount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_discount_code.isSet()) {
        obj.insert(QString("discountCode"), ::OpenAPI::toJsonValue(m_discount_code));
    }
    if (m_discount_percent.isSet()) {
        obj.insert(QString("discountPercent"), ::OpenAPI::toJsonValue(m_discount_percent));
    }
    if (m_ext_cost.isSet()) {
        obj.insert(QString("extCost"), ::OpenAPI::toJsonValue(m_ext_cost));
    }
    if (m_inventory.isSet()) {
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(m_inventory));
    }
    if (m_line_description.isSet()) {
        obj.insert(QString("lineDescription"), ::OpenAPI::toJsonValue(m_line_description));
    }
    if (m_line_number.isSet()) {
        obj.insert(QString("lineNumber"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_line_type.isSet()) {
        obj.insert(QString("lineType"), ::OpenAPI::toJsonValue(m_line_type));
    }
    if (m_manual_discount.isSet()) {
        obj.insert(QString("manualDiscount"), ::OpenAPI::toJsonValue(m_manual_discount));
    }
    if (m_max_receipt.isSet()) {
        obj.insert(QString("maxReceipt"), ::OpenAPI::toJsonValue(m_max_receipt));
    }
    if (m_min_receipt.isSet()) {
        obj.insert(QString("minReceipt"), ::OpenAPI::toJsonValue(m_min_receipt));
    }
    if (m_note.isSet()) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_order_qty.isSet()) {
        obj.insert(QString("orderQty"), ::OpenAPI::toJsonValue(m_order_qty));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_project_task.isSet()) {
        obj.insert(QString("projectTask"), ::OpenAPI::toJsonValue(m_project_task));
    }
    if (m_promised.isSet()) {
        obj.insert(QString("promised"), ::OpenAPI::toJsonValue(m_promised));
    }
    if (m_receipt_action.isSet()) {
        obj.insert(QString("receiptAction"), ::OpenAPI::toJsonValue(m_receipt_action));
    }
    if (m_requested.isSet()) {
        obj.insert(QString("requested"), ::OpenAPI::toJsonValue(m_requested));
    }
    if (m_sub.size() > 0) {
        obj.insert(QString("sub"), ::OpenAPI::toJsonValue(m_sub));
    }
    if (m_tax_category.isSet()) {
        obj.insert(QString("taxCategory"), ::OpenAPI::toJsonValue(m_tax_category));
    }
    if (m_unit_cost.isSet()) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_uom.isSet()) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    if (m_warehouse.isSet()) {
        obj.insert(QString("warehouse"), ::OpenAPI::toJsonValue(m_warehouse));
    }
    return obj;
}

OAIDtoValueOfString OAIPurchaseOrderLineUpdateDto::getAccount() const {
    return m_account;
}
void OAIPurchaseOrderLineUpdateDto::setAccount(const OAIDtoValueOfString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_account_Set() const{
    return m_account_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_account_Valid() const{
    return m_account_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderLineUpdateDto::getAlternateId() const {
    return m_alternate_id;
}
void OAIPurchaseOrderLineUpdateDto::setAlternateId(const OAIDtoValueOfString &alternate_id) {
    m_alternate_id = alternate_id;
    m_alternate_id_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_alternate_id_Set() const{
    return m_alternate_id_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_alternate_id_Valid() const{
    return m_alternate_id_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIPurchaseOrderLineUpdateDto::getAmount() const {
    return m_amount;
}
void OAIPurchaseOrderLineUpdateDto::setAmount(const OAIDtoValueOfNullableOfDecimal &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderLineUpdateDto::getBranch() const {
    return m_branch;
}
void OAIPurchaseOrderLineUpdateDto::setBranch(const OAIDtoValueOfString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_branch_Valid() const{
    return m_branch_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIPurchaseOrderLineUpdateDto::getCompleteOn() const {
    return m_complete_on;
}
void OAIPurchaseOrderLineUpdateDto::setCompleteOn(const OAIDtoValueOfNullableOfDecimal &complete_on) {
    m_complete_on = complete_on;
    m_complete_on_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_complete_on_Set() const{
    return m_complete_on_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_complete_on_Valid() const{
    return m_complete_on_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIPurchaseOrderLineUpdateDto::getDiscountAmount() const {
    return m_discount_amount;
}
void OAIPurchaseOrderLineUpdateDto::setDiscountAmount(const OAIDtoValueOfNullableOfDecimal &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderLineUpdateDto::getDiscountCode() const {
    return m_discount_code;
}
void OAIPurchaseOrderLineUpdateDto::setDiscountCode(const OAIDtoValueOfString &discount_code) {
    m_discount_code = discount_code;
    m_discount_code_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_discount_code_Set() const{
    return m_discount_code_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_discount_code_Valid() const{
    return m_discount_code_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIPurchaseOrderLineUpdateDto::getDiscountPercent() const {
    return m_discount_percent;
}
void OAIPurchaseOrderLineUpdateDto::setDiscountPercent(const OAIDtoValueOfNullableOfDecimal &discount_percent) {
    m_discount_percent = discount_percent;
    m_discount_percent_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_discount_percent_Set() const{
    return m_discount_percent_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_discount_percent_Valid() const{
    return m_discount_percent_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIPurchaseOrderLineUpdateDto::getExtCost() const {
    return m_ext_cost;
}
void OAIPurchaseOrderLineUpdateDto::setExtCost(const OAIDtoValueOfNullableOfDecimal &ext_cost) {
    m_ext_cost = ext_cost;
    m_ext_cost_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_ext_cost_Set() const{
    return m_ext_cost_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_ext_cost_Valid() const{
    return m_ext_cost_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderLineUpdateDto::getInventory() const {
    return m_inventory;
}
void OAIPurchaseOrderLineUpdateDto::setInventory(const OAIDtoValueOfString &inventory) {
    m_inventory = inventory;
    m_inventory_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_inventory_Set() const{
    return m_inventory_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_inventory_Valid() const{
    return m_inventory_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderLineUpdateDto::getLineDescription() const {
    return m_line_description;
}
void OAIPurchaseOrderLineUpdateDto::setLineDescription(const OAIDtoValueOfString &line_description) {
    m_line_description = line_description;
    m_line_description_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_line_description_Set() const{
    return m_line_description_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_line_description_Valid() const{
    return m_line_description_isValid;
}

OAIDtoValueOfNullableOfInt32 OAIPurchaseOrderLineUpdateDto::getLineNumber() const {
    return m_line_number;
}
void OAIPurchaseOrderLineUpdateDto::setLineNumber(const OAIDtoValueOfNullableOfInt32 &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_line_number_Valid() const{
    return m_line_number_isValid;
}

OAIDtoValueOfNullableOfPoLineType OAIPurchaseOrderLineUpdateDto::getLineType() const {
    return m_line_type;
}
void OAIPurchaseOrderLineUpdateDto::setLineType(const OAIDtoValueOfNullableOfPoLineType &line_type) {
    m_line_type = line_type;
    m_line_type_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_line_type_Set() const{
    return m_line_type_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_line_type_Valid() const{
    return m_line_type_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIPurchaseOrderLineUpdateDto::getManualDiscount() const {
    return m_manual_discount;
}
void OAIPurchaseOrderLineUpdateDto::setManualDiscount(const OAIDtoValueOfNullableOfBoolean &manual_discount) {
    m_manual_discount = manual_discount;
    m_manual_discount_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_manual_discount_Set() const{
    return m_manual_discount_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_manual_discount_Valid() const{
    return m_manual_discount_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIPurchaseOrderLineUpdateDto::getMaxReceipt() const {
    return m_max_receipt;
}
void OAIPurchaseOrderLineUpdateDto::setMaxReceipt(const OAIDtoValueOfNullableOfDecimal &max_receipt) {
    m_max_receipt = max_receipt;
    m_max_receipt_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_max_receipt_Set() const{
    return m_max_receipt_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_max_receipt_Valid() const{
    return m_max_receipt_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIPurchaseOrderLineUpdateDto::getMinReceipt() const {
    return m_min_receipt;
}
void OAIPurchaseOrderLineUpdateDto::setMinReceipt(const OAIDtoValueOfNullableOfDecimal &min_receipt) {
    m_min_receipt = min_receipt;
    m_min_receipt_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_min_receipt_Set() const{
    return m_min_receipt_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_min_receipt_Valid() const{
    return m_min_receipt_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderLineUpdateDto::getNote() const {
    return m_note;
}
void OAIPurchaseOrderLineUpdateDto::setNote(const OAIDtoValueOfString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIPurchaseOrderLineUpdateDto::getOperation() const {
    return m_operation;
}
void OAIPurchaseOrderLineUpdateDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIPurchaseOrderLineUpdateDto::getOrderQty() const {
    return m_order_qty;
}
void OAIPurchaseOrderLineUpdateDto::setOrderQty(const OAIDtoValueOfNullableOfDecimal &order_qty) {
    m_order_qty = order_qty;
    m_order_qty_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_order_qty_Set() const{
    return m_order_qty_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_order_qty_Valid() const{
    return m_order_qty_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderLineUpdateDto::getProject() const {
    return m_project;
}
void OAIPurchaseOrderLineUpdateDto::setProject(const OAIDtoValueOfString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_project_Set() const{
    return m_project_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_project_Valid() const{
    return m_project_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderLineUpdateDto::getProjectTask() const {
    return m_project_task;
}
void OAIPurchaseOrderLineUpdateDto::setProjectTask(const OAIDtoValueOfString &project_task) {
    m_project_task = project_task;
    m_project_task_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_project_task_Set() const{
    return m_project_task_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_project_task_Valid() const{
    return m_project_task_isValid;
}

OAIDtoValueOfNullableOfDateTime OAIPurchaseOrderLineUpdateDto::getPromised() const {
    return m_promised;
}
void OAIPurchaseOrderLineUpdateDto::setPromised(const OAIDtoValueOfNullableOfDateTime &promised) {
    m_promised = promised;
    m_promised_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_promised_Set() const{
    return m_promised_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_promised_Valid() const{
    return m_promised_isValid;
}

OAIDtoValueOfNullableOfPurchaseOrderReceiptAction OAIPurchaseOrderLineUpdateDto::getReceiptAction() const {
    return m_receipt_action;
}
void OAIPurchaseOrderLineUpdateDto::setReceiptAction(const OAIDtoValueOfNullableOfPurchaseOrderReceiptAction &receipt_action) {
    m_receipt_action = receipt_action;
    m_receipt_action_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_receipt_action_Set() const{
    return m_receipt_action_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_receipt_action_Valid() const{
    return m_receipt_action_isValid;
}

OAIDtoValueOfNullableOfDateTime OAIPurchaseOrderLineUpdateDto::getRequested() const {
    return m_requested;
}
void OAIPurchaseOrderLineUpdateDto::setRequested(const OAIDtoValueOfNullableOfDateTime &requested) {
    m_requested = requested;
    m_requested_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_requested_Set() const{
    return m_requested_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_requested_Valid() const{
    return m_requested_isValid;
}

QList<OAISegmentUpdateDto> OAIPurchaseOrderLineUpdateDto::getSub() const {
    return m_sub;
}
void OAIPurchaseOrderLineUpdateDto::setSub(const QList<OAISegmentUpdateDto> &sub) {
    m_sub = sub;
    m_sub_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_sub_Set() const{
    return m_sub_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_sub_Valid() const{
    return m_sub_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderLineUpdateDto::getTaxCategory() const {
    return m_tax_category;
}
void OAIPurchaseOrderLineUpdateDto::setTaxCategory(const OAIDtoValueOfString &tax_category) {
    m_tax_category = tax_category;
    m_tax_category_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_tax_category_Set() const{
    return m_tax_category_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_tax_category_Valid() const{
    return m_tax_category_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIPurchaseOrderLineUpdateDto::getUnitCost() const {
    return m_unit_cost;
}
void OAIPurchaseOrderLineUpdateDto::setUnitCost(const OAIDtoValueOfNullableOfDecimal &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderLineUpdateDto::getUom() const {
    return m_uom;
}
void OAIPurchaseOrderLineUpdateDto::setUom(const OAIDtoValueOfString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_uom_Valid() const{
    return m_uom_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderLineUpdateDto::getWarehouse() const {
    return m_warehouse;
}
void OAIPurchaseOrderLineUpdateDto::setWarehouse(const OAIDtoValueOfString &warehouse) {
    m_warehouse = warehouse;
    m_warehouse_isSet = true;
}

bool OAIPurchaseOrderLineUpdateDto::is_warehouse_Set() const{
    return m_warehouse_isSet;
}

bool OAIPurchaseOrderLineUpdateDto::is_warehouse_Valid() const{
    return m_warehouse_isValid;
}

bool OAIPurchaseOrderLineUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_complete_on.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_percent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ext_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_discount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_receipt.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_receipt.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_qty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_promised.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseOrderLineUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
