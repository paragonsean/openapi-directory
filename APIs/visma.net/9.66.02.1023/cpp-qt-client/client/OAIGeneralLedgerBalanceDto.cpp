/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeneralLedgerBalanceDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeneralLedgerBalanceDto::OAIGeneralLedgerBalanceDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeneralLedgerBalanceDto::OAIGeneralLedgerBalanceDto() {
    this->initializeModel();
}

OAIGeneralLedgerBalanceDto::~OAIGeneralLedgerBalanceDto() {}

void OAIGeneralLedgerBalanceDto::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_balance_type_isSet = false;
    m_balance_type_isValid = false;

    m_beginning_balance_isSet = false;
    m_beginning_balance_isValid = false;

    m_beginning_balance_in_currency_isSet = false;
    m_beginning_balance_in_currency_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_financial_period_isSet = false;
    m_financial_period_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_ledger_isSet = false;
    m_ledger_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_period_to_date_credit_isSet = false;
    m_period_to_date_credit_isValid = false;

    m_period_to_date_credit_in_currency_isSet = false;
    m_period_to_date_credit_in_currency_isValid = false;

    m_period_to_date_debit_isSet = false;
    m_period_to_date_debit_isValid = false;

    m_period_to_date_debit_in_currency_isSet = false;
    m_period_to_date_debit_in_currency_isValid = false;

    m_sub_account_cd_isSet = false;
    m_sub_account_cd_isValid = false;

    m_subaccount_id_isSet = false;
    m_subaccount_id_isValid = false;

    m_year_closed_isSet = false;
    m_year_closed_isValid = false;

    m_year_to_date_balance_isSet = false;
    m_year_to_date_balance_isValid = false;

    m_year_to_date_balance_in_currency_isSet = false;
    m_year_to_date_balance_in_currency_isValid = false;
}

void OAIGeneralLedgerBalanceDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeneralLedgerBalanceDto::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_balance_type_isValid = ::OpenAPI::fromJsonValue(m_balance_type, json[QString("balanceType")]);
    m_balance_type_isSet = !json[QString("balanceType")].isNull() && m_balance_type_isValid;

    m_beginning_balance_isValid = ::OpenAPI::fromJsonValue(m_beginning_balance, json[QString("beginningBalance")]);
    m_beginning_balance_isSet = !json[QString("beginningBalance")].isNull() && m_beginning_balance_isValid;

    m_beginning_balance_in_currency_isValid = ::OpenAPI::fromJsonValue(m_beginning_balance_in_currency, json[QString("beginningBalanceInCurrency")]);
    m_beginning_balance_in_currency_isSet = !json[QString("beginningBalanceInCurrency")].isNull() && m_beginning_balance_in_currency_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_financial_period_isValid = ::OpenAPI::fromJsonValue(m_financial_period, json[QString("financialPeriod")]);
    m_financial_period_isSet = !json[QString("financialPeriod")].isNull() && m_financial_period_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_ledger_isValid = ::OpenAPI::fromJsonValue(m_ledger, json[QString("ledger")]);
    m_ledger_isSet = !json[QString("ledger")].isNull() && m_ledger_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_period_to_date_credit_isValid = ::OpenAPI::fromJsonValue(m_period_to_date_credit, json[QString("periodToDateCredit")]);
    m_period_to_date_credit_isSet = !json[QString("periodToDateCredit")].isNull() && m_period_to_date_credit_isValid;

    m_period_to_date_credit_in_currency_isValid = ::OpenAPI::fromJsonValue(m_period_to_date_credit_in_currency, json[QString("periodToDateCreditInCurrency")]);
    m_period_to_date_credit_in_currency_isSet = !json[QString("periodToDateCreditInCurrency")].isNull() && m_period_to_date_credit_in_currency_isValid;

    m_period_to_date_debit_isValid = ::OpenAPI::fromJsonValue(m_period_to_date_debit, json[QString("periodToDateDebit")]);
    m_period_to_date_debit_isSet = !json[QString("periodToDateDebit")].isNull() && m_period_to_date_debit_isValid;

    m_period_to_date_debit_in_currency_isValid = ::OpenAPI::fromJsonValue(m_period_to_date_debit_in_currency, json[QString("periodToDateDebitInCurrency")]);
    m_period_to_date_debit_in_currency_isSet = !json[QString("periodToDateDebitInCurrency")].isNull() && m_period_to_date_debit_in_currency_isValid;

    m_sub_account_cd_isValid = ::OpenAPI::fromJsonValue(m_sub_account_cd, json[QString("subAccountCd")]);
    m_sub_account_cd_isSet = !json[QString("subAccountCd")].isNull() && m_sub_account_cd_isValid;

    m_subaccount_id_isValid = ::OpenAPI::fromJsonValue(m_subaccount_id, json[QString("subaccountId")]);
    m_subaccount_id_isSet = !json[QString("subaccountId")].isNull() && m_subaccount_id_isValid;

    m_year_closed_isValid = ::OpenAPI::fromJsonValue(m_year_closed, json[QString("yearClosed")]);
    m_year_closed_isSet = !json[QString("yearClosed")].isNull() && m_year_closed_isValid;

    m_year_to_date_balance_isValid = ::OpenAPI::fromJsonValue(m_year_to_date_balance, json[QString("yearToDateBalance")]);
    m_year_to_date_balance_isSet = !json[QString("yearToDateBalance")].isNull() && m_year_to_date_balance_isValid;

    m_year_to_date_balance_in_currency_isValid = ::OpenAPI::fromJsonValue(m_year_to_date_balance_in_currency, json[QString("yearToDateBalanceInCurrency")]);
    m_year_to_date_balance_in_currency_isSet = !json[QString("yearToDateBalanceInCurrency")].isNull() && m_year_to_date_balance_in_currency_isValid;
}

QString OAIGeneralLedgerBalanceDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeneralLedgerBalanceDto::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_balance_type_isSet) {
        obj.insert(QString("balanceType"), ::OpenAPI::toJsonValue(m_balance_type));
    }
    if (m_beginning_balance_isSet) {
        obj.insert(QString("beginningBalance"), ::OpenAPI::toJsonValue(m_beginning_balance));
    }
    if (m_beginning_balance_in_currency_isSet) {
        obj.insert(QString("beginningBalanceInCurrency"), ::OpenAPI::toJsonValue(m_beginning_balance_in_currency));
    }
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_currency_id_isSet) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_financial_period_isSet) {
        obj.insert(QString("financialPeriod"), ::OpenAPI::toJsonValue(m_financial_period));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_ledger.isSet()) {
        obj.insert(QString("ledger"), ::OpenAPI::toJsonValue(m_ledger));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_period_to_date_credit_isSet) {
        obj.insert(QString("periodToDateCredit"), ::OpenAPI::toJsonValue(m_period_to_date_credit));
    }
    if (m_period_to_date_credit_in_currency_isSet) {
        obj.insert(QString("periodToDateCreditInCurrency"), ::OpenAPI::toJsonValue(m_period_to_date_credit_in_currency));
    }
    if (m_period_to_date_debit_isSet) {
        obj.insert(QString("periodToDateDebit"), ::OpenAPI::toJsonValue(m_period_to_date_debit));
    }
    if (m_period_to_date_debit_in_currency_isSet) {
        obj.insert(QString("periodToDateDebitInCurrency"), ::OpenAPI::toJsonValue(m_period_to_date_debit_in_currency));
    }
    if (m_sub_account_cd_isSet) {
        obj.insert(QString("subAccountCd"), ::OpenAPI::toJsonValue(m_sub_account_cd));
    }
    if (m_subaccount_id_isSet) {
        obj.insert(QString("subaccountId"), ::OpenAPI::toJsonValue(m_subaccount_id));
    }
    if (m_year_closed_isSet) {
        obj.insert(QString("yearClosed"), ::OpenAPI::toJsonValue(m_year_closed));
    }
    if (m_year_to_date_balance_isSet) {
        obj.insert(QString("yearToDateBalance"), ::OpenAPI::toJsonValue(m_year_to_date_balance));
    }
    if (m_year_to_date_balance_in_currency_isSet) {
        obj.insert(QString("yearToDateBalanceInCurrency"), ::OpenAPI::toJsonValue(m_year_to_date_balance_in_currency));
    }
    return obj;
}

OAIAccountNumberDescriptionDto OAIGeneralLedgerBalanceDto::getAccount() const {
    return m_account;
}
void OAIGeneralLedgerBalanceDto::setAccount(const OAIAccountNumberDescriptionDto &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIGeneralLedgerBalanceDto::is_account_Set() const{
    return m_account_isSet;
}

bool OAIGeneralLedgerBalanceDto::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIGeneralLedgerBalanceDto::getBalanceType() const {
    return m_balance_type;
}
void OAIGeneralLedgerBalanceDto::setBalanceType(const QString &balance_type) {
    m_balance_type = balance_type;
    m_balance_type_isSet = true;
}

bool OAIGeneralLedgerBalanceDto::is_balance_type_Set() const{
    return m_balance_type_isSet;
}

bool OAIGeneralLedgerBalanceDto::is_balance_type_Valid() const{
    return m_balance_type_isValid;
}

double OAIGeneralLedgerBalanceDto::getBeginningBalance() const {
    return m_beginning_balance;
}
void OAIGeneralLedgerBalanceDto::setBeginningBalance(const double &beginning_balance) {
    m_beginning_balance = beginning_balance;
    m_beginning_balance_isSet = true;
}

bool OAIGeneralLedgerBalanceDto::is_beginning_balance_Set() const{
    return m_beginning_balance_isSet;
}

bool OAIGeneralLedgerBalanceDto::is_beginning_balance_Valid() const{
    return m_beginning_balance_isValid;
}

double OAIGeneralLedgerBalanceDto::getBeginningBalanceInCurrency() const {
    return m_beginning_balance_in_currency;
}
void OAIGeneralLedgerBalanceDto::setBeginningBalanceInCurrency(const double &beginning_balance_in_currency) {
    m_beginning_balance_in_currency = beginning_balance_in_currency;
    m_beginning_balance_in_currency_isSet = true;
}

bool OAIGeneralLedgerBalanceDto::is_beginning_balance_in_currency_Set() const{
    return m_beginning_balance_in_currency_isSet;
}

bool OAIGeneralLedgerBalanceDto::is_beginning_balance_in_currency_Valid() const{
    return m_beginning_balance_in_currency_isValid;
}

OAIBranchNumberDto OAIGeneralLedgerBalanceDto::getBranch() const {
    return m_branch;
}
void OAIGeneralLedgerBalanceDto::setBranch(const OAIBranchNumberDto &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIGeneralLedgerBalanceDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIGeneralLedgerBalanceDto::is_branch_Valid() const{
    return m_branch_isValid;
}

QString OAIGeneralLedgerBalanceDto::getCurrencyId() const {
    return m_currency_id;
}
void OAIGeneralLedgerBalanceDto::setCurrencyId(const QString &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAIGeneralLedgerBalanceDto::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAIGeneralLedgerBalanceDto::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

QString OAIGeneralLedgerBalanceDto::getErrorInfo() const {
    return m_error_info;
}
void OAIGeneralLedgerBalanceDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIGeneralLedgerBalanceDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIGeneralLedgerBalanceDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

QString OAIGeneralLedgerBalanceDto::getFinancialPeriod() const {
    return m_financial_period;
}
void OAIGeneralLedgerBalanceDto::setFinancialPeriod(const QString &financial_period) {
    m_financial_period = financial_period;
    m_financial_period_isSet = true;
}

bool OAIGeneralLedgerBalanceDto::is_financial_period_Set() const{
    return m_financial_period_isSet;
}

bool OAIGeneralLedgerBalanceDto::is_financial_period_Valid() const{
    return m_financial_period_isValid;
}

QDateTime OAIGeneralLedgerBalanceDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIGeneralLedgerBalanceDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIGeneralLedgerBalanceDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIGeneralLedgerBalanceDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAILedgerDescriptionDto OAIGeneralLedgerBalanceDto::getLedger() const {
    return m_ledger;
}
void OAIGeneralLedgerBalanceDto::setLedger(const OAILedgerDescriptionDto &ledger) {
    m_ledger = ledger;
    m_ledger_isSet = true;
}

bool OAIGeneralLedgerBalanceDto::is_ledger_Set() const{
    return m_ledger_isSet;
}

bool OAIGeneralLedgerBalanceDto::is_ledger_Valid() const{
    return m_ledger_isValid;
}

OAIMetadataDto OAIGeneralLedgerBalanceDto::getMetadata() const {
    return m_metadata;
}
void OAIGeneralLedgerBalanceDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGeneralLedgerBalanceDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGeneralLedgerBalanceDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

double OAIGeneralLedgerBalanceDto::getPeriodToDateCredit() const {
    return m_period_to_date_credit;
}
void OAIGeneralLedgerBalanceDto::setPeriodToDateCredit(const double &period_to_date_credit) {
    m_period_to_date_credit = period_to_date_credit;
    m_period_to_date_credit_isSet = true;
}

bool OAIGeneralLedgerBalanceDto::is_period_to_date_credit_Set() const{
    return m_period_to_date_credit_isSet;
}

bool OAIGeneralLedgerBalanceDto::is_period_to_date_credit_Valid() const{
    return m_period_to_date_credit_isValid;
}

double OAIGeneralLedgerBalanceDto::getPeriodToDateCreditInCurrency() const {
    return m_period_to_date_credit_in_currency;
}
void OAIGeneralLedgerBalanceDto::setPeriodToDateCreditInCurrency(const double &period_to_date_credit_in_currency) {
    m_period_to_date_credit_in_currency = period_to_date_credit_in_currency;
    m_period_to_date_credit_in_currency_isSet = true;
}

bool OAIGeneralLedgerBalanceDto::is_period_to_date_credit_in_currency_Set() const{
    return m_period_to_date_credit_in_currency_isSet;
}

bool OAIGeneralLedgerBalanceDto::is_period_to_date_credit_in_currency_Valid() const{
    return m_period_to_date_credit_in_currency_isValid;
}

double OAIGeneralLedgerBalanceDto::getPeriodToDateDebit() const {
    return m_period_to_date_debit;
}
void OAIGeneralLedgerBalanceDto::setPeriodToDateDebit(const double &period_to_date_debit) {
    m_period_to_date_debit = period_to_date_debit;
    m_period_to_date_debit_isSet = true;
}

bool OAIGeneralLedgerBalanceDto::is_period_to_date_debit_Set() const{
    return m_period_to_date_debit_isSet;
}

bool OAIGeneralLedgerBalanceDto::is_period_to_date_debit_Valid() const{
    return m_period_to_date_debit_isValid;
}

double OAIGeneralLedgerBalanceDto::getPeriodToDateDebitInCurrency() const {
    return m_period_to_date_debit_in_currency;
}
void OAIGeneralLedgerBalanceDto::setPeriodToDateDebitInCurrency(const double &period_to_date_debit_in_currency) {
    m_period_to_date_debit_in_currency = period_to_date_debit_in_currency;
    m_period_to_date_debit_in_currency_isSet = true;
}

bool OAIGeneralLedgerBalanceDto::is_period_to_date_debit_in_currency_Set() const{
    return m_period_to_date_debit_in_currency_isSet;
}

bool OAIGeneralLedgerBalanceDto::is_period_to_date_debit_in_currency_Valid() const{
    return m_period_to_date_debit_in_currency_isValid;
}

QString OAIGeneralLedgerBalanceDto::getSubAccountCd() const {
    return m_sub_account_cd;
}
void OAIGeneralLedgerBalanceDto::setSubAccountCd(const QString &sub_account_cd) {
    m_sub_account_cd = sub_account_cd;
    m_sub_account_cd_isSet = true;
}

bool OAIGeneralLedgerBalanceDto::is_sub_account_cd_Set() const{
    return m_sub_account_cd_isSet;
}

bool OAIGeneralLedgerBalanceDto::is_sub_account_cd_Valid() const{
    return m_sub_account_cd_isValid;
}

QString OAIGeneralLedgerBalanceDto::getSubaccountId() const {
    return m_subaccount_id;
}
void OAIGeneralLedgerBalanceDto::setSubaccountId(const QString &subaccount_id) {
    m_subaccount_id = subaccount_id;
    m_subaccount_id_isSet = true;
}

bool OAIGeneralLedgerBalanceDto::is_subaccount_id_Set() const{
    return m_subaccount_id_isSet;
}

bool OAIGeneralLedgerBalanceDto::is_subaccount_id_Valid() const{
    return m_subaccount_id_isValid;
}

bool OAIGeneralLedgerBalanceDto::isYearClosed() const {
    return m_year_closed;
}
void OAIGeneralLedgerBalanceDto::setYearClosed(const bool &year_closed) {
    m_year_closed = year_closed;
    m_year_closed_isSet = true;
}

bool OAIGeneralLedgerBalanceDto::is_year_closed_Set() const{
    return m_year_closed_isSet;
}

bool OAIGeneralLedgerBalanceDto::is_year_closed_Valid() const{
    return m_year_closed_isValid;
}

double OAIGeneralLedgerBalanceDto::getYearToDateBalance() const {
    return m_year_to_date_balance;
}
void OAIGeneralLedgerBalanceDto::setYearToDateBalance(const double &year_to_date_balance) {
    m_year_to_date_balance = year_to_date_balance;
    m_year_to_date_balance_isSet = true;
}

bool OAIGeneralLedgerBalanceDto::is_year_to_date_balance_Set() const{
    return m_year_to_date_balance_isSet;
}

bool OAIGeneralLedgerBalanceDto::is_year_to_date_balance_Valid() const{
    return m_year_to_date_balance_isValid;
}

double OAIGeneralLedgerBalanceDto::getYearToDateBalanceInCurrency() const {
    return m_year_to_date_balance_in_currency;
}
void OAIGeneralLedgerBalanceDto::setYearToDateBalanceInCurrency(const double &year_to_date_balance_in_currency) {
    m_year_to_date_balance_in_currency = year_to_date_balance_in_currency;
    m_year_to_date_balance_in_currency_isSet = true;
}

bool OAIGeneralLedgerBalanceDto::is_year_to_date_balance_in_currency_Set() const{
    return m_year_to_date_balance_in_currency_isSet;
}

bool OAIGeneralLedgerBalanceDto::is_year_to_date_balance_in_currency_Valid() const{
    return m_year_to_date_balance_in_currency_isValid;
}

bool OAIGeneralLedgerBalanceDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beginning_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beginning_balance_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_financial_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ledger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_to_date_credit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_to_date_credit_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_to_date_debit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_to_date_debit_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_account_cd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_to_date_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_to_date_balance_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeneralLedgerBalanceDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
