/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFixedAssetTransactionQueryParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFixedAssetTransactionQueryParameters::OAIFixedAssetTransactionQueryParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFixedAssetTransactionQueryParameters::OAIFixedAssetTransactionQueryParameters() {
    this->initializeModel();
}

OAIFixedAssetTransactionQueryParameters::~OAIFixedAssetTransactionQueryParameters() {}

void OAIFixedAssetTransactionQueryParameters::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_asset_id_isSet = false;
    m_asset_id_isValid = false;

    m_book_id_isSet = false;
    m_book_id_isValid = false;

    m_from_period_isSet = false;
    m_from_period_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_last_modified_date_time_condition_isSet = false;
    m_last_modified_date_time_condition_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_ref_no_isSet = false;
    m_ref_no_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_sub_account_id_isSet = false;
    m_sub_account_id_isValid = false;

    m_to_period_isSet = false;
    m_to_period_isValid = false;

    m_transaction_from_date_isSet = false;
    m_transaction_from_date_isValid = false;

    m_transaction_to_date_isSet = false;
    m_transaction_to_date_isValid = false;

    m_transaction_type_isSet = false;
    m_transaction_type_isValid = false;
}

void OAIFixedAssetTransactionQueryParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFixedAssetTransactionQueryParameters::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountID")]);
    m_account_id_isSet = !json[QString("accountID")].isNull() && m_account_id_isValid;

    m_asset_id_isValid = ::OpenAPI::fromJsonValue(m_asset_id, json[QString("assetID")]);
    m_asset_id_isSet = !json[QString("assetID")].isNull() && m_asset_id_isValid;

    m_book_id_isValid = ::OpenAPI::fromJsonValue(m_book_id, json[QString("bookID")]);
    m_book_id_isSet = !json[QString("bookID")].isNull() && m_book_id_isValid;

    m_from_period_isValid = ::OpenAPI::fromJsonValue(m_from_period, json[QString("fromPeriod")]);
    m_from_period_isSet = !json[QString("fromPeriod")].isNull() && m_from_period_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_last_modified_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time_condition, json[QString("lastModifiedDateTimeCondition")]);
    m_last_modified_date_time_condition_isSet = !json[QString("lastModifiedDateTimeCondition")].isNull() && m_last_modified_date_time_condition_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("pageNumber")]);
    m_page_number_isSet = !json[QString("pageNumber")].isNull() && m_page_number_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_ref_no_isValid = ::OpenAPI::fromJsonValue(m_ref_no, json[QString("refNo")]);
    m_ref_no_isSet = !json[QString("refNo")].isNull() && m_ref_no_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_sub_account_id_isValid = ::OpenAPI::fromJsonValue(m_sub_account_id, json[QString("subAccountID")]);
    m_sub_account_id_isSet = !json[QString("subAccountID")].isNull() && m_sub_account_id_isValid;

    m_to_period_isValid = ::OpenAPI::fromJsonValue(m_to_period, json[QString("toPeriod")]);
    m_to_period_isSet = !json[QString("toPeriod")].isNull() && m_to_period_isValid;

    m_transaction_from_date_isValid = ::OpenAPI::fromJsonValue(m_transaction_from_date, json[QString("transactionFromDate")]);
    m_transaction_from_date_isSet = !json[QString("transactionFromDate")].isNull() && m_transaction_from_date_isValid;

    m_transaction_to_date_isValid = ::OpenAPI::fromJsonValue(m_transaction_to_date, json[QString("transactionToDate")]);
    m_transaction_to_date_isSet = !json[QString("transactionToDate")].isNull() && m_transaction_to_date_isValid;

    m_transaction_type_isValid = ::OpenAPI::fromJsonValue(m_transaction_type, json[QString("transactionType")]);
    m_transaction_type_isSet = !json[QString("transactionType")].isNull() && m_transaction_type_isValid;
}

QString OAIFixedAssetTransactionQueryParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFixedAssetTransactionQueryParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountID"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_asset_id_isSet) {
        obj.insert(QString("assetID"), ::OpenAPI::toJsonValue(m_asset_id));
    }
    if (m_book_id_isSet) {
        obj.insert(QString("bookID"), ::OpenAPI::toJsonValue(m_book_id));
    }
    if (m_from_period_isSet) {
        obj.insert(QString("fromPeriod"), ::OpenAPI::toJsonValue(m_from_period));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_last_modified_date_time_condition_isSet) {
        obj.insert(QString("lastModifiedDateTimeCondition"), ::OpenAPI::toJsonValue(m_last_modified_date_time_condition));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("pageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_ref_no_isSet) {
        obj.insert(QString("refNo"), ::OpenAPI::toJsonValue(m_ref_no));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_sub_account_id_isSet) {
        obj.insert(QString("subAccountID"), ::OpenAPI::toJsonValue(m_sub_account_id));
    }
    if (m_to_period_isSet) {
        obj.insert(QString("toPeriod"), ::OpenAPI::toJsonValue(m_to_period));
    }
    if (m_transaction_from_date_isSet) {
        obj.insert(QString("transactionFromDate"), ::OpenAPI::toJsonValue(m_transaction_from_date));
    }
    if (m_transaction_to_date_isSet) {
        obj.insert(QString("transactionToDate"), ::OpenAPI::toJsonValue(m_transaction_to_date));
    }
    if (m_transaction_type_isSet) {
        obj.insert(QString("transactionType"), ::OpenAPI::toJsonValue(m_transaction_type));
    }
    return obj;
}

QString OAIFixedAssetTransactionQueryParameters::getAccountId() const {
    return m_account_id;
}
void OAIFixedAssetTransactionQueryParameters::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIFixedAssetTransactionQueryParameters::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIFixedAssetTransactionQueryParameters::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIFixedAssetTransactionQueryParameters::getAssetId() const {
    return m_asset_id;
}
void OAIFixedAssetTransactionQueryParameters::setAssetId(const QString &asset_id) {
    m_asset_id = asset_id;
    m_asset_id_isSet = true;
}

bool OAIFixedAssetTransactionQueryParameters::is_asset_id_Set() const{
    return m_asset_id_isSet;
}

bool OAIFixedAssetTransactionQueryParameters::is_asset_id_Valid() const{
    return m_asset_id_isValid;
}

QString OAIFixedAssetTransactionQueryParameters::getBookId() const {
    return m_book_id;
}
void OAIFixedAssetTransactionQueryParameters::setBookId(const QString &book_id) {
    m_book_id = book_id;
    m_book_id_isSet = true;
}

bool OAIFixedAssetTransactionQueryParameters::is_book_id_Set() const{
    return m_book_id_isSet;
}

bool OAIFixedAssetTransactionQueryParameters::is_book_id_Valid() const{
    return m_book_id_isValid;
}

QString OAIFixedAssetTransactionQueryParameters::getFromPeriod() const {
    return m_from_period;
}
void OAIFixedAssetTransactionQueryParameters::setFromPeriod(const QString &from_period) {
    m_from_period = from_period;
    m_from_period_isSet = true;
}

bool OAIFixedAssetTransactionQueryParameters::is_from_period_Set() const{
    return m_from_period_isSet;
}

bool OAIFixedAssetTransactionQueryParameters::is_from_period_Valid() const{
    return m_from_period_isValid;
}

QString OAIFixedAssetTransactionQueryParameters::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIFixedAssetTransactionQueryParameters::setLastModifiedDateTime(const QString &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIFixedAssetTransactionQueryParameters::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIFixedAssetTransactionQueryParameters::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QString OAIFixedAssetTransactionQueryParameters::getLastModifiedDateTimeCondition() const {
    return m_last_modified_date_time_condition;
}
void OAIFixedAssetTransactionQueryParameters::setLastModifiedDateTimeCondition(const QString &last_modified_date_time_condition) {
    m_last_modified_date_time_condition = last_modified_date_time_condition;
    m_last_modified_date_time_condition_isSet = true;
}

bool OAIFixedAssetTransactionQueryParameters::is_last_modified_date_time_condition_Set() const{
    return m_last_modified_date_time_condition_isSet;
}

bool OAIFixedAssetTransactionQueryParameters::is_last_modified_date_time_condition_Valid() const{
    return m_last_modified_date_time_condition_isValid;
}

qint32 OAIFixedAssetTransactionQueryParameters::getPageNumber() const {
    return m_page_number;
}
void OAIFixedAssetTransactionQueryParameters::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIFixedAssetTransactionQueryParameters::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIFixedAssetTransactionQueryParameters::is_page_number_Valid() const{
    return m_page_number_isValid;
}

qint32 OAIFixedAssetTransactionQueryParameters::getPageSize() const {
    return m_page_size;
}
void OAIFixedAssetTransactionQueryParameters::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIFixedAssetTransactionQueryParameters::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIFixedAssetTransactionQueryParameters::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIFixedAssetTransactionQueryParameters::getRefNo() const {
    return m_ref_no;
}
void OAIFixedAssetTransactionQueryParameters::setRefNo(const QString &ref_no) {
    m_ref_no = ref_no;
    m_ref_no_isSet = true;
}

bool OAIFixedAssetTransactionQueryParameters::is_ref_no_Set() const{
    return m_ref_no_isSet;
}

bool OAIFixedAssetTransactionQueryParameters::is_ref_no_Valid() const{
    return m_ref_no_isValid;
}

QString OAIFixedAssetTransactionQueryParameters::getStatus() const {
    return m_status;
}
void OAIFixedAssetTransactionQueryParameters::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFixedAssetTransactionQueryParameters::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFixedAssetTransactionQueryParameters::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIFixedAssetTransactionQueryParameters::getSubAccountId() const {
    return m_sub_account_id;
}
void OAIFixedAssetTransactionQueryParameters::setSubAccountId(const QString &sub_account_id) {
    m_sub_account_id = sub_account_id;
    m_sub_account_id_isSet = true;
}

bool OAIFixedAssetTransactionQueryParameters::is_sub_account_id_Set() const{
    return m_sub_account_id_isSet;
}

bool OAIFixedAssetTransactionQueryParameters::is_sub_account_id_Valid() const{
    return m_sub_account_id_isValid;
}

QString OAIFixedAssetTransactionQueryParameters::getToPeriod() const {
    return m_to_period;
}
void OAIFixedAssetTransactionQueryParameters::setToPeriod(const QString &to_period) {
    m_to_period = to_period;
    m_to_period_isSet = true;
}

bool OAIFixedAssetTransactionQueryParameters::is_to_period_Set() const{
    return m_to_period_isSet;
}

bool OAIFixedAssetTransactionQueryParameters::is_to_period_Valid() const{
    return m_to_period_isValid;
}

QString OAIFixedAssetTransactionQueryParameters::getTransactionFromDate() const {
    return m_transaction_from_date;
}
void OAIFixedAssetTransactionQueryParameters::setTransactionFromDate(const QString &transaction_from_date) {
    m_transaction_from_date = transaction_from_date;
    m_transaction_from_date_isSet = true;
}

bool OAIFixedAssetTransactionQueryParameters::is_transaction_from_date_Set() const{
    return m_transaction_from_date_isSet;
}

bool OAIFixedAssetTransactionQueryParameters::is_transaction_from_date_Valid() const{
    return m_transaction_from_date_isValid;
}

QString OAIFixedAssetTransactionQueryParameters::getTransactionToDate() const {
    return m_transaction_to_date;
}
void OAIFixedAssetTransactionQueryParameters::setTransactionToDate(const QString &transaction_to_date) {
    m_transaction_to_date = transaction_to_date;
    m_transaction_to_date_isSet = true;
}

bool OAIFixedAssetTransactionQueryParameters::is_transaction_to_date_Set() const{
    return m_transaction_to_date_isSet;
}

bool OAIFixedAssetTransactionQueryParameters::is_transaction_to_date_Valid() const{
    return m_transaction_to_date_isValid;
}

QString OAIFixedAssetTransactionQueryParameters::getTransactionType() const {
    return m_transaction_type;
}
void OAIFixedAssetTransactionQueryParameters::setTransactionType(const QString &transaction_type) {
    m_transaction_type = transaction_type;
    m_transaction_type_isSet = true;
}

bool OAIFixedAssetTransactionQueryParameters::is_transaction_type_Set() const{
    return m_transaction_type_isSet;
}

bool OAIFixedAssetTransactionQueryParameters::is_transaction_type_Valid() const{
    return m_transaction_type_isValid;
}

bool OAIFixedAssetTransactionQueryParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_book_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_from_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_to_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFixedAssetTransactionQueryParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
