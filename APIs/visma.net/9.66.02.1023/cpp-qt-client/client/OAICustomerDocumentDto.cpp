/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerDocumentDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerDocumentDto::OAICustomerDocumentDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerDocumentDto::OAICustomerDocumentDto() {
    this->initializeModel();
}

OAICustomerDocumentDto::~OAICustomerDocumentDto() {}

void OAICustomerDocumentDto::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_amount_in_currency_isSet = false;
    m_amount_in_currency_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_balance_in_currency_isSet = false;
    m_balance_in_currency_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_cash_account_isSet = false;
    m_cash_account_isValid = false;

    m_cash_discount_isSet = false;
    m_cash_discount_isValid = false;

    m_cash_discount_in_currency_isSet = false;
    m_cash_discount_in_currency_isValid = false;

    m_closed_financial_period_isSet = false;
    m_closed_financial_period_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_customer_project_isSet = false;
    m_customer_project_isValid = false;

    m_customer_ref_number_isSet = false;
    m_customer_ref_number_isValid = false;

    m_document_date_isSet = false;
    m_document_date_isValid = false;

    m_document_due_date_isSet = false;
    m_document_due_date_isValid = false;

    m_document_type_isSet = false;
    m_document_type_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_financial_period_isSet = false;
    m_financial_period_isValid = false;

    m_invoice_text_isSet = false;
    m_invoice_text_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_orig_invoice_date_isSet = false;
    m_orig_invoice_date_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_post_period_isSet = false;
    m_post_period_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_reference_number_isSet = false;
    m_reference_number_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subaccount_isSet = false;
    m_subaccount_isValid = false;

    m_vat_total_isSet = false;
    m_vat_total_isValid = false;

    m_vat_total_in_currency_isSet = false;
    m_vat_total_in_currency_isValid = false;
}

void OAICustomerDocumentDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerDocumentDto::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_amount_in_currency_isValid = ::OpenAPI::fromJsonValue(m_amount_in_currency, json[QString("amountInCurrency")]);
    m_amount_in_currency_isSet = !json[QString("amountInCurrency")].isNull() && m_amount_in_currency_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_balance_in_currency_isValid = ::OpenAPI::fromJsonValue(m_balance_in_currency, json[QString("balanceInCurrency")]);
    m_balance_in_currency_isSet = !json[QString("balanceInCurrency")].isNull() && m_balance_in_currency_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_cash_account_isValid = ::OpenAPI::fromJsonValue(m_cash_account, json[QString("cashAccount")]);
    m_cash_account_isSet = !json[QString("cashAccount")].isNull() && m_cash_account_isValid;

    m_cash_discount_isValid = ::OpenAPI::fromJsonValue(m_cash_discount, json[QString("cashDiscount")]);
    m_cash_discount_isSet = !json[QString("cashDiscount")].isNull() && m_cash_discount_isValid;

    m_cash_discount_in_currency_isValid = ::OpenAPI::fromJsonValue(m_cash_discount_in_currency, json[QString("cashDiscountInCurrency")]);
    m_cash_discount_in_currency_isSet = !json[QString("cashDiscountInCurrency")].isNull() && m_cash_discount_in_currency_isValid;

    m_closed_financial_period_isValid = ::OpenAPI::fromJsonValue(m_closed_financial_period, json[QString("closedFinancialPeriod")]);
    m_closed_financial_period_isSet = !json[QString("closedFinancialPeriod")].isNull() && m_closed_financial_period_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_customer_project_isValid = ::OpenAPI::fromJsonValue(m_customer_project, json[QString("customerProject")]);
    m_customer_project_isSet = !json[QString("customerProject")].isNull() && m_customer_project_isValid;

    m_customer_ref_number_isValid = ::OpenAPI::fromJsonValue(m_customer_ref_number, json[QString("customerRefNumber")]);
    m_customer_ref_number_isSet = !json[QString("customerRefNumber")].isNull() && m_customer_ref_number_isValid;

    m_document_date_isValid = ::OpenAPI::fromJsonValue(m_document_date, json[QString("documentDate")]);
    m_document_date_isSet = !json[QString("documentDate")].isNull() && m_document_date_isValid;

    m_document_due_date_isValid = ::OpenAPI::fromJsonValue(m_document_due_date, json[QString("documentDueDate")]);
    m_document_due_date_isSet = !json[QString("documentDueDate")].isNull() && m_document_due_date_isValid;

    m_document_type_isValid = ::OpenAPI::fromJsonValue(m_document_type, json[QString("documentType")]);
    m_document_type_isSet = !json[QString("documentType")].isNull() && m_document_type_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_financial_period_isValid = ::OpenAPI::fromJsonValue(m_financial_period, json[QString("financialPeriod")]);
    m_financial_period_isSet = !json[QString("financialPeriod")].isNull() && m_financial_period_isValid;

    m_invoice_text_isValid = ::OpenAPI::fromJsonValue(m_invoice_text, json[QString("invoiceText")]);
    m_invoice_text_isSet = !json[QString("invoiceText")].isNull() && m_invoice_text_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_orig_invoice_date_isValid = ::OpenAPI::fromJsonValue(m_orig_invoice_date, json[QString("origInvoiceDate")]);
    m_orig_invoice_date_isSet = !json[QString("origInvoiceDate")].isNull() && m_orig_invoice_date_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_post_period_isValid = ::OpenAPI::fromJsonValue(m_post_period, json[QString("postPeriod")]);
    m_post_period_isSet = !json[QString("postPeriod")].isNull() && m_post_period_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_reference_number_isValid = ::OpenAPI::fromJsonValue(m_reference_number, json[QString("referenceNumber")]);
    m_reference_number_isSet = !json[QString("referenceNumber")].isNull() && m_reference_number_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subaccount_isValid = ::OpenAPI::fromJsonValue(m_subaccount, json[QString("subaccount")]);
    m_subaccount_isSet = !json[QString("subaccount")].isNull() && m_subaccount_isValid;

    m_vat_total_isValid = ::OpenAPI::fromJsonValue(m_vat_total, json[QString("vatTotal")]);
    m_vat_total_isSet = !json[QString("vatTotal")].isNull() && m_vat_total_isValid;

    m_vat_total_in_currency_isValid = ::OpenAPI::fromJsonValue(m_vat_total_in_currency, json[QString("vatTotalInCurrency")]);
    m_vat_total_in_currency_isSet = !json[QString("vatTotalInCurrency")].isNull() && m_vat_total_in_currency_isValid;
}

QString OAICustomerDocumentDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerDocumentDto::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_amount_in_currency_isSet) {
        obj.insert(QString("amountInCurrency"), ::OpenAPI::toJsonValue(m_amount_in_currency));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_balance_in_currency_isSet) {
        obj.insert(QString("balanceInCurrency"), ::OpenAPI::toJsonValue(m_balance_in_currency));
    }
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_cash_account_isSet) {
        obj.insert(QString("cashAccount"), ::OpenAPI::toJsonValue(m_cash_account));
    }
    if (m_cash_discount_isSet) {
        obj.insert(QString("cashDiscount"), ::OpenAPI::toJsonValue(m_cash_discount));
    }
    if (m_cash_discount_in_currency_isSet) {
        obj.insert(QString("cashDiscountInCurrency"), ::OpenAPI::toJsonValue(m_cash_discount_in_currency));
    }
    if (m_closed_financial_period_isSet) {
        obj.insert(QString("closedFinancialPeriod"), ::OpenAPI::toJsonValue(m_closed_financial_period));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_currency_id_isSet) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_customer_project_isSet) {
        obj.insert(QString("customerProject"), ::OpenAPI::toJsonValue(m_customer_project));
    }
    if (m_customer_ref_number_isSet) {
        obj.insert(QString("customerRefNumber"), ::OpenAPI::toJsonValue(m_customer_ref_number));
    }
    if (m_document_date_isSet) {
        obj.insert(QString("documentDate"), ::OpenAPI::toJsonValue(m_document_date));
    }
    if (m_document_due_date_isSet) {
        obj.insert(QString("documentDueDate"), ::OpenAPI::toJsonValue(m_document_due_date));
    }
    if (m_document_type_isSet) {
        obj.insert(QString("documentType"), ::OpenAPI::toJsonValue(m_document_type));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_financial_period_isSet) {
        obj.insert(QString("financialPeriod"), ::OpenAPI::toJsonValue(m_financial_period));
    }
    if (m_invoice_text_isSet) {
        obj.insert(QString("invoiceText"), ::OpenAPI::toJsonValue(m_invoice_text));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_orig_invoice_date_isSet) {
        obj.insert(QString("origInvoiceDate"), ::OpenAPI::toJsonValue(m_orig_invoice_date));
    }
    if (m_payment_method.isSet()) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_post_period_isSet) {
        obj.insert(QString("postPeriod"), ::OpenAPI::toJsonValue(m_post_period));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_reference_number_isSet) {
        obj.insert(QString("referenceNumber"), ::OpenAPI::toJsonValue(m_reference_number));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subaccount.isSet()) {
        obj.insert(QString("subaccount"), ::OpenAPI::toJsonValue(m_subaccount));
    }
    if (m_vat_total_isSet) {
        obj.insert(QString("vatTotal"), ::OpenAPI::toJsonValue(m_vat_total));
    }
    if (m_vat_total_in_currency_isSet) {
        obj.insert(QString("vatTotalInCurrency"), ::OpenAPI::toJsonValue(m_vat_total_in_currency));
    }
    return obj;
}

OAIAccountInCustomerDocumentDto OAICustomerDocumentDto::getAccount() const {
    return m_account;
}
void OAICustomerDocumentDto::setAccount(const OAIAccountInCustomerDocumentDto &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAICustomerDocumentDto::is_account_Set() const{
    return m_account_isSet;
}

bool OAICustomerDocumentDto::is_account_Valid() const{
    return m_account_isValid;
}

double OAICustomerDocumentDto::getAmount() const {
    return m_amount;
}
void OAICustomerDocumentDto::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAICustomerDocumentDto::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAICustomerDocumentDto::is_amount_Valid() const{
    return m_amount_isValid;
}

double OAICustomerDocumentDto::getAmountInCurrency() const {
    return m_amount_in_currency;
}
void OAICustomerDocumentDto::setAmountInCurrency(const double &amount_in_currency) {
    m_amount_in_currency = amount_in_currency;
    m_amount_in_currency_isSet = true;
}

bool OAICustomerDocumentDto::is_amount_in_currency_Set() const{
    return m_amount_in_currency_isSet;
}

bool OAICustomerDocumentDto::is_amount_in_currency_Valid() const{
    return m_amount_in_currency_isValid;
}

double OAICustomerDocumentDto::getBalance() const {
    return m_balance;
}
void OAICustomerDocumentDto::setBalance(const double &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAICustomerDocumentDto::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAICustomerDocumentDto::is_balance_Valid() const{
    return m_balance_isValid;
}

double OAICustomerDocumentDto::getBalanceInCurrency() const {
    return m_balance_in_currency;
}
void OAICustomerDocumentDto::setBalanceInCurrency(const double &balance_in_currency) {
    m_balance_in_currency = balance_in_currency;
    m_balance_in_currency_isSet = true;
}

bool OAICustomerDocumentDto::is_balance_in_currency_Set() const{
    return m_balance_in_currency_isSet;
}

bool OAICustomerDocumentDto::is_balance_in_currency_Valid() const{
    return m_balance_in_currency_isValid;
}

OAIBranchInCustomerDocumentDto OAICustomerDocumentDto::getBranch() const {
    return m_branch;
}
void OAICustomerDocumentDto::setBranch(const OAIBranchInCustomerDocumentDto &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAICustomerDocumentDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAICustomerDocumentDto::is_branch_Valid() const{
    return m_branch_isValid;
}

OAIBranchNumberInCustomerDocumentDto OAICustomerDocumentDto::getBranchNumber() const {
    return m_branch_number;
}
void OAICustomerDocumentDto::setBranchNumber(const OAIBranchNumberInCustomerDocumentDto &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAICustomerDocumentDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAICustomerDocumentDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

QString OAICustomerDocumentDto::getCashAccount() const {
    return m_cash_account;
}
void OAICustomerDocumentDto::setCashAccount(const QString &cash_account) {
    m_cash_account = cash_account;
    m_cash_account_isSet = true;
}

bool OAICustomerDocumentDto::is_cash_account_Set() const{
    return m_cash_account_isSet;
}

bool OAICustomerDocumentDto::is_cash_account_Valid() const{
    return m_cash_account_isValid;
}

double OAICustomerDocumentDto::getCashDiscount() const {
    return m_cash_discount;
}
void OAICustomerDocumentDto::setCashDiscount(const double &cash_discount) {
    m_cash_discount = cash_discount;
    m_cash_discount_isSet = true;
}

bool OAICustomerDocumentDto::is_cash_discount_Set() const{
    return m_cash_discount_isSet;
}

bool OAICustomerDocumentDto::is_cash_discount_Valid() const{
    return m_cash_discount_isValid;
}

double OAICustomerDocumentDto::getCashDiscountInCurrency() const {
    return m_cash_discount_in_currency;
}
void OAICustomerDocumentDto::setCashDiscountInCurrency(const double &cash_discount_in_currency) {
    m_cash_discount_in_currency = cash_discount_in_currency;
    m_cash_discount_in_currency_isSet = true;
}

bool OAICustomerDocumentDto::is_cash_discount_in_currency_Set() const{
    return m_cash_discount_in_currency_isSet;
}

bool OAICustomerDocumentDto::is_cash_discount_in_currency_Valid() const{
    return m_cash_discount_in_currency_isValid;
}

QString OAICustomerDocumentDto::getClosedFinancialPeriod() const {
    return m_closed_financial_period;
}
void OAICustomerDocumentDto::setClosedFinancialPeriod(const QString &closed_financial_period) {
    m_closed_financial_period = closed_financial_period;
    m_closed_financial_period_isSet = true;
}

bool OAICustomerDocumentDto::is_closed_financial_period_Set() const{
    return m_closed_financial_period_isSet;
}

bool OAICustomerDocumentDto::is_closed_financial_period_Valid() const{
    return m_closed_financial_period_isValid;
}

QDateTime OAICustomerDocumentDto::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAICustomerDocumentDto::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAICustomerDocumentDto::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAICustomerDocumentDto::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAICustomerDocumentDto::getCurrencyId() const {
    return m_currency_id;
}
void OAICustomerDocumentDto::setCurrencyId(const QString &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAICustomerDocumentDto::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAICustomerDocumentDto::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

OAICustomerInCustomerDocumentDto OAICustomerDocumentDto::getCustomer() const {
    return m_customer;
}
void OAICustomerDocumentDto::setCustomer(const OAICustomerInCustomerDocumentDto &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAICustomerDocumentDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAICustomerDocumentDto::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAICustomerDocumentDto::getCustomerProject() const {
    return m_customer_project;
}
void OAICustomerDocumentDto::setCustomerProject(const QString &customer_project) {
    m_customer_project = customer_project;
    m_customer_project_isSet = true;
}

bool OAICustomerDocumentDto::is_customer_project_Set() const{
    return m_customer_project_isSet;
}

bool OAICustomerDocumentDto::is_customer_project_Valid() const{
    return m_customer_project_isValid;
}

QString OAICustomerDocumentDto::getCustomerRefNumber() const {
    return m_customer_ref_number;
}
void OAICustomerDocumentDto::setCustomerRefNumber(const QString &customer_ref_number) {
    m_customer_ref_number = customer_ref_number;
    m_customer_ref_number_isSet = true;
}

bool OAICustomerDocumentDto::is_customer_ref_number_Set() const{
    return m_customer_ref_number_isSet;
}

bool OAICustomerDocumentDto::is_customer_ref_number_Valid() const{
    return m_customer_ref_number_isValid;
}

QDateTime OAICustomerDocumentDto::getDocumentDate() const {
    return m_document_date;
}
void OAICustomerDocumentDto::setDocumentDate(const QDateTime &document_date) {
    m_document_date = document_date;
    m_document_date_isSet = true;
}

bool OAICustomerDocumentDto::is_document_date_Set() const{
    return m_document_date_isSet;
}

bool OAICustomerDocumentDto::is_document_date_Valid() const{
    return m_document_date_isValid;
}

QDateTime OAICustomerDocumentDto::getDocumentDueDate() const {
    return m_document_due_date;
}
void OAICustomerDocumentDto::setDocumentDueDate(const QDateTime &document_due_date) {
    m_document_due_date = document_due_date;
    m_document_due_date_isSet = true;
}

bool OAICustomerDocumentDto::is_document_due_date_Set() const{
    return m_document_due_date_isSet;
}

bool OAICustomerDocumentDto::is_document_due_date_Valid() const{
    return m_document_due_date_isValid;
}

QString OAICustomerDocumentDto::getDocumentType() const {
    return m_document_type;
}
void OAICustomerDocumentDto::setDocumentType(const QString &document_type) {
    m_document_type = document_type;
    m_document_type_isSet = true;
}

bool OAICustomerDocumentDto::is_document_type_Set() const{
    return m_document_type_isSet;
}

bool OAICustomerDocumentDto::is_document_type_Valid() const{
    return m_document_type_isValid;
}

QString OAICustomerDocumentDto::getErrorInfo() const {
    return m_error_info;
}
void OAICustomerDocumentDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAICustomerDocumentDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAICustomerDocumentDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

QString OAICustomerDocumentDto::getFinancialPeriod() const {
    return m_financial_period;
}
void OAICustomerDocumentDto::setFinancialPeriod(const QString &financial_period) {
    m_financial_period = financial_period;
    m_financial_period_isSet = true;
}

bool OAICustomerDocumentDto::is_financial_period_Set() const{
    return m_financial_period_isSet;
}

bool OAICustomerDocumentDto::is_financial_period_Valid() const{
    return m_financial_period_isValid;
}

QString OAICustomerDocumentDto::getInvoiceText() const {
    return m_invoice_text;
}
void OAICustomerDocumentDto::setInvoiceText(const QString &invoice_text) {
    m_invoice_text = invoice_text;
    m_invoice_text_isSet = true;
}

bool OAICustomerDocumentDto::is_invoice_text_Set() const{
    return m_invoice_text_isSet;
}

bool OAICustomerDocumentDto::is_invoice_text_Valid() const{
    return m_invoice_text_isValid;
}

QDateTime OAICustomerDocumentDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAICustomerDocumentDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAICustomerDocumentDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAICustomerDocumentDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAILocationInCustomerDocumentDto OAICustomerDocumentDto::getLocation() const {
    return m_location;
}
void OAICustomerDocumentDto::setLocation(const OAILocationInCustomerDocumentDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAICustomerDocumentDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAICustomerDocumentDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIMetadataDto OAICustomerDocumentDto::getMetadata() const {
    return m_metadata;
}
void OAICustomerDocumentDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICustomerDocumentDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICustomerDocumentDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAICustomerDocumentDto::getNote() const {
    return m_note;
}
void OAICustomerDocumentDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAICustomerDocumentDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAICustomerDocumentDto::is_note_Valid() const{
    return m_note_isValid;
}

QDateTime OAICustomerDocumentDto::getOrigInvoiceDate() const {
    return m_orig_invoice_date;
}
void OAICustomerDocumentDto::setOrigInvoiceDate(const QDateTime &orig_invoice_date) {
    m_orig_invoice_date = orig_invoice_date;
    m_orig_invoice_date_isSet = true;
}

bool OAICustomerDocumentDto::is_orig_invoice_date_Set() const{
    return m_orig_invoice_date_isSet;
}

bool OAICustomerDocumentDto::is_orig_invoice_date_Valid() const{
    return m_orig_invoice_date_isValid;
}

OAIPaymentMethodInCustomerDocumentDto OAICustomerDocumentDto::getPaymentMethod() const {
    return m_payment_method;
}
void OAICustomerDocumentDto::setPaymentMethod(const OAIPaymentMethodInCustomerDocumentDto &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAICustomerDocumentDto::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAICustomerDocumentDto::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAICustomerDocumentDto::getPostPeriod() const {
    return m_post_period;
}
void OAICustomerDocumentDto::setPostPeriod(const QString &post_period) {
    m_post_period = post_period;
    m_post_period_isSet = true;
}

bool OAICustomerDocumentDto::is_post_period_Set() const{
    return m_post_period_isSet;
}

bool OAICustomerDocumentDto::is_post_period_Valid() const{
    return m_post_period_isValid;
}

OAIProjectInCustomerDocumentDto OAICustomerDocumentDto::getProject() const {
    return m_project;
}
void OAICustomerDocumentDto::setProject(const OAIProjectInCustomerDocumentDto &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAICustomerDocumentDto::is_project_Set() const{
    return m_project_isSet;
}

bool OAICustomerDocumentDto::is_project_Valid() const{
    return m_project_isValid;
}

QString OAICustomerDocumentDto::getReferenceNumber() const {
    return m_reference_number;
}
void OAICustomerDocumentDto::setReferenceNumber(const QString &reference_number) {
    m_reference_number = reference_number;
    m_reference_number_isSet = true;
}

bool OAICustomerDocumentDto::is_reference_number_Set() const{
    return m_reference_number_isSet;
}

bool OAICustomerDocumentDto::is_reference_number_Valid() const{
    return m_reference_number_isValid;
}

QString OAICustomerDocumentDto::getStatus() const {
    return m_status;
}
void OAICustomerDocumentDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICustomerDocumentDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAICustomerDocumentDto::is_status_Valid() const{
    return m_status_isValid;
}

OAISubaccountInCustomerDocumentDto OAICustomerDocumentDto::getSubaccount() const {
    return m_subaccount;
}
void OAICustomerDocumentDto::setSubaccount(const OAISubaccountInCustomerDocumentDto &subaccount) {
    m_subaccount = subaccount;
    m_subaccount_isSet = true;
}

bool OAICustomerDocumentDto::is_subaccount_Set() const{
    return m_subaccount_isSet;
}

bool OAICustomerDocumentDto::is_subaccount_Valid() const{
    return m_subaccount_isValid;
}

double OAICustomerDocumentDto::getVatTotal() const {
    return m_vat_total;
}
void OAICustomerDocumentDto::setVatTotal(const double &vat_total) {
    m_vat_total = vat_total;
    m_vat_total_isSet = true;
}

bool OAICustomerDocumentDto::is_vat_total_Set() const{
    return m_vat_total_isSet;
}

bool OAICustomerDocumentDto::is_vat_total_Valid() const{
    return m_vat_total_isValid;
}

double OAICustomerDocumentDto::getVatTotalInCurrency() const {
    return m_vat_total_in_currency;
}
void OAICustomerDocumentDto::setVatTotalInCurrency(const double &vat_total_in_currency) {
    m_vat_total_in_currency = vat_total_in_currency;
    m_vat_total_in_currency_isSet = true;
}

bool OAICustomerDocumentDto::is_vat_total_in_currency_Set() const{
    return m_vat_total_in_currency_isSet;
}

bool OAICustomerDocumentDto::is_vat_total_in_currency_Valid() const{
    return m_vat_total_in_currency_isValid;
}

bool OAICustomerDocumentDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_discount_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_financial_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_ref_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_financial_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orig_invoice_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_total_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerDocumentDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
