/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContractUsageLineDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContractUsageLineDto::OAIContractUsageLineDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContractUsageLineDto::OAIContractUsageLineDto() {
    this->initializeModel();
}

OAIContractUsageLineDto::~OAIContractUsageLineDto() {}

void OAIContractUsageLineDto::initializeModel() {

    m_billed_isSet = false;
    m_billed_isValid = false;

    m_billing_date_isSet = false;
    m_billing_date_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_item_isSet = false;
    m_item_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_reference_nbr_isSet = false;
    m_reference_nbr_isValid = false;

    m_transaction_number_isSet = false;
    m_transaction_number_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;
}

void OAIContractUsageLineDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContractUsageLineDto::fromJsonObject(QJsonObject json) {

    m_billed_isValid = ::OpenAPI::fromJsonValue(m_billed, json[QString("billed")]);
    m_billed_isSet = !json[QString("billed")].isNull() && m_billed_isValid;

    m_billing_date_isValid = ::OpenAPI::fromJsonValue(m_billing_date, json[QString("billingDate")]);
    m_billing_date_isSet = !json[QString("billingDate")].isNull() && m_billing_date_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("item")]);
    m_item_isSet = !json[QString("item")].isNull() && m_item_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_reference_nbr_isValid = ::OpenAPI::fromJsonValue(m_reference_nbr, json[QString("referenceNbr")]);
    m_reference_nbr_isSet = !json[QString("referenceNbr")].isNull() && m_reference_nbr_isValid;

    m_transaction_number_isValid = ::OpenAPI::fromJsonValue(m_transaction_number, json[QString("transactionNumber")]);
    m_transaction_number_isSet = !json[QString("transactionNumber")].isNull() && m_transaction_number_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;
}

QString OAIContractUsageLineDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContractUsageLineDto::asJsonObject() const {
    QJsonObject obj;
    if (m_billed_isSet) {
        obj.insert(QString("billed"), ::OpenAPI::toJsonValue(m_billed));
    }
    if (m_billing_date_isSet) {
        obj.insert(QString("billingDate"), ::OpenAPI::toJsonValue(m_billing_date));
    }
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_item.isSet()) {
        obj.insert(QString("item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_reference_nbr_isSet) {
        obj.insert(QString("referenceNbr"), ::OpenAPI::toJsonValue(m_reference_nbr));
    }
    if (m_transaction_number_isSet) {
        obj.insert(QString("transactionNumber"), ::OpenAPI::toJsonValue(m_transaction_number));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uom_isSet) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    return obj;
}

bool OAIContractUsageLineDto::isBilled() const {
    return m_billed;
}
void OAIContractUsageLineDto::setBilled(const bool &billed) {
    m_billed = billed;
    m_billed_isSet = true;
}

bool OAIContractUsageLineDto::is_billed_Set() const{
    return m_billed_isSet;
}

bool OAIContractUsageLineDto::is_billed_Valid() const{
    return m_billed_isValid;
}

QDateTime OAIContractUsageLineDto::getBillingDate() const {
    return m_billing_date;
}
void OAIContractUsageLineDto::setBillingDate(const QDateTime &billing_date) {
    m_billing_date = billing_date;
    m_billing_date_isSet = true;
}

bool OAIContractUsageLineDto::is_billing_date_Set() const{
    return m_billing_date_isSet;
}

bool OAIContractUsageLineDto::is_billing_date_Valid() const{
    return m_billing_date_isValid;
}

OAIBranchInContractUsageLineDto OAIContractUsageLineDto::getBranch() const {
    return m_branch;
}
void OAIContractUsageLineDto::setBranch(const OAIBranchInContractUsageLineDto &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIContractUsageLineDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIContractUsageLineDto::is_branch_Valid() const{
    return m_branch_isValid;
}

QDateTime OAIContractUsageLineDto::getDate() const {
    return m_date;
}
void OAIContractUsageLineDto::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIContractUsageLineDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAIContractUsageLineDto::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIContractUsageLineDto::getDescription() const {
    return m_description;
}
void OAIContractUsageLineDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIContractUsageLineDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIContractUsageLineDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIItemInContractUsageLineDto OAIContractUsageLineDto::getItem() const {
    return m_item;
}
void OAIContractUsageLineDto::setItem(const OAIItemInContractUsageLineDto &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAIContractUsageLineDto::is_item_Set() const{
    return m_item_isSet;
}

bool OAIContractUsageLineDto::is_item_Valid() const{
    return m_item_isValid;
}

QDateTime OAIContractUsageLineDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIContractUsageLineDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIContractUsageLineDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIContractUsageLineDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

double OAIContractUsageLineDto::getQuantity() const {
    return m_quantity;
}
void OAIContractUsageLineDto::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIContractUsageLineDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIContractUsageLineDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIContractUsageLineDto::getReferenceNbr() const {
    return m_reference_nbr;
}
void OAIContractUsageLineDto::setReferenceNbr(const QString &reference_nbr) {
    m_reference_nbr = reference_nbr;
    m_reference_nbr_isSet = true;
}

bool OAIContractUsageLineDto::is_reference_nbr_Set() const{
    return m_reference_nbr_isSet;
}

bool OAIContractUsageLineDto::is_reference_nbr_Valid() const{
    return m_reference_nbr_isValid;
}

qint32 OAIContractUsageLineDto::getTransactionNumber() const {
    return m_transaction_number;
}
void OAIContractUsageLineDto::setTransactionNumber(const qint32 &transaction_number) {
    m_transaction_number = transaction_number;
    m_transaction_number_isSet = true;
}

bool OAIContractUsageLineDto::is_transaction_number_Set() const{
    return m_transaction_number_isSet;
}

bool OAIContractUsageLineDto::is_transaction_number_Valid() const{
    return m_transaction_number_isValid;
}

QString OAIContractUsageLineDto::getType() const {
    return m_type;
}
void OAIContractUsageLineDto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIContractUsageLineDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAIContractUsageLineDto::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIContractUsageLineDto::getUom() const {
    return m_uom;
}
void OAIContractUsageLineDto::setUom(const QString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAIContractUsageLineDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAIContractUsageLineDto::is_uom_Valid() const{
    return m_uom_isValid;
}

bool OAIContractUsageLineDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContractUsageLineDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
