/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBudgetUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBudgetUpdateDto::OAIBudgetUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBudgetUpdateDto::OAIBudgetUpdateDto() {
    this->initializeModel();
}

OAIBudgetUpdateDto::~OAIBudgetUpdateDto() {}

void OAIBudgetUpdateDto::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_financial_year_isSet = false;
    m_financial_year_isValid = false;

    m_ledger_isSet = false;
    m_ledger_isValid = false;

    m_periods_isSet = false;
    m_periods_isValid = false;

    m_subaccount_isSet = false;
    m_subaccount_isValid = false;
}

void OAIBudgetUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBudgetUpdateDto::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_financial_year_isValid = ::OpenAPI::fromJsonValue(m_financial_year, json[QString("financialYear")]);
    m_financial_year_isSet = !json[QString("financialYear")].isNull() && m_financial_year_isValid;

    m_ledger_isValid = ::OpenAPI::fromJsonValue(m_ledger, json[QString("ledger")]);
    m_ledger_isSet = !json[QString("ledger")].isNull() && m_ledger_isValid;

    m_periods_isValid = ::OpenAPI::fromJsonValue(m_periods, json[QString("periods")]);
    m_periods_isSet = !json[QString("periods")].isNull() && m_periods_isValid;

    m_subaccount_isValid = ::OpenAPI::fromJsonValue(m_subaccount, json[QString("subaccount")]);
    m_subaccount_isSet = !json[QString("subaccount")].isNull() && m_subaccount_isValid;
}

QString OAIBudgetUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBudgetUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_financial_year.isSet()) {
        obj.insert(QString("financialYear"), ::OpenAPI::toJsonValue(m_financial_year));
    }
    if (m_ledger.isSet()) {
        obj.insert(QString("ledger"), ::OpenAPI::toJsonValue(m_ledger));
    }
    if (m_periods.size() > 0) {
        obj.insert(QString("periods"), ::OpenAPI::toJsonValue(m_periods));
    }
    if (m_subaccount.size() > 0) {
        obj.insert(QString("subaccount"), ::OpenAPI::toJsonValue(m_subaccount));
    }
    return obj;
}

OAIDtoValueOfString OAIBudgetUpdateDto::getAccount() const {
    return m_account;
}
void OAIBudgetUpdateDto::setAccount(const OAIDtoValueOfString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIBudgetUpdateDto::is_account_Set() const{
    return m_account_isSet;
}

bool OAIBudgetUpdateDto::is_account_Valid() const{
    return m_account_isValid;
}

OAIDtoValueOfDecimal OAIBudgetUpdateDto::getAmount() const {
    return m_amount;
}
void OAIBudgetUpdateDto::setAmount(const OAIDtoValueOfDecimal &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIBudgetUpdateDto::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIBudgetUpdateDto::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIDtoValueOfString OAIBudgetUpdateDto::getBranchNumber() const {
    return m_branch_number;
}
void OAIBudgetUpdateDto::setBranchNumber(const OAIDtoValueOfString &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAIBudgetUpdateDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAIBudgetUpdateDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

OAIDtoValueOfString OAIBudgetUpdateDto::getDescription() const {
    return m_description;
}
void OAIBudgetUpdateDto::setDescription(const OAIDtoValueOfString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBudgetUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBudgetUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIDtoValueOfString OAIBudgetUpdateDto::getFinancialYear() const {
    return m_financial_year;
}
void OAIBudgetUpdateDto::setFinancialYear(const OAIDtoValueOfString &financial_year) {
    m_financial_year = financial_year;
    m_financial_year_isSet = true;
}

bool OAIBudgetUpdateDto::is_financial_year_Set() const{
    return m_financial_year_isSet;
}

bool OAIBudgetUpdateDto::is_financial_year_Valid() const{
    return m_financial_year_isValid;
}

OAIDtoValueOfString OAIBudgetUpdateDto::getLedger() const {
    return m_ledger;
}
void OAIBudgetUpdateDto::setLedger(const OAIDtoValueOfString &ledger) {
    m_ledger = ledger;
    m_ledger_isSet = true;
}

bool OAIBudgetUpdateDto::is_ledger_Set() const{
    return m_ledger_isSet;
}

bool OAIBudgetUpdateDto::is_ledger_Valid() const{
    return m_ledger_isValid;
}

QList<OAIFinancialPeriodAmountUpdateDto> OAIBudgetUpdateDto::getPeriods() const {
    return m_periods;
}
void OAIBudgetUpdateDto::setPeriods(const QList<OAIFinancialPeriodAmountUpdateDto> &periods) {
    m_periods = periods;
    m_periods_isSet = true;
}

bool OAIBudgetUpdateDto::is_periods_Set() const{
    return m_periods_isSet;
}

bool OAIBudgetUpdateDto::is_periods_Valid() const{
    return m_periods_isValid;
}

QList<OAISegmentUpdateDto> OAIBudgetUpdateDto::getSubaccount() const {
    return m_subaccount;
}
void OAIBudgetUpdateDto::setSubaccount(const QList<OAISegmentUpdateDto> &subaccount) {
    m_subaccount = subaccount;
    m_subaccount_isSet = true;
}

bool OAIBudgetUpdateDto::is_subaccount_Set() const{
    return m_subaccount_isSet;
}

bool OAIBudgetUpdateDto::is_subaccount_Valid() const{
    return m_subaccount_isValid;
}

bool OAIBudgetUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_financial_year.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ledger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_periods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBudgetUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
