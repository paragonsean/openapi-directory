/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILotSerialClassDetailDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILotSerialClassDetailDto::OAILotSerialClassDetailDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILotSerialClassDetailDto::OAILotSerialClassDetailDto() {
    this->initializeModel();
}

OAILotSerialClassDetailDto::~OAILotSerialClassDetailDto() {}

void OAILotSerialClassDetailDto::initializeModel() {

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_segment_number_isSet = false;
    m_segment_number_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAILotSerialClassDetailDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILotSerialClassDetailDto::fromJsonObject(QJsonObject json) {

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_segment_number_isValid = ::OpenAPI::fromJsonValue(m_segment_number, json[QString("segmentNumber")]);
    m_segment_number_isSet = !json[QString("segmentNumber")].isNull() && m_segment_number_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAILotSerialClassDetailDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILotSerialClassDetailDto::asJsonObject() const {
    QJsonObject obj;
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_segment_number_isSet) {
        obj.insert(QString("segmentNumber"), ::OpenAPI::toJsonValue(m_segment_number));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAILotSerialClassDetailDto::getErrorInfo() const {
    return m_error_info;
}
void OAILotSerialClassDetailDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAILotSerialClassDetailDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAILotSerialClassDetailDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

QString OAILotSerialClassDetailDto::getId() const {
    return m_id;
}
void OAILotSerialClassDetailDto::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILotSerialClassDetailDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAILotSerialClassDetailDto::is_id_Valid() const{
    return m_id_isValid;
}

OAIMetadataDto OAILotSerialClassDetailDto::getMetadata() const {
    return m_metadata;
}
void OAILotSerialClassDetailDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAILotSerialClassDetailDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAILotSerialClassDetailDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

qint32 OAILotSerialClassDetailDto::getSegmentNumber() const {
    return m_segment_number;
}
void OAILotSerialClassDetailDto::setSegmentNumber(const qint32 &segment_number) {
    m_segment_number = segment_number;
    m_segment_number_isSet = true;
}

bool OAILotSerialClassDetailDto::is_segment_number_Set() const{
    return m_segment_number_isSet;
}

bool OAILotSerialClassDetailDto::is_segment_number_Valid() const{
    return m_segment_number_isValid;
}

QString OAILotSerialClassDetailDto::getType() const {
    return m_type;
}
void OAILotSerialClassDetailDto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILotSerialClassDetailDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAILotSerialClassDetailDto::is_type_Valid() const{
    return m_type_isValid;
}

QString OAILotSerialClassDetailDto::getValue() const {
    return m_value;
}
void OAILotSerialClassDetailDto::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAILotSerialClassDetailDto::is_value_Set() const{
    return m_value_isSet;
}

bool OAILotSerialClassDetailDto::is_value_Valid() const{
    return m_value_isValid;
}

bool OAILotSerialClassDetailDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILotSerialClassDetailDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
