/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesOrderUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesOrderUpdateDto::OAISalesOrderUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesOrderUpdateDto::OAISalesOrderUpdateDto() {
    this->initializeModel();
}

OAISalesOrderUpdateDto::~OAISalesOrderUpdateDto() {}

void OAISalesOrderUpdateDto::initializeModel() {

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_cancel_by_isSet = false;
    m_cancel_by_isValid = false;

    m_canceled_isSet = false;
    m_canceled_isValid = false;

    m_cash_account_isSet = false;
    m_cash_account_isValid = false;

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_customer_order_isSet = false;
    m_customer_order_isValid = false;

    m_customer_ref_no_isSet = false;
    m_customer_ref_no_isValid = false;

    m_customer_vat_zone_isSet = false;
    m_customer_vat_zone_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_emailed_isSet = false;
    m_emailed_isValid = false;

    m_fob_point_isSet = false;
    m_fob_point_isValid = false;

    m_gln_isSet = false;
    m_gln_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_insurance_isSet = false;
    m_insurance_isValid = false;

    m_invoice_separately_isSet = false;
    m_invoice_separately_isValid = false;

    m_is_rot_rut_deductible_isSet = false;
    m_is_rot_rut_deductible_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_order_number_isSet = false;
    m_order_number_isValid = false;

    m_order_type_isSet = false;
    m_order_type_isValid = false;

    m_orig_order_nbr_isSet = false;
    m_orig_order_nbr_isValid = false;

    m_orig_order_type_isSet = false;
    m_orig_order_type_isValid = false;

    m_override_number_series_isSet = false;
    m_override_number_series_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_payment_ref_isSet = false;
    m_payment_ref_isValid = false;

    m_preferred_warehouse_isSet = false;
    m_preferred_warehouse_isValid = false;

    m_print_description_on_invoice_isSet = false;
    m_print_description_on_invoice_isValid = false;

    m_print_note_on_external_documents_isSet = false;
    m_print_note_on_external_documents_isValid = false;

    m_print_note_on_internal_documents_isSet = false;
    m_print_note_on_internal_documents_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_recalculate_shipment_isSet = false;
    m_recalculate_shipment_isValid = false;

    m_request_on_isSet = false;
    m_request_on_isValid = false;

    m_residential_delivery_isSet = false;
    m_residential_delivery_isValid = false;

    m_rot_rut_details_isSet = false;
    m_rot_rut_details_isValid = false;

    m_sales_person_isSet = false;
    m_sales_person_isValid = false;

    m_saturday_delivery_isSet = false;
    m_saturday_delivery_isValid = false;

    m_sched_shipment_isSet = false;
    m_sched_shipment_isValid = false;

    m_ship_complete_isSet = false;
    m_ship_complete_isValid = false;

    m_ship_separately_isSet = false;
    m_ship_separately_isValid = false;

    m_ship_via_isSet = false;
    m_ship_via_isValid = false;

    m_shipping_terms_isSet = false;
    m_shipping_terms_isValid = false;

    m_shipping_zone_isSet = false;
    m_shipping_zone_isValid = false;

    m_so_billing_address_isSet = false;
    m_so_billing_address_isValid = false;

    m_so_billing_contact_isSet = false;
    m_so_billing_contact_isValid = false;

    m_so_shipping_address_isSet = false;
    m_so_shipping_address_isValid = false;

    m_so_shipping_contact_isSet = false;
    m_so_shipping_contact_isValid = false;

    m_terms_isSet = false;
    m_terms_isValid = false;

    m_transaction_type_isSet = false;
    m_transaction_type_isValid = false;

    m_vat_registration_id_isSet = false;
    m_vat_registration_id_isValid = false;
}

void OAISalesOrderUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesOrderUpdateDto::fromJsonObject(QJsonObject json) {

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_cancel_by_isValid = ::OpenAPI::fromJsonValue(m_cancel_by, json[QString("cancelBy")]);
    m_cancel_by_isSet = !json[QString("cancelBy")].isNull() && m_cancel_by_isValid;

    m_canceled_isValid = ::OpenAPI::fromJsonValue(m_canceled, json[QString("canceled")]);
    m_canceled_isSet = !json[QString("canceled")].isNull() && m_canceled_isValid;

    m_cash_account_isValid = ::OpenAPI::fromJsonValue(m_cash_account, json[QString("cashAccount")]);
    m_cash_account_isSet = !json[QString("cashAccount")].isNull() && m_cash_account_isValid;

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("contactId")]);
    m_contact_id_isSet = !json[QString("contactId")].isNull() && m_contact_id_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_customer_order_isValid = ::OpenAPI::fromJsonValue(m_customer_order, json[QString("customerOrder")]);
    m_customer_order_isSet = !json[QString("customerOrder")].isNull() && m_customer_order_isValid;

    m_customer_ref_no_isValid = ::OpenAPI::fromJsonValue(m_customer_ref_no, json[QString("customerRefNo")]);
    m_customer_ref_no_isSet = !json[QString("customerRefNo")].isNull() && m_customer_ref_no_isValid;

    m_customer_vat_zone_isValid = ::OpenAPI::fromJsonValue(m_customer_vat_zone, json[QString("customerVATZone")]);
    m_customer_vat_zone_isSet = !json[QString("customerVATZone")].isNull() && m_customer_vat_zone_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_emailed_isValid = ::OpenAPI::fromJsonValue(m_emailed, json[QString("emailed")]);
    m_emailed_isSet = !json[QString("emailed")].isNull() && m_emailed_isValid;

    m_fob_point_isValid = ::OpenAPI::fromJsonValue(m_fob_point, json[QString("fobPoint")]);
    m_fob_point_isSet = !json[QString("fobPoint")].isNull() && m_fob_point_isValid;

    m_gln_isValid = ::OpenAPI::fromJsonValue(m_gln, json[QString("gln")]);
    m_gln_isSet = !json[QString("gln")].isNull() && m_gln_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_insurance_isValid = ::OpenAPI::fromJsonValue(m_insurance, json[QString("insurance")]);
    m_insurance_isSet = !json[QString("insurance")].isNull() && m_insurance_isValid;

    m_invoice_separately_isValid = ::OpenAPI::fromJsonValue(m_invoice_separately, json[QString("invoiceSeparately")]);
    m_invoice_separately_isSet = !json[QString("invoiceSeparately")].isNull() && m_invoice_separately_isValid;

    m_is_rot_rut_deductible_isValid = ::OpenAPI::fromJsonValue(m_is_rot_rut_deductible, json[QString("isRotRutDeductible")]);
    m_is_rot_rut_deductible_isSet = !json[QString("isRotRutDeductible")].isNull() && m_is_rot_rut_deductible_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_order_number_isValid = ::OpenAPI::fromJsonValue(m_order_number, json[QString("orderNumber")]);
    m_order_number_isSet = !json[QString("orderNumber")].isNull() && m_order_number_isValid;

    m_order_type_isValid = ::OpenAPI::fromJsonValue(m_order_type, json[QString("orderType")]);
    m_order_type_isSet = !json[QString("orderType")].isNull() && m_order_type_isValid;

    m_orig_order_nbr_isValid = ::OpenAPI::fromJsonValue(m_orig_order_nbr, json[QString("origOrderNbr")]);
    m_orig_order_nbr_isSet = !json[QString("origOrderNbr")].isNull() && m_orig_order_nbr_isValid;

    m_orig_order_type_isValid = ::OpenAPI::fromJsonValue(m_orig_order_type, json[QString("origOrderType")]);
    m_orig_order_type_isSet = !json[QString("origOrderType")].isNull() && m_orig_order_type_isValid;

    m_override_number_series_isValid = ::OpenAPI::fromJsonValue(m_override_number_series, json[QString("overrideNumberSeries")]);
    m_override_number_series_isSet = !json[QString("overrideNumberSeries")].isNull() && m_override_number_series_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_payment_ref_isValid = ::OpenAPI::fromJsonValue(m_payment_ref, json[QString("paymentRef")]);
    m_payment_ref_isSet = !json[QString("paymentRef")].isNull() && m_payment_ref_isValid;

    m_preferred_warehouse_isValid = ::OpenAPI::fromJsonValue(m_preferred_warehouse, json[QString("preferredWarehouse")]);
    m_preferred_warehouse_isSet = !json[QString("preferredWarehouse")].isNull() && m_preferred_warehouse_isValid;

    m_print_description_on_invoice_isValid = ::OpenAPI::fromJsonValue(m_print_description_on_invoice, json[QString("printDescriptionOnInvoice")]);
    m_print_description_on_invoice_isSet = !json[QString("printDescriptionOnInvoice")].isNull() && m_print_description_on_invoice_isValid;

    m_print_note_on_external_documents_isValid = ::OpenAPI::fromJsonValue(m_print_note_on_external_documents, json[QString("printNoteOnExternalDocuments")]);
    m_print_note_on_external_documents_isSet = !json[QString("printNoteOnExternalDocuments")].isNull() && m_print_note_on_external_documents_isValid;

    m_print_note_on_internal_documents_isValid = ::OpenAPI::fromJsonValue(m_print_note_on_internal_documents, json[QString("printNoteOnInternalDocuments")]);
    m_print_note_on_internal_documents_isSet = !json[QString("printNoteOnInternalDocuments")].isNull() && m_print_note_on_internal_documents_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_recalculate_shipment_isValid = ::OpenAPI::fromJsonValue(m_recalculate_shipment, json[QString("recalculateShipment")]);
    m_recalculate_shipment_isSet = !json[QString("recalculateShipment")].isNull() && m_recalculate_shipment_isValid;

    m_request_on_isValid = ::OpenAPI::fromJsonValue(m_request_on, json[QString("requestOn")]);
    m_request_on_isSet = !json[QString("requestOn")].isNull() && m_request_on_isValid;

    m_residential_delivery_isValid = ::OpenAPI::fromJsonValue(m_residential_delivery, json[QString("residentialDelivery")]);
    m_residential_delivery_isSet = !json[QString("residentialDelivery")].isNull() && m_residential_delivery_isValid;

    m_rot_rut_details_isValid = ::OpenAPI::fromJsonValue(m_rot_rut_details, json[QString("rotRutDetails")]);
    m_rot_rut_details_isSet = !json[QString("rotRutDetails")].isNull() && m_rot_rut_details_isValid;

    m_sales_person_isValid = ::OpenAPI::fromJsonValue(m_sales_person, json[QString("salesPerson")]);
    m_sales_person_isSet = !json[QString("salesPerson")].isNull() && m_sales_person_isValid;

    m_saturday_delivery_isValid = ::OpenAPI::fromJsonValue(m_saturday_delivery, json[QString("saturdayDelivery")]);
    m_saturday_delivery_isSet = !json[QString("saturdayDelivery")].isNull() && m_saturday_delivery_isValid;

    m_sched_shipment_isValid = ::OpenAPI::fromJsonValue(m_sched_shipment, json[QString("schedShipment")]);
    m_sched_shipment_isSet = !json[QString("schedShipment")].isNull() && m_sched_shipment_isValid;

    m_ship_complete_isValid = ::OpenAPI::fromJsonValue(m_ship_complete, json[QString("shipComplete")]);
    m_ship_complete_isSet = !json[QString("shipComplete")].isNull() && m_ship_complete_isValid;

    m_ship_separately_isValid = ::OpenAPI::fromJsonValue(m_ship_separately, json[QString("shipSeparately")]);
    m_ship_separately_isSet = !json[QString("shipSeparately")].isNull() && m_ship_separately_isValid;

    m_ship_via_isValid = ::OpenAPI::fromJsonValue(m_ship_via, json[QString("shipVia")]);
    m_ship_via_isSet = !json[QString("shipVia")].isNull() && m_ship_via_isValid;

    m_shipping_terms_isValid = ::OpenAPI::fromJsonValue(m_shipping_terms, json[QString("shippingTerms")]);
    m_shipping_terms_isSet = !json[QString("shippingTerms")].isNull() && m_shipping_terms_isValid;

    m_shipping_zone_isValid = ::OpenAPI::fromJsonValue(m_shipping_zone, json[QString("shippingZone")]);
    m_shipping_zone_isSet = !json[QString("shippingZone")].isNull() && m_shipping_zone_isValid;

    m_so_billing_address_isValid = ::OpenAPI::fromJsonValue(m_so_billing_address, json[QString("soBillingAddress")]);
    m_so_billing_address_isSet = !json[QString("soBillingAddress")].isNull() && m_so_billing_address_isValid;

    m_so_billing_contact_isValid = ::OpenAPI::fromJsonValue(m_so_billing_contact, json[QString("soBillingContact")]);
    m_so_billing_contact_isSet = !json[QString("soBillingContact")].isNull() && m_so_billing_contact_isValid;

    m_so_shipping_address_isValid = ::OpenAPI::fromJsonValue(m_so_shipping_address, json[QString("soShippingAddress")]);
    m_so_shipping_address_isSet = !json[QString("soShippingAddress")].isNull() && m_so_shipping_address_isValid;

    m_so_shipping_contact_isValid = ::OpenAPI::fromJsonValue(m_so_shipping_contact, json[QString("soShippingContact")]);
    m_so_shipping_contact_isSet = !json[QString("soShippingContact")].isNull() && m_so_shipping_contact_isValid;

    m_terms_isValid = ::OpenAPI::fromJsonValue(m_terms, json[QString("terms")]);
    m_terms_isSet = !json[QString("terms")].isNull() && m_terms_isValid;

    m_transaction_type_isValid = ::OpenAPI::fromJsonValue(m_transaction_type, json[QString("transactionType")]);
    m_transaction_type_isSet = !json[QString("transactionType")].isNull() && m_transaction_type_isValid;

    m_vat_registration_id_isValid = ::OpenAPI::fromJsonValue(m_vat_registration_id, json[QString("vatRegistrationId")]);
    m_vat_registration_id_isSet = !json[QString("vatRegistrationId")].isNull() && m_vat_registration_id_isValid;
}

QString OAISalesOrderUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesOrderUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_cancel_by.isSet()) {
        obj.insert(QString("cancelBy"), ::OpenAPI::toJsonValue(m_cancel_by));
    }
    if (m_canceled.isSet()) {
        obj.insert(QString("canceled"), ::OpenAPI::toJsonValue(m_canceled));
    }
    if (m_cash_account.isSet()) {
        obj.insert(QString("cashAccount"), ::OpenAPI::toJsonValue(m_cash_account));
    }
    if (m_contact_id.isSet()) {
        obj.insert(QString("contactId"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_customer_order.isSet()) {
        obj.insert(QString("customerOrder"), ::OpenAPI::toJsonValue(m_customer_order));
    }
    if (m_customer_ref_no.isSet()) {
        obj.insert(QString("customerRefNo"), ::OpenAPI::toJsonValue(m_customer_ref_no));
    }
    if (m_customer_vat_zone.isSet()) {
        obj.insert(QString("customerVATZone"), ::OpenAPI::toJsonValue(m_customer_vat_zone));
    }
    if (m_date.isSet()) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_emailed.isSet()) {
        obj.insert(QString("emailed"), ::OpenAPI::toJsonValue(m_emailed));
    }
    if (m_fob_point.isSet()) {
        obj.insert(QString("fobPoint"), ::OpenAPI::toJsonValue(m_fob_point));
    }
    if (m_gln.isSet()) {
        obj.insert(QString("gln"), ::OpenAPI::toJsonValue(m_gln));
    }
    if (m_hold.isSet()) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_insurance.isSet()) {
        obj.insert(QString("insurance"), ::OpenAPI::toJsonValue(m_insurance));
    }
    if (m_invoice_separately.isSet()) {
        obj.insert(QString("invoiceSeparately"), ::OpenAPI::toJsonValue(m_invoice_separately));
    }
    if (m_is_rot_rut_deductible.isSet()) {
        obj.insert(QString("isRotRutDeductible"), ::OpenAPI::toJsonValue(m_is_rot_rut_deductible));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_note.isSet()) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_order_number.isSet()) {
        obj.insert(QString("orderNumber"), ::OpenAPI::toJsonValue(m_order_number));
    }
    if (m_order_type.isSet()) {
        obj.insert(QString("orderType"), ::OpenAPI::toJsonValue(m_order_type));
    }
    if (m_orig_order_nbr.isSet()) {
        obj.insert(QString("origOrderNbr"), ::OpenAPI::toJsonValue(m_orig_order_nbr));
    }
    if (m_orig_order_type.isSet()) {
        obj.insert(QString("origOrderType"), ::OpenAPI::toJsonValue(m_orig_order_type));
    }
    if (m_override_number_series.isSet()) {
        obj.insert(QString("overrideNumberSeries"), ::OpenAPI::toJsonValue(m_override_number_series));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_payment_method.isSet()) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_payment_ref.isSet()) {
        obj.insert(QString("paymentRef"), ::OpenAPI::toJsonValue(m_payment_ref));
    }
    if (m_preferred_warehouse.isSet()) {
        obj.insert(QString("preferredWarehouse"), ::OpenAPI::toJsonValue(m_preferred_warehouse));
    }
    if (m_print_description_on_invoice.isSet()) {
        obj.insert(QString("printDescriptionOnInvoice"), ::OpenAPI::toJsonValue(m_print_description_on_invoice));
    }
    if (m_print_note_on_external_documents.isSet()) {
        obj.insert(QString("printNoteOnExternalDocuments"), ::OpenAPI::toJsonValue(m_print_note_on_external_documents));
    }
    if (m_print_note_on_internal_documents.isSet()) {
        obj.insert(QString("printNoteOnInternalDocuments"), ::OpenAPI::toJsonValue(m_print_note_on_internal_documents));
    }
    if (m_priority.isSet()) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_recalculate_shipment.isSet()) {
        obj.insert(QString("recalculateShipment"), ::OpenAPI::toJsonValue(m_recalculate_shipment));
    }
    if (m_request_on.isSet()) {
        obj.insert(QString("requestOn"), ::OpenAPI::toJsonValue(m_request_on));
    }
    if (m_residential_delivery.isSet()) {
        obj.insert(QString("residentialDelivery"), ::OpenAPI::toJsonValue(m_residential_delivery));
    }
    if (m_rot_rut_details.isSet()) {
        obj.insert(QString("rotRutDetails"), ::OpenAPI::toJsonValue(m_rot_rut_details));
    }
    if (m_sales_person.isSet()) {
        obj.insert(QString("salesPerson"), ::OpenAPI::toJsonValue(m_sales_person));
    }
    if (m_saturday_delivery.isSet()) {
        obj.insert(QString("saturdayDelivery"), ::OpenAPI::toJsonValue(m_saturday_delivery));
    }
    if (m_sched_shipment.isSet()) {
        obj.insert(QString("schedShipment"), ::OpenAPI::toJsonValue(m_sched_shipment));
    }
    if (m_ship_complete.isSet()) {
        obj.insert(QString("shipComplete"), ::OpenAPI::toJsonValue(m_ship_complete));
    }
    if (m_ship_separately.isSet()) {
        obj.insert(QString("shipSeparately"), ::OpenAPI::toJsonValue(m_ship_separately));
    }
    if (m_ship_via.isSet()) {
        obj.insert(QString("shipVia"), ::OpenAPI::toJsonValue(m_ship_via));
    }
    if (m_shipping_terms.isSet()) {
        obj.insert(QString("shippingTerms"), ::OpenAPI::toJsonValue(m_shipping_terms));
    }
    if (m_shipping_zone.isSet()) {
        obj.insert(QString("shippingZone"), ::OpenAPI::toJsonValue(m_shipping_zone));
    }
    if (m_so_billing_address.isSet()) {
        obj.insert(QString("soBillingAddress"), ::OpenAPI::toJsonValue(m_so_billing_address));
    }
    if (m_so_billing_contact.isSet()) {
        obj.insert(QString("soBillingContact"), ::OpenAPI::toJsonValue(m_so_billing_contact));
    }
    if (m_so_shipping_address.isSet()) {
        obj.insert(QString("soShippingAddress"), ::OpenAPI::toJsonValue(m_so_shipping_address));
    }
    if (m_so_shipping_contact.isSet()) {
        obj.insert(QString("soShippingContact"), ::OpenAPI::toJsonValue(m_so_shipping_contact));
    }
    if (m_terms.isSet()) {
        obj.insert(QString("terms"), ::OpenAPI::toJsonValue(m_terms));
    }
    if (m_transaction_type.isSet()) {
        obj.insert(QString("transactionType"), ::OpenAPI::toJsonValue(m_transaction_type));
    }
    if (m_vat_registration_id.isSet()) {
        obj.insert(QString("vatRegistrationId"), ::OpenAPI::toJsonValue(m_vat_registration_id));
    }
    return obj;
}

OAIDtoValueOfString OAISalesOrderUpdateDto::getBranchNumber() const {
    return m_branch_number;
}
void OAISalesOrderUpdateDto::setBranchNumber(const OAIDtoValueOfString &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAISalesOrderUpdateDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAISalesOrderUpdateDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

OAIDtoValueOfNullableOfDateTime OAISalesOrderUpdateDto::getCancelBy() const {
    return m_cancel_by;
}
void OAISalesOrderUpdateDto::setCancelBy(const OAIDtoValueOfNullableOfDateTime &cancel_by) {
    m_cancel_by = cancel_by;
    m_cancel_by_isSet = true;
}

bool OAISalesOrderUpdateDto::is_cancel_by_Set() const{
    return m_cancel_by_isSet;
}

bool OAISalesOrderUpdateDto::is_cancel_by_Valid() const{
    return m_cancel_by_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISalesOrderUpdateDto::getCanceled() const {
    return m_canceled;
}
void OAISalesOrderUpdateDto::setCanceled(const OAIDtoValueOfNullableOfBoolean &canceled) {
    m_canceled = canceled;
    m_canceled_isSet = true;
}

bool OAISalesOrderUpdateDto::is_canceled_Set() const{
    return m_canceled_isSet;
}

bool OAISalesOrderUpdateDto::is_canceled_Valid() const{
    return m_canceled_isValid;
}

OAIDtoValueOfString OAISalesOrderUpdateDto::getCashAccount() const {
    return m_cash_account;
}
void OAISalesOrderUpdateDto::setCashAccount(const OAIDtoValueOfString &cash_account) {
    m_cash_account = cash_account;
    m_cash_account_isSet = true;
}

bool OAISalesOrderUpdateDto::is_cash_account_Set() const{
    return m_cash_account_isSet;
}

bool OAISalesOrderUpdateDto::is_cash_account_Valid() const{
    return m_cash_account_isValid;
}

OAIDtoValueOfNullableOfInt32 OAISalesOrderUpdateDto::getContactId() const {
    return m_contact_id;
}
void OAISalesOrderUpdateDto::setContactId(const OAIDtoValueOfNullableOfInt32 &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAISalesOrderUpdateDto::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAISalesOrderUpdateDto::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

OAIDtoValueOfString OAISalesOrderUpdateDto::getCurrency() const {
    return m_currency;
}
void OAISalesOrderUpdateDto::setCurrency(const OAIDtoValueOfString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAISalesOrderUpdateDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAISalesOrderUpdateDto::is_currency_Valid() const{
    return m_currency_isValid;
}

OAICustomerInSalesOrderUpdateDto OAISalesOrderUpdateDto::getCustomer() const {
    return m_customer;
}
void OAISalesOrderUpdateDto::setCustomer(const OAICustomerInSalesOrderUpdateDto &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAISalesOrderUpdateDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAISalesOrderUpdateDto::is_customer_Valid() const{
    return m_customer_isValid;
}

OAIDtoValueOfString OAISalesOrderUpdateDto::getCustomerOrder() const {
    return m_customer_order;
}
void OAISalesOrderUpdateDto::setCustomerOrder(const OAIDtoValueOfString &customer_order) {
    m_customer_order = customer_order;
    m_customer_order_isSet = true;
}

bool OAISalesOrderUpdateDto::is_customer_order_Set() const{
    return m_customer_order_isSet;
}

bool OAISalesOrderUpdateDto::is_customer_order_Valid() const{
    return m_customer_order_isValid;
}

OAIDtoValueOfString OAISalesOrderUpdateDto::getCustomerRefNo() const {
    return m_customer_ref_no;
}
void OAISalesOrderUpdateDto::setCustomerRefNo(const OAIDtoValueOfString &customer_ref_no) {
    m_customer_ref_no = customer_ref_no;
    m_customer_ref_no_isSet = true;
}

bool OAISalesOrderUpdateDto::is_customer_ref_no_Set() const{
    return m_customer_ref_no_isSet;
}

bool OAISalesOrderUpdateDto::is_customer_ref_no_Valid() const{
    return m_customer_ref_no_isValid;
}

OAIDtoValueOfString OAISalesOrderUpdateDto::getCustomerVatZone() const {
    return m_customer_vat_zone;
}
void OAISalesOrderUpdateDto::setCustomerVatZone(const OAIDtoValueOfString &customer_vat_zone) {
    m_customer_vat_zone = customer_vat_zone;
    m_customer_vat_zone_isSet = true;
}

bool OAISalesOrderUpdateDto::is_customer_vat_zone_Set() const{
    return m_customer_vat_zone_isSet;
}

bool OAISalesOrderUpdateDto::is_customer_vat_zone_Valid() const{
    return m_customer_vat_zone_isValid;
}

OAIDtoValueOfNullableOfDateTime OAISalesOrderUpdateDto::getDate() const {
    return m_date;
}
void OAISalesOrderUpdateDto::setDate(const OAIDtoValueOfNullableOfDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAISalesOrderUpdateDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAISalesOrderUpdateDto::is_date_Valid() const{
    return m_date_isValid;
}

OAIDtoValueOfString OAISalesOrderUpdateDto::getDescription() const {
    return m_description;
}
void OAISalesOrderUpdateDto::setDescription(const OAIDtoValueOfString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISalesOrderUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAISalesOrderUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISalesOrderUpdateDto::getEmailed() const {
    return m_emailed;
}
void OAISalesOrderUpdateDto::setEmailed(const OAIDtoValueOfNullableOfBoolean &emailed) {
    m_emailed = emailed;
    m_emailed_isSet = true;
}

bool OAISalesOrderUpdateDto::is_emailed_Set() const{
    return m_emailed_isSet;
}

bool OAISalesOrderUpdateDto::is_emailed_Valid() const{
    return m_emailed_isValid;
}

OAIDtoValueOfString OAISalesOrderUpdateDto::getFobPoint() const {
    return m_fob_point;
}
void OAISalesOrderUpdateDto::setFobPoint(const OAIDtoValueOfString &fob_point) {
    m_fob_point = fob_point;
    m_fob_point_isSet = true;
}

bool OAISalesOrderUpdateDto::is_fob_point_Set() const{
    return m_fob_point_isSet;
}

bool OAISalesOrderUpdateDto::is_fob_point_Valid() const{
    return m_fob_point_isValid;
}

OAIGlnInSalesOrderUpdateDto OAISalesOrderUpdateDto::getGln() const {
    return m_gln;
}
void OAISalesOrderUpdateDto::setGln(const OAIGlnInSalesOrderUpdateDto &gln) {
    m_gln = gln;
    m_gln_isSet = true;
}

bool OAISalesOrderUpdateDto::is_gln_Set() const{
    return m_gln_isSet;
}

bool OAISalesOrderUpdateDto::is_gln_Valid() const{
    return m_gln_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISalesOrderUpdateDto::getHold() const {
    return m_hold;
}
void OAISalesOrderUpdateDto::setHold(const OAIDtoValueOfNullableOfBoolean &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAISalesOrderUpdateDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAISalesOrderUpdateDto::is_hold_Valid() const{
    return m_hold_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISalesOrderUpdateDto::getInsurance() const {
    return m_insurance;
}
void OAISalesOrderUpdateDto::setInsurance(const OAIDtoValueOfNullableOfBoolean &insurance) {
    m_insurance = insurance;
    m_insurance_isSet = true;
}

bool OAISalesOrderUpdateDto::is_insurance_Set() const{
    return m_insurance_isSet;
}

bool OAISalesOrderUpdateDto::is_insurance_Valid() const{
    return m_insurance_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISalesOrderUpdateDto::getInvoiceSeparately() const {
    return m_invoice_separately;
}
void OAISalesOrderUpdateDto::setInvoiceSeparately(const OAIDtoValueOfNullableOfBoolean &invoice_separately) {
    m_invoice_separately = invoice_separately;
    m_invoice_separately_isSet = true;
}

bool OAISalesOrderUpdateDto::is_invoice_separately_Set() const{
    return m_invoice_separately_isSet;
}

bool OAISalesOrderUpdateDto::is_invoice_separately_Valid() const{
    return m_invoice_separately_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISalesOrderUpdateDto::getIsRotRutDeductible() const {
    return m_is_rot_rut_deductible;
}
void OAISalesOrderUpdateDto::setIsRotRutDeductible(const OAIDtoValueOfNullableOfBoolean &is_rot_rut_deductible) {
    m_is_rot_rut_deductible = is_rot_rut_deductible;
    m_is_rot_rut_deductible_isSet = true;
}

bool OAISalesOrderUpdateDto::is_is_rot_rut_deductible_Set() const{
    return m_is_rot_rut_deductible_isSet;
}

bool OAISalesOrderUpdateDto::is_is_rot_rut_deductible_Valid() const{
    return m_is_rot_rut_deductible_isValid;
}

QList<OAISalesOrderLineUpdateDto> OAISalesOrderUpdateDto::getLines() const {
    return m_lines;
}
void OAISalesOrderUpdateDto::setLines(const QList<OAISalesOrderLineUpdateDto> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAISalesOrderUpdateDto::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAISalesOrderUpdateDto::is_lines_Valid() const{
    return m_lines_isValid;
}

OAIDtoValueOfString OAISalesOrderUpdateDto::getLocation() const {
    return m_location;
}
void OAISalesOrderUpdateDto::setLocation(const OAIDtoValueOfString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAISalesOrderUpdateDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAISalesOrderUpdateDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIDtoValueOfString OAISalesOrderUpdateDto::getNote() const {
    return m_note;
}
void OAISalesOrderUpdateDto::setNote(const OAIDtoValueOfString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAISalesOrderUpdateDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAISalesOrderUpdateDto::is_note_Valid() const{
    return m_note_isValid;
}

OAIDtoValueOfString OAISalesOrderUpdateDto::getOrderNumber() const {
    return m_order_number;
}
void OAISalesOrderUpdateDto::setOrderNumber(const OAIDtoValueOfString &order_number) {
    m_order_number = order_number;
    m_order_number_isSet = true;
}

bool OAISalesOrderUpdateDto::is_order_number_Set() const{
    return m_order_number_isSet;
}

bool OAISalesOrderUpdateDto::is_order_number_Valid() const{
    return m_order_number_isValid;
}

OAIOrderTypeInSalesOrderUpdateDto OAISalesOrderUpdateDto::getOrderType() const {
    return m_order_type;
}
void OAISalesOrderUpdateDto::setOrderType(const OAIOrderTypeInSalesOrderUpdateDto &order_type) {
    m_order_type = order_type;
    m_order_type_isSet = true;
}

bool OAISalesOrderUpdateDto::is_order_type_Set() const{
    return m_order_type_isSet;
}

bool OAISalesOrderUpdateDto::is_order_type_Valid() const{
    return m_order_type_isValid;
}

OAIDtoValueOfString OAISalesOrderUpdateDto::getOrigOrderNbr() const {
    return m_orig_order_nbr;
}
void OAISalesOrderUpdateDto::setOrigOrderNbr(const OAIDtoValueOfString &orig_order_nbr) {
    m_orig_order_nbr = orig_order_nbr;
    m_orig_order_nbr_isSet = true;
}

bool OAISalesOrderUpdateDto::is_orig_order_nbr_Set() const{
    return m_orig_order_nbr_isSet;
}

bool OAISalesOrderUpdateDto::is_orig_order_nbr_Valid() const{
    return m_orig_order_nbr_isValid;
}

OAIDtoValueOfString OAISalesOrderUpdateDto::getOrigOrderType() const {
    return m_orig_order_type;
}
void OAISalesOrderUpdateDto::setOrigOrderType(const OAIDtoValueOfString &orig_order_type) {
    m_orig_order_type = orig_order_type;
    m_orig_order_type_isSet = true;
}

bool OAISalesOrderUpdateDto::is_orig_order_type_Set() const{
    return m_orig_order_type_isSet;
}

bool OAISalesOrderUpdateDto::is_orig_order_type_Valid() const{
    return m_orig_order_type_isValid;
}

OAIDtoValueOfBoolean OAISalesOrderUpdateDto::getOverrideNumberSeries() const {
    return m_override_number_series;
}
void OAISalesOrderUpdateDto::setOverrideNumberSeries(const OAIDtoValueOfBoolean &override_number_series) {
    m_override_number_series = override_number_series;
    m_override_number_series_isSet = true;
}

bool OAISalesOrderUpdateDto::is_override_number_series_Set() const{
    return m_override_number_series_isSet;
}

bool OAISalesOrderUpdateDto::is_override_number_series_Valid() const{
    return m_override_number_series_isValid;
}

OAIDtoValueOfNullableOfGuid OAISalesOrderUpdateDto::getOwner() const {
    return m_owner;
}
void OAISalesOrderUpdateDto::setOwner(const OAIDtoValueOfNullableOfGuid &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAISalesOrderUpdateDto::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAISalesOrderUpdateDto::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIDtoValueOfString OAISalesOrderUpdateDto::getPaymentMethod() const {
    return m_payment_method;
}
void OAISalesOrderUpdateDto::setPaymentMethod(const OAIDtoValueOfString &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAISalesOrderUpdateDto::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAISalesOrderUpdateDto::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

OAIDtoValueOfString OAISalesOrderUpdateDto::getPaymentRef() const {
    return m_payment_ref;
}
void OAISalesOrderUpdateDto::setPaymentRef(const OAIDtoValueOfString &payment_ref) {
    m_payment_ref = payment_ref;
    m_payment_ref_isSet = true;
}

bool OAISalesOrderUpdateDto::is_payment_ref_Set() const{
    return m_payment_ref_isSet;
}

bool OAISalesOrderUpdateDto::is_payment_ref_Valid() const{
    return m_payment_ref_isValid;
}

OAIDtoValueOfString OAISalesOrderUpdateDto::getPreferredWarehouse() const {
    return m_preferred_warehouse;
}
void OAISalesOrderUpdateDto::setPreferredWarehouse(const OAIDtoValueOfString &preferred_warehouse) {
    m_preferred_warehouse = preferred_warehouse;
    m_preferred_warehouse_isSet = true;
}

bool OAISalesOrderUpdateDto::is_preferred_warehouse_Set() const{
    return m_preferred_warehouse_isSet;
}

bool OAISalesOrderUpdateDto::is_preferred_warehouse_Valid() const{
    return m_preferred_warehouse_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISalesOrderUpdateDto::getPrintDescriptionOnInvoice() const {
    return m_print_description_on_invoice;
}
void OAISalesOrderUpdateDto::setPrintDescriptionOnInvoice(const OAIDtoValueOfNullableOfBoolean &print_description_on_invoice) {
    m_print_description_on_invoice = print_description_on_invoice;
    m_print_description_on_invoice_isSet = true;
}

bool OAISalesOrderUpdateDto::is_print_description_on_invoice_Set() const{
    return m_print_description_on_invoice_isSet;
}

bool OAISalesOrderUpdateDto::is_print_description_on_invoice_Valid() const{
    return m_print_description_on_invoice_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISalesOrderUpdateDto::getPrintNoteOnExternalDocuments() const {
    return m_print_note_on_external_documents;
}
void OAISalesOrderUpdateDto::setPrintNoteOnExternalDocuments(const OAIDtoValueOfNullableOfBoolean &print_note_on_external_documents) {
    m_print_note_on_external_documents = print_note_on_external_documents;
    m_print_note_on_external_documents_isSet = true;
}

bool OAISalesOrderUpdateDto::is_print_note_on_external_documents_Set() const{
    return m_print_note_on_external_documents_isSet;
}

bool OAISalesOrderUpdateDto::is_print_note_on_external_documents_Valid() const{
    return m_print_note_on_external_documents_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISalesOrderUpdateDto::getPrintNoteOnInternalDocuments() const {
    return m_print_note_on_internal_documents;
}
void OAISalesOrderUpdateDto::setPrintNoteOnInternalDocuments(const OAIDtoValueOfNullableOfBoolean &print_note_on_internal_documents) {
    m_print_note_on_internal_documents = print_note_on_internal_documents;
    m_print_note_on_internal_documents_isSet = true;
}

bool OAISalesOrderUpdateDto::is_print_note_on_internal_documents_Set() const{
    return m_print_note_on_internal_documents_isSet;
}

bool OAISalesOrderUpdateDto::is_print_note_on_internal_documents_Valid() const{
    return m_print_note_on_internal_documents_isValid;
}

OAIDtoValueOfNullableOfInt16 OAISalesOrderUpdateDto::getPriority() const {
    return m_priority;
}
void OAISalesOrderUpdateDto::setPriority(const OAIDtoValueOfNullableOfInt16 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAISalesOrderUpdateDto::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAISalesOrderUpdateDto::is_priority_Valid() const{
    return m_priority_isValid;
}

OAIDtoValueOfNullableOfInt32 OAISalesOrderUpdateDto::getProject() const {
    return m_project;
}
void OAISalesOrderUpdateDto::setProject(const OAIDtoValueOfNullableOfInt32 &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAISalesOrderUpdateDto::is_project_Set() const{
    return m_project_isSet;
}

bool OAISalesOrderUpdateDto::is_project_Valid() const{
    return m_project_isValid;
}

OAIDtoValueOfBoolean OAISalesOrderUpdateDto::getRecalculateShipment() const {
    return m_recalculate_shipment;
}
void OAISalesOrderUpdateDto::setRecalculateShipment(const OAIDtoValueOfBoolean &recalculate_shipment) {
    m_recalculate_shipment = recalculate_shipment;
    m_recalculate_shipment_isSet = true;
}

bool OAISalesOrderUpdateDto::is_recalculate_shipment_Set() const{
    return m_recalculate_shipment_isSet;
}

bool OAISalesOrderUpdateDto::is_recalculate_shipment_Valid() const{
    return m_recalculate_shipment_isValid;
}

OAIDtoValueOfNullableOfDateTime OAISalesOrderUpdateDto::getRequestOn() const {
    return m_request_on;
}
void OAISalesOrderUpdateDto::setRequestOn(const OAIDtoValueOfNullableOfDateTime &request_on) {
    m_request_on = request_on;
    m_request_on_isSet = true;
}

bool OAISalesOrderUpdateDto::is_request_on_Set() const{
    return m_request_on_isSet;
}

bool OAISalesOrderUpdateDto::is_request_on_Valid() const{
    return m_request_on_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISalesOrderUpdateDto::getResidentialDelivery() const {
    return m_residential_delivery;
}
void OAISalesOrderUpdateDto::setResidentialDelivery(const OAIDtoValueOfNullableOfBoolean &residential_delivery) {
    m_residential_delivery = residential_delivery;
    m_residential_delivery_isSet = true;
}

bool OAISalesOrderUpdateDto::is_residential_delivery_Set() const{
    return m_residential_delivery_isSet;
}

bool OAISalesOrderUpdateDto::is_residential_delivery_Valid() const{
    return m_residential_delivery_isValid;
}

OAIRotRutUpdateDto OAISalesOrderUpdateDto::getRotRutDetails() const {
    return m_rot_rut_details;
}
void OAISalesOrderUpdateDto::setRotRutDetails(const OAIRotRutUpdateDto &rot_rut_details) {
    m_rot_rut_details = rot_rut_details;
    m_rot_rut_details_isSet = true;
}

bool OAISalesOrderUpdateDto::is_rot_rut_details_Set() const{
    return m_rot_rut_details_isSet;
}

bool OAISalesOrderUpdateDto::is_rot_rut_details_Valid() const{
    return m_rot_rut_details_isValid;
}

OAIDtoValueOfString OAISalesOrderUpdateDto::getSalesPerson() const {
    return m_sales_person;
}
void OAISalesOrderUpdateDto::setSalesPerson(const OAIDtoValueOfString &sales_person) {
    m_sales_person = sales_person;
    m_sales_person_isSet = true;
}

bool OAISalesOrderUpdateDto::is_sales_person_Set() const{
    return m_sales_person_isSet;
}

bool OAISalesOrderUpdateDto::is_sales_person_Valid() const{
    return m_sales_person_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISalesOrderUpdateDto::getSaturdayDelivery() const {
    return m_saturday_delivery;
}
void OAISalesOrderUpdateDto::setSaturdayDelivery(const OAIDtoValueOfNullableOfBoolean &saturday_delivery) {
    m_saturday_delivery = saturday_delivery;
    m_saturday_delivery_isSet = true;
}

bool OAISalesOrderUpdateDto::is_saturday_delivery_Set() const{
    return m_saturday_delivery_isSet;
}

bool OAISalesOrderUpdateDto::is_saturday_delivery_Valid() const{
    return m_saturday_delivery_isValid;
}

OAIDtoValueOfNullableOfDateTime OAISalesOrderUpdateDto::getSchedShipment() const {
    return m_sched_shipment;
}
void OAISalesOrderUpdateDto::setSchedShipment(const OAIDtoValueOfNullableOfDateTime &sched_shipment) {
    m_sched_shipment = sched_shipment;
    m_sched_shipment_isSet = true;
}

bool OAISalesOrderUpdateDto::is_sched_shipment_Set() const{
    return m_sched_shipment_isSet;
}

bool OAISalesOrderUpdateDto::is_sched_shipment_Valid() const{
    return m_sched_shipment_isValid;
}

OAIDtoValueOfNullableOfSalesOrderShipCompleteStatuses OAISalesOrderUpdateDto::getShipComplete() const {
    return m_ship_complete;
}
void OAISalesOrderUpdateDto::setShipComplete(const OAIDtoValueOfNullableOfSalesOrderShipCompleteStatuses &ship_complete) {
    m_ship_complete = ship_complete;
    m_ship_complete_isSet = true;
}

bool OAISalesOrderUpdateDto::is_ship_complete_Set() const{
    return m_ship_complete_isSet;
}

bool OAISalesOrderUpdateDto::is_ship_complete_Valid() const{
    return m_ship_complete_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISalesOrderUpdateDto::getShipSeparately() const {
    return m_ship_separately;
}
void OAISalesOrderUpdateDto::setShipSeparately(const OAIDtoValueOfNullableOfBoolean &ship_separately) {
    m_ship_separately = ship_separately;
    m_ship_separately_isSet = true;
}

bool OAISalesOrderUpdateDto::is_ship_separately_Set() const{
    return m_ship_separately_isSet;
}

bool OAISalesOrderUpdateDto::is_ship_separately_Valid() const{
    return m_ship_separately_isValid;
}

OAIDtoValueOfString OAISalesOrderUpdateDto::getShipVia() const {
    return m_ship_via;
}
void OAISalesOrderUpdateDto::setShipVia(const OAIDtoValueOfString &ship_via) {
    m_ship_via = ship_via;
    m_ship_via_isSet = true;
}

bool OAISalesOrderUpdateDto::is_ship_via_Set() const{
    return m_ship_via_isSet;
}

bool OAISalesOrderUpdateDto::is_ship_via_Valid() const{
    return m_ship_via_isValid;
}

OAIDtoValueOfString OAISalesOrderUpdateDto::getShippingTerms() const {
    return m_shipping_terms;
}
void OAISalesOrderUpdateDto::setShippingTerms(const OAIDtoValueOfString &shipping_terms) {
    m_shipping_terms = shipping_terms;
    m_shipping_terms_isSet = true;
}

bool OAISalesOrderUpdateDto::is_shipping_terms_Set() const{
    return m_shipping_terms_isSet;
}

bool OAISalesOrderUpdateDto::is_shipping_terms_Valid() const{
    return m_shipping_terms_isValid;
}

OAIDtoValueOfString OAISalesOrderUpdateDto::getShippingZone() const {
    return m_shipping_zone;
}
void OAISalesOrderUpdateDto::setShippingZone(const OAIDtoValueOfString &shipping_zone) {
    m_shipping_zone = shipping_zone;
    m_shipping_zone_isSet = true;
}

bool OAISalesOrderUpdateDto::is_shipping_zone_Set() const{
    return m_shipping_zone_isSet;
}

bool OAISalesOrderUpdateDto::is_shipping_zone_Valid() const{
    return m_shipping_zone_isValid;
}

OAIDtoValueOfSalesOrderAddressUpdateDto OAISalesOrderUpdateDto::getSoBillingAddress() const {
    return m_so_billing_address;
}
void OAISalesOrderUpdateDto::setSoBillingAddress(const OAIDtoValueOfSalesOrderAddressUpdateDto &so_billing_address) {
    m_so_billing_address = so_billing_address;
    m_so_billing_address_isSet = true;
}

bool OAISalesOrderUpdateDto::is_so_billing_address_Set() const{
    return m_so_billing_address_isSet;
}

bool OAISalesOrderUpdateDto::is_so_billing_address_Valid() const{
    return m_so_billing_address_isValid;
}

OAIDtoValueOfSalesOrderContactUpdateDto OAISalesOrderUpdateDto::getSoBillingContact() const {
    return m_so_billing_contact;
}
void OAISalesOrderUpdateDto::setSoBillingContact(const OAIDtoValueOfSalesOrderContactUpdateDto &so_billing_contact) {
    m_so_billing_contact = so_billing_contact;
    m_so_billing_contact_isSet = true;
}

bool OAISalesOrderUpdateDto::is_so_billing_contact_Set() const{
    return m_so_billing_contact_isSet;
}

bool OAISalesOrderUpdateDto::is_so_billing_contact_Valid() const{
    return m_so_billing_contact_isValid;
}

OAIDtoValueOfSalesOrderAddressUpdateDto OAISalesOrderUpdateDto::getSoShippingAddress() const {
    return m_so_shipping_address;
}
void OAISalesOrderUpdateDto::setSoShippingAddress(const OAIDtoValueOfSalesOrderAddressUpdateDto &so_shipping_address) {
    m_so_shipping_address = so_shipping_address;
    m_so_shipping_address_isSet = true;
}

bool OAISalesOrderUpdateDto::is_so_shipping_address_Set() const{
    return m_so_shipping_address_isSet;
}

bool OAISalesOrderUpdateDto::is_so_shipping_address_Valid() const{
    return m_so_shipping_address_isValid;
}

OAIDtoValueOfSalesOrderContactUpdateDto OAISalesOrderUpdateDto::getSoShippingContact() const {
    return m_so_shipping_contact;
}
void OAISalesOrderUpdateDto::setSoShippingContact(const OAIDtoValueOfSalesOrderContactUpdateDto &so_shipping_contact) {
    m_so_shipping_contact = so_shipping_contact;
    m_so_shipping_contact_isSet = true;
}

bool OAISalesOrderUpdateDto::is_so_shipping_contact_Set() const{
    return m_so_shipping_contact_isSet;
}

bool OAISalesOrderUpdateDto::is_so_shipping_contact_Valid() const{
    return m_so_shipping_contact_isValid;
}

OAIDtoValueOfString OAISalesOrderUpdateDto::getTerms() const {
    return m_terms;
}
void OAISalesOrderUpdateDto::setTerms(const OAIDtoValueOfString &terms) {
    m_terms = terms;
    m_terms_isSet = true;
}

bool OAISalesOrderUpdateDto::is_terms_Set() const{
    return m_terms_isSet;
}

bool OAISalesOrderUpdateDto::is_terms_Valid() const{
    return m_terms_isValid;
}

OAIDtoValueOfNullableOfInt32 OAISalesOrderUpdateDto::getTransactionType() const {
    return m_transaction_type;
}
void OAISalesOrderUpdateDto::setTransactionType(const OAIDtoValueOfNullableOfInt32 &transaction_type) {
    m_transaction_type = transaction_type;
    m_transaction_type_isSet = true;
}

bool OAISalesOrderUpdateDto::is_transaction_type_Set() const{
    return m_transaction_type_isSet;
}

bool OAISalesOrderUpdateDto::is_transaction_type_Valid() const{
    return m_transaction_type_isValid;
}

OAIVatRegistrationIdInSalesOrderUpdateDto OAISalesOrderUpdateDto::getVatRegistrationId() const {
    return m_vat_registration_id;
}
void OAISalesOrderUpdateDto::setVatRegistrationId(const OAIVatRegistrationIdInSalesOrderUpdateDto &vat_registration_id) {
    m_vat_registration_id = vat_registration_id;
    m_vat_registration_id_isSet = true;
}

bool OAISalesOrderUpdateDto::is_vat_registration_id_Set() const{
    return m_vat_registration_id_isSet;
}

bool OAISalesOrderUpdateDto::is_vat_registration_id_Valid() const{
    return m_vat_registration_id_isValid;
}

bool OAISalesOrderUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_canceled.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_ref_no.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_vat_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_emailed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fob_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gln.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insurance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_separately.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_rot_rut_deductible.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_orig_order_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_orig_order_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_number_series.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_warehouse.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_print_description_on_invoice.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_print_note_on_external_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_print_note_on_internal_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recalculate_shipment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_on.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_residential_delivery.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rot_rut_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_saturday_delivery.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sched_shipment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_complete.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_separately.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_via.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_so_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_so_billing_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_so_shipping_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_so_shipping_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_registration_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesOrderUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_order_type_isValid && true;
}

} // namespace OpenAPI
