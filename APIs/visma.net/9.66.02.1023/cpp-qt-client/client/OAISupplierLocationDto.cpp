/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupplierLocationDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupplierLocationDto::OAISupplierLocationDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupplierLocationDto::OAISupplierLocationDto() {
    this->initializeModel();
}

OAISupplierLocationDto::~OAISupplierLocationDto() {}

void OAISupplierLocationDto::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_baccount_isSet = false;
    m_baccount_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_corporate_id_isSet = false;
    m_corporate_id_isValid = false;

    m_edi_code_isSet = false;
    m_edi_code_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_gln_isSet = false;
    m_gln_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_location_name_isSet = false;
    m_location_name_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_vat_registration_id_isSet = false;
    m_vat_registration_id_isValid = false;

    m_vat_zone_isSet = false;
    m_vat_zone_isValid = false;
}

void OAISupplierLocationDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupplierLocationDto::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_baccount_isValid = ::OpenAPI::fromJsonValue(m_baccount, json[QString("baccount")]);
    m_baccount_isSet = !json[QString("baccount")].isNull() && m_baccount_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_corporate_id_isValid = ::OpenAPI::fromJsonValue(m_corporate_id, json[QString("corporateId")]);
    m_corporate_id_isSet = !json[QString("corporateId")].isNull() && m_corporate_id_isValid;

    m_edi_code_isValid = ::OpenAPI::fromJsonValue(m_edi_code, json[QString("ediCode")]);
    m_edi_code_isSet = !json[QString("ediCode")].isNull() && m_edi_code_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_gln_isValid = ::OpenAPI::fromJsonValue(m_gln, json[QString("gln")]);
    m_gln_isSet = !json[QString("gln")].isNull() && m_gln_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_location_name_isValid = ::OpenAPI::fromJsonValue(m_location_name, json[QString("locationName")]);
    m_location_name_isSet = !json[QString("locationName")].isNull() && m_location_name_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_vat_registration_id_isValid = ::OpenAPI::fromJsonValue(m_vat_registration_id, json[QString("vatRegistrationId")]);
    m_vat_registration_id_isSet = !json[QString("vatRegistrationId")].isNull() && m_vat_registration_id_isValid;

    m_vat_zone_isValid = ::OpenAPI::fromJsonValue(m_vat_zone, json[QString("vatZone")]);
    m_vat_zone_isSet = !json[QString("vatZone")].isNull() && m_vat_zone_isValid;
}

QString OAISupplierLocationDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupplierLocationDto::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_baccount.isSet()) {
        obj.insert(QString("baccount"), ::OpenAPI::toJsonValue(m_baccount));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_corporate_id_isSet) {
        obj.insert(QString("corporateId"), ::OpenAPI::toJsonValue(m_corporate_id));
    }
    if (m_edi_code_isSet) {
        obj.insert(QString("ediCode"), ::OpenAPI::toJsonValue(m_edi_code));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_gln_isSet) {
        obj.insert(QString("gln"), ::OpenAPI::toJsonValue(m_gln));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_location_name_isSet) {
        obj.insert(QString("locationName"), ::OpenAPI::toJsonValue(m_location_name));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_vat_registration_id_isSet) {
        obj.insert(QString("vatRegistrationId"), ::OpenAPI::toJsonValue(m_vat_registration_id));
    }
    if (m_vat_zone.isSet()) {
        obj.insert(QString("vatZone"), ::OpenAPI::toJsonValue(m_vat_zone));
    }
    return obj;
}

bool OAISupplierLocationDto::isActive() const {
    return m_active;
}
void OAISupplierLocationDto::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAISupplierLocationDto::is_active_Set() const{
    return m_active_isSet;
}

bool OAISupplierLocationDto::is_active_Valid() const{
    return m_active_isValid;
}

OAIAddressInSupplierLocationDto OAISupplierLocationDto::getAddress() const {
    return m_address;
}
void OAISupplierLocationDto::setAddress(const OAIAddressInSupplierLocationDto &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAISupplierLocationDto::is_address_Set() const{
    return m_address_isSet;
}

bool OAISupplierLocationDto::is_address_Valid() const{
    return m_address_isValid;
}

OAIBaccountInSupplierLocationDto OAISupplierLocationDto::getBaccount() const {
    return m_baccount;
}
void OAISupplierLocationDto::setBaccount(const OAIBaccountInSupplierLocationDto &baccount) {
    m_baccount = baccount;
    m_baccount_isSet = true;
}

bool OAISupplierLocationDto::is_baccount_Set() const{
    return m_baccount_isSet;
}

bool OAISupplierLocationDto::is_baccount_Valid() const{
    return m_baccount_isValid;
}

OAIContactInSupplierLocationDto OAISupplierLocationDto::getContact() const {
    return m_contact;
}
void OAISupplierLocationDto::setContact(const OAIContactInSupplierLocationDto &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAISupplierLocationDto::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAISupplierLocationDto::is_contact_Valid() const{
    return m_contact_isValid;
}

QString OAISupplierLocationDto::getCorporateId() const {
    return m_corporate_id;
}
void OAISupplierLocationDto::setCorporateId(const QString &corporate_id) {
    m_corporate_id = corporate_id;
    m_corporate_id_isSet = true;
}

bool OAISupplierLocationDto::is_corporate_id_Set() const{
    return m_corporate_id_isSet;
}

bool OAISupplierLocationDto::is_corporate_id_Valid() const{
    return m_corporate_id_isValid;
}

QString OAISupplierLocationDto::getEdiCode() const {
    return m_edi_code;
}
void OAISupplierLocationDto::setEdiCode(const QString &edi_code) {
    m_edi_code = edi_code;
    m_edi_code_isSet = true;
}

bool OAISupplierLocationDto::is_edi_code_Set() const{
    return m_edi_code_isSet;
}

bool OAISupplierLocationDto::is_edi_code_Valid() const{
    return m_edi_code_isValid;
}

QString OAISupplierLocationDto::getErrorInfo() const {
    return m_error_info;
}
void OAISupplierLocationDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAISupplierLocationDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAISupplierLocationDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

QString OAISupplierLocationDto::getGln() const {
    return m_gln;
}
void OAISupplierLocationDto::setGln(const QString &gln) {
    m_gln = gln;
    m_gln_isSet = true;
}

bool OAISupplierLocationDto::is_gln_Set() const{
    return m_gln_isSet;
}

bool OAISupplierLocationDto::is_gln_Valid() const{
    return m_gln_isValid;
}

QDateTime OAISupplierLocationDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAISupplierLocationDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAISupplierLocationDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAISupplierLocationDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QString OAISupplierLocationDto::getLocationId() const {
    return m_location_id;
}
void OAISupplierLocationDto::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAISupplierLocationDto::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAISupplierLocationDto::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAISupplierLocationDto::getLocationName() const {
    return m_location_name;
}
void OAISupplierLocationDto::setLocationName(const QString &location_name) {
    m_location_name = location_name;
    m_location_name_isSet = true;
}

bool OAISupplierLocationDto::is_location_name_Set() const{
    return m_location_name_isSet;
}

bool OAISupplierLocationDto::is_location_name_Valid() const{
    return m_location_name_isValid;
}

OAIMetadataDto OAISupplierLocationDto::getMetadata() const {
    return m_metadata;
}
void OAISupplierLocationDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISupplierLocationDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISupplierLocationDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAISupplierLocationDto::getVatRegistrationId() const {
    return m_vat_registration_id;
}
void OAISupplierLocationDto::setVatRegistrationId(const QString &vat_registration_id) {
    m_vat_registration_id = vat_registration_id;
    m_vat_registration_id_isSet = true;
}

bool OAISupplierLocationDto::is_vat_registration_id_Set() const{
    return m_vat_registration_id_isSet;
}

bool OAISupplierLocationDto::is_vat_registration_id_Valid() const{
    return m_vat_registration_id_isValid;
}

OAIVatZoneInSupplierLocationDto OAISupplierLocationDto::getVatZone() const {
    return m_vat_zone;
}
void OAISupplierLocationDto::setVatZone(const OAIVatZoneInSupplierLocationDto &vat_zone) {
    m_vat_zone = vat_zone;
    m_vat_zone_isSet = true;
}

bool OAISupplierLocationDto::is_vat_zone_Set() const{
    return m_vat_zone_isSet;
}

bool OAISupplierLocationDto::is_vat_zone_Valid() const{
    return m_vat_zone_isValid;
}

bool OAISupplierLocationDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_baccount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_corporate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edi_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gln_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_registration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupplierLocationDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
