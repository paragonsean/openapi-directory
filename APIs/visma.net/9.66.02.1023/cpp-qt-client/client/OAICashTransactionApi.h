/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICashTransactionApi_H
#define OAI_OAICashTransactionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAICashTransactionDto.h"
#include "OAICashTransactionUpdateDto.h"
#include "OAIObject.h"
#include "OAIReleaseCashTransactionActionResultDto.h"
#include "OAIReverseCashTransactionActionDto.h"
#include "OAIReverseCashTransactionActionResultDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICashTransactionApi : public QObject {
    Q_OBJECT

public:
    OAICashTransactionApi(const int timeOut = 0);
    ~OAICashTransactionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_cash_transaction_update_dto OAICashTransactionUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void cashTransactionCreateCashTransaction(const OAICashTransactionUpdateDto &oai_cash_transaction_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void cashTransactionGetAll(const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  reference_nbr QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void cashTransactionGetByreferenceNbr(const QString &reference_nbr, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  reference_nbr QString [required]
    * @param[in]  oai_cash_transaction_update_dto OAICashTransactionUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void cashTransactionPutByreferenceNbr(const QString &reference_nbr, const OAICashTransactionUpdateDto &oai_cash_transaction_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  reference_nbr QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void cashTransactionReleaseByreferenceNbr(const QString &reference_nbr, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  reference_nbr QString [required]
    * @param[in]  oai_reverse_cash_transaction_action_dto OAIReverseCashTransactionActionDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void cashTransactionReverseByreferenceNbr(const QString &reference_nbr, const OAIReverseCashTransactionActionDto &oai_reverse_cash_transaction_action_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cashTransactionCreateCashTransactionCallback(OAIHttpRequestWorker *worker);
    void cashTransactionGetAllCallback(OAIHttpRequestWorker *worker);
    void cashTransactionGetByreferenceNbrCallback(OAIHttpRequestWorker *worker);
    void cashTransactionPutByreferenceNbrCallback(OAIHttpRequestWorker *worker);
    void cashTransactionReleaseByreferenceNbrCallback(OAIHttpRequestWorker *worker);
    void cashTransactionReverseByreferenceNbrCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cashTransactionCreateCashTransactionSignal(OAIObject summary);
    void cashTransactionGetAllSignal(QList<OAICashTransactionDto> summary);
    void cashTransactionGetByreferenceNbrSignal(OAICashTransactionDto summary);
    void cashTransactionPutByreferenceNbrSignal(OAIBackgroundApiAcceptedDto summary);
    void cashTransactionReleaseByreferenceNbrSignal(OAIReleaseCashTransactionActionResultDto summary);
    void cashTransactionReverseByreferenceNbrSignal(OAIReverseCashTransactionActionResultDto summary);


    void cashTransactionCreateCashTransactionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void cashTransactionGetAllSignalFull(OAIHttpRequestWorker *worker, QList<OAICashTransactionDto> summary);
    void cashTransactionGetByreferenceNbrSignalFull(OAIHttpRequestWorker *worker, OAICashTransactionDto summary);
    void cashTransactionPutByreferenceNbrSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);
    void cashTransactionReleaseByreferenceNbrSignalFull(OAIHttpRequestWorker *worker, OAIReleaseCashTransactionActionResultDto summary);
    void cashTransactionReverseByreferenceNbrSignalFull(OAIHttpRequestWorker *worker, OAIReverseCashTransactionActionResultDto summary);

    Q_DECL_DEPRECATED_X("Use cashTransactionCreateCashTransactionSignalError() instead")
    void cashTransactionCreateCashTransactionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cashTransactionCreateCashTransactionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cashTransactionGetAllSignalError() instead")
    void cashTransactionGetAllSignalE(QList<OAICashTransactionDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cashTransactionGetAllSignalError(QList<OAICashTransactionDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cashTransactionGetByreferenceNbrSignalError() instead")
    void cashTransactionGetByreferenceNbrSignalE(OAICashTransactionDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cashTransactionGetByreferenceNbrSignalError(OAICashTransactionDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cashTransactionPutByreferenceNbrSignalError() instead")
    void cashTransactionPutByreferenceNbrSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cashTransactionPutByreferenceNbrSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cashTransactionReleaseByreferenceNbrSignalError() instead")
    void cashTransactionReleaseByreferenceNbrSignalE(OAIReleaseCashTransactionActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cashTransactionReleaseByreferenceNbrSignalError(OAIReleaseCashTransactionActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cashTransactionReverseByreferenceNbrSignalError() instead")
    void cashTransactionReverseByreferenceNbrSignalE(OAIReverseCashTransactionActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cashTransactionReverseByreferenceNbrSignalError(OAIReverseCashTransactionActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cashTransactionCreateCashTransactionSignalErrorFull() instead")
    void cashTransactionCreateCashTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cashTransactionCreateCashTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cashTransactionGetAllSignalErrorFull() instead")
    void cashTransactionGetAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cashTransactionGetAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cashTransactionGetByreferenceNbrSignalErrorFull() instead")
    void cashTransactionGetByreferenceNbrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cashTransactionGetByreferenceNbrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cashTransactionPutByreferenceNbrSignalErrorFull() instead")
    void cashTransactionPutByreferenceNbrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cashTransactionPutByreferenceNbrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cashTransactionReleaseByreferenceNbrSignalErrorFull() instead")
    void cashTransactionReleaseByreferenceNbrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cashTransactionReleaseByreferenceNbrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cashTransactionReverseByreferenceNbrSignalErrorFull() instead")
    void cashTransactionReverseByreferenceNbrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cashTransactionReverseByreferenceNbrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
