/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackagingTypeDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackagingTypeDto::OAIPackagingTypeDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackagingTypeDto::OAIPackagingTypeDto() {
    this->initializeModel();
}

OAIPackagingTypeDto::~OAIPackagingTypeDto() {}

void OAIPackagingTypeDto::initializeModel() {

    m_active_by_default_isSet = false;
    m_active_by_default_isValid = false;

    m_box_id_isSet = false;
    m_box_id_isValid = false;

    m_box_weight_isSet = false;
    m_box_weight_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_max_volume_isSet = false;
    m_max_volume_isValid = false;

    m_max_weight_isSet = false;
    m_max_weight_isValid = false;

    m_volume_uo_m_isSet = false;
    m_volume_uo_m_isValid = false;

    m_weight_uo_m_isSet = false;
    m_weight_uo_m_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIPackagingTypeDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackagingTypeDto::fromJsonObject(QJsonObject json) {

    m_active_by_default_isValid = ::OpenAPI::fromJsonValue(m_active_by_default, json[QString("activeByDefault")]);
    m_active_by_default_isSet = !json[QString("activeByDefault")].isNull() && m_active_by_default_isValid;

    m_box_id_isValid = ::OpenAPI::fromJsonValue(m_box_id, json[QString("boxId")]);
    m_box_id_isSet = !json[QString("boxId")].isNull() && m_box_id_isValid;

    m_box_weight_isValid = ::OpenAPI::fromJsonValue(m_box_weight, json[QString("boxWeight")]);
    m_box_weight_isSet = !json[QString("boxWeight")].isNull() && m_box_weight_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_max_volume_isValid = ::OpenAPI::fromJsonValue(m_max_volume, json[QString("maxVolume")]);
    m_max_volume_isSet = !json[QString("maxVolume")].isNull() && m_max_volume_isValid;

    m_max_weight_isValid = ::OpenAPI::fromJsonValue(m_max_weight, json[QString("maxWeight")]);
    m_max_weight_isSet = !json[QString("maxWeight")].isNull() && m_max_weight_isValid;

    m_volume_uo_m_isValid = ::OpenAPI::fromJsonValue(m_volume_uo_m, json[QString("volumeUoM")]);
    m_volume_uo_m_isSet = !json[QString("volumeUoM")].isNull() && m_volume_uo_m_isValid;

    m_weight_uo_m_isValid = ::OpenAPI::fromJsonValue(m_weight_uo_m, json[QString("weightUoM")]);
    m_weight_uo_m_isSet = !json[QString("weightUoM")].isNull() && m_weight_uo_m_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIPackagingTypeDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackagingTypeDto::asJsonObject() const {
    QJsonObject obj;
    if (m_active_by_default_isSet) {
        obj.insert(QString("activeByDefault"), ::OpenAPI::toJsonValue(m_active_by_default));
    }
    if (m_box_id_isSet) {
        obj.insert(QString("boxId"), ::OpenAPI::toJsonValue(m_box_id));
    }
    if (m_box_weight_isSet) {
        obj.insert(QString("boxWeight"), ::OpenAPI::toJsonValue(m_box_weight));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_max_volume_isSet) {
        obj.insert(QString("maxVolume"), ::OpenAPI::toJsonValue(m_max_volume));
    }
    if (m_max_weight_isSet) {
        obj.insert(QString("maxWeight"), ::OpenAPI::toJsonValue(m_max_weight));
    }
    if (m_volume_uo_m_isSet) {
        obj.insert(QString("volumeUoM"), ::OpenAPI::toJsonValue(m_volume_uo_m));
    }
    if (m_weight_uo_m_isSet) {
        obj.insert(QString("weightUoM"), ::OpenAPI::toJsonValue(m_weight_uo_m));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

bool OAIPackagingTypeDto::isActiveByDefault() const {
    return m_active_by_default;
}
void OAIPackagingTypeDto::setActiveByDefault(const bool &active_by_default) {
    m_active_by_default = active_by_default;
    m_active_by_default_isSet = true;
}

bool OAIPackagingTypeDto::is_active_by_default_Set() const{
    return m_active_by_default_isSet;
}

bool OAIPackagingTypeDto::is_active_by_default_Valid() const{
    return m_active_by_default_isValid;
}

QString OAIPackagingTypeDto::getBoxId() const {
    return m_box_id;
}
void OAIPackagingTypeDto::setBoxId(const QString &box_id) {
    m_box_id = box_id;
    m_box_id_isSet = true;
}

bool OAIPackagingTypeDto::is_box_id_Set() const{
    return m_box_id_isSet;
}

bool OAIPackagingTypeDto::is_box_id_Valid() const{
    return m_box_id_isValid;
}

double OAIPackagingTypeDto::getBoxWeight() const {
    return m_box_weight;
}
void OAIPackagingTypeDto::setBoxWeight(const double &box_weight) {
    m_box_weight = box_weight;
    m_box_weight_isSet = true;
}

bool OAIPackagingTypeDto::is_box_weight_Set() const{
    return m_box_weight_isSet;
}

bool OAIPackagingTypeDto::is_box_weight_Valid() const{
    return m_box_weight_isValid;
}

QString OAIPackagingTypeDto::getDescription() const {
    return m_description;
}
void OAIPackagingTypeDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPackagingTypeDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPackagingTypeDto::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIPackagingTypeDto::getHeight() const {
    return m_height;
}
void OAIPackagingTypeDto::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIPackagingTypeDto::is_height_Set() const{
    return m_height_isSet;
}

bool OAIPackagingTypeDto::is_height_Valid() const{
    return m_height_isValid;
}

QDateTime OAIPackagingTypeDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIPackagingTypeDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIPackagingTypeDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIPackagingTypeDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

qint32 OAIPackagingTypeDto::getLength() const {
    return m_length;
}
void OAIPackagingTypeDto::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIPackagingTypeDto::is_length_Set() const{
    return m_length_isSet;
}

bool OAIPackagingTypeDto::is_length_Valid() const{
    return m_length_isValid;
}

double OAIPackagingTypeDto::getMaxVolume() const {
    return m_max_volume;
}
void OAIPackagingTypeDto::setMaxVolume(const double &max_volume) {
    m_max_volume = max_volume;
    m_max_volume_isSet = true;
}

bool OAIPackagingTypeDto::is_max_volume_Set() const{
    return m_max_volume_isSet;
}

bool OAIPackagingTypeDto::is_max_volume_Valid() const{
    return m_max_volume_isValid;
}

double OAIPackagingTypeDto::getMaxWeight() const {
    return m_max_weight;
}
void OAIPackagingTypeDto::setMaxWeight(const double &max_weight) {
    m_max_weight = max_weight;
    m_max_weight_isSet = true;
}

bool OAIPackagingTypeDto::is_max_weight_Set() const{
    return m_max_weight_isSet;
}

bool OAIPackagingTypeDto::is_max_weight_Valid() const{
    return m_max_weight_isValid;
}

QString OAIPackagingTypeDto::getVolumeUoM() const {
    return m_volume_uo_m;
}
void OAIPackagingTypeDto::setVolumeUoM(const QString &volume_uo_m) {
    m_volume_uo_m = volume_uo_m;
    m_volume_uo_m_isSet = true;
}

bool OAIPackagingTypeDto::is_volume_uo_m_Set() const{
    return m_volume_uo_m_isSet;
}

bool OAIPackagingTypeDto::is_volume_uo_m_Valid() const{
    return m_volume_uo_m_isValid;
}

QString OAIPackagingTypeDto::getWeightUoM() const {
    return m_weight_uo_m;
}
void OAIPackagingTypeDto::setWeightUoM(const QString &weight_uo_m) {
    m_weight_uo_m = weight_uo_m;
    m_weight_uo_m_isSet = true;
}

bool OAIPackagingTypeDto::is_weight_uo_m_Set() const{
    return m_weight_uo_m_isSet;
}

bool OAIPackagingTypeDto::is_weight_uo_m_Valid() const{
    return m_weight_uo_m_isValid;
}

qint32 OAIPackagingTypeDto::getWidth() const {
    return m_width;
}
void OAIPackagingTypeDto::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIPackagingTypeDto::is_width_Set() const{
    return m_width_isSet;
}

bool OAIPackagingTypeDto::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIPackagingTypeDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_by_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_box_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_box_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_uo_m_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_uo_m_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackagingTypeDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
