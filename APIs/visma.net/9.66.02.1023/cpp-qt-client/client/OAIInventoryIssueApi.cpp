/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryIssueApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIInventoryIssueApi::OAIInventoryIssueApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIInventoryIssueApi::~OAIInventoryIssueApi() {
}

void OAIInventoryIssueApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("/API"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("inventoryIssueGetAll", defaultConf);
    _serverIndices.insert("inventoryIssueGetAll", 0);
    _serverConfigs.insert("inventoryIssueGetByinventoryIssueNumber", defaultConf);
    _serverIndices.insert("inventoryIssueGetByinventoryIssueNumber", 0);
    _serverConfigs.insert("inventoryIssuePost", defaultConf);
    _serverIndices.insert("inventoryIssuePost", 0);
    _serverConfigs.insert("inventoryIssuePutByinventoryIssueNumber", defaultConf);
    _serverIndices.insert("inventoryIssuePutByinventoryIssueNumber", 0);
    _serverConfigs.insert("inventoryIssueReleaseDocumentByinvoiceNumber", defaultConf);
    _serverIndices.insert("inventoryIssueReleaseDocumentByinvoiceNumber", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIInventoryIssueApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIInventoryIssueApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIInventoryIssueApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIInventoryIssueApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIInventoryIssueApi::setUsername(const QString &username) {
    _username = username;
}

void OAIInventoryIssueApi::setPassword(const QString &password) {
    _password = password;
}


void OAIInventoryIssueApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIInventoryIssueApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIInventoryIssueApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIInventoryIssueApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIInventoryIssueApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIInventoryIssueApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIInventoryIssueApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIInventoryIssueApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIInventoryIssueApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIInventoryIssueApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIInventoryIssueApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIInventoryIssueApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIInventoryIssueApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIInventoryIssueApi::inventoryIssueGetAll(const ::OpenAPI::OptionalParam<QString> &status, const ::OpenAPI::OptionalParam<QString> &greater_than_value, const ::OpenAPI::OptionalParam<qint32> &number_to_read, const ::OpenAPI::OptionalParam<qint32> &skip_records, const ::OpenAPI::OptionalParam<QString> &order_by, const ::OpenAPI::OptionalParam<QString> &last_modified_date_time, const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition, const ::OpenAPI::OptionalParam<qint32> &page_number, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<QString> &erp_api_background) {
    QString fullPath = QString(_serverConfigs["inventoryIssueGetAll"][_serverIndices.value("inventoryIssueGetAll")].URL()+"/controller/api/v1/inventoryissue");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (status.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "status", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("status")).append(querySuffix).append(QUrl::toPercentEncoding(status.stringValue()));
    }
    if (greater_than_value.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "greaterThanValue", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("greaterThanValue")).append(querySuffix).append(QUrl::toPercentEncoding(greater_than_value.stringValue()));
    }
    if (number_to_read.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "numberToRead", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("numberToRead")).append(querySuffix).append(QUrl::toPercentEncoding(number_to_read.stringValue()));
    }
    if (skip_records.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "skipRecords", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("skipRecords")).append(querySuffix).append(QUrl::toPercentEncoding(skip_records.stringValue()));
    }
    if (order_by.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "orderBy", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("orderBy")).append(querySuffix).append(QUrl::toPercentEncoding(order_by.stringValue()));
    }
    if (last_modified_date_time.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "lastModifiedDateTime", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("lastModifiedDateTime")).append(querySuffix).append(QUrl::toPercentEncoding(last_modified_date_time.stringValue()));
    }
    if (last_modified_date_time_condition.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "lastModifiedDateTimeCondition", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("lastModifiedDateTimeCondition")).append(querySuffix).append(QUrl::toPercentEncoding(last_modified_date_time_condition.stringValue()));
    }
    if (page_number.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "pageNumber", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("pageNumber")).append(querySuffix).append(QUrl::toPercentEncoding(page_number.stringValue()));
    }
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "pageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("pageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (erp_api_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(erp_api_background.value()).isEmpty()) {
            input.headers.insert("erp-api-background", ::OpenAPI::toStringValue(erp_api_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInventoryIssueApi::inventoryIssueGetAllCallback);
    connect(this, &OAIInventoryIssueApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("vismanet_erp_interactive_api:read");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInventoryIssueApi::inventoryIssueGetAllCallback);
    connect(this, &OAIInventoryIssueApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIInventoryIssueApi::inventoryIssueGetAllCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIInventoryIssueDto> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIInventoryIssueDto val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT inventoryIssueGetAllSignal(output);
        Q_EMIT inventoryIssueGetAllSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("vismanet_erp_interactive_api:read");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://connect.visma.com/connect/authorize");
        QString tokenUrl("https://connect.visma.com/connect/token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT inventoryIssueGetAllSignalE(output, error_type, error_str);
        Q_EMIT inventoryIssueGetAllSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT inventoryIssueGetAllSignalError(output, error_type, error_str);
        Q_EMIT inventoryIssueGetAllSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInventoryIssueApi::inventoryIssueGetByinventoryIssueNumber(const QString &inventory_issue_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background) {
    QString fullPath = QString(_serverConfigs["inventoryIssueGetByinventoryIssueNumber"][_serverIndices.value("inventoryIssueGetByinventoryIssueNumber")].URL()+"/controller/api/v1/inventoryissue/{inventoryIssueNumber}");
    
    
    {
        QString inventory_issue_numberPathParam("{");
        inventory_issue_numberPathParam.append("inventoryIssueNumber").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "inventoryIssueNumber", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"inventoryIssueNumber"+pathSuffix : pathPrefix;
        fullPath.replace(inventory_issue_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(inventory_issue_number)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (erp_api_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(erp_api_background.value()).isEmpty()) {
            input.headers.insert("erp-api-background", ::OpenAPI::toStringValue(erp_api_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInventoryIssueApi::inventoryIssueGetByinventoryIssueNumberCallback);
    connect(this, &OAIInventoryIssueApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("vismanet_erp_interactive_api:read");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInventoryIssueApi::inventoryIssueGetByinventoryIssueNumberCallback);
    connect(this, &OAIInventoryIssueApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIInventoryIssueApi::inventoryIssueGetByinventoryIssueNumberCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIInventoryIssueDto output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT inventoryIssueGetByinventoryIssueNumberSignal(output);
        Q_EMIT inventoryIssueGetByinventoryIssueNumberSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("vismanet_erp_interactive_api:read");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://connect.visma.com/connect/authorize");
        QString tokenUrl("https://connect.visma.com/connect/token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT inventoryIssueGetByinventoryIssueNumberSignalE(output, error_type, error_str);
        Q_EMIT inventoryIssueGetByinventoryIssueNumberSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT inventoryIssueGetByinventoryIssueNumberSignalError(output, error_type, error_str);
        Q_EMIT inventoryIssueGetByinventoryIssueNumberSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInventoryIssueApi::inventoryIssuePost(const OAIInventoryIssueUpdateDto &oai_inventory_issue_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background) {
    QString fullPath = QString(_serverConfigs["inventoryIssuePost"][_serverIndices.value("inventoryIssuePost")].URL()+"/controller/api/v1/inventoryissue");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_inventory_issue_update_dto.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (erp_api_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(erp_api_background.value()).isEmpty()) {
            input.headers.insert("erp-api-background", ::OpenAPI::toStringValue(erp_api_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInventoryIssueApi::inventoryIssuePostCallback);
    connect(this, &OAIInventoryIssueApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("vismanet_erp_interactive_api:create");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInventoryIssueApi::inventoryIssuePostCallback);
    connect(this, &OAIInventoryIssueApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIInventoryIssueApi::inventoryIssuePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT inventoryIssuePostSignal(output);
        Q_EMIT inventoryIssuePostSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("vismanet_erp_interactive_api:create");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://connect.visma.com/connect/authorize");
        QString tokenUrl("https://connect.visma.com/connect/token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT inventoryIssuePostSignalE(output, error_type, error_str);
        Q_EMIT inventoryIssuePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT inventoryIssuePostSignalError(output, error_type, error_str);
        Q_EMIT inventoryIssuePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInventoryIssueApi::inventoryIssuePutByinventoryIssueNumber(const QString &inventory_issue_number, const OAIInventoryIssueUpdateDto &oai_inventory_issue_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background) {
    QString fullPath = QString(_serverConfigs["inventoryIssuePutByinventoryIssueNumber"][_serverIndices.value("inventoryIssuePutByinventoryIssueNumber")].URL()+"/controller/api/v1/inventoryissue/{inventoryIssueNumber}");
    
    
    {
        QString inventory_issue_numberPathParam("{");
        inventory_issue_numberPathParam.append("inventoryIssueNumber").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "inventoryIssueNumber", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"inventoryIssueNumber"+pathSuffix : pathPrefix;
        fullPath.replace(inventory_issue_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(inventory_issue_number)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_inventory_issue_update_dto.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (erp_api_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(erp_api_background.value()).isEmpty()) {
            input.headers.insert("erp-api-background", ::OpenAPI::toStringValue(erp_api_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInventoryIssueApi::inventoryIssuePutByinventoryIssueNumberCallback);
    connect(this, &OAIInventoryIssueApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("vismanet_erp_interactive_api:update");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInventoryIssueApi::inventoryIssuePutByinventoryIssueNumberCallback);
    connect(this, &OAIInventoryIssueApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIInventoryIssueApi::inventoryIssuePutByinventoryIssueNumberCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBackgroundApiAcceptedDto output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT inventoryIssuePutByinventoryIssueNumberSignal(output);
        Q_EMIT inventoryIssuePutByinventoryIssueNumberSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("vismanet_erp_interactive_api:update");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://connect.visma.com/connect/authorize");
        QString tokenUrl("https://connect.visma.com/connect/token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT inventoryIssuePutByinventoryIssueNumberSignalE(output, error_type, error_str);
        Q_EMIT inventoryIssuePutByinventoryIssueNumberSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT inventoryIssuePutByinventoryIssueNumberSignalError(output, error_type, error_str);
        Q_EMIT inventoryIssuePutByinventoryIssueNumberSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInventoryIssueApi::inventoryIssueReleaseDocumentByinvoiceNumber(const QString &invoice_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background) {
    QString fullPath = QString(_serverConfigs["inventoryIssueReleaseDocumentByinvoiceNumber"][_serverIndices.value("inventoryIssueReleaseDocumentByinvoiceNumber")].URL()+"/controller/api/v1/inventoryissue/{invoiceNumber}/action/release");
    
    
    {
        QString invoice_numberPathParam("{");
        invoice_numberPathParam.append("invoiceNumber").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "invoiceNumber", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"invoiceNumber"+pathSuffix : pathPrefix;
        fullPath.replace(invoice_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(invoice_number)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (erp_api_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(erp_api_background.value()).isEmpty()) {
            input.headers.insert("erp-api-background", ::OpenAPI::toStringValue(erp_api_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInventoryIssueApi::inventoryIssueReleaseDocumentByinvoiceNumberCallback);
    connect(this, &OAIInventoryIssueApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("vismanet_erp_interactive_api:update");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInventoryIssueApi::inventoryIssueReleaseDocumentByinvoiceNumberCallback);
    connect(this, &OAIInventoryIssueApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIInventoryIssueApi::inventoryIssueReleaseDocumentByinvoiceNumberCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIReleaseInventoryDocumentActionResultDto output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT inventoryIssueReleaseDocumentByinvoiceNumberSignal(output);
        Q_EMIT inventoryIssueReleaseDocumentByinvoiceNumberSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("vismanet_erp_interactive_api:update");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://connect.visma.com/connect/authorize");
        QString tokenUrl("https://connect.visma.com/connect/token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT inventoryIssueReleaseDocumentByinvoiceNumberSignalE(output, error_type, error_str);
        Q_EMIT inventoryIssueReleaseDocumentByinvoiceNumberSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT inventoryIssueReleaseDocumentByinvoiceNumberSignalError(output, error_type, error_str);
        Q_EMIT inventoryIssueReleaseDocumentByinvoiceNumberSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInventoryIssueApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
