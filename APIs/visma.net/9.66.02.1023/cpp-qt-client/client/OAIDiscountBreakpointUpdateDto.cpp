/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscountBreakpointUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscountBreakpointUpdateDto::OAIDiscountBreakpointUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscountBreakpointUpdateDto::OAIDiscountBreakpointUpdateDto() {
    this->initializeModel();
}

OAIDiscountBreakpointUpdateDto::~OAIDiscountBreakpointUpdateDto() {}

void OAIDiscountBreakpointUpdateDto::initializeModel() {

    m_break_amount_isSet = false;
    m_break_amount_isValid = false;

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_discount_percent_isSet = false;
    m_discount_percent_isValid = false;

    m_line_nbr_isSet = false;
    m_line_nbr_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_pending_break_amount_isSet = false;
    m_pending_break_amount_isValid = false;

    m_pending_break_quantity_isSet = false;
    m_pending_break_quantity_isValid = false;

    m_pending_date_isSet = false;
    m_pending_date_isValid = false;

    m_pending_discount_amount_isSet = false;
    m_pending_discount_amount_isValid = false;

    m_pending_discount_percent_isSet = false;
    m_pending_discount_percent_isValid = false;
}

void OAIDiscountBreakpointUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiscountBreakpointUpdateDto::fromJsonObject(QJsonObject json) {

    m_break_amount_isValid = ::OpenAPI::fromJsonValue(m_break_amount, json[QString("breakAmount")]);
    m_break_amount_isSet = !json[QString("breakAmount")].isNull() && m_break_amount_isValid;

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("discountAmount")]);
    m_discount_amount_isSet = !json[QString("discountAmount")].isNull() && m_discount_amount_isValid;

    m_discount_percent_isValid = ::OpenAPI::fromJsonValue(m_discount_percent, json[QString("discountPercent")]);
    m_discount_percent_isSet = !json[QString("discountPercent")].isNull() && m_discount_percent_isValid;

    m_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_line_nbr, json[QString("lineNbr")]);
    m_line_nbr_isSet = !json[QString("lineNbr")].isNull() && m_line_nbr_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_pending_break_amount_isValid = ::OpenAPI::fromJsonValue(m_pending_break_amount, json[QString("pendingBreakAmount")]);
    m_pending_break_amount_isSet = !json[QString("pendingBreakAmount")].isNull() && m_pending_break_amount_isValid;

    m_pending_break_quantity_isValid = ::OpenAPI::fromJsonValue(m_pending_break_quantity, json[QString("pendingBreakQuantity")]);
    m_pending_break_quantity_isSet = !json[QString("pendingBreakQuantity")].isNull() && m_pending_break_quantity_isValid;

    m_pending_date_isValid = ::OpenAPI::fromJsonValue(m_pending_date, json[QString("pendingDate")]);
    m_pending_date_isSet = !json[QString("pendingDate")].isNull() && m_pending_date_isValid;

    m_pending_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_pending_discount_amount, json[QString("pendingDiscountAmount")]);
    m_pending_discount_amount_isSet = !json[QString("pendingDiscountAmount")].isNull() && m_pending_discount_amount_isValid;

    m_pending_discount_percent_isValid = ::OpenAPI::fromJsonValue(m_pending_discount_percent, json[QString("pendingDiscountPercent")]);
    m_pending_discount_percent_isSet = !json[QString("pendingDiscountPercent")].isNull() && m_pending_discount_percent_isValid;
}

QString OAIDiscountBreakpointUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiscountBreakpointUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_break_amount.isSet()) {
        obj.insert(QString("breakAmount"), ::OpenAPI::toJsonValue(m_break_amount));
    }
    if (m_discount_amount.isSet()) {
        obj.insert(QString("discountAmount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_discount_percent.isSet()) {
        obj.insert(QString("discountPercent"), ::OpenAPI::toJsonValue(m_discount_percent));
    }
    if (m_line_nbr.isSet()) {
        obj.insert(QString("lineNbr"), ::OpenAPI::toJsonValue(m_line_nbr));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_pending_break_amount.isSet()) {
        obj.insert(QString("pendingBreakAmount"), ::OpenAPI::toJsonValue(m_pending_break_amount));
    }
    if (m_pending_break_quantity.isSet()) {
        obj.insert(QString("pendingBreakQuantity"), ::OpenAPI::toJsonValue(m_pending_break_quantity));
    }
    if (m_pending_date.isSet()) {
        obj.insert(QString("pendingDate"), ::OpenAPI::toJsonValue(m_pending_date));
    }
    if (m_pending_discount_amount.isSet()) {
        obj.insert(QString("pendingDiscountAmount"), ::OpenAPI::toJsonValue(m_pending_discount_amount));
    }
    if (m_pending_discount_percent.isSet()) {
        obj.insert(QString("pendingDiscountPercent"), ::OpenAPI::toJsonValue(m_pending_discount_percent));
    }
    return obj;
}

OAIDtoValueOfNullableOfDecimal OAIDiscountBreakpointUpdateDto::getBreakAmount() const {
    return m_break_amount;
}
void OAIDiscountBreakpointUpdateDto::setBreakAmount(const OAIDtoValueOfNullableOfDecimal &break_amount) {
    m_break_amount = break_amount;
    m_break_amount_isSet = true;
}

bool OAIDiscountBreakpointUpdateDto::is_break_amount_Set() const{
    return m_break_amount_isSet;
}

bool OAIDiscountBreakpointUpdateDto::is_break_amount_Valid() const{
    return m_break_amount_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIDiscountBreakpointUpdateDto::getDiscountAmount() const {
    return m_discount_amount;
}
void OAIDiscountBreakpointUpdateDto::setDiscountAmount(const OAIDtoValueOfNullableOfDecimal &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAIDiscountBreakpointUpdateDto::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAIDiscountBreakpointUpdateDto::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIDiscountBreakpointUpdateDto::getDiscountPercent() const {
    return m_discount_percent;
}
void OAIDiscountBreakpointUpdateDto::setDiscountPercent(const OAIDtoValueOfNullableOfDecimal &discount_percent) {
    m_discount_percent = discount_percent;
    m_discount_percent_isSet = true;
}

bool OAIDiscountBreakpointUpdateDto::is_discount_percent_Set() const{
    return m_discount_percent_isSet;
}

bool OAIDiscountBreakpointUpdateDto::is_discount_percent_Valid() const{
    return m_discount_percent_isValid;
}

OAIDtoValueOfInt32 OAIDiscountBreakpointUpdateDto::getLineNbr() const {
    return m_line_nbr;
}
void OAIDiscountBreakpointUpdateDto::setLineNbr(const OAIDtoValueOfInt32 &line_nbr) {
    m_line_nbr = line_nbr;
    m_line_nbr_isSet = true;
}

bool OAIDiscountBreakpointUpdateDto::is_line_nbr_Set() const{
    return m_line_nbr_isSet;
}

bool OAIDiscountBreakpointUpdateDto::is_line_nbr_Valid() const{
    return m_line_nbr_isValid;
}

QString OAIDiscountBreakpointUpdateDto::getOperation() const {
    return m_operation;
}
void OAIDiscountBreakpointUpdateDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIDiscountBreakpointUpdateDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIDiscountBreakpointUpdateDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIDiscountBreakpointUpdateDto::getPendingBreakAmount() const {
    return m_pending_break_amount;
}
void OAIDiscountBreakpointUpdateDto::setPendingBreakAmount(const OAIDtoValueOfNullableOfDecimal &pending_break_amount) {
    m_pending_break_amount = pending_break_amount;
    m_pending_break_amount_isSet = true;
}

bool OAIDiscountBreakpointUpdateDto::is_pending_break_amount_Set() const{
    return m_pending_break_amount_isSet;
}

bool OAIDiscountBreakpointUpdateDto::is_pending_break_amount_Valid() const{
    return m_pending_break_amount_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIDiscountBreakpointUpdateDto::getPendingBreakQuantity() const {
    return m_pending_break_quantity;
}
void OAIDiscountBreakpointUpdateDto::setPendingBreakQuantity(const OAIDtoValueOfNullableOfDecimal &pending_break_quantity) {
    m_pending_break_quantity = pending_break_quantity;
    m_pending_break_quantity_isSet = true;
}

bool OAIDiscountBreakpointUpdateDto::is_pending_break_quantity_Set() const{
    return m_pending_break_quantity_isSet;
}

bool OAIDiscountBreakpointUpdateDto::is_pending_break_quantity_Valid() const{
    return m_pending_break_quantity_isValid;
}

OAIDtoValueOfNullableOfDateTime OAIDiscountBreakpointUpdateDto::getPendingDate() const {
    return m_pending_date;
}
void OAIDiscountBreakpointUpdateDto::setPendingDate(const OAIDtoValueOfNullableOfDateTime &pending_date) {
    m_pending_date = pending_date;
    m_pending_date_isSet = true;
}

bool OAIDiscountBreakpointUpdateDto::is_pending_date_Set() const{
    return m_pending_date_isSet;
}

bool OAIDiscountBreakpointUpdateDto::is_pending_date_Valid() const{
    return m_pending_date_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIDiscountBreakpointUpdateDto::getPendingDiscountAmount() const {
    return m_pending_discount_amount;
}
void OAIDiscountBreakpointUpdateDto::setPendingDiscountAmount(const OAIDtoValueOfNullableOfDecimal &pending_discount_amount) {
    m_pending_discount_amount = pending_discount_amount;
    m_pending_discount_amount_isSet = true;
}

bool OAIDiscountBreakpointUpdateDto::is_pending_discount_amount_Set() const{
    return m_pending_discount_amount_isSet;
}

bool OAIDiscountBreakpointUpdateDto::is_pending_discount_amount_Valid() const{
    return m_pending_discount_amount_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIDiscountBreakpointUpdateDto::getPendingDiscountPercent() const {
    return m_pending_discount_percent;
}
void OAIDiscountBreakpointUpdateDto::setPendingDiscountPercent(const OAIDtoValueOfNullableOfDecimal &pending_discount_percent) {
    m_pending_discount_percent = pending_discount_percent;
    m_pending_discount_percent_isSet = true;
}

bool OAIDiscountBreakpointUpdateDto::is_pending_discount_percent_Set() const{
    return m_pending_discount_percent_isSet;
}

bool OAIDiscountBreakpointUpdateDto::is_pending_discount_percent_Valid() const{
    return m_pending_discount_percent_isValid;
}

bool OAIDiscountBreakpointUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_break_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_percent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_break_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_break_quantity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_discount_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_discount_percent.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiscountBreakpointUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
