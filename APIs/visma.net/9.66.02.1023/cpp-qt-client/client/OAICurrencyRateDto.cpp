/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICurrencyRateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICurrencyRateDto::OAICurrencyRateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICurrencyRateDto::OAICurrencyRateDto() {
    this->initializeModel();
}

OAICurrencyRateDto::~OAICurrencyRateDto() {}

void OAICurrencyRateDto::initializeModel() {

    m_effective_date_isSet = false;
    m_effective_date_isValid = false;

    m_from_currency_id_isSet = false;
    m_from_currency_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mult_div_isSet = false;
    m_mult_div_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_rate_reciprocal_isSet = false;
    m_rate_reciprocal_isValid = false;

    m_rate_type_isSet = false;
    m_rate_type_isValid = false;

    m_to_currency_id_isSet = false;
    m_to_currency_id_isValid = false;
}

void OAICurrencyRateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICurrencyRateDto::fromJsonObject(QJsonObject json) {

    m_effective_date_isValid = ::OpenAPI::fromJsonValue(m_effective_date, json[QString("effectiveDate")]);
    m_effective_date_isSet = !json[QString("effectiveDate")].isNull() && m_effective_date_isValid;

    m_from_currency_id_isValid = ::OpenAPI::fromJsonValue(m_from_currency_id, json[QString("fromCurrencyId")]);
    m_from_currency_id_isSet = !json[QString("fromCurrencyId")].isNull() && m_from_currency_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mult_div_isValid = ::OpenAPI::fromJsonValue(m_mult_div, json[QString("multDiv")]);
    m_mult_div_isSet = !json[QString("multDiv")].isNull() && m_mult_div_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_rate_reciprocal_isValid = ::OpenAPI::fromJsonValue(m_rate_reciprocal, json[QString("rateReciprocal")]);
    m_rate_reciprocal_isSet = !json[QString("rateReciprocal")].isNull() && m_rate_reciprocal_isValid;

    m_rate_type_isValid = ::OpenAPI::fromJsonValue(m_rate_type, json[QString("rateType")]);
    m_rate_type_isSet = !json[QString("rateType")].isNull() && m_rate_type_isValid;

    m_to_currency_id_isValid = ::OpenAPI::fromJsonValue(m_to_currency_id, json[QString("toCurrencyId")]);
    m_to_currency_id_isSet = !json[QString("toCurrencyId")].isNull() && m_to_currency_id_isValid;
}

QString OAICurrencyRateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICurrencyRateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_effective_date_isSet) {
        obj.insert(QString("effectiveDate"), ::OpenAPI::toJsonValue(m_effective_date));
    }
    if (m_from_currency_id_isSet) {
        obj.insert(QString("fromCurrencyId"), ::OpenAPI::toJsonValue(m_from_currency_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mult_div_isSet) {
        obj.insert(QString("multDiv"), ::OpenAPI::toJsonValue(m_mult_div));
    }
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_rate_reciprocal_isSet) {
        obj.insert(QString("rateReciprocal"), ::OpenAPI::toJsonValue(m_rate_reciprocal));
    }
    if (m_rate_type_isSet) {
        obj.insert(QString("rateType"), ::OpenAPI::toJsonValue(m_rate_type));
    }
    if (m_to_currency_id_isSet) {
        obj.insert(QString("toCurrencyId"), ::OpenAPI::toJsonValue(m_to_currency_id));
    }
    return obj;
}

QDateTime OAICurrencyRateDto::getEffectiveDate() const {
    return m_effective_date;
}
void OAICurrencyRateDto::setEffectiveDate(const QDateTime &effective_date) {
    m_effective_date = effective_date;
    m_effective_date_isSet = true;
}

bool OAICurrencyRateDto::is_effective_date_Set() const{
    return m_effective_date_isSet;
}

bool OAICurrencyRateDto::is_effective_date_Valid() const{
    return m_effective_date_isValid;
}

QString OAICurrencyRateDto::getFromCurrencyId() const {
    return m_from_currency_id;
}
void OAICurrencyRateDto::setFromCurrencyId(const QString &from_currency_id) {
    m_from_currency_id = from_currency_id;
    m_from_currency_id_isSet = true;
}

bool OAICurrencyRateDto::is_from_currency_id_Set() const{
    return m_from_currency_id_isSet;
}

bool OAICurrencyRateDto::is_from_currency_id_Valid() const{
    return m_from_currency_id_isValid;
}

qint32 OAICurrencyRateDto::getId() const {
    return m_id;
}
void OAICurrencyRateDto::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICurrencyRateDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAICurrencyRateDto::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICurrencyRateDto::getMultDiv() const {
    return m_mult_div;
}
void OAICurrencyRateDto::setMultDiv(const QString &mult_div) {
    m_mult_div = mult_div;
    m_mult_div_isSet = true;
}

bool OAICurrencyRateDto::is_mult_div_Set() const{
    return m_mult_div_isSet;
}

bool OAICurrencyRateDto::is_mult_div_Valid() const{
    return m_mult_div_isValid;
}

double OAICurrencyRateDto::getRate() const {
    return m_rate;
}
void OAICurrencyRateDto::setRate(const double &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAICurrencyRateDto::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAICurrencyRateDto::is_rate_Valid() const{
    return m_rate_isValid;
}

double OAICurrencyRateDto::getRateReciprocal() const {
    return m_rate_reciprocal;
}
void OAICurrencyRateDto::setRateReciprocal(const double &rate_reciprocal) {
    m_rate_reciprocal = rate_reciprocal;
    m_rate_reciprocal_isSet = true;
}

bool OAICurrencyRateDto::is_rate_reciprocal_Set() const{
    return m_rate_reciprocal_isSet;
}

bool OAICurrencyRateDto::is_rate_reciprocal_Valid() const{
    return m_rate_reciprocal_isValid;
}

QString OAICurrencyRateDto::getRateType() const {
    return m_rate_type;
}
void OAICurrencyRateDto::setRateType(const QString &rate_type) {
    m_rate_type = rate_type;
    m_rate_type_isSet = true;
}

bool OAICurrencyRateDto::is_rate_type_Set() const{
    return m_rate_type_isSet;
}

bool OAICurrencyRateDto::is_rate_type_Valid() const{
    return m_rate_type_isValid;
}

QString OAICurrencyRateDto::getToCurrencyId() const {
    return m_to_currency_id;
}
void OAICurrencyRateDto::setToCurrencyId(const QString &to_currency_id) {
    m_to_currency_id = to_currency_id;
    m_to_currency_id_isSet = true;
}

bool OAICurrencyRateDto::is_to_currency_id_Set() const{
    return m_to_currency_id_isSet;
}

bool OAICurrencyRateDto::is_to_currency_id_Valid() const{
    return m_to_currency_id_isValid;
}

bool OAICurrencyRateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mult_div_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_reciprocal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICurrencyRateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
