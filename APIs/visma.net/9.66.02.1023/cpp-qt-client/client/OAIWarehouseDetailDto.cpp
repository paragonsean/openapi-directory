/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWarehouseDetailDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWarehouseDetailDto::OAIWarehouseDetailDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWarehouseDetailDto::OAIWarehouseDetailDto() {
    this->initializeModel();
}

OAIWarehouseDetailDto::~OAIWarehouseDetailDto() {}

void OAIWarehouseDetailDto::initializeModel() {

    m_available_isSet = false;
    m_available_isValid = false;

    m_available_for_shipment_isSet = false;
    m_available_for_shipment_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_quantity_on_hand_isSet = false;
    m_quantity_on_hand_isValid = false;

    m_warehouse_isSet = false;
    m_warehouse_isValid = false;
}

void OAIWarehouseDetailDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWarehouseDetailDto::fromJsonObject(QJsonObject json) {

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_available_for_shipment_isValid = ::OpenAPI::fromJsonValue(m_available_for_shipment, json[QString("availableForShipment")]);
    m_available_for_shipment_isSet = !json[QString("availableForShipment")].isNull() && m_available_for_shipment_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_quantity_on_hand_isValid = ::OpenAPI::fromJsonValue(m_quantity_on_hand, json[QString("quantityOnHand")]);
    m_quantity_on_hand_isSet = !json[QString("quantityOnHand")].isNull() && m_quantity_on_hand_isValid;

    m_warehouse_isValid = ::OpenAPI::fromJsonValue(m_warehouse, json[QString("warehouse")]);
    m_warehouse_isSet = !json[QString("warehouse")].isNull() && m_warehouse_isValid;
}

QString OAIWarehouseDetailDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWarehouseDetailDto::asJsonObject() const {
    QJsonObject obj;
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_available_for_shipment_isSet) {
        obj.insert(QString("availableForShipment"), ::OpenAPI::toJsonValue(m_available_for_shipment));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_quantity_on_hand_isSet) {
        obj.insert(QString("quantityOnHand"), ::OpenAPI::toJsonValue(m_quantity_on_hand));
    }
    if (m_warehouse_isSet) {
        obj.insert(QString("warehouse"), ::OpenAPI::toJsonValue(m_warehouse));
    }
    return obj;
}

double OAIWarehouseDetailDto::getAvailable() const {
    return m_available;
}
void OAIWarehouseDetailDto::setAvailable(const double &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAIWarehouseDetailDto::is_available_Set() const{
    return m_available_isSet;
}

bool OAIWarehouseDetailDto::is_available_Valid() const{
    return m_available_isValid;
}

double OAIWarehouseDetailDto::getAvailableForShipment() const {
    return m_available_for_shipment;
}
void OAIWarehouseDetailDto::setAvailableForShipment(const double &available_for_shipment) {
    m_available_for_shipment = available_for_shipment;
    m_available_for_shipment_isSet = true;
}

bool OAIWarehouseDetailDto::is_available_for_shipment_Set() const{
    return m_available_for_shipment_isSet;
}

bool OAIWarehouseDetailDto::is_available_for_shipment_Valid() const{
    return m_available_for_shipment_isValid;
}

bool OAIWarehouseDetailDto::isIsDefault() const {
    return m_is_default;
}
void OAIWarehouseDetailDto::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIWarehouseDetailDto::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIWarehouseDetailDto::is_is_default_Valid() const{
    return m_is_default_isValid;
}

QDateTime OAIWarehouseDetailDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIWarehouseDetailDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIWarehouseDetailDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIWarehouseDetailDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

double OAIWarehouseDetailDto::getQuantityOnHand() const {
    return m_quantity_on_hand;
}
void OAIWarehouseDetailDto::setQuantityOnHand(const double &quantity_on_hand) {
    m_quantity_on_hand = quantity_on_hand;
    m_quantity_on_hand_isSet = true;
}

bool OAIWarehouseDetailDto::is_quantity_on_hand_Set() const{
    return m_quantity_on_hand_isSet;
}

bool OAIWarehouseDetailDto::is_quantity_on_hand_Valid() const{
    return m_quantity_on_hand_isValid;
}

QString OAIWarehouseDetailDto::getWarehouse() const {
    return m_warehouse;
}
void OAIWarehouseDetailDto::setWarehouse(const QString &warehouse) {
    m_warehouse = warehouse;
    m_warehouse_isSet = true;
}

bool OAIWarehouseDetailDto::is_warehouse_Set() const{
    return m_warehouse_isSet;
}

bool OAIWarehouseDetailDto::is_warehouse_Valid() const{
    return m_warehouse_isValid;
}

bool OAIWarehouseDetailDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_for_shipment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_on_hand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWarehouseDetailDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
