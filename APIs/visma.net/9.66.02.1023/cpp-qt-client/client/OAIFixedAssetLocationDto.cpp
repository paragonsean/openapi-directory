/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFixedAssetLocationDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFixedAssetLocationDto::OAIFixedAssetLocationDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFixedAssetLocationDto::OAIFixedAssetLocationDto() {
    this->initializeModel();
}

OAIFixedAssetLocationDto::~OAIFixedAssetLocationDto() {}

void OAIFixedAssetLocationDto::initializeModel() {

    m_branch_id_isSet = false;
    m_branch_id_isValid = false;

    m_department_id_isSet = false;
    m_department_id_isValid = false;
}

void OAIFixedAssetLocationDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFixedAssetLocationDto::fromJsonObject(QJsonObject json) {

    m_branch_id_isValid = ::OpenAPI::fromJsonValue(m_branch_id, json[QString("branchID")]);
    m_branch_id_isSet = !json[QString("branchID")].isNull() && m_branch_id_isValid;

    m_department_id_isValid = ::OpenAPI::fromJsonValue(m_department_id, json[QString("departmentID")]);
    m_department_id_isSet = !json[QString("departmentID")].isNull() && m_department_id_isValid;
}

QString OAIFixedAssetLocationDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFixedAssetLocationDto::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_id_isSet) {
        obj.insert(QString("branchID"), ::OpenAPI::toJsonValue(m_branch_id));
    }
    if (m_department_id_isSet) {
        obj.insert(QString("departmentID"), ::OpenAPI::toJsonValue(m_department_id));
    }
    return obj;
}

QString OAIFixedAssetLocationDto::getBranchId() const {
    return m_branch_id;
}
void OAIFixedAssetLocationDto::setBranchId(const QString &branch_id) {
    m_branch_id = branch_id;
    m_branch_id_isSet = true;
}

bool OAIFixedAssetLocationDto::is_branch_id_Set() const{
    return m_branch_id_isSet;
}

bool OAIFixedAssetLocationDto::is_branch_id_Valid() const{
    return m_branch_id_isValid;
}

QString OAIFixedAssetLocationDto::getDepartmentId() const {
    return m_department_id;
}
void OAIFixedAssetLocationDto::setDepartmentId(const QString &department_id) {
    m_department_id = department_id;
    m_department_id_isSet = true;
}

bool OAIFixedAssetLocationDto::is_department_id_Set() const{
    return m_department_id_isSet;
}

bool OAIFixedAssetLocationDto::is_department_id_Valid() const{
    return m_department_id_isValid;
}

bool OAIFixedAssetLocationDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_department_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFixedAssetLocationDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
