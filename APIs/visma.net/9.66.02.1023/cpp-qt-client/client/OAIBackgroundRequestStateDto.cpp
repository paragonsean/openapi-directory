/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackgroundRequestStateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackgroundRequestStateDto::OAIBackgroundRequestStateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackgroundRequestStateDto::OAIBackgroundRequestStateDto() {
    this->initializeModel();
}

OAIBackgroundRequestStateDto::~OAIBackgroundRequestStateDto() {}

void OAIBackgroundRequestStateDto::initializeModel() {

    m_content_location_isSet = false;
    m_content_location_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_finished_utc_isSet = false;
    m_finished_utc_isValid = false;

    m_has_request_content_isSet = false;
    m_has_request_content_isValid = false;

    m_has_response_content_isSet = false;
    m_has_response_content_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_original_uri_isSet = false;
    m_original_uri_isValid = false;

    m_received_utc_isSet = false;
    m_received_utc_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_response_headers_isSet = false;
    m_response_headers_isValid = false;

    m_started_utc_isSet = false;
    m_started_utc_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_webhook_address_isSet = false;
    m_webhook_address_isValid = false;
}

void OAIBackgroundRequestStateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackgroundRequestStateDto::fromJsonObject(QJsonObject json) {

    m_content_location_isValid = ::OpenAPI::fromJsonValue(m_content_location, json[QString("contentLocation")]);
    m_content_location_isSet = !json[QString("contentLocation")].isNull() && m_content_location_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_finished_utc_isValid = ::OpenAPI::fromJsonValue(m_finished_utc, json[QString("finishedUtc")]);
    m_finished_utc_isSet = !json[QString("finishedUtc")].isNull() && m_finished_utc_isValid;

    m_has_request_content_isValid = ::OpenAPI::fromJsonValue(m_has_request_content, json[QString("hasRequestContent")]);
    m_has_request_content_isSet = !json[QString("hasRequestContent")].isNull() && m_has_request_content_isValid;

    m_has_response_content_isValid = ::OpenAPI::fromJsonValue(m_has_response_content, json[QString("hasResponseContent")]);
    m_has_response_content_isSet = !json[QString("hasResponseContent")].isNull() && m_has_response_content_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_original_uri_isValid = ::OpenAPI::fromJsonValue(m_original_uri, json[QString("originalUri")]);
    m_original_uri_isSet = !json[QString("originalUri")].isNull() && m_original_uri_isValid;

    m_received_utc_isValid = ::OpenAPI::fromJsonValue(m_received_utc, json[QString("receivedUtc")]);
    m_received_utc_isSet = !json[QString("receivedUtc")].isNull() && m_received_utc_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_response_headers_isValid = ::OpenAPI::fromJsonValue(m_response_headers, json[QString("responseHeaders")]);
    m_response_headers_isSet = !json[QString("responseHeaders")].isNull() && m_response_headers_isValid;

    m_started_utc_isValid = ::OpenAPI::fromJsonValue(m_started_utc, json[QString("startedUtc")]);
    m_started_utc_isSet = !json[QString("startedUtc")].isNull() && m_started_utc_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_webhook_address_isValid = ::OpenAPI::fromJsonValue(m_webhook_address, json[QString("webhookAddress")]);
    m_webhook_address_isSet = !json[QString("webhookAddress")].isNull() && m_webhook_address_isValid;
}

QString OAIBackgroundRequestStateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackgroundRequestStateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_content_location_isSet) {
        obj.insert(QString("contentLocation"), ::OpenAPI::toJsonValue(m_content_location));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_finished_utc_isSet) {
        obj.insert(QString("finishedUtc"), ::OpenAPI::toJsonValue(m_finished_utc));
    }
    if (m_has_request_content_isSet) {
        obj.insert(QString("hasRequestContent"), ::OpenAPI::toJsonValue(m_has_request_content));
    }
    if (m_has_response_content_isSet) {
        obj.insert(QString("hasResponseContent"), ::OpenAPI::toJsonValue(m_has_response_content));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_original_uri_isSet) {
        obj.insert(QString("originalUri"), ::OpenAPI::toJsonValue(m_original_uri));
    }
    if (m_received_utc_isSet) {
        obj.insert(QString("receivedUtc"), ::OpenAPI::toJsonValue(m_received_utc));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_response_headers.size() > 0) {
        obj.insert(QString("responseHeaders"), ::OpenAPI::toJsonValue(m_response_headers));
    }
    if (m_started_utc_isSet) {
        obj.insert(QString("startedUtc"), ::OpenAPI::toJsonValue(m_started_utc));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_webhook_address_isSet) {
        obj.insert(QString("webhookAddress"), ::OpenAPI::toJsonValue(m_webhook_address));
    }
    return obj;
}

QString OAIBackgroundRequestStateDto::getContentLocation() const {
    return m_content_location;
}
void OAIBackgroundRequestStateDto::setContentLocation(const QString &content_location) {
    m_content_location = content_location;
    m_content_location_isSet = true;
}

bool OAIBackgroundRequestStateDto::is_content_location_Set() const{
    return m_content_location_isSet;
}

bool OAIBackgroundRequestStateDto::is_content_location_Valid() const{
    return m_content_location_isValid;
}

QString OAIBackgroundRequestStateDto::getErrorMessage() const {
    return m_error_message;
}
void OAIBackgroundRequestStateDto::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIBackgroundRequestStateDto::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIBackgroundRequestStateDto::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QDateTime OAIBackgroundRequestStateDto::getFinishedUtc() const {
    return m_finished_utc;
}
void OAIBackgroundRequestStateDto::setFinishedUtc(const QDateTime &finished_utc) {
    m_finished_utc = finished_utc;
    m_finished_utc_isSet = true;
}

bool OAIBackgroundRequestStateDto::is_finished_utc_Set() const{
    return m_finished_utc_isSet;
}

bool OAIBackgroundRequestStateDto::is_finished_utc_Valid() const{
    return m_finished_utc_isValid;
}

bool OAIBackgroundRequestStateDto::isHasRequestContent() const {
    return m_has_request_content;
}
void OAIBackgroundRequestStateDto::setHasRequestContent(const bool &has_request_content) {
    m_has_request_content = has_request_content;
    m_has_request_content_isSet = true;
}

bool OAIBackgroundRequestStateDto::is_has_request_content_Set() const{
    return m_has_request_content_isSet;
}

bool OAIBackgroundRequestStateDto::is_has_request_content_Valid() const{
    return m_has_request_content_isValid;
}

bool OAIBackgroundRequestStateDto::isHasResponseContent() const {
    return m_has_response_content;
}
void OAIBackgroundRequestStateDto::setHasResponseContent(const bool &has_response_content) {
    m_has_response_content = has_response_content;
    m_has_response_content_isSet = true;
}

bool OAIBackgroundRequestStateDto::is_has_response_content_Set() const{
    return m_has_response_content_isSet;
}

bool OAIBackgroundRequestStateDto::is_has_response_content_Valid() const{
    return m_has_response_content_isValid;
}

QString OAIBackgroundRequestStateDto::getId() const {
    return m_id;
}
void OAIBackgroundRequestStateDto::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBackgroundRequestStateDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBackgroundRequestStateDto::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBackgroundRequestStateDto::getOriginalUri() const {
    return m_original_uri;
}
void OAIBackgroundRequestStateDto::setOriginalUri(const QString &original_uri) {
    m_original_uri = original_uri;
    m_original_uri_isSet = true;
}

bool OAIBackgroundRequestStateDto::is_original_uri_Set() const{
    return m_original_uri_isSet;
}

bool OAIBackgroundRequestStateDto::is_original_uri_Valid() const{
    return m_original_uri_isValid;
}

QDateTime OAIBackgroundRequestStateDto::getReceivedUtc() const {
    return m_received_utc;
}
void OAIBackgroundRequestStateDto::setReceivedUtc(const QDateTime &received_utc) {
    m_received_utc = received_utc;
    m_received_utc_isSet = true;
}

bool OAIBackgroundRequestStateDto::is_received_utc_Set() const{
    return m_received_utc_isSet;
}

bool OAIBackgroundRequestStateDto::is_received_utc_Valid() const{
    return m_received_utc_isValid;
}

QString OAIBackgroundRequestStateDto::getReference() const {
    return m_reference;
}
void OAIBackgroundRequestStateDto::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIBackgroundRequestStateDto::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIBackgroundRequestStateDto::is_reference_Valid() const{
    return m_reference_isValid;
}

QMap<QString, QString> OAIBackgroundRequestStateDto::getResponseHeaders() const {
    return m_response_headers;
}
void OAIBackgroundRequestStateDto::setResponseHeaders(const QMap<QString, QString> &response_headers) {
    m_response_headers = response_headers;
    m_response_headers_isSet = true;
}

bool OAIBackgroundRequestStateDto::is_response_headers_Set() const{
    return m_response_headers_isSet;
}

bool OAIBackgroundRequestStateDto::is_response_headers_Valid() const{
    return m_response_headers_isValid;
}

QDateTime OAIBackgroundRequestStateDto::getStartedUtc() const {
    return m_started_utc;
}
void OAIBackgroundRequestStateDto::setStartedUtc(const QDateTime &started_utc) {
    m_started_utc = started_utc;
    m_started_utc_isSet = true;
}

bool OAIBackgroundRequestStateDto::is_started_utc_Set() const{
    return m_started_utc_isSet;
}

bool OAIBackgroundRequestStateDto::is_started_utc_Valid() const{
    return m_started_utc_isValid;
}

QString OAIBackgroundRequestStateDto::getStatus() const {
    return m_status;
}
void OAIBackgroundRequestStateDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBackgroundRequestStateDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBackgroundRequestStateDto::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIBackgroundRequestStateDto::getStatusCode() const {
    return m_status_code;
}
void OAIBackgroundRequestStateDto::setStatusCode(const qint32 &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIBackgroundRequestStateDto::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIBackgroundRequestStateDto::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAIBackgroundRequestStateDto::getWebhookAddress() const {
    return m_webhook_address;
}
void OAIBackgroundRequestStateDto::setWebhookAddress(const QString &webhook_address) {
    m_webhook_address = webhook_address;
    m_webhook_address_isSet = true;
}

bool OAIBackgroundRequestStateDto::is_webhook_address_Set() const{
    return m_webhook_address_isSet;
}

bool OAIBackgroundRequestStateDto::is_webhook_address_Valid() const{
    return m_webhook_address_isValid;
}

bool OAIBackgroundRequestStateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_request_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_response_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackgroundRequestStateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
