/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetailsInCustomerContractDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetailsInCustomerContractDto::OAIDetailsInCustomerContractDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetailsInCustomerContractDto::OAIDetailsInCustomerContractDto() {
    this->initializeModel();
}

OAIDetailsInCustomerContractDto::~OAIDetailsInCustomerContractDto() {}

void OAIDetailsInCustomerContractDto::initializeModel() {

    m_current_recurring_isSet = false;
    m_current_recurring_isValid = false;

    m_current_renewal_isSet = false;
    m_current_renewal_isValid = false;

    m_current_setup_isSet = false;
    m_current_setup_isValid = false;

    m_effective_from_isSet = false;
    m_effective_from_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_pending_recurring_isSet = false;
    m_pending_recurring_isValid = false;

    m_pending_renewal_isSet = false;
    m_pending_renewal_isValid = false;

    m_pending_setup_isSet = false;
    m_pending_setup_isValid = false;

    m_promo_code_isSet = false;
    m_promo_code_isValid = false;

    m_total_pending_isSet = false;
    m_total_pending_isValid = false;
}

void OAIDetailsInCustomerContractDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetailsInCustomerContractDto::fromJsonObject(QJsonObject json) {

    m_current_recurring_isValid = ::OpenAPI::fromJsonValue(m_current_recurring, json[QString("currentRecurring")]);
    m_current_recurring_isSet = !json[QString("currentRecurring")].isNull() && m_current_recurring_isValid;

    m_current_renewal_isValid = ::OpenAPI::fromJsonValue(m_current_renewal, json[QString("currentRenewal")]);
    m_current_renewal_isSet = !json[QString("currentRenewal")].isNull() && m_current_renewal_isValid;

    m_current_setup_isValid = ::OpenAPI::fromJsonValue(m_current_setup, json[QString("currentSetup")]);
    m_current_setup_isSet = !json[QString("currentSetup")].isNull() && m_current_setup_isValid;

    m_effective_from_isValid = ::OpenAPI::fromJsonValue(m_effective_from, json[QString("effectiveFrom")]);
    m_effective_from_isSet = !json[QString("effectiveFrom")].isNull() && m_effective_from_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_pending_recurring_isValid = ::OpenAPI::fromJsonValue(m_pending_recurring, json[QString("pendingRecurring")]);
    m_pending_recurring_isSet = !json[QString("pendingRecurring")].isNull() && m_pending_recurring_isValid;

    m_pending_renewal_isValid = ::OpenAPI::fromJsonValue(m_pending_renewal, json[QString("pendingRenewal")]);
    m_pending_renewal_isSet = !json[QString("pendingRenewal")].isNull() && m_pending_renewal_isValid;

    m_pending_setup_isValid = ::OpenAPI::fromJsonValue(m_pending_setup, json[QString("pendingSetup")]);
    m_pending_setup_isSet = !json[QString("pendingSetup")].isNull() && m_pending_setup_isValid;

    m_promo_code_isValid = ::OpenAPI::fromJsonValue(m_promo_code, json[QString("promoCode")]);
    m_promo_code_isSet = !json[QString("promoCode")].isNull() && m_promo_code_isValid;

    m_total_pending_isValid = ::OpenAPI::fromJsonValue(m_total_pending, json[QString("totalPending")]);
    m_total_pending_isSet = !json[QString("totalPending")].isNull() && m_total_pending_isValid;
}

QString OAIDetailsInCustomerContractDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetailsInCustomerContractDto::asJsonObject() const {
    QJsonObject obj;
    if (m_current_recurring_isSet) {
        obj.insert(QString("currentRecurring"), ::OpenAPI::toJsonValue(m_current_recurring));
    }
    if (m_current_renewal_isSet) {
        obj.insert(QString("currentRenewal"), ::OpenAPI::toJsonValue(m_current_renewal));
    }
    if (m_current_setup_isSet) {
        obj.insert(QString("currentSetup"), ::OpenAPI::toJsonValue(m_current_setup));
    }
    if (m_effective_from_isSet) {
        obj.insert(QString("effectiveFrom"), ::OpenAPI::toJsonValue(m_effective_from));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_pending_recurring_isSet) {
        obj.insert(QString("pendingRecurring"), ::OpenAPI::toJsonValue(m_pending_recurring));
    }
    if (m_pending_renewal_isSet) {
        obj.insert(QString("pendingRenewal"), ::OpenAPI::toJsonValue(m_pending_renewal));
    }
    if (m_pending_setup_isSet) {
        obj.insert(QString("pendingSetup"), ::OpenAPI::toJsonValue(m_pending_setup));
    }
    if (m_promo_code.isSet()) {
        obj.insert(QString("promoCode"), ::OpenAPI::toJsonValue(m_promo_code));
    }
    if (m_total_pending_isSet) {
        obj.insert(QString("totalPending"), ::OpenAPI::toJsonValue(m_total_pending));
    }
    return obj;
}

double OAIDetailsInCustomerContractDto::getCurrentRecurring() const {
    return m_current_recurring;
}
void OAIDetailsInCustomerContractDto::setCurrentRecurring(const double &current_recurring) {
    m_current_recurring = current_recurring;
    m_current_recurring_isSet = true;
}

bool OAIDetailsInCustomerContractDto::is_current_recurring_Set() const{
    return m_current_recurring_isSet;
}

bool OAIDetailsInCustomerContractDto::is_current_recurring_Valid() const{
    return m_current_recurring_isValid;
}

double OAIDetailsInCustomerContractDto::getCurrentRenewal() const {
    return m_current_renewal;
}
void OAIDetailsInCustomerContractDto::setCurrentRenewal(const double &current_renewal) {
    m_current_renewal = current_renewal;
    m_current_renewal_isSet = true;
}

bool OAIDetailsInCustomerContractDto::is_current_renewal_Set() const{
    return m_current_renewal_isSet;
}

bool OAIDetailsInCustomerContractDto::is_current_renewal_Valid() const{
    return m_current_renewal_isValid;
}

double OAIDetailsInCustomerContractDto::getCurrentSetup() const {
    return m_current_setup;
}
void OAIDetailsInCustomerContractDto::setCurrentSetup(const double &current_setup) {
    m_current_setup = current_setup;
    m_current_setup_isSet = true;
}

bool OAIDetailsInCustomerContractDto::is_current_setup_Set() const{
    return m_current_setup_isSet;
}

bool OAIDetailsInCustomerContractDto::is_current_setup_Valid() const{
    return m_current_setup_isValid;
}

QDateTime OAIDetailsInCustomerContractDto::getEffectiveFrom() const {
    return m_effective_from;
}
void OAIDetailsInCustomerContractDto::setEffectiveFrom(const QDateTime &effective_from) {
    m_effective_from = effective_from;
    m_effective_from_isSet = true;
}

bool OAIDetailsInCustomerContractDto::is_effective_from_Set() const{
    return m_effective_from_isSet;
}

bool OAIDetailsInCustomerContractDto::is_effective_from_Valid() const{
    return m_effective_from_isValid;
}

QList<OAICustomerContractDetailsLineDto> OAIDetailsInCustomerContractDto::getLines() const {
    return m_lines;
}
void OAIDetailsInCustomerContractDto::setLines(const QList<OAICustomerContractDetailsLineDto> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAIDetailsInCustomerContractDto::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAIDetailsInCustomerContractDto::is_lines_Valid() const{
    return m_lines_isValid;
}

double OAIDetailsInCustomerContractDto::getPendingRecurring() const {
    return m_pending_recurring;
}
void OAIDetailsInCustomerContractDto::setPendingRecurring(const double &pending_recurring) {
    m_pending_recurring = pending_recurring;
    m_pending_recurring_isSet = true;
}

bool OAIDetailsInCustomerContractDto::is_pending_recurring_Set() const{
    return m_pending_recurring_isSet;
}

bool OAIDetailsInCustomerContractDto::is_pending_recurring_Valid() const{
    return m_pending_recurring_isValid;
}

double OAIDetailsInCustomerContractDto::getPendingRenewal() const {
    return m_pending_renewal;
}
void OAIDetailsInCustomerContractDto::setPendingRenewal(const double &pending_renewal) {
    m_pending_renewal = pending_renewal;
    m_pending_renewal_isSet = true;
}

bool OAIDetailsInCustomerContractDto::is_pending_renewal_Set() const{
    return m_pending_renewal_isSet;
}

bool OAIDetailsInCustomerContractDto::is_pending_renewal_Valid() const{
    return m_pending_renewal_isValid;
}

double OAIDetailsInCustomerContractDto::getPendingSetup() const {
    return m_pending_setup;
}
void OAIDetailsInCustomerContractDto::setPendingSetup(const double &pending_setup) {
    m_pending_setup = pending_setup;
    m_pending_setup_isSet = true;
}

bool OAIDetailsInCustomerContractDto::is_pending_setup_Set() const{
    return m_pending_setup_isSet;
}

bool OAIDetailsInCustomerContractDto::is_pending_setup_Valid() const{
    return m_pending_setup_isValid;
}

OAIPromoCodeIdDescriptionDto OAIDetailsInCustomerContractDto::getPromoCode() const {
    return m_promo_code;
}
void OAIDetailsInCustomerContractDto::setPromoCode(const OAIPromoCodeIdDescriptionDto &promo_code) {
    m_promo_code = promo_code;
    m_promo_code_isSet = true;
}

bool OAIDetailsInCustomerContractDto::is_promo_code_Set() const{
    return m_promo_code_isSet;
}

bool OAIDetailsInCustomerContractDto::is_promo_code_Valid() const{
    return m_promo_code_isValid;
}

double OAIDetailsInCustomerContractDto::getTotalPending() const {
    return m_total_pending;
}
void OAIDetailsInCustomerContractDto::setTotalPending(const double &total_pending) {
    m_total_pending = total_pending;
    m_total_pending_isSet = true;
}

bool OAIDetailsInCustomerContractDto::is_total_pending_Set() const{
    return m_total_pending_isSet;
}

bool OAIDetailsInCustomerContractDto::is_total_pending_Valid() const{
    return m_total_pending_isValid;
}

bool OAIDetailsInCustomerContractDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_recurring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_renewal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_setup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_recurring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_renewal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_setup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promo_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_pending_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetailsInCustomerContractDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
