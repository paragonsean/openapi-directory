/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVatCategoryLineDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVatCategoryLineDto::OAIVatCategoryLineDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVatCategoryLineDto::OAIVatCategoryLineDto() {
    this->initializeModel();
}

OAIVatCategoryLineDto::~OAIVatCategoryLineDto() {}

void OAIVatCategoryLineDto::initializeModel() {

    m_calculate_on_isSet = false;
    m_calculate_on_isValid = false;

    m_cash_discount_isSet = false;
    m_cash_discount_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vat_id_isSet = false;
    m_vat_id_isValid = false;

    m_vat_rates_isSet = false;
    m_vat_rates_isValid = false;
}

void OAIVatCategoryLineDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVatCategoryLineDto::fromJsonObject(QJsonObject json) {

    m_calculate_on_isValid = ::OpenAPI::fromJsonValue(m_calculate_on, json[QString("calculateOn")]);
    m_calculate_on_isSet = !json[QString("calculateOn")].isNull() && m_calculate_on_isValid;

    m_cash_discount_isValid = ::OpenAPI::fromJsonValue(m_cash_discount, json[QString("cashDiscount")]);
    m_cash_discount_isSet = !json[QString("cashDiscount")].isNull() && m_cash_discount_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vat_id_isValid = ::OpenAPI::fromJsonValue(m_vat_id, json[QString("vatId")]);
    m_vat_id_isSet = !json[QString("vatId")].isNull() && m_vat_id_isValid;

    m_vat_rates_isValid = ::OpenAPI::fromJsonValue(m_vat_rates, json[QString("vatRates")]);
    m_vat_rates_isSet = !json[QString("vatRates")].isNull() && m_vat_rates_isValid;
}

QString OAIVatCategoryLineDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVatCategoryLineDto::asJsonObject() const {
    QJsonObject obj;
    if (m_calculate_on_isSet) {
        obj.insert(QString("calculateOn"), ::OpenAPI::toJsonValue(m_calculate_on));
    }
    if (m_cash_discount_isSet) {
        obj.insert(QString("cashDiscount"), ::OpenAPI::toJsonValue(m_cash_discount));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vat_id_isSet) {
        obj.insert(QString("vatId"), ::OpenAPI::toJsonValue(m_vat_id));
    }
    if (m_vat_rates.size() > 0) {
        obj.insert(QString("vatRates"), ::OpenAPI::toJsonValue(m_vat_rates));
    }
    return obj;
}

QString OAIVatCategoryLineDto::getCalculateOn() const {
    return m_calculate_on;
}
void OAIVatCategoryLineDto::setCalculateOn(const QString &calculate_on) {
    m_calculate_on = calculate_on;
    m_calculate_on_isSet = true;
}

bool OAIVatCategoryLineDto::is_calculate_on_Set() const{
    return m_calculate_on_isSet;
}

bool OAIVatCategoryLineDto::is_calculate_on_Valid() const{
    return m_calculate_on_isValid;
}

QString OAIVatCategoryLineDto::getCashDiscount() const {
    return m_cash_discount;
}
void OAIVatCategoryLineDto::setCashDiscount(const QString &cash_discount) {
    m_cash_discount = cash_discount;
    m_cash_discount_isSet = true;
}

bool OAIVatCategoryLineDto::is_cash_discount_Set() const{
    return m_cash_discount_isSet;
}

bool OAIVatCategoryLineDto::is_cash_discount_Valid() const{
    return m_cash_discount_isValid;
}

QString OAIVatCategoryLineDto::getDescription() const {
    return m_description;
}
void OAIVatCategoryLineDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVatCategoryLineDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVatCategoryLineDto::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIVatCategoryLineDto::getType() const {
    return m_type;
}
void OAIVatCategoryLineDto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIVatCategoryLineDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAIVatCategoryLineDto::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIVatCategoryLineDto::getVatId() const {
    return m_vat_id;
}
void OAIVatCategoryLineDto::setVatId(const QString &vat_id) {
    m_vat_id = vat_id;
    m_vat_id_isSet = true;
}

bool OAIVatCategoryLineDto::is_vat_id_Set() const{
    return m_vat_id_isSet;
}

bool OAIVatCategoryLineDto::is_vat_id_Valid() const{
    return m_vat_id_isValid;
}

QList<OAIVatRateLineDto> OAIVatCategoryLineDto::getVatRates() const {
    return m_vat_rates;
}
void OAIVatCategoryLineDto::setVatRates(const QList<OAIVatRateLineDto> &vat_rates) {
    m_vat_rates = vat_rates;
    m_vat_rates_isSet = true;
}

bool OAIVatCategoryLineDto::is_vat_rates_Set() const{
    return m_vat_rates_isSet;
}

bool OAIVatCategoryLineDto::is_vat_rates_Valid() const{
    return m_vat_rates_isValid;
}

bool OAIVatCategoryLineDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calculate_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_rates.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVatCategoryLineDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
