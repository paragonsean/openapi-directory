/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerDto::OAICustomerDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerDto::OAICustomerDto() {
    this->initializeModel();
}

OAICustomerDto::~OAICustomerDto() {}

void OAICustomerDto::initializeModel() {

    m_address_line1_isSet = false;
    m_address_line1_isValid = false;

    m_address_line2_isSet = false;
    m_address_line2_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_customer_class_id_isSet = false;
    m_customer_class_id_isValid = false;

    m_default_location_isSet = false;
    m_default_location_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_internal_id_isSet = false;
    m_internal_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_salutation_isSet = false;
    m_salutation_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICustomerDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerDto::fromJsonObject(QJsonObject json) {

    m_address_line1_isValid = ::OpenAPI::fromJsonValue(m_address_line1, json[QString("addressLine1")]);
    m_address_line1_isSet = !json[QString("addressLine1")].isNull() && m_address_line1_isValid;

    m_address_line2_isValid = ::OpenAPI::fromJsonValue(m_address_line2, json[QString("addressLine2")]);
    m_address_line2_isSet = !json[QString("addressLine2")].isNull() && m_address_line2_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_customer_class_id_isValid = ::OpenAPI::fromJsonValue(m_customer_class_id, json[QString("customerClassId")]);
    m_customer_class_id_isSet = !json[QString("customerClassId")].isNull() && m_customer_class_id_isValid;

    m_default_location_isValid = ::OpenAPI::fromJsonValue(m_default_location, json[QString("defaultLocation")]);
    m_default_location_isSet = !json[QString("defaultLocation")].isNull() && m_default_location_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_internal_id_isValid = ::OpenAPI::fromJsonValue(m_internal_id, json[QString("internalId")]);
    m_internal_id_isSet = !json[QString("internalId")].isNull() && m_internal_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_salutation_isValid = ::OpenAPI::fromJsonValue(m_salutation, json[QString("salutation")]);
    m_salutation_isSet = !json[QString("salutation")].isNull() && m_salutation_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAICustomerDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerDto::asJsonObject() const {
    QJsonObject obj;
    if (m_address_line1_isSet) {
        obj.insert(QString("addressLine1"), ::OpenAPI::toJsonValue(m_address_line1));
    }
    if (m_address_line2_isSet) {
        obj.insert(QString("addressLine2"), ::OpenAPI::toJsonValue(m_address_line2));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_currency_id_isSet) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_customer_class_id_isSet) {
        obj.insert(QString("customerClassId"), ::OpenAPI::toJsonValue(m_customer_class_id));
    }
    if (m_default_location.isSet()) {
        obj.insert(QString("defaultLocation"), ::OpenAPI::toJsonValue(m_default_location));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_internal_id_isSet) {
        obj.insert(QString("internalId"), ::OpenAPI::toJsonValue(m_internal_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_salutation_isSet) {
        obj.insert(QString("salutation"), ::OpenAPI::toJsonValue(m_salutation));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAICustomerDto::getAddressLine1() const {
    return m_address_line1;
}
void OAICustomerDto::setAddressLine1(const QString &address_line1) {
    m_address_line1 = address_line1;
    m_address_line1_isSet = true;
}

bool OAICustomerDto::is_address_line1_Set() const{
    return m_address_line1_isSet;
}

bool OAICustomerDto::is_address_line1_Valid() const{
    return m_address_line1_isValid;
}

QString OAICustomerDto::getAddressLine2() const {
    return m_address_line2;
}
void OAICustomerDto::setAddressLine2(const QString &address_line2) {
    m_address_line2 = address_line2;
    m_address_line2_isSet = true;
}

bool OAICustomerDto::is_address_line2_Set() const{
    return m_address_line2_isSet;
}

bool OAICustomerDto::is_address_line2_Valid() const{
    return m_address_line2_isValid;
}

QString OAICustomerDto::getCountry() const {
    return m_country;
}
void OAICustomerDto::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAICustomerDto::is_country_Set() const{
    return m_country_isSet;
}

bool OAICustomerDto::is_country_Valid() const{
    return m_country_isValid;
}

QString OAICustomerDto::getCurrencyId() const {
    return m_currency_id;
}
void OAICustomerDto::setCurrencyId(const QString &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAICustomerDto::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAICustomerDto::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

QString OAICustomerDto::getCustomerClassId() const {
    return m_customer_class_id;
}
void OAICustomerDto::setCustomerClassId(const QString &customer_class_id) {
    m_customer_class_id = customer_class_id;
    m_customer_class_id_isSet = true;
}

bool OAICustomerDto::is_customer_class_id_Set() const{
    return m_customer_class_id_isSet;
}

bool OAICustomerDto::is_customer_class_id_Valid() const{
    return m_customer_class_id_isValid;
}

OAICustomerLocationDto OAICustomerDto::getDefaultLocation() const {
    return m_default_location;
}
void OAICustomerDto::setDefaultLocation(const OAICustomerLocationDto &default_location) {
    m_default_location = default_location;
    m_default_location_isSet = true;
}

bool OAICustomerDto::is_default_location_Set() const{
    return m_default_location_isSet;
}

bool OAICustomerDto::is_default_location_Valid() const{
    return m_default_location_isValid;
}

QString OAICustomerDto::getId() const {
    return m_id;
}
void OAICustomerDto::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICustomerDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAICustomerDto::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAICustomerDto::getInternalId() const {
    return m_internal_id;
}
void OAICustomerDto::setInternalId(const qint32 &internal_id) {
    m_internal_id = internal_id;
    m_internal_id_isSet = true;
}

bool OAICustomerDto::is_internal_id_Set() const{
    return m_internal_id_isSet;
}

bool OAICustomerDto::is_internal_id_Valid() const{
    return m_internal_id_isValid;
}

QString OAICustomerDto::getName() const {
    return m_name;
}
void OAICustomerDto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomerDto::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomerDto::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICustomerDto::getPostalCode() const {
    return m_postal_code;
}
void OAICustomerDto::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAICustomerDto::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAICustomerDto::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAICustomerDto::getSalutation() const {
    return m_salutation;
}
void OAICustomerDto::setSalutation(const QString &salutation) {
    m_salutation = salutation;
    m_salutation_isSet = true;
}

bool OAICustomerDto::is_salutation_Set() const{
    return m_salutation_isSet;
}

bool OAICustomerDto::is_salutation_Valid() const{
    return m_salutation_isValid;
}

QString OAICustomerDto::getStatus() const {
    return m_status;
}
void OAICustomerDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICustomerDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAICustomerDto::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICustomerDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_class_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_salutation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
