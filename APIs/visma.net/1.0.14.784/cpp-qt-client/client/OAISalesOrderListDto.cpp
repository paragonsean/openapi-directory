/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesOrderListDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesOrderListDto::OAISalesOrderListDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesOrderListDto::OAISalesOrderListDto() {
    this->initializeModel();
}

OAISalesOrderListDto::~OAISalesOrderListDto() {}

void OAISalesOrderListDto::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_customer_name_isSet = false;
    m_customer_name_isValid = false;

    m_customer_order_isSet = false;
    m_customer_order_isValid = false;

    m_customer_ref_no_isSet = false;
    m_customer_ref_no_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_order_qty_isSet = false;
    m_order_qty_isValid = false;

    m_order_total_isSet = false;
    m_order_total_isValid = false;

    m_request_on_isSet = false;
    m_request_on_isValid = false;

    m_shipping_scheduled_date_isSet = false;
    m_shipping_scheduled_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISalesOrderListDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesOrderListDto::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_customer_name_isValid = ::OpenAPI::fromJsonValue(m_customer_name, json[QString("customerName")]);
    m_customer_name_isSet = !json[QString("customerName")].isNull() && m_customer_name_isValid;

    m_customer_order_isValid = ::OpenAPI::fromJsonValue(m_customer_order, json[QString("customerOrder")]);
    m_customer_order_isSet = !json[QString("customerOrder")].isNull() && m_customer_order_isValid;

    m_customer_ref_no_isValid = ::OpenAPI::fromJsonValue(m_customer_ref_no, json[QString("customerRefNo")]);
    m_customer_ref_no_isSet = !json[QString("customerRefNo")].isNull() && m_customer_ref_no_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_order_qty_isValid = ::OpenAPI::fromJsonValue(m_order_qty, json[QString("orderQty")]);
    m_order_qty_isSet = !json[QString("orderQty")].isNull() && m_order_qty_isValid;

    m_order_total_isValid = ::OpenAPI::fromJsonValue(m_order_total, json[QString("orderTotal")]);
    m_order_total_isSet = !json[QString("orderTotal")].isNull() && m_order_total_isValid;

    m_request_on_isValid = ::OpenAPI::fromJsonValue(m_request_on, json[QString("requestOn")]);
    m_request_on_isSet = !json[QString("requestOn")].isNull() && m_request_on_isValid;

    m_shipping_scheduled_date_isValid = ::OpenAPI::fromJsonValue(m_shipping_scheduled_date, json[QString("shippingScheduledDate")]);
    m_shipping_scheduled_date_isSet = !json[QString("shippingScheduledDate")].isNull() && m_shipping_scheduled_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISalesOrderListDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesOrderListDto::asJsonObject() const {
    QJsonObject obj;
    if (m__links.size() > 0) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_customer_name_isSet) {
        obj.insert(QString("customerName"), ::OpenAPI::toJsonValue(m_customer_name));
    }
    if (m_customer_order_isSet) {
        obj.insert(QString("customerOrder"), ::OpenAPI::toJsonValue(m_customer_order));
    }
    if (m_customer_ref_no_isSet) {
        obj.insert(QString("customerRefNo"), ::OpenAPI::toJsonValue(m_customer_ref_no));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_order_qty_isSet) {
        obj.insert(QString("orderQty"), ::OpenAPI::toJsonValue(m_order_qty));
    }
    if (m_order_total_isSet) {
        obj.insert(QString("orderTotal"), ::OpenAPI::toJsonValue(m_order_total));
    }
    if (m_request_on_isSet) {
        obj.insert(QString("requestOn"), ::OpenAPI::toJsonValue(m_request_on));
    }
    if (m_shipping_scheduled_date_isSet) {
        obj.insert(QString("shippingScheduledDate"), ::OpenAPI::toJsonValue(m_shipping_scheduled_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QMap<QString, OAIDtoLink> OAISalesOrderListDto::getLinks() const {
    return m__links;
}
void OAISalesOrderListDto::setLinks(const QMap<QString, OAIDtoLink> &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAISalesOrderListDto::is__links_Set() const{
    return m__links_isSet;
}

bool OAISalesOrderListDto::is__links_Valid() const{
    return m__links_isValid;
}

QString OAISalesOrderListDto::getCurrency() const {
    return m_currency;
}
void OAISalesOrderListDto::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAISalesOrderListDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAISalesOrderListDto::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAISalesOrderListDto::getCustomerId() const {
    return m_customer_id;
}
void OAISalesOrderListDto::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAISalesOrderListDto::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAISalesOrderListDto::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAISalesOrderListDto::getCustomerName() const {
    return m_customer_name;
}
void OAISalesOrderListDto::setCustomerName(const QString &customer_name) {
    m_customer_name = customer_name;
    m_customer_name_isSet = true;
}

bool OAISalesOrderListDto::is_customer_name_Set() const{
    return m_customer_name_isSet;
}

bool OAISalesOrderListDto::is_customer_name_Valid() const{
    return m_customer_name_isValid;
}

QString OAISalesOrderListDto::getCustomerOrder() const {
    return m_customer_order;
}
void OAISalesOrderListDto::setCustomerOrder(const QString &customer_order) {
    m_customer_order = customer_order;
    m_customer_order_isSet = true;
}

bool OAISalesOrderListDto::is_customer_order_Set() const{
    return m_customer_order_isSet;
}

bool OAISalesOrderListDto::is_customer_order_Valid() const{
    return m_customer_order_isValid;
}

QString OAISalesOrderListDto::getCustomerRefNo() const {
    return m_customer_ref_no;
}
void OAISalesOrderListDto::setCustomerRefNo(const QString &customer_ref_no) {
    m_customer_ref_no = customer_ref_no;
    m_customer_ref_no_isSet = true;
}

bool OAISalesOrderListDto::is_customer_ref_no_Set() const{
    return m_customer_ref_no_isSet;
}

bool OAISalesOrderListDto::is_customer_ref_no_Valid() const{
    return m_customer_ref_no_isValid;
}

QDateTime OAISalesOrderListDto::getDate() const {
    return m_date;
}
void OAISalesOrderListDto::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAISalesOrderListDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAISalesOrderListDto::is_date_Valid() const{
    return m_date_isValid;
}

QString OAISalesOrderListDto::getDescription() const {
    return m_description;
}
void OAISalesOrderListDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISalesOrderListDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAISalesOrderListDto::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAISalesOrderListDto::getLastModified() const {
    return m_last_modified;
}
void OAISalesOrderListDto::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAISalesOrderListDto::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAISalesOrderListDto::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QString OAISalesOrderListDto::getLocation() const {
    return m_location;
}
void OAISalesOrderListDto::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAISalesOrderListDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAISalesOrderListDto::is_location_Valid() const{
    return m_location_isValid;
}

QString OAISalesOrderListDto::getOrderId() const {
    return m_order_id;
}
void OAISalesOrderListDto::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAISalesOrderListDto::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAISalesOrderListDto::is_order_id_Valid() const{
    return m_order_id_isValid;
}

double OAISalesOrderListDto::getOrderQty() const {
    return m_order_qty;
}
void OAISalesOrderListDto::setOrderQty(const double &order_qty) {
    m_order_qty = order_qty;
    m_order_qty_isSet = true;
}

bool OAISalesOrderListDto::is_order_qty_Set() const{
    return m_order_qty_isSet;
}

bool OAISalesOrderListDto::is_order_qty_Valid() const{
    return m_order_qty_isValid;
}

double OAISalesOrderListDto::getOrderTotal() const {
    return m_order_total;
}
void OAISalesOrderListDto::setOrderTotal(const double &order_total) {
    m_order_total = order_total;
    m_order_total_isSet = true;
}

bool OAISalesOrderListDto::is_order_total_Set() const{
    return m_order_total_isSet;
}

bool OAISalesOrderListDto::is_order_total_Valid() const{
    return m_order_total_isValid;
}

QDateTime OAISalesOrderListDto::getRequestOn() const {
    return m_request_on;
}
void OAISalesOrderListDto::setRequestOn(const QDateTime &request_on) {
    m_request_on = request_on;
    m_request_on_isSet = true;
}

bool OAISalesOrderListDto::is_request_on_Set() const{
    return m_request_on_isSet;
}

bool OAISalesOrderListDto::is_request_on_Valid() const{
    return m_request_on_isValid;
}

QDateTime OAISalesOrderListDto::getShippingScheduledDate() const {
    return m_shipping_scheduled_date;
}
void OAISalesOrderListDto::setShippingScheduledDate(const QDateTime &shipping_scheduled_date) {
    m_shipping_scheduled_date = shipping_scheduled_date;
    m_shipping_scheduled_date_isSet = true;
}

bool OAISalesOrderListDto::is_shipping_scheduled_date_Set() const{
    return m_shipping_scheduled_date_isSet;
}

bool OAISalesOrderListDto::is_shipping_scheduled_date_Valid() const{
    return m_shipping_scheduled_date_isValid;
}

QString OAISalesOrderListDto::getStatus() const {
    return m_status;
}
void OAISalesOrderListDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISalesOrderListDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAISalesOrderListDto::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISalesOrderListDto::getType() const {
    return m_type;
}
void OAISalesOrderListDto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISalesOrderListDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAISalesOrderListDto::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISalesOrderListDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_ref_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_scheduled_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesOrderListDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
