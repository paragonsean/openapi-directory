/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISalesOrdersApi_H
#define OAI_OAISalesOrdersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddSalesOrderLinesCommand.h"
#include "OAINewSalesOrderCommand.h"
#include "OAIPatchSalesOrderCommand.h"
#include "OAIPatchSalesOrderLinesCommand.h"
#include "OAIProblemDetails.h"
#include "OAISalesOrderCommissionDto.h"
#include "OAISalesOrderDiscountDto.h"
#include "OAISalesOrderDto.h"
#include "OAISalesOrderExpansions.h"
#include "OAISalesOrderLineDto.h"
#include "OAISalesOrderLineDtoPagedResult.h"
#include "OAISalesOrderListDtoPagedResult.h"
#include "OAISalesOrderRotRutDto.h"
#include "OAISalesOrderShipmentDto.h"
#include "OAISalesOrderTaxDto.h"
#include "OAISalesOrderValidationProblemDetails.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISalesOrdersApi : public QObject {
    Q_OBJECT

public:
    OAISalesOrdersApi(const int timeOut = 0);
    ~OAISalesOrdersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  type QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  oai_add_sales_order_lines_command OAIAddSalesOrderLinesCommand [optional]
    */
    virtual void salesOrdersAddLinesTypeorderIdlines(const QString &type, const QString &order_id, const ::OpenAPI::OptionalParam<OAIAddSalesOrderLinesCommand> &oai_add_sales_order_lines_command = ::OpenAPI::OptionalParam<OAIAddSalesOrderLinesCommand>());

    /**
    * @param[in]  oai_new_sales_order_command OAINewSalesOrderCommand [optional]
    */
    virtual void salesOrdersCreateNewItem(const ::OpenAPI::OptionalParam<OAINewSalesOrderCommand> &oai_new_sales_order_command = ::OpenAPI::OptionalParam<OAINewSalesOrderCommand>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  ids QList<qint32> [optional]
    */
    virtual void salesOrdersDeleteLinesTypeorderIdlines(const QString &type, const QString &order_id, const ::OpenAPI::OptionalParam<QList<qint32>> &ids = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void salesOrdersDeleteTypeorderId(const QString &type, const QString &order_id);

    /**
    * @param[in]  type QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  expand QList<OAISalesOrderExpansions> [optional]
    */
    virtual void salesOrdersGetItemAsyncTypeorderId(const QString &type, const QString &order_id, const ::OpenAPI::OptionalParam<QList<OAISalesOrderExpansions>> &expand = ::OpenAPI::OptionalParam<QList<OAISalesOrderExpansions>>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void salesOrdersGetItemCommissionsTypeorderIdcommissions(const QString &type, const QString &order_id);

    /**
    * @param[in]  type QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void salesOrdersGetItemDiscountsTypeorderIddiscounts(const QString &type, const QString &order_id);

    /**
    * @param[in]  type QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  line_id qint32 [required]
    */
    virtual void salesOrdersGetItemLineTypeorderIdlineslineId(const QString &type, const QString &order_id, const qint32 &line_id);

    /**
    * @param[in]  type QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_index qint32 [optional]
    */
    virtual void salesOrdersGetItemLinesTypeorderIdlines(const QString &type, const QString &order_id, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void salesOrdersGetItemRotRutTypeorderIdrotrut(const QString &type, const QString &order_id);

    /**
    * @param[in]  type QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void salesOrdersGetItemTaxTypeorderIdtax(const QString &type, const QString &order_id);

    /**
    * @param[in]  customer_id QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  modified_since QDateTime [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_index qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void salesOrdersGetList(const ::OpenAPI::OptionalParam<QString> &customer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &modified_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  customer_id QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  modified_since QDateTime [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_index qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void salesOrdersGetListType(const QString &type, const ::OpenAPI::OptionalParam<QString> &customer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &modified_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void salesOrdersGetSalesOrderShipmentTypeorderIdshipment(const QString &type, const QString &order_id);

    /**
    * @param[in]  type QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  oai_patch_sales_order_lines_command OAIPatchSalesOrderLinesCommand [optional]
    */
    virtual void salesOrdersPatchLinesTypeorderIdlines(const QString &type, const QString &order_id, const ::OpenAPI::OptionalParam<OAIPatchSalesOrderLinesCommand> &oai_patch_sales_order_lines_command = ::OpenAPI::OptionalParam<OAIPatchSalesOrderLinesCommand>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  oai_patch_sales_order_command OAIPatchSalesOrderCommand [optional]
    */
    virtual void salesOrdersPatchTypeorderId(const QString &type, const QString &order_id, const ::OpenAPI::OptionalParam<OAIPatchSalesOrderCommand> &oai_patch_sales_order_command = ::OpenAPI::OptionalParam<OAIPatchSalesOrderCommand>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void salesOrdersAddLinesTypeorderIdlinesCallback(OAIHttpRequestWorker *worker);
    void salesOrdersCreateNewItemCallback(OAIHttpRequestWorker *worker);
    void salesOrdersDeleteLinesTypeorderIdlinesCallback(OAIHttpRequestWorker *worker);
    void salesOrdersDeleteTypeorderIdCallback(OAIHttpRequestWorker *worker);
    void salesOrdersGetItemAsyncTypeorderIdCallback(OAIHttpRequestWorker *worker);
    void salesOrdersGetItemCommissionsTypeorderIdcommissionsCallback(OAIHttpRequestWorker *worker);
    void salesOrdersGetItemDiscountsTypeorderIddiscountsCallback(OAIHttpRequestWorker *worker);
    void salesOrdersGetItemLineTypeorderIdlineslineIdCallback(OAIHttpRequestWorker *worker);
    void salesOrdersGetItemLinesTypeorderIdlinesCallback(OAIHttpRequestWorker *worker);
    void salesOrdersGetItemRotRutTypeorderIdrotrutCallback(OAIHttpRequestWorker *worker);
    void salesOrdersGetItemTaxTypeorderIdtaxCallback(OAIHttpRequestWorker *worker);
    void salesOrdersGetListCallback(OAIHttpRequestWorker *worker);
    void salesOrdersGetListTypeCallback(OAIHttpRequestWorker *worker);
    void salesOrdersGetSalesOrderShipmentTypeorderIdshipmentCallback(OAIHttpRequestWorker *worker);
    void salesOrdersPatchLinesTypeorderIdlinesCallback(OAIHttpRequestWorker *worker);
    void salesOrdersPatchTypeorderIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void salesOrdersAddLinesTypeorderIdlinesSignal();
    void salesOrdersCreateNewItemSignal();
    void salesOrdersDeleteLinesTypeorderIdlinesSignal();
    void salesOrdersDeleteTypeorderIdSignal();
    void salesOrdersGetItemAsyncTypeorderIdSignal(OAISalesOrderDto summary);
    void salesOrdersGetItemCommissionsTypeorderIdcommissionsSignal(QList<OAISalesOrderCommissionDto> summary);
    void salesOrdersGetItemDiscountsTypeorderIddiscountsSignal(QList<OAISalesOrderDiscountDto> summary);
    void salesOrdersGetItemLineTypeorderIdlineslineIdSignal(OAISalesOrderLineDto summary);
    void salesOrdersGetItemLinesTypeorderIdlinesSignal(OAISalesOrderLineDtoPagedResult summary);
    void salesOrdersGetItemRotRutTypeorderIdrotrutSignal(OAISalesOrderRotRutDto summary);
    void salesOrdersGetItemTaxTypeorderIdtaxSignal(QList<OAISalesOrderTaxDto> summary);
    void salesOrdersGetListSignal(OAISalesOrderListDtoPagedResult summary);
    void salesOrdersGetListTypeSignal(OAISalesOrderListDtoPagedResult summary);
    void salesOrdersGetSalesOrderShipmentTypeorderIdshipmentSignal(QList<OAISalesOrderShipmentDto> summary);
    void salesOrdersPatchLinesTypeorderIdlinesSignal();
    void salesOrdersPatchTypeorderIdSignal();


    void salesOrdersAddLinesTypeorderIdlinesSignalFull(OAIHttpRequestWorker *worker);
    void salesOrdersCreateNewItemSignalFull(OAIHttpRequestWorker *worker);
    void salesOrdersDeleteLinesTypeorderIdlinesSignalFull(OAIHttpRequestWorker *worker);
    void salesOrdersDeleteTypeorderIdSignalFull(OAIHttpRequestWorker *worker);
    void salesOrdersGetItemAsyncTypeorderIdSignalFull(OAIHttpRequestWorker *worker, OAISalesOrderDto summary);
    void salesOrdersGetItemCommissionsTypeorderIdcommissionsSignalFull(OAIHttpRequestWorker *worker, QList<OAISalesOrderCommissionDto> summary);
    void salesOrdersGetItemDiscountsTypeorderIddiscountsSignalFull(OAIHttpRequestWorker *worker, QList<OAISalesOrderDiscountDto> summary);
    void salesOrdersGetItemLineTypeorderIdlineslineIdSignalFull(OAIHttpRequestWorker *worker, OAISalesOrderLineDto summary);
    void salesOrdersGetItemLinesTypeorderIdlinesSignalFull(OAIHttpRequestWorker *worker, OAISalesOrderLineDtoPagedResult summary);
    void salesOrdersGetItemRotRutTypeorderIdrotrutSignalFull(OAIHttpRequestWorker *worker, OAISalesOrderRotRutDto summary);
    void salesOrdersGetItemTaxTypeorderIdtaxSignalFull(OAIHttpRequestWorker *worker, QList<OAISalesOrderTaxDto> summary);
    void salesOrdersGetListSignalFull(OAIHttpRequestWorker *worker, OAISalesOrderListDtoPagedResult summary);
    void salesOrdersGetListTypeSignalFull(OAIHttpRequestWorker *worker, OAISalesOrderListDtoPagedResult summary);
    void salesOrdersGetSalesOrderShipmentTypeorderIdshipmentSignalFull(OAIHttpRequestWorker *worker, QList<OAISalesOrderShipmentDto> summary);
    void salesOrdersPatchLinesTypeorderIdlinesSignalFull(OAIHttpRequestWorker *worker);
    void salesOrdersPatchTypeorderIdSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use salesOrdersAddLinesTypeorderIdlinesSignalError() instead")
    void salesOrdersAddLinesTypeorderIdlinesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersAddLinesTypeorderIdlinesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersCreateNewItemSignalError() instead")
    void salesOrdersCreateNewItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersCreateNewItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersDeleteLinesTypeorderIdlinesSignalError() instead")
    void salesOrdersDeleteLinesTypeorderIdlinesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersDeleteLinesTypeorderIdlinesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersDeleteTypeorderIdSignalError() instead")
    void salesOrdersDeleteTypeorderIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersDeleteTypeorderIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersGetItemAsyncTypeorderIdSignalError() instead")
    void salesOrdersGetItemAsyncTypeorderIdSignalE(OAISalesOrderDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersGetItemAsyncTypeorderIdSignalError(OAISalesOrderDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersGetItemCommissionsTypeorderIdcommissionsSignalError() instead")
    void salesOrdersGetItemCommissionsTypeorderIdcommissionsSignalE(QList<OAISalesOrderCommissionDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersGetItemCommissionsTypeorderIdcommissionsSignalError(QList<OAISalesOrderCommissionDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersGetItemDiscountsTypeorderIddiscountsSignalError() instead")
    void salesOrdersGetItemDiscountsTypeorderIddiscountsSignalE(QList<OAISalesOrderDiscountDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersGetItemDiscountsTypeorderIddiscountsSignalError(QList<OAISalesOrderDiscountDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersGetItemLineTypeorderIdlineslineIdSignalError() instead")
    void salesOrdersGetItemLineTypeorderIdlineslineIdSignalE(OAISalesOrderLineDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersGetItemLineTypeorderIdlineslineIdSignalError(OAISalesOrderLineDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersGetItemLinesTypeorderIdlinesSignalError() instead")
    void salesOrdersGetItemLinesTypeorderIdlinesSignalE(OAISalesOrderLineDtoPagedResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersGetItemLinesTypeorderIdlinesSignalError(OAISalesOrderLineDtoPagedResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersGetItemRotRutTypeorderIdrotrutSignalError() instead")
    void salesOrdersGetItemRotRutTypeorderIdrotrutSignalE(OAISalesOrderRotRutDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersGetItemRotRutTypeorderIdrotrutSignalError(OAISalesOrderRotRutDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersGetItemTaxTypeorderIdtaxSignalError() instead")
    void salesOrdersGetItemTaxTypeorderIdtaxSignalE(QList<OAISalesOrderTaxDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersGetItemTaxTypeorderIdtaxSignalError(QList<OAISalesOrderTaxDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersGetListSignalError() instead")
    void salesOrdersGetListSignalE(OAISalesOrderListDtoPagedResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersGetListSignalError(OAISalesOrderListDtoPagedResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersGetListTypeSignalError() instead")
    void salesOrdersGetListTypeSignalE(OAISalesOrderListDtoPagedResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersGetListTypeSignalError(OAISalesOrderListDtoPagedResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersGetSalesOrderShipmentTypeorderIdshipmentSignalError() instead")
    void salesOrdersGetSalesOrderShipmentTypeorderIdshipmentSignalE(QList<OAISalesOrderShipmentDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersGetSalesOrderShipmentTypeorderIdshipmentSignalError(QList<OAISalesOrderShipmentDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersPatchLinesTypeorderIdlinesSignalError() instead")
    void salesOrdersPatchLinesTypeorderIdlinesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersPatchLinesTypeorderIdlinesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersPatchTypeorderIdSignalError() instead")
    void salesOrdersPatchTypeorderIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersPatchTypeorderIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use salesOrdersAddLinesTypeorderIdlinesSignalErrorFull() instead")
    void salesOrdersAddLinesTypeorderIdlinesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersAddLinesTypeorderIdlinesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersCreateNewItemSignalErrorFull() instead")
    void salesOrdersCreateNewItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersCreateNewItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersDeleteLinesTypeorderIdlinesSignalErrorFull() instead")
    void salesOrdersDeleteLinesTypeorderIdlinesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersDeleteLinesTypeorderIdlinesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersDeleteTypeorderIdSignalErrorFull() instead")
    void salesOrdersDeleteTypeorderIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersDeleteTypeorderIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersGetItemAsyncTypeorderIdSignalErrorFull() instead")
    void salesOrdersGetItemAsyncTypeorderIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersGetItemAsyncTypeorderIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersGetItemCommissionsTypeorderIdcommissionsSignalErrorFull() instead")
    void salesOrdersGetItemCommissionsTypeorderIdcommissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersGetItemCommissionsTypeorderIdcommissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersGetItemDiscountsTypeorderIddiscountsSignalErrorFull() instead")
    void salesOrdersGetItemDiscountsTypeorderIddiscountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersGetItemDiscountsTypeorderIddiscountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersGetItemLineTypeorderIdlineslineIdSignalErrorFull() instead")
    void salesOrdersGetItemLineTypeorderIdlineslineIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersGetItemLineTypeorderIdlineslineIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersGetItemLinesTypeorderIdlinesSignalErrorFull() instead")
    void salesOrdersGetItemLinesTypeorderIdlinesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersGetItemLinesTypeorderIdlinesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersGetItemRotRutTypeorderIdrotrutSignalErrorFull() instead")
    void salesOrdersGetItemRotRutTypeorderIdrotrutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersGetItemRotRutTypeorderIdrotrutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersGetItemTaxTypeorderIdtaxSignalErrorFull() instead")
    void salesOrdersGetItemTaxTypeorderIdtaxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersGetItemTaxTypeorderIdtaxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersGetListSignalErrorFull() instead")
    void salesOrdersGetListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersGetListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersGetListTypeSignalErrorFull() instead")
    void salesOrdersGetListTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersGetListTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersGetSalesOrderShipmentTypeorderIdshipmentSignalErrorFull() instead")
    void salesOrdersGetSalesOrderShipmentTypeorderIdshipmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersGetSalesOrderShipmentTypeorderIdshipmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersPatchLinesTypeorderIdlinesSignalErrorFull() instead")
    void salesOrdersPatchLinesTypeorderIdlinesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersPatchLinesTypeorderIdlinesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrdersPatchTypeorderIdSignalErrorFull() instead")
    void salesOrdersPatchTypeorderIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrdersPatchTypeorderIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
