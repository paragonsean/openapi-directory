/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISalesOrderTaxDto.h
 *
 * The Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderTaxDto specifies a tax line detail for a sales order
 */

#ifndef OAISalesOrderTaxDto_H
#define OAISalesOrderTaxDto_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISalesOrderTaxDto : public OAIObject {
public:
    OAISalesOrderTaxDto();
    OAISalesOrderTaxDto(QString json);
    ~OAISalesOrderTaxDto() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isExemptTax() const;
    void setExemptTax(const bool &exempt_tax);
    bool is_exempt_tax_Set() const;
    bool is_exempt_tax_Valid() const;

    bool isIncludeInTaxable() const;
    void setIncludeInTaxable(const bool &include_in_taxable);
    bool is_include_in_taxable_Set() const;
    bool is_include_in_taxable_Valid() const;

    bool isIsPendingTax() const;
    void setIsPendingTax(const bool &is_pending_tax);
    bool is_is_pending_tax_Set() const;
    bool is_is_pending_tax_Valid() const;

    bool isIsReverseTax() const;
    void setIsReverseTax(const bool &is_reverse_tax);
    bool is_is_reverse_tax_Set() const;
    bool is_is_reverse_tax_Valid() const;

    bool isIsStatisticalTax() const;
    void setIsStatisticalTax(const bool &is_statistical_tax);
    bool is_is_statistical_tax_Set() const;
    bool is_is_statistical_tax_Valid() const;

    double getTaxAmount() const;
    void setTaxAmount(const double &tax_amount);
    bool is_tax_amount_Set() const;
    bool is_tax_amount_Valid() const;

    QString getTaxId() const;
    void setTaxId(const QString &tax_id);
    bool is_tax_id_Set() const;
    bool is_tax_id_Valid() const;

    double getTaxRate() const;
    void setTaxRate(const double &tax_rate);
    bool is_tax_rate_Set() const;
    bool is_tax_rate_Valid() const;

    QString getTaxType() const;
    void setTaxType(const QString &tax_type);
    bool is_tax_type_Set() const;
    bool is_tax_type_Valid() const;

    double getTaxableAmount() const;
    void setTaxableAmount(const double &taxable_amount);
    bool is_taxable_amount_Set() const;
    bool is_taxable_amount_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_exempt_tax;
    bool m_exempt_tax_isSet;
    bool m_exempt_tax_isValid;

    bool m_include_in_taxable;
    bool m_include_in_taxable_isSet;
    bool m_include_in_taxable_isValid;

    bool m_is_pending_tax;
    bool m_is_pending_tax_isSet;
    bool m_is_pending_tax_isValid;

    bool m_is_reverse_tax;
    bool m_is_reverse_tax_isSet;
    bool m_is_reverse_tax_isValid;

    bool m_is_statistical_tax;
    bool m_is_statistical_tax_isSet;
    bool m_is_statistical_tax_isValid;

    double m_tax_amount;
    bool m_tax_amount_isSet;
    bool m_tax_amount_isValid;

    QString m_tax_id;
    bool m_tax_id_isSet;
    bool m_tax_id_isValid;

    double m_tax_rate;
    bool m_tax_rate_isSet;
    bool m_tax_rate_isValid;

    QString m_tax_type;
    bool m_tax_type_isSet;
    bool m_tax_type_isValid;

    double m_taxable_amount;
    bool m_taxable_amount_isSet;
    bool m_taxable_amount_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISalesOrderTaxDto)

#endif // OAISalesOrderTaxDto_H
