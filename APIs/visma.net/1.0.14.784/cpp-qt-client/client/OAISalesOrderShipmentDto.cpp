/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesOrderShipmentDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesOrderShipmentDto::OAISalesOrderShipmentDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesOrderShipmentDto::OAISalesOrderShipmentDto() {
    this->initializeModel();
}

OAISalesOrderShipmentDto::~OAISalesOrderShipmentDto() {}

void OAISalesOrderShipmentDto::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_inventory_document_type_isSet = false;
    m_inventory_document_type_isValid = false;

    m_inventory_reference_id_isSet = false;
    m_inventory_reference_id_isValid = false;

    m_invoice_id_isSet = false;
    m_invoice_id_isValid = false;

    m_invoice_type_isSet = false;
    m_invoice_type_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_volume_isSet = false;
    m_volume_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAISalesOrderShipmentDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesOrderShipmentDto::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_inventory_document_type_isValid = ::OpenAPI::fromJsonValue(m_inventory_document_type, json[QString("inventoryDocumentType")]);
    m_inventory_document_type_isSet = !json[QString("inventoryDocumentType")].isNull() && m_inventory_document_type_isValid;

    m_inventory_reference_id_isValid = ::OpenAPI::fromJsonValue(m_inventory_reference_id, json[QString("inventoryReferenceId")]);
    m_inventory_reference_id_isSet = !json[QString("inventoryReferenceId")].isNull() && m_inventory_reference_id_isValid;

    m_invoice_id_isValid = ::OpenAPI::fromJsonValue(m_invoice_id, json[QString("invoiceId")]);
    m_invoice_id_isSet = !json[QString("invoiceId")].isNull() && m_invoice_id_isValid;

    m_invoice_type_isValid = ::OpenAPI::fromJsonValue(m_invoice_type, json[QString("invoiceType")]);
    m_invoice_type_isSet = !json[QString("invoiceType")].isNull() && m_invoice_type_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_volume_isValid = ::OpenAPI::fromJsonValue(m_volume, json[QString("volume")]);
    m_volume_isSet = !json[QString("volume")].isNull() && m_volume_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAISalesOrderShipmentDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesOrderShipmentDto::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_inventory_document_type_isSet) {
        obj.insert(QString("inventoryDocumentType"), ::OpenAPI::toJsonValue(m_inventory_document_type));
    }
    if (m_inventory_reference_id_isSet) {
        obj.insert(QString("inventoryReferenceId"), ::OpenAPI::toJsonValue(m_inventory_reference_id));
    }
    if (m_invoice_id_isSet) {
        obj.insert(QString("invoiceId"), ::OpenAPI::toJsonValue(m_invoice_id));
    }
    if (m_invoice_type_isSet) {
        obj.insert(QString("invoiceType"), ::OpenAPI::toJsonValue(m_invoice_type));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_volume_isSet) {
        obj.insert(QString("volume"), ::OpenAPI::toJsonValue(m_volume));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QDateTime OAISalesOrderShipmentDto::getDate() const {
    return m_date;
}
void OAISalesOrderShipmentDto::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAISalesOrderShipmentDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAISalesOrderShipmentDto::is_date_Valid() const{
    return m_date_isValid;
}

QString OAISalesOrderShipmentDto::getId() const {
    return m_id;
}
void OAISalesOrderShipmentDto::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISalesOrderShipmentDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAISalesOrderShipmentDto::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISalesOrderShipmentDto::getInventoryDocumentType() const {
    return m_inventory_document_type;
}
void OAISalesOrderShipmentDto::setInventoryDocumentType(const QString &inventory_document_type) {
    m_inventory_document_type = inventory_document_type;
    m_inventory_document_type_isSet = true;
}

bool OAISalesOrderShipmentDto::is_inventory_document_type_Set() const{
    return m_inventory_document_type_isSet;
}

bool OAISalesOrderShipmentDto::is_inventory_document_type_Valid() const{
    return m_inventory_document_type_isValid;
}

QString OAISalesOrderShipmentDto::getInventoryReferenceId() const {
    return m_inventory_reference_id;
}
void OAISalesOrderShipmentDto::setInventoryReferenceId(const QString &inventory_reference_id) {
    m_inventory_reference_id = inventory_reference_id;
    m_inventory_reference_id_isSet = true;
}

bool OAISalesOrderShipmentDto::is_inventory_reference_id_Set() const{
    return m_inventory_reference_id_isSet;
}

bool OAISalesOrderShipmentDto::is_inventory_reference_id_Valid() const{
    return m_inventory_reference_id_isValid;
}

QString OAISalesOrderShipmentDto::getInvoiceId() const {
    return m_invoice_id;
}
void OAISalesOrderShipmentDto::setInvoiceId(const QString &invoice_id) {
    m_invoice_id = invoice_id;
    m_invoice_id_isSet = true;
}

bool OAISalesOrderShipmentDto::is_invoice_id_Set() const{
    return m_invoice_id_isSet;
}

bool OAISalesOrderShipmentDto::is_invoice_id_Valid() const{
    return m_invoice_id_isValid;
}

QString OAISalesOrderShipmentDto::getInvoiceType() const {
    return m_invoice_type;
}
void OAISalesOrderShipmentDto::setInvoiceType(const QString &invoice_type) {
    m_invoice_type = invoice_type;
    m_invoice_type_isSet = true;
}

bool OAISalesOrderShipmentDto::is_invoice_type_Set() const{
    return m_invoice_type_isSet;
}

bool OAISalesOrderShipmentDto::is_invoice_type_Valid() const{
    return m_invoice_type_isValid;
}

double OAISalesOrderShipmentDto::getQuantity() const {
    return m_quantity;
}
void OAISalesOrderShipmentDto::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAISalesOrderShipmentDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAISalesOrderShipmentDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAISalesOrderShipmentDto::getType() const {
    return m_type;
}
void OAISalesOrderShipmentDto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISalesOrderShipmentDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAISalesOrderShipmentDto::is_type_Valid() const{
    return m_type_isValid;
}

double OAISalesOrderShipmentDto::getVolume() const {
    return m_volume;
}
void OAISalesOrderShipmentDto::setVolume(const double &volume) {
    m_volume = volume;
    m_volume_isSet = true;
}

bool OAISalesOrderShipmentDto::is_volume_Set() const{
    return m_volume_isSet;
}

bool OAISalesOrderShipmentDto::is_volume_Valid() const{
    return m_volume_isValid;
}

double OAISalesOrderShipmentDto::getWeight() const {
    return m_weight;
}
void OAISalesOrderShipmentDto::setWeight(const double &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAISalesOrderShipmentDto::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAISalesOrderShipmentDto::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAISalesOrderShipmentDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesOrderShipmentDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
