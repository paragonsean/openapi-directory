/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesOrderTotalsDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesOrderTotalsDto::OAISalesOrderTotalsDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesOrderTotalsDto::OAISalesOrderTotalsDto() {
    this->initializeModel();
}

OAISalesOrderTotalsDto::~OAISalesOrderTotalsDto() {}

void OAISalesOrderTotalsDto::initializeModel() {

    m_cost_total_isSet = false;
    m_cost_total_isValid = false;

    m_cost_total_in_base_currency_isSet = false;
    m_cost_total_in_base_currency_isValid = false;

    m_discount_total_isSet = false;
    m_discount_total_isValid = false;

    m_discount_total_in_base_currency_isSet = false;
    m_discount_total_in_base_currency_isValid = false;

    m_freight_cost_isSet = false;
    m_freight_cost_isValid = false;

    m_freight_cost_in_base_currency_isSet = false;
    m_freight_cost_in_base_currency_isValid = false;

    m_freight_total_isSet = false;
    m_freight_total_isValid = false;

    m_freight_total_in_base_currency_isSet = false;
    m_freight_total_in_base_currency_isValid = false;

    m_order_total_isSet = false;
    m_order_total_isValid = false;

    m_order_total_in_base_currency_isSet = false;
    m_order_total_in_base_currency_isValid = false;

    m_tax_exempt_total_isSet = false;
    m_tax_exempt_total_isValid = false;

    m_tax_exempt_total_in_base_currency_isSet = false;
    m_tax_exempt_total_in_base_currency_isValid = false;

    m_tax_total_isSet = false;
    m_tax_total_isValid = false;

    m_tax_total_in_base_currency_isSet = false;
    m_tax_total_in_base_currency_isValid = false;

    m_taxable_total_isSet = false;
    m_taxable_total_isValid = false;

    m_taxable_total_in_base_currency_isSet = false;
    m_taxable_total_in_base_currency_isValid = false;

    m_unbilled_amount_isSet = false;
    m_unbilled_amount_isValid = false;

    m_unbilled_amount_in_base_currency_isSet = false;
    m_unbilled_amount_in_base_currency_isValid = false;

    m_unshipped_amount_isSet = false;
    m_unshipped_amount_isValid = false;

    m_unshipped_amount_in_base_currency_isSet = false;
    m_unshipped_amount_in_base_currency_isValid = false;
}

void OAISalesOrderTotalsDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesOrderTotalsDto::fromJsonObject(QJsonObject json) {

    m_cost_total_isValid = ::OpenAPI::fromJsonValue(m_cost_total, json[QString("costTotal")]);
    m_cost_total_isSet = !json[QString("costTotal")].isNull() && m_cost_total_isValid;

    m_cost_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_cost_total_in_base_currency, json[QString("costTotalInBaseCurrency")]);
    m_cost_total_in_base_currency_isSet = !json[QString("costTotalInBaseCurrency")].isNull() && m_cost_total_in_base_currency_isValid;

    m_discount_total_isValid = ::OpenAPI::fromJsonValue(m_discount_total, json[QString("discountTotal")]);
    m_discount_total_isSet = !json[QString("discountTotal")].isNull() && m_discount_total_isValid;

    m_discount_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_discount_total_in_base_currency, json[QString("discountTotalInBaseCurrency")]);
    m_discount_total_in_base_currency_isSet = !json[QString("discountTotalInBaseCurrency")].isNull() && m_discount_total_in_base_currency_isValid;

    m_freight_cost_isValid = ::OpenAPI::fromJsonValue(m_freight_cost, json[QString("freightCost")]);
    m_freight_cost_isSet = !json[QString("freightCost")].isNull() && m_freight_cost_isValid;

    m_freight_cost_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_freight_cost_in_base_currency, json[QString("freightCostInBaseCurrency")]);
    m_freight_cost_in_base_currency_isSet = !json[QString("freightCostInBaseCurrency")].isNull() && m_freight_cost_in_base_currency_isValid;

    m_freight_total_isValid = ::OpenAPI::fromJsonValue(m_freight_total, json[QString("freightTotal")]);
    m_freight_total_isSet = !json[QString("freightTotal")].isNull() && m_freight_total_isValid;

    m_freight_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_freight_total_in_base_currency, json[QString("freightTotalInBaseCurrency")]);
    m_freight_total_in_base_currency_isSet = !json[QString("freightTotalInBaseCurrency")].isNull() && m_freight_total_in_base_currency_isValid;

    m_order_total_isValid = ::OpenAPI::fromJsonValue(m_order_total, json[QString("orderTotal")]);
    m_order_total_isSet = !json[QString("orderTotal")].isNull() && m_order_total_isValid;

    m_order_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_order_total_in_base_currency, json[QString("orderTotalInBaseCurrency")]);
    m_order_total_in_base_currency_isSet = !json[QString("orderTotalInBaseCurrency")].isNull() && m_order_total_in_base_currency_isValid;

    m_tax_exempt_total_isValid = ::OpenAPI::fromJsonValue(m_tax_exempt_total, json[QString("taxExemptTotal")]);
    m_tax_exempt_total_isSet = !json[QString("taxExemptTotal")].isNull() && m_tax_exempt_total_isValid;

    m_tax_exempt_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_tax_exempt_total_in_base_currency, json[QString("taxExemptTotalInBaseCurrency")]);
    m_tax_exempt_total_in_base_currency_isSet = !json[QString("taxExemptTotalInBaseCurrency")].isNull() && m_tax_exempt_total_in_base_currency_isValid;

    m_tax_total_isValid = ::OpenAPI::fromJsonValue(m_tax_total, json[QString("taxTotal")]);
    m_tax_total_isSet = !json[QString("taxTotal")].isNull() && m_tax_total_isValid;

    m_tax_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_tax_total_in_base_currency, json[QString("taxTotalInBaseCurrency")]);
    m_tax_total_in_base_currency_isSet = !json[QString("taxTotalInBaseCurrency")].isNull() && m_tax_total_in_base_currency_isValid;

    m_taxable_total_isValid = ::OpenAPI::fromJsonValue(m_taxable_total, json[QString("taxableTotal")]);
    m_taxable_total_isSet = !json[QString("taxableTotal")].isNull() && m_taxable_total_isValid;

    m_taxable_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_taxable_total_in_base_currency, json[QString("taxableTotalInBaseCurrency")]);
    m_taxable_total_in_base_currency_isSet = !json[QString("taxableTotalInBaseCurrency")].isNull() && m_taxable_total_in_base_currency_isValid;

    m_unbilled_amount_isValid = ::OpenAPI::fromJsonValue(m_unbilled_amount, json[QString("unbilledAmount")]);
    m_unbilled_amount_isSet = !json[QString("unbilledAmount")].isNull() && m_unbilled_amount_isValid;

    m_unbilled_amount_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_unbilled_amount_in_base_currency, json[QString("unbilledAmountInBaseCurrency")]);
    m_unbilled_amount_in_base_currency_isSet = !json[QString("unbilledAmountInBaseCurrency")].isNull() && m_unbilled_amount_in_base_currency_isValid;

    m_unshipped_amount_isValid = ::OpenAPI::fromJsonValue(m_unshipped_amount, json[QString("unshippedAmount")]);
    m_unshipped_amount_isSet = !json[QString("unshippedAmount")].isNull() && m_unshipped_amount_isValid;

    m_unshipped_amount_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_unshipped_amount_in_base_currency, json[QString("unshippedAmountInBaseCurrency")]);
    m_unshipped_amount_in_base_currency_isSet = !json[QString("unshippedAmountInBaseCurrency")].isNull() && m_unshipped_amount_in_base_currency_isValid;
}

QString OAISalesOrderTotalsDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesOrderTotalsDto::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_total_isSet) {
        obj.insert(QString("costTotal"), ::OpenAPI::toJsonValue(m_cost_total));
    }
    if (m_cost_total_in_base_currency_isSet) {
        obj.insert(QString("costTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_cost_total_in_base_currency));
    }
    if (m_discount_total_isSet) {
        obj.insert(QString("discountTotal"), ::OpenAPI::toJsonValue(m_discount_total));
    }
    if (m_discount_total_in_base_currency_isSet) {
        obj.insert(QString("discountTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_discount_total_in_base_currency));
    }
    if (m_freight_cost_isSet) {
        obj.insert(QString("freightCost"), ::OpenAPI::toJsonValue(m_freight_cost));
    }
    if (m_freight_cost_in_base_currency_isSet) {
        obj.insert(QString("freightCostInBaseCurrency"), ::OpenAPI::toJsonValue(m_freight_cost_in_base_currency));
    }
    if (m_freight_total_isSet) {
        obj.insert(QString("freightTotal"), ::OpenAPI::toJsonValue(m_freight_total));
    }
    if (m_freight_total_in_base_currency_isSet) {
        obj.insert(QString("freightTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_freight_total_in_base_currency));
    }
    if (m_order_total_isSet) {
        obj.insert(QString("orderTotal"), ::OpenAPI::toJsonValue(m_order_total));
    }
    if (m_order_total_in_base_currency_isSet) {
        obj.insert(QString("orderTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_order_total_in_base_currency));
    }
    if (m_tax_exempt_total_isSet) {
        obj.insert(QString("taxExemptTotal"), ::OpenAPI::toJsonValue(m_tax_exempt_total));
    }
    if (m_tax_exempt_total_in_base_currency_isSet) {
        obj.insert(QString("taxExemptTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_tax_exempt_total_in_base_currency));
    }
    if (m_tax_total_isSet) {
        obj.insert(QString("taxTotal"), ::OpenAPI::toJsonValue(m_tax_total));
    }
    if (m_tax_total_in_base_currency_isSet) {
        obj.insert(QString("taxTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_tax_total_in_base_currency));
    }
    if (m_taxable_total_isSet) {
        obj.insert(QString("taxableTotal"), ::OpenAPI::toJsonValue(m_taxable_total));
    }
    if (m_taxable_total_in_base_currency_isSet) {
        obj.insert(QString("taxableTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_taxable_total_in_base_currency));
    }
    if (m_unbilled_amount_isSet) {
        obj.insert(QString("unbilledAmount"), ::OpenAPI::toJsonValue(m_unbilled_amount));
    }
    if (m_unbilled_amount_in_base_currency_isSet) {
        obj.insert(QString("unbilledAmountInBaseCurrency"), ::OpenAPI::toJsonValue(m_unbilled_amount_in_base_currency));
    }
    if (m_unshipped_amount_isSet) {
        obj.insert(QString("unshippedAmount"), ::OpenAPI::toJsonValue(m_unshipped_amount));
    }
    if (m_unshipped_amount_in_base_currency_isSet) {
        obj.insert(QString("unshippedAmountInBaseCurrency"), ::OpenAPI::toJsonValue(m_unshipped_amount_in_base_currency));
    }
    return obj;
}

double OAISalesOrderTotalsDto::getCostTotal() const {
    return m_cost_total;
}
void OAISalesOrderTotalsDto::setCostTotal(const double &cost_total) {
    m_cost_total = cost_total;
    m_cost_total_isSet = true;
}

bool OAISalesOrderTotalsDto::is_cost_total_Set() const{
    return m_cost_total_isSet;
}

bool OAISalesOrderTotalsDto::is_cost_total_Valid() const{
    return m_cost_total_isValid;
}

double OAISalesOrderTotalsDto::getCostTotalInBaseCurrency() const {
    return m_cost_total_in_base_currency;
}
void OAISalesOrderTotalsDto::setCostTotalInBaseCurrency(const double &cost_total_in_base_currency) {
    m_cost_total_in_base_currency = cost_total_in_base_currency;
    m_cost_total_in_base_currency_isSet = true;
}

bool OAISalesOrderTotalsDto::is_cost_total_in_base_currency_Set() const{
    return m_cost_total_in_base_currency_isSet;
}

bool OAISalesOrderTotalsDto::is_cost_total_in_base_currency_Valid() const{
    return m_cost_total_in_base_currency_isValid;
}

double OAISalesOrderTotalsDto::getDiscountTotal() const {
    return m_discount_total;
}
void OAISalesOrderTotalsDto::setDiscountTotal(const double &discount_total) {
    m_discount_total = discount_total;
    m_discount_total_isSet = true;
}

bool OAISalesOrderTotalsDto::is_discount_total_Set() const{
    return m_discount_total_isSet;
}

bool OAISalesOrderTotalsDto::is_discount_total_Valid() const{
    return m_discount_total_isValid;
}

double OAISalesOrderTotalsDto::getDiscountTotalInBaseCurrency() const {
    return m_discount_total_in_base_currency;
}
void OAISalesOrderTotalsDto::setDiscountTotalInBaseCurrency(const double &discount_total_in_base_currency) {
    m_discount_total_in_base_currency = discount_total_in_base_currency;
    m_discount_total_in_base_currency_isSet = true;
}

bool OAISalesOrderTotalsDto::is_discount_total_in_base_currency_Set() const{
    return m_discount_total_in_base_currency_isSet;
}

bool OAISalesOrderTotalsDto::is_discount_total_in_base_currency_Valid() const{
    return m_discount_total_in_base_currency_isValid;
}

double OAISalesOrderTotalsDto::getFreightCost() const {
    return m_freight_cost;
}
void OAISalesOrderTotalsDto::setFreightCost(const double &freight_cost) {
    m_freight_cost = freight_cost;
    m_freight_cost_isSet = true;
}

bool OAISalesOrderTotalsDto::is_freight_cost_Set() const{
    return m_freight_cost_isSet;
}

bool OAISalesOrderTotalsDto::is_freight_cost_Valid() const{
    return m_freight_cost_isValid;
}

double OAISalesOrderTotalsDto::getFreightCostInBaseCurrency() const {
    return m_freight_cost_in_base_currency;
}
void OAISalesOrderTotalsDto::setFreightCostInBaseCurrency(const double &freight_cost_in_base_currency) {
    m_freight_cost_in_base_currency = freight_cost_in_base_currency;
    m_freight_cost_in_base_currency_isSet = true;
}

bool OAISalesOrderTotalsDto::is_freight_cost_in_base_currency_Set() const{
    return m_freight_cost_in_base_currency_isSet;
}

bool OAISalesOrderTotalsDto::is_freight_cost_in_base_currency_Valid() const{
    return m_freight_cost_in_base_currency_isValid;
}

double OAISalesOrderTotalsDto::getFreightTotal() const {
    return m_freight_total;
}
void OAISalesOrderTotalsDto::setFreightTotal(const double &freight_total) {
    m_freight_total = freight_total;
    m_freight_total_isSet = true;
}

bool OAISalesOrderTotalsDto::is_freight_total_Set() const{
    return m_freight_total_isSet;
}

bool OAISalesOrderTotalsDto::is_freight_total_Valid() const{
    return m_freight_total_isValid;
}

double OAISalesOrderTotalsDto::getFreightTotalInBaseCurrency() const {
    return m_freight_total_in_base_currency;
}
void OAISalesOrderTotalsDto::setFreightTotalInBaseCurrency(const double &freight_total_in_base_currency) {
    m_freight_total_in_base_currency = freight_total_in_base_currency;
    m_freight_total_in_base_currency_isSet = true;
}

bool OAISalesOrderTotalsDto::is_freight_total_in_base_currency_Set() const{
    return m_freight_total_in_base_currency_isSet;
}

bool OAISalesOrderTotalsDto::is_freight_total_in_base_currency_Valid() const{
    return m_freight_total_in_base_currency_isValid;
}

double OAISalesOrderTotalsDto::getOrderTotal() const {
    return m_order_total;
}
void OAISalesOrderTotalsDto::setOrderTotal(const double &order_total) {
    m_order_total = order_total;
    m_order_total_isSet = true;
}

bool OAISalesOrderTotalsDto::is_order_total_Set() const{
    return m_order_total_isSet;
}

bool OAISalesOrderTotalsDto::is_order_total_Valid() const{
    return m_order_total_isValid;
}

double OAISalesOrderTotalsDto::getOrderTotalInBaseCurrency() const {
    return m_order_total_in_base_currency;
}
void OAISalesOrderTotalsDto::setOrderTotalInBaseCurrency(const double &order_total_in_base_currency) {
    m_order_total_in_base_currency = order_total_in_base_currency;
    m_order_total_in_base_currency_isSet = true;
}

bool OAISalesOrderTotalsDto::is_order_total_in_base_currency_Set() const{
    return m_order_total_in_base_currency_isSet;
}

bool OAISalesOrderTotalsDto::is_order_total_in_base_currency_Valid() const{
    return m_order_total_in_base_currency_isValid;
}

double OAISalesOrderTotalsDto::getTaxExemptTotal() const {
    return m_tax_exempt_total;
}
void OAISalesOrderTotalsDto::setTaxExemptTotal(const double &tax_exempt_total) {
    m_tax_exempt_total = tax_exempt_total;
    m_tax_exempt_total_isSet = true;
}

bool OAISalesOrderTotalsDto::is_tax_exempt_total_Set() const{
    return m_tax_exempt_total_isSet;
}

bool OAISalesOrderTotalsDto::is_tax_exempt_total_Valid() const{
    return m_tax_exempt_total_isValid;
}

double OAISalesOrderTotalsDto::getTaxExemptTotalInBaseCurrency() const {
    return m_tax_exempt_total_in_base_currency;
}
void OAISalesOrderTotalsDto::setTaxExemptTotalInBaseCurrency(const double &tax_exempt_total_in_base_currency) {
    m_tax_exempt_total_in_base_currency = tax_exempt_total_in_base_currency;
    m_tax_exempt_total_in_base_currency_isSet = true;
}

bool OAISalesOrderTotalsDto::is_tax_exempt_total_in_base_currency_Set() const{
    return m_tax_exempt_total_in_base_currency_isSet;
}

bool OAISalesOrderTotalsDto::is_tax_exempt_total_in_base_currency_Valid() const{
    return m_tax_exempt_total_in_base_currency_isValid;
}

double OAISalesOrderTotalsDto::getTaxTotal() const {
    return m_tax_total;
}
void OAISalesOrderTotalsDto::setTaxTotal(const double &tax_total) {
    m_tax_total = tax_total;
    m_tax_total_isSet = true;
}

bool OAISalesOrderTotalsDto::is_tax_total_Set() const{
    return m_tax_total_isSet;
}

bool OAISalesOrderTotalsDto::is_tax_total_Valid() const{
    return m_tax_total_isValid;
}

double OAISalesOrderTotalsDto::getTaxTotalInBaseCurrency() const {
    return m_tax_total_in_base_currency;
}
void OAISalesOrderTotalsDto::setTaxTotalInBaseCurrency(const double &tax_total_in_base_currency) {
    m_tax_total_in_base_currency = tax_total_in_base_currency;
    m_tax_total_in_base_currency_isSet = true;
}

bool OAISalesOrderTotalsDto::is_tax_total_in_base_currency_Set() const{
    return m_tax_total_in_base_currency_isSet;
}

bool OAISalesOrderTotalsDto::is_tax_total_in_base_currency_Valid() const{
    return m_tax_total_in_base_currency_isValid;
}

double OAISalesOrderTotalsDto::getTaxableTotal() const {
    return m_taxable_total;
}
void OAISalesOrderTotalsDto::setTaxableTotal(const double &taxable_total) {
    m_taxable_total = taxable_total;
    m_taxable_total_isSet = true;
}

bool OAISalesOrderTotalsDto::is_taxable_total_Set() const{
    return m_taxable_total_isSet;
}

bool OAISalesOrderTotalsDto::is_taxable_total_Valid() const{
    return m_taxable_total_isValid;
}

double OAISalesOrderTotalsDto::getTaxableTotalInBaseCurrency() const {
    return m_taxable_total_in_base_currency;
}
void OAISalesOrderTotalsDto::setTaxableTotalInBaseCurrency(const double &taxable_total_in_base_currency) {
    m_taxable_total_in_base_currency = taxable_total_in_base_currency;
    m_taxable_total_in_base_currency_isSet = true;
}

bool OAISalesOrderTotalsDto::is_taxable_total_in_base_currency_Set() const{
    return m_taxable_total_in_base_currency_isSet;
}

bool OAISalesOrderTotalsDto::is_taxable_total_in_base_currency_Valid() const{
    return m_taxable_total_in_base_currency_isValid;
}

double OAISalesOrderTotalsDto::getUnbilledAmount() const {
    return m_unbilled_amount;
}
void OAISalesOrderTotalsDto::setUnbilledAmount(const double &unbilled_amount) {
    m_unbilled_amount = unbilled_amount;
    m_unbilled_amount_isSet = true;
}

bool OAISalesOrderTotalsDto::is_unbilled_amount_Set() const{
    return m_unbilled_amount_isSet;
}

bool OAISalesOrderTotalsDto::is_unbilled_amount_Valid() const{
    return m_unbilled_amount_isValid;
}

double OAISalesOrderTotalsDto::getUnbilledAmountInBaseCurrency() const {
    return m_unbilled_amount_in_base_currency;
}
void OAISalesOrderTotalsDto::setUnbilledAmountInBaseCurrency(const double &unbilled_amount_in_base_currency) {
    m_unbilled_amount_in_base_currency = unbilled_amount_in_base_currency;
    m_unbilled_amount_in_base_currency_isSet = true;
}

bool OAISalesOrderTotalsDto::is_unbilled_amount_in_base_currency_Set() const{
    return m_unbilled_amount_in_base_currency_isSet;
}

bool OAISalesOrderTotalsDto::is_unbilled_amount_in_base_currency_Valid() const{
    return m_unbilled_amount_in_base_currency_isValid;
}

double OAISalesOrderTotalsDto::getUnshippedAmount() const {
    return m_unshipped_amount;
}
void OAISalesOrderTotalsDto::setUnshippedAmount(const double &unshipped_amount) {
    m_unshipped_amount = unshipped_amount;
    m_unshipped_amount_isSet = true;
}

bool OAISalesOrderTotalsDto::is_unshipped_amount_Set() const{
    return m_unshipped_amount_isSet;
}

bool OAISalesOrderTotalsDto::is_unshipped_amount_Valid() const{
    return m_unshipped_amount_isValid;
}

double OAISalesOrderTotalsDto::getUnshippedAmountInBaseCurrency() const {
    return m_unshipped_amount_in_base_currency;
}
void OAISalesOrderTotalsDto::setUnshippedAmountInBaseCurrency(const double &unshipped_amount_in_base_currency) {
    m_unshipped_amount_in_base_currency = unshipped_amount_in_base_currency;
    m_unshipped_amount_in_base_currency_isSet = true;
}

bool OAISalesOrderTotalsDto::is_unshipped_amount_in_base_currency_Set() const{
    return m_unshipped_amount_in_base_currency_isSet;
}

bool OAISalesOrderTotalsDto::is_unshipped_amount_in_base_currency_Valid() const{
    return m_unshipped_amount_in_base_currency_isValid;
}

bool OAISalesOrderTotalsDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight_cost_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_exempt_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_exempt_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxable_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxable_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unbilled_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unbilled_amount_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unshipped_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unshipped_amount_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesOrderTotalsDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
