/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesOrderDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesOrderDto::OAISalesOrderDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesOrderDto::OAISalesOrderDto() {
    this->initializeModel();
}

OAISalesOrderDto::~OAISalesOrderDto() {}

void OAISalesOrderDto::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_billing_isSet = false;
    m_billing_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_cancel_by_isSet = false;
    m_cancel_by_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_financial_information_isSet = false;
    m_financial_information_isValid = false;

    m_freight_isSet = false;
    m_freight_isValid = false;

    m_is_rot_rut_deductable_isSet = false;
    m_is_rot_rut_deductable_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_order_qty_isSet = false;
    m_order_qty_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_original_order_id_isSet = false;
    m_original_order_id_isValid = false;

    m_original_order_type_isSet = false;
    m_original_order_type_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_payment_settings_isSet = false;
    m_payment_settings_isValid = false;

    m_print_isSet = false;
    m_print_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_request_on_isSet = false;
    m_request_on_isValid = false;

    m_sales_person_isSet = false;
    m_sales_person_isValid = false;

    m_shipping_isSet = false;
    m_shipping_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_totals_isSet = false;
    m_totals_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_use_replacement_cost_for_margin_and_profit_isSet = false;
    m_use_replacement_cost_for_margin_and_profit_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAISalesOrderDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesOrderDto::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_billing_isValid = ::OpenAPI::fromJsonValue(m_billing, json[QString("billing")]);
    m_billing_isSet = !json[QString("billing")].isNull() && m_billing_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_cancel_by_isValid = ::OpenAPI::fromJsonValue(m_cancel_by, json[QString("cancelBy")]);
    m_cancel_by_isSet = !json[QString("cancelBy")].isNull() && m_cancel_by_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_financial_information_isValid = ::OpenAPI::fromJsonValue(m_financial_information, json[QString("financialInformation")]);
    m_financial_information_isSet = !json[QString("financialInformation")].isNull() && m_financial_information_isValid;

    m_freight_isValid = ::OpenAPI::fromJsonValue(m_freight, json[QString("freight")]);
    m_freight_isSet = !json[QString("freight")].isNull() && m_freight_isValid;

    m_is_rot_rut_deductable_isValid = ::OpenAPI::fromJsonValue(m_is_rot_rut_deductable, json[QString("isRotRutDeductable")]);
    m_is_rot_rut_deductable_isSet = !json[QString("isRotRutDeductable")].isNull() && m_is_rot_rut_deductable_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_order_qty_isValid = ::OpenAPI::fromJsonValue(m_order_qty, json[QString("orderQty")]);
    m_order_qty_isSet = !json[QString("orderQty")].isNull() && m_order_qty_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_original_order_id_isValid = ::OpenAPI::fromJsonValue(m_original_order_id, json[QString("originalOrderId")]);
    m_original_order_id_isSet = !json[QString("originalOrderId")].isNull() && m_original_order_id_isValid;

    m_original_order_type_isValid = ::OpenAPI::fromJsonValue(m_original_order_type, json[QString("originalOrderType")]);
    m_original_order_type_isSet = !json[QString("originalOrderType")].isNull() && m_original_order_type_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_payment_settings_isValid = ::OpenAPI::fromJsonValue(m_payment_settings, json[QString("paymentSettings")]);
    m_payment_settings_isSet = !json[QString("paymentSettings")].isNull() && m_payment_settings_isValid;

    m_print_isValid = ::OpenAPI::fromJsonValue(m_print, json[QString("print")]);
    m_print_isSet = !json[QString("print")].isNull() && m_print_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_request_on_isValid = ::OpenAPI::fromJsonValue(m_request_on, json[QString("requestOn")]);
    m_request_on_isSet = !json[QString("requestOn")].isNull() && m_request_on_isValid;

    m_sales_person_isValid = ::OpenAPI::fromJsonValue(m_sales_person, json[QString("salesPerson")]);
    m_sales_person_isSet = !json[QString("salesPerson")].isNull() && m_sales_person_isValid;

    m_shipping_isValid = ::OpenAPI::fromJsonValue(m_shipping, json[QString("shipping")]);
    m_shipping_isSet = !json[QString("shipping")].isNull() && m_shipping_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_totals_isValid = ::OpenAPI::fromJsonValue(m_totals, json[QString("totals")]);
    m_totals_isSet = !json[QString("totals")].isNull() && m_totals_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_use_replacement_cost_for_margin_and_profit_isValid = ::OpenAPI::fromJsonValue(m_use_replacement_cost_for_margin_and_profit, json[QString("useReplacementCostForMarginAndProfit")]);
    m_use_replacement_cost_for_margin_and_profit_isSet = !json[QString("useReplacementCostForMarginAndProfit")].isNull() && m_use_replacement_cost_for_margin_and_profit_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAISalesOrderDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesOrderDto::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_billing.isSet()) {
        obj.insert(QString("billing"), ::OpenAPI::toJsonValue(m_billing));
    }
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_cancel_by_isSet) {
        obj.insert(QString("cancelBy"), ::OpenAPI::toJsonValue(m_cancel_by));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_currency_id_isSet) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_financial_information.isSet()) {
        obj.insert(QString("financialInformation"), ::OpenAPI::toJsonValue(m_financial_information));
    }
    if (m_freight.isSet()) {
        obj.insert(QString("freight"), ::OpenAPI::toJsonValue(m_freight));
    }
    if (m_is_rot_rut_deductable_isSet) {
        obj.insert(QString("isRotRutDeductable"), ::OpenAPI::toJsonValue(m_is_rot_rut_deductable));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_order_qty_isSet) {
        obj.insert(QString("orderQty"), ::OpenAPI::toJsonValue(m_order_qty));
    }
    if (m_origin.isSet()) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_original_order_id_isSet) {
        obj.insert(QString("originalOrderId"), ::OpenAPI::toJsonValue(m_original_order_id));
    }
    if (m_original_order_type_isSet) {
        obj.insert(QString("originalOrderType"), ::OpenAPI::toJsonValue(m_original_order_type));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_payment_settings.isSet()) {
        obj.insert(QString("paymentSettings"), ::OpenAPI::toJsonValue(m_payment_settings));
    }
    if (m_print.isSet()) {
        obj.insert(QString("print"), ::OpenAPI::toJsonValue(m_print));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_request_on_isSet) {
        obj.insert(QString("requestOn"), ::OpenAPI::toJsonValue(m_request_on));
    }
    if (m_sales_person.isSet()) {
        obj.insert(QString("salesPerson"), ::OpenAPI::toJsonValue(m_sales_person));
    }
    if (m_shipping.isSet()) {
        obj.insert(QString("shipping"), ::OpenAPI::toJsonValue(m_shipping));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_totals.isSet()) {
        obj.insert(QString("totals"), ::OpenAPI::toJsonValue(m_totals));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_use_replacement_cost_for_margin_and_profit_isSet) {
        obj.insert(QString("useReplacementCostForMarginAndProfit"), ::OpenAPI::toJsonValue(m_use_replacement_cost_for_margin_and_profit));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAIAttachmentDto> OAISalesOrderDto::getAttachments() const {
    return m_attachments;
}
void OAISalesOrderDto::setAttachments(const QList<OAIAttachmentDto> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAISalesOrderDto::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAISalesOrderDto::is_attachments_Valid() const{
    return m_attachments_isValid;
}

OAISalesOrderBillingDto OAISalesOrderDto::getBilling() const {
    return m_billing;
}
void OAISalesOrderDto::setBilling(const OAISalesOrderBillingDto &billing) {
    m_billing = billing;
    m_billing_isSet = true;
}

bool OAISalesOrderDto::is_billing_Set() const{
    return m_billing_isSet;
}

bool OAISalesOrderDto::is_billing_Valid() const{
    return m_billing_isValid;
}

OAICdDescriptionPairDto OAISalesOrderDto::getBranch() const {
    return m_branch;
}
void OAISalesOrderDto::setBranch(const OAICdDescriptionPairDto &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAISalesOrderDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAISalesOrderDto::is_branch_Valid() const{
    return m_branch_isValid;
}

QDateTime OAISalesOrderDto::getCancelBy() const {
    return m_cancel_by;
}
void OAISalesOrderDto::setCancelBy(const QDateTime &cancel_by) {
    m_cancel_by = cancel_by;
    m_cancel_by_isSet = true;
}

bool OAISalesOrderDto::is_cancel_by_Set() const{
    return m_cancel_by_isSet;
}

bool OAISalesOrderDto::is_cancel_by_Valid() const{
    return m_cancel_by_isValid;
}

QString OAISalesOrderDto::getCreatedBy() const {
    return m_created_by;
}
void OAISalesOrderDto::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAISalesOrderDto::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAISalesOrderDto::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAISalesOrderDto::getCurrencyId() const {
    return m_currency_id;
}
void OAISalesOrderDto::setCurrencyId(const QString &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAISalesOrderDto::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAISalesOrderDto::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

OAISalesOrderCustomerDto OAISalesOrderDto::getCustomer() const {
    return m_customer;
}
void OAISalesOrderDto::setCustomer(const OAISalesOrderCustomerDto &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAISalesOrderDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAISalesOrderDto::is_customer_Valid() const{
    return m_customer_isValid;
}

QDateTime OAISalesOrderDto::getDate() const {
    return m_date;
}
void OAISalesOrderDto::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAISalesOrderDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAISalesOrderDto::is_date_Valid() const{
    return m_date_isValid;
}

QString OAISalesOrderDto::getDescription() const {
    return m_description;
}
void OAISalesOrderDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISalesOrderDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAISalesOrderDto::is_description_Valid() const{
    return m_description_isValid;
}

OAISalesOrderFinancialInfoDto OAISalesOrderDto::getFinancialInformation() const {
    return m_financial_information;
}
void OAISalesOrderDto::setFinancialInformation(const OAISalesOrderFinancialInfoDto &financial_information) {
    m_financial_information = financial_information;
    m_financial_information_isSet = true;
}

bool OAISalesOrderDto::is_financial_information_Set() const{
    return m_financial_information_isSet;
}

bool OAISalesOrderDto::is_financial_information_Valid() const{
    return m_financial_information_isValid;
}

OAISalesOrderFreightDto OAISalesOrderDto::getFreight() const {
    return m_freight;
}
void OAISalesOrderDto::setFreight(const OAISalesOrderFreightDto &freight) {
    m_freight = freight;
    m_freight_isSet = true;
}

bool OAISalesOrderDto::is_freight_Set() const{
    return m_freight_isSet;
}

bool OAISalesOrderDto::is_freight_Valid() const{
    return m_freight_isValid;
}

bool OAISalesOrderDto::isIsRotRutDeductable() const {
    return m_is_rot_rut_deductable;
}
void OAISalesOrderDto::setIsRotRutDeductable(const bool &is_rot_rut_deductable) {
    m_is_rot_rut_deductable = is_rot_rut_deductable;
    m_is_rot_rut_deductable_isSet = true;
}

bool OAISalesOrderDto::is_is_rot_rut_deductable_Set() const{
    return m_is_rot_rut_deductable_isSet;
}

bool OAISalesOrderDto::is_is_rot_rut_deductable_Valid() const{
    return m_is_rot_rut_deductable_isValid;
}

QDateTime OAISalesOrderDto::getLastModified() const {
    return m_last_modified;
}
void OAISalesOrderDto::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAISalesOrderDto::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAISalesOrderDto::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QString OAISalesOrderDto::getNote() const {
    return m_note;
}
void OAISalesOrderDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAISalesOrderDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAISalesOrderDto::is_note_Valid() const{
    return m_note_isValid;
}

QString OAISalesOrderDto::getOrderId() const {
    return m_order_id;
}
void OAISalesOrderDto::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAISalesOrderDto::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAISalesOrderDto::is_order_id_Valid() const{
    return m_order_id_isValid;
}

double OAISalesOrderDto::getOrderQty() const {
    return m_order_qty;
}
void OAISalesOrderDto::setOrderQty(const double &order_qty) {
    m_order_qty = order_qty;
    m_order_qty_isSet = true;
}

bool OAISalesOrderDto::is_order_qty_Set() const{
    return m_order_qty_isSet;
}

bool OAISalesOrderDto::is_order_qty_Valid() const{
    return m_order_qty_isValid;
}

OAISalesOrderOriginDto OAISalesOrderDto::getOrigin() const {
    return m_origin;
}
void OAISalesOrderDto::setOrigin(const OAISalesOrderOriginDto &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAISalesOrderDto::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAISalesOrderDto::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAISalesOrderDto::getOriginalOrderId() const {
    return m_original_order_id;
}
void OAISalesOrderDto::setOriginalOrderId(const QString &original_order_id) {
    m_original_order_id = original_order_id;
    m_original_order_id_isSet = true;
}

bool OAISalesOrderDto::is_original_order_id_Set() const{
    return m_original_order_id_isSet;
}

bool OAISalesOrderDto::is_original_order_id_Valid() const{
    return m_original_order_id_isValid;
}

QString OAISalesOrderDto::getOriginalOrderType() const {
    return m_original_order_type;
}
void OAISalesOrderDto::setOriginalOrderType(const QString &original_order_type) {
    m_original_order_type = original_order_type;
    m_original_order_type_isSet = true;
}

bool OAISalesOrderDto::is_original_order_type_Set() const{
    return m_original_order_type_isSet;
}

bool OAISalesOrderDto::is_original_order_type_Valid() const{
    return m_original_order_type_isValid;
}

OAIEmployeeDto OAISalesOrderDto::getOwner() const {
    return m_owner;
}
void OAISalesOrderDto::setOwner(const OAIEmployeeDto &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAISalesOrderDto::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAISalesOrderDto::is_owner_Valid() const{
    return m_owner_isValid;
}

OAISalesOrderPaymentDto OAISalesOrderDto::getPaymentSettings() const {
    return m_payment_settings;
}
void OAISalesOrderDto::setPaymentSettings(const OAISalesOrderPaymentDto &payment_settings) {
    m_payment_settings = payment_settings;
    m_payment_settings_isSet = true;
}

bool OAISalesOrderDto::is_payment_settings_Set() const{
    return m_payment_settings_isSet;
}

bool OAISalesOrderDto::is_payment_settings_Valid() const{
    return m_payment_settings_isValid;
}

OAISalesOrderPrintDto OAISalesOrderDto::getPrint() const {
    return m_print;
}
void OAISalesOrderDto::setPrint(const OAISalesOrderPrintDto &print) {
    m_print = print;
    m_print_isSet = true;
}

bool OAISalesOrderDto::is_print_Set() const{
    return m_print_isSet;
}

bool OAISalesOrderDto::is_print_Valid() const{
    return m_print_isValid;
}

OAIProjectDto OAISalesOrderDto::getProject() const {
    return m_project;
}
void OAISalesOrderDto::setProject(const OAIProjectDto &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAISalesOrderDto::is_project_Set() const{
    return m_project_isSet;
}

bool OAISalesOrderDto::is_project_Valid() const{
    return m_project_isValid;
}

QDateTime OAISalesOrderDto::getRequestOn() const {
    return m_request_on;
}
void OAISalesOrderDto::setRequestOn(const QDateTime &request_on) {
    m_request_on = request_on;
    m_request_on_isSet = true;
}

bool OAISalesOrderDto::is_request_on_Set() const{
    return m_request_on_isSet;
}

bool OAISalesOrderDto::is_request_on_Valid() const{
    return m_request_on_isValid;
}

OAISalesPersonDto OAISalesOrderDto::getSalesPerson() const {
    return m_sales_person;
}
void OAISalesOrderDto::setSalesPerson(const OAISalesPersonDto &sales_person) {
    m_sales_person = sales_person;
    m_sales_person_isSet = true;
}

bool OAISalesOrderDto::is_sales_person_Set() const{
    return m_sales_person_isSet;
}

bool OAISalesOrderDto::is_sales_person_Valid() const{
    return m_sales_person_isValid;
}

OAISalesOrderShippingDto OAISalesOrderDto::getShipping() const {
    return m_shipping;
}
void OAISalesOrderDto::setShipping(const OAISalesOrderShippingDto &shipping) {
    m_shipping = shipping;
    m_shipping_isSet = true;
}

bool OAISalesOrderDto::is_shipping_Set() const{
    return m_shipping_isSet;
}

bool OAISalesOrderDto::is_shipping_Valid() const{
    return m_shipping_isValid;
}

OAISalesOrderStatusDto OAISalesOrderDto::getStatus() const {
    return m_status;
}
void OAISalesOrderDto::setStatus(const OAISalesOrderStatusDto &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISalesOrderDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAISalesOrderDto::is_status_Valid() const{
    return m_status_isValid;
}

OAISalesOrderTotalsDto OAISalesOrderDto::getTotals() const {
    return m_totals;
}
void OAISalesOrderDto::setTotals(const OAISalesOrderTotalsDto &totals) {
    m_totals = totals;
    m_totals_isSet = true;
}

bool OAISalesOrderDto::is_totals_Set() const{
    return m_totals_isSet;
}

bool OAISalesOrderDto::is_totals_Valid() const{
    return m_totals_isValid;
}

QString OAISalesOrderDto::getType() const {
    return m_type;
}
void OAISalesOrderDto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISalesOrderDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAISalesOrderDto::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISalesOrderDto::isUseReplacementCostForMarginAndProfit() const {
    return m_use_replacement_cost_for_margin_and_profit;
}
void OAISalesOrderDto::setUseReplacementCostForMarginAndProfit(const bool &use_replacement_cost_for_margin_and_profit) {
    m_use_replacement_cost_for_margin_and_profit = use_replacement_cost_for_margin_and_profit;
    m_use_replacement_cost_for_margin_and_profit_isSet = true;
}

bool OAISalesOrderDto::is_use_replacement_cost_for_margin_and_profit_Set() const{
    return m_use_replacement_cost_for_margin_and_profit_isSet;
}

bool OAISalesOrderDto::is_use_replacement_cost_for_margin_and_profit_Valid() const{
    return m_use_replacement_cost_for_margin_and_profit_isValid;
}

QByteArray OAISalesOrderDto::getVersion() const {
    return m_version;
}
void OAISalesOrderDto::setVersion(const QByteArray &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISalesOrderDto::is_version_Set() const{
    return m_version_isSet;
}

bool OAISalesOrderDto::is_version_Valid() const{
    return m_version_isValid;
}

bool OAISalesOrderDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_financial_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_rot_rut_deductable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_order_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_print.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_totals.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_replacement_cost_for_margin_and_profit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesOrderDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
