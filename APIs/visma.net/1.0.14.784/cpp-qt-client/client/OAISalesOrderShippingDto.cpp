/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesOrderShippingDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesOrderShippingDto::OAISalesOrderShippingDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesOrderShippingDto::OAISalesOrderShippingDto() {
    this->initializeModel();
}

OAISalesOrderShippingDto::~OAISalesOrderShippingDto() {}

void OAISalesOrderShippingDto::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_fob_point_isSet = false;
    m_fob_point_isValid = false;

    m_insurance_isSet = false;
    m_insurance_isValid = false;

    m_intrastat_transaction_type_isSet = false;
    m_intrastat_transaction_type_isValid = false;

    m_preferred_warehouse_isSet = false;
    m_preferred_warehouse_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_residential_delivery_isSet = false;
    m_residential_delivery_isValid = false;

    m_rule_isSet = false;
    m_rule_isValid = false;

    m_saturday_delivery_isSet = false;
    m_saturday_delivery_isValid = false;

    m_scheduled_date_isSet = false;
    m_scheduled_date_isValid = false;

    m_ship_separately_isSet = false;
    m_ship_separately_isValid = false;

    m_ship_via_isSet = false;
    m_ship_via_isValid = false;

    m_terms_isSet = false;
    m_terms_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAISalesOrderShippingDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesOrderShippingDto::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_fob_point_isValid = ::OpenAPI::fromJsonValue(m_fob_point, json[QString("fobPoint")]);
    m_fob_point_isSet = !json[QString("fobPoint")].isNull() && m_fob_point_isValid;

    m_insurance_isValid = ::OpenAPI::fromJsonValue(m_insurance, json[QString("insurance")]);
    m_insurance_isSet = !json[QString("insurance")].isNull() && m_insurance_isValid;

    m_intrastat_transaction_type_isValid = ::OpenAPI::fromJsonValue(m_intrastat_transaction_type, json[QString("intrastatTransactionType")]);
    m_intrastat_transaction_type_isSet = !json[QString("intrastatTransactionType")].isNull() && m_intrastat_transaction_type_isValid;

    m_preferred_warehouse_isValid = ::OpenAPI::fromJsonValue(m_preferred_warehouse, json[QString("preferredWarehouse")]);
    m_preferred_warehouse_isSet = !json[QString("preferredWarehouse")].isNull() && m_preferred_warehouse_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_residential_delivery_isValid = ::OpenAPI::fromJsonValue(m_residential_delivery, json[QString("residentialDelivery")]);
    m_residential_delivery_isSet = !json[QString("residentialDelivery")].isNull() && m_residential_delivery_isValid;

    m_rule_isValid = ::OpenAPI::fromJsonValue(m_rule, json[QString("rule")]);
    m_rule_isSet = !json[QString("rule")].isNull() && m_rule_isValid;

    m_saturday_delivery_isValid = ::OpenAPI::fromJsonValue(m_saturday_delivery, json[QString("saturdayDelivery")]);
    m_saturday_delivery_isSet = !json[QString("saturdayDelivery")].isNull() && m_saturday_delivery_isValid;

    m_scheduled_date_isValid = ::OpenAPI::fromJsonValue(m_scheduled_date, json[QString("scheduledDate")]);
    m_scheduled_date_isSet = !json[QString("scheduledDate")].isNull() && m_scheduled_date_isValid;

    m_ship_separately_isValid = ::OpenAPI::fromJsonValue(m_ship_separately, json[QString("shipSeparately")]);
    m_ship_separately_isSet = !json[QString("shipSeparately")].isNull() && m_ship_separately_isValid;

    m_ship_via_isValid = ::OpenAPI::fromJsonValue(m_ship_via, json[QString("shipVia")]);
    m_ship_via_isSet = !json[QString("shipVia")].isNull() && m_ship_via_isValid;

    m_terms_isValid = ::OpenAPI::fromJsonValue(m_terms, json[QString("terms")]);
    m_terms_isSet = !json[QString("terms")].isNull() && m_terms_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAISalesOrderShippingDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesOrderShippingDto::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_fob_point.isSet()) {
        obj.insert(QString("fobPoint"), ::OpenAPI::toJsonValue(m_fob_point));
    }
    if (m_insurance_isSet) {
        obj.insert(QString("insurance"), ::OpenAPI::toJsonValue(m_insurance));
    }
    if (m_intrastat_transaction_type.isSet()) {
        obj.insert(QString("intrastatTransactionType"), ::OpenAPI::toJsonValue(m_intrastat_transaction_type));
    }
    if (m_preferred_warehouse.isSet()) {
        obj.insert(QString("preferredWarehouse"), ::OpenAPI::toJsonValue(m_preferred_warehouse));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_residential_delivery_isSet) {
        obj.insert(QString("residentialDelivery"), ::OpenAPI::toJsonValue(m_residential_delivery));
    }
    if (m_rule_isSet) {
        obj.insert(QString("rule"), ::OpenAPI::toJsonValue(m_rule));
    }
    if (m_saturday_delivery_isSet) {
        obj.insert(QString("saturdayDelivery"), ::OpenAPI::toJsonValue(m_saturday_delivery));
    }
    if (m_scheduled_date_isSet) {
        obj.insert(QString("scheduledDate"), ::OpenAPI::toJsonValue(m_scheduled_date));
    }
    if (m_ship_separately_isSet) {
        obj.insert(QString("shipSeparately"), ::OpenAPI::toJsonValue(m_ship_separately));
    }
    if (m_ship_via.isSet()) {
        obj.insert(QString("shipVia"), ::OpenAPI::toJsonValue(m_ship_via));
    }
    if (m_terms.isSet()) {
        obj.insert(QString("terms"), ::OpenAPI::toJsonValue(m_terms));
    }
    if (m_zone.isSet()) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

OAIAddressDto OAISalesOrderShippingDto::getAddress() const {
    return m_address;
}
void OAISalesOrderShippingDto::setAddress(const OAIAddressDto &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAISalesOrderShippingDto::is_address_Set() const{
    return m_address_isSet;
}

bool OAISalesOrderShippingDto::is_address_Valid() const{
    return m_address_isValid;
}

OAIContactDto OAISalesOrderShippingDto::getContact() const {
    return m_contact;
}
void OAISalesOrderShippingDto::setContact(const OAIContactDto &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAISalesOrderShippingDto::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAISalesOrderShippingDto::is_contact_Valid() const{
    return m_contact_isValid;
}

OAICdDescriptionPairDto OAISalesOrderShippingDto::getFobPoint() const {
    return m_fob_point;
}
void OAISalesOrderShippingDto::setFobPoint(const OAICdDescriptionPairDto &fob_point) {
    m_fob_point = fob_point;
    m_fob_point_isSet = true;
}

bool OAISalesOrderShippingDto::is_fob_point_Set() const{
    return m_fob_point_isSet;
}

bool OAISalesOrderShippingDto::is_fob_point_Valid() const{
    return m_fob_point_isValid;
}

bool OAISalesOrderShippingDto::isInsurance() const {
    return m_insurance;
}
void OAISalesOrderShippingDto::setInsurance(const bool &insurance) {
    m_insurance = insurance;
    m_insurance_isSet = true;
}

bool OAISalesOrderShippingDto::is_insurance_Set() const{
    return m_insurance_isSet;
}

bool OAISalesOrderShippingDto::is_insurance_Valid() const{
    return m_insurance_isValid;
}

OAIIdDescriptionPairDto OAISalesOrderShippingDto::getIntrastatTransactionType() const {
    return m_intrastat_transaction_type;
}
void OAISalesOrderShippingDto::setIntrastatTransactionType(const OAIIdDescriptionPairDto &intrastat_transaction_type) {
    m_intrastat_transaction_type = intrastat_transaction_type;
    m_intrastat_transaction_type_isSet = true;
}

bool OAISalesOrderShippingDto::is_intrastat_transaction_type_Set() const{
    return m_intrastat_transaction_type_isSet;
}

bool OAISalesOrderShippingDto::is_intrastat_transaction_type_Valid() const{
    return m_intrastat_transaction_type_isValid;
}

OAICdDescriptionPairDto OAISalesOrderShippingDto::getPreferredWarehouse() const {
    return m_preferred_warehouse;
}
void OAISalesOrderShippingDto::setPreferredWarehouse(const OAICdDescriptionPairDto &preferred_warehouse) {
    m_preferred_warehouse = preferred_warehouse;
    m_preferred_warehouse_isSet = true;
}

bool OAISalesOrderShippingDto::is_preferred_warehouse_Set() const{
    return m_preferred_warehouse_isSet;
}

bool OAISalesOrderShippingDto::is_preferred_warehouse_Valid() const{
    return m_preferred_warehouse_isValid;
}

qint32 OAISalesOrderShippingDto::getPriority() const {
    return m_priority;
}
void OAISalesOrderShippingDto::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAISalesOrderShippingDto::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAISalesOrderShippingDto::is_priority_Valid() const{
    return m_priority_isValid;
}

bool OAISalesOrderShippingDto::isResidentialDelivery() const {
    return m_residential_delivery;
}
void OAISalesOrderShippingDto::setResidentialDelivery(const bool &residential_delivery) {
    m_residential_delivery = residential_delivery;
    m_residential_delivery_isSet = true;
}

bool OAISalesOrderShippingDto::is_residential_delivery_Set() const{
    return m_residential_delivery_isSet;
}

bool OAISalesOrderShippingDto::is_residential_delivery_Valid() const{
    return m_residential_delivery_isValid;
}

QString OAISalesOrderShippingDto::getRule() const {
    return m_rule;
}
void OAISalesOrderShippingDto::setRule(const QString &rule) {
    m_rule = rule;
    m_rule_isSet = true;
}

bool OAISalesOrderShippingDto::is_rule_Set() const{
    return m_rule_isSet;
}

bool OAISalesOrderShippingDto::is_rule_Valid() const{
    return m_rule_isValid;
}

bool OAISalesOrderShippingDto::isSaturdayDelivery() const {
    return m_saturday_delivery;
}
void OAISalesOrderShippingDto::setSaturdayDelivery(const bool &saturday_delivery) {
    m_saturday_delivery = saturday_delivery;
    m_saturday_delivery_isSet = true;
}

bool OAISalesOrderShippingDto::is_saturday_delivery_Set() const{
    return m_saturday_delivery_isSet;
}

bool OAISalesOrderShippingDto::is_saturday_delivery_Valid() const{
    return m_saturday_delivery_isValid;
}

QDateTime OAISalesOrderShippingDto::getScheduledDate() const {
    return m_scheduled_date;
}
void OAISalesOrderShippingDto::setScheduledDate(const QDateTime &scheduled_date) {
    m_scheduled_date = scheduled_date;
    m_scheduled_date_isSet = true;
}

bool OAISalesOrderShippingDto::is_scheduled_date_Set() const{
    return m_scheduled_date_isSet;
}

bool OAISalesOrderShippingDto::is_scheduled_date_Valid() const{
    return m_scheduled_date_isValid;
}

bool OAISalesOrderShippingDto::isShipSeparately() const {
    return m_ship_separately;
}
void OAISalesOrderShippingDto::setShipSeparately(const bool &ship_separately) {
    m_ship_separately = ship_separately;
    m_ship_separately_isSet = true;
}

bool OAISalesOrderShippingDto::is_ship_separately_Set() const{
    return m_ship_separately_isSet;
}

bool OAISalesOrderShippingDto::is_ship_separately_Valid() const{
    return m_ship_separately_isValid;
}

OAICdDescriptionPairDto OAISalesOrderShippingDto::getShipVia() const {
    return m_ship_via;
}
void OAISalesOrderShippingDto::setShipVia(const OAICdDescriptionPairDto &ship_via) {
    m_ship_via = ship_via;
    m_ship_via_isSet = true;
}

bool OAISalesOrderShippingDto::is_ship_via_Set() const{
    return m_ship_via_isSet;
}

bool OAISalesOrderShippingDto::is_ship_via_Valid() const{
    return m_ship_via_isValid;
}

OAICdDescriptionPairDto OAISalesOrderShippingDto::getTerms() const {
    return m_terms;
}
void OAISalesOrderShippingDto::setTerms(const OAICdDescriptionPairDto &terms) {
    m_terms = terms;
    m_terms_isSet = true;
}

bool OAISalesOrderShippingDto::is_terms_Set() const{
    return m_terms_isSet;
}

bool OAISalesOrderShippingDto::is_terms_Valid() const{
    return m_terms_isValid;
}

OAICdDescriptionPairDto OAISalesOrderShippingDto::getZone() const {
    return m_zone;
}
void OAISalesOrderShippingDto::setZone(const OAICdDescriptionPairDto &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAISalesOrderShippingDto::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAISalesOrderShippingDto::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAISalesOrderShippingDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fob_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insurance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intrastat_transaction_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_warehouse.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_residential_delivery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saturday_delivery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_separately_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_via.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesOrderShippingDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
