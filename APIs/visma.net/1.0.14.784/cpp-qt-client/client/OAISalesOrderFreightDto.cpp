/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesOrderFreightDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesOrderFreightDto::OAISalesOrderFreightDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesOrderFreightDto::OAISalesOrderFreightDto() {
    this->initializeModel();
}

OAISalesOrderFreightDto::~OAISalesOrderFreightDto() {}

void OAISalesOrderFreightDto::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_amount_in_base_currency_isSet = false;
    m_amount_in_base_currency_isValid = false;

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_cost_in_base_currency_isSet = false;
    m_cost_in_base_currency_isValid = false;

    m_premium_amount_isSet = false;
    m_premium_amount_isValid = false;

    m_premium_amount_in_base_currency_isSet = false;
    m_premium_amount_in_base_currency_isValid = false;

    m_tax_category_id_isSet = false;
    m_tax_category_id_isValid = false;

    m_volume_isSet = false;
    m_volume_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAISalesOrderFreightDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesOrderFreightDto::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_amount_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_amount_in_base_currency, json[QString("amountInBaseCurrency")]);
    m_amount_in_base_currency_isSet = !json[QString("amountInBaseCurrency")].isNull() && m_amount_in_base_currency_isValid;

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_cost_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_cost_in_base_currency, json[QString("costInBaseCurrency")]);
    m_cost_in_base_currency_isSet = !json[QString("costInBaseCurrency")].isNull() && m_cost_in_base_currency_isValid;

    m_premium_amount_isValid = ::OpenAPI::fromJsonValue(m_premium_amount, json[QString("premiumAmount")]);
    m_premium_amount_isSet = !json[QString("premiumAmount")].isNull() && m_premium_amount_isValid;

    m_premium_amount_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_premium_amount_in_base_currency, json[QString("premiumAmountInBaseCurrency")]);
    m_premium_amount_in_base_currency_isSet = !json[QString("premiumAmountInBaseCurrency")].isNull() && m_premium_amount_in_base_currency_isValid;

    m_tax_category_id_isValid = ::OpenAPI::fromJsonValue(m_tax_category_id, json[QString("taxCategoryId")]);
    m_tax_category_id_isSet = !json[QString("taxCategoryId")].isNull() && m_tax_category_id_isValid;

    m_volume_isValid = ::OpenAPI::fromJsonValue(m_volume, json[QString("volume")]);
    m_volume_isSet = !json[QString("volume")].isNull() && m_volume_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAISalesOrderFreightDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesOrderFreightDto::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_amount_in_base_currency_isSet) {
        obj.insert(QString("amountInBaseCurrency"), ::OpenAPI::toJsonValue(m_amount_in_base_currency));
    }
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_cost_in_base_currency_isSet) {
        obj.insert(QString("costInBaseCurrency"), ::OpenAPI::toJsonValue(m_cost_in_base_currency));
    }
    if (m_premium_amount_isSet) {
        obj.insert(QString("premiumAmount"), ::OpenAPI::toJsonValue(m_premium_amount));
    }
    if (m_premium_amount_in_base_currency_isSet) {
        obj.insert(QString("premiumAmountInBaseCurrency"), ::OpenAPI::toJsonValue(m_premium_amount_in_base_currency));
    }
    if (m_tax_category_id_isSet) {
        obj.insert(QString("taxCategoryId"), ::OpenAPI::toJsonValue(m_tax_category_id));
    }
    if (m_volume_isSet) {
        obj.insert(QString("volume"), ::OpenAPI::toJsonValue(m_volume));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

double OAISalesOrderFreightDto::getAmount() const {
    return m_amount;
}
void OAISalesOrderFreightDto::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAISalesOrderFreightDto::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAISalesOrderFreightDto::is_amount_Valid() const{
    return m_amount_isValid;
}

double OAISalesOrderFreightDto::getAmountInBaseCurrency() const {
    return m_amount_in_base_currency;
}
void OAISalesOrderFreightDto::setAmountInBaseCurrency(const double &amount_in_base_currency) {
    m_amount_in_base_currency = amount_in_base_currency;
    m_amount_in_base_currency_isSet = true;
}

bool OAISalesOrderFreightDto::is_amount_in_base_currency_Set() const{
    return m_amount_in_base_currency_isSet;
}

bool OAISalesOrderFreightDto::is_amount_in_base_currency_Valid() const{
    return m_amount_in_base_currency_isValid;
}

double OAISalesOrderFreightDto::getCost() const {
    return m_cost;
}
void OAISalesOrderFreightDto::setCost(const double &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAISalesOrderFreightDto::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAISalesOrderFreightDto::is_cost_Valid() const{
    return m_cost_isValid;
}

double OAISalesOrderFreightDto::getCostInBaseCurrency() const {
    return m_cost_in_base_currency;
}
void OAISalesOrderFreightDto::setCostInBaseCurrency(const double &cost_in_base_currency) {
    m_cost_in_base_currency = cost_in_base_currency;
    m_cost_in_base_currency_isSet = true;
}

bool OAISalesOrderFreightDto::is_cost_in_base_currency_Set() const{
    return m_cost_in_base_currency_isSet;
}

bool OAISalesOrderFreightDto::is_cost_in_base_currency_Valid() const{
    return m_cost_in_base_currency_isValid;
}

double OAISalesOrderFreightDto::getPremiumAmount() const {
    return m_premium_amount;
}
void OAISalesOrderFreightDto::setPremiumAmount(const double &premium_amount) {
    m_premium_amount = premium_amount;
    m_premium_amount_isSet = true;
}

bool OAISalesOrderFreightDto::is_premium_amount_Set() const{
    return m_premium_amount_isSet;
}

bool OAISalesOrderFreightDto::is_premium_amount_Valid() const{
    return m_premium_amount_isValid;
}

double OAISalesOrderFreightDto::getPremiumAmountInBaseCurrency() const {
    return m_premium_amount_in_base_currency;
}
void OAISalesOrderFreightDto::setPremiumAmountInBaseCurrency(const double &premium_amount_in_base_currency) {
    m_premium_amount_in_base_currency = premium_amount_in_base_currency;
    m_premium_amount_in_base_currency_isSet = true;
}

bool OAISalesOrderFreightDto::is_premium_amount_in_base_currency_Set() const{
    return m_premium_amount_in_base_currency_isSet;
}

bool OAISalesOrderFreightDto::is_premium_amount_in_base_currency_Valid() const{
    return m_premium_amount_in_base_currency_isValid;
}

QString OAISalesOrderFreightDto::getTaxCategoryId() const {
    return m_tax_category_id;
}
void OAISalesOrderFreightDto::setTaxCategoryId(const QString &tax_category_id) {
    m_tax_category_id = tax_category_id;
    m_tax_category_id_isSet = true;
}

bool OAISalesOrderFreightDto::is_tax_category_id_Set() const{
    return m_tax_category_id_isSet;
}

bool OAISalesOrderFreightDto::is_tax_category_id_Valid() const{
    return m_tax_category_id_isValid;
}

double OAISalesOrderFreightDto::getVolume() const {
    return m_volume;
}
void OAISalesOrderFreightDto::setVolume(const double &volume) {
    m_volume = volume;
    m_volume_isSet = true;
}

bool OAISalesOrderFreightDto::is_volume_Set() const{
    return m_volume_isSet;
}

bool OAISalesOrderFreightDto::is_volume_Valid() const{
    return m_volume_isValid;
}

double OAISalesOrderFreightDto::getWeight() const {
    return m_weight;
}
void OAISalesOrderFreightDto::setWeight(const double &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAISalesOrderFreightDto::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAISalesOrderFreightDto::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAISalesOrderFreightDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_premium_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_premium_amount_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesOrderFreightDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
