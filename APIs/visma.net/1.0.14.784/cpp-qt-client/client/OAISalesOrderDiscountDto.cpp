/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesOrderDiscountDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesOrderDiscountDto::OAISalesOrderDiscountDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesOrderDiscountDto::OAISalesOrderDiscountDto() {
    this->initializeModel();
}

OAISalesOrderDiscountDto::~OAISalesOrderDiscountDto() {}

void OAISalesOrderDiscountDto::initializeModel() {

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_discount_id_isSet = false;
    m_discount_id_isValid = false;

    m_discount_percent_isSet = false;
    m_discount_percent_isValid = false;

    m_discount_sequence_id_isSet = false;
    m_discount_sequence_id_isValid = false;

    m_discountable_amount_isSet = false;
    m_discountable_amount_isValid = false;

    m_discountable_quantity_isSet = false;
    m_discountable_quantity_isValid = false;

    m_free_item_isSet = false;
    m_free_item_isValid = false;

    m_free_item_quantity_isSet = false;
    m_free_item_quantity_isValid = false;

    m_is_manual_isSet = false;
    m_is_manual_isValid = false;

    m_manual_order_index_isSet = false;
    m_manual_order_index_isValid = false;

    m_skip_discount_isSet = false;
    m_skip_discount_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISalesOrderDiscountDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesOrderDiscountDto::fromJsonObject(QJsonObject json) {

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("discountAmount")]);
    m_discount_amount_isSet = !json[QString("discountAmount")].isNull() && m_discount_amount_isValid;

    m_discount_id_isValid = ::OpenAPI::fromJsonValue(m_discount_id, json[QString("discountId")]);
    m_discount_id_isSet = !json[QString("discountId")].isNull() && m_discount_id_isValid;

    m_discount_percent_isValid = ::OpenAPI::fromJsonValue(m_discount_percent, json[QString("discountPercent")]);
    m_discount_percent_isSet = !json[QString("discountPercent")].isNull() && m_discount_percent_isValid;

    m_discount_sequence_id_isValid = ::OpenAPI::fromJsonValue(m_discount_sequence_id, json[QString("discountSequenceId")]);
    m_discount_sequence_id_isSet = !json[QString("discountSequenceId")].isNull() && m_discount_sequence_id_isValid;

    m_discountable_amount_isValid = ::OpenAPI::fromJsonValue(m_discountable_amount, json[QString("discountableAmount")]);
    m_discountable_amount_isSet = !json[QString("discountableAmount")].isNull() && m_discountable_amount_isValid;

    m_discountable_quantity_isValid = ::OpenAPI::fromJsonValue(m_discountable_quantity, json[QString("discountableQuantity")]);
    m_discountable_quantity_isSet = !json[QString("discountableQuantity")].isNull() && m_discountable_quantity_isValid;

    m_free_item_isValid = ::OpenAPI::fromJsonValue(m_free_item, json[QString("freeItem")]);
    m_free_item_isSet = !json[QString("freeItem")].isNull() && m_free_item_isValid;

    m_free_item_quantity_isValid = ::OpenAPI::fromJsonValue(m_free_item_quantity, json[QString("freeItemQuantity")]);
    m_free_item_quantity_isSet = !json[QString("freeItemQuantity")].isNull() && m_free_item_quantity_isValid;

    m_is_manual_isValid = ::OpenAPI::fromJsonValue(m_is_manual, json[QString("isManual")]);
    m_is_manual_isSet = !json[QString("isManual")].isNull() && m_is_manual_isValid;

    m_manual_order_index_isValid = ::OpenAPI::fromJsonValue(m_manual_order_index, json[QString("manualOrderIndex")]);
    m_manual_order_index_isSet = !json[QString("manualOrderIndex")].isNull() && m_manual_order_index_isValid;

    m_skip_discount_isValid = ::OpenAPI::fromJsonValue(m_skip_discount, json[QString("skipDiscount")]);
    m_skip_discount_isSet = !json[QString("skipDiscount")].isNull() && m_skip_discount_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISalesOrderDiscountDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesOrderDiscountDto::asJsonObject() const {
    QJsonObject obj;
    if (m_discount_amount_isSet) {
        obj.insert(QString("discountAmount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_discount_id_isSet) {
        obj.insert(QString("discountId"), ::OpenAPI::toJsonValue(m_discount_id));
    }
    if (m_discount_percent_isSet) {
        obj.insert(QString("discountPercent"), ::OpenAPI::toJsonValue(m_discount_percent));
    }
    if (m_discount_sequence_id_isSet) {
        obj.insert(QString("discountSequenceId"), ::OpenAPI::toJsonValue(m_discount_sequence_id));
    }
    if (m_discountable_amount_isSet) {
        obj.insert(QString("discountableAmount"), ::OpenAPI::toJsonValue(m_discountable_amount));
    }
    if (m_discountable_quantity_isSet) {
        obj.insert(QString("discountableQuantity"), ::OpenAPI::toJsonValue(m_discountable_quantity));
    }
    if (m_free_item.isSet()) {
        obj.insert(QString("freeItem"), ::OpenAPI::toJsonValue(m_free_item));
    }
    if (m_free_item_quantity_isSet) {
        obj.insert(QString("freeItemQuantity"), ::OpenAPI::toJsonValue(m_free_item_quantity));
    }
    if (m_is_manual_isSet) {
        obj.insert(QString("isManual"), ::OpenAPI::toJsonValue(m_is_manual));
    }
    if (m_manual_order_index_isSet) {
        obj.insert(QString("manualOrderIndex"), ::OpenAPI::toJsonValue(m_manual_order_index));
    }
    if (m_skip_discount_isSet) {
        obj.insert(QString("skipDiscount"), ::OpenAPI::toJsonValue(m_skip_discount));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

double OAISalesOrderDiscountDto::getDiscountAmount() const {
    return m_discount_amount;
}
void OAISalesOrderDiscountDto::setDiscountAmount(const double &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAISalesOrderDiscountDto::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAISalesOrderDiscountDto::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

QString OAISalesOrderDiscountDto::getDiscountId() const {
    return m_discount_id;
}
void OAISalesOrderDiscountDto::setDiscountId(const QString &discount_id) {
    m_discount_id = discount_id;
    m_discount_id_isSet = true;
}

bool OAISalesOrderDiscountDto::is_discount_id_Set() const{
    return m_discount_id_isSet;
}

bool OAISalesOrderDiscountDto::is_discount_id_Valid() const{
    return m_discount_id_isValid;
}

double OAISalesOrderDiscountDto::getDiscountPercent() const {
    return m_discount_percent;
}
void OAISalesOrderDiscountDto::setDiscountPercent(const double &discount_percent) {
    m_discount_percent = discount_percent;
    m_discount_percent_isSet = true;
}

bool OAISalesOrderDiscountDto::is_discount_percent_Set() const{
    return m_discount_percent_isSet;
}

bool OAISalesOrderDiscountDto::is_discount_percent_Valid() const{
    return m_discount_percent_isValid;
}

QString OAISalesOrderDiscountDto::getDiscountSequenceId() const {
    return m_discount_sequence_id;
}
void OAISalesOrderDiscountDto::setDiscountSequenceId(const QString &discount_sequence_id) {
    m_discount_sequence_id = discount_sequence_id;
    m_discount_sequence_id_isSet = true;
}

bool OAISalesOrderDiscountDto::is_discount_sequence_id_Set() const{
    return m_discount_sequence_id_isSet;
}

bool OAISalesOrderDiscountDto::is_discount_sequence_id_Valid() const{
    return m_discount_sequence_id_isValid;
}

double OAISalesOrderDiscountDto::getDiscountableAmount() const {
    return m_discountable_amount;
}
void OAISalesOrderDiscountDto::setDiscountableAmount(const double &discountable_amount) {
    m_discountable_amount = discountable_amount;
    m_discountable_amount_isSet = true;
}

bool OAISalesOrderDiscountDto::is_discountable_amount_Set() const{
    return m_discountable_amount_isSet;
}

bool OAISalesOrderDiscountDto::is_discountable_amount_Valid() const{
    return m_discountable_amount_isValid;
}

double OAISalesOrderDiscountDto::getDiscountableQuantity() const {
    return m_discountable_quantity;
}
void OAISalesOrderDiscountDto::setDiscountableQuantity(const double &discountable_quantity) {
    m_discountable_quantity = discountable_quantity;
    m_discountable_quantity_isSet = true;
}

bool OAISalesOrderDiscountDto::is_discountable_quantity_Set() const{
    return m_discountable_quantity_isSet;
}

bool OAISalesOrderDiscountDto::is_discountable_quantity_Valid() const{
    return m_discountable_quantity_isValid;
}

OAICdDescriptionPairDto OAISalesOrderDiscountDto::getFreeItem() const {
    return m_free_item;
}
void OAISalesOrderDiscountDto::setFreeItem(const OAICdDescriptionPairDto &free_item) {
    m_free_item = free_item;
    m_free_item_isSet = true;
}

bool OAISalesOrderDiscountDto::is_free_item_Set() const{
    return m_free_item_isSet;
}

bool OAISalesOrderDiscountDto::is_free_item_Valid() const{
    return m_free_item_isValid;
}

double OAISalesOrderDiscountDto::getFreeItemQuantity() const {
    return m_free_item_quantity;
}
void OAISalesOrderDiscountDto::setFreeItemQuantity(const double &free_item_quantity) {
    m_free_item_quantity = free_item_quantity;
    m_free_item_quantity_isSet = true;
}

bool OAISalesOrderDiscountDto::is_free_item_quantity_Set() const{
    return m_free_item_quantity_isSet;
}

bool OAISalesOrderDiscountDto::is_free_item_quantity_Valid() const{
    return m_free_item_quantity_isValid;
}

bool OAISalesOrderDiscountDto::isIsManual() const {
    return m_is_manual;
}
void OAISalesOrderDiscountDto::setIsManual(const bool &is_manual) {
    m_is_manual = is_manual;
    m_is_manual_isSet = true;
}

bool OAISalesOrderDiscountDto::is_is_manual_Set() const{
    return m_is_manual_isSet;
}

bool OAISalesOrderDiscountDto::is_is_manual_Valid() const{
    return m_is_manual_isValid;
}

qint32 OAISalesOrderDiscountDto::getManualOrderIndex() const {
    return m_manual_order_index;
}
void OAISalesOrderDiscountDto::setManualOrderIndex(const qint32 &manual_order_index) {
    m_manual_order_index = manual_order_index;
    m_manual_order_index_isSet = true;
}

bool OAISalesOrderDiscountDto::is_manual_order_index_Set() const{
    return m_manual_order_index_isSet;
}

bool OAISalesOrderDiscountDto::is_manual_order_index_Valid() const{
    return m_manual_order_index_isValid;
}

bool OAISalesOrderDiscountDto::isSkipDiscount() const {
    return m_skip_discount;
}
void OAISalesOrderDiscountDto::setSkipDiscount(const bool &skip_discount) {
    m_skip_discount = skip_discount;
    m_skip_discount_isSet = true;
}

bool OAISalesOrderDiscountDto::is_skip_discount_Set() const{
    return m_skip_discount_isSet;
}

bool OAISalesOrderDiscountDto::is_skip_discount_Valid() const{
    return m_skip_discount_isValid;
}

QString OAISalesOrderDiscountDto::getType() const {
    return m_type;
}
void OAISalesOrderDiscountDto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISalesOrderDiscountDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAISalesOrderDiscountDto::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISalesOrderDiscountDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_sequence_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discountable_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discountable_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_item_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_manual_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_order_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesOrderDiscountDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
