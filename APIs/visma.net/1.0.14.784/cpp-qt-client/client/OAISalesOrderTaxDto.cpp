/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesOrderTaxDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesOrderTaxDto::OAISalesOrderTaxDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesOrderTaxDto::OAISalesOrderTaxDto() {
    this->initializeModel();
}

OAISalesOrderTaxDto::~OAISalesOrderTaxDto() {}

void OAISalesOrderTaxDto::initializeModel() {

    m_exempt_tax_isSet = false;
    m_exempt_tax_isValid = false;

    m_include_in_taxable_isSet = false;
    m_include_in_taxable_isValid = false;

    m_is_pending_tax_isSet = false;
    m_is_pending_tax_isValid = false;

    m_is_reverse_tax_isSet = false;
    m_is_reverse_tax_isValid = false;

    m_is_statistical_tax_isSet = false;
    m_is_statistical_tax_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_tax_id_isSet = false;
    m_tax_id_isValid = false;

    m_tax_rate_isSet = false;
    m_tax_rate_isValid = false;

    m_tax_type_isSet = false;
    m_tax_type_isValid = false;

    m_taxable_amount_isSet = false;
    m_taxable_amount_isValid = false;
}

void OAISalesOrderTaxDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesOrderTaxDto::fromJsonObject(QJsonObject json) {

    m_exempt_tax_isValid = ::OpenAPI::fromJsonValue(m_exempt_tax, json[QString("exemptTax")]);
    m_exempt_tax_isSet = !json[QString("exemptTax")].isNull() && m_exempt_tax_isValid;

    m_include_in_taxable_isValid = ::OpenAPI::fromJsonValue(m_include_in_taxable, json[QString("includeInTaxable")]);
    m_include_in_taxable_isSet = !json[QString("includeInTaxable")].isNull() && m_include_in_taxable_isValid;

    m_is_pending_tax_isValid = ::OpenAPI::fromJsonValue(m_is_pending_tax, json[QString("isPendingTax")]);
    m_is_pending_tax_isSet = !json[QString("isPendingTax")].isNull() && m_is_pending_tax_isValid;

    m_is_reverse_tax_isValid = ::OpenAPI::fromJsonValue(m_is_reverse_tax, json[QString("isReverseTax")]);
    m_is_reverse_tax_isSet = !json[QString("isReverseTax")].isNull() && m_is_reverse_tax_isValid;

    m_is_statistical_tax_isValid = ::OpenAPI::fromJsonValue(m_is_statistical_tax, json[QString("isStatisticalTax")]);
    m_is_statistical_tax_isSet = !json[QString("isStatisticalTax")].isNull() && m_is_statistical_tax_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("taxAmount")]);
    m_tax_amount_isSet = !json[QString("taxAmount")].isNull() && m_tax_amount_isValid;

    m_tax_id_isValid = ::OpenAPI::fromJsonValue(m_tax_id, json[QString("taxId")]);
    m_tax_id_isSet = !json[QString("taxId")].isNull() && m_tax_id_isValid;

    m_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_tax_rate, json[QString("taxRate")]);
    m_tax_rate_isSet = !json[QString("taxRate")].isNull() && m_tax_rate_isValid;

    m_tax_type_isValid = ::OpenAPI::fromJsonValue(m_tax_type, json[QString("taxType")]);
    m_tax_type_isSet = !json[QString("taxType")].isNull() && m_tax_type_isValid;

    m_taxable_amount_isValid = ::OpenAPI::fromJsonValue(m_taxable_amount, json[QString("taxableAmount")]);
    m_taxable_amount_isSet = !json[QString("taxableAmount")].isNull() && m_taxable_amount_isValid;
}

QString OAISalesOrderTaxDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesOrderTaxDto::asJsonObject() const {
    QJsonObject obj;
    if (m_exempt_tax_isSet) {
        obj.insert(QString("exemptTax"), ::OpenAPI::toJsonValue(m_exempt_tax));
    }
    if (m_include_in_taxable_isSet) {
        obj.insert(QString("includeInTaxable"), ::OpenAPI::toJsonValue(m_include_in_taxable));
    }
    if (m_is_pending_tax_isSet) {
        obj.insert(QString("isPendingTax"), ::OpenAPI::toJsonValue(m_is_pending_tax));
    }
    if (m_is_reverse_tax_isSet) {
        obj.insert(QString("isReverseTax"), ::OpenAPI::toJsonValue(m_is_reverse_tax));
    }
    if (m_is_statistical_tax_isSet) {
        obj.insert(QString("isStatisticalTax"), ::OpenAPI::toJsonValue(m_is_statistical_tax));
    }
    if (m_tax_amount_isSet) {
        obj.insert(QString("taxAmount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_tax_id_isSet) {
        obj.insert(QString("taxId"), ::OpenAPI::toJsonValue(m_tax_id));
    }
    if (m_tax_rate_isSet) {
        obj.insert(QString("taxRate"), ::OpenAPI::toJsonValue(m_tax_rate));
    }
    if (m_tax_type_isSet) {
        obj.insert(QString("taxType"), ::OpenAPI::toJsonValue(m_tax_type));
    }
    if (m_taxable_amount_isSet) {
        obj.insert(QString("taxableAmount"), ::OpenAPI::toJsonValue(m_taxable_amount));
    }
    return obj;
}

bool OAISalesOrderTaxDto::isExemptTax() const {
    return m_exempt_tax;
}
void OAISalesOrderTaxDto::setExemptTax(const bool &exempt_tax) {
    m_exempt_tax = exempt_tax;
    m_exempt_tax_isSet = true;
}

bool OAISalesOrderTaxDto::is_exempt_tax_Set() const{
    return m_exempt_tax_isSet;
}

bool OAISalesOrderTaxDto::is_exempt_tax_Valid() const{
    return m_exempt_tax_isValid;
}

bool OAISalesOrderTaxDto::isIncludeInTaxable() const {
    return m_include_in_taxable;
}
void OAISalesOrderTaxDto::setIncludeInTaxable(const bool &include_in_taxable) {
    m_include_in_taxable = include_in_taxable;
    m_include_in_taxable_isSet = true;
}

bool OAISalesOrderTaxDto::is_include_in_taxable_Set() const{
    return m_include_in_taxable_isSet;
}

bool OAISalesOrderTaxDto::is_include_in_taxable_Valid() const{
    return m_include_in_taxable_isValid;
}

bool OAISalesOrderTaxDto::isIsPendingTax() const {
    return m_is_pending_tax;
}
void OAISalesOrderTaxDto::setIsPendingTax(const bool &is_pending_tax) {
    m_is_pending_tax = is_pending_tax;
    m_is_pending_tax_isSet = true;
}

bool OAISalesOrderTaxDto::is_is_pending_tax_Set() const{
    return m_is_pending_tax_isSet;
}

bool OAISalesOrderTaxDto::is_is_pending_tax_Valid() const{
    return m_is_pending_tax_isValid;
}

bool OAISalesOrderTaxDto::isIsReverseTax() const {
    return m_is_reverse_tax;
}
void OAISalesOrderTaxDto::setIsReverseTax(const bool &is_reverse_tax) {
    m_is_reverse_tax = is_reverse_tax;
    m_is_reverse_tax_isSet = true;
}

bool OAISalesOrderTaxDto::is_is_reverse_tax_Set() const{
    return m_is_reverse_tax_isSet;
}

bool OAISalesOrderTaxDto::is_is_reverse_tax_Valid() const{
    return m_is_reverse_tax_isValid;
}

bool OAISalesOrderTaxDto::isIsStatisticalTax() const {
    return m_is_statistical_tax;
}
void OAISalesOrderTaxDto::setIsStatisticalTax(const bool &is_statistical_tax) {
    m_is_statistical_tax = is_statistical_tax;
    m_is_statistical_tax_isSet = true;
}

bool OAISalesOrderTaxDto::is_is_statistical_tax_Set() const{
    return m_is_statistical_tax_isSet;
}

bool OAISalesOrderTaxDto::is_is_statistical_tax_Valid() const{
    return m_is_statistical_tax_isValid;
}

double OAISalesOrderTaxDto::getTaxAmount() const {
    return m_tax_amount;
}
void OAISalesOrderTaxDto::setTaxAmount(const double &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAISalesOrderTaxDto::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAISalesOrderTaxDto::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

QString OAISalesOrderTaxDto::getTaxId() const {
    return m_tax_id;
}
void OAISalesOrderTaxDto::setTaxId(const QString &tax_id) {
    m_tax_id = tax_id;
    m_tax_id_isSet = true;
}

bool OAISalesOrderTaxDto::is_tax_id_Set() const{
    return m_tax_id_isSet;
}

bool OAISalesOrderTaxDto::is_tax_id_Valid() const{
    return m_tax_id_isValid;
}

double OAISalesOrderTaxDto::getTaxRate() const {
    return m_tax_rate;
}
void OAISalesOrderTaxDto::setTaxRate(const double &tax_rate) {
    m_tax_rate = tax_rate;
    m_tax_rate_isSet = true;
}

bool OAISalesOrderTaxDto::is_tax_rate_Set() const{
    return m_tax_rate_isSet;
}

bool OAISalesOrderTaxDto::is_tax_rate_Valid() const{
    return m_tax_rate_isValid;
}

QString OAISalesOrderTaxDto::getTaxType() const {
    return m_tax_type;
}
void OAISalesOrderTaxDto::setTaxType(const QString &tax_type) {
    m_tax_type = tax_type;
    m_tax_type_isSet = true;
}

bool OAISalesOrderTaxDto::is_tax_type_Set() const{
    return m_tax_type_isSet;
}

bool OAISalesOrderTaxDto::is_tax_type_Valid() const{
    return m_tax_type_isValid;
}

double OAISalesOrderTaxDto::getTaxableAmount() const {
    return m_taxable_amount;
}
void OAISalesOrderTaxDto::setTaxableAmount(const double &taxable_amount) {
    m_taxable_amount = taxable_amount;
    m_taxable_amount_isSet = true;
}

bool OAISalesOrderTaxDto::is_taxable_amount_Set() const{
    return m_taxable_amount_isSet;
}

bool OAISalesOrderTaxDto::is_taxable_amount_Valid() const{
    return m_taxable_amount_isValid;
}

bool OAISalesOrderTaxDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exempt_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_in_taxable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_pending_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_reverse_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_statistical_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxable_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesOrderTaxDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
