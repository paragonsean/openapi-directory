/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddressDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddressDto::OAIAddressDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddressDto::OAIAddressDto() {
    this->initializeModel();
}

OAIAddressDto::~OAIAddressDto() {}

void OAIAddressDto::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_county_isSet = false;
    m_county_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_line1_isSet = false;
    m_line1_isValid = false;

    m_line2_isSet = false;
    m_line2_isValid = false;

    m_line3_isSet = false;
    m_line3_isValid = false;

    m_overrides_default_isSet = false;
    m_overrides_default_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;
}

void OAIAddressDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddressDto::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_county_isValid = ::OpenAPI::fromJsonValue(m_county, json[QString("county")]);
    m_county_isSet = !json[QString("county")].isNull() && m_county_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_line1_isValid = ::OpenAPI::fromJsonValue(m_line1, json[QString("line1")]);
    m_line1_isSet = !json[QString("line1")].isNull() && m_line1_isValid;

    m_line2_isValid = ::OpenAPI::fromJsonValue(m_line2, json[QString("line2")]);
    m_line2_isSet = !json[QString("line2")].isNull() && m_line2_isValid;

    m_line3_isValid = ::OpenAPI::fromJsonValue(m_line3, json[QString("line3")]);
    m_line3_isSet = !json[QString("line3")].isNull() && m_line3_isValid;

    m_overrides_default_isValid = ::OpenAPI::fromJsonValue(m_overrides_default, json[QString("overridesDefault")]);
    m_overrides_default_isSet = !json[QString("overridesDefault")].isNull() && m_overrides_default_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;
}

QString OAIAddressDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddressDto::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_county.isSet()) {
        obj.insert(QString("county"), ::OpenAPI::toJsonValue(m_county));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_line1_isSet) {
        obj.insert(QString("line1"), ::OpenAPI::toJsonValue(m_line1));
    }
    if (m_line2_isSet) {
        obj.insert(QString("line2"), ::OpenAPI::toJsonValue(m_line2));
    }
    if (m_line3_isSet) {
        obj.insert(QString("line3"), ::OpenAPI::toJsonValue(m_line3));
    }
    if (m_overrides_default_isSet) {
        obj.insert(QString("overridesDefault"), ::OpenAPI::toJsonValue(m_overrides_default));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    return obj;
}

QString OAIAddressDto::getCity() const {
    return m_city;
}
void OAIAddressDto::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAddressDto::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAddressDto::is_city_Valid() const{
    return m_city_isValid;
}

OAICdNamePairDto OAIAddressDto::getCountry() const {
    return m_country;
}
void OAIAddressDto::setCountry(const OAICdNamePairDto &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAddressDto::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAddressDto::is_country_Valid() const{
    return m_country_isValid;
}

OAICdNamePairDto OAIAddressDto::getCounty() const {
    return m_county;
}
void OAIAddressDto::setCounty(const OAICdNamePairDto &county) {
    m_county = county;
    m_county_isSet = true;
}

bool OAIAddressDto::is_county_Set() const{
    return m_county_isSet;
}

bool OAIAddressDto::is_county_Valid() const{
    return m_county_isValid;
}

qint32 OAIAddressDto::getId() const {
    return m_id;
}
void OAIAddressDto::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAddressDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAddressDto::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAddressDto::getLine1() const {
    return m_line1;
}
void OAIAddressDto::setLine1(const QString &line1) {
    m_line1 = line1;
    m_line1_isSet = true;
}

bool OAIAddressDto::is_line1_Set() const{
    return m_line1_isSet;
}

bool OAIAddressDto::is_line1_Valid() const{
    return m_line1_isValid;
}

QString OAIAddressDto::getLine2() const {
    return m_line2;
}
void OAIAddressDto::setLine2(const QString &line2) {
    m_line2 = line2;
    m_line2_isSet = true;
}

bool OAIAddressDto::is_line2_Set() const{
    return m_line2_isSet;
}

bool OAIAddressDto::is_line2_Valid() const{
    return m_line2_isValid;
}

QString OAIAddressDto::getLine3() const {
    return m_line3;
}
void OAIAddressDto::setLine3(const QString &line3) {
    m_line3 = line3;
    m_line3_isSet = true;
}

bool OAIAddressDto::is_line3_Set() const{
    return m_line3_isSet;
}

bool OAIAddressDto::is_line3_Valid() const{
    return m_line3_isValid;
}

bool OAIAddressDto::isOverridesDefault() const {
    return m_overrides_default;
}
void OAIAddressDto::setOverridesDefault(const bool &overrides_default) {
    m_overrides_default = overrides_default;
    m_overrides_default_isSet = true;
}

bool OAIAddressDto::is_overrides_default_Set() const{
    return m_overrides_default_isSet;
}

bool OAIAddressDto::is_overrides_default_Valid() const{
    return m_overrides_default_isValid;
}

QString OAIAddressDto::getPostalCode() const {
    return m_postal_code;
}
void OAIAddressDto::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIAddressDto::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIAddressDto::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

bool OAIAddressDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_county.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overrides_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddressDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
