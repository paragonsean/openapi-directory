/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesOrderExpansions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesOrderExpansions::OAISalesOrderExpansions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesOrderExpansions::OAISalesOrderExpansions() {
    this->initializeModel();
}

OAISalesOrderExpansions::~OAISalesOrderExpansions() {}

void OAISalesOrderExpansions::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISalesOrderExpansions::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISalesOrderExpansions::fromJson(QString jsonString) {
    
    if ( jsonString.compare("None", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesOrderExpansions::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Billing", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesOrderExpansions::BILLING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Payment", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesOrderExpansions::PAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FinancialInformation", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesOrderExpansions::FINANCIALINFORMATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Shipping", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesOrderExpansions::SHIPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Customer", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesOrderExpansions::CUSTOMER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Owner", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesOrderExpansions::OWNER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Origin", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesOrderExpansions::ORIGIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Note", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesOrderExpansions::NOTE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Freight", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesOrderExpansions::FREIGHT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Attachments", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesOrderExpansions::ATTACHMENTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("All", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesOrderExpansions::ALL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISalesOrderExpansions::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISalesOrderExpansions::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISalesOrderExpansions::NONE:
            val = "None";
            break;
        case eOAISalesOrderExpansions::BILLING:
            val = "Billing";
            break;
        case eOAISalesOrderExpansions::PAYMENT:
            val = "Payment";
            break;
        case eOAISalesOrderExpansions::FINANCIALINFORMATION:
            val = "FinancialInformation";
            break;
        case eOAISalesOrderExpansions::SHIPPING:
            val = "Shipping";
            break;
        case eOAISalesOrderExpansions::CUSTOMER:
            val = "Customer";
            break;
        case eOAISalesOrderExpansions::OWNER:
            val = "Owner";
            break;
        case eOAISalesOrderExpansions::ORIGIN:
            val = "Origin";
            break;
        case eOAISalesOrderExpansions::NOTE:
            val = "Note";
            break;
        case eOAISalesOrderExpansions::FREIGHT:
            val = "Freight";
            break;
        case eOAISalesOrderExpansions::ATTACHMENTS:
            val = "Attachments";
            break;
        case eOAISalesOrderExpansions::ALL:
            val = "All";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISalesOrderExpansions::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISalesOrderExpansions::eOAISalesOrderExpansions OAISalesOrderExpansions::getValue() const {
    return m_value;
}

void OAISalesOrderExpansions::setValue(const OAISalesOrderExpansions::eOAISalesOrderExpansions& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISalesOrderExpansions::isSet() const {
    
    return m_value_isSet;
}

bool OAISalesOrderExpansions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
