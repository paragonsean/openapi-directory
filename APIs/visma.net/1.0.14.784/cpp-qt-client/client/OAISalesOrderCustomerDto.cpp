/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesOrderCustomerDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesOrderCustomerDto::OAISalesOrderCustomerDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesOrderCustomerDto::OAISalesOrderCustomerDto() {
    this->initializeModel();
}

OAISalesOrderCustomerDto::~OAISalesOrderCustomerDto() {}

void OAISalesOrderCustomerDto::initializeModel() {

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_internal_id_isSet = false;
    m_internal_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_ref_no_isSet = false;
    m_ref_no_isValid = false;

    m_tax_zone_isSet = false;
    m_tax_zone_isValid = false;
}

void OAISalesOrderCustomerDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesOrderCustomerDto::fromJsonObject(QJsonObject json) {

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("contactId")]);
    m_contact_id_isSet = !json[QString("contactId")].isNull() && m_contact_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_internal_id_isValid = ::OpenAPI::fromJsonValue(m_internal_id, json[QString("internalId")]);
    m_internal_id_isSet = !json[QString("internalId")].isNull() && m_internal_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_ref_no_isValid = ::OpenAPI::fromJsonValue(m_ref_no, json[QString("refNo")]);
    m_ref_no_isSet = !json[QString("refNo")].isNull() && m_ref_no_isValid;

    m_tax_zone_isValid = ::OpenAPI::fromJsonValue(m_tax_zone, json[QString("taxZone")]);
    m_tax_zone_isSet = !json[QString("taxZone")].isNull() && m_tax_zone_isValid;
}

QString OAISalesOrderCustomerDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesOrderCustomerDto::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_id_isSet) {
        obj.insert(QString("contactId"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_internal_id_isSet) {
        obj.insert(QString("internalId"), ::OpenAPI::toJsonValue(m_internal_id));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_ref_no_isSet) {
        obj.insert(QString("refNo"), ::OpenAPI::toJsonValue(m_ref_no));
    }
    if (m_tax_zone.isSet()) {
        obj.insert(QString("taxZone"), ::OpenAPI::toJsonValue(m_tax_zone));
    }
    return obj;
}

qint32 OAISalesOrderCustomerDto::getContactId() const {
    return m_contact_id;
}
void OAISalesOrderCustomerDto::setContactId(const qint32 &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAISalesOrderCustomerDto::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAISalesOrderCustomerDto::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

QString OAISalesOrderCustomerDto::getId() const {
    return m_id;
}
void OAISalesOrderCustomerDto::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISalesOrderCustomerDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAISalesOrderCustomerDto::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAISalesOrderCustomerDto::getInternalId() const {
    return m_internal_id;
}
void OAISalesOrderCustomerDto::setInternalId(const qint32 &internal_id) {
    m_internal_id = internal_id;
    m_internal_id_isSet = true;
}

bool OAISalesOrderCustomerDto::is_internal_id_Set() const{
    return m_internal_id_isSet;
}

bool OAISalesOrderCustomerDto::is_internal_id_Valid() const{
    return m_internal_id_isValid;
}

OAICustomerLocationDto OAISalesOrderCustomerDto::getLocation() const {
    return m_location;
}
void OAISalesOrderCustomerDto::setLocation(const OAICustomerLocationDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAISalesOrderCustomerDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAISalesOrderCustomerDto::is_location_Valid() const{
    return m_location_isValid;
}

QString OAISalesOrderCustomerDto::getName() const {
    return m_name;
}
void OAISalesOrderCustomerDto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISalesOrderCustomerDto::is_name_Set() const{
    return m_name_isSet;
}

bool OAISalesOrderCustomerDto::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISalesOrderCustomerDto::getOrder() const {
    return m_order;
}
void OAISalesOrderCustomerDto::setOrder(const QString &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAISalesOrderCustomerDto::is_order_Set() const{
    return m_order_isSet;
}

bool OAISalesOrderCustomerDto::is_order_Valid() const{
    return m_order_isValid;
}

QString OAISalesOrderCustomerDto::getRefNo() const {
    return m_ref_no;
}
void OAISalesOrderCustomerDto::setRefNo(const QString &ref_no) {
    m_ref_no = ref_no;
    m_ref_no_isSet = true;
}

bool OAISalesOrderCustomerDto::is_ref_no_Set() const{
    return m_ref_no_isSet;
}

bool OAISalesOrderCustomerDto::is_ref_no_Valid() const{
    return m_ref_no_isValid;
}

OAICdDescriptionPairDto OAISalesOrderCustomerDto::getTaxZone() const {
    return m_tax_zone;
}
void OAISalesOrderCustomerDto::setTaxZone(const OAICdDescriptionPairDto &tax_zone) {
    m_tax_zone = tax_zone;
    m_tax_zone_isSet = true;
}

bool OAISalesOrderCustomerDto::is_tax_zone_Set() const{
    return m_tax_zone_isSet;
}

bool OAISalesOrderCustomerDto::is_tax_zone_Valid() const{
    return m_tax_zone_isValid;
}

bool OAISalesOrderCustomerDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesOrderCustomerDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
