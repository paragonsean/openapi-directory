/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryItemAvailabilityDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryItemAvailabilityDto::OAIInventoryItemAvailabilityDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryItemAvailabilityDto::OAIInventoryItemAvailabilityDto() {
    this->initializeModel();
}

OAIInventoryItemAvailabilityDto::~OAIInventoryItemAvailabilityDto() {}

void OAIInventoryItemAvailabilityDto::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_base_unit_isSet = false;
    m_base_unit_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_internal_id_isSet = false;
    m_internal_id_isValid = false;

    m_inventory_id_isSet = false;
    m_inventory_id_isValid = false;
}

void OAIInventoryItemAvailabilityDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryItemAvailabilityDto::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_base_unit_isValid = ::OpenAPI::fromJsonValue(m_base_unit, json[QString("baseUnit")]);
    m_base_unit_isSet = !json[QString("baseUnit")].isNull() && m_base_unit_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_internal_id_isValid = ::OpenAPI::fromJsonValue(m_internal_id, json[QString("internalId")]);
    m_internal_id_isSet = !json[QString("internalId")].isNull() && m_internal_id_isValid;

    m_inventory_id_isValid = ::OpenAPI::fromJsonValue(m_inventory_id, json[QString("inventoryId")]);
    m_inventory_id_isSet = !json[QString("inventoryId")].isNull() && m_inventory_id_isValid;
}

QString OAIInventoryItemAvailabilityDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryItemAvailabilityDto::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_availability.size() > 0) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_base_unit_isSet) {
        obj.insert(QString("baseUnit"), ::OpenAPI::toJsonValue(m_base_unit));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_internal_id_isSet) {
        obj.insert(QString("internalId"), ::OpenAPI::toJsonValue(m_internal_id));
    }
    if (m_inventory_id_isSet) {
        obj.insert(QString("inventoryId"), ::OpenAPI::toJsonValue(m_inventory_id));
    }
    return obj;
}

QMap<QString, QString> OAIInventoryItemAvailabilityDto::getAttributes() const {
    return m_attributes;
}
void OAIInventoryItemAvailabilityDto::setAttributes(const QMap<QString, QString> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIInventoryItemAvailabilityDto::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIInventoryItemAvailabilityDto::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QList<OAIWarehouseAvailabilityDto> OAIInventoryItemAvailabilityDto::getAvailability() const {
    return m_availability;
}
void OAIInventoryItemAvailabilityDto::setAvailability(const QList<OAIWarehouseAvailabilityDto> &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAIInventoryItemAvailabilityDto::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAIInventoryItemAvailabilityDto::is_availability_Valid() const{
    return m_availability_isValid;
}

QString OAIInventoryItemAvailabilityDto::getBaseUnit() const {
    return m_base_unit;
}
void OAIInventoryItemAvailabilityDto::setBaseUnit(const QString &base_unit) {
    m_base_unit = base_unit;
    m_base_unit_isSet = true;
}

bool OAIInventoryItemAvailabilityDto::is_base_unit_Set() const{
    return m_base_unit_isSet;
}

bool OAIInventoryItemAvailabilityDto::is_base_unit_Valid() const{
    return m_base_unit_isValid;
}

QString OAIInventoryItemAvailabilityDto::getDescription() const {
    return m_description;
}
void OAIInventoryItemAvailabilityDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInventoryItemAvailabilityDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInventoryItemAvailabilityDto::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIInventoryItemAvailabilityDto::getInternalId() const {
    return m_internal_id;
}
void OAIInventoryItemAvailabilityDto::setInternalId(const qint32 &internal_id) {
    m_internal_id = internal_id;
    m_internal_id_isSet = true;
}

bool OAIInventoryItemAvailabilityDto::is_internal_id_Set() const{
    return m_internal_id_isSet;
}

bool OAIInventoryItemAvailabilityDto::is_internal_id_Valid() const{
    return m_internal_id_isValid;
}

QString OAIInventoryItemAvailabilityDto::getInventoryId() const {
    return m_inventory_id;
}
void OAIInventoryItemAvailabilityDto::setInventoryId(const QString &inventory_id) {
    m_inventory_id = inventory_id;
    m_inventory_id_isSet = true;
}

bool OAIInventoryItemAvailabilityDto::is_inventory_id_Set() const{
    return m_inventory_id_isSet;
}

bool OAIInventoryItemAvailabilityDto::is_inventory_id_Valid() const{
    return m_inventory_id_isValid;
}

bool OAIInventoryItemAvailabilityDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryItemAvailabilityDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
