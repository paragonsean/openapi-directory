/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewSalesOrderLineDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewSalesOrderLineDto::OAINewSalesOrderLineDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewSalesOrderLineDto::OAINewSalesOrderLineDto() {
    this->initializeModel();
}

OAINewSalesOrderLineDto::~OAINewSalesOrderLineDto() {}

void OAINewSalesOrderLineDto::initializeModel() {

    m_branch_id_isSet = false;
    m_branch_id_isValid = false;

    m_commissionable_isSet = false;
    m_commissionable_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_discount_code_isSet = false;
    m_discount_code_isValid = false;

    m_discount_percent_isSet = false;
    m_discount_percent_isValid = false;

    m_external_link_isSet = false;
    m_external_link_isValid = false;

    m_has_manual_discount_isSet = false;
    m_has_manual_discount_isValid = false;

    m_has_manual_price_isSet = false;
    m_has_manual_price_isValid = false;

    m_inventory_id_isSet = false;
    m_inventory_id_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_overship_threshold_isSet = false;
    m_overship_threshold_isValid = false;

    m_project_task_id_isSet = false;
    m_project_task_id_isValid = false;

    m_purchase_order_source_isSet = false;
    m_purchase_order_source_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;

    m_request_date_isSet = false;
    m_request_date_isValid = false;

    m_sales_account_id_isSet = false;
    m_sales_account_id_isValid = false;

    m_sales_person_id_isSet = false;
    m_sales_person_id_isValid = false;

    m_ship_date_isSet = false;
    m_ship_date_isValid = false;

    m_shipping_rule_isSet = false;
    m_shipping_rule_isValid = false;

    m_subaccount_isSet = false;
    m_subaccount_isValid = false;

    m_supplier_id_isSet = false;
    m_supplier_id_isValid = false;

    m_supplier_price_isSet = false;
    m_supplier_price_isValid = false;

    m_tax_category_id_isSet = false;
    m_tax_category_id_isValid = false;

    m_undership_threshold_isSet = false;
    m_undership_threshold_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_unit_of_measure_isSet = false;
    m_unit_of_measure_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;

    m_warehouse_id_isSet = false;
    m_warehouse_id_isValid = false;

    m_warehouse_location_id_isSet = false;
    m_warehouse_location_id_isValid = false;
}

void OAINewSalesOrderLineDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewSalesOrderLineDto::fromJsonObject(QJsonObject json) {

    m_branch_id_isValid = ::OpenAPI::fromJsonValue(m_branch_id, json[QString("branchId")]);
    m_branch_id_isSet = !json[QString("branchId")].isNull() && m_branch_id_isValid;

    m_commissionable_isValid = ::OpenAPI::fromJsonValue(m_commissionable, json[QString("commissionable")]);
    m_commissionable_isSet = !json[QString("commissionable")].isNull() && m_commissionable_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("discountAmount")]);
    m_discount_amount_isSet = !json[QString("discountAmount")].isNull() && m_discount_amount_isValid;

    m_discount_code_isValid = ::OpenAPI::fromJsonValue(m_discount_code, json[QString("discountCode")]);
    m_discount_code_isSet = !json[QString("discountCode")].isNull() && m_discount_code_isValid;

    m_discount_percent_isValid = ::OpenAPI::fromJsonValue(m_discount_percent, json[QString("discountPercent")]);
    m_discount_percent_isSet = !json[QString("discountPercent")].isNull() && m_discount_percent_isValid;

    m_external_link_isValid = ::OpenAPI::fromJsonValue(m_external_link, json[QString("externalLink")]);
    m_external_link_isSet = !json[QString("externalLink")].isNull() && m_external_link_isValid;

    m_has_manual_discount_isValid = ::OpenAPI::fromJsonValue(m_has_manual_discount, json[QString("hasManualDiscount")]);
    m_has_manual_discount_isSet = !json[QString("hasManualDiscount")].isNull() && m_has_manual_discount_isValid;

    m_has_manual_price_isValid = ::OpenAPI::fromJsonValue(m_has_manual_price, json[QString("hasManualPrice")]);
    m_has_manual_price_isSet = !json[QString("hasManualPrice")].isNull() && m_has_manual_price_isValid;

    m_inventory_id_isValid = ::OpenAPI::fromJsonValue(m_inventory_id, json[QString("inventoryId")]);
    m_inventory_id_isSet = !json[QString("inventoryId")].isNull() && m_inventory_id_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_overship_threshold_isValid = ::OpenAPI::fromJsonValue(m_overship_threshold, json[QString("overshipThreshold")]);
    m_overship_threshold_isSet = !json[QString("overshipThreshold")].isNull() && m_overship_threshold_isValid;

    m_project_task_id_isValid = ::OpenAPI::fromJsonValue(m_project_task_id, json[QString("projectTaskId")]);
    m_project_task_id_isSet = !json[QString("projectTaskId")].isNull() && m_project_task_id_isValid;

    m_purchase_order_source_isValid = ::OpenAPI::fromJsonValue(m_purchase_order_source, json[QString("purchaseOrderSource")]);
    m_purchase_order_source_isSet = !json[QString("purchaseOrderSource")].isNull() && m_purchase_order_source_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("reasonCode")]);
    m_reason_code_isSet = !json[QString("reasonCode")].isNull() && m_reason_code_isValid;

    m_request_date_isValid = ::OpenAPI::fromJsonValue(m_request_date, json[QString("requestDate")]);
    m_request_date_isSet = !json[QString("requestDate")].isNull() && m_request_date_isValid;

    m_sales_account_id_isValid = ::OpenAPI::fromJsonValue(m_sales_account_id, json[QString("salesAccountId")]);
    m_sales_account_id_isSet = !json[QString("salesAccountId")].isNull() && m_sales_account_id_isValid;

    m_sales_person_id_isValid = ::OpenAPI::fromJsonValue(m_sales_person_id, json[QString("salesPersonId")]);
    m_sales_person_id_isSet = !json[QString("salesPersonId")].isNull() && m_sales_person_id_isValid;

    m_ship_date_isValid = ::OpenAPI::fromJsonValue(m_ship_date, json[QString("shipDate")]);
    m_ship_date_isSet = !json[QString("shipDate")].isNull() && m_ship_date_isValid;

    m_shipping_rule_isValid = ::OpenAPI::fromJsonValue(m_shipping_rule, json[QString("shippingRule")]);
    m_shipping_rule_isSet = !json[QString("shippingRule")].isNull() && m_shipping_rule_isValid;

    m_subaccount_isValid = ::OpenAPI::fromJsonValue(m_subaccount, json[QString("subaccount")]);
    m_subaccount_isSet = !json[QString("subaccount")].isNull() && m_subaccount_isValid;

    m_supplier_id_isValid = ::OpenAPI::fromJsonValue(m_supplier_id, json[QString("supplierId")]);
    m_supplier_id_isSet = !json[QString("supplierId")].isNull() && m_supplier_id_isValid;

    m_supplier_price_isValid = ::OpenAPI::fromJsonValue(m_supplier_price, json[QString("supplierPrice")]);
    m_supplier_price_isSet = !json[QString("supplierPrice")].isNull() && m_supplier_price_isValid;

    m_tax_category_id_isValid = ::OpenAPI::fromJsonValue(m_tax_category_id, json[QString("taxCategoryId")]);
    m_tax_category_id_isSet = !json[QString("taxCategoryId")].isNull() && m_tax_category_id_isValid;

    m_undership_threshold_isValid = ::OpenAPI::fromJsonValue(m_undership_threshold, json[QString("undershipThreshold")]);
    m_undership_threshold_isSet = !json[QString("undershipThreshold")].isNull() && m_undership_threshold_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_unit_of_measure_isValid = ::OpenAPI::fromJsonValue(m_unit_of_measure, json[QString("unitOfMeasure")]);
    m_unit_of_measure_isSet = !json[QString("unitOfMeasure")].isNull() && m_unit_of_measure_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;

    m_warehouse_id_isValid = ::OpenAPI::fromJsonValue(m_warehouse_id, json[QString("warehouseId")]);
    m_warehouse_id_isSet = !json[QString("warehouseId")].isNull() && m_warehouse_id_isValid;

    m_warehouse_location_id_isValid = ::OpenAPI::fromJsonValue(m_warehouse_location_id, json[QString("warehouseLocationId")]);
    m_warehouse_location_id_isSet = !json[QString("warehouseLocationId")].isNull() && m_warehouse_location_id_isValid;
}

QString OAINewSalesOrderLineDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewSalesOrderLineDto::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_id_isSet) {
        obj.insert(QString("branchId"), ::OpenAPI::toJsonValue(m_branch_id));
    }
    if (m_commissionable_isSet) {
        obj.insert(QString("commissionable"), ::OpenAPI::toJsonValue(m_commissionable));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discount_amount_isSet) {
        obj.insert(QString("discountAmount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_discount_code_isSet) {
        obj.insert(QString("discountCode"), ::OpenAPI::toJsonValue(m_discount_code));
    }
    if (m_discount_percent_isSet) {
        obj.insert(QString("discountPercent"), ::OpenAPI::toJsonValue(m_discount_percent));
    }
    if (m_external_link_isSet) {
        obj.insert(QString("externalLink"), ::OpenAPI::toJsonValue(m_external_link));
    }
    if (m_has_manual_discount_isSet) {
        obj.insert(QString("hasManualDiscount"), ::OpenAPI::toJsonValue(m_has_manual_discount));
    }
    if (m_has_manual_price_isSet) {
        obj.insert(QString("hasManualPrice"), ::OpenAPI::toJsonValue(m_has_manual_price));
    }
    if (m_inventory_id_isSet) {
        obj.insert(QString("inventoryId"), ::OpenAPI::toJsonValue(m_inventory_id));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_overship_threshold_isSet) {
        obj.insert(QString("overshipThreshold"), ::OpenAPI::toJsonValue(m_overship_threshold));
    }
    if (m_project_task_id_isSet) {
        obj.insert(QString("projectTaskId"), ::OpenAPI::toJsonValue(m_project_task_id));
    }
    if (m_purchase_order_source_isSet) {
        obj.insert(QString("purchaseOrderSource"), ::OpenAPI::toJsonValue(m_purchase_order_source));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_reason_code_isSet) {
        obj.insert(QString("reasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    if (m_request_date_isSet) {
        obj.insert(QString("requestDate"), ::OpenAPI::toJsonValue(m_request_date));
    }
    if (m_sales_account_id_isSet) {
        obj.insert(QString("salesAccountId"), ::OpenAPI::toJsonValue(m_sales_account_id));
    }
    if (m_sales_person_id_isSet) {
        obj.insert(QString("salesPersonId"), ::OpenAPI::toJsonValue(m_sales_person_id));
    }
    if (m_ship_date_isSet) {
        obj.insert(QString("shipDate"), ::OpenAPI::toJsonValue(m_ship_date));
    }
    if (m_shipping_rule_isSet) {
        obj.insert(QString("shippingRule"), ::OpenAPI::toJsonValue(m_shipping_rule));
    }
    if (m_subaccount.size() > 0) {
        obj.insert(QString("subaccount"), ::OpenAPI::toJsonValue(m_subaccount));
    }
    if (m_supplier_id_isSet) {
        obj.insert(QString("supplierId"), ::OpenAPI::toJsonValue(m_supplier_id));
    }
    if (m_supplier_price_isSet) {
        obj.insert(QString("supplierPrice"), ::OpenAPI::toJsonValue(m_supplier_price));
    }
    if (m_tax_category_id_isSet) {
        obj.insert(QString("taxCategoryId"), ::OpenAPI::toJsonValue(m_tax_category_id));
    }
    if (m_undership_threshold_isSet) {
        obj.insert(QString("undershipThreshold"), ::OpenAPI::toJsonValue(m_undership_threshold));
    }
    if (m_unit_cost_isSet) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_unit_of_measure_isSet) {
        obj.insert(QString("unitOfMeasure"), ::OpenAPI::toJsonValue(m_unit_of_measure));
    }
    if (m_unit_price_isSet) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    if (m_warehouse_id_isSet) {
        obj.insert(QString("warehouseId"), ::OpenAPI::toJsonValue(m_warehouse_id));
    }
    if (m_warehouse_location_id_isSet) {
        obj.insert(QString("warehouseLocationId"), ::OpenAPI::toJsonValue(m_warehouse_location_id));
    }
    return obj;
}

QString OAINewSalesOrderLineDto::getBranchId() const {
    return m_branch_id;
}
void OAINewSalesOrderLineDto::setBranchId(const QString &branch_id) {
    m_branch_id = branch_id;
    m_branch_id_isSet = true;
}

bool OAINewSalesOrderLineDto::is_branch_id_Set() const{
    return m_branch_id_isSet;
}

bool OAINewSalesOrderLineDto::is_branch_id_Valid() const{
    return m_branch_id_isValid;
}

bool OAINewSalesOrderLineDto::isCommissionable() const {
    return m_commissionable;
}
void OAINewSalesOrderLineDto::setCommissionable(const bool &commissionable) {
    m_commissionable = commissionable;
    m_commissionable_isSet = true;
}

bool OAINewSalesOrderLineDto::is_commissionable_Set() const{
    return m_commissionable_isSet;
}

bool OAINewSalesOrderLineDto::is_commissionable_Valid() const{
    return m_commissionable_isValid;
}

QString OAINewSalesOrderLineDto::getDescription() const {
    return m_description;
}
void OAINewSalesOrderLineDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINewSalesOrderLineDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAINewSalesOrderLineDto::is_description_Valid() const{
    return m_description_isValid;
}

double OAINewSalesOrderLineDto::getDiscountAmount() const {
    return m_discount_amount;
}
void OAINewSalesOrderLineDto::setDiscountAmount(const double &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAINewSalesOrderLineDto::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAINewSalesOrderLineDto::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

QString OAINewSalesOrderLineDto::getDiscountCode() const {
    return m_discount_code;
}
void OAINewSalesOrderLineDto::setDiscountCode(const QString &discount_code) {
    m_discount_code = discount_code;
    m_discount_code_isSet = true;
}

bool OAINewSalesOrderLineDto::is_discount_code_Set() const{
    return m_discount_code_isSet;
}

bool OAINewSalesOrderLineDto::is_discount_code_Valid() const{
    return m_discount_code_isValid;
}

double OAINewSalesOrderLineDto::getDiscountPercent() const {
    return m_discount_percent;
}
void OAINewSalesOrderLineDto::setDiscountPercent(const double &discount_percent) {
    m_discount_percent = discount_percent;
    m_discount_percent_isSet = true;
}

bool OAINewSalesOrderLineDto::is_discount_percent_Set() const{
    return m_discount_percent_isSet;
}

bool OAINewSalesOrderLineDto::is_discount_percent_Valid() const{
    return m_discount_percent_isValid;
}

QString OAINewSalesOrderLineDto::getExternalLink() const {
    return m_external_link;
}
void OAINewSalesOrderLineDto::setExternalLink(const QString &external_link) {
    m_external_link = external_link;
    m_external_link_isSet = true;
}

bool OAINewSalesOrderLineDto::is_external_link_Set() const{
    return m_external_link_isSet;
}

bool OAINewSalesOrderLineDto::is_external_link_Valid() const{
    return m_external_link_isValid;
}

bool OAINewSalesOrderLineDto::isHasManualDiscount() const {
    return m_has_manual_discount;
}
void OAINewSalesOrderLineDto::setHasManualDiscount(const bool &has_manual_discount) {
    m_has_manual_discount = has_manual_discount;
    m_has_manual_discount_isSet = true;
}

bool OAINewSalesOrderLineDto::is_has_manual_discount_Set() const{
    return m_has_manual_discount_isSet;
}

bool OAINewSalesOrderLineDto::is_has_manual_discount_Valid() const{
    return m_has_manual_discount_isValid;
}

bool OAINewSalesOrderLineDto::isHasManualPrice() const {
    return m_has_manual_price;
}
void OAINewSalesOrderLineDto::setHasManualPrice(const bool &has_manual_price) {
    m_has_manual_price = has_manual_price;
    m_has_manual_price_isSet = true;
}

bool OAINewSalesOrderLineDto::is_has_manual_price_Set() const{
    return m_has_manual_price_isSet;
}

bool OAINewSalesOrderLineDto::is_has_manual_price_Valid() const{
    return m_has_manual_price_isValid;
}

QString OAINewSalesOrderLineDto::getInventoryId() const {
    return m_inventory_id;
}
void OAINewSalesOrderLineDto::setInventoryId(const QString &inventory_id) {
    m_inventory_id = inventory_id;
    m_inventory_id_isSet = true;
}

bool OAINewSalesOrderLineDto::is_inventory_id_Set() const{
    return m_inventory_id_isSet;
}

bool OAINewSalesOrderLineDto::is_inventory_id_Valid() const{
    return m_inventory_id_isValid;
}

QString OAINewSalesOrderLineDto::getNote() const {
    return m_note;
}
void OAINewSalesOrderLineDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAINewSalesOrderLineDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAINewSalesOrderLineDto::is_note_Valid() const{
    return m_note_isValid;
}

QString OAINewSalesOrderLineDto::getOperation() const {
    return m_operation;
}
void OAINewSalesOrderLineDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAINewSalesOrderLineDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAINewSalesOrderLineDto::is_operation_Valid() const{
    return m_operation_isValid;
}

double OAINewSalesOrderLineDto::getOvershipThreshold() const {
    return m_overship_threshold;
}
void OAINewSalesOrderLineDto::setOvershipThreshold(const double &overship_threshold) {
    m_overship_threshold = overship_threshold;
    m_overship_threshold_isSet = true;
}

bool OAINewSalesOrderLineDto::is_overship_threshold_Set() const{
    return m_overship_threshold_isSet;
}

bool OAINewSalesOrderLineDto::is_overship_threshold_Valid() const{
    return m_overship_threshold_isValid;
}

QString OAINewSalesOrderLineDto::getProjectTaskId() const {
    return m_project_task_id;
}
void OAINewSalesOrderLineDto::setProjectTaskId(const QString &project_task_id) {
    m_project_task_id = project_task_id;
    m_project_task_id_isSet = true;
}

bool OAINewSalesOrderLineDto::is_project_task_id_Set() const{
    return m_project_task_id_isSet;
}

bool OAINewSalesOrderLineDto::is_project_task_id_Valid() const{
    return m_project_task_id_isValid;
}

QString OAINewSalesOrderLineDto::getPurchaseOrderSource() const {
    return m_purchase_order_source;
}
void OAINewSalesOrderLineDto::setPurchaseOrderSource(const QString &purchase_order_source) {
    m_purchase_order_source = purchase_order_source;
    m_purchase_order_source_isSet = true;
}

bool OAINewSalesOrderLineDto::is_purchase_order_source_Set() const{
    return m_purchase_order_source_isSet;
}

bool OAINewSalesOrderLineDto::is_purchase_order_source_Valid() const{
    return m_purchase_order_source_isValid;
}

double OAINewSalesOrderLineDto::getQuantity() const {
    return m_quantity;
}
void OAINewSalesOrderLineDto::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAINewSalesOrderLineDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAINewSalesOrderLineDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAINewSalesOrderLineDto::getReasonCode() const {
    return m_reason_code;
}
void OAINewSalesOrderLineDto::setReasonCode(const QString &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAINewSalesOrderLineDto::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAINewSalesOrderLineDto::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

QDateTime OAINewSalesOrderLineDto::getRequestDate() const {
    return m_request_date;
}
void OAINewSalesOrderLineDto::setRequestDate(const QDateTime &request_date) {
    m_request_date = request_date;
    m_request_date_isSet = true;
}

bool OAINewSalesOrderLineDto::is_request_date_Set() const{
    return m_request_date_isSet;
}

bool OAINewSalesOrderLineDto::is_request_date_Valid() const{
    return m_request_date_isValid;
}

QString OAINewSalesOrderLineDto::getSalesAccountId() const {
    return m_sales_account_id;
}
void OAINewSalesOrderLineDto::setSalesAccountId(const QString &sales_account_id) {
    m_sales_account_id = sales_account_id;
    m_sales_account_id_isSet = true;
}

bool OAINewSalesOrderLineDto::is_sales_account_id_Set() const{
    return m_sales_account_id_isSet;
}

bool OAINewSalesOrderLineDto::is_sales_account_id_Valid() const{
    return m_sales_account_id_isValid;
}

QString OAINewSalesOrderLineDto::getSalesPersonId() const {
    return m_sales_person_id;
}
void OAINewSalesOrderLineDto::setSalesPersonId(const QString &sales_person_id) {
    m_sales_person_id = sales_person_id;
    m_sales_person_id_isSet = true;
}

bool OAINewSalesOrderLineDto::is_sales_person_id_Set() const{
    return m_sales_person_id_isSet;
}

bool OAINewSalesOrderLineDto::is_sales_person_id_Valid() const{
    return m_sales_person_id_isValid;
}

QDateTime OAINewSalesOrderLineDto::getShipDate() const {
    return m_ship_date;
}
void OAINewSalesOrderLineDto::setShipDate(const QDateTime &ship_date) {
    m_ship_date = ship_date;
    m_ship_date_isSet = true;
}

bool OAINewSalesOrderLineDto::is_ship_date_Set() const{
    return m_ship_date_isSet;
}

bool OAINewSalesOrderLineDto::is_ship_date_Valid() const{
    return m_ship_date_isValid;
}

QString OAINewSalesOrderLineDto::getShippingRule() const {
    return m_shipping_rule;
}
void OAINewSalesOrderLineDto::setShippingRule(const QString &shipping_rule) {
    m_shipping_rule = shipping_rule;
    m_shipping_rule_isSet = true;
}

bool OAINewSalesOrderLineDto::is_shipping_rule_Set() const{
    return m_shipping_rule_isSet;
}

bool OAINewSalesOrderLineDto::is_shipping_rule_Valid() const{
    return m_shipping_rule_isValid;
}

QMap<QString, QString> OAINewSalesOrderLineDto::getSubaccount() const {
    return m_subaccount;
}
void OAINewSalesOrderLineDto::setSubaccount(const QMap<QString, QString> &subaccount) {
    m_subaccount = subaccount;
    m_subaccount_isSet = true;
}

bool OAINewSalesOrderLineDto::is_subaccount_Set() const{
    return m_subaccount_isSet;
}

bool OAINewSalesOrderLineDto::is_subaccount_Valid() const{
    return m_subaccount_isValid;
}

QString OAINewSalesOrderLineDto::getSupplierId() const {
    return m_supplier_id;
}
void OAINewSalesOrderLineDto::setSupplierId(const QString &supplier_id) {
    m_supplier_id = supplier_id;
    m_supplier_id_isSet = true;
}

bool OAINewSalesOrderLineDto::is_supplier_id_Set() const{
    return m_supplier_id_isSet;
}

bool OAINewSalesOrderLineDto::is_supplier_id_Valid() const{
    return m_supplier_id_isValid;
}

double OAINewSalesOrderLineDto::getSupplierPrice() const {
    return m_supplier_price;
}
void OAINewSalesOrderLineDto::setSupplierPrice(const double &supplier_price) {
    m_supplier_price = supplier_price;
    m_supplier_price_isSet = true;
}

bool OAINewSalesOrderLineDto::is_supplier_price_Set() const{
    return m_supplier_price_isSet;
}

bool OAINewSalesOrderLineDto::is_supplier_price_Valid() const{
    return m_supplier_price_isValid;
}

QString OAINewSalesOrderLineDto::getTaxCategoryId() const {
    return m_tax_category_id;
}
void OAINewSalesOrderLineDto::setTaxCategoryId(const QString &tax_category_id) {
    m_tax_category_id = tax_category_id;
    m_tax_category_id_isSet = true;
}

bool OAINewSalesOrderLineDto::is_tax_category_id_Set() const{
    return m_tax_category_id_isSet;
}

bool OAINewSalesOrderLineDto::is_tax_category_id_Valid() const{
    return m_tax_category_id_isValid;
}

double OAINewSalesOrderLineDto::getUndershipThreshold() const {
    return m_undership_threshold;
}
void OAINewSalesOrderLineDto::setUndershipThreshold(const double &undership_threshold) {
    m_undership_threshold = undership_threshold;
    m_undership_threshold_isSet = true;
}

bool OAINewSalesOrderLineDto::is_undership_threshold_Set() const{
    return m_undership_threshold_isSet;
}

bool OAINewSalesOrderLineDto::is_undership_threshold_Valid() const{
    return m_undership_threshold_isValid;
}

double OAINewSalesOrderLineDto::getUnitCost() const {
    return m_unit_cost;
}
void OAINewSalesOrderLineDto::setUnitCost(const double &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAINewSalesOrderLineDto::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAINewSalesOrderLineDto::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

QString OAINewSalesOrderLineDto::getUnitOfMeasure() const {
    return m_unit_of_measure;
}
void OAINewSalesOrderLineDto::setUnitOfMeasure(const QString &unit_of_measure) {
    m_unit_of_measure = unit_of_measure;
    m_unit_of_measure_isSet = true;
}

bool OAINewSalesOrderLineDto::is_unit_of_measure_Set() const{
    return m_unit_of_measure_isSet;
}

bool OAINewSalesOrderLineDto::is_unit_of_measure_Valid() const{
    return m_unit_of_measure_isValid;
}

double OAINewSalesOrderLineDto::getUnitPrice() const {
    return m_unit_price;
}
void OAINewSalesOrderLineDto::setUnitPrice(const double &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAINewSalesOrderLineDto::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAINewSalesOrderLineDto::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

QString OAINewSalesOrderLineDto::getWarehouseId() const {
    return m_warehouse_id;
}
void OAINewSalesOrderLineDto::setWarehouseId(const QString &warehouse_id) {
    m_warehouse_id = warehouse_id;
    m_warehouse_id_isSet = true;
}

bool OAINewSalesOrderLineDto::is_warehouse_id_Set() const{
    return m_warehouse_id_isSet;
}

bool OAINewSalesOrderLineDto::is_warehouse_id_Valid() const{
    return m_warehouse_id_isValid;
}

QString OAINewSalesOrderLineDto::getWarehouseLocationId() const {
    return m_warehouse_location_id;
}
void OAINewSalesOrderLineDto::setWarehouseLocationId(const QString &warehouse_location_id) {
    m_warehouse_location_id = warehouse_location_id;
    m_warehouse_location_id_isSet = true;
}

bool OAINewSalesOrderLineDto::is_warehouse_location_id_Set() const{
    return m_warehouse_location_id_isSet;
}

bool OAINewSalesOrderLineDto::is_warehouse_location_id_Valid() const{
    return m_warehouse_location_id_isValid;
}

bool OAINewSalesOrderLineDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commissionable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_manual_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_manual_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overship_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_order_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_person_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_undership_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_of_measure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewSalesOrderLineDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_inventory_id_isValid && true;
}

} // namespace OpenAPI
