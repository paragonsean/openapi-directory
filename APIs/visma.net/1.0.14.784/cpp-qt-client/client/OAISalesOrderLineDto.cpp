/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesOrderLineDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesOrderLineDto::OAISalesOrderLineDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesOrderLineDto::OAISalesOrderLineDto() {
    this->initializeModel();
}

OAISalesOrderLineDto::~OAISalesOrderLineDto() {}

void OAISalesOrderLineDto::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_base_order_quantity_isSet = false;
    m_base_order_quantity_isValid = false;

    m_billed_quantity_isSet = false;
    m_billed_quantity_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_commissionable_isSet = false;
    m_commissionable_isValid = false;

    m_completed_isSet = false;
    m_completed_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_discount_code_isSet = false;
    m_discount_code_isValid = false;

    m_discount_percent_isSet = false;
    m_discount_percent_isValid = false;

    m_discount_sequence_id_isSet = false;
    m_discount_sequence_id_isValid = false;

    m_extended_price_isSet = false;
    m_extended_price_isValid = false;

    m_external_link_isSet = false;
    m_external_link_isValid = false;

    m_free_item_isSet = false;
    m_free_item_isValid = false;

    m_has_manual_discount_isSet = false;
    m_has_manual_discount_isValid = false;

    m_has_manual_price_isSet = false;
    m_has_manual_price_isValid = false;

    m_inventory_isSet = false;
    m_inventory_isValid = false;

    m_inventory_alternate_id_isSet = false;
    m_inventory_alternate_id_isValid = false;

    m_line_id_isSet = false;
    m_line_id_isValid = false;

    m_line_total_before_discount_isSet = false;
    m_line_total_before_discount_isValid = false;

    m_line_type_isSet = false;
    m_line_type_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_open_line_isSet = false;
    m_open_line_isValid = false;

    m_open_quantity_isSet = false;
    m_open_quantity_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_order_date_isSet = false;
    m_order_date_isValid = false;

    m_overship_threshold_isSet = false;
    m_overship_threshold_isValid = false;

    m_project_task_id_isSet = false;
    m_project_task_id_isValid = false;

    m_purchase_order_source_isSet = false;
    m_purchase_order_source_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_quantity_on_shipments_isSet = false;
    m_quantity_on_shipments_isValid = false;

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;

    m_replacement_unit_cost_isSet = false;
    m_replacement_unit_cost_isValid = false;

    m_request_date_isSet = false;
    m_request_date_isValid = false;

    m_sales_account_id_isSet = false;
    m_sales_account_id_isValid = false;

    m_sales_person_isSet = false;
    m_sales_person_isValid = false;

    m_ship_date_isSet = false;
    m_ship_date_isValid = false;

    m_shipping_rule_isSet = false;
    m_shipping_rule_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_subaccount_isSet = false;
    m_subaccount_isValid = false;

    m_supplier_isSet = false;
    m_supplier_isValid = false;

    m_supplier_price_isSet = false;
    m_supplier_price_isValid = false;

    m_tax_category_id_isSet = false;
    m_tax_category_id_isValid = false;

    m_undership_threshold_isSet = false;
    m_undership_threshold_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_unit_of_measure_isSet = false;
    m_unit_of_measure_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;

    m_warehouse_id_isSet = false;
    m_warehouse_id_isValid = false;

    m_warehouse_location_isSet = false;
    m_warehouse_location_isValid = false;
}

void OAISalesOrderLineDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesOrderLineDto::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_base_order_quantity_isValid = ::OpenAPI::fromJsonValue(m_base_order_quantity, json[QString("baseOrderQuantity")]);
    m_base_order_quantity_isSet = !json[QString("baseOrderQuantity")].isNull() && m_base_order_quantity_isValid;

    m_billed_quantity_isValid = ::OpenAPI::fromJsonValue(m_billed_quantity, json[QString("billedQuantity")]);
    m_billed_quantity_isSet = !json[QString("billedQuantity")].isNull() && m_billed_quantity_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_commissionable_isValid = ::OpenAPI::fromJsonValue(m_commissionable, json[QString("commissionable")]);
    m_commissionable_isSet = !json[QString("commissionable")].isNull() && m_commissionable_isValid;

    m_completed_isValid = ::OpenAPI::fromJsonValue(m_completed, json[QString("completed")]);
    m_completed_isSet = !json[QString("completed")].isNull() && m_completed_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("discountAmount")]);
    m_discount_amount_isSet = !json[QString("discountAmount")].isNull() && m_discount_amount_isValid;

    m_discount_code_isValid = ::OpenAPI::fromJsonValue(m_discount_code, json[QString("discountCode")]);
    m_discount_code_isSet = !json[QString("discountCode")].isNull() && m_discount_code_isValid;

    m_discount_percent_isValid = ::OpenAPI::fromJsonValue(m_discount_percent, json[QString("discountPercent")]);
    m_discount_percent_isSet = !json[QString("discountPercent")].isNull() && m_discount_percent_isValid;

    m_discount_sequence_id_isValid = ::OpenAPI::fromJsonValue(m_discount_sequence_id, json[QString("discountSequenceId")]);
    m_discount_sequence_id_isSet = !json[QString("discountSequenceId")].isNull() && m_discount_sequence_id_isValid;

    m_extended_price_isValid = ::OpenAPI::fromJsonValue(m_extended_price, json[QString("extendedPrice")]);
    m_extended_price_isSet = !json[QString("extendedPrice")].isNull() && m_extended_price_isValid;

    m_external_link_isValid = ::OpenAPI::fromJsonValue(m_external_link, json[QString("externalLink")]);
    m_external_link_isSet = !json[QString("externalLink")].isNull() && m_external_link_isValid;

    m_free_item_isValid = ::OpenAPI::fromJsonValue(m_free_item, json[QString("freeItem")]);
    m_free_item_isSet = !json[QString("freeItem")].isNull() && m_free_item_isValid;

    m_has_manual_discount_isValid = ::OpenAPI::fromJsonValue(m_has_manual_discount, json[QString("hasManualDiscount")]);
    m_has_manual_discount_isSet = !json[QString("hasManualDiscount")].isNull() && m_has_manual_discount_isValid;

    m_has_manual_price_isValid = ::OpenAPI::fromJsonValue(m_has_manual_price, json[QString("hasManualPrice")]);
    m_has_manual_price_isSet = !json[QString("hasManualPrice")].isNull() && m_has_manual_price_isValid;

    m_inventory_isValid = ::OpenAPI::fromJsonValue(m_inventory, json[QString("inventory")]);
    m_inventory_isSet = !json[QString("inventory")].isNull() && m_inventory_isValid;

    m_inventory_alternate_id_isValid = ::OpenAPI::fromJsonValue(m_inventory_alternate_id, json[QString("inventoryAlternateId")]);
    m_inventory_alternate_id_isSet = !json[QString("inventoryAlternateId")].isNull() && m_inventory_alternate_id_isValid;

    m_line_id_isValid = ::OpenAPI::fromJsonValue(m_line_id, json[QString("lineId")]);
    m_line_id_isSet = !json[QString("lineId")].isNull() && m_line_id_isValid;

    m_line_total_before_discount_isValid = ::OpenAPI::fromJsonValue(m_line_total_before_discount, json[QString("lineTotalBeforeDiscount")]);
    m_line_total_before_discount_isSet = !json[QString("lineTotalBeforeDiscount")].isNull() && m_line_total_before_discount_isValid;

    m_line_type_isValid = ::OpenAPI::fromJsonValue(m_line_type, json[QString("lineType")]);
    m_line_type_isSet = !json[QString("lineType")].isNull() && m_line_type_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_open_line_isValid = ::OpenAPI::fromJsonValue(m_open_line, json[QString("openLine")]);
    m_open_line_isSet = !json[QString("openLine")].isNull() && m_open_line_isValid;

    m_open_quantity_isValid = ::OpenAPI::fromJsonValue(m_open_quantity, json[QString("openQuantity")]);
    m_open_quantity_isSet = !json[QString("openQuantity")].isNull() && m_open_quantity_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_order_date_isValid = ::OpenAPI::fromJsonValue(m_order_date, json[QString("orderDate")]);
    m_order_date_isSet = !json[QString("orderDate")].isNull() && m_order_date_isValid;

    m_overship_threshold_isValid = ::OpenAPI::fromJsonValue(m_overship_threshold, json[QString("overshipThreshold")]);
    m_overship_threshold_isSet = !json[QString("overshipThreshold")].isNull() && m_overship_threshold_isValid;

    m_project_task_id_isValid = ::OpenAPI::fromJsonValue(m_project_task_id, json[QString("projectTaskId")]);
    m_project_task_id_isSet = !json[QString("projectTaskId")].isNull() && m_project_task_id_isValid;

    m_purchase_order_source_isValid = ::OpenAPI::fromJsonValue(m_purchase_order_source, json[QString("purchaseOrderSource")]);
    m_purchase_order_source_isSet = !json[QString("purchaseOrderSource")].isNull() && m_purchase_order_source_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_quantity_on_shipments_isValid = ::OpenAPI::fromJsonValue(m_quantity_on_shipments, json[QString("quantityOnShipments")]);
    m_quantity_on_shipments_isSet = !json[QString("quantityOnShipments")].isNull() && m_quantity_on_shipments_isValid;

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("reasonCode")]);
    m_reason_code_isSet = !json[QString("reasonCode")].isNull() && m_reason_code_isValid;

    m_replacement_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_replacement_unit_cost, json[QString("replacementUnitCost")]);
    m_replacement_unit_cost_isSet = !json[QString("replacementUnitCost")].isNull() && m_replacement_unit_cost_isValid;

    m_request_date_isValid = ::OpenAPI::fromJsonValue(m_request_date, json[QString("requestDate")]);
    m_request_date_isSet = !json[QString("requestDate")].isNull() && m_request_date_isValid;

    m_sales_account_id_isValid = ::OpenAPI::fromJsonValue(m_sales_account_id, json[QString("salesAccountId")]);
    m_sales_account_id_isSet = !json[QString("salesAccountId")].isNull() && m_sales_account_id_isValid;

    m_sales_person_isValid = ::OpenAPI::fromJsonValue(m_sales_person, json[QString("salesPerson")]);
    m_sales_person_isSet = !json[QString("salesPerson")].isNull() && m_sales_person_isValid;

    m_ship_date_isValid = ::OpenAPI::fromJsonValue(m_ship_date, json[QString("shipDate")]);
    m_ship_date_isSet = !json[QString("shipDate")].isNull() && m_ship_date_isValid;

    m_shipping_rule_isValid = ::OpenAPI::fromJsonValue(m_shipping_rule, json[QString("shippingRule")]);
    m_shipping_rule_isSet = !json[QString("shippingRule")].isNull() && m_shipping_rule_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;

    m_subaccount_isValid = ::OpenAPI::fromJsonValue(m_subaccount, json[QString("subaccount")]);
    m_subaccount_isSet = !json[QString("subaccount")].isNull() && m_subaccount_isValid;

    m_supplier_isValid = ::OpenAPI::fromJsonValue(m_supplier, json[QString("supplier")]);
    m_supplier_isSet = !json[QString("supplier")].isNull() && m_supplier_isValid;

    m_supplier_price_isValid = ::OpenAPI::fromJsonValue(m_supplier_price, json[QString("supplierPrice")]);
    m_supplier_price_isSet = !json[QString("supplierPrice")].isNull() && m_supplier_price_isValid;

    m_tax_category_id_isValid = ::OpenAPI::fromJsonValue(m_tax_category_id, json[QString("taxCategoryId")]);
    m_tax_category_id_isSet = !json[QString("taxCategoryId")].isNull() && m_tax_category_id_isValid;

    m_undership_threshold_isValid = ::OpenAPI::fromJsonValue(m_undership_threshold, json[QString("undershipThreshold")]);
    m_undership_threshold_isSet = !json[QString("undershipThreshold")].isNull() && m_undership_threshold_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_unit_of_measure_isValid = ::OpenAPI::fromJsonValue(m_unit_of_measure, json[QString("unitOfMeasure")]);
    m_unit_of_measure_isSet = !json[QString("unitOfMeasure")].isNull() && m_unit_of_measure_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;

    m_warehouse_id_isValid = ::OpenAPI::fromJsonValue(m_warehouse_id, json[QString("warehouseId")]);
    m_warehouse_id_isSet = !json[QString("warehouseId")].isNull() && m_warehouse_id_isValid;

    m_warehouse_location_isValid = ::OpenAPI::fromJsonValue(m_warehouse_location, json[QString("warehouseLocation")]);
    m_warehouse_location_isSet = !json[QString("warehouseLocation")].isNull() && m_warehouse_location_isValid;
}

QString OAISalesOrderLineDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesOrderLineDto::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_base_order_quantity_isSet) {
        obj.insert(QString("baseOrderQuantity"), ::OpenAPI::toJsonValue(m_base_order_quantity));
    }
    if (m_billed_quantity_isSet) {
        obj.insert(QString("billedQuantity"), ::OpenAPI::toJsonValue(m_billed_quantity));
    }
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_commissionable_isSet) {
        obj.insert(QString("commissionable"), ::OpenAPI::toJsonValue(m_commissionable));
    }
    if (m_completed_isSet) {
        obj.insert(QString("completed"), ::OpenAPI::toJsonValue(m_completed));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discount_amount_isSet) {
        obj.insert(QString("discountAmount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_discount_code_isSet) {
        obj.insert(QString("discountCode"), ::OpenAPI::toJsonValue(m_discount_code));
    }
    if (m_discount_percent_isSet) {
        obj.insert(QString("discountPercent"), ::OpenAPI::toJsonValue(m_discount_percent));
    }
    if (m_discount_sequence_id_isSet) {
        obj.insert(QString("discountSequenceId"), ::OpenAPI::toJsonValue(m_discount_sequence_id));
    }
    if (m_extended_price_isSet) {
        obj.insert(QString("extendedPrice"), ::OpenAPI::toJsonValue(m_extended_price));
    }
    if (m_external_link_isSet) {
        obj.insert(QString("externalLink"), ::OpenAPI::toJsonValue(m_external_link));
    }
    if (m_free_item_isSet) {
        obj.insert(QString("freeItem"), ::OpenAPI::toJsonValue(m_free_item));
    }
    if (m_has_manual_discount_isSet) {
        obj.insert(QString("hasManualDiscount"), ::OpenAPI::toJsonValue(m_has_manual_discount));
    }
    if (m_has_manual_price_isSet) {
        obj.insert(QString("hasManualPrice"), ::OpenAPI::toJsonValue(m_has_manual_price));
    }
    if (m_inventory.isSet()) {
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(m_inventory));
    }
    if (m_inventory_alternate_id_isSet) {
        obj.insert(QString("inventoryAlternateId"), ::OpenAPI::toJsonValue(m_inventory_alternate_id));
    }
    if (m_line_id_isSet) {
        obj.insert(QString("lineId"), ::OpenAPI::toJsonValue(m_line_id));
    }
    if (m_line_total_before_discount_isSet) {
        obj.insert(QString("lineTotalBeforeDiscount"), ::OpenAPI::toJsonValue(m_line_total_before_discount));
    }
    if (m_line_type_isSet) {
        obj.insert(QString("lineType"), ::OpenAPI::toJsonValue(m_line_type));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_open_line_isSet) {
        obj.insert(QString("openLine"), ::OpenAPI::toJsonValue(m_open_line));
    }
    if (m_open_quantity_isSet) {
        obj.insert(QString("openQuantity"), ::OpenAPI::toJsonValue(m_open_quantity));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_order_date_isSet) {
        obj.insert(QString("orderDate"), ::OpenAPI::toJsonValue(m_order_date));
    }
    if (m_overship_threshold_isSet) {
        obj.insert(QString("overshipThreshold"), ::OpenAPI::toJsonValue(m_overship_threshold));
    }
    if (m_project_task_id_isSet) {
        obj.insert(QString("projectTaskId"), ::OpenAPI::toJsonValue(m_project_task_id));
    }
    if (m_purchase_order_source_isSet) {
        obj.insert(QString("purchaseOrderSource"), ::OpenAPI::toJsonValue(m_purchase_order_source));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_quantity_on_shipments_isSet) {
        obj.insert(QString("quantityOnShipments"), ::OpenAPI::toJsonValue(m_quantity_on_shipments));
    }
    if (m_reason_code_isSet) {
        obj.insert(QString("reasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    if (m_replacement_unit_cost_isSet) {
        obj.insert(QString("replacementUnitCost"), ::OpenAPI::toJsonValue(m_replacement_unit_cost));
    }
    if (m_request_date_isSet) {
        obj.insert(QString("requestDate"), ::OpenAPI::toJsonValue(m_request_date));
    }
    if (m_sales_account_id_isSet) {
        obj.insert(QString("salesAccountId"), ::OpenAPI::toJsonValue(m_sales_account_id));
    }
    if (m_sales_person.isSet()) {
        obj.insert(QString("salesPerson"), ::OpenAPI::toJsonValue(m_sales_person));
    }
    if (m_ship_date_isSet) {
        obj.insert(QString("shipDate"), ::OpenAPI::toJsonValue(m_ship_date));
    }
    if (m_shipping_rule_isSet) {
        obj.insert(QString("shippingRule"), ::OpenAPI::toJsonValue(m_shipping_rule));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_subaccount.size() > 0) {
        obj.insert(QString("subaccount"), ::OpenAPI::toJsonValue(m_subaccount));
    }
    if (m_supplier.isSet()) {
        obj.insert(QString("supplier"), ::OpenAPI::toJsonValue(m_supplier));
    }
    if (m_supplier_price_isSet) {
        obj.insert(QString("supplierPrice"), ::OpenAPI::toJsonValue(m_supplier_price));
    }
    if (m_tax_category_id_isSet) {
        obj.insert(QString("taxCategoryId"), ::OpenAPI::toJsonValue(m_tax_category_id));
    }
    if (m_undership_threshold_isSet) {
        obj.insert(QString("undershipThreshold"), ::OpenAPI::toJsonValue(m_undership_threshold));
    }
    if (m_unit_cost_isSet) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_unit_of_measure_isSet) {
        obj.insert(QString("unitOfMeasure"), ::OpenAPI::toJsonValue(m_unit_of_measure));
    }
    if (m_unit_price_isSet) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    if (m_warehouse_id_isSet) {
        obj.insert(QString("warehouseId"), ::OpenAPI::toJsonValue(m_warehouse_id));
    }
    if (m_warehouse_location.isSet()) {
        obj.insert(QString("warehouseLocation"), ::OpenAPI::toJsonValue(m_warehouse_location));
    }
    return obj;
}

QList<OAIAttachmentDto> OAISalesOrderLineDto::getAttachments() const {
    return m_attachments;
}
void OAISalesOrderLineDto::setAttachments(const QList<OAIAttachmentDto> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAISalesOrderLineDto::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAISalesOrderLineDto::is_attachments_Valid() const{
    return m_attachments_isValid;
}

double OAISalesOrderLineDto::getBaseOrderQuantity() const {
    return m_base_order_quantity;
}
void OAISalesOrderLineDto::setBaseOrderQuantity(const double &base_order_quantity) {
    m_base_order_quantity = base_order_quantity;
    m_base_order_quantity_isSet = true;
}

bool OAISalesOrderLineDto::is_base_order_quantity_Set() const{
    return m_base_order_quantity_isSet;
}

bool OAISalesOrderLineDto::is_base_order_quantity_Valid() const{
    return m_base_order_quantity_isValid;
}

double OAISalesOrderLineDto::getBilledQuantity() const {
    return m_billed_quantity;
}
void OAISalesOrderLineDto::setBilledQuantity(const double &billed_quantity) {
    m_billed_quantity = billed_quantity;
    m_billed_quantity_isSet = true;
}

bool OAISalesOrderLineDto::is_billed_quantity_Set() const{
    return m_billed_quantity_isSet;
}

bool OAISalesOrderLineDto::is_billed_quantity_Valid() const{
    return m_billed_quantity_isValid;
}

OAICdDescriptionPairDto OAISalesOrderLineDto::getBranch() const {
    return m_branch;
}
void OAISalesOrderLineDto::setBranch(const OAICdDescriptionPairDto &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAISalesOrderLineDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAISalesOrderLineDto::is_branch_Valid() const{
    return m_branch_isValid;
}

bool OAISalesOrderLineDto::isCommissionable() const {
    return m_commissionable;
}
void OAISalesOrderLineDto::setCommissionable(const bool &commissionable) {
    m_commissionable = commissionable;
    m_commissionable_isSet = true;
}

bool OAISalesOrderLineDto::is_commissionable_Set() const{
    return m_commissionable_isSet;
}

bool OAISalesOrderLineDto::is_commissionable_Valid() const{
    return m_commissionable_isValid;
}

bool OAISalesOrderLineDto::isCompleted() const {
    return m_completed;
}
void OAISalesOrderLineDto::setCompleted(const bool &completed) {
    m_completed = completed;
    m_completed_isSet = true;
}

bool OAISalesOrderLineDto::is_completed_Set() const{
    return m_completed_isSet;
}

bool OAISalesOrderLineDto::is_completed_Valid() const{
    return m_completed_isValid;
}

QString OAISalesOrderLineDto::getDescription() const {
    return m_description;
}
void OAISalesOrderLineDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISalesOrderLineDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAISalesOrderLineDto::is_description_Valid() const{
    return m_description_isValid;
}

double OAISalesOrderLineDto::getDiscountAmount() const {
    return m_discount_amount;
}
void OAISalesOrderLineDto::setDiscountAmount(const double &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAISalesOrderLineDto::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAISalesOrderLineDto::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

QString OAISalesOrderLineDto::getDiscountCode() const {
    return m_discount_code;
}
void OAISalesOrderLineDto::setDiscountCode(const QString &discount_code) {
    m_discount_code = discount_code;
    m_discount_code_isSet = true;
}

bool OAISalesOrderLineDto::is_discount_code_Set() const{
    return m_discount_code_isSet;
}

bool OAISalesOrderLineDto::is_discount_code_Valid() const{
    return m_discount_code_isValid;
}

double OAISalesOrderLineDto::getDiscountPercent() const {
    return m_discount_percent;
}
void OAISalesOrderLineDto::setDiscountPercent(const double &discount_percent) {
    m_discount_percent = discount_percent;
    m_discount_percent_isSet = true;
}

bool OAISalesOrderLineDto::is_discount_percent_Set() const{
    return m_discount_percent_isSet;
}

bool OAISalesOrderLineDto::is_discount_percent_Valid() const{
    return m_discount_percent_isValid;
}

QString OAISalesOrderLineDto::getDiscountSequenceId() const {
    return m_discount_sequence_id;
}
void OAISalesOrderLineDto::setDiscountSequenceId(const QString &discount_sequence_id) {
    m_discount_sequence_id = discount_sequence_id;
    m_discount_sequence_id_isSet = true;
}

bool OAISalesOrderLineDto::is_discount_sequence_id_Set() const{
    return m_discount_sequence_id_isSet;
}

bool OAISalesOrderLineDto::is_discount_sequence_id_Valid() const{
    return m_discount_sequence_id_isValid;
}

double OAISalesOrderLineDto::getExtendedPrice() const {
    return m_extended_price;
}
void OAISalesOrderLineDto::setExtendedPrice(const double &extended_price) {
    m_extended_price = extended_price;
    m_extended_price_isSet = true;
}

bool OAISalesOrderLineDto::is_extended_price_Set() const{
    return m_extended_price_isSet;
}

bool OAISalesOrderLineDto::is_extended_price_Valid() const{
    return m_extended_price_isValid;
}

QString OAISalesOrderLineDto::getExternalLink() const {
    return m_external_link;
}
void OAISalesOrderLineDto::setExternalLink(const QString &external_link) {
    m_external_link = external_link;
    m_external_link_isSet = true;
}

bool OAISalesOrderLineDto::is_external_link_Set() const{
    return m_external_link_isSet;
}

bool OAISalesOrderLineDto::is_external_link_Valid() const{
    return m_external_link_isValid;
}

bool OAISalesOrderLineDto::isFreeItem() const {
    return m_free_item;
}
void OAISalesOrderLineDto::setFreeItem(const bool &free_item) {
    m_free_item = free_item;
    m_free_item_isSet = true;
}

bool OAISalesOrderLineDto::is_free_item_Set() const{
    return m_free_item_isSet;
}

bool OAISalesOrderLineDto::is_free_item_Valid() const{
    return m_free_item_isValid;
}

bool OAISalesOrderLineDto::isHasManualDiscount() const {
    return m_has_manual_discount;
}
void OAISalesOrderLineDto::setHasManualDiscount(const bool &has_manual_discount) {
    m_has_manual_discount = has_manual_discount;
    m_has_manual_discount_isSet = true;
}

bool OAISalesOrderLineDto::is_has_manual_discount_Set() const{
    return m_has_manual_discount_isSet;
}

bool OAISalesOrderLineDto::is_has_manual_discount_Valid() const{
    return m_has_manual_discount_isValid;
}

bool OAISalesOrderLineDto::isHasManualPrice() const {
    return m_has_manual_price;
}
void OAISalesOrderLineDto::setHasManualPrice(const bool &has_manual_price) {
    m_has_manual_price = has_manual_price;
    m_has_manual_price_isSet = true;
}

bool OAISalesOrderLineDto::is_has_manual_price_Set() const{
    return m_has_manual_price_isSet;
}

bool OAISalesOrderLineDto::is_has_manual_price_Valid() const{
    return m_has_manual_price_isValid;
}

OAISalesOrderLineInventoryDto OAISalesOrderLineDto::getInventory() const {
    return m_inventory;
}
void OAISalesOrderLineDto::setInventory(const OAISalesOrderLineInventoryDto &inventory) {
    m_inventory = inventory;
    m_inventory_isSet = true;
}

bool OAISalesOrderLineDto::is_inventory_Set() const{
    return m_inventory_isSet;
}

bool OAISalesOrderLineDto::is_inventory_Valid() const{
    return m_inventory_isValid;
}

QString OAISalesOrderLineDto::getInventoryAlternateId() const {
    return m_inventory_alternate_id;
}
void OAISalesOrderLineDto::setInventoryAlternateId(const QString &inventory_alternate_id) {
    m_inventory_alternate_id = inventory_alternate_id;
    m_inventory_alternate_id_isSet = true;
}

bool OAISalesOrderLineDto::is_inventory_alternate_id_Set() const{
    return m_inventory_alternate_id_isSet;
}

bool OAISalesOrderLineDto::is_inventory_alternate_id_Valid() const{
    return m_inventory_alternate_id_isValid;
}

qint32 OAISalesOrderLineDto::getLineId() const {
    return m_line_id;
}
void OAISalesOrderLineDto::setLineId(const qint32 &line_id) {
    m_line_id = line_id;
    m_line_id_isSet = true;
}

bool OAISalesOrderLineDto::is_line_id_Set() const{
    return m_line_id_isSet;
}

bool OAISalesOrderLineDto::is_line_id_Valid() const{
    return m_line_id_isValid;
}

double OAISalesOrderLineDto::getLineTotalBeforeDiscount() const {
    return m_line_total_before_discount;
}
void OAISalesOrderLineDto::setLineTotalBeforeDiscount(const double &line_total_before_discount) {
    m_line_total_before_discount = line_total_before_discount;
    m_line_total_before_discount_isSet = true;
}

bool OAISalesOrderLineDto::is_line_total_before_discount_Set() const{
    return m_line_total_before_discount_isSet;
}

bool OAISalesOrderLineDto::is_line_total_before_discount_Valid() const{
    return m_line_total_before_discount_isValid;
}

QString OAISalesOrderLineDto::getLineType() const {
    return m_line_type;
}
void OAISalesOrderLineDto::setLineType(const QString &line_type) {
    m_line_type = line_type;
    m_line_type_isSet = true;
}

bool OAISalesOrderLineDto::is_line_type_Set() const{
    return m_line_type_isSet;
}

bool OAISalesOrderLineDto::is_line_type_Valid() const{
    return m_line_type_isValid;
}

QString OAISalesOrderLineDto::getNote() const {
    return m_note;
}
void OAISalesOrderLineDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAISalesOrderLineDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAISalesOrderLineDto::is_note_Valid() const{
    return m_note_isValid;
}

bool OAISalesOrderLineDto::isOpenLine() const {
    return m_open_line;
}
void OAISalesOrderLineDto::setOpenLine(const bool &open_line) {
    m_open_line = open_line;
    m_open_line_isSet = true;
}

bool OAISalesOrderLineDto::is_open_line_Set() const{
    return m_open_line_isSet;
}

bool OAISalesOrderLineDto::is_open_line_Valid() const{
    return m_open_line_isValid;
}

double OAISalesOrderLineDto::getOpenQuantity() const {
    return m_open_quantity;
}
void OAISalesOrderLineDto::setOpenQuantity(const double &open_quantity) {
    m_open_quantity = open_quantity;
    m_open_quantity_isSet = true;
}

bool OAISalesOrderLineDto::is_open_quantity_Set() const{
    return m_open_quantity_isSet;
}

bool OAISalesOrderLineDto::is_open_quantity_Valid() const{
    return m_open_quantity_isValid;
}

QString OAISalesOrderLineDto::getOperation() const {
    return m_operation;
}
void OAISalesOrderLineDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAISalesOrderLineDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAISalesOrderLineDto::is_operation_Valid() const{
    return m_operation_isValid;
}

QDateTime OAISalesOrderLineDto::getOrderDate() const {
    return m_order_date;
}
void OAISalesOrderLineDto::setOrderDate(const QDateTime &order_date) {
    m_order_date = order_date;
    m_order_date_isSet = true;
}

bool OAISalesOrderLineDto::is_order_date_Set() const{
    return m_order_date_isSet;
}

bool OAISalesOrderLineDto::is_order_date_Valid() const{
    return m_order_date_isValid;
}

double OAISalesOrderLineDto::getOvershipThreshold() const {
    return m_overship_threshold;
}
void OAISalesOrderLineDto::setOvershipThreshold(const double &overship_threshold) {
    m_overship_threshold = overship_threshold;
    m_overship_threshold_isSet = true;
}

bool OAISalesOrderLineDto::is_overship_threshold_Set() const{
    return m_overship_threshold_isSet;
}

bool OAISalesOrderLineDto::is_overship_threshold_Valid() const{
    return m_overship_threshold_isValid;
}

QString OAISalesOrderLineDto::getProjectTaskId() const {
    return m_project_task_id;
}
void OAISalesOrderLineDto::setProjectTaskId(const QString &project_task_id) {
    m_project_task_id = project_task_id;
    m_project_task_id_isSet = true;
}

bool OAISalesOrderLineDto::is_project_task_id_Set() const{
    return m_project_task_id_isSet;
}

bool OAISalesOrderLineDto::is_project_task_id_Valid() const{
    return m_project_task_id_isValid;
}

QString OAISalesOrderLineDto::getPurchaseOrderSource() const {
    return m_purchase_order_source;
}
void OAISalesOrderLineDto::setPurchaseOrderSource(const QString &purchase_order_source) {
    m_purchase_order_source = purchase_order_source;
    m_purchase_order_source_isSet = true;
}

bool OAISalesOrderLineDto::is_purchase_order_source_Set() const{
    return m_purchase_order_source_isSet;
}

bool OAISalesOrderLineDto::is_purchase_order_source_Valid() const{
    return m_purchase_order_source_isValid;
}

double OAISalesOrderLineDto::getQuantity() const {
    return m_quantity;
}
void OAISalesOrderLineDto::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAISalesOrderLineDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAISalesOrderLineDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

double OAISalesOrderLineDto::getQuantityOnShipments() const {
    return m_quantity_on_shipments;
}
void OAISalesOrderLineDto::setQuantityOnShipments(const double &quantity_on_shipments) {
    m_quantity_on_shipments = quantity_on_shipments;
    m_quantity_on_shipments_isSet = true;
}

bool OAISalesOrderLineDto::is_quantity_on_shipments_Set() const{
    return m_quantity_on_shipments_isSet;
}

bool OAISalesOrderLineDto::is_quantity_on_shipments_Valid() const{
    return m_quantity_on_shipments_isValid;
}

QString OAISalesOrderLineDto::getReasonCode() const {
    return m_reason_code;
}
void OAISalesOrderLineDto::setReasonCode(const QString &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAISalesOrderLineDto::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAISalesOrderLineDto::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

double OAISalesOrderLineDto::getReplacementUnitCost() const {
    return m_replacement_unit_cost;
}
void OAISalesOrderLineDto::setReplacementUnitCost(const double &replacement_unit_cost) {
    m_replacement_unit_cost = replacement_unit_cost;
    m_replacement_unit_cost_isSet = true;
}

bool OAISalesOrderLineDto::is_replacement_unit_cost_Set() const{
    return m_replacement_unit_cost_isSet;
}

bool OAISalesOrderLineDto::is_replacement_unit_cost_Valid() const{
    return m_replacement_unit_cost_isValid;
}

QDateTime OAISalesOrderLineDto::getRequestDate() const {
    return m_request_date;
}
void OAISalesOrderLineDto::setRequestDate(const QDateTime &request_date) {
    m_request_date = request_date;
    m_request_date_isSet = true;
}

bool OAISalesOrderLineDto::is_request_date_Set() const{
    return m_request_date_isSet;
}

bool OAISalesOrderLineDto::is_request_date_Valid() const{
    return m_request_date_isValid;
}

QString OAISalesOrderLineDto::getSalesAccountId() const {
    return m_sales_account_id;
}
void OAISalesOrderLineDto::setSalesAccountId(const QString &sales_account_id) {
    m_sales_account_id = sales_account_id;
    m_sales_account_id_isSet = true;
}

bool OAISalesOrderLineDto::is_sales_account_id_Set() const{
    return m_sales_account_id_isSet;
}

bool OAISalesOrderLineDto::is_sales_account_id_Valid() const{
    return m_sales_account_id_isValid;
}

OAISalesPersonDto OAISalesOrderLineDto::getSalesPerson() const {
    return m_sales_person;
}
void OAISalesOrderLineDto::setSalesPerson(const OAISalesPersonDto &sales_person) {
    m_sales_person = sales_person;
    m_sales_person_isSet = true;
}

bool OAISalesOrderLineDto::is_sales_person_Set() const{
    return m_sales_person_isSet;
}

bool OAISalesOrderLineDto::is_sales_person_Valid() const{
    return m_sales_person_isValid;
}

QDateTime OAISalesOrderLineDto::getShipDate() const {
    return m_ship_date;
}
void OAISalesOrderLineDto::setShipDate(const QDateTime &ship_date) {
    m_ship_date = ship_date;
    m_ship_date_isSet = true;
}

bool OAISalesOrderLineDto::is_ship_date_Set() const{
    return m_ship_date_isSet;
}

bool OAISalesOrderLineDto::is_ship_date_Valid() const{
    return m_ship_date_isValid;
}

QString OAISalesOrderLineDto::getShippingRule() const {
    return m_shipping_rule;
}
void OAISalesOrderLineDto::setShippingRule(const QString &shipping_rule) {
    m_shipping_rule = shipping_rule;
    m_shipping_rule_isSet = true;
}

bool OAISalesOrderLineDto::is_shipping_rule_Set() const{
    return m_shipping_rule_isSet;
}

bool OAISalesOrderLineDto::is_shipping_rule_Valid() const{
    return m_shipping_rule_isValid;
}

qint32 OAISalesOrderLineDto::getSortOrder() const {
    return m_sort_order;
}
void OAISalesOrderLineDto::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAISalesOrderLineDto::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAISalesOrderLineDto::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QMap<QString, QString> OAISalesOrderLineDto::getSubaccount() const {
    return m_subaccount;
}
void OAISalesOrderLineDto::setSubaccount(const QMap<QString, QString> &subaccount) {
    m_subaccount = subaccount;
    m_subaccount_isSet = true;
}

bool OAISalesOrderLineDto::is_subaccount_Set() const{
    return m_subaccount_isSet;
}

bool OAISalesOrderLineDto::is_subaccount_Valid() const{
    return m_subaccount_isValid;
}

OAISupplierDto OAISalesOrderLineDto::getSupplier() const {
    return m_supplier;
}
void OAISalesOrderLineDto::setSupplier(const OAISupplierDto &supplier) {
    m_supplier = supplier;
    m_supplier_isSet = true;
}

bool OAISalesOrderLineDto::is_supplier_Set() const{
    return m_supplier_isSet;
}

bool OAISalesOrderLineDto::is_supplier_Valid() const{
    return m_supplier_isValid;
}

double OAISalesOrderLineDto::getSupplierPrice() const {
    return m_supplier_price;
}
void OAISalesOrderLineDto::setSupplierPrice(const double &supplier_price) {
    m_supplier_price = supplier_price;
    m_supplier_price_isSet = true;
}

bool OAISalesOrderLineDto::is_supplier_price_Set() const{
    return m_supplier_price_isSet;
}

bool OAISalesOrderLineDto::is_supplier_price_Valid() const{
    return m_supplier_price_isValid;
}

QString OAISalesOrderLineDto::getTaxCategoryId() const {
    return m_tax_category_id;
}
void OAISalesOrderLineDto::setTaxCategoryId(const QString &tax_category_id) {
    m_tax_category_id = tax_category_id;
    m_tax_category_id_isSet = true;
}

bool OAISalesOrderLineDto::is_tax_category_id_Set() const{
    return m_tax_category_id_isSet;
}

bool OAISalesOrderLineDto::is_tax_category_id_Valid() const{
    return m_tax_category_id_isValid;
}

double OAISalesOrderLineDto::getUndershipThreshold() const {
    return m_undership_threshold;
}
void OAISalesOrderLineDto::setUndershipThreshold(const double &undership_threshold) {
    m_undership_threshold = undership_threshold;
    m_undership_threshold_isSet = true;
}

bool OAISalesOrderLineDto::is_undership_threshold_Set() const{
    return m_undership_threshold_isSet;
}

bool OAISalesOrderLineDto::is_undership_threshold_Valid() const{
    return m_undership_threshold_isValid;
}

double OAISalesOrderLineDto::getUnitCost() const {
    return m_unit_cost;
}
void OAISalesOrderLineDto::setUnitCost(const double &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAISalesOrderLineDto::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAISalesOrderLineDto::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

QString OAISalesOrderLineDto::getUnitOfMeasure() const {
    return m_unit_of_measure;
}
void OAISalesOrderLineDto::setUnitOfMeasure(const QString &unit_of_measure) {
    m_unit_of_measure = unit_of_measure;
    m_unit_of_measure_isSet = true;
}

bool OAISalesOrderLineDto::is_unit_of_measure_Set() const{
    return m_unit_of_measure_isSet;
}

bool OAISalesOrderLineDto::is_unit_of_measure_Valid() const{
    return m_unit_of_measure_isValid;
}

double OAISalesOrderLineDto::getUnitPrice() const {
    return m_unit_price;
}
void OAISalesOrderLineDto::setUnitPrice(const double &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAISalesOrderLineDto::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAISalesOrderLineDto::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

QString OAISalesOrderLineDto::getWarehouseId() const {
    return m_warehouse_id;
}
void OAISalesOrderLineDto::setWarehouseId(const QString &warehouse_id) {
    m_warehouse_id = warehouse_id;
    m_warehouse_id_isSet = true;
}

bool OAISalesOrderLineDto::is_warehouse_id_Set() const{
    return m_warehouse_id_isSet;
}

bool OAISalesOrderLineDto::is_warehouse_id_Valid() const{
    return m_warehouse_id_isValid;
}

OAILocationDto OAISalesOrderLineDto::getWarehouseLocation() const {
    return m_warehouse_location;
}
void OAISalesOrderLineDto::setWarehouseLocation(const OAILocationDto &warehouse_location) {
    m_warehouse_location = warehouse_location;
    m_warehouse_location_isSet = true;
}

bool OAISalesOrderLineDto::is_warehouse_location_Set() const{
    return m_warehouse_location_isSet;
}

bool OAISalesOrderLineDto::is_warehouse_location_Valid() const{
    return m_warehouse_location_isValid;
}

bool OAISalesOrderLineDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_order_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billed_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_commissionable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_sequence_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_manual_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_manual_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_alternate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_total_before_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overship_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_order_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_on_shipments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replacement_unit_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_undership_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_of_measure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesOrderLineDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
