/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWarehouseAvailabilityDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWarehouseAvailabilityDto::OAIWarehouseAvailabilityDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWarehouseAvailabilityDto::OAIWarehouseAvailabilityDto() {
    this->initializeModel();
}

OAIWarehouseAvailabilityDto::~OAIWarehouseAvailabilityDto() {}

void OAIWarehouseAvailabilityDto::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_estimated_total_cost_isSet = false;
    m_estimated_total_cost_isValid = false;

    m_estimated_unit_cost_isSet = false;
    m_estimated_unit_cost_isValid = false;

    m_internal_warehouse_id_isSet = false;
    m_internal_warehouse_id_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_quantity_available_isSet = false;
    m_quantity_available_isValid = false;

    m_quantity_available_for_shipment_isSet = false;
    m_quantity_available_for_shipment_isValid = false;

    m_quantity_not_available_isSet = false;
    m_quantity_not_available_isValid = false;

    m_quantity_on_hand_isSet = false;
    m_quantity_on_hand_isValid = false;

    m_quantity_purchase_orders_isSet = false;
    m_quantity_purchase_orders_isValid = false;

    m_warehouse_id_isSet = false;
    m_warehouse_id_isValid = false;
}

void OAIWarehouseAvailabilityDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWarehouseAvailabilityDto::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_estimated_total_cost_isValid = ::OpenAPI::fromJsonValue(m_estimated_total_cost, json[QString("estimatedTotalCost")]);
    m_estimated_total_cost_isSet = !json[QString("estimatedTotalCost")].isNull() && m_estimated_total_cost_isValid;

    m_estimated_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_estimated_unit_cost, json[QString("estimatedUnitCost")]);
    m_estimated_unit_cost_isSet = !json[QString("estimatedUnitCost")].isNull() && m_estimated_unit_cost_isValid;

    m_internal_warehouse_id_isValid = ::OpenAPI::fromJsonValue(m_internal_warehouse_id, json[QString("internalWarehouseId")]);
    m_internal_warehouse_id_isSet = !json[QString("internalWarehouseId")].isNull() && m_internal_warehouse_id_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_quantity_available_isValid = ::OpenAPI::fromJsonValue(m_quantity_available, json[QString("quantityAvailable")]);
    m_quantity_available_isSet = !json[QString("quantityAvailable")].isNull() && m_quantity_available_isValid;

    m_quantity_available_for_shipment_isValid = ::OpenAPI::fromJsonValue(m_quantity_available_for_shipment, json[QString("quantityAvailableForShipment")]);
    m_quantity_available_for_shipment_isSet = !json[QString("quantityAvailableForShipment")].isNull() && m_quantity_available_for_shipment_isValid;

    m_quantity_not_available_isValid = ::OpenAPI::fromJsonValue(m_quantity_not_available, json[QString("quantityNotAvailable")]);
    m_quantity_not_available_isSet = !json[QString("quantityNotAvailable")].isNull() && m_quantity_not_available_isValid;

    m_quantity_on_hand_isValid = ::OpenAPI::fromJsonValue(m_quantity_on_hand, json[QString("quantityOnHand")]);
    m_quantity_on_hand_isSet = !json[QString("quantityOnHand")].isNull() && m_quantity_on_hand_isValid;

    m_quantity_purchase_orders_isValid = ::OpenAPI::fromJsonValue(m_quantity_purchase_orders, json[QString("quantityPurchaseOrders")]);
    m_quantity_purchase_orders_isSet = !json[QString("quantityPurchaseOrders")].isNull() && m_quantity_purchase_orders_isValid;

    m_warehouse_id_isValid = ::OpenAPI::fromJsonValue(m_warehouse_id, json[QString("warehouseId")]);
    m_warehouse_id_isSet = !json[QString("warehouseId")].isNull() && m_warehouse_id_isValid;
}

QString OAIWarehouseAvailabilityDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWarehouseAvailabilityDto::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_estimated_total_cost_isSet) {
        obj.insert(QString("estimatedTotalCost"), ::OpenAPI::toJsonValue(m_estimated_total_cost));
    }
    if (m_estimated_unit_cost_isSet) {
        obj.insert(QString("estimatedUnitCost"), ::OpenAPI::toJsonValue(m_estimated_unit_cost));
    }
    if (m_internal_warehouse_id_isSet) {
        obj.insert(QString("internalWarehouseId"), ::OpenAPI::toJsonValue(m_internal_warehouse_id));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_quantity_available_isSet) {
        obj.insert(QString("quantityAvailable"), ::OpenAPI::toJsonValue(m_quantity_available));
    }
    if (m_quantity_available_for_shipment_isSet) {
        obj.insert(QString("quantityAvailableForShipment"), ::OpenAPI::toJsonValue(m_quantity_available_for_shipment));
    }
    if (m_quantity_not_available_isSet) {
        obj.insert(QString("quantityNotAvailable"), ::OpenAPI::toJsonValue(m_quantity_not_available));
    }
    if (m_quantity_on_hand_isSet) {
        obj.insert(QString("quantityOnHand"), ::OpenAPI::toJsonValue(m_quantity_on_hand));
    }
    if (m_quantity_purchase_orders_isSet) {
        obj.insert(QString("quantityPurchaseOrders"), ::OpenAPI::toJsonValue(m_quantity_purchase_orders));
    }
    if (m_warehouse_id_isSet) {
        obj.insert(QString("warehouseId"), ::OpenAPI::toJsonValue(m_warehouse_id));
    }
    return obj;
}

QString OAIWarehouseAvailabilityDto::getDescription() const {
    return m_description;
}
void OAIWarehouseAvailabilityDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWarehouseAvailabilityDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWarehouseAvailabilityDto::is_description_Valid() const{
    return m_description_isValid;
}

double OAIWarehouseAvailabilityDto::getEstimatedTotalCost() const {
    return m_estimated_total_cost;
}
void OAIWarehouseAvailabilityDto::setEstimatedTotalCost(const double &estimated_total_cost) {
    m_estimated_total_cost = estimated_total_cost;
    m_estimated_total_cost_isSet = true;
}

bool OAIWarehouseAvailabilityDto::is_estimated_total_cost_Set() const{
    return m_estimated_total_cost_isSet;
}

bool OAIWarehouseAvailabilityDto::is_estimated_total_cost_Valid() const{
    return m_estimated_total_cost_isValid;
}

double OAIWarehouseAvailabilityDto::getEstimatedUnitCost() const {
    return m_estimated_unit_cost;
}
void OAIWarehouseAvailabilityDto::setEstimatedUnitCost(const double &estimated_unit_cost) {
    m_estimated_unit_cost = estimated_unit_cost;
    m_estimated_unit_cost_isSet = true;
}

bool OAIWarehouseAvailabilityDto::is_estimated_unit_cost_Set() const{
    return m_estimated_unit_cost_isSet;
}

bool OAIWarehouseAvailabilityDto::is_estimated_unit_cost_Valid() const{
    return m_estimated_unit_cost_isValid;
}

qint32 OAIWarehouseAvailabilityDto::getInternalWarehouseId() const {
    return m_internal_warehouse_id;
}
void OAIWarehouseAvailabilityDto::setInternalWarehouseId(const qint32 &internal_warehouse_id) {
    m_internal_warehouse_id = internal_warehouse_id;
    m_internal_warehouse_id_isSet = true;
}

bool OAIWarehouseAvailabilityDto::is_internal_warehouse_id_Set() const{
    return m_internal_warehouse_id_isSet;
}

bool OAIWarehouseAvailabilityDto::is_internal_warehouse_id_Valid() const{
    return m_internal_warehouse_id_isValid;
}

QDateTime OAIWarehouseAvailabilityDto::getLastModified() const {
    return m_last_modified;
}
void OAIWarehouseAvailabilityDto::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIWarehouseAvailabilityDto::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIWarehouseAvailabilityDto::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QList<OAILocationAvailabilityDto> OAIWarehouseAvailabilityDto::getLocations() const {
    return m_locations;
}
void OAIWarehouseAvailabilityDto::setLocations(const QList<OAILocationAvailabilityDto> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIWarehouseAvailabilityDto::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIWarehouseAvailabilityDto::is_locations_Valid() const{
    return m_locations_isValid;
}

double OAIWarehouseAvailabilityDto::getQuantityAvailable() const {
    return m_quantity_available;
}
void OAIWarehouseAvailabilityDto::setQuantityAvailable(const double &quantity_available) {
    m_quantity_available = quantity_available;
    m_quantity_available_isSet = true;
}

bool OAIWarehouseAvailabilityDto::is_quantity_available_Set() const{
    return m_quantity_available_isSet;
}

bool OAIWarehouseAvailabilityDto::is_quantity_available_Valid() const{
    return m_quantity_available_isValid;
}

double OAIWarehouseAvailabilityDto::getQuantityAvailableForShipment() const {
    return m_quantity_available_for_shipment;
}
void OAIWarehouseAvailabilityDto::setQuantityAvailableForShipment(const double &quantity_available_for_shipment) {
    m_quantity_available_for_shipment = quantity_available_for_shipment;
    m_quantity_available_for_shipment_isSet = true;
}

bool OAIWarehouseAvailabilityDto::is_quantity_available_for_shipment_Set() const{
    return m_quantity_available_for_shipment_isSet;
}

bool OAIWarehouseAvailabilityDto::is_quantity_available_for_shipment_Valid() const{
    return m_quantity_available_for_shipment_isValid;
}

double OAIWarehouseAvailabilityDto::getQuantityNotAvailable() const {
    return m_quantity_not_available;
}
void OAIWarehouseAvailabilityDto::setQuantityNotAvailable(const double &quantity_not_available) {
    m_quantity_not_available = quantity_not_available;
    m_quantity_not_available_isSet = true;
}

bool OAIWarehouseAvailabilityDto::is_quantity_not_available_Set() const{
    return m_quantity_not_available_isSet;
}

bool OAIWarehouseAvailabilityDto::is_quantity_not_available_Valid() const{
    return m_quantity_not_available_isValid;
}

double OAIWarehouseAvailabilityDto::getQuantityOnHand() const {
    return m_quantity_on_hand;
}
void OAIWarehouseAvailabilityDto::setQuantityOnHand(const double &quantity_on_hand) {
    m_quantity_on_hand = quantity_on_hand;
    m_quantity_on_hand_isSet = true;
}

bool OAIWarehouseAvailabilityDto::is_quantity_on_hand_Set() const{
    return m_quantity_on_hand_isSet;
}

bool OAIWarehouseAvailabilityDto::is_quantity_on_hand_Valid() const{
    return m_quantity_on_hand_isValid;
}

double OAIWarehouseAvailabilityDto::getQuantityPurchaseOrders() const {
    return m_quantity_purchase_orders;
}
void OAIWarehouseAvailabilityDto::setQuantityPurchaseOrders(const double &quantity_purchase_orders) {
    m_quantity_purchase_orders = quantity_purchase_orders;
    m_quantity_purchase_orders_isSet = true;
}

bool OAIWarehouseAvailabilityDto::is_quantity_purchase_orders_Set() const{
    return m_quantity_purchase_orders_isSet;
}

bool OAIWarehouseAvailabilityDto::is_quantity_purchase_orders_Valid() const{
    return m_quantity_purchase_orders_isValid;
}

QString OAIWarehouseAvailabilityDto::getWarehouseId() const {
    return m_warehouse_id;
}
void OAIWarehouseAvailabilityDto::setWarehouseId(const QString &warehouse_id) {
    m_warehouse_id = warehouse_id;
    m_warehouse_id_isSet = true;
}

bool OAIWarehouseAvailabilityDto::is_warehouse_id_Set() const{
    return m_warehouse_id_isSet;
}

bool OAIWarehouseAvailabilityDto::is_warehouse_id_Valid() const{
    return m_warehouse_id_isValid;
}

bool OAIWarehouseAvailabilityDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_total_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_unit_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_warehouse_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_available_for_shipment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_not_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_on_hand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_purchase_orders_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWarehouseAvailabilityDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
