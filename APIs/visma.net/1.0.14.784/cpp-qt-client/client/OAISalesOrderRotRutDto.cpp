/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesOrderRotRutDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesOrderRotRutDto::OAISalesOrderRotRutDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesOrderRotRutDto::OAISalesOrderRotRutDto() {
    this->initializeModel();
}

OAISalesOrderRotRutDto::~OAISalesOrderRotRutDto() {}

void OAISalesOrderRotRutDto::initializeModel() {

    m_appartment_isSet = false;
    m_appartment_isValid = false;

    m_distributed_automatically_isSet = false;
    m_distributed_automatically_isValid = false;

    m_distribution_isSet = false;
    m_distribution_isValid = false;

    m_estate_isSet = false;
    m_estate_isValid = false;

    m_organization_number_isSet = false;
    m_organization_number_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISalesOrderRotRutDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesOrderRotRutDto::fromJsonObject(QJsonObject json) {

    m_appartment_isValid = ::OpenAPI::fromJsonValue(m_appartment, json[QString("appartment")]);
    m_appartment_isSet = !json[QString("appartment")].isNull() && m_appartment_isValid;

    m_distributed_automatically_isValid = ::OpenAPI::fromJsonValue(m_distributed_automatically, json[QString("distributedAutomatically")]);
    m_distributed_automatically_isSet = !json[QString("distributedAutomatically")].isNull() && m_distributed_automatically_isValid;

    m_distribution_isValid = ::OpenAPI::fromJsonValue(m_distribution, json[QString("distribution")]);
    m_distribution_isSet = !json[QString("distribution")].isNull() && m_distribution_isValid;

    m_estate_isValid = ::OpenAPI::fromJsonValue(m_estate, json[QString("estate")]);
    m_estate_isSet = !json[QString("estate")].isNull() && m_estate_isValid;

    m_organization_number_isValid = ::OpenAPI::fromJsonValue(m_organization_number, json[QString("organizationNumber")]);
    m_organization_number_isSet = !json[QString("organizationNumber")].isNull() && m_organization_number_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISalesOrderRotRutDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesOrderRotRutDto::asJsonObject() const {
    QJsonObject obj;
    if (m_appartment_isSet) {
        obj.insert(QString("appartment"), ::OpenAPI::toJsonValue(m_appartment));
    }
    if (m_distributed_automatically_isSet) {
        obj.insert(QString("distributedAutomatically"), ::OpenAPI::toJsonValue(m_distributed_automatically));
    }
    if (m_distribution.size() > 0) {
        obj.insert(QString("distribution"), ::OpenAPI::toJsonValue(m_distribution));
    }
    if (m_estate_isSet) {
        obj.insert(QString("estate"), ::OpenAPI::toJsonValue(m_estate));
    }
    if (m_organization_number_isSet) {
        obj.insert(QString("organizationNumber"), ::OpenAPI::toJsonValue(m_organization_number));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISalesOrderRotRutDto::getAppartment() const {
    return m_appartment;
}
void OAISalesOrderRotRutDto::setAppartment(const QString &appartment) {
    m_appartment = appartment;
    m_appartment_isSet = true;
}

bool OAISalesOrderRotRutDto::is_appartment_Set() const{
    return m_appartment_isSet;
}

bool OAISalesOrderRotRutDto::is_appartment_Valid() const{
    return m_appartment_isValid;
}

bool OAISalesOrderRotRutDto::isDistributedAutomatically() const {
    return m_distributed_automatically;
}
void OAISalesOrderRotRutDto::setDistributedAutomatically(const bool &distributed_automatically) {
    m_distributed_automatically = distributed_automatically;
    m_distributed_automatically_isSet = true;
}

bool OAISalesOrderRotRutDto::is_distributed_automatically_Set() const{
    return m_distributed_automatically_isSet;
}

bool OAISalesOrderRotRutDto::is_distributed_automatically_Valid() const{
    return m_distributed_automatically_isValid;
}

QList<OAISalesOrderRotRutDistributionDto> OAISalesOrderRotRutDto::getDistribution() const {
    return m_distribution;
}
void OAISalesOrderRotRutDto::setDistribution(const QList<OAISalesOrderRotRutDistributionDto> &distribution) {
    m_distribution = distribution;
    m_distribution_isSet = true;
}

bool OAISalesOrderRotRutDto::is_distribution_Set() const{
    return m_distribution_isSet;
}

bool OAISalesOrderRotRutDto::is_distribution_Valid() const{
    return m_distribution_isValid;
}

QString OAISalesOrderRotRutDto::getEstate() const {
    return m_estate;
}
void OAISalesOrderRotRutDto::setEstate(const QString &estate) {
    m_estate = estate;
    m_estate_isSet = true;
}

bool OAISalesOrderRotRutDto::is_estate_Set() const{
    return m_estate_isSet;
}

bool OAISalesOrderRotRutDto::is_estate_Valid() const{
    return m_estate_isValid;
}

QString OAISalesOrderRotRutDto::getOrganizationNumber() const {
    return m_organization_number;
}
void OAISalesOrderRotRutDto::setOrganizationNumber(const QString &organization_number) {
    m_organization_number = organization_number;
    m_organization_number_isSet = true;
}

bool OAISalesOrderRotRutDto::is_organization_number_Set() const{
    return m_organization_number_isSet;
}

bool OAISalesOrderRotRutDto::is_organization_number_Valid() const{
    return m_organization_number_isValid;
}

QString OAISalesOrderRotRutDto::getType() const {
    return m_type;
}
void OAISalesOrderRotRutDto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISalesOrderRotRutDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAISalesOrderRotRutDto::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISalesOrderRotRutDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_appartment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distributed_automatically_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_estate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesOrderRotRutDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
