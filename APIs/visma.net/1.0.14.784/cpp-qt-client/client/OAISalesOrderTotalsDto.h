/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISalesOrderTotalsDto.h
 *
 * 
 */

#ifndef OAISalesOrderTotalsDto_H
#define OAISalesOrderTotalsDto_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISalesOrderTotalsDto : public OAIObject {
public:
    OAISalesOrderTotalsDto();
    OAISalesOrderTotalsDto(QString json);
    ~OAISalesOrderTotalsDto() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCostTotal() const;
    void setCostTotal(const double &cost_total);
    bool is_cost_total_Set() const;
    bool is_cost_total_Valid() const;

    double getCostTotalInBaseCurrency() const;
    void setCostTotalInBaseCurrency(const double &cost_total_in_base_currency);
    bool is_cost_total_in_base_currency_Set() const;
    bool is_cost_total_in_base_currency_Valid() const;

    double getDiscountTotal() const;
    void setDiscountTotal(const double &discount_total);
    bool is_discount_total_Set() const;
    bool is_discount_total_Valid() const;

    double getDiscountTotalInBaseCurrency() const;
    void setDiscountTotalInBaseCurrency(const double &discount_total_in_base_currency);
    bool is_discount_total_in_base_currency_Set() const;
    bool is_discount_total_in_base_currency_Valid() const;

    double getFreightCost() const;
    void setFreightCost(const double &freight_cost);
    bool is_freight_cost_Set() const;
    bool is_freight_cost_Valid() const;

    double getFreightCostInBaseCurrency() const;
    void setFreightCostInBaseCurrency(const double &freight_cost_in_base_currency);
    bool is_freight_cost_in_base_currency_Set() const;
    bool is_freight_cost_in_base_currency_Valid() const;

    double getFreightTotal() const;
    void setFreightTotal(const double &freight_total);
    bool is_freight_total_Set() const;
    bool is_freight_total_Valid() const;

    double getFreightTotalInBaseCurrency() const;
    void setFreightTotalInBaseCurrency(const double &freight_total_in_base_currency);
    bool is_freight_total_in_base_currency_Set() const;
    bool is_freight_total_in_base_currency_Valid() const;

    double getOrderTotal() const;
    void setOrderTotal(const double &order_total);
    bool is_order_total_Set() const;
    bool is_order_total_Valid() const;

    double getOrderTotalInBaseCurrency() const;
    void setOrderTotalInBaseCurrency(const double &order_total_in_base_currency);
    bool is_order_total_in_base_currency_Set() const;
    bool is_order_total_in_base_currency_Valid() const;

    double getTaxExemptTotal() const;
    void setTaxExemptTotal(const double &tax_exempt_total);
    bool is_tax_exempt_total_Set() const;
    bool is_tax_exempt_total_Valid() const;

    double getTaxExemptTotalInBaseCurrency() const;
    void setTaxExemptTotalInBaseCurrency(const double &tax_exempt_total_in_base_currency);
    bool is_tax_exempt_total_in_base_currency_Set() const;
    bool is_tax_exempt_total_in_base_currency_Valid() const;

    double getTaxTotal() const;
    void setTaxTotal(const double &tax_total);
    bool is_tax_total_Set() const;
    bool is_tax_total_Valid() const;

    double getTaxTotalInBaseCurrency() const;
    void setTaxTotalInBaseCurrency(const double &tax_total_in_base_currency);
    bool is_tax_total_in_base_currency_Set() const;
    bool is_tax_total_in_base_currency_Valid() const;

    double getTaxableTotal() const;
    void setTaxableTotal(const double &taxable_total);
    bool is_taxable_total_Set() const;
    bool is_taxable_total_Valid() const;

    double getTaxableTotalInBaseCurrency() const;
    void setTaxableTotalInBaseCurrency(const double &taxable_total_in_base_currency);
    bool is_taxable_total_in_base_currency_Set() const;
    bool is_taxable_total_in_base_currency_Valid() const;

    double getUnbilledAmount() const;
    void setUnbilledAmount(const double &unbilled_amount);
    bool is_unbilled_amount_Set() const;
    bool is_unbilled_amount_Valid() const;

    double getUnbilledAmountInBaseCurrency() const;
    void setUnbilledAmountInBaseCurrency(const double &unbilled_amount_in_base_currency);
    bool is_unbilled_amount_in_base_currency_Set() const;
    bool is_unbilled_amount_in_base_currency_Valid() const;

    double getUnshippedAmount() const;
    void setUnshippedAmount(const double &unshipped_amount);
    bool is_unshipped_amount_Set() const;
    bool is_unshipped_amount_Valid() const;

    double getUnshippedAmountInBaseCurrency() const;
    void setUnshippedAmountInBaseCurrency(const double &unshipped_amount_in_base_currency);
    bool is_unshipped_amount_in_base_currency_Set() const;
    bool is_unshipped_amount_in_base_currency_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_cost_total;
    bool m_cost_total_isSet;
    bool m_cost_total_isValid;

    double m_cost_total_in_base_currency;
    bool m_cost_total_in_base_currency_isSet;
    bool m_cost_total_in_base_currency_isValid;

    double m_discount_total;
    bool m_discount_total_isSet;
    bool m_discount_total_isValid;

    double m_discount_total_in_base_currency;
    bool m_discount_total_in_base_currency_isSet;
    bool m_discount_total_in_base_currency_isValid;

    double m_freight_cost;
    bool m_freight_cost_isSet;
    bool m_freight_cost_isValid;

    double m_freight_cost_in_base_currency;
    bool m_freight_cost_in_base_currency_isSet;
    bool m_freight_cost_in_base_currency_isValid;

    double m_freight_total;
    bool m_freight_total_isSet;
    bool m_freight_total_isValid;

    double m_freight_total_in_base_currency;
    bool m_freight_total_in_base_currency_isSet;
    bool m_freight_total_in_base_currency_isValid;

    double m_order_total;
    bool m_order_total_isSet;
    bool m_order_total_isValid;

    double m_order_total_in_base_currency;
    bool m_order_total_in_base_currency_isSet;
    bool m_order_total_in_base_currency_isValid;

    double m_tax_exempt_total;
    bool m_tax_exempt_total_isSet;
    bool m_tax_exempt_total_isValid;

    double m_tax_exempt_total_in_base_currency;
    bool m_tax_exempt_total_in_base_currency_isSet;
    bool m_tax_exempt_total_in_base_currency_isValid;

    double m_tax_total;
    bool m_tax_total_isSet;
    bool m_tax_total_isValid;

    double m_tax_total_in_base_currency;
    bool m_tax_total_in_base_currency_isSet;
    bool m_tax_total_in_base_currency_isValid;

    double m_taxable_total;
    bool m_taxable_total_isSet;
    bool m_taxable_total_isValid;

    double m_taxable_total_in_base_currency;
    bool m_taxable_total_in_base_currency_isSet;
    bool m_taxable_total_in_base_currency_isValid;

    double m_unbilled_amount;
    bool m_unbilled_amount_isSet;
    bool m_unbilled_amount_isValid;

    double m_unbilled_amount_in_base_currency;
    bool m_unbilled_amount_in_base_currency_isSet;
    bool m_unbilled_amount_in_base_currency_isValid;

    double m_unshipped_amount;
    bool m_unshipped_amount_isSet;
    bool m_unshipped_amount_isValid;

    double m_unshipped_amount_in_base_currency;
    bool m_unshipped_amount_in_base_currency_isSet;
    bool m_unshipped_amount_in_base_currency_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISalesOrderTotalsDto)

#endif // OAISalesOrderTotalsDto_H
