/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewSalesOrderCommand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewSalesOrderCommand::OAINewSalesOrderCommand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewSalesOrderCommand::OAINewSalesOrderCommand() {
    this->initializeModel();
}

OAINewSalesOrderCommand::~OAINewSalesOrderCommand() {}

void OAINewSalesOrderCommand::initializeModel() {

    m_billing_isSet = false;
    m_billing_isValid = false;

    m_branch_id_isSet = false;
    m_branch_id_isValid = false;

    m_cancel_by_isSet = false;
    m_cancel_by_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_financial_information_isSet = false;
    m_financial_information_isValid = false;

    m_freight_isSet = false;
    m_freight_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_order_lines_isSet = false;
    m_order_lines_isValid = false;

    m_original_order_id_isSet = false;
    m_original_order_id_isValid = false;

    m_original_order_type_isSet = false;
    m_original_order_type_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_payment_settings_isSet = false;
    m_payment_settings_isValid = false;

    m_print_isSet = false;
    m_print_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_request_on_isSet = false;
    m_request_on_isValid = false;

    m_sales_person_id_isSet = false;
    m_sales_person_id_isValid = false;

    m_shipping_isSet = false;
    m_shipping_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tax_zone_id_isSet = false;
    m_tax_zone_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_use_replacement_cost_for_margin_and_profit_isSet = false;
    m_use_replacement_cost_for_margin_and_profit_isValid = false;
}

void OAINewSalesOrderCommand::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewSalesOrderCommand::fromJsonObject(QJsonObject json) {

    m_billing_isValid = ::OpenAPI::fromJsonValue(m_billing, json[QString("billing")]);
    m_billing_isSet = !json[QString("billing")].isNull() && m_billing_isValid;

    m_branch_id_isValid = ::OpenAPI::fromJsonValue(m_branch_id, json[QString("branchId")]);
    m_branch_id_isSet = !json[QString("branchId")].isNull() && m_branch_id_isValid;

    m_cancel_by_isValid = ::OpenAPI::fromJsonValue(m_cancel_by, json[QString("cancelBy")]);
    m_cancel_by_isSet = !json[QString("cancelBy")].isNull() && m_cancel_by_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_financial_information_isValid = ::OpenAPI::fromJsonValue(m_financial_information, json[QString("financialInformation")]);
    m_financial_information_isSet = !json[QString("financialInformation")].isNull() && m_financial_information_isValid;

    m_freight_isValid = ::OpenAPI::fromJsonValue(m_freight, json[QString("freight")]);
    m_freight_isSet = !json[QString("freight")].isNull() && m_freight_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_order_lines_isValid = ::OpenAPI::fromJsonValue(m_order_lines, json[QString("orderLines")]);
    m_order_lines_isSet = !json[QString("orderLines")].isNull() && m_order_lines_isValid;

    m_original_order_id_isValid = ::OpenAPI::fromJsonValue(m_original_order_id, json[QString("originalOrderId")]);
    m_original_order_id_isSet = !json[QString("originalOrderId")].isNull() && m_original_order_id_isValid;

    m_original_order_type_isValid = ::OpenAPI::fromJsonValue(m_original_order_type, json[QString("originalOrderType")]);
    m_original_order_type_isSet = !json[QString("originalOrderType")].isNull() && m_original_order_type_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("ownerId")]);
    m_owner_id_isSet = !json[QString("ownerId")].isNull() && m_owner_id_isValid;

    m_payment_settings_isValid = ::OpenAPI::fromJsonValue(m_payment_settings, json[QString("paymentSettings")]);
    m_payment_settings_isSet = !json[QString("paymentSettings")].isNull() && m_payment_settings_isValid;

    m_print_isValid = ::OpenAPI::fromJsonValue(m_print, json[QString("print")]);
    m_print_isSet = !json[QString("print")].isNull() && m_print_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_request_on_isValid = ::OpenAPI::fromJsonValue(m_request_on, json[QString("requestOn")]);
    m_request_on_isSet = !json[QString("requestOn")].isNull() && m_request_on_isValid;

    m_sales_person_id_isValid = ::OpenAPI::fromJsonValue(m_sales_person_id, json[QString("salesPersonId")]);
    m_sales_person_id_isSet = !json[QString("salesPersonId")].isNull() && m_sales_person_id_isValid;

    m_shipping_isValid = ::OpenAPI::fromJsonValue(m_shipping, json[QString("shipping")]);
    m_shipping_isSet = !json[QString("shipping")].isNull() && m_shipping_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tax_zone_id_isValid = ::OpenAPI::fromJsonValue(m_tax_zone_id, json[QString("taxZoneId")]);
    m_tax_zone_id_isSet = !json[QString("taxZoneId")].isNull() && m_tax_zone_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_use_replacement_cost_for_margin_and_profit_isValid = ::OpenAPI::fromJsonValue(m_use_replacement_cost_for_margin_and_profit, json[QString("useReplacementCostForMarginAndProfit")]);
    m_use_replacement_cost_for_margin_and_profit_isSet = !json[QString("useReplacementCostForMarginAndProfit")].isNull() && m_use_replacement_cost_for_margin_and_profit_isValid;
}

QString OAINewSalesOrderCommand::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewSalesOrderCommand::asJsonObject() const {
    QJsonObject obj;
    if (m_billing.isSet()) {
        obj.insert(QString("billing"), ::OpenAPI::toJsonValue(m_billing));
    }
    if (m_branch_id_isSet) {
        obj.insert(QString("branchId"), ::OpenAPI::toJsonValue(m_branch_id));
    }
    if (m_cancel_by_isSet) {
        obj.insert(QString("cancelBy"), ::OpenAPI::toJsonValue(m_cancel_by));
    }
    if (m_currency_id_isSet) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_financial_information.isSet()) {
        obj.insert(QString("financialInformation"), ::OpenAPI::toJsonValue(m_financial_information));
    }
    if (m_freight.isSet()) {
        obj.insert(QString("freight"), ::OpenAPI::toJsonValue(m_freight));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_order_lines.size() > 0) {
        obj.insert(QString("orderLines"), ::OpenAPI::toJsonValue(m_order_lines));
    }
    if (m_original_order_id_isSet) {
        obj.insert(QString("originalOrderId"), ::OpenAPI::toJsonValue(m_original_order_id));
    }
    if (m_original_order_type_isSet) {
        obj.insert(QString("originalOrderType"), ::OpenAPI::toJsonValue(m_original_order_type));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("ownerId"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_payment_settings.isSet()) {
        obj.insert(QString("paymentSettings"), ::OpenAPI::toJsonValue(m_payment_settings));
    }
    if (m_print.isSet()) {
        obj.insert(QString("print"), ::OpenAPI::toJsonValue(m_print));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_request_on_isSet) {
        obj.insert(QString("requestOn"), ::OpenAPI::toJsonValue(m_request_on));
    }
    if (m_sales_person_id_isSet) {
        obj.insert(QString("salesPersonId"), ::OpenAPI::toJsonValue(m_sales_person_id));
    }
    if (m_shipping.isSet()) {
        obj.insert(QString("shipping"), ::OpenAPI::toJsonValue(m_shipping));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tax_zone_id_isSet) {
        obj.insert(QString("taxZoneId"), ::OpenAPI::toJsonValue(m_tax_zone_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_use_replacement_cost_for_margin_and_profit_isSet) {
        obj.insert(QString("useReplacementCostForMarginAndProfit"), ::OpenAPI::toJsonValue(m_use_replacement_cost_for_margin_and_profit));
    }
    return obj;
}

OAINewSalesOrderBillingDto OAINewSalesOrderCommand::getBilling() const {
    return m_billing;
}
void OAINewSalesOrderCommand::setBilling(const OAINewSalesOrderBillingDto &billing) {
    m_billing = billing;
    m_billing_isSet = true;
}

bool OAINewSalesOrderCommand::is_billing_Set() const{
    return m_billing_isSet;
}

bool OAINewSalesOrderCommand::is_billing_Valid() const{
    return m_billing_isValid;
}

QString OAINewSalesOrderCommand::getBranchId() const {
    return m_branch_id;
}
void OAINewSalesOrderCommand::setBranchId(const QString &branch_id) {
    m_branch_id = branch_id;
    m_branch_id_isSet = true;
}

bool OAINewSalesOrderCommand::is_branch_id_Set() const{
    return m_branch_id_isSet;
}

bool OAINewSalesOrderCommand::is_branch_id_Valid() const{
    return m_branch_id_isValid;
}

QDateTime OAINewSalesOrderCommand::getCancelBy() const {
    return m_cancel_by;
}
void OAINewSalesOrderCommand::setCancelBy(const QDateTime &cancel_by) {
    m_cancel_by = cancel_by;
    m_cancel_by_isSet = true;
}

bool OAINewSalesOrderCommand::is_cancel_by_Set() const{
    return m_cancel_by_isSet;
}

bool OAINewSalesOrderCommand::is_cancel_by_Valid() const{
    return m_cancel_by_isValid;
}

QString OAINewSalesOrderCommand::getCurrencyId() const {
    return m_currency_id;
}
void OAINewSalesOrderCommand::setCurrencyId(const QString &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAINewSalesOrderCommand::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAINewSalesOrderCommand::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

OAINewSalesOrderCustomerDto OAINewSalesOrderCommand::getCustomer() const {
    return m_customer;
}
void OAINewSalesOrderCommand::setCustomer(const OAINewSalesOrderCustomerDto &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAINewSalesOrderCommand::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAINewSalesOrderCommand::is_customer_Valid() const{
    return m_customer_isValid;
}

QDateTime OAINewSalesOrderCommand::getDate() const {
    return m_date;
}
void OAINewSalesOrderCommand::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAINewSalesOrderCommand::is_date_Set() const{
    return m_date_isSet;
}

bool OAINewSalesOrderCommand::is_date_Valid() const{
    return m_date_isValid;
}

QString OAINewSalesOrderCommand::getDescription() const {
    return m_description;
}
void OAINewSalesOrderCommand::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINewSalesOrderCommand::is_description_Set() const{
    return m_description_isSet;
}

bool OAINewSalesOrderCommand::is_description_Valid() const{
    return m_description_isValid;
}

OAINewSalesOrderFinancialInfoDto OAINewSalesOrderCommand::getFinancialInformation() const {
    return m_financial_information;
}
void OAINewSalesOrderCommand::setFinancialInformation(const OAINewSalesOrderFinancialInfoDto &financial_information) {
    m_financial_information = financial_information;
    m_financial_information_isSet = true;
}

bool OAINewSalesOrderCommand::is_financial_information_Set() const{
    return m_financial_information_isSet;
}

bool OAINewSalesOrderCommand::is_financial_information_Valid() const{
    return m_financial_information_isValid;
}

OAINewSalesOrderFreightDto OAINewSalesOrderCommand::getFreight() const {
    return m_freight;
}
void OAINewSalesOrderCommand::setFreight(const OAINewSalesOrderFreightDto &freight) {
    m_freight = freight;
    m_freight_isSet = true;
}

bool OAINewSalesOrderCommand::is_freight_Set() const{
    return m_freight_isSet;
}

bool OAINewSalesOrderCommand::is_freight_Valid() const{
    return m_freight_isValid;
}

QString OAINewSalesOrderCommand::getNote() const {
    return m_note;
}
void OAINewSalesOrderCommand::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAINewSalesOrderCommand::is_note_Set() const{
    return m_note_isSet;
}

bool OAINewSalesOrderCommand::is_note_Valid() const{
    return m_note_isValid;
}

QString OAINewSalesOrderCommand::getOrderId() const {
    return m_order_id;
}
void OAINewSalesOrderCommand::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAINewSalesOrderCommand::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAINewSalesOrderCommand::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QList<OAINewSalesOrderLineDto> OAINewSalesOrderCommand::getOrderLines() const {
    return m_order_lines;
}
void OAINewSalesOrderCommand::setOrderLines(const QList<OAINewSalesOrderLineDto> &order_lines) {
    m_order_lines = order_lines;
    m_order_lines_isSet = true;
}

bool OAINewSalesOrderCommand::is_order_lines_Set() const{
    return m_order_lines_isSet;
}

bool OAINewSalesOrderCommand::is_order_lines_Valid() const{
    return m_order_lines_isValid;
}

QString OAINewSalesOrderCommand::getOriginalOrderId() const {
    return m_original_order_id;
}
void OAINewSalesOrderCommand::setOriginalOrderId(const QString &original_order_id) {
    m_original_order_id = original_order_id;
    m_original_order_id_isSet = true;
}

bool OAINewSalesOrderCommand::is_original_order_id_Set() const{
    return m_original_order_id_isSet;
}

bool OAINewSalesOrderCommand::is_original_order_id_Valid() const{
    return m_original_order_id_isValid;
}

QString OAINewSalesOrderCommand::getOriginalOrderType() const {
    return m_original_order_type;
}
void OAINewSalesOrderCommand::setOriginalOrderType(const QString &original_order_type) {
    m_original_order_type = original_order_type;
    m_original_order_type_isSet = true;
}

bool OAINewSalesOrderCommand::is_original_order_type_Set() const{
    return m_original_order_type_isSet;
}

bool OAINewSalesOrderCommand::is_original_order_type_Valid() const{
    return m_original_order_type_isValid;
}

QString OAINewSalesOrderCommand::getOwnerId() const {
    return m_owner_id;
}
void OAINewSalesOrderCommand::setOwnerId(const QString &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAINewSalesOrderCommand::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAINewSalesOrderCommand::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

OAINewSalesOrderPaymentSettings OAINewSalesOrderCommand::getPaymentSettings() const {
    return m_payment_settings;
}
void OAINewSalesOrderCommand::setPaymentSettings(const OAINewSalesOrderPaymentSettings &payment_settings) {
    m_payment_settings = payment_settings;
    m_payment_settings_isSet = true;
}

bool OAINewSalesOrderCommand::is_payment_settings_Set() const{
    return m_payment_settings_isSet;
}

bool OAINewSalesOrderCommand::is_payment_settings_Valid() const{
    return m_payment_settings_isValid;
}

OAISalesOrderPrintDto OAINewSalesOrderCommand::getPrint() const {
    return m_print;
}
void OAINewSalesOrderCommand::setPrint(const OAISalesOrderPrintDto &print) {
    m_print = print;
    m_print_isSet = true;
}

bool OAINewSalesOrderCommand::is_print_Set() const{
    return m_print_isSet;
}

bool OAINewSalesOrderCommand::is_print_Valid() const{
    return m_print_isValid;
}

QString OAINewSalesOrderCommand::getProjectId() const {
    return m_project_id;
}
void OAINewSalesOrderCommand::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAINewSalesOrderCommand::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAINewSalesOrderCommand::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QDateTime OAINewSalesOrderCommand::getRequestOn() const {
    return m_request_on;
}
void OAINewSalesOrderCommand::setRequestOn(const QDateTime &request_on) {
    m_request_on = request_on;
    m_request_on_isSet = true;
}

bool OAINewSalesOrderCommand::is_request_on_Set() const{
    return m_request_on_isSet;
}

bool OAINewSalesOrderCommand::is_request_on_Valid() const{
    return m_request_on_isValid;
}

QString OAINewSalesOrderCommand::getSalesPersonId() const {
    return m_sales_person_id;
}
void OAINewSalesOrderCommand::setSalesPersonId(const QString &sales_person_id) {
    m_sales_person_id = sales_person_id;
    m_sales_person_id_isSet = true;
}

bool OAINewSalesOrderCommand::is_sales_person_id_Set() const{
    return m_sales_person_id_isSet;
}

bool OAINewSalesOrderCommand::is_sales_person_id_Valid() const{
    return m_sales_person_id_isValid;
}

OAINewSalesOrderShippingDto OAINewSalesOrderCommand::getShipping() const {
    return m_shipping;
}
void OAINewSalesOrderCommand::setShipping(const OAINewSalesOrderShippingDto &shipping) {
    m_shipping = shipping;
    m_shipping_isSet = true;
}

bool OAINewSalesOrderCommand::is_shipping_Set() const{
    return m_shipping_isSet;
}

bool OAINewSalesOrderCommand::is_shipping_Valid() const{
    return m_shipping_isValid;
}

QString OAINewSalesOrderCommand::getStatus() const {
    return m_status;
}
void OAINewSalesOrderCommand::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINewSalesOrderCommand::is_status_Set() const{
    return m_status_isSet;
}

bool OAINewSalesOrderCommand::is_status_Valid() const{
    return m_status_isValid;
}

QString OAINewSalesOrderCommand::getTaxZoneId() const {
    return m_tax_zone_id;
}
void OAINewSalesOrderCommand::setTaxZoneId(const QString &tax_zone_id) {
    m_tax_zone_id = tax_zone_id;
    m_tax_zone_id_isSet = true;
}

bool OAINewSalesOrderCommand::is_tax_zone_id_Set() const{
    return m_tax_zone_id_isSet;
}

bool OAINewSalesOrderCommand::is_tax_zone_id_Valid() const{
    return m_tax_zone_id_isValid;
}

QString OAINewSalesOrderCommand::getType() const {
    return m_type;
}
void OAINewSalesOrderCommand::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINewSalesOrderCommand::is_type_Set() const{
    return m_type_isSet;
}

bool OAINewSalesOrderCommand::is_type_Valid() const{
    return m_type_isValid;
}

bool OAINewSalesOrderCommand::isUseReplacementCostForMarginAndProfit() const {
    return m_use_replacement_cost_for_margin_and_profit;
}
void OAINewSalesOrderCommand::setUseReplacementCostForMarginAndProfit(const bool &use_replacement_cost_for_margin_and_profit) {
    m_use_replacement_cost_for_margin_and_profit = use_replacement_cost_for_margin_and_profit;
    m_use_replacement_cost_for_margin_and_profit_isSet = true;
}

bool OAINewSalesOrderCommand::is_use_replacement_cost_for_margin_and_profit_Set() const{
    return m_use_replacement_cost_for_margin_and_profit_isSet;
}

bool OAINewSalesOrderCommand::is_use_replacement_cost_for_margin_and_profit_Valid() const{
    return m_use_replacement_cost_for_margin_and_profit_isValid;
}

bool OAINewSalesOrderCommand::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_financial_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_order_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_print.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_person_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_replacement_cost_for_margin_and_profit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewSalesOrderCommand::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_customer_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
