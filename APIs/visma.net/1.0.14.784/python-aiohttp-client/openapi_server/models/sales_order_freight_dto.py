# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SalesOrderFreightDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, amount_in_base_currency: float=None, cost: float=None, cost_in_base_currency: float=None, premium_amount: float=None, premium_amount_in_base_currency: float=None, tax_category_id: str=None, volume: float=None, weight: float=None):
        """SalesOrderFreightDto - a model defined in OpenAPI

        :param amount: The amount of this SalesOrderFreightDto.
        :param amount_in_base_currency: The amount_in_base_currency of this SalesOrderFreightDto.
        :param cost: The cost of this SalesOrderFreightDto.
        :param cost_in_base_currency: The cost_in_base_currency of this SalesOrderFreightDto.
        :param premium_amount: The premium_amount of this SalesOrderFreightDto.
        :param premium_amount_in_base_currency: The premium_amount_in_base_currency of this SalesOrderFreightDto.
        :param tax_category_id: The tax_category_id of this SalesOrderFreightDto.
        :param volume: The volume of this SalesOrderFreightDto.
        :param weight: The weight of this SalesOrderFreightDto.
        """
        self.openapi_types = {
            'amount': float,
            'amount_in_base_currency': float,
            'cost': float,
            'cost_in_base_currency': float,
            'premium_amount': float,
            'premium_amount_in_base_currency': float,
            'tax_category_id': str,
            'volume': float,
            'weight': float
        }

        self.attribute_map = {
            'amount': 'amount',
            'amount_in_base_currency': 'amountInBaseCurrency',
            'cost': 'cost',
            'cost_in_base_currency': 'costInBaseCurrency',
            'premium_amount': 'premiumAmount',
            'premium_amount_in_base_currency': 'premiumAmountInBaseCurrency',
            'tax_category_id': 'taxCategoryId',
            'volume': 'volume',
            'weight': 'weight'
        }

        self._amount = amount
        self._amount_in_base_currency = amount_in_base_currency
        self._cost = cost
        self._cost_in_base_currency = cost_in_base_currency
        self._premium_amount = premium_amount
        self._premium_amount_in_base_currency = premium_amount_in_base_currency
        self._tax_category_id = tax_category_id
        self._volume = volume
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesOrderFreightDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SalesOrderFreightDto of this SalesOrderFreightDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this SalesOrderFreightDto.

        The amounts calculated based on the ship terms.  ///

        :return: The amount of this SalesOrderFreightDto.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SalesOrderFreightDto.

        The amounts calculated based on the ship terms.  ///

        :param amount: The amount of this SalesOrderFreightDto.
        :type amount: float
        """

        self._amount = amount

    @property
    def amount_in_base_currency(self):
        """Gets the amount_in_base_currency of this SalesOrderFreightDto.

        The amounts calculated based on the ship terms in base currency of the order.

        :return: The amount_in_base_currency of this SalesOrderFreightDto.
        :rtype: float
        """
        return self._amount_in_base_currency

    @amount_in_base_currency.setter
    def amount_in_base_currency(self, amount_in_base_currency):
        """Sets the amount_in_base_currency of this SalesOrderFreightDto.

        The amounts calculated based on the ship terms in base currency of the order.

        :param amount_in_base_currency: The amount_in_base_currency of this SalesOrderFreightDto.
        :type amount_in_base_currency: float
        """

        self._amount_in_base_currency = amount_in_base_currency

    @property
    def cost(self):
        """Gets the cost of this SalesOrderFreightDto.

        The freight cost calculated for the sales order,

        :return: The cost of this SalesOrderFreightDto.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this SalesOrderFreightDto.

        The freight cost calculated for the sales order,

        :param cost: The cost of this SalesOrderFreightDto.
        :type cost: float
        """

        self._cost = cost

    @property
    def cost_in_base_currency(self):
        """Gets the cost_in_base_currency of this SalesOrderFreightDto.

        The freight cost calculated for the sales order in base currency.

        :return: The cost_in_base_currency of this SalesOrderFreightDto.
        :rtype: float
        """
        return self._cost_in_base_currency

    @cost_in_base_currency.setter
    def cost_in_base_currency(self, cost_in_base_currency):
        """Sets the cost_in_base_currency of this SalesOrderFreightDto.

        The freight cost calculated for the sales order in base currency.

        :param cost_in_base_currency: The cost_in_base_currency of this SalesOrderFreightDto.
        :type cost_in_base_currency: float
        """

        self._cost_in_base_currency = cost_in_base_currency

    @property
    def premium_amount(self):
        """Gets the premium_amount of this SalesOrderFreightDto.

        The additional freight charges for handling the order.

        :return: The premium_amount of this SalesOrderFreightDto.
        :rtype: float
        """
        return self._premium_amount

    @premium_amount.setter
    def premium_amount(self, premium_amount):
        """Sets the premium_amount of this SalesOrderFreightDto.

        The additional freight charges for handling the order.

        :param premium_amount: The premium_amount of this SalesOrderFreightDto.
        :type premium_amount: float
        """

        self._premium_amount = premium_amount

    @property
    def premium_amount_in_base_currency(self):
        """Gets the premium_amount_in_base_currency of this SalesOrderFreightDto.

        The additional freight charges in base currency for handling the order.

        :return: The premium_amount_in_base_currency of this SalesOrderFreightDto.
        :rtype: float
        """
        return self._premium_amount_in_base_currency

    @premium_amount_in_base_currency.setter
    def premium_amount_in_base_currency(self, premium_amount_in_base_currency):
        """Sets the premium_amount_in_base_currency of this SalesOrderFreightDto.

        The additional freight charges in base currency for handling the order.

        :param premium_amount_in_base_currency: The premium_amount_in_base_currency of this SalesOrderFreightDto.
        :type premium_amount_in_base_currency: float
        """

        self._premium_amount_in_base_currency = premium_amount_in_base_currency

    @property
    def tax_category_id(self):
        """Gets the tax_category_id of this SalesOrderFreightDto.

        The tax category that applies to the freight amount.  By default, it is the tax category associated with the ship via code selected for the order.

        :return: The tax_category_id of this SalesOrderFreightDto.
        :rtype: str
        """
        return self._tax_category_id

    @tax_category_id.setter
    def tax_category_id(self, tax_category_id):
        """Sets the tax_category_id of this SalesOrderFreightDto.

        The tax category that applies to the freight amount.  By default, it is the tax category associated with the ship via code selected for the order.

        :param tax_category_id: The tax_category_id of this SalesOrderFreightDto.
        :type tax_category_id: str
        """

        self._tax_category_id = tax_category_id

    @property
    def volume(self):
        """Gets the volume of this SalesOrderFreightDto.


        :return: The volume of this SalesOrderFreightDto.
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this SalesOrderFreightDto.


        :param volume: The volume of this SalesOrderFreightDto.
        :type volume: float
        """

        self._volume = volume

    @property
    def weight(self):
        """Gets the weight of this SalesOrderFreightDto.


        :return: The weight of this SalesOrderFreightDto.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this SalesOrderFreightDto.


        :param weight: The weight of this SalesOrderFreightDto.
        :type weight: float
        """

        self._weight = weight
