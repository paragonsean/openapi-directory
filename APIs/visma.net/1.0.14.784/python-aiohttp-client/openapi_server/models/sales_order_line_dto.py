# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment_dto import AttachmentDto
from openapi_server.models.cd_description_pair_dto import CdDescriptionPairDto
from openapi_server.models.location_dto import LocationDto
from openapi_server.models.sales_order_line_inventory_dto import SalesOrderLineInventoryDto
from openapi_server.models.sales_person_dto import SalesPersonDto
from openapi_server.models.supplier_dto import SupplierDto
from openapi_server import util


class SalesOrderLineDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[AttachmentDto]=None, base_order_quantity: float=None, billed_quantity: float=None, branch: CdDescriptionPairDto=None, commissionable: bool=None, completed: bool=None, description: str=None, discount_amount: float=None, discount_code: str=None, discount_percent: float=None, discount_sequence_id: str=None, extended_price: float=None, external_link: str=None, free_item: bool=None, has_manual_discount: bool=None, has_manual_price: bool=None, inventory: SalesOrderLineInventoryDto=None, inventory_alternate_id: str=None, line_id: int=None, line_total_before_discount: float=None, line_type: str=None, note: str=None, open_line: bool=None, open_quantity: float=None, operation: str=None, order_date: datetime=None, overship_threshold: float=None, project_task_id: str=None, purchase_order_source: str=None, quantity: float=None, quantity_on_shipments: float=None, reason_code: str=None, replacement_unit_cost: float=None, request_date: datetime=None, sales_account_id: str=None, sales_person: SalesPersonDto=None, ship_date: datetime=None, shipping_rule: str=None, sort_order: int=None, subaccount: Dict[str, str]=None, supplier: SupplierDto=None, supplier_price: float=None, tax_category_id: str=None, undership_threshold: float=None, unit_cost: float=None, unit_of_measure: str=None, unit_price: float=None, warehouse_id: str=None, warehouse_location: LocationDto=None):
        """SalesOrderLineDto - a model defined in OpenAPI

        :param attachments: The attachments of this SalesOrderLineDto.
        :param base_order_quantity: The base_order_quantity of this SalesOrderLineDto.
        :param billed_quantity: The billed_quantity of this SalesOrderLineDto.
        :param branch: The branch of this SalesOrderLineDto.
        :param commissionable: The commissionable of this SalesOrderLineDto.
        :param completed: The completed of this SalesOrderLineDto.
        :param description: The description of this SalesOrderLineDto.
        :param discount_amount: The discount_amount of this SalesOrderLineDto.
        :param discount_code: The discount_code of this SalesOrderLineDto.
        :param discount_percent: The discount_percent of this SalesOrderLineDto.
        :param discount_sequence_id: The discount_sequence_id of this SalesOrderLineDto.
        :param extended_price: The extended_price of this SalesOrderLineDto.
        :param external_link: The external_link of this SalesOrderLineDto.
        :param free_item: The free_item of this SalesOrderLineDto.
        :param has_manual_discount: The has_manual_discount of this SalesOrderLineDto.
        :param has_manual_price: The has_manual_price of this SalesOrderLineDto.
        :param inventory: The inventory of this SalesOrderLineDto.
        :param inventory_alternate_id: The inventory_alternate_id of this SalesOrderLineDto.
        :param line_id: The line_id of this SalesOrderLineDto.
        :param line_total_before_discount: The line_total_before_discount of this SalesOrderLineDto.
        :param line_type: The line_type of this SalesOrderLineDto.
        :param note: The note of this SalesOrderLineDto.
        :param open_line: The open_line of this SalesOrderLineDto.
        :param open_quantity: The open_quantity of this SalesOrderLineDto.
        :param operation: The operation of this SalesOrderLineDto.
        :param order_date: The order_date of this SalesOrderLineDto.
        :param overship_threshold: The overship_threshold of this SalesOrderLineDto.
        :param project_task_id: The project_task_id of this SalesOrderLineDto.
        :param purchase_order_source: The purchase_order_source of this SalesOrderLineDto.
        :param quantity: The quantity of this SalesOrderLineDto.
        :param quantity_on_shipments: The quantity_on_shipments of this SalesOrderLineDto.
        :param reason_code: The reason_code of this SalesOrderLineDto.
        :param replacement_unit_cost: The replacement_unit_cost of this SalesOrderLineDto.
        :param request_date: The request_date of this SalesOrderLineDto.
        :param sales_account_id: The sales_account_id of this SalesOrderLineDto.
        :param sales_person: The sales_person of this SalesOrderLineDto.
        :param ship_date: The ship_date of this SalesOrderLineDto.
        :param shipping_rule: The shipping_rule of this SalesOrderLineDto.
        :param sort_order: The sort_order of this SalesOrderLineDto.
        :param subaccount: The subaccount of this SalesOrderLineDto.
        :param supplier: The supplier of this SalesOrderLineDto.
        :param supplier_price: The supplier_price of this SalesOrderLineDto.
        :param tax_category_id: The tax_category_id of this SalesOrderLineDto.
        :param undership_threshold: The undership_threshold of this SalesOrderLineDto.
        :param unit_cost: The unit_cost of this SalesOrderLineDto.
        :param unit_of_measure: The unit_of_measure of this SalesOrderLineDto.
        :param unit_price: The unit_price of this SalesOrderLineDto.
        :param warehouse_id: The warehouse_id of this SalesOrderLineDto.
        :param warehouse_location: The warehouse_location of this SalesOrderLineDto.
        """
        self.openapi_types = {
            'attachments': List[AttachmentDto],
            'base_order_quantity': float,
            'billed_quantity': float,
            'branch': CdDescriptionPairDto,
            'commissionable': bool,
            'completed': bool,
            'description': str,
            'discount_amount': float,
            'discount_code': str,
            'discount_percent': float,
            'discount_sequence_id': str,
            'extended_price': float,
            'external_link': str,
            'free_item': bool,
            'has_manual_discount': bool,
            'has_manual_price': bool,
            'inventory': SalesOrderLineInventoryDto,
            'inventory_alternate_id': str,
            'line_id': int,
            'line_total_before_discount': float,
            'line_type': str,
            'note': str,
            'open_line': bool,
            'open_quantity': float,
            'operation': str,
            'order_date': datetime,
            'overship_threshold': float,
            'project_task_id': str,
            'purchase_order_source': str,
            'quantity': float,
            'quantity_on_shipments': float,
            'reason_code': str,
            'replacement_unit_cost': float,
            'request_date': datetime,
            'sales_account_id': str,
            'sales_person': SalesPersonDto,
            'ship_date': datetime,
            'shipping_rule': str,
            'sort_order': int,
            'subaccount': Dict[str, str],
            'supplier': SupplierDto,
            'supplier_price': float,
            'tax_category_id': str,
            'undership_threshold': float,
            'unit_cost': float,
            'unit_of_measure': str,
            'unit_price': float,
            'warehouse_id': str,
            'warehouse_location': LocationDto
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'base_order_quantity': 'baseOrderQuantity',
            'billed_quantity': 'billedQuantity',
            'branch': 'branch',
            'commissionable': 'commissionable',
            'completed': 'completed',
            'description': 'description',
            'discount_amount': 'discountAmount',
            'discount_code': 'discountCode',
            'discount_percent': 'discountPercent',
            'discount_sequence_id': 'discountSequenceId',
            'extended_price': 'extendedPrice',
            'external_link': 'externalLink',
            'free_item': 'freeItem',
            'has_manual_discount': 'hasManualDiscount',
            'has_manual_price': 'hasManualPrice',
            'inventory': 'inventory',
            'inventory_alternate_id': 'inventoryAlternateId',
            'line_id': 'lineId',
            'line_total_before_discount': 'lineTotalBeforeDiscount',
            'line_type': 'lineType',
            'note': 'note',
            'open_line': 'openLine',
            'open_quantity': 'openQuantity',
            'operation': 'operation',
            'order_date': 'orderDate',
            'overship_threshold': 'overshipThreshold',
            'project_task_id': 'projectTaskId',
            'purchase_order_source': 'purchaseOrderSource',
            'quantity': 'quantity',
            'quantity_on_shipments': 'quantityOnShipments',
            'reason_code': 'reasonCode',
            'replacement_unit_cost': 'replacementUnitCost',
            'request_date': 'requestDate',
            'sales_account_id': 'salesAccountId',
            'sales_person': 'salesPerson',
            'ship_date': 'shipDate',
            'shipping_rule': 'shippingRule',
            'sort_order': 'sortOrder',
            'subaccount': 'subaccount',
            'supplier': 'supplier',
            'supplier_price': 'supplierPrice',
            'tax_category_id': 'taxCategoryId',
            'undership_threshold': 'undershipThreshold',
            'unit_cost': 'unitCost',
            'unit_of_measure': 'unitOfMeasure',
            'unit_price': 'unitPrice',
            'warehouse_id': 'warehouseId',
            'warehouse_location': 'warehouseLocation'
        }

        self._attachments = attachments
        self._base_order_quantity = base_order_quantity
        self._billed_quantity = billed_quantity
        self._branch = branch
        self._commissionable = commissionable
        self._completed = completed
        self._description = description
        self._discount_amount = discount_amount
        self._discount_code = discount_code
        self._discount_percent = discount_percent
        self._discount_sequence_id = discount_sequence_id
        self._extended_price = extended_price
        self._external_link = external_link
        self._free_item = free_item
        self._has_manual_discount = has_manual_discount
        self._has_manual_price = has_manual_price
        self._inventory = inventory
        self._inventory_alternate_id = inventory_alternate_id
        self._line_id = line_id
        self._line_total_before_discount = line_total_before_discount
        self._line_type = line_type
        self._note = note
        self._open_line = open_line
        self._open_quantity = open_quantity
        self._operation = operation
        self._order_date = order_date
        self._overship_threshold = overship_threshold
        self._project_task_id = project_task_id
        self._purchase_order_source = purchase_order_source
        self._quantity = quantity
        self._quantity_on_shipments = quantity_on_shipments
        self._reason_code = reason_code
        self._replacement_unit_cost = replacement_unit_cost
        self._request_date = request_date
        self._sales_account_id = sales_account_id
        self._sales_person = sales_person
        self._ship_date = ship_date
        self._shipping_rule = shipping_rule
        self._sort_order = sort_order
        self._subaccount = subaccount
        self._supplier = supplier
        self._supplier_price = supplier_price
        self._tax_category_id = tax_category_id
        self._undership_threshold = undership_threshold
        self._unit_cost = unit_cost
        self._unit_of_measure = unit_of_measure
        self._unit_price = unit_price
        self._warehouse_id = warehouse_id
        self._warehouse_location = warehouse_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesOrderLineDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SalesOrderLineDto of this SalesOrderLineDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this SalesOrderLineDto.

        The attachments associated with this sales order line

        :return: The attachments of this SalesOrderLineDto.
        :rtype: List[AttachmentDto]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this SalesOrderLineDto.

        The attachments associated with this sales order line

        :param attachments: The attachments of this SalesOrderLineDto.
        :type attachments: List[AttachmentDto]
        """

        self._attachments = attachments

    @property
    def base_order_quantity(self):
        """Gets the base_order_quantity of this SalesOrderLineDto.

        The base order quantity for this line

        :return: The base_order_quantity of this SalesOrderLineDto.
        :rtype: float
        """
        return self._base_order_quantity

    @base_order_quantity.setter
    def base_order_quantity(self, base_order_quantity):
        """Sets the base_order_quantity of this SalesOrderLineDto.

        The base order quantity for this line

        :param base_order_quantity: The base_order_quantity of this SalesOrderLineDto.
        :type base_order_quantity: float
        """

        self._base_order_quantity = base_order_quantity

    @property
    def billed_quantity(self):
        """Gets the billed_quantity of this SalesOrderLineDto.

        The billed quantity for this line

        :return: The billed_quantity of this SalesOrderLineDto.
        :rtype: float
        """
        return self._billed_quantity

    @billed_quantity.setter
    def billed_quantity(self, billed_quantity):
        """Sets the billed_quantity of this SalesOrderLineDto.

        The billed quantity for this line

        :param billed_quantity: The billed_quantity of this SalesOrderLineDto.
        :type billed_quantity: float
        """

        self._billed_quantity = billed_quantity

    @property
    def branch(self):
        """Gets the branch of this SalesOrderLineDto.


        :return: The branch of this SalesOrderLineDto.
        :rtype: CdDescriptionPairDto
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this SalesOrderLineDto.


        :param branch: The branch of this SalesOrderLineDto.
        :type branch: CdDescriptionPairDto
        """

        self._branch = branch

    @property
    def commissionable(self):
        """Gets the commissionable of this SalesOrderLineDto.

        Indicates if line is comissionable

        :return: The commissionable of this SalesOrderLineDto.
        :rtype: bool
        """
        return self._commissionable

    @commissionable.setter
    def commissionable(self, commissionable):
        """Sets the commissionable of this SalesOrderLineDto.

        Indicates if line is comissionable

        :param commissionable: The commissionable of this SalesOrderLineDto.
        :type commissionable: bool
        """

        self._commissionable = commissionable

    @property
    def completed(self):
        """Gets the completed of this SalesOrderLineDto.

        Whether this order line is completed or not

        :return: The completed of this SalesOrderLineDto.
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this SalesOrderLineDto.

        Whether this order line is completed or not

        :param completed: The completed of this SalesOrderLineDto.
        :type completed: bool
        """

        self._completed = completed

    @property
    def description(self):
        """Gets the description of this SalesOrderLineDto.

        Any description for this order line

        :return: The description of this SalesOrderLineDto.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SalesOrderLineDto.

        Any description for this order line

        :param description: The description of this SalesOrderLineDto.
        :type description: str
        """

        self._description = description

    @property
    def discount_amount(self):
        """Gets the discount_amount of this SalesOrderLineDto.

        The discount amount for this line

        :return: The discount_amount of this SalesOrderLineDto.
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this SalesOrderLineDto.

        The discount amount for this line

        :param discount_amount: The discount_amount of this SalesOrderLineDto.
        :type discount_amount: float
        """

        self._discount_amount = discount_amount

    @property
    def discount_code(self):
        """Gets the discount_code of this SalesOrderLineDto.

        Code of discount applied to this line

        :return: The discount_code of this SalesOrderLineDto.
        :rtype: str
        """
        return self._discount_code

    @discount_code.setter
    def discount_code(self, discount_code):
        """Sets the discount_code of this SalesOrderLineDto.

        Code of discount applied to this line

        :param discount_code: The discount_code of this SalesOrderLineDto.
        :type discount_code: str
        """

        self._discount_code = discount_code

    @property
    def discount_percent(self):
        """Gets the discount_percent of this SalesOrderLineDto.

        Discount percentage applied to this line

        :return: The discount_percent of this SalesOrderLineDto.
        :rtype: float
        """
        return self._discount_percent

    @discount_percent.setter
    def discount_percent(self, discount_percent):
        """Sets the discount_percent of this SalesOrderLineDto.

        Discount percentage applied to this line

        :param discount_percent: The discount_percent of this SalesOrderLineDto.
        :type discount_percent: float
        """

        self._discount_percent = discount_percent

    @property
    def discount_sequence_id(self):
        """Gets the discount_sequence_id of this SalesOrderLineDto.

        Id of discount sequence applied to this line

        :return: The discount_sequence_id of this SalesOrderLineDto.
        :rtype: str
        """
        return self._discount_sequence_id

    @discount_sequence_id.setter
    def discount_sequence_id(self, discount_sequence_id):
        """Sets the discount_sequence_id of this SalesOrderLineDto.

        Id of discount sequence applied to this line

        :param discount_sequence_id: The discount_sequence_id of this SalesOrderLineDto.
        :type discount_sequence_id: str
        """

        self._discount_sequence_id = discount_sequence_id

    @property
    def extended_price(self):
        """Gets the extended_price of this SalesOrderLineDto.

        The extended price for this sales order line

        :return: The extended_price of this SalesOrderLineDto.
        :rtype: float
        """
        return self._extended_price

    @extended_price.setter
    def extended_price(self, extended_price):
        """Sets the extended_price of this SalesOrderLineDto.

        The extended price for this sales order line

        :param extended_price: The extended_price of this SalesOrderLineDto.
        :type extended_price: float
        """

        self._extended_price = extended_price

    @property
    def external_link(self):
        """Gets the external_link of this SalesOrderLineDto.

        Any external link for this sales order line

        :return: The external_link of this SalesOrderLineDto.
        :rtype: str
        """
        return self._external_link

    @external_link.setter
    def external_link(self, external_link):
        """Sets the external_link of this SalesOrderLineDto.

        Any external link for this sales order line

        :param external_link: The external_link of this SalesOrderLineDto.
        :type external_link: str
        """

        self._external_link = external_link

    @property
    def free_item(self):
        """Gets the free_item of this SalesOrderLineDto.

        Whether these item(s) are free or not

        :return: The free_item of this SalesOrderLineDto.
        :rtype: bool
        """
        return self._free_item

    @free_item.setter
    def free_item(self, free_item):
        """Sets the free_item of this SalesOrderLineDto.

        Whether these item(s) are free or not

        :param free_item: The free_item of this SalesOrderLineDto.
        :type free_item: bool
        """

        self._free_item = free_item

    @property
    def has_manual_discount(self):
        """Gets the has_manual_discount of this SalesOrderLineDto.

        Discount is applied manually

        :return: The has_manual_discount of this SalesOrderLineDto.
        :rtype: bool
        """
        return self._has_manual_discount

    @has_manual_discount.setter
    def has_manual_discount(self, has_manual_discount):
        """Sets the has_manual_discount of this SalesOrderLineDto.

        Discount is applied manually

        :param has_manual_discount: The has_manual_discount of this SalesOrderLineDto.
        :type has_manual_discount: bool
        """

        self._has_manual_discount = has_manual_discount

    @property
    def has_manual_price(self):
        """Gets the has_manual_price of this SalesOrderLineDto.

        Unit price is applied manually

        :return: The has_manual_price of this SalesOrderLineDto.
        :rtype: bool
        """
        return self._has_manual_price

    @has_manual_price.setter
    def has_manual_price(self, has_manual_price):
        """Sets the has_manual_price of this SalesOrderLineDto.

        Unit price is applied manually

        :param has_manual_price: The has_manual_price of this SalesOrderLineDto.
        :type has_manual_price: bool
        """

        self._has_manual_price = has_manual_price

    @property
    def inventory(self):
        """Gets the inventory of this SalesOrderLineDto.


        :return: The inventory of this SalesOrderLineDto.
        :rtype: SalesOrderLineInventoryDto
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this SalesOrderLineDto.


        :param inventory: The inventory of this SalesOrderLineDto.
        :type inventory: SalesOrderLineInventoryDto
        """

        self._inventory = inventory

    @property
    def inventory_alternate_id(self):
        """Gets the inventory_alternate_id of this SalesOrderLineDto.


        :return: The inventory_alternate_id of this SalesOrderLineDto.
        :rtype: str
        """
        return self._inventory_alternate_id

    @inventory_alternate_id.setter
    def inventory_alternate_id(self, inventory_alternate_id):
        """Sets the inventory_alternate_id of this SalesOrderLineDto.


        :param inventory_alternate_id: The inventory_alternate_id of this SalesOrderLineDto.
        :type inventory_alternate_id: str
        """

        self._inventory_alternate_id = inventory_alternate_id

    @property
    def line_id(self):
        """Gets the line_id of this SalesOrderLineDto.

        The line number of the sales order line

        :return: The line_id of this SalesOrderLineDto.
        :rtype: int
        """
        return self._line_id

    @line_id.setter
    def line_id(self, line_id):
        """Sets the line_id of this SalesOrderLineDto.

        The line number of the sales order line

        :param line_id: The line_id of this SalesOrderLineDto.
        :type line_id: int
        """

        self._line_id = line_id

    @property
    def line_total_before_discount(self):
        """Gets the line_total_before_discount of this SalesOrderLineDto.

        The line total before any discounts are applied

        :return: The line_total_before_discount of this SalesOrderLineDto.
        :rtype: float
        """
        return self._line_total_before_discount

    @line_total_before_discount.setter
    def line_total_before_discount(self, line_total_before_discount):
        """Sets the line_total_before_discount of this SalesOrderLineDto.

        The line total before any discounts are applied

        :param line_total_before_discount: The line_total_before_discount of this SalesOrderLineDto.
        :type line_total_before_discount: float
        """

        self._line_total_before_discount = line_total_before_discount

    @property
    def line_type(self):
        """Gets the line_type of this SalesOrderLineDto.

        The type of sales order line

        :return: The line_type of this SalesOrderLineDto.
        :rtype: str
        """
        return self._line_type

    @line_type.setter
    def line_type(self, line_type):
        """Sets the line_type of this SalesOrderLineDto.

        The type of sales order line

        :param line_type: The line_type of this SalesOrderLineDto.
        :type line_type: str
        """

        self._line_type = line_type

    @property
    def note(self):
        """Gets the note of this SalesOrderLineDto.

        Any note that has been applied to this order line

        :return: The note of this SalesOrderLineDto.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this SalesOrderLineDto.

        Any note that has been applied to this order line

        :param note: The note of this SalesOrderLineDto.
        :type note: str
        """

        self._note = note

    @property
    def open_line(self):
        """Gets the open_line of this SalesOrderLineDto.

        Indicates if line has quantity left to be shipped

        :return: The open_line of this SalesOrderLineDto.
        :rtype: bool
        """
        return self._open_line

    @open_line.setter
    def open_line(self, open_line):
        """Sets the open_line of this SalesOrderLineDto.

        Indicates if line has quantity left to be shipped

        :param open_line: The open_line of this SalesOrderLineDto.
        :type open_line: bool
        """

        self._open_line = open_line

    @property
    def open_quantity(self):
        """Gets the open_quantity of this SalesOrderLineDto.

        The open quantity for this line

        :return: The open_quantity of this SalesOrderLineDto.
        :rtype: float
        """
        return self._open_quantity

    @open_quantity.setter
    def open_quantity(self, open_quantity):
        """Sets the open_quantity of this SalesOrderLineDto.

        The open quantity for this line

        :param open_quantity: The open_quantity of this SalesOrderLineDto.
        :type open_quantity: float
        """

        self._open_quantity = open_quantity

    @property
    def operation(self):
        """Gets the operation of this SalesOrderLineDto.

        The type of operation the line represents to the order

        :return: The operation of this SalesOrderLineDto.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this SalesOrderLineDto.

        The type of operation the line represents to the order

        :param operation: The operation of this SalesOrderLineDto.
        :type operation: str
        """

        self._operation = operation

    @property
    def order_date(self):
        """Gets the order_date of this SalesOrderLineDto.

        The date the order line was added  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The order_date of this SalesOrderLineDto.
        :rtype: datetime
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date):
        """Sets the order_date of this SalesOrderLineDto.

        The date the order line was added  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :param order_date: The order_date of this SalesOrderLineDto.
        :type order_date: datetime
        """

        self._order_date = order_date

    @property
    def overship_threshold(self):
        """Gets the overship_threshold of this SalesOrderLineDto.

        The overship threshold value (%)

        :return: The overship_threshold of this SalesOrderLineDto.
        :rtype: float
        """
        return self._overship_threshold

    @overship_threshold.setter
    def overship_threshold(self, overship_threshold):
        """Sets the overship_threshold of this SalesOrderLineDto.

        The overship threshold value (%)

        :param overship_threshold: The overship_threshold of this SalesOrderLineDto.
        :type overship_threshold: float
        """

        self._overship_threshold = overship_threshold

    @property
    def project_task_id(self):
        """Gets the project_task_id of this SalesOrderLineDto.

        The project task with which this sales order line is associated

        :return: The project_task_id of this SalesOrderLineDto.
        :rtype: str
        """
        return self._project_task_id

    @project_task_id.setter
    def project_task_id(self, project_task_id):
        """Sets the project_task_id of this SalesOrderLineDto.

        The project task with which this sales order line is associated

        :param project_task_id: The project_task_id of this SalesOrderLineDto.
        :type project_task_id: str
        """

        self._project_task_id = project_task_id

    @property
    def purchase_order_source(self):
        """Gets the purchase_order_source of this SalesOrderLineDto.

        Information about line purchase order source

        :return: The purchase_order_source of this SalesOrderLineDto.
        :rtype: str
        """
        return self._purchase_order_source

    @purchase_order_source.setter
    def purchase_order_source(self, purchase_order_source):
        """Sets the purchase_order_source of this SalesOrderLineDto.

        Information about line purchase order source

        :param purchase_order_source: The purchase_order_source of this SalesOrderLineDto.
        :type purchase_order_source: str
        """

        self._purchase_order_source = purchase_order_source

    @property
    def quantity(self):
        """Gets the quantity of this SalesOrderLineDto.

        The quantity of unit of measure this line represents

        :return: The quantity of this SalesOrderLineDto.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this SalesOrderLineDto.

        The quantity of unit of measure this line represents

        :param quantity: The quantity of this SalesOrderLineDto.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def quantity_on_shipments(self):
        """Gets the quantity_on_shipments of this SalesOrderLineDto.

        The quantity on shipments for this line

        :return: The quantity_on_shipments of this SalesOrderLineDto.
        :rtype: float
        """
        return self._quantity_on_shipments

    @quantity_on_shipments.setter
    def quantity_on_shipments(self, quantity_on_shipments):
        """Sets the quantity_on_shipments of this SalesOrderLineDto.

        The quantity on shipments for this line

        :param quantity_on_shipments: The quantity_on_shipments of this SalesOrderLineDto.
        :type quantity_on_shipments: float
        """

        self._quantity_on_shipments = quantity_on_shipments

    @property
    def reason_code(self):
        """Gets the reason_code of this SalesOrderLineDto.

        The reason code

        :return: The reason_code of this SalesOrderLineDto.
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this SalesOrderLineDto.

        The reason code

        :param reason_code: The reason_code of this SalesOrderLineDto.
        :type reason_code: str
        """

        self._reason_code = reason_code

    @property
    def replacement_unit_cost(self):
        """Gets the replacement_unit_cost of this SalesOrderLineDto.

        The replacement unit cost of an item. This is set based on the supplier price.  If no supplier price found, the last price of the item's default supplier will be used.  If no default supplier is set, the last cost of the item will be used.

        :return: The replacement_unit_cost of this SalesOrderLineDto.
        :rtype: float
        """
        return self._replacement_unit_cost

    @replacement_unit_cost.setter
    def replacement_unit_cost(self, replacement_unit_cost):
        """Sets the replacement_unit_cost of this SalesOrderLineDto.

        The replacement unit cost of an item. This is set based on the supplier price.  If no supplier price found, the last price of the item's default supplier will be used.  If no default supplier is set, the last cost of the item will be used.

        :param replacement_unit_cost: The replacement_unit_cost of this SalesOrderLineDto.
        :type replacement_unit_cost: float
        """

        self._replacement_unit_cost = replacement_unit_cost

    @property
    def request_date(self):
        """Gets the request_date of this SalesOrderLineDto.

        The request date for this order line  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The request_date of this SalesOrderLineDto.
        :rtype: datetime
        """
        return self._request_date

    @request_date.setter
    def request_date(self, request_date):
        """Sets the request_date of this SalesOrderLineDto.

        The request date for this order line  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :param request_date: The request_date of this SalesOrderLineDto.
        :type request_date: datetime
        """

        self._request_date = request_date

    @property
    def sales_account_id(self):
        """Gets the sales_account_id of this SalesOrderLineDto.

        The general ledger account this line applies to

        :return: The sales_account_id of this SalesOrderLineDto.
        :rtype: str
        """
        return self._sales_account_id

    @sales_account_id.setter
    def sales_account_id(self, sales_account_id):
        """Sets the sales_account_id of this SalesOrderLineDto.

        The general ledger account this line applies to

        :param sales_account_id: The sales_account_id of this SalesOrderLineDto.
        :type sales_account_id: str
        """

        self._sales_account_id = sales_account_id

    @property
    def sales_person(self):
        """Gets the sales_person of this SalesOrderLineDto.


        :return: The sales_person of this SalesOrderLineDto.
        :rtype: SalesPersonDto
        """
        return self._sales_person

    @sales_person.setter
    def sales_person(self, sales_person):
        """Sets the sales_person of this SalesOrderLineDto.


        :param sales_person: The sales_person of this SalesOrderLineDto.
        :type sales_person: SalesPersonDto
        """

        self._sales_person = sales_person

    @property
    def ship_date(self):
        """Gets the ship_date of this SalesOrderLineDto.

        The expected shipping date for this order line  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The ship_date of this SalesOrderLineDto.
        :rtype: datetime
        """
        return self._ship_date

    @ship_date.setter
    def ship_date(self, ship_date):
        """Sets the ship_date of this SalesOrderLineDto.

        The expected shipping date for this order line  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :param ship_date: The ship_date of this SalesOrderLineDto.
        :type ship_date: datetime
        """

        self._ship_date = ship_date

    @property
    def shipping_rule(self):
        """Gets the shipping_rule of this SalesOrderLineDto.

        The shipping rule code for this order line

        :return: The shipping_rule of this SalesOrderLineDto.
        :rtype: str
        """
        return self._shipping_rule

    @shipping_rule.setter
    def shipping_rule(self, shipping_rule):
        """Sets the shipping_rule of this SalesOrderLineDto.

        The shipping rule code for this order line

        :param shipping_rule: The shipping_rule of this SalesOrderLineDto.
        :type shipping_rule: str
        """

        self._shipping_rule = shipping_rule

    @property
    def sort_order(self):
        """Gets the sort_order of this SalesOrderLineDto.

        Used to apply sort order to a set of lines

        :return: The sort_order of this SalesOrderLineDto.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this SalesOrderLineDto.

        Used to apply sort order to a set of lines

        :param sort_order: The sort_order of this SalesOrderLineDto.
        :type sort_order: int
        """

        self._sort_order = sort_order

    @property
    def subaccount(self):
        """Gets the subaccount of this SalesOrderLineDto.

        The general ledger subaccount this line applies to

        :return: The subaccount of this SalesOrderLineDto.
        :rtype: Dict[str, str]
        """
        return self._subaccount

    @subaccount.setter
    def subaccount(self, subaccount):
        """Sets the subaccount of this SalesOrderLineDto.

        The general ledger subaccount this line applies to

        :param subaccount: The subaccount of this SalesOrderLineDto.
        :type subaccount: Dict[str, str]
        """

        self._subaccount = subaccount

    @property
    def supplier(self):
        """Gets the supplier of this SalesOrderLineDto.


        :return: The supplier of this SalesOrderLineDto.
        :rtype: SupplierDto
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this SalesOrderLineDto.


        :param supplier: The supplier of this SalesOrderLineDto.
        :type supplier: SupplierDto
        """

        self._supplier = supplier

    @property
    def supplier_price(self):
        """Gets the supplier_price of this SalesOrderLineDto.


        :return: The supplier_price of this SalesOrderLineDto.
        :rtype: float
        """
        return self._supplier_price

    @supplier_price.setter
    def supplier_price(self, supplier_price):
        """Sets the supplier_price of this SalesOrderLineDto.


        :param supplier_price: The supplier_price of this SalesOrderLineDto.
        :type supplier_price: float
        """

        self._supplier_price = supplier_price

    @property
    def tax_category_id(self):
        """Gets the tax_category_id of this SalesOrderLineDto.

        The Tax Category Id applying to this order line

        :return: The tax_category_id of this SalesOrderLineDto.
        :rtype: str
        """
        return self._tax_category_id

    @tax_category_id.setter
    def tax_category_id(self, tax_category_id):
        """Sets the tax_category_id of this SalesOrderLineDto.

        The Tax Category Id applying to this order line

        :param tax_category_id: The tax_category_id of this SalesOrderLineDto.
        :type tax_category_id: str
        """

        self._tax_category_id = tax_category_id

    @property
    def undership_threshold(self):
        """Gets the undership_threshold of this SalesOrderLineDto.

        The undership threshold value (%)

        :return: The undership_threshold of this SalesOrderLineDto.
        :rtype: float
        """
        return self._undership_threshold

    @undership_threshold.setter
    def undership_threshold(self, undership_threshold):
        """Sets the undership_threshold of this SalesOrderLineDto.

        The undership threshold value (%)

        :param undership_threshold: The undership_threshold of this SalesOrderLineDto.
        :type undership_threshold: float
        """

        self._undership_threshold = undership_threshold

    @property
    def unit_cost(self):
        """Gets the unit_cost of this SalesOrderLineDto.

        The unit cost of items on this order line

        :return: The unit_cost of this SalesOrderLineDto.
        :rtype: float
        """
        return self._unit_cost

    @unit_cost.setter
    def unit_cost(self, unit_cost):
        """Sets the unit_cost of this SalesOrderLineDto.

        The unit cost of items on this order line

        :param unit_cost: The unit_cost of this SalesOrderLineDto.
        :type unit_cost: float
        """

        self._unit_cost = unit_cost

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this SalesOrderLineDto.

        The unit of measure (UOM) for the sales order line

        :return: The unit_of_measure of this SalesOrderLineDto.
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this SalesOrderLineDto.

        The unit of measure (UOM) for the sales order line

        :param unit_of_measure: The unit_of_measure of this SalesOrderLineDto.
        :type unit_of_measure: str
        """

        self._unit_of_measure = unit_of_measure

    @property
    def unit_price(self):
        """Gets the unit_price of this SalesOrderLineDto.

        The unit price for items on this order line

        :return: The unit_price of this SalesOrderLineDto.
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this SalesOrderLineDto.

        The unit price for items on this order line

        :param unit_price: The unit_price of this SalesOrderLineDto.
        :type unit_price: float
        """

        self._unit_price = unit_price

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this SalesOrderLineDto.

        The Site Id for items on this line

        :return: The warehouse_id of this SalesOrderLineDto.
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this SalesOrderLineDto.

        The Site Id for items on this line

        :param warehouse_id: The warehouse_id of this SalesOrderLineDto.
        :type warehouse_id: str
        """

        self._warehouse_id = warehouse_id

    @property
    def warehouse_location(self):
        """Gets the warehouse_location of this SalesOrderLineDto.


        :return: The warehouse_location of this SalesOrderLineDto.
        :rtype: LocationDto
        """
        return self._warehouse_location

    @warehouse_location.setter
    def warehouse_location(self, warehouse_location):
        """Sets the warehouse_location of this SalesOrderLineDto.


        :param warehouse_location: The warehouse_location of this SalesOrderLineDto.
        :type warehouse_location: LocationDto
        """

        self._warehouse_location = warehouse_location
