# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewSalesOrderAddressDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country_id: str=None, line1: str=None, line2: str=None, line3: str=None, postal_code: str=None, state_id: str=None):
        """NewSalesOrderAddressDto - a model defined in OpenAPI

        :param city: The city of this NewSalesOrderAddressDto.
        :param country_id: The country_id of this NewSalesOrderAddressDto.
        :param line1: The line1 of this NewSalesOrderAddressDto.
        :param line2: The line2 of this NewSalesOrderAddressDto.
        :param line3: The line3 of this NewSalesOrderAddressDto.
        :param postal_code: The postal_code of this NewSalesOrderAddressDto.
        :param state_id: The state_id of this NewSalesOrderAddressDto.
        """
        self.openapi_types = {
            'city': str,
            'country_id': str,
            'line1': str,
            'line2': str,
            'line3': str,
            'postal_code': str,
            'state_id': str
        }

        self.attribute_map = {
            'city': 'city',
            'country_id': 'countryId',
            'line1': 'line1',
            'line2': 'line2',
            'line3': 'line3',
            'postal_code': 'postalCode',
            'state_id': 'stateId'
        }

        self._city = city
        self._country_id = country_id
        self._line1 = line1
        self._line2 = line2
        self._line3 = line3
        self._postal_code = postal_code
        self._state_id = state_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewSalesOrderAddressDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewSalesOrderAddressDto of this NewSalesOrderAddressDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this NewSalesOrderAddressDto.

        The city

        :return: The city of this NewSalesOrderAddressDto.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this NewSalesOrderAddressDto.

        The city

        :param city: The city of this NewSalesOrderAddressDto.
        :type city: str
        """
        if city is not None and len(city) > 50:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `50`")

        self._city = city

    @property
    def country_id(self):
        """Gets the country_id of this NewSalesOrderAddressDto.

        The country. Required when setting the address.

        :return: The country_id of this NewSalesOrderAddressDto.
        :rtype: str
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this NewSalesOrderAddressDto.

        The country. Required when setting the address.

        :param country_id: The country_id of this NewSalesOrderAddressDto.
        :type country_id: str
        """
        if country_id is not None and len(country_id) > 2:
            raise ValueError("Invalid value for `country_id`, length must be less than or equal to `2`")

        self._country_id = country_id

    @property
    def line1(self):
        """Gets the line1 of this NewSalesOrderAddressDto.

        Address line 1

        :return: The line1 of this NewSalesOrderAddressDto.
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """Sets the line1 of this NewSalesOrderAddressDto.

        Address line 1

        :param line1: The line1 of this NewSalesOrderAddressDto.
        :type line1: str
        """
        if line1 is not None and len(line1) > 50:
            raise ValueError("Invalid value for `line1`, length must be less than or equal to `50`")

        self._line1 = line1

    @property
    def line2(self):
        """Gets the line2 of this NewSalesOrderAddressDto.

        Address line 2

        :return: The line2 of this NewSalesOrderAddressDto.
        :rtype: str
        """
        return self._line2

    @line2.setter
    def line2(self, line2):
        """Sets the line2 of this NewSalesOrderAddressDto.

        Address line 2

        :param line2: The line2 of this NewSalesOrderAddressDto.
        :type line2: str
        """
        if line2 is not None and len(line2) > 50:
            raise ValueError("Invalid value for `line2`, length must be less than or equal to `50`")

        self._line2 = line2

    @property
    def line3(self):
        """Gets the line3 of this NewSalesOrderAddressDto.

        Address line 3

        :return: The line3 of this NewSalesOrderAddressDto.
        :rtype: str
        """
        return self._line3

    @line3.setter
    def line3(self, line3):
        """Sets the line3 of this NewSalesOrderAddressDto.

        Address line 3

        :param line3: The line3 of this NewSalesOrderAddressDto.
        :type line3: str
        """
        if line3 is not None and len(line3) > 50:
            raise ValueError("Invalid value for `line3`, length must be less than or equal to `50`")

        self._line3 = line3

    @property
    def postal_code(self):
        """Gets the postal_code of this NewSalesOrderAddressDto.

        The postal code

        :return: The postal_code of this NewSalesOrderAddressDto.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this NewSalesOrderAddressDto.

        The postal code

        :param postal_code: The postal_code of this NewSalesOrderAddressDto.
        :type postal_code: str
        """
        if postal_code is not None and len(postal_code) > 20:
            raise ValueError("Invalid value for `postal_code`, length must be less than or equal to `20`")

        self._postal_code = postal_code

    @property
    def state_id(self):
        """Gets the state_id of this NewSalesOrderAddressDto.

        The state

        :return: The state_id of this NewSalesOrderAddressDto.
        :rtype: str
        """
        return self._state_id

    @state_id.setter
    def state_id(self, state_id):
        """Sets the state_id of this NewSalesOrderAddressDto.

        The state

        :param state_id: The state_id of this NewSalesOrderAddressDto.
        :type state_id: str
        """
        if state_id is not None and len(state_id) > 50:
            raise ValueError("Invalid value for `state_id`, length must be less than or equal to `50`")

        self._state_id = state_id
