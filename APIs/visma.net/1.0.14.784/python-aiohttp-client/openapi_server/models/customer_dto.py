# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer_location_dto import CustomerLocationDto
from openapi_server import util


class CustomerDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_line1: str=None, address_line2: str=None, country: str=None, currency_id: str=None, customer_class_id: str=None, default_location: CustomerLocationDto=None, id: str=None, internal_id: int=None, name: str=None, postal_code: str=None, salutation: str=None, status: str=None):
        """CustomerDto - a model defined in OpenAPI

        :param address_line1: The address_line1 of this CustomerDto.
        :param address_line2: The address_line2 of this CustomerDto.
        :param country: The country of this CustomerDto.
        :param currency_id: The currency_id of this CustomerDto.
        :param customer_class_id: The customer_class_id of this CustomerDto.
        :param default_location: The default_location of this CustomerDto.
        :param id: The id of this CustomerDto.
        :param internal_id: The internal_id of this CustomerDto.
        :param name: The name of this CustomerDto.
        :param postal_code: The postal_code of this CustomerDto.
        :param salutation: The salutation of this CustomerDto.
        :param status: The status of this CustomerDto.
        """
        self.openapi_types = {
            'address_line1': str,
            'address_line2': str,
            'country': str,
            'currency_id': str,
            'customer_class_id': str,
            'default_location': CustomerLocationDto,
            'id': str,
            'internal_id': int,
            'name': str,
            'postal_code': str,
            'salutation': str,
            'status': str
        }

        self.attribute_map = {
            'address_line1': 'addressLine1',
            'address_line2': 'addressLine2',
            'country': 'country',
            'currency_id': 'currencyId',
            'customer_class_id': 'customerClassId',
            'default_location': 'defaultLocation',
            'id': 'id',
            'internal_id': 'internalId',
            'name': 'name',
            'postal_code': 'postalCode',
            'salutation': 'salutation',
            'status': 'status'
        }

        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._country = country
        self._currency_id = currency_id
        self._customer_class_id = customer_class_id
        self._default_location = default_location
        self._id = id
        self._internal_id = internal_id
        self._name = name
        self._postal_code = postal_code
        self._salutation = salutation
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerDto of this CustomerDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_line1(self):
        """Gets the address_line1 of this CustomerDto.

        The customer's first address line

        :return: The address_line1 of this CustomerDto.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this CustomerDto.

        The customer's first address line

        :param address_line1: The address_line1 of this CustomerDto.
        :type address_line1: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this CustomerDto.

        The customer's second address line

        :return: The address_line2 of this CustomerDto.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this CustomerDto.

        The customer's second address line

        :param address_line2: The address_line2 of this CustomerDto.
        :type address_line2: str
        """

        self._address_line2 = address_line2

    @property
    def country(self):
        """Gets the country of this CustomerDto.

        The customer's country code

        :return: The country of this CustomerDto.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CustomerDto.

        The customer's country code

        :param country: The country of this CustomerDto.
        :type country: str
        """

        self._country = country

    @property
    def currency_id(self):
        """Gets the currency_id of this CustomerDto.

        The currency Id used by the customer

        :return: The currency_id of this CustomerDto.
        :rtype: str
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this CustomerDto.

        The currency Id used by the customer

        :param currency_id: The currency_id of this CustomerDto.
        :type currency_id: str
        """

        self._currency_id = currency_id

    @property
    def customer_class_id(self):
        """Gets the customer_class_id of this CustomerDto.

        The class of the customer

        :return: The customer_class_id of this CustomerDto.
        :rtype: str
        """
        return self._customer_class_id

    @customer_class_id.setter
    def customer_class_id(self, customer_class_id):
        """Sets the customer_class_id of this CustomerDto.

        The class of the customer

        :param customer_class_id: The customer_class_id of this CustomerDto.
        :type customer_class_id: str
        """

        self._customer_class_id = customer_class_id

    @property
    def default_location(self):
        """Gets the default_location of this CustomerDto.


        :return: The default_location of this CustomerDto.
        :rtype: CustomerLocationDto
        """
        return self._default_location

    @default_location.setter
    def default_location(self, default_location):
        """Sets the default_location of this CustomerDto.


        :param default_location: The default_location of this CustomerDto.
        :type default_location: CustomerLocationDto
        """

        self._default_location = default_location

    @property
    def id(self):
        """Gets the id of this CustomerDto.

        Unique id for the customer

        :return: The id of this CustomerDto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomerDto.

        Unique id for the customer

        :param id: The id of this CustomerDto.
        :type id: str
        """

        self._id = id

    @property
    def internal_id(self):
        """Gets the internal_id of this CustomerDto.

        An internal unique id

        :return: The internal_id of this CustomerDto.
        :rtype: int
        """
        return self._internal_id

    @internal_id.setter
    def internal_id(self, internal_id):
        """Sets the internal_id of this CustomerDto.

        An internal unique id

        :param internal_id: The internal_id of this CustomerDto.
        :type internal_id: int
        """

        self._internal_id = internal_id

    @property
    def name(self):
        """Gets the name of this CustomerDto.

        The name of the customer

        :return: The name of this CustomerDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomerDto.

        The name of the customer

        :param name: The name of this CustomerDto.
        :type name: str
        """

        self._name = name

    @property
    def postal_code(self):
        """Gets the postal_code of this CustomerDto.

        The customer's postal code

        :return: The postal_code of this CustomerDto.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this CustomerDto.

        The customer's postal code

        :param postal_code: The postal_code of this CustomerDto.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def salutation(self):
        """Gets the salutation of this CustomerDto.

        The customer's salutation

        :return: The salutation of this CustomerDto.
        :rtype: str
        """
        return self._salutation

    @salutation.setter
    def salutation(self, salutation):
        """Sets the salutation of this CustomerDto.

        The customer's salutation

        :param salutation: The salutation of this CustomerDto.
        :type salutation: str
        """

        self._salutation = salutation

    @property
    def status(self):
        """Gets the status of this CustomerDto.

        The customer's status code

        :return: The status of this CustomerDto.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CustomerDto.

        The customer's status code

        :param status: The status of this CustomerDto.
        :type status: str
        """

        self._status = status
