# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.location_availability_dto import LocationAvailabilityDto
from openapi_server import util


class WarehouseAvailabilityDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, estimated_total_cost: float=None, estimated_unit_cost: float=None, internal_warehouse_id: int=None, last_modified: datetime=None, locations: List[LocationAvailabilityDto]=None, quantity_available: float=None, quantity_available_for_shipment: float=None, quantity_not_available: float=None, quantity_on_hand: float=None, quantity_purchase_orders: float=None, warehouse_id: str=None):
        """WarehouseAvailabilityDto - a model defined in OpenAPI

        :param description: The description of this WarehouseAvailabilityDto.
        :param estimated_total_cost: The estimated_total_cost of this WarehouseAvailabilityDto.
        :param estimated_unit_cost: The estimated_unit_cost of this WarehouseAvailabilityDto.
        :param internal_warehouse_id: The internal_warehouse_id of this WarehouseAvailabilityDto.
        :param last_modified: The last_modified of this WarehouseAvailabilityDto.
        :param locations: The locations of this WarehouseAvailabilityDto.
        :param quantity_available: The quantity_available of this WarehouseAvailabilityDto.
        :param quantity_available_for_shipment: The quantity_available_for_shipment of this WarehouseAvailabilityDto.
        :param quantity_not_available: The quantity_not_available of this WarehouseAvailabilityDto.
        :param quantity_on_hand: The quantity_on_hand of this WarehouseAvailabilityDto.
        :param quantity_purchase_orders: The quantity_purchase_orders of this WarehouseAvailabilityDto.
        :param warehouse_id: The warehouse_id of this WarehouseAvailabilityDto.
        """
        self.openapi_types = {
            'description': str,
            'estimated_total_cost': float,
            'estimated_unit_cost': float,
            'internal_warehouse_id': int,
            'last_modified': datetime,
            'locations': List[LocationAvailabilityDto],
            'quantity_available': float,
            'quantity_available_for_shipment': float,
            'quantity_not_available': float,
            'quantity_on_hand': float,
            'quantity_purchase_orders': float,
            'warehouse_id': str
        }

        self.attribute_map = {
            'description': 'description',
            'estimated_total_cost': 'estimatedTotalCost',
            'estimated_unit_cost': 'estimatedUnitCost',
            'internal_warehouse_id': 'internalWarehouseId',
            'last_modified': 'lastModified',
            'locations': 'locations',
            'quantity_available': 'quantityAvailable',
            'quantity_available_for_shipment': 'quantityAvailableForShipment',
            'quantity_not_available': 'quantityNotAvailable',
            'quantity_on_hand': 'quantityOnHand',
            'quantity_purchase_orders': 'quantityPurchaseOrders',
            'warehouse_id': 'warehouseId'
        }

        self._description = description
        self._estimated_total_cost = estimated_total_cost
        self._estimated_unit_cost = estimated_unit_cost
        self._internal_warehouse_id = internal_warehouse_id
        self._last_modified = last_modified
        self._locations = locations
        self._quantity_available = quantity_available
        self._quantity_available_for_shipment = quantity_available_for_shipment
        self._quantity_not_available = quantity_not_available
        self._quantity_on_hand = quantity_on_hand
        self._quantity_purchase_orders = quantity_purchase_orders
        self._warehouse_id = warehouse_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WarehouseAvailabilityDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WarehouseAvailabilityDto of this WarehouseAvailabilityDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this WarehouseAvailabilityDto.

        The description of the warehouse

        :return: The description of this WarehouseAvailabilityDto.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WarehouseAvailabilityDto.

        The description of the warehouse

        :param description: The description of this WarehouseAvailabilityDto.
        :type description: str
        """

        self._description = description

    @property
    def estimated_total_cost(self):
        """Gets the estimated_total_cost of this WarehouseAvailabilityDto.

        The total cost for the QuantityOnHand

        :return: The estimated_total_cost of this WarehouseAvailabilityDto.
        :rtype: float
        """
        return self._estimated_total_cost

    @estimated_total_cost.setter
    def estimated_total_cost(self, estimated_total_cost):
        """Sets the estimated_total_cost of this WarehouseAvailabilityDto.

        The total cost for the QuantityOnHand

        :param estimated_total_cost: The estimated_total_cost of this WarehouseAvailabilityDto.
        :type estimated_total_cost: float
        """

        self._estimated_total_cost = estimated_total_cost

    @property
    def estimated_unit_cost(self):
        """Gets the estimated_unit_cost of this WarehouseAvailabilityDto.

        The estimated cost per unit, calculated as EstimatedTotalCost/QuantityOnHand

        :return: The estimated_unit_cost of this WarehouseAvailabilityDto.
        :rtype: float
        """
        return self._estimated_unit_cost

    @estimated_unit_cost.setter
    def estimated_unit_cost(self, estimated_unit_cost):
        """Sets the estimated_unit_cost of this WarehouseAvailabilityDto.

        The estimated cost per unit, calculated as EstimatedTotalCost/QuantityOnHand

        :param estimated_unit_cost: The estimated_unit_cost of this WarehouseAvailabilityDto.
        :type estimated_unit_cost: float
        """

        self._estimated_unit_cost = estimated_unit_cost

    @property
    def internal_warehouse_id(self):
        """Gets the internal_warehouse_id of this WarehouseAvailabilityDto.

        The internal id used by the system for the warehouse

        :return: The internal_warehouse_id of this WarehouseAvailabilityDto.
        :rtype: int
        """
        return self._internal_warehouse_id

    @internal_warehouse_id.setter
    def internal_warehouse_id(self, internal_warehouse_id):
        """Sets the internal_warehouse_id of this WarehouseAvailabilityDto.

        The internal id used by the system for the warehouse

        :param internal_warehouse_id: The internal_warehouse_id of this WarehouseAvailabilityDto.
        :type internal_warehouse_id: int
        """

        self._internal_warehouse_id = internal_warehouse_id

    @property
    def last_modified(self):
        """Gets the last_modified of this WarehouseAvailabilityDto.

        The date and time the entry for this warehouse was modified  Unless a specific time zone offset is included (e.g. '2012-12-24T12:15:14+02:00'), the date is considered to be in the UTC time zone.

        :return: The last_modified of this WarehouseAvailabilityDto.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this WarehouseAvailabilityDto.

        The date and time the entry for this warehouse was modified  Unless a specific time zone offset is included (e.g. '2012-12-24T12:15:14+02:00'), the date is considered to be in the UTC time zone.

        :param last_modified: The last_modified of this WarehouseAvailabilityDto.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def locations(self):
        """Gets the locations of this WarehouseAvailabilityDto.

        List of locations in the warehouse for the specific inventory item.  Note that this is not returned as part of the response unless expand=Location is specified with the request.

        :return: The locations of this WarehouseAvailabilityDto.
        :rtype: List[LocationAvailabilityDto]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this WarehouseAvailabilityDto.

        List of locations in the warehouse for the specific inventory item.  Note that this is not returned as part of the response unless expand=Location is specified with the request.

        :param locations: The locations of this WarehouseAvailabilityDto.
        :type locations: List[LocationAvailabilityDto]
        """

        self._locations = locations

    @property
    def quantity_available(self):
        """Gets the quantity_available of this WarehouseAvailabilityDto.

        You can configure the way this estimated quantity is calculated by using availability  calculation rules. The available quantity may include anticipated transactions and therefore  may be less than or greater than the QuantityOnHand. Anticipated transactions correspond  to the documents and transactions that have been entered in the system but not yet  processed to the end.  In the availability calculation settings of an item class, you specify which anticipated  transactions affect the available quantity. Thus, the available quantity may include  goods on purchase orders and exclude the goods allocated for sales orders. You can use  the available quantity as an indicator of demand

        :return: The quantity_available of this WarehouseAvailabilityDto.
        :rtype: float
        """
        return self._quantity_available

    @quantity_available.setter
    def quantity_available(self, quantity_available):
        """Sets the quantity_available of this WarehouseAvailabilityDto.

        You can configure the way this estimated quantity is calculated by using availability  calculation rules. The available quantity may include anticipated transactions and therefore  may be less than or greater than the QuantityOnHand. Anticipated transactions correspond  to the documents and transactions that have been entered in the system but not yet  processed to the end.  In the availability calculation settings of an item class, you specify which anticipated  transactions affect the available quantity. Thus, the available quantity may include  goods on purchase orders and exclude the goods allocated for sales orders. You can use  the available quantity as an indicator of demand

        :param quantity_available: The quantity_available of this WarehouseAvailabilityDto.
        :type quantity_available: float
        """

        self._quantity_available = quantity_available

    @property
    def quantity_available_for_shipment(self):
        """Gets the quantity_available_for_shipment of this WarehouseAvailabilityDto.

        Estimated quantity calculated by using the following formula: the QuantityOnHand minus the quantity on unreleased inventory  issues, minus the quantity allocated for shipping. Thus, the QuantityAvailableForShipment can be less than the QuantityOnHand

        :return: The quantity_available_for_shipment of this WarehouseAvailabilityDto.
        :rtype: float
        """
        return self._quantity_available_for_shipment

    @quantity_available_for_shipment.setter
    def quantity_available_for_shipment(self, quantity_available_for_shipment):
        """Sets the quantity_available_for_shipment of this WarehouseAvailabilityDto.

        Estimated quantity calculated by using the following formula: the QuantityOnHand minus the quantity on unreleased inventory  issues, minus the quantity allocated for shipping. Thus, the QuantityAvailableForShipment can be less than the QuantityOnHand

        :param quantity_available_for_shipment: The quantity_available_for_shipment of this WarehouseAvailabilityDto.
        :type quantity_available_for_shipment: float
        """

        self._quantity_available_for_shipment = quantity_available_for_shipment

    @property
    def quantity_not_available(self):
        """Gets the quantity_not_available of this WarehouseAvailabilityDto.

        The quantity stored at locations not included in the availability calculation.  For each warehouse location, the 'Include in Qty. Available' check box on the  Warehouses(IN204000) screen defines whether the quantity of items stored at this  location is included in the quantity of available items.

        :return: The quantity_not_available of this WarehouseAvailabilityDto.
        :rtype: float
        """
        return self._quantity_not_available

    @quantity_not_available.setter
    def quantity_not_available(self, quantity_not_available):
        """Sets the quantity_not_available of this WarehouseAvailabilityDto.

        The quantity stored at locations not included in the availability calculation.  For each warehouse location, the 'Include in Qty. Available' check box on the  Warehouses(IN204000) screen defines whether the quantity of items stored at this  location is included in the quantity of available items.

        :param quantity_not_available: The quantity_not_available of this WarehouseAvailabilityDto.
        :type quantity_not_available: float
        """

        self._quantity_not_available = quantity_not_available

    @property
    def quantity_on_hand(self):
        """Gets the quantity_on_hand of this WarehouseAvailabilityDto.

        Physical quantity on-hand of items in the specific warehouse

        :return: The quantity_on_hand of this WarehouseAvailabilityDto.
        :rtype: float
        """
        return self._quantity_on_hand

    @quantity_on_hand.setter
    def quantity_on_hand(self, quantity_on_hand):
        """Sets the quantity_on_hand of this WarehouseAvailabilityDto.

        Physical quantity on-hand of items in the specific warehouse

        :param quantity_on_hand: The quantity_on_hand of this WarehouseAvailabilityDto.
        :type quantity_on_hand: float
        """

        self._quantity_on_hand = quantity_on_hand

    @property
    def quantity_purchase_orders(self):
        """Gets the quantity_purchase_orders of this WarehouseAvailabilityDto.

        The quantity of the inventory item included in open purchase orders.

        :return: The quantity_purchase_orders of this WarehouseAvailabilityDto.
        :rtype: float
        """
        return self._quantity_purchase_orders

    @quantity_purchase_orders.setter
    def quantity_purchase_orders(self, quantity_purchase_orders):
        """Sets the quantity_purchase_orders of this WarehouseAvailabilityDto.

        The quantity of the inventory item included in open purchase orders.

        :param quantity_purchase_orders: The quantity_purchase_orders of this WarehouseAvailabilityDto.
        :type quantity_purchase_orders: float
        """

        self._quantity_purchase_orders = quantity_purchase_orders

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this WarehouseAvailabilityDto.

        The id (SiteCd) of the warehouse

        :return: The warehouse_id of this WarehouseAvailabilityDto.
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this WarehouseAvailabilityDto.

        The id (SiteCd) of the warehouse

        :param warehouse_id: The warehouse_id of this WarehouseAvailabilityDto.
        :type warehouse_id: str
        """

        self._warehouse_id = warehouse_id
