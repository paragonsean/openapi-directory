# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContactDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attention: str=None, email: str=None, fax: str=None, id: int=None, name: str=None, overrides_default: bool=None, phone1: str=None, phone2: str=None):
        """ContactDto - a model defined in OpenAPI

        :param attention: The attention of this ContactDto.
        :param email: The email of this ContactDto.
        :param fax: The fax of this ContactDto.
        :param id: The id of this ContactDto.
        :param name: The name of this ContactDto.
        :param overrides_default: The overrides_default of this ContactDto.
        :param phone1: The phone1 of this ContactDto.
        :param phone2: The phone2 of this ContactDto.
        """
        self.openapi_types = {
            'attention': str,
            'email': str,
            'fax': str,
            'id': int,
            'name': str,
            'overrides_default': bool,
            'phone1': str,
            'phone2': str
        }

        self.attribute_map = {
            'attention': 'attention',
            'email': 'email',
            'fax': 'fax',
            'id': 'id',
            'name': 'name',
            'overrides_default': 'overridesDefault',
            'phone1': 'phone1',
            'phone2': 'phone2'
        }

        self._attention = attention
        self._email = email
        self._fax = fax
        self._id = id
        self._name = name
        self._overrides_default = overrides_default
        self._phone1 = phone1
        self._phone2 = phone2

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactDto of this ContactDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attention(self):
        """Gets the attention of this ContactDto.

        Any attention for the contact

        :return: The attention of this ContactDto.
        :rtype: str
        """
        return self._attention

    @attention.setter
    def attention(self, attention):
        """Sets the attention of this ContactDto.

        Any attention for the contact

        :param attention: The attention of this ContactDto.
        :type attention: str
        """

        self._attention = attention

    @property
    def email(self):
        """Gets the email of this ContactDto.

        The e-mail address of the contact

        :return: The email of this ContactDto.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ContactDto.

        The e-mail address of the contact

        :param email: The email of this ContactDto.
        :type email: str
        """

        self._email = email

    @property
    def fax(self):
        """Gets the fax of this ContactDto.

        The fax number of the contact

        :return: The fax of this ContactDto.
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this ContactDto.

        The fax number of the contact

        :param fax: The fax of this ContactDto.
        :type fax: str
        """

        self._fax = fax

    @property
    def id(self):
        """Gets the id of this ContactDto.

        The id of the contact

        :return: The id of this ContactDto.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContactDto.

        The id of the contact

        :param id: The id of this ContactDto.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ContactDto.

        The name of the contact

        :return: The name of this ContactDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContactDto.

        The name of the contact

        :param name: The name of this ContactDto.
        :type name: str
        """

        self._name = name

    @property
    def overrides_default(self):
        """Gets the overrides_default of this ContactDto.

        Whether this overrides the default contact

        :return: The overrides_default of this ContactDto.
        :rtype: bool
        """
        return self._overrides_default

    @overrides_default.setter
    def overrides_default(self, overrides_default):
        """Sets the overrides_default of this ContactDto.

        Whether this overrides the default contact

        :param overrides_default: The overrides_default of this ContactDto.
        :type overrides_default: bool
        """

        self._overrides_default = overrides_default

    @property
    def phone1(self):
        """Gets the phone1 of this ContactDto.

        The phone number of the contact

        :return: The phone1 of this ContactDto.
        :rtype: str
        """
        return self._phone1

    @phone1.setter
    def phone1(self, phone1):
        """Sets the phone1 of this ContactDto.

        The phone number of the contact

        :param phone1: The phone1 of this ContactDto.
        :type phone1: str
        """

        self._phone1 = phone1

    @property
    def phone2(self):
        """Gets the phone2 of this ContactDto.

        The secondary phone number of the contact

        :return: The phone2 of this ContactDto.
        :rtype: str
        """
        return self._phone2

    @phone2.setter
    def phone2(self, phone2):
        """Sets the phone2 of this ContactDto.

        The secondary phone number of the contact

        :param phone2: The phone2 of this ContactDto.
        :type phone2: str
        """

        self._phone2 = phone2
