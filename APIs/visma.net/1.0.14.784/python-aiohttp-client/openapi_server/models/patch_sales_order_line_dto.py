# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PatchSalesOrderLineDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch_id: str=None, commissionable: bool=None, description: str=None, discount_amount: float=None, discount_code: str=None, discount_percent: float=None, external_link: str=None, has_manual_discount: bool=None, has_manual_price: bool=None, line_id: int=None, note: str=None, operation: str=None, overship_threshold: float=None, project_task_id: str=None, purchase_order_source: str=None, quantity: float=None, reason_code: str=None, request_date: datetime=None, sales_account_id: str=None, sales_person_id: str=None, ship_date: datetime=None, shipping_rule: str=None, sort_order: int=None, subaccount: Dict[str, str]=None, supplier_id: str=None, supplier_price: float=None, tax_category_id: str=None, undership_threshold: float=None, unit_cost: float=None, unit_of_measure: str=None, unit_price: float=None, warehouse_id: str=None, warehouse_location_id: str=None):
        """PatchSalesOrderLineDto - a model defined in OpenAPI

        :param branch_id: The branch_id of this PatchSalesOrderLineDto.
        :param commissionable: The commissionable of this PatchSalesOrderLineDto.
        :param description: The description of this PatchSalesOrderLineDto.
        :param discount_amount: The discount_amount of this PatchSalesOrderLineDto.
        :param discount_code: The discount_code of this PatchSalesOrderLineDto.
        :param discount_percent: The discount_percent of this PatchSalesOrderLineDto.
        :param external_link: The external_link of this PatchSalesOrderLineDto.
        :param has_manual_discount: The has_manual_discount of this PatchSalesOrderLineDto.
        :param has_manual_price: The has_manual_price of this PatchSalesOrderLineDto.
        :param line_id: The line_id of this PatchSalesOrderLineDto.
        :param note: The note of this PatchSalesOrderLineDto.
        :param operation: The operation of this PatchSalesOrderLineDto.
        :param overship_threshold: The overship_threshold of this PatchSalesOrderLineDto.
        :param project_task_id: The project_task_id of this PatchSalesOrderLineDto.
        :param purchase_order_source: The purchase_order_source of this PatchSalesOrderLineDto.
        :param quantity: The quantity of this PatchSalesOrderLineDto.
        :param reason_code: The reason_code of this PatchSalesOrderLineDto.
        :param request_date: The request_date of this PatchSalesOrderLineDto.
        :param sales_account_id: The sales_account_id of this PatchSalesOrderLineDto.
        :param sales_person_id: The sales_person_id of this PatchSalesOrderLineDto.
        :param ship_date: The ship_date of this PatchSalesOrderLineDto.
        :param shipping_rule: The shipping_rule of this PatchSalesOrderLineDto.
        :param sort_order: The sort_order of this PatchSalesOrderLineDto.
        :param subaccount: The subaccount of this PatchSalesOrderLineDto.
        :param supplier_id: The supplier_id of this PatchSalesOrderLineDto.
        :param supplier_price: The supplier_price of this PatchSalesOrderLineDto.
        :param tax_category_id: The tax_category_id of this PatchSalesOrderLineDto.
        :param undership_threshold: The undership_threshold of this PatchSalesOrderLineDto.
        :param unit_cost: The unit_cost of this PatchSalesOrderLineDto.
        :param unit_of_measure: The unit_of_measure of this PatchSalesOrderLineDto.
        :param unit_price: The unit_price of this PatchSalesOrderLineDto.
        :param warehouse_id: The warehouse_id of this PatchSalesOrderLineDto.
        :param warehouse_location_id: The warehouse_location_id of this PatchSalesOrderLineDto.
        """
        self.openapi_types = {
            'branch_id': str,
            'commissionable': bool,
            'description': str,
            'discount_amount': float,
            'discount_code': str,
            'discount_percent': float,
            'external_link': str,
            'has_manual_discount': bool,
            'has_manual_price': bool,
            'line_id': int,
            'note': str,
            'operation': str,
            'overship_threshold': float,
            'project_task_id': str,
            'purchase_order_source': str,
            'quantity': float,
            'reason_code': str,
            'request_date': datetime,
            'sales_account_id': str,
            'sales_person_id': str,
            'ship_date': datetime,
            'shipping_rule': str,
            'sort_order': int,
            'subaccount': Dict[str, str],
            'supplier_id': str,
            'supplier_price': float,
            'tax_category_id': str,
            'undership_threshold': float,
            'unit_cost': float,
            'unit_of_measure': str,
            'unit_price': float,
            'warehouse_id': str,
            'warehouse_location_id': str
        }

        self.attribute_map = {
            'branch_id': 'branchId',
            'commissionable': 'commissionable',
            'description': 'description',
            'discount_amount': 'discountAmount',
            'discount_code': 'discountCode',
            'discount_percent': 'discountPercent',
            'external_link': 'externalLink',
            'has_manual_discount': 'hasManualDiscount',
            'has_manual_price': 'hasManualPrice',
            'line_id': 'lineId',
            'note': 'note',
            'operation': 'operation',
            'overship_threshold': 'overshipThreshold',
            'project_task_id': 'projectTaskId',
            'purchase_order_source': 'purchaseOrderSource',
            'quantity': 'quantity',
            'reason_code': 'reasonCode',
            'request_date': 'requestDate',
            'sales_account_id': 'salesAccountId',
            'sales_person_id': 'salesPersonId',
            'ship_date': 'shipDate',
            'shipping_rule': 'shippingRule',
            'sort_order': 'sortOrder',
            'subaccount': 'subaccount',
            'supplier_id': 'supplierId',
            'supplier_price': 'supplierPrice',
            'tax_category_id': 'taxCategoryId',
            'undership_threshold': 'undershipThreshold',
            'unit_cost': 'unitCost',
            'unit_of_measure': 'unitOfMeasure',
            'unit_price': 'unitPrice',
            'warehouse_id': 'warehouseId',
            'warehouse_location_id': 'warehouseLocationId'
        }

        self._branch_id = branch_id
        self._commissionable = commissionable
        self._description = description
        self._discount_amount = discount_amount
        self._discount_code = discount_code
        self._discount_percent = discount_percent
        self._external_link = external_link
        self._has_manual_discount = has_manual_discount
        self._has_manual_price = has_manual_price
        self._line_id = line_id
        self._note = note
        self._operation = operation
        self._overship_threshold = overship_threshold
        self._project_task_id = project_task_id
        self._purchase_order_source = purchase_order_source
        self._quantity = quantity
        self._reason_code = reason_code
        self._request_date = request_date
        self._sales_account_id = sales_account_id
        self._sales_person_id = sales_person_id
        self._ship_date = ship_date
        self._shipping_rule = shipping_rule
        self._sort_order = sort_order
        self._subaccount = subaccount
        self._supplier_id = supplier_id
        self._supplier_price = supplier_price
        self._tax_category_id = tax_category_id
        self._undership_threshold = undership_threshold
        self._unit_cost = unit_cost
        self._unit_of_measure = unit_of_measure
        self._unit_price = unit_price
        self._warehouse_id = warehouse_id
        self._warehouse_location_id = warehouse_location_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchSalesOrderLineDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchSalesOrderLineDto of this PatchSalesOrderLineDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch_id(self):
        """Gets the branch_id of this PatchSalesOrderLineDto.

        Sets the branch with which this line is associated.  If `BranchId` is provided as (null), the value will be set from from order `BranchId`

        :return: The branch_id of this PatchSalesOrderLineDto.
        :rtype: str
        """
        return self._branch_id

    @branch_id.setter
    def branch_id(self, branch_id):
        """Sets the branch_id of this PatchSalesOrderLineDto.

        Sets the branch with which this line is associated.  If `BranchId` is provided as (null), the value will be set from from order `BranchId`

        :param branch_id: The branch_id of this PatchSalesOrderLineDto.
        :type branch_id: str
        """

        self._branch_id = branch_id

    @property
    def commissionable(self):
        """Gets the commissionable of this PatchSalesOrderLineDto.

        Indicates if line is comissionable.

        :return: The commissionable of this PatchSalesOrderLineDto.
        :rtype: bool
        """
        return self._commissionable

    @commissionable.setter
    def commissionable(self, commissionable):
        """Sets the commissionable of this PatchSalesOrderLineDto.

        Indicates if line is comissionable.

        :param commissionable: The commissionable of this PatchSalesOrderLineDto.
        :type commissionable: bool
        """

        self._commissionable = commissionable

    @property
    def description(self):
        """Gets the description of this PatchSalesOrderLineDto.

        Sets the description of the order line item. This will override the default description from the inventory item  <br>Note that text fields should not contain any personally identifiable or otherwise sensitive data

        :return: The description of this PatchSalesOrderLineDto.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PatchSalesOrderLineDto.

        Sets the description of the order line item. This will override the default description from the inventory item  <br>Note that text fields should not contain any personally identifiable or otherwise sensitive data

        :param description: The description of this PatchSalesOrderLineDto.
        :type description: str
        """
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")

        self._description = description

    @property
    def discount_amount(self):
        """Gets the discount_amount of this PatchSalesOrderLineDto.

        Sets the manual currency discount amount for the line.  <remarks>  Note that the behavior of the 'discountAmount' field is affected by the 'hasManualDiscount' option.  If 'hasManualDiscount' is provided and set to \"false\", and 'discountAmount' is provided, the system will set the discountAmount according to the predefined rules.  </remarks>

        :return: The discount_amount of this PatchSalesOrderLineDto.
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this PatchSalesOrderLineDto.

        Sets the manual currency discount amount for the line.  <remarks>  Note that the behavior of the 'discountAmount' field is affected by the 'hasManualDiscount' option.  If 'hasManualDiscount' is provided and set to \"false\", and 'discountAmount' is provided, the system will set the discountAmount according to the predefined rules.  </remarks>

        :param discount_amount: The discount_amount of this PatchSalesOrderLineDto.
        :type discount_amount: float
        """

        self._discount_amount = discount_amount

    @property
    def discount_code(self):
        """Gets the discount_code of this PatchSalesOrderLineDto.

        Sets the discount for the line if applicable. This must be one of the selectable discount codes.  <remarks>  Note that the behavior of the 'discountCode' field is affected by the 'hasManualDiscount' option.  If 'hasManualDiscount' is provided and set to \"false\", and 'discountCode' is provided, the system will set the discountCode according to the predefined rules.  </remarks>

        :return: The discount_code of this PatchSalesOrderLineDto.
        :rtype: str
        """
        return self._discount_code

    @discount_code.setter
    def discount_code(self, discount_code):
        """Sets the discount_code of this PatchSalesOrderLineDto.

        Sets the discount for the line if applicable. This must be one of the selectable discount codes.  <remarks>  Note that the behavior of the 'discountCode' field is affected by the 'hasManualDiscount' option.  If 'hasManualDiscount' is provided and set to \"false\", and 'discountCode' is provided, the system will set the discountCode according to the predefined rules.  </remarks>

        :param discount_code: The discount_code of this PatchSalesOrderLineDto.
        :type discount_code: str
        """
        if discount_code is not None and len(discount_code) > 10:
            raise ValueError("Invalid value for `discount_code`, length must be less than or equal to `10`")

        self._discount_code = discount_code

    @property
    def discount_percent(self):
        """Gets the discount_percent of this PatchSalesOrderLineDto.

        Sets the manual percentage discount for the line.  <remarks>  Note that the behavior of the 'discountPercent' field is affected by the 'hasManualDiscount' option.  If 'hasManualDiscount' is provided and set to \"false\", and 'discountPercent' is provided, the system will set the discountPercent according to the predefined rules.  </remarks>

        :return: The discount_percent of this PatchSalesOrderLineDto.
        :rtype: float
        """
        return self._discount_percent

    @discount_percent.setter
    def discount_percent(self, discount_percent):
        """Sets the discount_percent of this PatchSalesOrderLineDto.

        Sets the manual percentage discount for the line.  <remarks>  Note that the behavior of the 'discountPercent' field is affected by the 'hasManualDiscount' option.  If 'hasManualDiscount' is provided and set to \"false\", and 'discountPercent' is provided, the system will set the discountPercent according to the predefined rules.  </remarks>

        :param discount_percent: The discount_percent of this PatchSalesOrderLineDto.
        :type discount_percent: float
        """
        if discount_percent is not None and discount_percent > 100:
            raise ValueError("Invalid value for `discount_percent`, must be a value less than or equal to `100`")
        if discount_percent is not None and discount_percent < -100:
            raise ValueError("Invalid value for `discount_percent`, must be a value greater than or equal to `-100`")

        self._discount_percent = discount_percent

    @property
    def external_link(self):
        """Gets the external_link of this PatchSalesOrderLineDto.

        Sets the external link for the line

        :return: The external_link of this PatchSalesOrderLineDto.
        :rtype: str
        """
        return self._external_link

    @external_link.setter
    def external_link(self, external_link):
        """Sets the external_link of this PatchSalesOrderLineDto.

        Sets the external link for the line

        :param external_link: The external_link of this PatchSalesOrderLineDto.
        :type external_link: str
        """
        if external_link is not None and len(external_link) > 255:
            raise ValueError("Invalid value for `external_link`, length must be less than or equal to `255`")

        self._external_link = external_link

    @property
    def has_manual_discount(self):
        """Gets the has_manual_discount of this PatchSalesOrderLineDto.

        Indicates that line level discount is applied manually.  <remarks>  Note that the behavior of the fields 'discountCode', 'discountPercent' and 'discountAmount' is affected by this option.  If 'hasManualDiscount' is provided and set to \"false\", and discount field(s) is provided, the system will set the line level discounts according to the predefined rules.  </remarks>

        :return: The has_manual_discount of this PatchSalesOrderLineDto.
        :rtype: bool
        """
        return self._has_manual_discount

    @has_manual_discount.setter
    def has_manual_discount(self, has_manual_discount):
        """Sets the has_manual_discount of this PatchSalesOrderLineDto.

        Indicates that line level discount is applied manually.  <remarks>  Note that the behavior of the fields 'discountCode', 'discountPercent' and 'discountAmount' is affected by this option.  If 'hasManualDiscount' is provided and set to \"false\", and discount field(s) is provided, the system will set the line level discounts according to the predefined rules.  </remarks>

        :param has_manual_discount: The has_manual_discount of this PatchSalesOrderLineDto.
        :type has_manual_discount: bool
        """

        self._has_manual_discount = has_manual_discount

    @property
    def has_manual_price(self):
        """Gets the has_manual_price of this PatchSalesOrderLineDto.

        Indicates that the `unitPrice` in this line has been specified manually.  If set to \"false\", the system updates the unit price in the line according to predefined rules.  Note that the behavior of the field `unitPrice` is affected by this option.  If `hasManualPrice` is provided and set to \"false\", and `unitPrice` is provided, the system will set the `unitPrice` according to the predefined rules.

        :return: The has_manual_price of this PatchSalesOrderLineDto.
        :rtype: bool
        """
        return self._has_manual_price

    @has_manual_price.setter
    def has_manual_price(self, has_manual_price):
        """Sets the has_manual_price of this PatchSalesOrderLineDto.

        Indicates that the `unitPrice` in this line has been specified manually.  If set to \"false\", the system updates the unit price in the line according to predefined rules.  Note that the behavior of the field `unitPrice` is affected by this option.  If `hasManualPrice` is provided and set to \"false\", and `unitPrice` is provided, the system will set the `unitPrice` according to the predefined rules.

        :param has_manual_price: The has_manual_price of this PatchSalesOrderLineDto.
        :type has_manual_price: bool
        """

        self._has_manual_price = has_manual_price

    @property
    def line_id(self):
        """Gets the line_id of this PatchSalesOrderLineDto.

        The line id of the line.

        :return: The line_id of this PatchSalesOrderLineDto.
        :rtype: int
        """
        return self._line_id

    @line_id.setter
    def line_id(self, line_id):
        """Sets the line_id of this PatchSalesOrderLineDto.

        The line id of the line.

        :param line_id: The line_id of this PatchSalesOrderLineDto.
        :type line_id: int
        """
        if line_id is None:
            raise ValueError("Invalid value for `line_id`, must not be `None`")

        self._line_id = line_id

    @property
    def note(self):
        """Gets the note of this PatchSalesOrderLineDto.

        Any note to apply to the order header.

        :return: The note of this PatchSalesOrderLineDto.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this PatchSalesOrderLineDto.

        Any note to apply to the order header.

        :param note: The note of this PatchSalesOrderLineDto.
        :type note: str
        """
        if note is not None and len(note) > 2048:
            raise ValueError("Invalid value for `note`, length must be less than or equal to `2048`")

        self._note = note

    @property
    def operation(self):
        """Gets the operation of this PatchSalesOrderLineDto.

        The type of operation the line represents to the order. Acceptable values are 'Issue' or 'Receipt'. This must be a valid operation for sales order type.

        :return: The operation of this PatchSalesOrderLineDto.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this PatchSalesOrderLineDto.

        The type of operation the line represents to the order. Acceptable values are 'Issue' or 'Receipt'. This must be a valid operation for sales order type.

        :param operation: The operation of this PatchSalesOrderLineDto.
        :type operation: str
        """

        self._operation = operation

    @property
    def overship_threshold(self):
        """Gets the overship_threshold of this PatchSalesOrderLineDto.

        Sets the overship threshold in percent. If not set, information from the inventory item is used

        :return: The overship_threshold of this PatchSalesOrderLineDto.
        :rtype: float
        """
        return self._overship_threshold

    @overship_threshold.setter
    def overship_threshold(self, overship_threshold):
        """Sets the overship_threshold of this PatchSalesOrderLineDto.

        Sets the overship threshold in percent. If not set, information from the inventory item is used

        :param overship_threshold: The overship_threshold of this PatchSalesOrderLineDto.
        :type overship_threshold: float
        """
        if overship_threshold is not None and overship_threshold > 999:
            raise ValueError("Invalid value for `overship_threshold`, must be a value less than or equal to `999`")
        if overship_threshold is not None and overship_threshold < 100:
            raise ValueError("Invalid value for `overship_threshold`, must be a value greater than or equal to `100`")

        self._overship_threshold = overship_threshold

    @property
    def project_task_id(self):
        """Gets the project_task_id of this PatchSalesOrderLineDto.

        The project task with which this sales order line is associated

        :return: The project_task_id of this PatchSalesOrderLineDto.
        :rtype: str
        """
        return self._project_task_id

    @project_task_id.setter
    def project_task_id(self, project_task_id):
        """Sets the project_task_id of this PatchSalesOrderLineDto.

        The project task with which this sales order line is associated

        :param project_task_id: The project_task_id of this PatchSalesOrderLineDto.
        :type project_task_id: str
        """
        if project_task_id is not None and len(project_task_id) > 30:
            raise ValueError("Invalid value for `project_task_id`, length must be less than or equal to `30`")

        self._project_task_id = project_task_id

    @property
    def purchase_order_source(self):
        """Gets the purchase_order_source of this PatchSalesOrderLineDto.

        Sets the purchase source of the line.  Accepted values are `dropShip` or `purchaseToOrder`, when null provided, value will be set from default value from the inventory item.  If the value was provided as '' (empty string), the value will set to null.

        :return: The purchase_order_source of this PatchSalesOrderLineDto.
        :rtype: str
        """
        return self._purchase_order_source

    @purchase_order_source.setter
    def purchase_order_source(self, purchase_order_source):
        """Sets the purchase_order_source of this PatchSalesOrderLineDto.

        Sets the purchase source of the line.  Accepted values are `dropShip` or `purchaseToOrder`, when null provided, value will be set from default value from the inventory item.  If the value was provided as '' (empty string), the value will set to null.

        :param purchase_order_source: The purchase_order_source of this PatchSalesOrderLineDto.
        :type purchase_order_source: str
        """

        self._purchase_order_source = purchase_order_source

    @property
    def quantity(self):
        """Gets the quantity of this PatchSalesOrderLineDto.

        Sets the quantity of items on the order line

        :return: The quantity of this PatchSalesOrderLineDto.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this PatchSalesOrderLineDto.

        Sets the quantity of items on the order line

        :param quantity: The quantity of this PatchSalesOrderLineDto.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def reason_code(self):
        """Gets the reason_code of this PatchSalesOrderLineDto.

        Patch the reason code for the line. This must be one of the selectable reason codes

        :return: The reason_code of this PatchSalesOrderLineDto.
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this PatchSalesOrderLineDto.

        Patch the reason code for the line. This must be one of the selectable reason codes

        :param reason_code: The reason_code of this PatchSalesOrderLineDto.
        :type reason_code: str
        """

        self._reason_code = reason_code

    @property
    def request_date(self):
        """Gets the request_date of this PatchSalesOrderLineDto.

        Sets the date the order line is requested (Requested On)  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The request_date of this PatchSalesOrderLineDto.
        :rtype: datetime
        """
        return self._request_date

    @request_date.setter
    def request_date(self, request_date):
        """Sets the request_date of this PatchSalesOrderLineDto.

        Sets the date the order line is requested (Requested On)  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :param request_date: The request_date of this PatchSalesOrderLineDto.
        :type request_date: datetime
        """

        self._request_date = request_date

    @property
    def sales_account_id(self):
        """Gets the sales_account_id of this PatchSalesOrderLineDto.

        Overrides the Sales Account Id of the line. The value must be one of the selectable Accounts.  If not set, a value based on the rules is used

        :return: The sales_account_id of this PatchSalesOrderLineDto.
        :rtype: str
        """
        return self._sales_account_id

    @sales_account_id.setter
    def sales_account_id(self, sales_account_id):
        """Sets the sales_account_id of this PatchSalesOrderLineDto.

        Overrides the Sales Account Id of the line. The value must be one of the selectable Accounts.  If not set, a value based on the rules is used

        :param sales_account_id: The sales_account_id of this PatchSalesOrderLineDto.
        :type sales_account_id: str
        """
        if sales_account_id is not None and len(sales_account_id) > 10:
            raise ValueError("Invalid value for `sales_account_id`, length must be less than or equal to `10`")

        self._sales_account_id = sales_account_id

    @property
    def sales_person_id(self):
        """Gets the sales_person_id of this PatchSalesOrderLineDto.

        Sets the sales person for the line.  If `SalesPersonId` is provided as (null), the value will be set from from order `SalesPersonId`

        :return: The sales_person_id of this PatchSalesOrderLineDto.
        :rtype: str
        """
        return self._sales_person_id

    @sales_person_id.setter
    def sales_person_id(self, sales_person_id):
        """Sets the sales_person_id of this PatchSalesOrderLineDto.

        Sets the sales person for the line.  If `SalesPersonId` is provided as (null), the value will be set from from order `SalesPersonId`

        :param sales_person_id: The sales_person_id of this PatchSalesOrderLineDto.
        :type sales_person_id: str
        """
        if sales_person_id is not None and len(sales_person_id) > 15:
            raise ValueError("Invalid value for `sales_person_id`, length must be less than or equal to `15`")

        self._sales_person_id = sales_person_id

    @property
    def ship_date(self):
        """Gets the ship_date of this PatchSalesOrderLineDto.

        Sets the day the order line should be shipped, so that the customer gets it on the requested date (Ship On).  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The ship_date of this PatchSalesOrderLineDto.
        :rtype: datetime
        """
        return self._ship_date

    @ship_date.setter
    def ship_date(self, ship_date):
        """Sets the ship_date of this PatchSalesOrderLineDto.

        Sets the day the order line should be shipped, so that the customer gets it on the requested date (Ship On).  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :param ship_date: The ship_date of this PatchSalesOrderLineDto.
        :type ship_date: datetime
        """

        self._ship_date = ship_date

    @property
    def shipping_rule(self):
        """Gets the shipping_rule of this PatchSalesOrderLineDto.

        The way the line item should be shipped.  <br>One of the following options can be set:<br><list type=\"bullet\"><item><term>CancelRemainder: </term><description>The ordered quantity should be delivered in one shipment</description></item><item><term>BackOrderAllowed: </term><description>The ordered quantity can be delivered in multiple shipments.</description></item><item><term>ShipComplete: </term><description>The ordered quantity should be delivered in one shipment.</description></item></list>

        :return: The shipping_rule of this PatchSalesOrderLineDto.
        :rtype: str
        """
        return self._shipping_rule

    @shipping_rule.setter
    def shipping_rule(self, shipping_rule):
        """Sets the shipping_rule of this PatchSalesOrderLineDto.

        The way the line item should be shipped.  <br>One of the following options can be set:<br><list type=\"bullet\"><item><term>CancelRemainder: </term><description>The ordered quantity should be delivered in one shipment</description></item><item><term>BackOrderAllowed: </term><description>The ordered quantity can be delivered in multiple shipments.</description></item><item><term>ShipComplete: </term><description>The ordered quantity should be delivered in one shipment.</description></item></list>

        :param shipping_rule: The shipping_rule of this PatchSalesOrderLineDto.
        :type shipping_rule: str
        """

        self._shipping_rule = shipping_rule

    @property
    def sort_order(self):
        """Gets the sort_order of this PatchSalesOrderLineDto.


        :return: The sort_order of this PatchSalesOrderLineDto.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this PatchSalesOrderLineDto.


        :param sort_order: The sort_order of this PatchSalesOrderLineDto.
        :type sort_order: int
        """

        self._sort_order = sort_order

    @property
    def subaccount(self):
        """Gets the subaccount of this PatchSalesOrderLineDto.

        Overrides the Subaccount setup for the line.  Each entry corresponds to a subaccount id/value pair

        :return: The subaccount of this PatchSalesOrderLineDto.
        :rtype: Dict[str, str]
        """
        return self._subaccount

    @subaccount.setter
    def subaccount(self, subaccount):
        """Sets the subaccount of this PatchSalesOrderLineDto.

        Overrides the Subaccount setup for the line.  Each entry corresponds to a subaccount id/value pair

        :param subaccount: The subaccount of this PatchSalesOrderLineDto.
        :type subaccount: Dict[str, str]
        """

        self._subaccount = subaccount

    @property
    def supplier_id(self):
        """Gets the supplier_id of this PatchSalesOrderLineDto.

        Sets the Purchase Order Vendor for the line, can be set if the purchase order source is `purchaseToOrder` or `dropShip`.

        :return: The supplier_id of this PatchSalesOrderLineDto.
        :rtype: str
        """
        return self._supplier_id

    @supplier_id.setter
    def supplier_id(self, supplier_id):
        """Sets the supplier_id of this PatchSalesOrderLineDto.

        Sets the Purchase Order Vendor for the line, can be set if the purchase order source is `purchaseToOrder` or `dropShip`.

        :param supplier_id: The supplier_id of this PatchSalesOrderLineDto.
        :type supplier_id: str
        """

        self._supplier_id = supplier_id

    @property
    def supplier_price(self):
        """Gets the supplier_price of this PatchSalesOrderLineDto.

        Sets the supplier price for the line item.

        :return: The supplier_price of this PatchSalesOrderLineDto.
        :rtype: float
        """
        return self._supplier_price

    @supplier_price.setter
    def supplier_price(self, supplier_price):
        """Sets the supplier_price of this PatchSalesOrderLineDto.

        Sets the supplier price for the line item.

        :param supplier_price: The supplier_price of this PatchSalesOrderLineDto.
        :type supplier_price: float
        """

        self._supplier_price = supplier_price

    @property
    def tax_category_id(self):
        """Gets the tax_category_id of this PatchSalesOrderLineDto.

        Overrides the default tax category id. The value must be one of the selectable Tax Categories

        :return: The tax_category_id of this PatchSalesOrderLineDto.
        :rtype: str
        """
        return self._tax_category_id

    @tax_category_id.setter
    def tax_category_id(self, tax_category_id):
        """Sets the tax_category_id of this PatchSalesOrderLineDto.

        Overrides the default tax category id. The value must be one of the selectable Tax Categories

        :param tax_category_id: The tax_category_id of this PatchSalesOrderLineDto.
        :type tax_category_id: str
        """

        self._tax_category_id = tax_category_id

    @property
    def undership_threshold(self):
        """Gets the undership_threshold of this PatchSalesOrderLineDto.

        Sets the undership threshold in percent. If not set, information from the inventory item is used

        :return: The undership_threshold of this PatchSalesOrderLineDto.
        :rtype: float
        """
        return self._undership_threshold

    @undership_threshold.setter
    def undership_threshold(self, undership_threshold):
        """Sets the undership_threshold of this PatchSalesOrderLineDto.

        Sets the undership threshold in percent. If not set, information from the inventory item is used

        :param undership_threshold: The undership_threshold of this PatchSalesOrderLineDto.
        :type undership_threshold: float
        """
        if undership_threshold is not None and undership_threshold > 100:
            raise ValueError("Invalid value for `undership_threshold`, must be a value less than or equal to `100`")
        if undership_threshold is not None and undership_threshold < 0:
            raise ValueError("Invalid value for `undership_threshold`, must be a value greater than or equal to `0`")

        self._undership_threshold = undership_threshold

    @property
    def unit_cost(self):
        """Gets the unit_cost of this PatchSalesOrderLineDto.

        Sets the unit cost of the product on the line.

        :return: The unit_cost of this PatchSalesOrderLineDto.
        :rtype: float
        """
        return self._unit_cost

    @unit_cost.setter
    def unit_cost(self, unit_cost):
        """Sets the unit_cost of this PatchSalesOrderLineDto.

        Sets the unit cost of the product on the line.

        :param unit_cost: The unit_cost of this PatchSalesOrderLineDto.
        :type unit_cost: float
        """

        self._unit_cost = unit_cost

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this PatchSalesOrderLineDto.

        Sets the Unit of measure for the line item. This will override the default UOM for the inventory item

        :return: The unit_of_measure of this PatchSalesOrderLineDto.
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this PatchSalesOrderLineDto.

        Sets the Unit of measure for the line item. This will override the default UOM for the inventory item

        :param unit_of_measure: The unit_of_measure of this PatchSalesOrderLineDto.
        :type unit_of_measure: str
        """
        if unit_of_measure is not None and len(unit_of_measure) > 6:
            raise ValueError("Invalid value for `unit_of_measure`, length must be less than or equal to `6`")

        self._unit_of_measure = unit_of_measure

    @property
    def unit_price(self):
        """Gets the unit_price of this PatchSalesOrderLineDto.

        Sets the unit price for the product on the line.  If no price is set(null or omitted) the price will be set according to predefined rules based on the inventoryId and the customer.  Note that the behavior of the `unitPrice` field is affected by the `hasManualPrice` option.  If `hasManualPrice` is provided and set to \"false\", and `unitPrice` is provided, the system will set the `unitPrice` according to the predefined rules.

        :return: The unit_price of this PatchSalesOrderLineDto.
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this PatchSalesOrderLineDto.

        Sets the unit price for the product on the line.  If no price is set(null or omitted) the price will be set according to predefined rules based on the inventoryId and the customer.  Note that the behavior of the `unitPrice` field is affected by the `hasManualPrice` option.  If `hasManualPrice` is provided and set to \"false\", and `unitPrice` is provided, the system will set the `unitPrice` according to the predefined rules.

        :param unit_price: The unit_price of this PatchSalesOrderLineDto.
        :type unit_price: float
        """

        self._unit_price = unit_price

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this PatchSalesOrderLineDto.

        Sets the warehouse the item should be shipped from. This will override the default, or the one set on the order head.

        :return: The warehouse_id of this PatchSalesOrderLineDto.
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this PatchSalesOrderLineDto.

        Sets the warehouse the item should be shipped from. This will override the default, or the one set on the order head.

        :param warehouse_id: The warehouse_id of this PatchSalesOrderLineDto.
        :type warehouse_id: str
        """

        self._warehouse_id = warehouse_id

    @property
    def warehouse_location_id(self):
        """Gets the warehouse_location_id of this PatchSalesOrderLineDto.

        Sets the warehouse location that will be used for the shipment generated for the order the warehouse location Id for this line.  This must be a valid location for `warehouseId` and will override the default if set.

        :return: The warehouse_location_id of this PatchSalesOrderLineDto.
        :rtype: str
        """
        return self._warehouse_location_id

    @warehouse_location_id.setter
    def warehouse_location_id(self, warehouse_location_id):
        """Sets the warehouse_location_id of this PatchSalesOrderLineDto.

        Sets the warehouse location that will be used for the shipment generated for the order the warehouse location Id for this line.  This must be a valid location for `warehouseId` and will override the default if set.

        :param warehouse_location_id: The warehouse_location_id of this PatchSalesOrderLineDto.
        :type warehouse_location_id: str
        """

        self._warehouse_location_id = warehouse_location_id
