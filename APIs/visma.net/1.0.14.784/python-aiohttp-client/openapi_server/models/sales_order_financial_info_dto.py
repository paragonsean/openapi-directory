# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cd_description_pair_dto import CdDescriptionPairDto
from openapi_server import util


class SalesOrderFinancialInfoDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cash_discount_date: datetime=None, due_date: datetime=None, invoice_date: datetime=None, invoice_id: str=None, invoice_separately: bool=None, post_period: str=None, terms: CdDescriptionPairDto=None):
        """SalesOrderFinancialInfoDto - a model defined in OpenAPI

        :param cash_discount_date: The cash_discount_date of this SalesOrderFinancialInfoDto.
        :param due_date: The due_date of this SalesOrderFinancialInfoDto.
        :param invoice_date: The invoice_date of this SalesOrderFinancialInfoDto.
        :param invoice_id: The invoice_id of this SalesOrderFinancialInfoDto.
        :param invoice_separately: The invoice_separately of this SalesOrderFinancialInfoDto.
        :param post_period: The post_period of this SalesOrderFinancialInfoDto.
        :param terms: The terms of this SalesOrderFinancialInfoDto.
        """
        self.openapi_types = {
            'cash_discount_date': datetime,
            'due_date': datetime,
            'invoice_date': datetime,
            'invoice_id': str,
            'invoice_separately': bool,
            'post_period': str,
            'terms': CdDescriptionPairDto
        }

        self.attribute_map = {
            'cash_discount_date': 'cashDiscountDate',
            'due_date': 'dueDate',
            'invoice_date': 'invoiceDate',
            'invoice_id': 'invoiceId',
            'invoice_separately': 'invoiceSeparately',
            'post_period': 'postPeriod',
            'terms': 'terms'
        }

        self._cash_discount_date = cash_discount_date
        self._due_date = due_date
        self._invoice_date = invoice_date
        self._invoice_id = invoice_id
        self._invoice_separately = invoice_separately
        self._post_period = post_period
        self._terms = terms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesOrderFinancialInfoDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SalesOrderFinancialInfoDto of this SalesOrderFinancialInfoDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cash_discount_date(self):
        """Gets the cash_discount_date of this SalesOrderFinancialInfoDto.

        The date for the cash discount  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The cash_discount_date of this SalesOrderFinancialInfoDto.
        :rtype: datetime
        """
        return self._cash_discount_date

    @cash_discount_date.setter
    def cash_discount_date(self, cash_discount_date):
        """Sets the cash_discount_date of this SalesOrderFinancialInfoDto.

        The date for the cash discount  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :param cash_discount_date: The cash_discount_date of this SalesOrderFinancialInfoDto.
        :type cash_discount_date: datetime
        """

        self._cash_discount_date = cash_discount_date

    @property
    def due_date(self):
        """Gets the due_date of this SalesOrderFinancialInfoDto.

        The due date for the invoice  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The due_date of this SalesOrderFinancialInfoDto.
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this SalesOrderFinancialInfoDto.

        The due date for the invoice  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :param due_date: The due_date of this SalesOrderFinancialInfoDto.
        :type due_date: datetime
        """

        self._due_date = due_date

    @property
    def invoice_date(self):
        """Gets the invoice_date of this SalesOrderFinancialInfoDto.

        The invoice date  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The invoice_date of this SalesOrderFinancialInfoDto.
        :rtype: datetime
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this SalesOrderFinancialInfoDto.

        The invoice date  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :param invoice_date: The invoice_date of this SalesOrderFinancialInfoDto.
        :type invoice_date: datetime
        """

        self._invoice_date = invoice_date

    @property
    def invoice_id(self):
        """Gets the invoice_id of this SalesOrderFinancialInfoDto.

        The id of the invoice issued for the order

        :return: The invoice_id of this SalesOrderFinancialInfoDto.
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this SalesOrderFinancialInfoDto.

        The id of the invoice issued for the order

        :param invoice_id: The invoice_id of this SalesOrderFinancialInfoDto.
        :type invoice_id: str
        """

        self._invoice_id = invoice_id

    @property
    def invoice_separately(self):
        """Gets the invoice_separately of this SalesOrderFinancialInfoDto.

        Whether the order should be invoiced separately

        :return: The invoice_separately of this SalesOrderFinancialInfoDto.
        :rtype: bool
        """
        return self._invoice_separately

    @invoice_separately.setter
    def invoice_separately(self, invoice_separately):
        """Sets the invoice_separately of this SalesOrderFinancialInfoDto.

        Whether the order should be invoiced separately

        :param invoice_separately: The invoice_separately of this SalesOrderFinancialInfoDto.
        :type invoice_separately: bool
        """

        self._invoice_separately = invoice_separately

    @property
    def post_period(self):
        """Gets the post_period of this SalesOrderFinancialInfoDto.

        The post period for the invoice

        :return: The post_period of this SalesOrderFinancialInfoDto.
        :rtype: str
        """
        return self._post_period

    @post_period.setter
    def post_period(self, post_period):
        """Sets the post_period of this SalesOrderFinancialInfoDto.

        The post period for the invoice

        :param post_period: The post_period of this SalesOrderFinancialInfoDto.
        :type post_period: str
        """

        self._post_period = post_period

    @property
    def terms(self):
        """Gets the terms of this SalesOrderFinancialInfoDto.


        :return: The terms of this SalesOrderFinancialInfoDto.
        :rtype: CdDescriptionPairDto
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this SalesOrderFinancialInfoDto.


        :param terms: The terms of this SalesOrderFinancialInfoDto.
        :type terms: CdDescriptionPairDto
        """

        self._terms = terms
