# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.patch_sales_order_address_dto import PatchSalesOrderAddressDto
from openapi_server.models.patch_sales_order_contact_dto import PatchSalesOrderContactDto
from openapi_server import util


class PatchSalesOrderShippingDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: PatchSalesOrderAddressDto=None, contact: PatchSalesOrderContactDto=None, fob_point_id: str=None, insurance: bool=None, intrastat_transaction_type_id: int=None, preferred_warehouse_id: str=None, priority: int=None, residential_delivery: bool=None, rule: str=None, saturday_delivery: bool=None, scheduled_date: datetime=None, ship_separately: bool=None, ship_via_id: str=None, terms_id: str=None, zone_id: str=None):
        """PatchSalesOrderShippingDto - a model defined in OpenAPI

        :param address: The address of this PatchSalesOrderShippingDto.
        :param contact: The contact of this PatchSalesOrderShippingDto.
        :param fob_point_id: The fob_point_id of this PatchSalesOrderShippingDto.
        :param insurance: The insurance of this PatchSalesOrderShippingDto.
        :param intrastat_transaction_type_id: The intrastat_transaction_type_id of this PatchSalesOrderShippingDto.
        :param preferred_warehouse_id: The preferred_warehouse_id of this PatchSalesOrderShippingDto.
        :param priority: The priority of this PatchSalesOrderShippingDto.
        :param residential_delivery: The residential_delivery of this PatchSalesOrderShippingDto.
        :param rule: The rule of this PatchSalesOrderShippingDto.
        :param saturday_delivery: The saturday_delivery of this PatchSalesOrderShippingDto.
        :param scheduled_date: The scheduled_date of this PatchSalesOrderShippingDto.
        :param ship_separately: The ship_separately of this PatchSalesOrderShippingDto.
        :param ship_via_id: The ship_via_id of this PatchSalesOrderShippingDto.
        :param terms_id: The terms_id of this PatchSalesOrderShippingDto.
        :param zone_id: The zone_id of this PatchSalesOrderShippingDto.
        """
        self.openapi_types = {
            'address': PatchSalesOrderAddressDto,
            'contact': PatchSalesOrderContactDto,
            'fob_point_id': str,
            'insurance': bool,
            'intrastat_transaction_type_id': int,
            'preferred_warehouse_id': str,
            'priority': int,
            'residential_delivery': bool,
            'rule': str,
            'saturday_delivery': bool,
            'scheduled_date': datetime,
            'ship_separately': bool,
            'ship_via_id': str,
            'terms_id': str,
            'zone_id': str
        }

        self.attribute_map = {
            'address': 'address',
            'contact': 'contact',
            'fob_point_id': 'fobPointId',
            'insurance': 'insurance',
            'intrastat_transaction_type_id': 'intrastatTransactionTypeId',
            'preferred_warehouse_id': 'preferredWarehouseId',
            'priority': 'priority',
            'residential_delivery': 'residentialDelivery',
            'rule': 'rule',
            'saturday_delivery': 'saturdayDelivery',
            'scheduled_date': 'scheduledDate',
            'ship_separately': 'shipSeparately',
            'ship_via_id': 'shipViaId',
            'terms_id': 'termsId',
            'zone_id': 'zoneId'
        }

        self._address = address
        self._contact = contact
        self._fob_point_id = fob_point_id
        self._insurance = insurance
        self._intrastat_transaction_type_id = intrastat_transaction_type_id
        self._preferred_warehouse_id = preferred_warehouse_id
        self._priority = priority
        self._residential_delivery = residential_delivery
        self._rule = rule
        self._saturday_delivery = saturday_delivery
        self._scheduled_date = scheduled_date
        self._ship_separately = ship_separately
        self._ship_via_id = ship_via_id
        self._terms_id = terms_id
        self._zone_id = zone_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchSalesOrderShippingDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchSalesOrderShippingDto of this PatchSalesOrderShippingDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this PatchSalesOrderShippingDto.


        :return: The address of this PatchSalesOrderShippingDto.
        :rtype: PatchSalesOrderAddressDto
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PatchSalesOrderShippingDto.


        :param address: The address of this PatchSalesOrderShippingDto.
        :type address: PatchSalesOrderAddressDto
        """

        self._address = address

    @property
    def contact(self):
        """Gets the contact of this PatchSalesOrderShippingDto.


        :return: The contact of this PatchSalesOrderShippingDto.
        :rtype: PatchSalesOrderContactDto
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this PatchSalesOrderShippingDto.


        :param contact: The contact of this PatchSalesOrderShippingDto.
        :type contact: PatchSalesOrderContactDto
        """

        self._contact = contact

    @property
    def fob_point_id(self):
        """Gets the fob_point_id of this PatchSalesOrderShippingDto.

        The identifier of the point (such as a city or town) where the title of goods passes from the company to the customer.

        :return: The fob_point_id of this PatchSalesOrderShippingDto.
        :rtype: str
        """
        return self._fob_point_id

    @fob_point_id.setter
    def fob_point_id(self, fob_point_id):
        """Sets the fob_point_id of this PatchSalesOrderShippingDto.

        The identifier of the point (such as a city or town) where the title of goods passes from the company to the customer.

        :param fob_point_id: The fob_point_id of this PatchSalesOrderShippingDto.
        :type fob_point_id: str
        """
        if fob_point_id is not None and len(fob_point_id) > 15:
            raise ValueError("Invalid value for `fob_point_id`, length must be less than or equal to `15`")

        self._fob_point_id = fob_point_id

    @property
    def insurance(self):
        """Gets the insurance of this PatchSalesOrderShippingDto.

        Sets whether insurance applies to this shipping

        :return: The insurance of this PatchSalesOrderShippingDto.
        :rtype: bool
        """
        return self._insurance

    @insurance.setter
    def insurance(self, insurance):
        """Sets the insurance of this PatchSalesOrderShippingDto.

        Sets whether insurance applies to this shipping

        :param insurance: The insurance of this PatchSalesOrderShippingDto.
        :type insurance: bool
        """

        self._insurance = insurance

    @property
    def intrastat_transaction_type_id(self):
        """Gets the intrastat_transaction_type_id of this PatchSalesOrderShippingDto.

        Sets the intrastat transaction type id for the sales order. Must be a valid intrastat transaction type id.

        :return: The intrastat_transaction_type_id of this PatchSalesOrderShippingDto.
        :rtype: int
        """
        return self._intrastat_transaction_type_id

    @intrastat_transaction_type_id.setter
    def intrastat_transaction_type_id(self, intrastat_transaction_type_id):
        """Sets the intrastat_transaction_type_id of this PatchSalesOrderShippingDto.

        Sets the intrastat transaction type id for the sales order. Must be a valid intrastat transaction type id.

        :param intrastat_transaction_type_id: The intrastat_transaction_type_id of this PatchSalesOrderShippingDto.
        :type intrastat_transaction_type_id: int
        """

        self._intrastat_transaction_type_id = intrastat_transaction_type_id

    @property
    def preferred_warehouse_id(self):
        """Gets the preferred_warehouse_id of this PatchSalesOrderShippingDto.

        Sets the default site for the customer supplied to use on the order. Must be a valid site id  If empty string, the default site for order will be removed

        :return: The preferred_warehouse_id of this PatchSalesOrderShippingDto.
        :rtype: str
        """
        return self._preferred_warehouse_id

    @preferred_warehouse_id.setter
    def preferred_warehouse_id(self, preferred_warehouse_id):
        """Sets the preferred_warehouse_id of this PatchSalesOrderShippingDto.

        Sets the default site for the customer supplied to use on the order. Must be a valid site id  If empty string, the default site for order will be removed

        :param preferred_warehouse_id: The preferred_warehouse_id of this PatchSalesOrderShippingDto.
        :type preferred_warehouse_id: str
        """
        if preferred_warehouse_id is not None and len(preferred_warehouse_id) > 30:
            raise ValueError("Invalid value for `preferred_warehouse_id`, length must be less than or equal to `30`")

        self._preferred_warehouse_id = preferred_warehouse_id

    @property
    def priority(self):
        """Gets the priority of this PatchSalesOrderShippingDto.

        Sets priority of the order

        :return: The priority of this PatchSalesOrderShippingDto.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this PatchSalesOrderShippingDto.

        Sets priority of the order

        :param priority: The priority of this PatchSalesOrderShippingDto.
        :type priority: int
        """

        self._priority = priority

    @property
    def residential_delivery(self):
        """Gets the residential_delivery of this PatchSalesOrderShippingDto.

        Sets whether this is residential delivery

        :return: The residential_delivery of this PatchSalesOrderShippingDto.
        :rtype: bool
        """
        return self._residential_delivery

    @residential_delivery.setter
    def residential_delivery(self, residential_delivery):
        """Sets the residential_delivery of this PatchSalesOrderShippingDto.

        Sets whether this is residential delivery

        :param residential_delivery: The residential_delivery of this PatchSalesOrderShippingDto.
        :type residential_delivery: bool
        """

        self._residential_delivery = residential_delivery

    @property
    def rule(self):
        """Gets the rule of this PatchSalesOrderShippingDto.

        Sets the shipping rule for the order

        :return: The rule of this PatchSalesOrderShippingDto.
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this PatchSalesOrderShippingDto.

        Sets the shipping rule for the order

        :param rule: The rule of this PatchSalesOrderShippingDto.
        :type rule: str
        """

        self._rule = rule

    @property
    def saturday_delivery(self):
        """Gets the saturday_delivery of this PatchSalesOrderShippingDto.

        Sets whether this is a saturday delivery

        :return: The saturday_delivery of this PatchSalesOrderShippingDto.
        :rtype: bool
        """
        return self._saturday_delivery

    @saturday_delivery.setter
    def saturday_delivery(self, saturday_delivery):
        """Sets the saturday_delivery of this PatchSalesOrderShippingDto.

        Sets whether this is a saturday delivery

        :param saturday_delivery: The saturday_delivery of this PatchSalesOrderShippingDto.
        :type saturday_delivery: bool
        """

        self._saturday_delivery = saturday_delivery

    @property
    def scheduled_date(self):
        """Gets the scheduled_date of this PatchSalesOrderShippingDto.

        Sets the date the shipment is scheduled for  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The scheduled_date of this PatchSalesOrderShippingDto.
        :rtype: datetime
        """
        return self._scheduled_date

    @scheduled_date.setter
    def scheduled_date(self, scheduled_date):
        """Sets the scheduled_date of this PatchSalesOrderShippingDto.

        Sets the date the shipment is scheduled for  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :param scheduled_date: The scheduled_date of this PatchSalesOrderShippingDto.
        :type scheduled_date: datetime
        """

        self._scheduled_date = scheduled_date

    @property
    def ship_separately(self):
        """Gets the ship_separately of this PatchSalesOrderShippingDto.

        Sets whether the order should be shipped separately or included in a batch segment

        :return: The ship_separately of this PatchSalesOrderShippingDto.
        :rtype: bool
        """
        return self._ship_separately

    @ship_separately.setter
    def ship_separately(self, ship_separately):
        """Sets the ship_separately of this PatchSalesOrderShippingDto.

        Sets whether the order should be shipped separately or included in a batch segment

        :param ship_separately: The ship_separately of this PatchSalesOrderShippingDto.
        :type ship_separately: bool
        """

        self._ship_separately = ship_separately

    @property
    def ship_via_id(self):
        """Gets the ship_via_id of this PatchSalesOrderShippingDto.

        Sets the unique id that represents the carrier and its service to be used for shipping the ordered goods. Must be a valid carrier id.  If empty string then the value will be set to null

        :return: The ship_via_id of this PatchSalesOrderShippingDto.
        :rtype: str
        """
        return self._ship_via_id

    @ship_via_id.setter
    def ship_via_id(self, ship_via_id):
        """Sets the ship_via_id of this PatchSalesOrderShippingDto.

        Sets the unique id that represents the carrier and its service to be used for shipping the ordered goods. Must be a valid carrier id.  If empty string then the value will be set to null

        :param ship_via_id: The ship_via_id of this PatchSalesOrderShippingDto.
        :type ship_via_id: str
        """
        if ship_via_id is not None and len(ship_via_id) > 15:
            raise ValueError("Invalid value for `ship_via_id`, length must be less than or equal to `15`")

        self._ship_via_id = ship_via_id

    @property
    def terms_id(self):
        """Gets the terms_id of this PatchSalesOrderShippingDto.

        The identifier of the shipping terms used for the order.

        :return: The terms_id of this PatchSalesOrderShippingDto.
        :rtype: str
        """
        return self._terms_id

    @terms_id.setter
    def terms_id(self, terms_id):
        """Sets the terms_id of this PatchSalesOrderShippingDto.

        The identifier of the shipping terms used for the order.

        :param terms_id: The terms_id of this PatchSalesOrderShippingDto.
        :type terms_id: str
        """
        if terms_id is not None and len(terms_id) > 15:
            raise ValueError("Invalid value for `terms_id`, length must be less than or equal to `15`")

        self._terms_id = terms_id

    @property
    def zone_id(self):
        """Gets the zone_id of this PatchSalesOrderShippingDto.

        Sets the shipping zone of the order freight

        :return: The zone_id of this PatchSalesOrderShippingDto.
        :rtype: str
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id):
        """Sets the zone_id of this PatchSalesOrderShippingDto.

        Sets the shipping zone of the order freight

        :param zone_id: The zone_id of this PatchSalesOrderShippingDto.
        :type zone_id: str
        """

        self._zone_id = zone_id
