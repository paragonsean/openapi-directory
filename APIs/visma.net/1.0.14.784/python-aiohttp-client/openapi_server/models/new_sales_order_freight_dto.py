# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewSalesOrderFreightDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost: float=None, premium_amount: float=None, tax_category_id: str=None):
        """NewSalesOrderFreightDto - a model defined in OpenAPI

        :param cost: The cost of this NewSalesOrderFreightDto.
        :param premium_amount: The premium_amount of this NewSalesOrderFreightDto.
        :param tax_category_id: The tax_category_id of this NewSalesOrderFreightDto.
        """
        self.openapi_types = {
            'cost': float,
            'premium_amount': float,
            'tax_category_id': str
        }

        self.attribute_map = {
            'cost': 'cost',
            'premium_amount': 'premiumAmount',
            'tax_category_id': 'taxCategoryId'
        }

        self._cost = cost
        self._premium_amount = premium_amount
        self._tax_category_id = tax_category_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewSalesOrderFreightDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewSalesOrderFreightDto of this NewSalesOrderFreightDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost(self):
        """Gets the cost of this NewSalesOrderFreightDto.

        The freight cost calculated for the sales order, can be manually set if orders Ship via code allows it.

        :return: The cost of this NewSalesOrderFreightDto.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this NewSalesOrderFreightDto.

        The freight cost calculated for the sales order, can be manually set if orders Ship via code allows it.

        :param cost: The cost of this NewSalesOrderFreightDto.
        :type cost: float
        """

        self._cost = cost

    @property
    def premium_amount(self):
        """Gets the premium_amount of this NewSalesOrderFreightDto.

        The additional freight charges for handling the order.

        :return: The premium_amount of this NewSalesOrderFreightDto.
        :rtype: float
        """
        return self._premium_amount

    @premium_amount.setter
    def premium_amount(self, premium_amount):
        """Sets the premium_amount of this NewSalesOrderFreightDto.

        The additional freight charges for handling the order.

        :param premium_amount: The premium_amount of this NewSalesOrderFreightDto.
        :type premium_amount: float
        """

        self._premium_amount = premium_amount

    @property
    def tax_category_id(self):
        """Gets the tax_category_id of this NewSalesOrderFreightDto.

        The tax category that applies to the freight amount.  By default, it is the tax category associated with the ship via code selected for the order.

        :return: The tax_category_id of this NewSalesOrderFreightDto.
        :rtype: str
        """
        return self._tax_category_id

    @tax_category_id.setter
    def tax_category_id(self, tax_category_id):
        """Sets the tax_category_id of this NewSalesOrderFreightDto.

        The tax category that applies to the freight amount.  By default, it is the tax category associated with the ship via code selected for the order.

        :param tax_category_id: The tax_category_id of this NewSalesOrderFreightDto.
        :type tax_category_id: str
        """
        if tax_category_id is not None and len(tax_category_id) > 10:
            raise ValueError("Invalid value for `tax_category_id`, length must be less than or equal to `10`")

        self._tax_category_id = tax_category_id
