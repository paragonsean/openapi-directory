# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewSalesOrderCustomerDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_id: int=None, gln: str=None, id: str=None, location_id: str=None, order: str=None, ref_no: str=None, terms_id: str=None):
        """NewSalesOrderCustomerDto - a model defined in OpenAPI

        :param contact_id: The contact_id of this NewSalesOrderCustomerDto.
        :param gln: The gln of this NewSalesOrderCustomerDto.
        :param id: The id of this NewSalesOrderCustomerDto.
        :param location_id: The location_id of this NewSalesOrderCustomerDto.
        :param order: The order of this NewSalesOrderCustomerDto.
        :param ref_no: The ref_no of this NewSalesOrderCustomerDto.
        :param terms_id: The terms_id of this NewSalesOrderCustomerDto.
        """
        self.openapi_types = {
            'contact_id': int,
            'gln': str,
            'id': str,
            'location_id': str,
            'order': str,
            'ref_no': str,
            'terms_id': str
        }

        self.attribute_map = {
            'contact_id': 'contactId',
            'gln': 'gln',
            'id': 'id',
            'location_id': 'locationId',
            'order': 'order',
            'ref_no': 'refNo',
            'terms_id': 'termsId'
        }

        self._contact_id = contact_id
        self._gln = gln
        self._id = id
        self._location_id = location_id
        self._order = order
        self._ref_no = ref_no
        self._terms_id = terms_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewSalesOrderCustomerDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewSalesOrderCustomerDto of this NewSalesOrderCustomerDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_id(self):
        """Gets the contact_id of this NewSalesOrderCustomerDto.

        The contact id for the customer

        :return: The contact_id of this NewSalesOrderCustomerDto.
        :rtype: int
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this NewSalesOrderCustomerDto.

        The contact id for the customer

        :param contact_id: The contact_id of this NewSalesOrderCustomerDto.
        :type contact_id: int
        """

        self._contact_id = contact_id

    @property
    def gln(self):
        """Gets the gln of this NewSalesOrderCustomerDto.

        The unique global location number of the customer

        :return: The gln of this NewSalesOrderCustomerDto.
        :rtype: str
        """
        return self._gln

    @gln.setter
    def gln(self, gln):
        """Sets the gln of this NewSalesOrderCustomerDto.

        The unique global location number of the customer

        :param gln: The gln of this NewSalesOrderCustomerDto.
        :type gln: str
        """

        self._gln = gln

    @property
    def id(self):
        """Gets the id of this NewSalesOrderCustomerDto.

        The unique id of the the customer

        :return: The id of this NewSalesOrderCustomerDto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NewSalesOrderCustomerDto.

        The unique id of the the customer

        :param id: The id of this NewSalesOrderCustomerDto.
        :type id: str
        """

        self._id = id

    @property
    def location_id(self):
        """Gets the location_id of this NewSalesOrderCustomerDto.

        Sets the location for the customer supplied to use on the order.  Must be a valid active location for the customer supplied in Visma.net.ERP.SalesOrders.Api.Dto.NewSalesOrder.NewSalesOrderCustomerDto.Id

        :return: The location_id of this NewSalesOrderCustomerDto.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this NewSalesOrderCustomerDto.

        Sets the location for the customer supplied to use on the order.  Must be a valid active location for the customer supplied in Visma.net.ERP.SalesOrders.Api.Dto.NewSalesOrder.NewSalesOrderCustomerDto.Id

        :param location_id: The location_id of this NewSalesOrderCustomerDto.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def order(self):
        """Gets the order of this NewSalesOrderCustomerDto.

        The customer order text

        :return: The order of this NewSalesOrderCustomerDto.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this NewSalesOrderCustomerDto.

        The customer order text

        :param order: The order of this NewSalesOrderCustomerDto.
        :type order: str
        """
        if order is not None and len(order) > 40:
            raise ValueError("Invalid value for `order`, length must be less than or equal to `40`")

        self._order = order

    @property
    def ref_no(self):
        """Gets the ref_no of this NewSalesOrderCustomerDto.

        The customer ref number text

        :return: The ref_no of this NewSalesOrderCustomerDto.
        :rtype: str
        """
        return self._ref_no

    @ref_no.setter
    def ref_no(self, ref_no):
        """Sets the ref_no of this NewSalesOrderCustomerDto.

        The customer ref number text

        :param ref_no: The ref_no of this NewSalesOrderCustomerDto.
        :type ref_no: str
        """
        if ref_no is not None and len(ref_no) > 40:
            raise ValueError("Invalid value for `ref_no`, length must be less than or equal to `40`")

        self._ref_no = ref_no

    @property
    def terms_id(self):
        """Gets the terms_id of this NewSalesOrderCustomerDto.

        Sets the terms to use for the sales order.  Must be a valid terms identifier

        :return: The terms_id of this NewSalesOrderCustomerDto.
        :rtype: str
        """
        return self._terms_id

    @terms_id.setter
    def terms_id(self, terms_id):
        """Sets the terms_id of this NewSalesOrderCustomerDto.

        Sets the terms to use for the sales order.  Must be a valid terms identifier

        :param terms_id: The terms_id of this NewSalesOrderCustomerDto.
        :type terms_id: str
        """

        self._terms_id = terms_id
