# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SalesOrderTaxDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exempt_tax: bool=None, include_in_taxable: bool=None, is_pending_tax: bool=None, is_reverse_tax: bool=None, is_statistical_tax: bool=None, tax_amount: float=None, tax_id: str=None, tax_rate: float=None, tax_type: str=None, taxable_amount: float=None):
        """SalesOrderTaxDto - a model defined in OpenAPI

        :param exempt_tax: The exempt_tax of this SalesOrderTaxDto.
        :param include_in_taxable: The include_in_taxable of this SalesOrderTaxDto.
        :param is_pending_tax: The is_pending_tax of this SalesOrderTaxDto.
        :param is_reverse_tax: The is_reverse_tax of this SalesOrderTaxDto.
        :param is_statistical_tax: The is_statistical_tax of this SalesOrderTaxDto.
        :param tax_amount: The tax_amount of this SalesOrderTaxDto.
        :param tax_id: The tax_id of this SalesOrderTaxDto.
        :param tax_rate: The tax_rate of this SalesOrderTaxDto.
        :param tax_type: The tax_type of this SalesOrderTaxDto.
        :param taxable_amount: The taxable_amount of this SalesOrderTaxDto.
        """
        self.openapi_types = {
            'exempt_tax': bool,
            'include_in_taxable': bool,
            'is_pending_tax': bool,
            'is_reverse_tax': bool,
            'is_statistical_tax': bool,
            'tax_amount': float,
            'tax_id': str,
            'tax_rate': float,
            'tax_type': str,
            'taxable_amount': float
        }

        self.attribute_map = {
            'exempt_tax': 'exemptTax',
            'include_in_taxable': 'includeInTaxable',
            'is_pending_tax': 'isPendingTax',
            'is_reverse_tax': 'isReverseTax',
            'is_statistical_tax': 'isStatisticalTax',
            'tax_amount': 'taxAmount',
            'tax_id': 'taxId',
            'tax_rate': 'taxRate',
            'tax_type': 'taxType',
            'taxable_amount': 'taxableAmount'
        }

        self._exempt_tax = exempt_tax
        self._include_in_taxable = include_in_taxable
        self._is_pending_tax = is_pending_tax
        self._is_reverse_tax = is_reverse_tax
        self._is_statistical_tax = is_statistical_tax
        self._tax_amount = tax_amount
        self._tax_id = tax_id
        self._tax_rate = tax_rate
        self._tax_type = tax_type
        self._taxable_amount = taxable_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesOrderTaxDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SalesOrderTaxDto of this SalesOrderTaxDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exempt_tax(self):
        """Gets the exempt_tax of this SalesOrderTaxDto.

        Indicates if the taxable amount will be included in taxExemptTotal

        :return: The exempt_tax of this SalesOrderTaxDto.
        :rtype: bool
        """
        return self._exempt_tax

    @exempt_tax.setter
    def exempt_tax(self, exempt_tax):
        """Sets the exempt_tax of this SalesOrderTaxDto.

        Indicates if the taxable amount will be included in taxExemptTotal

        :param exempt_tax: The exempt_tax of this SalesOrderTaxDto.
        :type exempt_tax: bool
        """

        self._exempt_tax = exempt_tax

    @property
    def include_in_taxable(self):
        """Gets the include_in_taxable of this SalesOrderTaxDto.

        Indicates if the taxable amount will be included in taxableTotal

        :return: The include_in_taxable of this SalesOrderTaxDto.
        :rtype: bool
        """
        return self._include_in_taxable

    @include_in_taxable.setter
    def include_in_taxable(self, include_in_taxable):
        """Sets the include_in_taxable of this SalesOrderTaxDto.

        Indicates if the taxable amount will be included in taxableTotal

        :param include_in_taxable: The include_in_taxable of this SalesOrderTaxDto.
        :type include_in_taxable: bool
        """

        self._include_in_taxable = include_in_taxable

    @property
    def is_pending_tax(self):
        """Gets the is_pending_tax of this SalesOrderTaxDto.

        Indicates if the tax calculated is treated as a pending tax

        :return: The is_pending_tax of this SalesOrderTaxDto.
        :rtype: bool
        """
        return self._is_pending_tax

    @is_pending_tax.setter
    def is_pending_tax(self, is_pending_tax):
        """Sets the is_pending_tax of this SalesOrderTaxDto.

        Indicates if the tax calculated is treated as a pending tax

        :param is_pending_tax: The is_pending_tax of this SalesOrderTaxDto.
        :type is_pending_tax: bool
        """

        self._is_pending_tax = is_pending_tax

    @property
    def is_reverse_tax(self):
        """Gets the is_reverse_tax of this SalesOrderTaxDto.

        Indicates if the tax is treated as a reverse tax

        :return: The is_reverse_tax of this SalesOrderTaxDto.
        :rtype: bool
        """
        return self._is_reverse_tax

    @is_reverse_tax.setter
    def is_reverse_tax(self, is_reverse_tax):
        """Sets the is_reverse_tax of this SalesOrderTaxDto.

        Indicates if the tax is treated as a reverse tax

        :param is_reverse_tax: The is_reverse_tax of this SalesOrderTaxDto.
        :type is_reverse_tax: bool
        """

        self._is_reverse_tax = is_reverse_tax

    @property
    def is_statistical_tax(self):
        """Gets the is_statistical_tax of this SalesOrderTaxDto.

        Indicates if the tax calculated is treated as a statistical tax

        :return: The is_statistical_tax of this SalesOrderTaxDto.
        :rtype: bool
        """
        return self._is_statistical_tax

    @is_statistical_tax.setter
    def is_statistical_tax(self, is_statistical_tax):
        """Sets the is_statistical_tax of this SalesOrderTaxDto.

        Indicates if the tax calculated is treated as a statistical tax

        :param is_statistical_tax: The is_statistical_tax of this SalesOrderTaxDto.
        :type is_statistical_tax: bool
        """

        self._is_statistical_tax = is_statistical_tax

    @property
    def tax_amount(self):
        """Gets the tax_amount of this SalesOrderTaxDto.

        The calculated tax amount for the specific tax

        :return: The tax_amount of this SalesOrderTaxDto.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this SalesOrderTaxDto.

        The calculated tax amount for the specific tax

        :param tax_amount: The tax_amount of this SalesOrderTaxDto.
        :type tax_amount: float
        """

        self._tax_amount = tax_amount

    @property
    def tax_id(self):
        """Gets the tax_id of this SalesOrderTaxDto.

        The unique tax identifier of the specific tax applied to the document

        :return: The tax_id of this SalesOrderTaxDto.
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this SalesOrderTaxDto.

        The unique tax identifier of the specific tax applied to the document

        :param tax_id: The tax_id of this SalesOrderTaxDto.
        :type tax_id: str
        """

        self._tax_id = tax_id

    @property
    def tax_rate(self):
        """Gets the tax_rate of this SalesOrderTaxDto.

        The tax rate used for the tax

        :return: The tax_rate of this SalesOrderTaxDto.
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this SalesOrderTaxDto.

        The tax rate used for the tax

        :param tax_rate: The tax_rate of this SalesOrderTaxDto.
        :type tax_rate: float
        """

        self._tax_rate = tax_rate

    @property
    def tax_type(self):
        """Gets the tax_type of this SalesOrderTaxDto.

        The type of tax, which can be Sales, Use, VAT or Withholding

        :return: The tax_type of this SalesOrderTaxDto.
        :rtype: str
        """
        return self._tax_type

    @tax_type.setter
    def tax_type(self, tax_type):
        """Sets the tax_type of this SalesOrderTaxDto.

        The type of tax, which can be Sales, Use, VAT or Withholding

        :param tax_type: The tax_type of this SalesOrderTaxDto.
        :type tax_type: str
        """

        self._tax_type = tax_type

    @property
    def taxable_amount(self):
        """Gets the taxable_amount of this SalesOrderTaxDto.

        The calculated taxable amount for the specific tax

        :return: The taxable_amount of this SalesOrderTaxDto.
        :rtype: float
        """
        return self._taxable_amount

    @taxable_amount.setter
    def taxable_amount(self, taxable_amount):
        """Sets the taxable_amount of this SalesOrderTaxDto.

        The calculated taxable amount for the specific tax

        :param taxable_amount: The taxable_amount of this SalesOrderTaxDto.
        :type taxable_amount: float
        """

        self._taxable_amount = taxable_amount
