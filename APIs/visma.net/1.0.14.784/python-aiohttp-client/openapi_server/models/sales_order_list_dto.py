# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dto_link import DtoLink
from openapi_server import util


class SalesOrderListDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: Dict[str, DtoLink]=None, currency: str=None, customer_id: str=None, customer_name: str=None, customer_order: str=None, customer_ref_no: str=None, _date: datetime=None, description: str=None, last_modified: datetime=None, location: str=None, order_id: str=None, order_qty: float=None, order_total: float=None, request_on: datetime=None, shipping_scheduled_date: datetime=None, status: str=None, type: str=None):
        """SalesOrderListDto - a model defined in OpenAPI

        :param links: The links of this SalesOrderListDto.
        :param currency: The currency of this SalesOrderListDto.
        :param customer_id: The customer_id of this SalesOrderListDto.
        :param customer_name: The customer_name of this SalesOrderListDto.
        :param customer_order: The customer_order of this SalesOrderListDto.
        :param customer_ref_no: The customer_ref_no of this SalesOrderListDto.
        :param _date: The _date of this SalesOrderListDto.
        :param description: The description of this SalesOrderListDto.
        :param last_modified: The last_modified of this SalesOrderListDto.
        :param location: The location of this SalesOrderListDto.
        :param order_id: The order_id of this SalesOrderListDto.
        :param order_qty: The order_qty of this SalesOrderListDto.
        :param order_total: The order_total of this SalesOrderListDto.
        :param request_on: The request_on of this SalesOrderListDto.
        :param shipping_scheduled_date: The shipping_scheduled_date of this SalesOrderListDto.
        :param status: The status of this SalesOrderListDto.
        :param type: The type of this SalesOrderListDto.
        """
        self.openapi_types = {
            'links': Dict[str, DtoLink],
            'currency': str,
            'customer_id': str,
            'customer_name': str,
            'customer_order': str,
            'customer_ref_no': str,
            '_date': datetime,
            'description': str,
            'last_modified': datetime,
            'location': str,
            'order_id': str,
            'order_qty': float,
            'order_total': float,
            'request_on': datetime,
            'shipping_scheduled_date': datetime,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'links': '_links',
            'currency': 'currency',
            'customer_id': 'customerId',
            'customer_name': 'customerName',
            'customer_order': 'customerOrder',
            'customer_ref_no': 'customerRefNo',
            '_date': 'date',
            'description': 'description',
            'last_modified': 'lastModified',
            'location': 'location',
            'order_id': 'orderId',
            'order_qty': 'orderQty',
            'order_total': 'orderTotal',
            'request_on': 'requestOn',
            'shipping_scheduled_date': 'shippingScheduledDate',
            'status': 'status',
            'type': 'type'
        }

        self._links = links
        self._currency = currency
        self._customer_id = customer_id
        self._customer_name = customer_name
        self._customer_order = customer_order
        self._customer_ref_no = customer_ref_no
        self.__date = _date
        self._description = description
        self._last_modified = last_modified
        self._location = location
        self._order_id = order_id
        self._order_qty = order_qty
        self._order_total = order_total
        self._request_on = request_on
        self._shipping_scheduled_date = shipping_scheduled_date
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesOrderListDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SalesOrderListDto of this SalesOrderListDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this SalesOrderListDto.

        Links applicable for the dto

        :return: The links of this SalesOrderListDto.
        :rtype: Dict[str, DtoLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this SalesOrderListDto.

        Links applicable for the dto

        :param links: The links of this SalesOrderListDto.
        :type links: Dict[str, DtoLink]
        """

        self._links = links

    @property
    def currency(self):
        """Gets the currency of this SalesOrderListDto.

        The currency id for the order

        :return: The currency of this SalesOrderListDto.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SalesOrderListDto.

        The currency id for the order

        :param currency: The currency of this SalesOrderListDto.
        :type currency: str
        """

        self._currency = currency

    @property
    def customer_id(self):
        """Gets the customer_id of this SalesOrderListDto.

        The customer Id for the order (a.k.a CustoemrCd)

        :return: The customer_id of this SalesOrderListDto.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this SalesOrderListDto.

        The customer Id for the order (a.k.a CustoemrCd)

        :param customer_id: The customer_id of this SalesOrderListDto.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def customer_name(self):
        """Gets the customer_name of this SalesOrderListDto.

        The name of the customer as it appears on the order

        :return: The customer_name of this SalesOrderListDto.
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this SalesOrderListDto.

        The name of the customer as it appears on the order

        :param customer_name: The customer_name of this SalesOrderListDto.
        :type customer_name: str
        """

        self._customer_name = customer_name

    @property
    def customer_order(self):
        """Gets the customer_order of this SalesOrderListDto.

        The customer order link

        :return: The customer_order of this SalesOrderListDto.
        :rtype: str
        """
        return self._customer_order

    @customer_order.setter
    def customer_order(self, customer_order):
        """Sets the customer_order of this SalesOrderListDto.

        The customer order link

        :param customer_order: The customer_order of this SalesOrderListDto.
        :type customer_order: str
        """

        self._customer_order = customer_order

    @property
    def customer_ref_no(self):
        """Gets the customer_ref_no of this SalesOrderListDto.

        The order reference number of the customer

        :return: The customer_ref_no of this SalesOrderListDto.
        :rtype: str
        """
        return self._customer_ref_no

    @customer_ref_no.setter
    def customer_ref_no(self, customer_ref_no):
        """Sets the customer_ref_no of this SalesOrderListDto.

        The order reference number of the customer

        :param customer_ref_no: The customer_ref_no of this SalesOrderListDto.
        :type customer_ref_no: str
        """

        self._customer_ref_no = customer_ref_no

    @property
    def _date(self):
        """Gets the _date of this SalesOrderListDto.

        The order date  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The _date of this SalesOrderListDto.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this SalesOrderListDto.

        The order date  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :param _date: The _date of this SalesOrderListDto.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this SalesOrderListDto.

        Any description on the order

        :return: The description of this SalesOrderListDto.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SalesOrderListDto.

        Any description on the order

        :param description: The description of this SalesOrderListDto.
        :type description: str
        """

        self._description = description

    @property
    def last_modified(self):
        """Gets the last_modified of this SalesOrderListDto.

        The date and time the order was last modified

        :return: The last_modified of this SalesOrderListDto.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this SalesOrderListDto.

        The date and time the order was last modified

        :param last_modified: The last_modified of this SalesOrderListDto.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def location(self):
        """Gets the location of this SalesOrderListDto.

        The customer location for this order

        :return: The location of this SalesOrderListDto.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SalesOrderListDto.

        The customer location for this order

        :param location: The location of this SalesOrderListDto.
        :type location: str
        """

        self._location = location

    @property
    def order_id(self):
        """Gets the order_id of this SalesOrderListDto.

        The order id (a.k.a OrderCd) for the order

        :return: The order_id of this SalesOrderListDto.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this SalesOrderListDto.

        The order id (a.k.a OrderCd) for the order

        :param order_id: The order_id of this SalesOrderListDto.
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def order_qty(self):
        """Gets the order_qty of this SalesOrderListDto.

        The total number of items on the order

        :return: The order_qty of this SalesOrderListDto.
        :rtype: float
        """
        return self._order_qty

    @order_qty.setter
    def order_qty(self, order_qty):
        """Sets the order_qty of this SalesOrderListDto.

        The total number of items on the order

        :param order_qty: The order_qty of this SalesOrderListDto.
        :type order_qty: float
        """

        self._order_qty = order_qty

    @property
    def order_total(self):
        """Gets the order_total of this SalesOrderListDto.

        The total amount on the order

        :return: The order_total of this SalesOrderListDto.
        :rtype: float
        """
        return self._order_total

    @order_total.setter
    def order_total(self, order_total):
        """Sets the order_total of this SalesOrderListDto.

        The total amount on the order

        :param order_total: The order_total of this SalesOrderListDto.
        :type order_total: float
        """

        self._order_total = order_total

    @property
    def request_on(self):
        """Gets the request_on of this SalesOrderListDto.

        The date the order is requested  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The request_on of this SalesOrderListDto.
        :rtype: datetime
        """
        return self._request_on

    @request_on.setter
    def request_on(self, request_on):
        """Sets the request_on of this SalesOrderListDto.

        The date the order is requested  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :param request_on: The request_on of this SalesOrderListDto.
        :type request_on: datetime
        """

        self._request_on = request_on

    @property
    def shipping_scheduled_date(self):
        """Gets the shipping_scheduled_date of this SalesOrderListDto.

        The date shipment is scheduled  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The shipping_scheduled_date of this SalesOrderListDto.
        :rtype: datetime
        """
        return self._shipping_scheduled_date

    @shipping_scheduled_date.setter
    def shipping_scheduled_date(self, shipping_scheduled_date):
        """Sets the shipping_scheduled_date of this SalesOrderListDto.

        The date shipment is scheduled  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :param shipping_scheduled_date: The shipping_scheduled_date of this SalesOrderListDto.
        :type shipping_scheduled_date: datetime
        """

        self._shipping_scheduled_date = shipping_scheduled_date

    @property
    def status(self):
        """Gets the status of this SalesOrderListDto.

        The current status of the order

        :return: The status of this SalesOrderListDto.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SalesOrderListDto.

        The current status of the order

        :param status: The status of this SalesOrderListDto.
        :type status: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this SalesOrderListDto.

        The type of the order

        :return: The type of this SalesOrderListDto.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SalesOrderListDto.

        The type of the order

        :param type: The type of this SalesOrderListDto.
        :type type: str
        """

        self._type = type
