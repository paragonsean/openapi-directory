# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewSalesOrderContactDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attention: str=None, email: str=None, name: str=None, phone1: str=None):
        """NewSalesOrderContactDto - a model defined in OpenAPI

        :param attention: The attention of this NewSalesOrderContactDto.
        :param email: The email of this NewSalesOrderContactDto.
        :param name: The name of this NewSalesOrderContactDto.
        :param phone1: The phone1 of this NewSalesOrderContactDto.
        """
        self.openapi_types = {
            'attention': str,
            'email': str,
            'name': str,
            'phone1': str
        }

        self.attribute_map = {
            'attention': 'attention',
            'email': 'email',
            'name': 'name',
            'phone1': 'phone1'
        }

        self._attention = attention
        self._email = email
        self._name = name
        self._phone1 = phone1

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewSalesOrderContactDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewSalesOrderContactDto of this NewSalesOrderContactDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attention(self):
        """Gets the attention of this NewSalesOrderContactDto.

        Sets any attention for the contact

        :return: The attention of this NewSalesOrderContactDto.
        :rtype: str
        """
        return self._attention

    @attention.setter
    def attention(self, attention):
        """Sets the attention of this NewSalesOrderContactDto.

        Sets any attention for the contact

        :param attention: The attention of this NewSalesOrderContactDto.
        :type attention: str
        """
        if attention is not None and len(attention) > 255:
            raise ValueError("Invalid value for `attention`, length must be less than or equal to `255`")

        self._attention = attention

    @property
    def email(self):
        """Gets the email of this NewSalesOrderContactDto.

        Sets the e-mail address of the contact

        :return: The email of this NewSalesOrderContactDto.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this NewSalesOrderContactDto.

        Sets the e-mail address of the contact

        :param email: The email of this NewSalesOrderContactDto.
        :type email: str
        """
        if email is not None and len(email) > 255:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `255`")

        self._email = email

    @property
    def name(self):
        """Gets the name of this NewSalesOrderContactDto.

        Sets the full name of the contact

        :return: The name of this NewSalesOrderContactDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewSalesOrderContactDto.

        Sets the full name of the contact

        :param name: The name of this NewSalesOrderContactDto.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def phone1(self):
        """Gets the phone1 of this NewSalesOrderContactDto.

        Sets the primary phone number of the contact

        :return: The phone1 of this NewSalesOrderContactDto.
        :rtype: str
        """
        return self._phone1

    @phone1.setter
    def phone1(self, phone1):
        """Sets the phone1 of this NewSalesOrderContactDto.

        Sets the primary phone number of the contact

        :param phone1: The phone1 of this NewSalesOrderContactDto.
        :type phone1: str
        """
        if phone1 is not None and len(phone1) > 50:
            raise ValueError("Invalid value for `phone1`, length must be less than or equal to `50`")

        self._phone1 = phone1
