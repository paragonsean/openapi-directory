# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cd_name_pair_dto import CdNamePairDto
from openapi_server import util


class AddressDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: CdNamePairDto=None, county: CdNamePairDto=None, id: int=None, line1: str=None, line2: str=None, line3: str=None, overrides_default: bool=None, postal_code: str=None):
        """AddressDto - a model defined in OpenAPI

        :param city: The city of this AddressDto.
        :param country: The country of this AddressDto.
        :param county: The county of this AddressDto.
        :param id: The id of this AddressDto.
        :param line1: The line1 of this AddressDto.
        :param line2: The line2 of this AddressDto.
        :param line3: The line3 of this AddressDto.
        :param overrides_default: The overrides_default of this AddressDto.
        :param postal_code: The postal_code of this AddressDto.
        """
        self.openapi_types = {
            'city': str,
            'country': CdNamePairDto,
            'county': CdNamePairDto,
            'id': int,
            'line1': str,
            'line2': str,
            'line3': str,
            'overrides_default': bool,
            'postal_code': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'county': 'county',
            'id': 'id',
            'line1': 'line1',
            'line2': 'line2',
            'line3': 'line3',
            'overrides_default': 'overridesDefault',
            'postal_code': 'postalCode'
        }

        self._city = city
        self._country = country
        self._county = county
        self._id = id
        self._line1 = line1
        self._line2 = line2
        self._line3 = line3
        self._overrides_default = overrides_default
        self._postal_code = postal_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddressDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddressDto of this AddressDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this AddressDto.

        The city

        :return: The city of this AddressDto.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AddressDto.

        The city

        :param city: The city of this AddressDto.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this AddressDto.


        :return: The country of this AddressDto.
        :rtype: CdNamePairDto
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AddressDto.


        :param country: The country of this AddressDto.
        :type country: CdNamePairDto
        """

        self._country = country

    @property
    def county(self):
        """Gets the county of this AddressDto.


        :return: The county of this AddressDto.
        :rtype: CdNamePairDto
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this AddressDto.


        :param county: The county of this AddressDto.
        :type county: CdNamePairDto
        """

        self._county = county

    @property
    def id(self):
        """Gets the id of this AddressDto.

        The address id

        :return: The id of this AddressDto.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AddressDto.

        The address id

        :param id: The id of this AddressDto.
        :type id: int
        """

        self._id = id

    @property
    def line1(self):
        """Gets the line1 of this AddressDto.

        Address line 1

        :return: The line1 of this AddressDto.
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """Sets the line1 of this AddressDto.

        Address line 1

        :param line1: The line1 of this AddressDto.
        :type line1: str
        """

        self._line1 = line1

    @property
    def line2(self):
        """Gets the line2 of this AddressDto.

        Address line 2

        :return: The line2 of this AddressDto.
        :rtype: str
        """
        return self._line2

    @line2.setter
    def line2(self, line2):
        """Sets the line2 of this AddressDto.

        Address line 2

        :param line2: The line2 of this AddressDto.
        :type line2: str
        """

        self._line2 = line2

    @property
    def line3(self):
        """Gets the line3 of this AddressDto.

        Address line 3

        :return: The line3 of this AddressDto.
        :rtype: str
        """
        return self._line3

    @line3.setter
    def line3(self, line3):
        """Sets the line3 of this AddressDto.

        Address line 3

        :param line3: The line3 of this AddressDto.
        :type line3: str
        """

        self._line3 = line3

    @property
    def overrides_default(self):
        """Gets the overrides_default of this AddressDto.

        Whether this address overrides the default address

        :return: The overrides_default of this AddressDto.
        :rtype: bool
        """
        return self._overrides_default

    @overrides_default.setter
    def overrides_default(self, overrides_default):
        """Sets the overrides_default of this AddressDto.

        Whether this address overrides the default address

        :param overrides_default: The overrides_default of this AddressDto.
        :type overrides_default: bool
        """

        self._overrides_default = overrides_default

    @property
    def postal_code(self):
        """Gets the postal_code of this AddressDto.

        The postal code

        :return: The postal_code of this AddressDto.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this AddressDto.

        The postal code

        :param postal_code: The postal_code of this AddressDto.
        :type postal_code: str
        """

        self._postal_code = postal_code
