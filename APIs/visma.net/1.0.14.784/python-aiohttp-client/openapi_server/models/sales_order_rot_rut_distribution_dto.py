# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SalesOrderRotRutDistributionDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, extra: bool=None, line_id: int=None, personal_id: str=None):
        """SalesOrderRotRutDistributionDto - a model defined in OpenAPI

        :param amount: The amount of this SalesOrderRotRutDistributionDto.
        :param extra: The extra of this SalesOrderRotRutDistributionDto.
        :param line_id: The line_id of this SalesOrderRotRutDistributionDto.
        :param personal_id: The personal_id of this SalesOrderRotRutDistributionDto.
        """
        self.openapi_types = {
            'amount': float,
            'extra': bool,
            'line_id': int,
            'personal_id': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'extra': 'extra',
            'line_id': 'lineId',
            'personal_id': 'personalId'
        }

        self._amount = amount
        self._extra = extra
        self._line_id = line_id
        self._personal_id = personal_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesOrderRotRutDistributionDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SalesOrderRotRutDistributionDto of this SalesOrderRotRutDistributionDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this SalesOrderRotRutDistributionDto.

        The amount

        :return: The amount of this SalesOrderRotRutDistributionDto.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SalesOrderRotRutDistributionDto.

        The amount

        :param amount: The amount of this SalesOrderRotRutDistributionDto.
        :type amount: float
        """

        self._amount = amount

    @property
    def extra(self):
        """Gets the extra of this SalesOrderRotRutDistributionDto.

        Whether this is extra or not

        :return: The extra of this SalesOrderRotRutDistributionDto.
        :rtype: bool
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this SalesOrderRotRutDistributionDto.

        Whether this is extra or not

        :param extra: The extra of this SalesOrderRotRutDistributionDto.
        :type extra: bool
        """

        self._extra = extra

    @property
    def line_id(self):
        """Gets the line_id of this SalesOrderRotRutDistributionDto.

        Reference to the order line

        :return: The line_id of this SalesOrderRotRutDistributionDto.
        :rtype: int
        """
        return self._line_id

    @line_id.setter
    def line_id(self, line_id):
        """Sets the line_id of this SalesOrderRotRutDistributionDto.

        Reference to the order line

        :param line_id: The line_id of this SalesOrderRotRutDistributionDto.
        :type line_id: int
        """

        self._line_id = line_id

    @property
    def personal_id(self):
        """Gets the personal_id of this SalesOrderRotRutDistributionDto.

        The personal id

        :return: The personal_id of this SalesOrderRotRutDistributionDto.
        :rtype: str
        """
        return self._personal_id

    @personal_id.setter
    def personal_id(self, personal_id):
        """Sets the personal_id of this SalesOrderRotRutDistributionDto.

        The personal id

        :param personal_id: The personal_id of this SalesOrderRotRutDistributionDto.
        :type personal_id: str
        """

        self._personal_id = personal_id
