# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.patch_sales_order_billing_dto import PatchSalesOrderBillingDto
from openapi_server.models.patch_sales_order_customer_dto import PatchSalesOrderCustomerDto
from openapi_server.models.patch_sales_order_financial_info_dto import PatchSalesOrderFinancialInfoDto
from openapi_server.models.patch_sales_order_freight_dto import PatchSalesOrderFreightDto
from openapi_server.models.patch_sales_order_payment_settings_dto import PatchSalesOrderPaymentSettingsDto
from openapi_server.models.patch_sales_order_shipping_dto import PatchSalesOrderShippingDto
from openapi_server.models.sales_order_print_dto import SalesOrderPrintDto
from openapi_server import util


class PatchSalesOrderCommand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing: PatchSalesOrderBillingDto=None, branch_id: str=None, cancel_by: datetime=None, currency_id: str=None, customer: PatchSalesOrderCustomerDto=None, _date: datetime=None, description: str=None, financial_information: PatchSalesOrderFinancialInfoDto=None, freight: PatchSalesOrderFreightDto=None, note: str=None, original_order_id: str=None, original_order_type: str=None, owner_id: str=None, payment_settings: PatchSalesOrderPaymentSettingsDto=None, _print: SalesOrderPrintDto=None, project_id: str=None, request_on: datetime=None, sales_person_id: str=None, shipping: PatchSalesOrderShippingDto=None, status: str=None, tax_zone_id: str=None, use_replacement_cost_for_margin_and_profit: bool=None):
        """PatchSalesOrderCommand - a model defined in OpenAPI

        :param billing: The billing of this PatchSalesOrderCommand.
        :param branch_id: The branch_id of this PatchSalesOrderCommand.
        :param cancel_by: The cancel_by of this PatchSalesOrderCommand.
        :param currency_id: The currency_id of this PatchSalesOrderCommand.
        :param customer: The customer of this PatchSalesOrderCommand.
        :param _date: The _date of this PatchSalesOrderCommand.
        :param description: The description of this PatchSalesOrderCommand.
        :param financial_information: The financial_information of this PatchSalesOrderCommand.
        :param freight: The freight of this PatchSalesOrderCommand.
        :param note: The note of this PatchSalesOrderCommand.
        :param original_order_id: The original_order_id of this PatchSalesOrderCommand.
        :param original_order_type: The original_order_type of this PatchSalesOrderCommand.
        :param owner_id: The owner_id of this PatchSalesOrderCommand.
        :param payment_settings: The payment_settings of this PatchSalesOrderCommand.
        :param _print: The _print of this PatchSalesOrderCommand.
        :param project_id: The project_id of this PatchSalesOrderCommand.
        :param request_on: The request_on of this PatchSalesOrderCommand.
        :param sales_person_id: The sales_person_id of this PatchSalesOrderCommand.
        :param shipping: The shipping of this PatchSalesOrderCommand.
        :param status: The status of this PatchSalesOrderCommand.
        :param tax_zone_id: The tax_zone_id of this PatchSalesOrderCommand.
        :param use_replacement_cost_for_margin_and_profit: The use_replacement_cost_for_margin_and_profit of this PatchSalesOrderCommand.
        """
        self.openapi_types = {
            'billing': PatchSalesOrderBillingDto,
            'branch_id': str,
            'cancel_by': datetime,
            'currency_id': str,
            'customer': PatchSalesOrderCustomerDto,
            '_date': datetime,
            'description': str,
            'financial_information': PatchSalesOrderFinancialInfoDto,
            'freight': PatchSalesOrderFreightDto,
            'note': str,
            'original_order_id': str,
            'original_order_type': str,
            'owner_id': str,
            'payment_settings': PatchSalesOrderPaymentSettingsDto,
            '_print': SalesOrderPrintDto,
            'project_id': str,
            'request_on': datetime,
            'sales_person_id': str,
            'shipping': PatchSalesOrderShippingDto,
            'status': str,
            'tax_zone_id': str,
            'use_replacement_cost_for_margin_and_profit': bool
        }

        self.attribute_map = {
            'billing': 'billing',
            'branch_id': 'branchId',
            'cancel_by': 'cancelBy',
            'currency_id': 'currencyId',
            'customer': 'customer',
            '_date': 'date',
            'description': 'description',
            'financial_information': 'financialInformation',
            'freight': 'freight',
            'note': 'note',
            'original_order_id': 'originalOrderId',
            'original_order_type': 'originalOrderType',
            'owner_id': 'ownerId',
            'payment_settings': 'paymentSettings',
            '_print': 'print',
            'project_id': 'projectId',
            'request_on': 'requestOn',
            'sales_person_id': 'salesPersonId',
            'shipping': 'shipping',
            'status': 'status',
            'tax_zone_id': 'taxZoneId',
            'use_replacement_cost_for_margin_and_profit': 'useReplacementCostForMarginAndProfit'
        }

        self._billing = billing
        self._branch_id = branch_id
        self._cancel_by = cancel_by
        self._currency_id = currency_id
        self._customer = customer
        self.__date = _date
        self._description = description
        self._financial_information = financial_information
        self._freight = freight
        self._note = note
        self._original_order_id = original_order_id
        self._original_order_type = original_order_type
        self._owner_id = owner_id
        self._payment_settings = payment_settings
        self.__print = _print
        self._project_id = project_id
        self._request_on = request_on
        self._sales_person_id = sales_person_id
        self._shipping = shipping
        self._status = status
        self._tax_zone_id = tax_zone_id
        self._use_replacement_cost_for_margin_and_profit = use_replacement_cost_for_margin_and_profit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchSalesOrderCommand':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchSalesOrderCommand of this PatchSalesOrderCommand.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing(self):
        """Gets the billing of this PatchSalesOrderCommand.


        :return: The billing of this PatchSalesOrderCommand.
        :rtype: PatchSalesOrderBillingDto
        """
        return self._billing

    @billing.setter
    def billing(self, billing):
        """Sets the billing of this PatchSalesOrderCommand.


        :param billing: The billing of this PatchSalesOrderCommand.
        :type billing: PatchSalesOrderBillingDto
        """

        self._billing = billing

    @property
    def branch_id(self):
        """Gets the branch_id of this PatchSalesOrderCommand.

        The branch with which this order is associated.

        :return: The branch_id of this PatchSalesOrderCommand.
        :rtype: str
        """
        return self._branch_id

    @branch_id.setter
    def branch_id(self, branch_id):
        """Sets the branch_id of this PatchSalesOrderCommand.

        The branch with which this order is associated.

        :param branch_id: The branch_id of this PatchSalesOrderCommand.
        :type branch_id: str
        """
        if branch_id is not None and len(branch_id) > 30:
            raise ValueError("Invalid value for `branch_id`, length must be less than or equal to `30`")

        self._branch_id = branch_id

    @property
    def cancel_by(self):
        """Gets the cancel_by of this PatchSalesOrderCommand.

        Cancel by date for the order.  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The cancel_by of this PatchSalesOrderCommand.
        :rtype: datetime
        """
        return self._cancel_by

    @cancel_by.setter
    def cancel_by(self, cancel_by):
        """Sets the cancel_by of this PatchSalesOrderCommand.

        Cancel by date for the order.  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :param cancel_by: The cancel_by of this PatchSalesOrderCommand.
        :type cancel_by: datetime
        """

        self._cancel_by = cancel_by

    @property
    def currency_id(self):
        """Gets the currency_id of this PatchSalesOrderCommand.

        Override the CurrencyId for the order. Must be a valid currency Id.

        :return: The currency_id of this PatchSalesOrderCommand.
        :rtype: str
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this PatchSalesOrderCommand.

        Override the CurrencyId for the order. Must be a valid currency Id.

        :param currency_id: The currency_id of this PatchSalesOrderCommand.
        :type currency_id: str
        """
        if currency_id is not None and len(currency_id) > 5:
            raise ValueError("Invalid value for `currency_id`, length must be less than or equal to `5`")

        self._currency_id = currency_id

    @property
    def customer(self):
        """Gets the customer of this PatchSalesOrderCommand.


        :return: The customer of this PatchSalesOrderCommand.
        :rtype: PatchSalesOrderCustomerDto
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this PatchSalesOrderCommand.


        :param customer: The customer of this PatchSalesOrderCommand.
        :type customer: PatchSalesOrderCustomerDto
        """

        self._customer = customer

    @property
    def _date(self):
        """Gets the _date of this PatchSalesOrderCommand.

        Sets the order date of the order.  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The _date of this PatchSalesOrderCommand.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this PatchSalesOrderCommand.

        Sets the order date of the order.  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :param _date: The _date of this PatchSalesOrderCommand.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this PatchSalesOrderCommand.

        Description for the order  <br>Note that text fields should not contain any personally identifiable or otherwise sensitive data

        :return: The description of this PatchSalesOrderCommand.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PatchSalesOrderCommand.

        Description for the order  <br>Note that text fields should not contain any personally identifiable or otherwise sensitive data

        :param description: The description of this PatchSalesOrderCommand.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")

        self._description = description

    @property
    def financial_information(self):
        """Gets the financial_information of this PatchSalesOrderCommand.


        :return: The financial_information of this PatchSalesOrderCommand.
        :rtype: PatchSalesOrderFinancialInfoDto
        """
        return self._financial_information

    @financial_information.setter
    def financial_information(self, financial_information):
        """Sets the financial_information of this PatchSalesOrderCommand.


        :param financial_information: The financial_information of this PatchSalesOrderCommand.
        :type financial_information: PatchSalesOrderFinancialInfoDto
        """

        self._financial_information = financial_information

    @property
    def freight(self):
        """Gets the freight of this PatchSalesOrderCommand.


        :return: The freight of this PatchSalesOrderCommand.
        :rtype: PatchSalesOrderFreightDto
        """
        return self._freight

    @freight.setter
    def freight(self, freight):
        """Sets the freight of this PatchSalesOrderCommand.


        :param freight: The freight of this PatchSalesOrderCommand.
        :type freight: PatchSalesOrderFreightDto
        """

        self._freight = freight

    @property
    def note(self):
        """Gets the note of this PatchSalesOrderCommand.

        Any note to apply to the order header.

        :return: The note of this PatchSalesOrderCommand.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this PatchSalesOrderCommand.

        Any note to apply to the order header.

        :param note: The note of this PatchSalesOrderCommand.
        :type note: str
        """
        if note is not None and len(note) > 2048:
            raise ValueError("Invalid value for `note`, length must be less than or equal to `2048`")

        self._note = note

    @property
    def original_order_id(self):
        """Gets the original_order_id of this PatchSalesOrderCommand.

        Sets the unique identifier of the original order

        :return: The original_order_id of this PatchSalesOrderCommand.
        :rtype: str
        """
        return self._original_order_id

    @original_order_id.setter
    def original_order_id(self, original_order_id):
        """Sets the original_order_id of this PatchSalesOrderCommand.

        Sets the unique identifier of the original order

        :param original_order_id: The original_order_id of this PatchSalesOrderCommand.
        :type original_order_id: str
        """
        if original_order_id is not None and len(original_order_id) > 15:
            raise ValueError("Invalid value for `original_order_id`, length must be less than or equal to `15`")

        self._original_order_id = original_order_id

    @property
    def original_order_type(self):
        """Gets the original_order_type of this PatchSalesOrderCommand.

        Sets the type code for the original sales order

        :return: The original_order_type of this PatchSalesOrderCommand.
        :rtype: str
        """
        return self._original_order_type

    @original_order_type.setter
    def original_order_type(self, original_order_type):
        """Sets the original_order_type of this PatchSalesOrderCommand.

        Sets the type code for the original sales order

        :param original_order_type: The original_order_type of this PatchSalesOrderCommand.
        :type original_order_type: str
        """
        if original_order_type is not None and len(original_order_type) > 2:
            raise ValueError("Invalid value for `original_order_type`, length must be less than or equal to `2`")

        self._original_order_type = original_order_type

    @property
    def owner_id(self):
        """Gets the owner_id of this PatchSalesOrderCommand.

        Sets the owner (employee) for the order

        :return: The owner_id of this PatchSalesOrderCommand.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this PatchSalesOrderCommand.

        Sets the owner (employee) for the order

        :param owner_id: The owner_id of this PatchSalesOrderCommand.
        :type owner_id: str
        """

        self._owner_id = owner_id

    @property
    def payment_settings(self):
        """Gets the payment_settings of this PatchSalesOrderCommand.


        :return: The payment_settings of this PatchSalesOrderCommand.
        :rtype: PatchSalesOrderPaymentSettingsDto
        """
        return self._payment_settings

    @payment_settings.setter
    def payment_settings(self, payment_settings):
        """Sets the payment_settings of this PatchSalesOrderCommand.


        :param payment_settings: The payment_settings of this PatchSalesOrderCommand.
        :type payment_settings: PatchSalesOrderPaymentSettingsDto
        """

        self._payment_settings = payment_settings

    @property
    def _print(self):
        """Gets the _print of this PatchSalesOrderCommand.


        :return: The _print of this PatchSalesOrderCommand.
        :rtype: SalesOrderPrintDto
        """
        return self.__print

    @_print.setter
    def _print(self, _print):
        """Sets the _print of this PatchSalesOrderCommand.


        :param _print: The _print of this PatchSalesOrderCommand.
        :type _print: SalesOrderPrintDto
        """

        self.__print = _print

    @property
    def project_id(self):
        """Gets the project_id of this PatchSalesOrderCommand.

        The project with which this sales order is associated

        :return: The project_id of this PatchSalesOrderCommand.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this PatchSalesOrderCommand.

        The project with which this sales order is associated

        :param project_id: The project_id of this PatchSalesOrderCommand.
        :type project_id: str
        """
        if project_id is not None and len(project_id) > 30:
            raise ValueError("Invalid value for `project_id`, length must be less than or equal to `30`")

        self._project_id = project_id

    @property
    def request_on(self):
        """Gets the request_on of this PatchSalesOrderCommand.

        Sets the requested on date for the order.  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The request_on of this PatchSalesOrderCommand.
        :rtype: datetime
        """
        return self._request_on

    @request_on.setter
    def request_on(self, request_on):
        """Sets the request_on of this PatchSalesOrderCommand.

        Sets the requested on date for the order.  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :param request_on: The request_on of this PatchSalesOrderCommand.
        :type request_on: datetime
        """

        self._request_on = request_on

    @property
    def sales_person_id(self):
        """Gets the sales_person_id of this PatchSalesOrderCommand.

        Sets default sales person for the order

        :return: The sales_person_id of this PatchSalesOrderCommand.
        :rtype: str
        """
        return self._sales_person_id

    @sales_person_id.setter
    def sales_person_id(self, sales_person_id):
        """Sets the sales_person_id of this PatchSalesOrderCommand.

        Sets default sales person for the order

        :param sales_person_id: The sales_person_id of this PatchSalesOrderCommand.
        :type sales_person_id: str
        """
        if sales_person_id is not None and len(sales_person_id) > 15:
            raise ValueError("Invalid value for `sales_person_id`, length must be less than or equal to `15`")

        self._sales_person_id = sales_person_id

    @property
    def shipping(self):
        """Gets the shipping of this PatchSalesOrderCommand.


        :return: The shipping of this PatchSalesOrderCommand.
        :rtype: PatchSalesOrderShippingDto
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this PatchSalesOrderCommand.


        :param shipping: The shipping of this PatchSalesOrderCommand.
        :type shipping: PatchSalesOrderShippingDto
        """

        self._shipping = shipping

    @property
    def status(self):
        """Gets the status of this PatchSalesOrderCommand.

        Sets the status code for the order. Must be \"Open\", \"Hold\" or \"BackOrder\".

        :return: The status of this PatchSalesOrderCommand.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PatchSalesOrderCommand.

        Sets the status code for the order. Must be \"Open\", \"Hold\" or \"BackOrder\".

        :param status: The status of this PatchSalesOrderCommand.
        :type status: str
        """

        self._status = status

    @property
    def tax_zone_id(self):
        """Gets the tax_zone_id of this PatchSalesOrderCommand.

        Override the TaxZoneId for the order

        :return: The tax_zone_id of this PatchSalesOrderCommand.
        :rtype: str
        """
        return self._tax_zone_id

    @tax_zone_id.setter
    def tax_zone_id(self, tax_zone_id):
        """Sets the tax_zone_id of this PatchSalesOrderCommand.

        Override the TaxZoneId for the order

        :param tax_zone_id: The tax_zone_id of this PatchSalesOrderCommand.
        :type tax_zone_id: str
        """

        self._tax_zone_id = tax_zone_id

    @property
    def use_replacement_cost_for_margin_and_profit(self):
        """Gets the use_replacement_cost_for_margin_and_profit of this PatchSalesOrderCommand.

        When this option is set to `true`, the `costTotal` of the order will be calculated based on `replacementUnitCost`.  If option is set to `false`, the `costTotal` will be calculated based on `unitCost`

        :return: The use_replacement_cost_for_margin_and_profit of this PatchSalesOrderCommand.
        :rtype: bool
        """
        return self._use_replacement_cost_for_margin_and_profit

    @use_replacement_cost_for_margin_and_profit.setter
    def use_replacement_cost_for_margin_and_profit(self, use_replacement_cost_for_margin_and_profit):
        """Sets the use_replacement_cost_for_margin_and_profit of this PatchSalesOrderCommand.

        When this option is set to `true`, the `costTotal` of the order will be calculated based on `replacementUnitCost`.  If option is set to `false`, the `costTotal` will be calculated based on `unitCost`

        :param use_replacement_cost_for_margin_and_profit: The use_replacement_cost_for_margin_and_profit of this PatchSalesOrderCommand.
        :type use_replacement_cost_for_margin_and_profit: bool
        """

        self._use_replacement_cost_for_margin_and_profit = use_replacement_cost_for_margin_and_profit
