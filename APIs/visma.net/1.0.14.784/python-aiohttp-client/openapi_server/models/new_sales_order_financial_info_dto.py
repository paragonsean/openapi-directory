# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewSalesOrderFinancialInfoDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cash_discount_date: datetime=None, due_date: datetime=None, invoice_date: datetime=None, invoice_id: str=None, invoice_separately: bool=None, post_period: str=None):
        """NewSalesOrderFinancialInfoDto - a model defined in OpenAPI

        :param cash_discount_date: The cash_discount_date of this NewSalesOrderFinancialInfoDto.
        :param due_date: The due_date of this NewSalesOrderFinancialInfoDto.
        :param invoice_date: The invoice_date of this NewSalesOrderFinancialInfoDto.
        :param invoice_id: The invoice_id of this NewSalesOrderFinancialInfoDto.
        :param invoice_separately: The invoice_separately of this NewSalesOrderFinancialInfoDto.
        :param post_period: The post_period of this NewSalesOrderFinancialInfoDto.
        """
        self.openapi_types = {
            'cash_discount_date': datetime,
            'due_date': datetime,
            'invoice_date': datetime,
            'invoice_id': str,
            'invoice_separately': bool,
            'post_period': str
        }

        self.attribute_map = {
            'cash_discount_date': 'cashDiscountDate',
            'due_date': 'dueDate',
            'invoice_date': 'invoiceDate',
            'invoice_id': 'invoiceId',
            'invoice_separately': 'invoiceSeparately',
            'post_period': 'postPeriod'
        }

        self._cash_discount_date = cash_discount_date
        self._due_date = due_date
        self._invoice_date = invoice_date
        self._invoice_id = invoice_id
        self._invoice_separately = invoice_separately
        self._post_period = post_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewSalesOrderFinancialInfoDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewSalesOrderFinancialInfoDto of this NewSalesOrderFinancialInfoDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cash_discount_date(self):
        """Gets the cash_discount_date of this NewSalesOrderFinancialInfoDto.

        The date when the cash discount is available for the invoice created for the order. Default date is set based on the terms selected in the order.  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The cash_discount_date of this NewSalesOrderFinancialInfoDto.
        :rtype: datetime
        """
        return self._cash_discount_date

    @cash_discount_date.setter
    def cash_discount_date(self, cash_discount_date):
        """Sets the cash_discount_date of this NewSalesOrderFinancialInfoDto.

        The date when the cash discount is available for the invoice created for the order. Default date is set based on the terms selected in the order.  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :param cash_discount_date: The cash_discount_date of this NewSalesOrderFinancialInfoDto.
        :type cash_discount_date: datetime
        """

        self._cash_discount_date = cash_discount_date

    @property
    def due_date(self):
        """Gets the due_date of this NewSalesOrderFinancialInfoDto.

        The due date for the invoice created for the order. Default due date is set according to the credit terms.  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The due_date of this NewSalesOrderFinancialInfoDto.
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this NewSalesOrderFinancialInfoDto.

        The due date for the invoice created for the order. Default due date is set according to the credit terms.  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :param due_date: The due_date of this NewSalesOrderFinancialInfoDto.
        :type due_date: datetime
        """

        self._due_date = due_date

    @property
    def invoice_date(self):
        """Gets the invoice_date of this NewSalesOrderFinancialInfoDto.

        Sets the invoice date of the invoice that will be generated for the order.  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The invoice_date of this NewSalesOrderFinancialInfoDto.
        :rtype: datetime
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this NewSalesOrderFinancialInfoDto.

        Sets the invoice date of the invoice that will be generated for the order.  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :param invoice_date: The invoice_date of this NewSalesOrderFinancialInfoDto.
        :type invoice_date: datetime
        """

        self._invoice_date = invoice_date

    @property
    def invoice_id(self):
        """Gets the invoice_id of this NewSalesOrderFinancialInfoDto.

        The reference number of the invoice generated for this order.  This can be used if the numbering sequence assigned to invoices is configured for manual numbering.

        :return: The invoice_id of this NewSalesOrderFinancialInfoDto.
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this NewSalesOrderFinancialInfoDto.

        The reference number of the invoice generated for this order.  This can be used if the numbering sequence assigned to invoices is configured for manual numbering.

        :param invoice_id: The invoice_id of this NewSalesOrderFinancialInfoDto.
        :type invoice_id: str
        """
        if invoice_id is not None and len(invoice_id) > 15:
            raise ValueError("Invalid value for `invoice_id`, length must be less than or equal to `15`")

        self._invoice_id = invoice_id

    @property
    def invoice_separately(self):
        """Gets the invoice_separately of this NewSalesOrderFinancialInfoDto.

        Sets if the order should be invoiced/billed separately

        :return: The invoice_separately of this NewSalesOrderFinancialInfoDto.
        :rtype: bool
        """
        return self._invoice_separately

    @invoice_separately.setter
    def invoice_separately(self, invoice_separately):
        """Sets the invoice_separately of this NewSalesOrderFinancialInfoDto.

        Sets if the order should be invoiced/billed separately

        :param invoice_separately: The invoice_separately of this NewSalesOrderFinancialInfoDto.
        :type invoice_separately: bool
        """

        self._invoice_separately = invoice_separately

    @property
    def post_period(self):
        """Gets the post_period of this NewSalesOrderFinancialInfoDto.

        The post period for the invoice. This can be used to override the financial period. Must be a valid existing financial period.

        :return: The post_period of this NewSalesOrderFinancialInfoDto.
        :rtype: str
        """
        return self._post_period

    @post_period.setter
    def post_period(self, post_period):
        """Sets the post_period of this NewSalesOrderFinancialInfoDto.

        The post period for the invoice. This can be used to override the financial period. Must be a valid existing financial period.

        :param post_period: The post_period of this NewSalesOrderFinancialInfoDto.
        :type post_period: str
        """
        if post_period is not None and len(post_period) > 6:
            raise ValueError("Invalid value for `post_period`, length must be less than or equal to `6`")

        self._post_period = post_period
