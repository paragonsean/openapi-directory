# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment_dto import AttachmentDto
from openapi_server.models.cd_description_pair_dto import CdDescriptionPairDto
from openapi_server.models.employee_dto import EmployeeDto
from openapi_server.models.project_dto import ProjectDto
from openapi_server.models.sales_order_billing_dto import SalesOrderBillingDto
from openapi_server.models.sales_order_customer_dto import SalesOrderCustomerDto
from openapi_server.models.sales_order_financial_info_dto import SalesOrderFinancialInfoDto
from openapi_server.models.sales_order_freight_dto import SalesOrderFreightDto
from openapi_server.models.sales_order_origin_dto import SalesOrderOriginDto
from openapi_server.models.sales_order_payment_dto import SalesOrderPaymentDto
from openapi_server.models.sales_order_print_dto import SalesOrderPrintDto
from openapi_server.models.sales_order_shipping_dto import SalesOrderShippingDto
from openapi_server.models.sales_order_status_dto import SalesOrderStatusDto
from openapi_server.models.sales_order_totals_dto import SalesOrderTotalsDto
from openapi_server.models.sales_person_dto import SalesPersonDto
from openapi_server import util


class SalesOrderDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[AttachmentDto]=None, billing: SalesOrderBillingDto=None, branch: CdDescriptionPairDto=None, cancel_by: datetime=None, created_by: str=None, currency_id: str=None, customer: SalesOrderCustomerDto=None, _date: datetime=None, description: str=None, financial_information: SalesOrderFinancialInfoDto=None, freight: SalesOrderFreightDto=None, is_rot_rut_deductable: bool=None, last_modified: datetime=None, note: str=None, order_id: str=None, order_qty: float=None, origin: SalesOrderOriginDto=None, original_order_id: str=None, original_order_type: str=None, owner: EmployeeDto=None, payment_settings: SalesOrderPaymentDto=None, _print: SalesOrderPrintDto=None, project: ProjectDto=None, request_on: datetime=None, sales_person: SalesPersonDto=None, shipping: SalesOrderShippingDto=None, status: SalesOrderStatusDto=None, totals: SalesOrderTotalsDto=None, type: str=None, use_replacement_cost_for_margin_and_profit: bool=None, version: str=None):
        """SalesOrderDto - a model defined in OpenAPI

        :param attachments: The attachments of this SalesOrderDto.
        :param billing: The billing of this SalesOrderDto.
        :param branch: The branch of this SalesOrderDto.
        :param cancel_by: The cancel_by of this SalesOrderDto.
        :param created_by: The created_by of this SalesOrderDto.
        :param currency_id: The currency_id of this SalesOrderDto.
        :param customer: The customer of this SalesOrderDto.
        :param _date: The _date of this SalesOrderDto.
        :param description: The description of this SalesOrderDto.
        :param financial_information: The financial_information of this SalesOrderDto.
        :param freight: The freight of this SalesOrderDto.
        :param is_rot_rut_deductable: The is_rot_rut_deductable of this SalesOrderDto.
        :param last_modified: The last_modified of this SalesOrderDto.
        :param note: The note of this SalesOrderDto.
        :param order_id: The order_id of this SalesOrderDto.
        :param order_qty: The order_qty of this SalesOrderDto.
        :param origin: The origin of this SalesOrderDto.
        :param original_order_id: The original_order_id of this SalesOrderDto.
        :param original_order_type: The original_order_type of this SalesOrderDto.
        :param owner: The owner of this SalesOrderDto.
        :param payment_settings: The payment_settings of this SalesOrderDto.
        :param _print: The _print of this SalesOrderDto.
        :param project: The project of this SalesOrderDto.
        :param request_on: The request_on of this SalesOrderDto.
        :param sales_person: The sales_person of this SalesOrderDto.
        :param shipping: The shipping of this SalesOrderDto.
        :param status: The status of this SalesOrderDto.
        :param totals: The totals of this SalesOrderDto.
        :param type: The type of this SalesOrderDto.
        :param use_replacement_cost_for_margin_and_profit: The use_replacement_cost_for_margin_and_profit of this SalesOrderDto.
        :param version: The version of this SalesOrderDto.
        """
        self.openapi_types = {
            'attachments': List[AttachmentDto],
            'billing': SalesOrderBillingDto,
            'branch': CdDescriptionPairDto,
            'cancel_by': datetime,
            'created_by': str,
            'currency_id': str,
            'customer': SalesOrderCustomerDto,
            '_date': datetime,
            'description': str,
            'financial_information': SalesOrderFinancialInfoDto,
            'freight': SalesOrderFreightDto,
            'is_rot_rut_deductable': bool,
            'last_modified': datetime,
            'note': str,
            'order_id': str,
            'order_qty': float,
            'origin': SalesOrderOriginDto,
            'original_order_id': str,
            'original_order_type': str,
            'owner': EmployeeDto,
            'payment_settings': SalesOrderPaymentDto,
            '_print': SalesOrderPrintDto,
            'project': ProjectDto,
            'request_on': datetime,
            'sales_person': SalesPersonDto,
            'shipping': SalesOrderShippingDto,
            'status': SalesOrderStatusDto,
            'totals': SalesOrderTotalsDto,
            'type': str,
            'use_replacement_cost_for_margin_and_profit': bool,
            'version': str
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'billing': 'billing',
            'branch': 'branch',
            'cancel_by': 'cancelBy',
            'created_by': 'createdBy',
            'currency_id': 'currencyId',
            'customer': 'customer',
            '_date': 'date',
            'description': 'description',
            'financial_information': 'financialInformation',
            'freight': 'freight',
            'is_rot_rut_deductable': 'isRotRutDeductable',
            'last_modified': 'lastModified',
            'note': 'note',
            'order_id': 'orderId',
            'order_qty': 'orderQty',
            'origin': 'origin',
            'original_order_id': 'originalOrderId',
            'original_order_type': 'originalOrderType',
            'owner': 'owner',
            'payment_settings': 'paymentSettings',
            '_print': 'print',
            'project': 'project',
            'request_on': 'requestOn',
            'sales_person': 'salesPerson',
            'shipping': 'shipping',
            'status': 'status',
            'totals': 'totals',
            'type': 'type',
            'use_replacement_cost_for_margin_and_profit': 'useReplacementCostForMarginAndProfit',
            'version': 'version'
        }

        self._attachments = attachments
        self._billing = billing
        self._branch = branch
        self._cancel_by = cancel_by
        self._created_by = created_by
        self._currency_id = currency_id
        self._customer = customer
        self.__date = _date
        self._description = description
        self._financial_information = financial_information
        self._freight = freight
        self._is_rot_rut_deductable = is_rot_rut_deductable
        self._last_modified = last_modified
        self._note = note
        self._order_id = order_id
        self._order_qty = order_qty
        self._origin = origin
        self._original_order_id = original_order_id
        self._original_order_type = original_order_type
        self._owner = owner
        self._payment_settings = payment_settings
        self.__print = _print
        self._project = project
        self._request_on = request_on
        self._sales_person = sales_person
        self._shipping = shipping
        self._status = status
        self._totals = totals
        self._type = type
        self._use_replacement_cost_for_margin_and_profit = use_replacement_cost_for_margin_and_profit
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesOrderDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SalesOrderDto of this SalesOrderDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this SalesOrderDto.

        The attachments of the order

        :return: The attachments of this SalesOrderDto.
        :rtype: List[AttachmentDto]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this SalesOrderDto.

        The attachments of the order

        :param attachments: The attachments of this SalesOrderDto.
        :type attachments: List[AttachmentDto]
        """

        self._attachments = attachments

    @property
    def billing(self):
        """Gets the billing of this SalesOrderDto.


        :return: The billing of this SalesOrderDto.
        :rtype: SalesOrderBillingDto
        """
        return self._billing

    @billing.setter
    def billing(self, billing):
        """Sets the billing of this SalesOrderDto.


        :param billing: The billing of this SalesOrderDto.
        :type billing: SalesOrderBillingDto
        """

        self._billing = billing

    @property
    def branch(self):
        """Gets the branch of this SalesOrderDto.


        :return: The branch of this SalesOrderDto.
        :rtype: CdDescriptionPairDto
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this SalesOrderDto.


        :param branch: The branch of this SalesOrderDto.
        :type branch: CdDescriptionPairDto
        """

        self._branch = branch

    @property
    def cancel_by(self):
        """Gets the cancel_by of this SalesOrderDto.

        The cancel date for the order  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The cancel_by of this SalesOrderDto.
        :rtype: datetime
        """
        return self._cancel_by

    @cancel_by.setter
    def cancel_by(self, cancel_by):
        """Sets the cancel_by of this SalesOrderDto.

        The cancel date for the order  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :param cancel_by: The cancel_by of this SalesOrderDto.
        :type cancel_by: datetime
        """

        self._cancel_by = cancel_by

    @property
    def created_by(self):
        """Gets the created_by of this SalesOrderDto.

        The user name of the creator of the order. If the order was created by an API call this field will be null or empty.

        :return: The created_by of this SalesOrderDto.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this SalesOrderDto.

        The user name of the creator of the order. If the order was created by an API call this field will be null or empty.

        :param created_by: The created_by of this SalesOrderDto.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def currency_id(self):
        """Gets the currency_id of this SalesOrderDto.

        CurrencyId for the order.

        :return: The currency_id of this SalesOrderDto.
        :rtype: str
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this SalesOrderDto.

        CurrencyId for the order.

        :param currency_id: The currency_id of this SalesOrderDto.
        :type currency_id: str
        """

        self._currency_id = currency_id

    @property
    def customer(self):
        """Gets the customer of this SalesOrderDto.


        :return: The customer of this SalesOrderDto.
        :rtype: SalesOrderCustomerDto
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this SalesOrderDto.


        :param customer: The customer of this SalesOrderDto.
        :type customer: SalesOrderCustomerDto
        """

        self._customer = customer

    @property
    def _date(self):
        """Gets the _date of this SalesOrderDto.

        Date the order was submitted  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The _date of this SalesOrderDto.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this SalesOrderDto.

        Date the order was submitted  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :param _date: The _date of this SalesOrderDto.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this SalesOrderDto.

        Description of the order

        :return: The description of this SalesOrderDto.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SalesOrderDto.

        Description of the order

        :param description: The description of this SalesOrderDto.
        :type description: str
        """

        self._description = description

    @property
    def financial_information(self):
        """Gets the financial_information of this SalesOrderDto.


        :return: The financial_information of this SalesOrderDto.
        :rtype: SalesOrderFinancialInfoDto
        """
        return self._financial_information

    @financial_information.setter
    def financial_information(self, financial_information):
        """Sets the financial_information of this SalesOrderDto.


        :param financial_information: The financial_information of this SalesOrderDto.
        :type financial_information: SalesOrderFinancialInfoDto
        """

        self._financial_information = financial_information

    @property
    def freight(self):
        """Gets the freight of this SalesOrderDto.


        :return: The freight of this SalesOrderDto.
        :rtype: SalesOrderFreightDto
        """
        return self._freight

    @freight.setter
    def freight(self, freight):
        """Sets the freight of this SalesOrderDto.


        :param freight: The freight of this SalesOrderDto.
        :type freight: SalesOrderFreightDto
        """

        self._freight = freight

    @property
    def is_rot_rut_deductable(self):
        """Gets the is_rot_rut_deductable of this SalesOrderDto.

        Whether the order is ROT/RUT deductible

        :return: The is_rot_rut_deductable of this SalesOrderDto.
        :rtype: bool
        """
        return self._is_rot_rut_deductable

    @is_rot_rut_deductable.setter
    def is_rot_rut_deductable(self, is_rot_rut_deductable):
        """Sets the is_rot_rut_deductable of this SalesOrderDto.

        Whether the order is ROT/RUT deductible

        :param is_rot_rut_deductable: The is_rot_rut_deductable of this SalesOrderDto.
        :type is_rot_rut_deductable: bool
        """

        self._is_rot_rut_deductable = is_rot_rut_deductable

    @property
    def last_modified(self):
        """Gets the last_modified of this SalesOrderDto.

        Date the order was last modified  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The last_modified of this SalesOrderDto.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this SalesOrderDto.

        Date the order was last modified  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :param last_modified: The last_modified of this SalesOrderDto.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def note(self):
        """Gets the note of this SalesOrderDto.

        Any notes on the order

        :return: The note of this SalesOrderDto.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this SalesOrderDto.

        Any notes on the order

        :param note: The note of this SalesOrderDto.
        :type note: str
        """

        self._note = note

    @property
    def order_id(self):
        """Gets the order_id of this SalesOrderDto.

        The unique identifier of the order

        :return: The order_id of this SalesOrderDto.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this SalesOrderDto.

        The unique identifier of the order

        :param order_id: The order_id of this SalesOrderDto.
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def order_qty(self):
        """Gets the order_qty of this SalesOrderDto.

        The total quantity of inventory items in the order

        :return: The order_qty of this SalesOrderDto.
        :rtype: float
        """
        return self._order_qty

    @order_qty.setter
    def order_qty(self, order_qty):
        """Sets the order_qty of this SalesOrderDto.

        The total quantity of inventory items in the order

        :param order_qty: The order_qty of this SalesOrderDto.
        :type order_qty: float
        """

        self._order_qty = order_qty

    @property
    def origin(self):
        """Gets the origin of this SalesOrderDto.


        :return: The origin of this SalesOrderDto.
        :rtype: SalesOrderOriginDto
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this SalesOrderDto.


        :param origin: The origin of this SalesOrderDto.
        :type origin: SalesOrderOriginDto
        """

        self._origin = origin

    @property
    def original_order_id(self):
        """Gets the original_order_id of this SalesOrderDto.

        The unique identifier of the original order

        :return: The original_order_id of this SalesOrderDto.
        :rtype: str
        """
        return self._original_order_id

    @original_order_id.setter
    def original_order_id(self, original_order_id):
        """Sets the original_order_id of this SalesOrderDto.

        The unique identifier of the original order

        :param original_order_id: The original_order_id of this SalesOrderDto.
        :type original_order_id: str
        """

        self._original_order_id = original_order_id

    @property
    def original_order_type(self):
        """Gets the original_order_type of this SalesOrderDto.

        The type code for the original sales order

        :return: The original_order_type of this SalesOrderDto.
        :rtype: str
        """
        return self._original_order_type

    @original_order_type.setter
    def original_order_type(self, original_order_type):
        """Sets the original_order_type of this SalesOrderDto.

        The type code for the original sales order

        :param original_order_type: The original_order_type of this SalesOrderDto.
        :type original_order_type: str
        """

        self._original_order_type = original_order_type

    @property
    def owner(self):
        """Gets the owner of this SalesOrderDto.


        :return: The owner of this SalesOrderDto.
        :rtype: EmployeeDto
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this SalesOrderDto.


        :param owner: The owner of this SalesOrderDto.
        :type owner: EmployeeDto
        """

        self._owner = owner

    @property
    def payment_settings(self):
        """Gets the payment_settings of this SalesOrderDto.


        :return: The payment_settings of this SalesOrderDto.
        :rtype: SalesOrderPaymentDto
        """
        return self._payment_settings

    @payment_settings.setter
    def payment_settings(self, payment_settings):
        """Sets the payment_settings of this SalesOrderDto.


        :param payment_settings: The payment_settings of this SalesOrderDto.
        :type payment_settings: SalesOrderPaymentDto
        """

        self._payment_settings = payment_settings

    @property
    def _print(self):
        """Gets the _print of this SalesOrderDto.


        :return: The _print of this SalesOrderDto.
        :rtype: SalesOrderPrintDto
        """
        return self.__print

    @_print.setter
    def _print(self, _print):
        """Sets the _print of this SalesOrderDto.


        :param _print: The _print of this SalesOrderDto.
        :type _print: SalesOrderPrintDto
        """

        self.__print = _print

    @property
    def project(self):
        """Gets the project of this SalesOrderDto.


        :return: The project of this SalesOrderDto.
        :rtype: ProjectDto
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this SalesOrderDto.


        :param project: The project of this SalesOrderDto.
        :type project: ProjectDto
        """

        self._project = project

    @property
    def request_on(self):
        """Gets the request_on of this SalesOrderDto.

        Date the order was requested  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The request_on of this SalesOrderDto.
        :rtype: datetime
        """
        return self._request_on

    @request_on.setter
    def request_on(self, request_on):
        """Sets the request_on of this SalesOrderDto.

        Date the order was requested  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :param request_on: The request_on of this SalesOrderDto.
        :type request_on: datetime
        """

        self._request_on = request_on

    @property
    def sales_person(self):
        """Gets the sales_person of this SalesOrderDto.


        :return: The sales_person of this SalesOrderDto.
        :rtype: SalesPersonDto
        """
        return self._sales_person

    @sales_person.setter
    def sales_person(self, sales_person):
        """Sets the sales_person of this SalesOrderDto.


        :param sales_person: The sales_person of this SalesOrderDto.
        :type sales_person: SalesPersonDto
        """

        self._sales_person = sales_person

    @property
    def shipping(self):
        """Gets the shipping of this SalesOrderDto.


        :return: The shipping of this SalesOrderDto.
        :rtype: SalesOrderShippingDto
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this SalesOrderDto.


        :param shipping: The shipping of this SalesOrderDto.
        :type shipping: SalesOrderShippingDto
        """

        self._shipping = shipping

    @property
    def status(self):
        """Gets the status of this SalesOrderDto.


        :return: The status of this SalesOrderDto.
        :rtype: SalesOrderStatusDto
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SalesOrderDto.


        :param status: The status of this SalesOrderDto.
        :type status: SalesOrderStatusDto
        """

        self._status = status

    @property
    def totals(self):
        """Gets the totals of this SalesOrderDto.


        :return: The totals of this SalesOrderDto.
        :rtype: SalesOrderTotalsDto
        """
        return self._totals

    @totals.setter
    def totals(self, totals):
        """Sets the totals of this SalesOrderDto.


        :param totals: The totals of this SalesOrderDto.
        :type totals: SalesOrderTotalsDto
        """

        self._totals = totals

    @property
    def type(self):
        """Gets the type of this SalesOrderDto.

        The type code for the sales order

        :return: The type of this SalesOrderDto.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SalesOrderDto.

        The type code for the sales order

        :param type: The type of this SalesOrderDto.
        :type type: str
        """

        self._type = type

    @property
    def use_replacement_cost_for_margin_and_profit(self):
        """Gets the use_replacement_cost_for_margin_and_profit of this SalesOrderDto.

        When this option is set to `true`, the `costTotal` of the order will be calculated based on `replacementUnitCost`.  If option is set to `false`, the `costTotal` will be calculated based on `unitCost`

        :return: The use_replacement_cost_for_margin_and_profit of this SalesOrderDto.
        :rtype: bool
        """
        return self._use_replacement_cost_for_margin_and_profit

    @use_replacement_cost_for_margin_and_profit.setter
    def use_replacement_cost_for_margin_and_profit(self, use_replacement_cost_for_margin_and_profit):
        """Sets the use_replacement_cost_for_margin_and_profit of this SalesOrderDto.

        When this option is set to `true`, the `costTotal` of the order will be calculated based on `replacementUnitCost`.  If option is set to `false`, the `costTotal` will be calculated based on `unitCost`

        :param use_replacement_cost_for_margin_and_profit: The use_replacement_cost_for_margin_and_profit of this SalesOrderDto.
        :type use_replacement_cost_for_margin_and_profit: bool
        """

        self._use_replacement_cost_for_margin_and_profit = use_replacement_cost_for_margin_and_profit

    @property
    def version(self):
        """Gets the version of this SalesOrderDto.

        An internal order version used for detecting concurrent updates to an order

        :return: The version of this SalesOrderDto.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SalesOrderDto.

        An internal order version used for detecting concurrent updates to an order

        :param version: The version of this SalesOrderDto.
        :type version: str
        """

        self._version = version
