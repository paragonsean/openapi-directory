# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cd_description_pair_dto import CdDescriptionPairDto
from openapi_server import util


class SalesOrderDiscountDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discount_amount: float=None, discount_id: str=None, discount_percent: float=None, discount_sequence_id: str=None, discountable_amount: float=None, discountable_quantity: float=None, free_item: CdDescriptionPairDto=None, free_item_quantity: float=None, is_manual: bool=None, manual_order_index: int=None, skip_discount: bool=None, type: str=None):
        """SalesOrderDiscountDto - a model defined in OpenAPI

        :param discount_amount: The discount_amount of this SalesOrderDiscountDto.
        :param discount_id: The discount_id of this SalesOrderDiscountDto.
        :param discount_percent: The discount_percent of this SalesOrderDiscountDto.
        :param discount_sequence_id: The discount_sequence_id of this SalesOrderDiscountDto.
        :param discountable_amount: The discountable_amount of this SalesOrderDiscountDto.
        :param discountable_quantity: The discountable_quantity of this SalesOrderDiscountDto.
        :param free_item: The free_item of this SalesOrderDiscountDto.
        :param free_item_quantity: The free_item_quantity of this SalesOrderDiscountDto.
        :param is_manual: The is_manual of this SalesOrderDiscountDto.
        :param manual_order_index: The manual_order_index of this SalesOrderDiscountDto.
        :param skip_discount: The skip_discount of this SalesOrderDiscountDto.
        :param type: The type of this SalesOrderDiscountDto.
        """
        self.openapi_types = {
            'discount_amount': float,
            'discount_id': str,
            'discount_percent': float,
            'discount_sequence_id': str,
            'discountable_amount': float,
            'discountable_quantity': float,
            'free_item': CdDescriptionPairDto,
            'free_item_quantity': float,
            'is_manual': bool,
            'manual_order_index': int,
            'skip_discount': bool,
            'type': str
        }

        self.attribute_map = {
            'discount_amount': 'discountAmount',
            'discount_id': 'discountId',
            'discount_percent': 'discountPercent',
            'discount_sequence_id': 'discountSequenceId',
            'discountable_amount': 'discountableAmount',
            'discountable_quantity': 'discountableQuantity',
            'free_item': 'freeItem',
            'free_item_quantity': 'freeItemQuantity',
            'is_manual': 'isManual',
            'manual_order_index': 'manualOrderIndex',
            'skip_discount': 'skipDiscount',
            'type': 'type'
        }

        self._discount_amount = discount_amount
        self._discount_id = discount_id
        self._discount_percent = discount_percent
        self._discount_sequence_id = discount_sequence_id
        self._discountable_amount = discountable_amount
        self._discountable_quantity = discountable_quantity
        self._free_item = free_item
        self._free_item_quantity = free_item_quantity
        self._is_manual = is_manual
        self._manual_order_index = manual_order_index
        self._skip_discount = skip_discount
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesOrderDiscountDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SalesOrderDiscountDto of this SalesOrderDiscountDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discount_amount(self):
        """Gets the discount_amount of this SalesOrderDiscountDto.

        The amount of the discount

        :return: The discount_amount of this SalesOrderDiscountDto.
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this SalesOrderDiscountDto.

        The amount of the discount

        :param discount_amount: The discount_amount of this SalesOrderDiscountDto.
        :type discount_amount: float
        """

        self._discount_amount = discount_amount

    @property
    def discount_id(self):
        """Gets the discount_id of this SalesOrderDiscountDto.

        The identifier of the discount applied to the order

        :return: The discount_id of this SalesOrderDiscountDto.
        :rtype: str
        """
        return self._discount_id

    @discount_id.setter
    def discount_id(self, discount_id):
        """Sets the discount_id of this SalesOrderDiscountDto.

        The identifier of the discount applied to the order

        :param discount_id: The discount_id of this SalesOrderDiscountDto.
        :type discount_id: str
        """

        self._discount_id = discount_id

    @property
    def discount_percent(self):
        """Gets the discount_percent of this SalesOrderDiscountDto.

        The discount percent, if the discount is defined to be calculated as a percentage

        :return: The discount_percent of this SalesOrderDiscountDto.
        :rtype: float
        """
        return self._discount_percent

    @discount_percent.setter
    def discount_percent(self, discount_percent):
        """Sets the discount_percent of this SalesOrderDiscountDto.

        The discount percent, if the discount is defined to be calculated as a percentage

        :param discount_percent: The discount_percent of this SalesOrderDiscountDto.
        :type discount_percent: float
        """

        self._discount_percent = discount_percent

    @property
    def discount_sequence_id(self):
        """Gets the discount_sequence_id of this SalesOrderDiscountDto.

        The identifier of the discount sequence of the discount ID applied to the order

        :return: The discount_sequence_id of this SalesOrderDiscountDto.
        :rtype: str
        """
        return self._discount_sequence_id

    @discount_sequence_id.setter
    def discount_sequence_id(self, discount_sequence_id):
        """Sets the discount_sequence_id of this SalesOrderDiscountDto.

        The identifier of the discount sequence of the discount ID applied to the order

        :param discount_sequence_id: The discount_sequence_id of this SalesOrderDiscountDto.
        :type discount_sequence_id: str
        """

        self._discount_sequence_id = discount_sequence_id

    @property
    def discountable_amount(self):
        """Gets the discountable_amount of this SalesOrderDiscountDto.

        The amount used as a base for discount calculation if the discount is based on amount.

        :return: The discountable_amount of this SalesOrderDiscountDto.
        :rtype: float
        """
        return self._discountable_amount

    @discountable_amount.setter
    def discountable_amount(self, discountable_amount):
        """Sets the discountable_amount of this SalesOrderDiscountDto.

        The amount used as a base for discount calculation if the discount is based on amount.

        :param discountable_amount: The discountable_amount of this SalesOrderDiscountDto.
        :type discountable_amount: float
        """

        self._discountable_amount = discountable_amount

    @property
    def discountable_quantity(self):
        """Gets the discountable_quantity of this SalesOrderDiscountDto.

        The quantity used as a base for discount calculation if the discount is based on quantity.

        :return: The discountable_quantity of this SalesOrderDiscountDto.
        :rtype: float
        """
        return self._discountable_quantity

    @discountable_quantity.setter
    def discountable_quantity(self, discountable_quantity):
        """Sets the discountable_quantity of this SalesOrderDiscountDto.

        The quantity used as a base for discount calculation if the discount is based on quantity.

        :param discountable_quantity: The discountable_quantity of this SalesOrderDiscountDto.
        :type discountable_quantity: float
        """

        self._discountable_quantity = discountable_quantity

    @property
    def free_item(self):
        """Gets the free_item of this SalesOrderDiscountDto.


        :return: The free_item of this SalesOrderDiscountDto.
        :rtype: CdDescriptionPairDto
        """
        return self._free_item

    @free_item.setter
    def free_item(self, free_item):
        """Sets the free_item of this SalesOrderDiscountDto.


        :param free_item: The free_item of this SalesOrderDiscountDto.
        :type free_item: CdDescriptionPairDto
        """

        self._free_item = free_item

    @property
    def free_item_quantity(self):
        """Gets the free_item_quantity of this SalesOrderDiscountDto.

        The quantity of the free item. Used to set the quantity for the order line generate by a free item discount

        :return: The free_item_quantity of this SalesOrderDiscountDto.
        :rtype: float
        """
        return self._free_item_quantity

    @free_item_quantity.setter
    def free_item_quantity(self, free_item_quantity):
        """Sets the free_item_quantity of this SalesOrderDiscountDto.

        The quantity of the free item. Used to set the quantity for the order line generate by a free item discount

        :param free_item_quantity: The free_item_quantity of this SalesOrderDiscountDto.
        :type free_item_quantity: float
        """

        self._free_item_quantity = free_item_quantity

    @property
    def is_manual(self):
        """Gets the is_manual of this SalesOrderDiscountDto.

        Indicates that the discount has been applied manually

        :return: The is_manual of this SalesOrderDiscountDto.
        :rtype: bool
        """
        return self._is_manual

    @is_manual.setter
    def is_manual(self, is_manual):
        """Sets the is_manual of this SalesOrderDiscountDto.

        Indicates that the discount has been applied manually

        :param is_manual: The is_manual of this SalesOrderDiscountDto.
        :type is_manual: bool
        """

        self._is_manual = is_manual

    @property
    def manual_order_index(self):
        """Gets the manual_order_index of this SalesOrderDiscountDto.

        The number of discount line set for the order

        :return: The manual_order_index of this SalesOrderDiscountDto.
        :rtype: int
        """
        return self._manual_order_index

    @manual_order_index.setter
    def manual_order_index(self, manual_order_index):
        """Sets the manual_order_index of this SalesOrderDiscountDto.

        The number of discount line set for the order

        :param manual_order_index: The manual_order_index of this SalesOrderDiscountDto.
        :type manual_order_index: int
        """

        self._manual_order_index = manual_order_index

    @property
    def skip_discount(self):
        """Gets the skip_discount of this SalesOrderDiscountDto.

        Indicates if the discount has been cancelled for the order and is not applicable

        :return: The skip_discount of this SalesOrderDiscountDto.
        :rtype: bool
        """
        return self._skip_discount

    @skip_discount.setter
    def skip_discount(self, skip_discount):
        """Sets the skip_discount of this SalesOrderDiscountDto.

        Indicates if the discount has been cancelled for the order and is not applicable

        :param skip_discount: The skip_discount of this SalesOrderDiscountDto.
        :type skip_discount: bool
        """

        self._skip_discount = skip_discount

    @property
    def type(self):
        """Gets the type of this SalesOrderDiscountDto.

        The type of discount whose sequence was applied to the document(Group or Document)

        :return: The type of this SalesOrderDiscountDto.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SalesOrderDiscountDto.

        The type of discount whose sequence was applied to the document(Group or Document)

        :param type: The type of this SalesOrderDiscountDto.
        :type type: str
        """

        self._type = type
