# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SalesOrderStatusDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancelled: bool=None, description: str=None, hold: bool=None):
        """SalesOrderStatusDto - a model defined in OpenAPI

        :param cancelled: The cancelled of this SalesOrderStatusDto.
        :param description: The description of this SalesOrderStatusDto.
        :param hold: The hold of this SalesOrderStatusDto.
        """
        self.openapi_types = {
            'cancelled': bool,
            'description': str,
            'hold': bool
        }

        self.attribute_map = {
            'cancelled': 'cancelled',
            'description': 'description',
            'hold': 'hold'
        }

        self._cancelled = cancelled
        self._description = description
        self._hold = hold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesOrderStatusDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SalesOrderStatusDto of this SalesOrderStatusDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancelled(self):
        """Gets the cancelled of this SalesOrderStatusDto.

        Whether this order is in a cancelled state

        :return: The cancelled of this SalesOrderStatusDto.
        :rtype: bool
        """
        return self._cancelled

    @cancelled.setter
    def cancelled(self, cancelled):
        """Sets the cancelled of this SalesOrderStatusDto.

        Whether this order is in a cancelled state

        :param cancelled: The cancelled of this SalesOrderStatusDto.
        :type cancelled: bool
        """

        self._cancelled = cancelled

    @property
    def description(self):
        """Gets the description of this SalesOrderStatusDto.

        The status code for the order

        :return: The description of this SalesOrderStatusDto.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SalesOrderStatusDto.

        The status code for the order

        :param description: The description of this SalesOrderStatusDto.
        :type description: str
        """

        self._description = description

    @property
    def hold(self):
        """Gets the hold of this SalesOrderStatusDto.

        Whether this order is in a held state

        :return: The hold of this SalesOrderStatusDto.
        :rtype: bool
        """
        return self._hold

    @hold.setter
    def hold(self, hold):
        """Sets the hold of this SalesOrderStatusDto.

        Whether this order is in a held state

        :param hold: The hold of this SalesOrderStatusDto.
        :type hold: bool
        """

        self._hold = hold
