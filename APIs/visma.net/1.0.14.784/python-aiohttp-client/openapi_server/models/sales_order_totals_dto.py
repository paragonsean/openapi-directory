# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SalesOrderTotalsDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_total: float=None, cost_total_in_base_currency: float=None, discount_total: float=None, discount_total_in_base_currency: float=None, freight_cost: float=None, freight_cost_in_base_currency: float=None, freight_total: float=None, freight_total_in_base_currency: float=None, order_total: float=None, order_total_in_base_currency: float=None, tax_exempt_total: float=None, tax_exempt_total_in_base_currency: float=None, tax_total: float=None, tax_total_in_base_currency: float=None, taxable_total: float=None, taxable_total_in_base_currency: float=None, unbilled_amount: float=None, unbilled_amount_in_base_currency: float=None, unshipped_amount: float=None, unshipped_amount_in_base_currency: float=None):
        """SalesOrderTotalsDto - a model defined in OpenAPI

        :param cost_total: The cost_total of this SalesOrderTotalsDto.
        :param cost_total_in_base_currency: The cost_total_in_base_currency of this SalesOrderTotalsDto.
        :param discount_total: The discount_total of this SalesOrderTotalsDto.
        :param discount_total_in_base_currency: The discount_total_in_base_currency of this SalesOrderTotalsDto.
        :param freight_cost: The freight_cost of this SalesOrderTotalsDto.
        :param freight_cost_in_base_currency: The freight_cost_in_base_currency of this SalesOrderTotalsDto.
        :param freight_total: The freight_total of this SalesOrderTotalsDto.
        :param freight_total_in_base_currency: The freight_total_in_base_currency of this SalesOrderTotalsDto.
        :param order_total: The order_total of this SalesOrderTotalsDto.
        :param order_total_in_base_currency: The order_total_in_base_currency of this SalesOrderTotalsDto.
        :param tax_exempt_total: The tax_exempt_total of this SalesOrderTotalsDto.
        :param tax_exempt_total_in_base_currency: The tax_exempt_total_in_base_currency of this SalesOrderTotalsDto.
        :param tax_total: The tax_total of this SalesOrderTotalsDto.
        :param tax_total_in_base_currency: The tax_total_in_base_currency of this SalesOrderTotalsDto.
        :param taxable_total: The taxable_total of this SalesOrderTotalsDto.
        :param taxable_total_in_base_currency: The taxable_total_in_base_currency of this SalesOrderTotalsDto.
        :param unbilled_amount: The unbilled_amount of this SalesOrderTotalsDto.
        :param unbilled_amount_in_base_currency: The unbilled_amount_in_base_currency of this SalesOrderTotalsDto.
        :param unshipped_amount: The unshipped_amount of this SalesOrderTotalsDto.
        :param unshipped_amount_in_base_currency: The unshipped_amount_in_base_currency of this SalesOrderTotalsDto.
        """
        self.openapi_types = {
            'cost_total': float,
            'cost_total_in_base_currency': float,
            'discount_total': float,
            'discount_total_in_base_currency': float,
            'freight_cost': float,
            'freight_cost_in_base_currency': float,
            'freight_total': float,
            'freight_total_in_base_currency': float,
            'order_total': float,
            'order_total_in_base_currency': float,
            'tax_exempt_total': float,
            'tax_exempt_total_in_base_currency': float,
            'tax_total': float,
            'tax_total_in_base_currency': float,
            'taxable_total': float,
            'taxable_total_in_base_currency': float,
            'unbilled_amount': float,
            'unbilled_amount_in_base_currency': float,
            'unshipped_amount': float,
            'unshipped_amount_in_base_currency': float
        }

        self.attribute_map = {
            'cost_total': 'costTotal',
            'cost_total_in_base_currency': 'costTotalInBaseCurrency',
            'discount_total': 'discountTotal',
            'discount_total_in_base_currency': 'discountTotalInBaseCurrency',
            'freight_cost': 'freightCost',
            'freight_cost_in_base_currency': 'freightCostInBaseCurrency',
            'freight_total': 'freightTotal',
            'freight_total_in_base_currency': 'freightTotalInBaseCurrency',
            'order_total': 'orderTotal',
            'order_total_in_base_currency': 'orderTotalInBaseCurrency',
            'tax_exempt_total': 'taxExemptTotal',
            'tax_exempt_total_in_base_currency': 'taxExemptTotalInBaseCurrency',
            'tax_total': 'taxTotal',
            'tax_total_in_base_currency': 'taxTotalInBaseCurrency',
            'taxable_total': 'taxableTotal',
            'taxable_total_in_base_currency': 'taxableTotalInBaseCurrency',
            'unbilled_amount': 'unbilledAmount',
            'unbilled_amount_in_base_currency': 'unbilledAmountInBaseCurrency',
            'unshipped_amount': 'unshippedAmount',
            'unshipped_amount_in_base_currency': 'unshippedAmountInBaseCurrency'
        }

        self._cost_total = cost_total
        self._cost_total_in_base_currency = cost_total_in_base_currency
        self._discount_total = discount_total
        self._discount_total_in_base_currency = discount_total_in_base_currency
        self._freight_cost = freight_cost
        self._freight_cost_in_base_currency = freight_cost_in_base_currency
        self._freight_total = freight_total
        self._freight_total_in_base_currency = freight_total_in_base_currency
        self._order_total = order_total
        self._order_total_in_base_currency = order_total_in_base_currency
        self._tax_exempt_total = tax_exempt_total
        self._tax_exempt_total_in_base_currency = tax_exempt_total_in_base_currency
        self._tax_total = tax_total
        self._tax_total_in_base_currency = tax_total_in_base_currency
        self._taxable_total = taxable_total
        self._taxable_total_in_base_currency = taxable_total_in_base_currency
        self._unbilled_amount = unbilled_amount
        self._unbilled_amount_in_base_currency = unbilled_amount_in_base_currency
        self._unshipped_amount = unshipped_amount
        self._unshipped_amount_in_base_currency = unshipped_amount_in_base_currency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesOrderTotalsDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SalesOrderTotalsDto of this SalesOrderTotalsDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_total(self):
        """Gets the cost_total of this SalesOrderTotalsDto.

        The total of the costs on the lines of the sales order. How the `costTotal` is calculated is dependent on the option `useReplacementCostForMarginAndProfit`.  If this option is `true` the `costTotal` will be calculated based on the `replacementUnitCost`.  If this option is `false`, the `costTotal` will be calculate based on `unitCost`

        :return: The cost_total of this SalesOrderTotalsDto.
        :rtype: float
        """
        return self._cost_total

    @cost_total.setter
    def cost_total(self, cost_total):
        """Sets the cost_total of this SalesOrderTotalsDto.

        The total of the costs on the lines of the sales order. How the `costTotal` is calculated is dependent on the option `useReplacementCostForMarginAndProfit`.  If this option is `true` the `costTotal` will be calculated based on the `replacementUnitCost`.  If this option is `false`, the `costTotal` will be calculate based on `unitCost`

        :param cost_total: The cost_total of this SalesOrderTotalsDto.
        :type cost_total: float
        """

        self._cost_total = cost_total

    @property
    def cost_total_in_base_currency(self):
        """Gets the cost_total_in_base_currency of this SalesOrderTotalsDto.

        The total of the costs on the lines of the sales order in base currency.

        :return: The cost_total_in_base_currency of this SalesOrderTotalsDto.
        :rtype: float
        """
        return self._cost_total_in_base_currency

    @cost_total_in_base_currency.setter
    def cost_total_in_base_currency(self, cost_total_in_base_currency):
        """Sets the cost_total_in_base_currency of this SalesOrderTotalsDto.

        The total of the costs on the lines of the sales order in base currency.

        :param cost_total_in_base_currency: The cost_total_in_base_currency of this SalesOrderTotalsDto.
        :type cost_total_in_base_currency: float
        """

        self._cost_total_in_base_currency = cost_total_in_base_currency

    @property
    def discount_total(self):
        """Gets the discount_total of this SalesOrderTotalsDto.

        The discount total

        :return: The discount_total of this SalesOrderTotalsDto.
        :rtype: float
        """
        return self._discount_total

    @discount_total.setter
    def discount_total(self, discount_total):
        """Sets the discount_total of this SalesOrderTotalsDto.

        The discount total

        :param discount_total: The discount_total of this SalesOrderTotalsDto.
        :type discount_total: float
        """

        self._discount_total = discount_total

    @property
    def discount_total_in_base_currency(self):
        """Gets the discount_total_in_base_currency of this SalesOrderTotalsDto.

        The discount total in base currency

        :return: The discount_total_in_base_currency of this SalesOrderTotalsDto.
        :rtype: float
        """
        return self._discount_total_in_base_currency

    @discount_total_in_base_currency.setter
    def discount_total_in_base_currency(self, discount_total_in_base_currency):
        """Sets the discount_total_in_base_currency of this SalesOrderTotalsDto.

        The discount total in base currency

        :param discount_total_in_base_currency: The discount_total_in_base_currency of this SalesOrderTotalsDto.
        :type discount_total_in_base_currency: float
        """

        self._discount_total_in_base_currency = discount_total_in_base_currency

    @property
    def freight_cost(self):
        """Gets the freight_cost of this SalesOrderTotalsDto.

        The freight cost calculated for the sales order. Not applicable for transfer order types.

        :return: The freight_cost of this SalesOrderTotalsDto.
        :rtype: float
        """
        return self._freight_cost

    @freight_cost.setter
    def freight_cost(self, freight_cost):
        """Sets the freight_cost of this SalesOrderTotalsDto.

        The freight cost calculated for the sales order. Not applicable for transfer order types.

        :param freight_cost: The freight_cost of this SalesOrderTotalsDto.
        :type freight_cost: float
        """

        self._freight_cost = freight_cost

    @property
    def freight_cost_in_base_currency(self):
        """Gets the freight_cost_in_base_currency of this SalesOrderTotalsDto.

        The freight cost calculated for the sales order in base currency. Not applicable for transfer order types.

        :return: The freight_cost_in_base_currency of this SalesOrderTotalsDto.
        :rtype: float
        """
        return self._freight_cost_in_base_currency

    @freight_cost_in_base_currency.setter
    def freight_cost_in_base_currency(self, freight_cost_in_base_currency):
        """Sets the freight_cost_in_base_currency of this SalesOrderTotalsDto.

        The freight cost calculated for the sales order in base currency. Not applicable for transfer order types.

        :param freight_cost_in_base_currency: The freight_cost_in_base_currency of this SalesOrderTotalsDto.
        :type freight_cost_in_base_currency: float
        """

        self._freight_cost_in_base_currency = freight_cost_in_base_currency

    @property
    def freight_total(self):
        """Gets the freight_total of this SalesOrderTotalsDto.

        The freight amount calculated in accordance with the shipping terms. Not applicable for transfer order types.

        :return: The freight_total of this SalesOrderTotalsDto.
        :rtype: float
        """
        return self._freight_total

    @freight_total.setter
    def freight_total(self, freight_total):
        """Sets the freight_total of this SalesOrderTotalsDto.

        The freight amount calculated in accordance with the shipping terms. Not applicable for transfer order types.

        :param freight_total: The freight_total of this SalesOrderTotalsDto.
        :type freight_total: float
        """

        self._freight_total = freight_total

    @property
    def freight_total_in_base_currency(self):
        """Gets the freight_total_in_base_currency of this SalesOrderTotalsDto.

        The freight amount calculated in accordance with the shipping terms in base currency. Not applicable for transfer order types.

        :return: The freight_total_in_base_currency of this SalesOrderTotalsDto.
        :rtype: float
        """
        return self._freight_total_in_base_currency

    @freight_total_in_base_currency.setter
    def freight_total_in_base_currency(self, freight_total_in_base_currency):
        """Sets the freight_total_in_base_currency of this SalesOrderTotalsDto.

        The freight amount calculated in accordance with the shipping terms in base currency. Not applicable for transfer order types.

        :param freight_total_in_base_currency: The freight_total_in_base_currency of this SalesOrderTotalsDto.
        :type freight_total_in_base_currency: float
        """

        self._freight_total_in_base_currency = freight_total_in_base_currency

    @property
    def order_total(self):
        """Gets the order_total of this SalesOrderTotalsDto.

        The order total

        :return: The order_total of this SalesOrderTotalsDto.
        :rtype: float
        """
        return self._order_total

    @order_total.setter
    def order_total(self, order_total):
        """Sets the order_total of this SalesOrderTotalsDto.

        The order total

        :param order_total: The order_total of this SalesOrderTotalsDto.
        :type order_total: float
        """

        self._order_total = order_total

    @property
    def order_total_in_base_currency(self):
        """Gets the order_total_in_base_currency of this SalesOrderTotalsDto.

        The order total in base currency

        :return: The order_total_in_base_currency of this SalesOrderTotalsDto.
        :rtype: float
        """
        return self._order_total_in_base_currency

    @order_total_in_base_currency.setter
    def order_total_in_base_currency(self, order_total_in_base_currency):
        """Sets the order_total_in_base_currency of this SalesOrderTotalsDto.

        The order total in base currency

        :param order_total_in_base_currency: The order_total_in_base_currency of this SalesOrderTotalsDto.
        :type order_total_in_base_currency: float
        """

        self._order_total_in_base_currency = order_total_in_base_currency

    @property
    def tax_exempt_total(self):
        """Gets the tax_exempt_total of this SalesOrderTotalsDto.

        The VAT exempt total

        :return: The tax_exempt_total of this SalesOrderTotalsDto.
        :rtype: float
        """
        return self._tax_exempt_total

    @tax_exempt_total.setter
    def tax_exempt_total(self, tax_exempt_total):
        """Sets the tax_exempt_total of this SalesOrderTotalsDto.

        The VAT exempt total

        :param tax_exempt_total: The tax_exempt_total of this SalesOrderTotalsDto.
        :type tax_exempt_total: float
        """

        self._tax_exempt_total = tax_exempt_total

    @property
    def tax_exempt_total_in_base_currency(self):
        """Gets the tax_exempt_total_in_base_currency of this SalesOrderTotalsDto.

        The VAT exempt total in base currency

        :return: The tax_exempt_total_in_base_currency of this SalesOrderTotalsDto.
        :rtype: float
        """
        return self._tax_exempt_total_in_base_currency

    @tax_exempt_total_in_base_currency.setter
    def tax_exempt_total_in_base_currency(self, tax_exempt_total_in_base_currency):
        """Sets the tax_exempt_total_in_base_currency of this SalesOrderTotalsDto.

        The VAT exempt total in base currency

        :param tax_exempt_total_in_base_currency: The tax_exempt_total_in_base_currency of this SalesOrderTotalsDto.
        :type tax_exempt_total_in_base_currency: float
        """

        self._tax_exempt_total_in_base_currency = tax_exempt_total_in_base_currency

    @property
    def tax_total(self):
        """Gets the tax_total of this SalesOrderTotalsDto.

        The tax total

        :return: The tax_total of this SalesOrderTotalsDto.
        :rtype: float
        """
        return self._tax_total

    @tax_total.setter
    def tax_total(self, tax_total):
        """Sets the tax_total of this SalesOrderTotalsDto.

        The tax total

        :param tax_total: The tax_total of this SalesOrderTotalsDto.
        :type tax_total: float
        """

        self._tax_total = tax_total

    @property
    def tax_total_in_base_currency(self):
        """Gets the tax_total_in_base_currency of this SalesOrderTotalsDto.

        The tax total in base currency

        :return: The tax_total_in_base_currency of this SalesOrderTotalsDto.
        :rtype: float
        """
        return self._tax_total_in_base_currency

    @tax_total_in_base_currency.setter
    def tax_total_in_base_currency(self, tax_total_in_base_currency):
        """Sets the tax_total_in_base_currency of this SalesOrderTotalsDto.

        The tax total in base currency

        :param tax_total_in_base_currency: The tax_total_in_base_currency of this SalesOrderTotalsDto.
        :type tax_total_in_base_currency: float
        """

        self._tax_total_in_base_currency = tax_total_in_base_currency

    @property
    def taxable_total(self):
        """Gets the taxable_total of this SalesOrderTotalsDto.

        The VAT taxable total

        :return: The taxable_total of this SalesOrderTotalsDto.
        :rtype: float
        """
        return self._taxable_total

    @taxable_total.setter
    def taxable_total(self, taxable_total):
        """Sets the taxable_total of this SalesOrderTotalsDto.

        The VAT taxable total

        :param taxable_total: The taxable_total of this SalesOrderTotalsDto.
        :type taxable_total: float
        """

        self._taxable_total = taxable_total

    @property
    def taxable_total_in_base_currency(self):
        """Gets the taxable_total_in_base_currency of this SalesOrderTotalsDto.

        The VAT taxable in base currency

        :return: The taxable_total_in_base_currency of this SalesOrderTotalsDto.
        :rtype: float
        """
        return self._taxable_total_in_base_currency

    @taxable_total_in_base_currency.setter
    def taxable_total_in_base_currency(self, taxable_total_in_base_currency):
        """Sets the taxable_total_in_base_currency of this SalesOrderTotalsDto.

        The VAT taxable in base currency

        :param taxable_total_in_base_currency: The taxable_total_in_base_currency of this SalesOrderTotalsDto.
        :type taxable_total_in_base_currency: float
        """

        self._taxable_total_in_base_currency = taxable_total_in_base_currency

    @property
    def unbilled_amount(self):
        """Gets the unbilled_amount of this SalesOrderTotalsDto.

        The sum of unbilled amounts for the lines

        :return: The unbilled_amount of this SalesOrderTotalsDto.
        :rtype: float
        """
        return self._unbilled_amount

    @unbilled_amount.setter
    def unbilled_amount(self, unbilled_amount):
        """Sets the unbilled_amount of this SalesOrderTotalsDto.

        The sum of unbilled amounts for the lines

        :param unbilled_amount: The unbilled_amount of this SalesOrderTotalsDto.
        :type unbilled_amount: float
        """

        self._unbilled_amount = unbilled_amount

    @property
    def unbilled_amount_in_base_currency(self):
        """Gets the unbilled_amount_in_base_currency of this SalesOrderTotalsDto.

        The sum of unbilled amounts for the lines in base currency

        :return: The unbilled_amount_in_base_currency of this SalesOrderTotalsDto.
        :rtype: float
        """
        return self._unbilled_amount_in_base_currency

    @unbilled_amount_in_base_currency.setter
    def unbilled_amount_in_base_currency(self, unbilled_amount_in_base_currency):
        """Sets the unbilled_amount_in_base_currency of this SalesOrderTotalsDto.

        The sum of unbilled amounts for the lines in base currency

        :param unbilled_amount_in_base_currency: The unbilled_amount_in_base_currency of this SalesOrderTotalsDto.
        :type unbilled_amount_in_base_currency: float
        """

        self._unbilled_amount_in_base_currency = unbilled_amount_in_base_currency

    @property
    def unshipped_amount(self):
        """Gets the unshipped_amount of this SalesOrderTotalsDto.

        The sum of unshipped amounts for the lines

        :return: The unshipped_amount of this SalesOrderTotalsDto.
        :rtype: float
        """
        return self._unshipped_amount

    @unshipped_amount.setter
    def unshipped_amount(self, unshipped_amount):
        """Sets the unshipped_amount of this SalesOrderTotalsDto.

        The sum of unshipped amounts for the lines

        :param unshipped_amount: The unshipped_amount of this SalesOrderTotalsDto.
        :type unshipped_amount: float
        """

        self._unshipped_amount = unshipped_amount

    @property
    def unshipped_amount_in_base_currency(self):
        """Gets the unshipped_amount_in_base_currency of this SalesOrderTotalsDto.

        The sum of unshipped amounts for the lines in base currency

        :return: The unshipped_amount_in_base_currency of this SalesOrderTotalsDto.
        :rtype: float
        """
        return self._unshipped_amount_in_base_currency

    @unshipped_amount_in_base_currency.setter
    def unshipped_amount_in_base_currency(self, unshipped_amount_in_base_currency):
        """Sets the unshipped_amount_in_base_currency of this SalesOrderTotalsDto.

        The sum of unshipped amounts for the lines in base currency

        :param unshipped_amount_in_base_currency: The unshipped_amount_in_base_currency of this SalesOrderTotalsDto.
        :type unshipped_amount_in_base_currency: float
        """

        self._unshipped_amount_in_base_currency = unshipped_amount_in_base_currency
