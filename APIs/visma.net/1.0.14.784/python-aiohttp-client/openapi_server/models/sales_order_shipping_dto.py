# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_dto import AddressDto
from openapi_server.models.cd_description_pair_dto import CdDescriptionPairDto
from openapi_server.models.contact_dto import ContactDto
from openapi_server.models.id_description_pair_dto import IdDescriptionPairDto
from openapi_server import util


class SalesOrderShippingDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: AddressDto=None, contact: ContactDto=None, fob_point: CdDescriptionPairDto=None, insurance: bool=None, intrastat_transaction_type: IdDescriptionPairDto=None, preferred_warehouse: CdDescriptionPairDto=None, priority: int=None, residential_delivery: bool=None, rule: str=None, saturday_delivery: bool=None, scheduled_date: datetime=None, ship_separately: bool=None, ship_via: CdDescriptionPairDto=None, terms: CdDescriptionPairDto=None, zone: CdDescriptionPairDto=None):
        """SalesOrderShippingDto - a model defined in OpenAPI

        :param address: The address of this SalesOrderShippingDto.
        :param contact: The contact of this SalesOrderShippingDto.
        :param fob_point: The fob_point of this SalesOrderShippingDto.
        :param insurance: The insurance of this SalesOrderShippingDto.
        :param intrastat_transaction_type: The intrastat_transaction_type of this SalesOrderShippingDto.
        :param preferred_warehouse: The preferred_warehouse of this SalesOrderShippingDto.
        :param priority: The priority of this SalesOrderShippingDto.
        :param residential_delivery: The residential_delivery of this SalesOrderShippingDto.
        :param rule: The rule of this SalesOrderShippingDto.
        :param saturday_delivery: The saturday_delivery of this SalesOrderShippingDto.
        :param scheduled_date: The scheduled_date of this SalesOrderShippingDto.
        :param ship_separately: The ship_separately of this SalesOrderShippingDto.
        :param ship_via: The ship_via of this SalesOrderShippingDto.
        :param terms: The terms of this SalesOrderShippingDto.
        :param zone: The zone of this SalesOrderShippingDto.
        """
        self.openapi_types = {
            'address': AddressDto,
            'contact': ContactDto,
            'fob_point': CdDescriptionPairDto,
            'insurance': bool,
            'intrastat_transaction_type': IdDescriptionPairDto,
            'preferred_warehouse': CdDescriptionPairDto,
            'priority': int,
            'residential_delivery': bool,
            'rule': str,
            'saturday_delivery': bool,
            'scheduled_date': datetime,
            'ship_separately': bool,
            'ship_via': CdDescriptionPairDto,
            'terms': CdDescriptionPairDto,
            'zone': CdDescriptionPairDto
        }

        self.attribute_map = {
            'address': 'address',
            'contact': 'contact',
            'fob_point': 'fobPoint',
            'insurance': 'insurance',
            'intrastat_transaction_type': 'intrastatTransactionType',
            'preferred_warehouse': 'preferredWarehouse',
            'priority': 'priority',
            'residential_delivery': 'residentialDelivery',
            'rule': 'rule',
            'saturday_delivery': 'saturdayDelivery',
            'scheduled_date': 'scheduledDate',
            'ship_separately': 'shipSeparately',
            'ship_via': 'shipVia',
            'terms': 'terms',
            'zone': 'zone'
        }

        self._address = address
        self._contact = contact
        self._fob_point = fob_point
        self._insurance = insurance
        self._intrastat_transaction_type = intrastat_transaction_type
        self._preferred_warehouse = preferred_warehouse
        self._priority = priority
        self._residential_delivery = residential_delivery
        self._rule = rule
        self._saturday_delivery = saturday_delivery
        self._scheduled_date = scheduled_date
        self._ship_separately = ship_separately
        self._ship_via = ship_via
        self._terms = terms
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesOrderShippingDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SalesOrderShippingDto of this SalesOrderShippingDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this SalesOrderShippingDto.


        :return: The address of this SalesOrderShippingDto.
        :rtype: AddressDto
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this SalesOrderShippingDto.


        :param address: The address of this SalesOrderShippingDto.
        :type address: AddressDto
        """

        self._address = address

    @property
    def contact(self):
        """Gets the contact of this SalesOrderShippingDto.


        :return: The contact of this SalesOrderShippingDto.
        :rtype: ContactDto
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this SalesOrderShippingDto.


        :param contact: The contact of this SalesOrderShippingDto.
        :type contact: ContactDto
        """

        self._contact = contact

    @property
    def fob_point(self):
        """Gets the fob_point of this SalesOrderShippingDto.


        :return: The fob_point of this SalesOrderShippingDto.
        :rtype: CdDescriptionPairDto
        """
        return self._fob_point

    @fob_point.setter
    def fob_point(self, fob_point):
        """Sets the fob_point of this SalesOrderShippingDto.


        :param fob_point: The fob_point of this SalesOrderShippingDto.
        :type fob_point: CdDescriptionPairDto
        """

        self._fob_point = fob_point

    @property
    def insurance(self):
        """Gets the insurance of this SalesOrderShippingDto.

        Whether insurance applies to this shipping

        :return: The insurance of this SalesOrderShippingDto.
        :rtype: bool
        """
        return self._insurance

    @insurance.setter
    def insurance(self, insurance):
        """Sets the insurance of this SalesOrderShippingDto.

        Whether insurance applies to this shipping

        :param insurance: The insurance of this SalesOrderShippingDto.
        :type insurance: bool
        """

        self._insurance = insurance

    @property
    def intrastat_transaction_type(self):
        """Gets the intrastat_transaction_type of this SalesOrderShippingDto.


        :return: The intrastat_transaction_type of this SalesOrderShippingDto.
        :rtype: IdDescriptionPairDto
        """
        return self._intrastat_transaction_type

    @intrastat_transaction_type.setter
    def intrastat_transaction_type(self, intrastat_transaction_type):
        """Sets the intrastat_transaction_type of this SalesOrderShippingDto.


        :param intrastat_transaction_type: The intrastat_transaction_type of this SalesOrderShippingDto.
        :type intrastat_transaction_type: IdDescriptionPairDto
        """

        self._intrastat_transaction_type = intrastat_transaction_type

    @property
    def preferred_warehouse(self):
        """Gets the preferred_warehouse of this SalesOrderShippingDto.


        :return: The preferred_warehouse of this SalesOrderShippingDto.
        :rtype: CdDescriptionPairDto
        """
        return self._preferred_warehouse

    @preferred_warehouse.setter
    def preferred_warehouse(self, preferred_warehouse):
        """Sets the preferred_warehouse of this SalesOrderShippingDto.


        :param preferred_warehouse: The preferred_warehouse of this SalesOrderShippingDto.
        :type preferred_warehouse: CdDescriptionPairDto
        """

        self._preferred_warehouse = preferred_warehouse

    @property
    def priority(self):
        """Gets the priority of this SalesOrderShippingDto.

        Priority of the order

        :return: The priority of this SalesOrderShippingDto.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this SalesOrderShippingDto.

        Priority of the order

        :param priority: The priority of this SalesOrderShippingDto.
        :type priority: int
        """

        self._priority = priority

    @property
    def residential_delivery(self):
        """Gets the residential_delivery of this SalesOrderShippingDto.

        Whether this is residential delivery

        :return: The residential_delivery of this SalesOrderShippingDto.
        :rtype: bool
        """
        return self._residential_delivery

    @residential_delivery.setter
    def residential_delivery(self, residential_delivery):
        """Sets the residential_delivery of this SalesOrderShippingDto.

        Whether this is residential delivery

        :param residential_delivery: The residential_delivery of this SalesOrderShippingDto.
        :type residential_delivery: bool
        """

        self._residential_delivery = residential_delivery

    @property
    def rule(self):
        """Gets the rule of this SalesOrderShippingDto.

        The shipping rule

        :return: The rule of this SalesOrderShippingDto.
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this SalesOrderShippingDto.

        The shipping rule

        :param rule: The rule of this SalesOrderShippingDto.
        :type rule: str
        """

        self._rule = rule

    @property
    def saturday_delivery(self):
        """Gets the saturday_delivery of this SalesOrderShippingDto.

        Whether this is a saturday delivery

        :return: The saturday_delivery of this SalesOrderShippingDto.
        :rtype: bool
        """
        return self._saturday_delivery

    @saturday_delivery.setter
    def saturday_delivery(self, saturday_delivery):
        """Sets the saturday_delivery of this SalesOrderShippingDto.

        Whether this is a saturday delivery

        :param saturday_delivery: The saturday_delivery of this SalesOrderShippingDto.
        :type saturday_delivery: bool
        """

        self._saturday_delivery = saturday_delivery

    @property
    def scheduled_date(self):
        """Gets the scheduled_date of this SalesOrderShippingDto.

        The shipping scheduled date  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The scheduled_date of this SalesOrderShippingDto.
        :rtype: datetime
        """
        return self._scheduled_date

    @scheduled_date.setter
    def scheduled_date(self, scheduled_date):
        """Sets the scheduled_date of this SalesOrderShippingDto.

        The shipping scheduled date  Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.

        :param scheduled_date: The scheduled_date of this SalesOrderShippingDto.
        :type scheduled_date: datetime
        """

        self._scheduled_date = scheduled_date

    @property
    def ship_separately(self):
        """Gets the ship_separately of this SalesOrderShippingDto.

        Whether this order can/is shipped separately

        :return: The ship_separately of this SalesOrderShippingDto.
        :rtype: bool
        """
        return self._ship_separately

    @ship_separately.setter
    def ship_separately(self, ship_separately):
        """Sets the ship_separately of this SalesOrderShippingDto.

        Whether this order can/is shipped separately

        :param ship_separately: The ship_separately of this SalesOrderShippingDto.
        :type ship_separately: bool
        """

        self._ship_separately = ship_separately

    @property
    def ship_via(self):
        """Gets the ship_via of this SalesOrderShippingDto.


        :return: The ship_via of this SalesOrderShippingDto.
        :rtype: CdDescriptionPairDto
        """
        return self._ship_via

    @ship_via.setter
    def ship_via(self, ship_via):
        """Sets the ship_via of this SalesOrderShippingDto.


        :param ship_via: The ship_via of this SalesOrderShippingDto.
        :type ship_via: CdDescriptionPairDto
        """

        self._ship_via = ship_via

    @property
    def terms(self):
        """Gets the terms of this SalesOrderShippingDto.


        :return: The terms of this SalesOrderShippingDto.
        :rtype: CdDescriptionPairDto
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this SalesOrderShippingDto.


        :param terms: The terms of this SalesOrderShippingDto.
        :type terms: CdDescriptionPairDto
        """

        self._terms = terms

    @property
    def zone(self):
        """Gets the zone of this SalesOrderShippingDto.


        :return: The zone of this SalesOrderShippingDto.
        :rtype: CdDescriptionPairDto
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this SalesOrderShippingDto.


        :param zone: The zone of this SalesOrderShippingDto.
        :type zone: CdDescriptionPairDto
        """

        self._zone = zone
