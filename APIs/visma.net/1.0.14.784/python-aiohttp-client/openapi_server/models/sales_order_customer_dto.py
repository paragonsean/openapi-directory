# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cd_description_pair_dto import CdDescriptionPairDto
from openapi_server.models.customer_location_dto import CustomerLocationDto
from openapi_server import util


class SalesOrderCustomerDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_id: int=None, id: str=None, internal_id: int=None, location: CustomerLocationDto=None, name: str=None, order: str=None, ref_no: str=None, tax_zone: CdDescriptionPairDto=None):
        """SalesOrderCustomerDto - a model defined in OpenAPI

        :param contact_id: The contact_id of this SalesOrderCustomerDto.
        :param id: The id of this SalesOrderCustomerDto.
        :param internal_id: The internal_id of this SalesOrderCustomerDto.
        :param location: The location of this SalesOrderCustomerDto.
        :param name: The name of this SalesOrderCustomerDto.
        :param order: The order of this SalesOrderCustomerDto.
        :param ref_no: The ref_no of this SalesOrderCustomerDto.
        :param tax_zone: The tax_zone of this SalesOrderCustomerDto.
        """
        self.openapi_types = {
            'contact_id': int,
            'id': str,
            'internal_id': int,
            'location': CustomerLocationDto,
            'name': str,
            'order': str,
            'ref_no': str,
            'tax_zone': CdDescriptionPairDto
        }

        self.attribute_map = {
            'contact_id': 'contactId',
            'id': 'id',
            'internal_id': 'internalId',
            'location': 'location',
            'name': 'name',
            'order': 'order',
            'ref_no': 'refNo',
            'tax_zone': 'taxZone'
        }

        self._contact_id = contact_id
        self._id = id
        self._internal_id = internal_id
        self._location = location
        self._name = name
        self._order = order
        self._ref_no = ref_no
        self._tax_zone = tax_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesOrderCustomerDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SalesOrderCustomerDto of this SalesOrderCustomerDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_id(self):
        """Gets the contact_id of this SalesOrderCustomerDto.

        The contact id for the customer

        :return: The contact_id of this SalesOrderCustomerDto.
        :rtype: int
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this SalesOrderCustomerDto.

        The contact id for the customer

        :param contact_id: The contact_id of this SalesOrderCustomerDto.
        :type contact_id: int
        """

        self._contact_id = contact_id

    @property
    def id(self):
        """Gets the id of this SalesOrderCustomerDto.

        The unique id of the the customer

        :return: The id of this SalesOrderCustomerDto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SalesOrderCustomerDto.

        The unique id of the the customer

        :param id: The id of this SalesOrderCustomerDto.
        :type id: str
        """

        self._id = id

    @property
    def internal_id(self):
        """Gets the internal_id of this SalesOrderCustomerDto.

        An internal unique id of the customer

        :return: The internal_id of this SalesOrderCustomerDto.
        :rtype: int
        """
        return self._internal_id

    @internal_id.setter
    def internal_id(self, internal_id):
        """Sets the internal_id of this SalesOrderCustomerDto.

        An internal unique id of the customer

        :param internal_id: The internal_id of this SalesOrderCustomerDto.
        :type internal_id: int
        """

        self._internal_id = internal_id

    @property
    def location(self):
        """Gets the location of this SalesOrderCustomerDto.


        :return: The location of this SalesOrderCustomerDto.
        :rtype: CustomerLocationDto
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SalesOrderCustomerDto.


        :param location: The location of this SalesOrderCustomerDto.
        :type location: CustomerLocationDto
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this SalesOrderCustomerDto.

        The customer name

        :return: The name of this SalesOrderCustomerDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SalesOrderCustomerDto.

        The customer name

        :param name: The name of this SalesOrderCustomerDto.
        :type name: str
        """

        self._name = name

    @property
    def order(self):
        """Gets the order of this SalesOrderCustomerDto.

        The customer order text

        :return: The order of this SalesOrderCustomerDto.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this SalesOrderCustomerDto.

        The customer order text

        :param order: The order of this SalesOrderCustomerDto.
        :type order: str
        """

        self._order = order

    @property
    def ref_no(self):
        """Gets the ref_no of this SalesOrderCustomerDto.

        The customer ref number text

        :return: The ref_no of this SalesOrderCustomerDto.
        :rtype: str
        """
        return self._ref_no

    @ref_no.setter
    def ref_no(self, ref_no):
        """Sets the ref_no of this SalesOrderCustomerDto.

        The customer ref number text

        :param ref_no: The ref_no of this SalesOrderCustomerDto.
        :type ref_no: str
        """

        self._ref_no = ref_no

    @property
    def tax_zone(self):
        """Gets the tax_zone of this SalesOrderCustomerDto.


        :return: The tax_zone of this SalesOrderCustomerDto.
        :rtype: CdDescriptionPairDto
        """
        return self._tax_zone

    @tax_zone.setter
    def tax_zone(self, tax_zone):
        """Sets the tax_zone of this SalesOrderCustomerDto.


        :param tax_zone: The tax_zone of this SalesOrderCustomerDto.
        :type tax_zone: CdDescriptionPairDto
        """

        self._tax_zone = tax_zone
