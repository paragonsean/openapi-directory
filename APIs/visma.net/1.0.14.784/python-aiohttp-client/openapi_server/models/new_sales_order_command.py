# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.new_sales_order_billing_dto import NewSalesOrderBillingDto
from openapi_server.models.new_sales_order_customer_dto import NewSalesOrderCustomerDto
from openapi_server.models.new_sales_order_financial_info_dto import NewSalesOrderFinancialInfoDto
from openapi_server.models.new_sales_order_freight_dto import NewSalesOrderFreightDto
from openapi_server.models.new_sales_order_line_dto import NewSalesOrderLineDto
from openapi_server.models.new_sales_order_payment_settings import NewSalesOrderPaymentSettings
from openapi_server.models.new_sales_order_shipping_dto import NewSalesOrderShippingDto
from openapi_server.models.sales_order_print_dto import SalesOrderPrintDto
from openapi_server import util


class NewSalesOrderCommand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing: NewSalesOrderBillingDto=None, branch_id: str=None, cancel_by: datetime=None, currency_id: str=None, customer: NewSalesOrderCustomerDto=None, _date: datetime=None, description: str=None, financial_information: NewSalesOrderFinancialInfoDto=None, freight: NewSalesOrderFreightDto=None, note: str=None, order_id: str=None, order_lines: List[NewSalesOrderLineDto]=None, original_order_id: str=None, original_order_type: str=None, owner_id: str=None, payment_settings: NewSalesOrderPaymentSettings=None, _print: SalesOrderPrintDto=None, project_id: str=None, request_on: datetime=None, sales_person_id: str=None, shipping: NewSalesOrderShippingDto=None, status: str=None, tax_zone_id: str=None, type: str=None, use_replacement_cost_for_margin_and_profit: bool=None):
        """NewSalesOrderCommand - a model defined in OpenAPI

        :param billing: The billing of this NewSalesOrderCommand.
        :param branch_id: The branch_id of this NewSalesOrderCommand.
        :param cancel_by: The cancel_by of this NewSalesOrderCommand.
        :param currency_id: The currency_id of this NewSalesOrderCommand.
        :param customer: The customer of this NewSalesOrderCommand.
        :param _date: The _date of this NewSalesOrderCommand.
        :param description: The description of this NewSalesOrderCommand.
        :param financial_information: The financial_information of this NewSalesOrderCommand.
        :param freight: The freight of this NewSalesOrderCommand.
        :param note: The note of this NewSalesOrderCommand.
        :param order_id: The order_id of this NewSalesOrderCommand.
        :param order_lines: The order_lines of this NewSalesOrderCommand.
        :param original_order_id: The original_order_id of this NewSalesOrderCommand.
        :param original_order_type: The original_order_type of this NewSalesOrderCommand.
        :param owner_id: The owner_id of this NewSalesOrderCommand.
        :param payment_settings: The payment_settings of this NewSalesOrderCommand.
        :param _print: The _print of this NewSalesOrderCommand.
        :param project_id: The project_id of this NewSalesOrderCommand.
        :param request_on: The request_on of this NewSalesOrderCommand.
        :param sales_person_id: The sales_person_id of this NewSalesOrderCommand.
        :param shipping: The shipping of this NewSalesOrderCommand.
        :param status: The status of this NewSalesOrderCommand.
        :param tax_zone_id: The tax_zone_id of this NewSalesOrderCommand.
        :param type: The type of this NewSalesOrderCommand.
        :param use_replacement_cost_for_margin_and_profit: The use_replacement_cost_for_margin_and_profit of this NewSalesOrderCommand.
        """
        self.openapi_types = {
            'billing': NewSalesOrderBillingDto,
            'branch_id': str,
            'cancel_by': datetime,
            'currency_id': str,
            'customer': NewSalesOrderCustomerDto,
            '_date': datetime,
            'description': str,
            'financial_information': NewSalesOrderFinancialInfoDto,
            'freight': NewSalesOrderFreightDto,
            'note': str,
            'order_id': str,
            'order_lines': List[NewSalesOrderLineDto],
            'original_order_id': str,
            'original_order_type': str,
            'owner_id': str,
            'payment_settings': NewSalesOrderPaymentSettings,
            '_print': SalesOrderPrintDto,
            'project_id': str,
            'request_on': datetime,
            'sales_person_id': str,
            'shipping': NewSalesOrderShippingDto,
            'status': str,
            'tax_zone_id': str,
            'type': str,
            'use_replacement_cost_for_margin_and_profit': bool
        }

        self.attribute_map = {
            'billing': 'billing',
            'branch_id': 'branchId',
            'cancel_by': 'cancelBy',
            'currency_id': 'currencyId',
            'customer': 'customer',
            '_date': 'date',
            'description': 'description',
            'financial_information': 'financialInformation',
            'freight': 'freight',
            'note': 'note',
            'order_id': 'orderId',
            'order_lines': 'orderLines',
            'original_order_id': 'originalOrderId',
            'original_order_type': 'originalOrderType',
            'owner_id': 'ownerId',
            'payment_settings': 'paymentSettings',
            '_print': 'print',
            'project_id': 'projectId',
            'request_on': 'requestOn',
            'sales_person_id': 'salesPersonId',
            'shipping': 'shipping',
            'status': 'status',
            'tax_zone_id': 'taxZoneId',
            'type': 'type',
            'use_replacement_cost_for_margin_and_profit': 'useReplacementCostForMarginAndProfit'
        }

        self._billing = billing
        self._branch_id = branch_id
        self._cancel_by = cancel_by
        self._currency_id = currency_id
        self._customer = customer
        self.__date = _date
        self._description = description
        self._financial_information = financial_information
        self._freight = freight
        self._note = note
        self._order_id = order_id
        self._order_lines = order_lines
        self._original_order_id = original_order_id
        self._original_order_type = original_order_type
        self._owner_id = owner_id
        self._payment_settings = payment_settings
        self.__print = _print
        self._project_id = project_id
        self._request_on = request_on
        self._sales_person_id = sales_person_id
        self._shipping = shipping
        self._status = status
        self._tax_zone_id = tax_zone_id
        self._type = type
        self._use_replacement_cost_for_margin_and_profit = use_replacement_cost_for_margin_and_profit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewSalesOrderCommand':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewSalesOrderCommand of this NewSalesOrderCommand.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing(self):
        """Gets the billing of this NewSalesOrderCommand.


        :return: The billing of this NewSalesOrderCommand.
        :rtype: NewSalesOrderBillingDto
        """
        return self._billing

    @billing.setter
    def billing(self, billing):
        """Sets the billing of this NewSalesOrderCommand.


        :param billing: The billing of this NewSalesOrderCommand.
        :type billing: NewSalesOrderBillingDto
        """

        self._billing = billing

    @property
    def branch_id(self):
        """Gets the branch_id of this NewSalesOrderCommand.

        The branch with which this order is associated. Prio for setting the Branch ID being:  <list type=\"number\"><item>BranchID set in body</item><item>BranchID from call header</item><item>BranchID from customer location</item><item>Company's default branch ID</item></list>

        :return: The branch_id of this NewSalesOrderCommand.
        :rtype: str
        """
        return self._branch_id

    @branch_id.setter
    def branch_id(self, branch_id):
        """Sets the branch_id of this NewSalesOrderCommand.

        The branch with which this order is associated. Prio for setting the Branch ID being:  <list type=\"number\"><item>BranchID set in body</item><item>BranchID from call header</item><item>BranchID from customer location</item><item>Company's default branch ID</item></list>

        :param branch_id: The branch_id of this NewSalesOrderCommand.
        :type branch_id: str
        """
        if branch_id is not None and len(branch_id) > 30:
            raise ValueError("Invalid value for `branch_id`, length must be less than or equal to `30`")

        self._branch_id = branch_id

    @property
    def cancel_by(self):
        """Gets the cancel_by of this NewSalesOrderCommand.

        Sets the cancel by date for the order to create. If not supplied, the order type's days to keep will be added to the current date to determine the value of this field  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The cancel_by of this NewSalesOrderCommand.
        :rtype: datetime
        """
        return self._cancel_by

    @cancel_by.setter
    def cancel_by(self, cancel_by):
        """Sets the cancel_by of this NewSalesOrderCommand.

        Sets the cancel by date for the order to create. If not supplied, the order type's days to keep will be added to the current date to determine the value of this field  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :param cancel_by: The cancel_by of this NewSalesOrderCommand.
        :type cancel_by: datetime
        """

        self._cancel_by = cancel_by

    @property
    def currency_id(self):
        """Gets the currency_id of this NewSalesOrderCommand.

        Override the CurrencyId for the order. Must be a valid currency Id. If not specified, the customer's currency is used if not null. If null, company base currency is used

        :return: The currency_id of this NewSalesOrderCommand.
        :rtype: str
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this NewSalesOrderCommand.

        Override the CurrencyId for the order. Must be a valid currency Id. If not specified, the customer's currency is used if not null. If null, company base currency is used

        :param currency_id: The currency_id of this NewSalesOrderCommand.
        :type currency_id: str
        """
        if currency_id is not None and len(currency_id) > 5:
            raise ValueError("Invalid value for `currency_id`, length must be less than or equal to `5`")

        self._currency_id = currency_id

    @property
    def customer(self):
        """Gets the customer of this NewSalesOrderCommand.


        :return: The customer of this NewSalesOrderCommand.
        :rtype: NewSalesOrderCustomerDto
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this NewSalesOrderCommand.


        :param customer: The customer of this NewSalesOrderCommand.
        :type customer: NewSalesOrderCustomerDto
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")

        self._customer = customer

    @property
    def _date(self):
        """Gets the _date of this NewSalesOrderCommand.

        Sets the order date of the order to create. If not supplied, the current date will be used  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The _date of this NewSalesOrderCommand.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this NewSalesOrderCommand.

        Sets the order date of the order to create. If not supplied, the current date will be used  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :param _date: The _date of this NewSalesOrderCommand.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this NewSalesOrderCommand.

        Sets the description for the order to create  <br>Note that text fields should not contain any personally identifiable or otherwise sensitive data

        :return: The description of this NewSalesOrderCommand.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NewSalesOrderCommand.

        Sets the description for the order to create  <br>Note that text fields should not contain any personally identifiable or otherwise sensitive data

        :param description: The description of this NewSalesOrderCommand.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")

        self._description = description

    @property
    def financial_information(self):
        """Gets the financial_information of this NewSalesOrderCommand.


        :return: The financial_information of this NewSalesOrderCommand.
        :rtype: NewSalesOrderFinancialInfoDto
        """
        return self._financial_information

    @financial_information.setter
    def financial_information(self, financial_information):
        """Sets the financial_information of this NewSalesOrderCommand.


        :param financial_information: The financial_information of this NewSalesOrderCommand.
        :type financial_information: NewSalesOrderFinancialInfoDto
        """

        self._financial_information = financial_information

    @property
    def freight(self):
        """Gets the freight of this NewSalesOrderCommand.


        :return: The freight of this NewSalesOrderCommand.
        :rtype: NewSalesOrderFreightDto
        """
        return self._freight

    @freight.setter
    def freight(self, freight):
        """Sets the freight of this NewSalesOrderCommand.


        :param freight: The freight of this NewSalesOrderCommand.
        :type freight: NewSalesOrderFreightDto
        """

        self._freight = freight

    @property
    def note(self):
        """Gets the note of this NewSalesOrderCommand.

        Any note to apply to the order header.

        :return: The note of this NewSalesOrderCommand.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this NewSalesOrderCommand.

        Any note to apply to the order header.

        :param note: The note of this NewSalesOrderCommand.
        :type note: str
        """
        if note is not None and len(note) > 2048:
            raise ValueError("Invalid value for `note`, length must be less than or equal to `2048`")

        self._note = note

    @property
    def order_id(self):
        """Gets the order_id of this NewSalesOrderCommand.

        Sets the new id that should be assigned to the new sales order.  This is required if the specified Visma.net.ERP.SalesOrders.Api.Application.Commands.NewSalesOrder.NewSalesOrderCommand.Type has manual numbering set up. If not it should be null or empty.

        :return: The order_id of this NewSalesOrderCommand.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this NewSalesOrderCommand.

        Sets the new id that should be assigned to the new sales order.  This is required if the specified Visma.net.ERP.SalesOrders.Api.Application.Commands.NewSalesOrder.NewSalesOrderCommand.Type has manual numbering set up. If not it should be null or empty.

        :param order_id: The order_id of this NewSalesOrderCommand.
        :type order_id: str
        """
        if order_id is not None and len(order_id) > 15:
            raise ValueError("Invalid value for `order_id`, length must be less than or equal to `15`")

        self._order_id = order_id

    @property
    def order_lines(self):
        """Gets the order_lines of this NewSalesOrderCommand.

        The lines that are added to the order upon creation

        :return: The order_lines of this NewSalesOrderCommand.
        :rtype: List[NewSalesOrderLineDto]
        """
        return self._order_lines

    @order_lines.setter
    def order_lines(self, order_lines):
        """Sets the order_lines of this NewSalesOrderCommand.

        The lines that are added to the order upon creation

        :param order_lines: The order_lines of this NewSalesOrderCommand.
        :type order_lines: List[NewSalesOrderLineDto]
        """

        self._order_lines = order_lines

    @property
    def original_order_id(self):
        """Gets the original_order_id of this NewSalesOrderCommand.

        Sets the unique identifier of the original order

        :return: The original_order_id of this NewSalesOrderCommand.
        :rtype: str
        """
        return self._original_order_id

    @original_order_id.setter
    def original_order_id(self, original_order_id):
        """Sets the original_order_id of this NewSalesOrderCommand.

        Sets the unique identifier of the original order

        :param original_order_id: The original_order_id of this NewSalesOrderCommand.
        :type original_order_id: str
        """
        if original_order_id is not None and len(original_order_id) > 15:
            raise ValueError("Invalid value for `original_order_id`, length must be less than or equal to `15`")

        self._original_order_id = original_order_id

    @property
    def original_order_type(self):
        """Gets the original_order_type of this NewSalesOrderCommand.

        Sets the type code for the original sales order

        :return: The original_order_type of this NewSalesOrderCommand.
        :rtype: str
        """
        return self._original_order_type

    @original_order_type.setter
    def original_order_type(self, original_order_type):
        """Sets the original_order_type of this NewSalesOrderCommand.

        Sets the type code for the original sales order

        :param original_order_type: The original_order_type of this NewSalesOrderCommand.
        :type original_order_type: str
        """
        if original_order_type is not None and len(original_order_type) > 2:
            raise ValueError("Invalid value for `original_order_type`, length must be less than or equal to `2`")

        self._original_order_type = original_order_type

    @property
    def owner_id(self):
        """Gets the owner_id of this NewSalesOrderCommand.

        Sets the owner (employee) for the order

        :return: The owner_id of this NewSalesOrderCommand.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this NewSalesOrderCommand.

        Sets the owner (employee) for the order

        :param owner_id: The owner_id of this NewSalesOrderCommand.
        :type owner_id: str
        """

        self._owner_id = owner_id

    @property
    def payment_settings(self):
        """Gets the payment_settings of this NewSalesOrderCommand.


        :return: The payment_settings of this NewSalesOrderCommand.
        :rtype: NewSalesOrderPaymentSettings
        """
        return self._payment_settings

    @payment_settings.setter
    def payment_settings(self, payment_settings):
        """Sets the payment_settings of this NewSalesOrderCommand.


        :param payment_settings: The payment_settings of this NewSalesOrderCommand.
        :type payment_settings: NewSalesOrderPaymentSettings
        """

        self._payment_settings = payment_settings

    @property
    def _print(self):
        """Gets the _print of this NewSalesOrderCommand.


        :return: The _print of this NewSalesOrderCommand.
        :rtype: SalesOrderPrintDto
        """
        return self.__print

    @_print.setter
    def _print(self, _print):
        """Sets the _print of this NewSalesOrderCommand.


        :param _print: The _print of this NewSalesOrderCommand.
        :type _print: SalesOrderPrintDto
        """

        self.__print = _print

    @property
    def project_id(self):
        """Gets the project_id of this NewSalesOrderCommand.

        The project with which this sales order is associated

        :return: The project_id of this NewSalesOrderCommand.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this NewSalesOrderCommand.

        The project with which this sales order is associated

        :param project_id: The project_id of this NewSalesOrderCommand.
        :type project_id: str
        """
        if project_id is not None and len(project_id) > 30:
            raise ValueError("Invalid value for `project_id`, length must be less than or equal to `30`")

        self._project_id = project_id

    @property
    def request_on(self):
        """Gets the request_on of this NewSalesOrderCommand.

        Sets the requested on date for the order to create. If not supplied, the current date will be used  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :return: The request_on of this NewSalesOrderCommand.
        :rtype: datetime
        """
        return self._request_on

    @request_on.setter
    def request_on(self, request_on):
        """Sets the request_on of this NewSalesOrderCommand.

        Sets the requested on date for the order to create. If not supplied, the current date will be used  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.

        :param request_on: The request_on of this NewSalesOrderCommand.
        :type request_on: datetime
        """

        self._request_on = request_on

    @property
    def sales_person_id(self):
        """Gets the sales_person_id of this NewSalesOrderCommand.

        Sets default sales person for the order

        :return: The sales_person_id of this NewSalesOrderCommand.
        :rtype: str
        """
        return self._sales_person_id

    @sales_person_id.setter
    def sales_person_id(self, sales_person_id):
        """Sets the sales_person_id of this NewSalesOrderCommand.

        Sets default sales person for the order

        :param sales_person_id: The sales_person_id of this NewSalesOrderCommand.
        :type sales_person_id: str
        """
        if sales_person_id is not None and len(sales_person_id) > 15:
            raise ValueError("Invalid value for `sales_person_id`, length must be less than or equal to `15`")

        self._sales_person_id = sales_person_id

    @property
    def shipping(self):
        """Gets the shipping of this NewSalesOrderCommand.


        :return: The shipping of this NewSalesOrderCommand.
        :rtype: NewSalesOrderShippingDto
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this NewSalesOrderCommand.


        :param shipping: The shipping of this NewSalesOrderCommand.
        :type shipping: NewSalesOrderShippingDto
        """

        self._shipping = shipping

    @property
    def status(self):
        """Gets the status of this NewSalesOrderCommand.

        Sets the initial status code for the order. Must be null, empty or one of \"Open\" or \"Hold\". If not supplied the value will be determined by the sales order type.

        :return: The status of this NewSalesOrderCommand.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NewSalesOrderCommand.

        Sets the initial status code for the order. Must be null, empty or one of \"Open\" or \"Hold\". If not supplied the value will be determined by the sales order type.

        :param status: The status of this NewSalesOrderCommand.
        :type status: str
        """

        self._status = status

    @property
    def tax_zone_id(self):
        """Gets the tax_zone_id of this NewSalesOrderCommand.

        Override the TaxZoneId for the order. If not specified, the customer's location's TaxZoneId will be used

        :return: The tax_zone_id of this NewSalesOrderCommand.
        :rtype: str
        """
        return self._tax_zone_id

    @tax_zone_id.setter
    def tax_zone_id(self, tax_zone_id):
        """Sets the tax_zone_id of this NewSalesOrderCommand.

        Override the TaxZoneId for the order. If not specified, the customer's location's TaxZoneId will be used

        :param tax_zone_id: The tax_zone_id of this NewSalesOrderCommand.
        :type tax_zone_id: str
        """

        self._tax_zone_id = tax_zone_id

    @property
    def type(self):
        """Gets the type of this NewSalesOrderCommand.

        Sets the type id of an active sales order type to create

        :return: The type of this NewSalesOrderCommand.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NewSalesOrderCommand.

        Sets the type id of an active sales order type to create

        :param type: The type of this NewSalesOrderCommand.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        if type is not None and len(type) < 1:
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")

        self._type = type

    @property
    def use_replacement_cost_for_margin_and_profit(self):
        """Gets the use_replacement_cost_for_margin_and_profit of this NewSalesOrderCommand.

        When this option is set to `true`, the `costTotal` of the order will be calculated based on `replacementUnitCost`.  If option is set to `false`, the `costTotal` will be calculated based on `unitCost`

        :return: The use_replacement_cost_for_margin_and_profit of this NewSalesOrderCommand.
        :rtype: bool
        """
        return self._use_replacement_cost_for_margin_and_profit

    @use_replacement_cost_for_margin_and_profit.setter
    def use_replacement_cost_for_margin_and_profit(self, use_replacement_cost_for_margin_and_profit):
        """Sets the use_replacement_cost_for_margin_and_profit of this NewSalesOrderCommand.

        When this option is set to `true`, the `costTotal` of the order will be calculated based on `replacementUnitCost`.  If option is set to `false`, the `costTotal` will be calculated based on `unitCost`

        :param use_replacement_cost_for_margin_and_profit: The use_replacement_cost_for_margin_and_profit of this NewSalesOrderCommand.
        :type use_replacement_cost_for_margin_and_profit: bool
        """

        self._use_replacement_cost_for_margin_and_profit = use_replacement_cost_for_margin_and_profit
