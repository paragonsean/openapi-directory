# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sales_order_rot_rut_distribution_dto import SalesOrderRotRutDistributionDto
from openapi_server import util


class SalesOrderRotRutDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appartment: str=None, distributed_automatically: bool=None, distribution: List[SalesOrderRotRutDistributionDto]=None, estate: str=None, organization_number: str=None, type: str=None):
        """SalesOrderRotRutDto - a model defined in OpenAPI

        :param appartment: The appartment of this SalesOrderRotRutDto.
        :param distributed_automatically: The distributed_automatically of this SalesOrderRotRutDto.
        :param distribution: The distribution of this SalesOrderRotRutDto.
        :param estate: The estate of this SalesOrderRotRutDto.
        :param organization_number: The organization_number of this SalesOrderRotRutDto.
        :param type: The type of this SalesOrderRotRutDto.
        """
        self.openapi_types = {
            'appartment': str,
            'distributed_automatically': bool,
            'distribution': List[SalesOrderRotRutDistributionDto],
            'estate': str,
            'organization_number': str,
            'type': str
        }

        self.attribute_map = {
            'appartment': 'appartment',
            'distributed_automatically': 'distributedAutomatically',
            'distribution': 'distribution',
            'estate': 'estate',
            'organization_number': 'organizationNumber',
            'type': 'type'
        }

        self._appartment = appartment
        self._distributed_automatically = distributed_automatically
        self._distribution = distribution
        self._estate = estate
        self._organization_number = organization_number
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesOrderRotRutDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SalesOrderRotRutDto of this SalesOrderRotRutDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appartment(self):
        """Gets the appartment of this SalesOrderRotRutDto.

        The appartment reference

        :return: The appartment of this SalesOrderRotRutDto.
        :rtype: str
        """
        return self._appartment

    @appartment.setter
    def appartment(self, appartment):
        """Sets the appartment of this SalesOrderRotRutDto.

        The appartment reference

        :param appartment: The appartment of this SalesOrderRotRutDto.
        :type appartment: str
        """

        self._appartment = appartment

    @property
    def distributed_automatically(self):
        """Gets the distributed_automatically of this SalesOrderRotRutDto.

        Whether the ROT/RUT is distributed automatically

        :return: The distributed_automatically of this SalesOrderRotRutDto.
        :rtype: bool
        """
        return self._distributed_automatically

    @distributed_automatically.setter
    def distributed_automatically(self, distributed_automatically):
        """Sets the distributed_automatically of this SalesOrderRotRutDto.

        Whether the ROT/RUT is distributed automatically

        :param distributed_automatically: The distributed_automatically of this SalesOrderRotRutDto.
        :type distributed_automatically: bool
        """

        self._distributed_automatically = distributed_automatically

    @property
    def distribution(self):
        """Gets the distribution of this SalesOrderRotRutDto.

        The distrinbution entries

        :return: The distribution of this SalesOrderRotRutDto.
        :rtype: List[SalesOrderRotRutDistributionDto]
        """
        return self._distribution

    @distribution.setter
    def distribution(self, distribution):
        """Sets the distribution of this SalesOrderRotRutDto.

        The distrinbution entries

        :param distribution: The distribution of this SalesOrderRotRutDto.
        :type distribution: List[SalesOrderRotRutDistributionDto]
        """

        self._distribution = distribution

    @property
    def estate(self):
        """Gets the estate of this SalesOrderRotRutDto.

        The estate reference

        :return: The estate of this SalesOrderRotRutDto.
        :rtype: str
        """
        return self._estate

    @estate.setter
    def estate(self, estate):
        """Sets the estate of this SalesOrderRotRutDto.

        The estate reference

        :param estate: The estate of this SalesOrderRotRutDto.
        :type estate: str
        """

        self._estate = estate

    @property
    def organization_number(self):
        """Gets the organization_number of this SalesOrderRotRutDto.

        The organization number

        :return: The organization_number of this SalesOrderRotRutDto.
        :rtype: str
        """
        return self._organization_number

    @organization_number.setter
    def organization_number(self, organization_number):
        """Sets the organization_number of this SalesOrderRotRutDto.

        The organization number

        :param organization_number: The organization_number of this SalesOrderRotRutDto.
        :type organization_number: str
        """

        self._organization_number = organization_number

    @property
    def type(self):
        """Gets the type of this SalesOrderRotRutDto.

        The type of ROT/RUT

        :return: The type of this SalesOrderRotRutDto.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SalesOrderRotRutDto.

        The type of ROT/RUT

        :param type: The type of this SalesOrderRotRutDto.
        :type type: str
        """

        self._type = type
