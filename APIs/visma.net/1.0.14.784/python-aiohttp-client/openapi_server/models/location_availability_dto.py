# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LocationAvailabilityDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, internal_location_id: int=None, last_modified: datetime=None, location_id: str=None, quantity_available: float=None, quantity_available_for_shipment: float=None, quantity_not_available: float=None, quantity_on_hand: float=None, quantity_purchase_orders: float=None):
        """LocationAvailabilityDto - a model defined in OpenAPI

        :param description: The description of this LocationAvailabilityDto.
        :param internal_location_id: The internal_location_id of this LocationAvailabilityDto.
        :param last_modified: The last_modified of this LocationAvailabilityDto.
        :param location_id: The location_id of this LocationAvailabilityDto.
        :param quantity_available: The quantity_available of this LocationAvailabilityDto.
        :param quantity_available_for_shipment: The quantity_available_for_shipment of this LocationAvailabilityDto.
        :param quantity_not_available: The quantity_not_available of this LocationAvailabilityDto.
        :param quantity_on_hand: The quantity_on_hand of this LocationAvailabilityDto.
        :param quantity_purchase_orders: The quantity_purchase_orders of this LocationAvailabilityDto.
        """
        self.openapi_types = {
            'description': str,
            'internal_location_id': int,
            'last_modified': datetime,
            'location_id': str,
            'quantity_available': float,
            'quantity_available_for_shipment': float,
            'quantity_not_available': float,
            'quantity_on_hand': float,
            'quantity_purchase_orders': float
        }

        self.attribute_map = {
            'description': 'description',
            'internal_location_id': 'internalLocationId',
            'last_modified': 'lastModified',
            'location_id': 'locationId',
            'quantity_available': 'quantityAvailable',
            'quantity_available_for_shipment': 'quantityAvailableForShipment',
            'quantity_not_available': 'quantityNotAvailable',
            'quantity_on_hand': 'quantityOnHand',
            'quantity_purchase_orders': 'quantityPurchaseOrders'
        }

        self._description = description
        self._internal_location_id = internal_location_id
        self._last_modified = last_modified
        self._location_id = location_id
        self._quantity_available = quantity_available
        self._quantity_available_for_shipment = quantity_available_for_shipment
        self._quantity_not_available = quantity_not_available
        self._quantity_on_hand = quantity_on_hand
        self._quantity_purchase_orders = quantity_purchase_orders

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocationAvailabilityDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocationAvailabilityDto of this LocationAvailabilityDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this LocationAvailabilityDto.

        The description of the location

        :return: The description of this LocationAvailabilityDto.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LocationAvailabilityDto.

        The description of the location

        :param description: The description of this LocationAvailabilityDto.
        :type description: str
        """

        self._description = description

    @property
    def internal_location_id(self):
        """Gets the internal_location_id of this LocationAvailabilityDto.

        The internal id used by the sytem for this location

        :return: The internal_location_id of this LocationAvailabilityDto.
        :rtype: int
        """
        return self._internal_location_id

    @internal_location_id.setter
    def internal_location_id(self, internal_location_id):
        """Sets the internal_location_id of this LocationAvailabilityDto.

        The internal id used by the sytem for this location

        :param internal_location_id: The internal_location_id of this LocationAvailabilityDto.
        :type internal_location_id: int
        """

        self._internal_location_id = internal_location_id

    @property
    def last_modified(self):
        """Gets the last_modified of this LocationAvailabilityDto.

        Date and time this entry for this location was modified  Unless a specific time zone offset is included (e.g. '2012-12-24T12:15:14+02:00'), the date is considered to be in the UTC time zone.

        :return: The last_modified of this LocationAvailabilityDto.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this LocationAvailabilityDto.

        Date and time this entry for this location was modified  Unless a specific time zone offset is included (e.g. '2012-12-24T12:15:14+02:00'), the date is considered to be in the UTC time zone.

        :param last_modified: The last_modified of this LocationAvailabilityDto.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def location_id(self):
        """Gets the location_id of this LocationAvailabilityDto.

        The location id (LocationCd) for this location

        :return: The location_id of this LocationAvailabilityDto.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this LocationAvailabilityDto.

        The location id (LocationCd) for this location

        :param location_id: The location_id of this LocationAvailabilityDto.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def quantity_available(self):
        """Gets the quantity_available of this LocationAvailabilityDto.

        You can configure the way this estimated quantity is calculated by using availability  calculation rules. The available quantity may include anticipated transactions and therefore  may be less than or greater than the QuantityOnHand. Anticipated transactions correspond  to the documents and transactions that have been entered in the system but not yet  processed to the end.  In the availability calculation settings of an item class, you specify which anticipated  transactions affect the available quantity. Thus, the available quantity may include  goods on purchase orders and exclude the goods allocated for sales orders. You can use  the available quantity as an indicator of demand.  Note: For quantities on warehouse location level, only quantities added specifically for the location are taken into consideration in quantityAvailable

        :return: The quantity_available of this LocationAvailabilityDto.
        :rtype: float
        """
        return self._quantity_available

    @quantity_available.setter
    def quantity_available(self, quantity_available):
        """Sets the quantity_available of this LocationAvailabilityDto.

        You can configure the way this estimated quantity is calculated by using availability  calculation rules. The available quantity may include anticipated transactions and therefore  may be less than or greater than the QuantityOnHand. Anticipated transactions correspond  to the documents and transactions that have been entered in the system but not yet  processed to the end.  In the availability calculation settings of an item class, you specify which anticipated  transactions affect the available quantity. Thus, the available quantity may include  goods on purchase orders and exclude the goods allocated for sales orders. You can use  the available quantity as an indicator of demand.  Note: For quantities on warehouse location level, only quantities added specifically for the location are taken into consideration in quantityAvailable

        :param quantity_available: The quantity_available of this LocationAvailabilityDto.
        :type quantity_available: float
        """

        self._quantity_available = quantity_available

    @property
    def quantity_available_for_shipment(self):
        """Gets the quantity_available_for_shipment of this LocationAvailabilityDto.

        Estimated quantity calculated by using the following formula: the QuantityOnHand minus the quantity on unreleased inventory  issues, minus the quantity allocated for shipping. Thus, the QuantityAvailableForShipment can be less than the QuantityOnHand.  Note: For quantities on warehouse location level, only quantities added specifically for the location are taken into consideration in quantityAvailableForShipment

        :return: The quantity_available_for_shipment of this LocationAvailabilityDto.
        :rtype: float
        """
        return self._quantity_available_for_shipment

    @quantity_available_for_shipment.setter
    def quantity_available_for_shipment(self, quantity_available_for_shipment):
        """Sets the quantity_available_for_shipment of this LocationAvailabilityDto.

        Estimated quantity calculated by using the following formula: the QuantityOnHand minus the quantity on unreleased inventory  issues, minus the quantity allocated for shipping. Thus, the QuantityAvailableForShipment can be less than the QuantityOnHand.  Note: For quantities on warehouse location level, only quantities added specifically for the location are taken into consideration in quantityAvailableForShipment

        :param quantity_available_for_shipment: The quantity_available_for_shipment of this LocationAvailabilityDto.
        :type quantity_available_for_shipment: float
        """

        self._quantity_available_for_shipment = quantity_available_for_shipment

    @property
    def quantity_not_available(self):
        """Gets the quantity_not_available of this LocationAvailabilityDto.

        The quantity stored at locations not included in the availability calculation.  For each warehouse location, the 'Include in Qty. Available' check box on the  Warehouses(IN204000) screen defines whether the quantity of items stored at this  location is included in the quantity of available items.

        :return: The quantity_not_available of this LocationAvailabilityDto.
        :rtype: float
        """
        return self._quantity_not_available

    @quantity_not_available.setter
    def quantity_not_available(self, quantity_not_available):
        """Sets the quantity_not_available of this LocationAvailabilityDto.

        The quantity stored at locations not included in the availability calculation.  For each warehouse location, the 'Include in Qty. Available' check box on the  Warehouses(IN204000) screen defines whether the quantity of items stored at this  location is included in the quantity of available items.

        :param quantity_not_available: The quantity_not_available of this LocationAvailabilityDto.
        :type quantity_not_available: float
        """

        self._quantity_not_available = quantity_not_available

    @property
    def quantity_on_hand(self):
        """Gets the quantity_on_hand of this LocationAvailabilityDto.

        Physical quantity on-hand of items in the specific location

        :return: The quantity_on_hand of this LocationAvailabilityDto.
        :rtype: float
        """
        return self._quantity_on_hand

    @quantity_on_hand.setter
    def quantity_on_hand(self, quantity_on_hand):
        """Sets the quantity_on_hand of this LocationAvailabilityDto.

        Physical quantity on-hand of items in the specific location

        :param quantity_on_hand: The quantity_on_hand of this LocationAvailabilityDto.
        :type quantity_on_hand: float
        """

        self._quantity_on_hand = quantity_on_hand

    @property
    def quantity_purchase_orders(self):
        """Gets the quantity_purchase_orders of this LocationAvailabilityDto.

        The quantity of the inventory item included in open purchase orders.  Note: For quantities on warehouse location level, only quantities added specifically for the location are taken into consideration

        :return: The quantity_purchase_orders of this LocationAvailabilityDto.
        :rtype: float
        """
        return self._quantity_purchase_orders

    @quantity_purchase_orders.setter
    def quantity_purchase_orders(self, quantity_purchase_orders):
        """Sets the quantity_purchase_orders of this LocationAvailabilityDto.

        The quantity of the inventory item included in open purchase orders.  Note: For quantities on warehouse location level, only quantities added specifically for the location are taken into consideration

        :param quantity_purchase_orders: The quantity_purchase_orders of this LocationAvailabilityDto.
        :type quantity_purchase_orders: float
        """

        self._quantity_purchase_orders = quantity_purchase_orders
