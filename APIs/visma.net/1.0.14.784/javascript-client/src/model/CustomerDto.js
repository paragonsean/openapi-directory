/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomerLocationDto from './CustomerLocationDto';

/**
 * The CustomerDto model module.
 * @module model/CustomerDto
 * @version 1.0.14.784
 */
class CustomerDto {
    /**
     * Constructs a new <code>CustomerDto</code>.
     * The Visma.net.ERP.SalesOrders.Api.Dto.CustomerDto class Defines a customer
     * @alias module:model/CustomerDto
     */
    constructor() { 
        
        CustomerDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomerDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomerDto} obj Optional instance to populate.
     * @return {module:model/CustomerDto} The populated <code>CustomerDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomerDto();

            if (data.hasOwnProperty('addressLine1')) {
                obj['addressLine1'] = ApiClient.convertToType(data['addressLine1'], 'String');
            }
            if (data.hasOwnProperty('addressLine2')) {
                obj['addressLine2'] = ApiClient.convertToType(data['addressLine2'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('currencyId')) {
                obj['currencyId'] = ApiClient.convertToType(data['currencyId'], 'String');
            }
            if (data.hasOwnProperty('customerClassId')) {
                obj['customerClassId'] = ApiClient.convertToType(data['customerClassId'], 'String');
            }
            if (data.hasOwnProperty('defaultLocation')) {
                obj['defaultLocation'] = CustomerLocationDto.constructFromObject(data['defaultLocation']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('internalId')) {
                obj['internalId'] = ApiClient.convertToType(data['internalId'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('salutation')) {
                obj['salutation'] = ApiClient.convertToType(data['salutation'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomerDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomerDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['addressLine1'] && !(typeof data['addressLine1'] === 'string' || data['addressLine1'] instanceof String)) {
            throw new Error("Expected the field `addressLine1` to be a primitive type in the JSON string but got " + data['addressLine1']);
        }
        // ensure the json data is a string
        if (data['addressLine2'] && !(typeof data['addressLine2'] === 'string' || data['addressLine2'] instanceof String)) {
            throw new Error("Expected the field `addressLine2` to be a primitive type in the JSON string but got " + data['addressLine2']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['currencyId'] && !(typeof data['currencyId'] === 'string' || data['currencyId'] instanceof String)) {
            throw new Error("Expected the field `currencyId` to be a primitive type in the JSON string but got " + data['currencyId']);
        }
        // ensure the json data is a string
        if (data['customerClassId'] && !(typeof data['customerClassId'] === 'string' || data['customerClassId'] instanceof String)) {
            throw new Error("Expected the field `customerClassId` to be a primitive type in the JSON string but got " + data['customerClassId']);
        }
        // validate the optional field `defaultLocation`
        if (data['defaultLocation']) { // data not null
          CustomerLocationDto.validateJSON(data['defaultLocation']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is a string
        if (data['salutation'] && !(typeof data['salutation'] === 'string' || data['salutation'] instanceof String)) {
            throw new Error("Expected the field `salutation` to be a primitive type in the JSON string but got " + data['salutation']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The customer's first address line
 * @member {String} addressLine1
 */
CustomerDto.prototype['addressLine1'] = undefined;

/**
 * The customer's second address line
 * @member {String} addressLine2
 */
CustomerDto.prototype['addressLine2'] = undefined;

/**
 * The customer's country code
 * @member {String} country
 */
CustomerDto.prototype['country'] = undefined;

/**
 * The currency Id used by the customer
 * @member {String} currencyId
 */
CustomerDto.prototype['currencyId'] = undefined;

/**
 * The class of the customer
 * @member {String} customerClassId
 */
CustomerDto.prototype['customerClassId'] = undefined;

/**
 * @member {module:model/CustomerLocationDto} defaultLocation
 */
CustomerDto.prototype['defaultLocation'] = undefined;

/**
 * Unique id for the customer
 * @member {String} id
 */
CustomerDto.prototype['id'] = undefined;

/**
 * An internal unique id
 * @member {Number} internalId
 */
CustomerDto.prototype['internalId'] = undefined;

/**
 * The name of the customer
 * @member {String} name
 */
CustomerDto.prototype['name'] = undefined;

/**
 * The customer's postal code
 * @member {String} postalCode
 */
CustomerDto.prototype['postalCode'] = undefined;

/**
 * The customer's salutation
 * @member {String} salutation
 */
CustomerDto.prototype['salutation'] = undefined;

/**
 * The customer's status code
 * @member {String} status
 */
CustomerDto.prototype['status'] = undefined;






export default CustomerDto;

