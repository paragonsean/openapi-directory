/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NewSalesOrderBillingDto from './NewSalesOrderBillingDto';
import NewSalesOrderCustomerDto from './NewSalesOrderCustomerDto';
import NewSalesOrderFinancialInfoDto from './NewSalesOrderFinancialInfoDto';
import NewSalesOrderFreightDto from './NewSalesOrderFreightDto';
import NewSalesOrderLineDto from './NewSalesOrderLineDto';
import NewSalesOrderPaymentSettings from './NewSalesOrderPaymentSettings';
import NewSalesOrderShippingDto from './NewSalesOrderShippingDto';
import SalesOrderPrintDto from './SalesOrderPrintDto';

/**
 * The NewSalesOrderCommand model module.
 * @module model/NewSalesOrderCommand
 * @version 1.0.14.784
 */
class NewSalesOrderCommand {
    /**
     * Constructs a new <code>NewSalesOrderCommand</code>.
     * @alias module:model/NewSalesOrderCommand
     * @param customer {module:model/NewSalesOrderCustomerDto} 
     * @param type {String} Sets the type id of an active sales order type to create
     */
    constructor(customer, type) { 
        
        NewSalesOrderCommand.initialize(this, customer, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, customer, type) { 
        obj['customer'] = customer;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>NewSalesOrderCommand</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewSalesOrderCommand} obj Optional instance to populate.
     * @return {module:model/NewSalesOrderCommand} The populated <code>NewSalesOrderCommand</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewSalesOrderCommand();

            if (data.hasOwnProperty('billing')) {
                obj['billing'] = NewSalesOrderBillingDto.constructFromObject(data['billing']);
            }
            if (data.hasOwnProperty('branchId')) {
                obj['branchId'] = ApiClient.convertToType(data['branchId'], 'String');
            }
            if (data.hasOwnProperty('cancelBy')) {
                obj['cancelBy'] = ApiClient.convertToType(data['cancelBy'], 'Date');
            }
            if (data.hasOwnProperty('currencyId')) {
                obj['currencyId'] = ApiClient.convertToType(data['currencyId'], 'String');
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = NewSalesOrderCustomerDto.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('financialInformation')) {
                obj['financialInformation'] = NewSalesOrderFinancialInfoDto.constructFromObject(data['financialInformation']);
            }
            if (data.hasOwnProperty('freight')) {
                obj['freight'] = NewSalesOrderFreightDto.constructFromObject(data['freight']);
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'String');
            }
            if (data.hasOwnProperty('orderLines')) {
                obj['orderLines'] = ApiClient.convertToType(data['orderLines'], [NewSalesOrderLineDto]);
            }
            if (data.hasOwnProperty('originalOrderId')) {
                obj['originalOrderId'] = ApiClient.convertToType(data['originalOrderId'], 'String');
            }
            if (data.hasOwnProperty('originalOrderType')) {
                obj['originalOrderType'] = ApiClient.convertToType(data['originalOrderType'], 'String');
            }
            if (data.hasOwnProperty('ownerId')) {
                obj['ownerId'] = ApiClient.convertToType(data['ownerId'], 'String');
            }
            if (data.hasOwnProperty('paymentSettings')) {
                obj['paymentSettings'] = NewSalesOrderPaymentSettings.constructFromObject(data['paymentSettings']);
            }
            if (data.hasOwnProperty('print')) {
                obj['print'] = SalesOrderPrintDto.constructFromObject(data['print']);
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('requestOn')) {
                obj['requestOn'] = ApiClient.convertToType(data['requestOn'], 'Date');
            }
            if (data.hasOwnProperty('salesPersonId')) {
                obj['salesPersonId'] = ApiClient.convertToType(data['salesPersonId'], 'String');
            }
            if (data.hasOwnProperty('shipping')) {
                obj['shipping'] = NewSalesOrderShippingDto.constructFromObject(data['shipping']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('taxZoneId')) {
                obj['taxZoneId'] = ApiClient.convertToType(data['taxZoneId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('useReplacementCostForMarginAndProfit')) {
                obj['useReplacementCostForMarginAndProfit'] = ApiClient.convertToType(data['useReplacementCostForMarginAndProfit'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NewSalesOrderCommand</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NewSalesOrderCommand</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NewSalesOrderCommand.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `billing`
        if (data['billing']) { // data not null
          NewSalesOrderBillingDto.validateJSON(data['billing']);
        }
        // ensure the json data is a string
        if (data['branchId'] && !(typeof data['branchId'] === 'string' || data['branchId'] instanceof String)) {
            throw new Error("Expected the field `branchId` to be a primitive type in the JSON string but got " + data['branchId']);
        }
        // ensure the json data is a string
        if (data['currencyId'] && !(typeof data['currencyId'] === 'string' || data['currencyId'] instanceof String)) {
            throw new Error("Expected the field `currencyId` to be a primitive type in the JSON string but got " + data['currencyId']);
        }
        // validate the optional field `customer`
        if (data['customer']) { // data not null
          NewSalesOrderCustomerDto.validateJSON(data['customer']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `financialInformation`
        if (data['financialInformation']) { // data not null
          NewSalesOrderFinancialInfoDto.validateJSON(data['financialInformation']);
        }
        // validate the optional field `freight`
        if (data['freight']) { // data not null
          NewSalesOrderFreightDto.validateJSON(data['freight']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['orderId'] && !(typeof data['orderId'] === 'string' || data['orderId'] instanceof String)) {
            throw new Error("Expected the field `orderId` to be a primitive type in the JSON string but got " + data['orderId']);
        }
        if (data['orderLines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['orderLines'])) {
                throw new Error("Expected the field `orderLines` to be an array in the JSON data but got " + data['orderLines']);
            }
            // validate the optional field `orderLines` (array)
            for (const item of data['orderLines']) {
                NewSalesOrderLineDto.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['originalOrderId'] && !(typeof data['originalOrderId'] === 'string' || data['originalOrderId'] instanceof String)) {
            throw new Error("Expected the field `originalOrderId` to be a primitive type in the JSON string but got " + data['originalOrderId']);
        }
        // ensure the json data is a string
        if (data['originalOrderType'] && !(typeof data['originalOrderType'] === 'string' || data['originalOrderType'] instanceof String)) {
            throw new Error("Expected the field `originalOrderType` to be a primitive type in the JSON string but got " + data['originalOrderType']);
        }
        // ensure the json data is a string
        if (data['ownerId'] && !(typeof data['ownerId'] === 'string' || data['ownerId'] instanceof String)) {
            throw new Error("Expected the field `ownerId` to be a primitive type in the JSON string but got " + data['ownerId']);
        }
        // validate the optional field `paymentSettings`
        if (data['paymentSettings']) { // data not null
          NewSalesOrderPaymentSettings.validateJSON(data['paymentSettings']);
        }
        // validate the optional field `print`
        if (data['print']) { // data not null
          SalesOrderPrintDto.validateJSON(data['print']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['salesPersonId'] && !(typeof data['salesPersonId'] === 'string' || data['salesPersonId'] instanceof String)) {
            throw new Error("Expected the field `salesPersonId` to be a primitive type in the JSON string but got " + data['salesPersonId']);
        }
        // validate the optional field `shipping`
        if (data['shipping']) { // data not null
          NewSalesOrderShippingDto.validateJSON(data['shipping']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['taxZoneId'] && !(typeof data['taxZoneId'] === 'string' || data['taxZoneId'] instanceof String)) {
            throw new Error("Expected the field `taxZoneId` to be a primitive type in the JSON string but got " + data['taxZoneId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

NewSalesOrderCommand.RequiredProperties = ["customer", "type"];

/**
 * @member {module:model/NewSalesOrderBillingDto} billing
 */
NewSalesOrderCommand.prototype['billing'] = undefined;

/**
 * The branch with which this order is associated. Prio for setting the Branch ID being:  <list type=\"number\"><item>BranchID set in body</item><item>BranchID from call header</item><item>BranchID from customer location</item><item>Company's default branch ID</item></list>
 * @member {String} branchId
 */
NewSalesOrderCommand.prototype['branchId'] = undefined;

/**
 * Sets the cancel by date for the order to create. If not supplied, the order type's days to keep will be added to the current date to determine the value of this field  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
 * @member {Date} cancelBy
 */
NewSalesOrderCommand.prototype['cancelBy'] = undefined;

/**
 * Override the CurrencyId for the order. Must be a valid currency Id. If not specified, the customer's currency is used if not null. If null, company base currency is used
 * @member {String} currencyId
 */
NewSalesOrderCommand.prototype['currencyId'] = undefined;

/**
 * @member {module:model/NewSalesOrderCustomerDto} customer
 */
NewSalesOrderCommand.prototype['customer'] = undefined;

/**
 * Sets the order date of the order to create. If not supplied, the current date will be used  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
 * @member {Date} date
 */
NewSalesOrderCommand.prototype['date'] = undefined;

/**
 * Sets the description for the order to create  <br>Note that text fields should not contain any personally identifiable or otherwise sensitive data
 * @member {String} description
 */
NewSalesOrderCommand.prototype['description'] = undefined;

/**
 * @member {module:model/NewSalesOrderFinancialInfoDto} financialInformation
 */
NewSalesOrderCommand.prototype['financialInformation'] = undefined;

/**
 * @member {module:model/NewSalesOrderFreightDto} freight
 */
NewSalesOrderCommand.prototype['freight'] = undefined;

/**
 * Any note to apply to the order header.
 * @member {String} note
 */
NewSalesOrderCommand.prototype['note'] = undefined;

/**
 * Sets the new id that should be assigned to the new sales order.  This is required if the specified Visma.net.ERP.SalesOrders.Api.Application.Commands.NewSalesOrder.NewSalesOrderCommand.Type has manual numbering set up. If not it should be null or empty.
 * @member {String} orderId
 */
NewSalesOrderCommand.prototype['orderId'] = undefined;

/**
 * The lines that are added to the order upon creation
 * @member {Array.<module:model/NewSalesOrderLineDto>} orderLines
 */
NewSalesOrderCommand.prototype['orderLines'] = undefined;

/**
 * Sets the unique identifier of the original order
 * @member {String} originalOrderId
 */
NewSalesOrderCommand.prototype['originalOrderId'] = undefined;

/**
 * Sets the type code for the original sales order
 * @member {String} originalOrderType
 */
NewSalesOrderCommand.prototype['originalOrderType'] = undefined;

/**
 * Sets the owner (employee) for the order
 * @member {String} ownerId
 */
NewSalesOrderCommand.prototype['ownerId'] = undefined;

/**
 * @member {module:model/NewSalesOrderPaymentSettings} paymentSettings
 */
NewSalesOrderCommand.prototype['paymentSettings'] = undefined;

/**
 * @member {module:model/SalesOrderPrintDto} print
 */
NewSalesOrderCommand.prototype['print'] = undefined;

/**
 * The project with which this sales order is associated
 * @member {String} projectId
 */
NewSalesOrderCommand.prototype['projectId'] = undefined;

/**
 * Sets the requested on date for the order to create. If not supplied, the current date will be used  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
 * @member {Date} requestOn
 */
NewSalesOrderCommand.prototype['requestOn'] = undefined;

/**
 * Sets default sales person for the order
 * @member {String} salesPersonId
 */
NewSalesOrderCommand.prototype['salesPersonId'] = undefined;

/**
 * @member {module:model/NewSalesOrderShippingDto} shipping
 */
NewSalesOrderCommand.prototype['shipping'] = undefined;

/**
 * Sets the initial status code for the order. Must be null, empty or one of \"Open\" or \"Hold\". If not supplied the value will be determined by the sales order type.
 * @member {String} status
 */
NewSalesOrderCommand.prototype['status'] = undefined;

/**
 * Override the TaxZoneId for the order. If not specified, the customer's location's TaxZoneId will be used
 * @member {String} taxZoneId
 */
NewSalesOrderCommand.prototype['taxZoneId'] = undefined;

/**
 * Sets the type id of an active sales order type to create
 * @member {String} type
 */
NewSalesOrderCommand.prototype['type'] = undefined;

/**
 * When this option is set to `true`, the `costTotal` of the order will be calculated based on `replacementUnitCost`.  If option is set to `false`, the `costTotal` will be calculated based on `unitCost`
 * @member {Boolean} useReplacementCostForMarginAndProfit
 */
NewSalesOrderCommand.prototype['useReplacementCostForMarginAndProfit'] = undefined;






export default NewSalesOrderCommand;

