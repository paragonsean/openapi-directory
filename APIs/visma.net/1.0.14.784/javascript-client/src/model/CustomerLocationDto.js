/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CustomerLocationDto model module.
 * @module model/CustomerLocationDto
 * @version 1.0.14.784
 */
class CustomerLocationDto {
    /**
     * Constructs a new <code>CustomerLocationDto</code>.
     * @alias module:model/CustomerLocationDto
     */
    constructor() { 
        
        CustomerLocationDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomerLocationDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomerLocationDto} obj Optional instance to populate.
     * @return {module:model/CustomerLocationDto} The populated <code>CustomerLocationDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomerLocationDto();

            if (data.hasOwnProperty('corporateId')) {
                obj['corporateId'] = ApiClient.convertToType(data['corporateId'], 'String');
            }
            if (data.hasOwnProperty('countryId')) {
                obj['countryId'] = ApiClient.convertToType(data['countryId'], 'String');
            }
            if (data.hasOwnProperty('gln')) {
                obj['gln'] = ApiClient.convertToType(data['gln'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('internalId')) {
                obj['internalId'] = ApiClient.convertToType(data['internalId'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('taxRegistrationId')) {
                obj['taxRegistrationId'] = ApiClient.convertToType(data['taxRegistrationId'], 'String');
            }
            if (data.hasOwnProperty('warehouseId')) {
                obj['warehouseId'] = ApiClient.convertToType(data['warehouseId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomerLocationDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomerLocationDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['corporateId'] && !(typeof data['corporateId'] === 'string' || data['corporateId'] instanceof String)) {
            throw new Error("Expected the field `corporateId` to be a primitive type in the JSON string but got " + data['corporateId']);
        }
        // ensure the json data is a string
        if (data['countryId'] && !(typeof data['countryId'] === 'string' || data['countryId'] instanceof String)) {
            throw new Error("Expected the field `countryId` to be a primitive type in the JSON string but got " + data['countryId']);
        }
        // ensure the json data is a string
        if (data['gln'] && !(typeof data['gln'] === 'string' || data['gln'] instanceof String)) {
            throw new Error("Expected the field `gln` to be a primitive type in the JSON string but got " + data['gln']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['taxRegistrationId'] && !(typeof data['taxRegistrationId'] === 'string' || data['taxRegistrationId'] instanceof String)) {
            throw new Error("Expected the field `taxRegistrationId` to be a primitive type in the JSON string but got " + data['taxRegistrationId']);
        }
        // ensure the json data is a string
        if (data['warehouseId'] && !(typeof data['warehouseId'] === 'string' || data['warehouseId'] instanceof String)) {
            throw new Error("Expected the field `warehouseId` to be a primitive type in the JSON string but got " + data['warehouseId']);
        }

        return true;
    }


}



/**
 * The corporate id of the location
 * @member {String} corporateId
 */
CustomerLocationDto.prototype['corporateId'] = undefined;

/**
 * The country code of the location
 * @member {String} countryId
 */
CustomerLocationDto.prototype['countryId'] = undefined;

/**
 * The global localization number of the location
 * @member {String} gln
 */
CustomerLocationDto.prototype['gln'] = undefined;

/**
 * Location id
 * @member {String} id
 */
CustomerLocationDto.prototype['id'] = undefined;

/**
 * An internal id of the customer location
 * @member {Number} internalId
 */
CustomerLocationDto.prototype['internalId'] = undefined;

/**
 * Location description
 * @member {String} name
 */
CustomerLocationDto.prototype['name'] = undefined;

/**
 * The tax registration id of the location
 * @member {String} taxRegistrationId
 */
CustomerLocationDto.prototype['taxRegistrationId'] = undefined;

/**
 * The site id of the location
 * @member {String} warehouseId
 */
CustomerLocationDto.prototype['warehouseId'] = undefined;






export default CustomerLocationDto;

