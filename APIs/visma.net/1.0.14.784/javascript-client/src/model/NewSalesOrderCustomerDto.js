/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NewSalesOrderCustomerDto model module.
 * @module model/NewSalesOrderCustomerDto
 * @version 1.0.14.784
 */
class NewSalesOrderCustomerDto {
    /**
     * Constructs a new <code>NewSalesOrderCustomerDto</code>.
     * @alias module:model/NewSalesOrderCustomerDto
     */
    constructor() { 
        
        NewSalesOrderCustomerDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NewSalesOrderCustomerDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewSalesOrderCustomerDto} obj Optional instance to populate.
     * @return {module:model/NewSalesOrderCustomerDto} The populated <code>NewSalesOrderCustomerDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewSalesOrderCustomerDto();

            if (data.hasOwnProperty('contactId')) {
                obj['contactId'] = ApiClient.convertToType(data['contactId'], 'Number');
            }
            if (data.hasOwnProperty('gln')) {
                obj['gln'] = ApiClient.convertToType(data['gln'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('locationId')) {
                obj['locationId'] = ApiClient.convertToType(data['locationId'], 'String');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'String');
            }
            if (data.hasOwnProperty('refNo')) {
                obj['refNo'] = ApiClient.convertToType(data['refNo'], 'String');
            }
            if (data.hasOwnProperty('termsId')) {
                obj['termsId'] = ApiClient.convertToType(data['termsId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NewSalesOrderCustomerDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NewSalesOrderCustomerDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['gln'] && !(typeof data['gln'] === 'string' || data['gln'] instanceof String)) {
            throw new Error("Expected the field `gln` to be a primitive type in the JSON string but got " + data['gln']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['locationId'] && !(typeof data['locationId'] === 'string' || data['locationId'] instanceof String)) {
            throw new Error("Expected the field `locationId` to be a primitive type in the JSON string but got " + data['locationId']);
        }
        // ensure the json data is a string
        if (data['order'] && !(typeof data['order'] === 'string' || data['order'] instanceof String)) {
            throw new Error("Expected the field `order` to be a primitive type in the JSON string but got " + data['order']);
        }
        // ensure the json data is a string
        if (data['refNo'] && !(typeof data['refNo'] === 'string' || data['refNo'] instanceof String)) {
            throw new Error("Expected the field `refNo` to be a primitive type in the JSON string but got " + data['refNo']);
        }
        // ensure the json data is a string
        if (data['termsId'] && !(typeof data['termsId'] === 'string' || data['termsId'] instanceof String)) {
            throw new Error("Expected the field `termsId` to be a primitive type in the JSON string but got " + data['termsId']);
        }

        return true;
    }


}



/**
 * The contact id for the customer
 * @member {Number} contactId
 */
NewSalesOrderCustomerDto.prototype['contactId'] = undefined;

/**
 * The unique global location number of the customer
 * @member {String} gln
 */
NewSalesOrderCustomerDto.prototype['gln'] = undefined;

/**
 * The unique id of the the customer
 * @member {String} id
 */
NewSalesOrderCustomerDto.prototype['id'] = undefined;

/**
 * Sets the location for the customer supplied to use on the order.  Must be a valid active location for the customer supplied in Visma.net.ERP.SalesOrders.Api.Dto.NewSalesOrder.NewSalesOrderCustomerDto.Id
 * @member {String} locationId
 */
NewSalesOrderCustomerDto.prototype['locationId'] = undefined;

/**
 * The customer order text
 * @member {String} order
 */
NewSalesOrderCustomerDto.prototype['order'] = undefined;

/**
 * The customer ref number text
 * @member {String} refNo
 */
NewSalesOrderCustomerDto.prototype['refNo'] = undefined;

/**
 * Sets the terms to use for the sales order.  Must be a valid terms identifier
 * @member {String} termsId
 */
NewSalesOrderCustomerDto.prototype['termsId'] = undefined;






export default NewSalesOrderCustomerDto;

