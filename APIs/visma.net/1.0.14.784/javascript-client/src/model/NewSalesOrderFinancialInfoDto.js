/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NewSalesOrderFinancialInfoDto model module.
 * @module model/NewSalesOrderFinancialInfoDto
 * @version 1.0.14.784
 */
class NewSalesOrderFinancialInfoDto {
    /**
     * Constructs a new <code>NewSalesOrderFinancialInfoDto</code>.
     * @alias module:model/NewSalesOrderFinancialInfoDto
     */
    constructor() { 
        
        NewSalesOrderFinancialInfoDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NewSalesOrderFinancialInfoDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewSalesOrderFinancialInfoDto} obj Optional instance to populate.
     * @return {module:model/NewSalesOrderFinancialInfoDto} The populated <code>NewSalesOrderFinancialInfoDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewSalesOrderFinancialInfoDto();

            if (data.hasOwnProperty('cashDiscountDate')) {
                obj['cashDiscountDate'] = ApiClient.convertToType(data['cashDiscountDate'], 'Date');
            }
            if (data.hasOwnProperty('dueDate')) {
                obj['dueDate'] = ApiClient.convertToType(data['dueDate'], 'Date');
            }
            if (data.hasOwnProperty('invoiceDate')) {
                obj['invoiceDate'] = ApiClient.convertToType(data['invoiceDate'], 'Date');
            }
            if (data.hasOwnProperty('invoiceId')) {
                obj['invoiceId'] = ApiClient.convertToType(data['invoiceId'], 'String');
            }
            if (data.hasOwnProperty('invoiceSeparately')) {
                obj['invoiceSeparately'] = ApiClient.convertToType(data['invoiceSeparately'], 'Boolean');
            }
            if (data.hasOwnProperty('postPeriod')) {
                obj['postPeriod'] = ApiClient.convertToType(data['postPeriod'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NewSalesOrderFinancialInfoDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NewSalesOrderFinancialInfoDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['invoiceId'] && !(typeof data['invoiceId'] === 'string' || data['invoiceId'] instanceof String)) {
            throw new Error("Expected the field `invoiceId` to be a primitive type in the JSON string but got " + data['invoiceId']);
        }
        // ensure the json data is a string
        if (data['postPeriod'] && !(typeof data['postPeriod'] === 'string' || data['postPeriod'] instanceof String)) {
            throw new Error("Expected the field `postPeriod` to be a primitive type in the JSON string but got " + data['postPeriod']);
        }

        return true;
    }


}



/**
 * The date when the cash discount is available for the invoice created for the order. Default date is set based on the terms selected in the order.  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
 * @member {Date} cashDiscountDate
 */
NewSalesOrderFinancialInfoDto.prototype['cashDiscountDate'] = undefined;

/**
 * The due date for the invoice created for the order. Default due date is set according to the credit terms.  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
 * @member {Date} dueDate
 */
NewSalesOrderFinancialInfoDto.prototype['dueDate'] = undefined;

/**
 * Sets the invoice date of the invoice that will be generated for the order.  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
 * @member {Date} invoiceDate
 */
NewSalesOrderFinancialInfoDto.prototype['invoiceDate'] = undefined;

/**
 * The reference number of the invoice generated for this order.  This can be used if the numbering sequence assigned to invoices is configured for manual numbering.
 * @member {String} invoiceId
 */
NewSalesOrderFinancialInfoDto.prototype['invoiceId'] = undefined;

/**
 * Sets if the order should be invoiced/billed separately
 * @member {Boolean} invoiceSeparately
 */
NewSalesOrderFinancialInfoDto.prototype['invoiceSeparately'] = undefined;

/**
 * The post period for the invoice. This can be used to override the financial period. Must be a valid existing financial period.
 * @member {String} postPeriod
 */
NewSalesOrderFinancialInfoDto.prototype['postPeriod'] = undefined;






export default NewSalesOrderFinancialInfoDto;

