/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContactDto model module.
 * @module model/ContactDto
 * @version 1.0.14.784
 */
class ContactDto {
    /**
     * Constructs a new <code>ContactDto</code>.
     * @alias module:model/ContactDto
     */
    constructor() { 
        
        ContactDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContactDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContactDto} obj Optional instance to populate.
     * @return {module:model/ContactDto} The populated <code>ContactDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactDto();

            if (data.hasOwnProperty('attention')) {
                obj['attention'] = ApiClient.convertToType(data['attention'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('fax')) {
                obj['fax'] = ApiClient.convertToType(data['fax'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('overridesDefault')) {
                obj['overridesDefault'] = ApiClient.convertToType(data['overridesDefault'], 'Boolean');
            }
            if (data.hasOwnProperty('phone1')) {
                obj['phone1'] = ApiClient.convertToType(data['phone1'], 'String');
            }
            if (data.hasOwnProperty('phone2')) {
                obj['phone2'] = ApiClient.convertToType(data['phone2'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContactDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContactDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['attention'] && !(typeof data['attention'] === 'string' || data['attention'] instanceof String)) {
            throw new Error("Expected the field `attention` to be a primitive type in the JSON string but got " + data['attention']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['fax'] && !(typeof data['fax'] === 'string' || data['fax'] instanceof String)) {
            throw new Error("Expected the field `fax` to be a primitive type in the JSON string but got " + data['fax']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['phone1'] && !(typeof data['phone1'] === 'string' || data['phone1'] instanceof String)) {
            throw new Error("Expected the field `phone1` to be a primitive type in the JSON string but got " + data['phone1']);
        }
        // ensure the json data is a string
        if (data['phone2'] && !(typeof data['phone2'] === 'string' || data['phone2'] instanceof String)) {
            throw new Error("Expected the field `phone2` to be a primitive type in the JSON string but got " + data['phone2']);
        }

        return true;
    }


}



/**
 * Any attention for the contact
 * @member {String} attention
 */
ContactDto.prototype['attention'] = undefined;

/**
 * The e-mail address of the contact
 * @member {String} email
 */
ContactDto.prototype['email'] = undefined;

/**
 * The fax number of the contact
 * @member {String} fax
 */
ContactDto.prototype['fax'] = undefined;

/**
 * The id of the contact
 * @member {Number} id
 */
ContactDto.prototype['id'] = undefined;

/**
 * The name of the contact
 * @member {String} name
 */
ContactDto.prototype['name'] = undefined;

/**
 * Whether this overrides the default contact
 * @member {Boolean} overridesDefault
 */
ContactDto.prototype['overridesDefault'] = undefined;

/**
 * The phone number of the contact
 * @member {String} phone1
 */
ContactDto.prototype['phone1'] = undefined;

/**
 * The secondary phone number of the contact
 * @member {String} phone2
 */
ContactDto.prototype['phone2'] = undefined;






export default ContactDto;

