/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NewSalesOrderAddressDto from './NewSalesOrderAddressDto';
import NewSalesOrderContactDto from './NewSalesOrderContactDto';

/**
 * The NewSalesOrderShippingDto model module.
 * @module model/NewSalesOrderShippingDto
 * @version 1.0.14.784
 */
class NewSalesOrderShippingDto {
    /**
     * Constructs a new <code>NewSalesOrderShippingDto</code>.
     * @alias module:model/NewSalesOrderShippingDto
     */
    constructor() { 
        
        NewSalesOrderShippingDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NewSalesOrderShippingDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewSalesOrderShippingDto} obj Optional instance to populate.
     * @return {module:model/NewSalesOrderShippingDto} The populated <code>NewSalesOrderShippingDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewSalesOrderShippingDto();

            if (data.hasOwnProperty('address')) {
                obj['address'] = NewSalesOrderAddressDto.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = NewSalesOrderContactDto.constructFromObject(data['contact']);
            }
            if (data.hasOwnProperty('fobPointId')) {
                obj['fobPointId'] = ApiClient.convertToType(data['fobPointId'], 'String');
            }
            if (data.hasOwnProperty('insurance')) {
                obj['insurance'] = ApiClient.convertToType(data['insurance'], 'Boolean');
            }
            if (data.hasOwnProperty('intrastatTransactionTypeId')) {
                obj['intrastatTransactionTypeId'] = ApiClient.convertToType(data['intrastatTransactionTypeId'], 'Number');
            }
            if (data.hasOwnProperty('preferredWarehouseId')) {
                obj['preferredWarehouseId'] = ApiClient.convertToType(data['preferredWarehouseId'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('residentialDelivery')) {
                obj['residentialDelivery'] = ApiClient.convertToType(data['residentialDelivery'], 'Boolean');
            }
            if (data.hasOwnProperty('rule')) {
                obj['rule'] = ApiClient.convertToType(data['rule'], 'String');
            }
            if (data.hasOwnProperty('saturdayDelivery')) {
                obj['saturdayDelivery'] = ApiClient.convertToType(data['saturdayDelivery'], 'Boolean');
            }
            if (data.hasOwnProperty('scheduledDate')) {
                obj['scheduledDate'] = ApiClient.convertToType(data['scheduledDate'], 'Date');
            }
            if (data.hasOwnProperty('shipSeparately')) {
                obj['shipSeparately'] = ApiClient.convertToType(data['shipSeparately'], 'Boolean');
            }
            if (data.hasOwnProperty('shipViaId')) {
                obj['shipViaId'] = ApiClient.convertToType(data['shipViaId'], 'String');
            }
            if (data.hasOwnProperty('termsId')) {
                obj['termsId'] = ApiClient.convertToType(data['termsId'], 'String');
            }
            if (data.hasOwnProperty('zoneId')) {
                obj['zoneId'] = ApiClient.convertToType(data['zoneId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NewSalesOrderShippingDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NewSalesOrderShippingDto</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          NewSalesOrderAddressDto.validateJSON(data['address']);
        }
        // validate the optional field `contact`
        if (data['contact']) { // data not null
          NewSalesOrderContactDto.validateJSON(data['contact']);
        }
        // ensure the json data is a string
        if (data['fobPointId'] && !(typeof data['fobPointId'] === 'string' || data['fobPointId'] instanceof String)) {
            throw new Error("Expected the field `fobPointId` to be a primitive type in the JSON string but got " + data['fobPointId']);
        }
        // ensure the json data is a string
        if (data['preferredWarehouseId'] && !(typeof data['preferredWarehouseId'] === 'string' || data['preferredWarehouseId'] instanceof String)) {
            throw new Error("Expected the field `preferredWarehouseId` to be a primitive type in the JSON string but got " + data['preferredWarehouseId']);
        }
        // ensure the json data is a string
        if (data['rule'] && !(typeof data['rule'] === 'string' || data['rule'] instanceof String)) {
            throw new Error("Expected the field `rule` to be a primitive type in the JSON string but got " + data['rule']);
        }
        // ensure the json data is a string
        if (data['shipViaId'] && !(typeof data['shipViaId'] === 'string' || data['shipViaId'] instanceof String)) {
            throw new Error("Expected the field `shipViaId` to be a primitive type in the JSON string but got " + data['shipViaId']);
        }
        // ensure the json data is a string
        if (data['termsId'] && !(typeof data['termsId'] === 'string' || data['termsId'] instanceof String)) {
            throw new Error("Expected the field `termsId` to be a primitive type in the JSON string but got " + data['termsId']);
        }
        // ensure the json data is a string
        if (data['zoneId'] && !(typeof data['zoneId'] === 'string' || data['zoneId'] instanceof String)) {
            throw new Error("Expected the field `zoneId` to be a primitive type in the JSON string but got " + data['zoneId']);
        }

        return true;
    }


}



/**
 * @member {module:model/NewSalesOrderAddressDto} address
 */
NewSalesOrderShippingDto.prototype['address'] = undefined;

/**
 * @member {module:model/NewSalesOrderContactDto} contact
 */
NewSalesOrderShippingDto.prototype['contact'] = undefined;

/**
 * The identifier of the point (such as a city or town) where the title of goods passes from the company to the customer.
 * @member {String} fobPointId
 */
NewSalesOrderShippingDto.prototype['fobPointId'] = undefined;

/**
 * Sets whether insurance applies to this shipping
 * @member {Boolean} insurance
 */
NewSalesOrderShippingDto.prototype['insurance'] = undefined;

/**
 * Sets the intrastat transaction type id for the sales order, if not supplied the default value from the ordertype will be used. Must be a valid intrastat transaction type id.
 * @member {Number} intrastatTransactionTypeId
 */
NewSalesOrderShippingDto.prototype['intrastatTransactionTypeId'] = undefined;

/**
 * Sets the default site for the customer supplied to use on the order. Must be a valid site id
 * @member {String} preferredWarehouseId
 */
NewSalesOrderShippingDto.prototype['preferredWarehouseId'] = undefined;

/**
 * Sets priority of the order
 * @member {Number} priority
 */
NewSalesOrderShippingDto.prototype['priority'] = undefined;

/**
 * Sets whether this is residential delivery
 * @member {Boolean} residentialDelivery
 */
NewSalesOrderShippingDto.prototype['residentialDelivery'] = undefined;

/**
 * Sets the shipping rule for the order
 * @member {String} rule
 */
NewSalesOrderShippingDto.prototype['rule'] = undefined;

/**
 * Sets whether this is a saturday delivery
 * @member {Boolean} saturdayDelivery
 */
NewSalesOrderShippingDto.prototype['saturdayDelivery'] = undefined;

/**
 * Sets the date the shipment is scheduled for  Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
 * @member {Date} scheduledDate
 */
NewSalesOrderShippingDto.prototype['scheduledDate'] = undefined;

/**
 * Sets whether the order should be shipped separately or included in a batch segment
 * @member {Boolean} shipSeparately
 */
NewSalesOrderShippingDto.prototype['shipSeparately'] = undefined;

/**
 * Sets the unique id that represents the carrier and its service to be used for shipping the ordered goods.
 * @member {String} shipViaId
 */
NewSalesOrderShippingDto.prototype['shipViaId'] = undefined;

/**
 * The identifier of the shipping terms used for the order.
 * @member {String} termsId
 */
NewSalesOrderShippingDto.prototype['termsId'] = undefined;

/**
 * Sets the shipping zone of the order freight
 * @member {String} zoneId
 */
NewSalesOrderShippingDto.prototype['zoneId'] = undefined;






export default NewSalesOrderShippingDto;

