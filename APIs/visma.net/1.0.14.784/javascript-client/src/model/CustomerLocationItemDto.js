/**
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddressDto from './AddressDto';
import ContactDto from './ContactDto';

/**
 * The CustomerLocationItemDto model module.
 * @module model/CustomerLocationItemDto
 * @version 1.0.14.784
 */
class CustomerLocationItemDto {
    /**
     * Constructs a new <code>CustomerLocationItemDto</code>.
     * @alias module:model/CustomerLocationItemDto
     */
    constructor() { 
        
        CustomerLocationItemDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomerLocationItemDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomerLocationItemDto} obj Optional instance to populate.
     * @return {module:model/CustomerLocationItemDto} The populated <code>CustomerLocationItemDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomerLocationItemDto();

            if (data.hasOwnProperty('address')) {
                obj['address'] = AddressDto.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = ContactDto.constructFromObject(data['contact']);
            }
            if (data.hasOwnProperty('corporateId')) {
                obj['corporateId'] = ApiClient.convertToType(data['corporateId'], 'String');
            }
            if (data.hasOwnProperty('countryId')) {
                obj['countryId'] = ApiClient.convertToType(data['countryId'], 'String');
            }
            if (data.hasOwnProperty('fobPointId')) {
                obj['fobPointId'] = ApiClient.convertToType(data['fobPointId'], 'String');
            }
            if (data.hasOwnProperty('gln')) {
                obj['gln'] = ApiClient.convertToType(data['gln'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('insurance')) {
                obj['insurance'] = ApiClient.convertToType(data['insurance'], 'Boolean');
            }
            if (data.hasOwnProperty('internalId')) {
                obj['internalId'] = ApiClient.convertToType(data['internalId'], 'Number');
            }
            if (data.hasOwnProperty('leadTime')) {
                obj['leadTime'] = ApiClient.convertToType(data['leadTime'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('preferredWarehouseId')) {
                obj['preferredWarehouseId'] = ApiClient.convertToType(data['preferredWarehouseId'], 'String');
            }
            if (data.hasOwnProperty('priceClassId')) {
                obj['priceClassId'] = ApiClient.convertToType(data['priceClassId'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('resedentialDelivery')) {
                obj['resedentialDelivery'] = ApiClient.convertToType(data['resedentialDelivery'], 'Boolean');
            }
            if (data.hasOwnProperty('residentialDelivery')) {
                obj['residentialDelivery'] = ApiClient.convertToType(data['residentialDelivery'], 'Boolean');
            }
            if (data.hasOwnProperty('saturdayDelivery')) {
                obj['saturdayDelivery'] = ApiClient.convertToType(data['saturdayDelivery'], 'Boolean');
            }
            if (data.hasOwnProperty('shipTermsId')) {
                obj['shipTermsId'] = ApiClient.convertToType(data['shipTermsId'], 'String');
            }
            if (data.hasOwnProperty('shipViaId')) {
                obj['shipViaId'] = ApiClient.convertToType(data['shipViaId'], 'String');
            }
            if (data.hasOwnProperty('shipZoneId')) {
                obj['shipZoneId'] = ApiClient.convertToType(data['shipZoneId'], 'String');
            }
            if (data.hasOwnProperty('shippingRule')) {
                obj['shippingRule'] = ApiClient.convertToType(data['shippingRule'], 'String');
            }
            if (data.hasOwnProperty('taxRegistrationId')) {
                obj['taxRegistrationId'] = ApiClient.convertToType(data['taxRegistrationId'], 'String');
            }
            if (data.hasOwnProperty('taxZoneId')) {
                obj['taxZoneId'] = ApiClient.convertToType(data['taxZoneId'], 'String');
            }
            if (data.hasOwnProperty('warehouseId')) {
                obj['warehouseId'] = ApiClient.convertToType(data['warehouseId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomerLocationItemDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomerLocationItemDto</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          AddressDto.validateJSON(data['address']);
        }
        // validate the optional field `contact`
        if (data['contact']) { // data not null
          ContactDto.validateJSON(data['contact']);
        }
        // ensure the json data is a string
        if (data['corporateId'] && !(typeof data['corporateId'] === 'string' || data['corporateId'] instanceof String)) {
            throw new Error("Expected the field `corporateId` to be a primitive type in the JSON string but got " + data['corporateId']);
        }
        // ensure the json data is a string
        if (data['countryId'] && !(typeof data['countryId'] === 'string' || data['countryId'] instanceof String)) {
            throw new Error("Expected the field `countryId` to be a primitive type in the JSON string but got " + data['countryId']);
        }
        // ensure the json data is a string
        if (data['fobPointId'] && !(typeof data['fobPointId'] === 'string' || data['fobPointId'] instanceof String)) {
            throw new Error("Expected the field `fobPointId` to be a primitive type in the JSON string but got " + data['fobPointId']);
        }
        // ensure the json data is a string
        if (data['gln'] && !(typeof data['gln'] === 'string' || data['gln'] instanceof String)) {
            throw new Error("Expected the field `gln` to be a primitive type in the JSON string but got " + data['gln']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['preferredWarehouseId'] && !(typeof data['preferredWarehouseId'] === 'string' || data['preferredWarehouseId'] instanceof String)) {
            throw new Error("Expected the field `preferredWarehouseId` to be a primitive type in the JSON string but got " + data['preferredWarehouseId']);
        }
        // ensure the json data is a string
        if (data['priceClassId'] && !(typeof data['priceClassId'] === 'string' || data['priceClassId'] instanceof String)) {
            throw new Error("Expected the field `priceClassId` to be a primitive type in the JSON string but got " + data['priceClassId']);
        }
        // ensure the json data is a string
        if (data['shipTermsId'] && !(typeof data['shipTermsId'] === 'string' || data['shipTermsId'] instanceof String)) {
            throw new Error("Expected the field `shipTermsId` to be a primitive type in the JSON string but got " + data['shipTermsId']);
        }
        // ensure the json data is a string
        if (data['shipViaId'] && !(typeof data['shipViaId'] === 'string' || data['shipViaId'] instanceof String)) {
            throw new Error("Expected the field `shipViaId` to be a primitive type in the JSON string but got " + data['shipViaId']);
        }
        // ensure the json data is a string
        if (data['shipZoneId'] && !(typeof data['shipZoneId'] === 'string' || data['shipZoneId'] instanceof String)) {
            throw new Error("Expected the field `shipZoneId` to be a primitive type in the JSON string but got " + data['shipZoneId']);
        }
        // ensure the json data is a string
        if (data['shippingRule'] && !(typeof data['shippingRule'] === 'string' || data['shippingRule'] instanceof String)) {
            throw new Error("Expected the field `shippingRule` to be a primitive type in the JSON string but got " + data['shippingRule']);
        }
        // ensure the json data is a string
        if (data['taxRegistrationId'] && !(typeof data['taxRegistrationId'] === 'string' || data['taxRegistrationId'] instanceof String)) {
            throw new Error("Expected the field `taxRegistrationId` to be a primitive type in the JSON string but got " + data['taxRegistrationId']);
        }
        // ensure the json data is a string
        if (data['taxZoneId'] && !(typeof data['taxZoneId'] === 'string' || data['taxZoneId'] instanceof String)) {
            throw new Error("Expected the field `taxZoneId` to be a primitive type in the JSON string but got " + data['taxZoneId']);
        }
        // ensure the json data is a string
        if (data['warehouseId'] && !(typeof data['warehouseId'] === 'string' || data['warehouseId'] instanceof String)) {
            throw new Error("Expected the field `warehouseId` to be a primitive type in the JSON string but got " + data['warehouseId']);
        }

        return true;
    }


}



/**
 * @member {module:model/AddressDto} address
 */
CustomerLocationItemDto.prototype['address'] = undefined;

/**
 * @member {module:model/ContactDto} contact
 */
CustomerLocationItemDto.prototype['contact'] = undefined;

/**
 * The corporate id of the location
 * @member {String} corporateId
 */
CustomerLocationItemDto.prototype['corporateId'] = undefined;

/**
 * The country code of the location
 * @member {String} countryId
 */
CustomerLocationItemDto.prototype['countryId'] = undefined;

/**
 * Default FobPointId
 * @member {String} fobPointId
 */
CustomerLocationItemDto.prototype['fobPointId'] = undefined;

/**
 * The global localization number of the location
 * @member {String} gln
 */
CustomerLocationItemDto.prototype['gln'] = undefined;

/**
 * Location id
 * @member {String} id
 */
CustomerLocationItemDto.prototype['id'] = undefined;

/**
 * Default Insurance
 * @member {Boolean} insurance
 */
CustomerLocationItemDto.prototype['insurance'] = undefined;

/**
 * An internal id of the customer location
 * @member {Number} internalId
 */
CustomerLocationItemDto.prototype['internalId'] = undefined;

/**
 * The number of days required for the shipped goods to reach the customer.  Used in the calculation of the scheduled shipment date
 * @member {Number} leadTime
 */
CustomerLocationItemDto.prototype['leadTime'] = undefined;

/**
 * Location description
 * @member {String} name
 */
CustomerLocationItemDto.prototype['name'] = undefined;

/**
 * The preferred shipping warehouse of the customer set default for the order
 * @member {String} preferredWarehouseId
 */
CustomerLocationItemDto.prototype['preferredWarehouseId'] = undefined;

/**
 * Price class
 * @member {String} priceClassId
 */
CustomerLocationItemDto.prototype['priceClassId'] = undefined;

/**
 * Default Priority
 * @member {Number} priority
 */
CustomerLocationItemDto.prototype['priority'] = undefined;

/**
 * Default ResidentialDelivery.<br />  This field will be removed with due date 1.12.2023. It is recommended to use <see cref=\"P:Visma.net.ERP.SalesOrders.Api.Dto.CustomerLocationItemDto.ResidentialDelivery\">ResidentialDelivery</see> instead.
 * @member {Boolean} resedentialDelivery
 */
CustomerLocationItemDto.prototype['resedentialDelivery'] = undefined;

/**
 * Default ResidentialDelivery
 * @member {Boolean} residentialDelivery
 */
CustomerLocationItemDto.prototype['residentialDelivery'] = undefined;

/**
 * Default SaturdayDelivery
 * @member {Boolean} saturdayDelivery
 */
CustomerLocationItemDto.prototype['saturdayDelivery'] = undefined;

/**
 * Default ShipTermsId
 * @member {String} shipTermsId
 */
CustomerLocationItemDto.prototype['shipTermsId'] = undefined;

/**
 * The ship via id that represents the carrier and its service to be used for shipping the ordered goods
 * @member {String} shipViaId
 */
CustomerLocationItemDto.prototype['shipViaId'] = undefined;

/**
 * Default ShipZoneId
 * @member {String} shipZoneId
 */
CustomerLocationItemDto.prototype['shipZoneId'] = undefined;

/**
 * Shipping rule of the customer set default for the order  <br>Is one of the following options:<br><list type=\"bullet\"><item><term>CancelRemainder: </term><description>The ordered quantity should be delivered in one shipment</description></item><item><term>BackOrderAllowed: </term><description>The ordered quantity can be delivered in multiple shipments.</description></item><item><term>ShipComplete: </term><description>The ordered quantity should be delivered in one shipment.</description></item></list>
 * @member {String} shippingRule
 */
CustomerLocationItemDto.prototype['shippingRule'] = undefined;

/**
 * The tax registration id of the location
 * @member {String} taxRegistrationId
 */
CustomerLocationItemDto.prototype['taxRegistrationId'] = undefined;

/**
 * The location tax/VAT zone id
 * @member {String} taxZoneId
 */
CustomerLocationItemDto.prototype['taxZoneId'] = undefined;

/**
 * The site id of the location
 * @member {String} warehouseId
 */
CustomerLocationItemDto.prototype['warehouseId'] = undefined;






export default CustomerLocationItemDto;

