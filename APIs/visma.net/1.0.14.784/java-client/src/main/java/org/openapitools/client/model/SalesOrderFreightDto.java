/*
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SalesOrderFreightDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:31.300103-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesOrderFreightDto {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_AMOUNT_IN_BASE_CURRENCY = "amountInBaseCurrency";
  @SerializedName(SERIALIZED_NAME_AMOUNT_IN_BASE_CURRENCY)
  private Double amountInBaseCurrency;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private Double cost;

  public static final String SERIALIZED_NAME_COST_IN_BASE_CURRENCY = "costInBaseCurrency";
  @SerializedName(SERIALIZED_NAME_COST_IN_BASE_CURRENCY)
  private Double costInBaseCurrency;

  public static final String SERIALIZED_NAME_PREMIUM_AMOUNT = "premiumAmount";
  @SerializedName(SERIALIZED_NAME_PREMIUM_AMOUNT)
  private Double premiumAmount;

  public static final String SERIALIZED_NAME_PREMIUM_AMOUNT_IN_BASE_CURRENCY = "premiumAmountInBaseCurrency";
  @SerializedName(SERIALIZED_NAME_PREMIUM_AMOUNT_IN_BASE_CURRENCY)
  private Double premiumAmountInBaseCurrency;

  public static final String SERIALIZED_NAME_TAX_CATEGORY_ID = "taxCategoryId";
  @SerializedName(SERIALIZED_NAME_TAX_CATEGORY_ID)
  private String taxCategoryId;

  public static final String SERIALIZED_NAME_VOLUME = "volume";
  @SerializedName(SERIALIZED_NAME_VOLUME)
  private Double volume;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Double weight;

  public SalesOrderFreightDto() {
  }

  public SalesOrderFreightDto(
     Double premiumAmount, 
     Double premiumAmountInBaseCurrency, 
     String taxCategoryId
  ) {
    this();
    this.premiumAmount = premiumAmount;
    this.premiumAmountInBaseCurrency = premiumAmountInBaseCurrency;
    this.taxCategoryId = taxCategoryId;
  }

  public SalesOrderFreightDto amount(Double amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amounts calculated based on the ship terms.  ///
   * @return amount
   */
  @javax.annotation.Nullable
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }


  public SalesOrderFreightDto amountInBaseCurrency(Double amountInBaseCurrency) {
    this.amountInBaseCurrency = amountInBaseCurrency;
    return this;
  }

  /**
   * The amounts calculated based on the ship terms in base currency of the order.
   * @return amountInBaseCurrency
   */
  @javax.annotation.Nullable
  public Double getAmountInBaseCurrency() {
    return amountInBaseCurrency;
  }

  public void setAmountInBaseCurrency(Double amountInBaseCurrency) {
    this.amountInBaseCurrency = amountInBaseCurrency;
  }


  public SalesOrderFreightDto cost(Double cost) {
    this.cost = cost;
    return this;
  }

  /**
   * The freight cost calculated for the sales order,
   * @return cost
   */
  @javax.annotation.Nullable
  public Double getCost() {
    return cost;
  }

  public void setCost(Double cost) {
    this.cost = cost;
  }


  public SalesOrderFreightDto costInBaseCurrency(Double costInBaseCurrency) {
    this.costInBaseCurrency = costInBaseCurrency;
    return this;
  }

  /**
   * The freight cost calculated for the sales order in base currency.
   * @return costInBaseCurrency
   */
  @javax.annotation.Nullable
  public Double getCostInBaseCurrency() {
    return costInBaseCurrency;
  }

  public void setCostInBaseCurrency(Double costInBaseCurrency) {
    this.costInBaseCurrency = costInBaseCurrency;
  }


  /**
   * The additional freight charges for handling the order.
   * @return premiumAmount
   */
  @javax.annotation.Nullable
  public Double getPremiumAmount() {
    return premiumAmount;
  }



  /**
   * The additional freight charges in base currency for handling the order.
   * @return premiumAmountInBaseCurrency
   */
  @javax.annotation.Nullable
  public Double getPremiumAmountInBaseCurrency() {
    return premiumAmountInBaseCurrency;
  }



  /**
   * The tax category that applies to the freight amount.  By default, it is the tax category associated with the ship via code selected for the order.
   * @return taxCategoryId
   */
  @javax.annotation.Nullable
  public String getTaxCategoryId() {
    return taxCategoryId;
  }



  public SalesOrderFreightDto volume(Double volume) {
    this.volume = volume;
    return this;
  }

  /**
   * Get volume
   * @return volume
   */
  @javax.annotation.Nullable
  public Double getVolume() {
    return volume;
  }

  public void setVolume(Double volume) {
    this.volume = volume;
  }


  public SalesOrderFreightDto weight(Double weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nullable
  public Double getWeight() {
    return weight;
  }

  public void setWeight(Double weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesOrderFreightDto salesOrderFreightDto = (SalesOrderFreightDto) o;
    return Objects.equals(this.amount, salesOrderFreightDto.amount) &&
        Objects.equals(this.amountInBaseCurrency, salesOrderFreightDto.amountInBaseCurrency) &&
        Objects.equals(this.cost, salesOrderFreightDto.cost) &&
        Objects.equals(this.costInBaseCurrency, salesOrderFreightDto.costInBaseCurrency) &&
        Objects.equals(this.premiumAmount, salesOrderFreightDto.premiumAmount) &&
        Objects.equals(this.premiumAmountInBaseCurrency, salesOrderFreightDto.premiumAmountInBaseCurrency) &&
        Objects.equals(this.taxCategoryId, salesOrderFreightDto.taxCategoryId) &&
        Objects.equals(this.volume, salesOrderFreightDto.volume) &&
        Objects.equals(this.weight, salesOrderFreightDto.weight);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, amountInBaseCurrency, cost, costInBaseCurrency, premiumAmount, premiumAmountInBaseCurrency, taxCategoryId, volume, weight);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesOrderFreightDto {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    amountInBaseCurrency: ").append(toIndentedString(amountInBaseCurrency)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    costInBaseCurrency: ").append(toIndentedString(costInBaseCurrency)).append("\n");
    sb.append("    premiumAmount: ").append(toIndentedString(premiumAmount)).append("\n");
    sb.append("    premiumAmountInBaseCurrency: ").append(toIndentedString(premiumAmountInBaseCurrency)).append("\n");
    sb.append("    taxCategoryId: ").append(toIndentedString(taxCategoryId)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("amountInBaseCurrency");
    openapiFields.add("cost");
    openapiFields.add("costInBaseCurrency");
    openapiFields.add("premiumAmount");
    openapiFields.add("premiumAmountInBaseCurrency");
    openapiFields.add("taxCategoryId");
    openapiFields.add("volume");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesOrderFreightDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesOrderFreightDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesOrderFreightDto is not found in the empty JSON string", SalesOrderFreightDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesOrderFreightDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesOrderFreightDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("taxCategoryId") != null && !jsonObj.get("taxCategoryId").isJsonNull()) && !jsonObj.get("taxCategoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxCategoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxCategoryId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesOrderFreightDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesOrderFreightDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesOrderFreightDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesOrderFreightDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesOrderFreightDto>() {
           @Override
           public void write(JsonWriter out, SalesOrderFreightDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesOrderFreightDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesOrderFreightDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesOrderFreightDto
   * @throws IOException if the JSON string is invalid with respect to SalesOrderFreightDto
   */
  public static SalesOrderFreightDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesOrderFreightDto.class);
  }

  /**
   * Convert an instance of SalesOrderFreightDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

