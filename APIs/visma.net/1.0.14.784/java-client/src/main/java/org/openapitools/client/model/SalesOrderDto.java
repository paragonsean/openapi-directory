/*
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttachmentDto;
import org.openapitools.client.model.CdDescriptionPairDto;
import org.openapitools.client.model.EmployeeDto;
import org.openapitools.client.model.ProjectDto;
import org.openapitools.client.model.SalesOrderBillingDto;
import org.openapitools.client.model.SalesOrderCustomerDto;
import org.openapitools.client.model.SalesOrderFinancialInfoDto;
import org.openapitools.client.model.SalesOrderFreightDto;
import org.openapitools.client.model.SalesOrderOriginDto;
import org.openapitools.client.model.SalesOrderPaymentDto;
import org.openapitools.client.model.SalesOrderPrintDto;
import org.openapitools.client.model.SalesOrderShippingDto;
import org.openapitools.client.model.SalesOrderStatusDto;
import org.openapitools.client.model.SalesOrderTotalsDto;
import org.openapitools.client.model.SalesPersonDto;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SalesOrderDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:31.300103-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesOrderDto {
  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<AttachmentDto> attachments;

  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  private SalesOrderBillingDto billing;

  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private CdDescriptionPairDto branch;

  public static final String SERIALIZED_NAME_CANCEL_BY = "cancelBy";
  @SerializedName(SERIALIZED_NAME_CANCEL_BY)
  private OffsetDateTime cancelBy;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_CURRENCY_ID = "currencyId";
  @SerializedName(SERIALIZED_NAME_CURRENCY_ID)
  private String currencyId;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private SalesOrderCustomerDto customer;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FINANCIAL_INFORMATION = "financialInformation";
  @SerializedName(SERIALIZED_NAME_FINANCIAL_INFORMATION)
  private SalesOrderFinancialInfoDto financialInformation;

  public static final String SERIALIZED_NAME_FREIGHT = "freight";
  @SerializedName(SERIALIZED_NAME_FREIGHT)
  private SalesOrderFreightDto freight;

  public static final String SERIALIZED_NAME_IS_ROT_RUT_DEDUCTABLE = "isRotRutDeductable";
  @SerializedName(SERIALIZED_NAME_IS_ROT_RUT_DEDUCTABLE)
  private Boolean isRotRutDeductable;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_ORDER_QTY = "orderQty";
  @SerializedName(SERIALIZED_NAME_ORDER_QTY)
  private Double orderQty;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private SalesOrderOriginDto origin;

  public static final String SERIALIZED_NAME_ORIGINAL_ORDER_ID = "originalOrderId";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_ORDER_ID)
  private String originalOrderId;

  public static final String SERIALIZED_NAME_ORIGINAL_ORDER_TYPE = "originalOrderType";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_ORDER_TYPE)
  private String originalOrderType;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private EmployeeDto owner;

  public static final String SERIALIZED_NAME_PAYMENT_SETTINGS = "paymentSettings";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SETTINGS)
  private SalesOrderPaymentDto paymentSettings;

  public static final String SERIALIZED_NAME_PRINT = "print";
  @SerializedName(SERIALIZED_NAME_PRINT)
  private SalesOrderPrintDto print;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private ProjectDto project;

  public static final String SERIALIZED_NAME_REQUEST_ON = "requestOn";
  @SerializedName(SERIALIZED_NAME_REQUEST_ON)
  private OffsetDateTime requestOn;

  public static final String SERIALIZED_NAME_SALES_PERSON = "salesPerson";
  @SerializedName(SERIALIZED_NAME_SALES_PERSON)
  private SalesPersonDto salesPerson;

  public static final String SERIALIZED_NAME_SHIPPING = "shipping";
  @SerializedName(SERIALIZED_NAME_SHIPPING)
  private SalesOrderShippingDto shipping;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private SalesOrderStatusDto status;

  public static final String SERIALIZED_NAME_TOTALS = "totals";
  @SerializedName(SERIALIZED_NAME_TOTALS)
  private SalesOrderTotalsDto totals;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USE_REPLACEMENT_COST_FOR_MARGIN_AND_PROFIT = "useReplacementCostForMarginAndProfit";
  @SerializedName(SERIALIZED_NAME_USE_REPLACEMENT_COST_FOR_MARGIN_AND_PROFIT)
  private Boolean useReplacementCostForMarginAndProfit;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private byte[] version;

  public SalesOrderDto() {
  }

  public SalesOrderDto attachments(List<AttachmentDto> attachments) {
    this.attachments = attachments;
    return this;
  }

  public SalesOrderDto addAttachmentsItem(AttachmentDto attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * The attachments of the order
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<AttachmentDto> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<AttachmentDto> attachments) {
    this.attachments = attachments;
  }


  public SalesOrderDto billing(SalesOrderBillingDto billing) {
    this.billing = billing;
    return this;
  }

  /**
   * Get billing
   * @return billing
   */
  @javax.annotation.Nullable
  public SalesOrderBillingDto getBilling() {
    return billing;
  }

  public void setBilling(SalesOrderBillingDto billing) {
    this.billing = billing;
  }


  public SalesOrderDto branch(CdDescriptionPairDto branch) {
    this.branch = branch;
    return this;
  }

  /**
   * Get branch
   * @return branch
   */
  @javax.annotation.Nullable
  public CdDescriptionPairDto getBranch() {
    return branch;
  }

  public void setBranch(CdDescriptionPairDto branch) {
    this.branch = branch;
  }


  public SalesOrderDto cancelBy(OffsetDateTime cancelBy) {
    this.cancelBy = cancelBy;
    return this;
  }

  /**
   * The cancel date for the order  Unless a specific time zone offset is included (e.g. &#39;2012-12-24T00:00:00+02:00&#39;), the passed date is considered to be in the UTC time zone.
   * @return cancelBy
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCancelBy() {
    return cancelBy;
  }

  public void setCancelBy(OffsetDateTime cancelBy) {
    this.cancelBy = cancelBy;
  }


  public SalesOrderDto createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * The user name of the creator of the order. If the order was created by an API call this field will be null or empty.
   * @return createdBy
   */
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public SalesOrderDto currencyId(String currencyId) {
    this.currencyId = currencyId;
    return this;
  }

  /**
   * CurrencyId for the order.
   * @return currencyId
   */
  @javax.annotation.Nullable
  public String getCurrencyId() {
    return currencyId;
  }

  public void setCurrencyId(String currencyId) {
    this.currencyId = currencyId;
  }


  public SalesOrderDto customer(SalesOrderCustomerDto customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nullable
  public SalesOrderCustomerDto getCustomer() {
    return customer;
  }

  public void setCustomer(SalesOrderCustomerDto customer) {
    this.customer = customer;
  }


  public SalesOrderDto date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Date the order was submitted  Unless a specific time zone offset is included (e.g. &#39;2012-12-24T00:00:00+02:00&#39;), the passed date is considered to be in the UTC time zone.
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public SalesOrderDto description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the order
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SalesOrderDto financialInformation(SalesOrderFinancialInfoDto financialInformation) {
    this.financialInformation = financialInformation;
    return this;
  }

  /**
   * Get financialInformation
   * @return financialInformation
   */
  @javax.annotation.Nullable
  public SalesOrderFinancialInfoDto getFinancialInformation() {
    return financialInformation;
  }

  public void setFinancialInformation(SalesOrderFinancialInfoDto financialInformation) {
    this.financialInformation = financialInformation;
  }


  public SalesOrderDto freight(SalesOrderFreightDto freight) {
    this.freight = freight;
    return this;
  }

  /**
   * Get freight
   * @return freight
   */
  @javax.annotation.Nullable
  public SalesOrderFreightDto getFreight() {
    return freight;
  }

  public void setFreight(SalesOrderFreightDto freight) {
    this.freight = freight;
  }


  public SalesOrderDto isRotRutDeductable(Boolean isRotRutDeductable) {
    this.isRotRutDeductable = isRotRutDeductable;
    return this;
  }

  /**
   * Whether the order is ROT/RUT deductible
   * @return isRotRutDeductable
   */
  @javax.annotation.Nullable
  public Boolean getIsRotRutDeductable() {
    return isRotRutDeductable;
  }

  public void setIsRotRutDeductable(Boolean isRotRutDeductable) {
    this.isRotRutDeductable = isRotRutDeductable;
  }


  public SalesOrderDto lastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * Date the order was last modified  Unless a specific time zone offset is included (e.g. &#39;2012-12-24T00:00:00+02:00&#39;), the passed date is considered to be in the UTC time zone.
   * @return lastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModified() {
    return lastModified;
  }

  public void setLastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
  }


  public SalesOrderDto note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Any notes on the order
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public SalesOrderDto orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * The unique identifier of the order
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public SalesOrderDto orderQty(Double orderQty) {
    this.orderQty = orderQty;
    return this;
  }

  /**
   * The total quantity of inventory items in the order
   * @return orderQty
   */
  @javax.annotation.Nullable
  public Double getOrderQty() {
    return orderQty;
  }

  public void setOrderQty(Double orderQty) {
    this.orderQty = orderQty;
  }


  public SalesOrderDto origin(SalesOrderOriginDto origin) {
    this.origin = origin;
    return this;
  }

  /**
   * Get origin
   * @return origin
   */
  @javax.annotation.Nullable
  public SalesOrderOriginDto getOrigin() {
    return origin;
  }

  public void setOrigin(SalesOrderOriginDto origin) {
    this.origin = origin;
  }


  public SalesOrderDto originalOrderId(String originalOrderId) {
    this.originalOrderId = originalOrderId;
    return this;
  }

  /**
   * The unique identifier of the original order
   * @return originalOrderId
   */
  @javax.annotation.Nullable
  public String getOriginalOrderId() {
    return originalOrderId;
  }

  public void setOriginalOrderId(String originalOrderId) {
    this.originalOrderId = originalOrderId;
  }


  public SalesOrderDto originalOrderType(String originalOrderType) {
    this.originalOrderType = originalOrderType;
    return this;
  }

  /**
   * The type code for the original sales order
   * @return originalOrderType
   */
  @javax.annotation.Nullable
  public String getOriginalOrderType() {
    return originalOrderType;
  }

  public void setOriginalOrderType(String originalOrderType) {
    this.originalOrderType = originalOrderType;
  }


  public SalesOrderDto owner(EmployeeDto owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public EmployeeDto getOwner() {
    return owner;
  }

  public void setOwner(EmployeeDto owner) {
    this.owner = owner;
  }


  public SalesOrderDto paymentSettings(SalesOrderPaymentDto paymentSettings) {
    this.paymentSettings = paymentSettings;
    return this;
  }

  /**
   * Get paymentSettings
   * @return paymentSettings
   */
  @javax.annotation.Nullable
  public SalesOrderPaymentDto getPaymentSettings() {
    return paymentSettings;
  }

  public void setPaymentSettings(SalesOrderPaymentDto paymentSettings) {
    this.paymentSettings = paymentSettings;
  }


  public SalesOrderDto print(SalesOrderPrintDto print) {
    this.print = print;
    return this;
  }

  /**
   * Get print
   * @return print
   */
  @javax.annotation.Nullable
  public SalesOrderPrintDto getPrint() {
    return print;
  }

  public void setPrint(SalesOrderPrintDto print) {
    this.print = print;
  }


  public SalesOrderDto project(ProjectDto project) {
    this.project = project;
    return this;
  }

  /**
   * Get project
   * @return project
   */
  @javax.annotation.Nullable
  public ProjectDto getProject() {
    return project;
  }

  public void setProject(ProjectDto project) {
    this.project = project;
  }


  public SalesOrderDto requestOn(OffsetDateTime requestOn) {
    this.requestOn = requestOn;
    return this;
  }

  /**
   * Date the order was requested  Unless a specific time zone offset is included (e.g. &#39;2012-12-24T00:00:00+02:00&#39;), the passed date is considered to be in the UTC time zone.
   * @return requestOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRequestOn() {
    return requestOn;
  }

  public void setRequestOn(OffsetDateTime requestOn) {
    this.requestOn = requestOn;
  }


  public SalesOrderDto salesPerson(SalesPersonDto salesPerson) {
    this.salesPerson = salesPerson;
    return this;
  }

  /**
   * Get salesPerson
   * @return salesPerson
   */
  @javax.annotation.Nullable
  public SalesPersonDto getSalesPerson() {
    return salesPerson;
  }

  public void setSalesPerson(SalesPersonDto salesPerson) {
    this.salesPerson = salesPerson;
  }


  public SalesOrderDto shipping(SalesOrderShippingDto shipping) {
    this.shipping = shipping;
    return this;
  }

  /**
   * Get shipping
   * @return shipping
   */
  @javax.annotation.Nullable
  public SalesOrderShippingDto getShipping() {
    return shipping;
  }

  public void setShipping(SalesOrderShippingDto shipping) {
    this.shipping = shipping;
  }


  public SalesOrderDto status(SalesOrderStatusDto status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public SalesOrderStatusDto getStatus() {
    return status;
  }

  public void setStatus(SalesOrderStatusDto status) {
    this.status = status;
  }


  public SalesOrderDto totals(SalesOrderTotalsDto totals) {
    this.totals = totals;
    return this;
  }

  /**
   * Get totals
   * @return totals
   */
  @javax.annotation.Nullable
  public SalesOrderTotalsDto getTotals() {
    return totals;
  }

  public void setTotals(SalesOrderTotalsDto totals) {
    this.totals = totals;
  }


  public SalesOrderDto type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type code for the sales order
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public SalesOrderDto useReplacementCostForMarginAndProfit(Boolean useReplacementCostForMarginAndProfit) {
    this.useReplacementCostForMarginAndProfit = useReplacementCostForMarginAndProfit;
    return this;
  }

  /**
   * When this option is set to &#x60;true&#x60;, the &#x60;costTotal&#x60; of the order will be calculated based on &#x60;replacementUnitCost&#x60;.  If option is set to &#x60;false&#x60;, the &#x60;costTotal&#x60; will be calculated based on &#x60;unitCost&#x60;
   * @return useReplacementCostForMarginAndProfit
   */
  @javax.annotation.Nullable
  public Boolean getUseReplacementCostForMarginAndProfit() {
    return useReplacementCostForMarginAndProfit;
  }

  public void setUseReplacementCostForMarginAndProfit(Boolean useReplacementCostForMarginAndProfit) {
    this.useReplacementCostForMarginAndProfit = useReplacementCostForMarginAndProfit;
  }


  public SalesOrderDto version(byte[] version) {
    this.version = version;
    return this;
  }

  /**
   * An internal order version used for detecting concurrent updates to an order
   * @return version
   */
  @javax.annotation.Nullable
  public byte[] getVersion() {
    return version;
  }

  public void setVersion(byte[] version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesOrderDto salesOrderDto = (SalesOrderDto) o;
    return Objects.equals(this.attachments, salesOrderDto.attachments) &&
        Objects.equals(this.billing, salesOrderDto.billing) &&
        Objects.equals(this.branch, salesOrderDto.branch) &&
        Objects.equals(this.cancelBy, salesOrderDto.cancelBy) &&
        Objects.equals(this.createdBy, salesOrderDto.createdBy) &&
        Objects.equals(this.currencyId, salesOrderDto.currencyId) &&
        Objects.equals(this.customer, salesOrderDto.customer) &&
        Objects.equals(this.date, salesOrderDto.date) &&
        Objects.equals(this.description, salesOrderDto.description) &&
        Objects.equals(this.financialInformation, salesOrderDto.financialInformation) &&
        Objects.equals(this.freight, salesOrderDto.freight) &&
        Objects.equals(this.isRotRutDeductable, salesOrderDto.isRotRutDeductable) &&
        Objects.equals(this.lastModified, salesOrderDto.lastModified) &&
        Objects.equals(this.note, salesOrderDto.note) &&
        Objects.equals(this.orderId, salesOrderDto.orderId) &&
        Objects.equals(this.orderQty, salesOrderDto.orderQty) &&
        Objects.equals(this.origin, salesOrderDto.origin) &&
        Objects.equals(this.originalOrderId, salesOrderDto.originalOrderId) &&
        Objects.equals(this.originalOrderType, salesOrderDto.originalOrderType) &&
        Objects.equals(this.owner, salesOrderDto.owner) &&
        Objects.equals(this.paymentSettings, salesOrderDto.paymentSettings) &&
        Objects.equals(this.print, salesOrderDto.print) &&
        Objects.equals(this.project, salesOrderDto.project) &&
        Objects.equals(this.requestOn, salesOrderDto.requestOn) &&
        Objects.equals(this.salesPerson, salesOrderDto.salesPerson) &&
        Objects.equals(this.shipping, salesOrderDto.shipping) &&
        Objects.equals(this.status, salesOrderDto.status) &&
        Objects.equals(this.totals, salesOrderDto.totals) &&
        Objects.equals(this.type, salesOrderDto.type) &&
        Objects.equals(this.useReplacementCostForMarginAndProfit, salesOrderDto.useReplacementCostForMarginAndProfit) &&
        Arrays.equals(this.version, salesOrderDto.version);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachments, billing, branch, cancelBy, createdBy, currencyId, customer, date, description, financialInformation, freight, isRotRutDeductable, lastModified, note, orderId, orderQty, origin, originalOrderId, originalOrderType, owner, paymentSettings, print, project, requestOn, salesPerson, shipping, status, totals, type, useReplacementCostForMarginAndProfit, Arrays.hashCode(version));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesOrderDto {\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    cancelBy: ").append(toIndentedString(cancelBy)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    financialInformation: ").append(toIndentedString(financialInformation)).append("\n");
    sb.append("    freight: ").append(toIndentedString(freight)).append("\n");
    sb.append("    isRotRutDeductable: ").append(toIndentedString(isRotRutDeductable)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    orderQty: ").append(toIndentedString(orderQty)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    originalOrderId: ").append(toIndentedString(originalOrderId)).append("\n");
    sb.append("    originalOrderType: ").append(toIndentedString(originalOrderType)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    paymentSettings: ").append(toIndentedString(paymentSettings)).append("\n");
    sb.append("    print: ").append(toIndentedString(print)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    requestOn: ").append(toIndentedString(requestOn)).append("\n");
    sb.append("    salesPerson: ").append(toIndentedString(salesPerson)).append("\n");
    sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    totals: ").append(toIndentedString(totals)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    useReplacementCostForMarginAndProfit: ").append(toIndentedString(useReplacementCostForMarginAndProfit)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachments");
    openapiFields.add("billing");
    openapiFields.add("branch");
    openapiFields.add("cancelBy");
    openapiFields.add("createdBy");
    openapiFields.add("currencyId");
    openapiFields.add("customer");
    openapiFields.add("date");
    openapiFields.add("description");
    openapiFields.add("financialInformation");
    openapiFields.add("freight");
    openapiFields.add("isRotRutDeductable");
    openapiFields.add("lastModified");
    openapiFields.add("note");
    openapiFields.add("orderId");
    openapiFields.add("orderQty");
    openapiFields.add("origin");
    openapiFields.add("originalOrderId");
    openapiFields.add("originalOrderType");
    openapiFields.add("owner");
    openapiFields.add("paymentSettings");
    openapiFields.add("print");
    openapiFields.add("project");
    openapiFields.add("requestOn");
    openapiFields.add("salesPerson");
    openapiFields.add("shipping");
    openapiFields.add("status");
    openapiFields.add("totals");
    openapiFields.add("type");
    openapiFields.add("useReplacementCostForMarginAndProfit");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesOrderDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesOrderDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesOrderDto is not found in the empty JSON string", SalesOrderDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesOrderDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesOrderDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            AttachmentDto.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      // validate the optional field `billing`
      if (jsonObj.get("billing") != null && !jsonObj.get("billing").isJsonNull()) {
        SalesOrderBillingDto.validateJsonElement(jsonObj.get("billing"));
      }
      // validate the optional field `branch`
      if (jsonObj.get("branch") != null && !jsonObj.get("branch").isJsonNull()) {
        CdDescriptionPairDto.validateJsonElement(jsonObj.get("branch"));
      }
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if ((jsonObj.get("currencyId") != null && !jsonObj.get("currencyId").isJsonNull()) && !jsonObj.get("currencyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyId").toString()));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        SalesOrderCustomerDto.validateJsonElement(jsonObj.get("customer"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `financialInformation`
      if (jsonObj.get("financialInformation") != null && !jsonObj.get("financialInformation").isJsonNull()) {
        SalesOrderFinancialInfoDto.validateJsonElement(jsonObj.get("financialInformation"));
      }
      // validate the optional field `freight`
      if (jsonObj.get("freight") != null && !jsonObj.get("freight").isJsonNull()) {
        SalesOrderFreightDto.validateJsonElement(jsonObj.get("freight"));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      // validate the optional field `origin`
      if (jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) {
        SalesOrderOriginDto.validateJsonElement(jsonObj.get("origin"));
      }
      if ((jsonObj.get("originalOrderId") != null && !jsonObj.get("originalOrderId").isJsonNull()) && !jsonObj.get("originalOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalOrderId").toString()));
      }
      if ((jsonObj.get("originalOrderType") != null && !jsonObj.get("originalOrderType").isJsonNull()) && !jsonObj.get("originalOrderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalOrderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalOrderType").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        EmployeeDto.validateJsonElement(jsonObj.get("owner"));
      }
      // validate the optional field `paymentSettings`
      if (jsonObj.get("paymentSettings") != null && !jsonObj.get("paymentSettings").isJsonNull()) {
        SalesOrderPaymentDto.validateJsonElement(jsonObj.get("paymentSettings"));
      }
      // validate the optional field `print`
      if (jsonObj.get("print") != null && !jsonObj.get("print").isJsonNull()) {
        SalesOrderPrintDto.validateJsonElement(jsonObj.get("print"));
      }
      // validate the optional field `project`
      if (jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) {
        ProjectDto.validateJsonElement(jsonObj.get("project"));
      }
      // validate the optional field `salesPerson`
      if (jsonObj.get("salesPerson") != null && !jsonObj.get("salesPerson").isJsonNull()) {
        SalesPersonDto.validateJsonElement(jsonObj.get("salesPerson"));
      }
      // validate the optional field `shipping`
      if (jsonObj.get("shipping") != null && !jsonObj.get("shipping").isJsonNull()) {
        SalesOrderShippingDto.validateJsonElement(jsonObj.get("shipping"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        SalesOrderStatusDto.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `totals`
      if (jsonObj.get("totals") != null && !jsonObj.get("totals").isJsonNull()) {
        SalesOrderTotalsDto.validateJsonElement(jsonObj.get("totals"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesOrderDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesOrderDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesOrderDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesOrderDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesOrderDto>() {
           @Override
           public void write(JsonWriter out, SalesOrderDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesOrderDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesOrderDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesOrderDto
   * @throws IOException if the JSON string is invalid with respect to SalesOrderDto
   */
  public static SalesOrderDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesOrderDto.class);
  }

  /**
   * Convert an instance of SalesOrderDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

