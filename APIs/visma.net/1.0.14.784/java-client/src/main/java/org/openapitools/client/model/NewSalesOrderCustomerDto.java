/*
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NewSalesOrderCustomerDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:31.300103-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NewSalesOrderCustomerDto {
  public static final String SERIALIZED_NAME_CONTACT_ID = "contactId";
  @SerializedName(SERIALIZED_NAME_CONTACT_ID)
  private Integer contactId;

  public static final String SERIALIZED_NAME_GLN = "gln";
  @SerializedName(SERIALIZED_NAME_GLN)
  private String gln;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCATION_ID = "locationId";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private String order;

  public static final String SERIALIZED_NAME_REF_NO = "refNo";
  @SerializedName(SERIALIZED_NAME_REF_NO)
  private String refNo;

  public static final String SERIALIZED_NAME_TERMS_ID = "termsId";
  @SerializedName(SERIALIZED_NAME_TERMS_ID)
  private String termsId;

  public NewSalesOrderCustomerDto() {
  }

  public NewSalesOrderCustomerDto contactId(Integer contactId) {
    this.contactId = contactId;
    return this;
  }

  /**
   * The contact id for the customer
   * @return contactId
   */
  @javax.annotation.Nullable
  public Integer getContactId() {
    return contactId;
  }

  public void setContactId(Integer contactId) {
    this.contactId = contactId;
  }


  public NewSalesOrderCustomerDto gln(String gln) {
    this.gln = gln;
    return this;
  }

  /**
   * The unique global location number of the customer
   * @return gln
   */
  @javax.annotation.Nullable
  public String getGln() {
    return gln;
  }

  public void setGln(String gln) {
    this.gln = gln;
  }


  public NewSalesOrderCustomerDto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique id of the the customer
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public NewSalesOrderCustomerDto locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * Sets the location for the customer supplied to use on the order.  Must be a valid active location for the customer supplied in Visma.net.ERP.SalesOrders.Api.Dto.NewSalesOrder.NewSalesOrderCustomerDto.Id
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public NewSalesOrderCustomerDto order(String order) {
    this.order = order;
    return this;
  }

  /**
   * The customer order text
   * @return order
   */
  @javax.annotation.Nullable
  public String getOrder() {
    return order;
  }

  public void setOrder(String order) {
    this.order = order;
  }


  public NewSalesOrderCustomerDto refNo(String refNo) {
    this.refNo = refNo;
    return this;
  }

  /**
   * The customer ref number text
   * @return refNo
   */
  @javax.annotation.Nullable
  public String getRefNo() {
    return refNo;
  }

  public void setRefNo(String refNo) {
    this.refNo = refNo;
  }


  public NewSalesOrderCustomerDto termsId(String termsId) {
    this.termsId = termsId;
    return this;
  }

  /**
   * Sets the terms to use for the sales order.  Must be a valid terms identifier
   * @return termsId
   */
  @javax.annotation.Nullable
  public String getTermsId() {
    return termsId;
  }

  public void setTermsId(String termsId) {
    this.termsId = termsId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewSalesOrderCustomerDto newSalesOrderCustomerDto = (NewSalesOrderCustomerDto) o;
    return Objects.equals(this.contactId, newSalesOrderCustomerDto.contactId) &&
        Objects.equals(this.gln, newSalesOrderCustomerDto.gln) &&
        Objects.equals(this.id, newSalesOrderCustomerDto.id) &&
        Objects.equals(this.locationId, newSalesOrderCustomerDto.locationId) &&
        Objects.equals(this.order, newSalesOrderCustomerDto.order) &&
        Objects.equals(this.refNo, newSalesOrderCustomerDto.refNo) &&
        Objects.equals(this.termsId, newSalesOrderCustomerDto.termsId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactId, gln, id, locationId, order, refNo, termsId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewSalesOrderCustomerDto {\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    gln: ").append(toIndentedString(gln)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    refNo: ").append(toIndentedString(refNo)).append("\n");
    sb.append("    termsId: ").append(toIndentedString(termsId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contactId");
    openapiFields.add("gln");
    openapiFields.add("id");
    openapiFields.add("locationId");
    openapiFields.add("order");
    openapiFields.add("refNo");
    openapiFields.add("termsId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NewSalesOrderCustomerDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NewSalesOrderCustomerDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewSalesOrderCustomerDto is not found in the empty JSON string", NewSalesOrderCustomerDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NewSalesOrderCustomerDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NewSalesOrderCustomerDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gln") != null && !jsonObj.get("gln").isJsonNull()) && !jsonObj.get("gln").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gln` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gln").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("locationId") != null && !jsonObj.get("locationId").isJsonNull()) && !jsonObj.get("locationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationId").toString()));
      }
      if ((jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) && !jsonObj.get("order").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order").toString()));
      }
      if ((jsonObj.get("refNo") != null && !jsonObj.get("refNo").isJsonNull()) && !jsonObj.get("refNo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refNo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refNo").toString()));
      }
      if ((jsonObj.get("termsId") != null && !jsonObj.get("termsId").isJsonNull()) && !jsonObj.get("termsId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `termsId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("termsId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewSalesOrderCustomerDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewSalesOrderCustomerDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewSalesOrderCustomerDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewSalesOrderCustomerDto.class));

       return (TypeAdapter<T>) new TypeAdapter<NewSalesOrderCustomerDto>() {
           @Override
           public void write(JsonWriter out, NewSalesOrderCustomerDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewSalesOrderCustomerDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NewSalesOrderCustomerDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NewSalesOrderCustomerDto
   * @throws IOException if the JSON string is invalid with respect to NewSalesOrderCustomerDto
   */
  public static NewSalesOrderCustomerDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewSalesOrderCustomerDto.class);
  }

  /**
   * Convert an instance of NewSalesOrderCustomerDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

