/*
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AttachmentDto;
import org.openapitools.client.model.CdDescriptionPairDto;
import org.openapitools.client.model.LocationDto;
import org.openapitools.client.model.SalesOrderLineInventoryDto;
import org.openapitools.client.model.SalesPersonDto;
import org.openapitools.client.model.SupplierDto;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SalesOrderLineDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:31.300103-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesOrderLineDto {
  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<AttachmentDto> attachments;

  public static final String SERIALIZED_NAME_BASE_ORDER_QUANTITY = "baseOrderQuantity";
  @SerializedName(SERIALIZED_NAME_BASE_ORDER_QUANTITY)
  private Double baseOrderQuantity;

  public static final String SERIALIZED_NAME_BILLED_QUANTITY = "billedQuantity";
  @SerializedName(SERIALIZED_NAME_BILLED_QUANTITY)
  private Double billedQuantity;

  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private CdDescriptionPairDto branch;

  public static final String SERIALIZED_NAME_COMMISSIONABLE = "commissionable";
  @SerializedName(SERIALIZED_NAME_COMMISSIONABLE)
  private Boolean commissionable;

  public static final String SERIALIZED_NAME_COMPLETED = "completed";
  @SerializedName(SERIALIZED_NAME_COMPLETED)
  private Boolean completed;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISCOUNT_AMOUNT = "discountAmount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_AMOUNT)
  private Double discountAmount;

  public static final String SERIALIZED_NAME_DISCOUNT_CODE = "discountCode";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_CODE)
  private String discountCode;

  public static final String SERIALIZED_NAME_DISCOUNT_PERCENT = "discountPercent";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_PERCENT)
  private Double discountPercent;

  public static final String SERIALIZED_NAME_DISCOUNT_SEQUENCE_ID = "discountSequenceId";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_SEQUENCE_ID)
  private String discountSequenceId;

  public static final String SERIALIZED_NAME_EXTENDED_PRICE = "extendedPrice";
  @SerializedName(SERIALIZED_NAME_EXTENDED_PRICE)
  private Double extendedPrice;

  public static final String SERIALIZED_NAME_EXTERNAL_LINK = "externalLink";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_LINK)
  private String externalLink;

  public static final String SERIALIZED_NAME_FREE_ITEM = "freeItem";
  @SerializedName(SERIALIZED_NAME_FREE_ITEM)
  private Boolean freeItem;

  public static final String SERIALIZED_NAME_HAS_MANUAL_DISCOUNT = "hasManualDiscount";
  @SerializedName(SERIALIZED_NAME_HAS_MANUAL_DISCOUNT)
  private Boolean hasManualDiscount;

  public static final String SERIALIZED_NAME_HAS_MANUAL_PRICE = "hasManualPrice";
  @SerializedName(SERIALIZED_NAME_HAS_MANUAL_PRICE)
  private Boolean hasManualPrice;

  public static final String SERIALIZED_NAME_INVENTORY = "inventory";
  @SerializedName(SERIALIZED_NAME_INVENTORY)
  private SalesOrderLineInventoryDto inventory;

  public static final String SERIALIZED_NAME_INVENTORY_ALTERNATE_ID = "inventoryAlternateId";
  @SerializedName(SERIALIZED_NAME_INVENTORY_ALTERNATE_ID)
  private String inventoryAlternateId;

  public static final String SERIALIZED_NAME_LINE_ID = "lineId";
  @SerializedName(SERIALIZED_NAME_LINE_ID)
  private Integer lineId;

  public static final String SERIALIZED_NAME_LINE_TOTAL_BEFORE_DISCOUNT = "lineTotalBeforeDiscount";
  @SerializedName(SERIALIZED_NAME_LINE_TOTAL_BEFORE_DISCOUNT)
  private Double lineTotalBeforeDiscount;

  public static final String SERIALIZED_NAME_LINE_TYPE = "lineType";
  @SerializedName(SERIALIZED_NAME_LINE_TYPE)
  private String lineType;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_OPEN_LINE = "openLine";
  @SerializedName(SERIALIZED_NAME_OPEN_LINE)
  private Boolean openLine;

  public static final String SERIALIZED_NAME_OPEN_QUANTITY = "openQuantity";
  @SerializedName(SERIALIZED_NAME_OPEN_QUANTITY)
  private Double openQuantity;

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private String operation;

  public static final String SERIALIZED_NAME_ORDER_DATE = "orderDate";
  @SerializedName(SERIALIZED_NAME_ORDER_DATE)
  private OffsetDateTime orderDate;

  public static final String SERIALIZED_NAME_OVERSHIP_THRESHOLD = "overshipThreshold";
  @SerializedName(SERIALIZED_NAME_OVERSHIP_THRESHOLD)
  private Double overshipThreshold;

  public static final String SERIALIZED_NAME_PROJECT_TASK_ID = "projectTaskId";
  @SerializedName(SERIALIZED_NAME_PROJECT_TASK_ID)
  private String projectTaskId;

  public static final String SERIALIZED_NAME_PURCHASE_ORDER_SOURCE = "purchaseOrderSource";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ORDER_SOURCE)
  private String purchaseOrderSource;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Double quantity;

  public static final String SERIALIZED_NAME_QUANTITY_ON_SHIPMENTS = "quantityOnShipments";
  @SerializedName(SERIALIZED_NAME_QUANTITY_ON_SHIPMENTS)
  private Double quantityOnShipments;

  public static final String SERIALIZED_NAME_REASON_CODE = "reasonCode";
  @SerializedName(SERIALIZED_NAME_REASON_CODE)
  private String reasonCode;

  public static final String SERIALIZED_NAME_REPLACEMENT_UNIT_COST = "replacementUnitCost";
  @SerializedName(SERIALIZED_NAME_REPLACEMENT_UNIT_COST)
  private Double replacementUnitCost;

  public static final String SERIALIZED_NAME_REQUEST_DATE = "requestDate";
  @SerializedName(SERIALIZED_NAME_REQUEST_DATE)
  private OffsetDateTime requestDate;

  public static final String SERIALIZED_NAME_SALES_ACCOUNT_ID = "salesAccountId";
  @SerializedName(SERIALIZED_NAME_SALES_ACCOUNT_ID)
  private String salesAccountId;

  public static final String SERIALIZED_NAME_SALES_PERSON = "salesPerson";
  @SerializedName(SERIALIZED_NAME_SALES_PERSON)
  private SalesPersonDto salesPerson;

  public static final String SERIALIZED_NAME_SHIP_DATE = "shipDate";
  @SerializedName(SERIALIZED_NAME_SHIP_DATE)
  private OffsetDateTime shipDate;

  public static final String SERIALIZED_NAME_SHIPPING_RULE = "shippingRule";
  @SerializedName(SERIALIZED_NAME_SHIPPING_RULE)
  private String shippingRule;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private Integer sortOrder;

  public static final String SERIALIZED_NAME_SUBACCOUNT = "subaccount";
  @SerializedName(SERIALIZED_NAME_SUBACCOUNT)
  private Map<String, String> subaccount;

  public static final String SERIALIZED_NAME_SUPPLIER = "supplier";
  @SerializedName(SERIALIZED_NAME_SUPPLIER)
  private SupplierDto supplier;

  public static final String SERIALIZED_NAME_SUPPLIER_PRICE = "supplierPrice";
  @SerializedName(SERIALIZED_NAME_SUPPLIER_PRICE)
  private Double supplierPrice;

  public static final String SERIALIZED_NAME_TAX_CATEGORY_ID = "taxCategoryId";
  @SerializedName(SERIALIZED_NAME_TAX_CATEGORY_ID)
  private String taxCategoryId;

  public static final String SERIALIZED_NAME_UNDERSHIP_THRESHOLD = "undershipThreshold";
  @SerializedName(SERIALIZED_NAME_UNDERSHIP_THRESHOLD)
  private Double undershipThreshold;

  public static final String SERIALIZED_NAME_UNIT_COST = "unitCost";
  @SerializedName(SERIALIZED_NAME_UNIT_COST)
  private Double unitCost;

  public static final String SERIALIZED_NAME_UNIT_OF_MEASURE = "unitOfMeasure";
  @SerializedName(SERIALIZED_NAME_UNIT_OF_MEASURE)
  private String unitOfMeasure;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private Double unitPrice;

  public static final String SERIALIZED_NAME_WAREHOUSE_ID = "warehouseId";
  @SerializedName(SERIALIZED_NAME_WAREHOUSE_ID)
  private String warehouseId;

  public static final String SERIALIZED_NAME_WAREHOUSE_LOCATION = "warehouseLocation";
  @SerializedName(SERIALIZED_NAME_WAREHOUSE_LOCATION)
  private LocationDto warehouseLocation;

  public SalesOrderLineDto() {
  }

  public SalesOrderLineDto attachments(List<AttachmentDto> attachments) {
    this.attachments = attachments;
    return this;
  }

  public SalesOrderLineDto addAttachmentsItem(AttachmentDto attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * The attachments associated with this sales order line
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<AttachmentDto> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<AttachmentDto> attachments) {
    this.attachments = attachments;
  }


  public SalesOrderLineDto baseOrderQuantity(Double baseOrderQuantity) {
    this.baseOrderQuantity = baseOrderQuantity;
    return this;
  }

  /**
   * The base order quantity for this line
   * @return baseOrderQuantity
   */
  @javax.annotation.Nullable
  public Double getBaseOrderQuantity() {
    return baseOrderQuantity;
  }

  public void setBaseOrderQuantity(Double baseOrderQuantity) {
    this.baseOrderQuantity = baseOrderQuantity;
  }


  public SalesOrderLineDto billedQuantity(Double billedQuantity) {
    this.billedQuantity = billedQuantity;
    return this;
  }

  /**
   * The billed quantity for this line
   * @return billedQuantity
   */
  @javax.annotation.Nullable
  public Double getBilledQuantity() {
    return billedQuantity;
  }

  public void setBilledQuantity(Double billedQuantity) {
    this.billedQuantity = billedQuantity;
  }


  public SalesOrderLineDto branch(CdDescriptionPairDto branch) {
    this.branch = branch;
    return this;
  }

  /**
   * Get branch
   * @return branch
   */
  @javax.annotation.Nullable
  public CdDescriptionPairDto getBranch() {
    return branch;
  }

  public void setBranch(CdDescriptionPairDto branch) {
    this.branch = branch;
  }


  public SalesOrderLineDto commissionable(Boolean commissionable) {
    this.commissionable = commissionable;
    return this;
  }

  /**
   * Indicates if line is comissionable
   * @return commissionable
   */
  @javax.annotation.Nullable
  public Boolean getCommissionable() {
    return commissionable;
  }

  public void setCommissionable(Boolean commissionable) {
    this.commissionable = commissionable;
  }


  public SalesOrderLineDto completed(Boolean completed) {
    this.completed = completed;
    return this;
  }

  /**
   * Whether this order line is completed or not
   * @return completed
   */
  @javax.annotation.Nullable
  public Boolean getCompleted() {
    return completed;
  }

  public void setCompleted(Boolean completed) {
    this.completed = completed;
  }


  public SalesOrderLineDto description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Any description for this order line
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SalesOrderLineDto discountAmount(Double discountAmount) {
    this.discountAmount = discountAmount;
    return this;
  }

  /**
   * The discount amount for this line
   * @return discountAmount
   */
  @javax.annotation.Nullable
  public Double getDiscountAmount() {
    return discountAmount;
  }

  public void setDiscountAmount(Double discountAmount) {
    this.discountAmount = discountAmount;
  }


  public SalesOrderLineDto discountCode(String discountCode) {
    this.discountCode = discountCode;
    return this;
  }

  /**
   * Code of discount applied to this line
   * @return discountCode
   */
  @javax.annotation.Nullable
  public String getDiscountCode() {
    return discountCode;
  }

  public void setDiscountCode(String discountCode) {
    this.discountCode = discountCode;
  }


  public SalesOrderLineDto discountPercent(Double discountPercent) {
    this.discountPercent = discountPercent;
    return this;
  }

  /**
   * Discount percentage applied to this line
   * @return discountPercent
   */
  @javax.annotation.Nullable
  public Double getDiscountPercent() {
    return discountPercent;
  }

  public void setDiscountPercent(Double discountPercent) {
    this.discountPercent = discountPercent;
  }


  public SalesOrderLineDto discountSequenceId(String discountSequenceId) {
    this.discountSequenceId = discountSequenceId;
    return this;
  }

  /**
   * Id of discount sequence applied to this line
   * @return discountSequenceId
   */
  @javax.annotation.Nullable
  public String getDiscountSequenceId() {
    return discountSequenceId;
  }

  public void setDiscountSequenceId(String discountSequenceId) {
    this.discountSequenceId = discountSequenceId;
  }


  public SalesOrderLineDto extendedPrice(Double extendedPrice) {
    this.extendedPrice = extendedPrice;
    return this;
  }

  /**
   * The extended price for this sales order line
   * @return extendedPrice
   */
  @javax.annotation.Nullable
  public Double getExtendedPrice() {
    return extendedPrice;
  }

  public void setExtendedPrice(Double extendedPrice) {
    this.extendedPrice = extendedPrice;
  }


  public SalesOrderLineDto externalLink(String externalLink) {
    this.externalLink = externalLink;
    return this;
  }

  /**
   * Any external link for this sales order line
   * @return externalLink
   */
  @javax.annotation.Nullable
  public String getExternalLink() {
    return externalLink;
  }

  public void setExternalLink(String externalLink) {
    this.externalLink = externalLink;
  }


  public SalesOrderLineDto freeItem(Boolean freeItem) {
    this.freeItem = freeItem;
    return this;
  }

  /**
   * Whether these item(s) are free or not
   * @return freeItem
   */
  @javax.annotation.Nullable
  public Boolean getFreeItem() {
    return freeItem;
  }

  public void setFreeItem(Boolean freeItem) {
    this.freeItem = freeItem;
  }


  public SalesOrderLineDto hasManualDiscount(Boolean hasManualDiscount) {
    this.hasManualDiscount = hasManualDiscount;
    return this;
  }

  /**
   * Discount is applied manually
   * @return hasManualDiscount
   */
  @javax.annotation.Nullable
  public Boolean getHasManualDiscount() {
    return hasManualDiscount;
  }

  public void setHasManualDiscount(Boolean hasManualDiscount) {
    this.hasManualDiscount = hasManualDiscount;
  }


  public SalesOrderLineDto hasManualPrice(Boolean hasManualPrice) {
    this.hasManualPrice = hasManualPrice;
    return this;
  }

  /**
   * Unit price is applied manually
   * @return hasManualPrice
   */
  @javax.annotation.Nullable
  public Boolean getHasManualPrice() {
    return hasManualPrice;
  }

  public void setHasManualPrice(Boolean hasManualPrice) {
    this.hasManualPrice = hasManualPrice;
  }


  public SalesOrderLineDto inventory(SalesOrderLineInventoryDto inventory) {
    this.inventory = inventory;
    return this;
  }

  /**
   * Get inventory
   * @return inventory
   */
  @javax.annotation.Nullable
  public SalesOrderLineInventoryDto getInventory() {
    return inventory;
  }

  public void setInventory(SalesOrderLineInventoryDto inventory) {
    this.inventory = inventory;
  }


  public SalesOrderLineDto inventoryAlternateId(String inventoryAlternateId) {
    this.inventoryAlternateId = inventoryAlternateId;
    return this;
  }

  /**
   * Get inventoryAlternateId
   * @return inventoryAlternateId
   */
  @javax.annotation.Nullable
  public String getInventoryAlternateId() {
    return inventoryAlternateId;
  }

  public void setInventoryAlternateId(String inventoryAlternateId) {
    this.inventoryAlternateId = inventoryAlternateId;
  }


  public SalesOrderLineDto lineId(Integer lineId) {
    this.lineId = lineId;
    return this;
  }

  /**
   * The line number of the sales order line
   * @return lineId
   */
  @javax.annotation.Nullable
  public Integer getLineId() {
    return lineId;
  }

  public void setLineId(Integer lineId) {
    this.lineId = lineId;
  }


  public SalesOrderLineDto lineTotalBeforeDiscount(Double lineTotalBeforeDiscount) {
    this.lineTotalBeforeDiscount = lineTotalBeforeDiscount;
    return this;
  }

  /**
   * The line total before any discounts are applied
   * @return lineTotalBeforeDiscount
   */
  @javax.annotation.Nullable
  public Double getLineTotalBeforeDiscount() {
    return lineTotalBeforeDiscount;
  }

  public void setLineTotalBeforeDiscount(Double lineTotalBeforeDiscount) {
    this.lineTotalBeforeDiscount = lineTotalBeforeDiscount;
  }


  public SalesOrderLineDto lineType(String lineType) {
    this.lineType = lineType;
    return this;
  }

  /**
   * The type of sales order line
   * @return lineType
   */
  @javax.annotation.Nullable
  public String getLineType() {
    return lineType;
  }

  public void setLineType(String lineType) {
    this.lineType = lineType;
  }


  public SalesOrderLineDto note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Any note that has been applied to this order line
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public SalesOrderLineDto openLine(Boolean openLine) {
    this.openLine = openLine;
    return this;
  }

  /**
   * Indicates if line has quantity left to be shipped
   * @return openLine
   */
  @javax.annotation.Nullable
  public Boolean getOpenLine() {
    return openLine;
  }

  public void setOpenLine(Boolean openLine) {
    this.openLine = openLine;
  }


  public SalesOrderLineDto openQuantity(Double openQuantity) {
    this.openQuantity = openQuantity;
    return this;
  }

  /**
   * The open quantity for this line
   * @return openQuantity
   */
  @javax.annotation.Nullable
  public Double getOpenQuantity() {
    return openQuantity;
  }

  public void setOpenQuantity(Double openQuantity) {
    this.openQuantity = openQuantity;
  }


  public SalesOrderLineDto operation(String operation) {
    this.operation = operation;
    return this;
  }

  /**
   * The type of operation the line represents to the order
   * @return operation
   */
  @javax.annotation.Nullable
  public String getOperation() {
    return operation;
  }

  public void setOperation(String operation) {
    this.operation = operation;
  }


  public SalesOrderLineDto orderDate(OffsetDateTime orderDate) {
    this.orderDate = orderDate;
    return this;
  }

  /**
   * The date the order line was added  Unless a specific time zone offset is included (e.g. &#39;2012-12-24T00:00:00+02:00&#39;), the passed date is considered to be in the UTC time zone.
   * @return orderDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getOrderDate() {
    return orderDate;
  }

  public void setOrderDate(OffsetDateTime orderDate) {
    this.orderDate = orderDate;
  }


  public SalesOrderLineDto overshipThreshold(Double overshipThreshold) {
    this.overshipThreshold = overshipThreshold;
    return this;
  }

  /**
   * The overship threshold value (%)
   * @return overshipThreshold
   */
  @javax.annotation.Nullable
  public Double getOvershipThreshold() {
    return overshipThreshold;
  }

  public void setOvershipThreshold(Double overshipThreshold) {
    this.overshipThreshold = overshipThreshold;
  }


  public SalesOrderLineDto projectTaskId(String projectTaskId) {
    this.projectTaskId = projectTaskId;
    return this;
  }

  /**
   * The project task with which this sales order line is associated
   * @return projectTaskId
   */
  @javax.annotation.Nullable
  public String getProjectTaskId() {
    return projectTaskId;
  }

  public void setProjectTaskId(String projectTaskId) {
    this.projectTaskId = projectTaskId;
  }


  public SalesOrderLineDto purchaseOrderSource(String purchaseOrderSource) {
    this.purchaseOrderSource = purchaseOrderSource;
    return this;
  }

  /**
   * Information about line purchase order source
   * @return purchaseOrderSource
   */
  @javax.annotation.Nullable
  public String getPurchaseOrderSource() {
    return purchaseOrderSource;
  }

  public void setPurchaseOrderSource(String purchaseOrderSource) {
    this.purchaseOrderSource = purchaseOrderSource;
  }


  public SalesOrderLineDto quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The quantity of unit of measure this line represents
   * @return quantity
   */
  @javax.annotation.Nullable
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }


  public SalesOrderLineDto quantityOnShipments(Double quantityOnShipments) {
    this.quantityOnShipments = quantityOnShipments;
    return this;
  }

  /**
   * The quantity on shipments for this line
   * @return quantityOnShipments
   */
  @javax.annotation.Nullable
  public Double getQuantityOnShipments() {
    return quantityOnShipments;
  }

  public void setQuantityOnShipments(Double quantityOnShipments) {
    this.quantityOnShipments = quantityOnShipments;
  }


  public SalesOrderLineDto reasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
    return this;
  }

  /**
   * The reason code
   * @return reasonCode
   */
  @javax.annotation.Nullable
  public String getReasonCode() {
    return reasonCode;
  }

  public void setReasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
  }


  public SalesOrderLineDto replacementUnitCost(Double replacementUnitCost) {
    this.replacementUnitCost = replacementUnitCost;
    return this;
  }

  /**
   * The replacement unit cost of an item. This is set based on the supplier price.  If no supplier price found, the last price of the item&#39;s default supplier will be used.  If no default supplier is set, the last cost of the item will be used.
   * @return replacementUnitCost
   */
  @javax.annotation.Nullable
  public Double getReplacementUnitCost() {
    return replacementUnitCost;
  }

  public void setReplacementUnitCost(Double replacementUnitCost) {
    this.replacementUnitCost = replacementUnitCost;
  }


  public SalesOrderLineDto requestDate(OffsetDateTime requestDate) {
    this.requestDate = requestDate;
    return this;
  }

  /**
   * The request date for this order line  Unless a specific time zone offset is included (e.g. &#39;2012-12-24T00:00:00+02:00&#39;), the passed date is considered to be in the UTC time zone.
   * @return requestDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRequestDate() {
    return requestDate;
  }

  public void setRequestDate(OffsetDateTime requestDate) {
    this.requestDate = requestDate;
  }


  public SalesOrderLineDto salesAccountId(String salesAccountId) {
    this.salesAccountId = salesAccountId;
    return this;
  }

  /**
   * The general ledger account this line applies to
   * @return salesAccountId
   */
  @javax.annotation.Nullable
  public String getSalesAccountId() {
    return salesAccountId;
  }

  public void setSalesAccountId(String salesAccountId) {
    this.salesAccountId = salesAccountId;
  }


  public SalesOrderLineDto salesPerson(SalesPersonDto salesPerson) {
    this.salesPerson = salesPerson;
    return this;
  }

  /**
   * Get salesPerson
   * @return salesPerson
   */
  @javax.annotation.Nullable
  public SalesPersonDto getSalesPerson() {
    return salesPerson;
  }

  public void setSalesPerson(SalesPersonDto salesPerson) {
    this.salesPerson = salesPerson;
  }


  public SalesOrderLineDto shipDate(OffsetDateTime shipDate) {
    this.shipDate = shipDate;
    return this;
  }

  /**
   * The expected shipping date for this order line  Unless a specific time zone offset is included (e.g. &#39;2012-12-24T00:00:00+02:00&#39;), the passed date is considered to be in the UTC time zone.
   * @return shipDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getShipDate() {
    return shipDate;
  }

  public void setShipDate(OffsetDateTime shipDate) {
    this.shipDate = shipDate;
  }


  public SalesOrderLineDto shippingRule(String shippingRule) {
    this.shippingRule = shippingRule;
    return this;
  }

  /**
   * The shipping rule code for this order line
   * @return shippingRule
   */
  @javax.annotation.Nullable
  public String getShippingRule() {
    return shippingRule;
  }

  public void setShippingRule(String shippingRule) {
    this.shippingRule = shippingRule;
  }


  public SalesOrderLineDto sortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * Used to apply sort order to a set of lines
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public Integer getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
  }


  public SalesOrderLineDto subaccount(Map<String, String> subaccount) {
    this.subaccount = subaccount;
    return this;
  }

  public SalesOrderLineDto putSubaccountItem(String key, String subaccountItem) {
    if (this.subaccount == null) {
      this.subaccount = new HashMap<>();
    }
    this.subaccount.put(key, subaccountItem);
    return this;
  }

  /**
   * The general ledger subaccount this line applies to
   * @return subaccount
   */
  @javax.annotation.Nullable
  public Map<String, String> getSubaccount() {
    return subaccount;
  }

  public void setSubaccount(Map<String, String> subaccount) {
    this.subaccount = subaccount;
  }


  public SalesOrderLineDto supplier(SupplierDto supplier) {
    this.supplier = supplier;
    return this;
  }

  /**
   * Get supplier
   * @return supplier
   */
  @javax.annotation.Nullable
  public SupplierDto getSupplier() {
    return supplier;
  }

  public void setSupplier(SupplierDto supplier) {
    this.supplier = supplier;
  }


  public SalesOrderLineDto supplierPrice(Double supplierPrice) {
    this.supplierPrice = supplierPrice;
    return this;
  }

  /**
   * Get supplierPrice
   * @return supplierPrice
   */
  @javax.annotation.Nullable
  public Double getSupplierPrice() {
    return supplierPrice;
  }

  public void setSupplierPrice(Double supplierPrice) {
    this.supplierPrice = supplierPrice;
  }


  public SalesOrderLineDto taxCategoryId(String taxCategoryId) {
    this.taxCategoryId = taxCategoryId;
    return this;
  }

  /**
   * The Tax Category Id applying to this order line
   * @return taxCategoryId
   */
  @javax.annotation.Nullable
  public String getTaxCategoryId() {
    return taxCategoryId;
  }

  public void setTaxCategoryId(String taxCategoryId) {
    this.taxCategoryId = taxCategoryId;
  }


  public SalesOrderLineDto undershipThreshold(Double undershipThreshold) {
    this.undershipThreshold = undershipThreshold;
    return this;
  }

  /**
   * The undership threshold value (%)
   * @return undershipThreshold
   */
  @javax.annotation.Nullable
  public Double getUndershipThreshold() {
    return undershipThreshold;
  }

  public void setUndershipThreshold(Double undershipThreshold) {
    this.undershipThreshold = undershipThreshold;
  }


  public SalesOrderLineDto unitCost(Double unitCost) {
    this.unitCost = unitCost;
    return this;
  }

  /**
   * The unit cost of items on this order line
   * @return unitCost
   */
  @javax.annotation.Nullable
  public Double getUnitCost() {
    return unitCost;
  }

  public void setUnitCost(Double unitCost) {
    this.unitCost = unitCost;
  }


  public SalesOrderLineDto unitOfMeasure(String unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
    return this;
  }

  /**
   * The unit of measure (UOM) for the sales order line
   * @return unitOfMeasure
   */
  @javax.annotation.Nullable
  public String getUnitOfMeasure() {
    return unitOfMeasure;
  }

  public void setUnitOfMeasure(String unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
  }


  public SalesOrderLineDto unitPrice(Double unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * The unit price for items on this order line
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public Double getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(Double unitPrice) {
    this.unitPrice = unitPrice;
  }


  public SalesOrderLineDto warehouseId(String warehouseId) {
    this.warehouseId = warehouseId;
    return this;
  }

  /**
   * The Site Id for items on this line
   * @return warehouseId
   */
  @javax.annotation.Nullable
  public String getWarehouseId() {
    return warehouseId;
  }

  public void setWarehouseId(String warehouseId) {
    this.warehouseId = warehouseId;
  }


  public SalesOrderLineDto warehouseLocation(LocationDto warehouseLocation) {
    this.warehouseLocation = warehouseLocation;
    return this;
  }

  /**
   * Get warehouseLocation
   * @return warehouseLocation
   */
  @javax.annotation.Nullable
  public LocationDto getWarehouseLocation() {
    return warehouseLocation;
  }

  public void setWarehouseLocation(LocationDto warehouseLocation) {
    this.warehouseLocation = warehouseLocation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesOrderLineDto salesOrderLineDto = (SalesOrderLineDto) o;
    return Objects.equals(this.attachments, salesOrderLineDto.attachments) &&
        Objects.equals(this.baseOrderQuantity, salesOrderLineDto.baseOrderQuantity) &&
        Objects.equals(this.billedQuantity, salesOrderLineDto.billedQuantity) &&
        Objects.equals(this.branch, salesOrderLineDto.branch) &&
        Objects.equals(this.commissionable, salesOrderLineDto.commissionable) &&
        Objects.equals(this.completed, salesOrderLineDto.completed) &&
        Objects.equals(this.description, salesOrderLineDto.description) &&
        Objects.equals(this.discountAmount, salesOrderLineDto.discountAmount) &&
        Objects.equals(this.discountCode, salesOrderLineDto.discountCode) &&
        Objects.equals(this.discountPercent, salesOrderLineDto.discountPercent) &&
        Objects.equals(this.discountSequenceId, salesOrderLineDto.discountSequenceId) &&
        Objects.equals(this.extendedPrice, salesOrderLineDto.extendedPrice) &&
        Objects.equals(this.externalLink, salesOrderLineDto.externalLink) &&
        Objects.equals(this.freeItem, salesOrderLineDto.freeItem) &&
        Objects.equals(this.hasManualDiscount, salesOrderLineDto.hasManualDiscount) &&
        Objects.equals(this.hasManualPrice, salesOrderLineDto.hasManualPrice) &&
        Objects.equals(this.inventory, salesOrderLineDto.inventory) &&
        Objects.equals(this.inventoryAlternateId, salesOrderLineDto.inventoryAlternateId) &&
        Objects.equals(this.lineId, salesOrderLineDto.lineId) &&
        Objects.equals(this.lineTotalBeforeDiscount, salesOrderLineDto.lineTotalBeforeDiscount) &&
        Objects.equals(this.lineType, salesOrderLineDto.lineType) &&
        Objects.equals(this.note, salesOrderLineDto.note) &&
        Objects.equals(this.openLine, salesOrderLineDto.openLine) &&
        Objects.equals(this.openQuantity, salesOrderLineDto.openQuantity) &&
        Objects.equals(this.operation, salesOrderLineDto.operation) &&
        Objects.equals(this.orderDate, salesOrderLineDto.orderDate) &&
        Objects.equals(this.overshipThreshold, salesOrderLineDto.overshipThreshold) &&
        Objects.equals(this.projectTaskId, salesOrderLineDto.projectTaskId) &&
        Objects.equals(this.purchaseOrderSource, salesOrderLineDto.purchaseOrderSource) &&
        Objects.equals(this.quantity, salesOrderLineDto.quantity) &&
        Objects.equals(this.quantityOnShipments, salesOrderLineDto.quantityOnShipments) &&
        Objects.equals(this.reasonCode, salesOrderLineDto.reasonCode) &&
        Objects.equals(this.replacementUnitCost, salesOrderLineDto.replacementUnitCost) &&
        Objects.equals(this.requestDate, salesOrderLineDto.requestDate) &&
        Objects.equals(this.salesAccountId, salesOrderLineDto.salesAccountId) &&
        Objects.equals(this.salesPerson, salesOrderLineDto.salesPerson) &&
        Objects.equals(this.shipDate, salesOrderLineDto.shipDate) &&
        Objects.equals(this.shippingRule, salesOrderLineDto.shippingRule) &&
        Objects.equals(this.sortOrder, salesOrderLineDto.sortOrder) &&
        Objects.equals(this.subaccount, salesOrderLineDto.subaccount) &&
        Objects.equals(this.supplier, salesOrderLineDto.supplier) &&
        Objects.equals(this.supplierPrice, salesOrderLineDto.supplierPrice) &&
        Objects.equals(this.taxCategoryId, salesOrderLineDto.taxCategoryId) &&
        Objects.equals(this.undershipThreshold, salesOrderLineDto.undershipThreshold) &&
        Objects.equals(this.unitCost, salesOrderLineDto.unitCost) &&
        Objects.equals(this.unitOfMeasure, salesOrderLineDto.unitOfMeasure) &&
        Objects.equals(this.unitPrice, salesOrderLineDto.unitPrice) &&
        Objects.equals(this.warehouseId, salesOrderLineDto.warehouseId) &&
        Objects.equals(this.warehouseLocation, salesOrderLineDto.warehouseLocation);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachments, baseOrderQuantity, billedQuantity, branch, commissionable, completed, description, discountAmount, discountCode, discountPercent, discountSequenceId, extendedPrice, externalLink, freeItem, hasManualDiscount, hasManualPrice, inventory, inventoryAlternateId, lineId, lineTotalBeforeDiscount, lineType, note, openLine, openQuantity, operation, orderDate, overshipThreshold, projectTaskId, purchaseOrderSource, quantity, quantityOnShipments, reasonCode, replacementUnitCost, requestDate, salesAccountId, salesPerson, shipDate, shippingRule, sortOrder, subaccount, supplier, supplierPrice, taxCategoryId, undershipThreshold, unitCost, unitOfMeasure, unitPrice, warehouseId, warehouseLocation);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesOrderLineDto {\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    baseOrderQuantity: ").append(toIndentedString(baseOrderQuantity)).append("\n");
    sb.append("    billedQuantity: ").append(toIndentedString(billedQuantity)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    commissionable: ").append(toIndentedString(commissionable)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    discountAmount: ").append(toIndentedString(discountAmount)).append("\n");
    sb.append("    discountCode: ").append(toIndentedString(discountCode)).append("\n");
    sb.append("    discountPercent: ").append(toIndentedString(discountPercent)).append("\n");
    sb.append("    discountSequenceId: ").append(toIndentedString(discountSequenceId)).append("\n");
    sb.append("    extendedPrice: ").append(toIndentedString(extendedPrice)).append("\n");
    sb.append("    externalLink: ").append(toIndentedString(externalLink)).append("\n");
    sb.append("    freeItem: ").append(toIndentedString(freeItem)).append("\n");
    sb.append("    hasManualDiscount: ").append(toIndentedString(hasManualDiscount)).append("\n");
    sb.append("    hasManualPrice: ").append(toIndentedString(hasManualPrice)).append("\n");
    sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
    sb.append("    inventoryAlternateId: ").append(toIndentedString(inventoryAlternateId)).append("\n");
    sb.append("    lineId: ").append(toIndentedString(lineId)).append("\n");
    sb.append("    lineTotalBeforeDiscount: ").append(toIndentedString(lineTotalBeforeDiscount)).append("\n");
    sb.append("    lineType: ").append(toIndentedString(lineType)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    openLine: ").append(toIndentedString(openLine)).append("\n");
    sb.append("    openQuantity: ").append(toIndentedString(openQuantity)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    orderDate: ").append(toIndentedString(orderDate)).append("\n");
    sb.append("    overshipThreshold: ").append(toIndentedString(overshipThreshold)).append("\n");
    sb.append("    projectTaskId: ").append(toIndentedString(projectTaskId)).append("\n");
    sb.append("    purchaseOrderSource: ").append(toIndentedString(purchaseOrderSource)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    quantityOnShipments: ").append(toIndentedString(quantityOnShipments)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("    replacementUnitCost: ").append(toIndentedString(replacementUnitCost)).append("\n");
    sb.append("    requestDate: ").append(toIndentedString(requestDate)).append("\n");
    sb.append("    salesAccountId: ").append(toIndentedString(salesAccountId)).append("\n");
    sb.append("    salesPerson: ").append(toIndentedString(salesPerson)).append("\n");
    sb.append("    shipDate: ").append(toIndentedString(shipDate)).append("\n");
    sb.append("    shippingRule: ").append(toIndentedString(shippingRule)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    subaccount: ").append(toIndentedString(subaccount)).append("\n");
    sb.append("    supplier: ").append(toIndentedString(supplier)).append("\n");
    sb.append("    supplierPrice: ").append(toIndentedString(supplierPrice)).append("\n");
    sb.append("    taxCategoryId: ").append(toIndentedString(taxCategoryId)).append("\n");
    sb.append("    undershipThreshold: ").append(toIndentedString(undershipThreshold)).append("\n");
    sb.append("    unitCost: ").append(toIndentedString(unitCost)).append("\n");
    sb.append("    unitOfMeasure: ").append(toIndentedString(unitOfMeasure)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    warehouseId: ").append(toIndentedString(warehouseId)).append("\n");
    sb.append("    warehouseLocation: ").append(toIndentedString(warehouseLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachments");
    openapiFields.add("baseOrderQuantity");
    openapiFields.add("billedQuantity");
    openapiFields.add("branch");
    openapiFields.add("commissionable");
    openapiFields.add("completed");
    openapiFields.add("description");
    openapiFields.add("discountAmount");
    openapiFields.add("discountCode");
    openapiFields.add("discountPercent");
    openapiFields.add("discountSequenceId");
    openapiFields.add("extendedPrice");
    openapiFields.add("externalLink");
    openapiFields.add("freeItem");
    openapiFields.add("hasManualDiscount");
    openapiFields.add("hasManualPrice");
    openapiFields.add("inventory");
    openapiFields.add("inventoryAlternateId");
    openapiFields.add("lineId");
    openapiFields.add("lineTotalBeforeDiscount");
    openapiFields.add("lineType");
    openapiFields.add("note");
    openapiFields.add("openLine");
    openapiFields.add("openQuantity");
    openapiFields.add("operation");
    openapiFields.add("orderDate");
    openapiFields.add("overshipThreshold");
    openapiFields.add("projectTaskId");
    openapiFields.add("purchaseOrderSource");
    openapiFields.add("quantity");
    openapiFields.add("quantityOnShipments");
    openapiFields.add("reasonCode");
    openapiFields.add("replacementUnitCost");
    openapiFields.add("requestDate");
    openapiFields.add("salesAccountId");
    openapiFields.add("salesPerson");
    openapiFields.add("shipDate");
    openapiFields.add("shippingRule");
    openapiFields.add("sortOrder");
    openapiFields.add("subaccount");
    openapiFields.add("supplier");
    openapiFields.add("supplierPrice");
    openapiFields.add("taxCategoryId");
    openapiFields.add("undershipThreshold");
    openapiFields.add("unitCost");
    openapiFields.add("unitOfMeasure");
    openapiFields.add("unitPrice");
    openapiFields.add("warehouseId");
    openapiFields.add("warehouseLocation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesOrderLineDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesOrderLineDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesOrderLineDto is not found in the empty JSON string", SalesOrderLineDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesOrderLineDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesOrderLineDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            AttachmentDto.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      // validate the optional field `branch`
      if (jsonObj.get("branch") != null && !jsonObj.get("branch").isJsonNull()) {
        CdDescriptionPairDto.validateJsonElement(jsonObj.get("branch"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("discountCode") != null && !jsonObj.get("discountCode").isJsonNull()) && !jsonObj.get("discountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discountCode").toString()));
      }
      if ((jsonObj.get("discountSequenceId") != null && !jsonObj.get("discountSequenceId").isJsonNull()) && !jsonObj.get("discountSequenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discountSequenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discountSequenceId").toString()));
      }
      if ((jsonObj.get("externalLink") != null && !jsonObj.get("externalLink").isJsonNull()) && !jsonObj.get("externalLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalLink").toString()));
      }
      // validate the optional field `inventory`
      if (jsonObj.get("inventory") != null && !jsonObj.get("inventory").isJsonNull()) {
        SalesOrderLineInventoryDto.validateJsonElement(jsonObj.get("inventory"));
      }
      if ((jsonObj.get("inventoryAlternateId") != null && !jsonObj.get("inventoryAlternateId").isJsonNull()) && !jsonObj.get("inventoryAlternateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventoryAlternateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inventoryAlternateId").toString()));
      }
      if ((jsonObj.get("lineType") != null && !jsonObj.get("lineType").isJsonNull()) && !jsonObj.get("lineType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineType").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonNull()) && !jsonObj.get("operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation").toString()));
      }
      if ((jsonObj.get("projectTaskId") != null && !jsonObj.get("projectTaskId").isJsonNull()) && !jsonObj.get("projectTaskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectTaskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectTaskId").toString()));
      }
      if ((jsonObj.get("purchaseOrderSource") != null && !jsonObj.get("purchaseOrderSource").isJsonNull()) && !jsonObj.get("purchaseOrderSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseOrderSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseOrderSource").toString()));
      }
      if ((jsonObj.get("reasonCode") != null && !jsonObj.get("reasonCode").isJsonNull()) && !jsonObj.get("reasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasonCode").toString()));
      }
      if ((jsonObj.get("salesAccountId") != null && !jsonObj.get("salesAccountId").isJsonNull()) && !jsonObj.get("salesAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesAccountId").toString()));
      }
      // validate the optional field `salesPerson`
      if (jsonObj.get("salesPerson") != null && !jsonObj.get("salesPerson").isJsonNull()) {
        SalesPersonDto.validateJsonElement(jsonObj.get("salesPerson"));
      }
      if ((jsonObj.get("shippingRule") != null && !jsonObj.get("shippingRule").isJsonNull()) && !jsonObj.get("shippingRule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingRule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingRule").toString()));
      }
      // validate the optional field `supplier`
      if (jsonObj.get("supplier") != null && !jsonObj.get("supplier").isJsonNull()) {
        SupplierDto.validateJsonElement(jsonObj.get("supplier"));
      }
      if ((jsonObj.get("taxCategoryId") != null && !jsonObj.get("taxCategoryId").isJsonNull()) && !jsonObj.get("taxCategoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxCategoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxCategoryId").toString()));
      }
      if ((jsonObj.get("unitOfMeasure") != null && !jsonObj.get("unitOfMeasure").isJsonNull()) && !jsonObj.get("unitOfMeasure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitOfMeasure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitOfMeasure").toString()));
      }
      if ((jsonObj.get("warehouseId") != null && !jsonObj.get("warehouseId").isJsonNull()) && !jsonObj.get("warehouseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warehouseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warehouseId").toString()));
      }
      // validate the optional field `warehouseLocation`
      if (jsonObj.get("warehouseLocation") != null && !jsonObj.get("warehouseLocation").isJsonNull()) {
        LocationDto.validateJsonElement(jsonObj.get("warehouseLocation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesOrderLineDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesOrderLineDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesOrderLineDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesOrderLineDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesOrderLineDto>() {
           @Override
           public void write(JsonWriter out, SalesOrderLineDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesOrderLineDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesOrderLineDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesOrderLineDto
   * @throws IOException if the JSON string is invalid with respect to SalesOrderLineDto
   */
  public static SalesOrderLineDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesOrderLineDto.class);
  }

  /**
   * Convert an instance of SalesOrderLineDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

