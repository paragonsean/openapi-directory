/*
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NewSalesOrderBillingDto;
import org.openapitools.client.model.NewSalesOrderCustomerDto;
import org.openapitools.client.model.NewSalesOrderFinancialInfoDto;
import org.openapitools.client.model.NewSalesOrderFreightDto;
import org.openapitools.client.model.NewSalesOrderLineDto;
import org.openapitools.client.model.NewSalesOrderPaymentSettings;
import org.openapitools.client.model.NewSalesOrderShippingDto;
import org.openapitools.client.model.SalesOrderPrintDto;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NewSalesOrderCommand
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:31.300103-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NewSalesOrderCommand {
  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  private NewSalesOrderBillingDto billing;

  public static final String SERIALIZED_NAME_BRANCH_ID = "branchId";
  @SerializedName(SERIALIZED_NAME_BRANCH_ID)
  private String branchId;

  public static final String SERIALIZED_NAME_CANCEL_BY = "cancelBy";
  @SerializedName(SERIALIZED_NAME_CANCEL_BY)
  private OffsetDateTime cancelBy;

  public static final String SERIALIZED_NAME_CURRENCY_ID = "currencyId";
  @SerializedName(SERIALIZED_NAME_CURRENCY_ID)
  private String currencyId;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private NewSalesOrderCustomerDto customer;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FINANCIAL_INFORMATION = "financialInformation";
  @SerializedName(SERIALIZED_NAME_FINANCIAL_INFORMATION)
  private NewSalesOrderFinancialInfoDto financialInformation;

  public static final String SERIALIZED_NAME_FREIGHT = "freight";
  @SerializedName(SERIALIZED_NAME_FREIGHT)
  private NewSalesOrderFreightDto freight;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_ORDER_LINES = "orderLines";
  @SerializedName(SERIALIZED_NAME_ORDER_LINES)
  private List<NewSalesOrderLineDto> orderLines;

  public static final String SERIALIZED_NAME_ORIGINAL_ORDER_ID = "originalOrderId";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_ORDER_ID)
  private String originalOrderId;

  public static final String SERIALIZED_NAME_ORIGINAL_ORDER_TYPE = "originalOrderType";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_ORDER_TYPE)
  private String originalOrderType;

  public static final String SERIALIZED_NAME_OWNER_ID = "ownerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private String ownerId;

  public static final String SERIALIZED_NAME_PAYMENT_SETTINGS = "paymentSettings";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SETTINGS)
  private NewSalesOrderPaymentSettings paymentSettings;

  public static final String SERIALIZED_NAME_PRINT = "print";
  @SerializedName(SERIALIZED_NAME_PRINT)
  private SalesOrderPrintDto print;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_REQUEST_ON = "requestOn";
  @SerializedName(SERIALIZED_NAME_REQUEST_ON)
  private OffsetDateTime requestOn;

  public static final String SERIALIZED_NAME_SALES_PERSON_ID = "salesPersonId";
  @SerializedName(SERIALIZED_NAME_SALES_PERSON_ID)
  private String salesPersonId;

  public static final String SERIALIZED_NAME_SHIPPING = "shipping";
  @SerializedName(SERIALIZED_NAME_SHIPPING)
  private NewSalesOrderShippingDto shipping;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TAX_ZONE_ID = "taxZoneId";
  @SerializedName(SERIALIZED_NAME_TAX_ZONE_ID)
  private String taxZoneId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USE_REPLACEMENT_COST_FOR_MARGIN_AND_PROFIT = "useReplacementCostForMarginAndProfit";
  @SerializedName(SERIALIZED_NAME_USE_REPLACEMENT_COST_FOR_MARGIN_AND_PROFIT)
  private Boolean useReplacementCostForMarginAndProfit;

  public NewSalesOrderCommand() {
  }

  public NewSalesOrderCommand billing(NewSalesOrderBillingDto billing) {
    this.billing = billing;
    return this;
  }

  /**
   * Get billing
   * @return billing
   */
  @javax.annotation.Nullable
  public NewSalesOrderBillingDto getBilling() {
    return billing;
  }

  public void setBilling(NewSalesOrderBillingDto billing) {
    this.billing = billing;
  }


  public NewSalesOrderCommand branchId(String branchId) {
    this.branchId = branchId;
    return this;
  }

  /**
   * The branch with which this order is associated. Prio for setting the Branch ID being:  &lt;list type&#x3D;\&quot;number\&quot;&gt;&lt;item&gt;BranchID set in body&lt;/item&gt;&lt;item&gt;BranchID from call header&lt;/item&gt;&lt;item&gt;BranchID from customer location&lt;/item&gt;&lt;item&gt;Company&#39;s default branch ID&lt;/item&gt;&lt;/list&gt;
   * @return branchId
   */
  @javax.annotation.Nullable
  public String getBranchId() {
    return branchId;
  }

  public void setBranchId(String branchId) {
    this.branchId = branchId;
  }


  public NewSalesOrderCommand cancelBy(OffsetDateTime cancelBy) {
    this.cancelBy = cancelBy;
    return this;
  }

  /**
   * Sets the cancel by date for the order to create. If not supplied, the order type&#39;s days to keep will be added to the current date to determine the value of this field  Unless a specific time zone offset is specified with the date (e.g. &#39;2012-12-24T13:30:23+02:00&#39;), the passed date is considered to be in the UTC time zone.
   * @return cancelBy
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCancelBy() {
    return cancelBy;
  }

  public void setCancelBy(OffsetDateTime cancelBy) {
    this.cancelBy = cancelBy;
  }


  public NewSalesOrderCommand currencyId(String currencyId) {
    this.currencyId = currencyId;
    return this;
  }

  /**
   * Override the CurrencyId for the order. Must be a valid currency Id. If not specified, the customer&#39;s currency is used if not null. If null, company base currency is used
   * @return currencyId
   */
  @javax.annotation.Nullable
  public String getCurrencyId() {
    return currencyId;
  }

  public void setCurrencyId(String currencyId) {
    this.currencyId = currencyId;
  }


  public NewSalesOrderCommand customer(NewSalesOrderCustomerDto customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nonnull
  public NewSalesOrderCustomerDto getCustomer() {
    return customer;
  }

  public void setCustomer(NewSalesOrderCustomerDto customer) {
    this.customer = customer;
  }


  public NewSalesOrderCommand date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Sets the order date of the order to create. If not supplied, the current date will be used  Unless a specific time zone offset is specified with the date (e.g. &#39;2012-12-24T13:30:23+02:00&#39;), the passed date is considered to be in the UTC time zone.
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public NewSalesOrderCommand description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Sets the description for the order to create  &lt;br&gt;Note that text fields should not contain any personally identifiable or otherwise sensitive data
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public NewSalesOrderCommand financialInformation(NewSalesOrderFinancialInfoDto financialInformation) {
    this.financialInformation = financialInformation;
    return this;
  }

  /**
   * Get financialInformation
   * @return financialInformation
   */
  @javax.annotation.Nullable
  public NewSalesOrderFinancialInfoDto getFinancialInformation() {
    return financialInformation;
  }

  public void setFinancialInformation(NewSalesOrderFinancialInfoDto financialInformation) {
    this.financialInformation = financialInformation;
  }


  public NewSalesOrderCommand freight(NewSalesOrderFreightDto freight) {
    this.freight = freight;
    return this;
  }

  /**
   * Get freight
   * @return freight
   */
  @javax.annotation.Nullable
  public NewSalesOrderFreightDto getFreight() {
    return freight;
  }

  public void setFreight(NewSalesOrderFreightDto freight) {
    this.freight = freight;
  }


  public NewSalesOrderCommand note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Any note to apply to the order header.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public NewSalesOrderCommand orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * Sets the new id that should be assigned to the new sales order.  This is required if the specified Visma.net.ERP.SalesOrders.Api.Application.Commands.NewSalesOrder.NewSalesOrderCommand.Type has manual numbering set up. If not it should be null or empty.
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public NewSalesOrderCommand orderLines(List<NewSalesOrderLineDto> orderLines) {
    this.orderLines = orderLines;
    return this;
  }

  public NewSalesOrderCommand addOrderLinesItem(NewSalesOrderLineDto orderLinesItem) {
    if (this.orderLines == null) {
      this.orderLines = new ArrayList<>();
    }
    this.orderLines.add(orderLinesItem);
    return this;
  }

  /**
   * The lines that are added to the order upon creation
   * @return orderLines
   */
  @javax.annotation.Nullable
  public List<NewSalesOrderLineDto> getOrderLines() {
    return orderLines;
  }

  public void setOrderLines(List<NewSalesOrderLineDto> orderLines) {
    this.orderLines = orderLines;
  }


  public NewSalesOrderCommand originalOrderId(String originalOrderId) {
    this.originalOrderId = originalOrderId;
    return this;
  }

  /**
   * Sets the unique identifier of the original order
   * @return originalOrderId
   */
  @javax.annotation.Nullable
  public String getOriginalOrderId() {
    return originalOrderId;
  }

  public void setOriginalOrderId(String originalOrderId) {
    this.originalOrderId = originalOrderId;
  }


  public NewSalesOrderCommand originalOrderType(String originalOrderType) {
    this.originalOrderType = originalOrderType;
    return this;
  }

  /**
   * Sets the type code for the original sales order
   * @return originalOrderType
   */
  @javax.annotation.Nullable
  public String getOriginalOrderType() {
    return originalOrderType;
  }

  public void setOriginalOrderType(String originalOrderType) {
    this.originalOrderType = originalOrderType;
  }


  public NewSalesOrderCommand ownerId(String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  /**
   * Sets the owner (employee) for the order
   * @return ownerId
   */
  @javax.annotation.Nullable
  public String getOwnerId() {
    return ownerId;
  }

  public void setOwnerId(String ownerId) {
    this.ownerId = ownerId;
  }


  public NewSalesOrderCommand paymentSettings(NewSalesOrderPaymentSettings paymentSettings) {
    this.paymentSettings = paymentSettings;
    return this;
  }

  /**
   * Get paymentSettings
   * @return paymentSettings
   */
  @javax.annotation.Nullable
  public NewSalesOrderPaymentSettings getPaymentSettings() {
    return paymentSettings;
  }

  public void setPaymentSettings(NewSalesOrderPaymentSettings paymentSettings) {
    this.paymentSettings = paymentSettings;
  }


  public NewSalesOrderCommand print(SalesOrderPrintDto print) {
    this.print = print;
    return this;
  }

  /**
   * Get print
   * @return print
   */
  @javax.annotation.Nullable
  public SalesOrderPrintDto getPrint() {
    return print;
  }

  public void setPrint(SalesOrderPrintDto print) {
    this.print = print;
  }


  public NewSalesOrderCommand projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * The project with which this sales order is associated
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public NewSalesOrderCommand requestOn(OffsetDateTime requestOn) {
    this.requestOn = requestOn;
    return this;
  }

  /**
   * Sets the requested on date for the order to create. If not supplied, the current date will be used  Unless a specific time zone offset is specified with the date (e.g. &#39;2012-12-24T13:30:23+02:00&#39;), the passed date is considered to be in the UTC time zone.
   * @return requestOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRequestOn() {
    return requestOn;
  }

  public void setRequestOn(OffsetDateTime requestOn) {
    this.requestOn = requestOn;
  }


  public NewSalesOrderCommand salesPersonId(String salesPersonId) {
    this.salesPersonId = salesPersonId;
    return this;
  }

  /**
   * Sets default sales person for the order
   * @return salesPersonId
   */
  @javax.annotation.Nullable
  public String getSalesPersonId() {
    return salesPersonId;
  }

  public void setSalesPersonId(String salesPersonId) {
    this.salesPersonId = salesPersonId;
  }


  public NewSalesOrderCommand shipping(NewSalesOrderShippingDto shipping) {
    this.shipping = shipping;
    return this;
  }

  /**
   * Get shipping
   * @return shipping
   */
  @javax.annotation.Nullable
  public NewSalesOrderShippingDto getShipping() {
    return shipping;
  }

  public void setShipping(NewSalesOrderShippingDto shipping) {
    this.shipping = shipping;
  }


  public NewSalesOrderCommand status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Sets the initial status code for the order. Must be null, empty or one of \&quot;Open\&quot; or \&quot;Hold\&quot;. If not supplied the value will be determined by the sales order type.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public NewSalesOrderCommand taxZoneId(String taxZoneId) {
    this.taxZoneId = taxZoneId;
    return this;
  }

  /**
   * Override the TaxZoneId for the order. If not specified, the customer&#39;s location&#39;s TaxZoneId will be used
   * @return taxZoneId
   */
  @javax.annotation.Nullable
  public String getTaxZoneId() {
    return taxZoneId;
  }

  public void setTaxZoneId(String taxZoneId) {
    this.taxZoneId = taxZoneId;
  }


  public NewSalesOrderCommand type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Sets the type id of an active sales order type to create
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public NewSalesOrderCommand useReplacementCostForMarginAndProfit(Boolean useReplacementCostForMarginAndProfit) {
    this.useReplacementCostForMarginAndProfit = useReplacementCostForMarginAndProfit;
    return this;
  }

  /**
   * When this option is set to &#x60;true&#x60;, the &#x60;costTotal&#x60; of the order will be calculated based on &#x60;replacementUnitCost&#x60;.  If option is set to &#x60;false&#x60;, the &#x60;costTotal&#x60; will be calculated based on &#x60;unitCost&#x60;
   * @return useReplacementCostForMarginAndProfit
   */
  @javax.annotation.Nullable
  public Boolean getUseReplacementCostForMarginAndProfit() {
    return useReplacementCostForMarginAndProfit;
  }

  public void setUseReplacementCostForMarginAndProfit(Boolean useReplacementCostForMarginAndProfit) {
    this.useReplacementCostForMarginAndProfit = useReplacementCostForMarginAndProfit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewSalesOrderCommand newSalesOrderCommand = (NewSalesOrderCommand) o;
    return Objects.equals(this.billing, newSalesOrderCommand.billing) &&
        Objects.equals(this.branchId, newSalesOrderCommand.branchId) &&
        Objects.equals(this.cancelBy, newSalesOrderCommand.cancelBy) &&
        Objects.equals(this.currencyId, newSalesOrderCommand.currencyId) &&
        Objects.equals(this.customer, newSalesOrderCommand.customer) &&
        Objects.equals(this.date, newSalesOrderCommand.date) &&
        Objects.equals(this.description, newSalesOrderCommand.description) &&
        Objects.equals(this.financialInformation, newSalesOrderCommand.financialInformation) &&
        Objects.equals(this.freight, newSalesOrderCommand.freight) &&
        Objects.equals(this.note, newSalesOrderCommand.note) &&
        Objects.equals(this.orderId, newSalesOrderCommand.orderId) &&
        Objects.equals(this.orderLines, newSalesOrderCommand.orderLines) &&
        Objects.equals(this.originalOrderId, newSalesOrderCommand.originalOrderId) &&
        Objects.equals(this.originalOrderType, newSalesOrderCommand.originalOrderType) &&
        Objects.equals(this.ownerId, newSalesOrderCommand.ownerId) &&
        Objects.equals(this.paymentSettings, newSalesOrderCommand.paymentSettings) &&
        Objects.equals(this.print, newSalesOrderCommand.print) &&
        Objects.equals(this.projectId, newSalesOrderCommand.projectId) &&
        Objects.equals(this.requestOn, newSalesOrderCommand.requestOn) &&
        Objects.equals(this.salesPersonId, newSalesOrderCommand.salesPersonId) &&
        Objects.equals(this.shipping, newSalesOrderCommand.shipping) &&
        Objects.equals(this.status, newSalesOrderCommand.status) &&
        Objects.equals(this.taxZoneId, newSalesOrderCommand.taxZoneId) &&
        Objects.equals(this.type, newSalesOrderCommand.type) &&
        Objects.equals(this.useReplacementCostForMarginAndProfit, newSalesOrderCommand.useReplacementCostForMarginAndProfit);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(billing, branchId, cancelBy, currencyId, customer, date, description, financialInformation, freight, note, orderId, orderLines, originalOrderId, originalOrderType, ownerId, paymentSettings, print, projectId, requestOn, salesPersonId, shipping, status, taxZoneId, type, useReplacementCostForMarginAndProfit);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewSalesOrderCommand {\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    branchId: ").append(toIndentedString(branchId)).append("\n");
    sb.append("    cancelBy: ").append(toIndentedString(cancelBy)).append("\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    financialInformation: ").append(toIndentedString(financialInformation)).append("\n");
    sb.append("    freight: ").append(toIndentedString(freight)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    orderLines: ").append(toIndentedString(orderLines)).append("\n");
    sb.append("    originalOrderId: ").append(toIndentedString(originalOrderId)).append("\n");
    sb.append("    originalOrderType: ").append(toIndentedString(originalOrderType)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    paymentSettings: ").append(toIndentedString(paymentSettings)).append("\n");
    sb.append("    print: ").append(toIndentedString(print)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    requestOn: ").append(toIndentedString(requestOn)).append("\n");
    sb.append("    salesPersonId: ").append(toIndentedString(salesPersonId)).append("\n");
    sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    taxZoneId: ").append(toIndentedString(taxZoneId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    useReplacementCostForMarginAndProfit: ").append(toIndentedString(useReplacementCostForMarginAndProfit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billing");
    openapiFields.add("branchId");
    openapiFields.add("cancelBy");
    openapiFields.add("currencyId");
    openapiFields.add("customer");
    openapiFields.add("date");
    openapiFields.add("description");
    openapiFields.add("financialInformation");
    openapiFields.add("freight");
    openapiFields.add("note");
    openapiFields.add("orderId");
    openapiFields.add("orderLines");
    openapiFields.add("originalOrderId");
    openapiFields.add("originalOrderType");
    openapiFields.add("ownerId");
    openapiFields.add("paymentSettings");
    openapiFields.add("print");
    openapiFields.add("projectId");
    openapiFields.add("requestOn");
    openapiFields.add("salesPersonId");
    openapiFields.add("shipping");
    openapiFields.add("status");
    openapiFields.add("taxZoneId");
    openapiFields.add("type");
    openapiFields.add("useReplacementCostForMarginAndProfit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("customer");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NewSalesOrderCommand
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NewSalesOrderCommand.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewSalesOrderCommand is not found in the empty JSON string", NewSalesOrderCommand.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NewSalesOrderCommand.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NewSalesOrderCommand` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NewSalesOrderCommand.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billing`
      if (jsonObj.get("billing") != null && !jsonObj.get("billing").isJsonNull()) {
        NewSalesOrderBillingDto.validateJsonElement(jsonObj.get("billing"));
      }
      if ((jsonObj.get("branchId") != null && !jsonObj.get("branchId").isJsonNull()) && !jsonObj.get("branchId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branchId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branchId").toString()));
      }
      if ((jsonObj.get("currencyId") != null && !jsonObj.get("currencyId").isJsonNull()) && !jsonObj.get("currencyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyId").toString()));
      }
      // validate the required field `customer`
      NewSalesOrderCustomerDto.validateJsonElement(jsonObj.get("customer"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `financialInformation`
      if (jsonObj.get("financialInformation") != null && !jsonObj.get("financialInformation").isJsonNull()) {
        NewSalesOrderFinancialInfoDto.validateJsonElement(jsonObj.get("financialInformation"));
      }
      // validate the optional field `freight`
      if (jsonObj.get("freight") != null && !jsonObj.get("freight").isJsonNull()) {
        NewSalesOrderFreightDto.validateJsonElement(jsonObj.get("freight"));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if (jsonObj.get("orderLines") != null && !jsonObj.get("orderLines").isJsonNull()) {
        JsonArray jsonArrayorderLines = jsonObj.getAsJsonArray("orderLines");
        if (jsonArrayorderLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orderLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orderLines` to be an array in the JSON string but got `%s`", jsonObj.get("orderLines").toString()));
          }

          // validate the optional field `orderLines` (array)
          for (int i = 0; i < jsonArrayorderLines.size(); i++) {
            NewSalesOrderLineDto.validateJsonElement(jsonArrayorderLines.get(i));
          };
        }
      }
      if ((jsonObj.get("originalOrderId") != null && !jsonObj.get("originalOrderId").isJsonNull()) && !jsonObj.get("originalOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalOrderId").toString()));
      }
      if ((jsonObj.get("originalOrderType") != null && !jsonObj.get("originalOrderType").isJsonNull()) && !jsonObj.get("originalOrderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalOrderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalOrderType").toString()));
      }
      if ((jsonObj.get("ownerId") != null && !jsonObj.get("ownerId").isJsonNull()) && !jsonObj.get("ownerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerId").toString()));
      }
      // validate the optional field `paymentSettings`
      if (jsonObj.get("paymentSettings") != null && !jsonObj.get("paymentSettings").isJsonNull()) {
        NewSalesOrderPaymentSettings.validateJsonElement(jsonObj.get("paymentSettings"));
      }
      // validate the optional field `print`
      if (jsonObj.get("print") != null && !jsonObj.get("print").isJsonNull()) {
        SalesOrderPrintDto.validateJsonElement(jsonObj.get("print"));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if ((jsonObj.get("salesPersonId") != null && !jsonObj.get("salesPersonId").isJsonNull()) && !jsonObj.get("salesPersonId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesPersonId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesPersonId").toString()));
      }
      // validate the optional field `shipping`
      if (jsonObj.get("shipping") != null && !jsonObj.get("shipping").isJsonNull()) {
        NewSalesOrderShippingDto.validateJsonElement(jsonObj.get("shipping"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("taxZoneId") != null && !jsonObj.get("taxZoneId").isJsonNull()) && !jsonObj.get("taxZoneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxZoneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxZoneId").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewSalesOrderCommand.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewSalesOrderCommand' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewSalesOrderCommand> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewSalesOrderCommand.class));

       return (TypeAdapter<T>) new TypeAdapter<NewSalesOrderCommand>() {
           @Override
           public void write(JsonWriter out, NewSalesOrderCommand value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewSalesOrderCommand read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NewSalesOrderCommand given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NewSalesOrderCommand
   * @throws IOException if the JSON string is invalid with respect to NewSalesOrderCommand
   */
  public static NewSalesOrderCommand fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewSalesOrderCommand.class);
  }

  /**
   * Convert an instance of NewSalesOrderCommand to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

