/*
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NewSalesOrderFinancialInfoDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:31.300103-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NewSalesOrderFinancialInfoDto {
  public static final String SERIALIZED_NAME_CASH_DISCOUNT_DATE = "cashDiscountDate";
  @SerializedName(SERIALIZED_NAME_CASH_DISCOUNT_DATE)
  private OffsetDateTime cashDiscountDate;

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private OffsetDateTime dueDate;

  public static final String SERIALIZED_NAME_INVOICE_DATE = "invoiceDate";
  @SerializedName(SERIALIZED_NAME_INVOICE_DATE)
  private OffsetDateTime invoiceDate;

  public static final String SERIALIZED_NAME_INVOICE_ID = "invoiceId";
  @SerializedName(SERIALIZED_NAME_INVOICE_ID)
  private String invoiceId;

  public static final String SERIALIZED_NAME_INVOICE_SEPARATELY = "invoiceSeparately";
  @SerializedName(SERIALIZED_NAME_INVOICE_SEPARATELY)
  private Boolean invoiceSeparately;

  public static final String SERIALIZED_NAME_POST_PERIOD = "postPeriod";
  @SerializedName(SERIALIZED_NAME_POST_PERIOD)
  private String postPeriod;

  public NewSalesOrderFinancialInfoDto() {
  }

  public NewSalesOrderFinancialInfoDto cashDiscountDate(OffsetDateTime cashDiscountDate) {
    this.cashDiscountDate = cashDiscountDate;
    return this;
  }

  /**
   * The date when the cash discount is available for the invoice created for the order. Default date is set based on the terms selected in the order.  Unless a specific time zone offset is specified with the date (e.g. &#39;2012-12-24T13:30:23+02:00&#39;), the passed date is considered to be in the UTC time zone.
   * @return cashDiscountDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCashDiscountDate() {
    return cashDiscountDate;
  }

  public void setCashDiscountDate(OffsetDateTime cashDiscountDate) {
    this.cashDiscountDate = cashDiscountDate;
  }


  public NewSalesOrderFinancialInfoDto dueDate(OffsetDateTime dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * The due date for the invoice created for the order. Default due date is set according to the credit terms.  Unless a specific time zone offset is specified with the date (e.g. &#39;2012-12-24T13:30:23+02:00&#39;), the passed date is considered to be in the UTC time zone.
   * @return dueDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDueDate() {
    return dueDate;
  }

  public void setDueDate(OffsetDateTime dueDate) {
    this.dueDate = dueDate;
  }


  public NewSalesOrderFinancialInfoDto invoiceDate(OffsetDateTime invoiceDate) {
    this.invoiceDate = invoiceDate;
    return this;
  }

  /**
   * Sets the invoice date of the invoice that will be generated for the order.  Unless a specific time zone offset is specified with the date (e.g. &#39;2012-12-24T13:30:23+02:00&#39;), the passed date is considered to be in the UTC time zone.
   * @return invoiceDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInvoiceDate() {
    return invoiceDate;
  }

  public void setInvoiceDate(OffsetDateTime invoiceDate) {
    this.invoiceDate = invoiceDate;
  }


  public NewSalesOrderFinancialInfoDto invoiceId(String invoiceId) {
    this.invoiceId = invoiceId;
    return this;
  }

  /**
   * The reference number of the invoice generated for this order.  This can be used if the numbering sequence assigned to invoices is configured for manual numbering.
   * @return invoiceId
   */
  @javax.annotation.Nullable
  public String getInvoiceId() {
    return invoiceId;
  }

  public void setInvoiceId(String invoiceId) {
    this.invoiceId = invoiceId;
  }


  public NewSalesOrderFinancialInfoDto invoiceSeparately(Boolean invoiceSeparately) {
    this.invoiceSeparately = invoiceSeparately;
    return this;
  }

  /**
   * Sets if the order should be invoiced/billed separately
   * @return invoiceSeparately
   */
  @javax.annotation.Nullable
  public Boolean getInvoiceSeparately() {
    return invoiceSeparately;
  }

  public void setInvoiceSeparately(Boolean invoiceSeparately) {
    this.invoiceSeparately = invoiceSeparately;
  }


  public NewSalesOrderFinancialInfoDto postPeriod(String postPeriod) {
    this.postPeriod = postPeriod;
    return this;
  }

  /**
   * The post period for the invoice. This can be used to override the financial period. Must be a valid existing financial period.
   * @return postPeriod
   */
  @javax.annotation.Nullable
  public String getPostPeriod() {
    return postPeriod;
  }

  public void setPostPeriod(String postPeriod) {
    this.postPeriod = postPeriod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewSalesOrderFinancialInfoDto newSalesOrderFinancialInfoDto = (NewSalesOrderFinancialInfoDto) o;
    return Objects.equals(this.cashDiscountDate, newSalesOrderFinancialInfoDto.cashDiscountDate) &&
        Objects.equals(this.dueDate, newSalesOrderFinancialInfoDto.dueDate) &&
        Objects.equals(this.invoiceDate, newSalesOrderFinancialInfoDto.invoiceDate) &&
        Objects.equals(this.invoiceId, newSalesOrderFinancialInfoDto.invoiceId) &&
        Objects.equals(this.invoiceSeparately, newSalesOrderFinancialInfoDto.invoiceSeparately) &&
        Objects.equals(this.postPeriod, newSalesOrderFinancialInfoDto.postPeriod);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cashDiscountDate, dueDate, invoiceDate, invoiceId, invoiceSeparately, postPeriod);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewSalesOrderFinancialInfoDto {\n");
    sb.append("    cashDiscountDate: ").append(toIndentedString(cashDiscountDate)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    invoiceDate: ").append(toIndentedString(invoiceDate)).append("\n");
    sb.append("    invoiceId: ").append(toIndentedString(invoiceId)).append("\n");
    sb.append("    invoiceSeparately: ").append(toIndentedString(invoiceSeparately)).append("\n");
    sb.append("    postPeriod: ").append(toIndentedString(postPeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cashDiscountDate");
    openapiFields.add("dueDate");
    openapiFields.add("invoiceDate");
    openapiFields.add("invoiceId");
    openapiFields.add("invoiceSeparately");
    openapiFields.add("postPeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NewSalesOrderFinancialInfoDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NewSalesOrderFinancialInfoDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewSalesOrderFinancialInfoDto is not found in the empty JSON string", NewSalesOrderFinancialInfoDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NewSalesOrderFinancialInfoDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NewSalesOrderFinancialInfoDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("invoiceId") != null && !jsonObj.get("invoiceId").isJsonNull()) && !jsonObj.get("invoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceId").toString()));
      }
      if ((jsonObj.get("postPeriod") != null && !jsonObj.get("postPeriod").isJsonNull()) && !jsonObj.get("postPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postPeriod").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewSalesOrderFinancialInfoDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewSalesOrderFinancialInfoDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewSalesOrderFinancialInfoDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewSalesOrderFinancialInfoDto.class));

       return (TypeAdapter<T>) new TypeAdapter<NewSalesOrderFinancialInfoDto>() {
           @Override
           public void write(JsonWriter out, NewSalesOrderFinancialInfoDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewSalesOrderFinancialInfoDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NewSalesOrderFinancialInfoDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NewSalesOrderFinancialInfoDto
   * @throws IOException if the JSON string is invalid with respect to NewSalesOrderFinancialInfoDto
   */
  public static NewSalesOrderFinancialInfoDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewSalesOrderFinancialInfoDto.class);
  }

  /**
   * Convert an instance of NewSalesOrderFinancialInfoDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

