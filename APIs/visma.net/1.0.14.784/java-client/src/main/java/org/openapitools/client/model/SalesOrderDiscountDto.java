/*
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CdDescriptionPairDto;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SalesOrderDiscountDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:31.300103-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesOrderDiscountDto {
  public static final String SERIALIZED_NAME_DISCOUNT_AMOUNT = "discountAmount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_AMOUNT)
  private Double discountAmount;

  public static final String SERIALIZED_NAME_DISCOUNT_ID = "discountId";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_ID)
  private String discountId;

  public static final String SERIALIZED_NAME_DISCOUNT_PERCENT = "discountPercent";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_PERCENT)
  private Double discountPercent;

  public static final String SERIALIZED_NAME_DISCOUNT_SEQUENCE_ID = "discountSequenceId";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_SEQUENCE_ID)
  private String discountSequenceId;

  public static final String SERIALIZED_NAME_DISCOUNTABLE_AMOUNT = "discountableAmount";
  @SerializedName(SERIALIZED_NAME_DISCOUNTABLE_AMOUNT)
  private Double discountableAmount;

  public static final String SERIALIZED_NAME_DISCOUNTABLE_QUANTITY = "discountableQuantity";
  @SerializedName(SERIALIZED_NAME_DISCOUNTABLE_QUANTITY)
  private Double discountableQuantity;

  public static final String SERIALIZED_NAME_FREE_ITEM = "freeItem";
  @SerializedName(SERIALIZED_NAME_FREE_ITEM)
  private CdDescriptionPairDto freeItem;

  public static final String SERIALIZED_NAME_FREE_ITEM_QUANTITY = "freeItemQuantity";
  @SerializedName(SERIALIZED_NAME_FREE_ITEM_QUANTITY)
  private Double freeItemQuantity;

  public static final String SERIALIZED_NAME_IS_MANUAL = "isManual";
  @SerializedName(SERIALIZED_NAME_IS_MANUAL)
  private Boolean isManual;

  public static final String SERIALIZED_NAME_MANUAL_ORDER_INDEX = "manualOrderIndex";
  @SerializedName(SERIALIZED_NAME_MANUAL_ORDER_INDEX)
  private Integer manualOrderIndex;

  public static final String SERIALIZED_NAME_SKIP_DISCOUNT = "skipDiscount";
  @SerializedName(SERIALIZED_NAME_SKIP_DISCOUNT)
  private Boolean skipDiscount;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public SalesOrderDiscountDto() {
  }

  public SalesOrderDiscountDto discountAmount(Double discountAmount) {
    this.discountAmount = discountAmount;
    return this;
  }

  /**
   * The amount of the discount
   * @return discountAmount
   */
  @javax.annotation.Nullable
  public Double getDiscountAmount() {
    return discountAmount;
  }

  public void setDiscountAmount(Double discountAmount) {
    this.discountAmount = discountAmount;
  }


  public SalesOrderDiscountDto discountId(String discountId) {
    this.discountId = discountId;
    return this;
  }

  /**
   * The identifier of the discount applied to the order
   * @return discountId
   */
  @javax.annotation.Nullable
  public String getDiscountId() {
    return discountId;
  }

  public void setDiscountId(String discountId) {
    this.discountId = discountId;
  }


  public SalesOrderDiscountDto discountPercent(Double discountPercent) {
    this.discountPercent = discountPercent;
    return this;
  }

  /**
   * The discount percent, if the discount is defined to be calculated as a percentage
   * @return discountPercent
   */
  @javax.annotation.Nullable
  public Double getDiscountPercent() {
    return discountPercent;
  }

  public void setDiscountPercent(Double discountPercent) {
    this.discountPercent = discountPercent;
  }


  public SalesOrderDiscountDto discountSequenceId(String discountSequenceId) {
    this.discountSequenceId = discountSequenceId;
    return this;
  }

  /**
   * The identifier of the discount sequence of the discount ID applied to the order
   * @return discountSequenceId
   */
  @javax.annotation.Nullable
  public String getDiscountSequenceId() {
    return discountSequenceId;
  }

  public void setDiscountSequenceId(String discountSequenceId) {
    this.discountSequenceId = discountSequenceId;
  }


  public SalesOrderDiscountDto discountableAmount(Double discountableAmount) {
    this.discountableAmount = discountableAmount;
    return this;
  }

  /**
   * The amount used as a base for discount calculation if the discount is based on amount.
   * @return discountableAmount
   */
  @javax.annotation.Nullable
  public Double getDiscountableAmount() {
    return discountableAmount;
  }

  public void setDiscountableAmount(Double discountableAmount) {
    this.discountableAmount = discountableAmount;
  }


  public SalesOrderDiscountDto discountableQuantity(Double discountableQuantity) {
    this.discountableQuantity = discountableQuantity;
    return this;
  }

  /**
   * The quantity used as a base for discount calculation if the discount is based on quantity.
   * @return discountableQuantity
   */
  @javax.annotation.Nullable
  public Double getDiscountableQuantity() {
    return discountableQuantity;
  }

  public void setDiscountableQuantity(Double discountableQuantity) {
    this.discountableQuantity = discountableQuantity;
  }


  public SalesOrderDiscountDto freeItem(CdDescriptionPairDto freeItem) {
    this.freeItem = freeItem;
    return this;
  }

  /**
   * Get freeItem
   * @return freeItem
   */
  @javax.annotation.Nullable
  public CdDescriptionPairDto getFreeItem() {
    return freeItem;
  }

  public void setFreeItem(CdDescriptionPairDto freeItem) {
    this.freeItem = freeItem;
  }


  public SalesOrderDiscountDto freeItemQuantity(Double freeItemQuantity) {
    this.freeItemQuantity = freeItemQuantity;
    return this;
  }

  /**
   * The quantity of the free item. Used to set the quantity for the order line generate by a free item discount
   * @return freeItemQuantity
   */
  @javax.annotation.Nullable
  public Double getFreeItemQuantity() {
    return freeItemQuantity;
  }

  public void setFreeItemQuantity(Double freeItemQuantity) {
    this.freeItemQuantity = freeItemQuantity;
  }


  public SalesOrderDiscountDto isManual(Boolean isManual) {
    this.isManual = isManual;
    return this;
  }

  /**
   * Indicates that the discount has been applied manually
   * @return isManual
   */
  @javax.annotation.Nullable
  public Boolean getIsManual() {
    return isManual;
  }

  public void setIsManual(Boolean isManual) {
    this.isManual = isManual;
  }


  public SalesOrderDiscountDto manualOrderIndex(Integer manualOrderIndex) {
    this.manualOrderIndex = manualOrderIndex;
    return this;
  }

  /**
   * The number of discount line set for the order
   * @return manualOrderIndex
   */
  @javax.annotation.Nullable
  public Integer getManualOrderIndex() {
    return manualOrderIndex;
  }

  public void setManualOrderIndex(Integer manualOrderIndex) {
    this.manualOrderIndex = manualOrderIndex;
  }


  public SalesOrderDiscountDto skipDiscount(Boolean skipDiscount) {
    this.skipDiscount = skipDiscount;
    return this;
  }

  /**
   * Indicates if the discount has been cancelled for the order and is not applicable
   * @return skipDiscount
   */
  @javax.annotation.Nullable
  public Boolean getSkipDiscount() {
    return skipDiscount;
  }

  public void setSkipDiscount(Boolean skipDiscount) {
    this.skipDiscount = skipDiscount;
  }


  public SalesOrderDiscountDto type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of discount whose sequence was applied to the document(Group or Document)
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesOrderDiscountDto salesOrderDiscountDto = (SalesOrderDiscountDto) o;
    return Objects.equals(this.discountAmount, salesOrderDiscountDto.discountAmount) &&
        Objects.equals(this.discountId, salesOrderDiscountDto.discountId) &&
        Objects.equals(this.discountPercent, salesOrderDiscountDto.discountPercent) &&
        Objects.equals(this.discountSequenceId, salesOrderDiscountDto.discountSequenceId) &&
        Objects.equals(this.discountableAmount, salesOrderDiscountDto.discountableAmount) &&
        Objects.equals(this.discountableQuantity, salesOrderDiscountDto.discountableQuantity) &&
        Objects.equals(this.freeItem, salesOrderDiscountDto.freeItem) &&
        Objects.equals(this.freeItemQuantity, salesOrderDiscountDto.freeItemQuantity) &&
        Objects.equals(this.isManual, salesOrderDiscountDto.isManual) &&
        Objects.equals(this.manualOrderIndex, salesOrderDiscountDto.manualOrderIndex) &&
        Objects.equals(this.skipDiscount, salesOrderDiscountDto.skipDiscount) &&
        Objects.equals(this.type, salesOrderDiscountDto.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(discountAmount, discountId, discountPercent, discountSequenceId, discountableAmount, discountableQuantity, freeItem, freeItemQuantity, isManual, manualOrderIndex, skipDiscount, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesOrderDiscountDto {\n");
    sb.append("    discountAmount: ").append(toIndentedString(discountAmount)).append("\n");
    sb.append("    discountId: ").append(toIndentedString(discountId)).append("\n");
    sb.append("    discountPercent: ").append(toIndentedString(discountPercent)).append("\n");
    sb.append("    discountSequenceId: ").append(toIndentedString(discountSequenceId)).append("\n");
    sb.append("    discountableAmount: ").append(toIndentedString(discountableAmount)).append("\n");
    sb.append("    discountableQuantity: ").append(toIndentedString(discountableQuantity)).append("\n");
    sb.append("    freeItem: ").append(toIndentedString(freeItem)).append("\n");
    sb.append("    freeItemQuantity: ").append(toIndentedString(freeItemQuantity)).append("\n");
    sb.append("    isManual: ").append(toIndentedString(isManual)).append("\n");
    sb.append("    manualOrderIndex: ").append(toIndentedString(manualOrderIndex)).append("\n");
    sb.append("    skipDiscount: ").append(toIndentedString(skipDiscount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("discountAmount");
    openapiFields.add("discountId");
    openapiFields.add("discountPercent");
    openapiFields.add("discountSequenceId");
    openapiFields.add("discountableAmount");
    openapiFields.add("discountableQuantity");
    openapiFields.add("freeItem");
    openapiFields.add("freeItemQuantity");
    openapiFields.add("isManual");
    openapiFields.add("manualOrderIndex");
    openapiFields.add("skipDiscount");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesOrderDiscountDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesOrderDiscountDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesOrderDiscountDto is not found in the empty JSON string", SalesOrderDiscountDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesOrderDiscountDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesOrderDiscountDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("discountId") != null && !jsonObj.get("discountId").isJsonNull()) && !jsonObj.get("discountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discountId").toString()));
      }
      if ((jsonObj.get("discountSequenceId") != null && !jsonObj.get("discountSequenceId").isJsonNull()) && !jsonObj.get("discountSequenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discountSequenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discountSequenceId").toString()));
      }
      // validate the optional field `freeItem`
      if (jsonObj.get("freeItem") != null && !jsonObj.get("freeItem").isJsonNull()) {
        CdDescriptionPairDto.validateJsonElement(jsonObj.get("freeItem"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesOrderDiscountDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesOrderDiscountDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesOrderDiscountDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesOrderDiscountDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesOrderDiscountDto>() {
           @Override
           public void write(JsonWriter out, SalesOrderDiscountDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesOrderDiscountDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesOrderDiscountDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesOrderDiscountDto
   * @throws IOException if the JSON string is invalid with respect to SalesOrderDiscountDto
   */
  public static SalesOrderDiscountDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesOrderDiscountDto.class);
  }

  /**
   * Convert an instance of SalesOrderDiscountDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

