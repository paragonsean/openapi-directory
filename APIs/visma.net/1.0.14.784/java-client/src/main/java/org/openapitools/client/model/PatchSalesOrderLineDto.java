/*
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The sales order line which is set to patch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:31.300103-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PatchSalesOrderLineDto {
  public static final String SERIALIZED_NAME_BRANCH_ID = "branchId";
  @SerializedName(SERIALIZED_NAME_BRANCH_ID)
  private String branchId;

  public static final String SERIALIZED_NAME_COMMISSIONABLE = "commissionable";
  @SerializedName(SERIALIZED_NAME_COMMISSIONABLE)
  private Boolean commissionable;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISCOUNT_AMOUNT = "discountAmount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_AMOUNT)
  private Double discountAmount;

  public static final String SERIALIZED_NAME_DISCOUNT_CODE = "discountCode";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_CODE)
  private String discountCode;

  public static final String SERIALIZED_NAME_DISCOUNT_PERCENT = "discountPercent";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_PERCENT)
  private Double discountPercent;

  public static final String SERIALIZED_NAME_EXTERNAL_LINK = "externalLink";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_LINK)
  private String externalLink;

  public static final String SERIALIZED_NAME_HAS_MANUAL_DISCOUNT = "hasManualDiscount";
  @SerializedName(SERIALIZED_NAME_HAS_MANUAL_DISCOUNT)
  private Boolean hasManualDiscount;

  public static final String SERIALIZED_NAME_HAS_MANUAL_PRICE = "hasManualPrice";
  @SerializedName(SERIALIZED_NAME_HAS_MANUAL_PRICE)
  private Boolean hasManualPrice;

  public static final String SERIALIZED_NAME_LINE_ID = "lineId";
  @SerializedName(SERIALIZED_NAME_LINE_ID)
  private Integer lineId;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private String operation;

  public static final String SERIALIZED_NAME_OVERSHIP_THRESHOLD = "overshipThreshold";
  @SerializedName(SERIALIZED_NAME_OVERSHIP_THRESHOLD)
  private Double overshipThreshold;

  public static final String SERIALIZED_NAME_PROJECT_TASK_ID = "projectTaskId";
  @SerializedName(SERIALIZED_NAME_PROJECT_TASK_ID)
  private String projectTaskId;

  public static final String SERIALIZED_NAME_PURCHASE_ORDER_SOURCE = "purchaseOrderSource";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ORDER_SOURCE)
  private String purchaseOrderSource;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Double quantity;

  public static final String SERIALIZED_NAME_REASON_CODE = "reasonCode";
  @SerializedName(SERIALIZED_NAME_REASON_CODE)
  private String reasonCode;

  public static final String SERIALIZED_NAME_REQUEST_DATE = "requestDate";
  @SerializedName(SERIALIZED_NAME_REQUEST_DATE)
  private OffsetDateTime requestDate;

  public static final String SERIALIZED_NAME_SALES_ACCOUNT_ID = "salesAccountId";
  @SerializedName(SERIALIZED_NAME_SALES_ACCOUNT_ID)
  private String salesAccountId;

  public static final String SERIALIZED_NAME_SALES_PERSON_ID = "salesPersonId";
  @SerializedName(SERIALIZED_NAME_SALES_PERSON_ID)
  private String salesPersonId;

  public static final String SERIALIZED_NAME_SHIP_DATE = "shipDate";
  @SerializedName(SERIALIZED_NAME_SHIP_DATE)
  private OffsetDateTime shipDate;

  public static final String SERIALIZED_NAME_SHIPPING_RULE = "shippingRule";
  @SerializedName(SERIALIZED_NAME_SHIPPING_RULE)
  private String shippingRule;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private Integer sortOrder;

  public static final String SERIALIZED_NAME_SUBACCOUNT = "subaccount";
  @SerializedName(SERIALIZED_NAME_SUBACCOUNT)
  private Map<String, String> subaccount;

  public static final String SERIALIZED_NAME_SUPPLIER_ID = "supplierId";
  @SerializedName(SERIALIZED_NAME_SUPPLIER_ID)
  private String supplierId;

  public static final String SERIALIZED_NAME_SUPPLIER_PRICE = "supplierPrice";
  @SerializedName(SERIALIZED_NAME_SUPPLIER_PRICE)
  private Double supplierPrice;

  public static final String SERIALIZED_NAME_TAX_CATEGORY_ID = "taxCategoryId";
  @SerializedName(SERIALIZED_NAME_TAX_CATEGORY_ID)
  private String taxCategoryId;

  public static final String SERIALIZED_NAME_UNDERSHIP_THRESHOLD = "undershipThreshold";
  @SerializedName(SERIALIZED_NAME_UNDERSHIP_THRESHOLD)
  private Double undershipThreshold;

  public static final String SERIALIZED_NAME_UNIT_COST = "unitCost";
  @SerializedName(SERIALIZED_NAME_UNIT_COST)
  private Double unitCost;

  public static final String SERIALIZED_NAME_UNIT_OF_MEASURE = "unitOfMeasure";
  @SerializedName(SERIALIZED_NAME_UNIT_OF_MEASURE)
  private String unitOfMeasure;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private Double unitPrice;

  public static final String SERIALIZED_NAME_WAREHOUSE_ID = "warehouseId";
  @SerializedName(SERIALIZED_NAME_WAREHOUSE_ID)
  private String warehouseId;

  public static final String SERIALIZED_NAME_WAREHOUSE_LOCATION_ID = "warehouseLocationId";
  @SerializedName(SERIALIZED_NAME_WAREHOUSE_LOCATION_ID)
  private String warehouseLocationId;

  public PatchSalesOrderLineDto() {
  }

  public PatchSalesOrderLineDto branchId(String branchId) {
    this.branchId = branchId;
    return this;
  }

  /**
   * Sets the branch with which this line is associated.  If &#x60;BranchId&#x60; is provided as (null), the value will be set from from order &#x60;BranchId&#x60;
   * @return branchId
   */
  @javax.annotation.Nullable
  public String getBranchId() {
    return branchId;
  }

  public void setBranchId(String branchId) {
    this.branchId = branchId;
  }


  public PatchSalesOrderLineDto commissionable(Boolean commissionable) {
    this.commissionable = commissionable;
    return this;
  }

  /**
   * Indicates if line is comissionable.
   * @return commissionable
   */
  @javax.annotation.Nullable
  public Boolean getCommissionable() {
    return commissionable;
  }

  public void setCommissionable(Boolean commissionable) {
    this.commissionable = commissionable;
  }


  public PatchSalesOrderLineDto description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Sets the description of the order line item. This will override the default description from the inventory item  &lt;br&gt;Note that text fields should not contain any personally identifiable or otherwise sensitive data
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PatchSalesOrderLineDto discountAmount(Double discountAmount) {
    this.discountAmount = discountAmount;
    return this;
  }

  /**
   * Sets the manual currency discount amount for the line.  &lt;remarks&gt;  Note that the behavior of the &#39;discountAmount&#39; field is affected by the &#39;hasManualDiscount&#39; option.  If &#39;hasManualDiscount&#39; is provided and set to \&quot;false\&quot;, and &#39;discountAmount&#39; is provided, the system will set the discountAmount according to the predefined rules.  &lt;/remarks&gt;
   * @return discountAmount
   */
  @javax.annotation.Nullable
  public Double getDiscountAmount() {
    return discountAmount;
  }

  public void setDiscountAmount(Double discountAmount) {
    this.discountAmount = discountAmount;
  }


  public PatchSalesOrderLineDto discountCode(String discountCode) {
    this.discountCode = discountCode;
    return this;
  }

  /**
   * Sets the discount for the line if applicable. This must be one of the selectable discount codes.  &lt;remarks&gt;  Note that the behavior of the &#39;discountCode&#39; field is affected by the &#39;hasManualDiscount&#39; option.  If &#39;hasManualDiscount&#39; is provided and set to \&quot;false\&quot;, and &#39;discountCode&#39; is provided, the system will set the discountCode according to the predefined rules.  &lt;/remarks&gt;
   * @return discountCode
   */
  @javax.annotation.Nullable
  public String getDiscountCode() {
    return discountCode;
  }

  public void setDiscountCode(String discountCode) {
    this.discountCode = discountCode;
  }


  public PatchSalesOrderLineDto discountPercent(Double discountPercent) {
    this.discountPercent = discountPercent;
    return this;
  }

  /**
   * Sets the manual percentage discount for the line.  &lt;remarks&gt;  Note that the behavior of the &#39;discountPercent&#39; field is affected by the &#39;hasManualDiscount&#39; option.  If &#39;hasManualDiscount&#39; is provided and set to \&quot;false\&quot;, and &#39;discountPercent&#39; is provided, the system will set the discountPercent according to the predefined rules.  &lt;/remarks&gt;
   * minimum: -100
   * maximum: 100
   * @return discountPercent
   */
  @javax.annotation.Nullable
  public Double getDiscountPercent() {
    return discountPercent;
  }

  public void setDiscountPercent(Double discountPercent) {
    this.discountPercent = discountPercent;
  }


  public PatchSalesOrderLineDto externalLink(String externalLink) {
    this.externalLink = externalLink;
    return this;
  }

  /**
   * Sets the external link for the line
   * @return externalLink
   */
  @javax.annotation.Nullable
  public String getExternalLink() {
    return externalLink;
  }

  public void setExternalLink(String externalLink) {
    this.externalLink = externalLink;
  }


  public PatchSalesOrderLineDto hasManualDiscount(Boolean hasManualDiscount) {
    this.hasManualDiscount = hasManualDiscount;
    return this;
  }

  /**
   * Indicates that line level discount is applied manually.  &lt;remarks&gt;  Note that the behavior of the fields &#39;discountCode&#39;, &#39;discountPercent&#39; and &#39;discountAmount&#39; is affected by this option.  If &#39;hasManualDiscount&#39; is provided and set to \&quot;false\&quot;, and discount field(s) is provided, the system will set the line level discounts according to the predefined rules.  &lt;/remarks&gt;
   * @return hasManualDiscount
   */
  @javax.annotation.Nullable
  public Boolean getHasManualDiscount() {
    return hasManualDiscount;
  }

  public void setHasManualDiscount(Boolean hasManualDiscount) {
    this.hasManualDiscount = hasManualDiscount;
  }


  public PatchSalesOrderLineDto hasManualPrice(Boolean hasManualPrice) {
    this.hasManualPrice = hasManualPrice;
    return this;
  }

  /**
   * Indicates that the &#x60;unitPrice&#x60; in this line has been specified manually.  If set to \&quot;false\&quot;, the system updates the unit price in the line according to predefined rules.  Note that the behavior of the field &#x60;unitPrice&#x60; is affected by this option.  If &#x60;hasManualPrice&#x60; is provided and set to \&quot;false\&quot;, and &#x60;unitPrice&#x60; is provided, the system will set the &#x60;unitPrice&#x60; according to the predefined rules.
   * @return hasManualPrice
   */
  @javax.annotation.Nullable
  public Boolean getHasManualPrice() {
    return hasManualPrice;
  }

  public void setHasManualPrice(Boolean hasManualPrice) {
    this.hasManualPrice = hasManualPrice;
  }


  public PatchSalesOrderLineDto lineId(Integer lineId) {
    this.lineId = lineId;
    return this;
  }

  /**
   * The line id of the line.
   * @return lineId
   */
  @javax.annotation.Nonnull
  public Integer getLineId() {
    return lineId;
  }

  public void setLineId(Integer lineId) {
    this.lineId = lineId;
  }


  public PatchSalesOrderLineDto note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Any note to apply to the order header.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public PatchSalesOrderLineDto operation(String operation) {
    this.operation = operation;
    return this;
  }

  /**
   * The type of operation the line represents to the order. Acceptable values are &#39;Issue&#39; or &#39;Receipt&#39;. This must be a valid operation for sales order type.
   * @return operation
   */
  @javax.annotation.Nullable
  public String getOperation() {
    return operation;
  }

  public void setOperation(String operation) {
    this.operation = operation;
  }


  public PatchSalesOrderLineDto overshipThreshold(Double overshipThreshold) {
    this.overshipThreshold = overshipThreshold;
    return this;
  }

  /**
   * Sets the overship threshold in percent. If not set, information from the inventory item is used
   * minimum: 100
   * maximum: 999
   * @return overshipThreshold
   */
  @javax.annotation.Nullable
  public Double getOvershipThreshold() {
    return overshipThreshold;
  }

  public void setOvershipThreshold(Double overshipThreshold) {
    this.overshipThreshold = overshipThreshold;
  }


  public PatchSalesOrderLineDto projectTaskId(String projectTaskId) {
    this.projectTaskId = projectTaskId;
    return this;
  }

  /**
   * The project task with which this sales order line is associated
   * @return projectTaskId
   */
  @javax.annotation.Nullable
  public String getProjectTaskId() {
    return projectTaskId;
  }

  public void setProjectTaskId(String projectTaskId) {
    this.projectTaskId = projectTaskId;
  }


  public PatchSalesOrderLineDto purchaseOrderSource(String purchaseOrderSource) {
    this.purchaseOrderSource = purchaseOrderSource;
    return this;
  }

  /**
   * Sets the purchase source of the line.  Accepted values are &#x60;dropShip&#x60; or &#x60;purchaseToOrder&#x60;, when null provided, value will be set from default value from the inventory item.  If the value was provided as &#39;&#39; (empty string), the value will set to null.
   * @return purchaseOrderSource
   */
  @javax.annotation.Nullable
  public String getPurchaseOrderSource() {
    return purchaseOrderSource;
  }

  public void setPurchaseOrderSource(String purchaseOrderSource) {
    this.purchaseOrderSource = purchaseOrderSource;
  }


  public PatchSalesOrderLineDto quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Sets the quantity of items on the order line
   * @return quantity
   */
  @javax.annotation.Nullable
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }


  public PatchSalesOrderLineDto reasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
    return this;
  }

  /**
   * Patch the reason code for the line. This must be one of the selectable reason codes
   * @return reasonCode
   */
  @javax.annotation.Nullable
  public String getReasonCode() {
    return reasonCode;
  }

  public void setReasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
  }


  public PatchSalesOrderLineDto requestDate(OffsetDateTime requestDate) {
    this.requestDate = requestDate;
    return this;
  }

  /**
   * Sets the date the order line is requested (Requested On)  Unless a specific time zone offset is specified with the date (e.g. &#39;2012-12-24T13:30:23+02:00&#39;), the passed date is considered to be in the UTC time zone.
   * @return requestDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRequestDate() {
    return requestDate;
  }

  public void setRequestDate(OffsetDateTime requestDate) {
    this.requestDate = requestDate;
  }


  public PatchSalesOrderLineDto salesAccountId(String salesAccountId) {
    this.salesAccountId = salesAccountId;
    return this;
  }

  /**
   * Overrides the Sales Account Id of the line. The value must be one of the selectable Accounts.  If not set, a value based on the rules is used
   * @return salesAccountId
   */
  @javax.annotation.Nullable
  public String getSalesAccountId() {
    return salesAccountId;
  }

  public void setSalesAccountId(String salesAccountId) {
    this.salesAccountId = salesAccountId;
  }


  public PatchSalesOrderLineDto salesPersonId(String salesPersonId) {
    this.salesPersonId = salesPersonId;
    return this;
  }

  /**
   * Sets the sales person for the line.  If &#x60;SalesPersonId&#x60; is provided as (null), the value will be set from from order &#x60;SalesPersonId&#x60;
   * @return salesPersonId
   */
  @javax.annotation.Nullable
  public String getSalesPersonId() {
    return salesPersonId;
  }

  public void setSalesPersonId(String salesPersonId) {
    this.salesPersonId = salesPersonId;
  }


  public PatchSalesOrderLineDto shipDate(OffsetDateTime shipDate) {
    this.shipDate = shipDate;
    return this;
  }

  /**
   * Sets the day the order line should be shipped, so that the customer gets it on the requested date (Ship On).  Unless a specific time zone offset is specified with the date (e.g. &#39;2012-12-24T13:30:23+02:00&#39;), the passed date is considered to be in the UTC time zone.
   * @return shipDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getShipDate() {
    return shipDate;
  }

  public void setShipDate(OffsetDateTime shipDate) {
    this.shipDate = shipDate;
  }


  public PatchSalesOrderLineDto shippingRule(String shippingRule) {
    this.shippingRule = shippingRule;
    return this;
  }

  /**
   * The way the line item should be shipped.  &lt;br&gt;One of the following options can be set:&lt;br&gt;&lt;list type&#x3D;\&quot;bullet\&quot;&gt;&lt;item&gt;&lt;term&gt;CancelRemainder: &lt;/term&gt;&lt;description&gt;The ordered quantity should be delivered in one shipment&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;BackOrderAllowed: &lt;/term&gt;&lt;description&gt;The ordered quantity can be delivered in multiple shipments.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;ShipComplete: &lt;/term&gt;&lt;description&gt;The ordered quantity should be delivered in one shipment.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;
   * @return shippingRule
   */
  @javax.annotation.Nullable
  public String getShippingRule() {
    return shippingRule;
  }

  public void setShippingRule(String shippingRule) {
    this.shippingRule = shippingRule;
  }


  public PatchSalesOrderLineDto sortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * Get sortOrder
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public Integer getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
  }


  public PatchSalesOrderLineDto subaccount(Map<String, String> subaccount) {
    this.subaccount = subaccount;
    return this;
  }

  public PatchSalesOrderLineDto putSubaccountItem(String key, String subaccountItem) {
    if (this.subaccount == null) {
      this.subaccount = new HashMap<>();
    }
    this.subaccount.put(key, subaccountItem);
    return this;
  }

  /**
   * Overrides the Subaccount setup for the line.  Each entry corresponds to a subaccount id/value pair
   * @return subaccount
   */
  @javax.annotation.Nullable
  public Map<String, String> getSubaccount() {
    return subaccount;
  }

  public void setSubaccount(Map<String, String> subaccount) {
    this.subaccount = subaccount;
  }


  public PatchSalesOrderLineDto supplierId(String supplierId) {
    this.supplierId = supplierId;
    return this;
  }

  /**
   * Sets the Purchase Order Vendor for the line, can be set if the purchase order source is &#x60;purchaseToOrder&#x60; or &#x60;dropShip&#x60;.
   * @return supplierId
   */
  @javax.annotation.Nullable
  public String getSupplierId() {
    return supplierId;
  }

  public void setSupplierId(String supplierId) {
    this.supplierId = supplierId;
  }


  public PatchSalesOrderLineDto supplierPrice(Double supplierPrice) {
    this.supplierPrice = supplierPrice;
    return this;
  }

  /**
   * Sets the supplier price for the line item.
   * @return supplierPrice
   */
  @javax.annotation.Nullable
  public Double getSupplierPrice() {
    return supplierPrice;
  }

  public void setSupplierPrice(Double supplierPrice) {
    this.supplierPrice = supplierPrice;
  }


  public PatchSalesOrderLineDto taxCategoryId(String taxCategoryId) {
    this.taxCategoryId = taxCategoryId;
    return this;
  }

  /**
   * Overrides the default tax category id. The value must be one of the selectable Tax Categories
   * @return taxCategoryId
   */
  @javax.annotation.Nullable
  public String getTaxCategoryId() {
    return taxCategoryId;
  }

  public void setTaxCategoryId(String taxCategoryId) {
    this.taxCategoryId = taxCategoryId;
  }


  public PatchSalesOrderLineDto undershipThreshold(Double undershipThreshold) {
    this.undershipThreshold = undershipThreshold;
    return this;
  }

  /**
   * Sets the undership threshold in percent. If not set, information from the inventory item is used
   * minimum: 0
   * maximum: 100
   * @return undershipThreshold
   */
  @javax.annotation.Nullable
  public Double getUndershipThreshold() {
    return undershipThreshold;
  }

  public void setUndershipThreshold(Double undershipThreshold) {
    this.undershipThreshold = undershipThreshold;
  }


  public PatchSalesOrderLineDto unitCost(Double unitCost) {
    this.unitCost = unitCost;
    return this;
  }

  /**
   * Sets the unit cost of the product on the line.
   * @return unitCost
   */
  @javax.annotation.Nullable
  public Double getUnitCost() {
    return unitCost;
  }

  public void setUnitCost(Double unitCost) {
    this.unitCost = unitCost;
  }


  public PatchSalesOrderLineDto unitOfMeasure(String unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
    return this;
  }

  /**
   * Sets the Unit of measure for the line item. This will override the default UOM for the inventory item
   * @return unitOfMeasure
   */
  @javax.annotation.Nullable
  public String getUnitOfMeasure() {
    return unitOfMeasure;
  }

  public void setUnitOfMeasure(String unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
  }


  public PatchSalesOrderLineDto unitPrice(Double unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Sets the unit price for the product on the line.  If no price is set(null or omitted) the price will be set according to predefined rules based on the inventoryId and the customer.  Note that the behavior of the &#x60;unitPrice&#x60; field is affected by the &#x60;hasManualPrice&#x60; option.  If &#x60;hasManualPrice&#x60; is provided and set to \&quot;false\&quot;, and &#x60;unitPrice&#x60; is provided, the system will set the &#x60;unitPrice&#x60; according to the predefined rules.
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public Double getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(Double unitPrice) {
    this.unitPrice = unitPrice;
  }


  public PatchSalesOrderLineDto warehouseId(String warehouseId) {
    this.warehouseId = warehouseId;
    return this;
  }

  /**
   * Sets the warehouse the item should be shipped from. This will override the default, or the one set on the order head.
   * @return warehouseId
   */
  @javax.annotation.Nullable
  public String getWarehouseId() {
    return warehouseId;
  }

  public void setWarehouseId(String warehouseId) {
    this.warehouseId = warehouseId;
  }


  public PatchSalesOrderLineDto warehouseLocationId(String warehouseLocationId) {
    this.warehouseLocationId = warehouseLocationId;
    return this;
  }

  /**
   * Sets the warehouse location that will be used for the shipment generated for the order the warehouse location Id for this line.  This must be a valid location for &#x60;warehouseId&#x60; and will override the default if set.
   * @return warehouseLocationId
   */
  @javax.annotation.Nullable
  public String getWarehouseLocationId() {
    return warehouseLocationId;
  }

  public void setWarehouseLocationId(String warehouseLocationId) {
    this.warehouseLocationId = warehouseLocationId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchSalesOrderLineDto patchSalesOrderLineDto = (PatchSalesOrderLineDto) o;
    return Objects.equals(this.branchId, patchSalesOrderLineDto.branchId) &&
        Objects.equals(this.commissionable, patchSalesOrderLineDto.commissionable) &&
        Objects.equals(this.description, patchSalesOrderLineDto.description) &&
        Objects.equals(this.discountAmount, patchSalesOrderLineDto.discountAmount) &&
        Objects.equals(this.discountCode, patchSalesOrderLineDto.discountCode) &&
        Objects.equals(this.discountPercent, patchSalesOrderLineDto.discountPercent) &&
        Objects.equals(this.externalLink, patchSalesOrderLineDto.externalLink) &&
        Objects.equals(this.hasManualDiscount, patchSalesOrderLineDto.hasManualDiscount) &&
        Objects.equals(this.hasManualPrice, patchSalesOrderLineDto.hasManualPrice) &&
        Objects.equals(this.lineId, patchSalesOrderLineDto.lineId) &&
        Objects.equals(this.note, patchSalesOrderLineDto.note) &&
        Objects.equals(this.operation, patchSalesOrderLineDto.operation) &&
        Objects.equals(this.overshipThreshold, patchSalesOrderLineDto.overshipThreshold) &&
        Objects.equals(this.projectTaskId, patchSalesOrderLineDto.projectTaskId) &&
        Objects.equals(this.purchaseOrderSource, patchSalesOrderLineDto.purchaseOrderSource) &&
        Objects.equals(this.quantity, patchSalesOrderLineDto.quantity) &&
        Objects.equals(this.reasonCode, patchSalesOrderLineDto.reasonCode) &&
        Objects.equals(this.requestDate, patchSalesOrderLineDto.requestDate) &&
        Objects.equals(this.salesAccountId, patchSalesOrderLineDto.salesAccountId) &&
        Objects.equals(this.salesPersonId, patchSalesOrderLineDto.salesPersonId) &&
        Objects.equals(this.shipDate, patchSalesOrderLineDto.shipDate) &&
        Objects.equals(this.shippingRule, patchSalesOrderLineDto.shippingRule) &&
        Objects.equals(this.sortOrder, patchSalesOrderLineDto.sortOrder) &&
        Objects.equals(this.subaccount, patchSalesOrderLineDto.subaccount) &&
        Objects.equals(this.supplierId, patchSalesOrderLineDto.supplierId) &&
        Objects.equals(this.supplierPrice, patchSalesOrderLineDto.supplierPrice) &&
        Objects.equals(this.taxCategoryId, patchSalesOrderLineDto.taxCategoryId) &&
        Objects.equals(this.undershipThreshold, patchSalesOrderLineDto.undershipThreshold) &&
        Objects.equals(this.unitCost, patchSalesOrderLineDto.unitCost) &&
        Objects.equals(this.unitOfMeasure, patchSalesOrderLineDto.unitOfMeasure) &&
        Objects.equals(this.unitPrice, patchSalesOrderLineDto.unitPrice) &&
        Objects.equals(this.warehouseId, patchSalesOrderLineDto.warehouseId) &&
        Objects.equals(this.warehouseLocationId, patchSalesOrderLineDto.warehouseLocationId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(branchId, commissionable, description, discountAmount, discountCode, discountPercent, externalLink, hasManualDiscount, hasManualPrice, lineId, note, operation, overshipThreshold, projectTaskId, purchaseOrderSource, quantity, reasonCode, requestDate, salesAccountId, salesPersonId, shipDate, shippingRule, sortOrder, subaccount, supplierId, supplierPrice, taxCategoryId, undershipThreshold, unitCost, unitOfMeasure, unitPrice, warehouseId, warehouseLocationId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchSalesOrderLineDto {\n");
    sb.append("    branchId: ").append(toIndentedString(branchId)).append("\n");
    sb.append("    commissionable: ").append(toIndentedString(commissionable)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    discountAmount: ").append(toIndentedString(discountAmount)).append("\n");
    sb.append("    discountCode: ").append(toIndentedString(discountCode)).append("\n");
    sb.append("    discountPercent: ").append(toIndentedString(discountPercent)).append("\n");
    sb.append("    externalLink: ").append(toIndentedString(externalLink)).append("\n");
    sb.append("    hasManualDiscount: ").append(toIndentedString(hasManualDiscount)).append("\n");
    sb.append("    hasManualPrice: ").append(toIndentedString(hasManualPrice)).append("\n");
    sb.append("    lineId: ").append(toIndentedString(lineId)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    overshipThreshold: ").append(toIndentedString(overshipThreshold)).append("\n");
    sb.append("    projectTaskId: ").append(toIndentedString(projectTaskId)).append("\n");
    sb.append("    purchaseOrderSource: ").append(toIndentedString(purchaseOrderSource)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("    requestDate: ").append(toIndentedString(requestDate)).append("\n");
    sb.append("    salesAccountId: ").append(toIndentedString(salesAccountId)).append("\n");
    sb.append("    salesPersonId: ").append(toIndentedString(salesPersonId)).append("\n");
    sb.append("    shipDate: ").append(toIndentedString(shipDate)).append("\n");
    sb.append("    shippingRule: ").append(toIndentedString(shippingRule)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    subaccount: ").append(toIndentedString(subaccount)).append("\n");
    sb.append("    supplierId: ").append(toIndentedString(supplierId)).append("\n");
    sb.append("    supplierPrice: ").append(toIndentedString(supplierPrice)).append("\n");
    sb.append("    taxCategoryId: ").append(toIndentedString(taxCategoryId)).append("\n");
    sb.append("    undershipThreshold: ").append(toIndentedString(undershipThreshold)).append("\n");
    sb.append("    unitCost: ").append(toIndentedString(unitCost)).append("\n");
    sb.append("    unitOfMeasure: ").append(toIndentedString(unitOfMeasure)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    warehouseId: ").append(toIndentedString(warehouseId)).append("\n");
    sb.append("    warehouseLocationId: ").append(toIndentedString(warehouseLocationId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("branchId");
    openapiFields.add("commissionable");
    openapiFields.add("description");
    openapiFields.add("discountAmount");
    openapiFields.add("discountCode");
    openapiFields.add("discountPercent");
    openapiFields.add("externalLink");
    openapiFields.add("hasManualDiscount");
    openapiFields.add("hasManualPrice");
    openapiFields.add("lineId");
    openapiFields.add("note");
    openapiFields.add("operation");
    openapiFields.add("overshipThreshold");
    openapiFields.add("projectTaskId");
    openapiFields.add("purchaseOrderSource");
    openapiFields.add("quantity");
    openapiFields.add("reasonCode");
    openapiFields.add("requestDate");
    openapiFields.add("salesAccountId");
    openapiFields.add("salesPersonId");
    openapiFields.add("shipDate");
    openapiFields.add("shippingRule");
    openapiFields.add("sortOrder");
    openapiFields.add("subaccount");
    openapiFields.add("supplierId");
    openapiFields.add("supplierPrice");
    openapiFields.add("taxCategoryId");
    openapiFields.add("undershipThreshold");
    openapiFields.add("unitCost");
    openapiFields.add("unitOfMeasure");
    openapiFields.add("unitPrice");
    openapiFields.add("warehouseId");
    openapiFields.add("warehouseLocationId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lineId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatchSalesOrderLineDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatchSalesOrderLineDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchSalesOrderLineDto is not found in the empty JSON string", PatchSalesOrderLineDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatchSalesOrderLineDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchSalesOrderLineDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PatchSalesOrderLineDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("branchId") != null && !jsonObj.get("branchId").isJsonNull()) && !jsonObj.get("branchId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branchId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branchId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("discountCode") != null && !jsonObj.get("discountCode").isJsonNull()) && !jsonObj.get("discountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discountCode").toString()));
      }
      if ((jsonObj.get("externalLink") != null && !jsonObj.get("externalLink").isJsonNull()) && !jsonObj.get("externalLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalLink").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonNull()) && !jsonObj.get("operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation").toString()));
      }
      if ((jsonObj.get("projectTaskId") != null && !jsonObj.get("projectTaskId").isJsonNull()) && !jsonObj.get("projectTaskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectTaskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectTaskId").toString()));
      }
      if ((jsonObj.get("purchaseOrderSource") != null && !jsonObj.get("purchaseOrderSource").isJsonNull()) && !jsonObj.get("purchaseOrderSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseOrderSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseOrderSource").toString()));
      }
      if ((jsonObj.get("reasonCode") != null && !jsonObj.get("reasonCode").isJsonNull()) && !jsonObj.get("reasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasonCode").toString()));
      }
      if ((jsonObj.get("salesAccountId") != null && !jsonObj.get("salesAccountId").isJsonNull()) && !jsonObj.get("salesAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesAccountId").toString()));
      }
      if ((jsonObj.get("salesPersonId") != null && !jsonObj.get("salesPersonId").isJsonNull()) && !jsonObj.get("salesPersonId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesPersonId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesPersonId").toString()));
      }
      if ((jsonObj.get("shippingRule") != null && !jsonObj.get("shippingRule").isJsonNull()) && !jsonObj.get("shippingRule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingRule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingRule").toString()));
      }
      if ((jsonObj.get("supplierId") != null && !jsonObj.get("supplierId").isJsonNull()) && !jsonObj.get("supplierId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supplierId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supplierId").toString()));
      }
      if ((jsonObj.get("taxCategoryId") != null && !jsonObj.get("taxCategoryId").isJsonNull()) && !jsonObj.get("taxCategoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxCategoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxCategoryId").toString()));
      }
      if ((jsonObj.get("unitOfMeasure") != null && !jsonObj.get("unitOfMeasure").isJsonNull()) && !jsonObj.get("unitOfMeasure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitOfMeasure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitOfMeasure").toString()));
      }
      if ((jsonObj.get("warehouseId") != null && !jsonObj.get("warehouseId").isJsonNull()) && !jsonObj.get("warehouseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warehouseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warehouseId").toString()));
      }
      if ((jsonObj.get("warehouseLocationId") != null && !jsonObj.get("warehouseLocationId").isJsonNull()) && !jsonObj.get("warehouseLocationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warehouseLocationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warehouseLocationId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchSalesOrderLineDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchSalesOrderLineDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchSalesOrderLineDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchSalesOrderLineDto.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchSalesOrderLineDto>() {
           @Override
           public void write(JsonWriter out, PatchSalesOrderLineDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchSalesOrderLineDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatchSalesOrderLineDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatchSalesOrderLineDto
   * @throws IOException if the JSON string is invalid with respect to PatchSalesOrderLineDto
   */
  public static PatchSalesOrderLineDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchSalesOrderLineDto.class);
  }

  /**
   * Convert an instance of PatchSalesOrderLineDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

