/*
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.NewSalesOrderAddressDto;
import org.openapitools.client.model.NewSalesOrderContactDto;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NewSalesOrderShippingDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:31.300103-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NewSalesOrderShippingDto {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private NewSalesOrderAddressDto address;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private NewSalesOrderContactDto contact;

  public static final String SERIALIZED_NAME_FOB_POINT_ID = "fobPointId";
  @SerializedName(SERIALIZED_NAME_FOB_POINT_ID)
  private String fobPointId;

  public static final String SERIALIZED_NAME_INSURANCE = "insurance";
  @SerializedName(SERIALIZED_NAME_INSURANCE)
  private Boolean insurance;

  public static final String SERIALIZED_NAME_INTRASTAT_TRANSACTION_TYPE_ID = "intrastatTransactionTypeId";
  @SerializedName(SERIALIZED_NAME_INTRASTAT_TRANSACTION_TYPE_ID)
  private Integer intrastatTransactionTypeId;

  public static final String SERIALIZED_NAME_PREFERRED_WAREHOUSE_ID = "preferredWarehouseId";
  @SerializedName(SERIALIZED_NAME_PREFERRED_WAREHOUSE_ID)
  private String preferredWarehouseId;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_RESIDENTIAL_DELIVERY = "residentialDelivery";
  @SerializedName(SERIALIZED_NAME_RESIDENTIAL_DELIVERY)
  private Boolean residentialDelivery;

  public static final String SERIALIZED_NAME_RULE = "rule";
  @SerializedName(SERIALIZED_NAME_RULE)
  private String rule;

  public static final String SERIALIZED_NAME_SATURDAY_DELIVERY = "saturdayDelivery";
  @SerializedName(SERIALIZED_NAME_SATURDAY_DELIVERY)
  private Boolean saturdayDelivery;

  public static final String SERIALIZED_NAME_SCHEDULED_DATE = "scheduledDate";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_DATE)
  private OffsetDateTime scheduledDate;

  public static final String SERIALIZED_NAME_SHIP_SEPARATELY = "shipSeparately";
  @SerializedName(SERIALIZED_NAME_SHIP_SEPARATELY)
  private Boolean shipSeparately;

  public static final String SERIALIZED_NAME_SHIP_VIA_ID = "shipViaId";
  @SerializedName(SERIALIZED_NAME_SHIP_VIA_ID)
  private String shipViaId;

  public static final String SERIALIZED_NAME_TERMS_ID = "termsId";
  @SerializedName(SERIALIZED_NAME_TERMS_ID)
  private String termsId;

  public static final String SERIALIZED_NAME_ZONE_ID = "zoneId";
  @SerializedName(SERIALIZED_NAME_ZONE_ID)
  private String zoneId;

  public NewSalesOrderShippingDto() {
  }

  public NewSalesOrderShippingDto address(NewSalesOrderAddressDto address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public NewSalesOrderAddressDto getAddress() {
    return address;
  }

  public void setAddress(NewSalesOrderAddressDto address) {
    this.address = address;
  }


  public NewSalesOrderShippingDto contact(NewSalesOrderContactDto contact) {
    this.contact = contact;
    return this;
  }

  /**
   * Get contact
   * @return contact
   */
  @javax.annotation.Nullable
  public NewSalesOrderContactDto getContact() {
    return contact;
  }

  public void setContact(NewSalesOrderContactDto contact) {
    this.contact = contact;
  }


  public NewSalesOrderShippingDto fobPointId(String fobPointId) {
    this.fobPointId = fobPointId;
    return this;
  }

  /**
   * The identifier of the point (such as a city or town) where the title of goods passes from the company to the customer.
   * @return fobPointId
   */
  @javax.annotation.Nullable
  public String getFobPointId() {
    return fobPointId;
  }

  public void setFobPointId(String fobPointId) {
    this.fobPointId = fobPointId;
  }


  public NewSalesOrderShippingDto insurance(Boolean insurance) {
    this.insurance = insurance;
    return this;
  }

  /**
   * Sets whether insurance applies to this shipping
   * @return insurance
   */
  @javax.annotation.Nullable
  public Boolean getInsurance() {
    return insurance;
  }

  public void setInsurance(Boolean insurance) {
    this.insurance = insurance;
  }


  public NewSalesOrderShippingDto intrastatTransactionTypeId(Integer intrastatTransactionTypeId) {
    this.intrastatTransactionTypeId = intrastatTransactionTypeId;
    return this;
  }

  /**
   * Sets the intrastat transaction type id for the sales order, if not supplied the default value from the ordertype will be used. Must be a valid intrastat transaction type id.
   * @return intrastatTransactionTypeId
   */
  @javax.annotation.Nullable
  public Integer getIntrastatTransactionTypeId() {
    return intrastatTransactionTypeId;
  }

  public void setIntrastatTransactionTypeId(Integer intrastatTransactionTypeId) {
    this.intrastatTransactionTypeId = intrastatTransactionTypeId;
  }


  public NewSalesOrderShippingDto preferredWarehouseId(String preferredWarehouseId) {
    this.preferredWarehouseId = preferredWarehouseId;
    return this;
  }

  /**
   * Sets the default site for the customer supplied to use on the order. Must be a valid site id
   * @return preferredWarehouseId
   */
  @javax.annotation.Nullable
  public String getPreferredWarehouseId() {
    return preferredWarehouseId;
  }

  public void setPreferredWarehouseId(String preferredWarehouseId) {
    this.preferredWarehouseId = preferredWarehouseId;
  }


  public NewSalesOrderShippingDto priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Sets priority of the order
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public NewSalesOrderShippingDto residentialDelivery(Boolean residentialDelivery) {
    this.residentialDelivery = residentialDelivery;
    return this;
  }

  /**
   * Sets whether this is residential delivery
   * @return residentialDelivery
   */
  @javax.annotation.Nullable
  public Boolean getResidentialDelivery() {
    return residentialDelivery;
  }

  public void setResidentialDelivery(Boolean residentialDelivery) {
    this.residentialDelivery = residentialDelivery;
  }


  public NewSalesOrderShippingDto rule(String rule) {
    this.rule = rule;
    return this;
  }

  /**
   * Sets the shipping rule for the order
   * @return rule
   */
  @javax.annotation.Nullable
  public String getRule() {
    return rule;
  }

  public void setRule(String rule) {
    this.rule = rule;
  }


  public NewSalesOrderShippingDto saturdayDelivery(Boolean saturdayDelivery) {
    this.saturdayDelivery = saturdayDelivery;
    return this;
  }

  /**
   * Sets whether this is a saturday delivery
   * @return saturdayDelivery
   */
  @javax.annotation.Nullable
  public Boolean getSaturdayDelivery() {
    return saturdayDelivery;
  }

  public void setSaturdayDelivery(Boolean saturdayDelivery) {
    this.saturdayDelivery = saturdayDelivery;
  }


  public NewSalesOrderShippingDto scheduledDate(OffsetDateTime scheduledDate) {
    this.scheduledDate = scheduledDate;
    return this;
  }

  /**
   * Sets the date the shipment is scheduled for  Unless a specific time zone offset is specified with the date (e.g. &#39;2012-12-24T13:30:23+02:00&#39;), the passed date is considered to be in the UTC time zone.
   * @return scheduledDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduledDate() {
    return scheduledDate;
  }

  public void setScheduledDate(OffsetDateTime scheduledDate) {
    this.scheduledDate = scheduledDate;
  }


  public NewSalesOrderShippingDto shipSeparately(Boolean shipSeparately) {
    this.shipSeparately = shipSeparately;
    return this;
  }

  /**
   * Sets whether the order should be shipped separately or included in a batch segment
   * @return shipSeparately
   */
  @javax.annotation.Nullable
  public Boolean getShipSeparately() {
    return shipSeparately;
  }

  public void setShipSeparately(Boolean shipSeparately) {
    this.shipSeparately = shipSeparately;
  }


  public NewSalesOrderShippingDto shipViaId(String shipViaId) {
    this.shipViaId = shipViaId;
    return this;
  }

  /**
   * Sets the unique id that represents the carrier and its service to be used for shipping the ordered goods.
   * @return shipViaId
   */
  @javax.annotation.Nullable
  public String getShipViaId() {
    return shipViaId;
  }

  public void setShipViaId(String shipViaId) {
    this.shipViaId = shipViaId;
  }


  public NewSalesOrderShippingDto termsId(String termsId) {
    this.termsId = termsId;
    return this;
  }

  /**
   * The identifier of the shipping terms used for the order.
   * @return termsId
   */
  @javax.annotation.Nullable
  public String getTermsId() {
    return termsId;
  }

  public void setTermsId(String termsId) {
    this.termsId = termsId;
  }


  public NewSalesOrderShippingDto zoneId(String zoneId) {
    this.zoneId = zoneId;
    return this;
  }

  /**
   * Sets the shipping zone of the order freight
   * @return zoneId
   */
  @javax.annotation.Nullable
  public String getZoneId() {
    return zoneId;
  }

  public void setZoneId(String zoneId) {
    this.zoneId = zoneId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewSalesOrderShippingDto newSalesOrderShippingDto = (NewSalesOrderShippingDto) o;
    return Objects.equals(this.address, newSalesOrderShippingDto.address) &&
        Objects.equals(this.contact, newSalesOrderShippingDto.contact) &&
        Objects.equals(this.fobPointId, newSalesOrderShippingDto.fobPointId) &&
        Objects.equals(this.insurance, newSalesOrderShippingDto.insurance) &&
        Objects.equals(this.intrastatTransactionTypeId, newSalesOrderShippingDto.intrastatTransactionTypeId) &&
        Objects.equals(this.preferredWarehouseId, newSalesOrderShippingDto.preferredWarehouseId) &&
        Objects.equals(this.priority, newSalesOrderShippingDto.priority) &&
        Objects.equals(this.residentialDelivery, newSalesOrderShippingDto.residentialDelivery) &&
        Objects.equals(this.rule, newSalesOrderShippingDto.rule) &&
        Objects.equals(this.saturdayDelivery, newSalesOrderShippingDto.saturdayDelivery) &&
        Objects.equals(this.scheduledDate, newSalesOrderShippingDto.scheduledDate) &&
        Objects.equals(this.shipSeparately, newSalesOrderShippingDto.shipSeparately) &&
        Objects.equals(this.shipViaId, newSalesOrderShippingDto.shipViaId) &&
        Objects.equals(this.termsId, newSalesOrderShippingDto.termsId) &&
        Objects.equals(this.zoneId, newSalesOrderShippingDto.zoneId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, contact, fobPointId, insurance, intrastatTransactionTypeId, preferredWarehouseId, priority, residentialDelivery, rule, saturdayDelivery, scheduledDate, shipSeparately, shipViaId, termsId, zoneId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewSalesOrderShippingDto {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    fobPointId: ").append(toIndentedString(fobPointId)).append("\n");
    sb.append("    insurance: ").append(toIndentedString(insurance)).append("\n");
    sb.append("    intrastatTransactionTypeId: ").append(toIndentedString(intrastatTransactionTypeId)).append("\n");
    sb.append("    preferredWarehouseId: ").append(toIndentedString(preferredWarehouseId)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    residentialDelivery: ").append(toIndentedString(residentialDelivery)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    saturdayDelivery: ").append(toIndentedString(saturdayDelivery)).append("\n");
    sb.append("    scheduledDate: ").append(toIndentedString(scheduledDate)).append("\n");
    sb.append("    shipSeparately: ").append(toIndentedString(shipSeparately)).append("\n");
    sb.append("    shipViaId: ").append(toIndentedString(shipViaId)).append("\n");
    sb.append("    termsId: ").append(toIndentedString(termsId)).append("\n");
    sb.append("    zoneId: ").append(toIndentedString(zoneId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("contact");
    openapiFields.add("fobPointId");
    openapiFields.add("insurance");
    openapiFields.add("intrastatTransactionTypeId");
    openapiFields.add("preferredWarehouseId");
    openapiFields.add("priority");
    openapiFields.add("residentialDelivery");
    openapiFields.add("rule");
    openapiFields.add("saturdayDelivery");
    openapiFields.add("scheduledDate");
    openapiFields.add("shipSeparately");
    openapiFields.add("shipViaId");
    openapiFields.add("termsId");
    openapiFields.add("zoneId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NewSalesOrderShippingDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NewSalesOrderShippingDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewSalesOrderShippingDto is not found in the empty JSON string", NewSalesOrderShippingDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NewSalesOrderShippingDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NewSalesOrderShippingDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        NewSalesOrderAddressDto.validateJsonElement(jsonObj.get("address"));
      }
      // validate the optional field `contact`
      if (jsonObj.get("contact") != null && !jsonObj.get("contact").isJsonNull()) {
        NewSalesOrderContactDto.validateJsonElement(jsonObj.get("contact"));
      }
      if ((jsonObj.get("fobPointId") != null && !jsonObj.get("fobPointId").isJsonNull()) && !jsonObj.get("fobPointId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fobPointId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fobPointId").toString()));
      }
      if ((jsonObj.get("preferredWarehouseId") != null && !jsonObj.get("preferredWarehouseId").isJsonNull()) && !jsonObj.get("preferredWarehouseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredWarehouseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredWarehouseId").toString()));
      }
      if ((jsonObj.get("rule") != null && !jsonObj.get("rule").isJsonNull()) && !jsonObj.get("rule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rule").toString()));
      }
      if ((jsonObj.get("shipViaId") != null && !jsonObj.get("shipViaId").isJsonNull()) && !jsonObj.get("shipViaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipViaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipViaId").toString()));
      }
      if ((jsonObj.get("termsId") != null && !jsonObj.get("termsId").isJsonNull()) && !jsonObj.get("termsId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `termsId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("termsId").toString()));
      }
      if ((jsonObj.get("zoneId") != null && !jsonObj.get("zoneId").isJsonNull()) && !jsonObj.get("zoneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zoneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zoneId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewSalesOrderShippingDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewSalesOrderShippingDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewSalesOrderShippingDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewSalesOrderShippingDto.class));

       return (TypeAdapter<T>) new TypeAdapter<NewSalesOrderShippingDto>() {
           @Override
           public void write(JsonWriter out, NewSalesOrderShippingDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewSalesOrderShippingDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NewSalesOrderShippingDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NewSalesOrderShippingDto
   * @throws IOException if the JSON string is invalid with respect to NewSalesOrderShippingDto
   */
  public static NewSalesOrderShippingDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewSalesOrderShippingDto.class);
  }

  /**
   * Convert an instance of NewSalesOrderShippingDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

