/*
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SalesOrderRotRutDistributionDto;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SalesOrderRotRutDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:31.300103-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesOrderRotRutDto {
  public static final String SERIALIZED_NAME_APPARTMENT = "appartment";
  @SerializedName(SERIALIZED_NAME_APPARTMENT)
  private String appartment;

  public static final String SERIALIZED_NAME_DISTRIBUTED_AUTOMATICALLY = "distributedAutomatically";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTED_AUTOMATICALLY)
  private Boolean distributedAutomatically;

  public static final String SERIALIZED_NAME_DISTRIBUTION = "distribution";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION)
  private List<SalesOrderRotRutDistributionDto> distribution;

  public static final String SERIALIZED_NAME_ESTATE = "estate";
  @SerializedName(SERIALIZED_NAME_ESTATE)
  private String estate;

  public static final String SERIALIZED_NAME_ORGANIZATION_NUMBER = "organizationNumber";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_NUMBER)
  private String organizationNumber;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public SalesOrderRotRutDto() {
  }

  public SalesOrderRotRutDto appartment(String appartment) {
    this.appartment = appartment;
    return this;
  }

  /**
   * The appartment reference
   * @return appartment
   */
  @javax.annotation.Nullable
  public String getAppartment() {
    return appartment;
  }

  public void setAppartment(String appartment) {
    this.appartment = appartment;
  }


  public SalesOrderRotRutDto distributedAutomatically(Boolean distributedAutomatically) {
    this.distributedAutomatically = distributedAutomatically;
    return this;
  }

  /**
   * Whether the ROT/RUT is distributed automatically
   * @return distributedAutomatically
   */
  @javax.annotation.Nullable
  public Boolean getDistributedAutomatically() {
    return distributedAutomatically;
  }

  public void setDistributedAutomatically(Boolean distributedAutomatically) {
    this.distributedAutomatically = distributedAutomatically;
  }


  public SalesOrderRotRutDto distribution(List<SalesOrderRotRutDistributionDto> distribution) {
    this.distribution = distribution;
    return this;
  }

  public SalesOrderRotRutDto addDistributionItem(SalesOrderRotRutDistributionDto distributionItem) {
    if (this.distribution == null) {
      this.distribution = new ArrayList<>();
    }
    this.distribution.add(distributionItem);
    return this;
  }

  /**
   * The distrinbution entries
   * @return distribution
   */
  @javax.annotation.Nullable
  public List<SalesOrderRotRutDistributionDto> getDistribution() {
    return distribution;
  }

  public void setDistribution(List<SalesOrderRotRutDistributionDto> distribution) {
    this.distribution = distribution;
  }


  public SalesOrderRotRutDto estate(String estate) {
    this.estate = estate;
    return this;
  }

  /**
   * The estate reference
   * @return estate
   */
  @javax.annotation.Nullable
  public String getEstate() {
    return estate;
  }

  public void setEstate(String estate) {
    this.estate = estate;
  }


  public SalesOrderRotRutDto organizationNumber(String organizationNumber) {
    this.organizationNumber = organizationNumber;
    return this;
  }

  /**
   * The organization number
   * @return organizationNumber
   */
  @javax.annotation.Nullable
  public String getOrganizationNumber() {
    return organizationNumber;
  }

  public void setOrganizationNumber(String organizationNumber) {
    this.organizationNumber = organizationNumber;
  }


  public SalesOrderRotRutDto type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of ROT/RUT
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesOrderRotRutDto salesOrderRotRutDto = (SalesOrderRotRutDto) o;
    return Objects.equals(this.appartment, salesOrderRotRutDto.appartment) &&
        Objects.equals(this.distributedAutomatically, salesOrderRotRutDto.distributedAutomatically) &&
        Objects.equals(this.distribution, salesOrderRotRutDto.distribution) &&
        Objects.equals(this.estate, salesOrderRotRutDto.estate) &&
        Objects.equals(this.organizationNumber, salesOrderRotRutDto.organizationNumber) &&
        Objects.equals(this.type, salesOrderRotRutDto.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(appartment, distributedAutomatically, distribution, estate, organizationNumber, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesOrderRotRutDto {\n");
    sb.append("    appartment: ").append(toIndentedString(appartment)).append("\n");
    sb.append("    distributedAutomatically: ").append(toIndentedString(distributedAutomatically)).append("\n");
    sb.append("    distribution: ").append(toIndentedString(distribution)).append("\n");
    sb.append("    estate: ").append(toIndentedString(estate)).append("\n");
    sb.append("    organizationNumber: ").append(toIndentedString(organizationNumber)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appartment");
    openapiFields.add("distributedAutomatically");
    openapiFields.add("distribution");
    openapiFields.add("estate");
    openapiFields.add("organizationNumber");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesOrderRotRutDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesOrderRotRutDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesOrderRotRutDto is not found in the empty JSON string", SalesOrderRotRutDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesOrderRotRutDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesOrderRotRutDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appartment") != null && !jsonObj.get("appartment").isJsonNull()) && !jsonObj.get("appartment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appartment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appartment").toString()));
      }
      if (jsonObj.get("distribution") != null && !jsonObj.get("distribution").isJsonNull()) {
        JsonArray jsonArraydistribution = jsonObj.getAsJsonArray("distribution");
        if (jsonArraydistribution != null) {
          // ensure the json data is an array
          if (!jsonObj.get("distribution").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `distribution` to be an array in the JSON string but got `%s`", jsonObj.get("distribution").toString()));
          }

          // validate the optional field `distribution` (array)
          for (int i = 0; i < jsonArraydistribution.size(); i++) {
            SalesOrderRotRutDistributionDto.validateJsonElement(jsonArraydistribution.get(i));
          };
        }
      }
      if ((jsonObj.get("estate") != null && !jsonObj.get("estate").isJsonNull()) && !jsonObj.get("estate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `estate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("estate").toString()));
      }
      if ((jsonObj.get("organizationNumber") != null && !jsonObj.get("organizationNumber").isJsonNull()) && !jsonObj.get("organizationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizationNumber").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesOrderRotRutDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesOrderRotRutDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesOrderRotRutDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesOrderRotRutDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesOrderRotRutDto>() {
           @Override
           public void write(JsonWriter out, SalesOrderRotRutDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesOrderRotRutDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesOrderRotRutDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesOrderRotRutDto
   * @throws IOException if the JSON string is invalid with respect to SalesOrderRotRutDto
   */
  public static SalesOrderRotRutDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesOrderRotRutDto.class);
  }

  /**
   * Convert an instance of SalesOrderRotRutDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

