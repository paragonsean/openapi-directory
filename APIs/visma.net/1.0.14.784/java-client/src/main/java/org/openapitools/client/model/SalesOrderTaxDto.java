/*
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderTaxDto specifies a tax line detail for a sales order
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:31.300103-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesOrderTaxDto {
  public static final String SERIALIZED_NAME_EXEMPT_TAX = "exemptTax";
  @SerializedName(SERIALIZED_NAME_EXEMPT_TAX)
  private Boolean exemptTax;

  public static final String SERIALIZED_NAME_INCLUDE_IN_TAXABLE = "includeInTaxable";
  @SerializedName(SERIALIZED_NAME_INCLUDE_IN_TAXABLE)
  private Boolean includeInTaxable;

  public static final String SERIALIZED_NAME_IS_PENDING_TAX = "isPendingTax";
  @SerializedName(SERIALIZED_NAME_IS_PENDING_TAX)
  private Boolean isPendingTax;

  public static final String SERIALIZED_NAME_IS_REVERSE_TAX = "isReverseTax";
  @SerializedName(SERIALIZED_NAME_IS_REVERSE_TAX)
  private Boolean isReverseTax;

  public static final String SERIALIZED_NAME_IS_STATISTICAL_TAX = "isStatisticalTax";
  @SerializedName(SERIALIZED_NAME_IS_STATISTICAL_TAX)
  private Boolean isStatisticalTax;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "taxAmount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private Double taxAmount;

  public static final String SERIALIZED_NAME_TAX_ID = "taxId";
  @SerializedName(SERIALIZED_NAME_TAX_ID)
  private String taxId;

  public static final String SERIALIZED_NAME_TAX_RATE = "taxRate";
  @SerializedName(SERIALIZED_NAME_TAX_RATE)
  private Double taxRate;

  public static final String SERIALIZED_NAME_TAX_TYPE = "taxType";
  @SerializedName(SERIALIZED_NAME_TAX_TYPE)
  private String taxType;

  public static final String SERIALIZED_NAME_TAXABLE_AMOUNT = "taxableAmount";
  @SerializedName(SERIALIZED_NAME_TAXABLE_AMOUNT)
  private Double taxableAmount;

  public SalesOrderTaxDto() {
  }

  public SalesOrderTaxDto exemptTax(Boolean exemptTax) {
    this.exemptTax = exemptTax;
    return this;
  }

  /**
   * Indicates if the taxable amount will be included in taxExemptTotal
   * @return exemptTax
   */
  @javax.annotation.Nullable
  public Boolean getExemptTax() {
    return exemptTax;
  }

  public void setExemptTax(Boolean exemptTax) {
    this.exemptTax = exemptTax;
  }


  public SalesOrderTaxDto includeInTaxable(Boolean includeInTaxable) {
    this.includeInTaxable = includeInTaxable;
    return this;
  }

  /**
   * Indicates if the taxable amount will be included in taxableTotal
   * @return includeInTaxable
   */
  @javax.annotation.Nullable
  public Boolean getIncludeInTaxable() {
    return includeInTaxable;
  }

  public void setIncludeInTaxable(Boolean includeInTaxable) {
    this.includeInTaxable = includeInTaxable;
  }


  public SalesOrderTaxDto isPendingTax(Boolean isPendingTax) {
    this.isPendingTax = isPendingTax;
    return this;
  }

  /**
   * Indicates if the tax calculated is treated as a pending tax
   * @return isPendingTax
   */
  @javax.annotation.Nullable
  public Boolean getIsPendingTax() {
    return isPendingTax;
  }

  public void setIsPendingTax(Boolean isPendingTax) {
    this.isPendingTax = isPendingTax;
  }


  public SalesOrderTaxDto isReverseTax(Boolean isReverseTax) {
    this.isReverseTax = isReverseTax;
    return this;
  }

  /**
   * Indicates if the tax is treated as a reverse tax
   * @return isReverseTax
   */
  @javax.annotation.Nullable
  public Boolean getIsReverseTax() {
    return isReverseTax;
  }

  public void setIsReverseTax(Boolean isReverseTax) {
    this.isReverseTax = isReverseTax;
  }


  public SalesOrderTaxDto isStatisticalTax(Boolean isStatisticalTax) {
    this.isStatisticalTax = isStatisticalTax;
    return this;
  }

  /**
   * Indicates if the tax calculated is treated as a statistical tax
   * @return isStatisticalTax
   */
  @javax.annotation.Nullable
  public Boolean getIsStatisticalTax() {
    return isStatisticalTax;
  }

  public void setIsStatisticalTax(Boolean isStatisticalTax) {
    this.isStatisticalTax = isStatisticalTax;
  }


  public SalesOrderTaxDto taxAmount(Double taxAmount) {
    this.taxAmount = taxAmount;
    return this;
  }

  /**
   * The calculated tax amount for the specific tax
   * @return taxAmount
   */
  @javax.annotation.Nullable
  public Double getTaxAmount() {
    return taxAmount;
  }

  public void setTaxAmount(Double taxAmount) {
    this.taxAmount = taxAmount;
  }


  public SalesOrderTaxDto taxId(String taxId) {
    this.taxId = taxId;
    return this;
  }

  /**
   * The unique tax identifier of the specific tax applied to the document
   * @return taxId
   */
  @javax.annotation.Nullable
  public String getTaxId() {
    return taxId;
  }

  public void setTaxId(String taxId) {
    this.taxId = taxId;
  }


  public SalesOrderTaxDto taxRate(Double taxRate) {
    this.taxRate = taxRate;
    return this;
  }

  /**
   * The tax rate used for the tax
   * @return taxRate
   */
  @javax.annotation.Nullable
  public Double getTaxRate() {
    return taxRate;
  }

  public void setTaxRate(Double taxRate) {
    this.taxRate = taxRate;
  }


  public SalesOrderTaxDto taxType(String taxType) {
    this.taxType = taxType;
    return this;
  }

  /**
   * The type of tax, which can be Sales, Use, VAT or Withholding
   * @return taxType
   */
  @javax.annotation.Nullable
  public String getTaxType() {
    return taxType;
  }

  public void setTaxType(String taxType) {
    this.taxType = taxType;
  }


  public SalesOrderTaxDto taxableAmount(Double taxableAmount) {
    this.taxableAmount = taxableAmount;
    return this;
  }

  /**
   * The calculated taxable amount for the specific tax
   * @return taxableAmount
   */
  @javax.annotation.Nullable
  public Double getTaxableAmount() {
    return taxableAmount;
  }

  public void setTaxableAmount(Double taxableAmount) {
    this.taxableAmount = taxableAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesOrderTaxDto salesOrderTaxDto = (SalesOrderTaxDto) o;
    return Objects.equals(this.exemptTax, salesOrderTaxDto.exemptTax) &&
        Objects.equals(this.includeInTaxable, salesOrderTaxDto.includeInTaxable) &&
        Objects.equals(this.isPendingTax, salesOrderTaxDto.isPendingTax) &&
        Objects.equals(this.isReverseTax, salesOrderTaxDto.isReverseTax) &&
        Objects.equals(this.isStatisticalTax, salesOrderTaxDto.isStatisticalTax) &&
        Objects.equals(this.taxAmount, salesOrderTaxDto.taxAmount) &&
        Objects.equals(this.taxId, salesOrderTaxDto.taxId) &&
        Objects.equals(this.taxRate, salesOrderTaxDto.taxRate) &&
        Objects.equals(this.taxType, salesOrderTaxDto.taxType) &&
        Objects.equals(this.taxableAmount, salesOrderTaxDto.taxableAmount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(exemptTax, includeInTaxable, isPendingTax, isReverseTax, isStatisticalTax, taxAmount, taxId, taxRate, taxType, taxableAmount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesOrderTaxDto {\n");
    sb.append("    exemptTax: ").append(toIndentedString(exemptTax)).append("\n");
    sb.append("    includeInTaxable: ").append(toIndentedString(includeInTaxable)).append("\n");
    sb.append("    isPendingTax: ").append(toIndentedString(isPendingTax)).append("\n");
    sb.append("    isReverseTax: ").append(toIndentedString(isReverseTax)).append("\n");
    sb.append("    isStatisticalTax: ").append(toIndentedString(isStatisticalTax)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    taxType: ").append(toIndentedString(taxType)).append("\n");
    sb.append("    taxableAmount: ").append(toIndentedString(taxableAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exemptTax");
    openapiFields.add("includeInTaxable");
    openapiFields.add("isPendingTax");
    openapiFields.add("isReverseTax");
    openapiFields.add("isStatisticalTax");
    openapiFields.add("taxAmount");
    openapiFields.add("taxId");
    openapiFields.add("taxRate");
    openapiFields.add("taxType");
    openapiFields.add("taxableAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesOrderTaxDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesOrderTaxDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesOrderTaxDto is not found in the empty JSON string", SalesOrderTaxDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesOrderTaxDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesOrderTaxDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("taxId") != null && !jsonObj.get("taxId").isJsonNull()) && !jsonObj.get("taxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxId").toString()));
      }
      if ((jsonObj.get("taxType") != null && !jsonObj.get("taxType").isJsonNull()) && !jsonObj.get("taxType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesOrderTaxDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesOrderTaxDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesOrderTaxDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesOrderTaxDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesOrderTaxDto>() {
           @Override
           public void write(JsonWriter out, SalesOrderTaxDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesOrderTaxDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesOrderTaxDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesOrderTaxDto
   * @throws IOException if the JSON string is invalid with respect to SalesOrderTaxDto
   */
  public static SalesOrderTaxDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesOrderTaxDto.class);
  }

  /**
   * Convert an instance of SalesOrderTaxDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

