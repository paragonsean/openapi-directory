/*
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CustomerDtoPagedResult;
import org.openapitools.client.model.CustomerLocationItemDto;
import org.openapitools.client.model.ProblemDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for customersGetCustomerLocationListCustomerIdlocations
     * @param customerId The customer id (CustomerCd) to retrieve locations for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of locations for the specified customer </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If customer with id customerId is not found or is not accessible </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersGetCustomerLocationListCustomerIdlocationsCall(String customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/Customers/{customerId}/locations"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customersGetCustomerLocationListCustomerIdlocationsValidateBeforeCall(String customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customersGetCustomerLocationListCustomerIdlocations(Async)");
        }

        return customersGetCustomerLocationListCustomerIdlocationsCall(customerId, _callback);

    }

    /**
     * Gets a list of locations for the specified customer
     * Sample rquest:                GET /customers/10000/locations
     * @param customerId The customer id (CustomerCd) to retrieve locations for (required)
     * @return List&lt;CustomerLocationItemDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of locations for the specified customer </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If customer with id customerId is not found or is not accessible </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomerLocationItemDto> customersGetCustomerLocationListCustomerIdlocations(String customerId) throws ApiException {
        ApiResponse<List<CustomerLocationItemDto>> localVarResp = customersGetCustomerLocationListCustomerIdlocationsWithHttpInfo(customerId);
        return localVarResp.getData();
    }

    /**
     * Gets a list of locations for the specified customer
     * Sample rquest:                GET /customers/10000/locations
     * @param customerId The customer id (CustomerCd) to retrieve locations for (required)
     * @return ApiResponse&lt;List&lt;CustomerLocationItemDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of locations for the specified customer </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If customer with id customerId is not found or is not accessible </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomerLocationItemDto>> customersGetCustomerLocationListCustomerIdlocationsWithHttpInfo(String customerId) throws ApiException {
        okhttp3.Call localVarCall = customersGetCustomerLocationListCustomerIdlocationsValidateBeforeCall(customerId, null);
        Type localVarReturnType = new TypeToken<List<CustomerLocationItemDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of locations for the specified customer (asynchronously)
     * Sample rquest:                GET /customers/10000/locations
     * @param customerId The customer id (CustomerCd) to retrieve locations for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of locations for the specified customer </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If customer with id customerId is not found or is not accessible </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersGetCustomerLocationListCustomerIdlocationsAsync(String customerId, final ApiCallback<List<CustomerLocationItemDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = customersGetCustomerLocationListCustomerIdlocationsValidateBeforeCall(customerId, _callback);
        Type localVarReturnType = new TypeToken<List<CustomerLocationItemDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customersGetList
     * @param filter An optional text string to find customers matching (searching fields id, name, gln, tax registration id). If not specified all customers are returned. (optional)
     * @param pageSize The number of customers retrieved per page. If not specified, the default value of 100 will be used. (optional, default to 100)
     * @param pageIndex The zero based page index to retrieve (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of customers found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If pageSize or pageIndex is not within the allowed range </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersGetListCall(String filter, Integer pageSize, Integer pageIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/Customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customersGetListValidateBeforeCall(String filter, Integer pageSize, Integer pageIndex, final ApiCallback _callback) throws ApiException {
        return customersGetListCall(filter, pageSize, pageIndex, _callback);

    }

    /**
     * Gets a list of customers
     * Sample request:                GET /customers?filter&#x3D;visma&amp;pageSize&#x3D;10
     * @param filter An optional text string to find customers matching (searching fields id, name, gln, tax registration id). If not specified all customers are returned. (optional)
     * @param pageSize The number of customers retrieved per page. If not specified, the default value of 100 will be used. (optional, default to 100)
     * @param pageIndex The zero based page index to retrieve (optional, default to 0)
     * @return CustomerDtoPagedResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of customers found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If pageSize or pageIndex is not within the allowed range </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CustomerDtoPagedResult customersGetList(String filter, Integer pageSize, Integer pageIndex) throws ApiException {
        ApiResponse<CustomerDtoPagedResult> localVarResp = customersGetListWithHttpInfo(filter, pageSize, pageIndex);
        return localVarResp.getData();
    }

    /**
     * Gets a list of customers
     * Sample request:                GET /customers?filter&#x3D;visma&amp;pageSize&#x3D;10
     * @param filter An optional text string to find customers matching (searching fields id, name, gln, tax registration id). If not specified all customers are returned. (optional)
     * @param pageSize The number of customers retrieved per page. If not specified, the default value of 100 will be used. (optional, default to 100)
     * @param pageIndex The zero based page index to retrieve (optional, default to 0)
     * @return ApiResponse&lt;CustomerDtoPagedResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of customers found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If pageSize or pageIndex is not within the allowed range </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerDtoPagedResult> customersGetListWithHttpInfo(String filter, Integer pageSize, Integer pageIndex) throws ApiException {
        okhttp3.Call localVarCall = customersGetListValidateBeforeCall(filter, pageSize, pageIndex, null);
        Type localVarReturnType = new TypeToken<CustomerDtoPagedResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of customers (asynchronously)
     * Sample request:                GET /customers?filter&#x3D;visma&amp;pageSize&#x3D;10
     * @param filter An optional text string to find customers matching (searching fields id, name, gln, tax registration id). If not specified all customers are returned. (optional)
     * @param pageSize The number of customers retrieved per page. If not specified, the default value of 100 will be used. (optional, default to 100)
     * @param pageIndex The zero based page index to retrieve (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of customers found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If pageSize or pageIndex is not within the allowed range </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersGetListAsync(String filter, Integer pageSize, Integer pageIndex, final ApiCallback<CustomerDtoPagedResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = customersGetListValidateBeforeCall(filter, pageSize, pageIndex, _callback);
        Type localVarReturnType = new TypeToken<CustomerDtoPagedResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
