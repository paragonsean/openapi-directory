/*
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderShipmentDto specifies a shipment line detail for a sales order
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:31.300103-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesOrderShipmentDto {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INVENTORY_DOCUMENT_TYPE = "inventoryDocumentType";
  @SerializedName(SERIALIZED_NAME_INVENTORY_DOCUMENT_TYPE)
  private String inventoryDocumentType;

  public static final String SERIALIZED_NAME_INVENTORY_REFERENCE_ID = "inventoryReferenceId";
  @SerializedName(SERIALIZED_NAME_INVENTORY_REFERENCE_ID)
  private String inventoryReferenceId;

  public static final String SERIALIZED_NAME_INVOICE_ID = "invoiceId";
  @SerializedName(SERIALIZED_NAME_INVOICE_ID)
  private String invoiceId;

  public static final String SERIALIZED_NAME_INVOICE_TYPE = "invoiceType";
  @SerializedName(SERIALIZED_NAME_INVOICE_TYPE)
  private String invoiceType;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Double quantity;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VOLUME = "volume";
  @SerializedName(SERIALIZED_NAME_VOLUME)
  private Double volume;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Double weight;

  public SalesOrderShipmentDto() {
  }

  public SalesOrderShipmentDto date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * The date of the shipment
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public SalesOrderShipmentDto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The id of a shipments created for the order
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SalesOrderShipmentDto inventoryDocumentType(String inventoryDocumentType) {
    this.inventoryDocumentType = inventoryDocumentType;
    return this;
  }

  /**
   * The type of inventory document created for the shipment
   * @return inventoryDocumentType
   */
  @javax.annotation.Nullable
  public String getInventoryDocumentType() {
    return inventoryDocumentType;
  }

  public void setInventoryDocumentType(String inventoryDocumentType) {
    this.inventoryDocumentType = inventoryDocumentType;
  }


  public SalesOrderShipmentDto inventoryReferenceId(String inventoryReferenceId) {
    this.inventoryReferenceId = inventoryReferenceId;
    return this;
  }

  /**
   * The id of the inventory document created for the shipment
   * @return inventoryReferenceId
   */
  @javax.annotation.Nullable
  public String getInventoryReferenceId() {
    return inventoryReferenceId;
  }

  public void setInventoryReferenceId(String inventoryReferenceId) {
    this.inventoryReferenceId = inventoryReferenceId;
  }


  public SalesOrderShipmentDto invoiceId(String invoiceId) {
    this.invoiceId = invoiceId;
    return this;
  }

  /**
   * The id of the invoice
   * @return invoiceId
   */
  @javax.annotation.Nullable
  public String getInvoiceId() {
    return invoiceId;
  }

  public void setInvoiceId(String invoiceId) {
    this.invoiceId = invoiceId;
  }


  public SalesOrderShipmentDto invoiceType(String invoiceType) {
    this.invoiceType = invoiceType;
    return this;
  }

  /**
   * The type of invoice
   * @return invoiceType
   */
  @javax.annotation.Nullable
  public String getInvoiceType() {
    return invoiceType;
  }

  public void setInvoiceType(String invoiceType) {
    this.invoiceType = invoiceType;
  }


  public SalesOrderShipmentDto quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The quantity of goods on the shipment
   * @return quantity
   */
  @javax.annotation.Nullable
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }


  public SalesOrderShipmentDto type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the shipment
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public SalesOrderShipmentDto volume(Double volume) {
    this.volume = volume;
    return this;
  }

  /**
   * The volume of the shipped goods
   * @return volume
   */
  @javax.annotation.Nullable
  public Double getVolume() {
    return volume;
  }

  public void setVolume(Double volume) {
    this.volume = volume;
  }


  public SalesOrderShipmentDto weight(Double weight) {
    this.weight = weight;
    return this;
  }

  /**
   * The weight of the shipped goods
   * @return weight
   */
  @javax.annotation.Nullable
  public Double getWeight() {
    return weight;
  }

  public void setWeight(Double weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesOrderShipmentDto salesOrderShipmentDto = (SalesOrderShipmentDto) o;
    return Objects.equals(this.date, salesOrderShipmentDto.date) &&
        Objects.equals(this.id, salesOrderShipmentDto.id) &&
        Objects.equals(this.inventoryDocumentType, salesOrderShipmentDto.inventoryDocumentType) &&
        Objects.equals(this.inventoryReferenceId, salesOrderShipmentDto.inventoryReferenceId) &&
        Objects.equals(this.invoiceId, salesOrderShipmentDto.invoiceId) &&
        Objects.equals(this.invoiceType, salesOrderShipmentDto.invoiceType) &&
        Objects.equals(this.quantity, salesOrderShipmentDto.quantity) &&
        Objects.equals(this.type, salesOrderShipmentDto.type) &&
        Objects.equals(this.volume, salesOrderShipmentDto.volume) &&
        Objects.equals(this.weight, salesOrderShipmentDto.weight);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, id, inventoryDocumentType, inventoryReferenceId, invoiceId, invoiceType, quantity, type, volume, weight);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesOrderShipmentDto {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inventoryDocumentType: ").append(toIndentedString(inventoryDocumentType)).append("\n");
    sb.append("    inventoryReferenceId: ").append(toIndentedString(inventoryReferenceId)).append("\n");
    sb.append("    invoiceId: ").append(toIndentedString(invoiceId)).append("\n");
    sb.append("    invoiceType: ").append(toIndentedString(invoiceType)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("id");
    openapiFields.add("inventoryDocumentType");
    openapiFields.add("inventoryReferenceId");
    openapiFields.add("invoiceId");
    openapiFields.add("invoiceType");
    openapiFields.add("quantity");
    openapiFields.add("type");
    openapiFields.add("volume");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesOrderShipmentDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesOrderShipmentDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesOrderShipmentDto is not found in the empty JSON string", SalesOrderShipmentDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesOrderShipmentDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesOrderShipmentDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("inventoryDocumentType") != null && !jsonObj.get("inventoryDocumentType").isJsonNull()) && !jsonObj.get("inventoryDocumentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventoryDocumentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inventoryDocumentType").toString()));
      }
      if ((jsonObj.get("inventoryReferenceId") != null && !jsonObj.get("inventoryReferenceId").isJsonNull()) && !jsonObj.get("inventoryReferenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventoryReferenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inventoryReferenceId").toString()));
      }
      if ((jsonObj.get("invoiceId") != null && !jsonObj.get("invoiceId").isJsonNull()) && !jsonObj.get("invoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceId").toString()));
      }
      if ((jsonObj.get("invoiceType") != null && !jsonObj.get("invoiceType").isJsonNull()) && !jsonObj.get("invoiceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceType").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesOrderShipmentDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesOrderShipmentDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesOrderShipmentDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesOrderShipmentDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesOrderShipmentDto>() {
           @Override
           public void write(JsonWriter out, SalesOrderShipmentDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesOrderShipmentDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesOrderShipmentDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesOrderShipmentDto
   * @throws IOException if the JSON string is invalid with respect to SalesOrderShipmentDto
   */
  public static SalesOrderShipmentDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesOrderShipmentDto.class);
  }

  /**
   * Convert an instance of SalesOrderShipmentDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

