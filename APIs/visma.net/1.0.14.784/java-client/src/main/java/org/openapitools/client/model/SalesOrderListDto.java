/*
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.DtoLink;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SalesOrderListDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:31.300103-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesOrderListDto {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, DtoLink> links;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_CUSTOMER_NAME = "customerName";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_NAME)
  private String customerName;

  public static final String SERIALIZED_NAME_CUSTOMER_ORDER = "customerOrder";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ORDER)
  private String customerOrder;

  public static final String SERIALIZED_NAME_CUSTOMER_REF_NO = "customerRefNo";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_REF_NO)
  private String customerRefNo;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_ORDER_QTY = "orderQty";
  @SerializedName(SERIALIZED_NAME_ORDER_QTY)
  private Double orderQty;

  public static final String SERIALIZED_NAME_ORDER_TOTAL = "orderTotal";
  @SerializedName(SERIALIZED_NAME_ORDER_TOTAL)
  private Double orderTotal;

  public static final String SERIALIZED_NAME_REQUEST_ON = "requestOn";
  @SerializedName(SERIALIZED_NAME_REQUEST_ON)
  private OffsetDateTime requestOn;

  public static final String SERIALIZED_NAME_SHIPPING_SCHEDULED_DATE = "shippingScheduledDate";
  @SerializedName(SERIALIZED_NAME_SHIPPING_SCHEDULED_DATE)
  private OffsetDateTime shippingScheduledDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public SalesOrderListDto() {
  }

  public SalesOrderListDto links(Map<String, DtoLink> links) {
    this.links = links;
    return this;
  }

  public SalesOrderListDto putLinksItem(String key, DtoLink linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

  /**
   * Links applicable for the dto
   * @return links
   */
  @javax.annotation.Nullable
  public Map<String, DtoLink> getLinks() {
    return links;
  }

  public void setLinks(Map<String, DtoLink> links) {
    this.links = links;
  }


  public SalesOrderListDto currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The currency id for the order
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public SalesOrderListDto customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * The customer Id for the order (a.k.a CustoemrCd)
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public SalesOrderListDto customerName(String customerName) {
    this.customerName = customerName;
    return this;
  }

  /**
   * The name of the customer as it appears on the order
   * @return customerName
   */
  @javax.annotation.Nullable
  public String getCustomerName() {
    return customerName;
  }

  public void setCustomerName(String customerName) {
    this.customerName = customerName;
  }


  public SalesOrderListDto customerOrder(String customerOrder) {
    this.customerOrder = customerOrder;
    return this;
  }

  /**
   * The customer order link
   * @return customerOrder
   */
  @javax.annotation.Nullable
  public String getCustomerOrder() {
    return customerOrder;
  }

  public void setCustomerOrder(String customerOrder) {
    this.customerOrder = customerOrder;
  }


  public SalesOrderListDto customerRefNo(String customerRefNo) {
    this.customerRefNo = customerRefNo;
    return this;
  }

  /**
   * The order reference number of the customer
   * @return customerRefNo
   */
  @javax.annotation.Nullable
  public String getCustomerRefNo() {
    return customerRefNo;
  }

  public void setCustomerRefNo(String customerRefNo) {
    this.customerRefNo = customerRefNo;
  }


  public SalesOrderListDto date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * The order date  Unless a specific time zone offset is included (e.g. &#39;2012-12-24T00:00:00+02:00&#39;), the passed date is considered to be in the UTC time zone.
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public SalesOrderListDto description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Any description on the order
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SalesOrderListDto lastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * The date and time the order was last modified
   * @return lastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModified() {
    return lastModified;
  }

  public void setLastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
  }


  public SalesOrderListDto location(String location) {
    this.location = location;
    return this;
  }

  /**
   * The customer location for this order
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public SalesOrderListDto orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * The order id (a.k.a OrderCd) for the order
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public SalesOrderListDto orderQty(Double orderQty) {
    this.orderQty = orderQty;
    return this;
  }

  /**
   * The total number of items on the order
   * @return orderQty
   */
  @javax.annotation.Nullable
  public Double getOrderQty() {
    return orderQty;
  }

  public void setOrderQty(Double orderQty) {
    this.orderQty = orderQty;
  }


  public SalesOrderListDto orderTotal(Double orderTotal) {
    this.orderTotal = orderTotal;
    return this;
  }

  /**
   * The total amount on the order
   * @return orderTotal
   */
  @javax.annotation.Nullable
  public Double getOrderTotal() {
    return orderTotal;
  }

  public void setOrderTotal(Double orderTotal) {
    this.orderTotal = orderTotal;
  }


  public SalesOrderListDto requestOn(OffsetDateTime requestOn) {
    this.requestOn = requestOn;
    return this;
  }

  /**
   * The date the order is requested  Unless a specific time zone offset is included (e.g. &#39;2012-12-24T00:00:00+02:00&#39;), the passed date is considered to be in the UTC time zone.
   * @return requestOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRequestOn() {
    return requestOn;
  }

  public void setRequestOn(OffsetDateTime requestOn) {
    this.requestOn = requestOn;
  }


  public SalesOrderListDto shippingScheduledDate(OffsetDateTime shippingScheduledDate) {
    this.shippingScheduledDate = shippingScheduledDate;
    return this;
  }

  /**
   * The date shipment is scheduled  Unless a specific time zone offset is included (e.g. &#39;2012-12-24T00:00:00+02:00&#39;), the passed date is considered to be in the UTC time zone.
   * @return shippingScheduledDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getShippingScheduledDate() {
    return shippingScheduledDate;
  }

  public void setShippingScheduledDate(OffsetDateTime shippingScheduledDate) {
    this.shippingScheduledDate = shippingScheduledDate;
  }


  public SalesOrderListDto status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The current status of the order
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public SalesOrderListDto type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the order
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesOrderListDto salesOrderListDto = (SalesOrderListDto) o;
    return Objects.equals(this.links, salesOrderListDto.links) &&
        Objects.equals(this.currency, salesOrderListDto.currency) &&
        Objects.equals(this.customerId, salesOrderListDto.customerId) &&
        Objects.equals(this.customerName, salesOrderListDto.customerName) &&
        Objects.equals(this.customerOrder, salesOrderListDto.customerOrder) &&
        Objects.equals(this.customerRefNo, salesOrderListDto.customerRefNo) &&
        Objects.equals(this.date, salesOrderListDto.date) &&
        Objects.equals(this.description, salesOrderListDto.description) &&
        Objects.equals(this.lastModified, salesOrderListDto.lastModified) &&
        Objects.equals(this.location, salesOrderListDto.location) &&
        Objects.equals(this.orderId, salesOrderListDto.orderId) &&
        Objects.equals(this.orderQty, salesOrderListDto.orderQty) &&
        Objects.equals(this.orderTotal, salesOrderListDto.orderTotal) &&
        Objects.equals(this.requestOn, salesOrderListDto.requestOn) &&
        Objects.equals(this.shippingScheduledDate, salesOrderListDto.shippingScheduledDate) &&
        Objects.equals(this.status, salesOrderListDto.status) &&
        Objects.equals(this.type, salesOrderListDto.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, currency, customerId, customerName, customerOrder, customerRefNo, date, description, lastModified, location, orderId, orderQty, orderTotal, requestOn, shippingScheduledDate, status, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesOrderListDto {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    customerName: ").append(toIndentedString(customerName)).append("\n");
    sb.append("    customerOrder: ").append(toIndentedString(customerOrder)).append("\n");
    sb.append("    customerRefNo: ").append(toIndentedString(customerRefNo)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    orderQty: ").append(toIndentedString(orderQty)).append("\n");
    sb.append("    orderTotal: ").append(toIndentedString(orderTotal)).append("\n");
    sb.append("    requestOn: ").append(toIndentedString(requestOn)).append("\n");
    sb.append("    shippingScheduledDate: ").append(toIndentedString(shippingScheduledDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("currency");
    openapiFields.add("customerId");
    openapiFields.add("customerName");
    openapiFields.add("customerOrder");
    openapiFields.add("customerRefNo");
    openapiFields.add("date");
    openapiFields.add("description");
    openapiFields.add("lastModified");
    openapiFields.add("location");
    openapiFields.add("orderId");
    openapiFields.add("orderQty");
    openapiFields.add("orderTotal");
    openapiFields.add("requestOn");
    openapiFields.add("shippingScheduledDate");
    openapiFields.add("status");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesOrderListDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesOrderListDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesOrderListDto is not found in the empty JSON string", SalesOrderListDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesOrderListDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesOrderListDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if ((jsonObj.get("customerName") != null && !jsonObj.get("customerName").isJsonNull()) && !jsonObj.get("customerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerName").toString()));
      }
      if ((jsonObj.get("customerOrder") != null && !jsonObj.get("customerOrder").isJsonNull()) && !jsonObj.get("customerOrder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerOrder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerOrder").toString()));
      }
      if ((jsonObj.get("customerRefNo") != null && !jsonObj.get("customerRefNo").isJsonNull()) && !jsonObj.get("customerRefNo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerRefNo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerRefNo").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesOrderListDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesOrderListDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesOrderListDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesOrderListDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesOrderListDto>() {
           @Override
           public void write(JsonWriter out, SalesOrderListDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesOrderListDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesOrderListDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesOrderListDto
   * @throws IOException if the JSON string is invalid with respect to SalesOrderListDto
   */
  public static SalesOrderListDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesOrderListDto.class);
  }

  /**
   * Convert an instance of SalesOrderListDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

