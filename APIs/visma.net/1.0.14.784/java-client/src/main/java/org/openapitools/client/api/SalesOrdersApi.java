/*
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddSalesOrderLinesCommand;
import org.openapitools.client.model.NewSalesOrderCommand;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PatchSalesOrderCommand;
import org.openapitools.client.model.PatchSalesOrderLinesCommand;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.SalesOrderCommissionDto;
import org.openapitools.client.model.SalesOrderDiscountDto;
import org.openapitools.client.model.SalesOrderDto;
import org.openapitools.client.model.SalesOrderExpansions;
import org.openapitools.client.model.SalesOrderLineDto;
import org.openapitools.client.model.SalesOrderLineDtoPagedResult;
import org.openapitools.client.model.SalesOrderListDtoPagedResult;
import org.openapitools.client.model.SalesOrderRotRutDto;
import org.openapitools.client.model.SalesOrderShipmentDto;
import org.openapitools.client.model.SalesOrderTaxDto;
import org.openapitools.client.model.SalesOrderValidationProblemDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SalesOrdersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SalesOrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SalesOrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for salesOrdersAddLinesTypeorderIdlines
     * @param type  (required)
     * @param orderId  (required)
     * @param addSalesOrderLinesCommand Information about the lines to create (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The order lines where created successfully, and the Location request header contains the address to call to GET the new sales order </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any of values in command is not present or active, or is outside the allowed range              &lt;response code&#x3D;\&quot;404\&quot;&gt;Specified order was not found&lt;/response&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersAddLinesTypeorderIdlinesCall(String type, String orderId, AddSalesOrderLinesCommand addSalesOrderLinesCommand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addSalesOrderLinesCommand;

        // create path and map variables
        String localVarPath = "/api/v3/SalesOrders/{type}/{orderId}/lines"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesOrdersAddLinesTypeorderIdlinesValidateBeforeCall(String type, String orderId, AddSalesOrderLinesCommand addSalesOrderLinesCommand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling salesOrdersAddLinesTypeorderIdlines(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling salesOrdersAddLinesTypeorderIdlines(Async)");
        }

        return salesOrdersAddLinesTypeorderIdlinesCall(type, orderId, addSalesOrderLinesCommand, _callback);

    }

    /**
     * Adds new lines to a existing sales order in the system
     * If-Match header represents a version of Sales Order to be modified and must be included in request.  Value of current version is included in GET /salesorders/{type}/{orderId} and modification endpoints on that resource as ETag header.
     * @param type  (required)
     * @param orderId  (required)
     * @param addSalesOrderLinesCommand Information about the lines to create (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The order lines where created successfully, and the Location request header contains the address to call to GET the new sales order </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any of values in command is not present or active, or is outside the allowed range              &lt;response code&#x3D;\&quot;404\&quot;&gt;Specified order was not found&lt;/response&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public void salesOrdersAddLinesTypeorderIdlines(String type, String orderId, AddSalesOrderLinesCommand addSalesOrderLinesCommand) throws ApiException {
        salesOrdersAddLinesTypeorderIdlinesWithHttpInfo(type, orderId, addSalesOrderLinesCommand);
    }

    /**
     * Adds new lines to a existing sales order in the system
     * If-Match header represents a version of Sales Order to be modified and must be included in request.  Value of current version is included in GET /salesorders/{type}/{orderId} and modification endpoints on that resource as ETag header.
     * @param type  (required)
     * @param orderId  (required)
     * @param addSalesOrderLinesCommand Information about the lines to create (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The order lines where created successfully, and the Location request header contains the address to call to GET the new sales order </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any of values in command is not present or active, or is outside the allowed range              &lt;response code&#x3D;\&quot;404\&quot;&gt;Specified order was not found&lt;/response&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> salesOrdersAddLinesTypeorderIdlinesWithHttpInfo(String type, String orderId, AddSalesOrderLinesCommand addSalesOrderLinesCommand) throws ApiException {
        okhttp3.Call localVarCall = salesOrdersAddLinesTypeorderIdlinesValidateBeforeCall(type, orderId, addSalesOrderLinesCommand, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Adds new lines to a existing sales order in the system (asynchronously)
     * If-Match header represents a version of Sales Order to be modified and must be included in request.  Value of current version is included in GET /salesorders/{type}/{orderId} and modification endpoints on that resource as ETag header.
     * @param type  (required)
     * @param orderId  (required)
     * @param addSalesOrderLinesCommand Information about the lines to create (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The order lines where created successfully, and the Location request header contains the address to call to GET the new sales order </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any of values in command is not present or active, or is outside the allowed range              &lt;response code&#x3D;\&quot;404\&quot;&gt;Specified order was not found&lt;/response&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersAddLinesTypeorderIdlinesAsync(String type, String orderId, AddSalesOrderLinesCommand addSalesOrderLinesCommand, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesOrdersAddLinesTypeorderIdlinesValidateBeforeCall(type, orderId, addSalesOrderLinesCommand, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesOrdersCreateNewItem
     * @param newSalesOrderCommand Information about the sales order to create (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The order was created successfully, and the Location request header contains the address to call to GET the new sales order </td><td>  * Location - Location of the newly created resource <br>  </td></tr>
        <tr><td> 400 </td><td> If any of values in command is not present or active, or is outside the allowed range               See &lt;a href&#x3D;\&quot;/swagger/v3/swagger.json#components/x-visma-erp-error-codes\&quot;&gt;#/components/x-visma-erp-error-codes&lt;/a&gt; for the full list of error codes. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersCreateNewItemCall(NewSalesOrderCommand newSalesOrderCommand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newSalesOrderCommand;

        // create path and map variables
        String localVarPath = "/api/v3/SalesOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesOrdersCreateNewItemValidateBeforeCall(NewSalesOrderCommand newSalesOrderCommand, final ApiCallback _callback) throws ApiException {
        return salesOrdersCreateNewItemCall(newSalesOrderCommand, _callback);

    }

    /**
     * Adds a new sales order to the system
     * Sample requests:                &#x60;&#x60;&#x60;  POST /salesorders  {      \&quot;customer\&quot;: {        \&quot;id\&quot;: \&quot;10001\&quot;,      },      \&quot;type\&quot;: \&quot;SO\&quot;  }  &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;  POST /salesorders  {      \&quot;customer\&quot;: {        \&quot;id\&quot;: \&quot;10000\&quot;,        \&quot;order\&quot;: \&quot;some-customer-order-nbr\&quot;      },      \&quot;type\&quot;: \&quot;SO\&quot;,      \&quot;description\&quot;: \&quot;sample request order\&quot;,      \&quot;status\&quot;: \&quot;Hold\&quot;,      \&quot;orderLines\&quot;: [          {              \&quot;inventoryId\&quot;: \&quot;StockItem1\&quot;,              \&quot;quantity\&quot;: 4,              \&quot;unitPrice\&quot;: 101.25          }      ]  }  &#x60;&#x60;&#x60;
     * @param newSalesOrderCommand Information about the sales order to create (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The order was created successfully, and the Location request header contains the address to call to GET the new sales order </td><td>  * Location - Location of the newly created resource <br>  </td></tr>
        <tr><td> 400 </td><td> If any of values in command is not present or active, or is outside the allowed range               See &lt;a href&#x3D;\&quot;/swagger/v3/swagger.json#components/x-visma-erp-error-codes\&quot;&gt;#/components/x-visma-erp-error-codes&lt;/a&gt; for the full list of error codes. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public void salesOrdersCreateNewItem(NewSalesOrderCommand newSalesOrderCommand) throws ApiException {
        salesOrdersCreateNewItemWithHttpInfo(newSalesOrderCommand);
    }

    /**
     * Adds a new sales order to the system
     * Sample requests:                &#x60;&#x60;&#x60;  POST /salesorders  {      \&quot;customer\&quot;: {        \&quot;id\&quot;: \&quot;10001\&quot;,      },      \&quot;type\&quot;: \&quot;SO\&quot;  }  &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;  POST /salesorders  {      \&quot;customer\&quot;: {        \&quot;id\&quot;: \&quot;10000\&quot;,        \&quot;order\&quot;: \&quot;some-customer-order-nbr\&quot;      },      \&quot;type\&quot;: \&quot;SO\&quot;,      \&quot;description\&quot;: \&quot;sample request order\&quot;,      \&quot;status\&quot;: \&quot;Hold\&quot;,      \&quot;orderLines\&quot;: [          {              \&quot;inventoryId\&quot;: \&quot;StockItem1\&quot;,              \&quot;quantity\&quot;: 4,              \&quot;unitPrice\&quot;: 101.25          }      ]  }  &#x60;&#x60;&#x60;
     * @param newSalesOrderCommand Information about the sales order to create (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The order was created successfully, and the Location request header contains the address to call to GET the new sales order </td><td>  * Location - Location of the newly created resource <br>  </td></tr>
        <tr><td> 400 </td><td> If any of values in command is not present or active, or is outside the allowed range               See &lt;a href&#x3D;\&quot;/swagger/v3/swagger.json#components/x-visma-erp-error-codes\&quot;&gt;#/components/x-visma-erp-error-codes&lt;/a&gt; for the full list of error codes. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> salesOrdersCreateNewItemWithHttpInfo(NewSalesOrderCommand newSalesOrderCommand) throws ApiException {
        okhttp3.Call localVarCall = salesOrdersCreateNewItemValidateBeforeCall(newSalesOrderCommand, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Adds a new sales order to the system (asynchronously)
     * Sample requests:                &#x60;&#x60;&#x60;  POST /salesorders  {      \&quot;customer\&quot;: {        \&quot;id\&quot;: \&quot;10001\&quot;,      },      \&quot;type\&quot;: \&quot;SO\&quot;  }  &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;  POST /salesorders  {      \&quot;customer\&quot;: {        \&quot;id\&quot;: \&quot;10000\&quot;,        \&quot;order\&quot;: \&quot;some-customer-order-nbr\&quot;      },      \&quot;type\&quot;: \&quot;SO\&quot;,      \&quot;description\&quot;: \&quot;sample request order\&quot;,      \&quot;status\&quot;: \&quot;Hold\&quot;,      \&quot;orderLines\&quot;: [          {              \&quot;inventoryId\&quot;: \&quot;StockItem1\&quot;,              \&quot;quantity\&quot;: 4,              \&quot;unitPrice\&quot;: 101.25          }      ]  }  &#x60;&#x60;&#x60;
     * @param newSalesOrderCommand Information about the sales order to create (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The order was created successfully, and the Location request header contains the address to call to GET the new sales order </td><td>  * Location - Location of the newly created resource <br>  </td></tr>
        <tr><td> 400 </td><td> If any of values in command is not present or active, or is outside the allowed range               See &lt;a href&#x3D;\&quot;/swagger/v3/swagger.json#components/x-visma-erp-error-codes\&quot;&gt;#/components/x-visma-erp-error-codes&lt;/a&gt; for the full list of error codes. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersCreateNewItemAsync(NewSalesOrderCommand newSalesOrderCommand, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesOrdersCreateNewItemValidateBeforeCall(newSalesOrderCommand, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesOrdersDeleteLinesTypeorderIdlines
     * @param type The type of the order to make modifications to (required)
     * @param orderId The order number to make modifications to (required)
     * @param ids Lines to delete with comma seprator. Limit of line ids is 1000. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The lines were deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any of values in ids is outside the allowed range               See &lt;a href&#x3D;\&quot;/swagger/v3/swagger.json#components/x-visma-erp-error-codes\&quot;&gt;#/components/x-visma-erp-error-codes&lt;/a&gt; for the full list of error codes. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified order was not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersDeleteLinesTypeorderIdlinesCall(String type, String orderId, List<Integer> ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/SalesOrders/{type}/{orderId}/lines"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesOrdersDeleteLinesTypeorderIdlinesValidateBeforeCall(String type, String orderId, List<Integer> ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling salesOrdersDeleteLinesTypeorderIdlines(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling salesOrdersDeleteLinesTypeorderIdlines(Async)");
        }

        return salesOrdersDeleteLinesTypeorderIdlinesCall(type, orderId, ids, _callback);

    }

    /**
     * Delete lines from an existing sales order
     * If-Match header represents a version of Sales Order to be modified and must be included in request.  Value of current version is included in GET /salesorders/{type}/{orderId} and modification endpoints on that resource as ETag header.
     * @param type The type of the order to make modifications to (required)
     * @param orderId The order number to make modifications to (required)
     * @param ids Lines to delete with comma seprator. Limit of line ids is 1000. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The lines were deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any of values in ids is outside the allowed range               See &lt;a href&#x3D;\&quot;/swagger/v3/swagger.json#components/x-visma-erp-error-codes\&quot;&gt;#/components/x-visma-erp-error-codes&lt;/a&gt; for the full list of error codes. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified order was not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public void salesOrdersDeleteLinesTypeorderIdlines(String type, String orderId, List<Integer> ids) throws ApiException {
        salesOrdersDeleteLinesTypeorderIdlinesWithHttpInfo(type, orderId, ids);
    }

    /**
     * Delete lines from an existing sales order
     * If-Match header represents a version of Sales Order to be modified and must be included in request.  Value of current version is included in GET /salesorders/{type}/{orderId} and modification endpoints on that resource as ETag header.
     * @param type The type of the order to make modifications to (required)
     * @param orderId The order number to make modifications to (required)
     * @param ids Lines to delete with comma seprator. Limit of line ids is 1000. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The lines were deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any of values in ids is outside the allowed range               See &lt;a href&#x3D;\&quot;/swagger/v3/swagger.json#components/x-visma-erp-error-codes\&quot;&gt;#/components/x-visma-erp-error-codes&lt;/a&gt; for the full list of error codes. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified order was not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> salesOrdersDeleteLinesTypeorderIdlinesWithHttpInfo(String type, String orderId, List<Integer> ids) throws ApiException {
        okhttp3.Call localVarCall = salesOrdersDeleteLinesTypeorderIdlinesValidateBeforeCall(type, orderId, ids, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete lines from an existing sales order (asynchronously)
     * If-Match header represents a version of Sales Order to be modified and must be included in request.  Value of current version is included in GET /salesorders/{type}/{orderId} and modification endpoints on that resource as ETag header.
     * @param type The type of the order to make modifications to (required)
     * @param orderId The order number to make modifications to (required)
     * @param ids Lines to delete with comma seprator. Limit of line ids is 1000. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The lines were deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any of values in ids is outside the allowed range               See &lt;a href&#x3D;\&quot;/swagger/v3/swagger.json#components/x-visma-erp-error-codes\&quot;&gt;#/components/x-visma-erp-error-codes&lt;/a&gt; for the full list of error codes. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified order was not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersDeleteLinesTypeorderIdlinesAsync(String type, String orderId, List<Integer> ids, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesOrdersDeleteLinesTypeorderIdlinesValidateBeforeCall(type, orderId, ids, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesOrdersDeleteTypeorderId
     * @param type The type of the order to delete (required)
     * @param orderId The order number to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The order was deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified order was not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersDeleteTypeorderIdCall(String type, String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/SalesOrders/{type}/{orderId}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesOrdersDeleteTypeorderIdValidateBeforeCall(String type, String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling salesOrdersDeleteTypeorderId(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling salesOrdersDeleteTypeorderId(Async)");
        }

        return salesOrdersDeleteTypeorderIdCall(type, orderId, _callback);

    }

    /**
     * Delete an existing sales order
     * If-Match header represents a version of Sales Order to be modified and must be included in request.  Value of current version is included in GET /salesorders/{type}/{orderId} and modification endpoints on that resource as ETag header.
     * @param type The type of the order to delete (required)
     * @param orderId The order number to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The order was deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified order was not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public void salesOrdersDeleteTypeorderId(String type, String orderId) throws ApiException {
        salesOrdersDeleteTypeorderIdWithHttpInfo(type, orderId);
    }

    /**
     * Delete an existing sales order
     * If-Match header represents a version of Sales Order to be modified and must be included in request.  Value of current version is included in GET /salesorders/{type}/{orderId} and modification endpoints on that resource as ETag header.
     * @param type The type of the order to delete (required)
     * @param orderId The order number to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The order was deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified order was not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> salesOrdersDeleteTypeorderIdWithHttpInfo(String type, String orderId) throws ApiException {
        okhttp3.Call localVarCall = salesOrdersDeleteTypeorderIdValidateBeforeCall(type, orderId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an existing sales order (asynchronously)
     * If-Match header represents a version of Sales Order to be modified and must be included in request.  Value of current version is included in GET /salesorders/{type}/{orderId} and modification endpoints on that resource as ETag header.
     * @param type The type of the order to delete (required)
     * @param orderId The order number to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The order was deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified order was not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersDeleteTypeorderIdAsync(String type, String orderId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesOrdersDeleteTypeorderIdValidateBeforeCall(type, orderId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesOrdersGetItemAsyncTypeorderId
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @param expand An optional specification of what details to include about the sales order. The default value if not supplied is \&quot;None\&quot; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersGetItemAsyncTypeorderIdCall(String type, String orderId, List<SalesOrderExpansions> expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/SalesOrders/{type}/{orderId}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesOrdersGetItemAsyncTypeorderIdValidateBeforeCall(String type, String orderId, List<SalesOrderExpansions> expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling salesOrdersGetItemAsyncTypeorderId(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling salesOrdersGetItemAsyncTypeorderId(Async)");
        }

        return salesOrdersGetItemAsyncTypeorderIdCall(type, orderId, expand, _callback);

    }

    /**
     * Gets information about a single sales order
     * The expand query parameter corresponds to sections in the Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderDto.  If an expand value is not specified it will not be filled and returned in the response object.                Sample request:                &#x60;GET /salesorders/SO/000100?expand&#x3D;customer,payment&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @param expand An optional specification of what details to include about the sales order. The default value if not supplied is \&quot;None\&quot; (optional)
     * @return SalesOrderDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public SalesOrderDto salesOrdersGetItemAsyncTypeorderId(String type, String orderId, List<SalesOrderExpansions> expand) throws ApiException {
        ApiResponse<SalesOrderDto> localVarResp = salesOrdersGetItemAsyncTypeorderIdWithHttpInfo(type, orderId, expand);
        return localVarResp.getData();
    }

    /**
     * Gets information about a single sales order
     * The expand query parameter corresponds to sections in the Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderDto.  If an expand value is not specified it will not be filled and returned in the response object.                Sample request:                &#x60;GET /salesorders/SO/000100?expand&#x3D;customer,payment&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @param expand An optional specification of what details to include about the sales order. The default value if not supplied is \&quot;None\&quot; (optional)
     * @return ApiResponse&lt;SalesOrderDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SalesOrderDto> salesOrdersGetItemAsyncTypeorderIdWithHttpInfo(String type, String orderId, List<SalesOrderExpansions> expand) throws ApiException {
        okhttp3.Call localVarCall = salesOrdersGetItemAsyncTypeorderIdValidateBeforeCall(type, orderId, expand, null);
        Type localVarReturnType = new TypeToken<SalesOrderDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets information about a single sales order (asynchronously)
     * The expand query parameter corresponds to sections in the Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderDto.  If an expand value is not specified it will not be filled and returned in the response object.                Sample request:                &#x60;GET /salesorders/SO/000100?expand&#x3D;customer,payment&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @param expand An optional specification of what details to include about the sales order. The default value if not supplied is \&quot;None\&quot; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersGetItemAsyncTypeorderIdAsync(String type, String orderId, List<SalesOrderExpansions> expand, final ApiCallback<SalesOrderDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesOrdersGetItemAsyncTypeorderIdValidateBeforeCall(type, orderId, expand, _callback);
        Type localVarReturnType = new TypeToken<SalesOrderDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesOrdersGetItemCommissionsTypeorderIdcommissions
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderCommissionDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersGetItemCommissionsTypeorderIdcommissionsCall(String type, String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/SalesOrders/{type}/{orderId}/commissions"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesOrdersGetItemCommissionsTypeorderIdcommissionsValidateBeforeCall(String type, String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling salesOrdersGetItemCommissionsTypeorderIdcommissions(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling salesOrdersGetItemCommissionsTypeorderIdcommissions(Async)");
        }

        return salesOrdersGetItemCommissionsTypeorderIdcommissionsCall(type, orderId, _callback);

    }

    /**
     * Gets commission information for a single sales order
     * Sample request:                &#x60;GET /salesorders/SO/000101/commissions&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @return List&lt;SalesOrderCommissionDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderCommissionDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public List<SalesOrderCommissionDto> salesOrdersGetItemCommissionsTypeorderIdcommissions(String type, String orderId) throws ApiException {
        ApiResponse<List<SalesOrderCommissionDto>> localVarResp = salesOrdersGetItemCommissionsTypeorderIdcommissionsWithHttpInfo(type, orderId);
        return localVarResp.getData();
    }

    /**
     * Gets commission information for a single sales order
     * Sample request:                &#x60;GET /salesorders/SO/000101/commissions&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @return ApiResponse&lt;List&lt;SalesOrderCommissionDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderCommissionDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SalesOrderCommissionDto>> salesOrdersGetItemCommissionsTypeorderIdcommissionsWithHttpInfo(String type, String orderId) throws ApiException {
        okhttp3.Call localVarCall = salesOrdersGetItemCommissionsTypeorderIdcommissionsValidateBeforeCall(type, orderId, null);
        Type localVarReturnType = new TypeToken<List<SalesOrderCommissionDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets commission information for a single sales order (asynchronously)
     * Sample request:                &#x60;GET /salesorders/SO/000101/commissions&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderCommissionDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersGetItemCommissionsTypeorderIdcommissionsAsync(String type, String orderId, final ApiCallback<List<SalesOrderCommissionDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesOrdersGetItemCommissionsTypeorderIdcommissionsValidateBeforeCall(type, orderId, _callback);
        Type localVarReturnType = new TypeToken<List<SalesOrderCommissionDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesOrdersGetItemDiscountsTypeorderIddiscounts
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderDiscountDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersGetItemDiscountsTypeorderIddiscountsCall(String type, String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/SalesOrders/{type}/{orderId}/discounts"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesOrdersGetItemDiscountsTypeorderIddiscountsValidateBeforeCall(String type, String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling salesOrdersGetItemDiscountsTypeorderIddiscounts(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling salesOrdersGetItemDiscountsTypeorderIddiscounts(Async)");
        }

        return salesOrdersGetItemDiscountsTypeorderIddiscountsCall(type, orderId, _callback);

    }

    /**
     * Gets discount details information for a single sales order
     * Sample request:                &#x60;GET /salesorders/SO/000101/discounts&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @return List&lt;SalesOrderDiscountDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderDiscountDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public List<SalesOrderDiscountDto> salesOrdersGetItemDiscountsTypeorderIddiscounts(String type, String orderId) throws ApiException {
        ApiResponse<List<SalesOrderDiscountDto>> localVarResp = salesOrdersGetItemDiscountsTypeorderIddiscountsWithHttpInfo(type, orderId);
        return localVarResp.getData();
    }

    /**
     * Gets discount details information for a single sales order
     * Sample request:                &#x60;GET /salesorders/SO/000101/discounts&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @return ApiResponse&lt;List&lt;SalesOrderDiscountDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderDiscountDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SalesOrderDiscountDto>> salesOrdersGetItemDiscountsTypeorderIddiscountsWithHttpInfo(String type, String orderId) throws ApiException {
        okhttp3.Call localVarCall = salesOrdersGetItemDiscountsTypeorderIddiscountsValidateBeforeCall(type, orderId, null);
        Type localVarReturnType = new TypeToken<List<SalesOrderDiscountDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets discount details information for a single sales order (asynchronously)
     * Sample request:                &#x60;GET /salesorders/SO/000101/discounts&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderDiscountDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersGetItemDiscountsTypeorderIddiscountsAsync(String type, String orderId, final ApiCallback<List<SalesOrderDiscountDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesOrdersGetItemDiscountsTypeorderIddiscountsValidateBeforeCall(type, orderId, _callback);
        Type localVarReturnType = new TypeToken<List<SalesOrderDiscountDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesOrdersGetItemLineTypeorderIdlineslineId
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @param lineId The id of the line to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderLineDto object if sales order line is found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible               or the line with the id lineId is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersGetItemLineTypeorderIdlineslineIdCall(String type, String orderId, Integer lineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/SalesOrders/{type}/{orderId}/lines/{lineId}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()))
            .replace("{" + "lineId" + "}", localVarApiClient.escapeString(lineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesOrdersGetItemLineTypeorderIdlineslineIdValidateBeforeCall(String type, String orderId, Integer lineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling salesOrdersGetItemLineTypeorderIdlineslineId(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling salesOrdersGetItemLineTypeorderIdlineslineId(Async)");
        }

        // verify the required parameter 'lineId' is set
        if (lineId == null) {
            throw new ApiException("Missing the required parameter 'lineId' when calling salesOrdersGetItemLineTypeorderIdlineslineId(Async)");
        }

        return salesOrdersGetItemLineTypeorderIdlineslineIdCall(type, orderId, lineId, _callback);

    }

    /**
     * Gets a specific sales order line for a single sales order
     * Sample request:                &#x60;GET /salesorders/SO/000101/lines/1&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @param lineId The id of the line to get (required)
     * @return SalesOrderLineDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderLineDto object if sales order line is found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible               or the line with the id lineId is not found </td><td>  -  </td></tr>
     </table>
     */
    public SalesOrderLineDto salesOrdersGetItemLineTypeorderIdlineslineId(String type, String orderId, Integer lineId) throws ApiException {
        ApiResponse<SalesOrderLineDto> localVarResp = salesOrdersGetItemLineTypeorderIdlineslineIdWithHttpInfo(type, orderId, lineId);
        return localVarResp.getData();
    }

    /**
     * Gets a specific sales order line for a single sales order
     * Sample request:                &#x60;GET /salesorders/SO/000101/lines/1&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @param lineId The id of the line to get (required)
     * @return ApiResponse&lt;SalesOrderLineDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderLineDto object if sales order line is found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible               or the line with the id lineId is not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SalesOrderLineDto> salesOrdersGetItemLineTypeorderIdlineslineIdWithHttpInfo(String type, String orderId, Integer lineId) throws ApiException {
        okhttp3.Call localVarCall = salesOrdersGetItemLineTypeorderIdlineslineIdValidateBeforeCall(type, orderId, lineId, null);
        Type localVarReturnType = new TypeToken<SalesOrderLineDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a specific sales order line for a single sales order (asynchronously)
     * Sample request:                &#x60;GET /salesorders/SO/000101/lines/1&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @param lineId The id of the line to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderLineDto object if sales order line is found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible               or the line with the id lineId is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersGetItemLineTypeorderIdlineslineIdAsync(String type, String orderId, Integer lineId, final ApiCallback<SalesOrderLineDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesOrdersGetItemLineTypeorderIdlineslineIdValidateBeforeCall(type, orderId, lineId, _callback);
        Type localVarReturnType = new TypeToken<SalesOrderLineDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesOrdersGetItemLinesTypeorderIdlines
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @param pageSize The number of lines retrieved per page, defaults to 1000 if not specified (optional, default to 1000)
     * @param pageIndex The zero based page index to retrieve, defaults to 0 if not specified (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Visma.net.ERP.SalesOrders.Api.Dto.PagedResult&#x60;1 object if sales order is found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersGetItemLinesTypeorderIdlinesCall(String type, String orderId, Integer pageSize, Integer pageIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/SalesOrders/{type}/{orderId}/lines"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesOrdersGetItemLinesTypeorderIdlinesValidateBeforeCall(String type, String orderId, Integer pageSize, Integer pageIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling salesOrdersGetItemLinesTypeorderIdlines(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling salesOrdersGetItemLinesTypeorderIdlines(Async)");
        }

        return salesOrdersGetItemLinesTypeorderIdlinesCall(type, orderId, pageSize, pageIndex, _callback);

    }

    /**
     * Gets sales order lines for a single sales order
     * Sample request:                &#x60;GET /salesorders/SO/000101/lines&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @param pageSize The number of lines retrieved per page, defaults to 1000 if not specified (optional, default to 1000)
     * @param pageIndex The zero based page index to retrieve, defaults to 0 if not specified (optional, default to 0)
     * @return SalesOrderLineDtoPagedResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Visma.net.ERP.SalesOrders.Api.Dto.PagedResult&#x60;1 object if sales order is found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public SalesOrderLineDtoPagedResult salesOrdersGetItemLinesTypeorderIdlines(String type, String orderId, Integer pageSize, Integer pageIndex) throws ApiException {
        ApiResponse<SalesOrderLineDtoPagedResult> localVarResp = salesOrdersGetItemLinesTypeorderIdlinesWithHttpInfo(type, orderId, pageSize, pageIndex);
        return localVarResp.getData();
    }

    /**
     * Gets sales order lines for a single sales order
     * Sample request:                &#x60;GET /salesorders/SO/000101/lines&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @param pageSize The number of lines retrieved per page, defaults to 1000 if not specified (optional, default to 1000)
     * @param pageIndex The zero based page index to retrieve, defaults to 0 if not specified (optional, default to 0)
     * @return ApiResponse&lt;SalesOrderLineDtoPagedResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Visma.net.ERP.SalesOrders.Api.Dto.PagedResult&#x60;1 object if sales order is found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SalesOrderLineDtoPagedResult> salesOrdersGetItemLinesTypeorderIdlinesWithHttpInfo(String type, String orderId, Integer pageSize, Integer pageIndex) throws ApiException {
        okhttp3.Call localVarCall = salesOrdersGetItemLinesTypeorderIdlinesValidateBeforeCall(type, orderId, pageSize, pageIndex, null);
        Type localVarReturnType = new TypeToken<SalesOrderLineDtoPagedResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets sales order lines for a single sales order (asynchronously)
     * Sample request:                &#x60;GET /salesorders/SO/000101/lines&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @param pageSize The number of lines retrieved per page, defaults to 1000 if not specified (optional, default to 1000)
     * @param pageIndex The zero based page index to retrieve, defaults to 0 if not specified (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Visma.net.ERP.SalesOrders.Api.Dto.PagedResult&#x60;1 object if sales order is found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersGetItemLinesTypeorderIdlinesAsync(String type, String orderId, Integer pageSize, Integer pageIndex, final ApiCallback<SalesOrderLineDtoPagedResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesOrdersGetItemLinesTypeorderIdlinesValidateBeforeCall(type, orderId, pageSize, pageIndex, _callback);
        Type localVarReturnType = new TypeToken<SalesOrderLineDtoPagedResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesOrdersGetItemRotRutTypeorderIdrotrut
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderRotRutDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersGetItemRotRutTypeorderIdrotrutCall(String type, String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/SalesOrders/{type}/{orderId}/rotrut"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesOrdersGetItemRotRutTypeorderIdrotrutValidateBeforeCall(String type, String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling salesOrdersGetItemRotRutTypeorderIdrotrut(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling salesOrdersGetItemRotRutTypeorderIdrotrut(Async)");
        }

        return salesOrdersGetItemRotRutTypeorderIdrotrutCall(type, orderId, _callback);

    }

    /**
     * Gets ROT/RUT information for a single sales order
     * Sample request:                &#x60;GET /salesorders/SO/000123/rotrut&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @return SalesOrderRotRutDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderRotRutDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public SalesOrderRotRutDto salesOrdersGetItemRotRutTypeorderIdrotrut(String type, String orderId) throws ApiException {
        ApiResponse<SalesOrderRotRutDto> localVarResp = salesOrdersGetItemRotRutTypeorderIdrotrutWithHttpInfo(type, orderId);
        return localVarResp.getData();
    }

    /**
     * Gets ROT/RUT information for a single sales order
     * Sample request:                &#x60;GET /salesorders/SO/000123/rotrut&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @return ApiResponse&lt;SalesOrderRotRutDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderRotRutDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SalesOrderRotRutDto> salesOrdersGetItemRotRutTypeorderIdrotrutWithHttpInfo(String type, String orderId) throws ApiException {
        okhttp3.Call localVarCall = salesOrdersGetItemRotRutTypeorderIdrotrutValidateBeforeCall(type, orderId, null);
        Type localVarReturnType = new TypeToken<SalesOrderRotRutDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets ROT/RUT information for a single sales order (asynchronously)
     * Sample request:                &#x60;GET /salesorders/SO/000123/rotrut&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderRotRutDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersGetItemRotRutTypeorderIdrotrutAsync(String type, String orderId, final ApiCallback<SalesOrderRotRutDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesOrdersGetItemRotRutTypeorderIdrotrutValidateBeforeCall(type, orderId, _callback);
        Type localVarReturnType = new TypeToken<SalesOrderRotRutDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesOrdersGetItemTaxTypeorderIdtax
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderTaxDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersGetItemTaxTypeorderIdtaxCall(String type, String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/SalesOrders/{type}/{orderId}/tax"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesOrdersGetItemTaxTypeorderIdtaxValidateBeforeCall(String type, String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling salesOrdersGetItemTaxTypeorderIdtax(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling salesOrdersGetItemTaxTypeorderIdtax(Async)");
        }

        return salesOrdersGetItemTaxTypeorderIdtaxCall(type, orderId, _callback);

    }

    /**
     * Gets tax information for a single sales order
     * Sample request:                &#x60;GET /salesorders/SO/000101/tax&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @return List&lt;SalesOrderTaxDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderTaxDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public List<SalesOrderTaxDto> salesOrdersGetItemTaxTypeorderIdtax(String type, String orderId) throws ApiException {
        ApiResponse<List<SalesOrderTaxDto>> localVarResp = salesOrdersGetItemTaxTypeorderIdtaxWithHttpInfo(type, orderId);
        return localVarResp.getData();
    }

    /**
     * Gets tax information for a single sales order
     * Sample request:                &#x60;GET /salesorders/SO/000101/tax&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @return ApiResponse&lt;List&lt;SalesOrderTaxDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderTaxDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SalesOrderTaxDto>> salesOrdersGetItemTaxTypeorderIdtaxWithHttpInfo(String type, String orderId) throws ApiException {
        okhttp3.Call localVarCall = salesOrdersGetItemTaxTypeorderIdtaxValidateBeforeCall(type, orderId, null);
        Type localVarReturnType = new TypeToken<List<SalesOrderTaxDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets tax information for a single sales order (asynchronously)
     * Sample request:                &#x60;GET /salesorders/SO/000101/tax&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderTaxDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersGetItemTaxTypeorderIdtaxAsync(String type, String orderId, final ApiCallback<List<SalesOrderTaxDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesOrdersGetItemTaxTypeorderIdtaxValidateBeforeCall(type, orderId, _callback);
        Type localVarReturnType = new TypeToken<List<SalesOrderTaxDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesOrdersGetList
     * @param customerId The customer for which to retrieve orders. If omitted or empty, orders for all customers are included (optional)
     * @param status The order status to include in the result. If omitted or empty, orders with any status are included. (optional)
     * @param modifiedSince A date/time value for filtering when a sales order last changed.  Unless a specific time zone offset is included (e.g. &#39;2012-12-24T12:15:14+02:00&#39;), the date is considered to be in the UTC time zone. (optional)
     * @param pageSize The number of customers retrieved per page (optional, default to 100)
     * @param pageIndex The zero based page index to retrieve (optional, default to 0)
     * @param orderBy The field to order the list by. Can be one of &#x60;created&#x60;, &#x60;lastModified&#x60;, or &#x60;orderId&#x60; followed by an optional sort direction (&#x60;asc&#x60; or &#x60;desc&#x60;), default direction is &#x60;asc&#x60; (ascending) if not present. (optional)
     * @param filter A filter for the list, applied to the orderId (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderListDto found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If &#x60;pageSize&#x60; or &#x60;pageIndex&#x60; is not within the allowed range, or if an invalid &#x60;orderBy&#x60; is specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersGetListCall(String customerId, String status, OffsetDateTime modifiedSince, Integer pageSize, Integer pageIndex, String orderBy, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/SalesOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerId", customerId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (modifiedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedSince", modifiedSince));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesOrdersGetListValidateBeforeCall(String customerId, String status, OffsetDateTime modifiedSince, Integer pageSize, Integer pageIndex, String orderBy, String filter, final ApiCallback _callback) throws ApiException {
        return salesOrdersGetListCall(customerId, status, modifiedSince, pageSize, pageIndex, orderBy, filter, _callback);

    }

    /**
     * Gets a paged list with sales orders of any type
     * Sample requests:                &#x60;GET /salesorders&#x60;                &#x60;GET /salesorders?customerId&#x3D;10000&amp;status&#x3D;Open&amp;pageSize&#x3D;10&#x60;                &#x60;GET /salesorders?orderBy&#x3D;lastModified%20asc&#x60;
     * @param customerId The customer for which to retrieve orders. If omitted or empty, orders for all customers are included (optional)
     * @param status The order status to include in the result. If omitted or empty, orders with any status are included. (optional)
     * @param modifiedSince A date/time value for filtering when a sales order last changed.  Unless a specific time zone offset is included (e.g. &#39;2012-12-24T12:15:14+02:00&#39;), the date is considered to be in the UTC time zone. (optional)
     * @param pageSize The number of customers retrieved per page (optional, default to 100)
     * @param pageIndex The zero based page index to retrieve (optional, default to 0)
     * @param orderBy The field to order the list by. Can be one of &#x60;created&#x60;, &#x60;lastModified&#x60;, or &#x60;orderId&#x60; followed by an optional sort direction (&#x60;asc&#x60; or &#x60;desc&#x60;), default direction is &#x60;asc&#x60; (ascending) if not present. (optional)
     * @param filter A filter for the list, applied to the orderId (optional)
     * @return SalesOrderListDtoPagedResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderListDto found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If &#x60;pageSize&#x60; or &#x60;pageIndex&#x60; is not within the allowed range, or if an invalid &#x60;orderBy&#x60; is specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public SalesOrderListDtoPagedResult salesOrdersGetList(String customerId, String status, OffsetDateTime modifiedSince, Integer pageSize, Integer pageIndex, String orderBy, String filter) throws ApiException {
        ApiResponse<SalesOrderListDtoPagedResult> localVarResp = salesOrdersGetListWithHttpInfo(customerId, status, modifiedSince, pageSize, pageIndex, orderBy, filter);
        return localVarResp.getData();
    }

    /**
     * Gets a paged list with sales orders of any type
     * Sample requests:                &#x60;GET /salesorders&#x60;                &#x60;GET /salesorders?customerId&#x3D;10000&amp;status&#x3D;Open&amp;pageSize&#x3D;10&#x60;                &#x60;GET /salesorders?orderBy&#x3D;lastModified%20asc&#x60;
     * @param customerId The customer for which to retrieve orders. If omitted or empty, orders for all customers are included (optional)
     * @param status The order status to include in the result. If omitted or empty, orders with any status are included. (optional)
     * @param modifiedSince A date/time value for filtering when a sales order last changed.  Unless a specific time zone offset is included (e.g. &#39;2012-12-24T12:15:14+02:00&#39;), the date is considered to be in the UTC time zone. (optional)
     * @param pageSize The number of customers retrieved per page (optional, default to 100)
     * @param pageIndex The zero based page index to retrieve (optional, default to 0)
     * @param orderBy The field to order the list by. Can be one of &#x60;created&#x60;, &#x60;lastModified&#x60;, or &#x60;orderId&#x60; followed by an optional sort direction (&#x60;asc&#x60; or &#x60;desc&#x60;), default direction is &#x60;asc&#x60; (ascending) if not present. (optional)
     * @param filter A filter for the list, applied to the orderId (optional)
     * @return ApiResponse&lt;SalesOrderListDtoPagedResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderListDto found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If &#x60;pageSize&#x60; or &#x60;pageIndex&#x60; is not within the allowed range, or if an invalid &#x60;orderBy&#x60; is specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SalesOrderListDtoPagedResult> salesOrdersGetListWithHttpInfo(String customerId, String status, OffsetDateTime modifiedSince, Integer pageSize, Integer pageIndex, String orderBy, String filter) throws ApiException {
        okhttp3.Call localVarCall = salesOrdersGetListValidateBeforeCall(customerId, status, modifiedSince, pageSize, pageIndex, orderBy, filter, null);
        Type localVarReturnType = new TypeToken<SalesOrderListDtoPagedResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a paged list with sales orders of any type (asynchronously)
     * Sample requests:                &#x60;GET /salesorders&#x60;                &#x60;GET /salesorders?customerId&#x3D;10000&amp;status&#x3D;Open&amp;pageSize&#x3D;10&#x60;                &#x60;GET /salesorders?orderBy&#x3D;lastModified%20asc&#x60;
     * @param customerId The customer for which to retrieve orders. If omitted or empty, orders for all customers are included (optional)
     * @param status The order status to include in the result. If omitted or empty, orders with any status are included. (optional)
     * @param modifiedSince A date/time value for filtering when a sales order last changed.  Unless a specific time zone offset is included (e.g. &#39;2012-12-24T12:15:14+02:00&#39;), the date is considered to be in the UTC time zone. (optional)
     * @param pageSize The number of customers retrieved per page (optional, default to 100)
     * @param pageIndex The zero based page index to retrieve (optional, default to 0)
     * @param orderBy The field to order the list by. Can be one of &#x60;created&#x60;, &#x60;lastModified&#x60;, or &#x60;orderId&#x60; followed by an optional sort direction (&#x60;asc&#x60; or &#x60;desc&#x60;), default direction is &#x60;asc&#x60; (ascending) if not present. (optional)
     * @param filter A filter for the list, applied to the orderId (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderListDto found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If &#x60;pageSize&#x60; or &#x60;pageIndex&#x60; is not within the allowed range, or if an invalid &#x60;orderBy&#x60; is specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersGetListAsync(String customerId, String status, OffsetDateTime modifiedSince, Integer pageSize, Integer pageIndex, String orderBy, String filter, final ApiCallback<SalesOrderListDtoPagedResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesOrdersGetListValidateBeforeCall(customerId, status, modifiedSince, pageSize, pageIndex, orderBy, filter, _callback);
        Type localVarReturnType = new TypeToken<SalesOrderListDtoPagedResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesOrdersGetListType
     * @param type The type of sales orders to get. (required)
     * @param customerId The customer for which to retrieve orders. If omitted or empty, orders for all customers are included (optional)
     * @param status The order status to include in the result. If omitted or empty, orders with any status are included. (optional)
     * @param modifiedSince A date/time value for filtering when a sales order last changed.  Unless a specific time zone offset is included (e.g. &#39;2012-12-24T12:15:14+02:00&#39;), the date is considered to be in the UTC time zone. (optional)
     * @param pageSize The number of customers retrieved per page (optional, default to 100)
     * @param pageIndex The zero based page index to retrieve (optional, default to 0)
     * @param orderBy The field to order the list by. Can be one of &#x60;created&#x60;, &#x60;lastModified&#x60;, or &#x60;orderId&#x60; followed by an optional sort direction (&#x60;asc&#x60; or &#x60;desc&#x60;), default direction is &#x60;asc&#x60; (ascending) if not present. (optional)
     * @param filter A filter for the list, applied to the orderId (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderListDto found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If &#x60;pageSize&#x60; or &#x60;pageIndex&#x60; is not within the allowed range, or if an invalid &#x60;orderBy&#x60; is specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersGetListTypeCall(String type, String customerId, String status, OffsetDateTime modifiedSince, Integer pageSize, Integer pageIndex, String orderBy, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/SalesOrders/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerId", customerId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (modifiedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedSince", modifiedSince));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesOrdersGetListTypeValidateBeforeCall(String type, String customerId, String status, OffsetDateTime modifiedSince, Integer pageSize, Integer pageIndex, String orderBy, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling salesOrdersGetListType(Async)");
        }

        return salesOrdersGetListTypeCall(type, customerId, status, modifiedSince, pageSize, pageIndex, orderBy, filter, _callback);

    }

    /**
     * Gets a paged list with sales orders of a specific type
     * Sample requests:                &#x60;GET /salesorders/SO&#x60;                &#x60;GET /salesorders/SO?customerId&#x3D;10000&amp;status&#x3D;Open&amp;pageSize&#x3D;10&#x60;                &#x60;GET /salesorders/SO?orderBy&#x3D;created%20desc&#x60;
     * @param type The type of sales orders to get. (required)
     * @param customerId The customer for which to retrieve orders. If omitted or empty, orders for all customers are included (optional)
     * @param status The order status to include in the result. If omitted or empty, orders with any status are included. (optional)
     * @param modifiedSince A date/time value for filtering when a sales order last changed.  Unless a specific time zone offset is included (e.g. &#39;2012-12-24T12:15:14+02:00&#39;), the date is considered to be in the UTC time zone. (optional)
     * @param pageSize The number of customers retrieved per page (optional, default to 100)
     * @param pageIndex The zero based page index to retrieve (optional, default to 0)
     * @param orderBy The field to order the list by. Can be one of &#x60;created&#x60;, &#x60;lastModified&#x60;, or &#x60;orderId&#x60; followed by an optional sort direction (&#x60;asc&#x60; or &#x60;desc&#x60;), default direction is &#x60;asc&#x60; (ascending) if not present. (optional)
     * @param filter A filter for the list, applied to the orderId (optional)
     * @return SalesOrderListDtoPagedResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderListDto found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If &#x60;pageSize&#x60; or &#x60;pageIndex&#x60; is not within the allowed range, or if an invalid &#x60;orderBy&#x60; is specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public SalesOrderListDtoPagedResult salesOrdersGetListType(String type, String customerId, String status, OffsetDateTime modifiedSince, Integer pageSize, Integer pageIndex, String orderBy, String filter) throws ApiException {
        ApiResponse<SalesOrderListDtoPagedResult> localVarResp = salesOrdersGetListTypeWithHttpInfo(type, customerId, status, modifiedSince, pageSize, pageIndex, orderBy, filter);
        return localVarResp.getData();
    }

    /**
     * Gets a paged list with sales orders of a specific type
     * Sample requests:                &#x60;GET /salesorders/SO&#x60;                &#x60;GET /salesorders/SO?customerId&#x3D;10000&amp;status&#x3D;Open&amp;pageSize&#x3D;10&#x60;                &#x60;GET /salesorders/SO?orderBy&#x3D;created%20desc&#x60;
     * @param type The type of sales orders to get. (required)
     * @param customerId The customer for which to retrieve orders. If omitted or empty, orders for all customers are included (optional)
     * @param status The order status to include in the result. If omitted or empty, orders with any status are included. (optional)
     * @param modifiedSince A date/time value for filtering when a sales order last changed.  Unless a specific time zone offset is included (e.g. &#39;2012-12-24T12:15:14+02:00&#39;), the date is considered to be in the UTC time zone. (optional)
     * @param pageSize The number of customers retrieved per page (optional, default to 100)
     * @param pageIndex The zero based page index to retrieve (optional, default to 0)
     * @param orderBy The field to order the list by. Can be one of &#x60;created&#x60;, &#x60;lastModified&#x60;, or &#x60;orderId&#x60; followed by an optional sort direction (&#x60;asc&#x60; or &#x60;desc&#x60;), default direction is &#x60;asc&#x60; (ascending) if not present. (optional)
     * @param filter A filter for the list, applied to the orderId (optional)
     * @return ApiResponse&lt;SalesOrderListDtoPagedResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderListDto found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If &#x60;pageSize&#x60; or &#x60;pageIndex&#x60; is not within the allowed range, or if an invalid &#x60;orderBy&#x60; is specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SalesOrderListDtoPagedResult> salesOrdersGetListTypeWithHttpInfo(String type, String customerId, String status, OffsetDateTime modifiedSince, Integer pageSize, Integer pageIndex, String orderBy, String filter) throws ApiException {
        okhttp3.Call localVarCall = salesOrdersGetListTypeValidateBeforeCall(type, customerId, status, modifiedSince, pageSize, pageIndex, orderBy, filter, null);
        Type localVarReturnType = new TypeToken<SalesOrderListDtoPagedResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a paged list with sales orders of a specific type (asynchronously)
     * Sample requests:                &#x60;GET /salesorders/SO&#x60;                &#x60;GET /salesorders/SO?customerId&#x3D;10000&amp;status&#x3D;Open&amp;pageSize&#x3D;10&#x60;                &#x60;GET /salesorders/SO?orderBy&#x3D;created%20desc&#x60;
     * @param type The type of sales orders to get. (required)
     * @param customerId The customer for which to retrieve orders. If omitted or empty, orders for all customers are included (optional)
     * @param status The order status to include in the result. If omitted or empty, orders with any status are included. (optional)
     * @param modifiedSince A date/time value for filtering when a sales order last changed.  Unless a specific time zone offset is included (e.g. &#39;2012-12-24T12:15:14+02:00&#39;), the date is considered to be in the UTC time zone. (optional)
     * @param pageSize The number of customers retrieved per page (optional, default to 100)
     * @param pageIndex The zero based page index to retrieve (optional, default to 0)
     * @param orderBy The field to order the list by. Can be one of &#x60;created&#x60;, &#x60;lastModified&#x60;, or &#x60;orderId&#x60; followed by an optional sort direction (&#x60;asc&#x60; or &#x60;desc&#x60;), default direction is &#x60;asc&#x60; (ascending) if not present. (optional)
     * @param filter A filter for the list, applied to the orderId (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderListDto found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If &#x60;pageSize&#x60; or &#x60;pageIndex&#x60; is not within the allowed range, or if an invalid &#x60;orderBy&#x60; is specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersGetListTypeAsync(String type, String customerId, String status, OffsetDateTime modifiedSince, Integer pageSize, Integer pageIndex, String orderBy, String filter, final ApiCallback<SalesOrderListDtoPagedResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesOrdersGetListTypeValidateBeforeCall(type, customerId, status, modifiedSince, pageSize, pageIndex, orderBy, filter, _callback);
        Type localVarReturnType = new TypeToken<SalesOrderListDtoPagedResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesOrdersGetSalesOrderShipmentTypeorderIdshipment
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderShipmentDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersGetSalesOrderShipmentTypeorderIdshipmentCall(String type, String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/SalesOrders/{type}/{orderId}/shipment"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesOrdersGetSalesOrderShipmentTypeorderIdshipmentValidateBeforeCall(String type, String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling salesOrdersGetSalesOrderShipmentTypeorderIdshipment(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling salesOrdersGetSalesOrderShipmentTypeorderIdshipment(Async)");
        }

        return salesOrdersGetSalesOrderShipmentTypeorderIdshipmentCall(type, orderId, _callback);

    }

    /**
     * Gets shipment information for a single sales order
     * Sample request:                &#x60;GET /salesorders/SO/000101/shipment&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @return List&lt;SalesOrderShipmentDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderShipmentDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public List<SalesOrderShipmentDto> salesOrdersGetSalesOrderShipmentTypeorderIdshipment(String type, String orderId) throws ApiException {
        ApiResponse<List<SalesOrderShipmentDto>> localVarResp = salesOrdersGetSalesOrderShipmentTypeorderIdshipmentWithHttpInfo(type, orderId);
        return localVarResp.getData();
    }

    /**
     * Gets shipment information for a single sales order
     * Sample request:                &#x60;GET /salesorders/SO/000101/shipment&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @return ApiResponse&lt;List&lt;SalesOrderShipmentDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderShipmentDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SalesOrderShipmentDto>> salesOrdersGetSalesOrderShipmentTypeorderIdshipmentWithHttpInfo(String type, String orderId) throws ApiException {
        okhttp3.Call localVarCall = salesOrdersGetSalesOrderShipmentTypeorderIdshipmentValidateBeforeCall(type, orderId, null);
        Type localVarReturnType = new TypeToken<List<SalesOrderShipmentDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets shipment information for a single sales order (asynchronously)
     * Sample request:                &#x60;GET /salesorders/SO/000101/shipment&#x60;
     * @param type The type of sales order to get (required)
     * @param orderId The id of the sales order to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderShipmentDto if found and accessible </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If an order with type type and orderId is not found, or is not accessible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersGetSalesOrderShipmentTypeorderIdshipmentAsync(String type, String orderId, final ApiCallback<List<SalesOrderShipmentDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesOrdersGetSalesOrderShipmentTypeorderIdshipmentValidateBeforeCall(type, orderId, _callback);
        Type localVarReturnType = new TypeToken<List<SalesOrderShipmentDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesOrdersPatchLinesTypeorderIdlines
     * @param type The type of the order to make modifications to (required)
     * @param orderId The order number to make modifications to (required)
     * @param patchSalesOrderLinesCommand Data to change about the sales order lines (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The order was modified successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any of values in command is outside the allowed range               See &lt;a href&#x3D;\&quot;/swagger/v3/swagger.json#components/x-visma-erp-error-codes\&quot;&gt;#/components/x-visma-erp-error-codes&lt;/a&gt; for the full list of error codes. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order specified was not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Order version does not match with If-Match header </td><td>  -  </td></tr>
        <tr><td> 428 </td><td> If-Match header was not supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersPatchLinesTypeorderIdlinesCall(String type, String orderId, PatchSalesOrderLinesCommand patchSalesOrderLinesCommand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchSalesOrderLinesCommand;

        // create path and map variables
        String localVarPath = "/api/v3/SalesOrders/{type}/{orderId}/lines"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesOrdersPatchLinesTypeorderIdlinesValidateBeforeCall(String type, String orderId, PatchSalesOrderLinesCommand patchSalesOrderLinesCommand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling salesOrdersPatchLinesTypeorderIdlines(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling salesOrdersPatchLinesTypeorderIdlines(Async)");
        }

        return salesOrdersPatchLinesTypeorderIdlinesCall(type, orderId, patchSalesOrderLinesCommand, _callback);

    }

    /**
     * Make modifications to an existing sales order lines
     * If-Match header represents a version of Sales Order to be modified and must be included in request.  Value of current version is included in GET /salesorders/{type}/{orderId} and modification endpoints on that resource as ETag header.
     * @param type The type of the order to make modifications to (required)
     * @param orderId The order number to make modifications to (required)
     * @param patchSalesOrderLinesCommand Data to change about the sales order lines (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The order was modified successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any of values in command is outside the allowed range               See &lt;a href&#x3D;\&quot;/swagger/v3/swagger.json#components/x-visma-erp-error-codes\&quot;&gt;#/components/x-visma-erp-error-codes&lt;/a&gt; for the full list of error codes. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order specified was not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Order version does not match with If-Match header </td><td>  -  </td></tr>
        <tr><td> 428 </td><td> If-Match header was not supplied </td><td>  -  </td></tr>
     </table>
     */
    public void salesOrdersPatchLinesTypeorderIdlines(String type, String orderId, PatchSalesOrderLinesCommand patchSalesOrderLinesCommand) throws ApiException {
        salesOrdersPatchLinesTypeorderIdlinesWithHttpInfo(type, orderId, patchSalesOrderLinesCommand);
    }

    /**
     * Make modifications to an existing sales order lines
     * If-Match header represents a version of Sales Order to be modified and must be included in request.  Value of current version is included in GET /salesorders/{type}/{orderId} and modification endpoints on that resource as ETag header.
     * @param type The type of the order to make modifications to (required)
     * @param orderId The order number to make modifications to (required)
     * @param patchSalesOrderLinesCommand Data to change about the sales order lines (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The order was modified successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any of values in command is outside the allowed range               See &lt;a href&#x3D;\&quot;/swagger/v3/swagger.json#components/x-visma-erp-error-codes\&quot;&gt;#/components/x-visma-erp-error-codes&lt;/a&gt; for the full list of error codes. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order specified was not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Order version does not match with If-Match header </td><td>  -  </td></tr>
        <tr><td> 428 </td><td> If-Match header was not supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> salesOrdersPatchLinesTypeorderIdlinesWithHttpInfo(String type, String orderId, PatchSalesOrderLinesCommand patchSalesOrderLinesCommand) throws ApiException {
        okhttp3.Call localVarCall = salesOrdersPatchLinesTypeorderIdlinesValidateBeforeCall(type, orderId, patchSalesOrderLinesCommand, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Make modifications to an existing sales order lines (asynchronously)
     * If-Match header represents a version of Sales Order to be modified and must be included in request.  Value of current version is included in GET /salesorders/{type}/{orderId} and modification endpoints on that resource as ETag header.
     * @param type The type of the order to make modifications to (required)
     * @param orderId The order number to make modifications to (required)
     * @param patchSalesOrderLinesCommand Data to change about the sales order lines (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The order was modified successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any of values in command is outside the allowed range               See &lt;a href&#x3D;\&quot;/swagger/v3/swagger.json#components/x-visma-erp-error-codes\&quot;&gt;#/components/x-visma-erp-error-codes&lt;/a&gt; for the full list of error codes. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order specified was not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Order version does not match with If-Match header </td><td>  -  </td></tr>
        <tr><td> 428 </td><td> If-Match header was not supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersPatchLinesTypeorderIdlinesAsync(String type, String orderId, PatchSalesOrderLinesCommand patchSalesOrderLinesCommand, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesOrdersPatchLinesTypeorderIdlinesValidateBeforeCall(type, orderId, patchSalesOrderLinesCommand, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesOrdersPatchTypeorderId
     * @param type The type of the order to make modifications to (required)
     * @param orderId The order number to make modifications to (required)
     * @param patchSalesOrderCommand Data to change about the sales order (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The order was modified successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any of values in command is outside the allowed range               See &lt;a href&#x3D;\&quot;/swagger/v3/swagger.json#components/x-visma-erp-error-codes\&quot;&gt;#/components/x-visma-erp-error-codes&lt;/a&gt; for the full list of error codes. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order specified was not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Order version does not match with If-Match header </td><td>  -  </td></tr>
        <tr><td> 428 </td><td> If-Match header was not supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersPatchTypeorderIdCall(String type, String orderId, PatchSalesOrderCommand patchSalesOrderCommand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchSalesOrderCommand;

        // create path and map variables
        String localVarPath = "/api/v3/SalesOrders/{type}/{orderId}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesOrdersPatchTypeorderIdValidateBeforeCall(String type, String orderId, PatchSalesOrderCommand patchSalesOrderCommand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling salesOrdersPatchTypeorderId(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling salesOrdersPatchTypeorderId(Async)");
        }

        return salesOrdersPatchTypeorderIdCall(type, orderId, patchSalesOrderCommand, _callback);

    }

    /**
     * Make modifications to an existing sales order
     * If-Match header represents a version of Sales Order to be modified and must be included in request.  Value of current version is included in GET /salesorders/{type}/{orderId} and modification endpoints on that resource as ETag header.
     * @param type The type of the order to make modifications to (required)
     * @param orderId The order number to make modifications to (required)
     * @param patchSalesOrderCommand Data to change about the sales order (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The order was modified successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any of values in command is outside the allowed range               See &lt;a href&#x3D;\&quot;/swagger/v3/swagger.json#components/x-visma-erp-error-codes\&quot;&gt;#/components/x-visma-erp-error-codes&lt;/a&gt; for the full list of error codes. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order specified was not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Order version does not match with If-Match header </td><td>  -  </td></tr>
        <tr><td> 428 </td><td> If-Match header was not supplied </td><td>  -  </td></tr>
     </table>
     */
    public void salesOrdersPatchTypeorderId(String type, String orderId, PatchSalesOrderCommand patchSalesOrderCommand) throws ApiException {
        salesOrdersPatchTypeorderIdWithHttpInfo(type, orderId, patchSalesOrderCommand);
    }

    /**
     * Make modifications to an existing sales order
     * If-Match header represents a version of Sales Order to be modified and must be included in request.  Value of current version is included in GET /salesorders/{type}/{orderId} and modification endpoints on that resource as ETag header.
     * @param type The type of the order to make modifications to (required)
     * @param orderId The order number to make modifications to (required)
     * @param patchSalesOrderCommand Data to change about the sales order (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The order was modified successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any of values in command is outside the allowed range               See &lt;a href&#x3D;\&quot;/swagger/v3/swagger.json#components/x-visma-erp-error-codes\&quot;&gt;#/components/x-visma-erp-error-codes&lt;/a&gt; for the full list of error codes. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order specified was not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Order version does not match with If-Match header </td><td>  -  </td></tr>
        <tr><td> 428 </td><td> If-Match header was not supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> salesOrdersPatchTypeorderIdWithHttpInfo(String type, String orderId, PatchSalesOrderCommand patchSalesOrderCommand) throws ApiException {
        okhttp3.Call localVarCall = salesOrdersPatchTypeorderIdValidateBeforeCall(type, orderId, patchSalesOrderCommand, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Make modifications to an existing sales order (asynchronously)
     * If-Match header represents a version of Sales Order to be modified and must be included in request.  Value of current version is included in GET /salesorders/{type}/{orderId} and modification endpoints on that resource as ETag header.
     * @param type The type of the order to make modifications to (required)
     * @param orderId The order number to make modifications to (required)
     * @param patchSalesOrderCommand Data to change about the sales order (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The order was modified successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any of values in command is outside the allowed range               See &lt;a href&#x3D;\&quot;/swagger/v3/swagger.json#components/x-visma-erp-error-codes\&quot;&gt;#/components/x-visma-erp-error-codes&lt;/a&gt; for the full list of error codes. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order specified was not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Order version does not match with If-Match header </td><td>  -  </td></tr>
        <tr><td> 428 </td><td> If-Match header was not supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesOrdersPatchTypeorderIdAsync(String type, String orderId, PatchSalesOrderCommand patchSalesOrderCommand, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesOrdersPatchTypeorderIdValidateBeforeCall(type, orderId, patchSalesOrderCommand, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
