/*
 * Visma.net.ERP.SalesOrders.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.14.784
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SalesOrderTotalsDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:31.300103-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesOrderTotalsDto {
  public static final String SERIALIZED_NAME_COST_TOTAL = "costTotal";
  @SerializedName(SERIALIZED_NAME_COST_TOTAL)
  private Double costTotal;

  public static final String SERIALIZED_NAME_COST_TOTAL_IN_BASE_CURRENCY = "costTotalInBaseCurrency";
  @SerializedName(SERIALIZED_NAME_COST_TOTAL_IN_BASE_CURRENCY)
  private Double costTotalInBaseCurrency;

  public static final String SERIALIZED_NAME_DISCOUNT_TOTAL = "discountTotal";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_TOTAL)
  private Double discountTotal;

  public static final String SERIALIZED_NAME_DISCOUNT_TOTAL_IN_BASE_CURRENCY = "discountTotalInBaseCurrency";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_TOTAL_IN_BASE_CURRENCY)
  private Double discountTotalInBaseCurrency;

  public static final String SERIALIZED_NAME_FREIGHT_COST = "freightCost";
  @SerializedName(SERIALIZED_NAME_FREIGHT_COST)
  private Double freightCost;

  public static final String SERIALIZED_NAME_FREIGHT_COST_IN_BASE_CURRENCY = "freightCostInBaseCurrency";
  @SerializedName(SERIALIZED_NAME_FREIGHT_COST_IN_BASE_CURRENCY)
  private Double freightCostInBaseCurrency;

  public static final String SERIALIZED_NAME_FREIGHT_TOTAL = "freightTotal";
  @SerializedName(SERIALIZED_NAME_FREIGHT_TOTAL)
  private Double freightTotal;

  public static final String SERIALIZED_NAME_FREIGHT_TOTAL_IN_BASE_CURRENCY = "freightTotalInBaseCurrency";
  @SerializedName(SERIALIZED_NAME_FREIGHT_TOTAL_IN_BASE_CURRENCY)
  private Double freightTotalInBaseCurrency;

  public static final String SERIALIZED_NAME_ORDER_TOTAL = "orderTotal";
  @SerializedName(SERIALIZED_NAME_ORDER_TOTAL)
  private Double orderTotal;

  public static final String SERIALIZED_NAME_ORDER_TOTAL_IN_BASE_CURRENCY = "orderTotalInBaseCurrency";
  @SerializedName(SERIALIZED_NAME_ORDER_TOTAL_IN_BASE_CURRENCY)
  private Double orderTotalInBaseCurrency;

  public static final String SERIALIZED_NAME_TAX_EXEMPT_TOTAL = "taxExemptTotal";
  @SerializedName(SERIALIZED_NAME_TAX_EXEMPT_TOTAL)
  private Double taxExemptTotal;

  public static final String SERIALIZED_NAME_TAX_EXEMPT_TOTAL_IN_BASE_CURRENCY = "taxExemptTotalInBaseCurrency";
  @SerializedName(SERIALIZED_NAME_TAX_EXEMPT_TOTAL_IN_BASE_CURRENCY)
  private Double taxExemptTotalInBaseCurrency;

  public static final String SERIALIZED_NAME_TAX_TOTAL = "taxTotal";
  @SerializedName(SERIALIZED_NAME_TAX_TOTAL)
  private Double taxTotal;

  public static final String SERIALIZED_NAME_TAX_TOTAL_IN_BASE_CURRENCY = "taxTotalInBaseCurrency";
  @SerializedName(SERIALIZED_NAME_TAX_TOTAL_IN_BASE_CURRENCY)
  private Double taxTotalInBaseCurrency;

  public static final String SERIALIZED_NAME_TAXABLE_TOTAL = "taxableTotal";
  @SerializedName(SERIALIZED_NAME_TAXABLE_TOTAL)
  private Double taxableTotal;

  public static final String SERIALIZED_NAME_TAXABLE_TOTAL_IN_BASE_CURRENCY = "taxableTotalInBaseCurrency";
  @SerializedName(SERIALIZED_NAME_TAXABLE_TOTAL_IN_BASE_CURRENCY)
  private Double taxableTotalInBaseCurrency;

  public static final String SERIALIZED_NAME_UNBILLED_AMOUNT = "unbilledAmount";
  @SerializedName(SERIALIZED_NAME_UNBILLED_AMOUNT)
  private Double unbilledAmount;

  public static final String SERIALIZED_NAME_UNBILLED_AMOUNT_IN_BASE_CURRENCY = "unbilledAmountInBaseCurrency";
  @SerializedName(SERIALIZED_NAME_UNBILLED_AMOUNT_IN_BASE_CURRENCY)
  private Double unbilledAmountInBaseCurrency;

  public static final String SERIALIZED_NAME_UNSHIPPED_AMOUNT = "unshippedAmount";
  @SerializedName(SERIALIZED_NAME_UNSHIPPED_AMOUNT)
  private Double unshippedAmount;

  public static final String SERIALIZED_NAME_UNSHIPPED_AMOUNT_IN_BASE_CURRENCY = "unshippedAmountInBaseCurrency";
  @SerializedName(SERIALIZED_NAME_UNSHIPPED_AMOUNT_IN_BASE_CURRENCY)
  private Double unshippedAmountInBaseCurrency;

  public SalesOrderTotalsDto() {
  }

  public SalesOrderTotalsDto(
     Double freightCostInBaseCurrency
  ) {
    this();
    this.freightCostInBaseCurrency = freightCostInBaseCurrency;
  }

  public SalesOrderTotalsDto costTotal(Double costTotal) {
    this.costTotal = costTotal;
    return this;
  }

  /**
   * The total of the costs on the lines of the sales order. How the &#x60;costTotal&#x60; is calculated is dependent on the option &#x60;useReplacementCostForMarginAndProfit&#x60;.  If this option is &#x60;true&#x60; the &#x60;costTotal&#x60; will be calculated based on the &#x60;replacementUnitCost&#x60;.  If this option is &#x60;false&#x60;, the &#x60;costTotal&#x60; will be calculate based on &#x60;unitCost&#x60;
   * @return costTotal
   */
  @javax.annotation.Nullable
  public Double getCostTotal() {
    return costTotal;
  }

  public void setCostTotal(Double costTotal) {
    this.costTotal = costTotal;
  }


  public SalesOrderTotalsDto costTotalInBaseCurrency(Double costTotalInBaseCurrency) {
    this.costTotalInBaseCurrency = costTotalInBaseCurrency;
    return this;
  }

  /**
   * The total of the costs on the lines of the sales order in base currency.
   * @return costTotalInBaseCurrency
   */
  @javax.annotation.Nullable
  public Double getCostTotalInBaseCurrency() {
    return costTotalInBaseCurrency;
  }

  public void setCostTotalInBaseCurrency(Double costTotalInBaseCurrency) {
    this.costTotalInBaseCurrency = costTotalInBaseCurrency;
  }


  public SalesOrderTotalsDto discountTotal(Double discountTotal) {
    this.discountTotal = discountTotal;
    return this;
  }

  /**
   * The discount total
   * @return discountTotal
   */
  @javax.annotation.Nullable
  public Double getDiscountTotal() {
    return discountTotal;
  }

  public void setDiscountTotal(Double discountTotal) {
    this.discountTotal = discountTotal;
  }


  public SalesOrderTotalsDto discountTotalInBaseCurrency(Double discountTotalInBaseCurrency) {
    this.discountTotalInBaseCurrency = discountTotalInBaseCurrency;
    return this;
  }

  /**
   * The discount total in base currency
   * @return discountTotalInBaseCurrency
   */
  @javax.annotation.Nullable
  public Double getDiscountTotalInBaseCurrency() {
    return discountTotalInBaseCurrency;
  }

  public void setDiscountTotalInBaseCurrency(Double discountTotalInBaseCurrency) {
    this.discountTotalInBaseCurrency = discountTotalInBaseCurrency;
  }


  public SalesOrderTotalsDto freightCost(Double freightCost) {
    this.freightCost = freightCost;
    return this;
  }

  /**
   * The freight cost calculated for the sales order. Not applicable for transfer order types.
   * @return freightCost
   */
  @javax.annotation.Nullable
  public Double getFreightCost() {
    return freightCost;
  }

  public void setFreightCost(Double freightCost) {
    this.freightCost = freightCost;
  }


  /**
   * The freight cost calculated for the sales order in base currency. Not applicable for transfer order types.
   * @return freightCostInBaseCurrency
   */
  @javax.annotation.Nullable
  public Double getFreightCostInBaseCurrency() {
    return freightCostInBaseCurrency;
  }



  public SalesOrderTotalsDto freightTotal(Double freightTotal) {
    this.freightTotal = freightTotal;
    return this;
  }

  /**
   * The freight amount calculated in accordance with the shipping terms. Not applicable for transfer order types.
   * @return freightTotal
   */
  @javax.annotation.Nullable
  public Double getFreightTotal() {
    return freightTotal;
  }

  public void setFreightTotal(Double freightTotal) {
    this.freightTotal = freightTotal;
  }


  public SalesOrderTotalsDto freightTotalInBaseCurrency(Double freightTotalInBaseCurrency) {
    this.freightTotalInBaseCurrency = freightTotalInBaseCurrency;
    return this;
  }

  /**
   * The freight amount calculated in accordance with the shipping terms in base currency. Not applicable for transfer order types.
   * @return freightTotalInBaseCurrency
   */
  @javax.annotation.Nullable
  public Double getFreightTotalInBaseCurrency() {
    return freightTotalInBaseCurrency;
  }

  public void setFreightTotalInBaseCurrency(Double freightTotalInBaseCurrency) {
    this.freightTotalInBaseCurrency = freightTotalInBaseCurrency;
  }


  public SalesOrderTotalsDto orderTotal(Double orderTotal) {
    this.orderTotal = orderTotal;
    return this;
  }

  /**
   * The order total
   * @return orderTotal
   */
  @javax.annotation.Nullable
  public Double getOrderTotal() {
    return orderTotal;
  }

  public void setOrderTotal(Double orderTotal) {
    this.orderTotal = orderTotal;
  }


  public SalesOrderTotalsDto orderTotalInBaseCurrency(Double orderTotalInBaseCurrency) {
    this.orderTotalInBaseCurrency = orderTotalInBaseCurrency;
    return this;
  }

  /**
   * The order total in base currency
   * @return orderTotalInBaseCurrency
   */
  @javax.annotation.Nullable
  public Double getOrderTotalInBaseCurrency() {
    return orderTotalInBaseCurrency;
  }

  public void setOrderTotalInBaseCurrency(Double orderTotalInBaseCurrency) {
    this.orderTotalInBaseCurrency = orderTotalInBaseCurrency;
  }


  public SalesOrderTotalsDto taxExemptTotal(Double taxExemptTotal) {
    this.taxExemptTotal = taxExemptTotal;
    return this;
  }

  /**
   * The VAT exempt total
   * @return taxExemptTotal
   */
  @javax.annotation.Nullable
  public Double getTaxExemptTotal() {
    return taxExemptTotal;
  }

  public void setTaxExemptTotal(Double taxExemptTotal) {
    this.taxExemptTotal = taxExemptTotal;
  }


  public SalesOrderTotalsDto taxExemptTotalInBaseCurrency(Double taxExemptTotalInBaseCurrency) {
    this.taxExemptTotalInBaseCurrency = taxExemptTotalInBaseCurrency;
    return this;
  }

  /**
   * The VAT exempt total in base currency
   * @return taxExemptTotalInBaseCurrency
   */
  @javax.annotation.Nullable
  public Double getTaxExemptTotalInBaseCurrency() {
    return taxExemptTotalInBaseCurrency;
  }

  public void setTaxExemptTotalInBaseCurrency(Double taxExemptTotalInBaseCurrency) {
    this.taxExemptTotalInBaseCurrency = taxExemptTotalInBaseCurrency;
  }


  public SalesOrderTotalsDto taxTotal(Double taxTotal) {
    this.taxTotal = taxTotal;
    return this;
  }

  /**
   * The tax total
   * @return taxTotal
   */
  @javax.annotation.Nullable
  public Double getTaxTotal() {
    return taxTotal;
  }

  public void setTaxTotal(Double taxTotal) {
    this.taxTotal = taxTotal;
  }


  public SalesOrderTotalsDto taxTotalInBaseCurrency(Double taxTotalInBaseCurrency) {
    this.taxTotalInBaseCurrency = taxTotalInBaseCurrency;
    return this;
  }

  /**
   * The tax total in base currency
   * @return taxTotalInBaseCurrency
   */
  @javax.annotation.Nullable
  public Double getTaxTotalInBaseCurrency() {
    return taxTotalInBaseCurrency;
  }

  public void setTaxTotalInBaseCurrency(Double taxTotalInBaseCurrency) {
    this.taxTotalInBaseCurrency = taxTotalInBaseCurrency;
  }


  public SalesOrderTotalsDto taxableTotal(Double taxableTotal) {
    this.taxableTotal = taxableTotal;
    return this;
  }

  /**
   * The VAT taxable total
   * @return taxableTotal
   */
  @javax.annotation.Nullable
  public Double getTaxableTotal() {
    return taxableTotal;
  }

  public void setTaxableTotal(Double taxableTotal) {
    this.taxableTotal = taxableTotal;
  }


  public SalesOrderTotalsDto taxableTotalInBaseCurrency(Double taxableTotalInBaseCurrency) {
    this.taxableTotalInBaseCurrency = taxableTotalInBaseCurrency;
    return this;
  }

  /**
   * The VAT taxable in base currency
   * @return taxableTotalInBaseCurrency
   */
  @javax.annotation.Nullable
  public Double getTaxableTotalInBaseCurrency() {
    return taxableTotalInBaseCurrency;
  }

  public void setTaxableTotalInBaseCurrency(Double taxableTotalInBaseCurrency) {
    this.taxableTotalInBaseCurrency = taxableTotalInBaseCurrency;
  }


  public SalesOrderTotalsDto unbilledAmount(Double unbilledAmount) {
    this.unbilledAmount = unbilledAmount;
    return this;
  }

  /**
   * The sum of unbilled amounts for the lines
   * @return unbilledAmount
   */
  @javax.annotation.Nullable
  public Double getUnbilledAmount() {
    return unbilledAmount;
  }

  public void setUnbilledAmount(Double unbilledAmount) {
    this.unbilledAmount = unbilledAmount;
  }


  public SalesOrderTotalsDto unbilledAmountInBaseCurrency(Double unbilledAmountInBaseCurrency) {
    this.unbilledAmountInBaseCurrency = unbilledAmountInBaseCurrency;
    return this;
  }

  /**
   * The sum of unbilled amounts for the lines in base currency
   * @return unbilledAmountInBaseCurrency
   */
  @javax.annotation.Nullable
  public Double getUnbilledAmountInBaseCurrency() {
    return unbilledAmountInBaseCurrency;
  }

  public void setUnbilledAmountInBaseCurrency(Double unbilledAmountInBaseCurrency) {
    this.unbilledAmountInBaseCurrency = unbilledAmountInBaseCurrency;
  }


  public SalesOrderTotalsDto unshippedAmount(Double unshippedAmount) {
    this.unshippedAmount = unshippedAmount;
    return this;
  }

  /**
   * The sum of unshipped amounts for the lines
   * @return unshippedAmount
   */
  @javax.annotation.Nullable
  public Double getUnshippedAmount() {
    return unshippedAmount;
  }

  public void setUnshippedAmount(Double unshippedAmount) {
    this.unshippedAmount = unshippedAmount;
  }


  public SalesOrderTotalsDto unshippedAmountInBaseCurrency(Double unshippedAmountInBaseCurrency) {
    this.unshippedAmountInBaseCurrency = unshippedAmountInBaseCurrency;
    return this;
  }

  /**
   * The sum of unshipped amounts for the lines in base currency
   * @return unshippedAmountInBaseCurrency
   */
  @javax.annotation.Nullable
  public Double getUnshippedAmountInBaseCurrency() {
    return unshippedAmountInBaseCurrency;
  }

  public void setUnshippedAmountInBaseCurrency(Double unshippedAmountInBaseCurrency) {
    this.unshippedAmountInBaseCurrency = unshippedAmountInBaseCurrency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesOrderTotalsDto salesOrderTotalsDto = (SalesOrderTotalsDto) o;
    return Objects.equals(this.costTotal, salesOrderTotalsDto.costTotal) &&
        Objects.equals(this.costTotalInBaseCurrency, salesOrderTotalsDto.costTotalInBaseCurrency) &&
        Objects.equals(this.discountTotal, salesOrderTotalsDto.discountTotal) &&
        Objects.equals(this.discountTotalInBaseCurrency, salesOrderTotalsDto.discountTotalInBaseCurrency) &&
        Objects.equals(this.freightCost, salesOrderTotalsDto.freightCost) &&
        Objects.equals(this.freightCostInBaseCurrency, salesOrderTotalsDto.freightCostInBaseCurrency) &&
        Objects.equals(this.freightTotal, salesOrderTotalsDto.freightTotal) &&
        Objects.equals(this.freightTotalInBaseCurrency, salesOrderTotalsDto.freightTotalInBaseCurrency) &&
        Objects.equals(this.orderTotal, salesOrderTotalsDto.orderTotal) &&
        Objects.equals(this.orderTotalInBaseCurrency, salesOrderTotalsDto.orderTotalInBaseCurrency) &&
        Objects.equals(this.taxExemptTotal, salesOrderTotalsDto.taxExemptTotal) &&
        Objects.equals(this.taxExemptTotalInBaseCurrency, salesOrderTotalsDto.taxExemptTotalInBaseCurrency) &&
        Objects.equals(this.taxTotal, salesOrderTotalsDto.taxTotal) &&
        Objects.equals(this.taxTotalInBaseCurrency, salesOrderTotalsDto.taxTotalInBaseCurrency) &&
        Objects.equals(this.taxableTotal, salesOrderTotalsDto.taxableTotal) &&
        Objects.equals(this.taxableTotalInBaseCurrency, salesOrderTotalsDto.taxableTotalInBaseCurrency) &&
        Objects.equals(this.unbilledAmount, salesOrderTotalsDto.unbilledAmount) &&
        Objects.equals(this.unbilledAmountInBaseCurrency, salesOrderTotalsDto.unbilledAmountInBaseCurrency) &&
        Objects.equals(this.unshippedAmount, salesOrderTotalsDto.unshippedAmount) &&
        Objects.equals(this.unshippedAmountInBaseCurrency, salesOrderTotalsDto.unshippedAmountInBaseCurrency);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(costTotal, costTotalInBaseCurrency, discountTotal, discountTotalInBaseCurrency, freightCost, freightCostInBaseCurrency, freightTotal, freightTotalInBaseCurrency, orderTotal, orderTotalInBaseCurrency, taxExemptTotal, taxExemptTotalInBaseCurrency, taxTotal, taxTotalInBaseCurrency, taxableTotal, taxableTotalInBaseCurrency, unbilledAmount, unbilledAmountInBaseCurrency, unshippedAmount, unshippedAmountInBaseCurrency);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesOrderTotalsDto {\n");
    sb.append("    costTotal: ").append(toIndentedString(costTotal)).append("\n");
    sb.append("    costTotalInBaseCurrency: ").append(toIndentedString(costTotalInBaseCurrency)).append("\n");
    sb.append("    discountTotal: ").append(toIndentedString(discountTotal)).append("\n");
    sb.append("    discountTotalInBaseCurrency: ").append(toIndentedString(discountTotalInBaseCurrency)).append("\n");
    sb.append("    freightCost: ").append(toIndentedString(freightCost)).append("\n");
    sb.append("    freightCostInBaseCurrency: ").append(toIndentedString(freightCostInBaseCurrency)).append("\n");
    sb.append("    freightTotal: ").append(toIndentedString(freightTotal)).append("\n");
    sb.append("    freightTotalInBaseCurrency: ").append(toIndentedString(freightTotalInBaseCurrency)).append("\n");
    sb.append("    orderTotal: ").append(toIndentedString(orderTotal)).append("\n");
    sb.append("    orderTotalInBaseCurrency: ").append(toIndentedString(orderTotalInBaseCurrency)).append("\n");
    sb.append("    taxExemptTotal: ").append(toIndentedString(taxExemptTotal)).append("\n");
    sb.append("    taxExemptTotalInBaseCurrency: ").append(toIndentedString(taxExemptTotalInBaseCurrency)).append("\n");
    sb.append("    taxTotal: ").append(toIndentedString(taxTotal)).append("\n");
    sb.append("    taxTotalInBaseCurrency: ").append(toIndentedString(taxTotalInBaseCurrency)).append("\n");
    sb.append("    taxableTotal: ").append(toIndentedString(taxableTotal)).append("\n");
    sb.append("    taxableTotalInBaseCurrency: ").append(toIndentedString(taxableTotalInBaseCurrency)).append("\n");
    sb.append("    unbilledAmount: ").append(toIndentedString(unbilledAmount)).append("\n");
    sb.append("    unbilledAmountInBaseCurrency: ").append(toIndentedString(unbilledAmountInBaseCurrency)).append("\n");
    sb.append("    unshippedAmount: ").append(toIndentedString(unshippedAmount)).append("\n");
    sb.append("    unshippedAmountInBaseCurrency: ").append(toIndentedString(unshippedAmountInBaseCurrency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("costTotal");
    openapiFields.add("costTotalInBaseCurrency");
    openapiFields.add("discountTotal");
    openapiFields.add("discountTotalInBaseCurrency");
    openapiFields.add("freightCost");
    openapiFields.add("freightCostInBaseCurrency");
    openapiFields.add("freightTotal");
    openapiFields.add("freightTotalInBaseCurrency");
    openapiFields.add("orderTotal");
    openapiFields.add("orderTotalInBaseCurrency");
    openapiFields.add("taxExemptTotal");
    openapiFields.add("taxExemptTotalInBaseCurrency");
    openapiFields.add("taxTotal");
    openapiFields.add("taxTotalInBaseCurrency");
    openapiFields.add("taxableTotal");
    openapiFields.add("taxableTotalInBaseCurrency");
    openapiFields.add("unbilledAmount");
    openapiFields.add("unbilledAmountInBaseCurrency");
    openapiFields.add("unshippedAmount");
    openapiFields.add("unshippedAmountInBaseCurrency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesOrderTotalsDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesOrderTotalsDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesOrderTotalsDto is not found in the empty JSON string", SalesOrderTotalsDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesOrderTotalsDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesOrderTotalsDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesOrderTotalsDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesOrderTotalsDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesOrderTotalsDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesOrderTotalsDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesOrderTotalsDto>() {
           @Override
           public void write(JsonWriter out, SalesOrderTotalsDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesOrderTotalsDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesOrderTotalsDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesOrderTotalsDto
   * @throws IOException if the JSON string is invalid with respect to SalesOrderTotalsDto
   */
  public static SalesOrderTotalsDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesOrderTotalsDto.class);
  }

  /**
   * Convert an instance of SalesOrderTotalsDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

