/**
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecord::OAIRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecord::OAIRecord() {
    this->initializeModel();
}

OAIRecord::~OAIRecord() {}

void OAIRecord::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_is_primary_isSet = false;
    m_is_primary_isValid = false;

    m_last_verification_date_isSet = false;
    m_last_verification_date_isValid = false;

    m_public_title_isSet = false;
    m_public_title_isValid = false;

    m_recruitment_status_isSet = false;
    m_recruitment_status_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_trial_id_isSet = false;
    m_trial_id_isValid = false;

    m_trial_url_isSet = false;
    m_trial_url_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecord::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_is_primary_isValid = ::OpenAPI::fromJsonValue(m_is_primary, json[QString("is_primary")]);
    m_is_primary_isSet = !json[QString("is_primary")].isNull() && m_is_primary_isValid;

    m_last_verification_date_isValid = ::OpenAPI::fromJsonValue(m_last_verification_date, json[QString("last_verification_date")]);
    m_last_verification_date_isSet = !json[QString("last_verification_date")].isNull() && m_last_verification_date_isValid;

    m_public_title_isValid = ::OpenAPI::fromJsonValue(m_public_title, json[QString("public_title")]);
    m_public_title_isSet = !json[QString("public_title")].isNull() && m_public_title_isValid;

    m_recruitment_status_isValid = ::OpenAPI::fromJsonValue(m_recruitment_status, json[QString("recruitment_status")]);
    m_recruitment_status_isSet = !json[QString("recruitment_status")].isNull() && m_recruitment_status_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("source_id")]);
    m_source_id_isSet = !json[QString("source_id")].isNull() && m_source_id_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(m_source_url, json[QString("source_url")]);
    m_source_url_isSet = !json[QString("source_url")].isNull() && m_source_url_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_trial_id_isValid = ::OpenAPI::fromJsonValue(m_trial_id, json[QString("trial_id")]);
    m_trial_id_isSet = !json[QString("trial_id")].isNull() && m_trial_id_isValid;

    m_trial_url_isValid = ::OpenAPI::fromJsonValue(m_trial_url, json[QString("trial_url")]);
    m_trial_url_isSet = !json[QString("trial_url")].isNull() && m_trial_url_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identifiers_isSet) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_is_primary_isSet) {
        obj.insert(QString("is_primary"), ::OpenAPI::toJsonValue(m_is_primary));
    }
    if (m_last_verification_date_isSet) {
        obj.insert(QString("last_verification_date"), ::OpenAPI::toJsonValue(m_last_verification_date));
    }
    if (m_public_title_isSet) {
        obj.insert(QString("public_title"), ::OpenAPI::toJsonValue(m_public_title));
    }
    if (m_recruitment_status_isSet) {
        obj.insert(QString("recruitment_status"), ::OpenAPI::toJsonValue(m_recruitment_status));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("source_id"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_source_url_isSet) {
        obj.insert(QString("source_url"), ::OpenAPI::toJsonValue(m_source_url));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_trial_id_isSet) {
        obj.insert(QString("trial_id"), ::OpenAPI::toJsonValue(m_trial_id));
    }
    if (m_trial_url_isSet) {
        obj.insert(QString("trial_url"), ::OpenAPI::toJsonValue(m_trial_url));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QDateTime OAIRecord::getCreatedAt() const {
    return m_created_at;
}
void OAIRecord::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIRecord::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIRecord::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIRecord::getId() const {
    return m_id;
}
void OAIRecord::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRecord::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRecord::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAIRecord::getIdentifiers() const {
    return m_identifiers;
}
void OAIRecord::setIdentifiers(const OAIObject &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAIRecord::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAIRecord::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

bool OAIRecord::isIsPrimary() const {
    return m_is_primary;
}
void OAIRecord::setIsPrimary(const bool &is_primary) {
    m_is_primary = is_primary;
    m_is_primary_isSet = true;
}

bool OAIRecord::is_is_primary_Set() const{
    return m_is_primary_isSet;
}

bool OAIRecord::is_is_primary_Valid() const{
    return m_is_primary_isValid;
}

QDateTime OAIRecord::getLastVerificationDate() const {
    return m_last_verification_date;
}
void OAIRecord::setLastVerificationDate(const QDateTime &last_verification_date) {
    m_last_verification_date = last_verification_date;
    m_last_verification_date_isSet = true;
}

bool OAIRecord::is_last_verification_date_Set() const{
    return m_last_verification_date_isSet;
}

bool OAIRecord::is_last_verification_date_Valid() const{
    return m_last_verification_date_isValid;
}

QString OAIRecord::getPublicTitle() const {
    return m_public_title;
}
void OAIRecord::setPublicTitle(const QString &public_title) {
    m_public_title = public_title;
    m_public_title_isSet = true;
}

bool OAIRecord::is_public_title_Set() const{
    return m_public_title_isSet;
}

bool OAIRecord::is_public_title_Valid() const{
    return m_public_title_isValid;
}

QString OAIRecord::getRecruitmentStatus() const {
    return m_recruitment_status;
}
void OAIRecord::setRecruitmentStatus(const QString &recruitment_status) {
    m_recruitment_status = recruitment_status;
    m_recruitment_status_isSet = true;
}

bool OAIRecord::is_recruitment_status_Set() const{
    return m_recruitment_status_isSet;
}

bool OAIRecord::is_recruitment_status_Valid() const{
    return m_recruitment_status_isValid;
}

OAISource OAIRecord::getSource() const {
    return m_source;
}
void OAIRecord::setSource(const OAISource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIRecord::is_source_Set() const{
    return m_source_isSet;
}

bool OAIRecord::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIRecord::getSourceId() const {
    return m_source_id;
}
void OAIRecord::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIRecord::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIRecord::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIRecord::getSourceUrl() const {
    return m_source_url;
}
void OAIRecord::setSourceUrl(const QString &source_url) {
    m_source_url = source_url;
    m_source_url_isSet = true;
}

bool OAIRecord::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAIRecord::is_source_url_Valid() const{
    return m_source_url_isValid;
}

QString OAIRecord::getStatus() const {
    return m_status;
}
void OAIRecord::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRecord::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRecord::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRecord::getTrialId() const {
    return m_trial_id;
}
void OAIRecord::setTrialId(const QString &trial_id) {
    m_trial_id = trial_id;
    m_trial_id_isSet = true;
}

bool OAIRecord::is_trial_id_Set() const{
    return m_trial_id_isSet;
}

bool OAIRecord::is_trial_id_Valid() const{
    return m_trial_id_isValid;
}

QString OAIRecord::getTrialUrl() const {
    return m_trial_url;
}
void OAIRecord::setTrialUrl(const QString &trial_url) {
    m_trial_url = trial_url;
    m_trial_url_isSet = true;
}

bool OAIRecord::is_trial_url_Set() const{
    return m_trial_url_isSet;
}

bool OAIRecord::is_trial_url_Valid() const{
    return m_trial_url_isValid;
}

QDateTime OAIRecord::getUpdatedAt() const {
    return m_updated_at;
}
void OAIRecord::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIRecord::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIRecord::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIRecord::getUrl() const {
    return m_url;
}
void OAIRecord::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIRecord::is_url_Set() const{
    return m_url_isSet;
}

bool OAIRecord::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_verification_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recruitment_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_id_isValid && m_public_title_isValid && m_source_isValid && m_source_url_isValid && m_trial_id_isValid && m_trial_url_isValid && m_updated_at_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
