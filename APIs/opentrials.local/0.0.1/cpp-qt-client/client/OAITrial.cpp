/**
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrial::OAITrial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrial::OAITrial() {
    this->initializeModel();
}

OAITrial::~OAITrial() {}

void OAITrial::initializeModel() {

    m_age_range_isSet = false;
    m_age_range_isValid = false;

    m_brief_summary_isSet = false;
    m_brief_summary_isValid = false;

    m_completion_date_isSet = false;
    m_completion_date_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_discrepancies_isSet = false;
    m_discrepancies_isValid = false;

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_has_published_results_isSet = false;
    m_has_published_results_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_interventions_isSet = false;
    m_interventions_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_organisations_isSet = false;
    m_organisations_isValid = false;

    m_persons_isSet = false;
    m_persons_isValid = false;

    m_public_title_isSet = false;
    m_public_title_isValid = false;

    m_publications_isSet = false;
    m_publications_isValid = false;

    m_records_isSet = false;
    m_records_isValid = false;

    m_recruitment_status_isSet = false;
    m_recruitment_status_isValid = false;

    m_registration_date_isSet = false;
    m_registration_date_isValid = false;

    m_results_exemption_date_isSet = false;
    m_results_exemption_date_isValid = false;

    m_risks_of_bias_isSet = false;
    m_risks_of_bias_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_study_phase_isSet = false;
    m_study_phase_isValid = false;

    m_target_sample_size_isSet = false;
    m_target_sample_size_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAITrial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrial::fromJsonObject(QJsonObject json) {

    m_age_range_isValid = ::OpenAPI::fromJsonValue(m_age_range, json[QString("age_range")]);
    m_age_range_isSet = !json[QString("age_range")].isNull() && m_age_range_isValid;

    m_brief_summary_isValid = ::OpenAPI::fromJsonValue(m_brief_summary, json[QString("brief_summary")]);
    m_brief_summary_isSet = !json[QString("brief_summary")].isNull() && m_brief_summary_isValid;

    m_completion_date_isValid = ::OpenAPI::fromJsonValue(m_completion_date, json[QString("completion_date")]);
    m_completion_date_isSet = !json[QString("completion_date")].isNull() && m_completion_date_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_discrepancies_isValid = ::OpenAPI::fromJsonValue(m_discrepancies, json[QString("discrepancies")]);
    m_discrepancies_isSet = !json[QString("discrepancies")].isNull() && m_discrepancies_isValid;

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_has_published_results_isValid = ::OpenAPI::fromJsonValue(m_has_published_results, json[QString("has_published_results")]);
    m_has_published_results_isSet = !json[QString("has_published_results")].isNull() && m_has_published_results_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_interventions_isValid = ::OpenAPI::fromJsonValue(m_interventions, json[QString("interventions")]);
    m_interventions_isSet = !json[QString("interventions")].isNull() && m_interventions_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_organisations_isValid = ::OpenAPI::fromJsonValue(m_organisations, json[QString("organisations")]);
    m_organisations_isSet = !json[QString("organisations")].isNull() && m_organisations_isValid;

    m_persons_isValid = ::OpenAPI::fromJsonValue(m_persons, json[QString("persons")]);
    m_persons_isSet = !json[QString("persons")].isNull() && m_persons_isValid;

    m_public_title_isValid = ::OpenAPI::fromJsonValue(m_public_title, json[QString("public_title")]);
    m_public_title_isSet = !json[QString("public_title")].isNull() && m_public_title_isValid;

    m_publications_isValid = ::OpenAPI::fromJsonValue(m_publications, json[QString("publications")]);
    m_publications_isSet = !json[QString("publications")].isNull() && m_publications_isValid;

    m_records_isValid = ::OpenAPI::fromJsonValue(m_records, json[QString("records")]);
    m_records_isSet = !json[QString("records")].isNull() && m_records_isValid;

    m_recruitment_status_isValid = ::OpenAPI::fromJsonValue(m_recruitment_status, json[QString("recruitment_status")]);
    m_recruitment_status_isSet = !json[QString("recruitment_status")].isNull() && m_recruitment_status_isValid;

    m_registration_date_isValid = ::OpenAPI::fromJsonValue(m_registration_date, json[QString("registration_date")]);
    m_registration_date_isSet = !json[QString("registration_date")].isNull() && m_registration_date_isValid;

    m_results_exemption_date_isValid = ::OpenAPI::fromJsonValue(m_results_exemption_date, json[QString("results_exemption_date")]);
    m_results_exemption_date_isSet = !json[QString("results_exemption_date")].isNull() && m_results_exemption_date_isValid;

    m_risks_of_bias_isValid = ::OpenAPI::fromJsonValue(m_risks_of_bias, json[QString("risks_of_bias")]);
    m_risks_of_bias_isSet = !json[QString("risks_of_bias")].isNull() && m_risks_of_bias_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("source_id")]);
    m_source_id_isSet = !json[QString("source_id")].isNull() && m_source_id_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_study_phase_isValid = ::OpenAPI::fromJsonValue(m_study_phase, json[QString("study_phase")]);
    m_study_phase_isSet = !json[QString("study_phase")].isNull() && m_study_phase_isValid;

    m_target_sample_size_isValid = ::OpenAPI::fromJsonValue(m_target_sample_size, json[QString("target_sample_size")]);
    m_target_sample_size_isSet = !json[QString("target_sample_size")].isNull() && m_target_sample_size_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAITrial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrial::asJsonObject() const {
    QJsonObject obj;
    if (m_age_range.isSet()) {
        obj.insert(QString("age_range"), ::OpenAPI::toJsonValue(m_age_range));
    }
    if (m_brief_summary_isSet) {
        obj.insert(QString("brief_summary"), ::OpenAPI::toJsonValue(m_brief_summary));
    }
    if (m_completion_date_isSet) {
        obj.insert(QString("completion_date"), ::OpenAPI::toJsonValue(m_completion_date));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_discrepancies_isSet) {
        obj.insert(QString("discrepancies"), ::OpenAPI::toJsonValue(m_discrepancies));
    }
    if (m_documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_has_published_results_isSet) {
        obj.insert(QString("has_published_results"), ::OpenAPI::toJsonValue(m_has_published_results));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identifiers_isSet) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_interventions.size() > 0) {
        obj.insert(QString("interventions"), ::OpenAPI::toJsonValue(m_interventions));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_organisations.size() > 0) {
        obj.insert(QString("organisations"), ::OpenAPI::toJsonValue(m_organisations));
    }
    if (m_persons.size() > 0) {
        obj.insert(QString("persons"), ::OpenAPI::toJsonValue(m_persons));
    }
    if (m_public_title_isSet) {
        obj.insert(QString("public_title"), ::OpenAPI::toJsonValue(m_public_title));
    }
    if (m_publications.size() > 0) {
        obj.insert(QString("publications"), ::OpenAPI::toJsonValue(m_publications));
    }
    if (m_records.size() > 0) {
        obj.insert(QString("records"), ::OpenAPI::toJsonValue(m_records));
    }
    if (m_recruitment_status_isSet) {
        obj.insert(QString("recruitment_status"), ::OpenAPI::toJsonValue(m_recruitment_status));
    }
    if (m_registration_date_isSet) {
        obj.insert(QString("registration_date"), ::OpenAPI::toJsonValue(m_registration_date));
    }
    if (m_results_exemption_date_isSet) {
        obj.insert(QString("results_exemption_date"), ::OpenAPI::toJsonValue(m_results_exemption_date));
    }
    if (m_risks_of_bias.size() > 0) {
        obj.insert(QString("risks_of_bias"), ::OpenAPI::toJsonValue(m_risks_of_bias));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("source_id"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_sources_isSet) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_study_phase.size() > 0) {
        obj.insert(QString("study_phase"), ::OpenAPI::toJsonValue(m_study_phase));
    }
    if (m_target_sample_size_isSet) {
        obj.insert(QString("target_sample_size"), ::OpenAPI::toJsonValue(m_target_sample_size));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAITrial_age_range OAITrial::getAgeRange() const {
    return m_age_range;
}
void OAITrial::setAgeRange(const OAITrial_age_range &age_range) {
    m_age_range = age_range;
    m_age_range_isSet = true;
}

bool OAITrial::is_age_range_Set() const{
    return m_age_range_isSet;
}

bool OAITrial::is_age_range_Valid() const{
    return m_age_range_isValid;
}

QString OAITrial::getBriefSummary() const {
    return m_brief_summary;
}
void OAITrial::setBriefSummary(const QString &brief_summary) {
    m_brief_summary = brief_summary;
    m_brief_summary_isSet = true;
}

bool OAITrial::is_brief_summary_Set() const{
    return m_brief_summary_isSet;
}

bool OAITrial::is_brief_summary_Valid() const{
    return m_brief_summary_isValid;
}

QDateTime OAITrial::getCompletionDate() const {
    return m_completion_date;
}
void OAITrial::setCompletionDate(const QDateTime &completion_date) {
    m_completion_date = completion_date;
    m_completion_date_isSet = true;
}

bool OAITrial::is_completion_date_Set() const{
    return m_completion_date_isSet;
}

bool OAITrial::is_completion_date_Valid() const{
    return m_completion_date_isValid;
}

QList<OAICondition> OAITrial::getConditions() const {
    return m_conditions;
}
void OAITrial::setConditions(const QList<OAICondition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAITrial::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAITrial::is_conditions_Valid() const{
    return m_conditions_isValid;
}

OAIObject OAITrial::getDiscrepancies() const {
    return m_discrepancies;
}
void OAITrial::setDiscrepancies(const OAIObject &discrepancies) {
    m_discrepancies = discrepancies;
    m_discrepancies_isSet = true;
}

bool OAITrial::is_discrepancies_Set() const{
    return m_discrepancies_isSet;
}

bool OAITrial::is_discrepancies_Valid() const{
    return m_discrepancies_isValid;
}

QList<OAIDocumentSummary> OAITrial::getDocuments() const {
    return m_documents;
}
void OAITrial::setDocuments(const QList<OAIDocumentSummary> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAITrial::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAITrial::is_documents_Valid() const{
    return m_documents_isValid;
}

QString OAITrial::getGender() const {
    return m_gender;
}
void OAITrial::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAITrial::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAITrial::is_gender_Valid() const{
    return m_gender_isValid;
}

bool OAITrial::isHasPublishedResults() const {
    return m_has_published_results;
}
void OAITrial::setHasPublishedResults(const bool &has_published_results) {
    m_has_published_results = has_published_results;
    m_has_published_results_isSet = true;
}

bool OAITrial::is_has_published_results_Set() const{
    return m_has_published_results_isSet;
}

bool OAITrial::is_has_published_results_Valid() const{
    return m_has_published_results_isValid;
}

QString OAITrial::getId() const {
    return m_id;
}
void OAITrial::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITrial::is_id_Set() const{
    return m_id_isSet;
}

bool OAITrial::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAITrial::getIdentifiers() const {
    return m_identifiers;
}
void OAITrial::setIdentifiers(const OAIObject &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAITrial::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAITrial::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

QList<OAIIntervention> OAITrial::getInterventions() const {
    return m_interventions;
}
void OAITrial::setInterventions(const QList<OAIIntervention> &interventions) {
    m_interventions = interventions;
    m_interventions_isSet = true;
}

bool OAITrial::is_interventions_Set() const{
    return m_interventions_isSet;
}

bool OAITrial::is_interventions_Valid() const{
    return m_interventions_isValid;
}

QList<OAITrialLocation> OAITrial::getLocations() const {
    return m_locations;
}
void OAITrial::setLocations(const QList<OAITrialLocation> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAITrial::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAITrial::is_locations_Valid() const{
    return m_locations_isValid;
}

QList<OAITrialOrganisation> OAITrial::getOrganisations() const {
    return m_organisations;
}
void OAITrial::setOrganisations(const QList<OAITrialOrganisation> &organisations) {
    m_organisations = organisations;
    m_organisations_isSet = true;
}

bool OAITrial::is_organisations_Set() const{
    return m_organisations_isSet;
}

bool OAITrial::is_organisations_Valid() const{
    return m_organisations_isValid;
}

QList<OAITrialPerson> OAITrial::getPersons() const {
    return m_persons;
}
void OAITrial::setPersons(const QList<OAITrialPerson> &persons) {
    m_persons = persons;
    m_persons_isSet = true;
}

bool OAITrial::is_persons_Set() const{
    return m_persons_isSet;
}

bool OAITrial::is_persons_Valid() const{
    return m_persons_isValid;
}

QString OAITrial::getPublicTitle() const {
    return m_public_title;
}
void OAITrial::setPublicTitle(const QString &public_title) {
    m_public_title = public_title;
    m_public_title_isSet = true;
}

bool OAITrial::is_public_title_Set() const{
    return m_public_title_isSet;
}

bool OAITrial::is_public_title_Valid() const{
    return m_public_title_isValid;
}

QList<OAIPublicationSummary> OAITrial::getPublications() const {
    return m_publications;
}
void OAITrial::setPublications(const QList<OAIPublicationSummary> &publications) {
    m_publications = publications;
    m_publications_isSet = true;
}

bool OAITrial::is_publications_Set() const{
    return m_publications_isSet;
}

bool OAITrial::is_publications_Valid() const{
    return m_publications_isValid;
}

QList<OAIRecordSummary> OAITrial::getRecords() const {
    return m_records;
}
void OAITrial::setRecords(const QList<OAIRecordSummary> &records) {
    m_records = records;
    m_records_isSet = true;
}

bool OAITrial::is_records_Set() const{
    return m_records_isSet;
}

bool OAITrial::is_records_Valid() const{
    return m_records_isValid;
}

QString OAITrial::getRecruitmentStatus() const {
    return m_recruitment_status;
}
void OAITrial::setRecruitmentStatus(const QString &recruitment_status) {
    m_recruitment_status = recruitment_status;
    m_recruitment_status_isSet = true;
}

bool OAITrial::is_recruitment_status_Set() const{
    return m_recruitment_status_isSet;
}

bool OAITrial::is_recruitment_status_Valid() const{
    return m_recruitment_status_isValid;
}

QDateTime OAITrial::getRegistrationDate() const {
    return m_registration_date;
}
void OAITrial::setRegistrationDate(const QDateTime &registration_date) {
    m_registration_date = registration_date;
    m_registration_date_isSet = true;
}

bool OAITrial::is_registration_date_Set() const{
    return m_registration_date_isSet;
}

bool OAITrial::is_registration_date_Valid() const{
    return m_registration_date_isValid;
}

QDateTime OAITrial::getResultsExemptionDate() const {
    return m_results_exemption_date;
}
void OAITrial::setResultsExemptionDate(const QDateTime &results_exemption_date) {
    m_results_exemption_date = results_exemption_date;
    m_results_exemption_date_isSet = true;
}

bool OAITrial::is_results_exemption_date_Set() const{
    return m_results_exemption_date_isSet;
}

bool OAITrial::is_results_exemption_date_Valid() const{
    return m_results_exemption_date_isValid;
}

QList<OAIRiskOfBias> OAITrial::getRisksOfBias() const {
    return m_risks_of_bias;
}
void OAITrial::setRisksOfBias(const QList<OAIRiskOfBias> &risks_of_bias) {
    m_risks_of_bias = risks_of_bias;
    m_risks_of_bias_isSet = true;
}

bool OAITrial::is_risks_of_bias_Set() const{
    return m_risks_of_bias_isSet;
}

bool OAITrial::is_risks_of_bias_Valid() const{
    return m_risks_of_bias_isValid;
}

QString OAITrial::getSourceId() const {
    return m_source_id;
}
void OAITrial::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAITrial::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAITrial::is_source_id_Valid() const{
    return m_source_id_isValid;
}

OAIObject OAITrial::getSources() const {
    return m_sources;
}
void OAITrial::setSources(const OAIObject &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAITrial::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAITrial::is_sources_Valid() const{
    return m_sources_isValid;
}

QString OAITrial::getStatus() const {
    return m_status;
}
void OAITrial::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITrial::is_status_Set() const{
    return m_status_isSet;
}

bool OAITrial::is_status_Valid() const{
    return m_status_isValid;
}

QList<QString> OAITrial::getStudyPhase() const {
    return m_study_phase;
}
void OAITrial::setStudyPhase(const QList<QString> &study_phase) {
    m_study_phase = study_phase;
    m_study_phase_isSet = true;
}

bool OAITrial::is_study_phase_Set() const{
    return m_study_phase_isSet;
}

bool OAITrial::is_study_phase_Valid() const{
    return m_study_phase_isValid;
}

qint32 OAITrial::getTargetSampleSize() const {
    return m_target_sample_size;
}
void OAITrial::setTargetSampleSize(const qint32 &target_sample_size) {
    m_target_sample_size = target_sample_size;
    m_target_sample_size_isSet = true;
}

bool OAITrial::is_target_sample_size_Set() const{
    return m_target_sample_size_isSet;
}

bool OAITrial::is_target_sample_size_Valid() const{
    return m_target_sample_size_isValid;
}

QString OAITrial::getUrl() const {
    return m_url;
}
void OAITrial::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITrial::is_url_Set() const{
    return m_url_isSet;
}

bool OAITrial::is_url_Valid() const{
    return m_url_isValid;
}

bool OAITrial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_age_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_brief_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_discrepancies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_published_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interventions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_organisations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_persons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_records.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recruitment_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results_exemption_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risks_of_bias.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_study_phase.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_sample_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrial::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_interventions_isValid && m_locations_isValid && m_organisations_isValid && m_persons_isValid && m_public_title_isValid && m_publications_isValid && m_records_isValid && m_risks_of_bias_isValid && m_sources_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
