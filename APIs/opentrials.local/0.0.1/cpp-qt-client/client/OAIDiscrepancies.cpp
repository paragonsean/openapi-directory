/**
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscrepancies.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscrepancies::OAIDiscrepancies(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscrepancies::OAIDiscrepancies() {
    this->initializeModel();
}

OAIDiscrepancies::~OAIDiscrepancies() {}

void OAIDiscrepancies::initializeModel() {

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_has_published_results_isSet = false;
    m_has_published_results_isValid = false;

    m_recruitment_status_isSet = false;
    m_recruitment_status_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_sample_size_isSet = false;
    m_target_sample_size_isValid = false;
}

void OAIDiscrepancies::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiscrepancies::fromJsonObject(QJsonObject json) {

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_has_published_results_isValid = ::OpenAPI::fromJsonValue(m_has_published_results, json[QString("has_published_results")]);
    m_has_published_results_isSet = !json[QString("has_published_results")].isNull() && m_has_published_results_isValid;

    m_recruitment_status_isValid = ::OpenAPI::fromJsonValue(m_recruitment_status, json[QString("recruitment_status")]);
    m_recruitment_status_isSet = !json[QString("recruitment_status")].isNull() && m_recruitment_status_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_target_sample_size_isValid = ::OpenAPI::fromJsonValue(m_target_sample_size, json[QString("target_sample_size")]);
    m_target_sample_size_isSet = !json[QString("target_sample_size")].isNull() && m_target_sample_size_isValid;
}

QString OAIDiscrepancies::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiscrepancies::asJsonObject() const {
    QJsonObject obj;
    if (m_gender.size() > 0) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_has_published_results.size() > 0) {
        obj.insert(QString("has_published_results"), ::OpenAPI::toJsonValue(m_has_published_results));
    }
    if (m_recruitment_status.size() > 0) {
        obj.insert(QString("recruitment_status"), ::OpenAPI::toJsonValue(m_recruitment_status));
    }
    if (m_status.size() > 0) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target_sample_size.size() > 0) {
        obj.insert(QString("target_sample_size"), ::OpenAPI::toJsonValue(m_target_sample_size));
    }
    return obj;
}

QList<OAIDiscrepantFieldString> OAIDiscrepancies::getGender() const {
    return m_gender;
}
void OAIDiscrepancies::setGender(const QList<OAIDiscrepantFieldString> &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIDiscrepancies::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIDiscrepancies::is_gender_Valid() const{
    return m_gender_isValid;
}

QList<OAIDiscrepantFieldBoolean> OAIDiscrepancies::getHasPublishedResults() const {
    return m_has_published_results;
}
void OAIDiscrepancies::setHasPublishedResults(const QList<OAIDiscrepantFieldBoolean> &has_published_results) {
    m_has_published_results = has_published_results;
    m_has_published_results_isSet = true;
}

bool OAIDiscrepancies::is_has_published_results_Set() const{
    return m_has_published_results_isSet;
}

bool OAIDiscrepancies::is_has_published_results_Valid() const{
    return m_has_published_results_isValid;
}

QList<OAIDiscrepantFieldString> OAIDiscrepancies::getRecruitmentStatus() const {
    return m_recruitment_status;
}
void OAIDiscrepancies::setRecruitmentStatus(const QList<OAIDiscrepantFieldString> &recruitment_status) {
    m_recruitment_status = recruitment_status;
    m_recruitment_status_isSet = true;
}

bool OAIDiscrepancies::is_recruitment_status_Set() const{
    return m_recruitment_status_isSet;
}

bool OAIDiscrepancies::is_recruitment_status_Valid() const{
    return m_recruitment_status_isValid;
}

QList<OAIDiscrepantFieldString> OAIDiscrepancies::getStatus() const {
    return m_status;
}
void OAIDiscrepancies::setStatus(const QList<OAIDiscrepantFieldString> &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDiscrepancies::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDiscrepancies::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIDiscrepantFieldInteger> OAIDiscrepancies::getTargetSampleSize() const {
    return m_target_sample_size;
}
void OAIDiscrepancies::setTargetSampleSize(const QList<OAIDiscrepantFieldInteger> &target_sample_size) {
    m_target_sample_size = target_sample_size;
    m_target_sample_size_isSet = true;
}

bool OAIDiscrepancies::is_target_sample_size_Set() const{
    return m_target_sample_size_isSet;
}

bool OAIDiscrepancies::is_target_sample_size_Valid() const{
    return m_target_sample_size_isValid;
}

bool OAIDiscrepancies::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gender.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_published_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recruitment_status.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_sample_size.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiscrepancies::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
