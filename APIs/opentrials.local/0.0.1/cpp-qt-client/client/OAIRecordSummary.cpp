/**
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecordSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecordSummary::OAIRecordSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecordSummary::OAIRecordSummary() {
    this->initializeModel();
}

OAIRecordSummary::~OAIRecordSummary() {}

void OAIRecordSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_primary_isSet = false;
    m_is_primary_isValid = false;

    m_last_verification_date_isSet = false;
    m_last_verification_date_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIRecordSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecordSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_primary_isValid = ::OpenAPI::fromJsonValue(m_is_primary, json[QString("is_primary")]);
    m_is_primary_isSet = !json[QString("is_primary")].isNull() && m_is_primary_isValid;

    m_last_verification_date_isValid = ::OpenAPI::fromJsonValue(m_last_verification_date, json[QString("last_verification_date")]);
    m_last_verification_date_isSet = !json[QString("last_verification_date")].isNull() && m_last_verification_date_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("source_id")]);
    m_source_id_isSet = !json[QString("source_id")].isNull() && m_source_id_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIRecordSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecordSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_primary_isSet) {
        obj.insert(QString("is_primary"), ::OpenAPI::toJsonValue(m_is_primary));
    }
    if (m_last_verification_date_isSet) {
        obj.insert(QString("last_verification_date"), ::OpenAPI::toJsonValue(m_last_verification_date));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("source_id"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIRecordSummary::getId() const {
    return m_id;
}
void OAIRecordSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRecordSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRecordSummary::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIRecordSummary::isIsPrimary() const {
    return m_is_primary;
}
void OAIRecordSummary::setIsPrimary(const bool &is_primary) {
    m_is_primary = is_primary;
    m_is_primary_isSet = true;
}

bool OAIRecordSummary::is_is_primary_Set() const{
    return m_is_primary_isSet;
}

bool OAIRecordSummary::is_is_primary_Valid() const{
    return m_is_primary_isValid;
}

QDateTime OAIRecordSummary::getLastVerificationDate() const {
    return m_last_verification_date;
}
void OAIRecordSummary::setLastVerificationDate(const QDateTime &last_verification_date) {
    m_last_verification_date = last_verification_date;
    m_last_verification_date_isSet = true;
}

bool OAIRecordSummary::is_last_verification_date_Set() const{
    return m_last_verification_date_isSet;
}

bool OAIRecordSummary::is_last_verification_date_Valid() const{
    return m_last_verification_date_isValid;
}

QString OAIRecordSummary::getSourceId() const {
    return m_source_id;
}
void OAIRecordSummary::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIRecordSummary::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIRecordSummary::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIRecordSummary::getUrl() const {
    return m_url;
}
void OAIRecordSummary::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIRecordSummary::is_url_Set() const{
    return m_url_isSet;
}

bool OAIRecordSummary::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIRecordSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_verification_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecordSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_source_id_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
