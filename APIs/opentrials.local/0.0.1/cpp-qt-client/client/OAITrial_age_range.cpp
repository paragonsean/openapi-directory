/**
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrial_age_range.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrial_age_range::OAITrial_age_range(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrial_age_range::OAITrial_age_range() {
    this->initializeModel();
}

OAITrial_age_range::~OAITrial_age_range() {}

void OAITrial_age_range::initializeModel() {

    m_max_age_isSet = false;
    m_max_age_isValid = false;

    m_min_age_isSet = false;
    m_min_age_isValid = false;
}

void OAITrial_age_range::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrial_age_range::fromJsonObject(QJsonObject json) {

    m_max_age_isValid = ::OpenAPI::fromJsonValue(m_max_age, json[QString("max_age")]);
    m_max_age_isSet = !json[QString("max_age")].isNull() && m_max_age_isValid;

    m_min_age_isValid = ::OpenAPI::fromJsonValue(m_min_age, json[QString("min_age")]);
    m_min_age_isSet = !json[QString("min_age")].isNull() && m_min_age_isValid;
}

QString OAITrial_age_range::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrial_age_range::asJsonObject() const {
    QJsonObject obj;
    if (m_max_age_isSet) {
        obj.insert(QString("max_age"), ::OpenAPI::toJsonValue(m_max_age));
    }
    if (m_min_age_isSet) {
        obj.insert(QString("min_age"), ::OpenAPI::toJsonValue(m_min_age));
    }
    return obj;
}

QString OAITrial_age_range::getMaxAge() const {
    return m_max_age;
}
void OAITrial_age_range::setMaxAge(const QString &max_age) {
    m_max_age = max_age;
    m_max_age_isSet = true;
}

bool OAITrial_age_range::is_max_age_Set() const{
    return m_max_age_isSet;
}

bool OAITrial_age_range::is_max_age_Valid() const{
    return m_max_age_isValid;
}

QString OAITrial_age_range::getMinAge() const {
    return m_min_age;
}
void OAITrial_age_range::setMinAge(const QString &min_age) {
    m_min_age = min_age;
    m_min_age_isSet = true;
}

bool OAITrial_age_range::is_min_age_Set() const{
    return m_min_age_isSet;
}

bool OAITrial_age_range::is_min_age_Valid() const{
    return m_min_age_isValid;
}

bool OAITrial_age_range::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_age_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrial_age_range::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
