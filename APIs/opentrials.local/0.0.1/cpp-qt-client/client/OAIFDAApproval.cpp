/**
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFDAApproval.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFDAApproval::OAIFDAApproval(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFDAApproval::OAIFDAApproval() {
    this->initializeModel();
}

OAIFDAApproval::~OAIFDAApproval() {}

void OAIFDAApproval::initializeModel() {

    m_action_date_isSet = false;
    m_action_date_isValid = false;

    m_fda_application_isSet = false;
    m_fda_application_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_supplement_number_isSet = false;
    m_supplement_number_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFDAApproval::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFDAApproval::fromJsonObject(QJsonObject json) {

    m_action_date_isValid = ::OpenAPI::fromJsonValue(m_action_date, json[QString("action_date")]);
    m_action_date_isSet = !json[QString("action_date")].isNull() && m_action_date_isValid;

    m_fda_application_isValid = ::OpenAPI::fromJsonValue(m_fda_application, json[QString("fda_application")]);
    m_fda_application_isSet = !json[QString("fda_application")].isNull() && m_fda_application_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_supplement_number_isValid = ::OpenAPI::fromJsonValue(m_supplement_number, json[QString("supplement_number")]);
    m_supplement_number_isSet = !json[QString("supplement_number")].isNull() && m_supplement_number_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFDAApproval::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFDAApproval::asJsonObject() const {
    QJsonObject obj;
    if (m_action_date_isSet) {
        obj.insert(QString("action_date"), ::OpenAPI::toJsonValue(m_action_date));
    }
    if (m_fda_application.isSet()) {
        obj.insert(QString("fda_application"), ::OpenAPI::toJsonValue(m_fda_application));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_supplement_number_isSet) {
        obj.insert(QString("supplement_number"), ::OpenAPI::toJsonValue(m_supplement_number));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QDateTime OAIFDAApproval::getActionDate() const {
    return m_action_date;
}
void OAIFDAApproval::setActionDate(const QDateTime &action_date) {
    m_action_date = action_date;
    m_action_date_isSet = true;
}

bool OAIFDAApproval::is_action_date_Set() const{
    return m_action_date_isSet;
}

bool OAIFDAApproval::is_action_date_Valid() const{
    return m_action_date_isValid;
}

OAIFDAApplication OAIFDAApproval::getFdaApplication() const {
    return m_fda_application;
}
void OAIFDAApproval::setFdaApplication(const OAIFDAApplication &fda_application) {
    m_fda_application = fda_application;
    m_fda_application_isSet = true;
}

bool OAIFDAApproval::is_fda_application_Set() const{
    return m_fda_application_isSet;
}

bool OAIFDAApproval::is_fda_application_Valid() const{
    return m_fda_application_isValid;
}

QString OAIFDAApproval::getId() const {
    return m_id;
}
void OAIFDAApproval::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFDAApproval::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFDAApproval::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFDAApproval::getNotes() const {
    return m_notes;
}
void OAIFDAApproval::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIFDAApproval::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIFDAApproval::is_notes_Valid() const{
    return m_notes_isValid;
}

qint32 OAIFDAApproval::getSupplementNumber() const {
    return m_supplement_number;
}
void OAIFDAApproval::setSupplementNumber(const qint32 &supplement_number) {
    m_supplement_number = supplement_number;
    m_supplement_number_isSet = true;
}

bool OAIFDAApproval::is_supplement_number_Set() const{
    return m_supplement_number_isSet;
}

bool OAIFDAApproval::is_supplement_number_Valid() const{
    return m_supplement_number_isValid;
}

QString OAIFDAApproval::getType() const {
    return m_type;
}
void OAIFDAApproval::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFDAApproval::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFDAApproval::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFDAApproval::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fda_application.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplement_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFDAApproval::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_date_isValid && m_id_isValid && m_supplement_number_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
