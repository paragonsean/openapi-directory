/**
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFDAApplication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFDAApplication::OAIFDAApplication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFDAApplication::OAIFDAApplication() {
    this->initializeModel();
}

OAIFDAApplication::~OAIFDAApplication() {}

void OAIFDAApplication::initializeModel() {

    m_active_ingredients_isSet = false;
    m_active_ingredients_isValid = false;

    m_drug_name_isSet = false;
    m_drug_name_isValid = false;

    m_fda_approvals_isSet = false;
    m_fda_approvals_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_organisation_isSet = false;
    m_organisation_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIFDAApplication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFDAApplication::fromJsonObject(QJsonObject json) {

    m_active_ingredients_isValid = ::OpenAPI::fromJsonValue(m_active_ingredients, json[QString("active_ingredients")]);
    m_active_ingredients_isSet = !json[QString("active_ingredients")].isNull() && m_active_ingredients_isValid;

    m_drug_name_isValid = ::OpenAPI::fromJsonValue(m_drug_name, json[QString("drug_name")]);
    m_drug_name_isSet = !json[QString("drug_name")].isNull() && m_drug_name_isValid;

    m_fda_approvals_isValid = ::OpenAPI::fromJsonValue(m_fda_approvals, json[QString("fda_approvals")]);
    m_fda_approvals_isSet = !json[QString("fda_approvals")].isNull() && m_fda_approvals_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_organisation_isValid = ::OpenAPI::fromJsonValue(m_organisation, json[QString("organisation")]);
    m_organisation_isSet = !json[QString("organisation")].isNull() && m_organisation_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIFDAApplication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFDAApplication::asJsonObject() const {
    QJsonObject obj;
    if (m_active_ingredients_isSet) {
        obj.insert(QString("active_ingredients"), ::OpenAPI::toJsonValue(m_active_ingredients));
    }
    if (m_drug_name_isSet) {
        obj.insert(QString("drug_name"), ::OpenAPI::toJsonValue(m_drug_name));
    }
    if (m_fda_approvals.size() > 0) {
        obj.insert(QString("fda_approvals"), ::OpenAPI::toJsonValue(m_fda_approvals));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_organisation.isSet()) {
        obj.insert(QString("organisation"), ::OpenAPI::toJsonValue(m_organisation));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIFDAApplication::getActiveIngredients() const {
    return m_active_ingredients;
}
void OAIFDAApplication::setActiveIngredients(const QString &active_ingredients) {
    m_active_ingredients = active_ingredients;
    m_active_ingredients_isSet = true;
}

bool OAIFDAApplication::is_active_ingredients_Set() const{
    return m_active_ingredients_isSet;
}

bool OAIFDAApplication::is_active_ingredients_Valid() const{
    return m_active_ingredients_isValid;
}

QString OAIFDAApplication::getDrugName() const {
    return m_drug_name;
}
void OAIFDAApplication::setDrugName(const QString &drug_name) {
    m_drug_name = drug_name;
    m_drug_name_isSet = true;
}

bool OAIFDAApplication::is_drug_name_Set() const{
    return m_drug_name_isSet;
}

bool OAIFDAApplication::is_drug_name_Valid() const{
    return m_drug_name_isValid;
}

QList<OAIFDAApproval> OAIFDAApplication::getFdaApprovals() const {
    return m_fda_approvals;
}
void OAIFDAApplication::setFdaApprovals(const QList<OAIFDAApproval> &fda_approvals) {
    m_fda_approvals = fda_approvals;
    m_fda_approvals_isSet = true;
}

bool OAIFDAApplication::is_fda_approvals_Set() const{
    return m_fda_approvals_isSet;
}

bool OAIFDAApplication::is_fda_approvals_Valid() const{
    return m_fda_approvals_isValid;
}

QString OAIFDAApplication::getId() const {
    return m_id;
}
void OAIFDAApplication::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFDAApplication::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFDAApplication::is_id_Valid() const{
    return m_id_isValid;
}

OAIOrganisation OAIFDAApplication::getOrganisation() const {
    return m_organisation;
}
void OAIFDAApplication::setOrganisation(const OAIOrganisation &organisation) {
    m_organisation = organisation;
    m_organisation_isSet = true;
}

bool OAIFDAApplication::is_organisation_Set() const{
    return m_organisation_isSet;
}

bool OAIFDAApplication::is_organisation_Valid() const{
    return m_organisation_isValid;
}

QString OAIFDAApplication::getType() const {
    return m_type;
}
void OAIFDAApplication::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFDAApplication::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFDAApplication::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIFDAApplication::getUrl() const {
    return m_url;
}
void OAIFDAApplication::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIFDAApplication::is_url_Set() const{
    return m_url_isSet;
}

bool OAIFDAApplication::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIFDAApplication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_ingredients_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drug_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fda_approvals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organisation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFDAApplication::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
