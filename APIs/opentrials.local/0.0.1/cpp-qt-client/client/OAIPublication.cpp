/**
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublication::OAIPublication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublication::OAIPublication() {
    this->initializeModel();
}

OAIPublication::~OAIPublication() {}

void OAIPublication::initializeModel() {

    m_abstract_isSet = false;
    m_abstract_isValid = false;

    m_authors_isSet = false;
    m_authors_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_journal_isSet = false;
    m_journal_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIPublication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublication::fromJsonObject(QJsonObject json) {

    m_abstract_isValid = ::OpenAPI::fromJsonValue(m_abstract, json[QString("abstract")]);
    m_abstract_isSet = !json[QString("abstract")].isNull() && m_abstract_isValid;

    m_authors_isValid = ::OpenAPI::fromJsonValue(m_authors, json[QString("authors")]);
    m_authors_isSet = !json[QString("authors")].isNull() && m_authors_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_journal_isValid = ::OpenAPI::fromJsonValue(m_journal, json[QString("journal")]);
    m_journal_isSet = !json[QString("journal")].isNull() && m_journal_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(m_source_url, json[QString("source_url")]);
    m_source_url_isSet = !json[QString("source_url")].isNull() && m_source_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIPublication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublication::asJsonObject() const {
    QJsonObject obj;
    if (m_abstract_isSet) {
        obj.insert(QString("abstract"), ::OpenAPI::toJsonValue(m_abstract));
    }
    if (m_authors.size() > 0) {
        obj.insert(QString("authors"), ::OpenAPI::toJsonValue(m_authors));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_journal_isSet) {
        obj.insert(QString("journal"), ::OpenAPI::toJsonValue(m_journal));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_url_isSet) {
        obj.insert(QString("source_url"), ::OpenAPI::toJsonValue(m_source_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIPublication::getAbstract() const {
    return m_abstract;
}
void OAIPublication::setAbstract(const QString &abstract) {
    m_abstract = abstract;
    m_abstract_isSet = true;
}

bool OAIPublication::is_abstract_Set() const{
    return m_abstract_isSet;
}

bool OAIPublication::is_abstract_Valid() const{
    return m_abstract_isValid;
}

QList<QString> OAIPublication::getAuthors() const {
    return m_authors;
}
void OAIPublication::setAuthors(const QList<QString> &authors) {
    m_authors = authors;
    m_authors_isSet = true;
}

bool OAIPublication::is_authors_Set() const{
    return m_authors_isSet;
}

bool OAIPublication::is_authors_Valid() const{
    return m_authors_isValid;
}

QDateTime OAIPublication::getCreatedAt() const {
    return m_created_at;
}
void OAIPublication::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPublication::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPublication::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIPublication::getDate() const {
    return m_date;
}
void OAIPublication::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIPublication::is_date_Set() const{
    return m_date_isSet;
}

bool OAIPublication::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIPublication::getId() const {
    return m_id;
}
void OAIPublication::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPublication::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPublication::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPublication::getJournal() const {
    return m_journal;
}
void OAIPublication::setJournal(const QString &journal) {
    m_journal = journal;
    m_journal_isSet = true;
}

bool OAIPublication::is_journal_Set() const{
    return m_journal_isSet;
}

bool OAIPublication::is_journal_Valid() const{
    return m_journal_isValid;
}

QString OAIPublication::getSlug() const {
    return m_slug;
}
void OAIPublication::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIPublication::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIPublication::is_slug_Valid() const{
    return m_slug_isValid;
}

OAISource OAIPublication::getSource() const {
    return m_source;
}
void OAIPublication::setSource(const OAISource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIPublication::is_source_Set() const{
    return m_source_isSet;
}

bool OAIPublication::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIPublication::getSourceUrl() const {
    return m_source_url;
}
void OAIPublication::setSourceUrl(const QString &source_url) {
    m_source_url = source_url;
    m_source_url_isSet = true;
}

bool OAIPublication::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAIPublication::is_source_url_Valid() const{
    return m_source_url_isValid;
}

QString OAIPublication::getTitle() const {
    return m_title;
}
void OAIPublication::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPublication::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPublication::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIPublication::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPublication::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPublication::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPublication::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIPublication::getUrl() const {
    return m_url;
}
void OAIPublication::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPublication::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPublication::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIPublication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abstract_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_journal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublication::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_abstract_isValid && m_id_isValid && m_source_isValid && m_source_url_isValid && m_title_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
