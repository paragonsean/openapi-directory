/**
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRiskOfBias.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRiskOfBias::OAIRiskOfBias(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRiskOfBias::OAIRiskOfBias() {
    this->initializeModel();
}

OAIRiskOfBias::~OAIRiskOfBias() {}

void OAIRiskOfBias::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_risk_of_bias_criteria_isSet = false;
    m_risk_of_bias_criteria_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;

    m_study_id_isSet = false;
    m_study_id_isValid = false;
}

void OAIRiskOfBias::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRiskOfBias::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_risk_of_bias_criteria_isValid = ::OpenAPI::fromJsonValue(m_risk_of_bias_criteria, json[QString("risk_of_bias_criteria")]);
    m_risk_of_bias_criteria_isSet = !json[QString("risk_of_bias_criteria")].isNull() && m_risk_of_bias_criteria_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("source_id")]);
    m_source_id_isSet = !json[QString("source_id")].isNull() && m_source_id_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(m_source_url, json[QString("source_url")]);
    m_source_url_isSet = !json[QString("source_url")].isNull() && m_source_url_isValid;

    m_study_id_isValid = ::OpenAPI::fromJsonValue(m_study_id, json[QString("study_id")]);
    m_study_id_isSet = !json[QString("study_id")].isNull() && m_study_id_isValid;
}

QString OAIRiskOfBias::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRiskOfBias::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_risk_of_bias_criteria.size() > 0) {
        obj.insert(QString("risk_of_bias_criteria"), ::OpenAPI::toJsonValue(m_risk_of_bias_criteria));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("source_id"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_source_url_isSet) {
        obj.insert(QString("source_url"), ::OpenAPI::toJsonValue(m_source_url));
    }
    if (m_study_id_isSet) {
        obj.insert(QString("study_id"), ::OpenAPI::toJsonValue(m_study_id));
    }
    return obj;
}

QString OAIRiskOfBias::getId() const {
    return m_id;
}
void OAIRiskOfBias::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRiskOfBias::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRiskOfBias::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIRiskOfBiasCriteria> OAIRiskOfBias::getRiskOfBiasCriteria() const {
    return m_risk_of_bias_criteria;
}
void OAIRiskOfBias::setRiskOfBiasCriteria(const QList<OAIRiskOfBiasCriteria> &risk_of_bias_criteria) {
    m_risk_of_bias_criteria = risk_of_bias_criteria;
    m_risk_of_bias_criteria_isSet = true;
}

bool OAIRiskOfBias::is_risk_of_bias_criteria_Set() const{
    return m_risk_of_bias_criteria_isSet;
}

bool OAIRiskOfBias::is_risk_of_bias_criteria_Valid() const{
    return m_risk_of_bias_criteria_isValid;
}

QString OAIRiskOfBias::getSourceId() const {
    return m_source_id;
}
void OAIRiskOfBias::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIRiskOfBias::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIRiskOfBias::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIRiskOfBias::getSourceUrl() const {
    return m_source_url;
}
void OAIRiskOfBias::setSourceUrl(const QString &source_url) {
    m_source_url = source_url;
    m_source_url_isSet = true;
}

bool OAIRiskOfBias::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAIRiskOfBias::is_source_url_Valid() const{
    return m_source_url_isValid;
}

QString OAIRiskOfBias::getStudyId() const {
    return m_study_id;
}
void OAIRiskOfBias::setStudyId(const QString &study_id) {
    m_study_id = study_id;
    m_study_id_isSet = true;
}

bool OAIRiskOfBias::is_study_id_Set() const{
    return m_study_id_isSet;
}

bool OAIRiskOfBias::is_study_id_Valid() const{
    return m_study_id_isValid;
}

bool OAIRiskOfBias::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_of_bias_criteria.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_study_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRiskOfBias::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_source_id_isValid && m_source_url_isValid && m_study_id_isValid && true;
}

} // namespace OpenAPI
