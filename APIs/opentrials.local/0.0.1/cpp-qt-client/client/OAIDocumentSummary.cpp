/**
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentSummary::OAIDocumentSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentSummary::OAIDocumentSummary() {
    this->initializeModel();
}

OAIDocumentSummary::~OAIDocumentSummary() {}

void OAIDocumentSummary::initializeModel() {

    m_document_category_isSet = false;
    m_document_category_isValid = false;

    m_fda_application_isSet = false;
    m_fda_application_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;

    m_trials_isSet = false;
    m_trials_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIDocumentSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentSummary::fromJsonObject(QJsonObject json) {

    m_document_category_isValid = ::OpenAPI::fromJsonValue(m_document_category, json[QString("document_category")]);
    m_document_category_isSet = !json[QString("document_category")].isNull() && m_document_category_isValid;

    m_fda_application_isValid = ::OpenAPI::fromJsonValue(m_fda_application, json[QString("fda_application")]);
    m_fda_application_isSet = !json[QString("fda_application")].isNull() && m_fda_application_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("source_id")]);
    m_source_id_isSet = !json[QString("source_id")].isNull() && m_source_id_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(m_source_url, json[QString("source_url")]);
    m_source_url_isSet = !json[QString("source_url")].isNull() && m_source_url_isValid;

    m_trials_isValid = ::OpenAPI::fromJsonValue(m_trials, json[QString("trials")]);
    m_trials_isSet = !json[QString("trials")].isNull() && m_trials_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIDocumentSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_document_category.isSet()) {
        obj.insert(QString("document_category"), ::OpenAPI::toJsonValue(m_document_category));
    }
    if (m_fda_application.isSet()) {
        obj.insert(QString("fda_application"), ::OpenAPI::toJsonValue(m_fda_application));
    }
    if (m_file.isSet()) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("source_id"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_source_url_isSet) {
        obj.insert(QString("source_url"), ::OpenAPI::toJsonValue(m_source_url));
    }
    if (m_trials.size() > 0) {
        obj.insert(QString("trials"), ::OpenAPI::toJsonValue(m_trials));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIDocumentCategory OAIDocumentSummary::getDocumentCategory() const {
    return m_document_category;
}
void OAIDocumentSummary::setDocumentCategory(const OAIDocumentCategory &document_category) {
    m_document_category = document_category;
    m_document_category_isSet = true;
}

bool OAIDocumentSummary::is_document_category_Set() const{
    return m_document_category_isSet;
}

bool OAIDocumentSummary::is_document_category_Valid() const{
    return m_document_category_isValid;
}

OAIFDAApplication OAIDocumentSummary::getFdaApplication() const {
    return m_fda_application;
}
void OAIDocumentSummary::setFdaApplication(const OAIFDAApplication &fda_application) {
    m_fda_application = fda_application;
    m_fda_application_isSet = true;
}

bool OAIDocumentSummary::is_fda_application_Set() const{
    return m_fda_application_isSet;
}

bool OAIDocumentSummary::is_fda_application_Valid() const{
    return m_fda_application_isValid;
}

OAIFileSummary OAIDocumentSummary::getFile() const {
    return m_file;
}
void OAIDocumentSummary::setFile(const OAIFileSummary &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIDocumentSummary::is_file_Set() const{
    return m_file_isSet;
}

bool OAIDocumentSummary::is_file_Valid() const{
    return m_file_isValid;
}

QString OAIDocumentSummary::getId() const {
    return m_id;
}
void OAIDocumentSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDocumentSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDocumentSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDocumentSummary::getName() const {
    return m_name;
}
void OAIDocumentSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDocumentSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDocumentSummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDocumentSummary::getSourceId() const {
    return m_source_id;
}
void OAIDocumentSummary::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIDocumentSummary::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIDocumentSummary::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIDocumentSummary::getSourceUrl() const {
    return m_source_url;
}
void OAIDocumentSummary::setSourceUrl(const QString &source_url) {
    m_source_url = source_url;
    m_source_url_isSet = true;
}

bool OAIDocumentSummary::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAIDocumentSummary::is_source_url_Valid() const{
    return m_source_url_isValid;
}

QList<OAITrialSummary> OAIDocumentSummary::getTrials() const {
    return m_trials;
}
void OAIDocumentSummary::setTrials(const QList<OAITrialSummary> &trials) {
    m_trials = trials;
    m_trials_isSet = true;
}

bool OAIDocumentSummary::is_trials_Set() const{
    return m_trials_isSet;
}

bool OAIDocumentSummary::is_trials_Valid() const{
    return m_trials_isValid;
}

QString OAIDocumentSummary::getUrl() const {
    return m_url;
}
void OAIDocumentSummary::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIDocumentSummary::is_url_Set() const{
    return m_url_isSet;
}

bool OAIDocumentSummary::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIDocumentSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fda_application.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_category_isValid && m_id_isValid && m_name_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
