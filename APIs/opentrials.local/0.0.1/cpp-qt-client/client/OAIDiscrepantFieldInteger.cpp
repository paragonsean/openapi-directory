/**
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscrepantFieldInteger.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscrepantFieldInteger::OAIDiscrepantFieldInteger(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscrepantFieldInteger::OAIDiscrepantFieldInteger() {
    this->initializeModel();
}

OAIDiscrepantFieldInteger::~OAIDiscrepantFieldInteger() {}

void OAIDiscrepantFieldInteger::initializeModel() {

    m_record_id_isSet = false;
    m_record_id_isValid = false;

    m_source_name_isSet = false;
    m_source_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIDiscrepantFieldInteger::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiscrepantFieldInteger::fromJsonObject(QJsonObject json) {

    m_record_id_isValid = ::OpenAPI::fromJsonValue(m_record_id, json[QString("record_id")]);
    m_record_id_isSet = !json[QString("record_id")].isNull() && m_record_id_isValid;

    m_source_name_isValid = ::OpenAPI::fromJsonValue(m_source_name, json[QString("source_name")]);
    m_source_name_isSet = !json[QString("source_name")].isNull() && m_source_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIDiscrepantFieldInteger::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiscrepantFieldInteger::asJsonObject() const {
    QJsonObject obj;
    if (m_record_id_isSet) {
        obj.insert(QString("record_id"), ::OpenAPI::toJsonValue(m_record_id));
    }
    if (m_source_name_isSet) {
        obj.insert(QString("source_name"), ::OpenAPI::toJsonValue(m_source_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIDiscrepantFieldInteger::getRecordId() const {
    return m_record_id;
}
void OAIDiscrepantFieldInteger::setRecordId(const QString &record_id) {
    m_record_id = record_id;
    m_record_id_isSet = true;
}

bool OAIDiscrepantFieldInteger::is_record_id_Set() const{
    return m_record_id_isSet;
}

bool OAIDiscrepantFieldInteger::is_record_id_Valid() const{
    return m_record_id_isValid;
}

QString OAIDiscrepantFieldInteger::getSourceName() const {
    return m_source_name;
}
void OAIDiscrepantFieldInteger::setSourceName(const QString &source_name) {
    m_source_name = source_name;
    m_source_name_isSet = true;
}

bool OAIDiscrepantFieldInteger::is_source_name_Set() const{
    return m_source_name_isSet;
}

bool OAIDiscrepantFieldInteger::is_source_name_Valid() const{
    return m_source_name_isValid;
}

qint32 OAIDiscrepantFieldInteger::getValue() const {
    return m_value;
}
void OAIDiscrepantFieldInteger::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIDiscrepantFieldInteger::is_value_Set() const{
    return m_value_isSet;
}

bool OAIDiscrepantFieldInteger::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIDiscrepantFieldInteger::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_record_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiscrepantFieldInteger::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_record_id_isValid && m_source_name_isValid && true;
}

} // namespace OpenAPI
