/*
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DocumentCategory;
import org.openapitools.client.model.FDAApplication;
import org.openapitools.client.model.ModelFile;
import org.openapitools.client.model.TrialSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FDADocumentSearchResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:13.839361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FDADocumentSearchResult {
  public static final String SERIALIZED_NAME_DOCUMENT_CATEGORY = "document_category";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_CATEGORY)
  private DocumentCategory documentCategory;

  public static final String SERIALIZED_NAME_FDA_APPLICATION = "fda_application";
  @SerializedName(SERIALIZED_NAME_FDA_APPLICATION)
  private FDAApplication fdaApplication;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private ModelFile _file;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOURCE_ID = "source_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_SOURCE_URL = "source_url";
  @SerializedName(SERIALIZED_NAME_SOURCE_URL)
  private String sourceUrl;

  public static final String SERIALIZED_NAME_TRIALS = "trials";
  @SerializedName(SERIALIZED_NAME_TRIALS)
  private List<TrialSummary> trials = new ArrayList<>();

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public FDADocumentSearchResult() {
  }

  public FDADocumentSearchResult documentCategory(DocumentCategory documentCategory) {
    this.documentCategory = documentCategory;
    return this;
  }

  /**
   * Get documentCategory
   * @return documentCategory
   */
  @javax.annotation.Nonnull
  public DocumentCategory getDocumentCategory() {
    return documentCategory;
  }

  public void setDocumentCategory(DocumentCategory documentCategory) {
    this.documentCategory = documentCategory;
  }


  public FDADocumentSearchResult fdaApplication(FDAApplication fdaApplication) {
    this.fdaApplication = fdaApplication;
    return this;
  }

  /**
   * Get fdaApplication
   * @return fdaApplication
   */
  @javax.annotation.Nullable
  public FDAApplication getFdaApplication() {
    return fdaApplication;
  }

  public void setFdaApplication(FDAApplication fdaApplication) {
    this.fdaApplication = fdaApplication;
  }


  public FDADocumentSearchResult _file(ModelFile _file) {
    this._file = _file;
    return this;
  }

  /**
   * Get _file
   * @return _file
   */
  @javax.annotation.Nullable
  public ModelFile getFile() {
    return _file;
  }

  public void setFile(ModelFile _file) {
    this._file = _file;
  }


  public FDADocumentSearchResult id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public FDADocumentSearchResult name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FDADocumentSearchResult sourceId(String sourceId) {
    this.sourceId = sourceId;
    return this;
  }

  /**
   * ID of the document&#39;s source
   * @return sourceId
   */
  @javax.annotation.Nullable
  public String getSourceId() {
    return sourceId;
  }

  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public FDADocumentSearchResult sourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  /**
   * URL of origin for this document
   * @return sourceUrl
   */
  @javax.annotation.Nullable
  public String getSourceUrl() {
    return sourceUrl;
  }

  public void setSourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
  }


  public FDADocumentSearchResult trials(List<TrialSummary> trials) {
    this.trials = trials;
    return this;
  }

  public FDADocumentSearchResult addTrialsItem(TrialSummary trialsItem) {
    if (this.trials == null) {
      this.trials = new ArrayList<>();
    }
    this.trials.add(trialsItem);
    return this;
  }

  /**
   * Get trials
   * @return trials
   */
  @javax.annotation.Nullable
  public List<TrialSummary> getTrials() {
    return trials;
  }

  public void setTrials(List<TrialSummary> trials) {
    this.trials = trials;
  }


  public FDADocumentSearchResult url(String url) {
    this.url = url;
    return this;
  }

  /**
   * OpenTrials API URL of the document
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FDADocumentSearchResult fdADocumentSearchResult = (FDADocumentSearchResult) o;
    return Objects.equals(this.documentCategory, fdADocumentSearchResult.documentCategory) &&
        Objects.equals(this.fdaApplication, fdADocumentSearchResult.fdaApplication) &&
        Objects.equals(this._file, fdADocumentSearchResult._file) &&
        Objects.equals(this.id, fdADocumentSearchResult.id) &&
        Objects.equals(this.name, fdADocumentSearchResult.name) &&
        Objects.equals(this.sourceId, fdADocumentSearchResult.sourceId) &&
        Objects.equals(this.sourceUrl, fdADocumentSearchResult.sourceUrl) &&
        Objects.equals(this.trials, fdADocumentSearchResult.trials) &&
        Objects.equals(this.url, fdADocumentSearchResult.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentCategory, fdaApplication, _file, id, name, sourceId, sourceUrl, trials, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FDADocumentSearchResult {\n");
    sb.append("    documentCategory: ").append(toIndentedString(documentCategory)).append("\n");
    sb.append("    fdaApplication: ").append(toIndentedString(fdaApplication)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    sourceUrl: ").append(toIndentedString(sourceUrl)).append("\n");
    sb.append("    trials: ").append(toIndentedString(trials)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("document_category");
    openapiFields.add("fda_application");
    openapiFields.add("file");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("source_id");
    openapiFields.add("source_url");
    openapiFields.add("trials");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("document_category");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FDADocumentSearchResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FDADocumentSearchResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FDADocumentSearchResult is not found in the empty JSON string", FDADocumentSearchResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FDADocumentSearchResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FDADocumentSearchResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FDADocumentSearchResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `document_category`
      DocumentCategory.validateJsonElement(jsonObj.get("document_category"));
      // validate the optional field `fda_application`
      if (jsonObj.get("fda_application") != null && !jsonObj.get("fda_application").isJsonNull()) {
        FDAApplication.validateJsonElement(jsonObj.get("fda_application"));
      }
      // validate the optional field `file`
      if (jsonObj.get("file") != null && !jsonObj.get("file").isJsonNull()) {
        ModelFile.validateJsonElement(jsonObj.get("file"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("source_id") != null && !jsonObj.get("source_id").isJsonNull()) && !jsonObj.get("source_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_id").toString()));
      }
      if ((jsonObj.get("source_url") != null && !jsonObj.get("source_url").isJsonNull()) && !jsonObj.get("source_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_url").toString()));
      }
      if (jsonObj.get("trials") != null && !jsonObj.get("trials").isJsonNull()) {
        JsonArray jsonArraytrials = jsonObj.getAsJsonArray("trials");
        if (jsonArraytrials != null) {
          // ensure the json data is an array
          if (!jsonObj.get("trials").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `trials` to be an array in the JSON string but got `%s`", jsonObj.get("trials").toString()));
          }

          // validate the optional field `trials` (array)
          for (int i = 0; i < jsonArraytrials.size(); i++) {
            TrialSummary.validateJsonElement(jsonArraytrials.get(i));
          };
        }
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FDADocumentSearchResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FDADocumentSearchResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FDADocumentSearchResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FDADocumentSearchResult.class));

       return (TypeAdapter<T>) new TypeAdapter<FDADocumentSearchResult>() {
           @Override
           public void write(JsonWriter out, FDADocumentSearchResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FDADocumentSearchResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FDADocumentSearchResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FDADocumentSearchResult
   * @throws IOException if the JSON string is invalid with respect to FDADocumentSearchResult
   */
  public static FDADocumentSearchResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FDADocumentSearchResult.class);
  }

  /**
   * Convert an instance of FDADocumentSearchResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

