/*
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FDAApproval;
import org.openapitools.client.model.Organisation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FDAApplication
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:13.839361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FDAApplication {
  public static final String SERIALIZED_NAME_ACTIVE_INGREDIENTS = "active_ingredients";
  @SerializedName(SERIALIZED_NAME_ACTIVE_INGREDIENTS)
  private String activeIngredients;

  public static final String SERIALIZED_NAME_DRUG_NAME = "drug_name";
  @SerializedName(SERIALIZED_NAME_DRUG_NAME)
  private String drugName;

  public static final String SERIALIZED_NAME_FDA_APPROVALS = "fda_approvals";
  @SerializedName(SERIALIZED_NAME_FDA_APPROVALS)
  private List<FDAApproval> fdaApprovals = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ORGANISATION = "organisation";
  @SerializedName(SERIALIZED_NAME_ORGANISATION)
  private Organisation organisation;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public FDAApplication() {
  }

  public FDAApplication activeIngredients(String activeIngredients) {
    this.activeIngredients = activeIngredients;
    return this;
  }

  /**
   * Active ingredients contained in the drug
   * @return activeIngredients
   */
  @javax.annotation.Nullable
  public String getActiveIngredients() {
    return activeIngredients;
  }

  public void setActiveIngredients(String activeIngredients) {
    this.activeIngredients = activeIngredients;
  }


  public FDAApplication drugName(String drugName) {
    this.drugName = drugName;
    return this;
  }

  /**
   * Name of the drug
   * @return drugName
   */
  @javax.annotation.Nullable
  public String getDrugName() {
    return drugName;
  }

  public void setDrugName(String drugName) {
    this.drugName = drugName;
  }


  public FDAApplication fdaApprovals(List<FDAApproval> fdaApprovals) {
    this.fdaApprovals = fdaApprovals;
    return this;
  }

  public FDAApplication addFdaApprovalsItem(FDAApproval fdaApprovalsItem) {
    if (this.fdaApprovals == null) {
      this.fdaApprovals = new ArrayList<>();
    }
    this.fdaApprovals.add(fdaApprovalsItem);
    return this;
  }

  /**
   * Associated FDA approvals
   * @return fdaApprovals
   */
  @javax.annotation.Nullable
  public List<FDAApproval> getFdaApprovals() {
    return fdaApprovals;
  }

  public void setFdaApprovals(List<FDAApproval> fdaApprovals) {
    this.fdaApprovals = fdaApprovals;
  }


  public FDAApplication id(String id) {
    this.id = id;
    return this;
  }

  /**
   * FDA application ID
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public FDAApplication organisation(Organisation organisation) {
    this.organisation = organisation;
    return this;
  }

  /**
   * Get organisation
   * @return organisation
   */
  @javax.annotation.Nullable
  public Organisation getOrganisation() {
    return organisation;
  }

  public void setOrganisation(Organisation organisation) {
    this.organisation = organisation;
  }


  public FDAApplication type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The FDA application type (e.g. \&quot;NDA\&quot;, \&quot;ANDA\&quot;, etc.)
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public FDAApplication url(String url) {
    this.url = url;
    return this;
  }

  /**
   * OpenTrials API URL for this FDA application
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FDAApplication fdAApplication = (FDAApplication) o;
    return Objects.equals(this.activeIngredients, fdAApplication.activeIngredients) &&
        Objects.equals(this.drugName, fdAApplication.drugName) &&
        Objects.equals(this.fdaApprovals, fdAApplication.fdaApprovals) &&
        Objects.equals(this.id, fdAApplication.id) &&
        Objects.equals(this.organisation, fdAApplication.organisation) &&
        Objects.equals(this.type, fdAApplication.type) &&
        Objects.equals(this.url, fdAApplication.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeIngredients, drugName, fdaApprovals, id, organisation, type, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FDAApplication {\n");
    sb.append("    activeIngredients: ").append(toIndentedString(activeIngredients)).append("\n");
    sb.append("    drugName: ").append(toIndentedString(drugName)).append("\n");
    sb.append("    fdaApprovals: ").append(toIndentedString(fdaApprovals)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    organisation: ").append(toIndentedString(organisation)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active_ingredients");
    openapiFields.add("drug_name");
    openapiFields.add("fda_approvals");
    openapiFields.add("id");
    openapiFields.add("organisation");
    openapiFields.add("type");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FDAApplication
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FDAApplication.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FDAApplication is not found in the empty JSON string", FDAApplication.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FDAApplication.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FDAApplication` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FDAApplication.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("active_ingredients") != null && !jsonObj.get("active_ingredients").isJsonNull()) && !jsonObj.get("active_ingredients").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active_ingredients` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active_ingredients").toString()));
      }
      if ((jsonObj.get("drug_name") != null && !jsonObj.get("drug_name").isJsonNull()) && !jsonObj.get("drug_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `drug_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("drug_name").toString()));
      }
      if (jsonObj.get("fda_approvals") != null && !jsonObj.get("fda_approvals").isJsonNull()) {
        JsonArray jsonArrayfdaApprovals = jsonObj.getAsJsonArray("fda_approvals");
        if (jsonArrayfdaApprovals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fda_approvals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fda_approvals` to be an array in the JSON string but got `%s`", jsonObj.get("fda_approvals").toString()));
          }

          // validate the optional field `fda_approvals` (array)
          for (int i = 0; i < jsonArrayfdaApprovals.size(); i++) {
            FDAApproval.validateJsonElement(jsonArrayfdaApprovals.get(i));
          };
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `organisation`
      if (jsonObj.get("organisation") != null && !jsonObj.get("organisation").isJsonNull()) {
        Organisation.validateJsonElement(jsonObj.get("organisation"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FDAApplication.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FDAApplication' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FDAApplication> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FDAApplication.class));

       return (TypeAdapter<T>) new TypeAdapter<FDAApplication>() {
           @Override
           public void write(JsonWriter out, FDAApplication value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FDAApplication read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FDAApplication given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FDAApplication
   * @throws IOException if the JSON string is invalid with respect to FDAApplication
   */
  public static FDAApplication fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FDAApplication.class);
  }

  /**
   * Convert an instance of FDAApplication to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

