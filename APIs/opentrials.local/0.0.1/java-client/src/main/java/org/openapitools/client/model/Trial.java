/*
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Condition;
import org.openapitools.client.model.DocumentSummary;
import org.openapitools.client.model.Intervention;
import org.openapitools.client.model.PublicationSummary;
import org.openapitools.client.model.RecordSummary;
import org.openapitools.client.model.RiskOfBias;
import org.openapitools.client.model.TrialAgeRange;
import org.openapitools.client.model.TrialLocation;
import org.openapitools.client.model.TrialOrganisation;
import org.openapitools.client.model.TrialPerson;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Trial
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:13.839361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Trial {
  public static final String SERIALIZED_NAME_AGE_RANGE = "age_range";
  @SerializedName(SERIALIZED_NAME_AGE_RANGE)
  private TrialAgeRange ageRange;

  public static final String SERIALIZED_NAME_BRIEF_SUMMARY = "brief_summary";
  @SerializedName(SERIALIZED_NAME_BRIEF_SUMMARY)
  private String briefSummary;

  public static final String SERIALIZED_NAME_COMPLETION_DATE = "completion_date";
  @SerializedName(SERIALIZED_NAME_COMPLETION_DATE)
  private OffsetDateTime completionDate;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<Condition> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISCREPANCIES = "discrepancies";
  @SerializedName(SERIALIZED_NAME_DISCREPANCIES)
  private Object discrepancies;

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private List<DocumentSummary> documents = new ArrayList<>();

  /**
   * Gender of the subjects of the trial
   */
  @JsonAdapter(GenderEnum.Adapter.class)
  public enum GenderEnum {
    BOTH("both"),
    
    MALE("male"),
    
    FEMALE("female");

    private String value;

    GenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GenderEnum fromValue(String value) {
      for (GenderEnum b : GenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GenderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GenderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private GenderEnum gender;

  public static final String SERIALIZED_NAME_HAS_PUBLISHED_RESULTS = "has_published_results";
  @SerializedName(SERIALIZED_NAME_HAS_PUBLISHED_RESULTS)
  private Boolean hasPublishedResults;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private Object identifiers;

  public static final String SERIALIZED_NAME_INTERVENTIONS = "interventions";
  @SerializedName(SERIALIZED_NAME_INTERVENTIONS)
  private List<Intervention> interventions = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<TrialLocation> locations = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORGANISATIONS = "organisations";
  @SerializedName(SERIALIZED_NAME_ORGANISATIONS)
  private List<TrialOrganisation> organisations = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERSONS = "persons";
  @SerializedName(SERIALIZED_NAME_PERSONS)
  private List<TrialPerson> persons = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLIC_TITLE = "public_title";
  @SerializedName(SERIALIZED_NAME_PUBLIC_TITLE)
  private String publicTitle;

  public static final String SERIALIZED_NAME_PUBLICATIONS = "publications";
  @SerializedName(SERIALIZED_NAME_PUBLICATIONS)
  private List<PublicationSummary> publications = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECORDS = "records";
  @SerializedName(SERIALIZED_NAME_RECORDS)
  private List<RecordSummary> records = new ArrayList<>();

  /**
   * Recruitment status of the trial
   */
  @JsonAdapter(RecruitmentStatusEnum.Adapter.class)
  public enum RecruitmentStatusEnum {
    RECRUITING("recruiting"),
    
    NOT_RECRUITING("not_recruiting"),
    
    UNKNOWN("unknown"),
    
    OTHER("other");

    private String value;

    RecruitmentStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecruitmentStatusEnum fromValue(String value) {
      for (RecruitmentStatusEnum b : RecruitmentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecruitmentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecruitmentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecruitmentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecruitmentStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecruitmentStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECRUITMENT_STATUS = "recruitment_status";
  @SerializedName(SERIALIZED_NAME_RECRUITMENT_STATUS)
  private RecruitmentStatusEnum recruitmentStatus;

  public static final String SERIALIZED_NAME_REGISTRATION_DATE = "registration_date";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_DATE)
  private OffsetDateTime registrationDate;

  public static final String SERIALIZED_NAME_RESULTS_EXEMPTION_DATE = "results_exemption_date";
  @SerializedName(SERIALIZED_NAME_RESULTS_EXEMPTION_DATE)
  private OffsetDateTime resultsExemptionDate;

  public static final String SERIALIZED_NAME_RISKS_OF_BIAS = "risks_of_bias";
  @SerializedName(SERIALIZED_NAME_RISKS_OF_BIAS)
  private List<RiskOfBias> risksOfBias = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_ID = "source_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private Object sources;

  /**
   * Completion status of the trial
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ONGOING("ongoing"),
    
    WITHDRAWN("withdrawn"),
    
    SUSPENDED("suspended"),
    
    TERMINATED("terminated"),
    
    COMPLETE("complete"),
    
    UNKNOWN("unknown"),
    
    OTHER("other");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STUDY_PHASE = "study_phase";
  @SerializedName(SERIALIZED_NAME_STUDY_PHASE)
  private List<String> studyPhase = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_SAMPLE_SIZE = "target_sample_size";
  @SerializedName(SERIALIZED_NAME_TARGET_SAMPLE_SIZE)
  private Integer targetSampleSize;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Trial() {
  }

  public Trial ageRange(TrialAgeRange ageRange) {
    this.ageRange = ageRange;
    return this;
  }

  /**
   * Get ageRange
   * @return ageRange
   */
  @javax.annotation.Nullable
  public TrialAgeRange getAgeRange() {
    return ageRange;
  }

  public void setAgeRange(TrialAgeRange ageRange) {
    this.ageRange = ageRange;
  }


  public Trial briefSummary(String briefSummary) {
    this.briefSummary = briefSummary;
    return this;
  }

  /**
   * Summary of the trial
   * @return briefSummary
   */
  @javax.annotation.Nullable
  public String getBriefSummary() {
    return briefSummary;
  }

  public void setBriefSummary(String briefSummary) {
    this.briefSummary = briefSummary;
  }


  public Trial completionDate(OffsetDateTime completionDate) {
    this.completionDate = completionDate;
    return this;
  }

  /**
   * Date the trial was completed
   * @return completionDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletionDate() {
    return completionDate;
  }

  public void setCompletionDate(OffsetDateTime completionDate) {
    this.completionDate = completionDate;
  }


  public Trial conditions(List<Condition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public Trial addConditionsItem(Condition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Conditions the trial refers to
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<Condition> getConditions() {
    return conditions;
  }

  public void setConditions(List<Condition> conditions) {
    this.conditions = conditions;
  }


  public Trial discrepancies(Object discrepancies) {
    this.discrepancies = discrepancies;
    return this;
  }

  /**
   * Discrepancies in trial&#39;s details between different sources
   * @return discrepancies
   */
  @javax.annotation.Nullable
  public Object getDiscrepancies() {
    return discrepancies;
  }

  public void setDiscrepancies(Object discrepancies) {
    this.discrepancies = discrepancies;
  }


  public Trial documents(List<DocumentSummary> documents) {
    this.documents = documents;
    return this;
  }

  public Trial addDocumentsItem(DocumentSummary documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<>();
    }
    this.documents.add(documentsItem);
    return this;
  }

  /**
   * Documents related to the trial
   * @return documents
   */
  @javax.annotation.Nullable
  public List<DocumentSummary> getDocuments() {
    return documents;
  }

  public void setDocuments(List<DocumentSummary> documents) {
    this.documents = documents;
  }


  public Trial gender(GenderEnum gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Gender of the subjects of the trial
   * @return gender
   */
  @javax.annotation.Nullable
  public GenderEnum getGender() {
    return gender;
  }

  public void setGender(GenderEnum gender) {
    this.gender = gender;
  }


  public Trial hasPublishedResults(Boolean hasPublishedResults) {
    this.hasPublishedResults = hasPublishedResults;
    return this;
  }

  /**
   * Trial has its results published (true/false)
   * @return hasPublishedResults
   */
  @javax.annotation.Nullable
  public Boolean getHasPublishedResults() {
    return hasPublishedResults;
  }

  public void setHasPublishedResults(Boolean hasPublishedResults) {
    this.hasPublishedResults = hasPublishedResults;
  }


  public Trial id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the trial
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Trial identifiers(Object identifiers) {
    this.identifiers = identifiers;
    return this;
  }

  /**
   * Object that maps the trial&#39;s sources ids with its identifiers.
   * @return identifiers
   */
  @javax.annotation.Nullable
  public Object getIdentifiers() {
    return identifiers;
  }

  public void setIdentifiers(Object identifiers) {
    this.identifiers = identifiers;
  }


  public Trial interventions(List<Intervention> interventions) {
    this.interventions = interventions;
    return this;
  }

  public Trial addInterventionsItem(Intervention interventionsItem) {
    if (this.interventions == null) {
      this.interventions = new ArrayList<>();
    }
    this.interventions.add(interventionsItem);
    return this;
  }

  /**
   * Interventions related to the trial
   * @return interventions
   */
  @javax.annotation.Nonnull
  public List<Intervention> getInterventions() {
    return interventions;
  }

  public void setInterventions(List<Intervention> interventions) {
    this.interventions = interventions;
  }


  public Trial locations(List<TrialLocation> locations) {
    this.locations = locations;
    return this;
  }

  public Trial addLocationsItem(TrialLocation locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * Locations related to the trial
   * @return locations
   */
  @javax.annotation.Nonnull
  public List<TrialLocation> getLocations() {
    return locations;
  }

  public void setLocations(List<TrialLocation> locations) {
    this.locations = locations;
  }


  public Trial organisations(List<TrialOrganisation> organisations) {
    this.organisations = organisations;
    return this;
  }

  public Trial addOrganisationsItem(TrialOrganisation organisationsItem) {
    if (this.organisations == null) {
      this.organisations = new ArrayList<>();
    }
    this.organisations.add(organisationsItem);
    return this;
  }

  /**
   * Organisations related to the trial
   * @return organisations
   */
  @javax.annotation.Nonnull
  public List<TrialOrganisation> getOrganisations() {
    return organisations;
  }

  public void setOrganisations(List<TrialOrganisation> organisations) {
    this.organisations = organisations;
  }


  public Trial persons(List<TrialPerson> persons) {
    this.persons = persons;
    return this;
  }

  public Trial addPersonsItem(TrialPerson personsItem) {
    if (this.persons == null) {
      this.persons = new ArrayList<>();
    }
    this.persons.add(personsItem);
    return this;
  }

  /**
   * People related to the trial
   * @return persons
   */
  @javax.annotation.Nonnull
  public List<TrialPerson> getPersons() {
    return persons;
  }

  public void setPersons(List<TrialPerson> persons) {
    this.persons = persons;
  }


  public Trial publicTitle(String publicTitle) {
    this.publicTitle = publicTitle;
    return this;
  }

  /**
   * Title of the trial
   * @return publicTitle
   */
  @javax.annotation.Nonnull
  public String getPublicTitle() {
    return publicTitle;
  }

  public void setPublicTitle(String publicTitle) {
    this.publicTitle = publicTitle;
  }


  public Trial publications(List<PublicationSummary> publications) {
    this.publications = publications;
    return this;
  }

  public Trial addPublicationsItem(PublicationSummary publicationsItem) {
    if (this.publications == null) {
      this.publications = new ArrayList<>();
    }
    this.publications.add(publicationsItem);
    return this;
  }

  /**
   * Publications referring the trial
   * @return publications
   */
  @javax.annotation.Nonnull
  public List<PublicationSummary> getPublications() {
    return publications;
  }

  public void setPublications(List<PublicationSummary> publications) {
    this.publications = publications;
  }


  public Trial records(List<RecordSummary> records) {
    this.records = records;
    return this;
  }

  public Trial addRecordsItem(RecordSummary recordsItem) {
    if (this.records == null) {
      this.records = new ArrayList<>();
    }
    this.records.add(recordsItem);
    return this;
  }

  /**
   * (published) records of the trial
   * @return records
   */
  @javax.annotation.Nonnull
  public List<RecordSummary> getRecords() {
    return records;
  }

  public void setRecords(List<RecordSummary> records) {
    this.records = records;
  }


  public Trial recruitmentStatus(RecruitmentStatusEnum recruitmentStatus) {
    this.recruitmentStatus = recruitmentStatus;
    return this;
  }

  /**
   * Recruitment status of the trial
   * @return recruitmentStatus
   */
  @javax.annotation.Nullable
  public RecruitmentStatusEnum getRecruitmentStatus() {
    return recruitmentStatus;
  }

  public void setRecruitmentStatus(RecruitmentStatusEnum recruitmentStatus) {
    this.recruitmentStatus = recruitmentStatus;
  }


  public Trial registrationDate(OffsetDateTime registrationDate) {
    this.registrationDate = registrationDate;
    return this;
  }

  /**
   * Date the trial was registered
   * @return registrationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRegistrationDate() {
    return registrationDate;
  }

  public void setRegistrationDate(OffsetDateTime registrationDate) {
    this.registrationDate = registrationDate;
  }


  public Trial resultsExemptionDate(OffsetDateTime resultsExemptionDate) {
    this.resultsExemptionDate = resultsExemptionDate;
    return this;
  }

  /**
   * Date when a certification of exemption has been filed for the trial
   * @return resultsExemptionDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getResultsExemptionDate() {
    return resultsExemptionDate;
  }

  public void setResultsExemptionDate(OffsetDateTime resultsExemptionDate) {
    this.resultsExemptionDate = resultsExemptionDate;
  }


  public Trial risksOfBias(List<RiskOfBias> risksOfBias) {
    this.risksOfBias = risksOfBias;
    return this;
  }

  public Trial addRisksOfBiasItem(RiskOfBias risksOfBiasItem) {
    if (this.risksOfBias == null) {
      this.risksOfBias = new ArrayList<>();
    }
    this.risksOfBias.add(risksOfBiasItem);
    return this;
  }

  /**
   * Get risksOfBias
   * @return risksOfBias
   */
  @javax.annotation.Nonnull
  public List<RiskOfBias> getRisksOfBias() {
    return risksOfBias;
  }

  public void setRisksOfBias(List<RiskOfBias> risksOfBias) {
    this.risksOfBias = risksOfBias;
  }


  public Trial sourceId(String sourceId) {
    this.sourceId = sourceId;
    return this;
  }

  /**
   * ID of the trial&#39;s source
   * @return sourceId
   */
  @javax.annotation.Nullable
  public String getSourceId() {
    return sourceId;
  }

  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public Trial sources(Object sources) {
    this.sources = sources;
    return this;
  }

  /**
   * Get sources
   * @return sources
   */
  @javax.annotation.Nonnull
  public Object getSources() {
    return sources;
  }

  public void setSources(Object sources) {
    this.sources = sources;
  }


  public Trial status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Completion status of the trial
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Trial studyPhase(List<String> studyPhase) {
    this.studyPhase = studyPhase;
    return this;
  }

  public Trial addStudyPhaseItem(String studyPhaseItem) {
    if (this.studyPhase == null) {
      this.studyPhase = new ArrayList<>();
    }
    this.studyPhase.add(studyPhaseItem);
    return this;
  }

  /**
   * Phases of the study (e.g. &#x60;[\&quot;Phase 2\&quot;]&#x60; or &#x60;[\&quot;Phase 1\&quot;, \&quot;Phase 2\&quot;]&#x60;)
   * @return studyPhase
   */
  @javax.annotation.Nullable
  public List<String> getStudyPhase() {
    return studyPhase;
  }

  public void setStudyPhase(List<String> studyPhase) {
    this.studyPhase = studyPhase;
  }


  public Trial targetSampleSize(Integer targetSampleSize) {
    this.targetSampleSize = targetSampleSize;
    return this;
  }

  /**
   * Target sample size for the trial
   * minimum: 0
   * @return targetSampleSize
   */
  @javax.annotation.Nullable
  public Integer getTargetSampleSize() {
    return targetSampleSize;
  }

  public void setTargetSampleSize(Integer targetSampleSize) {
    this.targetSampleSize = targetSampleSize;
  }


  public Trial url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Source URL (where the trial was collected from)
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Trial trial = (Trial) o;
    return Objects.equals(this.ageRange, trial.ageRange) &&
        Objects.equals(this.briefSummary, trial.briefSummary) &&
        Objects.equals(this.completionDate, trial.completionDate) &&
        Objects.equals(this.conditions, trial.conditions) &&
        Objects.equals(this.discrepancies, trial.discrepancies) &&
        Objects.equals(this.documents, trial.documents) &&
        Objects.equals(this.gender, trial.gender) &&
        Objects.equals(this.hasPublishedResults, trial.hasPublishedResults) &&
        Objects.equals(this.id, trial.id) &&
        Objects.equals(this.identifiers, trial.identifiers) &&
        Objects.equals(this.interventions, trial.interventions) &&
        Objects.equals(this.locations, trial.locations) &&
        Objects.equals(this.organisations, trial.organisations) &&
        Objects.equals(this.persons, trial.persons) &&
        Objects.equals(this.publicTitle, trial.publicTitle) &&
        Objects.equals(this.publications, trial.publications) &&
        Objects.equals(this.records, trial.records) &&
        Objects.equals(this.recruitmentStatus, trial.recruitmentStatus) &&
        Objects.equals(this.registrationDate, trial.registrationDate) &&
        Objects.equals(this.resultsExemptionDate, trial.resultsExemptionDate) &&
        Objects.equals(this.risksOfBias, trial.risksOfBias) &&
        Objects.equals(this.sourceId, trial.sourceId) &&
        Objects.equals(this.sources, trial.sources) &&
        Objects.equals(this.status, trial.status) &&
        Objects.equals(this.studyPhase, trial.studyPhase) &&
        Objects.equals(this.targetSampleSize, trial.targetSampleSize) &&
        Objects.equals(this.url, trial.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ageRange, briefSummary, completionDate, conditions, discrepancies, documents, gender, hasPublishedResults, id, identifiers, interventions, locations, organisations, persons, publicTitle, publications, records, recruitmentStatus, registrationDate, resultsExemptionDate, risksOfBias, sourceId, sources, status, studyPhase, targetSampleSize, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Trial {\n");
    sb.append("    ageRange: ").append(toIndentedString(ageRange)).append("\n");
    sb.append("    briefSummary: ").append(toIndentedString(briefSummary)).append("\n");
    sb.append("    completionDate: ").append(toIndentedString(completionDate)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    discrepancies: ").append(toIndentedString(discrepancies)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    hasPublishedResults: ").append(toIndentedString(hasPublishedResults)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    interventions: ").append(toIndentedString(interventions)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    organisations: ").append(toIndentedString(organisations)).append("\n");
    sb.append("    persons: ").append(toIndentedString(persons)).append("\n");
    sb.append("    publicTitle: ").append(toIndentedString(publicTitle)).append("\n");
    sb.append("    publications: ").append(toIndentedString(publications)).append("\n");
    sb.append("    records: ").append(toIndentedString(records)).append("\n");
    sb.append("    recruitmentStatus: ").append(toIndentedString(recruitmentStatus)).append("\n");
    sb.append("    registrationDate: ").append(toIndentedString(registrationDate)).append("\n");
    sb.append("    resultsExemptionDate: ").append(toIndentedString(resultsExemptionDate)).append("\n");
    sb.append("    risksOfBias: ").append(toIndentedString(risksOfBias)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    studyPhase: ").append(toIndentedString(studyPhase)).append("\n");
    sb.append("    targetSampleSize: ").append(toIndentedString(targetSampleSize)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("age_range");
    openapiFields.add("brief_summary");
    openapiFields.add("completion_date");
    openapiFields.add("conditions");
    openapiFields.add("discrepancies");
    openapiFields.add("documents");
    openapiFields.add("gender");
    openapiFields.add("has_published_results");
    openapiFields.add("id");
    openapiFields.add("identifiers");
    openapiFields.add("interventions");
    openapiFields.add("locations");
    openapiFields.add("organisations");
    openapiFields.add("persons");
    openapiFields.add("public_title");
    openapiFields.add("publications");
    openapiFields.add("records");
    openapiFields.add("recruitment_status");
    openapiFields.add("registration_date");
    openapiFields.add("results_exemption_date");
    openapiFields.add("risks_of_bias");
    openapiFields.add("source_id");
    openapiFields.add("sources");
    openapiFields.add("status");
    openapiFields.add("study_phase");
    openapiFields.add("target_sample_size");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("interventions");
    openapiRequiredFields.add("locations");
    openapiRequiredFields.add("organisations");
    openapiRequiredFields.add("persons");
    openapiRequiredFields.add("public_title");
    openapiRequiredFields.add("publications");
    openapiRequiredFields.add("records");
    openapiRequiredFields.add("risks_of_bias");
    openapiRequiredFields.add("sources");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Trial
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Trial.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Trial is not found in the empty JSON string", Trial.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Trial.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Trial` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Trial.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `age_range`
      if (jsonObj.get("age_range") != null && !jsonObj.get("age_range").isJsonNull()) {
        TrialAgeRange.validateJsonElement(jsonObj.get("age_range"));
      }
      if ((jsonObj.get("brief_summary") != null && !jsonObj.get("brief_summary").isJsonNull()) && !jsonObj.get("brief_summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brief_summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brief_summary").toString()));
      }
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            Condition.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
      if (jsonObj.get("documents") != null && !jsonObj.get("documents").isJsonNull()) {
        JsonArray jsonArraydocuments = jsonObj.getAsJsonArray("documents");
        if (jsonArraydocuments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documents` to be an array in the JSON string but got `%s`", jsonObj.get("documents").toString()));
          }

          // validate the optional field `documents` (array)
          for (int i = 0; i < jsonArraydocuments.size(); i++) {
            DocumentSummary.validateJsonElement(jsonArraydocuments.get(i));
          };
        }
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      // validate the optional field `gender`
      if (jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) {
        GenderEnum.validateJsonElement(jsonObj.get("gender"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("interventions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `interventions` to be an array in the JSON string but got `%s`", jsonObj.get("interventions").toString()));
      }

      JsonArray jsonArrayinterventions = jsonObj.getAsJsonArray("interventions");
      // validate the required field `interventions` (array)
      for (int i = 0; i < jsonArrayinterventions.size(); i++) {
        Intervention.validateJsonElement(jsonArrayinterventions.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("locations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
      }

      JsonArray jsonArraylocations = jsonObj.getAsJsonArray("locations");
      // validate the required field `locations` (array)
      for (int i = 0; i < jsonArraylocations.size(); i++) {
        TrialLocation.validateJsonElement(jsonArraylocations.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("organisations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `organisations` to be an array in the JSON string but got `%s`", jsonObj.get("organisations").toString()));
      }

      JsonArray jsonArrayorganisations = jsonObj.getAsJsonArray("organisations");
      // validate the required field `organisations` (array)
      for (int i = 0; i < jsonArrayorganisations.size(); i++) {
        TrialOrganisation.validateJsonElement(jsonArrayorganisations.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("persons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `persons` to be an array in the JSON string but got `%s`", jsonObj.get("persons").toString()));
      }

      JsonArray jsonArraypersons = jsonObj.getAsJsonArray("persons");
      // validate the required field `persons` (array)
      for (int i = 0; i < jsonArraypersons.size(); i++) {
        TrialPerson.validateJsonElement(jsonArraypersons.get(i));
      };
      if (!jsonObj.get("public_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_title").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("publications").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `publications` to be an array in the JSON string but got `%s`", jsonObj.get("publications").toString()));
      }

      JsonArray jsonArraypublications = jsonObj.getAsJsonArray("publications");
      // validate the required field `publications` (array)
      for (int i = 0; i < jsonArraypublications.size(); i++) {
        PublicationSummary.validateJsonElement(jsonArraypublications.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("records").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `records` to be an array in the JSON string but got `%s`", jsonObj.get("records").toString()));
      }

      JsonArray jsonArrayrecords = jsonObj.getAsJsonArray("records");
      // validate the required field `records` (array)
      for (int i = 0; i < jsonArrayrecords.size(); i++) {
        RecordSummary.validateJsonElement(jsonArrayrecords.get(i));
      };
      if ((jsonObj.get("recruitment_status") != null && !jsonObj.get("recruitment_status").isJsonNull()) && !jsonObj.get("recruitment_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recruitment_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recruitment_status").toString()));
      }
      // validate the optional field `recruitment_status`
      if (jsonObj.get("recruitment_status") != null && !jsonObj.get("recruitment_status").isJsonNull()) {
        RecruitmentStatusEnum.validateJsonElement(jsonObj.get("recruitment_status"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("risks_of_bias").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `risks_of_bias` to be an array in the JSON string but got `%s`", jsonObj.get("risks_of_bias").toString()));
      }

      JsonArray jsonArrayrisksOfBias = jsonObj.getAsJsonArray("risks_of_bias");
      // validate the required field `risks_of_bias` (array)
      for (int i = 0; i < jsonArrayrisksOfBias.size(); i++) {
        RiskOfBias.validateJsonElement(jsonArrayrisksOfBias.get(i));
      };
      if ((jsonObj.get("source_id") != null && !jsonObj.get("source_id").isJsonNull()) && !jsonObj.get("source_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("study_phase") != null && !jsonObj.get("study_phase").isJsonNull() && !jsonObj.get("study_phase").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `study_phase` to be an array in the JSON string but got `%s`", jsonObj.get("study_phase").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Trial.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Trial' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Trial> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Trial.class));

       return (TypeAdapter<T>) new TypeAdapter<Trial>() {
           @Override
           public void write(JsonWriter out, Trial value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Trial read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Trial given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Trial
   * @throws IOException if the JSON string is invalid with respect to Trial
   */
  public static Trial fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Trial.class);
  }

  /**
   * Convert an instance of Trial to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

