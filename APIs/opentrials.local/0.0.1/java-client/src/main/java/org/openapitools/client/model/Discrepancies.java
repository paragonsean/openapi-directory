/*
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DiscrepantFieldBoolean;
import org.openapitools.client.model.DiscrepantFieldInteger;
import org.openapitools.client.model.DiscrepantFieldString;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object listing the Trial&#39;s discrepant fields
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:13.839361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Discrepancies {
  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private List<DiscrepantFieldString> gender = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_PUBLISHED_RESULTS = "has_published_results";
  @SerializedName(SERIALIZED_NAME_HAS_PUBLISHED_RESULTS)
  private List<DiscrepantFieldBoolean> hasPublishedResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECRUITMENT_STATUS = "recruitment_status";
  @SerializedName(SERIALIZED_NAME_RECRUITMENT_STATUS)
  private List<DiscrepantFieldString> recruitmentStatus = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private List<DiscrepantFieldString> status = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_SAMPLE_SIZE = "target_sample_size";
  @SerializedName(SERIALIZED_NAME_TARGET_SAMPLE_SIZE)
  private List<DiscrepantFieldInteger> targetSampleSize = new ArrayList<>();

  public Discrepancies() {
  }

  public Discrepancies gender(List<DiscrepantFieldString> gender) {
    this.gender = gender;
    return this;
  }

  public Discrepancies addGenderItem(DiscrepantFieldString genderItem) {
    if (this.gender == null) {
      this.gender = new ArrayList<>();
    }
    this.gender.add(genderItem);
    return this;
  }

  /**
   * Get gender
   * @return gender
   */
  @javax.annotation.Nullable
  public List<DiscrepantFieldString> getGender() {
    return gender;
  }

  public void setGender(List<DiscrepantFieldString> gender) {
    this.gender = gender;
  }


  public Discrepancies hasPublishedResults(List<DiscrepantFieldBoolean> hasPublishedResults) {
    this.hasPublishedResults = hasPublishedResults;
    return this;
  }

  public Discrepancies addHasPublishedResultsItem(DiscrepantFieldBoolean hasPublishedResultsItem) {
    if (this.hasPublishedResults == null) {
      this.hasPublishedResults = new ArrayList<>();
    }
    this.hasPublishedResults.add(hasPublishedResultsItem);
    return this;
  }

  /**
   * Get hasPublishedResults
   * @return hasPublishedResults
   */
  @javax.annotation.Nullable
  public List<DiscrepantFieldBoolean> getHasPublishedResults() {
    return hasPublishedResults;
  }

  public void setHasPublishedResults(List<DiscrepantFieldBoolean> hasPublishedResults) {
    this.hasPublishedResults = hasPublishedResults;
  }


  public Discrepancies recruitmentStatus(List<DiscrepantFieldString> recruitmentStatus) {
    this.recruitmentStatus = recruitmentStatus;
    return this;
  }

  public Discrepancies addRecruitmentStatusItem(DiscrepantFieldString recruitmentStatusItem) {
    if (this.recruitmentStatus == null) {
      this.recruitmentStatus = new ArrayList<>();
    }
    this.recruitmentStatus.add(recruitmentStatusItem);
    return this;
  }

  /**
   * Get recruitmentStatus
   * @return recruitmentStatus
   */
  @javax.annotation.Nullable
  public List<DiscrepantFieldString> getRecruitmentStatus() {
    return recruitmentStatus;
  }

  public void setRecruitmentStatus(List<DiscrepantFieldString> recruitmentStatus) {
    this.recruitmentStatus = recruitmentStatus;
  }


  public Discrepancies status(List<DiscrepantFieldString> status) {
    this.status = status;
    return this;
  }

  public Discrepancies addStatusItem(DiscrepantFieldString statusItem) {
    if (this.status == null) {
      this.status = new ArrayList<>();
    }
    this.status.add(statusItem);
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public List<DiscrepantFieldString> getStatus() {
    return status;
  }

  public void setStatus(List<DiscrepantFieldString> status) {
    this.status = status;
  }


  public Discrepancies targetSampleSize(List<DiscrepantFieldInteger> targetSampleSize) {
    this.targetSampleSize = targetSampleSize;
    return this;
  }

  public Discrepancies addTargetSampleSizeItem(DiscrepantFieldInteger targetSampleSizeItem) {
    if (this.targetSampleSize == null) {
      this.targetSampleSize = new ArrayList<>();
    }
    this.targetSampleSize.add(targetSampleSizeItem);
    return this;
  }

  /**
   * Get targetSampleSize
   * @return targetSampleSize
   */
  @javax.annotation.Nullable
  public List<DiscrepantFieldInteger> getTargetSampleSize() {
    return targetSampleSize;
  }

  public void setTargetSampleSize(List<DiscrepantFieldInteger> targetSampleSize) {
    this.targetSampleSize = targetSampleSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Discrepancies discrepancies = (Discrepancies) o;
    return Objects.equals(this.gender, discrepancies.gender) &&
        Objects.equals(this.hasPublishedResults, discrepancies.hasPublishedResults) &&
        Objects.equals(this.recruitmentStatus, discrepancies.recruitmentStatus) &&
        Objects.equals(this.status, discrepancies.status) &&
        Objects.equals(this.targetSampleSize, discrepancies.targetSampleSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gender, hasPublishedResults, recruitmentStatus, status, targetSampleSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Discrepancies {\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    hasPublishedResults: ").append(toIndentedString(hasPublishedResults)).append("\n");
    sb.append("    recruitmentStatus: ").append(toIndentedString(recruitmentStatus)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    targetSampleSize: ").append(toIndentedString(targetSampleSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gender");
    openapiFields.add("has_published_results");
    openapiFields.add("recruitment_status");
    openapiFields.add("status");
    openapiFields.add("target_sample_size");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Discrepancies
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Discrepancies.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Discrepancies is not found in the empty JSON string", Discrepancies.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Discrepancies.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Discrepancies` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) {
        JsonArray jsonArraygender = jsonObj.getAsJsonArray("gender");
        if (jsonArraygender != null) {
          // ensure the json data is an array
          if (!jsonObj.get("gender").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `gender` to be an array in the JSON string but got `%s`", jsonObj.get("gender").toString()));
          }

          // validate the optional field `gender` (array)
          for (int i = 0; i < jsonArraygender.size(); i++) {
            DiscrepantFieldString.validateJsonElement(jsonArraygender.get(i));
          };
        }
      }
      if (jsonObj.get("has_published_results") != null && !jsonObj.get("has_published_results").isJsonNull()) {
        JsonArray jsonArrayhasPublishedResults = jsonObj.getAsJsonArray("has_published_results");
        if (jsonArrayhasPublishedResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("has_published_results").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `has_published_results` to be an array in the JSON string but got `%s`", jsonObj.get("has_published_results").toString()));
          }

          // validate the optional field `has_published_results` (array)
          for (int i = 0; i < jsonArrayhasPublishedResults.size(); i++) {
            DiscrepantFieldBoolean.validateJsonElement(jsonArrayhasPublishedResults.get(i));
          };
        }
      }
      if (jsonObj.get("recruitment_status") != null && !jsonObj.get("recruitment_status").isJsonNull()) {
        JsonArray jsonArrayrecruitmentStatus = jsonObj.getAsJsonArray("recruitment_status");
        if (jsonArrayrecruitmentStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recruitment_status").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recruitment_status` to be an array in the JSON string but got `%s`", jsonObj.get("recruitment_status").toString()));
          }

          // validate the optional field `recruitment_status` (array)
          for (int i = 0; i < jsonArrayrecruitmentStatus.size(); i++) {
            DiscrepantFieldString.validateJsonElement(jsonArrayrecruitmentStatus.get(i));
          };
        }
      }
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        JsonArray jsonArraystatus = jsonObj.getAsJsonArray("status");
        if (jsonArraystatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("status").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `status` to be an array in the JSON string but got `%s`", jsonObj.get("status").toString()));
          }

          // validate the optional field `status` (array)
          for (int i = 0; i < jsonArraystatus.size(); i++) {
            DiscrepantFieldString.validateJsonElement(jsonArraystatus.get(i));
          };
        }
      }
      if (jsonObj.get("target_sample_size") != null && !jsonObj.get("target_sample_size").isJsonNull()) {
        JsonArray jsonArraytargetSampleSize = jsonObj.getAsJsonArray("target_sample_size");
        if (jsonArraytargetSampleSize != null) {
          // ensure the json data is an array
          if (!jsonObj.get("target_sample_size").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `target_sample_size` to be an array in the JSON string but got `%s`", jsonObj.get("target_sample_size").toString()));
          }

          // validate the optional field `target_sample_size` (array)
          for (int i = 0; i < jsonArraytargetSampleSize.size(); i++) {
            DiscrepantFieldInteger.validateJsonElement(jsonArraytargetSampleSize.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Discrepancies.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Discrepancies' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Discrepancies> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Discrepancies.class));

       return (TypeAdapter<T>) new TypeAdapter<Discrepancies>() {
           @Override
           public void write(JsonWriter out, Discrepancies value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Discrepancies read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Discrepancies given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Discrepancies
   * @throws IOException if the JSON string is invalid with respect to Discrepancies
   */
  public static Discrepancies fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Discrepancies.class);
  }

  /**
   * Convert an instance of Discrepancies to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

