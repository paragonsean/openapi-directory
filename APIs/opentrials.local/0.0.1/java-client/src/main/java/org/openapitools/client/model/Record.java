/*
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Source;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Record
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:13.839361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Record {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private Object identifiers;

  public static final String SERIALIZED_NAME_IS_PRIMARY = "is_primary";
  @SerializedName(SERIALIZED_NAME_IS_PRIMARY)
  private Boolean isPrimary;

  public static final String SERIALIZED_NAME_LAST_VERIFICATION_DATE = "last_verification_date";
  @SerializedName(SERIALIZED_NAME_LAST_VERIFICATION_DATE)
  private OffsetDateTime lastVerificationDate;

  public static final String SERIALIZED_NAME_PUBLIC_TITLE = "public_title";
  @SerializedName(SERIALIZED_NAME_PUBLIC_TITLE)
  private String publicTitle;

  /**
   * Trial&#39;s recruitment status (e.g. recruiting, unknown etc.)
   */
  @JsonAdapter(RecruitmentStatusEnum.Adapter.class)
  public enum RecruitmentStatusEnum {
    RECRUITING("recruiting"),
    
    NOT_RECRUITING("not_recruiting"),
    
    UNKNOWN("unknown"),
    
    OTHER("other");

    private String value;

    RecruitmentStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecruitmentStatusEnum fromValue(String value) {
      for (RecruitmentStatusEnum b : RecruitmentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecruitmentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecruitmentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecruitmentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecruitmentStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecruitmentStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECRUITMENT_STATUS = "recruitment_status";
  @SerializedName(SERIALIZED_NAME_RECRUITMENT_STATUS)
  private RecruitmentStatusEnum recruitmentStatus;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private Source source;

  public static final String SERIALIZED_NAME_SOURCE_ID = "source_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_SOURCE_URL = "source_url";
  @SerializedName(SERIALIZED_NAME_SOURCE_URL)
  private String sourceUrl;

  /**
   * Trial&#39;s status (e.g. ongoing, withdrawn, complete etc.)
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ONGOING("ongoing"),
    
    WITHDRAWN("withdrawn"),
    
    SUSPENDED("suspended"),
    
    TERMINATED("terminated"),
    
    COMPLETE("complete"),
    
    UNKNOWN("unknown"),
    
    OTHER("other");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TRIAL_ID = "trial_id";
  @SerializedName(SERIALIZED_NAME_TRIAL_ID)
  private String trialId;

  public static final String SERIALIZED_NAME_TRIAL_URL = "trial_url";
  @SerializedName(SERIALIZED_NAME_TRIAL_URL)
  private String trialUrl;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Record() {
  }

  public Record createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Date when the record was created
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Record id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the record
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Record identifiers(Object identifiers) {
    this.identifiers = identifiers;
    return this;
  }

  /**
   * Object that maps the trial&#39;s sources ids with its identifiers.
   * @return identifiers
   */
  @javax.annotation.Nullable
  public Object getIdentifiers() {
    return identifiers;
  }

  public void setIdentifiers(Object identifiers) {
    this.identifiers = identifiers;
  }


  public Record isPrimary(Boolean isPrimary) {
    this.isPrimary = isPrimary;
    return this;
  }

  /**
   * Is this record the primary source of data for its trial
   * @return isPrimary
   */
  @javax.annotation.Nullable
  public Boolean getIsPrimary() {
    return isPrimary;
  }

  public void setIsPrimary(Boolean isPrimary) {
    this.isPrimary = isPrimary;
  }


  public Record lastVerificationDate(OffsetDateTime lastVerificationDate) {
    this.lastVerificationDate = lastVerificationDate;
    return this;
  }

  /**
   * Date when the record&#39;s data was last verified by provider
   * @return lastVerificationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastVerificationDate() {
    return lastVerificationDate;
  }

  public void setLastVerificationDate(OffsetDateTime lastVerificationDate) {
    this.lastVerificationDate = lastVerificationDate;
  }


  public Record publicTitle(String publicTitle) {
    this.publicTitle = publicTitle;
    return this;
  }

  /**
   * Title of the record
   * @return publicTitle
   */
  @javax.annotation.Nonnull
  public String getPublicTitle() {
    return publicTitle;
  }

  public void setPublicTitle(String publicTitle) {
    this.publicTitle = publicTitle;
  }


  public Record recruitmentStatus(RecruitmentStatusEnum recruitmentStatus) {
    this.recruitmentStatus = recruitmentStatus;
    return this;
  }

  /**
   * Trial&#39;s recruitment status (e.g. recruiting, unknown etc.)
   * @return recruitmentStatus
   */
  @javax.annotation.Nullable
  public RecruitmentStatusEnum getRecruitmentStatus() {
    return recruitmentStatus;
  }

  public void setRecruitmentStatus(RecruitmentStatusEnum recruitmentStatus) {
    this.recruitmentStatus = recruitmentStatus;
  }


  public Record source(Source source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nonnull
  public Source getSource() {
    return source;
  }

  public void setSource(Source source) {
    this.source = source;
  }


  public Record sourceId(String sourceId) {
    this.sourceId = sourceId;
    return this;
  }

  /**
   * ID of the record&#39;s source
   * @return sourceId
   */
  @javax.annotation.Nullable
  public String getSourceId() {
    return sourceId;
  }

  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public Record sourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  /**
   * URL of the record&#39;s source (where it was collected from)
   * @return sourceUrl
   */
  @javax.annotation.Nonnull
  public String getSourceUrl() {
    return sourceUrl;
  }

  public void setSourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
  }


  public Record status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Trial&#39;s status (e.g. ongoing, withdrawn, complete etc.)
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Record trialId(String trialId) {
    this.trialId = trialId;
    return this;
  }

  /**
   * ID of the trial referenced in the record
   * @return trialId
   */
  @javax.annotation.Nonnull
  public String getTrialId() {
    return trialId;
  }

  public void setTrialId(String trialId) {
    this.trialId = trialId;
  }


  public Record trialUrl(String trialUrl) {
    this.trialUrl = trialUrl;
    return this;
  }

  /**
   * OpenTrials API URL of the trial referenced in the record
   * @return trialUrl
   */
  @javax.annotation.Nonnull
  public String getTrialUrl() {
    return trialUrl;
  }

  public void setTrialUrl(String trialUrl) {
    this.trialUrl = trialUrl;
  }


  public Record updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Date when the record was updated
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Record url(String url) {
    this.url = url;
    return this;
  }

  /**
   * OpenTrials API URL of the record
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Record record = (Record) o;
    return Objects.equals(this.createdAt, record.createdAt) &&
        Objects.equals(this.id, record.id) &&
        Objects.equals(this.identifiers, record.identifiers) &&
        Objects.equals(this.isPrimary, record.isPrimary) &&
        Objects.equals(this.lastVerificationDate, record.lastVerificationDate) &&
        Objects.equals(this.publicTitle, record.publicTitle) &&
        Objects.equals(this.recruitmentStatus, record.recruitmentStatus) &&
        Objects.equals(this.source, record.source) &&
        Objects.equals(this.sourceId, record.sourceId) &&
        Objects.equals(this.sourceUrl, record.sourceUrl) &&
        Objects.equals(this.status, record.status) &&
        Objects.equals(this.trialId, record.trialId) &&
        Objects.equals(this.trialUrl, record.trialUrl) &&
        Objects.equals(this.updatedAt, record.updatedAt) &&
        Objects.equals(this.url, record.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, id, identifiers, isPrimary, lastVerificationDate, publicTitle, recruitmentStatus, source, sourceId, sourceUrl, status, trialId, trialUrl, updatedAt, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Record {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    isPrimary: ").append(toIndentedString(isPrimary)).append("\n");
    sb.append("    lastVerificationDate: ").append(toIndentedString(lastVerificationDate)).append("\n");
    sb.append("    publicTitle: ").append(toIndentedString(publicTitle)).append("\n");
    sb.append("    recruitmentStatus: ").append(toIndentedString(recruitmentStatus)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    sourceUrl: ").append(toIndentedString(sourceUrl)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    trialId: ").append(toIndentedString(trialId)).append("\n");
    sb.append("    trialUrl: ").append(toIndentedString(trialUrl)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("id");
    openapiFields.add("identifiers");
    openapiFields.add("is_primary");
    openapiFields.add("last_verification_date");
    openapiFields.add("public_title");
    openapiFields.add("recruitment_status");
    openapiFields.add("source");
    openapiFields.add("source_id");
    openapiFields.add("source_url");
    openapiFields.add("status");
    openapiFields.add("trial_id");
    openapiFields.add("trial_url");
    openapiFields.add("updated_at");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("public_title");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("source_url");
    openapiRequiredFields.add("trial_id");
    openapiRequiredFields.add("trial_url");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Record
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Record.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Record is not found in the empty JSON string", Record.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Record.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Record` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Record.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("public_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_title").toString()));
      }
      if ((jsonObj.get("recruitment_status") != null && !jsonObj.get("recruitment_status").isJsonNull()) && !jsonObj.get("recruitment_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recruitment_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recruitment_status").toString()));
      }
      // validate the optional field `recruitment_status`
      if (jsonObj.get("recruitment_status") != null && !jsonObj.get("recruitment_status").isJsonNull()) {
        RecruitmentStatusEnum.validateJsonElement(jsonObj.get("recruitment_status"));
      }
      // validate the required field `source`
      Source.validateJsonElement(jsonObj.get("source"));
      if ((jsonObj.get("source_id") != null && !jsonObj.get("source_id").isJsonNull()) && !jsonObj.get("source_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_id").toString()));
      }
      if (!jsonObj.get("source_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_url").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if (!jsonObj.get("trial_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trial_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trial_id").toString()));
      }
      if (!jsonObj.get("trial_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trial_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trial_url").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Record.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Record' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Record> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Record.class));

       return (TypeAdapter<T>) new TypeAdapter<Record>() {
           @Override
           public void write(JsonWriter out, Record value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Record read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Record given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Record
   * @throws IOException if the JSON string is invalid with respect to Record
   */
  public static Record fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Record.class);
  }

  /**
   * Convert an instance of Record to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

