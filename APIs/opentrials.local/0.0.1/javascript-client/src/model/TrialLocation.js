/**
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Location from './Location';

/**
 * The TrialLocation model module.
 * @module model/TrialLocation
 * @version 0.0.1
 */
class TrialLocation {
    /**
     * Constructs a new <code>TrialLocation</code>.
     * Location of a trial
     * @alias module:model/TrialLocation
     * @implements module:model/Location
     * @param id {String} ID of the location
     * @param name {String} Name of the location
     */
    constructor(id, name) { 
        Location.initialize(this, id, name);
        TrialLocation.initialize(this, id, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name) { 
        obj['id'] = id;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>TrialLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrialLocation} obj Optional instance to populate.
     * @return {module:model/TrialLocation} The populated <code>TrialLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrialLocation();
            Location.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrialLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrialLocation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TrialLocation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }

        return true;
    }


}

TrialLocation.RequiredProperties = ["id", "name"];

/**
 * ID of the location
 * @member {String} id
 */
TrialLocation.prototype['id'] = undefined;

/**
 * Name of the location
 * @member {String} name
 */
TrialLocation.prototype['name'] = undefined;

/**
 * Type of the location (country / city / other)
 * @member {module:model/TrialLocation.TypeEnum} type
 */
TrialLocation.prototype['type'] = undefined;

/**
 * @member {module:model/TrialLocation.RoleEnum} role
 */
TrialLocation.prototype['role'] = undefined;


// Implement Location interface:
/**
 * ID of the location
 * @member {String} id
 */
Location.prototype['id'] = undefined;
/**
 * Name of the location
 * @member {String} name
 */
Location.prototype['name'] = undefined;
/**
 * Type of the location (country / city / other)
 * @member {module:model/Location.TypeEnum} type
 */
Location.prototype['type'] = undefined;



/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
TrialLocation['TypeEnum'] = {

    /**
     * value: "country"
     * @const
     */
    "country": "country",

    /**
     * value: "city"
     * @const
     */
    "city": "city",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};


/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
TrialLocation['RoleEnum'] = {

    /**
     * value: "recruitment_countries"
     * @const
     */
    "recruitment_countries": "recruitment_countries",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default TrialLocation;

