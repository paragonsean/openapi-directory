/**
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Condition from './Condition';
import DocumentSummary from './DocumentSummary';
import Intervention from './Intervention';
import PublicationSummary from './PublicationSummary';
import RecordSummary from './RecordSummary';
import RiskOfBias from './RiskOfBias';
import TrialAgeRange from './TrialAgeRange';
import TrialLocation from './TrialLocation';
import TrialOrganisation from './TrialOrganisation';
import TrialPerson from './TrialPerson';

/**
 * The Trial model module.
 * @module model/Trial
 * @version 0.0.1
 */
class Trial {
    /**
     * Constructs a new <code>Trial</code>.
     * @alias module:model/Trial
     * @param id {String} ID of the trial
     * @param interventions {Array.<module:model/Intervention>} Interventions related to the trial
     * @param locations {Array.<module:model/TrialLocation>} Locations related to the trial
     * @param organisations {Array.<module:model/TrialOrganisation>} Organisations related to the trial
     * @param persons {Array.<module:model/TrialPerson>} People related to the trial
     * @param publicTitle {String} Title of the trial
     * @param publications {Array.<module:model/PublicationSummary>} Publications referring the trial
     * @param records {Array.<module:model/RecordSummary>} (published) records of the trial
     * @param risksOfBias {Array.<module:model/RiskOfBias>} 
     * @param sources {Object} 
     * @param url {String} Source URL (where the trial was collected from)
     */
    constructor(id, interventions, locations, organisations, persons, publicTitle, publications, records, risksOfBias, sources, url) { 
        
        Trial.initialize(this, id, interventions, locations, organisations, persons, publicTitle, publications, records, risksOfBias, sources, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, interventions, locations, organisations, persons, publicTitle, publications, records, risksOfBias, sources, url) { 
        obj['id'] = id;
        obj['interventions'] = interventions;
        obj['locations'] = locations;
        obj['organisations'] = organisations;
        obj['persons'] = persons;
        obj['public_title'] = publicTitle;
        obj['publications'] = publications;
        obj['records'] = records;
        obj['risks_of_bias'] = risksOfBias;
        obj['sources'] = sources;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>Trial</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Trial} obj Optional instance to populate.
     * @return {module:model/Trial} The populated <code>Trial</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Trial();

            if (data.hasOwnProperty('age_range')) {
                obj['age_range'] = TrialAgeRange.constructFromObject(data['age_range']);
            }
            if (data.hasOwnProperty('brief_summary')) {
                obj['brief_summary'] = ApiClient.convertToType(data['brief_summary'], 'String');
            }
            if (data.hasOwnProperty('completion_date')) {
                obj['completion_date'] = ApiClient.convertToType(data['completion_date'], 'Date');
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [Condition]);
            }
            if (data.hasOwnProperty('discrepancies')) {
                obj['discrepancies'] = ApiClient.convertToType(data['discrepancies'], Object);
            }
            if (data.hasOwnProperty('documents')) {
                obj['documents'] = ApiClient.convertToType(data['documents'], [DocumentSummary]);
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('has_published_results')) {
                obj['has_published_results'] = ApiClient.convertToType(data['has_published_results'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = ApiClient.convertToType(data['identifiers'], Object);
            }
            if (data.hasOwnProperty('interventions')) {
                obj['interventions'] = ApiClient.convertToType(data['interventions'], [Intervention]);
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], [TrialLocation]);
            }
            if (data.hasOwnProperty('organisations')) {
                obj['organisations'] = ApiClient.convertToType(data['organisations'], [TrialOrganisation]);
            }
            if (data.hasOwnProperty('persons')) {
                obj['persons'] = ApiClient.convertToType(data['persons'], [TrialPerson]);
            }
            if (data.hasOwnProperty('public_title')) {
                obj['public_title'] = ApiClient.convertToType(data['public_title'], 'String');
            }
            if (data.hasOwnProperty('publications')) {
                obj['publications'] = ApiClient.convertToType(data['publications'], [PublicationSummary]);
            }
            if (data.hasOwnProperty('records')) {
                obj['records'] = ApiClient.convertToType(data['records'], [RecordSummary]);
            }
            if (data.hasOwnProperty('recruitment_status')) {
                obj['recruitment_status'] = ApiClient.convertToType(data['recruitment_status'], 'String');
            }
            if (data.hasOwnProperty('registration_date')) {
                obj['registration_date'] = ApiClient.convertToType(data['registration_date'], 'Date');
            }
            if (data.hasOwnProperty('results_exemption_date')) {
                obj['results_exemption_date'] = ApiClient.convertToType(data['results_exemption_date'], 'Date');
            }
            if (data.hasOwnProperty('risks_of_bias')) {
                obj['risks_of_bias'] = ApiClient.convertToType(data['risks_of_bias'], [RiskOfBias]);
            }
            if (data.hasOwnProperty('source_id')) {
                obj['source_id'] = ApiClient.convertToType(data['source_id'], 'String');
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], Object);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('study_phase')) {
                obj['study_phase'] = ApiClient.convertToType(data['study_phase'], ['String']);
            }
            if (data.hasOwnProperty('target_sample_size')) {
                obj['target_sample_size'] = ApiClient.convertToType(data['target_sample_size'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Trial</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Trial</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Trial.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `age_range`
        if (data['age_range']) { // data not null
          TrialAgeRange.validateJSON(data['age_range']);
        }
        // ensure the json data is a string
        if (data['brief_summary'] && !(typeof data['brief_summary'] === 'string' || data['brief_summary'] instanceof String)) {
            throw new Error("Expected the field `brief_summary` to be a primitive type in the JSON string but got " + data['brief_summary']);
        }
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                Condition.validateJSON(item);
            };
        }
        if (data['documents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['documents'])) {
                throw new Error("Expected the field `documents` to be an array in the JSON data but got " + data['documents']);
            }
            // validate the optional field `documents` (array)
            for (const item of data['documents']) {
                DocumentSummary.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['interventions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['interventions'])) {
                throw new Error("Expected the field `interventions` to be an array in the JSON data but got " + data['interventions']);
            }
            // validate the optional field `interventions` (array)
            for (const item of data['interventions']) {
                Intervention.validateJSON(item);
            };
        }
        if (data['locations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['locations'])) {
                throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
            }
            // validate the optional field `locations` (array)
            for (const item of data['locations']) {
                TrialLocation.validateJSON(item);
            };
        }
        if (data['organisations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['organisations'])) {
                throw new Error("Expected the field `organisations` to be an array in the JSON data but got " + data['organisations']);
            }
            // validate the optional field `organisations` (array)
            for (const item of data['organisations']) {
                TrialOrganisation.validateJSON(item);
            };
        }
        if (data['persons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['persons'])) {
                throw new Error("Expected the field `persons` to be an array in the JSON data but got " + data['persons']);
            }
            // validate the optional field `persons` (array)
            for (const item of data['persons']) {
                TrialPerson.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['public_title'] && !(typeof data['public_title'] === 'string' || data['public_title'] instanceof String)) {
            throw new Error("Expected the field `public_title` to be a primitive type in the JSON string but got " + data['public_title']);
        }
        if (data['publications']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['publications'])) {
                throw new Error("Expected the field `publications` to be an array in the JSON data but got " + data['publications']);
            }
            // validate the optional field `publications` (array)
            for (const item of data['publications']) {
                PublicationSummary.validateJSON(item);
            };
        }
        if (data['records']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['records'])) {
                throw new Error("Expected the field `records` to be an array in the JSON data but got " + data['records']);
            }
            // validate the optional field `records` (array)
            for (const item of data['records']) {
                RecordSummary.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['recruitment_status'] && !(typeof data['recruitment_status'] === 'string' || data['recruitment_status'] instanceof String)) {
            throw new Error("Expected the field `recruitment_status` to be a primitive type in the JSON string but got " + data['recruitment_status']);
        }
        if (data['risks_of_bias']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['risks_of_bias'])) {
                throw new Error("Expected the field `risks_of_bias` to be an array in the JSON data but got " + data['risks_of_bias']);
            }
            // validate the optional field `risks_of_bias` (array)
            for (const item of data['risks_of_bias']) {
                RiskOfBias.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['source_id'] && !(typeof data['source_id'] === 'string' || data['source_id'] instanceof String)) {
            throw new Error("Expected the field `source_id` to be a primitive type in the JSON string but got " + data['source_id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['study_phase'])) {
            throw new Error("Expected the field `study_phase` to be an array in the JSON data but got " + data['study_phase']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Trial.RequiredProperties = ["id", "interventions", "locations", "organisations", "persons", "public_title", "publications", "records", "risks_of_bias", "sources", "url"];

/**
 * @member {module:model/TrialAgeRange} age_range
 */
Trial.prototype['age_range'] = undefined;

/**
 * Summary of the trial
 * @member {String} brief_summary
 */
Trial.prototype['brief_summary'] = undefined;

/**
 * Date the trial was completed
 * @member {Date} completion_date
 */
Trial.prototype['completion_date'] = undefined;

/**
 * Conditions the trial refers to
 * @member {Array.<module:model/Condition>} conditions
 */
Trial.prototype['conditions'] = undefined;

/**
 * Discrepancies in trial's details between different sources
 * @member {Object} discrepancies
 */
Trial.prototype['discrepancies'] = undefined;

/**
 * Documents related to the trial
 * @member {Array.<module:model/DocumentSummary>} documents
 */
Trial.prototype['documents'] = undefined;

/**
 * Gender of the subjects of the trial
 * @member {module:model/Trial.GenderEnum} gender
 */
Trial.prototype['gender'] = undefined;

/**
 * Trial has its results published (true/false)
 * @member {Boolean} has_published_results
 */
Trial.prototype['has_published_results'] = undefined;

/**
 * ID of the trial
 * @member {String} id
 */
Trial.prototype['id'] = undefined;

/**
 * Object that maps the trial's sources ids with its identifiers.
 * @member {Object} identifiers
 */
Trial.prototype['identifiers'] = undefined;

/**
 * Interventions related to the trial
 * @member {Array.<module:model/Intervention>} interventions
 */
Trial.prototype['interventions'] = undefined;

/**
 * Locations related to the trial
 * @member {Array.<module:model/TrialLocation>} locations
 */
Trial.prototype['locations'] = undefined;

/**
 * Organisations related to the trial
 * @member {Array.<module:model/TrialOrganisation>} organisations
 */
Trial.prototype['organisations'] = undefined;

/**
 * People related to the trial
 * @member {Array.<module:model/TrialPerson>} persons
 */
Trial.prototype['persons'] = undefined;

/**
 * Title of the trial
 * @member {String} public_title
 */
Trial.prototype['public_title'] = undefined;

/**
 * Publications referring the trial
 * @member {Array.<module:model/PublicationSummary>} publications
 */
Trial.prototype['publications'] = undefined;

/**
 * (published) records of the trial
 * @member {Array.<module:model/RecordSummary>} records
 */
Trial.prototype['records'] = undefined;

/**
 * Recruitment status of the trial
 * @member {module:model/Trial.RecruitmentStatusEnum} recruitment_status
 */
Trial.prototype['recruitment_status'] = undefined;

/**
 * Date the trial was registered
 * @member {Date} registration_date
 */
Trial.prototype['registration_date'] = undefined;

/**
 * Date when a certification of exemption has been filed for the trial
 * @member {Date} results_exemption_date
 */
Trial.prototype['results_exemption_date'] = undefined;

/**
 * @member {Array.<module:model/RiskOfBias>} risks_of_bias
 */
Trial.prototype['risks_of_bias'] = undefined;

/**
 * ID of the trial's source
 * @member {String} source_id
 */
Trial.prototype['source_id'] = undefined;

/**
 * @member {Object} sources
 */
Trial.prototype['sources'] = undefined;

/**
 * Completion status of the trial
 * @member {module:model/Trial.StatusEnum} status
 */
Trial.prototype['status'] = undefined;

/**
 * Phases of the study (e.g. `[\"Phase 2\"]` or `[\"Phase 1\", \"Phase 2\"]`)
 * @member {Array.<String>} study_phase
 */
Trial.prototype['study_phase'] = undefined;

/**
 * Target sample size for the trial
 * @member {Number} target_sample_size
 */
Trial.prototype['target_sample_size'] = undefined;

/**
 * Source URL (where the trial was collected from)
 * @member {String} url
 */
Trial.prototype['url'] = undefined;





/**
 * Allowed values for the <code>gender</code> property.
 * @enum {String}
 * @readonly
 */
Trial['GenderEnum'] = {

    /**
     * value: "both"
     * @const
     */
    "both": "both",

    /**
     * value: "male"
     * @const
     */
    "male": "male",

    /**
     * value: "female"
     * @const
     */
    "female": "female"
};


/**
 * Allowed values for the <code>recruitment_status</code> property.
 * @enum {String}
 * @readonly
 */
Trial['RecruitmentStatusEnum'] = {

    /**
     * value: "recruiting"
     * @const
     */
    "recruiting": "recruiting",

    /**
     * value: "not_recruiting"
     * @const
     */
    "not_recruiting": "not_recruiting",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Trial['StatusEnum'] = {

    /**
     * value: "ongoing"
     * @const
     */
    "ongoing": "ongoing",

    /**
     * value: "withdrawn"
     * @const
     */
    "withdrawn": "withdrawn",

    /**
     * value: "suspended"
     * @const
     */
    "suspended": "suspended",

    /**
     * value: "terminated"
     * @const
     */
    "terminated": "terminated",

    /**
     * value: "complete"
     * @const
     */
    "complete": "complete",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default Trial;

