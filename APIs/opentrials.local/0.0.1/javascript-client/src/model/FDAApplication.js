/**
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FDAApproval from './FDAApproval';
import Organisation from './Organisation';

/**
 * The FDAApplication model module.
 * @module model/FDAApplication
 * @version 0.0.1
 */
class FDAApplication {
    /**
     * Constructs a new <code>FDAApplication</code>.
     * @alias module:model/FDAApplication
     * @param id {String} FDA application ID
     * @param url {String} OpenTrials API URL for this FDA application
     */
    constructor(id, url) { 
        
        FDAApplication.initialize(this, id, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, url) { 
        obj['id'] = id;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>FDAApplication</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FDAApplication} obj Optional instance to populate.
     * @return {module:model/FDAApplication} The populated <code>FDAApplication</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FDAApplication();

            if (data.hasOwnProperty('active_ingredients')) {
                obj['active_ingredients'] = ApiClient.convertToType(data['active_ingredients'], 'String');
            }
            if (data.hasOwnProperty('drug_name')) {
                obj['drug_name'] = ApiClient.convertToType(data['drug_name'], 'String');
            }
            if (data.hasOwnProperty('fda_approvals')) {
                obj['fda_approvals'] = ApiClient.convertToType(data['fda_approvals'], [FDAApproval]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('organisation')) {
                obj['organisation'] = Organisation.constructFromObject(data['organisation']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FDAApplication</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FDAApplication</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FDAApplication.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['active_ingredients'] && !(typeof data['active_ingredients'] === 'string' || data['active_ingredients'] instanceof String)) {
            throw new Error("Expected the field `active_ingredients` to be a primitive type in the JSON string but got " + data['active_ingredients']);
        }
        // ensure the json data is a string
        if (data['drug_name'] && !(typeof data['drug_name'] === 'string' || data['drug_name'] instanceof String)) {
            throw new Error("Expected the field `drug_name` to be a primitive type in the JSON string but got " + data['drug_name']);
        }
        if (data['fda_approvals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fda_approvals'])) {
                throw new Error("Expected the field `fda_approvals` to be an array in the JSON data but got " + data['fda_approvals']);
            }
            // validate the optional field `fda_approvals` (array)
            for (const item of data['fda_approvals']) {
                FDAApproval.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `organisation`
        if (data['organisation']) { // data not null
          Organisation.validateJSON(data['organisation']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

FDAApplication.RequiredProperties = ["id", "url"];

/**
 * Active ingredients contained in the drug
 * @member {String} active_ingredients
 */
FDAApplication.prototype['active_ingredients'] = undefined;

/**
 * Name of the drug
 * @member {String} drug_name
 */
FDAApplication.prototype['drug_name'] = undefined;

/**
 * Associated FDA approvals
 * @member {Array.<module:model/FDAApproval>} fda_approvals
 */
FDAApplication.prototype['fda_approvals'] = undefined;

/**
 * FDA application ID
 * @member {String} id
 */
FDAApplication.prototype['id'] = undefined;

/**
 * @member {module:model/Organisation} organisation
 */
FDAApplication.prototype['organisation'] = undefined;

/**
 * The FDA application type (e.g. \"NDA\", \"ANDA\", etc.)
 * @member {String} type
 */
FDAApplication.prototype['type'] = undefined;

/**
 * OpenTrials API URL for this FDA application
 * @member {String} url
 */
FDAApplication.prototype['url'] = undefined;






export default FDAApplication;

