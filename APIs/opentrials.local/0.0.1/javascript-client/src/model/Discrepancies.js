/**
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiscrepantFieldBoolean from './DiscrepantFieldBoolean';
import DiscrepantFieldInteger from './DiscrepantFieldInteger';
import DiscrepantFieldString from './DiscrepantFieldString';

/**
 * The Discrepancies model module.
 * @module model/Discrepancies
 * @version 0.0.1
 */
class Discrepancies {
    /**
     * Constructs a new <code>Discrepancies</code>.
     * Object listing the Trial&#39;s discrepant fields
     * @alias module:model/Discrepancies
     */
    constructor() { 
        
        Discrepancies.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Discrepancies</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Discrepancies} obj Optional instance to populate.
     * @return {module:model/Discrepancies} The populated <code>Discrepancies</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Discrepancies();

            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], [DiscrepantFieldString]);
            }
            if (data.hasOwnProperty('has_published_results')) {
                obj['has_published_results'] = ApiClient.convertToType(data['has_published_results'], [DiscrepantFieldBoolean]);
            }
            if (data.hasOwnProperty('recruitment_status')) {
                obj['recruitment_status'] = ApiClient.convertToType(data['recruitment_status'], [DiscrepantFieldString]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], [DiscrepantFieldString]);
            }
            if (data.hasOwnProperty('target_sample_size')) {
                obj['target_sample_size'] = ApiClient.convertToType(data['target_sample_size'], [DiscrepantFieldInteger]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Discrepancies</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Discrepancies</code>.
     */
    static validateJSON(data) {
        if (data['gender']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['gender'])) {
                throw new Error("Expected the field `gender` to be an array in the JSON data but got " + data['gender']);
            }
            // validate the optional field `gender` (array)
            for (const item of data['gender']) {
                DiscrepantFieldString.validateJSON(item);
            };
        }
        if (data['has_published_results']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['has_published_results'])) {
                throw new Error("Expected the field `has_published_results` to be an array in the JSON data but got " + data['has_published_results']);
            }
            // validate the optional field `has_published_results` (array)
            for (const item of data['has_published_results']) {
                DiscrepantFieldBoolean.validateJSON(item);
            };
        }
        if (data['recruitment_status']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recruitment_status'])) {
                throw new Error("Expected the field `recruitment_status` to be an array in the JSON data but got " + data['recruitment_status']);
            }
            // validate the optional field `recruitment_status` (array)
            for (const item of data['recruitment_status']) {
                DiscrepantFieldString.validateJSON(item);
            };
        }
        if (data['status']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['status'])) {
                throw new Error("Expected the field `status` to be an array in the JSON data but got " + data['status']);
            }
            // validate the optional field `status` (array)
            for (const item of data['status']) {
                DiscrepantFieldString.validateJSON(item);
            };
        }
        if (data['target_sample_size']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['target_sample_size'])) {
                throw new Error("Expected the field `target_sample_size` to be an array in the JSON data but got " + data['target_sample_size']);
            }
            // validate the optional field `target_sample_size` (array)
            for (const item of data['target_sample_size']) {
                DiscrepantFieldInteger.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/DiscrepantFieldString>} gender
 */
Discrepancies.prototype['gender'] = undefined;

/**
 * @member {Array.<module:model/DiscrepantFieldBoolean>} has_published_results
 */
Discrepancies.prototype['has_published_results'] = undefined;

/**
 * @member {Array.<module:model/DiscrepantFieldString>} recruitment_status
 */
Discrepancies.prototype['recruitment_status'] = undefined;

/**
 * @member {Array.<module:model/DiscrepantFieldString>} status
 */
Discrepancies.prototype['status'] = undefined;

/**
 * @member {Array.<module:model/DiscrepantFieldInteger>} target_sample_size
 */
Discrepancies.prototype['target_sample_size'] = undefined;






export default Discrepancies;

