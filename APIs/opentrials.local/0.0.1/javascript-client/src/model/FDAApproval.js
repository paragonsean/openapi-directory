/**
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FDAApplication from './FDAApplication';

/**
 * The FDAApproval model module.
 * @module model/FDAApproval
 * @version 0.0.1
 */
class FDAApproval {
    /**
     * Constructs a new <code>FDAApproval</code>.
     * @alias module:model/FDAApproval
     * @param actionDate {Date} 
     * @param id {String} FDA approval ID
     * @param supplementNumber {Number} 
     * @param type {String} Type of FDA approval
     */
    constructor(actionDate, id, supplementNumber, type) { 
        
        FDAApproval.initialize(this, actionDate, id, supplementNumber, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actionDate, id, supplementNumber, type) { 
        obj['action_date'] = actionDate;
        obj['id'] = id;
        obj['supplement_number'] = supplementNumber;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>FDAApproval</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FDAApproval} obj Optional instance to populate.
     * @return {module:model/FDAApproval} The populated <code>FDAApproval</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FDAApproval();

            if (data.hasOwnProperty('action_date')) {
                obj['action_date'] = ApiClient.convertToType(data['action_date'], 'Date');
            }
            if (data.hasOwnProperty('fda_application')) {
                obj['fda_application'] = FDAApplication.constructFromObject(data['fda_application']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('supplement_number')) {
                obj['supplement_number'] = ApiClient.convertToType(data['supplement_number'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FDAApproval</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FDAApproval</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FDAApproval.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `fda_application`
        if (data['fda_application']) { // data not null
          FDAApplication.validateJSON(data['fda_application']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

FDAApproval.RequiredProperties = ["action_date", "id", "supplement_number", "type"];

/**
 * @member {Date} action_date
 */
FDAApproval.prototype['action_date'] = undefined;

/**
 * @member {module:model/FDAApplication} fda_application
 */
FDAApproval.prototype['fda_application'] = undefined;

/**
 * FDA approval ID
 * @member {String} id
 */
FDAApproval.prototype['id'] = undefined;

/**
 * Additional information about the FDA approval
 * @member {String} notes
 */
FDAApproval.prototype['notes'] = undefined;

/**
 * @member {Number} supplement_number
 */
FDAApproval.prototype['supplement_number'] = undefined;

/**
 * Type of FDA approval
 * @member {String} type
 */
FDAApproval.prototype['type'] = undefined;






export default FDAApproval;

