/**
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentCategory from './DocumentCategory';
import FDAApplication from './FDAApplication';
import Source from './Source';
import TrialSummary from './TrialSummary';

/**
 * The Document model module.
 * @module model/Document
 * @version 0.0.1
 */
class Document {
    /**
     * Constructs a new <code>Document</code>.
     * @alias module:model/Document
     * @param documentCategory {module:model/DocumentCategory} 
     * @param id {String} ID of the document
     * @param name {String} 
     * @param url {String} OpenTrials API URL of the document
     */
    constructor(documentCategory, id, name, url) { 
        
        Document.initialize(this, documentCategory, id, name, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, documentCategory, id, name, url) { 
        obj['document_category'] = documentCategory;
        obj['id'] = id;
        obj['name'] = name;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>Document</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Document} obj Optional instance to populate.
     * @return {module:model/Document} The populated <code>Document</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Document();

            if (data.hasOwnProperty('document_category')) {
                obj['document_category'] = DocumentCategory.constructFromObject(data['document_category']);
            }
            if (data.hasOwnProperty('fda_application')) {
                obj['fda_application'] = FDAApplication.constructFromObject(data['fda_application']);
            }
            if (data.hasOwnProperty('file')) {
                obj['file'] = File.constructFromObject(data['file']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = Source.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('source_url')) {
                obj['source_url'] = ApiClient.convertToType(data['source_url'], 'String');
            }
            if (data.hasOwnProperty('trials')) {
                obj['trials'] = ApiClient.convertToType(data['trials'], [TrialSummary]);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Document</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Document</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Document.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `document_category`
        if (data['document_category']) { // data not null
          DocumentCategory.validateJSON(data['document_category']);
        }
        // validate the optional field `fda_application`
        if (data['fda_application']) { // data not null
          FDAApplication.validateJSON(data['fda_application']);
        }
        // validate the optional field `file`
        if (data['file']) { // data not null
          File.validateJSON(data['file']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          Source.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['source_url'] && !(typeof data['source_url'] === 'string' || data['source_url'] instanceof String)) {
            throw new Error("Expected the field `source_url` to be a primitive type in the JSON string but got " + data['source_url']);
        }
        if (data['trials']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['trials'])) {
                throw new Error("Expected the field `trials` to be an array in the JSON data but got " + data['trials']);
            }
            // validate the optional field `trials` (array)
            for (const item of data['trials']) {
                TrialSummary.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Document.RequiredProperties = ["document_category", "id", "name", "url"];

/**
 * @member {module:model/DocumentCategory} document_category
 */
Document.prototype['document_category'] = undefined;

/**
 * @member {module:model/FDAApplication} fda_application
 */
Document.prototype['fda_application'] = undefined;

/**
 * @member {File} file
 */
Document.prototype['file'] = undefined;

/**
 * ID of the document
 * @member {String} id
 */
Document.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Document.prototype['name'] = undefined;

/**
 * @member {module:model/Source} source
 */
Document.prototype['source'] = undefined;

/**
 * URL of origin for this document
 * @member {String} source_url
 */
Document.prototype['source_url'] = undefined;

/**
 * @member {Array.<module:model/TrialSummary>} trials
 */
Document.prototype['trials'] = undefined;

/**
 * OpenTrials API URL of the document
 * @member {String} url
 */
Document.prototype['url'] = undefined;






export default Document;

