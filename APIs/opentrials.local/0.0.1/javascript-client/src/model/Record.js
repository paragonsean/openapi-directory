/**
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Source from './Source';

/**
 * The Record model module.
 * @module model/Record
 * @version 0.0.1
 */
class Record {
    /**
     * Constructs a new <code>Record</code>.
     * @alias module:model/Record
     * @param createdAt {Date} Date when the record was created
     * @param id {String} ID of the record
     * @param publicTitle {String} Title of the record
     * @param source {module:model/Source} 
     * @param sourceUrl {String} URL of the record's source (where it was collected from)
     * @param trialId {String} ID of the trial referenced in the record
     * @param trialUrl {String} OpenTrials API URL of the trial referenced in the record
     * @param updatedAt {Date} Date when the record was updated
     * @param url {String} OpenTrials API URL of the record
     */
    constructor(createdAt, id, publicTitle, source, sourceUrl, trialId, trialUrl, updatedAt, url) { 
        
        Record.initialize(this, createdAt, id, publicTitle, source, sourceUrl, trialId, trialUrl, updatedAt, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, id, publicTitle, source, sourceUrl, trialId, trialUrl, updatedAt, url) { 
        obj['created_at'] = createdAt;
        obj['id'] = id;
        obj['public_title'] = publicTitle;
        obj['source'] = source;
        obj['source_url'] = sourceUrl;
        obj['trial_id'] = trialId;
        obj['trial_url'] = trialUrl;
        obj['updated_at'] = updatedAt;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>Record</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Record} obj Optional instance to populate.
     * @return {module:model/Record} The populated <code>Record</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Record();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = ApiClient.convertToType(data['identifiers'], Object);
            }
            if (data.hasOwnProperty('is_primary')) {
                obj['is_primary'] = ApiClient.convertToType(data['is_primary'], 'Boolean');
            }
            if (data.hasOwnProperty('last_verification_date')) {
                obj['last_verification_date'] = ApiClient.convertToType(data['last_verification_date'], 'Date');
            }
            if (data.hasOwnProperty('public_title')) {
                obj['public_title'] = ApiClient.convertToType(data['public_title'], 'String');
            }
            if (data.hasOwnProperty('recruitment_status')) {
                obj['recruitment_status'] = ApiClient.convertToType(data['recruitment_status'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = Source.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('source_id')) {
                obj['source_id'] = ApiClient.convertToType(data['source_id'], 'String');
            }
            if (data.hasOwnProperty('source_url')) {
                obj['source_url'] = ApiClient.convertToType(data['source_url'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('trial_id')) {
                obj['trial_id'] = ApiClient.convertToType(data['trial_id'], 'String');
            }
            if (data.hasOwnProperty('trial_url')) {
                obj['trial_url'] = ApiClient.convertToType(data['trial_url'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Record</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Record</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Record.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['public_title'] && !(typeof data['public_title'] === 'string' || data['public_title'] instanceof String)) {
            throw new Error("Expected the field `public_title` to be a primitive type in the JSON string but got " + data['public_title']);
        }
        // ensure the json data is a string
        if (data['recruitment_status'] && !(typeof data['recruitment_status'] === 'string' || data['recruitment_status'] instanceof String)) {
            throw new Error("Expected the field `recruitment_status` to be a primitive type in the JSON string but got " + data['recruitment_status']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          Source.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['source_id'] && !(typeof data['source_id'] === 'string' || data['source_id'] instanceof String)) {
            throw new Error("Expected the field `source_id` to be a primitive type in the JSON string but got " + data['source_id']);
        }
        // ensure the json data is a string
        if (data['source_url'] && !(typeof data['source_url'] === 'string' || data['source_url'] instanceof String)) {
            throw new Error("Expected the field `source_url` to be a primitive type in the JSON string but got " + data['source_url']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['trial_id'] && !(typeof data['trial_id'] === 'string' || data['trial_id'] instanceof String)) {
            throw new Error("Expected the field `trial_id` to be a primitive type in the JSON string but got " + data['trial_id']);
        }
        // ensure the json data is a string
        if (data['trial_url'] && !(typeof data['trial_url'] === 'string' || data['trial_url'] instanceof String)) {
            throw new Error("Expected the field `trial_url` to be a primitive type in the JSON string but got " + data['trial_url']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Record.RequiredProperties = ["created_at", "id", "public_title", "source", "source_url", "trial_id", "trial_url", "updated_at", "url"];

/**
 * Date when the record was created
 * @member {Date} created_at
 */
Record.prototype['created_at'] = undefined;

/**
 * ID of the record
 * @member {String} id
 */
Record.prototype['id'] = undefined;

/**
 * Object that maps the trial's sources ids with its identifiers.
 * @member {Object} identifiers
 */
Record.prototype['identifiers'] = undefined;

/**
 * Is this record the primary source of data for its trial
 * @member {Boolean} is_primary
 */
Record.prototype['is_primary'] = undefined;

/**
 * Date when the record's data was last verified by provider
 * @member {Date} last_verification_date
 */
Record.prototype['last_verification_date'] = undefined;

/**
 * Title of the record
 * @member {String} public_title
 */
Record.prototype['public_title'] = undefined;

/**
 * Trial's recruitment status (e.g. recruiting, unknown etc.)
 * @member {module:model/Record.RecruitmentStatusEnum} recruitment_status
 */
Record.prototype['recruitment_status'] = undefined;

/**
 * @member {module:model/Source} source
 */
Record.prototype['source'] = undefined;

/**
 * ID of the record's source
 * @member {String} source_id
 */
Record.prototype['source_id'] = undefined;

/**
 * URL of the record's source (where it was collected from)
 * @member {String} source_url
 */
Record.prototype['source_url'] = undefined;

/**
 * Trial's status (e.g. ongoing, withdrawn, complete etc.)
 * @member {module:model/Record.StatusEnum} status
 */
Record.prototype['status'] = undefined;

/**
 * ID of the trial referenced in the record
 * @member {String} trial_id
 */
Record.prototype['trial_id'] = undefined;

/**
 * OpenTrials API URL of the trial referenced in the record
 * @member {String} trial_url
 */
Record.prototype['trial_url'] = undefined;

/**
 * Date when the record was updated
 * @member {Date} updated_at
 */
Record.prototype['updated_at'] = undefined;

/**
 * OpenTrials API URL of the record
 * @member {String} url
 */
Record.prototype['url'] = undefined;





/**
 * Allowed values for the <code>recruitment_status</code> property.
 * @enum {String}
 * @readonly
 */
Record['RecruitmentStatusEnum'] = {

    /**
     * value: "recruiting"
     * @const
     */
    "recruiting": "recruiting",

    /**
     * value: "not_recruiting"
     * @const
     */
    "not_recruiting": "not_recruiting",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Record['StatusEnum'] = {

    /**
     * value: "ongoing"
     * @const
     */
    "ongoing": "ongoing",

    /**
     * value: "withdrawn"
     * @const
     */
    "withdrawn": "withdrawn",

    /**
     * value: "suspended"
     * @const
     */
    "suspended": "suspended",

    /**
     * value: "terminated"
     * @const
     */
    "terminated": "terminated",

    /**
     * value: "complete"
     * @const
     */
    "complete": "complete",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default Record;

