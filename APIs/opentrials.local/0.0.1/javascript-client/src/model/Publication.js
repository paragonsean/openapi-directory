/**
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Source from './Source';

/**
 * The Publication model module.
 * @module model/Publication
 * @version 0.0.1
 */
class Publication {
    /**
     * Constructs a new <code>Publication</code>.
     * @alias module:model/Publication
     * @param _abstract {String} 
     * @param id {String} ID of the publication
     * @param source {module:model/Source} 
     * @param sourceUrl {String} 
     * @param title {String} 
     * @param url {String} 
     */
    constructor(_abstract, id, source, sourceUrl, title, url) { 
        
        Publication.initialize(this, _abstract, id, source, sourceUrl, title, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, _abstract, id, source, sourceUrl, title, url) { 
        obj['abstract'] = _abstract;
        obj['id'] = id;
        obj['source'] = source;
        obj['source_url'] = sourceUrl;
        obj['title'] = title;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>Publication</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Publication} obj Optional instance to populate.
     * @return {module:model/Publication} The populated <code>Publication</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Publication();

            if (data.hasOwnProperty('abstract')) {
                obj['abstract'] = ApiClient.convertToType(data['abstract'], 'String');
            }
            if (data.hasOwnProperty('authors')) {
                obj['authors'] = ApiClient.convertToType(data['authors'], ['String']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('journal')) {
                obj['journal'] = ApiClient.convertToType(data['journal'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = Source.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('source_url')) {
                obj['source_url'] = ApiClient.convertToType(data['source_url'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Publication</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Publication</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Publication.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['abstract'] && !(typeof data['abstract'] === 'string' || data['abstract'] instanceof String)) {
            throw new Error("Expected the field `abstract` to be a primitive type in the JSON string but got " + data['abstract']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['authors'])) {
            throw new Error("Expected the field `authors` to be an array in the JSON data but got " + data['authors']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['journal'] && !(typeof data['journal'] === 'string' || data['journal'] instanceof String)) {
            throw new Error("Expected the field `journal` to be a primitive type in the JSON string but got " + data['journal']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          Source.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['source_url'] && !(typeof data['source_url'] === 'string' || data['source_url'] instanceof String)) {
            throw new Error("Expected the field `source_url` to be a primitive type in the JSON string but got " + data['source_url']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Publication.RequiredProperties = ["abstract", "id", "source", "source_url", "title", "url"];

/**
 * @member {String} abstract
 */
Publication.prototype['abstract'] = undefined;

/**
 * @member {Array.<String>} authors
 */
Publication.prototype['authors'] = undefined;

/**
 * @member {Date} created_at
 */
Publication.prototype['created_at'] = undefined;

/**
 * @member {Date} date
 */
Publication.prototype['date'] = undefined;

/**
 * ID of the publication
 * @member {String} id
 */
Publication.prototype['id'] = undefined;

/**
 * @member {String} journal
 */
Publication.prototype['journal'] = undefined;

/**
 * @member {String} slug
 */
Publication.prototype['slug'] = undefined;

/**
 * @member {module:model/Source} source
 */
Publication.prototype['source'] = undefined;

/**
 * @member {String} source_url
 */
Publication.prototype['source_url'] = undefined;

/**
 * @member {String} title
 */
Publication.prototype['title'] = undefined;

/**
 * @member {Date} updated_at
 */
Publication.prototype['updated_at'] = undefined;

/**
 * @member {String} url
 */
Publication.prototype['url'] = undefined;






export default Publication;

