/**
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Source model module.
 * @module model/Source
 * @version 0.0.1
 */
class Source {
    /**
     * Constructs a new <code>Source</code>.
     * @alias module:model/Source
     * @param id {String} 
     * @param name {String} 
     */
    constructor(id, name) { 
        
        Source.initialize(this, id, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name) { 
        obj['id'] = id;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Source</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Source} obj Optional instance to populate.
     * @return {module:model/Source} The populated <code>Source</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Source();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('source_url')) {
                obj['source_url'] = ApiClient.convertToType(data['source_url'], 'String');
            }
            if (data.hasOwnProperty('terms_and_conditions_url')) {
                obj['terms_and_conditions_url'] = ApiClient.convertToType(data['terms_and_conditions_url'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Source</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Source</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Source.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['source_url'] && !(typeof data['source_url'] === 'string' || data['source_url'] instanceof String)) {
            throw new Error("Expected the field `source_url` to be a primitive type in the JSON string but got " + data['source_url']);
        }
        // ensure the json data is a string
        if (data['terms_and_conditions_url'] && !(typeof data['terms_and_conditions_url'] === 'string' || data['terms_and_conditions_url'] instanceof String)) {
            throw new Error("Expected the field `terms_and_conditions_url` to be a primitive type in the JSON string but got " + data['terms_and_conditions_url']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Source.RequiredProperties = ["id", "name"];

/**
 * @member {String} id
 */
Source.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Source.prototype['name'] = undefined;

/**
 * URL to source's website
 * @member {String} source_url
 */
Source.prototype['source_url'] = undefined;

/**
 * @member {String} terms_and_conditions_url
 */
Source.prototype['terms_and_conditions_url'] = undefined;

/**
 * @member {module:model/Source.TypeEnum} type
 */
Source.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Source['TypeEnum'] = {

    /**
     * value: "register"
     * @const
     */
    "register": "register",

    /**
     * value: "journal"
     * @const
     */
    "journal": "journal",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default Source;

