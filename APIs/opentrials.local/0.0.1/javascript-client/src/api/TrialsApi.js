/**
 * OpenTrials API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import Record from '../model/Record';
import Trial from '../model/Trial';
import TrialSearchResults from '../model/TrialSearchResults';

/**
* Trials service.
* @module api/TrialsApi
* @version 0.0.1
*/
export default class TrialsApi {

    /**
    * Constructs a new TrialsApi. 
    * @alias module:api/TrialsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getRecord operation.
     * @callback module:api/TrialsApi~getRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Record} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a trial's raw record from its sources
     * @param {String} trialId ID of the trial
     * @param {String} id ID of the trial's record
     * @param {module:api/TrialsApi~getRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Record}
     */
    getRecord(trialId, id, callback) {
      let postBody = null;
      // verify the required parameter 'trialId' is set
      if (trialId === undefined || trialId === null) {
        throw new Error("Missing the required parameter 'trialId' when calling getRecord");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRecord");
      }

      let pathParams = {
        'trialId': trialId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Record;
      return this.apiClient.callApi(
        '/trials/{trialId}/records/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecords operation.
     * @callback module:api/TrialsApi~getRecordsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Record>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a trial's raw records from its sources
     * @param {String} id ID of the trial
     * @param {module:api/TrialsApi~getRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Record>}
     */
    getRecords(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRecords");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Record];
      return this.apiClient.callApi(
        '/trials/{id}/records', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrial operation.
     * @callback module:api/TrialsApi~getTrialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Trial} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a trial's details and related entities (e.g. `conditions`).
     * @param {String} id ID of the trial
     * @param {module:api/TrialsApi~getTrialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Trial}
     */
    getTrial(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTrial");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Trial;
      return this.apiClient.callApi(
        '/trials/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchTrials operation.
     * @callback module:api/TrialsApi~searchTrialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrialSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns trials based on a search query. By default, it'll search in all of a trial's attributes. - `q` is a [ElasticSearch query string](https://www.elastic.co/guide/en/elasticsearch/reference/2.3/query-dsl-query-string-query.html#query-string-syntax) (e.g. `public_title:(depressive OR depression)`) - `page` can take a value between `1` and `100` - `per_page` can take a value between `10` and `100`
     * @param {Object} opts Optional parameters
     * @param {String} [q] The search query (follows the [ElasticSearch Query String](https://www.elastic.co/guide/en/elasticsearch/reference/2.3/query-dsl-query-string-query.html#query-string-syntax) syntax)
     * @param {Number} [page = 1)] The page number
     * @param {Number} [perPage = 20)] Number of items per page
     * @param {module:api/TrialsApi~searchTrialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrialSearchResults}
     */
    searchTrials(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrialSearchResults;
      return this.apiClient.callApi(
        '/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
