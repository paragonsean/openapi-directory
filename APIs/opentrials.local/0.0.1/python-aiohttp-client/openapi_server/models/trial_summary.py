# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrialSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, public_title: str=None, url: str=None):
        """TrialSummary - a model defined in OpenAPI

        :param id: The id of this TrialSummary.
        :param public_title: The public_title of this TrialSummary.
        :param url: The url of this TrialSummary.
        """
        self.openapi_types = {
            'id': str,
            'public_title': str,
            'url': str
        }

        self.attribute_map = {
            'id': 'id',
            'public_title': 'public_title',
            'url': 'url'
        }

        self._id = id
        self._public_title = public_title
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrialSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrialSummary of this TrialSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this TrialSummary.

        ID of the trial

        :return: The id of this TrialSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TrialSummary.

        ID of the trial

        :param id: The id of this TrialSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def public_title(self):
        """Gets the public_title of this TrialSummary.

        Title of the record

        :return: The public_title of this TrialSummary.
        :rtype: str
        """
        return self._public_title

    @public_title.setter
    def public_title(self, public_title):
        """Sets the public_title of this TrialSummary.

        Title of the record

        :param public_title: The public_title of this TrialSummary.
        :type public_title: str
        """
        if public_title is None:
            raise ValueError("Invalid value for `public_title`, must not be `None`")

        self._public_title = public_title

    @property
    def url(self):
        """Gets the url of this TrialSummary.

        OpenTrials API URL for this trial

        :return: The url of this TrialSummary.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TrialSummary.

        OpenTrials API URL for this trial

        :param url: The url of this TrialSummary.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
