# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RecordSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, is_primary: bool=None, last_verification_date: datetime=None, source_id: str=None, url: str=None):
        """RecordSummary - a model defined in OpenAPI

        :param id: The id of this RecordSummary.
        :param is_primary: The is_primary of this RecordSummary.
        :param last_verification_date: The last_verification_date of this RecordSummary.
        :param source_id: The source_id of this RecordSummary.
        :param url: The url of this RecordSummary.
        """
        self.openapi_types = {
            'id': str,
            'is_primary': bool,
            'last_verification_date': datetime,
            'source_id': str,
            'url': str
        }

        self.attribute_map = {
            'id': 'id',
            'is_primary': 'is_primary',
            'last_verification_date': 'last_verification_date',
            'source_id': 'source_id',
            'url': 'url'
        }

        self._id = id
        self._is_primary = is_primary
        self._last_verification_date = last_verification_date
        self._source_id = source_id
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecordSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecordSummary of this RecordSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this RecordSummary.


        :return: The id of this RecordSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RecordSummary.


        :param id: The id of this RecordSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_primary(self):
        """Gets the is_primary of this RecordSummary.


        :return: The is_primary of this RecordSummary.
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """Sets the is_primary of this RecordSummary.


        :param is_primary: The is_primary of this RecordSummary.
        :type is_primary: bool
        """

        self._is_primary = is_primary

    @property
    def last_verification_date(self):
        """Gets the last_verification_date of this RecordSummary.


        :return: The last_verification_date of this RecordSummary.
        :rtype: datetime
        """
        return self._last_verification_date

    @last_verification_date.setter
    def last_verification_date(self, last_verification_date):
        """Sets the last_verification_date of this RecordSummary.


        :param last_verification_date: The last_verification_date of this RecordSummary.
        :type last_verification_date: datetime
        """

        self._last_verification_date = last_verification_date

    @property
    def source_id(self):
        """Gets the source_id of this RecordSummary.


        :return: The source_id of this RecordSummary.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this RecordSummary.


        :param source_id: The source_id of this RecordSummary.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def url(self):
        """Gets the url of this RecordSummary.


        :return: The url of this RecordSummary.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RecordSummary.


        :param url: The url of this RecordSummary.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
