# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.condition import Condition
from openapi_server.models.document_summary import DocumentSummary
from openapi_server.models.intervention import Intervention
from openapi_server.models.publication_summary import PublicationSummary
from openapi_server.models.record_summary import RecordSummary
from openapi_server.models.risk_of_bias import RiskOfBias
from openapi_server.models.trial_age_range import TrialAgeRange
from openapi_server.models.trial_location import TrialLocation
from openapi_server.models.trial_organisation import TrialOrganisation
from openapi_server.models.trial_person import TrialPerson
from openapi_server import util


class Trial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, age_range: TrialAgeRange=None, brief_summary: str=None, completion_date: datetime=None, conditions: List[Condition]=None, discrepancies: object=None, documents: List[DocumentSummary]=None, gender: str=None, has_published_results: bool=None, id: str=None, identifiers: object=None, interventions: List[Intervention]=None, locations: List[TrialLocation]=None, organisations: List[TrialOrganisation]=None, persons: List[TrialPerson]=None, public_title: str=None, publications: List[PublicationSummary]=None, records: List[RecordSummary]=None, recruitment_status: str=None, registration_date: datetime=None, results_exemption_date: datetime=None, risks_of_bias: List[RiskOfBias]=None, source_id: str=None, sources: object=None, status: str=None, study_phase: List[str]=None, target_sample_size: int=None, url: str=None):
        """Trial - a model defined in OpenAPI

        :param age_range: The age_range of this Trial.
        :param brief_summary: The brief_summary of this Trial.
        :param completion_date: The completion_date of this Trial.
        :param conditions: The conditions of this Trial.
        :param discrepancies: The discrepancies of this Trial.
        :param documents: The documents of this Trial.
        :param gender: The gender of this Trial.
        :param has_published_results: The has_published_results of this Trial.
        :param id: The id of this Trial.
        :param identifiers: The identifiers of this Trial.
        :param interventions: The interventions of this Trial.
        :param locations: The locations of this Trial.
        :param organisations: The organisations of this Trial.
        :param persons: The persons of this Trial.
        :param public_title: The public_title of this Trial.
        :param publications: The publications of this Trial.
        :param records: The records of this Trial.
        :param recruitment_status: The recruitment_status of this Trial.
        :param registration_date: The registration_date of this Trial.
        :param results_exemption_date: The results_exemption_date of this Trial.
        :param risks_of_bias: The risks_of_bias of this Trial.
        :param source_id: The source_id of this Trial.
        :param sources: The sources of this Trial.
        :param status: The status of this Trial.
        :param study_phase: The study_phase of this Trial.
        :param target_sample_size: The target_sample_size of this Trial.
        :param url: The url of this Trial.
        """
        self.openapi_types = {
            'age_range': TrialAgeRange,
            'brief_summary': str,
            'completion_date': datetime,
            'conditions': List[Condition],
            'discrepancies': object,
            'documents': List[DocumentSummary],
            'gender': str,
            'has_published_results': bool,
            'id': str,
            'identifiers': object,
            'interventions': List[Intervention],
            'locations': List[TrialLocation],
            'organisations': List[TrialOrganisation],
            'persons': List[TrialPerson],
            'public_title': str,
            'publications': List[PublicationSummary],
            'records': List[RecordSummary],
            'recruitment_status': str,
            'registration_date': datetime,
            'results_exemption_date': datetime,
            'risks_of_bias': List[RiskOfBias],
            'source_id': str,
            'sources': object,
            'status': str,
            'study_phase': List[str],
            'target_sample_size': int,
            'url': str
        }

        self.attribute_map = {
            'age_range': 'age_range',
            'brief_summary': 'brief_summary',
            'completion_date': 'completion_date',
            'conditions': 'conditions',
            'discrepancies': 'discrepancies',
            'documents': 'documents',
            'gender': 'gender',
            'has_published_results': 'has_published_results',
            'id': 'id',
            'identifiers': 'identifiers',
            'interventions': 'interventions',
            'locations': 'locations',
            'organisations': 'organisations',
            'persons': 'persons',
            'public_title': 'public_title',
            'publications': 'publications',
            'records': 'records',
            'recruitment_status': 'recruitment_status',
            'registration_date': 'registration_date',
            'results_exemption_date': 'results_exemption_date',
            'risks_of_bias': 'risks_of_bias',
            'source_id': 'source_id',
            'sources': 'sources',
            'status': 'status',
            'study_phase': 'study_phase',
            'target_sample_size': 'target_sample_size',
            'url': 'url'
        }

        self._age_range = age_range
        self._brief_summary = brief_summary
        self._completion_date = completion_date
        self._conditions = conditions
        self._discrepancies = discrepancies
        self._documents = documents
        self._gender = gender
        self._has_published_results = has_published_results
        self._id = id
        self._identifiers = identifiers
        self._interventions = interventions
        self._locations = locations
        self._organisations = organisations
        self._persons = persons
        self._public_title = public_title
        self._publications = publications
        self._records = records
        self._recruitment_status = recruitment_status
        self._registration_date = registration_date
        self._results_exemption_date = results_exemption_date
        self._risks_of_bias = risks_of_bias
        self._source_id = source_id
        self._sources = sources
        self._status = status
        self._study_phase = study_phase
        self._target_sample_size = target_sample_size
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Trial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Trial of this Trial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def age_range(self):
        """Gets the age_range of this Trial.


        :return: The age_range of this Trial.
        :rtype: TrialAgeRange
        """
        return self._age_range

    @age_range.setter
    def age_range(self, age_range):
        """Sets the age_range of this Trial.


        :param age_range: The age_range of this Trial.
        :type age_range: TrialAgeRange
        """

        self._age_range = age_range

    @property
    def brief_summary(self):
        """Gets the brief_summary of this Trial.

        Summary of the trial

        :return: The brief_summary of this Trial.
        :rtype: str
        """
        return self._brief_summary

    @brief_summary.setter
    def brief_summary(self, brief_summary):
        """Sets the brief_summary of this Trial.

        Summary of the trial

        :param brief_summary: The brief_summary of this Trial.
        :type brief_summary: str
        """

        self._brief_summary = brief_summary

    @property
    def completion_date(self):
        """Gets the completion_date of this Trial.

        Date the trial was completed

        :return: The completion_date of this Trial.
        :rtype: datetime
        """
        return self._completion_date

    @completion_date.setter
    def completion_date(self, completion_date):
        """Sets the completion_date of this Trial.

        Date the trial was completed

        :param completion_date: The completion_date of this Trial.
        :type completion_date: datetime
        """

        self._completion_date = completion_date

    @property
    def conditions(self):
        """Gets the conditions of this Trial.

        Conditions the trial refers to

        :return: The conditions of this Trial.
        :rtype: List[Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this Trial.

        Conditions the trial refers to

        :param conditions: The conditions of this Trial.
        :type conditions: List[Condition]
        """

        self._conditions = conditions

    @property
    def discrepancies(self):
        """Gets the discrepancies of this Trial.

        Discrepancies in trial's details between different sources

        :return: The discrepancies of this Trial.
        :rtype: object
        """
        return self._discrepancies

    @discrepancies.setter
    def discrepancies(self, discrepancies):
        """Sets the discrepancies of this Trial.

        Discrepancies in trial's details between different sources

        :param discrepancies: The discrepancies of this Trial.
        :type discrepancies: object
        """

        self._discrepancies = discrepancies

    @property
    def documents(self):
        """Gets the documents of this Trial.

        Documents related to the trial

        :return: The documents of this Trial.
        :rtype: List[DocumentSummary]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this Trial.

        Documents related to the trial

        :param documents: The documents of this Trial.
        :type documents: List[DocumentSummary]
        """

        self._documents = documents

    @property
    def gender(self):
        """Gets the gender of this Trial.

        Gender of the subjects of the trial

        :return: The gender of this Trial.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Trial.

        Gender of the subjects of the trial

        :param gender: The gender of this Trial.
        :type gender: str
        """
        allowed_values = ["both", "male", "female"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def has_published_results(self):
        """Gets the has_published_results of this Trial.

        Trial has its results published (true/false)

        :return: The has_published_results of this Trial.
        :rtype: bool
        """
        return self._has_published_results

    @has_published_results.setter
    def has_published_results(self, has_published_results):
        """Sets the has_published_results of this Trial.

        Trial has its results published (true/false)

        :param has_published_results: The has_published_results of this Trial.
        :type has_published_results: bool
        """

        self._has_published_results = has_published_results

    @property
    def id(self):
        """Gets the id of this Trial.

        ID of the trial

        :return: The id of this Trial.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Trial.

        ID of the trial

        :param id: The id of this Trial.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def identifiers(self):
        """Gets the identifiers of this Trial.

        Object that maps the trial's sources ids with its identifiers.

        :return: The identifiers of this Trial.
        :rtype: object
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this Trial.

        Object that maps the trial's sources ids with its identifiers.

        :param identifiers: The identifiers of this Trial.
        :type identifiers: object
        """

        self._identifiers = identifiers

    @property
    def interventions(self):
        """Gets the interventions of this Trial.

        Interventions related to the trial

        :return: The interventions of this Trial.
        :rtype: List[Intervention]
        """
        return self._interventions

    @interventions.setter
    def interventions(self, interventions):
        """Sets the interventions of this Trial.

        Interventions related to the trial

        :param interventions: The interventions of this Trial.
        :type interventions: List[Intervention]
        """
        if interventions is None:
            raise ValueError("Invalid value for `interventions`, must not be `None`")

        self._interventions = interventions

    @property
    def locations(self):
        """Gets the locations of this Trial.

        Locations related to the trial

        :return: The locations of this Trial.
        :rtype: List[TrialLocation]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this Trial.

        Locations related to the trial

        :param locations: The locations of this Trial.
        :type locations: List[TrialLocation]
        """
        if locations is None:
            raise ValueError("Invalid value for `locations`, must not be `None`")

        self._locations = locations

    @property
    def organisations(self):
        """Gets the organisations of this Trial.

        Organisations related to the trial

        :return: The organisations of this Trial.
        :rtype: List[TrialOrganisation]
        """
        return self._organisations

    @organisations.setter
    def organisations(self, organisations):
        """Sets the organisations of this Trial.

        Organisations related to the trial

        :param organisations: The organisations of this Trial.
        :type organisations: List[TrialOrganisation]
        """
        if organisations is None:
            raise ValueError("Invalid value for `organisations`, must not be `None`")

        self._organisations = organisations

    @property
    def persons(self):
        """Gets the persons of this Trial.

        People related to the trial

        :return: The persons of this Trial.
        :rtype: List[TrialPerson]
        """
        return self._persons

    @persons.setter
    def persons(self, persons):
        """Sets the persons of this Trial.

        People related to the trial

        :param persons: The persons of this Trial.
        :type persons: List[TrialPerson]
        """
        if persons is None:
            raise ValueError("Invalid value for `persons`, must not be `None`")

        self._persons = persons

    @property
    def public_title(self):
        """Gets the public_title of this Trial.

        Title of the trial

        :return: The public_title of this Trial.
        :rtype: str
        """
        return self._public_title

    @public_title.setter
    def public_title(self, public_title):
        """Sets the public_title of this Trial.

        Title of the trial

        :param public_title: The public_title of this Trial.
        :type public_title: str
        """
        if public_title is None:
            raise ValueError("Invalid value for `public_title`, must not be `None`")

        self._public_title = public_title

    @property
    def publications(self):
        """Gets the publications of this Trial.

        Publications referring the trial

        :return: The publications of this Trial.
        :rtype: List[PublicationSummary]
        """
        return self._publications

    @publications.setter
    def publications(self, publications):
        """Sets the publications of this Trial.

        Publications referring the trial

        :param publications: The publications of this Trial.
        :type publications: List[PublicationSummary]
        """
        if publications is None:
            raise ValueError("Invalid value for `publications`, must not be `None`")

        self._publications = publications

    @property
    def records(self):
        """Gets the records of this Trial.

        (published) records of the trial

        :return: The records of this Trial.
        :rtype: List[RecordSummary]
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this Trial.

        (published) records of the trial

        :param records: The records of this Trial.
        :type records: List[RecordSummary]
        """
        if records is None:
            raise ValueError("Invalid value for `records`, must not be `None`")

        self._records = records

    @property
    def recruitment_status(self):
        """Gets the recruitment_status of this Trial.

        Recruitment status of the trial

        :return: The recruitment_status of this Trial.
        :rtype: str
        """
        return self._recruitment_status

    @recruitment_status.setter
    def recruitment_status(self, recruitment_status):
        """Sets the recruitment_status of this Trial.

        Recruitment status of the trial

        :param recruitment_status: The recruitment_status of this Trial.
        :type recruitment_status: str
        """
        allowed_values = ["recruiting", "not_recruiting", "unknown", "other"]  # noqa: E501
        if recruitment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `recruitment_status` ({0}), must be one of {1}"
                .format(recruitment_status, allowed_values)
            )

        self._recruitment_status = recruitment_status

    @property
    def registration_date(self):
        """Gets the registration_date of this Trial.

        Date the trial was registered

        :return: The registration_date of this Trial.
        :rtype: datetime
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date):
        """Sets the registration_date of this Trial.

        Date the trial was registered

        :param registration_date: The registration_date of this Trial.
        :type registration_date: datetime
        """

        self._registration_date = registration_date

    @property
    def results_exemption_date(self):
        """Gets the results_exemption_date of this Trial.

        Date when a certification of exemption has been filed for the trial

        :return: The results_exemption_date of this Trial.
        :rtype: datetime
        """
        return self._results_exemption_date

    @results_exemption_date.setter
    def results_exemption_date(self, results_exemption_date):
        """Sets the results_exemption_date of this Trial.

        Date when a certification of exemption has been filed for the trial

        :param results_exemption_date: The results_exemption_date of this Trial.
        :type results_exemption_date: datetime
        """

        self._results_exemption_date = results_exemption_date

    @property
    def risks_of_bias(self):
        """Gets the risks_of_bias of this Trial.


        :return: The risks_of_bias of this Trial.
        :rtype: List[RiskOfBias]
        """
        return self._risks_of_bias

    @risks_of_bias.setter
    def risks_of_bias(self, risks_of_bias):
        """Sets the risks_of_bias of this Trial.


        :param risks_of_bias: The risks_of_bias of this Trial.
        :type risks_of_bias: List[RiskOfBias]
        """
        if risks_of_bias is None:
            raise ValueError("Invalid value for `risks_of_bias`, must not be `None`")

        self._risks_of_bias = risks_of_bias

    @property
    def source_id(self):
        """Gets the source_id of this Trial.

        ID of the trial's source

        :return: The source_id of this Trial.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Trial.

        ID of the trial's source

        :param source_id: The source_id of this Trial.
        :type source_id: str
        """

        self._source_id = source_id

    @property
    def sources(self):
        """Gets the sources of this Trial.


        :return: The sources of this Trial.
        :rtype: object
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this Trial.


        :param sources: The sources of this Trial.
        :type sources: object
        """
        if sources is None:
            raise ValueError("Invalid value for `sources`, must not be `None`")

        self._sources = sources

    @property
    def status(self):
        """Gets the status of this Trial.

        Completion status of the trial

        :return: The status of this Trial.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Trial.

        Completion status of the trial

        :param status: The status of this Trial.
        :type status: str
        """
        allowed_values = ["ongoing", "withdrawn", "suspended", "terminated", "complete", "unknown", "other"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def study_phase(self):
        """Gets the study_phase of this Trial.

        Phases of the study (e.g. `[\"Phase 2\"]` or `[\"Phase 1\", \"Phase 2\"]`)

        :return: The study_phase of this Trial.
        :rtype: List[str]
        """
        return self._study_phase

    @study_phase.setter
    def study_phase(self, study_phase):
        """Sets the study_phase of this Trial.

        Phases of the study (e.g. `[\"Phase 2\"]` or `[\"Phase 1\", \"Phase 2\"]`)

        :param study_phase: The study_phase of this Trial.
        :type study_phase: List[str]
        """

        self._study_phase = study_phase

    @property
    def target_sample_size(self):
        """Gets the target_sample_size of this Trial.

        Target sample size for the trial

        :return: The target_sample_size of this Trial.
        :rtype: int
        """
        return self._target_sample_size

    @target_sample_size.setter
    def target_sample_size(self, target_sample_size):
        """Sets the target_sample_size of this Trial.

        Target sample size for the trial

        :param target_sample_size: The target_sample_size of this Trial.
        :type target_sample_size: int
        """
        if target_sample_size is not None and target_sample_size < 0:
            raise ValueError("Invalid value for `target_sample_size`, must be a value greater than or equal to `0`")

        self._target_sample_size = target_sample_size

    @property
    def url(self):
        """Gets the url of this Trial.

        Source URL (where the trial was collected from)

        :return: The url of this Trial.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Trial.

        Source URL (where the trial was collected from)

        :param url: The url of this Trial.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
