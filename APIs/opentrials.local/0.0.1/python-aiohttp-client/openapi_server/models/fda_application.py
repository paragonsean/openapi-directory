# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fda_approval import FDAApproval
from openapi_server.models.organisation import Organisation
from openapi_server import util


class FDAApplication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_ingredients: str=None, drug_name: str=None, fda_approvals: List[FDAApproval]=None, id: str=None, organisation: Organisation=None, type: str=None, url: str=None):
        """FDAApplication - a model defined in OpenAPI

        :param active_ingredients: The active_ingredients of this FDAApplication.
        :param drug_name: The drug_name of this FDAApplication.
        :param fda_approvals: The fda_approvals of this FDAApplication.
        :param id: The id of this FDAApplication.
        :param organisation: The organisation of this FDAApplication.
        :param type: The type of this FDAApplication.
        :param url: The url of this FDAApplication.
        """
        self.openapi_types = {
            'active_ingredients': str,
            'drug_name': str,
            'fda_approvals': List[FDAApproval],
            'id': str,
            'organisation': Organisation,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'active_ingredients': 'active_ingredients',
            'drug_name': 'drug_name',
            'fda_approvals': 'fda_approvals',
            'id': 'id',
            'organisation': 'organisation',
            'type': 'type',
            'url': 'url'
        }

        self._active_ingredients = active_ingredients
        self._drug_name = drug_name
        self._fda_approvals = fda_approvals
        self._id = id
        self._organisation = organisation
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FDAApplication':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FDAApplication of this FDAApplication.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_ingredients(self):
        """Gets the active_ingredients of this FDAApplication.

        Active ingredients contained in the drug

        :return: The active_ingredients of this FDAApplication.
        :rtype: str
        """
        return self._active_ingredients

    @active_ingredients.setter
    def active_ingredients(self, active_ingredients):
        """Sets the active_ingredients of this FDAApplication.

        Active ingredients contained in the drug

        :param active_ingredients: The active_ingredients of this FDAApplication.
        :type active_ingredients: str
        """

        self._active_ingredients = active_ingredients

    @property
    def drug_name(self):
        """Gets the drug_name of this FDAApplication.

        Name of the drug

        :return: The drug_name of this FDAApplication.
        :rtype: str
        """
        return self._drug_name

    @drug_name.setter
    def drug_name(self, drug_name):
        """Sets the drug_name of this FDAApplication.

        Name of the drug

        :param drug_name: The drug_name of this FDAApplication.
        :type drug_name: str
        """

        self._drug_name = drug_name

    @property
    def fda_approvals(self):
        """Gets the fda_approvals of this FDAApplication.

        Associated FDA approvals

        :return: The fda_approvals of this FDAApplication.
        :rtype: List[FDAApproval]
        """
        return self._fda_approvals

    @fda_approvals.setter
    def fda_approvals(self, fda_approvals):
        """Sets the fda_approvals of this FDAApplication.

        Associated FDA approvals

        :param fda_approvals: The fda_approvals of this FDAApplication.
        :type fda_approvals: List[FDAApproval]
        """

        self._fda_approvals = fda_approvals

    @property
    def id(self):
        """Gets the id of this FDAApplication.

        FDA application ID

        :return: The id of this FDAApplication.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FDAApplication.

        FDA application ID

        :param id: The id of this FDAApplication.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def organisation(self):
        """Gets the organisation of this FDAApplication.


        :return: The organisation of this FDAApplication.
        :rtype: Organisation
        """
        return self._organisation

    @organisation.setter
    def organisation(self, organisation):
        """Sets the organisation of this FDAApplication.


        :param organisation: The organisation of this FDAApplication.
        :type organisation: Organisation
        """

        self._organisation = organisation

    @property
    def type(self):
        """Gets the type of this FDAApplication.

        The FDA application type (e.g. \"NDA\", \"ANDA\", etc.)

        :return: The type of this FDAApplication.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FDAApplication.

        The FDA application type (e.g. \"NDA\", \"ANDA\", etc.)

        :param type: The type of this FDAApplication.
        :type type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this FDAApplication.

        OpenTrials API URL for this FDA application

        :return: The url of this FDAApplication.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FDAApplication.

        OpenTrials API URL for this FDA application

        :param url: The url of this FDAApplication.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
