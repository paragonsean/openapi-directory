# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_category import DocumentCategory
from openapi_server.models.fda_application import FDAApplication
from openapi_server.models.file import File
from openapi_server.models.trial_summary import TrialSummary
from openapi_server import util


class FDADocumentSearchResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_category: DocumentCategory=None, fda_application: FDAApplication=None, file: File=None, id: str=None, name: str=None, source_id: str=None, source_url: str=None, trials: List[TrialSummary]=None, url: str=None):
        """FDADocumentSearchResult - a model defined in OpenAPI

        :param document_category: The document_category of this FDADocumentSearchResult.
        :param fda_application: The fda_application of this FDADocumentSearchResult.
        :param file: The file of this FDADocumentSearchResult.
        :param id: The id of this FDADocumentSearchResult.
        :param name: The name of this FDADocumentSearchResult.
        :param source_id: The source_id of this FDADocumentSearchResult.
        :param source_url: The source_url of this FDADocumentSearchResult.
        :param trials: The trials of this FDADocumentSearchResult.
        :param url: The url of this FDADocumentSearchResult.
        """
        self.openapi_types = {
            'document_category': DocumentCategory,
            'fda_application': FDAApplication,
            'file': File,
            'id': str,
            'name': str,
            'source_id': str,
            'source_url': str,
            'trials': List[TrialSummary],
            'url': str
        }

        self.attribute_map = {
            'document_category': 'document_category',
            'fda_application': 'fda_application',
            'file': 'file',
            'id': 'id',
            'name': 'name',
            'source_id': 'source_id',
            'source_url': 'source_url',
            'trials': 'trials',
            'url': 'url'
        }

        self._document_category = document_category
        self._fda_application = fda_application
        self._file = file
        self._id = id
        self._name = name
        self._source_id = source_id
        self._source_url = source_url
        self._trials = trials
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FDADocumentSearchResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FDADocumentSearchResult of this FDADocumentSearchResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_category(self):
        """Gets the document_category of this FDADocumentSearchResult.


        :return: The document_category of this FDADocumentSearchResult.
        :rtype: DocumentCategory
        """
        return self._document_category

    @document_category.setter
    def document_category(self, document_category):
        """Sets the document_category of this FDADocumentSearchResult.


        :param document_category: The document_category of this FDADocumentSearchResult.
        :type document_category: DocumentCategory
        """
        if document_category is None:
            raise ValueError("Invalid value for `document_category`, must not be `None`")

        self._document_category = document_category

    @property
    def fda_application(self):
        """Gets the fda_application of this FDADocumentSearchResult.


        :return: The fda_application of this FDADocumentSearchResult.
        :rtype: FDAApplication
        """
        return self._fda_application

    @fda_application.setter
    def fda_application(self, fda_application):
        """Sets the fda_application of this FDADocumentSearchResult.


        :param fda_application: The fda_application of this FDADocumentSearchResult.
        :type fda_application: FDAApplication
        """

        self._fda_application = fda_application

    @property
    def file(self):
        """Gets the file of this FDADocumentSearchResult.


        :return: The file of this FDADocumentSearchResult.
        :rtype: File
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this FDADocumentSearchResult.


        :param file: The file of this FDADocumentSearchResult.
        :type file: File
        """

        self._file = file

    @property
    def id(self):
        """Gets the id of this FDADocumentSearchResult.


        :return: The id of this FDADocumentSearchResult.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FDADocumentSearchResult.


        :param id: The id of this FDADocumentSearchResult.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this FDADocumentSearchResult.


        :return: The name of this FDADocumentSearchResult.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FDADocumentSearchResult.


        :param name: The name of this FDADocumentSearchResult.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def source_id(self):
        """Gets the source_id of this FDADocumentSearchResult.

        ID of the document's source

        :return: The source_id of this FDADocumentSearchResult.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this FDADocumentSearchResult.

        ID of the document's source

        :param source_id: The source_id of this FDADocumentSearchResult.
        :type source_id: str
        """

        self._source_id = source_id

    @property
    def source_url(self):
        """Gets the source_url of this FDADocumentSearchResult.

        URL of origin for this document

        :return: The source_url of this FDADocumentSearchResult.
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """Sets the source_url of this FDADocumentSearchResult.

        URL of origin for this document

        :param source_url: The source_url of this FDADocumentSearchResult.
        :type source_url: str
        """

        self._source_url = source_url

    @property
    def trials(self):
        """Gets the trials of this FDADocumentSearchResult.


        :return: The trials of this FDADocumentSearchResult.
        :rtype: List[TrialSummary]
        """
        return self._trials

    @trials.setter
    def trials(self, trials):
        """Sets the trials of this FDADocumentSearchResult.


        :param trials: The trials of this FDADocumentSearchResult.
        :type trials: List[TrialSummary]
        """

        self._trials = trials

    @property
    def url(self):
        """Gets the url of this FDADocumentSearchResult.

        OpenTrials API URL of the document

        :return: The url of this FDADocumentSearchResult.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FDADocumentSearchResult.

        OpenTrials API URL of the document

        :param url: The url of this FDADocumentSearchResult.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
