# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.discrepant_field_boolean import DiscrepantFieldBoolean
from openapi_server.models.discrepant_field_integer import DiscrepantFieldInteger
from openapi_server.models.discrepant_field_string import DiscrepantFieldString
from openapi_server import util


class Discrepancies(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gender: List[DiscrepantFieldString]=None, has_published_results: List[DiscrepantFieldBoolean]=None, recruitment_status: List[DiscrepantFieldString]=None, status: List[DiscrepantFieldString]=None, target_sample_size: List[DiscrepantFieldInteger]=None):
        """Discrepancies - a model defined in OpenAPI

        :param gender: The gender of this Discrepancies.
        :param has_published_results: The has_published_results of this Discrepancies.
        :param recruitment_status: The recruitment_status of this Discrepancies.
        :param status: The status of this Discrepancies.
        :param target_sample_size: The target_sample_size of this Discrepancies.
        """
        self.openapi_types = {
            'gender': List[DiscrepantFieldString],
            'has_published_results': List[DiscrepantFieldBoolean],
            'recruitment_status': List[DiscrepantFieldString],
            'status': List[DiscrepantFieldString],
            'target_sample_size': List[DiscrepantFieldInteger]
        }

        self.attribute_map = {
            'gender': 'gender',
            'has_published_results': 'has_published_results',
            'recruitment_status': 'recruitment_status',
            'status': 'status',
            'target_sample_size': 'target_sample_size'
        }

        self._gender = gender
        self._has_published_results = has_published_results
        self._recruitment_status = recruitment_status
        self._status = status
        self._target_sample_size = target_sample_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Discrepancies':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Discrepancies of this Discrepancies.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gender(self):
        """Gets the gender of this Discrepancies.


        :return: The gender of this Discrepancies.
        :rtype: List[DiscrepantFieldString]
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Discrepancies.


        :param gender: The gender of this Discrepancies.
        :type gender: List[DiscrepantFieldString]
        """

        self._gender = gender

    @property
    def has_published_results(self):
        """Gets the has_published_results of this Discrepancies.


        :return: The has_published_results of this Discrepancies.
        :rtype: List[DiscrepantFieldBoolean]
        """
        return self._has_published_results

    @has_published_results.setter
    def has_published_results(self, has_published_results):
        """Sets the has_published_results of this Discrepancies.


        :param has_published_results: The has_published_results of this Discrepancies.
        :type has_published_results: List[DiscrepantFieldBoolean]
        """

        self._has_published_results = has_published_results

    @property
    def recruitment_status(self):
        """Gets the recruitment_status of this Discrepancies.


        :return: The recruitment_status of this Discrepancies.
        :rtype: List[DiscrepantFieldString]
        """
        return self._recruitment_status

    @recruitment_status.setter
    def recruitment_status(self, recruitment_status):
        """Sets the recruitment_status of this Discrepancies.


        :param recruitment_status: The recruitment_status of this Discrepancies.
        :type recruitment_status: List[DiscrepantFieldString]
        """

        self._recruitment_status = recruitment_status

    @property
    def status(self):
        """Gets the status of this Discrepancies.


        :return: The status of this Discrepancies.
        :rtype: List[DiscrepantFieldString]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Discrepancies.


        :param status: The status of this Discrepancies.
        :type status: List[DiscrepantFieldString]
        """

        self._status = status

    @property
    def target_sample_size(self):
        """Gets the target_sample_size of this Discrepancies.


        :return: The target_sample_size of this Discrepancies.
        :rtype: List[DiscrepantFieldInteger]
        """
        return self._target_sample_size

    @target_sample_size.setter
    def target_sample_size(self, target_sample_size):
        """Sets the target_sample_size of this Discrepancies.


        :param target_sample_size: The target_sample_size of this Discrepancies.
        :type target_sample_size: List[DiscrepantFieldInteger]
        """

        self._target_sample_size = target_sample_size
