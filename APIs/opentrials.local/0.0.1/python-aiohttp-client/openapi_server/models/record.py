# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source import Source
from openapi_server import util


class Record(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, id: str=None, identifiers: object=None, is_primary: bool=None, last_verification_date: datetime=None, public_title: str=None, recruitment_status: str=None, source: Source=None, source_id: str=None, source_url: str=None, status: str=None, trial_id: str=None, trial_url: str=None, updated_at: datetime=None, url: str=None):
        """Record - a model defined in OpenAPI

        :param created_at: The created_at of this Record.
        :param id: The id of this Record.
        :param identifiers: The identifiers of this Record.
        :param is_primary: The is_primary of this Record.
        :param last_verification_date: The last_verification_date of this Record.
        :param public_title: The public_title of this Record.
        :param recruitment_status: The recruitment_status of this Record.
        :param source: The source of this Record.
        :param source_id: The source_id of this Record.
        :param source_url: The source_url of this Record.
        :param status: The status of this Record.
        :param trial_id: The trial_id of this Record.
        :param trial_url: The trial_url of this Record.
        :param updated_at: The updated_at of this Record.
        :param url: The url of this Record.
        """
        self.openapi_types = {
            'created_at': datetime,
            'id': str,
            'identifiers': object,
            'is_primary': bool,
            'last_verification_date': datetime,
            'public_title': str,
            'recruitment_status': str,
            'source': Source,
            'source_id': str,
            'source_url': str,
            'status': str,
            'trial_id': str,
            'trial_url': str,
            'updated_at': datetime,
            'url': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'id': 'id',
            'identifiers': 'identifiers',
            'is_primary': 'is_primary',
            'last_verification_date': 'last_verification_date',
            'public_title': 'public_title',
            'recruitment_status': 'recruitment_status',
            'source': 'source',
            'source_id': 'source_id',
            'source_url': 'source_url',
            'status': 'status',
            'trial_id': 'trial_id',
            'trial_url': 'trial_url',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._created_at = created_at
        self._id = id
        self._identifiers = identifiers
        self._is_primary = is_primary
        self._last_verification_date = last_verification_date
        self._public_title = public_title
        self._recruitment_status = recruitment_status
        self._source = source
        self._source_id = source_id
        self._source_url = source_url
        self._status = status
        self._trial_id = trial_id
        self._trial_url = trial_url
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Record':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Record of this Record.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Record.

        Date when the record was created

        :return: The created_at of this Record.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Record.

        Date when the record was created

        :param created_at: The created_at of this Record.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Record.

        ID of the record

        :return: The id of this Record.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Record.

        ID of the record

        :param id: The id of this Record.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def identifiers(self):
        """Gets the identifiers of this Record.

        Object that maps the trial's sources ids with its identifiers.

        :return: The identifiers of this Record.
        :rtype: object
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this Record.

        Object that maps the trial's sources ids with its identifiers.

        :param identifiers: The identifiers of this Record.
        :type identifiers: object
        """

        self._identifiers = identifiers

    @property
    def is_primary(self):
        """Gets the is_primary of this Record.

        Is this record the primary source of data for its trial

        :return: The is_primary of this Record.
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """Sets the is_primary of this Record.

        Is this record the primary source of data for its trial

        :param is_primary: The is_primary of this Record.
        :type is_primary: bool
        """

        self._is_primary = is_primary

    @property
    def last_verification_date(self):
        """Gets the last_verification_date of this Record.

        Date when the record's data was last verified by provider

        :return: The last_verification_date of this Record.
        :rtype: datetime
        """
        return self._last_verification_date

    @last_verification_date.setter
    def last_verification_date(self, last_verification_date):
        """Sets the last_verification_date of this Record.

        Date when the record's data was last verified by provider

        :param last_verification_date: The last_verification_date of this Record.
        :type last_verification_date: datetime
        """

        self._last_verification_date = last_verification_date

    @property
    def public_title(self):
        """Gets the public_title of this Record.

        Title of the record

        :return: The public_title of this Record.
        :rtype: str
        """
        return self._public_title

    @public_title.setter
    def public_title(self, public_title):
        """Sets the public_title of this Record.

        Title of the record

        :param public_title: The public_title of this Record.
        :type public_title: str
        """
        if public_title is None:
            raise ValueError("Invalid value for `public_title`, must not be `None`")

        self._public_title = public_title

    @property
    def recruitment_status(self):
        """Gets the recruitment_status of this Record.

        Trial's recruitment status (e.g. recruiting, unknown etc.)

        :return: The recruitment_status of this Record.
        :rtype: str
        """
        return self._recruitment_status

    @recruitment_status.setter
    def recruitment_status(self, recruitment_status):
        """Sets the recruitment_status of this Record.

        Trial's recruitment status (e.g. recruiting, unknown etc.)

        :param recruitment_status: The recruitment_status of this Record.
        :type recruitment_status: str
        """
        allowed_values = ["recruiting", "not_recruiting", "unknown", "other"]  # noqa: E501
        if recruitment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `recruitment_status` ({0}), must be one of {1}"
                .format(recruitment_status, allowed_values)
            )

        self._recruitment_status = recruitment_status

    @property
    def source(self):
        """Gets the source of this Record.


        :return: The source of this Record.
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Record.


        :param source: The source of this Record.
        :type source: Source
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def source_id(self):
        """Gets the source_id of this Record.

        ID of the record's source

        :return: The source_id of this Record.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Record.

        ID of the record's source

        :param source_id: The source_id of this Record.
        :type source_id: str
        """

        self._source_id = source_id

    @property
    def source_url(self):
        """Gets the source_url of this Record.

        URL of the record's source (where it was collected from)

        :return: The source_url of this Record.
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """Sets the source_url of this Record.

        URL of the record's source (where it was collected from)

        :param source_url: The source_url of this Record.
        :type source_url: str
        """
        if source_url is None:
            raise ValueError("Invalid value for `source_url`, must not be `None`")

        self._source_url = source_url

    @property
    def status(self):
        """Gets the status of this Record.

        Trial's status (e.g. ongoing, withdrawn, complete etc.)

        :return: The status of this Record.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Record.

        Trial's status (e.g. ongoing, withdrawn, complete etc.)

        :param status: The status of this Record.
        :type status: str
        """
        allowed_values = ["ongoing", "withdrawn", "suspended", "terminated", "complete", "unknown", "other"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def trial_id(self):
        """Gets the trial_id of this Record.

        ID of the trial referenced in the record

        :return: The trial_id of this Record.
        :rtype: str
        """
        return self._trial_id

    @trial_id.setter
    def trial_id(self, trial_id):
        """Sets the trial_id of this Record.

        ID of the trial referenced in the record

        :param trial_id: The trial_id of this Record.
        :type trial_id: str
        """
        if trial_id is None:
            raise ValueError("Invalid value for `trial_id`, must not be `None`")

        self._trial_id = trial_id

    @property
    def trial_url(self):
        """Gets the trial_url of this Record.

        OpenTrials API URL of the trial referenced in the record

        :return: The trial_url of this Record.
        :rtype: str
        """
        return self._trial_url

    @trial_url.setter
    def trial_url(self, trial_url):
        """Sets the trial_url of this Record.

        OpenTrials API URL of the trial referenced in the record

        :param trial_url: The trial_url of this Record.
        :type trial_url: str
        """
        if trial_url is None:
            raise ValueError("Invalid value for `trial_url`, must not be `None`")

        self._trial_url = trial_url

    @property
    def updated_at(self):
        """Gets the updated_at of this Record.

        Date when the record was updated

        :return: The updated_at of this Record.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Record.

        Date when the record was updated

        :param updated_at: The updated_at of this Record.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this Record.

        OpenTrials API URL of the record

        :return: The url of this Record.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Record.

        OpenTrials API URL of the record

        :param url: The url of this Record.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
