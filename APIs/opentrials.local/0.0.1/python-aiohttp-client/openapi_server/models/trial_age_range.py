# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrialAgeRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_age: str=None, min_age: str=None):
        """TrialAgeRange - a model defined in OpenAPI

        :param max_age: The max_age of this TrialAgeRange.
        :param min_age: The min_age of this TrialAgeRange.
        """
        self.openapi_types = {
            'max_age': str,
            'min_age': str
        }

        self.attribute_map = {
            'max_age': 'max_age',
            'min_age': 'min_age'
        }

        self._max_age = max_age
        self._min_age = min_age

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrialAgeRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Trial_age_range of this TrialAgeRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_age(self):
        """Gets the max_age of this TrialAgeRange.

        Maximum participant age (e.g. \"12 Years\", \"1 Month\", \"15 Days\"). If unknown, it's `undefined`. If no limit, it's \"any\". If not applicable, it's \"N/A\".

        :return: The max_age of this TrialAgeRange.
        :rtype: str
        """
        return self._max_age

    @max_age.setter
    def max_age(self, max_age):
        """Sets the max_age of this TrialAgeRange.

        Maximum participant age (e.g. \"12 Years\", \"1 Month\", \"15 Days\"). If unknown, it's `undefined`. If no limit, it's \"any\". If not applicable, it's \"N/A\".

        :param max_age: The max_age of this TrialAgeRange.
        :type max_age: str
        """

        self._max_age = max_age

    @property
    def min_age(self):
        """Gets the min_age of this TrialAgeRange.

        Minimum participant age (e.g. \"12 Years\", \"1 Month\", \"15 Days\"). If unknown, it's `undefined`. If no limit, it's \"any\". If not applicable, it's \"N/A\".

        :return: The min_age of this TrialAgeRange.
        :rtype: str
        """
        return self._min_age

    @min_age.setter
    def min_age(self, min_age):
        """Sets the min_age of this TrialAgeRange.

        Minimum participant age (e.g. \"12 Years\", \"1 Month\", \"15 Days\"). If unknown, it's `undefined`. If no limit, it's \"any\". If not applicable, it's \"N/A\".

        :param min_age: The min_age of this TrialAgeRange.
        :type min_age: str
        """

        self._min_age = min_age
