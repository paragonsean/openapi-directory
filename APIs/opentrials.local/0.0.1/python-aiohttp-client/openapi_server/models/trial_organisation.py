# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrialOrganisation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, url: str=None, role: str=None):
        """TrialOrganisation - a model defined in OpenAPI

        :param id: The id of this TrialOrganisation.
        :param name: The name of this TrialOrganisation.
        :param url: The url of this TrialOrganisation.
        :param role: The role of this TrialOrganisation.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'url': str,
            'role': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'url': 'url',
            'role': 'role'
        }

        self._id = id
        self._name = name
        self._url = url
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrialOrganisation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrialOrganisation of this TrialOrganisation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this TrialOrganisation.

        ID of the organisation

        :return: The id of this TrialOrganisation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TrialOrganisation.

        ID of the organisation

        :param id: The id of this TrialOrganisation.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this TrialOrganisation.

        Name of the organisation

        :return: The name of this TrialOrganisation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrialOrganisation.

        Name of the organisation

        :param name: The name of this TrialOrganisation.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def url(self):
        """Gets the url of this TrialOrganisation.

        OpenTrials API URL of the organisation

        :return: The url of this TrialOrganisation.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TrialOrganisation.

        OpenTrials API URL of the organisation

        :param url: The url of this TrialOrganisation.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def role(self):
        """Gets the role of this TrialOrganisation.


        :return: The role of this TrialOrganisation.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this TrialOrganisation.


        :param role: The role of this TrialOrganisation.
        :type role: str
        """
        allowed_values = ["primary_sponsor", "sponsor", "funder", "other"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role
