# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DiscrepantFieldString(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, record_id: str=None, source_name: str=None, value: str=None):
        """DiscrepantFieldString - a model defined in OpenAPI

        :param record_id: The record_id of this DiscrepantFieldString.
        :param source_name: The source_name of this DiscrepantFieldString.
        :param value: The value of this DiscrepantFieldString.
        """
        self.openapi_types = {
            'record_id': str,
            'source_name': str,
            'value': str
        }

        self.attribute_map = {
            'record_id': 'record_id',
            'source_name': 'source_name',
            'value': 'value'
        }

        self._record_id = record_id
        self._source_name = source_name
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiscrepantFieldString':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiscrepantFieldString of this DiscrepantFieldString.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def record_id(self):
        """Gets the record_id of this DiscrepantFieldString.


        :return: The record_id of this DiscrepantFieldString.
        :rtype: str
        """
        return self._record_id

    @record_id.setter
    def record_id(self, record_id):
        """Sets the record_id of this DiscrepantFieldString.


        :param record_id: The record_id of this DiscrepantFieldString.
        :type record_id: str
        """
        if record_id is None:
            raise ValueError("Invalid value for `record_id`, must not be `None`")

        self._record_id = record_id

    @property
    def source_name(self):
        """Gets the source_name of this DiscrepantFieldString.


        :return: The source_name of this DiscrepantFieldString.
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this DiscrepantFieldString.


        :param source_name: The source_name of this DiscrepantFieldString.
        :type source_name: str
        """
        if source_name is None:
            raise ValueError("Invalid value for `source_name`, must not be `None`")

        self._source_name = source_name

    @property
    def value(self):
        """Gets the value of this DiscrepantFieldString.


        :return: The value of this DiscrepantFieldString.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DiscrepantFieldString.


        :param value: The value of this DiscrepantFieldString.
        :type value: str
        """

        self._value = value
