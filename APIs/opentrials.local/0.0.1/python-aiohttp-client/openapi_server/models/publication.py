# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source import Source
from openapi_server import util


class Publication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abstract: str=None, authors: List[str]=None, created_at: datetime=None, _date: datetime=None, id: str=None, journal: str=None, slug: str=None, source: Source=None, source_url: str=None, title: str=None, updated_at: datetime=None, url: str=None):
        """Publication - a model defined in OpenAPI

        :param abstract: The abstract of this Publication.
        :param authors: The authors of this Publication.
        :param created_at: The created_at of this Publication.
        :param _date: The _date of this Publication.
        :param id: The id of this Publication.
        :param journal: The journal of this Publication.
        :param slug: The slug of this Publication.
        :param source: The source of this Publication.
        :param source_url: The source_url of this Publication.
        :param title: The title of this Publication.
        :param updated_at: The updated_at of this Publication.
        :param url: The url of this Publication.
        """
        self.openapi_types = {
            'abstract': str,
            'authors': List[str],
            'created_at': datetime,
            '_date': datetime,
            'id': str,
            'journal': str,
            'slug': str,
            'source': Source,
            'source_url': str,
            'title': str,
            'updated_at': datetime,
            'url': str
        }

        self.attribute_map = {
            'abstract': 'abstract',
            'authors': 'authors',
            'created_at': 'created_at',
            '_date': 'date',
            'id': 'id',
            'journal': 'journal',
            'slug': 'slug',
            'source': 'source',
            'source_url': 'source_url',
            'title': 'title',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._abstract = abstract
        self._authors = authors
        self._created_at = created_at
        self.__date = _date
        self._id = id
        self._journal = journal
        self._slug = slug
        self._source = source
        self._source_url = source_url
        self._title = title
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Publication':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Publication of this Publication.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abstract(self):
        """Gets the abstract of this Publication.


        :return: The abstract of this Publication.
        :rtype: str
        """
        return self._abstract

    @abstract.setter
    def abstract(self, abstract):
        """Sets the abstract of this Publication.


        :param abstract: The abstract of this Publication.
        :type abstract: str
        """
        if abstract is None:
            raise ValueError("Invalid value for `abstract`, must not be `None`")

        self._abstract = abstract

    @property
    def authors(self):
        """Gets the authors of this Publication.


        :return: The authors of this Publication.
        :rtype: List[str]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this Publication.


        :param authors: The authors of this Publication.
        :type authors: List[str]
        """

        self._authors = authors

    @property
    def created_at(self):
        """Gets the created_at of this Publication.


        :return: The created_at of this Publication.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Publication.


        :param created_at: The created_at of this Publication.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def _date(self):
        """Gets the _date of this Publication.


        :return: The _date of this Publication.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Publication.


        :param _date: The _date of this Publication.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def id(self):
        """Gets the id of this Publication.

        ID of the publication

        :return: The id of this Publication.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Publication.

        ID of the publication

        :param id: The id of this Publication.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def journal(self):
        """Gets the journal of this Publication.


        :return: The journal of this Publication.
        :rtype: str
        """
        return self._journal

    @journal.setter
    def journal(self, journal):
        """Sets the journal of this Publication.


        :param journal: The journal of this Publication.
        :type journal: str
        """

        self._journal = journal

    @property
    def slug(self):
        """Gets the slug of this Publication.


        :return: The slug of this Publication.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Publication.


        :param slug: The slug of this Publication.
        :type slug: str
        """

        self._slug = slug

    @property
    def source(self):
        """Gets the source of this Publication.


        :return: The source of this Publication.
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Publication.


        :param source: The source of this Publication.
        :type source: Source
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def source_url(self):
        """Gets the source_url of this Publication.


        :return: The source_url of this Publication.
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """Sets the source_url of this Publication.


        :param source_url: The source_url of this Publication.
        :type source_url: str
        """
        if source_url is None:
            raise ValueError("Invalid value for `source_url`, must not be `None`")

        self._source_url = source_url

    @property
    def title(self):
        """Gets the title of this Publication.


        :return: The title of this Publication.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Publication.


        :param title: The title of this Publication.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this Publication.


        :return: The updated_at of this Publication.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Publication.


        :param updated_at: The updated_at of this Publication.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this Publication.


        :return: The url of this Publication.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Publication.


        :param url: The url of this Publication.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
