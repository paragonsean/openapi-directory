# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fda_application import FDAApplication
from openapi_server import util


class FDAApproval(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_date: datetime=None, fda_application: FDAApplication=None, id: str=None, notes: str=None, supplement_number: int=None, type: str=None):
        """FDAApproval - a model defined in OpenAPI

        :param action_date: The action_date of this FDAApproval.
        :param fda_application: The fda_application of this FDAApproval.
        :param id: The id of this FDAApproval.
        :param notes: The notes of this FDAApproval.
        :param supplement_number: The supplement_number of this FDAApproval.
        :param type: The type of this FDAApproval.
        """
        self.openapi_types = {
            'action_date': datetime,
            'fda_application': FDAApplication,
            'id': str,
            'notes': str,
            'supplement_number': int,
            'type': str
        }

        self.attribute_map = {
            'action_date': 'action_date',
            'fda_application': 'fda_application',
            'id': 'id',
            'notes': 'notes',
            'supplement_number': 'supplement_number',
            'type': 'type'
        }

        self._action_date = action_date
        self._fda_application = fda_application
        self._id = id
        self._notes = notes
        self._supplement_number = supplement_number
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FDAApproval':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FDAApproval of this FDAApproval.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_date(self):
        """Gets the action_date of this FDAApproval.


        :return: The action_date of this FDAApproval.
        :rtype: datetime
        """
        return self._action_date

    @action_date.setter
    def action_date(self, action_date):
        """Sets the action_date of this FDAApproval.


        :param action_date: The action_date of this FDAApproval.
        :type action_date: datetime
        """
        if action_date is None:
            raise ValueError("Invalid value for `action_date`, must not be `None`")

        self._action_date = action_date

    @property
    def fda_application(self):
        """Gets the fda_application of this FDAApproval.


        :return: The fda_application of this FDAApproval.
        :rtype: FDAApplication
        """
        return self._fda_application

    @fda_application.setter
    def fda_application(self, fda_application):
        """Sets the fda_application of this FDAApproval.


        :param fda_application: The fda_application of this FDAApproval.
        :type fda_application: FDAApplication
        """

        self._fda_application = fda_application

    @property
    def id(self):
        """Gets the id of this FDAApproval.

        FDA approval ID

        :return: The id of this FDAApproval.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FDAApproval.

        FDA approval ID

        :param id: The id of this FDAApproval.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def notes(self):
        """Gets the notes of this FDAApproval.

        Additional information about the FDA approval

        :return: The notes of this FDAApproval.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this FDAApproval.

        Additional information about the FDA approval

        :param notes: The notes of this FDAApproval.
        :type notes: str
        """

        self._notes = notes

    @property
    def supplement_number(self):
        """Gets the supplement_number of this FDAApproval.


        :return: The supplement_number of this FDAApproval.
        :rtype: int
        """
        return self._supplement_number

    @supplement_number.setter
    def supplement_number(self, supplement_number):
        """Sets the supplement_number of this FDAApproval.


        :param supplement_number: The supplement_number of this FDAApproval.
        :type supplement_number: int
        """
        if supplement_number is None:
            raise ValueError("Invalid value for `supplement_number`, must not be `None`")

        self._supplement_number = supplement_number

    @property
    def type(self):
        """Gets the type of this FDAApproval.

        Type of FDA approval

        :return: The type of this FDAApproval.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FDAApproval.

        Type of FDA approval

        :param type: The type of this FDAApproval.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
