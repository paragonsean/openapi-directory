# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: List[str]=None, gross_unit_price: bool=None, has_default_vat_rate: bool=None, id: int=None, product_type_id: int=None, stock_code: str=None, timestamp: str=None, unit_price: float=None, vat_analysis_type_id: int=None, vat_rate_id: int=None):
        """ProductDto - a model defined in OpenAPI

        :param details: The details of this ProductDto.
        :param gross_unit_price: The gross_unit_price of this ProductDto.
        :param has_default_vat_rate: The has_default_vat_rate of this ProductDto.
        :param id: The id of this ProductDto.
        :param product_type_id: The product_type_id of this ProductDto.
        :param stock_code: The stock_code of this ProductDto.
        :param timestamp: The timestamp of this ProductDto.
        :param unit_price: The unit_price of this ProductDto.
        :param vat_analysis_type_id: The vat_analysis_type_id of this ProductDto.
        :param vat_rate_id: The vat_rate_id of this ProductDto.
        """
        self.openapi_types = {
            'details': List[str],
            'gross_unit_price': bool,
            'has_default_vat_rate': bool,
            'id': int,
            'product_type_id': int,
            'stock_code': str,
            'timestamp': str,
            'unit_price': float,
            'vat_analysis_type_id': int,
            'vat_rate_id': int
        }

        self.attribute_map = {
            'details': 'details',
            'gross_unit_price': 'grossUnitPrice',
            'has_default_vat_rate': 'hasDefaultVatRate',
            'id': 'id',
            'product_type_id': 'productTypeId',
            'stock_code': 'stockCode',
            'timestamp': 'timestamp',
            'unit_price': 'unitPrice',
            'vat_analysis_type_id': 'vatAnalysisTypeId',
            'vat_rate_id': 'vatRateId'
        }

        self._details = details
        self._gross_unit_price = gross_unit_price
        self._has_default_vat_rate = has_default_vat_rate
        self._id = id
        self._product_type_id = product_type_id
        self._stock_code = stock_code
        self._timestamp = timestamp
        self._unit_price = unit_price
        self._vat_analysis_type_id = vat_analysis_type_id
        self._vat_rate_id = vat_rate_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductDto of this ProductDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this ProductDto.


        :return: The details of this ProductDto.
        :rtype: List[str]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ProductDto.


        :param details: The details of this ProductDto.
        :type details: List[str]
        """

        self._details = details

    @property
    def gross_unit_price(self):
        """Gets the gross_unit_price of this ProductDto.


        :return: The gross_unit_price of this ProductDto.
        :rtype: bool
        """
        return self._gross_unit_price

    @gross_unit_price.setter
    def gross_unit_price(self, gross_unit_price):
        """Sets the gross_unit_price of this ProductDto.


        :param gross_unit_price: The gross_unit_price of this ProductDto.
        :type gross_unit_price: bool
        """

        self._gross_unit_price = gross_unit_price

    @property
    def has_default_vat_rate(self):
        """Gets the has_default_vat_rate of this ProductDto.


        :return: The has_default_vat_rate of this ProductDto.
        :rtype: bool
        """
        return self._has_default_vat_rate

    @has_default_vat_rate.setter
    def has_default_vat_rate(self, has_default_vat_rate):
        """Sets the has_default_vat_rate of this ProductDto.


        :param has_default_vat_rate: The has_default_vat_rate of this ProductDto.
        :type has_default_vat_rate: bool
        """

        self._has_default_vat_rate = has_default_vat_rate

    @property
    def id(self):
        """Gets the id of this ProductDto.


        :return: The id of this ProductDto.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductDto.


        :param id: The id of this ProductDto.
        :type id: int
        """

        self._id = id

    @property
    def product_type_id(self):
        """Gets the product_type_id of this ProductDto.


        :return: The product_type_id of this ProductDto.
        :rtype: int
        """
        return self._product_type_id

    @product_type_id.setter
    def product_type_id(self, product_type_id):
        """Sets the product_type_id of this ProductDto.


        :param product_type_id: The product_type_id of this ProductDto.
        :type product_type_id: int
        """

        self._product_type_id = product_type_id

    @property
    def stock_code(self):
        """Gets the stock_code of this ProductDto.


        :return: The stock_code of this ProductDto.
        :rtype: str
        """
        return self._stock_code

    @stock_code.setter
    def stock_code(self, stock_code):
        """Sets the stock_code of this ProductDto.


        :param stock_code: The stock_code of this ProductDto.
        :type stock_code: str
        """

        self._stock_code = stock_code

    @property
    def timestamp(self):
        """Gets the timestamp of this ProductDto.


        :return: The timestamp of this ProductDto.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ProductDto.


        :param timestamp: The timestamp of this ProductDto.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def unit_price(self):
        """Gets the unit_price of this ProductDto.


        :return: The unit_price of this ProductDto.
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this ProductDto.


        :param unit_price: The unit_price of this ProductDto.
        :type unit_price: float
        """

        self._unit_price = unit_price

    @property
    def vat_analysis_type_id(self):
        """Gets the vat_analysis_type_id of this ProductDto.


        :return: The vat_analysis_type_id of this ProductDto.
        :rtype: int
        """
        return self._vat_analysis_type_id

    @vat_analysis_type_id.setter
    def vat_analysis_type_id(self, vat_analysis_type_id):
        """Sets the vat_analysis_type_id of this ProductDto.


        :param vat_analysis_type_id: The vat_analysis_type_id of this ProductDto.
        :type vat_analysis_type_id: int
        """

        self._vat_analysis_type_id = vat_analysis_type_id

    @property
    def vat_rate_id(self):
        """Gets the vat_rate_id of this ProductDto.


        :return: The vat_rate_id of this ProductDto.
        :rtype: int
        """
        return self._vat_rate_id

    @vat_rate_id.setter
    def vat_rate_id(self, vat_rate_id):
        """Sets the vat_rate_id of this ProductDto.


        :param vat_rate_id: The vat_rate_id of this ProductDto.
        :type vat_rate_id: int
        """

        self._vat_rate_id = vat_rate_id
