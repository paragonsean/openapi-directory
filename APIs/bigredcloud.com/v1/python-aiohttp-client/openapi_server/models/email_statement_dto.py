# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmailStatementDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bcc_addresses: List[str]=None, customer_id: int=None, from_period: datetime=None, message_body: str=None, minimum_balance: float=None, to_address: str=None, to_period: datetime=None):
        """EmailStatementDto - a model defined in OpenAPI

        :param bcc_addresses: The bcc_addresses of this EmailStatementDto.
        :param customer_id: The customer_id of this EmailStatementDto.
        :param from_period: The from_period of this EmailStatementDto.
        :param message_body: The message_body of this EmailStatementDto.
        :param minimum_balance: The minimum_balance of this EmailStatementDto.
        :param to_address: The to_address of this EmailStatementDto.
        :param to_period: The to_period of this EmailStatementDto.
        """
        self.openapi_types = {
            'bcc_addresses': List[str],
            'customer_id': int,
            'from_period': datetime,
            'message_body': str,
            'minimum_balance': float,
            'to_address': str,
            'to_period': datetime
        }

        self.attribute_map = {
            'bcc_addresses': 'bccAddresses',
            'customer_id': 'customerId',
            'from_period': 'fromPeriod',
            'message_body': 'messageBody',
            'minimum_balance': 'minimumBalance',
            'to_address': 'toAddress',
            'to_period': 'toPeriod'
        }

        self._bcc_addresses = bcc_addresses
        self._customer_id = customer_id
        self._from_period = from_period
        self._message_body = message_body
        self._minimum_balance = minimum_balance
        self._to_address = to_address
        self._to_period = to_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmailStatementDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmailStatementDto of this EmailStatementDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bcc_addresses(self):
        """Gets the bcc_addresses of this EmailStatementDto.


        :return: The bcc_addresses of this EmailStatementDto.
        :rtype: List[str]
        """
        return self._bcc_addresses

    @bcc_addresses.setter
    def bcc_addresses(self, bcc_addresses):
        """Sets the bcc_addresses of this EmailStatementDto.


        :param bcc_addresses: The bcc_addresses of this EmailStatementDto.
        :type bcc_addresses: List[str]
        """

        self._bcc_addresses = bcc_addresses

    @property
    def customer_id(self):
        """Gets the customer_id of this EmailStatementDto.


        :return: The customer_id of this EmailStatementDto.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this EmailStatementDto.


        :param customer_id: The customer_id of this EmailStatementDto.
        :type customer_id: int
        """

        self._customer_id = customer_id

    @property
    def from_period(self):
        """Gets the from_period of this EmailStatementDto.


        :return: The from_period of this EmailStatementDto.
        :rtype: datetime
        """
        return self._from_period

    @from_period.setter
    def from_period(self, from_period):
        """Sets the from_period of this EmailStatementDto.


        :param from_period: The from_period of this EmailStatementDto.
        :type from_period: datetime
        """

        self._from_period = from_period

    @property
    def message_body(self):
        """Gets the message_body of this EmailStatementDto.


        :return: The message_body of this EmailStatementDto.
        :rtype: str
        """
        return self._message_body

    @message_body.setter
    def message_body(self, message_body):
        """Sets the message_body of this EmailStatementDto.


        :param message_body: The message_body of this EmailStatementDto.
        :type message_body: str
        """

        self._message_body = message_body

    @property
    def minimum_balance(self):
        """Gets the minimum_balance of this EmailStatementDto.


        :return: The minimum_balance of this EmailStatementDto.
        :rtype: float
        """
        return self._minimum_balance

    @minimum_balance.setter
    def minimum_balance(self, minimum_balance):
        """Sets the minimum_balance of this EmailStatementDto.


        :param minimum_balance: The minimum_balance of this EmailStatementDto.
        :type minimum_balance: float
        """

        self._minimum_balance = minimum_balance

    @property
    def to_address(self):
        """Gets the to_address of this EmailStatementDto.


        :return: The to_address of this EmailStatementDto.
        :rtype: str
        """
        return self._to_address

    @to_address.setter
    def to_address(self, to_address):
        """Sets the to_address of this EmailStatementDto.


        :param to_address: The to_address of this EmailStatementDto.
        :type to_address: str
        """

        self._to_address = to_address

    @property
    def to_period(self):
        """Gets the to_period of this EmailStatementDto.


        :return: The to_period of this EmailStatementDto.
        :rtype: datetime
        """
        return self._to_period

    @to_period.setter
    def to_period(self, to_period):
        """Sets the to_period of this EmailStatementDto.


        :param to_period: The to_period of this EmailStatementDto.
        :type to_period: datetime
        """

        self._to_period = to_period
