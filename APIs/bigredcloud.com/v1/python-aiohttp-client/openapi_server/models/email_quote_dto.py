# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmailQuoteDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bcc_addresses: List[str]=None, message_body: str=None, quote_id: int=None, to_address: str=None):
        """EmailQuoteDto - a model defined in OpenAPI

        :param bcc_addresses: The bcc_addresses of this EmailQuoteDto.
        :param message_body: The message_body of this EmailQuoteDto.
        :param quote_id: The quote_id of this EmailQuoteDto.
        :param to_address: The to_address of this EmailQuoteDto.
        """
        self.openapi_types = {
            'bcc_addresses': List[str],
            'message_body': str,
            'quote_id': int,
            'to_address': str
        }

        self.attribute_map = {
            'bcc_addresses': 'bccAddresses',
            'message_body': 'messageBody',
            'quote_id': 'quoteId',
            'to_address': 'toAddress'
        }

        self._bcc_addresses = bcc_addresses
        self._message_body = message_body
        self._quote_id = quote_id
        self._to_address = to_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmailQuoteDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmailQuoteDto of this EmailQuoteDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bcc_addresses(self):
        """Gets the bcc_addresses of this EmailQuoteDto.


        :return: The bcc_addresses of this EmailQuoteDto.
        :rtype: List[str]
        """
        return self._bcc_addresses

    @bcc_addresses.setter
    def bcc_addresses(self, bcc_addresses):
        """Sets the bcc_addresses of this EmailQuoteDto.


        :param bcc_addresses: The bcc_addresses of this EmailQuoteDto.
        :type bcc_addresses: List[str]
        """

        self._bcc_addresses = bcc_addresses

    @property
    def message_body(self):
        """Gets the message_body of this EmailQuoteDto.


        :return: The message_body of this EmailQuoteDto.
        :rtype: str
        """
        return self._message_body

    @message_body.setter
    def message_body(self, message_body):
        """Sets the message_body of this EmailQuoteDto.


        :param message_body: The message_body of this EmailQuoteDto.
        :type message_body: str
        """

        self._message_body = message_body

    @property
    def quote_id(self):
        """Gets the quote_id of this EmailQuoteDto.


        :return: The quote_id of this EmailQuoteDto.
        :rtype: int
        """
        return self._quote_id

    @quote_id.setter
    def quote_id(self, quote_id):
        """Sets the quote_id of this EmailQuoteDto.


        :param quote_id: The quote_id of this EmailQuoteDto.
        :type quote_id: int
        """

        self._quote_id = quote_id

    @property
    def to_address(self):
        """Gets the to_address of this EmailQuoteDto.


        :return: The to_address of this EmailQuoteDto.
        :rtype: str
        """
        return self._to_address

    @to_address.setter
    def to_address(self, to_address):
        """Sets the to_address of this EmailQuoteDto.


        :param to_address: The to_address of this EmailQuoteDto.
        :type to_address: str
        """

        self._to_address = to_address
