# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CompanyReferenceSettingViewModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creditors_journal: bool=None, debtors_journal: bool=None, purchases: bool=None, sales: bool=None):
        """CompanyReferenceSettingViewModel - a model defined in OpenAPI

        :param creditors_journal: The creditors_journal of this CompanyReferenceSettingViewModel.
        :param debtors_journal: The debtors_journal of this CompanyReferenceSettingViewModel.
        :param purchases: The purchases of this CompanyReferenceSettingViewModel.
        :param sales: The sales of this CompanyReferenceSettingViewModel.
        """
        self.openapi_types = {
            'creditors_journal': bool,
            'debtors_journal': bool,
            'purchases': bool,
            'sales': bool
        }

        self.attribute_map = {
            'creditors_journal': 'creditorsJournal',
            'debtors_journal': 'debtorsJournal',
            'purchases': 'purchases',
            'sales': 'sales'
        }

        self._creditors_journal = creditors_journal
        self._debtors_journal = debtors_journal
        self._purchases = purchases
        self._sales = sales

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompanyReferenceSettingViewModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompanyReferenceSettingViewModel of this CompanyReferenceSettingViewModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creditors_journal(self):
        """Gets the creditors_journal of this CompanyReferenceSettingViewModel.


        :return: The creditors_journal of this CompanyReferenceSettingViewModel.
        :rtype: bool
        """
        return self._creditors_journal

    @creditors_journal.setter
    def creditors_journal(self, creditors_journal):
        """Sets the creditors_journal of this CompanyReferenceSettingViewModel.


        :param creditors_journal: The creditors_journal of this CompanyReferenceSettingViewModel.
        :type creditors_journal: bool
        """

        self._creditors_journal = creditors_journal

    @property
    def debtors_journal(self):
        """Gets the debtors_journal of this CompanyReferenceSettingViewModel.


        :return: The debtors_journal of this CompanyReferenceSettingViewModel.
        :rtype: bool
        """
        return self._debtors_journal

    @debtors_journal.setter
    def debtors_journal(self, debtors_journal):
        """Sets the debtors_journal of this CompanyReferenceSettingViewModel.


        :param debtors_journal: The debtors_journal of this CompanyReferenceSettingViewModel.
        :type debtors_journal: bool
        """

        self._debtors_journal = debtors_journal

    @property
    def purchases(self):
        """Gets the purchases of this CompanyReferenceSettingViewModel.


        :return: The purchases of this CompanyReferenceSettingViewModel.
        :rtype: bool
        """
        return self._purchases

    @purchases.setter
    def purchases(self, purchases):
        """Sets the purchases of this CompanyReferenceSettingViewModel.


        :param purchases: The purchases of this CompanyReferenceSettingViewModel.
        :type purchases: bool
        """

        self._purchases = purchases

    @property
    def sales(self):
        """Gets the sales of this CompanyReferenceSettingViewModel.


        :return: The sales of this CompanyReferenceSettingViewModel.
        :rtype: bool
        """
        return self._sales

    @sales.setter
    def sales(self, sales):
        """Sets the sales of this CompanyReferenceSettingViewModel.


        :param sales: The sales of this CompanyReferenceSettingViewModel.
        :type sales: bool
        """

        self._sales = sales
