# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.o_data_query_context import ODataQueryContext
from openapi_server.models.order_by_clause import OrderByClause
from openapi_server.models.order_by_node import OrderByNode
from openapi_server import util


class OrderByQueryOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: ODataQueryContext=None, order_by_clause: OrderByClause=None, order_by_nodes: List[OrderByNode]=None, raw_value: str=None, validator: object=None):
        """OrderByQueryOption - a model defined in OpenAPI

        :param context: The context of this OrderByQueryOption.
        :param order_by_clause: The order_by_clause of this OrderByQueryOption.
        :param order_by_nodes: The order_by_nodes of this OrderByQueryOption.
        :param raw_value: The raw_value of this OrderByQueryOption.
        :param validator: The validator of this OrderByQueryOption.
        """
        self.openapi_types = {
            'context': ODataQueryContext,
            'order_by_clause': OrderByClause,
            'order_by_nodes': List[OrderByNode],
            'raw_value': str,
            'validator': object
        }

        self.attribute_map = {
            'context': 'Context',
            'order_by_clause': 'OrderByClause',
            'order_by_nodes': 'OrderByNodes',
            'raw_value': 'RawValue',
            'validator': 'Validator'
        }

        self._context = context
        self._order_by_clause = order_by_clause
        self._order_by_nodes = order_by_nodes
        self._raw_value = raw_value
        self._validator = validator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderByQueryOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderByQueryOption of this OrderByQueryOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this OrderByQueryOption.


        :return: The context of this OrderByQueryOption.
        :rtype: ODataQueryContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this OrderByQueryOption.


        :param context: The context of this OrderByQueryOption.
        :type context: ODataQueryContext
        """

        self._context = context

    @property
    def order_by_clause(self):
        """Gets the order_by_clause of this OrderByQueryOption.


        :return: The order_by_clause of this OrderByQueryOption.
        :rtype: OrderByClause
        """
        return self._order_by_clause

    @order_by_clause.setter
    def order_by_clause(self, order_by_clause):
        """Sets the order_by_clause of this OrderByQueryOption.


        :param order_by_clause: The order_by_clause of this OrderByQueryOption.
        :type order_by_clause: OrderByClause
        """

        self._order_by_clause = order_by_clause

    @property
    def order_by_nodes(self):
        """Gets the order_by_nodes of this OrderByQueryOption.


        :return: The order_by_nodes of this OrderByQueryOption.
        :rtype: List[OrderByNode]
        """
        return self._order_by_nodes

    @order_by_nodes.setter
    def order_by_nodes(self, order_by_nodes):
        """Sets the order_by_nodes of this OrderByQueryOption.


        :param order_by_nodes: The order_by_nodes of this OrderByQueryOption.
        :type order_by_nodes: List[OrderByNode]
        """

        self._order_by_nodes = order_by_nodes

    @property
    def raw_value(self):
        """Gets the raw_value of this OrderByQueryOption.


        :return: The raw_value of this OrderByQueryOption.
        :rtype: str
        """
        return self._raw_value

    @raw_value.setter
    def raw_value(self, raw_value):
        """Sets the raw_value of this OrderByQueryOption.


        :param raw_value: The raw_value of this OrderByQueryOption.
        :type raw_value: str
        """

        self._raw_value = raw_value

    @property
    def validator(self):
        """Gets the validator of this OrderByQueryOption.


        :return: The validator of this OrderByQueryOption.
        :rtype: object
        """
        return self._validator

    @validator.setter
    def validator(self, validator):
        """Sets the validator of this OrderByQueryOption.


        :param validator: The validator of this OrderByQueryOption.
        :type validator: object
        """

        self._validator = validator
