# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ODataRawQueryOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expand: str=None, filter: str=None, format: str=None, inline_count: str=None, order_by: str=None, select: str=None, skip: str=None, skip_token: str=None, top: str=None):
        """ODataRawQueryOptions - a model defined in OpenAPI

        :param expand: The expand of this ODataRawQueryOptions.
        :param filter: The filter of this ODataRawQueryOptions.
        :param format: The format of this ODataRawQueryOptions.
        :param inline_count: The inline_count of this ODataRawQueryOptions.
        :param order_by: The order_by of this ODataRawQueryOptions.
        :param select: The select of this ODataRawQueryOptions.
        :param skip: The skip of this ODataRawQueryOptions.
        :param skip_token: The skip_token of this ODataRawQueryOptions.
        :param top: The top of this ODataRawQueryOptions.
        """
        self.openapi_types = {
            'expand': str,
            'filter': str,
            'format': str,
            'inline_count': str,
            'order_by': str,
            'select': str,
            'skip': str,
            'skip_token': str,
            'top': str
        }

        self.attribute_map = {
            'expand': 'Expand',
            'filter': 'Filter',
            'format': 'Format',
            'inline_count': 'InlineCount',
            'order_by': 'OrderBy',
            'select': 'Select',
            'skip': 'Skip',
            'skip_token': 'SkipToken',
            'top': 'Top'
        }

        self._expand = expand
        self._filter = filter
        self._format = format
        self._inline_count = inline_count
        self._order_by = order_by
        self._select = select
        self._skip = skip
        self._skip_token = skip_token
        self._top = top

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ODataRawQueryOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ODataRawQueryOptions of this ODataRawQueryOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expand(self):
        """Gets the expand of this ODataRawQueryOptions.


        :return: The expand of this ODataRawQueryOptions.
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this ODataRawQueryOptions.


        :param expand: The expand of this ODataRawQueryOptions.
        :type expand: str
        """

        self._expand = expand

    @property
    def filter(self):
        """Gets the filter of this ODataRawQueryOptions.


        :return: The filter of this ODataRawQueryOptions.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ODataRawQueryOptions.


        :param filter: The filter of this ODataRawQueryOptions.
        :type filter: str
        """

        self._filter = filter

    @property
    def format(self):
        """Gets the format of this ODataRawQueryOptions.


        :return: The format of this ODataRawQueryOptions.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ODataRawQueryOptions.


        :param format: The format of this ODataRawQueryOptions.
        :type format: str
        """

        self._format = format

    @property
    def inline_count(self):
        """Gets the inline_count of this ODataRawQueryOptions.


        :return: The inline_count of this ODataRawQueryOptions.
        :rtype: str
        """
        return self._inline_count

    @inline_count.setter
    def inline_count(self, inline_count):
        """Sets the inline_count of this ODataRawQueryOptions.


        :param inline_count: The inline_count of this ODataRawQueryOptions.
        :type inline_count: str
        """

        self._inline_count = inline_count

    @property
    def order_by(self):
        """Gets the order_by of this ODataRawQueryOptions.


        :return: The order_by of this ODataRawQueryOptions.
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this ODataRawQueryOptions.


        :param order_by: The order_by of this ODataRawQueryOptions.
        :type order_by: str
        """

        self._order_by = order_by

    @property
    def select(self):
        """Gets the select of this ODataRawQueryOptions.


        :return: The select of this ODataRawQueryOptions.
        :rtype: str
        """
        return self._select

    @select.setter
    def select(self, select):
        """Sets the select of this ODataRawQueryOptions.


        :param select: The select of this ODataRawQueryOptions.
        :type select: str
        """

        self._select = select

    @property
    def skip(self):
        """Gets the skip of this ODataRawQueryOptions.


        :return: The skip of this ODataRawQueryOptions.
        :rtype: str
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this ODataRawQueryOptions.


        :param skip: The skip of this ODataRawQueryOptions.
        :type skip: str
        """

        self._skip = skip

    @property
    def skip_token(self):
        """Gets the skip_token of this ODataRawQueryOptions.


        :return: The skip_token of this ODataRawQueryOptions.
        :rtype: str
        """
        return self._skip_token

    @skip_token.setter
    def skip_token(self, skip_token):
        """Sets the skip_token of this ODataRawQueryOptions.


        :param skip_token: The skip_token of this ODataRawQueryOptions.
        :type skip_token: str
        """

        self._skip_token = skip_token

    @property
    def top(self):
        """Gets the top of this ODataRawQueryOptions.


        :return: The top of this ODataRawQueryOptions.
        :rtype: str
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this ODataRawQueryOptions.


        :param top: The top of this ODataRawQueryOptions.
        :type top: str
        """

        self._top = top
