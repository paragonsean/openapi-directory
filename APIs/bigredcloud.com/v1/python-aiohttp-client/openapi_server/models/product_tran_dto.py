# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ac_entry_dto import AcEntryDto
from openapi_server import util


class ProductTranDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ac_entries: List[AcEntryDto]=None, amount: float=None, amount_net: float=None, id: int=None, percentage: float=None, product_code: str=None, product_id: int=None, quantity: float=None, tran_notes: List[str]=None, unit_price: float=None, vat: float=None, vat_analysis_type_id: int=None, vat_rate_id: int=None):
        """ProductTranDto - a model defined in OpenAPI

        :param ac_entries: The ac_entries of this ProductTranDto.
        :param amount: The amount of this ProductTranDto.
        :param amount_net: The amount_net of this ProductTranDto.
        :param id: The id of this ProductTranDto.
        :param percentage: The percentage of this ProductTranDto.
        :param product_code: The product_code of this ProductTranDto.
        :param product_id: The product_id of this ProductTranDto.
        :param quantity: The quantity of this ProductTranDto.
        :param tran_notes: The tran_notes of this ProductTranDto.
        :param unit_price: The unit_price of this ProductTranDto.
        :param vat: The vat of this ProductTranDto.
        :param vat_analysis_type_id: The vat_analysis_type_id of this ProductTranDto.
        :param vat_rate_id: The vat_rate_id of this ProductTranDto.
        """
        self.openapi_types = {
            'ac_entries': List[AcEntryDto],
            'amount': float,
            'amount_net': float,
            'id': int,
            'percentage': float,
            'product_code': str,
            'product_id': int,
            'quantity': float,
            'tran_notes': List[str],
            'unit_price': float,
            'vat': float,
            'vat_analysis_type_id': int,
            'vat_rate_id': int
        }

        self.attribute_map = {
            'ac_entries': 'acEntries',
            'amount': 'amount',
            'amount_net': 'amountNet',
            'id': 'id',
            'percentage': 'percentage',
            'product_code': 'productCode',
            'product_id': 'productId',
            'quantity': 'quantity',
            'tran_notes': 'tranNotes',
            'unit_price': 'unitPrice',
            'vat': 'vat',
            'vat_analysis_type_id': 'vatAnalysisTypeId',
            'vat_rate_id': 'vatRateId'
        }

        self._ac_entries = ac_entries
        self._amount = amount
        self._amount_net = amount_net
        self._id = id
        self._percentage = percentage
        self._product_code = product_code
        self._product_id = product_id
        self._quantity = quantity
        self._tran_notes = tran_notes
        self._unit_price = unit_price
        self._vat = vat
        self._vat_analysis_type_id = vat_analysis_type_id
        self._vat_rate_id = vat_rate_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductTranDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductTranDto of this ProductTranDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ac_entries(self):
        """Gets the ac_entries of this ProductTranDto.


        :return: The ac_entries of this ProductTranDto.
        :rtype: List[AcEntryDto]
        """
        return self._ac_entries

    @ac_entries.setter
    def ac_entries(self, ac_entries):
        """Sets the ac_entries of this ProductTranDto.


        :param ac_entries: The ac_entries of this ProductTranDto.
        :type ac_entries: List[AcEntryDto]
        """

        self._ac_entries = ac_entries

    @property
    def amount(self):
        """Gets the amount of this ProductTranDto.


        :return: The amount of this ProductTranDto.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ProductTranDto.


        :param amount: The amount of this ProductTranDto.
        :type amount: float
        """

        self._amount = amount

    @property
    def amount_net(self):
        """Gets the amount_net of this ProductTranDto.


        :return: The amount_net of this ProductTranDto.
        :rtype: float
        """
        return self._amount_net

    @amount_net.setter
    def amount_net(self, amount_net):
        """Sets the amount_net of this ProductTranDto.


        :param amount_net: The amount_net of this ProductTranDto.
        :type amount_net: float
        """
        if amount_net is None:
            raise ValueError("Invalid value for `amount_net`, must not be `None`")

        self._amount_net = amount_net

    @property
    def id(self):
        """Gets the id of this ProductTranDto.


        :return: The id of this ProductTranDto.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductTranDto.


        :param id: The id of this ProductTranDto.
        :type id: int
        """

        self._id = id

    @property
    def percentage(self):
        """Gets the percentage of this ProductTranDto.


        :return: The percentage of this ProductTranDto.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this ProductTranDto.


        :param percentage: The percentage of this ProductTranDto.
        :type percentage: float
        """

        self._percentage = percentage

    @property
    def product_code(self):
        """Gets the product_code of this ProductTranDto.


        :return: The product_code of this ProductTranDto.
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this ProductTranDto.


        :param product_code: The product_code of this ProductTranDto.
        :type product_code: str
        """

        self._product_code = product_code

    @property
    def product_id(self):
        """Gets the product_id of this ProductTranDto.


        :return: The product_id of this ProductTranDto.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductTranDto.


        :param product_id: The product_id of this ProductTranDto.
        :type product_id: int
        """

        self._product_id = product_id

    @property
    def quantity(self):
        """Gets the quantity of this ProductTranDto.


        :return: The quantity of this ProductTranDto.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProductTranDto.


        :param quantity: The quantity of this ProductTranDto.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def tran_notes(self):
        """Gets the tran_notes of this ProductTranDto.


        :return: The tran_notes of this ProductTranDto.
        :rtype: List[str]
        """
        return self._tran_notes

    @tran_notes.setter
    def tran_notes(self, tran_notes):
        """Sets the tran_notes of this ProductTranDto.


        :param tran_notes: The tran_notes of this ProductTranDto.
        :type tran_notes: List[str]
        """

        self._tran_notes = tran_notes

    @property
    def unit_price(self):
        """Gets the unit_price of this ProductTranDto.


        :return: The unit_price of this ProductTranDto.
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this ProductTranDto.


        :param unit_price: The unit_price of this ProductTranDto.
        :type unit_price: float
        """

        self._unit_price = unit_price

    @property
    def vat(self):
        """Gets the vat of this ProductTranDto.


        :return: The vat of this ProductTranDto.
        :rtype: float
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this ProductTranDto.


        :param vat: The vat of this ProductTranDto.
        :type vat: float
        """

        self._vat = vat

    @property
    def vat_analysis_type_id(self):
        """Gets the vat_analysis_type_id of this ProductTranDto.


        :return: The vat_analysis_type_id of this ProductTranDto.
        :rtype: int
        """
        return self._vat_analysis_type_id

    @vat_analysis_type_id.setter
    def vat_analysis_type_id(self, vat_analysis_type_id):
        """Sets the vat_analysis_type_id of this ProductTranDto.


        :param vat_analysis_type_id: The vat_analysis_type_id of this ProductTranDto.
        :type vat_analysis_type_id: int
        """

        self._vat_analysis_type_id = vat_analysis_type_id

    @property
    def vat_rate_id(self):
        """Gets the vat_rate_id of this ProductTranDto.


        :return: The vat_rate_id of this ProductTranDto.
        :rtype: int
        """
        return self._vat_rate_id

    @vat_rate_id.setter
    def vat_rate_id(self, vat_rate_id):
        """Sets the vat_rate_id of this ProductTranDto.


        :param vat_rate_id: The vat_rate_id of this ProductTranDto.
        :type vat_rate_id: int
        """

        self._vat_rate_id = vat_rate_id
