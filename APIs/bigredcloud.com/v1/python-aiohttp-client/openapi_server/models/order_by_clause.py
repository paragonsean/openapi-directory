# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.i_edm_type_reference import IEdmTypeReference
from openapi_server.models.range_variable import RangeVariable
from openapi_server.models.single_value_node import SingleValueNode
from openapi_server import util


class OrderByClause(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, direction: int=None, expression: SingleValueNode=None, item_type: IEdmTypeReference=None, range_variable: RangeVariable=None, then_by: OrderByClause=None):
        """OrderByClause - a model defined in OpenAPI

        :param direction: The direction of this OrderByClause.
        :param expression: The expression of this OrderByClause.
        :param item_type: The item_type of this OrderByClause.
        :param range_variable: The range_variable of this OrderByClause.
        :param then_by: The then_by of this OrderByClause.
        """
        self.openapi_types = {
            'direction': int,
            'expression': SingleValueNode,
            'item_type': IEdmTypeReference,
            'range_variable': RangeVariable,
            'then_by': OrderByClause
        }

        self.attribute_map = {
            'direction': 'Direction',
            'expression': 'Expression',
            'item_type': 'ItemType',
            'range_variable': 'RangeVariable',
            'then_by': 'ThenBy'
        }

        self._direction = direction
        self._expression = expression
        self._item_type = item_type
        self._range_variable = range_variable
        self._then_by = then_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderByClause':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderByClause of this OrderByClause.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def direction(self):
        """Gets the direction of this OrderByClause.


        :return: The direction of this OrderByClause.
        :rtype: int
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this OrderByClause.


        :param direction: The direction of this OrderByClause.
        :type direction: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def expression(self):
        """Gets the expression of this OrderByClause.


        :return: The expression of this OrderByClause.
        :rtype: SingleValueNode
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this OrderByClause.


        :param expression: The expression of this OrderByClause.
        :type expression: SingleValueNode
        """

        self._expression = expression

    @property
    def item_type(self):
        """Gets the item_type of this OrderByClause.


        :return: The item_type of this OrderByClause.
        :rtype: IEdmTypeReference
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this OrderByClause.


        :param item_type: The item_type of this OrderByClause.
        :type item_type: IEdmTypeReference
        """

        self._item_type = item_type

    @property
    def range_variable(self):
        """Gets the range_variable of this OrderByClause.


        :return: The range_variable of this OrderByClause.
        :rtype: RangeVariable
        """
        return self._range_variable

    @range_variable.setter
    def range_variable(self, range_variable):
        """Sets the range_variable of this OrderByClause.


        :param range_variable: The range_variable of this OrderByClause.
        :type range_variable: RangeVariable
        """

        self._range_variable = range_variable

    @property
    def then_by(self):
        """Gets the then_by of this OrderByClause.


        :return: The then_by of this OrderByClause.
        :rtype: OrderByClause
        """
        return self._then_by

    @then_by.setter
    def then_by(self, then_by):
        """Sets the then_by of this OrderByClause.


        :param then_by: The then_by of this OrderByClause.
        :type then_by: OrderByClause
        """

        self._then_by = then_by
