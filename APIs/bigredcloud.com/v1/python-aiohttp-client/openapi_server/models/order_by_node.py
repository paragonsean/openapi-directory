# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrderByNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, direction: int=None):
        """OrderByNode - a model defined in OpenAPI

        :param direction: The direction of this OrderByNode.
        """
        self.openapi_types = {
            'direction': int
        }

        self.attribute_map = {
            'direction': 'Direction'
        }

        self._direction = direction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderByNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderByNode of this OrderByNode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def direction(self):
        """Gets the direction of this OrderByNode.


        :return: The direction of this OrderByNode.
        :rtype: int
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this OrderByNode.


        :param direction: The direction of this OrderByNode.
        :type direction: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction
