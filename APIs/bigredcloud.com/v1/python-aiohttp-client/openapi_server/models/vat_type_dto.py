# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VatTypeDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, description: str=None, id: int=None, is_not_applicable: bool=None, is_only_zero: bool=None):
        """VatTypeDto - a model defined in OpenAPI

        :param code: The code of this VatTypeDto.
        :param description: The description of this VatTypeDto.
        :param id: The id of this VatTypeDto.
        :param is_not_applicable: The is_not_applicable of this VatTypeDto.
        :param is_only_zero: The is_only_zero of this VatTypeDto.
        """
        self.openapi_types = {
            'code': str,
            'description': str,
            'id': int,
            'is_not_applicable': bool,
            'is_only_zero': bool
        }

        self.attribute_map = {
            'code': 'code',
            'description': 'description',
            'id': 'id',
            'is_not_applicable': 'isNotApplicable',
            'is_only_zero': 'isOnlyZero'
        }

        self._code = code
        self._description = description
        self._id = id
        self._is_not_applicable = is_not_applicable
        self._is_only_zero = is_only_zero

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VatTypeDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VatTypeDto of this VatTypeDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this VatTypeDto.


        :return: The code of this VatTypeDto.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this VatTypeDto.


        :param code: The code of this VatTypeDto.
        :type code: str
        """

        self._code = code

    @property
    def description(self):
        """Gets the description of this VatTypeDto.


        :return: The description of this VatTypeDto.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VatTypeDto.


        :param description: The description of this VatTypeDto.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this VatTypeDto.


        :return: The id of this VatTypeDto.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VatTypeDto.


        :param id: The id of this VatTypeDto.
        :type id: int
        """

        self._id = id

    @property
    def is_not_applicable(self):
        """Gets the is_not_applicable of this VatTypeDto.


        :return: The is_not_applicable of this VatTypeDto.
        :rtype: bool
        """
        return self._is_not_applicable

    @is_not_applicable.setter
    def is_not_applicable(self, is_not_applicable):
        """Sets the is_not_applicable of this VatTypeDto.


        :param is_not_applicable: The is_not_applicable of this VatTypeDto.
        :type is_not_applicable: bool
        """

        self._is_not_applicable = is_not_applicable

    @property
    def is_only_zero(self):
        """Gets the is_only_zero of this VatTypeDto.


        :return: The is_only_zero of this VatTypeDto.
        :rtype: bool
        """
        return self._is_only_zero

    @is_only_zero.setter
    def is_only_zero(self, is_only_zero):
        """Sets the is_only_zero of this VatTypeDto.


        :param is_only_zero: The is_only_zero of this VatTypeDto.
        :type is_only_zero: bool
        """

        self._is_only_zero = is_only_zero
