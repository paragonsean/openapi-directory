# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.owner_opening_balance_vat_entry_dto import OwnerOpeningBalanceVatEntryDto
from openapi_server import util


class OwnerOpeningBalanceDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entry_date: datetime=None, id: int=None, is_changed: bool=None, proc_date: datetime=None, reference: str=None, timestamp: str=None, total: float=None, total_vat: float=None, unpaid: float=None, vat_entries: List[OwnerOpeningBalanceVatEntryDto]=None):
        """OwnerOpeningBalanceDto - a model defined in OpenAPI

        :param entry_date: The entry_date of this OwnerOpeningBalanceDto.
        :param id: The id of this OwnerOpeningBalanceDto.
        :param is_changed: The is_changed of this OwnerOpeningBalanceDto.
        :param proc_date: The proc_date of this OwnerOpeningBalanceDto.
        :param reference: The reference of this OwnerOpeningBalanceDto.
        :param timestamp: The timestamp of this OwnerOpeningBalanceDto.
        :param total: The total of this OwnerOpeningBalanceDto.
        :param total_vat: The total_vat of this OwnerOpeningBalanceDto.
        :param unpaid: The unpaid of this OwnerOpeningBalanceDto.
        :param vat_entries: The vat_entries of this OwnerOpeningBalanceDto.
        """
        self.openapi_types = {
            'entry_date': datetime,
            'id': int,
            'is_changed': bool,
            'proc_date': datetime,
            'reference': str,
            'timestamp': str,
            'total': float,
            'total_vat': float,
            'unpaid': float,
            'vat_entries': List[OwnerOpeningBalanceVatEntryDto]
        }

        self.attribute_map = {
            'entry_date': 'entryDate',
            'id': 'id',
            'is_changed': 'isChanged',
            'proc_date': 'procDate',
            'reference': 'reference',
            'timestamp': 'timestamp',
            'total': 'total',
            'total_vat': 'totalVAT',
            'unpaid': 'unpaid',
            'vat_entries': 'vatEntries'
        }

        self._entry_date = entry_date
        self._id = id
        self._is_changed = is_changed
        self._proc_date = proc_date
        self._reference = reference
        self._timestamp = timestamp
        self._total = total
        self._total_vat = total_vat
        self._unpaid = unpaid
        self._vat_entries = vat_entries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OwnerOpeningBalanceDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OwnerOpeningBalanceDto of this OwnerOpeningBalanceDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entry_date(self):
        """Gets the entry_date of this OwnerOpeningBalanceDto.


        :return: The entry_date of this OwnerOpeningBalanceDto.
        :rtype: datetime
        """
        return self._entry_date

    @entry_date.setter
    def entry_date(self, entry_date):
        """Sets the entry_date of this OwnerOpeningBalanceDto.


        :param entry_date: The entry_date of this OwnerOpeningBalanceDto.
        :type entry_date: datetime
        """

        self._entry_date = entry_date

    @property
    def id(self):
        """Gets the id of this OwnerOpeningBalanceDto.


        :return: The id of this OwnerOpeningBalanceDto.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OwnerOpeningBalanceDto.


        :param id: The id of this OwnerOpeningBalanceDto.
        :type id: int
        """

        self._id = id

    @property
    def is_changed(self):
        """Gets the is_changed of this OwnerOpeningBalanceDto.


        :return: The is_changed of this OwnerOpeningBalanceDto.
        :rtype: bool
        """
        return self._is_changed

    @is_changed.setter
    def is_changed(self, is_changed):
        """Sets the is_changed of this OwnerOpeningBalanceDto.


        :param is_changed: The is_changed of this OwnerOpeningBalanceDto.
        :type is_changed: bool
        """

        self._is_changed = is_changed

    @property
    def proc_date(self):
        """Gets the proc_date of this OwnerOpeningBalanceDto.


        :return: The proc_date of this OwnerOpeningBalanceDto.
        :rtype: datetime
        """
        return self._proc_date

    @proc_date.setter
    def proc_date(self, proc_date):
        """Sets the proc_date of this OwnerOpeningBalanceDto.


        :param proc_date: The proc_date of this OwnerOpeningBalanceDto.
        :type proc_date: datetime
        """

        self._proc_date = proc_date

    @property
    def reference(self):
        """Gets the reference of this OwnerOpeningBalanceDto.


        :return: The reference of this OwnerOpeningBalanceDto.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this OwnerOpeningBalanceDto.


        :param reference: The reference of this OwnerOpeningBalanceDto.
        :type reference: str
        """

        self._reference = reference

    @property
    def timestamp(self):
        """Gets the timestamp of this OwnerOpeningBalanceDto.


        :return: The timestamp of this OwnerOpeningBalanceDto.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this OwnerOpeningBalanceDto.


        :param timestamp: The timestamp of this OwnerOpeningBalanceDto.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def total(self):
        """Gets the total of this OwnerOpeningBalanceDto.


        :return: The total of this OwnerOpeningBalanceDto.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this OwnerOpeningBalanceDto.


        :param total: The total of this OwnerOpeningBalanceDto.
        :type total: float
        """

        self._total = total

    @property
    def total_vat(self):
        """Gets the total_vat of this OwnerOpeningBalanceDto.


        :return: The total_vat of this OwnerOpeningBalanceDto.
        :rtype: float
        """
        return self._total_vat

    @total_vat.setter
    def total_vat(self, total_vat):
        """Sets the total_vat of this OwnerOpeningBalanceDto.


        :param total_vat: The total_vat of this OwnerOpeningBalanceDto.
        :type total_vat: float
        """

        self._total_vat = total_vat

    @property
    def unpaid(self):
        """Gets the unpaid of this OwnerOpeningBalanceDto.


        :return: The unpaid of this OwnerOpeningBalanceDto.
        :rtype: float
        """
        return self._unpaid

    @unpaid.setter
    def unpaid(self, unpaid):
        """Sets the unpaid of this OwnerOpeningBalanceDto.


        :param unpaid: The unpaid of this OwnerOpeningBalanceDto.
        :type unpaid: float
        """

        self._unpaid = unpaid

    @property
    def vat_entries(self):
        """Gets the vat_entries of this OwnerOpeningBalanceDto.


        :return: The vat_entries of this OwnerOpeningBalanceDto.
        :rtype: List[OwnerOpeningBalanceVatEntryDto]
        """
        return self._vat_entries

    @vat_entries.setter
    def vat_entries(self, vat_entries):
        """Sets the vat_entries of this OwnerOpeningBalanceDto.


        :param vat_entries: The vat_entries of this OwnerOpeningBalanceDto.
        :type vat_entries: List[OwnerOpeningBalanceVatEntryDto]
        """

        self._vat_entries = vat_entries
