# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_group: str=None, account_type: str=None, code: str=None, description: str=None, id: int=None):
        """AccountDto - a model defined in OpenAPI

        :param account_group: The account_group of this AccountDto.
        :param account_type: The account_type of this AccountDto.
        :param code: The code of this AccountDto.
        :param description: The description of this AccountDto.
        :param id: The id of this AccountDto.
        """
        self.openapi_types = {
            'account_group': str,
            'account_type': str,
            'code': str,
            'description': str,
            'id': int
        }

        self.attribute_map = {
            'account_group': 'accountGroup',
            'account_type': 'accountType',
            'code': 'code',
            'description': 'description',
            'id': 'id'
        }

        self._account_group = account_group
        self._account_type = account_type
        self._code = code
        self._description = description
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountDto of this AccountDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_group(self):
        """Gets the account_group of this AccountDto.


        :return: The account_group of this AccountDto.
        :rtype: str
        """
        return self._account_group

    @account_group.setter
    def account_group(self, account_group):
        """Sets the account_group of this AccountDto.


        :param account_group: The account_group of this AccountDto.
        :type account_group: str
        """

        self._account_group = account_group

    @property
    def account_type(self):
        """Gets the account_type of this AccountDto.


        :return: The account_type of this AccountDto.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this AccountDto.


        :param account_type: The account_type of this AccountDto.
        :type account_type: str
        """

        self._account_type = account_type

    @property
    def code(self):
        """Gets the code of this AccountDto.


        :return: The code of this AccountDto.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AccountDto.


        :param code: The code of this AccountDto.
        :type code: str
        """

        self._code = code

    @property
    def description(self):
        """Gets the description of this AccountDto.


        :return: The description of this AccountDto.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccountDto.


        :param description: The description of this AccountDto.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this AccountDto.


        :return: The id of this AccountDto.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountDto.


        :param id: The id of this AccountDto.
        :type id: int
        """

        self._id = id
