# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.i_edm_schema_element import IEdmSchemaElement
from openapi_server.models.i_edm_vocabulary_annotation import IEdmVocabularyAnnotation
from openapi_server import util


class IEdmModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, direct_value_annotations_manager: object=None, referenced_models: List[IEdmModel]=None, schema_elements: List[IEdmSchemaElement]=None, vocabulary_annotations: List[IEdmVocabularyAnnotation]=None):
        """IEdmModel - a model defined in OpenAPI

        :param direct_value_annotations_manager: The direct_value_annotations_manager of this IEdmModel.
        :param referenced_models: The referenced_models of this IEdmModel.
        :param schema_elements: The schema_elements of this IEdmModel.
        :param vocabulary_annotations: The vocabulary_annotations of this IEdmModel.
        """
        self.openapi_types = {
            'direct_value_annotations_manager': object,
            'referenced_models': List[IEdmModel],
            'schema_elements': List[IEdmSchemaElement],
            'vocabulary_annotations': List[IEdmVocabularyAnnotation]
        }

        self.attribute_map = {
            'direct_value_annotations_manager': 'DirectValueAnnotationsManager',
            'referenced_models': 'ReferencedModels',
            'schema_elements': 'SchemaElements',
            'vocabulary_annotations': 'VocabularyAnnotations'
        }

        self._direct_value_annotations_manager = direct_value_annotations_manager
        self._referenced_models = referenced_models
        self._schema_elements = schema_elements
        self._vocabulary_annotations = vocabulary_annotations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IEdmModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IEdmModel of this IEdmModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def direct_value_annotations_manager(self):
        """Gets the direct_value_annotations_manager of this IEdmModel.


        :return: The direct_value_annotations_manager of this IEdmModel.
        :rtype: object
        """
        return self._direct_value_annotations_manager

    @direct_value_annotations_manager.setter
    def direct_value_annotations_manager(self, direct_value_annotations_manager):
        """Sets the direct_value_annotations_manager of this IEdmModel.


        :param direct_value_annotations_manager: The direct_value_annotations_manager of this IEdmModel.
        :type direct_value_annotations_manager: object
        """

        self._direct_value_annotations_manager = direct_value_annotations_manager

    @property
    def referenced_models(self):
        """Gets the referenced_models of this IEdmModel.


        :return: The referenced_models of this IEdmModel.
        :rtype: List[IEdmModel]
        """
        return self._referenced_models

    @referenced_models.setter
    def referenced_models(self, referenced_models):
        """Sets the referenced_models of this IEdmModel.


        :param referenced_models: The referenced_models of this IEdmModel.
        :type referenced_models: List[IEdmModel]
        """

        self._referenced_models = referenced_models

    @property
    def schema_elements(self):
        """Gets the schema_elements of this IEdmModel.


        :return: The schema_elements of this IEdmModel.
        :rtype: List[IEdmSchemaElement]
        """
        return self._schema_elements

    @schema_elements.setter
    def schema_elements(self, schema_elements):
        """Sets the schema_elements of this IEdmModel.


        :param schema_elements: The schema_elements of this IEdmModel.
        :type schema_elements: List[IEdmSchemaElement]
        """

        self._schema_elements = schema_elements

    @property
    def vocabulary_annotations(self):
        """Gets the vocabulary_annotations of this IEdmModel.


        :return: The vocabulary_annotations of this IEdmModel.
        :rtype: List[IEdmVocabularyAnnotation]
        """
        return self._vocabulary_annotations

    @vocabulary_annotations.setter
    def vocabulary_annotations(self, vocabulary_annotations):
        """Sets the vocabulary_annotations of this IEdmModel.


        :param vocabulary_annotations: The vocabulary_annotations of this IEdmModel.
        :type vocabulary_annotations: List[IEdmVocabularyAnnotation]
        """

        self._vocabulary_annotations = vocabulary_annotations
