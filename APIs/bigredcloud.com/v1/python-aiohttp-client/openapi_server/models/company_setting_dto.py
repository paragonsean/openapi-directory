# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CompanySettingDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_vocr_reporting: bool=None, id: int=None, use_allocations: bool=None, value: str=None, vocr_setting_value: bool=None):
        """CompanySettingDto - a model defined in OpenAPI

        :param enable_vocr_reporting: The enable_vocr_reporting of this CompanySettingDto.
        :param id: The id of this CompanySettingDto.
        :param use_allocations: The use_allocations of this CompanySettingDto.
        :param value: The value of this CompanySettingDto.
        :param vocr_setting_value: The vocr_setting_value of this CompanySettingDto.
        """
        self.openapi_types = {
            'enable_vocr_reporting': bool,
            'id': int,
            'use_allocations': bool,
            'value': str,
            'vocr_setting_value': bool
        }

        self.attribute_map = {
            'enable_vocr_reporting': 'enableVOCRReporting',
            'id': 'id',
            'use_allocations': 'useAllocations',
            'value': 'value',
            'vocr_setting_value': 'vocrSettingValue'
        }

        self._enable_vocr_reporting = enable_vocr_reporting
        self._id = id
        self._use_allocations = use_allocations
        self._value = value
        self._vocr_setting_value = vocr_setting_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompanySettingDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompanySettingDto of this CompanySettingDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_vocr_reporting(self):
        """Gets the enable_vocr_reporting of this CompanySettingDto.


        :return: The enable_vocr_reporting of this CompanySettingDto.
        :rtype: bool
        """
        return self._enable_vocr_reporting

    @enable_vocr_reporting.setter
    def enable_vocr_reporting(self, enable_vocr_reporting):
        """Sets the enable_vocr_reporting of this CompanySettingDto.


        :param enable_vocr_reporting: The enable_vocr_reporting of this CompanySettingDto.
        :type enable_vocr_reporting: bool
        """

        self._enable_vocr_reporting = enable_vocr_reporting

    @property
    def id(self):
        """Gets the id of this CompanySettingDto.


        :return: The id of this CompanySettingDto.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanySettingDto.


        :param id: The id of this CompanySettingDto.
        :type id: int
        """

        self._id = id

    @property
    def use_allocations(self):
        """Gets the use_allocations of this CompanySettingDto.


        :return: The use_allocations of this CompanySettingDto.
        :rtype: bool
        """
        return self._use_allocations

    @use_allocations.setter
    def use_allocations(self, use_allocations):
        """Sets the use_allocations of this CompanySettingDto.


        :param use_allocations: The use_allocations of this CompanySettingDto.
        :type use_allocations: bool
        """

        self._use_allocations = use_allocations

    @property
    def value(self):
        """Gets the value of this CompanySettingDto.


        :return: The value of this CompanySettingDto.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CompanySettingDto.


        :param value: The value of this CompanySettingDto.
        :type value: str
        """

        self._value = value

    @property
    def vocr_setting_value(self):
        """Gets the vocr_setting_value of this CompanySettingDto.


        :return: The vocr_setting_value of this CompanySettingDto.
        :rtype: bool
        """
        return self._vocr_setting_value

    @vocr_setting_value.setter
    def vocr_setting_value(self, vocr_setting_value):
        """Sets the vocr_setting_value of this CompanySettingDto.


        :param vocr_setting_value: The vocr_setting_value of this CompanySettingDto.
        :type vocr_setting_value: bool
        """

        self._vocr_setting_value = vocr_setting_value
