# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.i_edm_type_reference import IEdmTypeReference
from openapi_server import util


class SingleValueNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: int=None, type_reference: IEdmTypeReference=None):
        """SingleValueNode - a model defined in OpenAPI

        :param kind: The kind of this SingleValueNode.
        :param type_reference: The type_reference of this SingleValueNode.
        """
        self.openapi_types = {
            'kind': int,
            'type_reference': IEdmTypeReference
        }

        self.attribute_map = {
            'kind': 'Kind',
            'type_reference': 'TypeReference'
        }

        self._kind = kind
        self._type_reference = type_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SingleValueNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SingleValueNode of this SingleValueNode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this SingleValueNode.


        :return: The kind of this SingleValueNode.
        :rtype: int
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this SingleValueNode.


        :param kind: The kind of this SingleValueNode.
        :type kind: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def type_reference(self):
        """Gets the type_reference of this SingleValueNode.


        :return: The type_reference of this SingleValueNode.
        :rtype: IEdmTypeReference
        """
        return self._type_reference

    @type_reference.setter
    def type_reference(self, type_reference):
        """Sets the type_reference of this SingleValueNode.


        :param type_reference: The type_reference of this SingleValueNode.
        :type type_reference: IEdmTypeReference
        """

        self._type_reference = type_reference
