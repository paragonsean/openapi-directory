# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VatRateDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, is_active: bool=None, is_default: bool=None, order_index: int=None, percentage: float=None, timestamp: str=None, vat_category_id: int=None):
        """VatRateDto - a model defined in OpenAPI

        :param id: The id of this VatRateDto.
        :param is_active: The is_active of this VatRateDto.
        :param is_default: The is_default of this VatRateDto.
        :param order_index: The order_index of this VatRateDto.
        :param percentage: The percentage of this VatRateDto.
        :param timestamp: The timestamp of this VatRateDto.
        :param vat_category_id: The vat_category_id of this VatRateDto.
        """
        self.openapi_types = {
            'id': int,
            'is_active': bool,
            'is_default': bool,
            'order_index': int,
            'percentage': float,
            'timestamp': str,
            'vat_category_id': int
        }

        self.attribute_map = {
            'id': 'id',
            'is_active': 'isActive',
            'is_default': 'isDefault',
            'order_index': 'orderIndex',
            'percentage': 'percentage',
            'timestamp': 'timestamp',
            'vat_category_id': 'vatCategoryId'
        }

        self._id = id
        self._is_active = is_active
        self._is_default = is_default
        self._order_index = order_index
        self._percentage = percentage
        self._timestamp = timestamp
        self._vat_category_id = vat_category_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VatRateDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VatRateDto of this VatRateDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this VatRateDto.


        :return: The id of this VatRateDto.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VatRateDto.


        :param id: The id of this VatRateDto.
        :type id: int
        """

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this VatRateDto.


        :return: The is_active of this VatRateDto.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this VatRateDto.


        :param is_active: The is_active of this VatRateDto.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_default(self):
        """Gets the is_default of this VatRateDto.


        :return: The is_default of this VatRateDto.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this VatRateDto.


        :param is_default: The is_default of this VatRateDto.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def order_index(self):
        """Gets the order_index of this VatRateDto.


        :return: The order_index of this VatRateDto.
        :rtype: int
        """
        return self._order_index

    @order_index.setter
    def order_index(self, order_index):
        """Sets the order_index of this VatRateDto.


        :param order_index: The order_index of this VatRateDto.
        :type order_index: int
        """

        self._order_index = order_index

    @property
    def percentage(self):
        """Gets the percentage of this VatRateDto.


        :return: The percentage of this VatRateDto.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this VatRateDto.


        :param percentage: The percentage of this VatRateDto.
        :type percentage: float
        """

        self._percentage = percentage

    @property
    def timestamp(self):
        """Gets the timestamp of this VatRateDto.


        :return: The timestamp of this VatRateDto.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this VatRateDto.


        :param timestamp: The timestamp of this VatRateDto.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def vat_category_id(self):
        """Gets the vat_category_id of this VatRateDto.


        :return: The vat_category_id of this VatRateDto.
        :rtype: int
        """
        return self._vat_category_id

    @vat_category_id.setter
    def vat_category_id(self, vat_category_id):
        """Sets the vat_category_id of this VatRateDto.


        :param vat_category_id: The vat_category_id of this VatRateDto.
        :type vat_category_id: int
        """

        self._vat_category_id = vat_category_id
