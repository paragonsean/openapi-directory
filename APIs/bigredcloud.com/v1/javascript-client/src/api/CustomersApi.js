/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountTranDto from '../model/AccountTranDto';
import BatchItemCustomerDto from '../model/BatchItemCustomerDto';
import CustomerDto from '../model/CustomerDto';
import OwnerOpeningBalanceDto from '../model/OwnerOpeningBalanceDto';
import OwnerOpeningBalanceInPeriodsDto from '../model/OwnerOpeningBalanceInPeriodsDto';
import PageResultCustomerQueryDto from '../model/PageResultCustomerQueryDto';
import QuoteDto from '../model/QuoteDto';

/**
* Customers service.
* @module api/CustomersApi
* @version v1
*/
export default class CustomersApi {

    /**
    * Constructs a new CustomersApi. 
    * @alias module:api/CustomersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the customersDelete operation.
     * @callback module:api/CustomersApi~customersDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an existing Customer.
     * @param {Number} id Id of Customer to remove.
     * @param {String} timestamp Timestamp of Customer to remove. Should be encoded in Base64.
     * @param {module:api/CustomersApi~customersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    customersDelete(id, timestamp, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling customersDelete");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling customersDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'timestamp': timestamp
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/customers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customersGet operation.
     * @callback module:api/CustomersApi~customersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResultCustomerQueryDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of company's Customers. Supports OData querying protocol.  Filtering is forbidden.  Ordering is allowed by \"id\" and \"code\" fields.
     * @param {module:api/CustomersApi~customersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResultCustomerQueryDto}
     */
    customersGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResultCustomerQueryDto;
      return this.apiClient.callApi(
        '/v1/customers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customersGetAccountTrans operation.
     * @callback module:api/CustomersApi~customersGetAccountTransCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccountTranDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of Customer's account transactions.
     * @param {Number} itemId Id of Customer to return account transaction.
     * @param {module:api/CustomersApi~customersGetAccountTransCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccountTranDto>}
     */
    customersGetAccountTrans(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling customersGetAccountTrans");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AccountTranDto];
      return this.apiClient.callApi(
        '/v1/customers/{itemId}/accountTrans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customersGetOpeningBalance operation.
     * @callback module:api/CustomersApi~customersGetOpeningBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OwnerOpeningBalanceInPeriodsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a Customer's opening balances, calculated for the next periods: current month, one month old, two months old, three and more months old.
     * @param {Number} itemId Id of Customer to return opening balances.
     * @param {module:api/CustomersApi~customersGetOpeningBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OwnerOpeningBalanceInPeriodsDto}
     */
    customersGetOpeningBalance(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling customersGetOpeningBalance");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OwnerOpeningBalanceInPeriodsDto;
      return this.apiClient.callApi(
        '/v1/customers/{itemId}/openingBalance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customersGetOpeningBalanceList operation.
     * @callback module:api/CustomersApi~customersGetOpeningBalanceListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OwnerOpeningBalanceDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of Customer's opening balance transactions.
     * @param {Number} itemId Id of Customer to return opening balances transaction.
     * @param {module:api/CustomersApi~customersGetOpeningBalanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OwnerOpeningBalanceDto>}
     */
    customersGetOpeningBalanceList(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling customersGetOpeningBalanceList");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OwnerOpeningBalanceDto];
      return this.apiClient.callApi(
        '/v1/customers/{itemId}/openingBalanceList', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customersGetQuotes operation.
     * @callback module:api/CustomersApi~customersGetQuotesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuoteDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of Customer's quotes.
     * @param {Number} itemId Id of Customer to return quotes.
     * @param {module:api/CustomersApi~customersGetQuotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuoteDto>}
     */
    customersGetQuotes(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling customersGetQuotes");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [QuoteDto];
      return this.apiClient.callApi(
        '/v1/customers/{itemId}/quotes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customersPost operation.
     * @callback module:api/CustomersApi~customersPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Customer.
     * @param {module:model/CustomerDto} customerDto Information of Customer to create.
     * @param {module:api/CustomersApi~customersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    customersPost(customerDto, callback) {
      let postBody = customerDto;
      // verify the required parameter 'customerDto' is set
      if (customerDto === undefined || customerDto === null) {
        throw new Error("Missing the required parameter 'customerDto' when calling customersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/customers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customersProcessBatch operation.
     * @callback module:api/CustomersApi~customersProcessBatchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Processes a batch of Customers.
     * @param {Array.<module:model/BatchItemCustomerDto>} batchItemCustomerDto Batch of Customers to process.
     * @param {module:api/CustomersApi~customersProcessBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    customersProcessBatch(batchItemCustomerDto, callback) {
      let postBody = batchItemCustomerDto;
      // verify the required parameter 'batchItemCustomerDto' is set
      if (batchItemCustomerDto === undefined || batchItemCustomerDto === null) {
        throw new Error("Missing the required parameter 'batchItemCustomerDto' when calling customersProcessBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/customers/batch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customersPut operation.
     * @callback module:api/CustomersApi~customersPutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing Customer.
     * @param {Number} id Id of Customer to update.
     * @param {module:model/CustomerDto} customerDto Information of Customer to update.
     * @param {module:api/CustomersApi~customersPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    customersPut(id, customerDto, callback) {
      let postBody = customerDto;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling customersPut");
      }
      // verify the required parameter 'customerDto' is set
      if (customerDto === undefined || customerDto === null) {
        throw new Error("Missing the required parameter 'customerDto' when calling customersPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/customers/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CustomersIdGet operation.
     * @callback module:api/CustomersApi~v1CustomersIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a single Customer. You may specify that Customer's ledger balance should be calculated.
     * @param {Number} id Id of Customer to return.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [needBalance] If \"true\" then Customer's ledger balance will be calculated; otherwise balance will be returned as 0.
     * @param {module:api/CustomersApi~v1CustomersIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerDto}
     */
    v1CustomersIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1CustomersIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'needBalance': opts['needBalance']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerDto;
      return this.apiClient.callApi(
        '/v1/customers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
