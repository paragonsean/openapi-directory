/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchItemCashReceiptDto from '../model/BatchItemCashReceiptDto';
import CashReceiptDto from '../model/CashReceiptDto';
import PageResultCashReceiptQueryDto from '../model/PageResultCashReceiptQueryDto';

/**
* CashReceipts service.
* @module api/CashReceiptsApi
* @version v1
*/
export default class CashReceiptsApi {

    /**
    * Constructs a new CashReceiptsApi. 
    * @alias module:api/CashReceiptsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cashReceiptsDelete operation.
     * @callback module:api/CashReceiptsApi~cashReceiptsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an existing Cash Receipt.
     * @param {Number} id Id of Cash Receipt to remove.
     * @param {String} timestamp Timestamp of Cash Receipt to remove. Should be encoded in Base64.
     * @param {module:api/CashReceiptsApi~cashReceiptsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cashReceiptsDelete(id, timestamp, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cashReceiptsDelete");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling cashReceiptsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'timestamp': timestamp
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/cashReceipts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cashReceiptsGet operation.
     * @callback module:api/CashReceiptsApi~cashReceiptsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResultCashReceiptQueryDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of company's Cash Receipts. Supports OData querying protocol.  Filtering is allowed by \"entryDate\" field.  Ordering is allowed by \"id\" field.
     * @param {module:api/CashReceiptsApi~cashReceiptsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResultCashReceiptQueryDto}
     */
    cashReceiptsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResultCashReceiptQueryDto;
      return this.apiClient.callApi(
        '/v1/cashReceipts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cashReceiptsPost operation.
     * @callback module:api/CashReceiptsApi~cashReceiptsPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Cash Receipt.
     * @param {module:model/CashReceiptDto} cashReceiptDto Information of Cash Receipt to create.
     * @param {module:api/CashReceiptsApi~cashReceiptsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cashReceiptsPost(cashReceiptDto, callback) {
      let postBody = cashReceiptDto;
      // verify the required parameter 'cashReceiptDto' is set
      if (cashReceiptDto === undefined || cashReceiptDto === null) {
        throw new Error("Missing the required parameter 'cashReceiptDto' when calling cashReceiptsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/cashReceipts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cashReceiptsProcessBatch operation.
     * @callback module:api/CashReceiptsApi~cashReceiptsProcessBatchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Processes a batch of Cash Receipts.
     * @param {Array.<module:model/BatchItemCashReceiptDto>} batchItemCashReceiptDto Batch of Cash Receipts to process.
     * @param {module:api/CashReceiptsApi~cashReceiptsProcessBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cashReceiptsProcessBatch(batchItemCashReceiptDto, callback) {
      let postBody = batchItemCashReceiptDto;
      // verify the required parameter 'batchItemCashReceiptDto' is set
      if (batchItemCashReceiptDto === undefined || batchItemCashReceiptDto === null) {
        throw new Error("Missing the required parameter 'batchItemCashReceiptDto' when calling cashReceiptsProcessBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/cashReceipts/batch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cashReceiptsPut operation.
     * @callback module:api/CashReceiptsApi~cashReceiptsPutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing Cash Receipt.
     * @param {Number} id Id of Cash Receipt to update.
     * @param {module:model/CashReceiptDto} cashReceiptDto Information of Cash Receipt to update.
     * @param {module:api/CashReceiptsApi~cashReceiptsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cashReceiptsPut(id, cashReceiptDto, callback) {
      let postBody = cashReceiptDto;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cashReceiptsPut");
      }
      // verify the required parameter 'cashReceiptDto' is set
      if (cashReceiptDto === undefined || cashReceiptDto === null) {
        throw new Error("Missing the required parameter 'cashReceiptDto' when calling cashReceiptsPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/cashReceipts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CashReceiptsIdGet operation.
     * @callback module:api/CashReceiptsApi~v1CashReceiptsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CashReceiptDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a single Cash Receipt.
     * @param {Number} id Id of Cash Receipt to return.
     * @param {module:api/CashReceiptsApi~v1CashReceiptsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CashReceiptDto}
     */
    v1CashReceiptsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1CashReceiptsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CashReceiptDto;
      return this.apiClient.callApi(
        '/v1/cashReceipts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
