/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchItemQuoteDto from '../model/BatchItemQuoteDto';
import PageResultQuoteDto from '../model/PageResultQuoteDto';
import QuoteDto from '../model/QuoteDto';
import QuoteGeneratingInvoiceDto from '../model/QuoteGeneratingInvoiceDto';

/**
* Quote service.
* @module api/QuoteApi
* @version v1
*/
export default class QuoteApi {

    /**
    * Constructs a new QuoteApi. 
    * @alias module:api/QuoteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the quoteClose operation.
     * @callback module:api/QuoteApi~quoteCloseCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Close a Quote.
     * @param {Number} id Id of Quote to close
     * @param {module:api/QuoteApi~quoteCloseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    quoteClose(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quoteClose");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/quotes/close/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteDelete operation.
     * @callback module:api/QuoteApi~quoteDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an existing Quote.
     * @param {Number} id Id of Quote to remove.
     * @param {String} timestamp Timestamp of Quote to remove. Should be encoded in Base64.
     * @param {module:api/QuoteApi~quoteDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    quoteDelete(id, timestamp, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quoteDelete");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling quoteDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'timestamp': timestamp
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/quotes/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteGet operation.
     * @callback module:api/QuoteApi~quoteGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResultQuoteDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of company's Quotes.  Filtering is forbidden.  Ordering is allowed by \"id\".
     * @param {module:api/QuoteApi~quoteGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResultQuoteDto}
     */
    quoteGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResultQuoteDto;
      return this.apiClient.callApi(
        '/v1/quotes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quotePost operation.
     * @callback module:api/QuoteApi~quotePostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Quote.
     * @param {module:model/QuoteDto} quoteDto Information of Quote to create.
     * @param {module:api/QuoteApi~quotePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    quotePost(quoteDto, callback) {
      let postBody = quoteDto;
      // verify the required parameter 'quoteDto' is set
      if (quoteDto === undefined || quoteDto === null) {
        throw new Error("Missing the required parameter 'quoteDto' when calling quotePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/quotes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quotePostCreateQuoteWithGeneratingReference operation.
     * @callback module:api/QuoteApi~quotePostCreateQuoteWithGeneratingReferenceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Quote with auto generating reference.
     * @param {module:model/QuoteDto} quoteDto Information of Quote to create.
     * @param {module:api/QuoteApi~quotePostCreateQuoteWithGeneratingReferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    quotePostCreateQuoteWithGeneratingReference(quoteDto, callback) {
      let postBody = quoteDto;
      // verify the required parameter 'quoteDto' is set
      if (quoteDto === undefined || quoteDto === null) {
        throw new Error("Missing the required parameter 'quoteDto' when calling quotePostCreateQuoteWithGeneratingReference");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/quotes/createQuoteWithGeneratingReference', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quotePostGenerateSaleInvoice operation.
     * @callback module:api/QuoteApi~quotePostGenerateSaleInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a sale invoice from a Quote.  When sale invoice is empty, new sale invoice will be generated from Quote.
     * @param {module:model/QuoteGeneratingInvoiceDto} quoteGeneratingInvoiceDto Id of Quote to generate
     * @param {module:api/QuoteApi~quotePostGenerateSaleInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    quotePostGenerateSaleInvoice(quoteGeneratingInvoiceDto, callback) {
      let postBody = quoteGeneratingInvoiceDto;
      // verify the required parameter 'quoteGeneratingInvoiceDto' is set
      if (quoteGeneratingInvoiceDto === undefined || quoteGeneratingInvoiceDto === null) {
        throw new Error("Missing the required parameter 'quoteGeneratingInvoiceDto' when calling quotePostGenerateSaleInvoice");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/quotes/generateSaleInvoice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteProcessBatch operation.
     * @callback module:api/QuoteApi~quoteProcessBatchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Processes a batch of Quote.
     * @param {Array.<module:model/BatchItemQuoteDto>} batchItemQuoteDto Batch of Quote to process.
     * @param {module:api/QuoteApi~quoteProcessBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    quoteProcessBatch(batchItemQuoteDto, callback) {
      let postBody = batchItemQuoteDto;
      // verify the required parameter 'batchItemQuoteDto' is set
      if (batchItemQuoteDto === undefined || batchItemQuoteDto === null) {
        throw new Error("Missing the required parameter 'batchItemQuoteDto' when calling quoteProcessBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/quotes/batch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quotePut operation.
     * @callback module:api/QuoteApi~quotePutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing Quote.
     * @param {Number} id Id of Quote to update.
     * @param {module:model/QuoteDto} quoteDto Information of Quote to update.
     * @param {module:api/QuoteApi~quotePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    quotePut(id, quoteDto, callback) {
      let postBody = quoteDto;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quotePut");
      }
      // verify the required parameter 'quoteDto' is set
      if (quoteDto === undefined || quoteDto === null) {
        throw new Error("Missing the required parameter 'quoteDto' when calling quotePut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/quotes/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteReopen operation.
     * @callback module:api/QuoteApi~quoteReopenCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reopen a Quote.
     * @param {Number} id Id of Quote to reopen
     * @param {module:api/QuoteApi~quoteReopenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    quoteReopen(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quoteReopen");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/quotes/reopen/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1QuotesIdGet operation.
     * @callback module:api/QuoteApi~v1QuotesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a single Quote.
     * @param {Number} id Id of Sale Rep to return.
     * @param {module:api/QuoteApi~v1QuotesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteDto}
     */
    v1QuotesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1QuotesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QuoteDto;
      return this.apiClient.callApi(
        '/v1/quotes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
