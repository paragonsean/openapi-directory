/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EmailQuoteDto from '../model/EmailQuoteDto';
import EmailStatementDto from '../model/EmailStatementDto';
import SalesInvoiceEmailInfoDto from '../model/SalesInvoiceEmailInfoDto';

/**
* Email service.
* @module api/EmailApi
* @version v1
*/
export default class EmailApi {

    /**
    * Constructs a new EmailApi. 
    * @alias module:api/EmailApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the emailSendEmailStatement operation.
     * @callback module:api/EmailApi~emailSendEmailStatementCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends a Statement email.  If \"toAddress\" is not empty then email will be sent to this address. Otherwise email will be sent to Statement Customer's address.
     * @param {module:model/EmailStatementDto} emailStatementDto 
     * @param {module:api/EmailApi~emailSendEmailStatementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    emailSendEmailStatement(emailStatementDto, callback) {
      let postBody = emailStatementDto;
      // verify the required parameter 'emailStatementDto' is set
      if (emailStatementDto === undefined || emailStatementDto === null) {
        throw new Error("Missing the required parameter 'emailStatementDto' when calling emailSendEmailStatement");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/sendEmailStatement', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the emailSendQuote operation.
     * @callback module:api/EmailApi~emailSendQuoteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends a Quote email.  If \"toAddress\" is not empty then email will be sent to this address. Otherwise email will be sent to Statement Customer's address.
     * @param {module:model/EmailQuoteDto} emailQuoteDto 
     * @param {module:api/EmailApi~emailSendQuoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    emailSendQuote(emailQuoteDto, callback) {
      let postBody = emailQuoteDto;
      // verify the required parameter 'emailQuoteDto' is set
      if (emailQuoteDto === undefined || emailQuoteDto === null) {
        throw new Error("Missing the required parameter 'emailQuoteDto' when calling emailSendQuote");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/sendQuote', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the emailSendSalesInvoice operation.
     * @callback module:api/EmailApi~emailSendSalesInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends a Sales Invoice email.  If \"toAddress\" is not empty then email will be sent to this address. Otherwise email will be sent to Sales Invoice Customer's address.
     * @param {module:model/SalesInvoiceEmailInfoDto} salesInvoiceEmailInfoDto 
     * @param {module:api/EmailApi~emailSendSalesInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    emailSendSalesInvoice(salesInvoiceEmailInfoDto, callback) {
      let postBody = salesInvoiceEmailInfoDto;
      // verify the required parameter 'salesInvoiceEmailInfoDto' is set
      if (salesInvoiceEmailInfoDto === undefined || salesInvoiceEmailInfoDto === null) {
        throw new Error("Missing the required parameter 'salesInvoiceEmailInfoDto' when calling emailSendSalesInvoice");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/sendSalesInvoice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
