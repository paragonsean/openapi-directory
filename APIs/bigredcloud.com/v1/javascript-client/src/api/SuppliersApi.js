/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountTranDto from '../model/AccountTranDto';
import BatchItemSupplierDto from '../model/BatchItemSupplierDto';
import OwnerOpeningBalanceDto from '../model/OwnerOpeningBalanceDto';
import OwnerOpeningBalanceInPeriodsDto from '../model/OwnerOpeningBalanceInPeriodsDto';
import PageResultSupplierQueryDto from '../model/PageResultSupplierQueryDto';
import SupplierDto from '../model/SupplierDto';

/**
* Suppliers service.
* @module api/SuppliersApi
* @version v1
*/
export default class SuppliersApi {

    /**
    * Constructs a new SuppliersApi. 
    * @alias module:api/SuppliersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the suppliersDelete operation.
     * @callback module:api/SuppliersApi~suppliersDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an existing Supplier.
     * @param {Number} id Id of Supplier to remove.
     * @param {String} timestamp Timestamp of Supplier to remove. Should be encoded in Base64.
     * @param {module:api/SuppliersApi~suppliersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    suppliersDelete(id, timestamp, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling suppliersDelete");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling suppliersDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'timestamp': timestamp
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/suppliers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersGet operation.
     * @callback module:api/SuppliersApi~suppliersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResultSupplierQueryDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of company's Suppliers. Supports OData querying protocol.  Filtering is forbidden.  Ordering is allowed by \"id\" and \"code\" fields.
     * @param {module:api/SuppliersApi~suppliersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResultSupplierQueryDto}
     */
    suppliersGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResultSupplierQueryDto;
      return this.apiClient.callApi(
        '/v1/suppliers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersGetAccountTrans operation.
     * @callback module:api/SuppliersApi~suppliersGetAccountTransCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccountTranDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of Supplier's account transactions.
     * @param {Number} itemId Id of Supplier to return account transaction.
     * @param {module:api/SuppliersApi~suppliersGetAccountTransCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccountTranDto>}
     */
    suppliersGetAccountTrans(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling suppliersGetAccountTrans");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AccountTranDto];
      return this.apiClient.callApi(
        '/v1/suppliers/{itemId}/accountTrans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersGetOpeningBalance operation.
     * @callback module:api/SuppliersApi~suppliersGetOpeningBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OwnerOpeningBalanceInPeriodsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a Supplier's opening balances, calculated for the next periods: current month, one month old, two months old, three and more months old.
     * @param {Number} itemId Id of Supplier to return opening balances.
     * @param {module:api/SuppliersApi~suppliersGetOpeningBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OwnerOpeningBalanceInPeriodsDto}
     */
    suppliersGetOpeningBalance(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling suppliersGetOpeningBalance");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OwnerOpeningBalanceInPeriodsDto;
      return this.apiClient.callApi(
        '/v1/suppliers/{itemId}/openingBalance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersGetOpeningBalanceList operation.
     * @callback module:api/SuppliersApi~suppliersGetOpeningBalanceListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OwnerOpeningBalanceDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of Supplier's opening balance transactions.
     * @param {Number} itemId Id of Supplier to return opening balances transaction.
     * @param {module:api/SuppliersApi~suppliersGetOpeningBalanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OwnerOpeningBalanceDto>}
     */
    suppliersGetOpeningBalanceList(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling suppliersGetOpeningBalanceList");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OwnerOpeningBalanceDto];
      return this.apiClient.callApi(
        '/v1/suppliers/{itemId}/openingBalanceList', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersPost operation.
     * @callback module:api/SuppliersApi~suppliersPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Supplier.
     * @param {module:model/SupplierDto} supplierDto Information of Supplier to create.
     * @param {module:api/SuppliersApi~suppliersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    suppliersPost(supplierDto, callback) {
      let postBody = supplierDto;
      // verify the required parameter 'supplierDto' is set
      if (supplierDto === undefined || supplierDto === null) {
        throw new Error("Missing the required parameter 'supplierDto' when calling suppliersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/suppliers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersProcessBatch operation.
     * @callback module:api/SuppliersApi~suppliersProcessBatchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Processes a batch of Suppliers.
     * @param {Array.<module:model/BatchItemSupplierDto>} batchItemSupplierDto Batch of Suppliers to process.
     * @param {module:api/SuppliersApi~suppliersProcessBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    suppliersProcessBatch(batchItemSupplierDto, callback) {
      let postBody = batchItemSupplierDto;
      // verify the required parameter 'batchItemSupplierDto' is set
      if (batchItemSupplierDto === undefined || batchItemSupplierDto === null) {
        throw new Error("Missing the required parameter 'batchItemSupplierDto' when calling suppliersProcessBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/suppliers/batch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersPut operation.
     * @callback module:api/SuppliersApi~suppliersPutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing Supplier.
     * @param {Number} id Id of Supplier to update.
     * @param {module:model/SupplierDto} supplierDto Information of Supplier to update.
     * @param {module:api/SuppliersApi~suppliersPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    suppliersPut(id, supplierDto, callback) {
      let postBody = supplierDto;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling suppliersPut");
      }
      // verify the required parameter 'supplierDto' is set
      if (supplierDto === undefined || supplierDto === null) {
        throw new Error("Missing the required parameter 'supplierDto' when calling suppliersPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/suppliers/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SuppliersIdGet operation.
     * @callback module:api/SuppliersApi~v1SuppliersIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplierDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a single Supplier. You may specify that Supplier's ledger balance should be calculated.
     * @param {Number} id Id of Supplier to return.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [needBalance] If \"true\" then Supplier's ledger balance will be calculated; otherwise balance will be returned as 0.
     * @param {module:api/SuppliersApi~v1SuppliersIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplierDto}
     */
    v1SuppliersIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1SuppliersIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'needBalance': opts['needBalance']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SupplierDto;
      return this.apiClient.callApi(
        '/v1/suppliers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
