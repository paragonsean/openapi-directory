/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchItemPurchaseDto from '../model/BatchItemPurchaseDto';
import PageResultPurchaseQueryDto from '../model/PageResultPurchaseQueryDto';
import PurchaseDto from '../model/PurchaseDto';

/**
* Purchases service.
* @module api/PurchasesApi
* @version v1
*/
export default class PurchasesApi {

    /**
    * Constructs a new PurchasesApi. 
    * @alias module:api/PurchasesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the purchasesDelete operation.
     * @callback module:api/PurchasesApi~purchasesDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an existing Purchase.
     * @param {Number} id Id of Purchase to remove.
     * @param {String} timestamp Timestamp of Purchase to remove. Should be encoded in Base64.
     * @param {module:api/PurchasesApi~purchasesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    purchasesDelete(id, timestamp, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling purchasesDelete");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling purchasesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'timestamp': timestamp
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/purchases/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the purchasesGet operation.
     * @callback module:api/PurchasesApi~purchasesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResultPurchaseQueryDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of company's Purchases. Supports OData querying protocol.  Filtering is allowed by \"entryDate\" field.  Ordering is allowed by \"id\" field.
     * @param {module:api/PurchasesApi~purchasesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResultPurchaseQueryDto}
     */
    purchasesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResultPurchaseQueryDto;
      return this.apiClient.callApi(
        '/v1/purchases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the purchasesPost operation.
     * @callback module:api/PurchasesApi~purchasesPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Purchase.
     * @param {module:model/PurchaseDto} purchaseDto Information of Purchase to create.
     * @param {module:api/PurchasesApi~purchasesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    purchasesPost(purchaseDto, callback) {
      let postBody = purchaseDto;
      // verify the required parameter 'purchaseDto' is set
      if (purchaseDto === undefined || purchaseDto === null) {
        throw new Error("Missing the required parameter 'purchaseDto' when calling purchasesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/purchases', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the purchasesProcessBatch operation.
     * @callback module:api/PurchasesApi~purchasesProcessBatchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Processes a batch of Purchases.
     * @param {Array.<module:model/BatchItemPurchaseDto>} batchItemPurchaseDto Batch of Purchases to process.
     * @param {module:api/PurchasesApi~purchasesProcessBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    purchasesProcessBatch(batchItemPurchaseDto, callback) {
      let postBody = batchItemPurchaseDto;
      // verify the required parameter 'batchItemPurchaseDto' is set
      if (batchItemPurchaseDto === undefined || batchItemPurchaseDto === null) {
        throw new Error("Missing the required parameter 'batchItemPurchaseDto' when calling purchasesProcessBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/purchases/batch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the purchasesPut operation.
     * @callback module:api/PurchasesApi~purchasesPutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing Purchase.
     * @param {Number} id Id of Purchase to update.
     * @param {module:model/PurchaseDto} purchaseDto Information of Purchase to update.
     * @param {module:api/PurchasesApi~purchasesPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    purchasesPut(id, purchaseDto, callback) {
      let postBody = purchaseDto;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling purchasesPut");
      }
      // verify the required parameter 'purchaseDto' is set
      if (purchaseDto === undefined || purchaseDto === null) {
        throw new Error("Missing the required parameter 'purchaseDto' when calling purchasesPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/purchases/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1PurchasesIdGet operation.
     * @callback module:api/PurchasesApi~v1PurchasesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a single Purchases.
     * @param {Number} id Id of Purchase to return.
     * @param {module:api/PurchasesApi~v1PurchasesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseDto}
     */
    v1PurchasesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1PurchasesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PurchaseDto;
      return this.apiClient.callApi(
        '/v1/purchases/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
