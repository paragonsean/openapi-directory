/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EmailQuoteDto model module.
 * @module model/EmailQuoteDto
 * @version v1
 */
class EmailQuoteDto {
    /**
     * Constructs a new <code>EmailQuoteDto</code>.
     * @alias module:model/EmailQuoteDto
     */
    constructor() { 
        
        EmailQuoteDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EmailQuoteDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EmailQuoteDto} obj Optional instance to populate.
     * @return {module:model/EmailQuoteDto} The populated <code>EmailQuoteDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EmailQuoteDto();

            if (data.hasOwnProperty('bccAddresses')) {
                obj['bccAddresses'] = ApiClient.convertToType(data['bccAddresses'], ['String']);
            }
            if (data.hasOwnProperty('messageBody')) {
                obj['messageBody'] = ApiClient.convertToType(data['messageBody'], 'String');
            }
            if (data.hasOwnProperty('quoteId')) {
                obj['quoteId'] = ApiClient.convertToType(data['quoteId'], 'Number');
            }
            if (data.hasOwnProperty('toAddress')) {
                obj['toAddress'] = ApiClient.convertToType(data['toAddress'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EmailQuoteDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EmailQuoteDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['bccAddresses'])) {
            throw new Error("Expected the field `bccAddresses` to be an array in the JSON data but got " + data['bccAddresses']);
        }
        // ensure the json data is a string
        if (data['messageBody'] && !(typeof data['messageBody'] === 'string' || data['messageBody'] instanceof String)) {
            throw new Error("Expected the field `messageBody` to be a primitive type in the JSON string but got " + data['messageBody']);
        }
        // ensure the json data is a string
        if (data['toAddress'] && !(typeof data['toAddress'] === 'string' || data['toAddress'] instanceof String)) {
            throw new Error("Expected the field `toAddress` to be a primitive type in the JSON string but got " + data['toAddress']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} bccAddresses
 */
EmailQuoteDto.prototype['bccAddresses'] = undefined;

/**
 * @member {String} messageBody
 */
EmailQuoteDto.prototype['messageBody'] = undefined;

/**
 * @member {Number} quoteId
 */
EmailQuoteDto.prototype['quoteId'] = undefined;

/**
 * @member {String} toAddress
 */
EmailQuoteDto.prototype['toAddress'] = undefined;






export default EmailQuoteDto;

