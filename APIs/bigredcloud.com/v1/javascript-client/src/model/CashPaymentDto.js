/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AcEntryDto from './AcEntryDto';
import AcudfValueDto from './AcudfValueDto';

/**
 * The CashPaymentDto model module.
 * @module model/CashPaymentDto
 * @version v1
 */
class CashPaymentDto {
    /**
     * Constructs a new <code>CashPaymentDto</code>.
     * @alias module:model/CashPaymentDto
     */
    constructor() { 
        
        CashPaymentDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CashPaymentDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CashPaymentDto} obj Optional instance to populate.
     * @return {module:model/CashPaymentDto} The populated <code>CashPaymentDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CashPaymentDto();

            if (data.hasOwnProperty('acCode')) {
                obj['acCode'] = ApiClient.convertToType(data['acCode'], 'String');
            }
            if (data.hasOwnProperty('acEntries')) {
                obj['acEntries'] = ApiClient.convertToType(data['acEntries'], [AcEntryDto]);
            }
            if (data.hasOwnProperty('bankAccountCode')) {
                obj['bankAccountCode'] = ApiClient.convertToType(data['bankAccountCode'], 'String');
            }
            if (data.hasOwnProperty('bankAccountId')) {
                obj['bankAccountId'] = ApiClient.convertToType(data['bankAccountId'], 'Number');
            }
            if (data.hasOwnProperty('bookTranTypeId')) {
                obj['bookTranTypeId'] = ApiClient.convertToType(data['bookTranTypeId'], 'Number');
            }
            if (data.hasOwnProperty('customFields')) {
                obj['customFields'] = ApiClient.convertToType(data['customFields'], [AcudfValueDto]);
            }
            if (data.hasOwnProperty('detailCollection')) {
                obj['detailCollection'] = ApiClient.convertToType(data['detailCollection'], ['String']);
            }
            if (data.hasOwnProperty('discount')) {
                obj['discount'] = ApiClient.convertToType(data['discount'], 'Number');
            }
            if (data.hasOwnProperty('entryDate')) {
                obj['entryDate'] = ApiClient.convertToType(data['entryDate'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('ledger')) {
                obj['ledger'] = ApiClient.convertToType(data['ledger'], 'Number');
            }
            if (data.hasOwnProperty('lodgement')) {
                obj['lodgement'] = ApiClient.convertToType(data['lodgement'], 'Number');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('plaidTransactionId')) {
                obj['plaidTransactionId'] = ApiClient.convertToType(data['plaidTransactionId'], 'String');
            }
            if (data.hasOwnProperty('procDate')) {
                obj['procDate'] = ApiClient.convertToType(data['procDate'], 'Date');
            }
            if (data.hasOwnProperty('supplierId')) {
                obj['supplierId'] = ApiClient.convertToType(data['supplierId'], 'Number');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Blob');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CashPaymentDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CashPaymentDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['acCode'] && !(typeof data['acCode'] === 'string' || data['acCode'] instanceof String)) {
            throw new Error("Expected the field `acCode` to be a primitive type in the JSON string but got " + data['acCode']);
        }
        if (data['acEntries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['acEntries'])) {
                throw new Error("Expected the field `acEntries` to be an array in the JSON data but got " + data['acEntries']);
            }
            // validate the optional field `acEntries` (array)
            for (const item of data['acEntries']) {
                AcEntryDto.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['bankAccountCode'] && !(typeof data['bankAccountCode'] === 'string' || data['bankAccountCode'] instanceof String)) {
            throw new Error("Expected the field `bankAccountCode` to be a primitive type in the JSON string but got " + data['bankAccountCode']);
        }
        if (data['customFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customFields'])) {
                throw new Error("Expected the field `customFields` to be an array in the JSON data but got " + data['customFields']);
            }
            // validate the optional field `customFields` (array)
            for (const item of data['customFields']) {
                AcudfValueDto.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['detailCollection'])) {
            throw new Error("Expected the field `detailCollection` to be an array in the JSON data but got " + data['detailCollection']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['plaidTransactionId'] && !(typeof data['plaidTransactionId'] === 'string' || data['plaidTransactionId'] instanceof String)) {
            throw new Error("Expected the field `plaidTransactionId` to be a primitive type in the JSON string but got " + data['plaidTransactionId']);
        }

        return true;
    }


}



/**
 * @member {String} acCode
 */
CashPaymentDto.prototype['acCode'] = undefined;

/**
 * @member {Array.<module:model/AcEntryDto>} acEntries
 */
CashPaymentDto.prototype['acEntries'] = undefined;

/**
 * @member {String} bankAccountCode
 */
CashPaymentDto.prototype['bankAccountCode'] = undefined;

/**
 * @member {Number} bankAccountId
 */
CashPaymentDto.prototype['bankAccountId'] = undefined;

/**
 * @member {Number} bookTranTypeId
 */
CashPaymentDto.prototype['bookTranTypeId'] = undefined;

/**
 * @member {Array.<module:model/AcudfValueDto>} customFields
 */
CashPaymentDto.prototype['customFields'] = undefined;

/**
 * @member {Array.<String>} detailCollection
 */
CashPaymentDto.prototype['detailCollection'] = undefined;

/**
 * @member {Number} discount
 */
CashPaymentDto.prototype['discount'] = undefined;

/**
 * @member {Date} entryDate
 */
CashPaymentDto.prototype['entryDate'] = undefined;

/**
 * @member {Number} id
 */
CashPaymentDto.prototype['id'] = undefined;

/**
 * @member {Number} ledger
 */
CashPaymentDto.prototype['ledger'] = undefined;

/**
 * @member {Number} lodgement
 */
CashPaymentDto.prototype['lodgement'] = undefined;

/**
 * @member {String} note
 */
CashPaymentDto.prototype['note'] = undefined;

/**
 * @member {String} plaidTransactionId
 */
CashPaymentDto.prototype['plaidTransactionId'] = undefined;

/**
 * @member {Date} procDate
 */
CashPaymentDto.prototype['procDate'] = undefined;

/**
 * @member {Number} supplierId
 */
CashPaymentDto.prototype['supplierId'] = undefined;

/**
 * @member {Blob} timestamp
 */
CashPaymentDto.prototype['timestamp'] = undefined;

/**
 * @member {Number} total
 */
CashPaymentDto.prototype['total'] = undefined;






export default CashPaymentDto;

