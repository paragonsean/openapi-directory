/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BankAccountDto model module.
 * @module model/BankAccountDto
 * @version v1
 */
class BankAccountDto {
    /**
     * Constructs a new <code>BankAccountDto</code>.
     * @alias module:model/BankAccountDto
     */
    constructor() { 
        
        BankAccountDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BankAccountDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BankAccountDto} obj Optional instance to populate.
     * @return {module:model/BankAccountDto} The populated <code>BankAccountDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BankAccountDto();

            if (data.hasOwnProperty('acCode')) {
                obj['acCode'] = ApiClient.convertToType(data['acCode'], 'String');
            }
            if (data.hasOwnProperty('accountName')) {
                obj['accountName'] = ApiClient.convertToType(data['accountName'], 'String');
            }
            if (data.hasOwnProperty('accountNumber')) {
                obj['accountNumber'] = ApiClient.convertToType(data['accountNumber'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], ['String']);
            }
            if (data.hasOwnProperty('bankFeedSource')) {
                obj['bankFeedSource'] = ApiClient.convertToType(data['bankFeedSource'], 'Number');
            }
            if (data.hasOwnProperty('businessIdentifierCodes')) {
                obj['businessIdentifierCodes'] = ApiClient.convertToType(data['businessIdentifierCodes'], 'String');
            }
            if (data.hasOwnProperty('categoryId')) {
                obj['categoryId'] = ApiClient.convertToType(data['categoryId'], 'Number');
            }
            if (data.hasOwnProperty('creditorScheme')) {
                obj['creditorScheme'] = ApiClient.convertToType(data['creditorScheme'], 'String');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('internationalBankAccountNumber')) {
                obj['internationalBankAccountNumber'] = ApiClient.convertToType(data['internationalBankAccountNumber'], 'String');
            }
            if (data.hasOwnProperty('isDefaultBank')) {
                obj['isDefaultBank'] = ApiClient.convertToType(data['isDefaultBank'], 'Boolean');
            }
            if (data.hasOwnProperty('lastChq')) {
                obj['lastChq'] = ApiClient.convertToType(data['lastChq'], 'String');
            }
            if (data.hasOwnProperty('nominalAcCode')) {
                obj['nominalAcCode'] = ApiClient.convertToType(data['nominalAcCode'], 'String');
            }
            if (data.hasOwnProperty('oBalance')) {
                obj['oBalance'] = ApiClient.convertToType(data['oBalance'], 'Number');
            }
            if (data.hasOwnProperty('sortCode')) {
                obj['sortCode'] = ApiClient.convertToType(data['sortCode'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BankAccountDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BankAccountDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['acCode'] && !(typeof data['acCode'] === 'string' || data['acCode'] instanceof String)) {
            throw new Error("Expected the field `acCode` to be a primitive type in the JSON string but got " + data['acCode']);
        }
        // ensure the json data is a string
        if (data['accountName'] && !(typeof data['accountName'] === 'string' || data['accountName'] instanceof String)) {
            throw new Error("Expected the field `accountName` to be a primitive type in the JSON string but got " + data['accountName']);
        }
        // ensure the json data is a string
        if (data['accountNumber'] && !(typeof data['accountNumber'] === 'string' || data['accountNumber'] instanceof String)) {
            throw new Error("Expected the field `accountNumber` to be a primitive type in the JSON string but got " + data['accountNumber']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['address'])) {
            throw new Error("Expected the field `address` to be an array in the JSON data but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['businessIdentifierCodes'] && !(typeof data['businessIdentifierCodes'] === 'string' || data['businessIdentifierCodes'] instanceof String)) {
            throw new Error("Expected the field `businessIdentifierCodes` to be a primitive type in the JSON string but got " + data['businessIdentifierCodes']);
        }
        // ensure the json data is a string
        if (data['creditorScheme'] && !(typeof data['creditorScheme'] === 'string' || data['creditorScheme'] instanceof String)) {
            throw new Error("Expected the field `creditorScheme` to be a primitive type in the JSON string but got " + data['creditorScheme']);
        }
        // ensure the json data is a string
        if (data['details'] && !(typeof data['details'] === 'string' || data['details'] instanceof String)) {
            throw new Error("Expected the field `details` to be a primitive type in the JSON string but got " + data['details']);
        }
        // ensure the json data is a string
        if (data['internationalBankAccountNumber'] && !(typeof data['internationalBankAccountNumber'] === 'string' || data['internationalBankAccountNumber'] instanceof String)) {
            throw new Error("Expected the field `internationalBankAccountNumber` to be a primitive type in the JSON string but got " + data['internationalBankAccountNumber']);
        }
        // ensure the json data is a string
        if (data['lastChq'] && !(typeof data['lastChq'] === 'string' || data['lastChq'] instanceof String)) {
            throw new Error("Expected the field `lastChq` to be a primitive type in the JSON string but got " + data['lastChq']);
        }
        // ensure the json data is a string
        if (data['nominalAcCode'] && !(typeof data['nominalAcCode'] === 'string' || data['nominalAcCode'] instanceof String)) {
            throw new Error("Expected the field `nominalAcCode` to be a primitive type in the JSON string but got " + data['nominalAcCode']);
        }
        // ensure the json data is a string
        if (data['sortCode'] && !(typeof data['sortCode'] === 'string' || data['sortCode'] instanceof String)) {
            throw new Error("Expected the field `sortCode` to be a primitive type in the JSON string but got " + data['sortCode']);
        }

        return true;
    }


}



/**
 * @member {String} acCode
 */
BankAccountDto.prototype['acCode'] = undefined;

/**
 * @member {String} accountName
 */
BankAccountDto.prototype['accountName'] = undefined;

/**
 * @member {String} accountNumber
 */
BankAccountDto.prototype['accountNumber'] = undefined;

/**
 * @member {Array.<String>} address
 */
BankAccountDto.prototype['address'] = undefined;

/**
 * @member {Number} bankFeedSource
 */
BankAccountDto.prototype['bankFeedSource'] = undefined;

/**
 * @member {String} businessIdentifierCodes
 */
BankAccountDto.prototype['businessIdentifierCodes'] = undefined;

/**
 * @member {Number} categoryId
 */
BankAccountDto.prototype['categoryId'] = undefined;

/**
 * @member {String} creditorScheme
 */
BankAccountDto.prototype['creditorScheme'] = undefined;

/**
 * @member {String} details
 */
BankAccountDto.prototype['details'] = undefined;

/**
 * @member {Number} id
 */
BankAccountDto.prototype['id'] = undefined;

/**
 * @member {String} internationalBankAccountNumber
 */
BankAccountDto.prototype['internationalBankAccountNumber'] = undefined;

/**
 * @member {Boolean} isDefaultBank
 */
BankAccountDto.prototype['isDefaultBank'] = undefined;

/**
 * @member {String} lastChq
 */
BankAccountDto.prototype['lastChq'] = undefined;

/**
 * @member {String} nominalAcCode
 */
BankAccountDto.prototype['nominalAcCode'] = undefined;

/**
 * @member {Number} oBalance
 */
BankAccountDto.prototype['oBalance'] = undefined;

/**
 * @member {String} sortCode
 */
BankAccountDto.prototype['sortCode'] = undefined;

/**
 * @member {Blob} timestamp
 */
BankAccountDto.prototype['timestamp'] = undefined;






export default BankAccountDto;

