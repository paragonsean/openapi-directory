/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ODataRawQueryOptions model module.
 * @module model/ODataRawQueryOptions
 * @version v1
 */
class ODataRawQueryOptions {
    /**
     * Constructs a new <code>ODataRawQueryOptions</code>.
     * @alias module:model/ODataRawQueryOptions
     */
    constructor() { 
        
        ODataRawQueryOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ODataRawQueryOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ODataRawQueryOptions} obj Optional instance to populate.
     * @return {module:model/ODataRawQueryOptions} The populated <code>ODataRawQueryOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ODataRawQueryOptions();

            if (data.hasOwnProperty('Expand')) {
                obj['Expand'] = ApiClient.convertToType(data['Expand'], 'String');
            }
            if (data.hasOwnProperty('Filter')) {
                obj['Filter'] = ApiClient.convertToType(data['Filter'], 'String');
            }
            if (data.hasOwnProperty('Format')) {
                obj['Format'] = ApiClient.convertToType(data['Format'], 'String');
            }
            if (data.hasOwnProperty('InlineCount')) {
                obj['InlineCount'] = ApiClient.convertToType(data['InlineCount'], 'String');
            }
            if (data.hasOwnProperty('OrderBy')) {
                obj['OrderBy'] = ApiClient.convertToType(data['OrderBy'], 'String');
            }
            if (data.hasOwnProperty('Select')) {
                obj['Select'] = ApiClient.convertToType(data['Select'], 'String');
            }
            if (data.hasOwnProperty('Skip')) {
                obj['Skip'] = ApiClient.convertToType(data['Skip'], 'String');
            }
            if (data.hasOwnProperty('SkipToken')) {
                obj['SkipToken'] = ApiClient.convertToType(data['SkipToken'], 'String');
            }
            if (data.hasOwnProperty('Top')) {
                obj['Top'] = ApiClient.convertToType(data['Top'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ODataRawQueryOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ODataRawQueryOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Expand'] && !(typeof data['Expand'] === 'string' || data['Expand'] instanceof String)) {
            throw new Error("Expected the field `Expand` to be a primitive type in the JSON string but got " + data['Expand']);
        }
        // ensure the json data is a string
        if (data['Filter'] && !(typeof data['Filter'] === 'string' || data['Filter'] instanceof String)) {
            throw new Error("Expected the field `Filter` to be a primitive type in the JSON string but got " + data['Filter']);
        }
        // ensure the json data is a string
        if (data['Format'] && !(typeof data['Format'] === 'string' || data['Format'] instanceof String)) {
            throw new Error("Expected the field `Format` to be a primitive type in the JSON string but got " + data['Format']);
        }
        // ensure the json data is a string
        if (data['InlineCount'] && !(typeof data['InlineCount'] === 'string' || data['InlineCount'] instanceof String)) {
            throw new Error("Expected the field `InlineCount` to be a primitive type in the JSON string but got " + data['InlineCount']);
        }
        // ensure the json data is a string
        if (data['OrderBy'] && !(typeof data['OrderBy'] === 'string' || data['OrderBy'] instanceof String)) {
            throw new Error("Expected the field `OrderBy` to be a primitive type in the JSON string but got " + data['OrderBy']);
        }
        // ensure the json data is a string
        if (data['Select'] && !(typeof data['Select'] === 'string' || data['Select'] instanceof String)) {
            throw new Error("Expected the field `Select` to be a primitive type in the JSON string but got " + data['Select']);
        }
        // ensure the json data is a string
        if (data['Skip'] && !(typeof data['Skip'] === 'string' || data['Skip'] instanceof String)) {
            throw new Error("Expected the field `Skip` to be a primitive type in the JSON string but got " + data['Skip']);
        }
        // ensure the json data is a string
        if (data['SkipToken'] && !(typeof data['SkipToken'] === 'string' || data['SkipToken'] instanceof String)) {
            throw new Error("Expected the field `SkipToken` to be a primitive type in the JSON string but got " + data['SkipToken']);
        }
        // ensure the json data is a string
        if (data['Top'] && !(typeof data['Top'] === 'string' || data['Top'] instanceof String)) {
            throw new Error("Expected the field `Top` to be a primitive type in the JSON string but got " + data['Top']);
        }

        return true;
    }


}



/**
 * @member {String} Expand
 */
ODataRawQueryOptions.prototype['Expand'] = undefined;

/**
 * @member {String} Filter
 */
ODataRawQueryOptions.prototype['Filter'] = undefined;

/**
 * @member {String} Format
 */
ODataRawQueryOptions.prototype['Format'] = undefined;

/**
 * @member {String} InlineCount
 */
ODataRawQueryOptions.prototype['InlineCount'] = undefined;

/**
 * @member {String} OrderBy
 */
ODataRawQueryOptions.prototype['OrderBy'] = undefined;

/**
 * @member {String} Select
 */
ODataRawQueryOptions.prototype['Select'] = undefined;

/**
 * @member {String} Skip
 */
ODataRawQueryOptions.prototype['Skip'] = undefined;

/**
 * @member {String} SkipToken
 */
ODataRawQueryOptions.prototype['SkipToken'] = undefined;

/**
 * @member {String} Top
 */
ODataRawQueryOptions.prototype['Top'] = undefined;






export default ODataRawQueryOptions;

