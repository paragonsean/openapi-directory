/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AcudfValueDto from './AcudfValueDto';
import QuoteProductTransDto from './QuoteProductTransDto';

/**
 * The QuoteDto model module.
 * @module model/QuoteDto
 * @version v1
 */
class QuoteDto {
    /**
     * Constructs a new <code>QuoteDto</code>.
     * @alias module:model/QuoteDto
     */
    constructor() { 
        
        QuoteDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QuoteDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuoteDto} obj Optional instance to populate.
     * @return {module:model/QuoteDto} The populated <code>QuoteDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuoteDto();

            if (data.hasOwnProperty('acCode')) {
                obj['acCode'] = ApiClient.convertToType(data['acCode'], 'String');
            }
            if (data.hasOwnProperty('closedDate')) {
                obj['closedDate'] = ApiClient.convertToType(data['closedDate'], 'Date');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('companyId')) {
                obj['companyId'] = ApiClient.convertToType(data['companyId'], 'Number');
            }
            if (data.hasOwnProperty('customFields')) {
                obj['customFields'] = ApiClient.convertToType(data['customFields'], [AcudfValueDto]);
            }
            if (data.hasOwnProperty('customerOwnerId')) {
                obj['customerOwnerId'] = ApiClient.convertToType(data['customerOwnerId'], 'Number');
            }
            if (data.hasOwnProperty('customerOwnerName')) {
                obj['customerOwnerName'] = ApiClient.convertToType(data['customerOwnerName'], 'String');
            }
            if (data.hasOwnProperty('ddNumber')) {
                obj['ddNumber'] = ApiClient.convertToType(data['ddNumber'], 'String');
            }
            if (data.hasOwnProperty('deliveryList')) {
                obj['deliveryList'] = ApiClient.convertToType(data['deliveryList'], 'String');
            }
            if (data.hasOwnProperty('deliveryTo')) {
                obj['deliveryTo'] = ApiClient.convertToType(data['deliveryTo'], ['String']);
            }
            if (data.hasOwnProperty('entryDate')) {
                obj['entryDate'] = ApiClient.convertToType(data['entryDate'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('layoutType')) {
                obj['layoutType'] = ApiClient.convertToType(data['layoutType'], 'Number');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('poNumber')) {
                obj['poNumber'] = ApiClient.convertToType(data['poNumber'], 'String');
            }
            if (data.hasOwnProperty('procDate')) {
                obj['procDate'] = ApiClient.convertToType(data['procDate'], 'Date');
            }
            if (data.hasOwnProperty('productTrans')) {
                obj['productTrans'] = ApiClient.convertToType(data['productTrans'], [QuoteProductTransDto]);
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('saleInvoiceId')) {
                obj['saleInvoiceId'] = ApiClient.convertToType(data['saleInvoiceId'], 'Number');
            }
            if (data.hasOwnProperty('saleRepCode')) {
                obj['saleRepCode'] = ApiClient.convertToType(data['saleRepCode'], 'String');
            }
            if (data.hasOwnProperty('saleRepId')) {
                obj['saleRepId'] = ApiClient.convertToType(data['saleRepId'], 'Number');
            }
            if (data.hasOwnProperty('timeStamp')) {
                obj['timeStamp'] = ApiClient.convertToType(data['timeStamp'], 'Blob');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('totalNet')) {
                obj['totalNet'] = ApiClient.convertToType(data['totalNet'], 'Number');
            }
            if (data.hasOwnProperty('totalVat')) {
                obj['totalVat'] = ApiClient.convertToType(data['totalVat'], 'Number');
            }
            if (data.hasOwnProperty('vatTypeId')) {
                obj['vatTypeId'] = ApiClient.convertToType(data['vatTypeId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuoteDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuoteDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['acCode'] && !(typeof data['acCode'] === 'string' || data['acCode'] instanceof String)) {
            throw new Error("Expected the field `acCode` to be a primitive type in the JSON string but got " + data['acCode']);
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        if (data['customFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customFields'])) {
                throw new Error("Expected the field `customFields` to be an array in the JSON data but got " + data['customFields']);
            }
            // validate the optional field `customFields` (array)
            for (const item of data['customFields']) {
                AcudfValueDto.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['customerOwnerName'] && !(typeof data['customerOwnerName'] === 'string' || data['customerOwnerName'] instanceof String)) {
            throw new Error("Expected the field `customerOwnerName` to be a primitive type in the JSON string but got " + data['customerOwnerName']);
        }
        // ensure the json data is a string
        if (data['ddNumber'] && !(typeof data['ddNumber'] === 'string' || data['ddNumber'] instanceof String)) {
            throw new Error("Expected the field `ddNumber` to be a primitive type in the JSON string but got " + data['ddNumber']);
        }
        // ensure the json data is a string
        if (data['deliveryList'] && !(typeof data['deliveryList'] === 'string' || data['deliveryList'] instanceof String)) {
            throw new Error("Expected the field `deliveryList` to be a primitive type in the JSON string but got " + data['deliveryList']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['deliveryTo'])) {
            throw new Error("Expected the field `deliveryTo` to be an array in the JSON data but got " + data['deliveryTo']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['poNumber'] && !(typeof data['poNumber'] === 'string' || data['poNumber'] instanceof String)) {
            throw new Error("Expected the field `poNumber` to be a primitive type in the JSON string but got " + data['poNumber']);
        }
        if (data['productTrans']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['productTrans'])) {
                throw new Error("Expected the field `productTrans` to be an array in the JSON data but got " + data['productTrans']);
            }
            // validate the optional field `productTrans` (array)
            for (const item of data['productTrans']) {
                QuoteProductTransDto.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['saleRepCode'] && !(typeof data['saleRepCode'] === 'string' || data['saleRepCode'] instanceof String)) {
            throw new Error("Expected the field `saleRepCode` to be a primitive type in the JSON string but got " + data['saleRepCode']);
        }

        return true;
    }


}



/**
 * @member {String} acCode
 */
QuoteDto.prototype['acCode'] = undefined;

/**
 * @member {Date} closedDate
 */
QuoteDto.prototype['closedDate'] = undefined;

/**
 * @member {String} comments
 */
QuoteDto.prototype['comments'] = undefined;

/**
 * @member {Number} companyId
 */
QuoteDto.prototype['companyId'] = undefined;

/**
 * @member {Array.<module:model/AcudfValueDto>} customFields
 */
QuoteDto.prototype['customFields'] = undefined;

/**
 * @member {Number} customerOwnerId
 */
QuoteDto.prototype['customerOwnerId'] = undefined;

/**
 * @member {String} customerOwnerName
 */
QuoteDto.prototype['customerOwnerName'] = undefined;

/**
 * @member {String} ddNumber
 */
QuoteDto.prototype['ddNumber'] = undefined;

/**
 * @member {String} deliveryList
 */
QuoteDto.prototype['deliveryList'] = undefined;

/**
 * @member {Array.<String>} deliveryTo
 */
QuoteDto.prototype['deliveryTo'] = undefined;

/**
 * @member {Date} entryDate
 */
QuoteDto.prototype['entryDate'] = undefined;

/**
 * @member {Number} id
 */
QuoteDto.prototype['id'] = undefined;

/**
 * @member {Number} layoutType
 */
QuoteDto.prototype['layoutType'] = undefined;

/**
 * @member {String} note
 */
QuoteDto.prototype['note'] = undefined;

/**
 * @member {String} poNumber
 */
QuoteDto.prototype['poNumber'] = undefined;

/**
 * @member {Date} procDate
 */
QuoteDto.prototype['procDate'] = undefined;

/**
 * @member {Array.<module:model/QuoteProductTransDto>} productTrans
 */
QuoteDto.prototype['productTrans'] = undefined;

/**
 * @member {String} reference
 */
QuoteDto.prototype['reference'] = undefined;

/**
 * @member {Number} saleInvoiceId
 */
QuoteDto.prototype['saleInvoiceId'] = undefined;

/**
 * @member {String} saleRepCode
 */
QuoteDto.prototype['saleRepCode'] = undefined;

/**
 * @member {Number} saleRepId
 */
QuoteDto.prototype['saleRepId'] = undefined;

/**
 * @member {Blob} timeStamp
 */
QuoteDto.prototype['timeStamp'] = undefined;

/**
 * @member {Number} total
 */
QuoteDto.prototype['total'] = undefined;

/**
 * @member {Number} totalNet
 */
QuoteDto.prototype['totalNet'] = undefined;

/**
 * @member {Number} totalVat
 */
QuoteDto.prototype['totalVat'] = undefined;

/**
 * @member {Number} vatTypeId
 */
QuoteDto.prototype['vatTypeId'] = undefined;






export default QuoteDto;

