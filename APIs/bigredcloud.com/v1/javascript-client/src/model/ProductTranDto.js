/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AcEntryDto from './AcEntryDto';

/**
 * The ProductTranDto model module.
 * @module model/ProductTranDto
 * @version v1
 */
class ProductTranDto {
    /**
     * Constructs a new <code>ProductTranDto</code>.
     * @alias module:model/ProductTranDto
     * @param amountNet {Number} 
     */
    constructor(amountNet) { 
        
        ProductTranDto.initialize(this, amountNet);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amountNet) { 
        obj['amountNet'] = amountNet;
    }

    /**
     * Constructs a <code>ProductTranDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductTranDto} obj Optional instance to populate.
     * @return {module:model/ProductTranDto} The populated <code>ProductTranDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductTranDto();

            if (data.hasOwnProperty('acEntries')) {
                obj['acEntries'] = ApiClient.convertToType(data['acEntries'], [AcEntryDto]);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('amountNet')) {
                obj['amountNet'] = ApiClient.convertToType(data['amountNet'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('percentage')) {
                obj['percentage'] = ApiClient.convertToType(data['percentage'], 'Number');
            }
            if (data.hasOwnProperty('productCode')) {
                obj['productCode'] = ApiClient.convertToType(data['productCode'], 'String');
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'Number');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('tranNotes')) {
                obj['tranNotes'] = ApiClient.convertToType(data['tranNotes'], ['String']);
            }
            if (data.hasOwnProperty('unitPrice')) {
                obj['unitPrice'] = ApiClient.convertToType(data['unitPrice'], 'Number');
            }
            if (data.hasOwnProperty('vat')) {
                obj['vat'] = ApiClient.convertToType(data['vat'], 'Number');
            }
            if (data.hasOwnProperty('vatAnalysisTypeId')) {
                obj['vatAnalysisTypeId'] = ApiClient.convertToType(data['vatAnalysisTypeId'], 'Number');
            }
            if (data.hasOwnProperty('vatRateId')) {
                obj['vatRateId'] = ApiClient.convertToType(data['vatRateId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductTranDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductTranDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProductTranDto.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['acEntries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['acEntries'])) {
                throw new Error("Expected the field `acEntries` to be an array in the JSON data but got " + data['acEntries']);
            }
            // validate the optional field `acEntries` (array)
            for (const item of data['acEntries']) {
                AcEntryDto.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['productCode'] && !(typeof data['productCode'] === 'string' || data['productCode'] instanceof String)) {
            throw new Error("Expected the field `productCode` to be a primitive type in the JSON string but got " + data['productCode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tranNotes'])) {
            throw new Error("Expected the field `tranNotes` to be an array in the JSON data but got " + data['tranNotes']);
        }

        return true;
    }


}

ProductTranDto.RequiredProperties = ["amountNet"];

/**
 * @member {Array.<module:model/AcEntryDto>} acEntries
 */
ProductTranDto.prototype['acEntries'] = undefined;

/**
 * @member {Number} amount
 */
ProductTranDto.prototype['amount'] = undefined;

/**
 * @member {Number} amountNet
 */
ProductTranDto.prototype['amountNet'] = undefined;

/**
 * @member {Number} id
 */
ProductTranDto.prototype['id'] = undefined;

/**
 * @member {Number} percentage
 */
ProductTranDto.prototype['percentage'] = undefined;

/**
 * @member {String} productCode
 */
ProductTranDto.prototype['productCode'] = undefined;

/**
 * @member {Number} productId
 */
ProductTranDto.prototype['productId'] = undefined;

/**
 * @member {Number} quantity
 */
ProductTranDto.prototype['quantity'] = undefined;

/**
 * @member {Array.<String>} tranNotes
 */
ProductTranDto.prototype['tranNotes'] = undefined;

/**
 * @member {Number} unitPrice
 */
ProductTranDto.prototype['unitPrice'] = undefined;

/**
 * @member {Number} vat
 */
ProductTranDto.prototype['vat'] = undefined;

/**
 * @member {Number} vatAnalysisTypeId
 */
ProductTranDto.prototype['vatAnalysisTypeId'] = undefined;

/**
 * @member {Number} vatRateId
 */
ProductTranDto.prototype['vatRateId'] = undefined;






export default ProductTranDto;

