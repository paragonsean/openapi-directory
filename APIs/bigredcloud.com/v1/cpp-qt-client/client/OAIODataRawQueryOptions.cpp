/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIODataRawQueryOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIODataRawQueryOptions::OAIODataRawQueryOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIODataRawQueryOptions::OAIODataRawQueryOptions() {
    this->initializeModel();
}

OAIODataRawQueryOptions::~OAIODataRawQueryOptions() {}

void OAIODataRawQueryOptions::initializeModel() {

    m_expand_isSet = false;
    m_expand_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_inline_count_isSet = false;
    m_inline_count_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;

    m_select_isSet = false;
    m_select_isValid = false;

    m_skip_isSet = false;
    m_skip_isValid = false;

    m_skip_token_isSet = false;
    m_skip_token_isValid = false;

    m_top_isSet = false;
    m_top_isValid = false;
}

void OAIODataRawQueryOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIODataRawQueryOptions::fromJsonObject(QJsonObject json) {

    m_expand_isValid = ::OpenAPI::fromJsonValue(m_expand, json[QString("Expand")]);
    m_expand_isSet = !json[QString("Expand")].isNull() && m_expand_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;

    m_inline_count_isValid = ::OpenAPI::fromJsonValue(m_inline_count, json[QString("InlineCount")]);
    m_inline_count_isSet = !json[QString("InlineCount")].isNull() && m_inline_count_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("OrderBy")]);
    m_order_by_isSet = !json[QString("OrderBy")].isNull() && m_order_by_isValid;

    m_select_isValid = ::OpenAPI::fromJsonValue(m_select, json[QString("Select")]);
    m_select_isSet = !json[QString("Select")].isNull() && m_select_isValid;

    m_skip_isValid = ::OpenAPI::fromJsonValue(m_skip, json[QString("Skip")]);
    m_skip_isSet = !json[QString("Skip")].isNull() && m_skip_isValid;

    m_skip_token_isValid = ::OpenAPI::fromJsonValue(m_skip_token, json[QString("SkipToken")]);
    m_skip_token_isSet = !json[QString("SkipToken")].isNull() && m_skip_token_isValid;

    m_top_isValid = ::OpenAPI::fromJsonValue(m_top, json[QString("Top")]);
    m_top_isSet = !json[QString("Top")].isNull() && m_top_isValid;
}

QString OAIODataRawQueryOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIODataRawQueryOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_expand_isSet) {
        obj.insert(QString("Expand"), ::OpenAPI::toJsonValue(m_expand));
    }
    if (m_filter_isSet) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_format_isSet) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_inline_count_isSet) {
        obj.insert(QString("InlineCount"), ::OpenAPI::toJsonValue(m_inline_count));
    }
    if (m_order_by_isSet) {
        obj.insert(QString("OrderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    if (m_select_isSet) {
        obj.insert(QString("Select"), ::OpenAPI::toJsonValue(m_select));
    }
    if (m_skip_isSet) {
        obj.insert(QString("Skip"), ::OpenAPI::toJsonValue(m_skip));
    }
    if (m_skip_token_isSet) {
        obj.insert(QString("SkipToken"), ::OpenAPI::toJsonValue(m_skip_token));
    }
    if (m_top_isSet) {
        obj.insert(QString("Top"), ::OpenAPI::toJsonValue(m_top));
    }
    return obj;
}

QString OAIODataRawQueryOptions::getExpand() const {
    return m_expand;
}
void OAIODataRawQueryOptions::setExpand(const QString &expand) {
    m_expand = expand;
    m_expand_isSet = true;
}

bool OAIODataRawQueryOptions::is_expand_Set() const{
    return m_expand_isSet;
}

bool OAIODataRawQueryOptions::is_expand_Valid() const{
    return m_expand_isValid;
}

QString OAIODataRawQueryOptions::getFilter() const {
    return m_filter;
}
void OAIODataRawQueryOptions::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIODataRawQueryOptions::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIODataRawQueryOptions::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIODataRawQueryOptions::getFormat() const {
    return m_format;
}
void OAIODataRawQueryOptions::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIODataRawQueryOptions::is_format_Set() const{
    return m_format_isSet;
}

bool OAIODataRawQueryOptions::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIODataRawQueryOptions::getInlineCount() const {
    return m_inline_count;
}
void OAIODataRawQueryOptions::setInlineCount(const QString &inline_count) {
    m_inline_count = inline_count;
    m_inline_count_isSet = true;
}

bool OAIODataRawQueryOptions::is_inline_count_Set() const{
    return m_inline_count_isSet;
}

bool OAIODataRawQueryOptions::is_inline_count_Valid() const{
    return m_inline_count_isValid;
}

QString OAIODataRawQueryOptions::getOrderBy() const {
    return m_order_by;
}
void OAIODataRawQueryOptions::setOrderBy(const QString &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAIODataRawQueryOptions::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAIODataRawQueryOptions::is_order_by_Valid() const{
    return m_order_by_isValid;
}

QString OAIODataRawQueryOptions::getSelect() const {
    return m_select;
}
void OAIODataRawQueryOptions::setSelect(const QString &select) {
    m_select = select;
    m_select_isSet = true;
}

bool OAIODataRawQueryOptions::is_select_Set() const{
    return m_select_isSet;
}

bool OAIODataRawQueryOptions::is_select_Valid() const{
    return m_select_isValid;
}

QString OAIODataRawQueryOptions::getSkip() const {
    return m_skip;
}
void OAIODataRawQueryOptions::setSkip(const QString &skip) {
    m_skip = skip;
    m_skip_isSet = true;
}

bool OAIODataRawQueryOptions::is_skip_Set() const{
    return m_skip_isSet;
}

bool OAIODataRawQueryOptions::is_skip_Valid() const{
    return m_skip_isValid;
}

QString OAIODataRawQueryOptions::getSkipToken() const {
    return m_skip_token;
}
void OAIODataRawQueryOptions::setSkipToken(const QString &skip_token) {
    m_skip_token = skip_token;
    m_skip_token_isSet = true;
}

bool OAIODataRawQueryOptions::is_skip_token_Set() const{
    return m_skip_token_isSet;
}

bool OAIODataRawQueryOptions::is_skip_token_Valid() const{
    return m_skip_token_isValid;
}

QString OAIODataRawQueryOptions::getTop() const {
    return m_top;
}
void OAIODataRawQueryOptions::setTop(const QString &top) {
    m_top = top;
    m_top_isSet = true;
}

bool OAIODataRawQueryOptions::is_top_Set() const{
    return m_top_isSet;
}

bool OAIODataRawQueryOptions::is_top_Valid() const{
    return m_top_isValid;
}

bool OAIODataRawQueryOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIODataRawQueryOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
