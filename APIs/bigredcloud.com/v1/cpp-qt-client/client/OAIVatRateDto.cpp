/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVatRateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVatRateDto::OAIVatRateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVatRateDto::OAIVatRateDto() {
    this->initializeModel();
}

OAIVatRateDto::~OAIVatRateDto() {}

void OAIVatRateDto::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_order_index_isSet = false;
    m_order_index_isValid = false;

    m_percentage_isSet = false;
    m_percentage_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_vat_category_id_isSet = false;
    m_vat_category_id_isValid = false;
}

void OAIVatRateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVatRateDto::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_order_index_isValid = ::OpenAPI::fromJsonValue(m_order_index, json[QString("orderIndex")]);
    m_order_index_isSet = !json[QString("orderIndex")].isNull() && m_order_index_isValid;

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("percentage")]);
    m_percentage_isSet = !json[QString("percentage")].isNull() && m_percentage_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_vat_category_id_isValid = ::OpenAPI::fromJsonValue(m_vat_category_id, json[QString("vatCategoryId")]);
    m_vat_category_id_isSet = !json[QString("vatCategoryId")].isNull() && m_vat_category_id_isValid;
}

QString OAIVatRateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVatRateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_order_index_isSet) {
        obj.insert(QString("orderIndex"), ::OpenAPI::toJsonValue(m_order_index));
    }
    if (m_percentage_isSet) {
        obj.insert(QString("percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_vat_category_id_isSet) {
        obj.insert(QString("vatCategoryId"), ::OpenAPI::toJsonValue(m_vat_category_id));
    }
    return obj;
}

qint64 OAIVatRateDto::getId() const {
    return m_id;
}
void OAIVatRateDto::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVatRateDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVatRateDto::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIVatRateDto::isIsActive() const {
    return m_is_active;
}
void OAIVatRateDto::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIVatRateDto::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIVatRateDto::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIVatRateDto::isIsDefault() const {
    return m_is_default;
}
void OAIVatRateDto::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIVatRateDto::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIVatRateDto::is_is_default_Valid() const{
    return m_is_default_isValid;
}

qint32 OAIVatRateDto::getOrderIndex() const {
    return m_order_index;
}
void OAIVatRateDto::setOrderIndex(const qint32 &order_index) {
    m_order_index = order_index;
    m_order_index_isSet = true;
}

bool OAIVatRateDto::is_order_index_Set() const{
    return m_order_index_isSet;
}

bool OAIVatRateDto::is_order_index_Valid() const{
    return m_order_index_isValid;
}

double OAIVatRateDto::getPercentage() const {
    return m_percentage;
}
void OAIVatRateDto::setPercentage(const double &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAIVatRateDto::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAIVatRateDto::is_percentage_Valid() const{
    return m_percentage_isValid;
}

QByteArray OAIVatRateDto::getTimestamp() const {
    return m_timestamp;
}
void OAIVatRateDto::setTimestamp(const QByteArray &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIVatRateDto::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIVatRateDto::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

qint64 OAIVatRateDto::getVatCategoryId() const {
    return m_vat_category_id;
}
void OAIVatRateDto::setVatCategoryId(const qint64 &vat_category_id) {
    m_vat_category_id = vat_category_id;
    m_vat_category_id_isSet = true;
}

bool OAIVatRateDto::is_vat_category_id_Set() const{
    return m_vat_category_id_isSet;
}

bool OAIVatRateDto::is_vat_category_id_Valid() const{
    return m_vat_category_id_isValid;
}

bool OAIVatRateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVatRateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
