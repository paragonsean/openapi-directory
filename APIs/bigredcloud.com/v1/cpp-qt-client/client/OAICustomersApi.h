/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomersApi_H
#define OAI_OAICustomersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountTranDto.h"
#include "OAIBatchItem_CustomerDto_.h"
#include "OAICustomerDto.h"
#include "OAIObject.h"
#include "OAIOwnerOpeningBalanceDto.h"
#include "OAIOwnerOpeningBalanceInPeriodsDto.h"
#include "OAIPageResult_CustomerQueryDto_.h"
#include "OAIQuoteDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomersApi : public QObject {
    Q_OBJECT

public:
    OAICustomersApi(const int timeOut = 0);
    ~OAICustomersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  timestamp QString [required]
    */
    virtual void customersDelete(const qint64 &id, const QString &timestamp);


    virtual void customersGet();

    /**
    * @param[in]  item_id qint64 [required]
    */
    virtual void customersGetAccountTrans(const qint64 &item_id);

    /**
    * @param[in]  item_id qint64 [required]
    */
    virtual void customersGetOpeningBalance(const qint64 &item_id);

    /**
    * @param[in]  item_id qint64 [required]
    */
    virtual void customersGetOpeningBalanceList(const qint64 &item_id);

    /**
    * @param[in]  item_id qint64 [required]
    */
    virtual void customersGetQuotes(const qint64 &item_id);

    /**
    * @param[in]  oai_customer_dto OAICustomerDto [required]
    */
    virtual void customersPost(const OAICustomerDto &oai_customer_dto);

    /**
    * @param[in]  oai_batch_item_customer_dto_ QList<OAIBatchItem_CustomerDto_> [required]
    */
    virtual void customersProcessBatch(const QList<OAIBatchItem_CustomerDto_> &oai_batch_item_customer_dto_);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_customer_dto OAICustomerDto [required]
    */
    virtual void customersPut(const qint64 &id, const OAICustomerDto &oai_customer_dto);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  need_balance bool [optional]
    */
    virtual void v1CustomersIdGet(const qint64 &id, const ::OpenAPI::OptionalParam<bool> &need_balance = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void customersDeleteCallback(OAIHttpRequestWorker *worker);
    void customersGetCallback(OAIHttpRequestWorker *worker);
    void customersGetAccountTransCallback(OAIHttpRequestWorker *worker);
    void customersGetOpeningBalanceCallback(OAIHttpRequestWorker *worker);
    void customersGetOpeningBalanceListCallback(OAIHttpRequestWorker *worker);
    void customersGetQuotesCallback(OAIHttpRequestWorker *worker);
    void customersPostCallback(OAIHttpRequestWorker *worker);
    void customersProcessBatchCallback(OAIHttpRequestWorker *worker);
    void customersPutCallback(OAIHttpRequestWorker *worker);
    void v1CustomersIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void customersDeleteSignal(OAIObject summary);
    void customersGetSignal(OAIPageResult_CustomerQueryDto_ summary);
    void customersGetAccountTransSignal(QList<OAIAccountTranDto> summary);
    void customersGetOpeningBalanceSignal(OAIOwnerOpeningBalanceInPeriodsDto summary);
    void customersGetOpeningBalanceListSignal(QList<OAIOwnerOpeningBalanceDto> summary);
    void customersGetQuotesSignal(QList<OAIQuoteDto> summary);
    void customersPostSignal(OAIObject summary);
    void customersProcessBatchSignal(OAIObject summary);
    void customersPutSignal(OAIObject summary);
    void v1CustomersIdGetSignal(OAICustomerDto summary);


    void customersDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void customersGetSignalFull(OAIHttpRequestWorker *worker, OAIPageResult_CustomerQueryDto_ summary);
    void customersGetAccountTransSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccountTranDto> summary);
    void customersGetOpeningBalanceSignalFull(OAIHttpRequestWorker *worker, OAIOwnerOpeningBalanceInPeriodsDto summary);
    void customersGetOpeningBalanceListSignalFull(OAIHttpRequestWorker *worker, QList<OAIOwnerOpeningBalanceDto> summary);
    void customersGetQuotesSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuoteDto> summary);
    void customersPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void customersProcessBatchSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void customersPutSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void v1CustomersIdGetSignalFull(OAIHttpRequestWorker *worker, OAICustomerDto summary);

    Q_DECL_DEPRECATED_X("Use customersDeleteSignalError() instead")
    void customersDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customersDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersGetSignalError() instead")
    void customersGetSignalE(OAIPageResult_CustomerQueryDto_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customersGetSignalError(OAIPageResult_CustomerQueryDto_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersGetAccountTransSignalError() instead")
    void customersGetAccountTransSignalE(QList<OAIAccountTranDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customersGetAccountTransSignalError(QList<OAIAccountTranDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersGetOpeningBalanceSignalError() instead")
    void customersGetOpeningBalanceSignalE(OAIOwnerOpeningBalanceInPeriodsDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customersGetOpeningBalanceSignalError(OAIOwnerOpeningBalanceInPeriodsDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersGetOpeningBalanceListSignalError() instead")
    void customersGetOpeningBalanceListSignalE(QList<OAIOwnerOpeningBalanceDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customersGetOpeningBalanceListSignalError(QList<OAIOwnerOpeningBalanceDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersGetQuotesSignalError() instead")
    void customersGetQuotesSignalE(QList<OAIQuoteDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customersGetQuotesSignalError(QList<OAIQuoteDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersPostSignalError() instead")
    void customersPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customersPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersProcessBatchSignalError() instead")
    void customersProcessBatchSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customersProcessBatchSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersPutSignalError() instead")
    void customersPutSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customersPutSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1CustomersIdGetSignalError() instead")
    void v1CustomersIdGetSignalE(OAICustomerDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1CustomersIdGetSignalError(OAICustomerDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use customersDeleteSignalErrorFull() instead")
    void customersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersGetSignalErrorFull() instead")
    void customersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersGetAccountTransSignalErrorFull() instead")
    void customersGetAccountTransSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customersGetAccountTransSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersGetOpeningBalanceSignalErrorFull() instead")
    void customersGetOpeningBalanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customersGetOpeningBalanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersGetOpeningBalanceListSignalErrorFull() instead")
    void customersGetOpeningBalanceListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customersGetOpeningBalanceListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersGetQuotesSignalErrorFull() instead")
    void customersGetQuotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customersGetQuotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersPostSignalErrorFull() instead")
    void customersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersProcessBatchSignalErrorFull() instead")
    void customersProcessBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customersProcessBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersPutSignalErrorFull() instead")
    void customersPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customersPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1CustomersIdGetSignalErrorFull() instead")
    void v1CustomersIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1CustomersIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
