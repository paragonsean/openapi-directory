/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductDto::OAIProductDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductDto::OAIProductDto() {
    this->initializeModel();
}

OAIProductDto::~OAIProductDto() {}

void OAIProductDto::initializeModel() {

    m_details_isSet = false;
    m_details_isValid = false;

    m_gross_unit_price_isSet = false;
    m_gross_unit_price_isValid = false;

    m_has_default_vat_rate_isSet = false;
    m_has_default_vat_rate_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_product_type_id_isSet = false;
    m_product_type_id_isValid = false;

    m_stock_code_isSet = false;
    m_stock_code_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;

    m_vat_analysis_type_id_isSet = false;
    m_vat_analysis_type_id_isValid = false;

    m_vat_rate_id_isSet = false;
    m_vat_rate_id_isValid = false;
}

void OAIProductDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductDto::fromJsonObject(QJsonObject json) {

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_gross_unit_price_isValid = ::OpenAPI::fromJsonValue(m_gross_unit_price, json[QString("grossUnitPrice")]);
    m_gross_unit_price_isSet = !json[QString("grossUnitPrice")].isNull() && m_gross_unit_price_isValid;

    m_has_default_vat_rate_isValid = ::OpenAPI::fromJsonValue(m_has_default_vat_rate, json[QString("hasDefaultVatRate")]);
    m_has_default_vat_rate_isSet = !json[QString("hasDefaultVatRate")].isNull() && m_has_default_vat_rate_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_product_type_id_isValid = ::OpenAPI::fromJsonValue(m_product_type_id, json[QString("productTypeId")]);
    m_product_type_id_isSet = !json[QString("productTypeId")].isNull() && m_product_type_id_isValid;

    m_stock_code_isValid = ::OpenAPI::fromJsonValue(m_stock_code, json[QString("stockCode")]);
    m_stock_code_isSet = !json[QString("stockCode")].isNull() && m_stock_code_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;

    m_vat_analysis_type_id_isValid = ::OpenAPI::fromJsonValue(m_vat_analysis_type_id, json[QString("vatAnalysisTypeId")]);
    m_vat_analysis_type_id_isSet = !json[QString("vatAnalysisTypeId")].isNull() && m_vat_analysis_type_id_isValid;

    m_vat_rate_id_isValid = ::OpenAPI::fromJsonValue(m_vat_rate_id, json[QString("vatRateId")]);
    m_vat_rate_id_isSet = !json[QString("vatRateId")].isNull() && m_vat_rate_id_isValid;
}

QString OAIProductDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductDto::asJsonObject() const {
    QJsonObject obj;
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_gross_unit_price_isSet) {
        obj.insert(QString("grossUnitPrice"), ::OpenAPI::toJsonValue(m_gross_unit_price));
    }
    if (m_has_default_vat_rate_isSet) {
        obj.insert(QString("hasDefaultVatRate"), ::OpenAPI::toJsonValue(m_has_default_vat_rate));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_product_type_id_isSet) {
        obj.insert(QString("productTypeId"), ::OpenAPI::toJsonValue(m_product_type_id));
    }
    if (m_stock_code_isSet) {
        obj.insert(QString("stockCode"), ::OpenAPI::toJsonValue(m_stock_code));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_unit_price_isSet) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    if (m_vat_analysis_type_id_isSet) {
        obj.insert(QString("vatAnalysisTypeId"), ::OpenAPI::toJsonValue(m_vat_analysis_type_id));
    }
    if (m_vat_rate_id_isSet) {
        obj.insert(QString("vatRateId"), ::OpenAPI::toJsonValue(m_vat_rate_id));
    }
    return obj;
}

QList<QString> OAIProductDto::getDetails() const {
    return m_details;
}
void OAIProductDto::setDetails(const QList<QString> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIProductDto::is_details_Set() const{
    return m_details_isSet;
}

bool OAIProductDto::is_details_Valid() const{
    return m_details_isValid;
}

bool OAIProductDto::isGrossUnitPrice() const {
    return m_gross_unit_price;
}
void OAIProductDto::setGrossUnitPrice(const bool &gross_unit_price) {
    m_gross_unit_price = gross_unit_price;
    m_gross_unit_price_isSet = true;
}

bool OAIProductDto::is_gross_unit_price_Set() const{
    return m_gross_unit_price_isSet;
}

bool OAIProductDto::is_gross_unit_price_Valid() const{
    return m_gross_unit_price_isValid;
}

bool OAIProductDto::isHasDefaultVatRate() const {
    return m_has_default_vat_rate;
}
void OAIProductDto::setHasDefaultVatRate(const bool &has_default_vat_rate) {
    m_has_default_vat_rate = has_default_vat_rate;
    m_has_default_vat_rate_isSet = true;
}

bool OAIProductDto::is_has_default_vat_rate_Set() const{
    return m_has_default_vat_rate_isSet;
}

bool OAIProductDto::is_has_default_vat_rate_Valid() const{
    return m_has_default_vat_rate_isValid;
}

qint64 OAIProductDto::getId() const {
    return m_id;
}
void OAIProductDto::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProductDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProductDto::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAIProductDto::getProductTypeId() const {
    return m_product_type_id;
}
void OAIProductDto::setProductTypeId(const qint64 &product_type_id) {
    m_product_type_id = product_type_id;
    m_product_type_id_isSet = true;
}

bool OAIProductDto::is_product_type_id_Set() const{
    return m_product_type_id_isSet;
}

bool OAIProductDto::is_product_type_id_Valid() const{
    return m_product_type_id_isValid;
}

QString OAIProductDto::getStockCode() const {
    return m_stock_code;
}
void OAIProductDto::setStockCode(const QString &stock_code) {
    m_stock_code = stock_code;
    m_stock_code_isSet = true;
}

bool OAIProductDto::is_stock_code_Set() const{
    return m_stock_code_isSet;
}

bool OAIProductDto::is_stock_code_Valid() const{
    return m_stock_code_isValid;
}

QByteArray OAIProductDto::getTimestamp() const {
    return m_timestamp;
}
void OAIProductDto::setTimestamp(const QByteArray &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIProductDto::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIProductDto::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

double OAIProductDto::getUnitPrice() const {
    return m_unit_price;
}
void OAIProductDto::setUnitPrice(const double &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIProductDto::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIProductDto::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

qint64 OAIProductDto::getVatAnalysisTypeId() const {
    return m_vat_analysis_type_id;
}
void OAIProductDto::setVatAnalysisTypeId(const qint64 &vat_analysis_type_id) {
    m_vat_analysis_type_id = vat_analysis_type_id;
    m_vat_analysis_type_id_isSet = true;
}

bool OAIProductDto::is_vat_analysis_type_id_Set() const{
    return m_vat_analysis_type_id_isSet;
}

bool OAIProductDto::is_vat_analysis_type_id_Valid() const{
    return m_vat_analysis_type_id_isValid;
}

qint64 OAIProductDto::getVatRateId() const {
    return m_vat_rate_id;
}
void OAIProductDto::setVatRateId(const qint64 &vat_rate_id) {
    m_vat_rate_id = vat_rate_id;
    m_vat_rate_id_isSet = true;
}

bool OAIProductDto::is_vat_rate_id_Set() const{
    return m_vat_rate_id_isSet;
}

bool OAIProductDto::is_vat_rate_id_Valid() const{
    return m_vat_rate_id_isValid;
}

bool OAIProductDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gross_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_default_vat_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_analysis_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_rate_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
