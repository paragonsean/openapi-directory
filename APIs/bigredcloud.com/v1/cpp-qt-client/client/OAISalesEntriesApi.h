/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISalesEntriesApi_H
#define OAI_OAISalesEntriesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatchItem_SalesEntryDto_.h"
#include "OAIObject.h"
#include "OAIPageResult_SalesEntryQueryDto_.h"
#include "OAISalesEntryDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISalesEntriesApi : public QObject {
    Q_OBJECT

public:
    OAISalesEntriesApi(const int timeOut = 0);
    ~OAISalesEntriesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  timestamp QString [required]
    */
    virtual void salesEntriesDelete(const qint64 &id, const QString &timestamp);


    virtual void salesEntriesGet();

    /**
    * @param[in]  oai_sales_entry_dto OAISalesEntryDto [required]
    */
    virtual void salesEntriesPost(const OAISalesEntryDto &oai_sales_entry_dto);

    /**
    * @param[in]  oai_batch_item_sales_entry_dto_ QList<OAIBatchItem_SalesEntryDto_> [required]
    */
    virtual void salesEntriesProcessBatch(const QList<OAIBatchItem_SalesEntryDto_> &oai_batch_item_sales_entry_dto_);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_sales_entry_dto OAISalesEntryDto [required]
    */
    virtual void salesEntriesPut(const qint64 &id, const OAISalesEntryDto &oai_sales_entry_dto);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void v1SalesEntriesIdGet(const qint64 &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void salesEntriesDeleteCallback(OAIHttpRequestWorker *worker);
    void salesEntriesGetCallback(OAIHttpRequestWorker *worker);
    void salesEntriesPostCallback(OAIHttpRequestWorker *worker);
    void salesEntriesProcessBatchCallback(OAIHttpRequestWorker *worker);
    void salesEntriesPutCallback(OAIHttpRequestWorker *worker);
    void v1SalesEntriesIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void salesEntriesDeleteSignal(OAIObject summary);
    void salesEntriesGetSignal(OAIPageResult_SalesEntryQueryDto_ summary);
    void salesEntriesPostSignal(OAIObject summary);
    void salesEntriesProcessBatchSignal(OAIObject summary);
    void salesEntriesPutSignal(OAIObject summary);
    void v1SalesEntriesIdGetSignal(OAISalesEntryDto summary);


    void salesEntriesDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesEntriesGetSignalFull(OAIHttpRequestWorker *worker, OAIPageResult_SalesEntryQueryDto_ summary);
    void salesEntriesPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesEntriesProcessBatchSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesEntriesPutSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void v1SalesEntriesIdGetSignalFull(OAIHttpRequestWorker *worker, OAISalesEntryDto summary);

    Q_DECL_DEPRECATED_X("Use salesEntriesDeleteSignalError() instead")
    void salesEntriesDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesEntriesDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesEntriesGetSignalError() instead")
    void salesEntriesGetSignalE(OAIPageResult_SalesEntryQueryDto_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesEntriesGetSignalError(OAIPageResult_SalesEntryQueryDto_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesEntriesPostSignalError() instead")
    void salesEntriesPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesEntriesPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesEntriesProcessBatchSignalError() instead")
    void salesEntriesProcessBatchSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesEntriesProcessBatchSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesEntriesPutSignalError() instead")
    void salesEntriesPutSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesEntriesPutSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1SalesEntriesIdGetSignalError() instead")
    void v1SalesEntriesIdGetSignalE(OAISalesEntryDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1SalesEntriesIdGetSignalError(OAISalesEntryDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use salesEntriesDeleteSignalErrorFull() instead")
    void salesEntriesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesEntriesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesEntriesGetSignalErrorFull() instead")
    void salesEntriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesEntriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesEntriesPostSignalErrorFull() instead")
    void salesEntriesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesEntriesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesEntriesProcessBatchSignalErrorFull() instead")
    void salesEntriesProcessBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesEntriesProcessBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesEntriesPutSignalErrorFull() instead")
    void salesEntriesPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesEntriesPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1SalesEntriesIdGetSignalErrorFull() instead")
    void v1SalesEntriesIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1SalesEntriesIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
