/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEmailApi_H
#define OAI_OAIEmailApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEmailQuoteDto.h"
#include "OAIEmailStatementDto.h"
#include "OAIObject.h"
#include "OAISalesInvoiceEmailInfoDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEmailApi : public QObject {
    Q_OBJECT

public:
    OAIEmailApi(const int timeOut = 0);
    ~OAIEmailApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_email_statement_dto OAIEmailStatementDto [required]
    */
    virtual void emailSendEmailStatement(const OAIEmailStatementDto &oai_email_statement_dto);

    /**
    * @param[in]  oai_email_quote_dto OAIEmailQuoteDto [required]
    */
    virtual void emailSendQuote(const OAIEmailQuoteDto &oai_email_quote_dto);

    /**
    * @param[in]  oai_sales_invoice_email_info_dto OAISalesInvoiceEmailInfoDto [required]
    */
    virtual void emailSendSalesInvoice(const OAISalesInvoiceEmailInfoDto &oai_sales_invoice_email_info_dto);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void emailSendEmailStatementCallback(OAIHttpRequestWorker *worker);
    void emailSendQuoteCallback(OAIHttpRequestWorker *worker);
    void emailSendSalesInvoiceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void emailSendEmailStatementSignal(OAIObject summary);
    void emailSendQuoteSignal(OAIObject summary);
    void emailSendSalesInvoiceSignal(OAIObject summary);


    void emailSendEmailStatementSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void emailSendQuoteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void emailSendSalesInvoiceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use emailSendEmailStatementSignalError() instead")
    void emailSendEmailStatementSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void emailSendEmailStatementSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emailSendQuoteSignalError() instead")
    void emailSendQuoteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void emailSendQuoteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emailSendSalesInvoiceSignalError() instead")
    void emailSendSalesInvoiceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void emailSendSalesInvoiceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use emailSendEmailStatementSignalErrorFull() instead")
    void emailSendEmailStatementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void emailSendEmailStatementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emailSendQuoteSignalErrorFull() instead")
    void emailSendQuoteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void emailSendQuoteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emailSendSalesInvoiceSignalErrorFull() instead")
    void emailSendSalesInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void emailSendSalesInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
