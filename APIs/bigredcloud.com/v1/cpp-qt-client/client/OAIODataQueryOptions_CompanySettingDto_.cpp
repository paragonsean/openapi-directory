/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIODataQueryOptions_CompanySettingDto_.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIODataQueryOptions_CompanySettingDto_::OAIODataQueryOptions_CompanySettingDto_(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIODataQueryOptions_CompanySettingDto_::OAIODataQueryOptions_CompanySettingDto_() {
    this->initializeModel();
}

OAIODataQueryOptions_CompanySettingDto_::~OAIODataQueryOptions_CompanySettingDto_() {}

void OAIODataQueryOptions_CompanySettingDto_::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_if_match_isSet = false;
    m_if_match_isValid = false;

    m_if_none_match_isSet = false;
    m_if_none_match_isValid = false;

    m_inline_count_isSet = false;
    m_inline_count_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;

    m_raw_values_isSet = false;
    m_raw_values_isValid = false;

    m_request_isSet = false;
    m_request_isValid = false;

    m_select_expand_isSet = false;
    m_select_expand_isValid = false;

    m_skip_isSet = false;
    m_skip_isValid = false;

    m_top_isSet = false;
    m_top_isValid = false;

    m_validator_isSet = false;
    m_validator_isValid = false;
}

void OAIODataQueryOptions_CompanySettingDto_::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIODataQueryOptions_CompanySettingDto_::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("Context")]);
    m_context_isSet = !json[QString("Context")].isNull() && m_context_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;

    m_if_match_isValid = ::OpenAPI::fromJsonValue(m_if_match, json[QString("IfMatch")]);
    m_if_match_isSet = !json[QString("IfMatch")].isNull() && m_if_match_isValid;

    m_if_none_match_isValid = ::OpenAPI::fromJsonValue(m_if_none_match, json[QString("IfNoneMatch")]);
    m_if_none_match_isSet = !json[QString("IfNoneMatch")].isNull() && m_if_none_match_isValid;

    m_inline_count_isValid = ::OpenAPI::fromJsonValue(m_inline_count, json[QString("InlineCount")]);
    m_inline_count_isSet = !json[QString("InlineCount")].isNull() && m_inline_count_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("OrderBy")]);
    m_order_by_isSet = !json[QString("OrderBy")].isNull() && m_order_by_isValid;

    m_raw_values_isValid = ::OpenAPI::fromJsonValue(m_raw_values, json[QString("RawValues")]);
    m_raw_values_isSet = !json[QString("RawValues")].isNull() && m_raw_values_isValid;

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("Request")]);
    m_request_isSet = !json[QString("Request")].isNull() && m_request_isValid;

    m_select_expand_isValid = ::OpenAPI::fromJsonValue(m_select_expand, json[QString("SelectExpand")]);
    m_select_expand_isSet = !json[QString("SelectExpand")].isNull() && m_select_expand_isValid;

    m_skip_isValid = ::OpenAPI::fromJsonValue(m_skip, json[QString("Skip")]);
    m_skip_isSet = !json[QString("Skip")].isNull() && m_skip_isValid;

    m_top_isValid = ::OpenAPI::fromJsonValue(m_top, json[QString("Top")]);
    m_top_isSet = !json[QString("Top")].isNull() && m_top_isValid;

    m_validator_isValid = ::OpenAPI::fromJsonValue(m_validator, json[QString("Validator")]);
    m_validator_isSet = !json[QString("Validator")].isNull() && m_validator_isValid;
}

QString OAIODataQueryOptions_CompanySettingDto_::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIODataQueryOptions_CompanySettingDto_::asJsonObject() const {
    QJsonObject obj;
    if (m_context.isSet()) {
        obj.insert(QString("Context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_if_match_isSet) {
        obj.insert(QString("IfMatch"), ::OpenAPI::toJsonValue(m_if_match));
    }
    if (m_if_none_match_isSet) {
        obj.insert(QString("IfNoneMatch"), ::OpenAPI::toJsonValue(m_if_none_match));
    }
    if (m_inline_count.isSet()) {
        obj.insert(QString("InlineCount"), ::OpenAPI::toJsonValue(m_inline_count));
    }
    if (m_order_by.isSet()) {
        obj.insert(QString("OrderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    if (m_raw_values.isSet()) {
        obj.insert(QString("RawValues"), ::OpenAPI::toJsonValue(m_raw_values));
    }
    if (m_request_isSet) {
        obj.insert(QString("Request"), ::OpenAPI::toJsonValue(m_request));
    }
    if (m_select_expand.isSet()) {
        obj.insert(QString("SelectExpand"), ::OpenAPI::toJsonValue(m_select_expand));
    }
    if (m_skip.isSet()) {
        obj.insert(QString("Skip"), ::OpenAPI::toJsonValue(m_skip));
    }
    if (m_top.isSet()) {
        obj.insert(QString("Top"), ::OpenAPI::toJsonValue(m_top));
    }
    if (m_validator_isSet) {
        obj.insert(QString("Validator"), ::OpenAPI::toJsonValue(m_validator));
    }
    return obj;
}

OAIODataQueryContext OAIODataQueryOptions_CompanySettingDto_::getContext() const {
    return m_context;
}
void OAIODataQueryOptions_CompanySettingDto_::setContext(const OAIODataQueryContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_context_Set() const{
    return m_context_isSet;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_context_Valid() const{
    return m_context_isValid;
}

OAIFilterQueryOption OAIODataQueryOptions_CompanySettingDto_::getFilter() const {
    return m_filter;
}
void OAIODataQueryOptions_CompanySettingDto_::setFilter(const OAIFilterQueryOption &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_filter_Valid() const{
    return m_filter_isValid;
}

OAIObject OAIODataQueryOptions_CompanySettingDto_::getIfMatch() const {
    return m_if_match;
}
void OAIODataQueryOptions_CompanySettingDto_::setIfMatch(const OAIObject &if_match) {
    m_if_match = if_match;
    m_if_match_isSet = true;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_if_match_Set() const{
    return m_if_match_isSet;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_if_match_Valid() const{
    return m_if_match_isValid;
}

OAIObject OAIODataQueryOptions_CompanySettingDto_::getIfNoneMatch() const {
    return m_if_none_match;
}
void OAIODataQueryOptions_CompanySettingDto_::setIfNoneMatch(const OAIObject &if_none_match) {
    m_if_none_match = if_none_match;
    m_if_none_match_isSet = true;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_if_none_match_Set() const{
    return m_if_none_match_isSet;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_if_none_match_Valid() const{
    return m_if_none_match_isValid;
}

OAIInlineCountQueryOption OAIODataQueryOptions_CompanySettingDto_::getInlineCount() const {
    return m_inline_count;
}
void OAIODataQueryOptions_CompanySettingDto_::setInlineCount(const OAIInlineCountQueryOption &inline_count) {
    m_inline_count = inline_count;
    m_inline_count_isSet = true;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_inline_count_Set() const{
    return m_inline_count_isSet;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_inline_count_Valid() const{
    return m_inline_count_isValid;
}

OAIOrderByQueryOption OAIODataQueryOptions_CompanySettingDto_::getOrderBy() const {
    return m_order_by;
}
void OAIODataQueryOptions_CompanySettingDto_::setOrderBy(const OAIOrderByQueryOption &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_order_by_Valid() const{
    return m_order_by_isValid;
}

OAIODataRawQueryOptions OAIODataQueryOptions_CompanySettingDto_::getRawValues() const {
    return m_raw_values;
}
void OAIODataQueryOptions_CompanySettingDto_::setRawValues(const OAIODataRawQueryOptions &raw_values) {
    m_raw_values = raw_values;
    m_raw_values_isSet = true;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_raw_values_Set() const{
    return m_raw_values_isSet;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_raw_values_Valid() const{
    return m_raw_values_isValid;
}

OAIObject OAIODataQueryOptions_CompanySettingDto_::getRequest() const {
    return m_request;
}
void OAIODataQueryOptions_CompanySettingDto_::setRequest(const OAIObject &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_request_Set() const{
    return m_request_isSet;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_request_Valid() const{
    return m_request_isValid;
}

OAISelectExpandQueryOption OAIODataQueryOptions_CompanySettingDto_::getSelectExpand() const {
    return m_select_expand;
}
void OAIODataQueryOptions_CompanySettingDto_::setSelectExpand(const OAISelectExpandQueryOption &select_expand) {
    m_select_expand = select_expand;
    m_select_expand_isSet = true;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_select_expand_Set() const{
    return m_select_expand_isSet;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_select_expand_Valid() const{
    return m_select_expand_isValid;
}

OAISkipQueryOption OAIODataQueryOptions_CompanySettingDto_::getSkip() const {
    return m_skip;
}
void OAIODataQueryOptions_CompanySettingDto_::setSkip(const OAISkipQueryOption &skip) {
    m_skip = skip;
    m_skip_isSet = true;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_skip_Set() const{
    return m_skip_isSet;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_skip_Valid() const{
    return m_skip_isValid;
}

OAITopQueryOption OAIODataQueryOptions_CompanySettingDto_::getTop() const {
    return m_top;
}
void OAIODataQueryOptions_CompanySettingDto_::setTop(const OAITopQueryOption &top) {
    m_top = top;
    m_top_isSet = true;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_top_Set() const{
    return m_top_isSet;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_top_Valid() const{
    return m_top_isValid;
}

OAIObject OAIODataQueryOptions_CompanySettingDto_::getValidator() const {
    return m_validator;
}
void OAIODataQueryOptions_CompanySettingDto_::setValidator(const OAIObject &validator) {
    m_validator = validator;
    m_validator_isSet = true;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_validator_Set() const{
    return m_validator_isSet;
}

bool OAIODataQueryOptions_CompanySettingDto_::is_validator_Valid() const{
    return m_validator_isValid;
}

bool OAIODataQueryOptions_CompanySettingDto_::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_if_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_if_none_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_count.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_expand.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_top.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIODataQueryOptions_CompanySettingDto_::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
