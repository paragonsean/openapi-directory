/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICompanyOptionDto.h
 *
 * 
 */

#ifndef OAICompanyOptionDto_H
#define OAICompanyOptionDto_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICompanyOptionDto : public OAIObject {
public:
    OAICompanyOptionDto();
    OAICompanyOptionDto(QString json);
    ~OAICompanyOptionDto() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowEntryOfGrossPriceInInvoicing() const;
    void setAllowEntryOfGrossPriceInInvoicing(const bool &allow_entry_of_gross_price_in_invoicing);
    bool is_allow_entry_of_gross_price_in_invoicing_Set() const;
    bool is_allow_entry_of_gross_price_in_invoicing_Valid() const;

    bool isCreditInputForReverseChargeVat() const;
    void setCreditInputForReverseChargeVat(const bool &credit_input_for_reverse_charge_vat);
    bool is_credit_input_for_reverse_charge_vat_Set() const;
    bool is_credit_input_for_reverse_charge_vat_Valid() const;

    QString getCreditNoteJournalAgeingName() const;
    void setCreditNoteJournalAgeingName(const QString &credit_note_journal_ageing_name);
    bool is_credit_note_journal_ageing_name_Set() const;
    bool is_credit_note_journal_ageing_name_Valid() const;

    qint32 getCreditNoteJournalAgeingValue() const;
    void setCreditNoteJournalAgeingValue(const qint32 &credit_note_journal_ageing_value);
    bool is_credit_note_journal_ageing_value_Set() const;
    bool is_credit_note_journal_ageing_value_Valid() const;

    double getDiscrepancyAllowed() const;
    void setDiscrepancyAllowed(const double &discrepancy_allowed);
    bool is_discrepancy_allowed_Set() const;
    bool is_discrepancy_allowed_Valid() const;

    bool isEnableVocrReporting() const;
    void setEnableVocrReporting(const bool &enable_vocr_reporting);
    bool is_enable_vocr_reporting_Set() const;
    bool is_enable_vocr_reporting_Valid() const;

    bool isMarginVatScheme() const;
    void setMarginVatScheme(const bool &margin_vat_scheme);
    bool is_margin_vat_scheme_Set() const;
    bool is_margin_vat_scheme_Valid() const;

    bool isPrintOsItemsOnly() const;
    void setPrintOsItemsOnly(const bool &print_os_items_only);
    bool is_print_os_items_only_Set() const;
    bool is_print_os_items_only_Valid() const;

    qint64 getPurchasesVatAnalysisType() const;
    void setPurchasesVatAnalysisType(const qint64 &purchases_vat_analysis_type);
    bool is_purchases_vat_analysis_type_Set() const;
    bool is_purchases_vat_analysis_type_Valid() const;

    qint64 getSalesVatAnalysisType() const;
    void setSalesVatAnalysisType(const qint64 &sales_vat_analysis_type);
    bool is_sales_vat_analysis_type_Set() const;
    bool is_sales_vat_analysis_type_Valid() const;

    bool isUseAllocations() const;
    void setUseAllocations(const bool &use_allocations);
    bool is_use_allocations_Set() const;
    bool is_use_allocations_Valid() const;

    bool isUseNominal() const;
    void setUseNominal(const bool &use_nominal);
    bool is_use_nominal_Set() const;
    bool is_use_nominal_Valid() const;

    bool isUseNominalCode() const;
    void setUseNominalCode(const bool &use_nominal_code);
    bool is_use_nominal_code_Set() const;
    bool is_use_nominal_code_Valid() const;

    bool isVocrSettingValue() const;
    void setVocrSettingValue(const bool &vocr_setting_value);
    bool is_vocr_setting_value_Set() const;
    bool is_vocr_setting_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_entry_of_gross_price_in_invoicing;
    bool m_allow_entry_of_gross_price_in_invoicing_isSet;
    bool m_allow_entry_of_gross_price_in_invoicing_isValid;

    bool m_credit_input_for_reverse_charge_vat;
    bool m_credit_input_for_reverse_charge_vat_isSet;
    bool m_credit_input_for_reverse_charge_vat_isValid;

    QString m_credit_note_journal_ageing_name;
    bool m_credit_note_journal_ageing_name_isSet;
    bool m_credit_note_journal_ageing_name_isValid;

    qint32 m_credit_note_journal_ageing_value;
    bool m_credit_note_journal_ageing_value_isSet;
    bool m_credit_note_journal_ageing_value_isValid;

    double m_discrepancy_allowed;
    bool m_discrepancy_allowed_isSet;
    bool m_discrepancy_allowed_isValid;

    bool m_enable_vocr_reporting;
    bool m_enable_vocr_reporting_isSet;
    bool m_enable_vocr_reporting_isValid;

    bool m_margin_vat_scheme;
    bool m_margin_vat_scheme_isSet;
    bool m_margin_vat_scheme_isValid;

    bool m_print_os_items_only;
    bool m_print_os_items_only_isSet;
    bool m_print_os_items_only_isValid;

    qint64 m_purchases_vat_analysis_type;
    bool m_purchases_vat_analysis_type_isSet;
    bool m_purchases_vat_analysis_type_isValid;

    qint64 m_sales_vat_analysis_type;
    bool m_sales_vat_analysis_type_isSet;
    bool m_sales_vat_analysis_type_isValid;

    bool m_use_allocations;
    bool m_use_allocations_isSet;
    bool m_use_allocations_isValid;

    bool m_use_nominal;
    bool m_use_nominal_isSet;
    bool m_use_nominal_isValid;

    bool m_use_nominal_code;
    bool m_use_nominal_code_isSet;
    bool m_use_nominal_code_isValid;

    bool m_vocr_setting_value;
    bool m_vocr_setting_value_isSet;
    bool m_vocr_setting_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICompanyOptionDto)

#endif // OAICompanyOptionDto_H
