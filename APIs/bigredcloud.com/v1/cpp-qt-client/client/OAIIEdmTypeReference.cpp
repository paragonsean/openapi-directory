/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIEdmTypeReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIEdmTypeReference::OAIIEdmTypeReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIEdmTypeReference::OAIIEdmTypeReference() {
    this->initializeModel();
}

OAIIEdmTypeReference::~OAIIEdmTypeReference() {}

void OAIIEdmTypeReference::initializeModel() {

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_is_nullable_isSet = false;
    m_is_nullable_isValid = false;
}

void OAIIEdmTypeReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIEdmTypeReference::fromJsonObject(QJsonObject json) {

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("Definition")]);
    m_definition_isSet = !json[QString("Definition")].isNull() && m_definition_isValid;

    m_is_nullable_isValid = ::OpenAPI::fromJsonValue(m_is_nullable, json[QString("IsNullable")]);
    m_is_nullable_isSet = !json[QString("IsNullable")].isNull() && m_is_nullable_isValid;
}

QString OAIIEdmTypeReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIEdmTypeReference::asJsonObject() const {
    QJsonObject obj;
    if (m_definition.isSet()) {
        obj.insert(QString("Definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_is_nullable_isSet) {
        obj.insert(QString("IsNullable"), ::OpenAPI::toJsonValue(m_is_nullable));
    }
    return obj;
}

OAIIEdmType OAIIEdmTypeReference::getDefinition() const {
    return m_definition;
}
void OAIIEdmTypeReference::setDefinition(const OAIIEdmType &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIIEdmTypeReference::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIIEdmTypeReference::is_definition_Valid() const{
    return m_definition_isValid;
}

bool OAIIEdmTypeReference::isIsNullable() const {
    return m_is_nullable;
}
void OAIIEdmTypeReference::setIsNullable(const bool &is_nullable) {
    m_is_nullable = is_nullable;
    m_is_nullable_isSet = true;
}

bool OAIIEdmTypeReference::is_is_nullable_Set() const{
    return m_is_nullable_isSet;
}

bool OAIIEdmTypeReference::is_is_nullable_Valid() const{
    return m_is_nullable_isValid;
}

bool OAIIEdmTypeReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_nullable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIEdmTypeReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
