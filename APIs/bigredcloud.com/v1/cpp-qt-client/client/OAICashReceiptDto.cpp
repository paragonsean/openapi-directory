/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICashReceiptDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICashReceiptDto::OAICashReceiptDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICashReceiptDto::OAICashReceiptDto() {
    this->initializeModel();
}

OAICashReceiptDto::~OAICashReceiptDto() {}

void OAICashReceiptDto::initializeModel() {

    m_ac_code_isSet = false;
    m_ac_code_isValid = false;

    m_ac_entries_isSet = false;
    m_ac_entries_isValid = false;

    m_book_tran_type_id_isSet = false;
    m_book_tran_type_id_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_detail_collection_isSet = false;
    m_detail_collection_isValid = false;

    m_discount_isSet = false;
    m_discount_isValid = false;

    m_entry_date_isSet = false;
    m_entry_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ledger_isSet = false;
    m_ledger_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_plaid_transaction_id_isSet = false;
    m_plaid_transaction_id_isValid = false;

    m_proc_date_isSet = false;
    m_proc_date_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_unallocated_isSet = false;
    m_unallocated_isValid = false;

    m_vat_entries_isSet = false;
    m_vat_entries_isValid = false;

    m_vat_type_id_isSet = false;
    m_vat_type_id_isValid = false;
}

void OAICashReceiptDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICashReceiptDto::fromJsonObject(QJsonObject json) {

    m_ac_code_isValid = ::OpenAPI::fromJsonValue(m_ac_code, json[QString("acCode")]);
    m_ac_code_isSet = !json[QString("acCode")].isNull() && m_ac_code_isValid;

    m_ac_entries_isValid = ::OpenAPI::fromJsonValue(m_ac_entries, json[QString("acEntries")]);
    m_ac_entries_isSet = !json[QString("acEntries")].isNull() && m_ac_entries_isValid;

    m_book_tran_type_id_isValid = ::OpenAPI::fromJsonValue(m_book_tran_type_id, json[QString("bookTranTypeId")]);
    m_book_tran_type_id_isSet = !json[QString("bookTranTypeId")].isNull() && m_book_tran_type_id_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_detail_collection_isValid = ::OpenAPI::fromJsonValue(m_detail_collection, json[QString("detailCollection")]);
    m_detail_collection_isSet = !json[QString("detailCollection")].isNull() && m_detail_collection_isValid;

    m_discount_isValid = ::OpenAPI::fromJsonValue(m_discount, json[QString("discount")]);
    m_discount_isSet = !json[QString("discount")].isNull() && m_discount_isValid;

    m_entry_date_isValid = ::OpenAPI::fromJsonValue(m_entry_date, json[QString("entryDate")]);
    m_entry_date_isSet = !json[QString("entryDate")].isNull() && m_entry_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ledger_isValid = ::OpenAPI::fromJsonValue(m_ledger, json[QString("ledger")]);
    m_ledger_isSet = !json[QString("ledger")].isNull() && m_ledger_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_plaid_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_plaid_transaction_id, json[QString("plaidTransactionId")]);
    m_plaid_transaction_id_isSet = !json[QString("plaidTransactionId")].isNull() && m_plaid_transaction_id_isValid;

    m_proc_date_isValid = ::OpenAPI::fromJsonValue(m_proc_date, json[QString("procDate")]);
    m_proc_date_isSet = !json[QString("procDate")].isNull() && m_proc_date_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_unallocated_isValid = ::OpenAPI::fromJsonValue(m_unallocated, json[QString("unallocated")]);
    m_unallocated_isSet = !json[QString("unallocated")].isNull() && m_unallocated_isValid;

    m_vat_entries_isValid = ::OpenAPI::fromJsonValue(m_vat_entries, json[QString("vatEntries")]);
    m_vat_entries_isSet = !json[QString("vatEntries")].isNull() && m_vat_entries_isValid;

    m_vat_type_id_isValid = ::OpenAPI::fromJsonValue(m_vat_type_id, json[QString("vatTypeId")]);
    m_vat_type_id_isSet = !json[QString("vatTypeId")].isNull() && m_vat_type_id_isValid;
}

QString OAICashReceiptDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICashReceiptDto::asJsonObject() const {
    QJsonObject obj;
    if (m_ac_code_isSet) {
        obj.insert(QString("acCode"), ::OpenAPI::toJsonValue(m_ac_code));
    }
    if (m_ac_entries.size() > 0) {
        obj.insert(QString("acEntries"), ::OpenAPI::toJsonValue(m_ac_entries));
    }
    if (m_book_tran_type_id_isSet) {
        obj.insert(QString("bookTranTypeId"), ::OpenAPI::toJsonValue(m_book_tran_type_id));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_detail_collection.size() > 0) {
        obj.insert(QString("detailCollection"), ::OpenAPI::toJsonValue(m_detail_collection));
    }
    if (m_discount_isSet) {
        obj.insert(QString("discount"), ::OpenAPI::toJsonValue(m_discount));
    }
    if (m_entry_date_isSet) {
        obj.insert(QString("entryDate"), ::OpenAPI::toJsonValue(m_entry_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ledger_isSet) {
        obj.insert(QString("ledger"), ::OpenAPI::toJsonValue(m_ledger));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_plaid_transaction_id_isSet) {
        obj.insert(QString("plaidTransactionId"), ::OpenAPI::toJsonValue(m_plaid_transaction_id));
    }
    if (m_proc_date_isSet) {
        obj.insert(QString("procDate"), ::OpenAPI::toJsonValue(m_proc_date));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_unallocated_isSet) {
        obj.insert(QString("unallocated"), ::OpenAPI::toJsonValue(m_unallocated));
    }
    if (m_vat_entries.size() > 0) {
        obj.insert(QString("vatEntries"), ::OpenAPI::toJsonValue(m_vat_entries));
    }
    if (m_vat_type_id_isSet) {
        obj.insert(QString("vatTypeId"), ::OpenAPI::toJsonValue(m_vat_type_id));
    }
    return obj;
}

QString OAICashReceiptDto::getAcCode() const {
    return m_ac_code;
}
void OAICashReceiptDto::setAcCode(const QString &ac_code) {
    m_ac_code = ac_code;
    m_ac_code_isSet = true;
}

bool OAICashReceiptDto::is_ac_code_Set() const{
    return m_ac_code_isSet;
}

bool OAICashReceiptDto::is_ac_code_Valid() const{
    return m_ac_code_isValid;
}

QList<OAIAcEntryDto> OAICashReceiptDto::getAcEntries() const {
    return m_ac_entries;
}
void OAICashReceiptDto::setAcEntries(const QList<OAIAcEntryDto> &ac_entries) {
    m_ac_entries = ac_entries;
    m_ac_entries_isSet = true;
}

bool OAICashReceiptDto::is_ac_entries_Set() const{
    return m_ac_entries_isSet;
}

bool OAICashReceiptDto::is_ac_entries_Valid() const{
    return m_ac_entries_isValid;
}

qint64 OAICashReceiptDto::getBookTranTypeId() const {
    return m_book_tran_type_id;
}
void OAICashReceiptDto::setBookTranTypeId(const qint64 &book_tran_type_id) {
    m_book_tran_type_id = book_tran_type_id;
    m_book_tran_type_id_isSet = true;
}

bool OAICashReceiptDto::is_book_tran_type_id_Set() const{
    return m_book_tran_type_id_isSet;
}

bool OAICashReceiptDto::is_book_tran_type_id_Valid() const{
    return m_book_tran_type_id_isValid;
}

QList<OAIAcudfValueDto> OAICashReceiptDto::getCustomFields() const {
    return m_custom_fields;
}
void OAICashReceiptDto::setCustomFields(const QList<OAIAcudfValueDto> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAICashReceiptDto::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAICashReceiptDto::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

qint64 OAICashReceiptDto::getCustomerId() const {
    return m_customer_id;
}
void OAICashReceiptDto::setCustomerId(const qint64 &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAICashReceiptDto::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAICashReceiptDto::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QList<QString> OAICashReceiptDto::getDetailCollection() const {
    return m_detail_collection;
}
void OAICashReceiptDto::setDetailCollection(const QList<QString> &detail_collection) {
    m_detail_collection = detail_collection;
    m_detail_collection_isSet = true;
}

bool OAICashReceiptDto::is_detail_collection_Set() const{
    return m_detail_collection_isSet;
}

bool OAICashReceiptDto::is_detail_collection_Valid() const{
    return m_detail_collection_isValid;
}

double OAICashReceiptDto::getDiscount() const {
    return m_discount;
}
void OAICashReceiptDto::setDiscount(const double &discount) {
    m_discount = discount;
    m_discount_isSet = true;
}

bool OAICashReceiptDto::is_discount_Set() const{
    return m_discount_isSet;
}

bool OAICashReceiptDto::is_discount_Valid() const{
    return m_discount_isValid;
}

QDateTime OAICashReceiptDto::getEntryDate() const {
    return m_entry_date;
}
void OAICashReceiptDto::setEntryDate(const QDateTime &entry_date) {
    m_entry_date = entry_date;
    m_entry_date_isSet = true;
}

bool OAICashReceiptDto::is_entry_date_Set() const{
    return m_entry_date_isSet;
}

bool OAICashReceiptDto::is_entry_date_Valid() const{
    return m_entry_date_isValid;
}

qint64 OAICashReceiptDto::getId() const {
    return m_id;
}
void OAICashReceiptDto::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICashReceiptDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAICashReceiptDto::is_id_Valid() const{
    return m_id_isValid;
}

double OAICashReceiptDto::getLedger() const {
    return m_ledger;
}
void OAICashReceiptDto::setLedger(const double &ledger) {
    m_ledger = ledger;
    m_ledger_isSet = true;
}

bool OAICashReceiptDto::is_ledger_Set() const{
    return m_ledger_isSet;
}

bool OAICashReceiptDto::is_ledger_Valid() const{
    return m_ledger_isValid;
}

QString OAICashReceiptDto::getNote() const {
    return m_note;
}
void OAICashReceiptDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAICashReceiptDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAICashReceiptDto::is_note_Valid() const{
    return m_note_isValid;
}

QString OAICashReceiptDto::getPlaidTransactionId() const {
    return m_plaid_transaction_id;
}
void OAICashReceiptDto::setPlaidTransactionId(const QString &plaid_transaction_id) {
    m_plaid_transaction_id = plaid_transaction_id;
    m_plaid_transaction_id_isSet = true;
}

bool OAICashReceiptDto::is_plaid_transaction_id_Set() const{
    return m_plaid_transaction_id_isSet;
}

bool OAICashReceiptDto::is_plaid_transaction_id_Valid() const{
    return m_plaid_transaction_id_isValid;
}

QDateTime OAICashReceiptDto::getProcDate() const {
    return m_proc_date;
}
void OAICashReceiptDto::setProcDate(const QDateTime &proc_date) {
    m_proc_date = proc_date;
    m_proc_date_isSet = true;
}

bool OAICashReceiptDto::is_proc_date_Set() const{
    return m_proc_date_isSet;
}

bool OAICashReceiptDto::is_proc_date_Valid() const{
    return m_proc_date_isValid;
}

QByteArray OAICashReceiptDto::getTimestamp() const {
    return m_timestamp;
}
void OAICashReceiptDto::setTimestamp(const QByteArray &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAICashReceiptDto::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAICashReceiptDto::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

double OAICashReceiptDto::getTotal() const {
    return m_total;
}
void OAICashReceiptDto::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAICashReceiptDto::is_total_Set() const{
    return m_total_isSet;
}

bool OAICashReceiptDto::is_total_Valid() const{
    return m_total_isValid;
}

double OAICashReceiptDto::getUnallocated() const {
    return m_unallocated;
}
void OAICashReceiptDto::setUnallocated(const double &unallocated) {
    m_unallocated = unallocated;
    m_unallocated_isSet = true;
}

bool OAICashReceiptDto::is_unallocated_Set() const{
    return m_unallocated_isSet;
}

bool OAICashReceiptDto::is_unallocated_Valid() const{
    return m_unallocated_isValid;
}

QList<OAIVatEntryDto> OAICashReceiptDto::getVatEntries() const {
    return m_vat_entries;
}
void OAICashReceiptDto::setVatEntries(const QList<OAIVatEntryDto> &vat_entries) {
    m_vat_entries = vat_entries;
    m_vat_entries_isSet = true;
}

bool OAICashReceiptDto::is_vat_entries_Set() const{
    return m_vat_entries_isSet;
}

bool OAICashReceiptDto::is_vat_entries_Valid() const{
    return m_vat_entries_isValid;
}

qint64 OAICashReceiptDto::getVatTypeId() const {
    return m_vat_type_id;
}
void OAICashReceiptDto::setVatTypeId(const qint64 &vat_type_id) {
    m_vat_type_id = vat_type_id;
    m_vat_type_id_isSet = true;
}

bool OAICashReceiptDto::is_vat_type_id_Set() const{
    return m_vat_type_id_isSet;
}

bool OAICashReceiptDto::is_vat_type_id_Valid() const{
    return m_vat_type_id_isValid;
}

bool OAICashReceiptDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ac_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ac_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_book_tran_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_collection.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ledger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plaid_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proc_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unallocated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICashReceiptDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
