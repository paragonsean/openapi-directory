/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompanySettingDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompanySettingDto::OAICompanySettingDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompanySettingDto::OAICompanySettingDto() {
    this->initializeModel();
}

OAICompanySettingDto::~OAICompanySettingDto() {}

void OAICompanySettingDto::initializeModel() {

    m_enable_vocr_reporting_isSet = false;
    m_enable_vocr_reporting_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_use_allocations_isSet = false;
    m_use_allocations_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_vocr_setting_value_isSet = false;
    m_vocr_setting_value_isValid = false;
}

void OAICompanySettingDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompanySettingDto::fromJsonObject(QJsonObject json) {

    m_enable_vocr_reporting_isValid = ::OpenAPI::fromJsonValue(m_enable_vocr_reporting, json[QString("enableVOCRReporting")]);
    m_enable_vocr_reporting_isSet = !json[QString("enableVOCRReporting")].isNull() && m_enable_vocr_reporting_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_use_allocations_isValid = ::OpenAPI::fromJsonValue(m_use_allocations, json[QString("useAllocations")]);
    m_use_allocations_isSet = !json[QString("useAllocations")].isNull() && m_use_allocations_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_vocr_setting_value_isValid = ::OpenAPI::fromJsonValue(m_vocr_setting_value, json[QString("vocrSettingValue")]);
    m_vocr_setting_value_isSet = !json[QString("vocrSettingValue")].isNull() && m_vocr_setting_value_isValid;
}

QString OAICompanySettingDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompanySettingDto::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_vocr_reporting_isSet) {
        obj.insert(QString("enableVOCRReporting"), ::OpenAPI::toJsonValue(m_enable_vocr_reporting));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_use_allocations_isSet) {
        obj.insert(QString("useAllocations"), ::OpenAPI::toJsonValue(m_use_allocations));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_vocr_setting_value_isSet) {
        obj.insert(QString("vocrSettingValue"), ::OpenAPI::toJsonValue(m_vocr_setting_value));
    }
    return obj;
}

bool OAICompanySettingDto::isEnableVocrReporting() const {
    return m_enable_vocr_reporting;
}
void OAICompanySettingDto::setEnableVocrReporting(const bool &enable_vocr_reporting) {
    m_enable_vocr_reporting = enable_vocr_reporting;
    m_enable_vocr_reporting_isSet = true;
}

bool OAICompanySettingDto::is_enable_vocr_reporting_Set() const{
    return m_enable_vocr_reporting_isSet;
}

bool OAICompanySettingDto::is_enable_vocr_reporting_Valid() const{
    return m_enable_vocr_reporting_isValid;
}

qint64 OAICompanySettingDto::getId() const {
    return m_id;
}
void OAICompanySettingDto::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICompanySettingDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAICompanySettingDto::is_id_Valid() const{
    return m_id_isValid;
}

bool OAICompanySettingDto::isUseAllocations() const {
    return m_use_allocations;
}
void OAICompanySettingDto::setUseAllocations(const bool &use_allocations) {
    m_use_allocations = use_allocations;
    m_use_allocations_isSet = true;
}

bool OAICompanySettingDto::is_use_allocations_Set() const{
    return m_use_allocations_isSet;
}

bool OAICompanySettingDto::is_use_allocations_Valid() const{
    return m_use_allocations_isValid;
}

QString OAICompanySettingDto::getValue() const {
    return m_value;
}
void OAICompanySettingDto::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAICompanySettingDto::is_value_Set() const{
    return m_value_isSet;
}

bool OAICompanySettingDto::is_value_Valid() const{
    return m_value_isValid;
}

bool OAICompanySettingDto::isVocrSettingValue() const {
    return m_vocr_setting_value;
}
void OAICompanySettingDto::setVocrSettingValue(const bool &vocr_setting_value) {
    m_vocr_setting_value = vocr_setting_value;
    m_vocr_setting_value_isSet = true;
}

bool OAICompanySettingDto::is_vocr_setting_value_Set() const{
    return m_vocr_setting_value_isSet;
}

bool OAICompanySettingDto::is_vocr_setting_value_Valid() const{
    return m_vocr_setting_value_isValid;
}

bool OAICompanySettingDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_vocr_reporting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_allocations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vocr_setting_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompanySettingDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
