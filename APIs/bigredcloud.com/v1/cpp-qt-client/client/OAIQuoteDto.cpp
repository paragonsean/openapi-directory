/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuoteDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuoteDto::OAIQuoteDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuoteDto::OAIQuoteDto() {
    this->initializeModel();
}

OAIQuoteDto::~OAIQuoteDto() {}

void OAIQuoteDto::initializeModel() {

    m_ac_code_isSet = false;
    m_ac_code_isValid = false;

    m_closed_date_isSet = false;
    m_closed_date_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_company_id_isSet = false;
    m_company_id_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_customer_owner_id_isSet = false;
    m_customer_owner_id_isValid = false;

    m_customer_owner_name_isSet = false;
    m_customer_owner_name_isValid = false;

    m_dd_number_isSet = false;
    m_dd_number_isValid = false;

    m_delivery_list_isSet = false;
    m_delivery_list_isValid = false;

    m_delivery_to_isSet = false;
    m_delivery_to_isValid = false;

    m_entry_date_isSet = false;
    m_entry_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_layout_type_isSet = false;
    m_layout_type_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_po_number_isSet = false;
    m_po_number_isValid = false;

    m_proc_date_isSet = false;
    m_proc_date_isValid = false;

    m_product_trans_isSet = false;
    m_product_trans_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_sale_invoice_id_isSet = false;
    m_sale_invoice_id_isValid = false;

    m_sale_rep_code_isSet = false;
    m_sale_rep_code_isValid = false;

    m_sale_rep_id_isSet = false;
    m_sale_rep_id_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_total_net_isSet = false;
    m_total_net_isValid = false;

    m_total_vat_isSet = false;
    m_total_vat_isValid = false;

    m_vat_type_id_isSet = false;
    m_vat_type_id_isValid = false;
}

void OAIQuoteDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuoteDto::fromJsonObject(QJsonObject json) {

    m_ac_code_isValid = ::OpenAPI::fromJsonValue(m_ac_code, json[QString("acCode")]);
    m_ac_code_isSet = !json[QString("acCode")].isNull() && m_ac_code_isValid;

    m_closed_date_isValid = ::OpenAPI::fromJsonValue(m_closed_date, json[QString("closedDate")]);
    m_closed_date_isSet = !json[QString("closedDate")].isNull() && m_closed_date_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_company_id_isValid = ::OpenAPI::fromJsonValue(m_company_id, json[QString("companyId")]);
    m_company_id_isSet = !json[QString("companyId")].isNull() && m_company_id_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_customer_owner_id_isValid = ::OpenAPI::fromJsonValue(m_customer_owner_id, json[QString("customerOwnerId")]);
    m_customer_owner_id_isSet = !json[QString("customerOwnerId")].isNull() && m_customer_owner_id_isValid;

    m_customer_owner_name_isValid = ::OpenAPI::fromJsonValue(m_customer_owner_name, json[QString("customerOwnerName")]);
    m_customer_owner_name_isSet = !json[QString("customerOwnerName")].isNull() && m_customer_owner_name_isValid;

    m_dd_number_isValid = ::OpenAPI::fromJsonValue(m_dd_number, json[QString("ddNumber")]);
    m_dd_number_isSet = !json[QString("ddNumber")].isNull() && m_dd_number_isValid;

    m_delivery_list_isValid = ::OpenAPI::fromJsonValue(m_delivery_list, json[QString("deliveryList")]);
    m_delivery_list_isSet = !json[QString("deliveryList")].isNull() && m_delivery_list_isValid;

    m_delivery_to_isValid = ::OpenAPI::fromJsonValue(m_delivery_to, json[QString("deliveryTo")]);
    m_delivery_to_isSet = !json[QString("deliveryTo")].isNull() && m_delivery_to_isValid;

    m_entry_date_isValid = ::OpenAPI::fromJsonValue(m_entry_date, json[QString("entryDate")]);
    m_entry_date_isSet = !json[QString("entryDate")].isNull() && m_entry_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_layout_type_isValid = ::OpenAPI::fromJsonValue(m_layout_type, json[QString("layoutType")]);
    m_layout_type_isSet = !json[QString("layoutType")].isNull() && m_layout_type_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_po_number_isValid = ::OpenAPI::fromJsonValue(m_po_number, json[QString("poNumber")]);
    m_po_number_isSet = !json[QString("poNumber")].isNull() && m_po_number_isValid;

    m_proc_date_isValid = ::OpenAPI::fromJsonValue(m_proc_date, json[QString("procDate")]);
    m_proc_date_isSet = !json[QString("procDate")].isNull() && m_proc_date_isValid;

    m_product_trans_isValid = ::OpenAPI::fromJsonValue(m_product_trans, json[QString("productTrans")]);
    m_product_trans_isSet = !json[QString("productTrans")].isNull() && m_product_trans_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_sale_invoice_id_isValid = ::OpenAPI::fromJsonValue(m_sale_invoice_id, json[QString("saleInvoiceId")]);
    m_sale_invoice_id_isSet = !json[QString("saleInvoiceId")].isNull() && m_sale_invoice_id_isValid;

    m_sale_rep_code_isValid = ::OpenAPI::fromJsonValue(m_sale_rep_code, json[QString("saleRepCode")]);
    m_sale_rep_code_isSet = !json[QString("saleRepCode")].isNull() && m_sale_rep_code_isValid;

    m_sale_rep_id_isValid = ::OpenAPI::fromJsonValue(m_sale_rep_id, json[QString("saleRepId")]);
    m_sale_rep_id_isSet = !json[QString("saleRepId")].isNull() && m_sale_rep_id_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("timeStamp")]);
    m_time_stamp_isSet = !json[QString("timeStamp")].isNull() && m_time_stamp_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_total_net_isValid = ::OpenAPI::fromJsonValue(m_total_net, json[QString("totalNet")]);
    m_total_net_isSet = !json[QString("totalNet")].isNull() && m_total_net_isValid;

    m_total_vat_isValid = ::OpenAPI::fromJsonValue(m_total_vat, json[QString("totalVat")]);
    m_total_vat_isSet = !json[QString("totalVat")].isNull() && m_total_vat_isValid;

    m_vat_type_id_isValid = ::OpenAPI::fromJsonValue(m_vat_type_id, json[QString("vatTypeId")]);
    m_vat_type_id_isSet = !json[QString("vatTypeId")].isNull() && m_vat_type_id_isValid;
}

QString OAIQuoteDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuoteDto::asJsonObject() const {
    QJsonObject obj;
    if (m_ac_code_isSet) {
        obj.insert(QString("acCode"), ::OpenAPI::toJsonValue(m_ac_code));
    }
    if (m_closed_date_isSet) {
        obj.insert(QString("closedDate"), ::OpenAPI::toJsonValue(m_closed_date));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_company_id_isSet) {
        obj.insert(QString("companyId"), ::OpenAPI::toJsonValue(m_company_id));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_customer_owner_id_isSet) {
        obj.insert(QString("customerOwnerId"), ::OpenAPI::toJsonValue(m_customer_owner_id));
    }
    if (m_customer_owner_name_isSet) {
        obj.insert(QString("customerOwnerName"), ::OpenAPI::toJsonValue(m_customer_owner_name));
    }
    if (m_dd_number_isSet) {
        obj.insert(QString("ddNumber"), ::OpenAPI::toJsonValue(m_dd_number));
    }
    if (m_delivery_list_isSet) {
        obj.insert(QString("deliveryList"), ::OpenAPI::toJsonValue(m_delivery_list));
    }
    if (m_delivery_to.size() > 0) {
        obj.insert(QString("deliveryTo"), ::OpenAPI::toJsonValue(m_delivery_to));
    }
    if (m_entry_date_isSet) {
        obj.insert(QString("entryDate"), ::OpenAPI::toJsonValue(m_entry_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_layout_type_isSet) {
        obj.insert(QString("layoutType"), ::OpenAPI::toJsonValue(m_layout_type));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_po_number_isSet) {
        obj.insert(QString("poNumber"), ::OpenAPI::toJsonValue(m_po_number));
    }
    if (m_proc_date_isSet) {
        obj.insert(QString("procDate"), ::OpenAPI::toJsonValue(m_proc_date));
    }
    if (m_product_trans.size() > 0) {
        obj.insert(QString("productTrans"), ::OpenAPI::toJsonValue(m_product_trans));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_sale_invoice_id_isSet) {
        obj.insert(QString("saleInvoiceId"), ::OpenAPI::toJsonValue(m_sale_invoice_id));
    }
    if (m_sale_rep_code_isSet) {
        obj.insert(QString("saleRepCode"), ::OpenAPI::toJsonValue(m_sale_rep_code));
    }
    if (m_sale_rep_id_isSet) {
        obj.insert(QString("saleRepId"), ::OpenAPI::toJsonValue(m_sale_rep_id));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("timeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_total_net_isSet) {
        obj.insert(QString("totalNet"), ::OpenAPI::toJsonValue(m_total_net));
    }
    if (m_total_vat_isSet) {
        obj.insert(QString("totalVat"), ::OpenAPI::toJsonValue(m_total_vat));
    }
    if (m_vat_type_id_isSet) {
        obj.insert(QString("vatTypeId"), ::OpenAPI::toJsonValue(m_vat_type_id));
    }
    return obj;
}

QString OAIQuoteDto::getAcCode() const {
    return m_ac_code;
}
void OAIQuoteDto::setAcCode(const QString &ac_code) {
    m_ac_code = ac_code;
    m_ac_code_isSet = true;
}

bool OAIQuoteDto::is_ac_code_Set() const{
    return m_ac_code_isSet;
}

bool OAIQuoteDto::is_ac_code_Valid() const{
    return m_ac_code_isValid;
}

QDateTime OAIQuoteDto::getClosedDate() const {
    return m_closed_date;
}
void OAIQuoteDto::setClosedDate(const QDateTime &closed_date) {
    m_closed_date = closed_date;
    m_closed_date_isSet = true;
}

bool OAIQuoteDto::is_closed_date_Set() const{
    return m_closed_date_isSet;
}

bool OAIQuoteDto::is_closed_date_Valid() const{
    return m_closed_date_isValid;
}

QString OAIQuoteDto::getComments() const {
    return m_comments;
}
void OAIQuoteDto::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIQuoteDto::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIQuoteDto::is_comments_Valid() const{
    return m_comments_isValid;
}

qint64 OAIQuoteDto::getCompanyId() const {
    return m_company_id;
}
void OAIQuoteDto::setCompanyId(const qint64 &company_id) {
    m_company_id = company_id;
    m_company_id_isSet = true;
}

bool OAIQuoteDto::is_company_id_Set() const{
    return m_company_id_isSet;
}

bool OAIQuoteDto::is_company_id_Valid() const{
    return m_company_id_isValid;
}

QList<OAIAcudfValueDto> OAIQuoteDto::getCustomFields() const {
    return m_custom_fields;
}
void OAIQuoteDto::setCustomFields(const QList<OAIAcudfValueDto> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIQuoteDto::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIQuoteDto::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

qint64 OAIQuoteDto::getCustomerOwnerId() const {
    return m_customer_owner_id;
}
void OAIQuoteDto::setCustomerOwnerId(const qint64 &customer_owner_id) {
    m_customer_owner_id = customer_owner_id;
    m_customer_owner_id_isSet = true;
}

bool OAIQuoteDto::is_customer_owner_id_Set() const{
    return m_customer_owner_id_isSet;
}

bool OAIQuoteDto::is_customer_owner_id_Valid() const{
    return m_customer_owner_id_isValid;
}

QString OAIQuoteDto::getCustomerOwnerName() const {
    return m_customer_owner_name;
}
void OAIQuoteDto::setCustomerOwnerName(const QString &customer_owner_name) {
    m_customer_owner_name = customer_owner_name;
    m_customer_owner_name_isSet = true;
}

bool OAIQuoteDto::is_customer_owner_name_Set() const{
    return m_customer_owner_name_isSet;
}

bool OAIQuoteDto::is_customer_owner_name_Valid() const{
    return m_customer_owner_name_isValid;
}

QString OAIQuoteDto::getDdNumber() const {
    return m_dd_number;
}
void OAIQuoteDto::setDdNumber(const QString &dd_number) {
    m_dd_number = dd_number;
    m_dd_number_isSet = true;
}

bool OAIQuoteDto::is_dd_number_Set() const{
    return m_dd_number_isSet;
}

bool OAIQuoteDto::is_dd_number_Valid() const{
    return m_dd_number_isValid;
}

QString OAIQuoteDto::getDeliveryList() const {
    return m_delivery_list;
}
void OAIQuoteDto::setDeliveryList(const QString &delivery_list) {
    m_delivery_list = delivery_list;
    m_delivery_list_isSet = true;
}

bool OAIQuoteDto::is_delivery_list_Set() const{
    return m_delivery_list_isSet;
}

bool OAIQuoteDto::is_delivery_list_Valid() const{
    return m_delivery_list_isValid;
}

QList<QString> OAIQuoteDto::getDeliveryTo() const {
    return m_delivery_to;
}
void OAIQuoteDto::setDeliveryTo(const QList<QString> &delivery_to) {
    m_delivery_to = delivery_to;
    m_delivery_to_isSet = true;
}

bool OAIQuoteDto::is_delivery_to_Set() const{
    return m_delivery_to_isSet;
}

bool OAIQuoteDto::is_delivery_to_Valid() const{
    return m_delivery_to_isValid;
}

QDateTime OAIQuoteDto::getEntryDate() const {
    return m_entry_date;
}
void OAIQuoteDto::setEntryDate(const QDateTime &entry_date) {
    m_entry_date = entry_date;
    m_entry_date_isSet = true;
}

bool OAIQuoteDto::is_entry_date_Set() const{
    return m_entry_date_isSet;
}

bool OAIQuoteDto::is_entry_date_Valid() const{
    return m_entry_date_isValid;
}

qint64 OAIQuoteDto::getId() const {
    return m_id;
}
void OAIQuoteDto::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIQuoteDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAIQuoteDto::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIQuoteDto::getLayoutType() const {
    return m_layout_type;
}
void OAIQuoteDto::setLayoutType(const qint32 &layout_type) {
    m_layout_type = layout_type;
    m_layout_type_isSet = true;
}

bool OAIQuoteDto::is_layout_type_Set() const{
    return m_layout_type_isSet;
}

bool OAIQuoteDto::is_layout_type_Valid() const{
    return m_layout_type_isValid;
}

QString OAIQuoteDto::getNote() const {
    return m_note;
}
void OAIQuoteDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIQuoteDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAIQuoteDto::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIQuoteDto::getPoNumber() const {
    return m_po_number;
}
void OAIQuoteDto::setPoNumber(const QString &po_number) {
    m_po_number = po_number;
    m_po_number_isSet = true;
}

bool OAIQuoteDto::is_po_number_Set() const{
    return m_po_number_isSet;
}

bool OAIQuoteDto::is_po_number_Valid() const{
    return m_po_number_isValid;
}

QDateTime OAIQuoteDto::getProcDate() const {
    return m_proc_date;
}
void OAIQuoteDto::setProcDate(const QDateTime &proc_date) {
    m_proc_date = proc_date;
    m_proc_date_isSet = true;
}

bool OAIQuoteDto::is_proc_date_Set() const{
    return m_proc_date_isSet;
}

bool OAIQuoteDto::is_proc_date_Valid() const{
    return m_proc_date_isValid;
}

QList<OAIQuoteProductTransDto> OAIQuoteDto::getProductTrans() const {
    return m_product_trans;
}
void OAIQuoteDto::setProductTrans(const QList<OAIQuoteProductTransDto> &product_trans) {
    m_product_trans = product_trans;
    m_product_trans_isSet = true;
}

bool OAIQuoteDto::is_product_trans_Set() const{
    return m_product_trans_isSet;
}

bool OAIQuoteDto::is_product_trans_Valid() const{
    return m_product_trans_isValid;
}

QString OAIQuoteDto::getReference() const {
    return m_reference;
}
void OAIQuoteDto::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIQuoteDto::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIQuoteDto::is_reference_Valid() const{
    return m_reference_isValid;
}

qint64 OAIQuoteDto::getSaleInvoiceId() const {
    return m_sale_invoice_id;
}
void OAIQuoteDto::setSaleInvoiceId(const qint64 &sale_invoice_id) {
    m_sale_invoice_id = sale_invoice_id;
    m_sale_invoice_id_isSet = true;
}

bool OAIQuoteDto::is_sale_invoice_id_Set() const{
    return m_sale_invoice_id_isSet;
}

bool OAIQuoteDto::is_sale_invoice_id_Valid() const{
    return m_sale_invoice_id_isValid;
}

QString OAIQuoteDto::getSaleRepCode() const {
    return m_sale_rep_code;
}
void OAIQuoteDto::setSaleRepCode(const QString &sale_rep_code) {
    m_sale_rep_code = sale_rep_code;
    m_sale_rep_code_isSet = true;
}

bool OAIQuoteDto::is_sale_rep_code_Set() const{
    return m_sale_rep_code_isSet;
}

bool OAIQuoteDto::is_sale_rep_code_Valid() const{
    return m_sale_rep_code_isValid;
}

qint64 OAIQuoteDto::getSaleRepId() const {
    return m_sale_rep_id;
}
void OAIQuoteDto::setSaleRepId(const qint64 &sale_rep_id) {
    m_sale_rep_id = sale_rep_id;
    m_sale_rep_id_isSet = true;
}

bool OAIQuoteDto::is_sale_rep_id_Set() const{
    return m_sale_rep_id_isSet;
}

bool OAIQuoteDto::is_sale_rep_id_Valid() const{
    return m_sale_rep_id_isValid;
}

QByteArray OAIQuoteDto::getTimeStamp() const {
    return m_time_stamp;
}
void OAIQuoteDto::setTimeStamp(const QByteArray &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIQuoteDto::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIQuoteDto::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

double OAIQuoteDto::getTotal() const {
    return m_total;
}
void OAIQuoteDto::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIQuoteDto::is_total_Set() const{
    return m_total_isSet;
}

bool OAIQuoteDto::is_total_Valid() const{
    return m_total_isValid;
}

double OAIQuoteDto::getTotalNet() const {
    return m_total_net;
}
void OAIQuoteDto::setTotalNet(const double &total_net) {
    m_total_net = total_net;
    m_total_net_isSet = true;
}

bool OAIQuoteDto::is_total_net_Set() const{
    return m_total_net_isSet;
}

bool OAIQuoteDto::is_total_net_Valid() const{
    return m_total_net_isValid;
}

double OAIQuoteDto::getTotalVat() const {
    return m_total_vat;
}
void OAIQuoteDto::setTotalVat(const double &total_vat) {
    m_total_vat = total_vat;
    m_total_vat_isSet = true;
}

bool OAIQuoteDto::is_total_vat_Set() const{
    return m_total_vat_isSet;
}

bool OAIQuoteDto::is_total_vat_Valid() const{
    return m_total_vat_isValid;
}

qint64 OAIQuoteDto::getVatTypeId() const {
    return m_vat_type_id;
}
void OAIQuoteDto::setVatTypeId(const qint64 &vat_type_id) {
    m_vat_type_id = vat_type_id;
    m_vat_type_id_isSet = true;
}

bool OAIQuoteDto::is_vat_type_id_Set() const{
    return m_vat_type_id_isSet;
}

bool OAIQuoteDto::is_vat_type_id_Valid() const{
    return m_vat_type_id_isValid;
}

bool OAIQuoteDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ac_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_owner_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dd_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_layout_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proc_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_trans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_invoice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_rep_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_rep_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_net_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuoteDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
