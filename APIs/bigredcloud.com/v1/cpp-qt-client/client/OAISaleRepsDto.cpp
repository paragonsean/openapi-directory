/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISaleRepsDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISaleRepsDto::OAISaleRepsDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISaleRepsDto::OAISaleRepsDto() {
    this->initializeModel();
}

OAISaleRepsDto::~OAISaleRepsDto() {}

void OAISaleRepsDto::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_company_id_isSet = false;
    m_company_id_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;
}

void OAISaleRepsDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISaleRepsDto::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_company_id_isValid = ::OpenAPI::fromJsonValue(m_company_id, json[QString("companyId")]);
    m_company_id_isSet = !json[QString("companyId")].isNull() && m_company_id_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("timeStamp")]);
    m_time_stamp_isSet = !json[QString("timeStamp")].isNull() && m_time_stamp_isValid;
}

QString OAISaleRepsDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISaleRepsDto::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_company_id_isSet) {
        obj.insert(QString("companyId"), ::OpenAPI::toJsonValue(m_company_id));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("timeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    return obj;
}

QString OAISaleRepsDto::getCode() const {
    return m_code;
}
void OAISaleRepsDto::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAISaleRepsDto::is_code_Set() const{
    return m_code_isSet;
}

bool OAISaleRepsDto::is_code_Valid() const{
    return m_code_isValid;
}

qint64 OAISaleRepsDto::getCompanyId() const {
    return m_company_id;
}
void OAISaleRepsDto::setCompanyId(const qint64 &company_id) {
    m_company_id = company_id;
    m_company_id_isSet = true;
}

bool OAISaleRepsDto::is_company_id_Set() const{
    return m_company_id_isSet;
}

bool OAISaleRepsDto::is_company_id_Valid() const{
    return m_company_id_isValid;
}

QString OAISaleRepsDto::getEmail() const {
    return m_email;
}
void OAISaleRepsDto::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISaleRepsDto::is_email_Set() const{
    return m_email_isSet;
}

bool OAISaleRepsDto::is_email_Valid() const{
    return m_email_isValid;
}

qint64 OAISaleRepsDto::getId() const {
    return m_id;
}
void OAISaleRepsDto::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISaleRepsDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAISaleRepsDto::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISaleRepsDto::getName() const {
    return m_name;
}
void OAISaleRepsDto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISaleRepsDto::is_name_Set() const{
    return m_name_isSet;
}

bool OAISaleRepsDto::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISaleRepsDto::getPhone() const {
    return m_phone;
}
void OAISaleRepsDto::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAISaleRepsDto::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAISaleRepsDto::is_phone_Valid() const{
    return m_phone_isValid;
}

QByteArray OAISaleRepsDto::getTimeStamp() const {
    return m_time_stamp;
}
void OAISaleRepsDto::setTimeStamp(const QByteArray &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAISaleRepsDto::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAISaleRepsDto::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

bool OAISaleRepsDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISaleRepsDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
