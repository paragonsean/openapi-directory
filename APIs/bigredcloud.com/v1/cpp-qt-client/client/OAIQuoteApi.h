/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIQuoteApi_H
#define OAI_OAIQuoteApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatchItem_QuoteDto_.h"
#include "OAIObject.h"
#include "OAIPageResult_QuoteDto_.h"
#include "OAIQuoteDto.h"
#include "OAIQuoteGeneratingInvoiceDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIQuoteApi : public QObject {
    Q_OBJECT

public:
    OAIQuoteApi(const int timeOut = 0);
    ~OAIQuoteApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void quoteClose(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  timestamp QString [required]
    */
    virtual void quoteDelete(const qint64 &id, const QString &timestamp);


    virtual void quoteGet();

    /**
    * @param[in]  oai_quote_dto OAIQuoteDto [required]
    */
    virtual void quotePost(const OAIQuoteDto &oai_quote_dto);

    /**
    * @param[in]  oai_quote_dto OAIQuoteDto [required]
    */
    virtual void quotePostCreateQuoteWithGeneratingReference(const OAIQuoteDto &oai_quote_dto);

    /**
    * @param[in]  oai_quote_generating_invoice_dto OAIQuoteGeneratingInvoiceDto [required]
    */
    virtual void quotePostGenerateSaleInvoice(const OAIQuoteGeneratingInvoiceDto &oai_quote_generating_invoice_dto);

    /**
    * @param[in]  oai_batch_item_quote_dto_ QList<OAIBatchItem_QuoteDto_> [required]
    */
    virtual void quoteProcessBatch(const QList<OAIBatchItem_QuoteDto_> &oai_batch_item_quote_dto_);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_quote_dto OAIQuoteDto [required]
    */
    virtual void quotePut(const qint64 &id, const OAIQuoteDto &oai_quote_dto);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void quoteReopen(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void v1QuotesIdGet(const qint64 &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void quoteCloseCallback(OAIHttpRequestWorker *worker);
    void quoteDeleteCallback(OAIHttpRequestWorker *worker);
    void quoteGetCallback(OAIHttpRequestWorker *worker);
    void quotePostCallback(OAIHttpRequestWorker *worker);
    void quotePostCreateQuoteWithGeneratingReferenceCallback(OAIHttpRequestWorker *worker);
    void quotePostGenerateSaleInvoiceCallback(OAIHttpRequestWorker *worker);
    void quoteProcessBatchCallback(OAIHttpRequestWorker *worker);
    void quotePutCallback(OAIHttpRequestWorker *worker);
    void quoteReopenCallback(OAIHttpRequestWorker *worker);
    void v1QuotesIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void quoteCloseSignal(OAIObject summary);
    void quoteDeleteSignal(OAIObject summary);
    void quoteGetSignal(OAIPageResult_QuoteDto_ summary);
    void quotePostSignal(OAIObject summary);
    void quotePostCreateQuoteWithGeneratingReferenceSignal(OAIObject summary);
    void quotePostGenerateSaleInvoiceSignal(OAIObject summary);
    void quoteProcessBatchSignal(OAIObject summary);
    void quotePutSignal(OAIObject summary);
    void quoteReopenSignal(OAIObject summary);
    void v1QuotesIdGetSignal(OAIQuoteDto summary);


    void quoteCloseSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void quoteDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void quoteGetSignalFull(OAIHttpRequestWorker *worker, OAIPageResult_QuoteDto_ summary);
    void quotePostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void quotePostCreateQuoteWithGeneratingReferenceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void quotePostGenerateSaleInvoiceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void quoteProcessBatchSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void quotePutSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void quoteReopenSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void v1QuotesIdGetSignalFull(OAIHttpRequestWorker *worker, OAIQuoteDto summary);

    Q_DECL_DEPRECATED_X("Use quoteCloseSignalError() instead")
    void quoteCloseSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteCloseSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteDeleteSignalError() instead")
    void quoteDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteGetSignalError() instead")
    void quoteGetSignalE(OAIPageResult_QuoteDto_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteGetSignalError(OAIPageResult_QuoteDto_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quotePostSignalError() instead")
    void quotePostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void quotePostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quotePostCreateQuoteWithGeneratingReferenceSignalError() instead")
    void quotePostCreateQuoteWithGeneratingReferenceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void quotePostCreateQuoteWithGeneratingReferenceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quotePostGenerateSaleInvoiceSignalError() instead")
    void quotePostGenerateSaleInvoiceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void quotePostGenerateSaleInvoiceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteProcessBatchSignalError() instead")
    void quoteProcessBatchSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteProcessBatchSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quotePutSignalError() instead")
    void quotePutSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void quotePutSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteReopenSignalError() instead")
    void quoteReopenSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteReopenSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1QuotesIdGetSignalError() instead")
    void v1QuotesIdGetSignalE(OAIQuoteDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1QuotesIdGetSignalError(OAIQuoteDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use quoteCloseSignalErrorFull() instead")
    void quoteCloseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteCloseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteDeleteSignalErrorFull() instead")
    void quoteDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteGetSignalErrorFull() instead")
    void quoteGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quotePostSignalErrorFull() instead")
    void quotePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quotePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quotePostCreateQuoteWithGeneratingReferenceSignalErrorFull() instead")
    void quotePostCreateQuoteWithGeneratingReferenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quotePostCreateQuoteWithGeneratingReferenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quotePostGenerateSaleInvoiceSignalErrorFull() instead")
    void quotePostGenerateSaleInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quotePostGenerateSaleInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteProcessBatchSignalErrorFull() instead")
    void quoteProcessBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteProcessBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quotePutSignalErrorFull() instead")
    void quotePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quotePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteReopenSignalErrorFull() instead")
    void quoteReopenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteReopenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1QuotesIdGetSignalErrorFull() instead")
    void v1QuotesIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1QuotesIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
