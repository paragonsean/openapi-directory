/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompanyOptionDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompanyOptionDto::OAICompanyOptionDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompanyOptionDto::OAICompanyOptionDto() {
    this->initializeModel();
}

OAICompanyOptionDto::~OAICompanyOptionDto() {}

void OAICompanyOptionDto::initializeModel() {

    m_allow_entry_of_gross_price_in_invoicing_isSet = false;
    m_allow_entry_of_gross_price_in_invoicing_isValid = false;

    m_credit_input_for_reverse_charge_vat_isSet = false;
    m_credit_input_for_reverse_charge_vat_isValid = false;

    m_credit_note_journal_ageing_name_isSet = false;
    m_credit_note_journal_ageing_name_isValid = false;

    m_credit_note_journal_ageing_value_isSet = false;
    m_credit_note_journal_ageing_value_isValid = false;

    m_discrepancy_allowed_isSet = false;
    m_discrepancy_allowed_isValid = false;

    m_enable_vocr_reporting_isSet = false;
    m_enable_vocr_reporting_isValid = false;

    m_margin_vat_scheme_isSet = false;
    m_margin_vat_scheme_isValid = false;

    m_print_os_items_only_isSet = false;
    m_print_os_items_only_isValid = false;

    m_purchases_vat_analysis_type_isSet = false;
    m_purchases_vat_analysis_type_isValid = false;

    m_sales_vat_analysis_type_isSet = false;
    m_sales_vat_analysis_type_isValid = false;

    m_use_allocations_isSet = false;
    m_use_allocations_isValid = false;

    m_use_nominal_isSet = false;
    m_use_nominal_isValid = false;

    m_use_nominal_code_isSet = false;
    m_use_nominal_code_isValid = false;

    m_vocr_setting_value_isSet = false;
    m_vocr_setting_value_isValid = false;
}

void OAICompanyOptionDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompanyOptionDto::fromJsonObject(QJsonObject json) {

    m_allow_entry_of_gross_price_in_invoicing_isValid = ::OpenAPI::fromJsonValue(m_allow_entry_of_gross_price_in_invoicing, json[QString("allowEntryOfGrossPriceInInvoicing")]);
    m_allow_entry_of_gross_price_in_invoicing_isSet = !json[QString("allowEntryOfGrossPriceInInvoicing")].isNull() && m_allow_entry_of_gross_price_in_invoicing_isValid;

    m_credit_input_for_reverse_charge_vat_isValid = ::OpenAPI::fromJsonValue(m_credit_input_for_reverse_charge_vat, json[QString("creditInputForReverseChargeVAT")]);
    m_credit_input_for_reverse_charge_vat_isSet = !json[QString("creditInputForReverseChargeVAT")].isNull() && m_credit_input_for_reverse_charge_vat_isValid;

    m_credit_note_journal_ageing_name_isValid = ::OpenAPI::fromJsonValue(m_credit_note_journal_ageing_name, json[QString("creditNoteJournalAgeingName")]);
    m_credit_note_journal_ageing_name_isSet = !json[QString("creditNoteJournalAgeingName")].isNull() && m_credit_note_journal_ageing_name_isValid;

    m_credit_note_journal_ageing_value_isValid = ::OpenAPI::fromJsonValue(m_credit_note_journal_ageing_value, json[QString("creditNoteJournalAgeingValue")]);
    m_credit_note_journal_ageing_value_isSet = !json[QString("creditNoteJournalAgeingValue")].isNull() && m_credit_note_journal_ageing_value_isValid;

    m_discrepancy_allowed_isValid = ::OpenAPI::fromJsonValue(m_discrepancy_allowed, json[QString("discrepancyAllowed")]);
    m_discrepancy_allowed_isSet = !json[QString("discrepancyAllowed")].isNull() && m_discrepancy_allowed_isValid;

    m_enable_vocr_reporting_isValid = ::OpenAPI::fromJsonValue(m_enable_vocr_reporting, json[QString("enableVOCRReporting")]);
    m_enable_vocr_reporting_isSet = !json[QString("enableVOCRReporting")].isNull() && m_enable_vocr_reporting_isValid;

    m_margin_vat_scheme_isValid = ::OpenAPI::fromJsonValue(m_margin_vat_scheme, json[QString("marginVatScheme")]);
    m_margin_vat_scheme_isSet = !json[QString("marginVatScheme")].isNull() && m_margin_vat_scheme_isValid;

    m_print_os_items_only_isValid = ::OpenAPI::fromJsonValue(m_print_os_items_only, json[QString("printOSItemsOnly")]);
    m_print_os_items_only_isSet = !json[QString("printOSItemsOnly")].isNull() && m_print_os_items_only_isValid;

    m_purchases_vat_analysis_type_isValid = ::OpenAPI::fromJsonValue(m_purchases_vat_analysis_type, json[QString("purchasesVatAnalysisType")]);
    m_purchases_vat_analysis_type_isSet = !json[QString("purchasesVatAnalysisType")].isNull() && m_purchases_vat_analysis_type_isValid;

    m_sales_vat_analysis_type_isValid = ::OpenAPI::fromJsonValue(m_sales_vat_analysis_type, json[QString("salesVatAnalysisType")]);
    m_sales_vat_analysis_type_isSet = !json[QString("salesVatAnalysisType")].isNull() && m_sales_vat_analysis_type_isValid;

    m_use_allocations_isValid = ::OpenAPI::fromJsonValue(m_use_allocations, json[QString("useAllocations")]);
    m_use_allocations_isSet = !json[QString("useAllocations")].isNull() && m_use_allocations_isValid;

    m_use_nominal_isValid = ::OpenAPI::fromJsonValue(m_use_nominal, json[QString("useNominal")]);
    m_use_nominal_isSet = !json[QString("useNominal")].isNull() && m_use_nominal_isValid;

    m_use_nominal_code_isValid = ::OpenAPI::fromJsonValue(m_use_nominal_code, json[QString("useNominalCode")]);
    m_use_nominal_code_isSet = !json[QString("useNominalCode")].isNull() && m_use_nominal_code_isValid;

    m_vocr_setting_value_isValid = ::OpenAPI::fromJsonValue(m_vocr_setting_value, json[QString("vocrSettingValue")]);
    m_vocr_setting_value_isSet = !json[QString("vocrSettingValue")].isNull() && m_vocr_setting_value_isValid;
}

QString OAICompanyOptionDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompanyOptionDto::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_entry_of_gross_price_in_invoicing_isSet) {
        obj.insert(QString("allowEntryOfGrossPriceInInvoicing"), ::OpenAPI::toJsonValue(m_allow_entry_of_gross_price_in_invoicing));
    }
    if (m_credit_input_for_reverse_charge_vat_isSet) {
        obj.insert(QString("creditInputForReverseChargeVAT"), ::OpenAPI::toJsonValue(m_credit_input_for_reverse_charge_vat));
    }
    if (m_credit_note_journal_ageing_name_isSet) {
        obj.insert(QString("creditNoteJournalAgeingName"), ::OpenAPI::toJsonValue(m_credit_note_journal_ageing_name));
    }
    if (m_credit_note_journal_ageing_value_isSet) {
        obj.insert(QString("creditNoteJournalAgeingValue"), ::OpenAPI::toJsonValue(m_credit_note_journal_ageing_value));
    }
    if (m_discrepancy_allowed_isSet) {
        obj.insert(QString("discrepancyAllowed"), ::OpenAPI::toJsonValue(m_discrepancy_allowed));
    }
    if (m_enable_vocr_reporting_isSet) {
        obj.insert(QString("enableVOCRReporting"), ::OpenAPI::toJsonValue(m_enable_vocr_reporting));
    }
    if (m_margin_vat_scheme_isSet) {
        obj.insert(QString("marginVatScheme"), ::OpenAPI::toJsonValue(m_margin_vat_scheme));
    }
    if (m_print_os_items_only_isSet) {
        obj.insert(QString("printOSItemsOnly"), ::OpenAPI::toJsonValue(m_print_os_items_only));
    }
    if (m_purchases_vat_analysis_type_isSet) {
        obj.insert(QString("purchasesVatAnalysisType"), ::OpenAPI::toJsonValue(m_purchases_vat_analysis_type));
    }
    if (m_sales_vat_analysis_type_isSet) {
        obj.insert(QString("salesVatAnalysisType"), ::OpenAPI::toJsonValue(m_sales_vat_analysis_type));
    }
    if (m_use_allocations_isSet) {
        obj.insert(QString("useAllocations"), ::OpenAPI::toJsonValue(m_use_allocations));
    }
    if (m_use_nominal_isSet) {
        obj.insert(QString("useNominal"), ::OpenAPI::toJsonValue(m_use_nominal));
    }
    if (m_use_nominal_code_isSet) {
        obj.insert(QString("useNominalCode"), ::OpenAPI::toJsonValue(m_use_nominal_code));
    }
    if (m_vocr_setting_value_isSet) {
        obj.insert(QString("vocrSettingValue"), ::OpenAPI::toJsonValue(m_vocr_setting_value));
    }
    return obj;
}

bool OAICompanyOptionDto::isAllowEntryOfGrossPriceInInvoicing() const {
    return m_allow_entry_of_gross_price_in_invoicing;
}
void OAICompanyOptionDto::setAllowEntryOfGrossPriceInInvoicing(const bool &allow_entry_of_gross_price_in_invoicing) {
    m_allow_entry_of_gross_price_in_invoicing = allow_entry_of_gross_price_in_invoicing;
    m_allow_entry_of_gross_price_in_invoicing_isSet = true;
}

bool OAICompanyOptionDto::is_allow_entry_of_gross_price_in_invoicing_Set() const{
    return m_allow_entry_of_gross_price_in_invoicing_isSet;
}

bool OAICompanyOptionDto::is_allow_entry_of_gross_price_in_invoicing_Valid() const{
    return m_allow_entry_of_gross_price_in_invoicing_isValid;
}

bool OAICompanyOptionDto::isCreditInputForReverseChargeVat() const {
    return m_credit_input_for_reverse_charge_vat;
}
void OAICompanyOptionDto::setCreditInputForReverseChargeVat(const bool &credit_input_for_reverse_charge_vat) {
    m_credit_input_for_reverse_charge_vat = credit_input_for_reverse_charge_vat;
    m_credit_input_for_reverse_charge_vat_isSet = true;
}

bool OAICompanyOptionDto::is_credit_input_for_reverse_charge_vat_Set() const{
    return m_credit_input_for_reverse_charge_vat_isSet;
}

bool OAICompanyOptionDto::is_credit_input_for_reverse_charge_vat_Valid() const{
    return m_credit_input_for_reverse_charge_vat_isValid;
}

QString OAICompanyOptionDto::getCreditNoteJournalAgeingName() const {
    return m_credit_note_journal_ageing_name;
}
void OAICompanyOptionDto::setCreditNoteJournalAgeingName(const QString &credit_note_journal_ageing_name) {
    m_credit_note_journal_ageing_name = credit_note_journal_ageing_name;
    m_credit_note_journal_ageing_name_isSet = true;
}

bool OAICompanyOptionDto::is_credit_note_journal_ageing_name_Set() const{
    return m_credit_note_journal_ageing_name_isSet;
}

bool OAICompanyOptionDto::is_credit_note_journal_ageing_name_Valid() const{
    return m_credit_note_journal_ageing_name_isValid;
}

qint32 OAICompanyOptionDto::getCreditNoteJournalAgeingValue() const {
    return m_credit_note_journal_ageing_value;
}
void OAICompanyOptionDto::setCreditNoteJournalAgeingValue(const qint32 &credit_note_journal_ageing_value) {
    m_credit_note_journal_ageing_value = credit_note_journal_ageing_value;
    m_credit_note_journal_ageing_value_isSet = true;
}

bool OAICompanyOptionDto::is_credit_note_journal_ageing_value_Set() const{
    return m_credit_note_journal_ageing_value_isSet;
}

bool OAICompanyOptionDto::is_credit_note_journal_ageing_value_Valid() const{
    return m_credit_note_journal_ageing_value_isValid;
}

double OAICompanyOptionDto::getDiscrepancyAllowed() const {
    return m_discrepancy_allowed;
}
void OAICompanyOptionDto::setDiscrepancyAllowed(const double &discrepancy_allowed) {
    m_discrepancy_allowed = discrepancy_allowed;
    m_discrepancy_allowed_isSet = true;
}

bool OAICompanyOptionDto::is_discrepancy_allowed_Set() const{
    return m_discrepancy_allowed_isSet;
}

bool OAICompanyOptionDto::is_discrepancy_allowed_Valid() const{
    return m_discrepancy_allowed_isValid;
}

bool OAICompanyOptionDto::isEnableVocrReporting() const {
    return m_enable_vocr_reporting;
}
void OAICompanyOptionDto::setEnableVocrReporting(const bool &enable_vocr_reporting) {
    m_enable_vocr_reporting = enable_vocr_reporting;
    m_enable_vocr_reporting_isSet = true;
}

bool OAICompanyOptionDto::is_enable_vocr_reporting_Set() const{
    return m_enable_vocr_reporting_isSet;
}

bool OAICompanyOptionDto::is_enable_vocr_reporting_Valid() const{
    return m_enable_vocr_reporting_isValid;
}

bool OAICompanyOptionDto::isMarginVatScheme() const {
    return m_margin_vat_scheme;
}
void OAICompanyOptionDto::setMarginVatScheme(const bool &margin_vat_scheme) {
    m_margin_vat_scheme = margin_vat_scheme;
    m_margin_vat_scheme_isSet = true;
}

bool OAICompanyOptionDto::is_margin_vat_scheme_Set() const{
    return m_margin_vat_scheme_isSet;
}

bool OAICompanyOptionDto::is_margin_vat_scheme_Valid() const{
    return m_margin_vat_scheme_isValid;
}

bool OAICompanyOptionDto::isPrintOsItemsOnly() const {
    return m_print_os_items_only;
}
void OAICompanyOptionDto::setPrintOsItemsOnly(const bool &print_os_items_only) {
    m_print_os_items_only = print_os_items_only;
    m_print_os_items_only_isSet = true;
}

bool OAICompanyOptionDto::is_print_os_items_only_Set() const{
    return m_print_os_items_only_isSet;
}

bool OAICompanyOptionDto::is_print_os_items_only_Valid() const{
    return m_print_os_items_only_isValid;
}

qint64 OAICompanyOptionDto::getPurchasesVatAnalysisType() const {
    return m_purchases_vat_analysis_type;
}
void OAICompanyOptionDto::setPurchasesVatAnalysisType(const qint64 &purchases_vat_analysis_type) {
    m_purchases_vat_analysis_type = purchases_vat_analysis_type;
    m_purchases_vat_analysis_type_isSet = true;
}

bool OAICompanyOptionDto::is_purchases_vat_analysis_type_Set() const{
    return m_purchases_vat_analysis_type_isSet;
}

bool OAICompanyOptionDto::is_purchases_vat_analysis_type_Valid() const{
    return m_purchases_vat_analysis_type_isValid;
}

qint64 OAICompanyOptionDto::getSalesVatAnalysisType() const {
    return m_sales_vat_analysis_type;
}
void OAICompanyOptionDto::setSalesVatAnalysisType(const qint64 &sales_vat_analysis_type) {
    m_sales_vat_analysis_type = sales_vat_analysis_type;
    m_sales_vat_analysis_type_isSet = true;
}

bool OAICompanyOptionDto::is_sales_vat_analysis_type_Set() const{
    return m_sales_vat_analysis_type_isSet;
}

bool OAICompanyOptionDto::is_sales_vat_analysis_type_Valid() const{
    return m_sales_vat_analysis_type_isValid;
}

bool OAICompanyOptionDto::isUseAllocations() const {
    return m_use_allocations;
}
void OAICompanyOptionDto::setUseAllocations(const bool &use_allocations) {
    m_use_allocations = use_allocations;
    m_use_allocations_isSet = true;
}

bool OAICompanyOptionDto::is_use_allocations_Set() const{
    return m_use_allocations_isSet;
}

bool OAICompanyOptionDto::is_use_allocations_Valid() const{
    return m_use_allocations_isValid;
}

bool OAICompanyOptionDto::isUseNominal() const {
    return m_use_nominal;
}
void OAICompanyOptionDto::setUseNominal(const bool &use_nominal) {
    m_use_nominal = use_nominal;
    m_use_nominal_isSet = true;
}

bool OAICompanyOptionDto::is_use_nominal_Set() const{
    return m_use_nominal_isSet;
}

bool OAICompanyOptionDto::is_use_nominal_Valid() const{
    return m_use_nominal_isValid;
}

bool OAICompanyOptionDto::isUseNominalCode() const {
    return m_use_nominal_code;
}
void OAICompanyOptionDto::setUseNominalCode(const bool &use_nominal_code) {
    m_use_nominal_code = use_nominal_code;
    m_use_nominal_code_isSet = true;
}

bool OAICompanyOptionDto::is_use_nominal_code_Set() const{
    return m_use_nominal_code_isSet;
}

bool OAICompanyOptionDto::is_use_nominal_code_Valid() const{
    return m_use_nominal_code_isValid;
}

bool OAICompanyOptionDto::isVocrSettingValue() const {
    return m_vocr_setting_value;
}
void OAICompanyOptionDto::setVocrSettingValue(const bool &vocr_setting_value) {
    m_vocr_setting_value = vocr_setting_value;
    m_vocr_setting_value_isSet = true;
}

bool OAICompanyOptionDto::is_vocr_setting_value_Set() const{
    return m_vocr_setting_value_isSet;
}

bool OAICompanyOptionDto::is_vocr_setting_value_Valid() const{
    return m_vocr_setting_value_isValid;
}

bool OAICompanyOptionDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_entry_of_gross_price_in_invoicing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_input_for_reverse_charge_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_note_journal_ageing_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_note_journal_ageing_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discrepancy_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_vocr_reporting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_vat_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_print_os_items_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchases_vat_analysis_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_vat_analysis_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_allocations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_nominal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_nominal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vocr_setting_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompanyOptionDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
