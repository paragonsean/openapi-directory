/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProductTranQueryDto.h
 *
 * 
 */

#ifndef OAIProductTranQueryDto_H
#define OAIProductTranQueryDto_H

#include <QJsonObject>

#include "OAIAcEntryDto.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAcEntryDto;

class OAIProductTranQueryDto : public OAIObject {
public:
    OAIProductTranQueryDto();
    OAIProductTranQueryDto(QString json);
    ~OAIProductTranQueryDto() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAcEntryDto> getAcEntries() const;
    void setAcEntries(const QList<OAIAcEntryDto> &ac_entries);
    bool is_ac_entries_Set() const;
    bool is_ac_entries_Valid() const;

    double getAmount() const;
    void setAmount(const double &amount);
    bool is_amount_Set() const;
    bool is_amount_Valid() const;

    double getAmountNet() const;
    void setAmountNet(const double &amount_net);
    bool is_amount_net_Set() const;
    bool is_amount_net_Valid() const;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    double getPercentage() const;
    void setPercentage(const double &percentage);
    bool is_percentage_Set() const;
    bool is_percentage_Valid() const;

    QString getProductCode() const;
    void setProductCode(const QString &product_code);
    bool is_product_code_Set() const;
    bool is_product_code_Valid() const;

    qint64 getProductId() const;
    void setProductId(const qint64 &product_id);
    bool is_product_id_Set() const;
    bool is_product_id_Valid() const;

    double getQuantity() const;
    void setQuantity(const double &quantity);
    bool is_quantity_Set() const;
    bool is_quantity_Valid() const;

    QList<QString> getTranNotes() const;
    void setTranNotes(const QList<QString> &tran_notes);
    bool is_tran_notes_Set() const;
    bool is_tran_notes_Valid() const;

    double getUnitPrice() const;
    void setUnitPrice(const double &unit_price);
    bool is_unit_price_Set() const;
    bool is_unit_price_Valid() const;

    double getVat() const;
    void setVat(const double &vat);
    bool is_vat_Set() const;
    bool is_vat_Valid() const;

    qint64 getVatAnalysisTypeId() const;
    void setVatAnalysisTypeId(const qint64 &vat_analysis_type_id);
    bool is_vat_analysis_type_id_Set() const;
    bool is_vat_analysis_type_id_Valid() const;

    qint64 getVatRateId() const;
    void setVatRateId(const qint64 &vat_rate_id);
    bool is_vat_rate_id_Set() const;
    bool is_vat_rate_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAcEntryDto> m_ac_entries;
    bool m_ac_entries_isSet;
    bool m_ac_entries_isValid;

    double m_amount;
    bool m_amount_isSet;
    bool m_amount_isValid;

    double m_amount_net;
    bool m_amount_net_isSet;
    bool m_amount_net_isValid;

    qint64 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    double m_percentage;
    bool m_percentage_isSet;
    bool m_percentage_isValid;

    QString m_product_code;
    bool m_product_code_isSet;
    bool m_product_code_isValid;

    qint64 m_product_id;
    bool m_product_id_isSet;
    bool m_product_id_isValid;

    double m_quantity;
    bool m_quantity_isSet;
    bool m_quantity_isValid;

    QList<QString> m_tran_notes;
    bool m_tran_notes_isSet;
    bool m_tran_notes_isValid;

    double m_unit_price;
    bool m_unit_price_isSet;
    bool m_unit_price_isValid;

    double m_vat;
    bool m_vat_isSet;
    bool m_vat_isValid;

    qint64 m_vat_analysis_type_id;
    bool m_vat_analysis_type_id_isSet;
    bool m_vat_analysis_type_id_isValid;

    qint64 m_vat_rate_id;
    bool m_vat_rate_id_isSet;
    bool m_vat_rate_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProductTranQueryDto)

#endif // OAIProductTranQueryDto_H
