/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountTranDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountTranDto::OAIAccountTranDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountTranDto::OAIAccountTranDto() {
    this->initializeModel();
}

OAIAccountTranDto::~OAIAccountTranDto() {}

void OAIAccountTranDto::initializeModel() {

    m_book_tran_id_isSet = false;
    m_book_tran_id_isValid = false;

    m_book_tran_type_id_isSet = false;
    m_book_tran_type_id_isValid = false;

    m_book_transaction_reference_isSet = false;
    m_book_transaction_reference_isValid = false;

    m_book_type_desc_isSet = false;
    m_book_type_desc_isValid = false;

    m_credit_isSet = false;
    m_credit_isValid = false;

    m_debit_isSet = false;
    m_debit_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_proc_date_isSet = false;
    m_proc_date_isValid = false;
}

void OAIAccountTranDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountTranDto::fromJsonObject(QJsonObject json) {

    m_book_tran_id_isValid = ::OpenAPI::fromJsonValue(m_book_tran_id, json[QString("bookTranId")]);
    m_book_tran_id_isSet = !json[QString("bookTranId")].isNull() && m_book_tran_id_isValid;

    m_book_tran_type_id_isValid = ::OpenAPI::fromJsonValue(m_book_tran_type_id, json[QString("bookTranTypeId")]);
    m_book_tran_type_id_isSet = !json[QString("bookTranTypeId")].isNull() && m_book_tran_type_id_isValid;

    m_book_transaction_reference_isValid = ::OpenAPI::fromJsonValue(m_book_transaction_reference, json[QString("bookTransactionReference")]);
    m_book_transaction_reference_isSet = !json[QString("bookTransactionReference")].isNull() && m_book_transaction_reference_isValid;

    m_book_type_desc_isValid = ::OpenAPI::fromJsonValue(m_book_type_desc, json[QString("bookTypeDesc")]);
    m_book_type_desc_isSet = !json[QString("bookTypeDesc")].isNull() && m_book_type_desc_isValid;

    m_credit_isValid = ::OpenAPI::fromJsonValue(m_credit, json[QString("credit")]);
    m_credit_isSet = !json[QString("credit")].isNull() && m_credit_isValid;

    m_debit_isValid = ::OpenAPI::fromJsonValue(m_debit, json[QString("debit")]);
    m_debit_isSet = !json[QString("debit")].isNull() && m_debit_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_proc_date_isValid = ::OpenAPI::fromJsonValue(m_proc_date, json[QString("procDate")]);
    m_proc_date_isSet = !json[QString("procDate")].isNull() && m_proc_date_isValid;
}

QString OAIAccountTranDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountTranDto::asJsonObject() const {
    QJsonObject obj;
    if (m_book_tran_id_isSet) {
        obj.insert(QString("bookTranId"), ::OpenAPI::toJsonValue(m_book_tran_id));
    }
    if (m_book_tran_type_id_isSet) {
        obj.insert(QString("bookTranTypeId"), ::OpenAPI::toJsonValue(m_book_tran_type_id));
    }
    if (m_book_transaction_reference_isSet) {
        obj.insert(QString("bookTransactionReference"), ::OpenAPI::toJsonValue(m_book_transaction_reference));
    }
    if (m_book_type_desc_isSet) {
        obj.insert(QString("bookTypeDesc"), ::OpenAPI::toJsonValue(m_book_type_desc));
    }
    if (m_credit_isSet) {
        obj.insert(QString("credit"), ::OpenAPI::toJsonValue(m_credit));
    }
    if (m_debit_isSet) {
        obj.insert(QString("debit"), ::OpenAPI::toJsonValue(m_debit));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_proc_date_isSet) {
        obj.insert(QString("procDate"), ::OpenAPI::toJsonValue(m_proc_date));
    }
    return obj;
}

qint64 OAIAccountTranDto::getBookTranId() const {
    return m_book_tran_id;
}
void OAIAccountTranDto::setBookTranId(const qint64 &book_tran_id) {
    m_book_tran_id = book_tran_id;
    m_book_tran_id_isSet = true;
}

bool OAIAccountTranDto::is_book_tran_id_Set() const{
    return m_book_tran_id_isSet;
}

bool OAIAccountTranDto::is_book_tran_id_Valid() const{
    return m_book_tran_id_isValid;
}

qint64 OAIAccountTranDto::getBookTranTypeId() const {
    return m_book_tran_type_id;
}
void OAIAccountTranDto::setBookTranTypeId(const qint64 &book_tran_type_id) {
    m_book_tran_type_id = book_tran_type_id;
    m_book_tran_type_id_isSet = true;
}

bool OAIAccountTranDto::is_book_tran_type_id_Set() const{
    return m_book_tran_type_id_isSet;
}

bool OAIAccountTranDto::is_book_tran_type_id_Valid() const{
    return m_book_tran_type_id_isValid;
}

QString OAIAccountTranDto::getBookTransactionReference() const {
    return m_book_transaction_reference;
}
void OAIAccountTranDto::setBookTransactionReference(const QString &book_transaction_reference) {
    m_book_transaction_reference = book_transaction_reference;
    m_book_transaction_reference_isSet = true;
}

bool OAIAccountTranDto::is_book_transaction_reference_Set() const{
    return m_book_transaction_reference_isSet;
}

bool OAIAccountTranDto::is_book_transaction_reference_Valid() const{
    return m_book_transaction_reference_isValid;
}

QString OAIAccountTranDto::getBookTypeDesc() const {
    return m_book_type_desc;
}
void OAIAccountTranDto::setBookTypeDesc(const QString &book_type_desc) {
    m_book_type_desc = book_type_desc;
    m_book_type_desc_isSet = true;
}

bool OAIAccountTranDto::is_book_type_desc_Set() const{
    return m_book_type_desc_isSet;
}

bool OAIAccountTranDto::is_book_type_desc_Valid() const{
    return m_book_type_desc_isValid;
}

double OAIAccountTranDto::getCredit() const {
    return m_credit;
}
void OAIAccountTranDto::setCredit(const double &credit) {
    m_credit = credit;
    m_credit_isSet = true;
}

bool OAIAccountTranDto::is_credit_Set() const{
    return m_credit_isSet;
}

bool OAIAccountTranDto::is_credit_Valid() const{
    return m_credit_isValid;
}

double OAIAccountTranDto::getDebit() const {
    return m_debit;
}
void OAIAccountTranDto::setDebit(const double &debit) {
    m_debit = debit;
    m_debit_isSet = true;
}

bool OAIAccountTranDto::is_debit_Set() const{
    return m_debit_isSet;
}

bool OAIAccountTranDto::is_debit_Valid() const{
    return m_debit_isValid;
}

qint64 OAIAccountTranDto::getId() const {
    return m_id;
}
void OAIAccountTranDto::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccountTranDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccountTranDto::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIAccountTranDto::getProcDate() const {
    return m_proc_date;
}
void OAIAccountTranDto::setProcDate(const QDateTime &proc_date) {
    m_proc_date = proc_date;
    m_proc_date_isSet = true;
}

bool OAIAccountTranDto::is_proc_date_Set() const{
    return m_proc_date_isSet;
}

bool OAIAccountTranDto::is_proc_date_Valid() const{
    return m_proc_date_isValid;
}

bool OAIAccountTranDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_book_tran_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_book_tran_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_book_transaction_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_book_type_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proc_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountTranDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
