/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupplierQueryDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupplierQueryDto::OAISupplierQueryDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupplierQueryDto::OAISupplierQueryDto() {
    this->initializeModel();
}

OAISupplierQueryDto::~OAISupplierQueryDto() {}

void OAISupplierQueryDto::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_additional_emails_isSet = false;
    m_additional_emails_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_auth_code_isSet = false;
    m_auth_code_isValid = false;

    m_bank_isSet = false;
    m_bank_isValid = false;

    m_business_identifier_code_isSet = false;
    m_business_identifier_code_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_e_ft_reference_isSet = false;
    m_e_ft_reference_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_fax_isSet = false;
    m_fax_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_international_bank_account_number_isSet = false;
    m_international_bank_account_number_isValid = false;

    m_mobile_isSet = false;
    m_mobile_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_our_code_isSet = false;
    m_our_code_isValid = false;

    m_owner_type_id_isSet = false;
    m_owner_type_id_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_postponed_accounting_isSet = false;
    m_postponed_accounting_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_vat_analysis_type_id_isSet = false;
    m_vat_analysis_type_id_isValid = false;

    m_vat_reg_isSet = false;
    m_vat_reg_isValid = false;

    m_vat_type_isSet = false;
    m_vat_type_isValid = false;
}

void OAISupplierQueryDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupplierQueryDto::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("accountNumber")]);
    m_account_number_isSet = !json[QString("accountNumber")].isNull() && m_account_number_isValid;

    m_additional_emails_isValid = ::OpenAPI::fromJsonValue(m_additional_emails, json[QString("additionalEmails")]);
    m_additional_emails_isSet = !json[QString("additionalEmails")].isNull() && m_additional_emails_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_auth_code_isValid = ::OpenAPI::fromJsonValue(m_auth_code, json[QString("authCode")]);
    m_auth_code_isSet = !json[QString("authCode")].isNull() && m_auth_code_isValid;

    m_bank_isValid = ::OpenAPI::fromJsonValue(m_bank, json[QString("bank")]);
    m_bank_isSet = !json[QString("bank")].isNull() && m_bank_isValid;

    m_business_identifier_code_isValid = ::OpenAPI::fromJsonValue(m_business_identifier_code, json[QString("businessIdentifierCode")]);
    m_business_identifier_code_isSet = !json[QString("businessIdentifierCode")].isNull() && m_business_identifier_code_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_e_ft_reference_isValid = ::OpenAPI::fromJsonValue(m_e_ft_reference, json[QString("eFTReference")]);
    m_e_ft_reference_isSet = !json[QString("eFTReference")].isNull() && m_e_ft_reference_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_fax_isValid = ::OpenAPI::fromJsonValue(m_fax, json[QString("fax")]);
    m_fax_isSet = !json[QString("fax")].isNull() && m_fax_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_international_bank_account_number_isValid = ::OpenAPI::fromJsonValue(m_international_bank_account_number, json[QString("internationalBankAccountNumber")]);
    m_international_bank_account_number_isSet = !json[QString("internationalBankAccountNumber")].isNull() && m_international_bank_account_number_isValid;

    m_mobile_isValid = ::OpenAPI::fromJsonValue(m_mobile, json[QString("mobile")]);
    m_mobile_isSet = !json[QString("mobile")].isNull() && m_mobile_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_our_code_isValid = ::OpenAPI::fromJsonValue(m_our_code, json[QString("ourCode")]);
    m_our_code_isSet = !json[QString("ourCode")].isNull() && m_our_code_isValid;

    m_owner_type_id_isValid = ::OpenAPI::fromJsonValue(m_owner_type_id, json[QString("ownerTypeId")]);
    m_owner_type_id_isSet = !json[QString("ownerTypeId")].isNull() && m_owner_type_id_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_postponed_accounting_isValid = ::OpenAPI::fromJsonValue(m_postponed_accounting, json[QString("postponedAccounting")]);
    m_postponed_accounting_isSet = !json[QString("postponedAccounting")].isNull() && m_postponed_accounting_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_vat_analysis_type_id_isValid = ::OpenAPI::fromJsonValue(m_vat_analysis_type_id, json[QString("vatAnalysisTypeId")]);
    m_vat_analysis_type_id_isSet = !json[QString("vatAnalysisTypeId")].isNull() && m_vat_analysis_type_id_isValid;

    m_vat_reg_isValid = ::OpenAPI::fromJsonValue(m_vat_reg, json[QString("vatReg")]);
    m_vat_reg_isSet = !json[QString("vatReg")].isNull() && m_vat_reg_isValid;

    m_vat_type_isValid = ::OpenAPI::fromJsonValue(m_vat_type, json[QString("vatType")]);
    m_vat_type_isSet = !json[QString("vatType")].isNull() && m_vat_type_isValid;
}

QString OAISupplierQueryDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupplierQueryDto::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_account_number_isSet) {
        obj.insert(QString("accountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_additional_emails.size() > 0) {
        obj.insert(QString("additionalEmails"), ::OpenAPI::toJsonValue(m_additional_emails));
    }
    if (m_address.size() > 0) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_auth_code_isSet) {
        obj.insert(QString("authCode"), ::OpenAPI::toJsonValue(m_auth_code));
    }
    if (m_bank.isSet()) {
        obj.insert(QString("bank"), ::OpenAPI::toJsonValue(m_bank));
    }
    if (m_business_identifier_code_isSet) {
        obj.insert(QString("businessIdentifierCode"), ::OpenAPI::toJsonValue(m_business_identifier_code));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_contact_isSet) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_e_ft_reference_isSet) {
        obj.insert(QString("eFTReference"), ::OpenAPI::toJsonValue(m_e_ft_reference));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_fax_isSet) {
        obj.insert(QString("fax"), ::OpenAPI::toJsonValue(m_fax));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_international_bank_account_number_isSet) {
        obj.insert(QString("internationalBankAccountNumber"), ::OpenAPI::toJsonValue(m_international_bank_account_number));
    }
    if (m_mobile_isSet) {
        obj.insert(QString("mobile"), ::OpenAPI::toJsonValue(m_mobile));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_our_code_isSet) {
        obj.insert(QString("ourCode"), ::OpenAPI::toJsonValue(m_our_code));
    }
    if (m_owner_type_id_isSet) {
        obj.insert(QString("ownerTypeId"), ::OpenAPI::toJsonValue(m_owner_type_id));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_postponed_accounting_isSet) {
        obj.insert(QString("postponedAccounting"), ::OpenAPI::toJsonValue(m_postponed_accounting));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_vat_analysis_type_id_isSet) {
        obj.insert(QString("vatAnalysisTypeId"), ::OpenAPI::toJsonValue(m_vat_analysis_type_id));
    }
    if (m_vat_reg_isSet) {
        obj.insert(QString("vatReg"), ::OpenAPI::toJsonValue(m_vat_reg));
    }
    if (m_vat_type_isSet) {
        obj.insert(QString("vatType"), ::OpenAPI::toJsonValue(m_vat_type));
    }
    return obj;
}

QString OAISupplierQueryDto::getAccountName() const {
    return m_account_name;
}
void OAISupplierQueryDto::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAISupplierQueryDto::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAISupplierQueryDto::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAISupplierQueryDto::getAccountNumber() const {
    return m_account_number;
}
void OAISupplierQueryDto::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAISupplierQueryDto::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAISupplierQueryDto::is_account_number_Valid() const{
    return m_account_number_isValid;
}

QList<QString> OAISupplierQueryDto::getAdditionalEmails() const {
    return m_additional_emails;
}
void OAISupplierQueryDto::setAdditionalEmails(const QList<QString> &additional_emails) {
    m_additional_emails = additional_emails;
    m_additional_emails_isSet = true;
}

bool OAISupplierQueryDto::is_additional_emails_Set() const{
    return m_additional_emails_isSet;
}

bool OAISupplierQueryDto::is_additional_emails_Valid() const{
    return m_additional_emails_isValid;
}

QList<QString> OAISupplierQueryDto::getAddress() const {
    return m_address;
}
void OAISupplierQueryDto::setAddress(const QList<QString> &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAISupplierQueryDto::is_address_Set() const{
    return m_address_isSet;
}

bool OAISupplierQueryDto::is_address_Valid() const{
    return m_address_isValid;
}

QString OAISupplierQueryDto::getAuthCode() const {
    return m_auth_code;
}
void OAISupplierQueryDto::setAuthCode(const QString &auth_code) {
    m_auth_code = auth_code;
    m_auth_code_isSet = true;
}

bool OAISupplierQueryDto::is_auth_code_Set() const{
    return m_auth_code_isSet;
}

bool OAISupplierQueryDto::is_auth_code_Valid() const{
    return m_auth_code_isValid;
}

OAIEFTBankDto OAISupplierQueryDto::getBank() const {
    return m_bank;
}
void OAISupplierQueryDto::setBank(const OAIEFTBankDto &bank) {
    m_bank = bank;
    m_bank_isSet = true;
}

bool OAISupplierQueryDto::is_bank_Set() const{
    return m_bank_isSet;
}

bool OAISupplierQueryDto::is_bank_Valid() const{
    return m_bank_isValid;
}

QString OAISupplierQueryDto::getBusinessIdentifierCode() const {
    return m_business_identifier_code;
}
void OAISupplierQueryDto::setBusinessIdentifierCode(const QString &business_identifier_code) {
    m_business_identifier_code = business_identifier_code;
    m_business_identifier_code_isSet = true;
}

bool OAISupplierQueryDto::is_business_identifier_code_Set() const{
    return m_business_identifier_code_isSet;
}

bool OAISupplierQueryDto::is_business_identifier_code_Valid() const{
    return m_business_identifier_code_isValid;
}

QString OAISupplierQueryDto::getCode() const {
    return m_code;
}
void OAISupplierQueryDto::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAISupplierQueryDto::is_code_Set() const{
    return m_code_isSet;
}

bool OAISupplierQueryDto::is_code_Valid() const{
    return m_code_isValid;
}

QString OAISupplierQueryDto::getContact() const {
    return m_contact;
}
void OAISupplierQueryDto::setContact(const QString &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAISupplierQueryDto::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAISupplierQueryDto::is_contact_Valid() const{
    return m_contact_isValid;
}

QString OAISupplierQueryDto::getEFtReference() const {
    return m_e_ft_reference;
}
void OAISupplierQueryDto::setEFtReference(const QString &e_ft_reference) {
    m_e_ft_reference = e_ft_reference;
    m_e_ft_reference_isSet = true;
}

bool OAISupplierQueryDto::is_e_ft_reference_Set() const{
    return m_e_ft_reference_isSet;
}

bool OAISupplierQueryDto::is_e_ft_reference_Valid() const{
    return m_e_ft_reference_isValid;
}

QString OAISupplierQueryDto::getEmail() const {
    return m_email;
}
void OAISupplierQueryDto::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISupplierQueryDto::is_email_Set() const{
    return m_email_isSet;
}

bool OAISupplierQueryDto::is_email_Valid() const{
    return m_email_isValid;
}

QString OAISupplierQueryDto::getFax() const {
    return m_fax;
}
void OAISupplierQueryDto::setFax(const QString &fax) {
    m_fax = fax;
    m_fax_isSet = true;
}

bool OAISupplierQueryDto::is_fax_Set() const{
    return m_fax_isSet;
}

bool OAISupplierQueryDto::is_fax_Valid() const{
    return m_fax_isValid;
}

qint64 OAISupplierQueryDto::getId() const {
    return m_id;
}
void OAISupplierQueryDto::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISupplierQueryDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAISupplierQueryDto::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISupplierQueryDto::getInternationalBankAccountNumber() const {
    return m_international_bank_account_number;
}
void OAISupplierQueryDto::setInternationalBankAccountNumber(const QString &international_bank_account_number) {
    m_international_bank_account_number = international_bank_account_number;
    m_international_bank_account_number_isSet = true;
}

bool OAISupplierQueryDto::is_international_bank_account_number_Set() const{
    return m_international_bank_account_number_isSet;
}

bool OAISupplierQueryDto::is_international_bank_account_number_Valid() const{
    return m_international_bank_account_number_isValid;
}

QString OAISupplierQueryDto::getMobile() const {
    return m_mobile;
}
void OAISupplierQueryDto::setMobile(const QString &mobile) {
    m_mobile = mobile;
    m_mobile_isSet = true;
}

bool OAISupplierQueryDto::is_mobile_Set() const{
    return m_mobile_isSet;
}

bool OAISupplierQueryDto::is_mobile_Valid() const{
    return m_mobile_isValid;
}

QString OAISupplierQueryDto::getName() const {
    return m_name;
}
void OAISupplierQueryDto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISupplierQueryDto::is_name_Set() const{
    return m_name_isSet;
}

bool OAISupplierQueryDto::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISupplierQueryDto::getOurCode() const {
    return m_our_code;
}
void OAISupplierQueryDto::setOurCode(const QString &our_code) {
    m_our_code = our_code;
    m_our_code_isSet = true;
}

bool OAISupplierQueryDto::is_our_code_Set() const{
    return m_our_code_isSet;
}

bool OAISupplierQueryDto::is_our_code_Valid() const{
    return m_our_code_isValid;
}

qint64 OAISupplierQueryDto::getOwnerTypeId() const {
    return m_owner_type_id;
}
void OAISupplierQueryDto::setOwnerTypeId(const qint64 &owner_type_id) {
    m_owner_type_id = owner_type_id;
    m_owner_type_id_isSet = true;
}

bool OAISupplierQueryDto::is_owner_type_id_Set() const{
    return m_owner_type_id_isSet;
}

bool OAISupplierQueryDto::is_owner_type_id_Valid() const{
    return m_owner_type_id_isValid;
}

QString OAISupplierQueryDto::getPhone() const {
    return m_phone;
}
void OAISupplierQueryDto::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAISupplierQueryDto::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAISupplierQueryDto::is_phone_Valid() const{
    return m_phone_isValid;
}

bool OAISupplierQueryDto::isPostponedAccounting() const {
    return m_postponed_accounting;
}
void OAISupplierQueryDto::setPostponedAccounting(const bool &postponed_accounting) {
    m_postponed_accounting = postponed_accounting;
    m_postponed_accounting_isSet = true;
}

bool OAISupplierQueryDto::is_postponed_accounting_Set() const{
    return m_postponed_accounting_isSet;
}

bool OAISupplierQueryDto::is_postponed_accounting_Valid() const{
    return m_postponed_accounting_isValid;
}

QByteArray OAISupplierQueryDto::getTimestamp() const {
    return m_timestamp;
}
void OAISupplierQueryDto::setTimestamp(const QByteArray &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAISupplierQueryDto::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAISupplierQueryDto::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

qint64 OAISupplierQueryDto::getVatAnalysisTypeId() const {
    return m_vat_analysis_type_id;
}
void OAISupplierQueryDto::setVatAnalysisTypeId(const qint64 &vat_analysis_type_id) {
    m_vat_analysis_type_id = vat_analysis_type_id;
    m_vat_analysis_type_id_isSet = true;
}

bool OAISupplierQueryDto::is_vat_analysis_type_id_Set() const{
    return m_vat_analysis_type_id_isSet;
}

bool OAISupplierQueryDto::is_vat_analysis_type_id_Valid() const{
    return m_vat_analysis_type_id_isValid;
}

QString OAISupplierQueryDto::getVatReg() const {
    return m_vat_reg;
}
void OAISupplierQueryDto::setVatReg(const QString &vat_reg) {
    m_vat_reg = vat_reg;
    m_vat_reg_isSet = true;
}

bool OAISupplierQueryDto::is_vat_reg_Set() const{
    return m_vat_reg_isSet;
}

bool OAISupplierQueryDto::is_vat_reg_Valid() const{
    return m_vat_reg_isValid;
}

qint64 OAISupplierQueryDto::getVatType() const {
    return m_vat_type;
}
void OAISupplierQueryDto::setVatType(const qint64 &vat_type) {
    m_vat_type = vat_type;
    m_vat_type_isSet = true;
}

bool OAISupplierQueryDto::is_vat_type_Set() const{
    return m_vat_type_isSet;
}

bool OAISupplierQueryDto::is_vat_type_Valid() const{
    return m_vat_type_isValid;
}

bool OAISupplierQueryDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_identifier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_ft_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_international_bank_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_our_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postponed_accounting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_analysis_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_reg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupplierQueryDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
