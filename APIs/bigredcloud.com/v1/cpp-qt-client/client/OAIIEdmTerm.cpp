/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIEdmTerm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIEdmTerm::OAIIEdmTerm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIEdmTerm::OAIIEdmTerm() {
    this->initializeModel();
}

OAIIEdmTerm::~OAIIEdmTerm() {}

void OAIIEdmTerm::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_schema_element_kind_isSet = false;
    m_schema_element_kind_isValid = false;

    m_term_kind_isSet = false;
    m_term_kind_isValid = false;
}

void OAIIEdmTerm::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIEdmTerm::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;

    m_schema_element_kind_isValid = ::OpenAPI::fromJsonValue(m_schema_element_kind, json[QString("SchemaElementKind")]);
    m_schema_element_kind_isSet = !json[QString("SchemaElementKind")].isNull() && m_schema_element_kind_isValid;

    m_term_kind_isValid = ::OpenAPI::fromJsonValue(m_term_kind, json[QString("TermKind")]);
    m_term_kind_isSet = !json[QString("TermKind")].isNull() && m_term_kind_isValid;
}

QString OAIIEdmTerm::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIEdmTerm::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_schema_element_kind_isSet) {
        obj.insert(QString("SchemaElementKind"), ::OpenAPI::toJsonValue(m_schema_element_kind));
    }
    if (m_term_kind_isSet) {
        obj.insert(QString("TermKind"), ::OpenAPI::toJsonValue(m_term_kind));
    }
    return obj;
}

QString OAIIEdmTerm::getName() const {
    return m_name;
}
void OAIIEdmTerm::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIEdmTerm::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIEdmTerm::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIIEdmTerm::getRNamespace() const {
    return m_r_namespace;
}
void OAIIEdmTerm::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIIEdmTerm::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIIEdmTerm::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

qint32 OAIIEdmTerm::getSchemaElementKind() const {
    return m_schema_element_kind;
}
void OAIIEdmTerm::setSchemaElementKind(const qint32 &schema_element_kind) {
    m_schema_element_kind = schema_element_kind;
    m_schema_element_kind_isSet = true;
}

bool OAIIEdmTerm::is_schema_element_kind_Set() const{
    return m_schema_element_kind_isSet;
}

bool OAIIEdmTerm::is_schema_element_kind_Valid() const{
    return m_schema_element_kind_isValid;
}

qint32 OAIIEdmTerm::getTermKind() const {
    return m_term_kind;
}
void OAIIEdmTerm::setTermKind(const qint32 &term_kind) {
    m_term_kind = term_kind;
    m_term_kind_isSet = true;
}

bool OAIIEdmTerm::is_term_kind_Set() const{
    return m_term_kind_isSet;
}

bool OAIIEdmTerm::is_term_kind_Valid() const{
    return m_term_kind_isValid;
}

bool OAIIEdmTerm::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_element_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_kind_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIEdmTerm::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
