/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAcudfValueDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAcudfValueDto::OAIAcudfValueDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAcudfValueDto::OAIAcudfValueDto() {
    this->initializeModel();
}

OAIAcudfValueDto::~OAIAcudfValueDto() {}

void OAIAcudfValueDto::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_user_defined_field_id_isSet = false;
    m_user_defined_field_id_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIAcudfValueDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAcudfValueDto::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_user_defined_field_id_isValid = ::OpenAPI::fromJsonValue(m_user_defined_field_id, json[QString("userDefinedFieldId")]);
    m_user_defined_field_id_isSet = !json[QString("userDefinedFieldId")].isNull() && m_user_defined_field_id_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIAcudfValueDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAcudfValueDto::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_user_defined_field_id_isSet) {
        obj.insert(QString("userDefinedFieldId"), ::OpenAPI::toJsonValue(m_user_defined_field_id));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIAcudfValueDto::getDescription() const {
    return m_description;
}
void OAIAcudfValueDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAcudfValueDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAcudfValueDto::is_description_Valid() const{
    return m_description_isValid;
}

qint64 OAIAcudfValueDto::getId() const {
    return m_id;
}
void OAIAcudfValueDto::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAcudfValueDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAcudfValueDto::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAIAcudfValueDto::getUserDefinedFieldId() const {
    return m_user_defined_field_id;
}
void OAIAcudfValueDto::setUserDefinedFieldId(const qint64 &user_defined_field_id) {
    m_user_defined_field_id = user_defined_field_id;
    m_user_defined_field_id_isSet = true;
}

bool OAIAcudfValueDto::is_user_defined_field_id_Set() const{
    return m_user_defined_field_id_isSet;
}

bool OAIAcudfValueDto::is_user_defined_field_id_Valid() const{
    return m_user_defined_field_id_isValid;
}

QString OAIAcudfValueDto::getValue() const {
    return m_value;
}
void OAIAcudfValueDto::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIAcudfValueDto::is_value_Set() const{
    return m_value_isSet;
}

bool OAIAcudfValueDto::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIAcudfValueDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_defined_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAcudfValueDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
