/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseQueryDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseQueryDto::OAIPurchaseQueryDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseQueryDto::OAIPurchaseQueryDto() {
    this->initializeModel();
}

OAIPurchaseQueryDto::~OAIPurchaseQueryDto() {}

void OAIPurchaseQueryDto::initializeModel() {

    m_ac_code_isSet = false;
    m_ac_code_isValid = false;

    m_ac_entries_isSet = false;
    m_ac_entries_isValid = false;

    m_book_tran_type_id_isSet = false;
    m_book_tran_type_id_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_detail_collection_isSet = false;
    m_detail_collection_isValid = false;

    m_entry_date_isSet = false;
    m_entry_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_net_goods_isSet = false;
    m_net_goods_isValid = false;

    m_net_services_isSet = false;
    m_net_services_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_postponed_accounting_isSet = false;
    m_postponed_accounting_isValid = false;

    m_proc_date_isSet = false;
    m_proc_date_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_supplier_id_isSet = false;
    m_supplier_id_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_total_net_isSet = false;
    m_total_net_isValid = false;

    m_total_vat_isSet = false;
    m_total_vat_isValid = false;

    m_unallocated_isSet = false;
    m_unallocated_isValid = false;

    m_unpaid_isSet = false;
    m_unpaid_isValid = false;

    m_vat_entries_isSet = false;
    m_vat_entries_isValid = false;

    m_vat_type_id_isSet = false;
    m_vat_type_id_isValid = false;
}

void OAIPurchaseQueryDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseQueryDto::fromJsonObject(QJsonObject json) {

    m_ac_code_isValid = ::OpenAPI::fromJsonValue(m_ac_code, json[QString("acCode")]);
    m_ac_code_isSet = !json[QString("acCode")].isNull() && m_ac_code_isValid;

    m_ac_entries_isValid = ::OpenAPI::fromJsonValue(m_ac_entries, json[QString("acEntries")]);
    m_ac_entries_isSet = !json[QString("acEntries")].isNull() && m_ac_entries_isValid;

    m_book_tran_type_id_isValid = ::OpenAPI::fromJsonValue(m_book_tran_type_id, json[QString("bookTranTypeId")]);
    m_book_tran_type_id_isSet = !json[QString("bookTranTypeId")].isNull() && m_book_tran_type_id_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_detail_collection_isValid = ::OpenAPI::fromJsonValue(m_detail_collection, json[QString("detailCollection")]);
    m_detail_collection_isSet = !json[QString("detailCollection")].isNull() && m_detail_collection_isValid;

    m_entry_date_isValid = ::OpenAPI::fromJsonValue(m_entry_date, json[QString("entryDate")]);
    m_entry_date_isSet = !json[QString("entryDate")].isNull() && m_entry_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_net_goods_isValid = ::OpenAPI::fromJsonValue(m_net_goods, json[QString("netGoods")]);
    m_net_goods_isSet = !json[QString("netGoods")].isNull() && m_net_goods_isValid;

    m_net_services_isValid = ::OpenAPI::fromJsonValue(m_net_services, json[QString("netServices")]);
    m_net_services_isSet = !json[QString("netServices")].isNull() && m_net_services_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_postponed_accounting_isValid = ::OpenAPI::fromJsonValue(m_postponed_accounting, json[QString("postponedAccounting")]);
    m_postponed_accounting_isSet = !json[QString("postponedAccounting")].isNull() && m_postponed_accounting_isValid;

    m_proc_date_isValid = ::OpenAPI::fromJsonValue(m_proc_date, json[QString("procDate")]);
    m_proc_date_isSet = !json[QString("procDate")].isNull() && m_proc_date_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_supplier_id_isValid = ::OpenAPI::fromJsonValue(m_supplier_id, json[QString("supplierId")]);
    m_supplier_id_isSet = !json[QString("supplierId")].isNull() && m_supplier_id_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_total_net_isValid = ::OpenAPI::fromJsonValue(m_total_net, json[QString("totalNet")]);
    m_total_net_isSet = !json[QString("totalNet")].isNull() && m_total_net_isValid;

    m_total_vat_isValid = ::OpenAPI::fromJsonValue(m_total_vat, json[QString("totalVAT")]);
    m_total_vat_isSet = !json[QString("totalVAT")].isNull() && m_total_vat_isValid;

    m_unallocated_isValid = ::OpenAPI::fromJsonValue(m_unallocated, json[QString("unallocated")]);
    m_unallocated_isSet = !json[QString("unallocated")].isNull() && m_unallocated_isValid;

    m_unpaid_isValid = ::OpenAPI::fromJsonValue(m_unpaid, json[QString("unpaid")]);
    m_unpaid_isSet = !json[QString("unpaid")].isNull() && m_unpaid_isValid;

    m_vat_entries_isValid = ::OpenAPI::fromJsonValue(m_vat_entries, json[QString("vatEntries")]);
    m_vat_entries_isSet = !json[QString("vatEntries")].isNull() && m_vat_entries_isValid;

    m_vat_type_id_isValid = ::OpenAPI::fromJsonValue(m_vat_type_id, json[QString("vatTypeId")]);
    m_vat_type_id_isSet = !json[QString("vatTypeId")].isNull() && m_vat_type_id_isValid;
}

QString OAIPurchaseQueryDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseQueryDto::asJsonObject() const {
    QJsonObject obj;
    if (m_ac_code_isSet) {
        obj.insert(QString("acCode"), ::OpenAPI::toJsonValue(m_ac_code));
    }
    if (m_ac_entries.size() > 0) {
        obj.insert(QString("acEntries"), ::OpenAPI::toJsonValue(m_ac_entries));
    }
    if (m_book_tran_type_id_isSet) {
        obj.insert(QString("bookTranTypeId"), ::OpenAPI::toJsonValue(m_book_tran_type_id));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_detail_collection.size() > 0) {
        obj.insert(QString("detailCollection"), ::OpenAPI::toJsonValue(m_detail_collection));
    }
    if (m_entry_date_isSet) {
        obj.insert(QString("entryDate"), ::OpenAPI::toJsonValue(m_entry_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_net_goods_isSet) {
        obj.insert(QString("netGoods"), ::OpenAPI::toJsonValue(m_net_goods));
    }
    if (m_net_services_isSet) {
        obj.insert(QString("netServices"), ::OpenAPI::toJsonValue(m_net_services));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_postponed_accounting_isSet) {
        obj.insert(QString("postponedAccounting"), ::OpenAPI::toJsonValue(m_postponed_accounting));
    }
    if (m_proc_date_isSet) {
        obj.insert(QString("procDate"), ::OpenAPI::toJsonValue(m_proc_date));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_supplier_id_isSet) {
        obj.insert(QString("supplierId"), ::OpenAPI::toJsonValue(m_supplier_id));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_total_net_isSet) {
        obj.insert(QString("totalNet"), ::OpenAPI::toJsonValue(m_total_net));
    }
    if (m_total_vat_isSet) {
        obj.insert(QString("totalVAT"), ::OpenAPI::toJsonValue(m_total_vat));
    }
    if (m_unallocated_isSet) {
        obj.insert(QString("unallocated"), ::OpenAPI::toJsonValue(m_unallocated));
    }
    if (m_unpaid_isSet) {
        obj.insert(QString("unpaid"), ::OpenAPI::toJsonValue(m_unpaid));
    }
    if (m_vat_entries.size() > 0) {
        obj.insert(QString("vatEntries"), ::OpenAPI::toJsonValue(m_vat_entries));
    }
    if (m_vat_type_id_isSet) {
        obj.insert(QString("vatTypeId"), ::OpenAPI::toJsonValue(m_vat_type_id));
    }
    return obj;
}

QString OAIPurchaseQueryDto::getAcCode() const {
    return m_ac_code;
}
void OAIPurchaseQueryDto::setAcCode(const QString &ac_code) {
    m_ac_code = ac_code;
    m_ac_code_isSet = true;
}

bool OAIPurchaseQueryDto::is_ac_code_Set() const{
    return m_ac_code_isSet;
}

bool OAIPurchaseQueryDto::is_ac_code_Valid() const{
    return m_ac_code_isValid;
}

QList<OAIAcEntryDto> OAIPurchaseQueryDto::getAcEntries() const {
    return m_ac_entries;
}
void OAIPurchaseQueryDto::setAcEntries(const QList<OAIAcEntryDto> &ac_entries) {
    m_ac_entries = ac_entries;
    m_ac_entries_isSet = true;
}

bool OAIPurchaseQueryDto::is_ac_entries_Set() const{
    return m_ac_entries_isSet;
}

bool OAIPurchaseQueryDto::is_ac_entries_Valid() const{
    return m_ac_entries_isValid;
}

qint64 OAIPurchaseQueryDto::getBookTranTypeId() const {
    return m_book_tran_type_id;
}
void OAIPurchaseQueryDto::setBookTranTypeId(const qint64 &book_tran_type_id) {
    m_book_tran_type_id = book_tran_type_id;
    m_book_tran_type_id_isSet = true;
}

bool OAIPurchaseQueryDto::is_book_tran_type_id_Set() const{
    return m_book_tran_type_id_isSet;
}

bool OAIPurchaseQueryDto::is_book_tran_type_id_Valid() const{
    return m_book_tran_type_id_isValid;
}

QList<OAIAcudfValueDto> OAIPurchaseQueryDto::getCustomFields() const {
    return m_custom_fields;
}
void OAIPurchaseQueryDto::setCustomFields(const QList<OAIAcudfValueDto> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIPurchaseQueryDto::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIPurchaseQueryDto::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QList<QString> OAIPurchaseQueryDto::getDetailCollection() const {
    return m_detail_collection;
}
void OAIPurchaseQueryDto::setDetailCollection(const QList<QString> &detail_collection) {
    m_detail_collection = detail_collection;
    m_detail_collection_isSet = true;
}

bool OAIPurchaseQueryDto::is_detail_collection_Set() const{
    return m_detail_collection_isSet;
}

bool OAIPurchaseQueryDto::is_detail_collection_Valid() const{
    return m_detail_collection_isValid;
}

QDateTime OAIPurchaseQueryDto::getEntryDate() const {
    return m_entry_date;
}
void OAIPurchaseQueryDto::setEntryDate(const QDateTime &entry_date) {
    m_entry_date = entry_date;
    m_entry_date_isSet = true;
}

bool OAIPurchaseQueryDto::is_entry_date_Set() const{
    return m_entry_date_isSet;
}

bool OAIPurchaseQueryDto::is_entry_date_Valid() const{
    return m_entry_date_isValid;
}

qint64 OAIPurchaseQueryDto::getId() const {
    return m_id;
}
void OAIPurchaseQueryDto::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPurchaseQueryDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPurchaseQueryDto::is_id_Valid() const{
    return m_id_isValid;
}

double OAIPurchaseQueryDto::getNetGoods() const {
    return m_net_goods;
}
void OAIPurchaseQueryDto::setNetGoods(const double &net_goods) {
    m_net_goods = net_goods;
    m_net_goods_isSet = true;
}

bool OAIPurchaseQueryDto::is_net_goods_Set() const{
    return m_net_goods_isSet;
}

bool OAIPurchaseQueryDto::is_net_goods_Valid() const{
    return m_net_goods_isValid;
}

double OAIPurchaseQueryDto::getNetServices() const {
    return m_net_services;
}
void OAIPurchaseQueryDto::setNetServices(const double &net_services) {
    m_net_services = net_services;
    m_net_services_isSet = true;
}

bool OAIPurchaseQueryDto::is_net_services_Set() const{
    return m_net_services_isSet;
}

bool OAIPurchaseQueryDto::is_net_services_Valid() const{
    return m_net_services_isValid;
}

QString OAIPurchaseQueryDto::getNote() const {
    return m_note;
}
void OAIPurchaseQueryDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIPurchaseQueryDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAIPurchaseQueryDto::is_note_Valid() const{
    return m_note_isValid;
}

bool OAIPurchaseQueryDto::isPostponedAccounting() const {
    return m_postponed_accounting;
}
void OAIPurchaseQueryDto::setPostponedAccounting(const bool &postponed_accounting) {
    m_postponed_accounting = postponed_accounting;
    m_postponed_accounting_isSet = true;
}

bool OAIPurchaseQueryDto::is_postponed_accounting_Set() const{
    return m_postponed_accounting_isSet;
}

bool OAIPurchaseQueryDto::is_postponed_accounting_Valid() const{
    return m_postponed_accounting_isValid;
}

QDateTime OAIPurchaseQueryDto::getProcDate() const {
    return m_proc_date;
}
void OAIPurchaseQueryDto::setProcDate(const QDateTime &proc_date) {
    m_proc_date = proc_date;
    m_proc_date_isSet = true;
}

bool OAIPurchaseQueryDto::is_proc_date_Set() const{
    return m_proc_date_isSet;
}

bool OAIPurchaseQueryDto::is_proc_date_Valid() const{
    return m_proc_date_isValid;
}

QString OAIPurchaseQueryDto::getReference() const {
    return m_reference;
}
void OAIPurchaseQueryDto::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIPurchaseQueryDto::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIPurchaseQueryDto::is_reference_Valid() const{
    return m_reference_isValid;
}

qint64 OAIPurchaseQueryDto::getSupplierId() const {
    return m_supplier_id;
}
void OAIPurchaseQueryDto::setSupplierId(const qint64 &supplier_id) {
    m_supplier_id = supplier_id;
    m_supplier_id_isSet = true;
}

bool OAIPurchaseQueryDto::is_supplier_id_Set() const{
    return m_supplier_id_isSet;
}

bool OAIPurchaseQueryDto::is_supplier_id_Valid() const{
    return m_supplier_id_isValid;
}

QByteArray OAIPurchaseQueryDto::getTimestamp() const {
    return m_timestamp;
}
void OAIPurchaseQueryDto::setTimestamp(const QByteArray &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIPurchaseQueryDto::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIPurchaseQueryDto::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

double OAIPurchaseQueryDto::getTotal() const {
    return m_total;
}
void OAIPurchaseQueryDto::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIPurchaseQueryDto::is_total_Set() const{
    return m_total_isSet;
}

bool OAIPurchaseQueryDto::is_total_Valid() const{
    return m_total_isValid;
}

double OAIPurchaseQueryDto::getTotalNet() const {
    return m_total_net;
}
void OAIPurchaseQueryDto::setTotalNet(const double &total_net) {
    m_total_net = total_net;
    m_total_net_isSet = true;
}

bool OAIPurchaseQueryDto::is_total_net_Set() const{
    return m_total_net_isSet;
}

bool OAIPurchaseQueryDto::is_total_net_Valid() const{
    return m_total_net_isValid;
}

double OAIPurchaseQueryDto::getTotalVat() const {
    return m_total_vat;
}
void OAIPurchaseQueryDto::setTotalVat(const double &total_vat) {
    m_total_vat = total_vat;
    m_total_vat_isSet = true;
}

bool OAIPurchaseQueryDto::is_total_vat_Set() const{
    return m_total_vat_isSet;
}

bool OAIPurchaseQueryDto::is_total_vat_Valid() const{
    return m_total_vat_isValid;
}

double OAIPurchaseQueryDto::getUnallocated() const {
    return m_unallocated;
}
void OAIPurchaseQueryDto::setUnallocated(const double &unallocated) {
    m_unallocated = unallocated;
    m_unallocated_isSet = true;
}

bool OAIPurchaseQueryDto::is_unallocated_Set() const{
    return m_unallocated_isSet;
}

bool OAIPurchaseQueryDto::is_unallocated_Valid() const{
    return m_unallocated_isValid;
}

double OAIPurchaseQueryDto::getUnpaid() const {
    return m_unpaid;
}
void OAIPurchaseQueryDto::setUnpaid(const double &unpaid) {
    m_unpaid = unpaid;
    m_unpaid_isSet = true;
}

bool OAIPurchaseQueryDto::is_unpaid_Set() const{
    return m_unpaid_isSet;
}

bool OAIPurchaseQueryDto::is_unpaid_Valid() const{
    return m_unpaid_isValid;
}

QList<OAIVatEntryDto> OAIPurchaseQueryDto::getVatEntries() const {
    return m_vat_entries;
}
void OAIPurchaseQueryDto::setVatEntries(const QList<OAIVatEntryDto> &vat_entries) {
    m_vat_entries = vat_entries;
    m_vat_entries_isSet = true;
}

bool OAIPurchaseQueryDto::is_vat_entries_Set() const{
    return m_vat_entries_isSet;
}

bool OAIPurchaseQueryDto::is_vat_entries_Valid() const{
    return m_vat_entries_isValid;
}

qint64 OAIPurchaseQueryDto::getVatTypeId() const {
    return m_vat_type_id;
}
void OAIPurchaseQueryDto::setVatTypeId(const qint64 &vat_type_id) {
    m_vat_type_id = vat_type_id;
    m_vat_type_id_isSet = true;
}

bool OAIPurchaseQueryDto::is_vat_type_id_Set() const{
    return m_vat_type_id_isSet;
}

bool OAIPurchaseQueryDto::is_vat_type_id_Valid() const{
    return m_vat_type_id_isValid;
}

bool OAIPurchaseQueryDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ac_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ac_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_book_tran_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_collection.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_goods_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_services_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postponed_accounting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proc_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_net_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unallocated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unpaid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseQueryDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
