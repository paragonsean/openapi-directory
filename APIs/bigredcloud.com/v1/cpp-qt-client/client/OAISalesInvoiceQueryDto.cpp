/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesInvoiceQueryDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesInvoiceQueryDto::OAISalesInvoiceQueryDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesInvoiceQueryDto::OAISalesInvoiceQueryDto() {
    this->initializeModel();
}

OAISalesInvoiceQueryDto::~OAISalesInvoiceQueryDto() {}

void OAISalesInvoiceQueryDto::initializeModel() {

    m_ac_code_isSet = false;
    m_ac_code_isValid = false;

    m_book_tran_type_id_isSet = false;
    m_book_tran_type_id_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_delivery_to_isSet = false;
    m_delivery_to_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_entry_date_isSet = false;
    m_entry_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lo_type_isSet = false;
    m_lo_type_isValid = false;

    m_net_goods_isSet = false;
    m_net_goods_isValid = false;

    m_net_services_isSet = false;
    m_net_services_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_our_reference_isSet = false;
    m_our_reference_isValid = false;

    m_proc_date_isSet = false;
    m_proc_date_isValid = false;

    m_product_trans_isSet = false;
    m_product_trans_isValid = false;

    m_quote_id_isSet = false;
    m_quote_id_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_sale_rep_code_isSet = false;
    m_sale_rep_code_isValid = false;

    m_sale_rep_id_isSet = false;
    m_sale_rep_id_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_total_net_isSet = false;
    m_total_net_isValid = false;

    m_total_vat_isSet = false;
    m_total_vat_isValid = false;

    m_unpaid_isSet = false;
    m_unpaid_isValid = false;

    m_vat_type_id_isSet = false;
    m_vat_type_id_isValid = false;

    m_your_reference_isSet = false;
    m_your_reference_isValid = false;
}

void OAISalesInvoiceQueryDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesInvoiceQueryDto::fromJsonObject(QJsonObject json) {

    m_ac_code_isValid = ::OpenAPI::fromJsonValue(m_ac_code, json[QString("acCode")]);
    m_ac_code_isSet = !json[QString("acCode")].isNull() && m_ac_code_isValid;

    m_book_tran_type_id_isValid = ::OpenAPI::fromJsonValue(m_book_tran_type_id, json[QString("bookTranTypeId")]);
    m_book_tran_type_id_isSet = !json[QString("bookTranTypeId")].isNull() && m_book_tran_type_id_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_delivery_to_isValid = ::OpenAPI::fromJsonValue(m_delivery_to, json[QString("deliveryTo")]);
    m_delivery_to_isSet = !json[QString("deliveryTo")].isNull() && m_delivery_to_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_entry_date_isValid = ::OpenAPI::fromJsonValue(m_entry_date, json[QString("entryDate")]);
    m_entry_date_isSet = !json[QString("entryDate")].isNull() && m_entry_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lo_type_isValid = ::OpenAPI::fromJsonValue(m_lo_type, json[QString("loType")]);
    m_lo_type_isSet = !json[QString("loType")].isNull() && m_lo_type_isValid;

    m_net_goods_isValid = ::OpenAPI::fromJsonValue(m_net_goods, json[QString("netGoods")]);
    m_net_goods_isSet = !json[QString("netGoods")].isNull() && m_net_goods_isValid;

    m_net_services_isValid = ::OpenAPI::fromJsonValue(m_net_services, json[QString("netServices")]);
    m_net_services_isSet = !json[QString("netServices")].isNull() && m_net_services_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_our_reference_isValid = ::OpenAPI::fromJsonValue(m_our_reference, json[QString("ourReference")]);
    m_our_reference_isSet = !json[QString("ourReference")].isNull() && m_our_reference_isValid;

    m_proc_date_isValid = ::OpenAPI::fromJsonValue(m_proc_date, json[QString("procDate")]);
    m_proc_date_isSet = !json[QString("procDate")].isNull() && m_proc_date_isValid;

    m_product_trans_isValid = ::OpenAPI::fromJsonValue(m_product_trans, json[QString("productTrans")]);
    m_product_trans_isSet = !json[QString("productTrans")].isNull() && m_product_trans_isValid;

    m_quote_id_isValid = ::OpenAPI::fromJsonValue(m_quote_id, json[QString("quoteId")]);
    m_quote_id_isSet = !json[QString("quoteId")].isNull() && m_quote_id_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_sale_rep_code_isValid = ::OpenAPI::fromJsonValue(m_sale_rep_code, json[QString("saleRepCode")]);
    m_sale_rep_code_isSet = !json[QString("saleRepCode")].isNull() && m_sale_rep_code_isValid;

    m_sale_rep_id_isValid = ::OpenAPI::fromJsonValue(m_sale_rep_id, json[QString("saleRepId")]);
    m_sale_rep_id_isSet = !json[QString("saleRepId")].isNull() && m_sale_rep_id_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_total_net_isValid = ::OpenAPI::fromJsonValue(m_total_net, json[QString("totalNet")]);
    m_total_net_isSet = !json[QString("totalNet")].isNull() && m_total_net_isValid;

    m_total_vat_isValid = ::OpenAPI::fromJsonValue(m_total_vat, json[QString("totalVAT")]);
    m_total_vat_isSet = !json[QString("totalVAT")].isNull() && m_total_vat_isValid;

    m_unpaid_isValid = ::OpenAPI::fromJsonValue(m_unpaid, json[QString("unpaid")]);
    m_unpaid_isSet = !json[QString("unpaid")].isNull() && m_unpaid_isValid;

    m_vat_type_id_isValid = ::OpenAPI::fromJsonValue(m_vat_type_id, json[QString("vatTypeId")]);
    m_vat_type_id_isSet = !json[QString("vatTypeId")].isNull() && m_vat_type_id_isValid;

    m_your_reference_isValid = ::OpenAPI::fromJsonValue(m_your_reference, json[QString("yourReference")]);
    m_your_reference_isSet = !json[QString("yourReference")].isNull() && m_your_reference_isValid;
}

QString OAISalesInvoiceQueryDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesInvoiceQueryDto::asJsonObject() const {
    QJsonObject obj;
    if (m_ac_code_isSet) {
        obj.insert(QString("acCode"), ::OpenAPI::toJsonValue(m_ac_code));
    }
    if (m_book_tran_type_id_isSet) {
        obj.insert(QString("bookTranTypeId"), ::OpenAPI::toJsonValue(m_book_tran_type_id));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_delivery_to.size() > 0) {
        obj.insert(QString("deliveryTo"), ::OpenAPI::toJsonValue(m_delivery_to));
    }
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_entry_date_isSet) {
        obj.insert(QString("entryDate"), ::OpenAPI::toJsonValue(m_entry_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lo_type_isSet) {
        obj.insert(QString("loType"), ::OpenAPI::toJsonValue(m_lo_type));
    }
    if (m_net_goods_isSet) {
        obj.insert(QString("netGoods"), ::OpenAPI::toJsonValue(m_net_goods));
    }
    if (m_net_services_isSet) {
        obj.insert(QString("netServices"), ::OpenAPI::toJsonValue(m_net_services));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_our_reference_isSet) {
        obj.insert(QString("ourReference"), ::OpenAPI::toJsonValue(m_our_reference));
    }
    if (m_proc_date_isSet) {
        obj.insert(QString("procDate"), ::OpenAPI::toJsonValue(m_proc_date));
    }
    if (m_product_trans.size() > 0) {
        obj.insert(QString("productTrans"), ::OpenAPI::toJsonValue(m_product_trans));
    }
    if (m_quote_id_isSet) {
        obj.insert(QString("quoteId"), ::OpenAPI::toJsonValue(m_quote_id));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_sale_rep_code_isSet) {
        obj.insert(QString("saleRepCode"), ::OpenAPI::toJsonValue(m_sale_rep_code));
    }
    if (m_sale_rep_id_isSet) {
        obj.insert(QString("saleRepId"), ::OpenAPI::toJsonValue(m_sale_rep_id));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_total_net_isSet) {
        obj.insert(QString("totalNet"), ::OpenAPI::toJsonValue(m_total_net));
    }
    if (m_total_vat_isSet) {
        obj.insert(QString("totalVAT"), ::OpenAPI::toJsonValue(m_total_vat));
    }
    if (m_unpaid_isSet) {
        obj.insert(QString("unpaid"), ::OpenAPI::toJsonValue(m_unpaid));
    }
    if (m_vat_type_id_isSet) {
        obj.insert(QString("vatTypeId"), ::OpenAPI::toJsonValue(m_vat_type_id));
    }
    if (m_your_reference_isSet) {
        obj.insert(QString("yourReference"), ::OpenAPI::toJsonValue(m_your_reference));
    }
    return obj;
}

QString OAISalesInvoiceQueryDto::getAcCode() const {
    return m_ac_code;
}
void OAISalesInvoiceQueryDto::setAcCode(const QString &ac_code) {
    m_ac_code = ac_code;
    m_ac_code_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_ac_code_Set() const{
    return m_ac_code_isSet;
}

bool OAISalesInvoiceQueryDto::is_ac_code_Valid() const{
    return m_ac_code_isValid;
}

qint64 OAISalesInvoiceQueryDto::getBookTranTypeId() const {
    return m_book_tran_type_id;
}
void OAISalesInvoiceQueryDto::setBookTranTypeId(const qint64 &book_tran_type_id) {
    m_book_tran_type_id = book_tran_type_id;
    m_book_tran_type_id_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_book_tran_type_id_Set() const{
    return m_book_tran_type_id_isSet;
}

bool OAISalesInvoiceQueryDto::is_book_tran_type_id_Valid() const{
    return m_book_tran_type_id_isValid;
}

QList<OAIAcudfValueDto> OAISalesInvoiceQueryDto::getCustomFields() const {
    return m_custom_fields;
}
void OAISalesInvoiceQueryDto::setCustomFields(const QList<OAIAcudfValueDto> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAISalesInvoiceQueryDto::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

qint64 OAISalesInvoiceQueryDto::getCustomerId() const {
    return m_customer_id;
}
void OAISalesInvoiceQueryDto::setCustomerId(const qint64 &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAISalesInvoiceQueryDto::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QList<QString> OAISalesInvoiceQueryDto::getDeliveryTo() const {
    return m_delivery_to;
}
void OAISalesInvoiceQueryDto::setDeliveryTo(const QList<QString> &delivery_to) {
    m_delivery_to = delivery_to;
    m_delivery_to_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_delivery_to_Set() const{
    return m_delivery_to_isSet;
}

bool OAISalesInvoiceQueryDto::is_delivery_to_Valid() const{
    return m_delivery_to_isValid;
}

QString OAISalesInvoiceQueryDto::getDetails() const {
    return m_details;
}
void OAISalesInvoiceQueryDto::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_details_Set() const{
    return m_details_isSet;
}

bool OAISalesInvoiceQueryDto::is_details_Valid() const{
    return m_details_isValid;
}

QDateTime OAISalesInvoiceQueryDto::getEntryDate() const {
    return m_entry_date;
}
void OAISalesInvoiceQueryDto::setEntryDate(const QDateTime &entry_date) {
    m_entry_date = entry_date;
    m_entry_date_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_entry_date_Set() const{
    return m_entry_date_isSet;
}

bool OAISalesInvoiceQueryDto::is_entry_date_Valid() const{
    return m_entry_date_isValid;
}

qint64 OAISalesInvoiceQueryDto::getId() const {
    return m_id;
}
void OAISalesInvoiceQueryDto::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAISalesInvoiceQueryDto::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISalesInvoiceQueryDto::getLoType() const {
    return m_lo_type;
}
void OAISalesInvoiceQueryDto::setLoType(const QString &lo_type) {
    m_lo_type = lo_type;
    m_lo_type_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_lo_type_Set() const{
    return m_lo_type_isSet;
}

bool OAISalesInvoiceQueryDto::is_lo_type_Valid() const{
    return m_lo_type_isValid;
}

double OAISalesInvoiceQueryDto::getNetGoods() const {
    return m_net_goods;
}
void OAISalesInvoiceQueryDto::setNetGoods(const double &net_goods) {
    m_net_goods = net_goods;
    m_net_goods_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_net_goods_Set() const{
    return m_net_goods_isSet;
}

bool OAISalesInvoiceQueryDto::is_net_goods_Valid() const{
    return m_net_goods_isValid;
}

double OAISalesInvoiceQueryDto::getNetServices() const {
    return m_net_services;
}
void OAISalesInvoiceQueryDto::setNetServices(const double &net_services) {
    m_net_services = net_services;
    m_net_services_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_net_services_Set() const{
    return m_net_services_isSet;
}

bool OAISalesInvoiceQueryDto::is_net_services_Valid() const{
    return m_net_services_isValid;
}

QString OAISalesInvoiceQueryDto::getNote() const {
    return m_note;
}
void OAISalesInvoiceQueryDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAISalesInvoiceQueryDto::is_note_Valid() const{
    return m_note_isValid;
}

QString OAISalesInvoiceQueryDto::getOurReference() const {
    return m_our_reference;
}
void OAISalesInvoiceQueryDto::setOurReference(const QString &our_reference) {
    m_our_reference = our_reference;
    m_our_reference_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_our_reference_Set() const{
    return m_our_reference_isSet;
}

bool OAISalesInvoiceQueryDto::is_our_reference_Valid() const{
    return m_our_reference_isValid;
}

QDateTime OAISalesInvoiceQueryDto::getProcDate() const {
    return m_proc_date;
}
void OAISalesInvoiceQueryDto::setProcDate(const QDateTime &proc_date) {
    m_proc_date = proc_date;
    m_proc_date_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_proc_date_Set() const{
    return m_proc_date_isSet;
}

bool OAISalesInvoiceQueryDto::is_proc_date_Valid() const{
    return m_proc_date_isValid;
}

QList<OAIProductTranQueryDto> OAISalesInvoiceQueryDto::getProductTrans() const {
    return m_product_trans;
}
void OAISalesInvoiceQueryDto::setProductTrans(const QList<OAIProductTranQueryDto> &product_trans) {
    m_product_trans = product_trans;
    m_product_trans_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_product_trans_Set() const{
    return m_product_trans_isSet;
}

bool OAISalesInvoiceQueryDto::is_product_trans_Valid() const{
    return m_product_trans_isValid;
}

qint64 OAISalesInvoiceQueryDto::getQuoteId() const {
    return m_quote_id;
}
void OAISalesInvoiceQueryDto::setQuoteId(const qint64 &quote_id) {
    m_quote_id = quote_id;
    m_quote_id_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_quote_id_Set() const{
    return m_quote_id_isSet;
}

bool OAISalesInvoiceQueryDto::is_quote_id_Valid() const{
    return m_quote_id_isValid;
}

QString OAISalesInvoiceQueryDto::getReference() const {
    return m_reference;
}
void OAISalesInvoiceQueryDto::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAISalesInvoiceQueryDto::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAISalesInvoiceQueryDto::getSaleRepCode() const {
    return m_sale_rep_code;
}
void OAISalesInvoiceQueryDto::setSaleRepCode(const QString &sale_rep_code) {
    m_sale_rep_code = sale_rep_code;
    m_sale_rep_code_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_sale_rep_code_Set() const{
    return m_sale_rep_code_isSet;
}

bool OAISalesInvoiceQueryDto::is_sale_rep_code_Valid() const{
    return m_sale_rep_code_isValid;
}

qint64 OAISalesInvoiceQueryDto::getSaleRepId() const {
    return m_sale_rep_id;
}
void OAISalesInvoiceQueryDto::setSaleRepId(const qint64 &sale_rep_id) {
    m_sale_rep_id = sale_rep_id;
    m_sale_rep_id_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_sale_rep_id_Set() const{
    return m_sale_rep_id_isSet;
}

bool OAISalesInvoiceQueryDto::is_sale_rep_id_Valid() const{
    return m_sale_rep_id_isValid;
}

QByteArray OAISalesInvoiceQueryDto::getTimestamp() const {
    return m_timestamp;
}
void OAISalesInvoiceQueryDto::setTimestamp(const QByteArray &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAISalesInvoiceQueryDto::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

double OAISalesInvoiceQueryDto::getTotal() const {
    return m_total;
}
void OAISalesInvoiceQueryDto::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_total_Set() const{
    return m_total_isSet;
}

bool OAISalesInvoiceQueryDto::is_total_Valid() const{
    return m_total_isValid;
}

double OAISalesInvoiceQueryDto::getTotalNet() const {
    return m_total_net;
}
void OAISalesInvoiceQueryDto::setTotalNet(const double &total_net) {
    m_total_net = total_net;
    m_total_net_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_total_net_Set() const{
    return m_total_net_isSet;
}

bool OAISalesInvoiceQueryDto::is_total_net_Valid() const{
    return m_total_net_isValid;
}

double OAISalesInvoiceQueryDto::getTotalVat() const {
    return m_total_vat;
}
void OAISalesInvoiceQueryDto::setTotalVat(const double &total_vat) {
    m_total_vat = total_vat;
    m_total_vat_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_total_vat_Set() const{
    return m_total_vat_isSet;
}

bool OAISalesInvoiceQueryDto::is_total_vat_Valid() const{
    return m_total_vat_isValid;
}

double OAISalesInvoiceQueryDto::getUnpaid() const {
    return m_unpaid;
}
void OAISalesInvoiceQueryDto::setUnpaid(const double &unpaid) {
    m_unpaid = unpaid;
    m_unpaid_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_unpaid_Set() const{
    return m_unpaid_isSet;
}

bool OAISalesInvoiceQueryDto::is_unpaid_Valid() const{
    return m_unpaid_isValid;
}

qint64 OAISalesInvoiceQueryDto::getVatTypeId() const {
    return m_vat_type_id;
}
void OAISalesInvoiceQueryDto::setVatTypeId(const qint64 &vat_type_id) {
    m_vat_type_id = vat_type_id;
    m_vat_type_id_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_vat_type_id_Set() const{
    return m_vat_type_id_isSet;
}

bool OAISalesInvoiceQueryDto::is_vat_type_id_Valid() const{
    return m_vat_type_id_isValid;
}

QString OAISalesInvoiceQueryDto::getYourReference() const {
    return m_your_reference;
}
void OAISalesInvoiceQueryDto::setYourReference(const QString &your_reference) {
    m_your_reference = your_reference;
    m_your_reference_isSet = true;
}

bool OAISalesInvoiceQueryDto::is_your_reference_Set() const{
    return m_your_reference_isSet;
}

bool OAISalesInvoiceQueryDto::is_your_reference_Valid() const{
    return m_your_reference_isValid;
}

bool OAISalesInvoiceQueryDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ac_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_book_tran_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lo_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_goods_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_services_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_our_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proc_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_trans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_rep_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_rep_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_net_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unpaid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_your_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesInvoiceQueryDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
