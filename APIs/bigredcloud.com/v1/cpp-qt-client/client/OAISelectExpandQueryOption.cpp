/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISelectExpandQueryOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISelectExpandQueryOption::OAISelectExpandQueryOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISelectExpandQueryOption::OAISelectExpandQueryOption() {
    this->initializeModel();
}

OAISelectExpandQueryOption::~OAISelectExpandQueryOption() {}

void OAISelectExpandQueryOption::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_raw_expand_isSet = false;
    m_raw_expand_isValid = false;

    m_raw_select_isSet = false;
    m_raw_select_isValid = false;

    m_select_expand_clause_isSet = false;
    m_select_expand_clause_isValid = false;

    m_validator_isSet = false;
    m_validator_isValid = false;
}

void OAISelectExpandQueryOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISelectExpandQueryOption::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("Context")]);
    m_context_isSet = !json[QString("Context")].isNull() && m_context_isValid;

    m_raw_expand_isValid = ::OpenAPI::fromJsonValue(m_raw_expand, json[QString("RawExpand")]);
    m_raw_expand_isSet = !json[QString("RawExpand")].isNull() && m_raw_expand_isValid;

    m_raw_select_isValid = ::OpenAPI::fromJsonValue(m_raw_select, json[QString("RawSelect")]);
    m_raw_select_isSet = !json[QString("RawSelect")].isNull() && m_raw_select_isValid;

    m_select_expand_clause_isValid = ::OpenAPI::fromJsonValue(m_select_expand_clause, json[QString("SelectExpandClause")]);
    m_select_expand_clause_isSet = !json[QString("SelectExpandClause")].isNull() && m_select_expand_clause_isValid;

    m_validator_isValid = ::OpenAPI::fromJsonValue(m_validator, json[QString("Validator")]);
    m_validator_isSet = !json[QString("Validator")].isNull() && m_validator_isValid;
}

QString OAISelectExpandQueryOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISelectExpandQueryOption::asJsonObject() const {
    QJsonObject obj;
    if (m_context.isSet()) {
        obj.insert(QString("Context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_raw_expand_isSet) {
        obj.insert(QString("RawExpand"), ::OpenAPI::toJsonValue(m_raw_expand));
    }
    if (m_raw_select_isSet) {
        obj.insert(QString("RawSelect"), ::OpenAPI::toJsonValue(m_raw_select));
    }
    if (m_select_expand_clause.isSet()) {
        obj.insert(QString("SelectExpandClause"), ::OpenAPI::toJsonValue(m_select_expand_clause));
    }
    if (m_validator_isSet) {
        obj.insert(QString("Validator"), ::OpenAPI::toJsonValue(m_validator));
    }
    return obj;
}

OAIODataQueryContext OAISelectExpandQueryOption::getContext() const {
    return m_context;
}
void OAISelectExpandQueryOption::setContext(const OAIODataQueryContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAISelectExpandQueryOption::is_context_Set() const{
    return m_context_isSet;
}

bool OAISelectExpandQueryOption::is_context_Valid() const{
    return m_context_isValid;
}

QString OAISelectExpandQueryOption::getRawExpand() const {
    return m_raw_expand;
}
void OAISelectExpandQueryOption::setRawExpand(const QString &raw_expand) {
    m_raw_expand = raw_expand;
    m_raw_expand_isSet = true;
}

bool OAISelectExpandQueryOption::is_raw_expand_Set() const{
    return m_raw_expand_isSet;
}

bool OAISelectExpandQueryOption::is_raw_expand_Valid() const{
    return m_raw_expand_isValid;
}

QString OAISelectExpandQueryOption::getRawSelect() const {
    return m_raw_select;
}
void OAISelectExpandQueryOption::setRawSelect(const QString &raw_select) {
    m_raw_select = raw_select;
    m_raw_select_isSet = true;
}

bool OAISelectExpandQueryOption::is_raw_select_Set() const{
    return m_raw_select_isSet;
}

bool OAISelectExpandQueryOption::is_raw_select_Valid() const{
    return m_raw_select_isValid;
}

OAISelectExpandClause OAISelectExpandQueryOption::getSelectExpandClause() const {
    return m_select_expand_clause;
}
void OAISelectExpandQueryOption::setSelectExpandClause(const OAISelectExpandClause &select_expand_clause) {
    m_select_expand_clause = select_expand_clause;
    m_select_expand_clause_isSet = true;
}

bool OAISelectExpandQueryOption::is_select_expand_clause_Set() const{
    return m_select_expand_clause_isSet;
}

bool OAISelectExpandQueryOption::is_select_expand_clause_Valid() const{
    return m_select_expand_clause_isValid;
}

OAIObject OAISelectExpandQueryOption::getValidator() const {
    return m_validator;
}
void OAISelectExpandQueryOption::setValidator(const OAIObject &validator) {
    m_validator = validator;
    m_validator_isSet = true;
}

bool OAISelectExpandQueryOption::is_validator_Set() const{
    return m_validator_isSet;
}

bool OAISelectExpandQueryOption::is_validator_Valid() const{
    return m_validator_isValid;
}

bool OAISelectExpandQueryOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_expand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_select_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_expand_clause.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISelectExpandQueryOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
