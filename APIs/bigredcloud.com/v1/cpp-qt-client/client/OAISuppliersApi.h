/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISuppliersApi_H
#define OAI_OAISuppliersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountTranDto.h"
#include "OAIBatchItem_SupplierDto_.h"
#include "OAIObject.h"
#include "OAIOwnerOpeningBalanceDto.h"
#include "OAIOwnerOpeningBalanceInPeriodsDto.h"
#include "OAIPageResult_SupplierQueryDto_.h"
#include "OAISupplierDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISuppliersApi : public QObject {
    Q_OBJECT

public:
    OAISuppliersApi(const int timeOut = 0);
    ~OAISuppliersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  timestamp QString [required]
    */
    virtual void suppliersDelete(const qint64 &id, const QString &timestamp);


    virtual void suppliersGet();

    /**
    * @param[in]  item_id qint64 [required]
    */
    virtual void suppliersGetAccountTrans(const qint64 &item_id);

    /**
    * @param[in]  item_id qint64 [required]
    */
    virtual void suppliersGetOpeningBalance(const qint64 &item_id);

    /**
    * @param[in]  item_id qint64 [required]
    */
    virtual void suppliersGetOpeningBalanceList(const qint64 &item_id);

    /**
    * @param[in]  oai_supplier_dto OAISupplierDto [required]
    */
    virtual void suppliersPost(const OAISupplierDto &oai_supplier_dto);

    /**
    * @param[in]  oai_batch_item_supplier_dto_ QList<OAIBatchItem_SupplierDto_> [required]
    */
    virtual void suppliersProcessBatch(const QList<OAIBatchItem_SupplierDto_> &oai_batch_item_supplier_dto_);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_supplier_dto OAISupplierDto [required]
    */
    virtual void suppliersPut(const qint64 &id, const OAISupplierDto &oai_supplier_dto);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  need_balance bool [optional]
    */
    virtual void v1SuppliersIdGet(const qint64 &id, const ::OpenAPI::OptionalParam<bool> &need_balance = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void suppliersDeleteCallback(OAIHttpRequestWorker *worker);
    void suppliersGetCallback(OAIHttpRequestWorker *worker);
    void suppliersGetAccountTransCallback(OAIHttpRequestWorker *worker);
    void suppliersGetOpeningBalanceCallback(OAIHttpRequestWorker *worker);
    void suppliersGetOpeningBalanceListCallback(OAIHttpRequestWorker *worker);
    void suppliersPostCallback(OAIHttpRequestWorker *worker);
    void suppliersProcessBatchCallback(OAIHttpRequestWorker *worker);
    void suppliersPutCallback(OAIHttpRequestWorker *worker);
    void v1SuppliersIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void suppliersDeleteSignal(OAIObject summary);
    void suppliersGetSignal(OAIPageResult_SupplierQueryDto_ summary);
    void suppliersGetAccountTransSignal(QList<OAIAccountTranDto> summary);
    void suppliersGetOpeningBalanceSignal(OAIOwnerOpeningBalanceInPeriodsDto summary);
    void suppliersGetOpeningBalanceListSignal(QList<OAIOwnerOpeningBalanceDto> summary);
    void suppliersPostSignal(OAIObject summary);
    void suppliersProcessBatchSignal(OAIObject summary);
    void suppliersPutSignal(OAIObject summary);
    void v1SuppliersIdGetSignal(OAISupplierDto summary);


    void suppliersDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void suppliersGetSignalFull(OAIHttpRequestWorker *worker, OAIPageResult_SupplierQueryDto_ summary);
    void suppliersGetAccountTransSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccountTranDto> summary);
    void suppliersGetOpeningBalanceSignalFull(OAIHttpRequestWorker *worker, OAIOwnerOpeningBalanceInPeriodsDto summary);
    void suppliersGetOpeningBalanceListSignalFull(OAIHttpRequestWorker *worker, QList<OAIOwnerOpeningBalanceDto> summary);
    void suppliersPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void suppliersProcessBatchSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void suppliersPutSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void v1SuppliersIdGetSignalFull(OAIHttpRequestWorker *worker, OAISupplierDto summary);

    Q_DECL_DEPRECATED_X("Use suppliersDeleteSignalError() instead")
    void suppliersDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suppliersGetSignalError() instead")
    void suppliersGetSignalE(OAIPageResult_SupplierQueryDto_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersGetSignalError(OAIPageResult_SupplierQueryDto_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suppliersGetAccountTransSignalError() instead")
    void suppliersGetAccountTransSignalE(QList<OAIAccountTranDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersGetAccountTransSignalError(QList<OAIAccountTranDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suppliersGetOpeningBalanceSignalError() instead")
    void suppliersGetOpeningBalanceSignalE(OAIOwnerOpeningBalanceInPeriodsDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersGetOpeningBalanceSignalError(OAIOwnerOpeningBalanceInPeriodsDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suppliersGetOpeningBalanceListSignalError() instead")
    void suppliersGetOpeningBalanceListSignalE(QList<OAIOwnerOpeningBalanceDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersGetOpeningBalanceListSignalError(QList<OAIOwnerOpeningBalanceDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suppliersPostSignalError() instead")
    void suppliersPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suppliersProcessBatchSignalError() instead")
    void suppliersProcessBatchSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersProcessBatchSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suppliersPutSignalError() instead")
    void suppliersPutSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersPutSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1SuppliersIdGetSignalError() instead")
    void v1SuppliersIdGetSignalE(OAISupplierDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1SuppliersIdGetSignalError(OAISupplierDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use suppliersDeleteSignalErrorFull() instead")
    void suppliersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suppliersGetSignalErrorFull() instead")
    void suppliersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suppliersGetAccountTransSignalErrorFull() instead")
    void suppliersGetAccountTransSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersGetAccountTransSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suppliersGetOpeningBalanceSignalErrorFull() instead")
    void suppliersGetOpeningBalanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersGetOpeningBalanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suppliersGetOpeningBalanceListSignalErrorFull() instead")
    void suppliersGetOpeningBalanceListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersGetOpeningBalanceListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suppliersPostSignalErrorFull() instead")
    void suppliersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suppliersProcessBatchSignalErrorFull() instead")
    void suppliersProcessBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersProcessBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suppliersPutSignalErrorFull() instead")
    void suppliersPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1SuppliersIdGetSignalErrorFull() instead")
    void v1SuppliersIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1SuppliersIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
