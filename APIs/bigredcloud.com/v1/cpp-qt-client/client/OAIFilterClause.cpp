/**
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterClause.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterClause::OAIFilterClause(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterClause::OAIFilterClause() {
    this->initializeModel();
}

OAIFilterClause::~OAIFilterClause() {}

void OAIFilterClause::initializeModel() {

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_item_type_isSet = false;
    m_item_type_isValid = false;

    m_range_variable_isSet = false;
    m_range_variable_isValid = false;
}

void OAIFilterClause::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterClause::fromJsonObject(QJsonObject json) {

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("Expression")]);
    m_expression_isSet = !json[QString("Expression")].isNull() && m_expression_isValid;

    m_item_type_isValid = ::OpenAPI::fromJsonValue(m_item_type, json[QString("ItemType")]);
    m_item_type_isSet = !json[QString("ItemType")].isNull() && m_item_type_isValid;

    m_range_variable_isValid = ::OpenAPI::fromJsonValue(m_range_variable, json[QString("RangeVariable")]);
    m_range_variable_isSet = !json[QString("RangeVariable")].isNull() && m_range_variable_isValid;
}

QString OAIFilterClause::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterClause::asJsonObject() const {
    QJsonObject obj;
    if (m_expression.isSet()) {
        obj.insert(QString("Expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_item_type.isSet()) {
        obj.insert(QString("ItemType"), ::OpenAPI::toJsonValue(m_item_type));
    }
    if (m_range_variable.isSet()) {
        obj.insert(QString("RangeVariable"), ::OpenAPI::toJsonValue(m_range_variable));
    }
    return obj;
}

OAISingleValueNode OAIFilterClause::getExpression() const {
    return m_expression;
}
void OAIFilterClause::setExpression(const OAISingleValueNode &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIFilterClause::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIFilterClause::is_expression_Valid() const{
    return m_expression_isValid;
}

OAIIEdmTypeReference OAIFilterClause::getItemType() const {
    return m_item_type;
}
void OAIFilterClause::setItemType(const OAIIEdmTypeReference &item_type) {
    m_item_type = item_type;
    m_item_type_isSet = true;
}

bool OAIFilterClause::is_item_type_Set() const{
    return m_item_type_isSet;
}

bool OAIFilterClause::is_item_type_Valid() const{
    return m_item_type_isValid;
}

OAIRangeVariable OAIFilterClause::getRangeVariable() const {
    return m_range_variable;
}
void OAIFilterClause::setRangeVariable(const OAIRangeVariable &range_variable) {
    m_range_variable = range_variable;
    m_range_variable_isSet = true;
}

bool OAIFilterClause::is_range_variable_Set() const{
    return m_range_variable_isSet;
}

bool OAIFilterClause::is_range_variable_Valid() const{
    return m_range_variable_isValid;
}

bool OAIFilterClause::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_variable.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterClause::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
