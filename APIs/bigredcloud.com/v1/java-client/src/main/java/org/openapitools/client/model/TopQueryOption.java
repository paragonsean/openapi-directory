/*
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ODataQueryContext;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TopQueryOption
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:05.666566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TopQueryOption {
  public static final String SERIALIZED_NAME_CONTEXT = "Context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private ODataQueryContext context;

  public static final String SERIALIZED_NAME_RAW_VALUE = "RawValue";
  @SerializedName(SERIALIZED_NAME_RAW_VALUE)
  private String rawValue;

  public static final String SERIALIZED_NAME_VALIDATOR = "Validator";
  @SerializedName(SERIALIZED_NAME_VALIDATOR)
  private Object validator;

  public static final String SERIALIZED_NAME_VALUE = "Value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Integer value;

  public TopQueryOption() {
  }

  public TopQueryOption(
     String rawValue, 
     Integer value
  ) {
    this();
    this.rawValue = rawValue;
    this.value = value;
  }

  public TopQueryOption context(ODataQueryContext context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public ODataQueryContext getContext() {
    return context;
  }

  public void setContext(ODataQueryContext context) {
    this.context = context;
  }


  /**
   * Get rawValue
   * @return rawValue
   */
  @javax.annotation.Nullable
  public String getRawValue() {
    return rawValue;
  }



  public TopQueryOption validator(Object validator) {
    this.validator = validator;
    return this;
  }

  /**
   * Get validator
   * @return validator
   */
  @javax.annotation.Nullable
  public Object getValidator() {
    return validator;
  }

  public void setValidator(Object validator) {
    this.validator = validator;
  }


  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public Integer getValue() {
    return value;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TopQueryOption topQueryOption = (TopQueryOption) o;
    return Objects.equals(this.context, topQueryOption.context) &&
        Objects.equals(this.rawValue, topQueryOption.rawValue) &&
        Objects.equals(this.validator, topQueryOption.validator) &&
        Objects.equals(this.value, topQueryOption.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(context, rawValue, validator, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TopQueryOption {\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    rawValue: ").append(toIndentedString(rawValue)).append("\n");
    sb.append("    validator: ").append(toIndentedString(validator)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Context");
    openapiFields.add("RawValue");
    openapiFields.add("Validator");
    openapiFields.add("Value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TopQueryOption
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TopQueryOption.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TopQueryOption is not found in the empty JSON string", TopQueryOption.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TopQueryOption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TopQueryOption` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Context`
      if (jsonObj.get("Context") != null && !jsonObj.get("Context").isJsonNull()) {
        ODataQueryContext.validateJsonElement(jsonObj.get("Context"));
      }
      if ((jsonObj.get("RawValue") != null && !jsonObj.get("RawValue").isJsonNull()) && !jsonObj.get("RawValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RawValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RawValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TopQueryOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TopQueryOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TopQueryOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TopQueryOption.class));

       return (TypeAdapter<T>) new TypeAdapter<TopQueryOption>() {
           @Override
           public void write(JsonWriter out, TopQueryOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TopQueryOption read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TopQueryOption given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TopQueryOption
   * @throws IOException if the JSON string is invalid with respect to TopQueryOption
   */
  public static TopQueryOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TopQueryOption.class);
  }

  /**
   * Convert an instance of TopQueryOption to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

