/*
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AcEntryDto;
import org.openapitools.client.model.AcudfValueDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CashPaymentQueryDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:05.666566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CashPaymentQueryDto {
  public static final String SERIALIZED_NAME_AC_CODE = "acCode";
  @SerializedName(SERIALIZED_NAME_AC_CODE)
  private String acCode;

  public static final String SERIALIZED_NAME_AC_ENTRIES = "acEntries";
  @SerializedName(SERIALIZED_NAME_AC_ENTRIES)
  private List<AcEntryDto> acEntries = new ArrayList<>();

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_CODE = "bankAccountCode";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_CODE)
  private String bankAccountCode;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_ID = "bankAccountId";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_ID)
  private Long bankAccountId;

  public static final String SERIALIZED_NAME_BOOK_TRAN_TYPE_ID = "bookTranTypeId";
  @SerializedName(SERIALIZED_NAME_BOOK_TRAN_TYPE_ID)
  private Long bookTranTypeId;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<AcudfValueDto> customFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETAIL_COLLECTION = "detailCollection";
  @SerializedName(SERIALIZED_NAME_DETAIL_COLLECTION)
  private List<String> detailCollection = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISCOUNT = "discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private Double discount;

  public static final String SERIALIZED_NAME_ENTRY_DATE = "entryDate";
  @SerializedName(SERIALIZED_NAME_ENTRY_DATE)
  private OffsetDateTime entryDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_LEDGER = "ledger";
  @SerializedName(SERIALIZED_NAME_LEDGER)
  private Double ledger;

  public static final String SERIALIZED_NAME_LODGEMENT = "lodgement";
  @SerializedName(SERIALIZED_NAME_LODGEMENT)
  private Double lodgement;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_PLAID_TRANSACTION_ID = "plaidTransactionId";
  @SerializedName(SERIALIZED_NAME_PLAID_TRANSACTION_ID)
  private String plaidTransactionId;

  public static final String SERIALIZED_NAME_PROC_DATE = "procDate";
  @SerializedName(SERIALIZED_NAME_PROC_DATE)
  private OffsetDateTime procDate;

  public static final String SERIALIZED_NAME_SUPPLIER_ID = "supplierId";
  @SerializedName(SERIALIZED_NAME_SUPPLIER_ID)
  private Long supplierId;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private byte[] timestamp;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Double total;

  public static final String SERIALIZED_NAME_UNALLOCATED = "unallocated";
  @SerializedName(SERIALIZED_NAME_UNALLOCATED)
  private Double unallocated;

  public CashPaymentQueryDto() {
  }

  public CashPaymentQueryDto acCode(String acCode) {
    this.acCode = acCode;
    return this;
  }

  /**
   * Get acCode
   * @return acCode
   */
  @javax.annotation.Nullable
  public String getAcCode() {
    return acCode;
  }

  public void setAcCode(String acCode) {
    this.acCode = acCode;
  }


  public CashPaymentQueryDto acEntries(List<AcEntryDto> acEntries) {
    this.acEntries = acEntries;
    return this;
  }

  public CashPaymentQueryDto addAcEntriesItem(AcEntryDto acEntriesItem) {
    if (this.acEntries == null) {
      this.acEntries = new ArrayList<>();
    }
    this.acEntries.add(acEntriesItem);
    return this;
  }

  /**
   * Get acEntries
   * @return acEntries
   */
  @javax.annotation.Nullable
  public List<AcEntryDto> getAcEntries() {
    return acEntries;
  }

  public void setAcEntries(List<AcEntryDto> acEntries) {
    this.acEntries = acEntries;
  }


  public CashPaymentQueryDto bankAccountCode(String bankAccountCode) {
    this.bankAccountCode = bankAccountCode;
    return this;
  }

  /**
   * Get bankAccountCode
   * @return bankAccountCode
   */
  @javax.annotation.Nullable
  public String getBankAccountCode() {
    return bankAccountCode;
  }

  public void setBankAccountCode(String bankAccountCode) {
    this.bankAccountCode = bankAccountCode;
  }


  public CashPaymentQueryDto bankAccountId(Long bankAccountId) {
    this.bankAccountId = bankAccountId;
    return this;
  }

  /**
   * Get bankAccountId
   * @return bankAccountId
   */
  @javax.annotation.Nullable
  public Long getBankAccountId() {
    return bankAccountId;
  }

  public void setBankAccountId(Long bankAccountId) {
    this.bankAccountId = bankAccountId;
  }


  public CashPaymentQueryDto bookTranTypeId(Long bookTranTypeId) {
    this.bookTranTypeId = bookTranTypeId;
    return this;
  }

  /**
   * Get bookTranTypeId
   * @return bookTranTypeId
   */
  @javax.annotation.Nullable
  public Long getBookTranTypeId() {
    return bookTranTypeId;
  }

  public void setBookTranTypeId(Long bookTranTypeId) {
    this.bookTranTypeId = bookTranTypeId;
  }


  public CashPaymentQueryDto customFields(List<AcudfValueDto> customFields) {
    this.customFields = customFields;
    return this;
  }

  public CashPaymentQueryDto addCustomFieldsItem(AcudfValueDto customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new ArrayList<>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public List<AcudfValueDto> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(List<AcudfValueDto> customFields) {
    this.customFields = customFields;
  }


  public CashPaymentQueryDto detailCollection(List<String> detailCollection) {
    this.detailCollection = detailCollection;
    return this;
  }

  public CashPaymentQueryDto addDetailCollectionItem(String detailCollectionItem) {
    if (this.detailCollection == null) {
      this.detailCollection = new ArrayList<>();
    }
    this.detailCollection.add(detailCollectionItem);
    return this;
  }

  /**
   * Get detailCollection
   * @return detailCollection
   */
  @javax.annotation.Nullable
  public List<String> getDetailCollection() {
    return detailCollection;
  }

  public void setDetailCollection(List<String> detailCollection) {
    this.detailCollection = detailCollection;
  }


  public CashPaymentQueryDto discount(Double discount) {
    this.discount = discount;
    return this;
  }

  /**
   * Get discount
   * @return discount
   */
  @javax.annotation.Nullable
  public Double getDiscount() {
    return discount;
  }

  public void setDiscount(Double discount) {
    this.discount = discount;
  }


  public CashPaymentQueryDto entryDate(OffsetDateTime entryDate) {
    this.entryDate = entryDate;
    return this;
  }

  /**
   * Get entryDate
   * @return entryDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEntryDate() {
    return entryDate;
  }

  public void setEntryDate(OffsetDateTime entryDate) {
    this.entryDate = entryDate;
  }


  public CashPaymentQueryDto id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public CashPaymentQueryDto ledger(Double ledger) {
    this.ledger = ledger;
    return this;
  }

  /**
   * Get ledger
   * @return ledger
   */
  @javax.annotation.Nullable
  public Double getLedger() {
    return ledger;
  }

  public void setLedger(Double ledger) {
    this.ledger = ledger;
  }


  public CashPaymentQueryDto lodgement(Double lodgement) {
    this.lodgement = lodgement;
    return this;
  }

  /**
   * Get lodgement
   * @return lodgement
   */
  @javax.annotation.Nullable
  public Double getLodgement() {
    return lodgement;
  }

  public void setLodgement(Double lodgement) {
    this.lodgement = lodgement;
  }


  public CashPaymentQueryDto note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Get note
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public CashPaymentQueryDto plaidTransactionId(String plaidTransactionId) {
    this.plaidTransactionId = plaidTransactionId;
    return this;
  }

  /**
   * Get plaidTransactionId
   * @return plaidTransactionId
   */
  @javax.annotation.Nullable
  public String getPlaidTransactionId() {
    return plaidTransactionId;
  }

  public void setPlaidTransactionId(String plaidTransactionId) {
    this.plaidTransactionId = plaidTransactionId;
  }


  public CashPaymentQueryDto procDate(OffsetDateTime procDate) {
    this.procDate = procDate;
    return this;
  }

  /**
   * Get procDate
   * @return procDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getProcDate() {
    return procDate;
  }

  public void setProcDate(OffsetDateTime procDate) {
    this.procDate = procDate;
  }


  public CashPaymentQueryDto supplierId(Long supplierId) {
    this.supplierId = supplierId;
    return this;
  }

  /**
   * Get supplierId
   * @return supplierId
   */
  @javax.annotation.Nullable
  public Long getSupplierId() {
    return supplierId;
  }

  public void setSupplierId(Long supplierId) {
    this.supplierId = supplierId;
  }


  public CashPaymentQueryDto timestamp(byte[] timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public byte[] getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(byte[] timestamp) {
    this.timestamp = timestamp;
  }


  public CashPaymentQueryDto total(Double total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public Double getTotal() {
    return total;
  }

  public void setTotal(Double total) {
    this.total = total;
  }


  public CashPaymentQueryDto unallocated(Double unallocated) {
    this.unallocated = unallocated;
    return this;
  }

  /**
   * Get unallocated
   * @return unallocated
   */
  @javax.annotation.Nullable
  public Double getUnallocated() {
    return unallocated;
  }

  public void setUnallocated(Double unallocated) {
    this.unallocated = unallocated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CashPaymentQueryDto cashPaymentQueryDto = (CashPaymentQueryDto) o;
    return Objects.equals(this.acCode, cashPaymentQueryDto.acCode) &&
        Objects.equals(this.acEntries, cashPaymentQueryDto.acEntries) &&
        Objects.equals(this.bankAccountCode, cashPaymentQueryDto.bankAccountCode) &&
        Objects.equals(this.bankAccountId, cashPaymentQueryDto.bankAccountId) &&
        Objects.equals(this.bookTranTypeId, cashPaymentQueryDto.bookTranTypeId) &&
        Objects.equals(this.customFields, cashPaymentQueryDto.customFields) &&
        Objects.equals(this.detailCollection, cashPaymentQueryDto.detailCollection) &&
        Objects.equals(this.discount, cashPaymentQueryDto.discount) &&
        Objects.equals(this.entryDate, cashPaymentQueryDto.entryDate) &&
        Objects.equals(this.id, cashPaymentQueryDto.id) &&
        Objects.equals(this.ledger, cashPaymentQueryDto.ledger) &&
        Objects.equals(this.lodgement, cashPaymentQueryDto.lodgement) &&
        Objects.equals(this.note, cashPaymentQueryDto.note) &&
        Objects.equals(this.plaidTransactionId, cashPaymentQueryDto.plaidTransactionId) &&
        Objects.equals(this.procDate, cashPaymentQueryDto.procDate) &&
        Objects.equals(this.supplierId, cashPaymentQueryDto.supplierId) &&
        Arrays.equals(this.timestamp, cashPaymentQueryDto.timestamp) &&
        Objects.equals(this.total, cashPaymentQueryDto.total) &&
        Objects.equals(this.unallocated, cashPaymentQueryDto.unallocated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acCode, acEntries, bankAccountCode, bankAccountId, bookTranTypeId, customFields, detailCollection, discount, entryDate, id, ledger, lodgement, note, plaidTransactionId, procDate, supplierId, Arrays.hashCode(timestamp), total, unallocated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CashPaymentQueryDto {\n");
    sb.append("    acCode: ").append(toIndentedString(acCode)).append("\n");
    sb.append("    acEntries: ").append(toIndentedString(acEntries)).append("\n");
    sb.append("    bankAccountCode: ").append(toIndentedString(bankAccountCode)).append("\n");
    sb.append("    bankAccountId: ").append(toIndentedString(bankAccountId)).append("\n");
    sb.append("    bookTranTypeId: ").append(toIndentedString(bookTranTypeId)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    detailCollection: ").append(toIndentedString(detailCollection)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    entryDate: ").append(toIndentedString(entryDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ledger: ").append(toIndentedString(ledger)).append("\n");
    sb.append("    lodgement: ").append(toIndentedString(lodgement)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    plaidTransactionId: ").append(toIndentedString(plaidTransactionId)).append("\n");
    sb.append("    procDate: ").append(toIndentedString(procDate)).append("\n");
    sb.append("    supplierId: ").append(toIndentedString(supplierId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    unallocated: ").append(toIndentedString(unallocated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acCode");
    openapiFields.add("acEntries");
    openapiFields.add("bankAccountCode");
    openapiFields.add("bankAccountId");
    openapiFields.add("bookTranTypeId");
    openapiFields.add("customFields");
    openapiFields.add("detailCollection");
    openapiFields.add("discount");
    openapiFields.add("entryDate");
    openapiFields.add("id");
    openapiFields.add("ledger");
    openapiFields.add("lodgement");
    openapiFields.add("note");
    openapiFields.add("plaidTransactionId");
    openapiFields.add("procDate");
    openapiFields.add("supplierId");
    openapiFields.add("timestamp");
    openapiFields.add("total");
    openapiFields.add("unallocated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CashPaymentQueryDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CashPaymentQueryDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CashPaymentQueryDto is not found in the empty JSON string", CashPaymentQueryDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CashPaymentQueryDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CashPaymentQueryDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acCode") != null && !jsonObj.get("acCode").isJsonNull()) && !jsonObj.get("acCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acCode").toString()));
      }
      if (jsonObj.get("acEntries") != null && !jsonObj.get("acEntries").isJsonNull()) {
        JsonArray jsonArrayacEntries = jsonObj.getAsJsonArray("acEntries");
        if (jsonArrayacEntries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("acEntries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `acEntries` to be an array in the JSON string but got `%s`", jsonObj.get("acEntries").toString()));
          }

          // validate the optional field `acEntries` (array)
          for (int i = 0; i < jsonArrayacEntries.size(); i++) {
            AcEntryDto.validateJsonElement(jsonArrayacEntries.get(i));
          };
        }
      }
      if ((jsonObj.get("bankAccountCode") != null && !jsonObj.get("bankAccountCode").isJsonNull()) && !jsonObj.get("bankAccountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankAccountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankAccountCode").toString()));
      }
      if (jsonObj.get("customFields") != null && !jsonObj.get("customFields").isJsonNull()) {
        JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("customFields");
        if (jsonArraycustomFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customFields` to be an array in the JSON string but got `%s`", jsonObj.get("customFields").toString()));
          }

          // validate the optional field `customFields` (array)
          for (int i = 0; i < jsonArraycustomFields.size(); i++) {
            AcudfValueDto.validateJsonElement(jsonArraycustomFields.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("detailCollection") != null && !jsonObj.get("detailCollection").isJsonNull() && !jsonObj.get("detailCollection").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `detailCollection` to be an array in the JSON string but got `%s`", jsonObj.get("detailCollection").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("plaidTransactionId") != null && !jsonObj.get("plaidTransactionId").isJsonNull()) && !jsonObj.get("plaidTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plaidTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plaidTransactionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CashPaymentQueryDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CashPaymentQueryDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CashPaymentQueryDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CashPaymentQueryDto.class));

       return (TypeAdapter<T>) new TypeAdapter<CashPaymentQueryDto>() {
           @Override
           public void write(JsonWriter out, CashPaymentQueryDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CashPaymentQueryDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CashPaymentQueryDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CashPaymentQueryDto
   * @throws IOException if the JSON string is invalid with respect to CashPaymentQueryDto
   */
  public static CashPaymentQueryDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CashPaymentQueryDto.class);
  }

  /**
   * Convert an instance of CashPaymentQueryDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

