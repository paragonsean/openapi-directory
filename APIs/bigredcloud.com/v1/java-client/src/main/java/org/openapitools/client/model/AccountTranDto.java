/*
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountTranDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:05.666566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountTranDto {
  public static final String SERIALIZED_NAME_BOOK_TRAN_ID = "bookTranId";
  @SerializedName(SERIALIZED_NAME_BOOK_TRAN_ID)
  private Long bookTranId;

  public static final String SERIALIZED_NAME_BOOK_TRAN_TYPE_ID = "bookTranTypeId";
  @SerializedName(SERIALIZED_NAME_BOOK_TRAN_TYPE_ID)
  private Long bookTranTypeId;

  public static final String SERIALIZED_NAME_BOOK_TRANSACTION_REFERENCE = "bookTransactionReference";
  @SerializedName(SERIALIZED_NAME_BOOK_TRANSACTION_REFERENCE)
  private String bookTransactionReference;

  public static final String SERIALIZED_NAME_BOOK_TYPE_DESC = "bookTypeDesc";
  @SerializedName(SERIALIZED_NAME_BOOK_TYPE_DESC)
  private String bookTypeDesc;

  public static final String SERIALIZED_NAME_CREDIT = "credit";
  @SerializedName(SERIALIZED_NAME_CREDIT)
  private Double credit;

  public static final String SERIALIZED_NAME_DEBIT = "debit";
  @SerializedName(SERIALIZED_NAME_DEBIT)
  private Double debit;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_PROC_DATE = "procDate";
  @SerializedName(SERIALIZED_NAME_PROC_DATE)
  private OffsetDateTime procDate;

  public AccountTranDto() {
  }

  public AccountTranDto bookTranId(Long bookTranId) {
    this.bookTranId = bookTranId;
    return this;
  }

  /**
   * Get bookTranId
   * @return bookTranId
   */
  @javax.annotation.Nullable
  public Long getBookTranId() {
    return bookTranId;
  }

  public void setBookTranId(Long bookTranId) {
    this.bookTranId = bookTranId;
  }


  public AccountTranDto bookTranTypeId(Long bookTranTypeId) {
    this.bookTranTypeId = bookTranTypeId;
    return this;
  }

  /**
   * Get bookTranTypeId
   * @return bookTranTypeId
   */
  @javax.annotation.Nullable
  public Long getBookTranTypeId() {
    return bookTranTypeId;
  }

  public void setBookTranTypeId(Long bookTranTypeId) {
    this.bookTranTypeId = bookTranTypeId;
  }


  public AccountTranDto bookTransactionReference(String bookTransactionReference) {
    this.bookTransactionReference = bookTransactionReference;
    return this;
  }

  /**
   * Get bookTransactionReference
   * @return bookTransactionReference
   */
  @javax.annotation.Nullable
  public String getBookTransactionReference() {
    return bookTransactionReference;
  }

  public void setBookTransactionReference(String bookTransactionReference) {
    this.bookTransactionReference = bookTransactionReference;
  }


  public AccountTranDto bookTypeDesc(String bookTypeDesc) {
    this.bookTypeDesc = bookTypeDesc;
    return this;
  }

  /**
   * Get bookTypeDesc
   * @return bookTypeDesc
   */
  @javax.annotation.Nullable
  public String getBookTypeDesc() {
    return bookTypeDesc;
  }

  public void setBookTypeDesc(String bookTypeDesc) {
    this.bookTypeDesc = bookTypeDesc;
  }


  public AccountTranDto credit(Double credit) {
    this.credit = credit;
    return this;
  }

  /**
   * Get credit
   * @return credit
   */
  @javax.annotation.Nullable
  public Double getCredit() {
    return credit;
  }

  public void setCredit(Double credit) {
    this.credit = credit;
  }


  public AccountTranDto debit(Double debit) {
    this.debit = debit;
    return this;
  }

  /**
   * Get debit
   * @return debit
   */
  @javax.annotation.Nullable
  public Double getDebit() {
    return debit;
  }

  public void setDebit(Double debit) {
    this.debit = debit;
  }


  public AccountTranDto id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public AccountTranDto procDate(OffsetDateTime procDate) {
    this.procDate = procDate;
    return this;
  }

  /**
   * Get procDate
   * @return procDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getProcDate() {
    return procDate;
  }

  public void setProcDate(OffsetDateTime procDate) {
    this.procDate = procDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountTranDto accountTranDto = (AccountTranDto) o;
    return Objects.equals(this.bookTranId, accountTranDto.bookTranId) &&
        Objects.equals(this.bookTranTypeId, accountTranDto.bookTranTypeId) &&
        Objects.equals(this.bookTransactionReference, accountTranDto.bookTransactionReference) &&
        Objects.equals(this.bookTypeDesc, accountTranDto.bookTypeDesc) &&
        Objects.equals(this.credit, accountTranDto.credit) &&
        Objects.equals(this.debit, accountTranDto.debit) &&
        Objects.equals(this.id, accountTranDto.id) &&
        Objects.equals(this.procDate, accountTranDto.procDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bookTranId, bookTranTypeId, bookTransactionReference, bookTypeDesc, credit, debit, id, procDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountTranDto {\n");
    sb.append("    bookTranId: ").append(toIndentedString(bookTranId)).append("\n");
    sb.append("    bookTranTypeId: ").append(toIndentedString(bookTranTypeId)).append("\n");
    sb.append("    bookTransactionReference: ").append(toIndentedString(bookTransactionReference)).append("\n");
    sb.append("    bookTypeDesc: ").append(toIndentedString(bookTypeDesc)).append("\n");
    sb.append("    credit: ").append(toIndentedString(credit)).append("\n");
    sb.append("    debit: ").append(toIndentedString(debit)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    procDate: ").append(toIndentedString(procDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bookTranId");
    openapiFields.add("bookTranTypeId");
    openapiFields.add("bookTransactionReference");
    openapiFields.add("bookTypeDesc");
    openapiFields.add("credit");
    openapiFields.add("debit");
    openapiFields.add("id");
    openapiFields.add("procDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountTranDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountTranDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountTranDto is not found in the empty JSON string", AccountTranDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountTranDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountTranDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bookTransactionReference") != null && !jsonObj.get("bookTransactionReference").isJsonNull()) && !jsonObj.get("bookTransactionReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bookTransactionReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bookTransactionReference").toString()));
      }
      if ((jsonObj.get("bookTypeDesc") != null && !jsonObj.get("bookTypeDesc").isJsonNull()) && !jsonObj.get("bookTypeDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bookTypeDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bookTypeDesc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountTranDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountTranDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountTranDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountTranDto.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountTranDto>() {
           @Override
           public void write(JsonWriter out, AccountTranDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountTranDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountTranDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountTranDto
   * @throws IOException if the JSON string is invalid with respect to AccountTranDto
   */
  public static AccountTranDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountTranDto.class);
  }

  /**
   * Convert an instance of AccountTranDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

