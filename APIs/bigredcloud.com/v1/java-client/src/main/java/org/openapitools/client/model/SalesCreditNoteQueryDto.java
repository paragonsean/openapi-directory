/*
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AcudfValueDto;
import org.openapitools.client.model.ProductTranQueryDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SalesCreditNoteQueryDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:05.666566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesCreditNoteQueryDto {
  public static final String SERIALIZED_NAME_AC_CODE = "acCode";
  @SerializedName(SERIALIZED_NAME_AC_CODE)
  private String acCode;

  public static final String SERIALIZED_NAME_BOOK_TRAN_TYPE_ID = "bookTranTypeId";
  @SerializedName(SERIALIZED_NAME_BOOK_TRAN_TYPE_ID)
  private Long bookTranTypeId;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<AcudfValueDto> customFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private Long customerId;

  public static final String SERIALIZED_NAME_DELIVERY_TO = "deliveryTo";
  @SerializedName(SERIALIZED_NAME_DELIVERY_TO)
  private List<String> deliveryTo = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private String details;

  public static final String SERIALIZED_NAME_ENTRY_DATE = "entryDate";
  @SerializedName(SERIALIZED_NAME_ENTRY_DATE)
  private OffsetDateTime entryDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_LO_TYPE = "loType";
  @SerializedName(SERIALIZED_NAME_LO_TYPE)
  private String loType;

  public static final String SERIALIZED_NAME_NET_GOODS = "netGoods";
  @SerializedName(SERIALIZED_NAME_NET_GOODS)
  private Double netGoods;

  public static final String SERIALIZED_NAME_NET_SERVICES = "netServices";
  @SerializedName(SERIALIZED_NAME_NET_SERVICES)
  private Double netServices;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_OUR_REFERENCE = "ourReference";
  @SerializedName(SERIALIZED_NAME_OUR_REFERENCE)
  private String ourReference;

  public static final String SERIALIZED_NAME_PROC_DATE = "procDate";
  @SerializedName(SERIALIZED_NAME_PROC_DATE)
  private OffsetDateTime procDate;

  public static final String SERIALIZED_NAME_PRODUCT_TRANS = "productTrans";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TRANS)
  private List<ProductTranQueryDto> productTrans = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUOTE_ID = "quoteId";
  @SerializedName(SERIALIZED_NAME_QUOTE_ID)
  private Long quoteId;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_SALE_REP_CODE = "saleRepCode";
  @SerializedName(SERIALIZED_NAME_SALE_REP_CODE)
  private String saleRepCode;

  public static final String SERIALIZED_NAME_SALE_REP_ID = "saleRepId";
  @SerializedName(SERIALIZED_NAME_SALE_REP_ID)
  private Long saleRepId;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private byte[] timestamp;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Double total;

  public static final String SERIALIZED_NAME_TOTAL_NET = "totalNet";
  @SerializedName(SERIALIZED_NAME_TOTAL_NET)
  private Double totalNet;

  public static final String SERIALIZED_NAME_TOTAL_V_A_T = "totalVAT";
  @SerializedName(SERIALIZED_NAME_TOTAL_V_A_T)
  private Double totalVAT;

  public static final String SERIALIZED_NAME_UNPAID = "unpaid";
  @SerializedName(SERIALIZED_NAME_UNPAID)
  private Double unpaid;

  public static final String SERIALIZED_NAME_VAT_TYPE_ID = "vatTypeId";
  @SerializedName(SERIALIZED_NAME_VAT_TYPE_ID)
  private Long vatTypeId;

  public static final String SERIALIZED_NAME_YOUR_REFERENCE = "yourReference";
  @SerializedName(SERIALIZED_NAME_YOUR_REFERENCE)
  private String yourReference;

  public SalesCreditNoteQueryDto() {
  }

  public SalesCreditNoteQueryDto acCode(String acCode) {
    this.acCode = acCode;
    return this;
  }

  /**
   * Get acCode
   * @return acCode
   */
  @javax.annotation.Nullable
  public String getAcCode() {
    return acCode;
  }

  public void setAcCode(String acCode) {
    this.acCode = acCode;
  }


  public SalesCreditNoteQueryDto bookTranTypeId(Long bookTranTypeId) {
    this.bookTranTypeId = bookTranTypeId;
    return this;
  }

  /**
   * Get bookTranTypeId
   * @return bookTranTypeId
   */
  @javax.annotation.Nullable
  public Long getBookTranTypeId() {
    return bookTranTypeId;
  }

  public void setBookTranTypeId(Long bookTranTypeId) {
    this.bookTranTypeId = bookTranTypeId;
  }


  public SalesCreditNoteQueryDto customFields(List<AcudfValueDto> customFields) {
    this.customFields = customFields;
    return this;
  }

  public SalesCreditNoteQueryDto addCustomFieldsItem(AcudfValueDto customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new ArrayList<>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public List<AcudfValueDto> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(List<AcudfValueDto> customFields) {
    this.customFields = customFields;
  }


  public SalesCreditNoteQueryDto customerId(Long customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Get customerId
   * @return customerId
   */
  @javax.annotation.Nullable
  public Long getCustomerId() {
    return customerId;
  }

  public void setCustomerId(Long customerId) {
    this.customerId = customerId;
  }


  public SalesCreditNoteQueryDto deliveryTo(List<String> deliveryTo) {
    this.deliveryTo = deliveryTo;
    return this;
  }

  public SalesCreditNoteQueryDto addDeliveryToItem(String deliveryToItem) {
    if (this.deliveryTo == null) {
      this.deliveryTo = new ArrayList<>();
    }
    this.deliveryTo.add(deliveryToItem);
    return this;
  }

  /**
   * Get deliveryTo
   * @return deliveryTo
   */
  @javax.annotation.Nullable
  public List<String> getDeliveryTo() {
    return deliveryTo;
  }

  public void setDeliveryTo(List<String> deliveryTo) {
    this.deliveryTo = deliveryTo;
  }


  public SalesCreditNoteQueryDto details(String details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public String getDetails() {
    return details;
  }

  public void setDetails(String details) {
    this.details = details;
  }


  public SalesCreditNoteQueryDto entryDate(OffsetDateTime entryDate) {
    this.entryDate = entryDate;
    return this;
  }

  /**
   * Get entryDate
   * @return entryDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEntryDate() {
    return entryDate;
  }

  public void setEntryDate(OffsetDateTime entryDate) {
    this.entryDate = entryDate;
  }


  public SalesCreditNoteQueryDto id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public SalesCreditNoteQueryDto loType(String loType) {
    this.loType = loType;
    return this;
  }

  /**
   * Get loType
   * @return loType
   */
  @javax.annotation.Nullable
  public String getLoType() {
    return loType;
  }

  public void setLoType(String loType) {
    this.loType = loType;
  }


  public SalesCreditNoteQueryDto netGoods(Double netGoods) {
    this.netGoods = netGoods;
    return this;
  }

  /**
   * Get netGoods
   * @return netGoods
   */
  @javax.annotation.Nullable
  public Double getNetGoods() {
    return netGoods;
  }

  public void setNetGoods(Double netGoods) {
    this.netGoods = netGoods;
  }


  public SalesCreditNoteQueryDto netServices(Double netServices) {
    this.netServices = netServices;
    return this;
  }

  /**
   * Get netServices
   * @return netServices
   */
  @javax.annotation.Nullable
  public Double getNetServices() {
    return netServices;
  }

  public void setNetServices(Double netServices) {
    this.netServices = netServices;
  }


  public SalesCreditNoteQueryDto note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Get note
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public SalesCreditNoteQueryDto ourReference(String ourReference) {
    this.ourReference = ourReference;
    return this;
  }

  /**
   * Get ourReference
   * @return ourReference
   */
  @javax.annotation.Nullable
  public String getOurReference() {
    return ourReference;
  }

  public void setOurReference(String ourReference) {
    this.ourReference = ourReference;
  }


  public SalesCreditNoteQueryDto procDate(OffsetDateTime procDate) {
    this.procDate = procDate;
    return this;
  }

  /**
   * Get procDate
   * @return procDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getProcDate() {
    return procDate;
  }

  public void setProcDate(OffsetDateTime procDate) {
    this.procDate = procDate;
  }


  public SalesCreditNoteQueryDto productTrans(List<ProductTranQueryDto> productTrans) {
    this.productTrans = productTrans;
    return this;
  }

  public SalesCreditNoteQueryDto addProductTransItem(ProductTranQueryDto productTransItem) {
    if (this.productTrans == null) {
      this.productTrans = new ArrayList<>();
    }
    this.productTrans.add(productTransItem);
    return this;
  }

  /**
   * Get productTrans
   * @return productTrans
   */
  @javax.annotation.Nullable
  public List<ProductTranQueryDto> getProductTrans() {
    return productTrans;
  }

  public void setProductTrans(List<ProductTranQueryDto> productTrans) {
    this.productTrans = productTrans;
  }


  public SalesCreditNoteQueryDto quoteId(Long quoteId) {
    this.quoteId = quoteId;
    return this;
  }

  /**
   * Get quoteId
   * @return quoteId
   */
  @javax.annotation.Nullable
  public Long getQuoteId() {
    return quoteId;
  }

  public void setQuoteId(Long quoteId) {
    this.quoteId = quoteId;
  }


  public SalesCreditNoteQueryDto reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * Get reference
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public SalesCreditNoteQueryDto saleRepCode(String saleRepCode) {
    this.saleRepCode = saleRepCode;
    return this;
  }

  /**
   * Get saleRepCode
   * @return saleRepCode
   */
  @javax.annotation.Nullable
  public String getSaleRepCode() {
    return saleRepCode;
  }

  public void setSaleRepCode(String saleRepCode) {
    this.saleRepCode = saleRepCode;
  }


  public SalesCreditNoteQueryDto saleRepId(Long saleRepId) {
    this.saleRepId = saleRepId;
    return this;
  }

  /**
   * Get saleRepId
   * @return saleRepId
   */
  @javax.annotation.Nullable
  public Long getSaleRepId() {
    return saleRepId;
  }

  public void setSaleRepId(Long saleRepId) {
    this.saleRepId = saleRepId;
  }


  public SalesCreditNoteQueryDto timestamp(byte[] timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public byte[] getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(byte[] timestamp) {
    this.timestamp = timestamp;
  }


  public SalesCreditNoteQueryDto total(Double total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public Double getTotal() {
    return total;
  }

  public void setTotal(Double total) {
    this.total = total;
  }


  public SalesCreditNoteQueryDto totalNet(Double totalNet) {
    this.totalNet = totalNet;
    return this;
  }

  /**
   * Get totalNet
   * @return totalNet
   */
  @javax.annotation.Nullable
  public Double getTotalNet() {
    return totalNet;
  }

  public void setTotalNet(Double totalNet) {
    this.totalNet = totalNet;
  }


  public SalesCreditNoteQueryDto totalVAT(Double totalVAT) {
    this.totalVAT = totalVAT;
    return this;
  }

  /**
   * Get totalVAT
   * @return totalVAT
   */
  @javax.annotation.Nullable
  public Double getTotalVAT() {
    return totalVAT;
  }

  public void setTotalVAT(Double totalVAT) {
    this.totalVAT = totalVAT;
  }


  public SalesCreditNoteQueryDto unpaid(Double unpaid) {
    this.unpaid = unpaid;
    return this;
  }

  /**
   * Get unpaid
   * @return unpaid
   */
  @javax.annotation.Nullable
  public Double getUnpaid() {
    return unpaid;
  }

  public void setUnpaid(Double unpaid) {
    this.unpaid = unpaid;
  }


  public SalesCreditNoteQueryDto vatTypeId(Long vatTypeId) {
    this.vatTypeId = vatTypeId;
    return this;
  }

  /**
   * Get vatTypeId
   * @return vatTypeId
   */
  @javax.annotation.Nullable
  public Long getVatTypeId() {
    return vatTypeId;
  }

  public void setVatTypeId(Long vatTypeId) {
    this.vatTypeId = vatTypeId;
  }


  public SalesCreditNoteQueryDto yourReference(String yourReference) {
    this.yourReference = yourReference;
    return this;
  }

  /**
   * Get yourReference
   * @return yourReference
   */
  @javax.annotation.Nullable
  public String getYourReference() {
    return yourReference;
  }

  public void setYourReference(String yourReference) {
    this.yourReference = yourReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesCreditNoteQueryDto salesCreditNoteQueryDto = (SalesCreditNoteQueryDto) o;
    return Objects.equals(this.acCode, salesCreditNoteQueryDto.acCode) &&
        Objects.equals(this.bookTranTypeId, salesCreditNoteQueryDto.bookTranTypeId) &&
        Objects.equals(this.customFields, salesCreditNoteQueryDto.customFields) &&
        Objects.equals(this.customerId, salesCreditNoteQueryDto.customerId) &&
        Objects.equals(this.deliveryTo, salesCreditNoteQueryDto.deliveryTo) &&
        Objects.equals(this.details, salesCreditNoteQueryDto.details) &&
        Objects.equals(this.entryDate, salesCreditNoteQueryDto.entryDate) &&
        Objects.equals(this.id, salesCreditNoteQueryDto.id) &&
        Objects.equals(this.loType, salesCreditNoteQueryDto.loType) &&
        Objects.equals(this.netGoods, salesCreditNoteQueryDto.netGoods) &&
        Objects.equals(this.netServices, salesCreditNoteQueryDto.netServices) &&
        Objects.equals(this.note, salesCreditNoteQueryDto.note) &&
        Objects.equals(this.ourReference, salesCreditNoteQueryDto.ourReference) &&
        Objects.equals(this.procDate, salesCreditNoteQueryDto.procDate) &&
        Objects.equals(this.productTrans, salesCreditNoteQueryDto.productTrans) &&
        Objects.equals(this.quoteId, salesCreditNoteQueryDto.quoteId) &&
        Objects.equals(this.reference, salesCreditNoteQueryDto.reference) &&
        Objects.equals(this.saleRepCode, salesCreditNoteQueryDto.saleRepCode) &&
        Objects.equals(this.saleRepId, salesCreditNoteQueryDto.saleRepId) &&
        Arrays.equals(this.timestamp, salesCreditNoteQueryDto.timestamp) &&
        Objects.equals(this.total, salesCreditNoteQueryDto.total) &&
        Objects.equals(this.totalNet, salesCreditNoteQueryDto.totalNet) &&
        Objects.equals(this.totalVAT, salesCreditNoteQueryDto.totalVAT) &&
        Objects.equals(this.unpaid, salesCreditNoteQueryDto.unpaid) &&
        Objects.equals(this.vatTypeId, salesCreditNoteQueryDto.vatTypeId) &&
        Objects.equals(this.yourReference, salesCreditNoteQueryDto.yourReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acCode, bookTranTypeId, customFields, customerId, deliveryTo, details, entryDate, id, loType, netGoods, netServices, note, ourReference, procDate, productTrans, quoteId, reference, saleRepCode, saleRepId, Arrays.hashCode(timestamp), total, totalNet, totalVAT, unpaid, vatTypeId, yourReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesCreditNoteQueryDto {\n");
    sb.append("    acCode: ").append(toIndentedString(acCode)).append("\n");
    sb.append("    bookTranTypeId: ").append(toIndentedString(bookTranTypeId)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    deliveryTo: ").append(toIndentedString(deliveryTo)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    entryDate: ").append(toIndentedString(entryDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    loType: ").append(toIndentedString(loType)).append("\n");
    sb.append("    netGoods: ").append(toIndentedString(netGoods)).append("\n");
    sb.append("    netServices: ").append(toIndentedString(netServices)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    ourReference: ").append(toIndentedString(ourReference)).append("\n");
    sb.append("    procDate: ").append(toIndentedString(procDate)).append("\n");
    sb.append("    productTrans: ").append(toIndentedString(productTrans)).append("\n");
    sb.append("    quoteId: ").append(toIndentedString(quoteId)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    saleRepCode: ").append(toIndentedString(saleRepCode)).append("\n");
    sb.append("    saleRepId: ").append(toIndentedString(saleRepId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    totalNet: ").append(toIndentedString(totalNet)).append("\n");
    sb.append("    totalVAT: ").append(toIndentedString(totalVAT)).append("\n");
    sb.append("    unpaid: ").append(toIndentedString(unpaid)).append("\n");
    sb.append("    vatTypeId: ").append(toIndentedString(vatTypeId)).append("\n");
    sb.append("    yourReference: ").append(toIndentedString(yourReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acCode");
    openapiFields.add("bookTranTypeId");
    openapiFields.add("customFields");
    openapiFields.add("customerId");
    openapiFields.add("deliveryTo");
    openapiFields.add("details");
    openapiFields.add("entryDate");
    openapiFields.add("id");
    openapiFields.add("loType");
    openapiFields.add("netGoods");
    openapiFields.add("netServices");
    openapiFields.add("note");
    openapiFields.add("ourReference");
    openapiFields.add("procDate");
    openapiFields.add("productTrans");
    openapiFields.add("quoteId");
    openapiFields.add("reference");
    openapiFields.add("saleRepCode");
    openapiFields.add("saleRepId");
    openapiFields.add("timestamp");
    openapiFields.add("total");
    openapiFields.add("totalNet");
    openapiFields.add("totalVAT");
    openapiFields.add("unpaid");
    openapiFields.add("vatTypeId");
    openapiFields.add("yourReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesCreditNoteQueryDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesCreditNoteQueryDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesCreditNoteQueryDto is not found in the empty JSON string", SalesCreditNoteQueryDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesCreditNoteQueryDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesCreditNoteQueryDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acCode") != null && !jsonObj.get("acCode").isJsonNull()) && !jsonObj.get("acCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acCode").toString()));
      }
      if (jsonObj.get("customFields") != null && !jsonObj.get("customFields").isJsonNull()) {
        JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("customFields");
        if (jsonArraycustomFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customFields` to be an array in the JSON string but got `%s`", jsonObj.get("customFields").toString()));
          }

          // validate the optional field `customFields` (array)
          for (int i = 0; i < jsonArraycustomFields.size(); i++) {
            AcudfValueDto.validateJsonElement(jsonArraycustomFields.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("deliveryTo") != null && !jsonObj.get("deliveryTo").isJsonNull() && !jsonObj.get("deliveryTo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryTo` to be an array in the JSON string but got `%s`", jsonObj.get("deliveryTo").toString()));
      }
      if ((jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) && !jsonObj.get("details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("details").toString()));
      }
      if ((jsonObj.get("loType") != null && !jsonObj.get("loType").isJsonNull()) && !jsonObj.get("loType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loType").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("ourReference") != null && !jsonObj.get("ourReference").isJsonNull()) && !jsonObj.get("ourReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ourReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ourReference").toString()));
      }
      if (jsonObj.get("productTrans") != null && !jsonObj.get("productTrans").isJsonNull()) {
        JsonArray jsonArrayproductTrans = jsonObj.getAsJsonArray("productTrans");
        if (jsonArrayproductTrans != null) {
          // ensure the json data is an array
          if (!jsonObj.get("productTrans").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `productTrans` to be an array in the JSON string but got `%s`", jsonObj.get("productTrans").toString()));
          }

          // validate the optional field `productTrans` (array)
          for (int i = 0; i < jsonArrayproductTrans.size(); i++) {
            ProductTranQueryDto.validateJsonElement(jsonArrayproductTrans.get(i));
          };
        }
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if ((jsonObj.get("saleRepCode") != null && !jsonObj.get("saleRepCode").isJsonNull()) && !jsonObj.get("saleRepCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `saleRepCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("saleRepCode").toString()));
      }
      if ((jsonObj.get("yourReference") != null && !jsonObj.get("yourReference").isJsonNull()) && !jsonObj.get("yourReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yourReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yourReference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesCreditNoteQueryDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesCreditNoteQueryDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesCreditNoteQueryDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesCreditNoteQueryDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesCreditNoteQueryDto>() {
           @Override
           public void write(JsonWriter out, SalesCreditNoteQueryDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesCreditNoteQueryDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesCreditNoteQueryDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesCreditNoteQueryDto
   * @throws IOException if the JSON string is invalid with respect to SalesCreditNoteQueryDto
   */
  public static SalesCreditNoteQueryDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesCreditNoteQueryDto.class);
  }

  /**
   * Convert an instance of SalesCreditNoteQueryDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

