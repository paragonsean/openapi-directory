/*
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProductDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:05.666566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductDto {
  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private List<String> details = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROSS_UNIT_PRICE = "grossUnitPrice";
  @SerializedName(SERIALIZED_NAME_GROSS_UNIT_PRICE)
  private Boolean grossUnitPrice;

  public static final String SERIALIZED_NAME_HAS_DEFAULT_VAT_RATE = "hasDefaultVatRate";
  @SerializedName(SERIALIZED_NAME_HAS_DEFAULT_VAT_RATE)
  private Boolean hasDefaultVatRate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE_ID = "productTypeId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE_ID)
  private Long productTypeId;

  public static final String SERIALIZED_NAME_STOCK_CODE = "stockCode";
  @SerializedName(SERIALIZED_NAME_STOCK_CODE)
  private String stockCode;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private byte[] timestamp;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private Double unitPrice;

  public static final String SERIALIZED_NAME_VAT_ANALYSIS_TYPE_ID = "vatAnalysisTypeId";
  @SerializedName(SERIALIZED_NAME_VAT_ANALYSIS_TYPE_ID)
  private Long vatAnalysisTypeId;

  public static final String SERIALIZED_NAME_VAT_RATE_ID = "vatRateId";
  @SerializedName(SERIALIZED_NAME_VAT_RATE_ID)
  private Long vatRateId;

  public ProductDto() {
  }

  public ProductDto details(List<String> details) {
    this.details = details;
    return this;
  }

  public ProductDto addDetailsItem(String detailsItem) {
    if (this.details == null) {
      this.details = new ArrayList<>();
    }
    this.details.add(detailsItem);
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public List<String> getDetails() {
    return details;
  }

  public void setDetails(List<String> details) {
    this.details = details;
  }


  public ProductDto grossUnitPrice(Boolean grossUnitPrice) {
    this.grossUnitPrice = grossUnitPrice;
    return this;
  }

  /**
   * Get grossUnitPrice
   * @return grossUnitPrice
   */
  @javax.annotation.Nullable
  public Boolean getGrossUnitPrice() {
    return grossUnitPrice;
  }

  public void setGrossUnitPrice(Boolean grossUnitPrice) {
    this.grossUnitPrice = grossUnitPrice;
  }


  public ProductDto hasDefaultVatRate(Boolean hasDefaultVatRate) {
    this.hasDefaultVatRate = hasDefaultVatRate;
    return this;
  }

  /**
   * Get hasDefaultVatRate
   * @return hasDefaultVatRate
   */
  @javax.annotation.Nullable
  public Boolean getHasDefaultVatRate() {
    return hasDefaultVatRate;
  }

  public void setHasDefaultVatRate(Boolean hasDefaultVatRate) {
    this.hasDefaultVatRate = hasDefaultVatRate;
  }


  public ProductDto id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public ProductDto productTypeId(Long productTypeId) {
    this.productTypeId = productTypeId;
    return this;
  }

  /**
   * Get productTypeId
   * @return productTypeId
   */
  @javax.annotation.Nullable
  public Long getProductTypeId() {
    return productTypeId;
  }

  public void setProductTypeId(Long productTypeId) {
    this.productTypeId = productTypeId;
  }


  public ProductDto stockCode(String stockCode) {
    this.stockCode = stockCode;
    return this;
  }

  /**
   * Get stockCode
   * @return stockCode
   */
  @javax.annotation.Nullable
  public String getStockCode() {
    return stockCode;
  }

  public void setStockCode(String stockCode) {
    this.stockCode = stockCode;
  }


  public ProductDto timestamp(byte[] timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public byte[] getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(byte[] timestamp) {
    this.timestamp = timestamp;
  }


  public ProductDto unitPrice(Double unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Get unitPrice
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public Double getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(Double unitPrice) {
    this.unitPrice = unitPrice;
  }


  public ProductDto vatAnalysisTypeId(Long vatAnalysisTypeId) {
    this.vatAnalysisTypeId = vatAnalysisTypeId;
    return this;
  }

  /**
   * Get vatAnalysisTypeId
   * @return vatAnalysisTypeId
   */
  @javax.annotation.Nullable
  public Long getVatAnalysisTypeId() {
    return vatAnalysisTypeId;
  }

  public void setVatAnalysisTypeId(Long vatAnalysisTypeId) {
    this.vatAnalysisTypeId = vatAnalysisTypeId;
  }


  public ProductDto vatRateId(Long vatRateId) {
    this.vatRateId = vatRateId;
    return this;
  }

  /**
   * Get vatRateId
   * @return vatRateId
   */
  @javax.annotation.Nullable
  public Long getVatRateId() {
    return vatRateId;
  }

  public void setVatRateId(Long vatRateId) {
    this.vatRateId = vatRateId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductDto productDto = (ProductDto) o;
    return Objects.equals(this.details, productDto.details) &&
        Objects.equals(this.grossUnitPrice, productDto.grossUnitPrice) &&
        Objects.equals(this.hasDefaultVatRate, productDto.hasDefaultVatRate) &&
        Objects.equals(this.id, productDto.id) &&
        Objects.equals(this.productTypeId, productDto.productTypeId) &&
        Objects.equals(this.stockCode, productDto.stockCode) &&
        Arrays.equals(this.timestamp, productDto.timestamp) &&
        Objects.equals(this.unitPrice, productDto.unitPrice) &&
        Objects.equals(this.vatAnalysisTypeId, productDto.vatAnalysisTypeId) &&
        Objects.equals(this.vatRateId, productDto.vatRateId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(details, grossUnitPrice, hasDefaultVatRate, id, productTypeId, stockCode, Arrays.hashCode(timestamp), unitPrice, vatAnalysisTypeId, vatRateId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductDto {\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    grossUnitPrice: ").append(toIndentedString(grossUnitPrice)).append("\n");
    sb.append("    hasDefaultVatRate: ").append(toIndentedString(hasDefaultVatRate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    productTypeId: ").append(toIndentedString(productTypeId)).append("\n");
    sb.append("    stockCode: ").append(toIndentedString(stockCode)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    vatAnalysisTypeId: ").append(toIndentedString(vatAnalysisTypeId)).append("\n");
    sb.append("    vatRateId: ").append(toIndentedString(vatRateId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("details");
    openapiFields.add("grossUnitPrice");
    openapiFields.add("hasDefaultVatRate");
    openapiFields.add("id");
    openapiFields.add("productTypeId");
    openapiFields.add("stockCode");
    openapiFields.add("timestamp");
    openapiFields.add("unitPrice");
    openapiFields.add("vatAnalysisTypeId");
    openapiFields.add("vatRateId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductDto is not found in the empty JSON string", ProductDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull() && !jsonObj.get("details").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `details` to be an array in the JSON string but got `%s`", jsonObj.get("details").toString()));
      }
      if ((jsonObj.get("stockCode") != null && !jsonObj.get("stockCode").isJsonNull()) && !jsonObj.get("stockCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stockCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stockCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductDto>() {
           @Override
           public void write(JsonWriter out, ProductDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductDto
   * @throws IOException if the JSON string is invalid with respect to ProductDto
   */
  public static ProductDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductDto.class);
  }

  /**
   * Convert an instance of ProductDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

