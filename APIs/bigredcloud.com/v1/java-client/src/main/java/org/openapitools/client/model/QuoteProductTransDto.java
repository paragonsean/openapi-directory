/*
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.QuoteAcEntriesDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QuoteProductTransDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:05.666566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QuoteProductTransDto {
  public static final String SERIALIZED_NAME_AC_ENTRIES = "acEntries";
  @SerializedName(SERIALIZED_NAME_AC_ENTRIES)
  private List<QuoteAcEntriesDto> acEntries = new ArrayList<>();

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_COMPANY_ID = "companyId";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID)
  private Long companyId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_PERCENTAGE = "percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private Double percentage;

  public static final String SERIALIZED_NAME_PRODUCT_CODE = "productCode";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CODE)
  private String productCode;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private Long productId;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Double quantity;

  public static final String SERIALIZED_NAME_TRAN_NOTES = "tranNotes";
  @SerializedName(SERIALIZED_NAME_TRAN_NOTES)
  private List<String> tranNotes = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private Double unitPrice;

  public static final String SERIALIZED_NAME_VAT_AMOUNT = "vatAmount";
  @SerializedName(SERIALIZED_NAME_VAT_AMOUNT)
  private Double vatAmount;

  public static final String SERIALIZED_NAME_VAT_ANALYSIS_TYPE_ID = "vatAnalysisTypeId";
  @SerializedName(SERIALIZED_NAME_VAT_ANALYSIS_TYPE_ID)
  private Long vatAnalysisTypeId;

  public static final String SERIALIZED_NAME_VAT_RATE_ID = "vatRateId";
  @SerializedName(SERIALIZED_NAME_VAT_RATE_ID)
  private Long vatRateId;

  public QuoteProductTransDto() {
  }

  public QuoteProductTransDto acEntries(List<QuoteAcEntriesDto> acEntries) {
    this.acEntries = acEntries;
    return this;
  }

  public QuoteProductTransDto addAcEntriesItem(QuoteAcEntriesDto acEntriesItem) {
    if (this.acEntries == null) {
      this.acEntries = new ArrayList<>();
    }
    this.acEntries.add(acEntriesItem);
    return this;
  }

  /**
   * Get acEntries
   * @return acEntries
   */
  @javax.annotation.Nullable
  public List<QuoteAcEntriesDto> getAcEntries() {
    return acEntries;
  }

  public void setAcEntries(List<QuoteAcEntriesDto> acEntries) {
    this.acEntries = acEntries;
  }


  public QuoteProductTransDto amount(Double amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }


  public QuoteProductTransDto companyId(Long companyId) {
    this.companyId = companyId;
    return this;
  }

  /**
   * Get companyId
   * @return companyId
   */
  @javax.annotation.Nullable
  public Long getCompanyId() {
    return companyId;
  }

  public void setCompanyId(Long companyId) {
    this.companyId = companyId;
  }


  public QuoteProductTransDto id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public QuoteProductTransDto percentage(Double percentage) {
    this.percentage = percentage;
    return this;
  }

  /**
   * Get percentage
   * @return percentage
   */
  @javax.annotation.Nullable
  public Double getPercentage() {
    return percentage;
  }

  public void setPercentage(Double percentage) {
    this.percentage = percentage;
  }


  public QuoteProductTransDto productCode(String productCode) {
    this.productCode = productCode;
    return this;
  }

  /**
   * Get productCode
   * @return productCode
   */
  @javax.annotation.Nullable
  public String getProductCode() {
    return productCode;
  }

  public void setProductCode(String productCode) {
    this.productCode = productCode;
  }


  public QuoteProductTransDto productId(Long productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Get productId
   * @return productId
   */
  @javax.annotation.Nullable
  public Long getProductId() {
    return productId;
  }

  public void setProductId(Long productId) {
    this.productId = productId;
  }


  public QuoteProductTransDto quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nullable
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }


  public QuoteProductTransDto tranNotes(List<String> tranNotes) {
    this.tranNotes = tranNotes;
    return this;
  }

  public QuoteProductTransDto addTranNotesItem(String tranNotesItem) {
    if (this.tranNotes == null) {
      this.tranNotes = new ArrayList<>();
    }
    this.tranNotes.add(tranNotesItem);
    return this;
  }

  /**
   * Get tranNotes
   * @return tranNotes
   */
  @javax.annotation.Nullable
  public List<String> getTranNotes() {
    return tranNotes;
  }

  public void setTranNotes(List<String> tranNotes) {
    this.tranNotes = tranNotes;
  }


  public QuoteProductTransDto unitPrice(Double unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Get unitPrice
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public Double getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(Double unitPrice) {
    this.unitPrice = unitPrice;
  }


  public QuoteProductTransDto vatAmount(Double vatAmount) {
    this.vatAmount = vatAmount;
    return this;
  }

  /**
   * Get vatAmount
   * @return vatAmount
   */
  @javax.annotation.Nullable
  public Double getVatAmount() {
    return vatAmount;
  }

  public void setVatAmount(Double vatAmount) {
    this.vatAmount = vatAmount;
  }


  public QuoteProductTransDto vatAnalysisTypeId(Long vatAnalysisTypeId) {
    this.vatAnalysisTypeId = vatAnalysisTypeId;
    return this;
  }

  /**
   * Get vatAnalysisTypeId
   * @return vatAnalysisTypeId
   */
  @javax.annotation.Nullable
  public Long getVatAnalysisTypeId() {
    return vatAnalysisTypeId;
  }

  public void setVatAnalysisTypeId(Long vatAnalysisTypeId) {
    this.vatAnalysisTypeId = vatAnalysisTypeId;
  }


  public QuoteProductTransDto vatRateId(Long vatRateId) {
    this.vatRateId = vatRateId;
    return this;
  }

  /**
   * Get vatRateId
   * @return vatRateId
   */
  @javax.annotation.Nullable
  public Long getVatRateId() {
    return vatRateId;
  }

  public void setVatRateId(Long vatRateId) {
    this.vatRateId = vatRateId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuoteProductTransDto quoteProductTransDto = (QuoteProductTransDto) o;
    return Objects.equals(this.acEntries, quoteProductTransDto.acEntries) &&
        Objects.equals(this.amount, quoteProductTransDto.amount) &&
        Objects.equals(this.companyId, quoteProductTransDto.companyId) &&
        Objects.equals(this.id, quoteProductTransDto.id) &&
        Objects.equals(this.percentage, quoteProductTransDto.percentage) &&
        Objects.equals(this.productCode, quoteProductTransDto.productCode) &&
        Objects.equals(this.productId, quoteProductTransDto.productId) &&
        Objects.equals(this.quantity, quoteProductTransDto.quantity) &&
        Objects.equals(this.tranNotes, quoteProductTransDto.tranNotes) &&
        Objects.equals(this.unitPrice, quoteProductTransDto.unitPrice) &&
        Objects.equals(this.vatAmount, quoteProductTransDto.vatAmount) &&
        Objects.equals(this.vatAnalysisTypeId, quoteProductTransDto.vatAnalysisTypeId) &&
        Objects.equals(this.vatRateId, quoteProductTransDto.vatRateId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acEntries, amount, companyId, id, percentage, productCode, productId, quantity, tranNotes, unitPrice, vatAmount, vatAnalysisTypeId, vatRateId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuoteProductTransDto {\n");
    sb.append("    acEntries: ").append(toIndentedString(acEntries)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    companyId: ").append(toIndentedString(companyId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    productCode: ").append(toIndentedString(productCode)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    tranNotes: ").append(toIndentedString(tranNotes)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    vatAmount: ").append(toIndentedString(vatAmount)).append("\n");
    sb.append("    vatAnalysisTypeId: ").append(toIndentedString(vatAnalysisTypeId)).append("\n");
    sb.append("    vatRateId: ").append(toIndentedString(vatRateId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acEntries");
    openapiFields.add("amount");
    openapiFields.add("companyId");
    openapiFields.add("id");
    openapiFields.add("percentage");
    openapiFields.add("productCode");
    openapiFields.add("productId");
    openapiFields.add("quantity");
    openapiFields.add("tranNotes");
    openapiFields.add("unitPrice");
    openapiFields.add("vatAmount");
    openapiFields.add("vatAnalysisTypeId");
    openapiFields.add("vatRateId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QuoteProductTransDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuoteProductTransDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuoteProductTransDto is not found in the empty JSON string", QuoteProductTransDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QuoteProductTransDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuoteProductTransDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("acEntries") != null && !jsonObj.get("acEntries").isJsonNull()) {
        JsonArray jsonArrayacEntries = jsonObj.getAsJsonArray("acEntries");
        if (jsonArrayacEntries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("acEntries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `acEntries` to be an array in the JSON string but got `%s`", jsonObj.get("acEntries").toString()));
          }

          // validate the optional field `acEntries` (array)
          for (int i = 0; i < jsonArrayacEntries.size(); i++) {
            QuoteAcEntriesDto.validateJsonElement(jsonArrayacEntries.get(i));
          };
        }
      }
      if ((jsonObj.get("productCode") != null && !jsonObj.get("productCode").isJsonNull()) && !jsonObj.get("productCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productCode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tranNotes") != null && !jsonObj.get("tranNotes").isJsonNull() && !jsonObj.get("tranNotes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tranNotes` to be an array in the JSON string but got `%s`", jsonObj.get("tranNotes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuoteProductTransDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuoteProductTransDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuoteProductTransDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuoteProductTransDto.class));

       return (TypeAdapter<T>) new TypeAdapter<QuoteProductTransDto>() {
           @Override
           public void write(JsonWriter out, QuoteProductTransDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuoteProductTransDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QuoteProductTransDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QuoteProductTransDto
   * @throws IOException if the JSON string is invalid with respect to QuoteProductTransDto
   */
  public static QuoteProductTransDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuoteProductTransDto.class);
  }

  /**
   * Convert an instance of QuoteProductTransDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

