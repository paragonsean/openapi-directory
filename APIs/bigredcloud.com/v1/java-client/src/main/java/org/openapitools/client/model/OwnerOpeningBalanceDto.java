/*
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OwnerOpeningBalanceVatEntryDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OwnerOpeningBalanceDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:05.666566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OwnerOpeningBalanceDto {
  public static final String SERIALIZED_NAME_ENTRY_DATE = "entryDate";
  @SerializedName(SERIALIZED_NAME_ENTRY_DATE)
  private OffsetDateTime entryDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_IS_CHANGED = "isChanged";
  @SerializedName(SERIALIZED_NAME_IS_CHANGED)
  private Boolean isChanged;

  public static final String SERIALIZED_NAME_PROC_DATE = "procDate";
  @SerializedName(SERIALIZED_NAME_PROC_DATE)
  private OffsetDateTime procDate;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private byte[] timestamp;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Double total;

  public static final String SERIALIZED_NAME_TOTAL_V_A_T = "totalVAT";
  @SerializedName(SERIALIZED_NAME_TOTAL_V_A_T)
  private Double totalVAT;

  public static final String SERIALIZED_NAME_UNPAID = "unpaid";
  @SerializedName(SERIALIZED_NAME_UNPAID)
  private Double unpaid;

  public static final String SERIALIZED_NAME_VAT_ENTRIES = "vatEntries";
  @SerializedName(SERIALIZED_NAME_VAT_ENTRIES)
  private List<OwnerOpeningBalanceVatEntryDto> vatEntries = new ArrayList<>();

  public OwnerOpeningBalanceDto() {
  }

  public OwnerOpeningBalanceDto entryDate(OffsetDateTime entryDate) {
    this.entryDate = entryDate;
    return this;
  }

  /**
   * Get entryDate
   * @return entryDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEntryDate() {
    return entryDate;
  }

  public void setEntryDate(OffsetDateTime entryDate) {
    this.entryDate = entryDate;
  }


  public OwnerOpeningBalanceDto id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public OwnerOpeningBalanceDto isChanged(Boolean isChanged) {
    this.isChanged = isChanged;
    return this;
  }

  /**
   * Get isChanged
   * @return isChanged
   */
  @javax.annotation.Nullable
  public Boolean getIsChanged() {
    return isChanged;
  }

  public void setIsChanged(Boolean isChanged) {
    this.isChanged = isChanged;
  }


  public OwnerOpeningBalanceDto procDate(OffsetDateTime procDate) {
    this.procDate = procDate;
    return this;
  }

  /**
   * Get procDate
   * @return procDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getProcDate() {
    return procDate;
  }

  public void setProcDate(OffsetDateTime procDate) {
    this.procDate = procDate;
  }


  public OwnerOpeningBalanceDto reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * Get reference
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public OwnerOpeningBalanceDto timestamp(byte[] timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public byte[] getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(byte[] timestamp) {
    this.timestamp = timestamp;
  }


  public OwnerOpeningBalanceDto total(Double total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public Double getTotal() {
    return total;
  }

  public void setTotal(Double total) {
    this.total = total;
  }


  public OwnerOpeningBalanceDto totalVAT(Double totalVAT) {
    this.totalVAT = totalVAT;
    return this;
  }

  /**
   * Get totalVAT
   * @return totalVAT
   */
  @javax.annotation.Nullable
  public Double getTotalVAT() {
    return totalVAT;
  }

  public void setTotalVAT(Double totalVAT) {
    this.totalVAT = totalVAT;
  }


  public OwnerOpeningBalanceDto unpaid(Double unpaid) {
    this.unpaid = unpaid;
    return this;
  }

  /**
   * Get unpaid
   * @return unpaid
   */
  @javax.annotation.Nullable
  public Double getUnpaid() {
    return unpaid;
  }

  public void setUnpaid(Double unpaid) {
    this.unpaid = unpaid;
  }


  public OwnerOpeningBalanceDto vatEntries(List<OwnerOpeningBalanceVatEntryDto> vatEntries) {
    this.vatEntries = vatEntries;
    return this;
  }

  public OwnerOpeningBalanceDto addVatEntriesItem(OwnerOpeningBalanceVatEntryDto vatEntriesItem) {
    if (this.vatEntries == null) {
      this.vatEntries = new ArrayList<>();
    }
    this.vatEntries.add(vatEntriesItem);
    return this;
  }

  /**
   * Get vatEntries
   * @return vatEntries
   */
  @javax.annotation.Nullable
  public List<OwnerOpeningBalanceVatEntryDto> getVatEntries() {
    return vatEntries;
  }

  public void setVatEntries(List<OwnerOpeningBalanceVatEntryDto> vatEntries) {
    this.vatEntries = vatEntries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OwnerOpeningBalanceDto ownerOpeningBalanceDto = (OwnerOpeningBalanceDto) o;
    return Objects.equals(this.entryDate, ownerOpeningBalanceDto.entryDate) &&
        Objects.equals(this.id, ownerOpeningBalanceDto.id) &&
        Objects.equals(this.isChanged, ownerOpeningBalanceDto.isChanged) &&
        Objects.equals(this.procDate, ownerOpeningBalanceDto.procDate) &&
        Objects.equals(this.reference, ownerOpeningBalanceDto.reference) &&
        Arrays.equals(this.timestamp, ownerOpeningBalanceDto.timestamp) &&
        Objects.equals(this.total, ownerOpeningBalanceDto.total) &&
        Objects.equals(this.totalVAT, ownerOpeningBalanceDto.totalVAT) &&
        Objects.equals(this.unpaid, ownerOpeningBalanceDto.unpaid) &&
        Objects.equals(this.vatEntries, ownerOpeningBalanceDto.vatEntries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entryDate, id, isChanged, procDate, reference, Arrays.hashCode(timestamp), total, totalVAT, unpaid, vatEntries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OwnerOpeningBalanceDto {\n");
    sb.append("    entryDate: ").append(toIndentedString(entryDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isChanged: ").append(toIndentedString(isChanged)).append("\n");
    sb.append("    procDate: ").append(toIndentedString(procDate)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    totalVAT: ").append(toIndentedString(totalVAT)).append("\n");
    sb.append("    unpaid: ").append(toIndentedString(unpaid)).append("\n");
    sb.append("    vatEntries: ").append(toIndentedString(vatEntries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entryDate");
    openapiFields.add("id");
    openapiFields.add("isChanged");
    openapiFields.add("procDate");
    openapiFields.add("reference");
    openapiFields.add("timestamp");
    openapiFields.add("total");
    openapiFields.add("totalVAT");
    openapiFields.add("unpaid");
    openapiFields.add("vatEntries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OwnerOpeningBalanceDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OwnerOpeningBalanceDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OwnerOpeningBalanceDto is not found in the empty JSON string", OwnerOpeningBalanceDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OwnerOpeningBalanceDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OwnerOpeningBalanceDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if (jsonObj.get("vatEntries") != null && !jsonObj.get("vatEntries").isJsonNull()) {
        JsonArray jsonArrayvatEntries = jsonObj.getAsJsonArray("vatEntries");
        if (jsonArrayvatEntries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vatEntries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vatEntries` to be an array in the JSON string but got `%s`", jsonObj.get("vatEntries").toString()));
          }

          // validate the optional field `vatEntries` (array)
          for (int i = 0; i < jsonArrayvatEntries.size(); i++) {
            OwnerOpeningBalanceVatEntryDto.validateJsonElement(jsonArrayvatEntries.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OwnerOpeningBalanceDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OwnerOpeningBalanceDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OwnerOpeningBalanceDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OwnerOpeningBalanceDto.class));

       return (TypeAdapter<T>) new TypeAdapter<OwnerOpeningBalanceDto>() {
           @Override
           public void write(JsonWriter out, OwnerOpeningBalanceDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OwnerOpeningBalanceDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OwnerOpeningBalanceDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OwnerOpeningBalanceDto
   * @throws IOException if the JSON string is invalid with respect to OwnerOpeningBalanceDto
   */
  public static OwnerOpeningBalanceDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OwnerOpeningBalanceDto.class);
  }

  /**
   * Convert an instance of OwnerOpeningBalanceDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

