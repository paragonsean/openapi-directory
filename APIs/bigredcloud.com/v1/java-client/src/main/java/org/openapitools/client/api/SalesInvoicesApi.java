/*
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BatchItemSalesInvoiceCreditNoteDto;
import org.openapitools.client.model.PageResultSalesInvoiceQueryDto;
import org.openapitools.client.model.SalesInvoiceCreditNoteDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SalesInvoicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SalesInvoicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SalesInvoicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for salesInvoicesDelete
     * @param id Id of Sales Invoice to remove. (required)
     * @param timestamp Timestamp of Sales Invoice to remove. Should be encoded in Base64. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesInvoicesDeleteCall(Long id, String timestamp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/salesInvoices/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timestamp", timestamp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesInvoicesDeleteValidateBeforeCall(Long id, String timestamp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling salesInvoicesDelete(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling salesInvoicesDelete(Async)");
        }

        return salesInvoicesDeleteCall(id, timestamp, _callback);

    }

    /**
     * Removes an existing Sales Invoice.
     * 
     * @param id Id of Sales Invoice to remove. (required)
     * @param timestamp Timestamp of Sales Invoice to remove. Should be encoded in Base64. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object salesInvoicesDelete(Long id, String timestamp) throws ApiException {
        ApiResponse<Object> localVarResp = salesInvoicesDeleteWithHttpInfo(id, timestamp);
        return localVarResp.getData();
    }

    /**
     * Removes an existing Sales Invoice.
     * 
     * @param id Id of Sales Invoice to remove. (required)
     * @param timestamp Timestamp of Sales Invoice to remove. Should be encoded in Base64. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> salesInvoicesDeleteWithHttpInfo(Long id, String timestamp) throws ApiException {
        okhttp3.Call localVarCall = salesInvoicesDeleteValidateBeforeCall(id, timestamp, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Removes an existing Sales Invoice. (asynchronously)
     * 
     * @param id Id of Sales Invoice to remove. (required)
     * @param timestamp Timestamp of Sales Invoice to remove. Should be encoded in Base64. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesInvoicesDeleteAsync(Long id, String timestamp, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesInvoicesDeleteValidateBeforeCall(id, timestamp, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesInvoicesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesInvoicesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/salesInvoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesInvoicesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return salesInvoicesGetCall(_callback);

    }

    /**
     * Returns a list of company&#39;s Sales Invoices. Supports OData querying protocol.  Filtering is allowed by \&quot;entryDate\&quot; field.  Ordering is allowed by \&quot;id\&quot; field.
     * 
     * @return PageResultSalesInvoiceQueryDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageResultSalesInvoiceQueryDto salesInvoicesGet() throws ApiException {
        ApiResponse<PageResultSalesInvoiceQueryDto> localVarResp = salesInvoicesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns a list of company&#39;s Sales Invoices. Supports OData querying protocol.  Filtering is allowed by \&quot;entryDate\&quot; field.  Ordering is allowed by \&quot;id\&quot; field.
     * 
     * @return ApiResponse&lt;PageResultSalesInvoiceQueryDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageResultSalesInvoiceQueryDto> salesInvoicesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = salesInvoicesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PageResultSalesInvoiceQueryDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of company&#39;s Sales Invoices. Supports OData querying protocol.  Filtering is allowed by \&quot;entryDate\&quot; field.  Ordering is allowed by \&quot;id\&quot; field. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesInvoicesGetAsync(final ApiCallback<PageResultSalesInvoiceQueryDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesInvoicesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PageResultSalesInvoiceQueryDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesInvoicesPost
     * @param salesInvoiceCreditNoteDto Information of Sales Invoice to create. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesInvoicesPostCall(SalesInvoiceCreditNoteDto salesInvoiceCreditNoteDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = salesInvoiceCreditNoteDto;

        // create path and map variables
        String localVarPath = "/v1/salesInvoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesInvoicesPostValidateBeforeCall(SalesInvoiceCreditNoteDto salesInvoiceCreditNoteDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'salesInvoiceCreditNoteDto' is set
        if (salesInvoiceCreditNoteDto == null) {
            throw new ApiException("Missing the required parameter 'salesInvoiceCreditNoteDto' when calling salesInvoicesPost(Async)");
        }

        return salesInvoicesPostCall(salesInvoiceCreditNoteDto, _callback);

    }

    /**
     * Creates a new Sales Invoice.
     * 
     * @param salesInvoiceCreditNoteDto Information of Sales Invoice to create. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object salesInvoicesPost(SalesInvoiceCreditNoteDto salesInvoiceCreditNoteDto) throws ApiException {
        ApiResponse<Object> localVarResp = salesInvoicesPostWithHttpInfo(salesInvoiceCreditNoteDto);
        return localVarResp.getData();
    }

    /**
     * Creates a new Sales Invoice.
     * 
     * @param salesInvoiceCreditNoteDto Information of Sales Invoice to create. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> salesInvoicesPostWithHttpInfo(SalesInvoiceCreditNoteDto salesInvoiceCreditNoteDto) throws ApiException {
        okhttp3.Call localVarCall = salesInvoicesPostValidateBeforeCall(salesInvoiceCreditNoteDto, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new Sales Invoice. (asynchronously)
     * 
     * @param salesInvoiceCreditNoteDto Information of Sales Invoice to create. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesInvoicesPostAsync(SalesInvoiceCreditNoteDto salesInvoiceCreditNoteDto, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesInvoicesPostValidateBeforeCall(salesInvoiceCreditNoteDto, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesInvoicesPostCreateSaleInvoiceWithGeneratingReference
     * @param salesInvoiceCreditNoteDto Information of Sale Invoice to create. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesInvoicesPostCreateSaleInvoiceWithGeneratingReferenceCall(SalesInvoiceCreditNoteDto salesInvoiceCreditNoteDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = salesInvoiceCreditNoteDto;

        // create path and map variables
        String localVarPath = "/v1/salesInvoices/createSaleInvoiceWithGeneratingReference";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesInvoicesPostCreateSaleInvoiceWithGeneratingReferenceValidateBeforeCall(SalesInvoiceCreditNoteDto salesInvoiceCreditNoteDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'salesInvoiceCreditNoteDto' is set
        if (salesInvoiceCreditNoteDto == null) {
            throw new ApiException("Missing the required parameter 'salesInvoiceCreditNoteDto' when calling salesInvoicesPostCreateSaleInvoiceWithGeneratingReference(Async)");
        }

        return salesInvoicesPostCreateSaleInvoiceWithGeneratingReferenceCall(salesInvoiceCreditNoteDto, _callback);

    }

    /**
     * Creates a new Sale Invoice with auto generating reference.
     * 
     * @param salesInvoiceCreditNoteDto Information of Sale Invoice to create. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object salesInvoicesPostCreateSaleInvoiceWithGeneratingReference(SalesInvoiceCreditNoteDto salesInvoiceCreditNoteDto) throws ApiException {
        ApiResponse<Object> localVarResp = salesInvoicesPostCreateSaleInvoiceWithGeneratingReferenceWithHttpInfo(salesInvoiceCreditNoteDto);
        return localVarResp.getData();
    }

    /**
     * Creates a new Sale Invoice with auto generating reference.
     * 
     * @param salesInvoiceCreditNoteDto Information of Sale Invoice to create. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> salesInvoicesPostCreateSaleInvoiceWithGeneratingReferenceWithHttpInfo(SalesInvoiceCreditNoteDto salesInvoiceCreditNoteDto) throws ApiException {
        okhttp3.Call localVarCall = salesInvoicesPostCreateSaleInvoiceWithGeneratingReferenceValidateBeforeCall(salesInvoiceCreditNoteDto, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new Sale Invoice with auto generating reference. (asynchronously)
     * 
     * @param salesInvoiceCreditNoteDto Information of Sale Invoice to create. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesInvoicesPostCreateSaleInvoiceWithGeneratingReferenceAsync(SalesInvoiceCreditNoteDto salesInvoiceCreditNoteDto, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesInvoicesPostCreateSaleInvoiceWithGeneratingReferenceValidateBeforeCall(salesInvoiceCreditNoteDto, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesInvoicesProcessBatch
     * @param batchItemSalesInvoiceCreditNoteDto Batch of Sales Invoices to process. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesInvoicesProcessBatchCall(List<BatchItemSalesInvoiceCreditNoteDto> batchItemSalesInvoiceCreditNoteDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchItemSalesInvoiceCreditNoteDto;

        // create path and map variables
        String localVarPath = "/v1/salesInvoices/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesInvoicesProcessBatchValidateBeforeCall(List<BatchItemSalesInvoiceCreditNoteDto> batchItemSalesInvoiceCreditNoteDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchItemSalesInvoiceCreditNoteDto' is set
        if (batchItemSalesInvoiceCreditNoteDto == null) {
            throw new ApiException("Missing the required parameter 'batchItemSalesInvoiceCreditNoteDto' when calling salesInvoicesProcessBatch(Async)");
        }

        return salesInvoicesProcessBatchCall(batchItemSalesInvoiceCreditNoteDto, _callback);

    }

    /**
     * Processes a batch of Sales Invoices.
     * 
     * @param batchItemSalesInvoiceCreditNoteDto Batch of Sales Invoices to process. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object salesInvoicesProcessBatch(List<BatchItemSalesInvoiceCreditNoteDto> batchItemSalesInvoiceCreditNoteDto) throws ApiException {
        ApiResponse<Object> localVarResp = salesInvoicesProcessBatchWithHttpInfo(batchItemSalesInvoiceCreditNoteDto);
        return localVarResp.getData();
    }

    /**
     * Processes a batch of Sales Invoices.
     * 
     * @param batchItemSalesInvoiceCreditNoteDto Batch of Sales Invoices to process. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> salesInvoicesProcessBatchWithHttpInfo(List<BatchItemSalesInvoiceCreditNoteDto> batchItemSalesInvoiceCreditNoteDto) throws ApiException {
        okhttp3.Call localVarCall = salesInvoicesProcessBatchValidateBeforeCall(batchItemSalesInvoiceCreditNoteDto, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Processes a batch of Sales Invoices. (asynchronously)
     * 
     * @param batchItemSalesInvoiceCreditNoteDto Batch of Sales Invoices to process. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesInvoicesProcessBatchAsync(List<BatchItemSalesInvoiceCreditNoteDto> batchItemSalesInvoiceCreditNoteDto, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesInvoicesProcessBatchValidateBeforeCall(batchItemSalesInvoiceCreditNoteDto, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesInvoicesPut
     * @param id Id of Sales Invoice to update. (required)
     * @param salesInvoiceCreditNoteDto Information of Sales Invoice to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesInvoicesPutCall(Long id, SalesInvoiceCreditNoteDto salesInvoiceCreditNoteDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = salesInvoiceCreditNoteDto;

        // create path and map variables
        String localVarPath = "/v1/salesInvoices/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesInvoicesPutValidateBeforeCall(Long id, SalesInvoiceCreditNoteDto salesInvoiceCreditNoteDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling salesInvoicesPut(Async)");
        }

        // verify the required parameter 'salesInvoiceCreditNoteDto' is set
        if (salesInvoiceCreditNoteDto == null) {
            throw new ApiException("Missing the required parameter 'salesInvoiceCreditNoteDto' when calling salesInvoicesPut(Async)");
        }

        return salesInvoicesPutCall(id, salesInvoiceCreditNoteDto, _callback);

    }

    /**
     * Updates an existing Sales Invoice.
     * 
     * @param id Id of Sales Invoice to update. (required)
     * @param salesInvoiceCreditNoteDto Information of Sales Invoice to update. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object salesInvoicesPut(Long id, SalesInvoiceCreditNoteDto salesInvoiceCreditNoteDto) throws ApiException {
        ApiResponse<Object> localVarResp = salesInvoicesPutWithHttpInfo(id, salesInvoiceCreditNoteDto);
        return localVarResp.getData();
    }

    /**
     * Updates an existing Sales Invoice.
     * 
     * @param id Id of Sales Invoice to update. (required)
     * @param salesInvoiceCreditNoteDto Information of Sales Invoice to update. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> salesInvoicesPutWithHttpInfo(Long id, SalesInvoiceCreditNoteDto salesInvoiceCreditNoteDto) throws ApiException {
        okhttp3.Call localVarCall = salesInvoicesPutValidateBeforeCall(id, salesInvoiceCreditNoteDto, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates an existing Sales Invoice. (asynchronously)
     * 
     * @param id Id of Sales Invoice to update. (required)
     * @param salesInvoiceCreditNoteDto Information of Sales Invoice to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesInvoicesPutAsync(Long id, SalesInvoiceCreditNoteDto salesInvoiceCreditNoteDto, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesInvoicesPutValidateBeforeCall(id, salesInvoiceCreditNoteDto, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1SalesInvoicesIdGet
     * @param id Id of Sales Invoice to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1SalesInvoicesIdGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/salesInvoices/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1SalesInvoicesIdGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v1SalesInvoicesIdGet(Async)");
        }

        return v1SalesInvoicesIdGetCall(id, _callback);

    }

    /**
     * Returns information about a single Sales Invoice.
     * 
     * @param id Id of Sales Invoice to return. (required)
     * @return SalesInvoiceCreditNoteDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SalesInvoiceCreditNoteDto v1SalesInvoicesIdGet(Long id) throws ApiException {
        ApiResponse<SalesInvoiceCreditNoteDto> localVarResp = v1SalesInvoicesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Returns information about a single Sales Invoice.
     * 
     * @param id Id of Sales Invoice to return. (required)
     * @return ApiResponse&lt;SalesInvoiceCreditNoteDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SalesInvoiceCreditNoteDto> v1SalesInvoicesIdGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = v1SalesInvoicesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SalesInvoiceCreditNoteDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns information about a single Sales Invoice. (asynchronously)
     * 
     * @param id Id of Sales Invoice to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1SalesInvoicesIdGetAsync(Long id, final ApiCallback<SalesInvoiceCreditNoteDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1SalesInvoicesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SalesInvoiceCreditNoteDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
