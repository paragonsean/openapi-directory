/*
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ODataRawQueryOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:05.666566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ODataRawQueryOptions {
  public static final String SERIALIZED_NAME_EXPAND = "Expand";
  @SerializedName(SERIALIZED_NAME_EXPAND)
  private String expand;

  public static final String SERIALIZED_NAME_FILTER = "Filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_FORMAT = "Format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_INLINE_COUNT = "InlineCount";
  @SerializedName(SERIALIZED_NAME_INLINE_COUNT)
  private String inlineCount;

  public static final String SERIALIZED_NAME_ORDER_BY = "OrderBy";
  @SerializedName(SERIALIZED_NAME_ORDER_BY)
  private String orderBy;

  public static final String SERIALIZED_NAME_SELECT = "Select";
  @SerializedName(SERIALIZED_NAME_SELECT)
  private String select;

  public static final String SERIALIZED_NAME_SKIP = "Skip";
  @SerializedName(SERIALIZED_NAME_SKIP)
  private String skip;

  public static final String SERIALIZED_NAME_SKIP_TOKEN = "SkipToken";
  @SerializedName(SERIALIZED_NAME_SKIP_TOKEN)
  private String skipToken;

  public static final String SERIALIZED_NAME_TOP = "Top";
  @SerializedName(SERIALIZED_NAME_TOP)
  private String top;

  public ODataRawQueryOptions() {
  }

  public ODataRawQueryOptions(
     String expand, 
     String filter, 
     String format, 
     String inlineCount, 
     String orderBy, 
     String select, 
     String skip, 
     String skipToken, 
     String top
  ) {
    this();
    this.expand = expand;
    this.filter = filter;
    this.format = format;
    this.inlineCount = inlineCount;
    this.orderBy = orderBy;
    this.select = select;
    this.skip = skip;
    this.skipToken = skipToken;
    this.top = top;
  }

  /**
   * Get expand
   * @return expand
   */
  @javax.annotation.Nullable
  public String getExpand() {
    return expand;
  }



  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public String getFilter() {
    return filter;
  }



  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }



  /**
   * Get inlineCount
   * @return inlineCount
   */
  @javax.annotation.Nullable
  public String getInlineCount() {
    return inlineCount;
  }



  /**
   * Get orderBy
   * @return orderBy
   */
  @javax.annotation.Nullable
  public String getOrderBy() {
    return orderBy;
  }



  /**
   * Get select
   * @return select
   */
  @javax.annotation.Nullable
  public String getSelect() {
    return select;
  }



  /**
   * Get skip
   * @return skip
   */
  @javax.annotation.Nullable
  public String getSkip() {
    return skip;
  }



  /**
   * Get skipToken
   * @return skipToken
   */
  @javax.annotation.Nullable
  public String getSkipToken() {
    return skipToken;
  }



  /**
   * Get top
   * @return top
   */
  @javax.annotation.Nullable
  public String getTop() {
    return top;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ODataRawQueryOptions odataRawQueryOptions = (ODataRawQueryOptions) o;
    return Objects.equals(this.expand, odataRawQueryOptions.expand) &&
        Objects.equals(this.filter, odataRawQueryOptions.filter) &&
        Objects.equals(this.format, odataRawQueryOptions.format) &&
        Objects.equals(this.inlineCount, odataRawQueryOptions.inlineCount) &&
        Objects.equals(this.orderBy, odataRawQueryOptions.orderBy) &&
        Objects.equals(this.select, odataRawQueryOptions.select) &&
        Objects.equals(this.skip, odataRawQueryOptions.skip) &&
        Objects.equals(this.skipToken, odataRawQueryOptions.skipToken) &&
        Objects.equals(this.top, odataRawQueryOptions.top);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expand, filter, format, inlineCount, orderBy, select, skip, skipToken, top);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ODataRawQueryOptions {\n");
    sb.append("    expand: ").append(toIndentedString(expand)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    inlineCount: ").append(toIndentedString(inlineCount)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("    select: ").append(toIndentedString(select)).append("\n");
    sb.append("    skip: ").append(toIndentedString(skip)).append("\n");
    sb.append("    skipToken: ").append(toIndentedString(skipToken)).append("\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Expand");
    openapiFields.add("Filter");
    openapiFields.add("Format");
    openapiFields.add("InlineCount");
    openapiFields.add("OrderBy");
    openapiFields.add("Select");
    openapiFields.add("Skip");
    openapiFields.add("SkipToken");
    openapiFields.add("Top");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ODataRawQueryOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ODataRawQueryOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ODataRawQueryOptions is not found in the empty JSON string", ODataRawQueryOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ODataRawQueryOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ODataRawQueryOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Expand") != null && !jsonObj.get("Expand").isJsonNull()) && !jsonObj.get("Expand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Expand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Expand").toString()));
      }
      if ((jsonObj.get("Filter") != null && !jsonObj.get("Filter").isJsonNull()) && !jsonObj.get("Filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Filter").toString()));
      }
      if ((jsonObj.get("Format") != null && !jsonObj.get("Format").isJsonNull()) && !jsonObj.get("Format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Format").toString()));
      }
      if ((jsonObj.get("InlineCount") != null && !jsonObj.get("InlineCount").isJsonNull()) && !jsonObj.get("InlineCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InlineCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InlineCount").toString()));
      }
      if ((jsonObj.get("OrderBy") != null && !jsonObj.get("OrderBy").isJsonNull()) && !jsonObj.get("OrderBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OrderBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrderBy").toString()));
      }
      if ((jsonObj.get("Select") != null && !jsonObj.get("Select").isJsonNull()) && !jsonObj.get("Select").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Select` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Select").toString()));
      }
      if ((jsonObj.get("Skip") != null && !jsonObj.get("Skip").isJsonNull()) && !jsonObj.get("Skip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Skip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Skip").toString()));
      }
      if ((jsonObj.get("SkipToken") != null && !jsonObj.get("SkipToken").isJsonNull()) && !jsonObj.get("SkipToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SkipToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SkipToken").toString()));
      }
      if ((jsonObj.get("Top") != null && !jsonObj.get("Top").isJsonNull()) && !jsonObj.get("Top").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Top` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Top").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ODataRawQueryOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ODataRawQueryOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ODataRawQueryOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ODataRawQueryOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<ODataRawQueryOptions>() {
           @Override
           public void write(JsonWriter out, ODataRawQueryOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ODataRawQueryOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ODataRawQueryOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ODataRawQueryOptions
   * @throws IOException if the JSON string is invalid with respect to ODataRawQueryOptions
   */
  public static ODataRawQueryOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ODataRawQueryOptions.class);
  }

  /**
   * Convert an instance of ODataRawQueryOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

