/*
 * Big Red Cloud API
 *   <div style='line-height: 30px;'>      <strong>Welcome to the Big Red Cloud API</strong><br/>      This API enables programmatic access to Big Red Cloud data.<br/>      We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>      To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>      Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>      The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>      For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>  </div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SalesInvoiceEmailInfoDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:05.666566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesInvoiceEmailInfoDto {
  public static final String SERIALIZED_NAME_BCC_ADDRESSES = "bccAddresses";
  @SerializedName(SERIALIZED_NAME_BCC_ADDRESSES)
  private List<String> bccAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGE_BODY = "messageBody";
  @SerializedName(SERIALIZED_NAME_MESSAGE_BODY)
  private String messageBody;

  public static final String SERIALIZED_NAME_SALES_INVOICE_ID = "salesInvoiceId";
  @SerializedName(SERIALIZED_NAME_SALES_INVOICE_ID)
  private Long salesInvoiceId;

  public static final String SERIALIZED_NAME_TO_ADDRESS = "toAddress";
  @SerializedName(SERIALIZED_NAME_TO_ADDRESS)
  private String toAddress;

  public SalesInvoiceEmailInfoDto() {
  }

  public SalesInvoiceEmailInfoDto bccAddresses(List<String> bccAddresses) {
    this.bccAddresses = bccAddresses;
    return this;
  }

  public SalesInvoiceEmailInfoDto addBccAddressesItem(String bccAddressesItem) {
    if (this.bccAddresses == null) {
      this.bccAddresses = new ArrayList<>();
    }
    this.bccAddresses.add(bccAddressesItem);
    return this;
  }

  /**
   * Get bccAddresses
   * @return bccAddresses
   */
  @javax.annotation.Nullable
  public List<String> getBccAddresses() {
    return bccAddresses;
  }

  public void setBccAddresses(List<String> bccAddresses) {
    this.bccAddresses = bccAddresses;
  }


  public SalesInvoiceEmailInfoDto messageBody(String messageBody) {
    this.messageBody = messageBody;
    return this;
  }

  /**
   * Get messageBody
   * @return messageBody
   */
  @javax.annotation.Nullable
  public String getMessageBody() {
    return messageBody;
  }

  public void setMessageBody(String messageBody) {
    this.messageBody = messageBody;
  }


  public SalesInvoiceEmailInfoDto salesInvoiceId(Long salesInvoiceId) {
    this.salesInvoiceId = salesInvoiceId;
    return this;
  }

  /**
   * Get salesInvoiceId
   * @return salesInvoiceId
   */
  @javax.annotation.Nullable
  public Long getSalesInvoiceId() {
    return salesInvoiceId;
  }

  public void setSalesInvoiceId(Long salesInvoiceId) {
    this.salesInvoiceId = salesInvoiceId;
  }


  public SalesInvoiceEmailInfoDto toAddress(String toAddress) {
    this.toAddress = toAddress;
    return this;
  }

  /**
   * Get toAddress
   * @return toAddress
   */
  @javax.annotation.Nullable
  public String getToAddress() {
    return toAddress;
  }

  public void setToAddress(String toAddress) {
    this.toAddress = toAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesInvoiceEmailInfoDto salesInvoiceEmailInfoDto = (SalesInvoiceEmailInfoDto) o;
    return Objects.equals(this.bccAddresses, salesInvoiceEmailInfoDto.bccAddresses) &&
        Objects.equals(this.messageBody, salesInvoiceEmailInfoDto.messageBody) &&
        Objects.equals(this.salesInvoiceId, salesInvoiceEmailInfoDto.salesInvoiceId) &&
        Objects.equals(this.toAddress, salesInvoiceEmailInfoDto.toAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bccAddresses, messageBody, salesInvoiceId, toAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesInvoiceEmailInfoDto {\n");
    sb.append("    bccAddresses: ").append(toIndentedString(bccAddresses)).append("\n");
    sb.append("    messageBody: ").append(toIndentedString(messageBody)).append("\n");
    sb.append("    salesInvoiceId: ").append(toIndentedString(salesInvoiceId)).append("\n");
    sb.append("    toAddress: ").append(toIndentedString(toAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bccAddresses");
    openapiFields.add("messageBody");
    openapiFields.add("salesInvoiceId");
    openapiFields.add("toAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesInvoiceEmailInfoDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesInvoiceEmailInfoDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesInvoiceEmailInfoDto is not found in the empty JSON string", SalesInvoiceEmailInfoDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesInvoiceEmailInfoDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesInvoiceEmailInfoDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("bccAddresses") != null && !jsonObj.get("bccAddresses").isJsonNull() && !jsonObj.get("bccAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bccAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("bccAddresses").toString()));
      }
      if ((jsonObj.get("messageBody") != null && !jsonObj.get("messageBody").isJsonNull()) && !jsonObj.get("messageBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageBody").toString()));
      }
      if ((jsonObj.get("toAddress") != null && !jsonObj.get("toAddress").isJsonNull()) && !jsonObj.get("toAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesInvoiceEmailInfoDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesInvoiceEmailInfoDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesInvoiceEmailInfoDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesInvoiceEmailInfoDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesInvoiceEmailInfoDto>() {
           @Override
           public void write(JsonWriter out, SalesInvoiceEmailInfoDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesInvoiceEmailInfoDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesInvoiceEmailInfoDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesInvoiceEmailInfoDto
   * @throws IOException if the JSON string is invalid with respect to SalesInvoiceEmailInfoDto
   */
  public static SalesInvoiceEmailInfoDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesInvoiceEmailInfoDto.class);
  }

  /**
   * Convert an instance of SalesInvoiceEmailInfoDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

