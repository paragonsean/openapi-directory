# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.record_locations_inner import RecordLocationsInner
from openapi_server import util


class Record(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: List[str]=None, collection: List[str]=None, collection_title: List[str]=None, content_partner: List[str]=None, copyright: List[str]=None, created_at: datetime=None, creator: List[str]=None, _date: List[str]=None, dc_identifier: List[str]=None, description: str=None, display_collection: str=None, display_content_partner: str=None, display_date: str=None, id: int=None, landing_url: str=None, large_thumbnail_url: str=None, locations: List[RecordLocationsInner]=None, primary_collection: List[str]=None, rights: str=None, rights_url: List[str]=None, source_url: str=None, subject: List[str]=None, thumbnail_url: str=None, title: str=None, updated_at: datetime=None, usage: List[str]=None):
        """Record - a model defined in OpenAPI

        :param category: The category of this Record.
        :param collection: The collection of this Record.
        :param collection_title: The collection_title of this Record.
        :param content_partner: The content_partner of this Record.
        :param copyright: The copyright of this Record.
        :param created_at: The created_at of this Record.
        :param creator: The creator of this Record.
        :param _date: The _date of this Record.
        :param dc_identifier: The dc_identifier of this Record.
        :param description: The description of this Record.
        :param display_collection: The display_collection of this Record.
        :param display_content_partner: The display_content_partner of this Record.
        :param display_date: The display_date of this Record.
        :param id: The id of this Record.
        :param landing_url: The landing_url of this Record.
        :param large_thumbnail_url: The large_thumbnail_url of this Record.
        :param locations: The locations of this Record.
        :param primary_collection: The primary_collection of this Record.
        :param rights: The rights of this Record.
        :param rights_url: The rights_url of this Record.
        :param source_url: The source_url of this Record.
        :param subject: The subject of this Record.
        :param thumbnail_url: The thumbnail_url of this Record.
        :param title: The title of this Record.
        :param updated_at: The updated_at of this Record.
        :param usage: The usage of this Record.
        """
        self.openapi_types = {
            'category': List[str],
            'collection': List[str],
            'collection_title': List[str],
            'content_partner': List[str],
            'copyright': List[str],
            'created_at': datetime,
            'creator': List[str],
            '_date': List[str],
            'dc_identifier': List[str],
            'description': str,
            'display_collection': str,
            'display_content_partner': str,
            'display_date': str,
            'id': int,
            'landing_url': str,
            'large_thumbnail_url': str,
            'locations': List[RecordLocationsInner],
            'primary_collection': List[str],
            'rights': str,
            'rights_url': List[str],
            'source_url': str,
            'subject': List[str],
            'thumbnail_url': str,
            'title': str,
            'updated_at': datetime,
            'usage': List[str]
        }

        self.attribute_map = {
            'category': 'category',
            'collection': 'collection',
            'collection_title': 'collection_title',
            'content_partner': 'content_partner',
            'copyright': 'copyright',
            'created_at': 'created_at',
            'creator': 'creator',
            '_date': 'date',
            'dc_identifier': 'dc_identifier',
            'description': 'description',
            'display_collection': 'display_collection',
            'display_content_partner': 'display_content_partner',
            'display_date': 'display_date',
            'id': 'id',
            'landing_url': 'landing_url',
            'large_thumbnail_url': 'large_thumbnail_url',
            'locations': 'locations',
            'primary_collection': 'primary_collection',
            'rights': 'rights',
            'rights_url': 'rights_url',
            'source_url': 'source_url',
            'subject': 'subject',
            'thumbnail_url': 'thumbnail_url',
            'title': 'title',
            'updated_at': 'updated_at',
            'usage': 'usage'
        }

        self._category = category
        self._collection = collection
        self._collection_title = collection_title
        self._content_partner = content_partner
        self._copyright = copyright
        self._created_at = created_at
        self._creator = creator
        self.__date = _date
        self._dc_identifier = dc_identifier
        self._description = description
        self._display_collection = display_collection
        self._display_content_partner = display_content_partner
        self._display_date = display_date
        self._id = id
        self._landing_url = landing_url
        self._large_thumbnail_url = large_thumbnail_url
        self._locations = locations
        self._primary_collection = primary_collection
        self._rights = rights
        self._rights_url = rights_url
        self._source_url = source_url
        self._subject = subject
        self._thumbnail_url = thumbnail_url
        self._title = title
        self._updated_at = updated_at
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Record':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The record of this Record.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this Record.

        There will always be at least 1 human-readable category label in this field.

        :return: The category of this Record.
        :rtype: List[str]
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Record.

        There will always be at least 1 human-readable category label in this field.

        :param category: The category of this Record.
        :type category: List[str]
        """
        allowed_values = ["Newspapers", "Images", "Books", "Articles", "Journals", "Archives", "Audio", "Other", "Manuscripts", "Reference sources", "Research papers", "Videos", "Music Score", "Groups", "Data", "Websites", "Sets"]  # noqa: E501
        if not set(category).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `category` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(category) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._category = category

    @property
    def collection(self):
        """Gets the collection of this Record.

        In addition to the top level *\"display_collection\"* above, this field can also contain sub-collections or groupings within the main collection.  

        :return: The collection of this Record.
        :rtype: List[str]
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this Record.

        In addition to the top level *\"display_collection\"* above, this field can also contain sub-collections or groupings within the main collection.  

        :param collection: The collection of this Record.
        :type collection: List[str]
        """

        self._collection = collection

    @property
    def collection_title(self):
        """Gets the collection_title of this Record.

        For historic reasons this is a duplicate of the previous field (\"collection\").

        :return: The collection_title of this Record.
        :rtype: List[str]
        """
        return self._collection_title

    @collection_title.setter
    def collection_title(self, collection_title):
        """Sets the collection_title of this Record.

        For historic reasons this is a duplicate of the previous field (\"collection\").

        :param collection_title: The collection_title of this Record.
        :type collection_title: List[str]
        """

        self._collection_title = collection_title

    @property
    def content_partner(self):
        """Gets the content_partner of this Record.

        Name of the organisation(s), institution(s), or individual(s) making content available through DigitalNZ. This metadata will be present on all records and is usually the name of the organisation that has agreed to the DigitalNZ Metadata Contribution Terms.

        :return: The content_partner of this Record.
        :rtype: List[str]
        """
        return self._content_partner

    @content_partner.setter
    def content_partner(self, content_partner):
        """Sets the content_partner of this Record.

        Name of the organisation(s), institution(s), or individual(s) making content available through DigitalNZ. This metadata will be present on all records and is usually the name of the organisation that has agreed to the DigitalNZ Metadata Contribution Terms.

        :param content_partner: The content_partner of this Record.
        :type content_partner: List[str]
        """

        self._content_partner = content_partner

    @property
    def copyright(self):
        """Gets the copyright of this Record.

        A copyright statement applying to the object referenced by this record. This field may be empty.

        :return: The copyright of this Record.
        :rtype: List[str]
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this Record.

        A copyright statement applying to the object referenced by this record. This field may be empty.

        :param copyright: The copyright of this Record.
        :type copyright: List[str]
        """
        allowed_values = ["All rights reserved", "Some rights reserved", "No known copyright restrictions", "Unknown"]  # noqa: E501
        if not set(copyright).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `copyright` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(copyright) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._copyright = copyright

    @property
    def created_at(self):
        """Gets the created_at of this Record.

        The date the record was initially harvested into DigitalNZ.

        :return: The created_at of this Record.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Record.

        The date the record was initially harvested into DigitalNZ.

        :param created_at: The created_at of this Record.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def creator(self):
        """Gets the creator of this Record.

        The name's of the people, organisations, institutions, services etc. who created the content (eg. the photographer, artist, writer or author).

        :return: The creator of this Record.
        :rtype: List[str]
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Record.

        The name's of the people, organisations, institutions, services etc. who created the content (eg. the photographer, artist, writer or author).

        :param creator: The creator of this Record.
        :type creator: List[str]
        """

        self._creator = creator

    @property
    def _date(self):
        """Gets the _date of this Record.

        Date information associated with this record (e.g. 1996-01-01T00:00:00.000Z). This field may be empty.

        :return: The _date of this Record.
        :rtype: List[str]
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Record.

        Date information associated with this record (e.g. 1996-01-01T00:00:00.000Z). This field may be empty.

        :param _date: The _date of this Record.
        :type _date: List[str]
        """

        self.__date = _date

    @property
    def dc_identifier(self):
        """Gets the dc_identifier of this Record.

        Identifiers relating to the content from the content partner's system.

        :return: The dc_identifier of this Record.
        :rtype: List[str]
        """
        return self._dc_identifier

    @dc_identifier.setter
    def dc_identifier(self, dc_identifier):
        """Sets the dc_identifier of this Record.

        Identifiers relating to the content from the content partner's system.

        :param dc_identifier: The dc_identifier of this Record.
        :type dc_identifier: List[str]
        """

        self._dc_identifier = dc_identifier

    @property
    def description(self):
        """Gets the description of this Record.

        Description of the record. Most records have a description.

        :return: The description of this Record.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Record.

        Description of the record. Most records have a description.

        :param description: The description of this Record.
        :type description: str
        """

        self._description = description

    @property
    def display_collection(self):
        """Gets the display_collection of this Record.

        The single main collection or website that the item belongs to. This metadata will be present on all records.

        :return: The display_collection of this Record.
        :rtype: str
        """
        return self._display_collection

    @display_collection.setter
    def display_collection(self, display_collection):
        """Sets the display_collection of this Record.

        The single main collection or website that the item belongs to. This metadata will be present on all records.

        :param display_collection: The display_collection of this Record.
        :type display_collection: str
        """

        self._display_collection = display_collection

    @property
    def display_content_partner(self):
        """Gets the display_content_partner of this Record.

        The main Content Partner, for cases when there are more than one. This metadata will be present on all records.

        :return: The display_content_partner of this Record.
        :rtype: str
        """
        return self._display_content_partner

    @display_content_partner.setter
    def display_content_partner(self, display_content_partner):
        """Sets the display_content_partner of this Record.

        The main Content Partner, for cases when there are more than one. This metadata will be present on all records.

        :param display_content_partner: The display_content_partner of this Record.
        :type display_content_partner: str
        """

        self._display_content_partner = display_content_partner

    @property
    def display_date(self):
        """Gets the display_date of this Record.

        Where provided, this field contains a human readable version of the date information.

        :return: The display_date of this Record.
        :rtype: str
        """
        return self._display_date

    @display_date.setter
    def display_date(self, display_date):
        """Sets the display_date of this Record.

        Where provided, this field contains a human readable version of the date information.

        :param display_date: The display_date of this Record.
        :type display_date: str
        """

        self._display_date = display_date

    @property
    def id(self):
        """Gets the id of this Record.

        All records have a unique identifier used within the DigitalNZ system.

        :return: The id of this Record.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Record.

        All records have a unique identifier used within the DigitalNZ system.

        :param id: The id of this Record.
        :type id: int
        """

        self._id = id

    @property
    def landing_url(self):
        """Gets the landing_url of this Record.

        This field will always contain a URL of the item on the content partner's website.   *Note:* Please use the source_url when providing HTML links. 

        :return: The landing_url of this Record.
        :rtype: str
        """
        return self._landing_url

    @landing_url.setter
    def landing_url(self, landing_url):
        """Sets the landing_url of this Record.

        This field will always contain a URL of the item on the content partner's website.   *Note:* Please use the source_url when providing HTML links. 

        :param landing_url: The landing_url of this Record.
        :type landing_url: str
        """

        self._landing_url = landing_url

    @property
    def large_thumbnail_url(self):
        """Gets the large_thumbnail_url of this Record.

        URL for a larger thumbnail image with a width of up to 800px. NOTE - the API Terms do not extend rights to the use of images accessable throught the *large_thumbnail_url* field.

        :return: The large_thumbnail_url of this Record.
        :rtype: str
        """
        return self._large_thumbnail_url

    @large_thumbnail_url.setter
    def large_thumbnail_url(self, large_thumbnail_url):
        """Sets the large_thumbnail_url of this Record.

        URL for a larger thumbnail image with a width of up to 800px. NOTE - the API Terms do not extend rights to the use of images accessable throught the *large_thumbnail_url* field.

        :param large_thumbnail_url: The large_thumbnail_url of this Record.
        :type large_thumbnail_url: str
        """

        self._large_thumbnail_url = large_thumbnail_url

    @property
    def locations(self):
        """Gets the locations of this Record.

        Geographical location information including latitude and longitude co-ordinates, text based location information, and details about where the location information comes from (eg. \"Location provided by Museum of New Zealand Te Papa Tongarewa\") 

        :return: The locations of this Record.
        :rtype: List[RecordLocationsInner]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this Record.

        Geographical location information including latitude and longitude co-ordinates, text based location information, and details about where the location information comes from (eg. \"Location provided by Museum of New Zealand Te Papa Tongarewa\") 

        :param locations: The locations of this Record.
        :type locations: List[RecordLocationsInner]
        """

        self._locations = locations

    @property
    def primary_collection(self):
        """Gets the primary_collection of this Record.

        In most cases this is the same as *display_collection*, but will occasionally a second value.

        :return: The primary_collection of this Record.
        :rtype: List[str]
        """
        return self._primary_collection

    @primary_collection.setter
    def primary_collection(self, primary_collection):
        """Sets the primary_collection of this Record.

        In most cases this is the same as *display_collection*, but will occasionally a second value.

        :param primary_collection: The primary_collection of this Record.
        :type primary_collection: List[str]
        """

        self._primary_collection = primary_collection

    @property
    def rights(self):
        """Gets the rights of this Record.

        Rights information. Can be a rights statement explaining the rights of the record or a link to a webpage with more detailed rights information.

        :return: The rights of this Record.
        :rtype: str
        """
        return self._rights

    @rights.setter
    def rights(self, rights):
        """Sets the rights of this Record.

        Rights information. Can be a rights statement explaining the rights of the record or a link to a webpage with more detailed rights information.

        :param rights: The rights of this Record.
        :type rights: str
        """

        self._rights = rights

    @property
    def rights_url(self):
        """Gets the rights_url of this Record.

        An array of HTTP URLs resolving to a rights statement or terms of use information for the resource.

        :return: The rights_url of this Record.
        :rtype: List[str]
        """
        return self._rights_url

    @rights_url.setter
    def rights_url(self, rights_url):
        """Sets the rights_url of this Record.

        An array of HTTP URLs resolving to a rights statement or terms of use information for the resource.

        :param rights_url: The rights_url of this Record.
        :type rights_url: List[str]
        """

        self._rights_url = rights_url

    @property
    def source_url(self):
        """Gets the source_url of this Record.

        This URL will always be present and provides a redirect to the landing_url. This link should be used as the main click-through to the content. Passing users through this link allows DNZ to count the number of click-throughs, as well as trigger link-checking activities that help clean up stale links in DigitalNZ.

        :return: The source_url of this Record.
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """Sets the source_url of this Record.

        This URL will always be present and provides a redirect to the landing_url. This link should be used as the main click-through to the content. Passing users through this link allows DNZ to count the number of click-throughs, as well as trigger link-checking activities that help clean up stale links in DigitalNZ.

        :param source_url: The source_url of this Record.
        :type source_url: str
        """

        self._source_url = source_url

    @property
    def subject(self):
        """Gets the subject of this Record.

        Keywords about the content.

        :return: The subject of this Record.
        :rtype: List[str]
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Record.

        Keywords about the content.

        :param subject: The subject of this Record.
        :type subject: List[str]
        """

        self._subject = subject

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this Record.

        URL for a thumbnail image of the content. The size varies depending on what is available but we aim for a width of 250px. This field is mostly populated on records with a 'category' of 'Images', but is also sometimes found on others (eg. \"Videos\"). 

        :return: The thumbnail_url of this Record.
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this Record.

        URL for a thumbnail image of the content. The size varies depending on what is available but we aim for a width of 250px. This field is mostly populated on records with a 'category' of 'Images', but is also sometimes found on others (eg. \"Videos\"). 

        :param thumbnail_url: The thumbnail_url of this Record.
        :type thumbnail_url: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def title(self):
        """Gets the title of this Record.

        Title of the record. All records should have a title.

        :return: The title of this Record.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Record.

        Title of the record. All records should have a title.

        :param title: The title of this Record.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this Record.

        The date the record was last updated/re-harvested into DigitalNZ.

        :return: The updated_at of this Record.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Record.

        The date the record was last updated/re-harvested into DigitalNZ.

        :param updated_at: The updated_at of this Record.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def usage(self):
        """Gets the usage of this Record.

        This field is always present and contains human-understandable information about how the item may be used based on its copyright/license.

        :return: The usage of this Record.
        :rtype: List[str]
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this Record.

        This field is always present and contains human-understandable information about how the item may be used based on its copyright/license.

        :param usage: The usage of this Record.
        :type usage: List[str]
        """
        allowed_values = ["All rights reserved", "Share", "Modify", "Use commercially", "Unknown"]  # noqa: E501
        if not set(usage).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `usage` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(usage) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._usage = usage
