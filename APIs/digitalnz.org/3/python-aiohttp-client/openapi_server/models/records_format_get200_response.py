# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.record import Record
from openapi_server import util


class RecordsFormatGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, facets: Dict[str, Dict[str, int]]=None, page: int=None, per_page: int=None, records: List[Record]=None, request_url: str=None, result_count: int=None):
        """RecordsFormatGet200Response - a model defined in OpenAPI

        :param facets: The facets of this RecordsFormatGet200Response.
        :param page: The page of this RecordsFormatGet200Response.
        :param per_page: The per_page of this RecordsFormatGet200Response.
        :param records: The records of this RecordsFormatGet200Response.
        :param request_url: The request_url of this RecordsFormatGet200Response.
        :param result_count: The result_count of this RecordsFormatGet200Response.
        """
        self.openapi_types = {
            'facets': Dict[str, Dict[str, int]],
            'page': int,
            'per_page': int,
            'records': List[Record],
            'request_url': str,
            'result_count': int
        }

        self.attribute_map = {
            'facets': 'facets',
            'page': 'page',
            'per_page': 'per_page',
            'records': 'records',
            'request_url': 'request_url',
            'result_count': 'result_count'
        }

        self._facets = facets
        self._page = page
        self._per_page = per_page
        self._records = records
        self._request_url = request_url
        self._result_count = result_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecordsFormatGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _records__format__get_200_response of this RecordsFormatGet200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facets(self):
        """Gets the facets of this RecordsFormatGet200Response.

        Each field you request from the list of facetable fields will be returned as separate elements. Each of those will contain a sorted list of elements that are made up of a value (eg collection name, subject, date) and the number of results associated with that value.   

        :return: The facets of this RecordsFormatGet200Response.
        :rtype: Dict[str, Dict[str, int]]
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """Sets the facets of this RecordsFormatGet200Response.

        Each field you request from the list of facetable fields will be returned as separate elements. Each of those will contain a sorted list of elements that are made up of a value (eg collection name, subject, date) and the number of results associated with that value.   

        :param facets: The facets of this RecordsFormatGet200Response.
        :type facets: Dict[str, Dict[str, int]]
        """

        self._facets = facets

    @property
    def page(self):
        """Gets the page of this RecordsFormatGet200Response.

        Current page.

        :return: The page of this RecordsFormatGet200Response.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this RecordsFormatGet200Response.

        Current page.

        :param page: The page of this RecordsFormatGet200Response.
        :type page: int
        """

        self._page = page

    @property
    def per_page(self):
        """Gets the per_page of this RecordsFormatGet200Response.

        Requested amount of records shown per page of results.

        :return: The per_page of this RecordsFormatGet200Response.
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this RecordsFormatGet200Response.

        Requested amount of records shown per page of results.

        :param per_page: The per_page of this RecordsFormatGet200Response.
        :type per_page: int
        """

        self._per_page = per_page

    @property
    def records(self):
        """Gets the records of this RecordsFormatGet200Response.


        :return: The records of this RecordsFormatGet200Response.
        :rtype: List[Record]
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this RecordsFormatGet200Response.


        :param records: The records of this RecordsFormatGet200Response.
        :type records: List[Record]
        """

        self._records = records

    @property
    def request_url(self):
        """Gets the request_url of this RecordsFormatGet200Response.

        The URL of current page of results.

        :return: The request_url of this RecordsFormatGet200Response.
        :rtype: str
        """
        return self._request_url

    @request_url.setter
    def request_url(self, request_url):
        """Sets the request_url of this RecordsFormatGet200Response.

        The URL of current page of results.

        :param request_url: The request_url of this RecordsFormatGet200Response.
        :type request_url: str
        """

        self._request_url = request_url

    @property
    def result_count(self):
        """Gets the result_count of this RecordsFormatGet200Response.

        Total number of matching search results.

        :return: The result_count of this RecordsFormatGet200Response.
        :rtype: int
        """
        return self._result_count

    @result_count.setter
    def result_count(self, result_count):
        """Sets the result_count of this RecordsFormatGet200Response.

        Total number of matching search results.

        :param result_count: The result_count of this RecordsFormatGet200Response.
        :type result_count: int
        """

        self._result_count = result_count
