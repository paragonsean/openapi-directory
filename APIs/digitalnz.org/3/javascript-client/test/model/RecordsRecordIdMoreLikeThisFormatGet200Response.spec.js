/**
 * DigitalNZ API
 * OpenAPI specification of DigitalNZ's Record API.   For more information about the API see [digitalnz.org/developers](https://digitalnz.org/developers).   To learn more about the metadata/fields used in the API see the [Metadata Dictionary](https://docs.google.com/document/pub?id=1Z3I_ckQWjnQQ4SzpORbClcIXUheO-Jd4jt-oZFuMcoQ).   To get a sense of what content is available via the API take a look at the search feature on the [DigitalNZ website](https://digitalnz.org/records?text=all%20sorts&tab=Images).   The [terms of use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) specify how developers can use the DigitalNZ API. 
 *
 * The version of the OpenAPI document: 3
 * Contact: develop@digitalnz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DigitalNzApi);
  }
}(this, function(expect, DigitalNzApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DigitalNzApi.RecordsRecordIdMoreLikeThisFormatGet200Response();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RecordsRecordIdMoreLikeThisFormatGet200Response', function() {
    it('should create an instance of RecordsRecordIdMoreLikeThisFormatGet200Response', function() {
      // uncomment below and update the code to test RecordsRecordIdMoreLikeThisFormatGet200Response
      //var instance = new DigitalNzApi.RecordsRecordIdMoreLikeThisFormatGet200Response();
      //expect(instance).to.be.a(DigitalNzApi.RecordsRecordIdMoreLikeThisFormatGet200Response);
    });

    it('should have the property page (base name: "page")', function() {
      // uncomment below and update the code to test the property page
      //var instance = new DigitalNzApi.RecordsRecordIdMoreLikeThisFormatGet200Response();
      //expect(instance).to.be();
    });

    it('should have the property perPage (base name: "per_page")', function() {
      // uncomment below and update the code to test the property perPage
      //var instance = new DigitalNzApi.RecordsRecordIdMoreLikeThisFormatGet200Response();
      //expect(instance).to.be();
    });

    it('should have the property records (base name: "records")', function() {
      // uncomment below and update the code to test the property records
      //var instance = new DigitalNzApi.RecordsRecordIdMoreLikeThisFormatGet200Response();
      //expect(instance).to.be();
    });

    it('should have the property requestUrl (base name: "request_url")', function() {
      // uncomment below and update the code to test the property requestUrl
      //var instance = new DigitalNzApi.RecordsRecordIdMoreLikeThisFormatGet200Response();
      //expect(instance).to.be();
    });

    it('should have the property resultCount (base name: "result_count")', function() {
      // uncomment below and update the code to test the property resultCount
      //var instance = new DigitalNzApi.RecordsRecordIdMoreLikeThisFormatGet200Response();
      //expect(instance).to.be();
    });

  });

}));
