/**
 * DigitalNZ API
 * OpenAPI specification of DigitalNZ's Record API.   For more information about the API see [digitalnz.org/developers](https://digitalnz.org/developers).   To learn more about the metadata/fields used in the API see the [Metadata Dictionary](https://docs.google.com/document/pub?id=1Z3I_ckQWjnQQ4SzpORbClcIXUheO-Jd4jt-oZFuMcoQ).   To get a sense of what content is available via the API take a look at the search feature on the [DigitalNZ website](https://digitalnz.org/records?text=all%20sorts&tab=Images).   The [terms of use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) specify how developers can use the DigitalNZ API. 
 *
 * The version of the OpenAPI document: 3
 * Contact: develop@digitalnz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Record from './model/Record';
import RecordLocationsInner from './model/RecordLocationsInner';
import RecordsFormatGet200Response from './model/RecordsFormatGet200Response';
import RecordsRecordIdMoreLikeThisFormatGet200Response from './model/RecordsRecordIdMoreLikeThisFormatGet200Response';
import APICallsApi from './api/APICallsApi';


/**
* OpenAPI specification of DigitalNZ&#39;s Record API.   For more information about the API see [digitalnz.org/developers](https://digitalnz.org/developers).   To learn more about the metadata/fields used in the API see the [Metadata Dictionary](https://docs.google.com/document/pub?id&#x3D;1Z3I_ckQWjnQQ4SzpORbClcIXUheO-Jd4jt-oZFuMcoQ).   To get a sense of what content is available via the API take a look at the search feature on the [DigitalNZ website](https://digitalnz.org/records?text&#x3D;all%20sorts&amp;tab&#x3D;Images).   The [terms of use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) specify how developers can use the DigitalNZ API. .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var DigitalNzApi = require('index'); // See note below*.
* var xxxSvc = new DigitalNzApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new DigitalNzApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new DigitalNzApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new DigitalNzApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 3
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Record model constructor.
     * @property {module:model/Record}
     */
    Record,

    /**
     * The RecordLocationsInner model constructor.
     * @property {module:model/RecordLocationsInner}
     */
    RecordLocationsInner,

    /**
     * The RecordsFormatGet200Response model constructor.
     * @property {module:model/RecordsFormatGet200Response}
     */
    RecordsFormatGet200Response,

    /**
     * The RecordsRecordIdMoreLikeThisFormatGet200Response model constructor.
     * @property {module:model/RecordsRecordIdMoreLikeThisFormatGet200Response}
     */
    RecordsRecordIdMoreLikeThisFormatGet200Response,

    /**
    * The APICallsApi service constructor.
    * @property {module:api/APICallsApi}
    */
    APICallsApi
};
