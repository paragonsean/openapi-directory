/**
 * DigitalNZ API
 * OpenAPI specification of DigitalNZ's Record API.   For more information about the API see [digitalnz.org/developers](https://digitalnz.org/developers).   To learn more about the metadata/fields used in the API see the [Metadata Dictionary](https://docs.google.com/document/pub?id=1Z3I_ckQWjnQQ4SzpORbClcIXUheO-Jd4jt-oZFuMcoQ).   To get a sense of what content is available via the API take a look at the search feature on the [DigitalNZ website](https://digitalnz.org/records?text=all%20sorts&tab=Images).   The [terms of use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) specify how developers can use the DigitalNZ API. 
 *
 * The version of the OpenAPI document: 3
 * Contact: develop@digitalnz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Record from './Record';

/**
 * The RecordsFormatGet200Response model module.
 * @module model/RecordsFormatGet200Response
 * @version 3
 */
class RecordsFormatGet200Response {
    /**
     * Constructs a new <code>RecordsFormatGet200Response</code>.
     * @alias module:model/RecordsFormatGet200Response
     */
    constructor() { 
        
        RecordsFormatGet200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RecordsFormatGet200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecordsFormatGet200Response} obj Optional instance to populate.
     * @return {module:model/RecordsFormatGet200Response} The populated <code>RecordsFormatGet200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecordsFormatGet200Response();

            if (data.hasOwnProperty('facets')) {
                obj['facets'] = ApiClient.convertToType(data['facets'], {'String': {'String': 'Number'}});
            }
            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'Number');
            }
            if (data.hasOwnProperty('per_page')) {
                obj['per_page'] = ApiClient.convertToType(data['per_page'], 'Number');
            }
            if (data.hasOwnProperty('records')) {
                obj['records'] = ApiClient.convertToType(data['records'], [Record]);
            }
            if (data.hasOwnProperty('request_url')) {
                obj['request_url'] = ApiClient.convertToType(data['request_url'], 'String');
            }
            if (data.hasOwnProperty('result_count')) {
                obj['result_count'] = ApiClient.convertToType(data['result_count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecordsFormatGet200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecordsFormatGet200Response</code>.
     */
    static validateJSON(data) {
        if (data['records']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['records'])) {
                throw new Error("Expected the field `records` to be an array in the JSON data but got " + data['records']);
            }
            // validate the optional field `records` (array)
            for (const item of data['records']) {
                Record.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['request_url'] && !(typeof data['request_url'] === 'string' || data['request_url'] instanceof String)) {
            throw new Error("Expected the field `request_url` to be a primitive type in the JSON string but got " + data['request_url']);
        }

        return true;
    }


}



/**
 * Each field you request from the list of facetable fields will be returned as separate elements. Each of those will contain a sorted list of elements that are made up of a value (eg collection name, subject, date) and the number of results associated with that value.   
 * @member {Object.<String, Object.<String, Number>>} facets
 */
RecordsFormatGet200Response.prototype['facets'] = undefined;

/**
 * Current page.
 * @member {Number} page
 */
RecordsFormatGet200Response.prototype['page'] = undefined;

/**
 * Requested amount of records shown per page of results.
 * @member {Number} per_page
 */
RecordsFormatGet200Response.prototype['per_page'] = undefined;

/**
 * @member {Array.<module:model/Record>} records
 */
RecordsFormatGet200Response.prototype['records'] = undefined;

/**
 * The URL of current page of results.
 * @member {String} request_url
 */
RecordsFormatGet200Response.prototype['request_url'] = undefined;

/**
 * Total number of matching search results.
 * @member {Number} result_count
 */
RecordsFormatGet200Response.prototype['result_count'] = undefined;






export default RecordsFormatGet200Response;

