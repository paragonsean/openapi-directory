/**
 * DigitalNZ API
 * OpenAPI specification of DigitalNZ's Record API.   For more information about the API see [digitalnz.org/developers](https://digitalnz.org/developers).   To learn more about the metadata/fields used in the API see the [Metadata Dictionary](https://docs.google.com/document/pub?id=1Z3I_ckQWjnQQ4SzpORbClcIXUheO-Jd4jt-oZFuMcoQ).   To get a sense of what content is available via the API take a look at the search feature on the [DigitalNZ website](https://digitalnz.org/records?text=all%20sorts&tab=Images).   The [terms of use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) specify how developers can use the DigitalNZ API. 
 *
 * The version of the OpenAPI document: 3
 * Contact: develop@digitalnz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_records__format__get_200_response.h
 *
 * 
 */

#ifndef OAI_records__format__get_200_response_H
#define OAI_records__format__get_200_response_H

#include <QJsonObject>

#include "OAIRecord.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRecord;

class OAI_records__format__get_200_response : public OAIObject {
public:
    OAI_records__format__get_200_response();
    OAI_records__format__get_200_response(QString json);
    ~OAI_records__format__get_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QMap<QString, qint32>> getFacets() const;
    void setFacets(const QMap<QString, QMap<QString, qint32>> &facets);
    bool is_facets_Set() const;
    bool is_facets_Valid() const;

    qint32 getPage() const;
    void setPage(const qint32 &page);
    bool is_page_Set() const;
    bool is_page_Valid() const;

    qint32 getPerPage() const;
    void setPerPage(const qint32 &per_page);
    bool is_per_page_Set() const;
    bool is_per_page_Valid() const;

    QList<OAIRecord> getRecords() const;
    void setRecords(const QList<OAIRecord> &records);
    bool is_records_Set() const;
    bool is_records_Valid() const;

    QString getRequestUrl() const;
    void setRequestUrl(const QString &request_url);
    bool is_request_url_Set() const;
    bool is_request_url_Valid() const;

    qint32 getResultCount() const;
    void setResultCount(const qint32 &result_count);
    bool is_result_count_Set() const;
    bool is_result_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QMap<QString, qint32>> m_facets;
    bool m_facets_isSet;
    bool m_facets_isValid;

    qint32 m_page;
    bool m_page_isSet;
    bool m_page_isValid;

    qint32 m_per_page;
    bool m_per_page_isSet;
    bool m_per_page_isValid;

    QList<OAIRecord> m_records;
    bool m_records_isSet;
    bool m_records_isValid;

    QString m_request_url;
    bool m_request_url_isSet;
    bool m_request_url_isValid;

    qint32 m_result_count;
    bool m_result_count_isSet;
    bool m_result_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_records__format__get_200_response)

#endif // OAI_records__format__get_200_response_H
