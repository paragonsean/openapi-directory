/**
 * DigitalNZ API
 * OpenAPI specification of DigitalNZ's Record API.   For more information about the API see [digitalnz.org/developers](https://digitalnz.org/developers).   To learn more about the metadata/fields used in the API see the [Metadata Dictionary](https://docs.google.com/document/pub?id=1Z3I_ckQWjnQQ4SzpORbClcIXUheO-Jd4jt-oZFuMcoQ).   To get a sense of what content is available via the API take a look at the search feature on the [DigitalNZ website](https://digitalnz.org/records?text=all%20sorts&tab=Images).   The [terms of use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) specify how developers can use the DigitalNZ API. 
 *
 * The version of the OpenAPI document: 3
 * Contact: develop@digitalnz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecord_locations_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecord_locations_inner::OAIRecord_locations_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecord_locations_inner::OAIRecord_locations_inner() {
    this->initializeModel();
}

OAIRecord_locations_inner::~OAIRecord_locations_inner() {}

void OAIRecord_locations_inner::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lng_isSet = false;
    m_lng_isValid = false;

    m_placename_isSet = false;
    m_placename_isValid = false;
}

void OAIRecord_locations_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecord_locations_inner::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lng_isValid = ::OpenAPI::fromJsonValue(m_lng, json[QString("lng")]);
    m_lng_isSet = !json[QString("lng")].isNull() && m_lng_isValid;

    m_placename_isValid = ::OpenAPI::fromJsonValue(m_placename, json[QString("placename")]);
    m_placename_isSet = !json[QString("placename")].isNull() && m_placename_isValid;
}

QString OAIRecord_locations_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecord_locations_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lng_isSet) {
        obj.insert(QString("lng"), ::OpenAPI::toJsonValue(m_lng));
    }
    if (m_placename_isSet) {
        obj.insert(QString("placename"), ::OpenAPI::toJsonValue(m_placename));
    }
    return obj;
}

QString OAIRecord_locations_inner::getComment() const {
    return m_comment;
}
void OAIRecord_locations_inner::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIRecord_locations_inner::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIRecord_locations_inner::is_comment_Valid() const{
    return m_comment_isValid;
}

double OAIRecord_locations_inner::getLat() const {
    return m_lat;
}
void OAIRecord_locations_inner::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIRecord_locations_inner::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIRecord_locations_inner::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAIRecord_locations_inner::getLng() const {
    return m_lng;
}
void OAIRecord_locations_inner::setLng(const double &lng) {
    m_lng = lng;
    m_lng_isSet = true;
}

bool OAIRecord_locations_inner::is_lng_Set() const{
    return m_lng_isSet;
}

bool OAIRecord_locations_inner::is_lng_Valid() const{
    return m_lng_isValid;
}

QString OAIRecord_locations_inner::getPlacename() const {
    return m_placename;
}
void OAIRecord_locations_inner::setPlacename(const QString &placename) {
    m_placename = placename;
    m_placename_isSet = true;
}

bool OAIRecord_locations_inner::is_placename_Set() const{
    return m_placename_isSet;
}

bool OAIRecord_locations_inner::is_placename_Valid() const{
    return m_placename_isValid;
}

bool OAIRecord_locations_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lng_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placename_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecord_locations_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
