/**
 * DigitalNZ API
 * OpenAPI specification of DigitalNZ's Record API.   For more information about the API see [digitalnz.org/developers](https://digitalnz.org/developers).   To learn more about the metadata/fields used in the API see the [Metadata Dictionary](https://docs.google.com/document/pub?id=1Z3I_ckQWjnQQ4SzpORbClcIXUheO-Jd4jt-oZFuMcoQ).   To get a sense of what content is available via the API take a look at the search feature on the [DigitalNZ website](https://digitalnz.org/records?text=all%20sorts&tab=Images).   The [terms of use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) specify how developers can use the DigitalNZ API. 
 *
 * The version of the OpenAPI document: 3
 * Contact: develop@digitalnz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecord::OAIRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecord::OAIRecord() {
    this->initializeModel();
}

OAIRecord::~OAIRecord() {}

void OAIRecord::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_collection_isSet = false;
    m_collection_isValid = false;

    m_collection_title_isSet = false;
    m_collection_title_isValid = false;

    m_content_partner_isSet = false;
    m_content_partner_isValid = false;

    m_copyright_isSet = false;
    m_copyright_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_dc_identifier_isSet = false;
    m_dc_identifier_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_collection_isSet = false;
    m_display_collection_isValid = false;

    m_display_content_partner_isSet = false;
    m_display_content_partner_isValid = false;

    m_display_date_isSet = false;
    m_display_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_landing_url_isSet = false;
    m_landing_url_isValid = false;

    m_large_thumbnail_url_isSet = false;
    m_large_thumbnail_url_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_primary_collection_isSet = false;
    m_primary_collection_isValid = false;

    m_rights_isSet = false;
    m_rights_isValid = false;

    m_rights_url_isSet = false;
    m_rights_url_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_thumbnail_url_isSet = false;
    m_thumbnail_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;
}

void OAIRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecord::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_collection_isValid = ::OpenAPI::fromJsonValue(m_collection, json[QString("collection")]);
    m_collection_isSet = !json[QString("collection")].isNull() && m_collection_isValid;

    m_collection_title_isValid = ::OpenAPI::fromJsonValue(m_collection_title, json[QString("collection_title")]);
    m_collection_title_isSet = !json[QString("collection_title")].isNull() && m_collection_title_isValid;

    m_content_partner_isValid = ::OpenAPI::fromJsonValue(m_content_partner, json[QString("content_partner")]);
    m_content_partner_isSet = !json[QString("content_partner")].isNull() && m_content_partner_isValid;

    m_copyright_isValid = ::OpenAPI::fromJsonValue(m_copyright, json[QString("copyright")]);
    m_copyright_isSet = !json[QString("copyright")].isNull() && m_copyright_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_dc_identifier_isValid = ::OpenAPI::fromJsonValue(m_dc_identifier, json[QString("dc_identifier")]);
    m_dc_identifier_isSet = !json[QString("dc_identifier")].isNull() && m_dc_identifier_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_collection_isValid = ::OpenAPI::fromJsonValue(m_display_collection, json[QString("display_collection")]);
    m_display_collection_isSet = !json[QString("display_collection")].isNull() && m_display_collection_isValid;

    m_display_content_partner_isValid = ::OpenAPI::fromJsonValue(m_display_content_partner, json[QString("display_content_partner")]);
    m_display_content_partner_isSet = !json[QString("display_content_partner")].isNull() && m_display_content_partner_isValid;

    m_display_date_isValid = ::OpenAPI::fromJsonValue(m_display_date, json[QString("display_date")]);
    m_display_date_isSet = !json[QString("display_date")].isNull() && m_display_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_landing_url_isValid = ::OpenAPI::fromJsonValue(m_landing_url, json[QString("landing_url")]);
    m_landing_url_isSet = !json[QString("landing_url")].isNull() && m_landing_url_isValid;

    m_large_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_large_thumbnail_url, json[QString("large_thumbnail_url")]);
    m_large_thumbnail_url_isSet = !json[QString("large_thumbnail_url")].isNull() && m_large_thumbnail_url_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_primary_collection_isValid = ::OpenAPI::fromJsonValue(m_primary_collection, json[QString("primary_collection")]);
    m_primary_collection_isSet = !json[QString("primary_collection")].isNull() && m_primary_collection_isValid;

    m_rights_isValid = ::OpenAPI::fromJsonValue(m_rights, json[QString("rights")]);
    m_rights_isSet = !json[QString("rights")].isNull() && m_rights_isValid;

    m_rights_url_isValid = ::OpenAPI::fromJsonValue(m_rights_url, json[QString("rights_url")]);
    m_rights_url_isSet = !json[QString("rights_url")].isNull() && m_rights_url_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(m_source_url, json[QString("source_url")]);
    m_source_url_isSet = !json[QString("source_url")].isNull() && m_source_url_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_url, json[QString("thumbnail_url")]);
    m_thumbnail_url_isSet = !json[QString("thumbnail_url")].isNull() && m_thumbnail_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;
}

QString OAIRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_category.size() > 0) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_collection.size() > 0) {
        obj.insert(QString("collection"), ::OpenAPI::toJsonValue(m_collection));
    }
    if (m_collection_title.size() > 0) {
        obj.insert(QString("collection_title"), ::OpenAPI::toJsonValue(m_collection_title));
    }
    if (m_content_partner.size() > 0) {
        obj.insert(QString("content_partner"), ::OpenAPI::toJsonValue(m_content_partner));
    }
    if (m_copyright.size() > 0) {
        obj.insert(QString("copyright"), ::OpenAPI::toJsonValue(m_copyright));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_creator.size() > 0) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_date.size() > 0) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_dc_identifier.size() > 0) {
        obj.insert(QString("dc_identifier"), ::OpenAPI::toJsonValue(m_dc_identifier));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_collection_isSet) {
        obj.insert(QString("display_collection"), ::OpenAPI::toJsonValue(m_display_collection));
    }
    if (m_display_content_partner_isSet) {
        obj.insert(QString("display_content_partner"), ::OpenAPI::toJsonValue(m_display_content_partner));
    }
    if (m_display_date_isSet) {
        obj.insert(QString("display_date"), ::OpenAPI::toJsonValue(m_display_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_landing_url_isSet) {
        obj.insert(QString("landing_url"), ::OpenAPI::toJsonValue(m_landing_url));
    }
    if (m_large_thumbnail_url_isSet) {
        obj.insert(QString("large_thumbnail_url"), ::OpenAPI::toJsonValue(m_large_thumbnail_url));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_primary_collection.size() > 0) {
        obj.insert(QString("primary_collection"), ::OpenAPI::toJsonValue(m_primary_collection));
    }
    if (m_rights_isSet) {
        obj.insert(QString("rights"), ::OpenAPI::toJsonValue(m_rights));
    }
    if (m_rights_url.size() > 0) {
        obj.insert(QString("rights_url"), ::OpenAPI::toJsonValue(m_rights_url));
    }
    if (m_source_url_isSet) {
        obj.insert(QString("source_url"), ::OpenAPI::toJsonValue(m_source_url));
    }
    if (m_subject.size() > 0) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_thumbnail_url_isSet) {
        obj.insert(QString("thumbnail_url"), ::OpenAPI::toJsonValue(m_thumbnail_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_usage.size() > 0) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    return obj;
}

QList<QString> OAIRecord::getCategory() const {
    return m_category;
}
void OAIRecord::setCategory(const QList<QString> &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIRecord::is_category_Set() const{
    return m_category_isSet;
}

bool OAIRecord::is_category_Valid() const{
    return m_category_isValid;
}

QList<QString> OAIRecord::getCollection() const {
    return m_collection;
}
void OAIRecord::setCollection(const QList<QString> &collection) {
    m_collection = collection;
    m_collection_isSet = true;
}

bool OAIRecord::is_collection_Set() const{
    return m_collection_isSet;
}

bool OAIRecord::is_collection_Valid() const{
    return m_collection_isValid;
}

QList<QString> OAIRecord::getCollectionTitle() const {
    return m_collection_title;
}
void OAIRecord::setCollectionTitle(const QList<QString> &collection_title) {
    m_collection_title = collection_title;
    m_collection_title_isSet = true;
}

bool OAIRecord::is_collection_title_Set() const{
    return m_collection_title_isSet;
}

bool OAIRecord::is_collection_title_Valid() const{
    return m_collection_title_isValid;
}

QList<QString> OAIRecord::getContentPartner() const {
    return m_content_partner;
}
void OAIRecord::setContentPartner(const QList<QString> &content_partner) {
    m_content_partner = content_partner;
    m_content_partner_isSet = true;
}

bool OAIRecord::is_content_partner_Set() const{
    return m_content_partner_isSet;
}

bool OAIRecord::is_content_partner_Valid() const{
    return m_content_partner_isValid;
}

QList<QString> OAIRecord::getCopyright() const {
    return m_copyright;
}
void OAIRecord::setCopyright(const QList<QString> &copyright) {
    m_copyright = copyright;
    m_copyright_isSet = true;
}

bool OAIRecord::is_copyright_Set() const{
    return m_copyright_isSet;
}

bool OAIRecord::is_copyright_Valid() const{
    return m_copyright_isValid;
}

QDateTime OAIRecord::getCreatedAt() const {
    return m_created_at;
}
void OAIRecord::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIRecord::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIRecord::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<QString> OAIRecord::getCreator() const {
    return m_creator;
}
void OAIRecord::setCreator(const QList<QString> &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAIRecord::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAIRecord::is_creator_Valid() const{
    return m_creator_isValid;
}

QList<QString> OAIRecord::getDate() const {
    return m_date;
}
void OAIRecord::setDate(const QList<QString> &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIRecord::is_date_Set() const{
    return m_date_isSet;
}

bool OAIRecord::is_date_Valid() const{
    return m_date_isValid;
}

QList<QString> OAIRecord::getDcIdentifier() const {
    return m_dc_identifier;
}
void OAIRecord::setDcIdentifier(const QList<QString> &dc_identifier) {
    m_dc_identifier = dc_identifier;
    m_dc_identifier_isSet = true;
}

bool OAIRecord::is_dc_identifier_Set() const{
    return m_dc_identifier_isSet;
}

bool OAIRecord::is_dc_identifier_Valid() const{
    return m_dc_identifier_isValid;
}

QString OAIRecord::getDescription() const {
    return m_description;
}
void OAIRecord::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRecord::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRecord::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRecord::getDisplayCollection() const {
    return m_display_collection;
}
void OAIRecord::setDisplayCollection(const QString &display_collection) {
    m_display_collection = display_collection;
    m_display_collection_isSet = true;
}

bool OAIRecord::is_display_collection_Set() const{
    return m_display_collection_isSet;
}

bool OAIRecord::is_display_collection_Valid() const{
    return m_display_collection_isValid;
}

QString OAIRecord::getDisplayContentPartner() const {
    return m_display_content_partner;
}
void OAIRecord::setDisplayContentPartner(const QString &display_content_partner) {
    m_display_content_partner = display_content_partner;
    m_display_content_partner_isSet = true;
}

bool OAIRecord::is_display_content_partner_Set() const{
    return m_display_content_partner_isSet;
}

bool OAIRecord::is_display_content_partner_Valid() const{
    return m_display_content_partner_isValid;
}

QString OAIRecord::getDisplayDate() const {
    return m_display_date;
}
void OAIRecord::setDisplayDate(const QString &display_date) {
    m_display_date = display_date;
    m_display_date_isSet = true;
}

bool OAIRecord::is_display_date_Set() const{
    return m_display_date_isSet;
}

bool OAIRecord::is_display_date_Valid() const{
    return m_display_date_isValid;
}

qint32 OAIRecord::getId() const {
    return m_id;
}
void OAIRecord::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRecord::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRecord::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRecord::getLandingUrl() const {
    return m_landing_url;
}
void OAIRecord::setLandingUrl(const QString &landing_url) {
    m_landing_url = landing_url;
    m_landing_url_isSet = true;
}

bool OAIRecord::is_landing_url_Set() const{
    return m_landing_url_isSet;
}

bool OAIRecord::is_landing_url_Valid() const{
    return m_landing_url_isValid;
}

QString OAIRecord::getLargeThumbnailUrl() const {
    return m_large_thumbnail_url;
}
void OAIRecord::setLargeThumbnailUrl(const QString &large_thumbnail_url) {
    m_large_thumbnail_url = large_thumbnail_url;
    m_large_thumbnail_url_isSet = true;
}

bool OAIRecord::is_large_thumbnail_url_Set() const{
    return m_large_thumbnail_url_isSet;
}

bool OAIRecord::is_large_thumbnail_url_Valid() const{
    return m_large_thumbnail_url_isValid;
}

QList<OAIRecord_locations_inner> OAIRecord::getLocations() const {
    return m_locations;
}
void OAIRecord::setLocations(const QList<OAIRecord_locations_inner> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIRecord::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIRecord::is_locations_Valid() const{
    return m_locations_isValid;
}

QList<QString> OAIRecord::getPrimaryCollection() const {
    return m_primary_collection;
}
void OAIRecord::setPrimaryCollection(const QList<QString> &primary_collection) {
    m_primary_collection = primary_collection;
    m_primary_collection_isSet = true;
}

bool OAIRecord::is_primary_collection_Set() const{
    return m_primary_collection_isSet;
}

bool OAIRecord::is_primary_collection_Valid() const{
    return m_primary_collection_isValid;
}

QString OAIRecord::getRights() const {
    return m_rights;
}
void OAIRecord::setRights(const QString &rights) {
    m_rights = rights;
    m_rights_isSet = true;
}

bool OAIRecord::is_rights_Set() const{
    return m_rights_isSet;
}

bool OAIRecord::is_rights_Valid() const{
    return m_rights_isValid;
}

QList<QString> OAIRecord::getRightsUrl() const {
    return m_rights_url;
}
void OAIRecord::setRightsUrl(const QList<QString> &rights_url) {
    m_rights_url = rights_url;
    m_rights_url_isSet = true;
}

bool OAIRecord::is_rights_url_Set() const{
    return m_rights_url_isSet;
}

bool OAIRecord::is_rights_url_Valid() const{
    return m_rights_url_isValid;
}

QString OAIRecord::getSourceUrl() const {
    return m_source_url;
}
void OAIRecord::setSourceUrl(const QString &source_url) {
    m_source_url = source_url;
    m_source_url_isSet = true;
}

bool OAIRecord::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAIRecord::is_source_url_Valid() const{
    return m_source_url_isValid;
}

QList<QString> OAIRecord::getSubject() const {
    return m_subject;
}
void OAIRecord::setSubject(const QList<QString> &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIRecord::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIRecord::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIRecord::getThumbnailUrl() const {
    return m_thumbnail_url;
}
void OAIRecord::setThumbnailUrl(const QString &thumbnail_url) {
    m_thumbnail_url = thumbnail_url;
    m_thumbnail_url_isSet = true;
}

bool OAIRecord::is_thumbnail_url_Set() const{
    return m_thumbnail_url_isSet;
}

bool OAIRecord::is_thumbnail_url_Valid() const{
    return m_thumbnail_url_isValid;
}

QString OAIRecord::getTitle() const {
    return m_title;
}
void OAIRecord::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIRecord::is_title_Set() const{
    return m_title_isSet;
}

bool OAIRecord::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIRecord::getUpdatedAt() const {
    return m_updated_at;
}
void OAIRecord::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIRecord::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIRecord::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QList<QString> OAIRecord::getUsage() const {
    return m_usage;
}
void OAIRecord::setUsage(const QList<QString> &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIRecord::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIRecord::is_usage_Valid() const{
    return m_usage_isValid;
}

bool OAIRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_title.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_partner.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_copyright.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dc_identifier.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_collection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_content_partner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_landing_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_collection.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rights_url.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
