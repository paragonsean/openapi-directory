/**
 * DigitalNZ API
 * OpenAPI specification of DigitalNZ's Record API.   For more information about the API see [digitalnz.org/developers](https://digitalnz.org/developers).   To learn more about the metadata/fields used in the API see the [Metadata Dictionary](https://docs.google.com/document/pub?id=1Z3I_ckQWjnQQ4SzpORbClcIXUheO-Jd4jt-oZFuMcoQ).   To get a sense of what content is available via the API take a look at the search feature on the [DigitalNZ website](https://digitalnz.org/records?text=all%20sorts&tab=Images).   The [terms of use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) specify how developers can use the DigitalNZ API. 
 *
 * The version of the OpenAPI document: 3
 * Contact: develop@digitalnz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAPICallsApi_H
#define OAI_OAIAPICallsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include "OAIRecord.h"
#include "OAI_records__format__get_200_response.h"
#include "OAI_records__record_id__more_like_this__format__get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAPICallsApi : public QObject {
    Q_OBJECT

public:
    OAIAPICallsApi(const int timeOut = 0);
    ~OAIAPICallsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  format QString [required]
    * @param[in]  authentication_token QString [optional]
    * @param[in]  text QString [optional]
    * @param[in]  and_category QString [optional]
    * @param[in]  and_content_partner QString [optional]
    * @param[in]  and_primary_collection QString [optional]
    * @param[in]  and_collection QString [optional]
    * @param[in]  and_usage QString [optional]
    * @param[in]  and_subject QString [optional]
    * @param[in]  and_dc_type QString [optional]
    * @param[in]  and_format QString [optional]
    * @param[in]  and_placename QString [optional]
    * @param[in]  and_creator QString [optional]
    * @param[in]  and_title QString [optional]
    * @param[in]  and_date QString [optional]
    * @param[in]  and_year QString [optional]
    * @param[in]  and_decade QString [optional]
    * @param[in]  and_century QString [optional]
    * @param[in]  without_filter_field QString [optional]
    * @param[in]  and_or_filter_field QString [optional]
    * @param[in]  and_is_commercial_use bool [optional]
    * @param[in]  and_has_large_thumbnail_url QString [optional]
    * @param[in]  and_has_lat_lng bool [optional]
    * @param[in]  geo_bbox QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  facets QList<QString> [optional]
    * @param[in]  facets_page qint32 [optional]
    * @param[in]  facets_per_page qint32 [optional]
    * @param[in]  exclude_filters_from_facets bool [optional]
    */
    virtual void recordsFormatGet(const QString &format, const ::OpenAPI::OptionalParam<QString> &authentication_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &and_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &and_content_partner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &and_primary_collection = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &and_collection = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &and_usage = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &and_subject = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &and_dc_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &and_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &and_placename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &and_creator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &and_title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &and_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &and_year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &and_decade = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &and_century = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &without_filter_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &and_or_filter_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &and_is_commercial_use = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &and_has_large_thumbnail_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &and_has_lat_lng = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &geo_bbox = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &facets = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &facets_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &facets_per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &exclude_filters_from_facets = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  record_id qint32 [required]
    * @param[in]  format QString [required]
    * @param[in]  authentication_token QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void recordsRecordIdFormatGet(const qint32 &record_id, const QString &format, const ::OpenAPI::OptionalParam<QString> &authentication_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  record_id qint32 [required]
    * @param[in]  format QString [required]
    * @param[in]  authentication_token QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  mlt_fields QString [optional]
    * @param[in]  filtering QString [optional]
    */
    virtual void recordsRecordIdMoreLikeThisFormatGet(const qint32 &record_id, const QString &format, const ::OpenAPI::OptionalParam<QString> &authentication_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mlt_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filtering = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void recordsFormatGetCallback(OAIHttpRequestWorker *worker);
    void recordsRecordIdFormatGetCallback(OAIHttpRequestWorker *worker);
    void recordsRecordIdMoreLikeThisFormatGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void recordsFormatGetSignal(OAI_records__format__get_200_response summary);
    void recordsRecordIdFormatGetSignal(OAIRecord summary);
    void recordsRecordIdMoreLikeThisFormatGetSignal(OAI_records__record_id__more_like_this__format__get_200_response summary);


    void recordsFormatGetSignalFull(OAIHttpRequestWorker *worker, OAI_records__format__get_200_response summary);
    void recordsRecordIdFormatGetSignalFull(OAIHttpRequestWorker *worker, OAIRecord summary);
    void recordsRecordIdMoreLikeThisFormatGetSignalFull(OAIHttpRequestWorker *worker, OAI_records__record_id__more_like_this__format__get_200_response summary);

    Q_DECL_DEPRECATED_X("Use recordsFormatGetSignalError() instead")
    void recordsFormatGetSignalE(OAI_records__format__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recordsFormatGetSignalError(OAI_records__format__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recordsRecordIdFormatGetSignalError() instead")
    void recordsRecordIdFormatGetSignalE(OAIRecord summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recordsRecordIdFormatGetSignalError(OAIRecord summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recordsRecordIdMoreLikeThisFormatGetSignalError() instead")
    void recordsRecordIdMoreLikeThisFormatGetSignalE(OAI_records__record_id__more_like_this__format__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recordsRecordIdMoreLikeThisFormatGetSignalError(OAI_records__record_id__more_like_this__format__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use recordsFormatGetSignalErrorFull() instead")
    void recordsFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recordsFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recordsRecordIdFormatGetSignalErrorFull() instead")
    void recordsRecordIdFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recordsRecordIdFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recordsRecordIdMoreLikeThisFormatGetSignalErrorFull() instead")
    void recordsRecordIdMoreLikeThisFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recordsRecordIdMoreLikeThisFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
