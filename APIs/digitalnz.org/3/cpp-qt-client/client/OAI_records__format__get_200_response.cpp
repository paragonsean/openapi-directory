/**
 * DigitalNZ API
 * OpenAPI specification of DigitalNZ's Record API.   For more information about the API see [digitalnz.org/developers](https://digitalnz.org/developers).   To learn more about the metadata/fields used in the API see the [Metadata Dictionary](https://docs.google.com/document/pub?id=1Z3I_ckQWjnQQ4SzpORbClcIXUheO-Jd4jt-oZFuMcoQ).   To get a sense of what content is available via the API take a look at the search feature on the [DigitalNZ website](https://digitalnz.org/records?text=all%20sorts&tab=Images).   The [terms of use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) specify how developers can use the DigitalNZ API. 
 *
 * The version of the OpenAPI document: 3
 * Contact: develop@digitalnz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_records__format__get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_records__format__get_200_response::OAI_records__format__get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_records__format__get_200_response::OAI_records__format__get_200_response() {
    this->initializeModel();
}

OAI_records__format__get_200_response::~OAI_records__format__get_200_response() {}

void OAI_records__format__get_200_response::initializeModel() {

    m_facets_isSet = false;
    m_facets_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_per_page_isSet = false;
    m_per_page_isValid = false;

    m_records_isSet = false;
    m_records_isValid = false;

    m_request_url_isSet = false;
    m_request_url_isValid = false;

    m_result_count_isSet = false;
    m_result_count_isValid = false;
}

void OAI_records__format__get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_records__format__get_200_response::fromJsonObject(QJsonObject json) {

    if(json["facets"].isObject()){
        auto varmap = json["facets"].toObject().toVariantMap();
        m_facets_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QMap<QString, qint32> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_facets_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_facets_isSet &= !jval.isNull() && m_facets_isValid;
                m_facets.insert(m_facets.end(), val, item);
            }
        }
    }

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_per_page_isValid = ::OpenAPI::fromJsonValue(m_per_page, json[QString("per_page")]);
    m_per_page_isSet = !json[QString("per_page")].isNull() && m_per_page_isValid;

    m_records_isValid = ::OpenAPI::fromJsonValue(m_records, json[QString("records")]);
    m_records_isSet = !json[QString("records")].isNull() && m_records_isValid;

    m_request_url_isValid = ::OpenAPI::fromJsonValue(m_request_url, json[QString("request_url")]);
    m_request_url_isSet = !json[QString("request_url")].isNull() && m_request_url_isValid;

    m_result_count_isValid = ::OpenAPI::fromJsonValue(m_result_count, json[QString("result_count")]);
    m_result_count_isSet = !json[QString("result_count")].isNull() && m_result_count_isValid;
}

QString OAI_records__format__get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_records__format__get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_facets.size() > 0) {
        
        obj.insert(QString("facets"), toJsonValue(m_facets));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_per_page_isSet) {
        obj.insert(QString("per_page"), ::OpenAPI::toJsonValue(m_per_page));
    }
    if (m_records.size() > 0) {
        obj.insert(QString("records"), ::OpenAPI::toJsonValue(m_records));
    }
    if (m_request_url_isSet) {
        obj.insert(QString("request_url"), ::OpenAPI::toJsonValue(m_request_url));
    }
    if (m_result_count_isSet) {
        obj.insert(QString("result_count"), ::OpenAPI::toJsonValue(m_result_count));
    }
    return obj;
}

QMap<QString, QMap<QString, qint32>> OAI_records__format__get_200_response::getFacets() const {
    return m_facets;
}
void OAI_records__format__get_200_response::setFacets(const QMap<QString, QMap<QString, qint32>> &facets) {
    m_facets = facets;
    m_facets_isSet = true;
}

bool OAI_records__format__get_200_response::is_facets_Set() const{
    return m_facets_isSet;
}

bool OAI_records__format__get_200_response::is_facets_Valid() const{
    return m_facets_isValid;
}

qint32 OAI_records__format__get_200_response::getPage() const {
    return m_page;
}
void OAI_records__format__get_200_response::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAI_records__format__get_200_response::is_page_Set() const{
    return m_page_isSet;
}

bool OAI_records__format__get_200_response::is_page_Valid() const{
    return m_page_isValid;
}

qint32 OAI_records__format__get_200_response::getPerPage() const {
    return m_per_page;
}
void OAI_records__format__get_200_response::setPerPage(const qint32 &per_page) {
    m_per_page = per_page;
    m_per_page_isSet = true;
}

bool OAI_records__format__get_200_response::is_per_page_Set() const{
    return m_per_page_isSet;
}

bool OAI_records__format__get_200_response::is_per_page_Valid() const{
    return m_per_page_isValid;
}

QList<OAIRecord> OAI_records__format__get_200_response::getRecords() const {
    return m_records;
}
void OAI_records__format__get_200_response::setRecords(const QList<OAIRecord> &records) {
    m_records = records;
    m_records_isSet = true;
}

bool OAI_records__format__get_200_response::is_records_Set() const{
    return m_records_isSet;
}

bool OAI_records__format__get_200_response::is_records_Valid() const{
    return m_records_isValid;
}

QString OAI_records__format__get_200_response::getRequestUrl() const {
    return m_request_url;
}
void OAI_records__format__get_200_response::setRequestUrl(const QString &request_url) {
    m_request_url = request_url;
    m_request_url_isSet = true;
}

bool OAI_records__format__get_200_response::is_request_url_Set() const{
    return m_request_url_isSet;
}

bool OAI_records__format__get_200_response::is_request_url_Valid() const{
    return m_request_url_isValid;
}

qint32 OAI_records__format__get_200_response::getResultCount() const {
    return m_result_count;
}
void OAI_records__format__get_200_response::setResultCount(const qint32 &result_count) {
    m_result_count = result_count;
    m_result_count_isSet = true;
}

bool OAI_records__format__get_200_response::is_result_count_Set() const{
    return m_result_count_isSet;
}

bool OAI_records__format__get_200_response::is_result_count_Valid() const{
    return m_result_count_isValid;
}

bool OAI_records__format__get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_facets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_records.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_records__format__get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
