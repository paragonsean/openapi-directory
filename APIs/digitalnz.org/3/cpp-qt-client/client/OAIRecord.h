/**
 * DigitalNZ API
 * OpenAPI specification of DigitalNZ's Record API.   For more information about the API see [digitalnz.org/developers](https://digitalnz.org/developers).   To learn more about the metadata/fields used in the API see the [Metadata Dictionary](https://docs.google.com/document/pub?id=1Z3I_ckQWjnQQ4SzpORbClcIXUheO-Jd4jt-oZFuMcoQ).   To get a sense of what content is available via the API take a look at the search feature on the [DigitalNZ website](https://digitalnz.org/records?text=all%20sorts&tab=Images).   The [terms of use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) specify how developers can use the DigitalNZ API. 
 *
 * The version of the OpenAPI document: 3
 * Contact: develop@digitalnz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRecord.h
 *
 * *NOTE:* There are a lot of fields that are very rarely used in DigitalNZ. For instance there are custom built fields that are only relevant, and only found on specific collections. The schema below focuses on the most common / well populated fields and does not show every possible field available for a single record.  
 */

#ifndef OAIRecord_H
#define OAIRecord_H

#include <QJsonObject>

#include "OAIRecord_locations_inner.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRecord_locations_inner;

class OAIRecord : public OAIObject {
public:
    OAIRecord();
    OAIRecord(QString json);
    ~OAIRecord() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getCategory() const;
    void setCategory(const QList<QString> &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    QList<QString> getCollection() const;
    void setCollection(const QList<QString> &collection);
    bool is_collection_Set() const;
    bool is_collection_Valid() const;

    QList<QString> getCollectionTitle() const;
    void setCollectionTitle(const QList<QString> &collection_title);
    bool is_collection_title_Set() const;
    bool is_collection_title_Valid() const;

    QList<QString> getContentPartner() const;
    void setContentPartner(const QList<QString> &content_partner);
    bool is_content_partner_Set() const;
    bool is_content_partner_Valid() const;

    QList<QString> getCopyright() const;
    void setCopyright(const QList<QString> &copyright);
    bool is_copyright_Set() const;
    bool is_copyright_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QList<QString> getCreator() const;
    void setCreator(const QList<QString> &creator);
    bool is_creator_Set() const;
    bool is_creator_Valid() const;

    QList<QString> getDate() const;
    void setDate(const QList<QString> &date);
    bool is_date_Set() const;
    bool is_date_Valid() const;

    QList<QString> getDcIdentifier() const;
    void setDcIdentifier(const QList<QString> &dc_identifier);
    bool is_dc_identifier_Set() const;
    bool is_dc_identifier_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDisplayCollection() const;
    void setDisplayCollection(const QString &display_collection);
    bool is_display_collection_Set() const;
    bool is_display_collection_Valid() const;

    QString getDisplayContentPartner() const;
    void setDisplayContentPartner(const QString &display_content_partner);
    bool is_display_content_partner_Set() const;
    bool is_display_content_partner_Valid() const;

    QString getDisplayDate() const;
    void setDisplayDate(const QString &display_date);
    bool is_display_date_Set() const;
    bool is_display_date_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLandingUrl() const;
    void setLandingUrl(const QString &landing_url);
    bool is_landing_url_Set() const;
    bool is_landing_url_Valid() const;

    QString getLargeThumbnailUrl() const;
    void setLargeThumbnailUrl(const QString &large_thumbnail_url);
    bool is_large_thumbnail_url_Set() const;
    bool is_large_thumbnail_url_Valid() const;

    QList<OAIRecord_locations_inner> getLocations() const;
    void setLocations(const QList<OAIRecord_locations_inner> &locations);
    bool is_locations_Set() const;
    bool is_locations_Valid() const;

    QList<QString> getPrimaryCollection() const;
    void setPrimaryCollection(const QList<QString> &primary_collection);
    bool is_primary_collection_Set() const;
    bool is_primary_collection_Valid() const;

    QString getRights() const;
    void setRights(const QString &rights);
    bool is_rights_Set() const;
    bool is_rights_Valid() const;

    QList<QString> getRightsUrl() const;
    void setRightsUrl(const QList<QString> &rights_url);
    bool is_rights_url_Set() const;
    bool is_rights_url_Valid() const;

    QString getSourceUrl() const;
    void setSourceUrl(const QString &source_url);
    bool is_source_url_Set() const;
    bool is_source_url_Valid() const;

    QList<QString> getSubject() const;
    void setSubject(const QList<QString> &subject);
    bool is_subject_Set() const;
    bool is_subject_Valid() const;

    QString getThumbnailUrl() const;
    void setThumbnailUrl(const QString &thumbnail_url);
    bool is_thumbnail_url_Set() const;
    bool is_thumbnail_url_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QList<QString> getUsage() const;
    void setUsage(const QList<QString> &usage);
    bool is_usage_Set() const;
    bool is_usage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    QList<QString> m_collection;
    bool m_collection_isSet;
    bool m_collection_isValid;

    QList<QString> m_collection_title;
    bool m_collection_title_isSet;
    bool m_collection_title_isValid;

    QList<QString> m_content_partner;
    bool m_content_partner_isSet;
    bool m_content_partner_isValid;

    QList<QString> m_copyright;
    bool m_copyright_isSet;
    bool m_copyright_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QList<QString> m_creator;
    bool m_creator_isSet;
    bool m_creator_isValid;

    QList<QString> m_date;
    bool m_date_isSet;
    bool m_date_isValid;

    QList<QString> m_dc_identifier;
    bool m_dc_identifier_isSet;
    bool m_dc_identifier_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_display_collection;
    bool m_display_collection_isSet;
    bool m_display_collection_isValid;

    QString m_display_content_partner;
    bool m_display_content_partner_isSet;
    bool m_display_content_partner_isValid;

    QString m_display_date;
    bool m_display_date_isSet;
    bool m_display_date_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_landing_url;
    bool m_landing_url_isSet;
    bool m_landing_url_isValid;

    QString m_large_thumbnail_url;
    bool m_large_thumbnail_url_isSet;
    bool m_large_thumbnail_url_isValid;

    QList<OAIRecord_locations_inner> m_locations;
    bool m_locations_isSet;
    bool m_locations_isValid;

    QList<QString> m_primary_collection;
    bool m_primary_collection_isSet;
    bool m_primary_collection_isValid;

    QString m_rights;
    bool m_rights_isSet;
    bool m_rights_isValid;

    QList<QString> m_rights_url;
    bool m_rights_url_isSet;
    bool m_rights_url_isValid;

    QString m_source_url;
    bool m_source_url_isSet;
    bool m_source_url_isValid;

    QList<QString> m_subject;
    bool m_subject_isSet;
    bool m_subject_isValid;

    QString m_thumbnail_url;
    bool m_thumbnail_url_isSet;
    bool m_thumbnail_url_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QList<QString> m_usage;
    bool m_usage_isSet;
    bool m_usage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRecord)

#endif // OAIRecord_H
