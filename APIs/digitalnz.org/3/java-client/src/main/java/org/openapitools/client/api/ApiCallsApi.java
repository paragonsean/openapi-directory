/*
 * DigitalNZ API
 * OpenAPI specification of DigitalNZ's Record API.   For more information about the API see [digitalnz.org/developers](https://digitalnz.org/developers).   To learn more about the metadata/fields used in the API see the [Metadata Dictionary](https://docs.google.com/document/pub?id=1Z3I_ckQWjnQQ4SzpORbClcIXUheO-Jd4jt-oZFuMcoQ).   To get a sense of what content is available via the API take a look at the search feature on the [DigitalNZ website](https://digitalnz.org/records?text=all%20sorts&tab=Images).   The [terms of use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) specify how developers can use the DigitalNZ API. 
 *
 * The version of the OpenAPI document: 3
 * Contact: develop@digitalnz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Record;
import org.openapitools.client.model.RecordsFormatGet200Response;
import org.openapitools.client.model.RecordsRecordIdMoreLikeThisFormatGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiCallsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApiCallsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiCallsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for recordsFormatGet
     * @param format Note - There is a small difference with some field names in the response between JSON and XML.   When a field name has more than one word, JSON format will separate the words with an underscore, eg. \&quot;content_partner\&quot;, whereas XML uses a hyphenated naming convention, eg. \&quot;content-partner\&quot;.  (required)
     * @param authenticationToken The DigitalNZ API no longer requires a key to access public content. However, if you plan on using the API regularly, expect to be a high volume consumer or are planning on creating an application, we encourage you to use an API key so that we can: - provide targeted help and support - increase your query throughput (by negotiation) - notify you directly of changes to the API - gather usage metrics to help improve the service    API requests that do not pass a valid API key/token are treated as unauthenticated. A maximum rate limit applies across all unauthenticated requests. This rate limit is in place to protect the service from overuse, resulting in unsustainable costs, or potential attack.  **Getting an API key**   [Create a DigitalNZ account](https://digitalnz.org/sign_up), log in and select \&quot;[my API key](https://digitalnz.org/api_keys/edit)\&quot; from your username drop-down menu (on the right hand side)&#39;. The key is a long string of jumbled letters and numbers (hash) that is unique to you. You are required to keep the key secret. (Refer to the [Developer API Terms of Use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) for more information).  **Using an API key**   When you make a call to the API you&#39;ll need to pass the key in a custom HTTP header: ‘Authentication-Token’. For example, a query using the ‘curl’ command might look like the following (where ‘{YOUR_API_KEY}’ is replaced with a valid API key):  &#x60;curl -H \&quot;Authentication-Token:{YOUR_API_KEY}\&quot; http://api.digitalnz.org/v3/records.json?text&#x3D;kiwi&#x60;  (optional)
     * @param text This field enables queries based on one or more search terms and provides the functionality of the main search box on [digitalnz.org](https://digitalnz.org). Search terms can be combined with boolean operators (AND, OR).   A minus sign excludes certain terms, eg. \&quot;-horse\&quot;.   An asterisk (\\*) acts as a wildcard, eg. \&quot;ted*\&quot;.   Multiple search terms are combined with an AND by default.   Examples: &#x60;\&quot;moustache\&quot;&#x60;, &#x60;\&quot;Wanganui OR Whanganui\&quot;&#x60;,  &#x60;\&quot;-paperspast\&quot;&#x60;, &#x60;\&quot;ted*\&quot;&#x60;  (optional)
     * @param andCategory These are the same categories that are used across the tabs in [digitalnz.org](https://digitalnz.org/records?text&#x3D;&amp;tab&#x3D;Videos) (optional)
     * @param andContentPartner Allows filtering for records from a particular Content Partner.   Examples: &#x60;\&quot;Ministry for Culture and Heritage\&quot;&#x60; &#x60;\&quot;Trove\&quot;&#x60; &#x60;\&quot;V.C. Browne &amp; Son\&quot;&#x60;    *Tip* - To see a list of Content Partners available for filtering use the *facets* parameter, eg. *\&quot;&amp;facets&#x3D;content_partner\&quot;*.    (optional)
     * @param andPrimaryCollection Allows filtering for records from a particular *primary_collection*.   Examples: &#x60;\&quot;Puke Ariki\&quot;&#x60; &#x60;\&quot;NZHistory\&quot;&#x60; &#x60;\&quot;TAPUHI\&quot;&#x60;      *Tip* - To see a list of Primary_Collections available for filtering use the *facets* parameter, eg. *\&quot;&amp;facets&#x3D;primary_collection\&quot;*.     (optional)
     * @param andCollection Allows filtering for records from a particular Collection. Collections can be thought of as sub-collections or groupings under Primary_Collections.   Examples: &#x60;\&quot;Music 101\&quot;&#x60; &#x60;\&quot;Mollusks\&quot;&#x60; &#x60;\&quot;Wairarapa Daily Times\&quot;&#x60;    *Tip* - To see a list of Collections available for filtering use the *facets* parameter, eg. *\&quot;&amp;facets&#x3D;collection\&quot;*.   (optional)
     * @param andUsage  (optional)
     * @param andSubject Examples: &#x60;\&quot;Cats\&quot;&#x60; &#x60;\&quot;Weddings\&quot;&#x60; &#x60;\&quot;climb*\&quot;&#x60;  (optional)
     * @param andDcType Examples: &#x60;\&quot;Conference item\&quot;&#x60; &#x60;\&quot;Magazines\&quot;&#x60;  (optional)
     * @param andFormat Examples: &#x60;\&quot;Photolithographs\&quot;&#x60; &#x60;\&quot;Glass*\&quot;&#x60;  (optional)
     * @param andPlacename This field can be used for text-based location search. For a more advanced coordinate-based search, see the \&quot;geo_bbox\&quot; field below.   Examples: &#x60;\&quot;Scott Base\&quot;&#x60; &#x60;\&quot;Wainuiomata\&quot;&#x60; &#x60;\&quot;castle*\&quot;&#x60;  (optional)
     * @param andCreator Examples: &#x60;\&quot;Revelle Jackson\&quot;&#x60; &#x60;\&quot;Nicholas Chevalier\&quot;&#x60; &#x60;\&quot;Rita Angus\&quot;&#x60;  (optional)
     * @param andTitle Examples: &#x60;\&quot;Pukeko\&quot;&#x60; &#x60;\&quot;Club\&quot;&#x60; &#x60;\&quot;Break*\&quot;&#x60;\&quot;  (optional)
     * @param andDate This field can be useful for querying and sorting (see the &#39;sort&#39; param further down). But it should be noted that, as with some other fields, **not all records have date metadata associated**. There is good coverage of date metadata within certain collections, but there are plenty with no date information at all. So, if you query for records from a specific date you may get some matching results, but might also be missing other potentially relevant records that don&#39;t have date metadata available.   Example: &#x60;\&quot;1970-12-25\&quot;&#x60;  *Tip* - There is a related (but not searchable) field that is returned on each record (where available), that often has a more human readable version of the date information, called &#39;display_date&#39;.  (optional)
     * @param andYear This field allows searching specifically by year. The metadata is derived from the same date information that is searchable and returned in the date field. It is possible to search across a range using syntax the following syntax &#x60;[{start year} TO {end year}]&#x60;.   Example: &#x60;\&quot;1893\&quot;&#x60; &#x60;\&quot;[1982 TO 1987]\&quot;&#x60;  (optional)
     * @param andDecade This field allows searching specifically by decade. The metadata is derived from the same date information that is searchable and returned in the date field.   Example: &#x60;\&quot;1850\&quot;&#x60; &#x60;\&quot;1990\&quot;&#x60;  (optional)
     * @param andCentury This field allows searching specifically by century. The metadata is derived from the same date information that is searchable and returned in the date field.   Example: &#x60;\&quot;1900\&quot;&#x60; &#x60;\&quot;2000\&quot;&#x60;  (optional)
     * @param withoutLeftCurlyBracketFilterFieldRightCurlyBracket All of the above &#x60;and[___][]&#x60; filters in this document are also able to be used with this syntax to exclude specific matches. For example to exclude Papers Past content &#x60;&amp;without[primary_collection]&#x3D;Papers+Past&#x60;  (optional)
     * @param andOrLeftCurlyBracketFilterFieldRightCurlyBracket All of the above &#x60;and[___][]&#x60; filters in this document are also able to be used with the &#x60;and[or][___][]&#x60; syntax to allow multi-select *OR* queries within one field.   Basic example:  - To filter your results to only those with a category or Audio or Videos:    &#x60;&amp;and[or][category][]&#x3D;Audio&amp;and[or][category][]&#x3D;Videos&#x60;     In order to combine *OR* filters across multiple fields the syntax needs to be nested as follows   Nested examples:   - To search for *(year is 2014 OR 2015) AND (primary_collection is TAPUHI OR Public Address)*    &#x60;&amp;and[or][year][]&#x3D;2015&amp;and[or][year][]&#x3D;2014&amp;and[and][or][primary_collection][]&#x3D;TAPUHI&amp;and[and][or][primary_collection][]&#x3D;Public+Address&#x60;    - To search for *(category is Images OR Video) AND (subject is cat OR cats)*    &#x60;&amp;and[or][category][]&#x3D;Images&amp;and[or][category][]&#x3D;Videos&amp;and[and][or][subject][]&#x3D;cat&amp;and[and][or][subject][]&#x3D;cats&#x60;    (optional)
     * @param andIsCommercialUse Some DigitalNZ partners offer their metadata for use in commercial applications. This content can be identified through the *is_commercial_use* flag. Only API results where the *is_commercial_use* field set to True can be used for commercial purposes. Check out the [terms of use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use#commercial_use_terms) for more information.  (optional)
     * @param andHasLargeThumbnailUrl Filters results to only those records that have an image available in the *large_thumbnail_url* field.   **Note:** There is an issue with this field where, in order to get results, it needs to be specified with \&quot;Y\&quot; or not specified at all.  (optional)
     * @param andHasLatLng Filters results to only those records that have latitude and longitude coordinates present in the metadata.    *Tip* - To see the location metadata you&#39;ll need to specifically request that field using the *fields* parameter - *\&quot;&amp;fields&#x3D;verbose,locations\&quot;*  as it is not part of the default, or verbose field sets.  (optional)
     * @param geoBbox A geographic bounding box scoping a search to a geographic region. Order of latitude-longitude coordinates is north, west, south, east.   For example, filtering the Wellington region would be *\&quot;&amp;geo_bbox&#x3D;-41,174,-42,175\&quot;*  (optional)
     * @param fields Comma-separated whitelist of fields to be returned. The syntax *\&quot;&amp;fields&#x3D;verbose\&quot;* can be used to return the bulk of the fields, or you can customise which fields you are interested in, eg. *\&quot;&amp;fields&#x3D;id,title,subject,collection,landing_url,locations\&quot;*.  (optional)
     * @param sort Used to control the order of the results in conjunction with the *direction* field.   - *syndication_date* - is the creation date of the record within DigitalNZ, ie. when DigitalNZ first harvested the record.   - *date* - is the date metadata (if present) associated with the record.        To sort the search results with newest records at the top use: \&quot;&amp;sort&#x3D;syndication_date&amp;direction&#x3D;desc\&quot;  (optional)
     * @param direction Used in conjunction with *sort* to order the results  - *asc* - Ascending, oldest first.  - *desc* - Descending, newest first.  (optional, default to asc)
     * @param page Specify which page of results to return. (optional, default to 1)
     * @param perPage The number of records to return per page of search results. (optional, default to 20)
     * @param facets Shows a breakdown of record counts for the specified facets based on the current result set. In the [DigitalNZ search interface](https://digitalnz.org/records) these facets are used to list the values filterable for each field. A comma-separated list will return multiple facets in one call.  (optional)
     * @param facetsPage This value specifies which page of facet results to return. Allowing pagination through large lists of facet values. (optional)
     * @param facetsPerPage The number of facets to return per page of facet results. (optional, default to 10)
     * @param excludeFiltersFromFacets This field can be used when filtering into some facets, to maintain the context of the wider facet values. A common use case is to allow the results of a search to be filtered down into a specific category (eg Audio), while still showing the other possible filter options as facet counts (eg. Images, Audio, Video, etc). Setting this to &#39;true&#39; will not effect the search results returned but will ignore all search filters (eg. \&quot;and[category]&#x3D;Audio\&quot;) when calculating the facet counts.   (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect field specified in the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API Key (Authentication-Token) is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordsFormatGetCall(String format, String authenticationToken, String text, String andCategory, String andContentPartner, String andPrimaryCollection, String andCollection, String andUsage, String andSubject, String andDcType, String andFormat, String andPlacename, String andCreator, String andTitle, String andDate, String andYear, String andDecade, String andCentury, String withoutLeftCurlyBracketFilterFieldRightCurlyBracket, String andOrLeftCurlyBracketFilterFieldRightCurlyBracket, Boolean andIsCommercialUse, String andHasLargeThumbnailUrl, Boolean andHasLatLng, String geoBbox, String fields, String sort, String direction, Integer page, Integer perPage, List<String> facets, Integer facetsPage, Integer facetsPerPage, Boolean excludeFiltersFromFacets, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/records.{format}"
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (andCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("and[category][]", andCategory));
        }

        if (andContentPartner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("and[content_partner][]", andContentPartner));
        }

        if (andPrimaryCollection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("and[primary_collection][]", andPrimaryCollection));
        }

        if (andCollection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("and[collection][]", andCollection));
        }

        if (andUsage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("and[usage][]", andUsage));
        }

        if (andSubject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("and[subject][]", andSubject));
        }

        if (andDcType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("and[dc_type][]", andDcType));
        }

        if (andFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("and[format][]", andFormat));
        }

        if (andPlacename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("and[placename][]", andPlacename));
        }

        if (andCreator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("and[creator][]", andCreator));
        }

        if (andTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("and[title][]", andTitle));
        }

        if (andDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("and[date]", andDate));
        }

        if (andYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("and[year]", andYear));
        }

        if (andDecade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("and[decade]", andDecade));
        }

        if (andCentury != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("and[century]", andCentury));
        }

        if (withoutLeftCurlyBracketFilterFieldRightCurlyBracket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("without[{filter_field}]", withoutLeftCurlyBracketFilterFieldRightCurlyBracket));
        }

        if (andOrLeftCurlyBracketFilterFieldRightCurlyBracket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("and[or][{filter_field}][]", andOrLeftCurlyBracketFilterFieldRightCurlyBracket));
        }

        if (andIsCommercialUse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("and[is_commercial_use]", andIsCommercialUse));
        }

        if (andHasLargeThumbnailUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("and[has_large_thumbnail_url]", andHasLargeThumbnailUrl));
        }

        if (andHasLatLng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("and[has_lat_lng]", andHasLatLng));
        }

        if (geoBbox != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geo_bbox", geoBbox));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (facets != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "facets", facets));
        }

        if (facetsPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets_page", facetsPage));
        }

        if (facetsPerPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets_per_page", facetsPerPage));
        }

        if (excludeFiltersFromFacets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_filters_from_facets", excludeFiltersFromFacets));
        }

        if (authenticationToken != null) {
            localVarHeaderParams.put("Authentication-Token", localVarApiClient.parameterToString(authenticationToken));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordsFormatGetValidateBeforeCall(String format, String authenticationToken, String text, String andCategory, String andContentPartner, String andPrimaryCollection, String andCollection, String andUsage, String andSubject, String andDcType, String andFormat, String andPlacename, String andCreator, String andTitle, String andDate, String andYear, String andDecade, String andCentury, String withoutLeftCurlyBracketFilterFieldRightCurlyBracket, String andOrLeftCurlyBracketFilterFieldRightCurlyBracket, Boolean andIsCommercialUse, String andHasLargeThumbnailUrl, Boolean andHasLatLng, String geoBbox, String fields, String sort, String direction, Integer page, Integer perPage, List<String> facets, Integer facetsPage, Integer facetsPerPage, Boolean excludeFiltersFromFacets, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling recordsFormatGet(Async)");
        }

        return recordsFormatGetCall(format, authenticationToken, text, andCategory, andContentPartner, andPrimaryCollection, andCollection, andUsage, andSubject, andDcType, andFormat, andPlacename, andCreator, andTitle, andDate, andYear, andDecade, andCentury, withoutLeftCurlyBracketFilterFieldRightCurlyBracket, andOrLeftCurlyBracketFilterFieldRightCurlyBracket, andIsCommercialUse, andHasLargeThumbnailUrl, andHasLatLng, geoBbox, fields, sort, direction, page, perPage, facets, facetsPage, facetsPerPage, excludeFiltersFromFacets, _callback);

    }

    /**
     * Run queries against DigitalNZ metadata search service.
     * This is the main search endpoint allowing queries against the records database.
     * @param format Note - There is a small difference with some field names in the response between JSON and XML.   When a field name has more than one word, JSON format will separate the words with an underscore, eg. \&quot;content_partner\&quot;, whereas XML uses a hyphenated naming convention, eg. \&quot;content-partner\&quot;.  (required)
     * @param authenticationToken The DigitalNZ API no longer requires a key to access public content. However, if you plan on using the API regularly, expect to be a high volume consumer or are planning on creating an application, we encourage you to use an API key so that we can: - provide targeted help and support - increase your query throughput (by negotiation) - notify you directly of changes to the API - gather usage metrics to help improve the service    API requests that do not pass a valid API key/token are treated as unauthenticated. A maximum rate limit applies across all unauthenticated requests. This rate limit is in place to protect the service from overuse, resulting in unsustainable costs, or potential attack.  **Getting an API key**   [Create a DigitalNZ account](https://digitalnz.org/sign_up), log in and select \&quot;[my API key](https://digitalnz.org/api_keys/edit)\&quot; from your username drop-down menu (on the right hand side)&#39;. The key is a long string of jumbled letters and numbers (hash) that is unique to you. You are required to keep the key secret. (Refer to the [Developer API Terms of Use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) for more information).  **Using an API key**   When you make a call to the API you&#39;ll need to pass the key in a custom HTTP header: ‘Authentication-Token’. For example, a query using the ‘curl’ command might look like the following (where ‘{YOUR_API_KEY}’ is replaced with a valid API key):  &#x60;curl -H \&quot;Authentication-Token:{YOUR_API_KEY}\&quot; http://api.digitalnz.org/v3/records.json?text&#x3D;kiwi&#x60;  (optional)
     * @param text This field enables queries based on one or more search terms and provides the functionality of the main search box on [digitalnz.org](https://digitalnz.org). Search terms can be combined with boolean operators (AND, OR).   A minus sign excludes certain terms, eg. \&quot;-horse\&quot;.   An asterisk (\\*) acts as a wildcard, eg. \&quot;ted*\&quot;.   Multiple search terms are combined with an AND by default.   Examples: &#x60;\&quot;moustache\&quot;&#x60;, &#x60;\&quot;Wanganui OR Whanganui\&quot;&#x60;,  &#x60;\&quot;-paperspast\&quot;&#x60;, &#x60;\&quot;ted*\&quot;&#x60;  (optional)
     * @param andCategory These are the same categories that are used across the tabs in [digitalnz.org](https://digitalnz.org/records?text&#x3D;&amp;tab&#x3D;Videos) (optional)
     * @param andContentPartner Allows filtering for records from a particular Content Partner.   Examples: &#x60;\&quot;Ministry for Culture and Heritage\&quot;&#x60; &#x60;\&quot;Trove\&quot;&#x60; &#x60;\&quot;V.C. Browne &amp; Son\&quot;&#x60;    *Tip* - To see a list of Content Partners available for filtering use the *facets* parameter, eg. *\&quot;&amp;facets&#x3D;content_partner\&quot;*.    (optional)
     * @param andPrimaryCollection Allows filtering for records from a particular *primary_collection*.   Examples: &#x60;\&quot;Puke Ariki\&quot;&#x60; &#x60;\&quot;NZHistory\&quot;&#x60; &#x60;\&quot;TAPUHI\&quot;&#x60;      *Tip* - To see a list of Primary_Collections available for filtering use the *facets* parameter, eg. *\&quot;&amp;facets&#x3D;primary_collection\&quot;*.     (optional)
     * @param andCollection Allows filtering for records from a particular Collection. Collections can be thought of as sub-collections or groupings under Primary_Collections.   Examples: &#x60;\&quot;Music 101\&quot;&#x60; &#x60;\&quot;Mollusks\&quot;&#x60; &#x60;\&quot;Wairarapa Daily Times\&quot;&#x60;    *Tip* - To see a list of Collections available for filtering use the *facets* parameter, eg. *\&quot;&amp;facets&#x3D;collection\&quot;*.   (optional)
     * @param andUsage  (optional)
     * @param andSubject Examples: &#x60;\&quot;Cats\&quot;&#x60; &#x60;\&quot;Weddings\&quot;&#x60; &#x60;\&quot;climb*\&quot;&#x60;  (optional)
     * @param andDcType Examples: &#x60;\&quot;Conference item\&quot;&#x60; &#x60;\&quot;Magazines\&quot;&#x60;  (optional)
     * @param andFormat Examples: &#x60;\&quot;Photolithographs\&quot;&#x60; &#x60;\&quot;Glass*\&quot;&#x60;  (optional)
     * @param andPlacename This field can be used for text-based location search. For a more advanced coordinate-based search, see the \&quot;geo_bbox\&quot; field below.   Examples: &#x60;\&quot;Scott Base\&quot;&#x60; &#x60;\&quot;Wainuiomata\&quot;&#x60; &#x60;\&quot;castle*\&quot;&#x60;  (optional)
     * @param andCreator Examples: &#x60;\&quot;Revelle Jackson\&quot;&#x60; &#x60;\&quot;Nicholas Chevalier\&quot;&#x60; &#x60;\&quot;Rita Angus\&quot;&#x60;  (optional)
     * @param andTitle Examples: &#x60;\&quot;Pukeko\&quot;&#x60; &#x60;\&quot;Club\&quot;&#x60; &#x60;\&quot;Break*\&quot;&#x60;\&quot;  (optional)
     * @param andDate This field can be useful for querying and sorting (see the &#39;sort&#39; param further down). But it should be noted that, as with some other fields, **not all records have date metadata associated**. There is good coverage of date metadata within certain collections, but there are plenty with no date information at all. So, if you query for records from a specific date you may get some matching results, but might also be missing other potentially relevant records that don&#39;t have date metadata available.   Example: &#x60;\&quot;1970-12-25\&quot;&#x60;  *Tip* - There is a related (but not searchable) field that is returned on each record (where available), that often has a more human readable version of the date information, called &#39;display_date&#39;.  (optional)
     * @param andYear This field allows searching specifically by year. The metadata is derived from the same date information that is searchable and returned in the date field. It is possible to search across a range using syntax the following syntax &#x60;[{start year} TO {end year}]&#x60;.   Example: &#x60;\&quot;1893\&quot;&#x60; &#x60;\&quot;[1982 TO 1987]\&quot;&#x60;  (optional)
     * @param andDecade This field allows searching specifically by decade. The metadata is derived from the same date information that is searchable and returned in the date field.   Example: &#x60;\&quot;1850\&quot;&#x60; &#x60;\&quot;1990\&quot;&#x60;  (optional)
     * @param andCentury This field allows searching specifically by century. The metadata is derived from the same date information that is searchable and returned in the date field.   Example: &#x60;\&quot;1900\&quot;&#x60; &#x60;\&quot;2000\&quot;&#x60;  (optional)
     * @param withoutLeftCurlyBracketFilterFieldRightCurlyBracket All of the above &#x60;and[___][]&#x60; filters in this document are also able to be used with this syntax to exclude specific matches. For example to exclude Papers Past content &#x60;&amp;without[primary_collection]&#x3D;Papers+Past&#x60;  (optional)
     * @param andOrLeftCurlyBracketFilterFieldRightCurlyBracket All of the above &#x60;and[___][]&#x60; filters in this document are also able to be used with the &#x60;and[or][___][]&#x60; syntax to allow multi-select *OR* queries within one field.   Basic example:  - To filter your results to only those with a category or Audio or Videos:    &#x60;&amp;and[or][category][]&#x3D;Audio&amp;and[or][category][]&#x3D;Videos&#x60;     In order to combine *OR* filters across multiple fields the syntax needs to be nested as follows   Nested examples:   - To search for *(year is 2014 OR 2015) AND (primary_collection is TAPUHI OR Public Address)*    &#x60;&amp;and[or][year][]&#x3D;2015&amp;and[or][year][]&#x3D;2014&amp;and[and][or][primary_collection][]&#x3D;TAPUHI&amp;and[and][or][primary_collection][]&#x3D;Public+Address&#x60;    - To search for *(category is Images OR Video) AND (subject is cat OR cats)*    &#x60;&amp;and[or][category][]&#x3D;Images&amp;and[or][category][]&#x3D;Videos&amp;and[and][or][subject][]&#x3D;cat&amp;and[and][or][subject][]&#x3D;cats&#x60;    (optional)
     * @param andIsCommercialUse Some DigitalNZ partners offer their metadata for use in commercial applications. This content can be identified through the *is_commercial_use* flag. Only API results where the *is_commercial_use* field set to True can be used for commercial purposes. Check out the [terms of use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use#commercial_use_terms) for more information.  (optional)
     * @param andHasLargeThumbnailUrl Filters results to only those records that have an image available in the *large_thumbnail_url* field.   **Note:** There is an issue with this field where, in order to get results, it needs to be specified with \&quot;Y\&quot; or not specified at all.  (optional)
     * @param andHasLatLng Filters results to only those records that have latitude and longitude coordinates present in the metadata.    *Tip* - To see the location metadata you&#39;ll need to specifically request that field using the *fields* parameter - *\&quot;&amp;fields&#x3D;verbose,locations\&quot;*  as it is not part of the default, or verbose field sets.  (optional)
     * @param geoBbox A geographic bounding box scoping a search to a geographic region. Order of latitude-longitude coordinates is north, west, south, east.   For example, filtering the Wellington region would be *\&quot;&amp;geo_bbox&#x3D;-41,174,-42,175\&quot;*  (optional)
     * @param fields Comma-separated whitelist of fields to be returned. The syntax *\&quot;&amp;fields&#x3D;verbose\&quot;* can be used to return the bulk of the fields, or you can customise which fields you are interested in, eg. *\&quot;&amp;fields&#x3D;id,title,subject,collection,landing_url,locations\&quot;*.  (optional)
     * @param sort Used to control the order of the results in conjunction with the *direction* field.   - *syndication_date* - is the creation date of the record within DigitalNZ, ie. when DigitalNZ first harvested the record.   - *date* - is the date metadata (if present) associated with the record.        To sort the search results with newest records at the top use: \&quot;&amp;sort&#x3D;syndication_date&amp;direction&#x3D;desc\&quot;  (optional)
     * @param direction Used in conjunction with *sort* to order the results  - *asc* - Ascending, oldest first.  - *desc* - Descending, newest first.  (optional, default to asc)
     * @param page Specify which page of results to return. (optional, default to 1)
     * @param perPage The number of records to return per page of search results. (optional, default to 20)
     * @param facets Shows a breakdown of record counts for the specified facets based on the current result set. In the [DigitalNZ search interface](https://digitalnz.org/records) these facets are used to list the values filterable for each field. A comma-separated list will return multiple facets in one call.  (optional)
     * @param facetsPage This value specifies which page of facet results to return. Allowing pagination through large lists of facet values. (optional)
     * @param facetsPerPage The number of facets to return per page of facet results. (optional, default to 10)
     * @param excludeFiltersFromFacets This field can be used when filtering into some facets, to maintain the context of the wider facet values. A common use case is to allow the results of a search to be filtered down into a specific category (eg Audio), while still showing the other possible filter options as facet counts (eg. Images, Audio, Video, etc). Setting this to &#39;true&#39; will not effect the search results returned but will ignore all search filters (eg. \&quot;and[category]&#x3D;Audio\&quot;) when calculating the facet counts.   (optional, default to false)
     * @return RecordsFormatGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect field specified in the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API Key (Authentication-Token) is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public RecordsFormatGet200Response recordsFormatGet(String format, String authenticationToken, String text, String andCategory, String andContentPartner, String andPrimaryCollection, String andCollection, String andUsage, String andSubject, String andDcType, String andFormat, String andPlacename, String andCreator, String andTitle, String andDate, String andYear, String andDecade, String andCentury, String withoutLeftCurlyBracketFilterFieldRightCurlyBracket, String andOrLeftCurlyBracketFilterFieldRightCurlyBracket, Boolean andIsCommercialUse, String andHasLargeThumbnailUrl, Boolean andHasLatLng, String geoBbox, String fields, String sort, String direction, Integer page, Integer perPage, List<String> facets, Integer facetsPage, Integer facetsPerPage, Boolean excludeFiltersFromFacets) throws ApiException {
        ApiResponse<RecordsFormatGet200Response> localVarResp = recordsFormatGetWithHttpInfo(format, authenticationToken, text, andCategory, andContentPartner, andPrimaryCollection, andCollection, andUsage, andSubject, andDcType, andFormat, andPlacename, andCreator, andTitle, andDate, andYear, andDecade, andCentury, withoutLeftCurlyBracketFilterFieldRightCurlyBracket, andOrLeftCurlyBracketFilterFieldRightCurlyBracket, andIsCommercialUse, andHasLargeThumbnailUrl, andHasLatLng, geoBbox, fields, sort, direction, page, perPage, facets, facetsPage, facetsPerPage, excludeFiltersFromFacets);
        return localVarResp.getData();
    }

    /**
     * Run queries against DigitalNZ metadata search service.
     * This is the main search endpoint allowing queries against the records database.
     * @param format Note - There is a small difference with some field names in the response between JSON and XML.   When a field name has more than one word, JSON format will separate the words with an underscore, eg. \&quot;content_partner\&quot;, whereas XML uses a hyphenated naming convention, eg. \&quot;content-partner\&quot;.  (required)
     * @param authenticationToken The DigitalNZ API no longer requires a key to access public content. However, if you plan on using the API regularly, expect to be a high volume consumer or are planning on creating an application, we encourage you to use an API key so that we can: - provide targeted help and support - increase your query throughput (by negotiation) - notify you directly of changes to the API - gather usage metrics to help improve the service    API requests that do not pass a valid API key/token are treated as unauthenticated. A maximum rate limit applies across all unauthenticated requests. This rate limit is in place to protect the service from overuse, resulting in unsustainable costs, or potential attack.  **Getting an API key**   [Create a DigitalNZ account](https://digitalnz.org/sign_up), log in and select \&quot;[my API key](https://digitalnz.org/api_keys/edit)\&quot; from your username drop-down menu (on the right hand side)&#39;. The key is a long string of jumbled letters and numbers (hash) that is unique to you. You are required to keep the key secret. (Refer to the [Developer API Terms of Use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) for more information).  **Using an API key**   When you make a call to the API you&#39;ll need to pass the key in a custom HTTP header: ‘Authentication-Token’. For example, a query using the ‘curl’ command might look like the following (where ‘{YOUR_API_KEY}’ is replaced with a valid API key):  &#x60;curl -H \&quot;Authentication-Token:{YOUR_API_KEY}\&quot; http://api.digitalnz.org/v3/records.json?text&#x3D;kiwi&#x60;  (optional)
     * @param text This field enables queries based on one or more search terms and provides the functionality of the main search box on [digitalnz.org](https://digitalnz.org). Search terms can be combined with boolean operators (AND, OR).   A minus sign excludes certain terms, eg. \&quot;-horse\&quot;.   An asterisk (\\*) acts as a wildcard, eg. \&quot;ted*\&quot;.   Multiple search terms are combined with an AND by default.   Examples: &#x60;\&quot;moustache\&quot;&#x60;, &#x60;\&quot;Wanganui OR Whanganui\&quot;&#x60;,  &#x60;\&quot;-paperspast\&quot;&#x60;, &#x60;\&quot;ted*\&quot;&#x60;  (optional)
     * @param andCategory These are the same categories that are used across the tabs in [digitalnz.org](https://digitalnz.org/records?text&#x3D;&amp;tab&#x3D;Videos) (optional)
     * @param andContentPartner Allows filtering for records from a particular Content Partner.   Examples: &#x60;\&quot;Ministry for Culture and Heritage\&quot;&#x60; &#x60;\&quot;Trove\&quot;&#x60; &#x60;\&quot;V.C. Browne &amp; Son\&quot;&#x60;    *Tip* - To see a list of Content Partners available for filtering use the *facets* parameter, eg. *\&quot;&amp;facets&#x3D;content_partner\&quot;*.    (optional)
     * @param andPrimaryCollection Allows filtering for records from a particular *primary_collection*.   Examples: &#x60;\&quot;Puke Ariki\&quot;&#x60; &#x60;\&quot;NZHistory\&quot;&#x60; &#x60;\&quot;TAPUHI\&quot;&#x60;      *Tip* - To see a list of Primary_Collections available for filtering use the *facets* parameter, eg. *\&quot;&amp;facets&#x3D;primary_collection\&quot;*.     (optional)
     * @param andCollection Allows filtering for records from a particular Collection. Collections can be thought of as sub-collections or groupings under Primary_Collections.   Examples: &#x60;\&quot;Music 101\&quot;&#x60; &#x60;\&quot;Mollusks\&quot;&#x60; &#x60;\&quot;Wairarapa Daily Times\&quot;&#x60;    *Tip* - To see a list of Collections available for filtering use the *facets* parameter, eg. *\&quot;&amp;facets&#x3D;collection\&quot;*.   (optional)
     * @param andUsage  (optional)
     * @param andSubject Examples: &#x60;\&quot;Cats\&quot;&#x60; &#x60;\&quot;Weddings\&quot;&#x60; &#x60;\&quot;climb*\&quot;&#x60;  (optional)
     * @param andDcType Examples: &#x60;\&quot;Conference item\&quot;&#x60; &#x60;\&quot;Magazines\&quot;&#x60;  (optional)
     * @param andFormat Examples: &#x60;\&quot;Photolithographs\&quot;&#x60; &#x60;\&quot;Glass*\&quot;&#x60;  (optional)
     * @param andPlacename This field can be used for text-based location search. For a more advanced coordinate-based search, see the \&quot;geo_bbox\&quot; field below.   Examples: &#x60;\&quot;Scott Base\&quot;&#x60; &#x60;\&quot;Wainuiomata\&quot;&#x60; &#x60;\&quot;castle*\&quot;&#x60;  (optional)
     * @param andCreator Examples: &#x60;\&quot;Revelle Jackson\&quot;&#x60; &#x60;\&quot;Nicholas Chevalier\&quot;&#x60; &#x60;\&quot;Rita Angus\&quot;&#x60;  (optional)
     * @param andTitle Examples: &#x60;\&quot;Pukeko\&quot;&#x60; &#x60;\&quot;Club\&quot;&#x60; &#x60;\&quot;Break*\&quot;&#x60;\&quot;  (optional)
     * @param andDate This field can be useful for querying and sorting (see the &#39;sort&#39; param further down). But it should be noted that, as with some other fields, **not all records have date metadata associated**. There is good coverage of date metadata within certain collections, but there are plenty with no date information at all. So, if you query for records from a specific date you may get some matching results, but might also be missing other potentially relevant records that don&#39;t have date metadata available.   Example: &#x60;\&quot;1970-12-25\&quot;&#x60;  *Tip* - There is a related (but not searchable) field that is returned on each record (where available), that often has a more human readable version of the date information, called &#39;display_date&#39;.  (optional)
     * @param andYear This field allows searching specifically by year. The metadata is derived from the same date information that is searchable and returned in the date field. It is possible to search across a range using syntax the following syntax &#x60;[{start year} TO {end year}]&#x60;.   Example: &#x60;\&quot;1893\&quot;&#x60; &#x60;\&quot;[1982 TO 1987]\&quot;&#x60;  (optional)
     * @param andDecade This field allows searching specifically by decade. The metadata is derived from the same date information that is searchable and returned in the date field.   Example: &#x60;\&quot;1850\&quot;&#x60; &#x60;\&quot;1990\&quot;&#x60;  (optional)
     * @param andCentury This field allows searching specifically by century. The metadata is derived from the same date information that is searchable and returned in the date field.   Example: &#x60;\&quot;1900\&quot;&#x60; &#x60;\&quot;2000\&quot;&#x60;  (optional)
     * @param withoutLeftCurlyBracketFilterFieldRightCurlyBracket All of the above &#x60;and[___][]&#x60; filters in this document are also able to be used with this syntax to exclude specific matches. For example to exclude Papers Past content &#x60;&amp;without[primary_collection]&#x3D;Papers+Past&#x60;  (optional)
     * @param andOrLeftCurlyBracketFilterFieldRightCurlyBracket All of the above &#x60;and[___][]&#x60; filters in this document are also able to be used with the &#x60;and[or][___][]&#x60; syntax to allow multi-select *OR* queries within one field.   Basic example:  - To filter your results to only those with a category or Audio or Videos:    &#x60;&amp;and[or][category][]&#x3D;Audio&amp;and[or][category][]&#x3D;Videos&#x60;     In order to combine *OR* filters across multiple fields the syntax needs to be nested as follows   Nested examples:   - To search for *(year is 2014 OR 2015) AND (primary_collection is TAPUHI OR Public Address)*    &#x60;&amp;and[or][year][]&#x3D;2015&amp;and[or][year][]&#x3D;2014&amp;and[and][or][primary_collection][]&#x3D;TAPUHI&amp;and[and][or][primary_collection][]&#x3D;Public+Address&#x60;    - To search for *(category is Images OR Video) AND (subject is cat OR cats)*    &#x60;&amp;and[or][category][]&#x3D;Images&amp;and[or][category][]&#x3D;Videos&amp;and[and][or][subject][]&#x3D;cat&amp;and[and][or][subject][]&#x3D;cats&#x60;    (optional)
     * @param andIsCommercialUse Some DigitalNZ partners offer their metadata for use in commercial applications. This content can be identified through the *is_commercial_use* flag. Only API results where the *is_commercial_use* field set to True can be used for commercial purposes. Check out the [terms of use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use#commercial_use_terms) for more information.  (optional)
     * @param andHasLargeThumbnailUrl Filters results to only those records that have an image available in the *large_thumbnail_url* field.   **Note:** There is an issue with this field where, in order to get results, it needs to be specified with \&quot;Y\&quot; or not specified at all.  (optional)
     * @param andHasLatLng Filters results to only those records that have latitude and longitude coordinates present in the metadata.    *Tip* - To see the location metadata you&#39;ll need to specifically request that field using the *fields* parameter - *\&quot;&amp;fields&#x3D;verbose,locations\&quot;*  as it is not part of the default, or verbose field sets.  (optional)
     * @param geoBbox A geographic bounding box scoping a search to a geographic region. Order of latitude-longitude coordinates is north, west, south, east.   For example, filtering the Wellington region would be *\&quot;&amp;geo_bbox&#x3D;-41,174,-42,175\&quot;*  (optional)
     * @param fields Comma-separated whitelist of fields to be returned. The syntax *\&quot;&amp;fields&#x3D;verbose\&quot;* can be used to return the bulk of the fields, or you can customise which fields you are interested in, eg. *\&quot;&amp;fields&#x3D;id,title,subject,collection,landing_url,locations\&quot;*.  (optional)
     * @param sort Used to control the order of the results in conjunction with the *direction* field.   - *syndication_date* - is the creation date of the record within DigitalNZ, ie. when DigitalNZ first harvested the record.   - *date* - is the date metadata (if present) associated with the record.        To sort the search results with newest records at the top use: \&quot;&amp;sort&#x3D;syndication_date&amp;direction&#x3D;desc\&quot;  (optional)
     * @param direction Used in conjunction with *sort* to order the results  - *asc* - Ascending, oldest first.  - *desc* - Descending, newest first.  (optional, default to asc)
     * @param page Specify which page of results to return. (optional, default to 1)
     * @param perPage The number of records to return per page of search results. (optional, default to 20)
     * @param facets Shows a breakdown of record counts for the specified facets based on the current result set. In the [DigitalNZ search interface](https://digitalnz.org/records) these facets are used to list the values filterable for each field. A comma-separated list will return multiple facets in one call.  (optional)
     * @param facetsPage This value specifies which page of facet results to return. Allowing pagination through large lists of facet values. (optional)
     * @param facetsPerPage The number of facets to return per page of facet results. (optional, default to 10)
     * @param excludeFiltersFromFacets This field can be used when filtering into some facets, to maintain the context of the wider facet values. A common use case is to allow the results of a search to be filtered down into a specific category (eg Audio), while still showing the other possible filter options as facet counts (eg. Images, Audio, Video, etc). Setting this to &#39;true&#39; will not effect the search results returned but will ignore all search filters (eg. \&quot;and[category]&#x3D;Audio\&quot;) when calculating the facet counts.   (optional, default to false)
     * @return ApiResponse&lt;RecordsFormatGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect field specified in the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API Key (Authentication-Token) is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecordsFormatGet200Response> recordsFormatGetWithHttpInfo(String format, String authenticationToken, String text, String andCategory, String andContentPartner, String andPrimaryCollection, String andCollection, String andUsage, String andSubject, String andDcType, String andFormat, String andPlacename, String andCreator, String andTitle, String andDate, String andYear, String andDecade, String andCentury, String withoutLeftCurlyBracketFilterFieldRightCurlyBracket, String andOrLeftCurlyBracketFilterFieldRightCurlyBracket, Boolean andIsCommercialUse, String andHasLargeThumbnailUrl, Boolean andHasLatLng, String geoBbox, String fields, String sort, String direction, Integer page, Integer perPage, List<String> facets, Integer facetsPage, Integer facetsPerPage, Boolean excludeFiltersFromFacets) throws ApiException {
        okhttp3.Call localVarCall = recordsFormatGetValidateBeforeCall(format, authenticationToken, text, andCategory, andContentPartner, andPrimaryCollection, andCollection, andUsage, andSubject, andDcType, andFormat, andPlacename, andCreator, andTitle, andDate, andYear, andDecade, andCentury, withoutLeftCurlyBracketFilterFieldRightCurlyBracket, andOrLeftCurlyBracketFilterFieldRightCurlyBracket, andIsCommercialUse, andHasLargeThumbnailUrl, andHasLatLng, geoBbox, fields, sort, direction, page, perPage, facets, facetsPage, facetsPerPage, excludeFiltersFromFacets, null);
        Type localVarReturnType = new TypeToken<RecordsFormatGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run queries against DigitalNZ metadata search service. (asynchronously)
     * This is the main search endpoint allowing queries against the records database.
     * @param format Note - There is a small difference with some field names in the response between JSON and XML.   When a field name has more than one word, JSON format will separate the words with an underscore, eg. \&quot;content_partner\&quot;, whereas XML uses a hyphenated naming convention, eg. \&quot;content-partner\&quot;.  (required)
     * @param authenticationToken The DigitalNZ API no longer requires a key to access public content. However, if you plan on using the API regularly, expect to be a high volume consumer or are planning on creating an application, we encourage you to use an API key so that we can: - provide targeted help and support - increase your query throughput (by negotiation) - notify you directly of changes to the API - gather usage metrics to help improve the service    API requests that do not pass a valid API key/token are treated as unauthenticated. A maximum rate limit applies across all unauthenticated requests. This rate limit is in place to protect the service from overuse, resulting in unsustainable costs, or potential attack.  **Getting an API key**   [Create a DigitalNZ account](https://digitalnz.org/sign_up), log in and select \&quot;[my API key](https://digitalnz.org/api_keys/edit)\&quot; from your username drop-down menu (on the right hand side)&#39;. The key is a long string of jumbled letters and numbers (hash) that is unique to you. You are required to keep the key secret. (Refer to the [Developer API Terms of Use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) for more information).  **Using an API key**   When you make a call to the API you&#39;ll need to pass the key in a custom HTTP header: ‘Authentication-Token’. For example, a query using the ‘curl’ command might look like the following (where ‘{YOUR_API_KEY}’ is replaced with a valid API key):  &#x60;curl -H \&quot;Authentication-Token:{YOUR_API_KEY}\&quot; http://api.digitalnz.org/v3/records.json?text&#x3D;kiwi&#x60;  (optional)
     * @param text This field enables queries based on one or more search terms and provides the functionality of the main search box on [digitalnz.org](https://digitalnz.org). Search terms can be combined with boolean operators (AND, OR).   A minus sign excludes certain terms, eg. \&quot;-horse\&quot;.   An asterisk (\\*) acts as a wildcard, eg. \&quot;ted*\&quot;.   Multiple search terms are combined with an AND by default.   Examples: &#x60;\&quot;moustache\&quot;&#x60;, &#x60;\&quot;Wanganui OR Whanganui\&quot;&#x60;,  &#x60;\&quot;-paperspast\&quot;&#x60;, &#x60;\&quot;ted*\&quot;&#x60;  (optional)
     * @param andCategory These are the same categories that are used across the tabs in [digitalnz.org](https://digitalnz.org/records?text&#x3D;&amp;tab&#x3D;Videos) (optional)
     * @param andContentPartner Allows filtering for records from a particular Content Partner.   Examples: &#x60;\&quot;Ministry for Culture and Heritage\&quot;&#x60; &#x60;\&quot;Trove\&quot;&#x60; &#x60;\&quot;V.C. Browne &amp; Son\&quot;&#x60;    *Tip* - To see a list of Content Partners available for filtering use the *facets* parameter, eg. *\&quot;&amp;facets&#x3D;content_partner\&quot;*.    (optional)
     * @param andPrimaryCollection Allows filtering for records from a particular *primary_collection*.   Examples: &#x60;\&quot;Puke Ariki\&quot;&#x60; &#x60;\&quot;NZHistory\&quot;&#x60; &#x60;\&quot;TAPUHI\&quot;&#x60;      *Tip* - To see a list of Primary_Collections available for filtering use the *facets* parameter, eg. *\&quot;&amp;facets&#x3D;primary_collection\&quot;*.     (optional)
     * @param andCollection Allows filtering for records from a particular Collection. Collections can be thought of as sub-collections or groupings under Primary_Collections.   Examples: &#x60;\&quot;Music 101\&quot;&#x60; &#x60;\&quot;Mollusks\&quot;&#x60; &#x60;\&quot;Wairarapa Daily Times\&quot;&#x60;    *Tip* - To see a list of Collections available for filtering use the *facets* parameter, eg. *\&quot;&amp;facets&#x3D;collection\&quot;*.   (optional)
     * @param andUsage  (optional)
     * @param andSubject Examples: &#x60;\&quot;Cats\&quot;&#x60; &#x60;\&quot;Weddings\&quot;&#x60; &#x60;\&quot;climb*\&quot;&#x60;  (optional)
     * @param andDcType Examples: &#x60;\&quot;Conference item\&quot;&#x60; &#x60;\&quot;Magazines\&quot;&#x60;  (optional)
     * @param andFormat Examples: &#x60;\&quot;Photolithographs\&quot;&#x60; &#x60;\&quot;Glass*\&quot;&#x60;  (optional)
     * @param andPlacename This field can be used for text-based location search. For a more advanced coordinate-based search, see the \&quot;geo_bbox\&quot; field below.   Examples: &#x60;\&quot;Scott Base\&quot;&#x60; &#x60;\&quot;Wainuiomata\&quot;&#x60; &#x60;\&quot;castle*\&quot;&#x60;  (optional)
     * @param andCreator Examples: &#x60;\&quot;Revelle Jackson\&quot;&#x60; &#x60;\&quot;Nicholas Chevalier\&quot;&#x60; &#x60;\&quot;Rita Angus\&quot;&#x60;  (optional)
     * @param andTitle Examples: &#x60;\&quot;Pukeko\&quot;&#x60; &#x60;\&quot;Club\&quot;&#x60; &#x60;\&quot;Break*\&quot;&#x60;\&quot;  (optional)
     * @param andDate This field can be useful for querying and sorting (see the &#39;sort&#39; param further down). But it should be noted that, as with some other fields, **not all records have date metadata associated**. There is good coverage of date metadata within certain collections, but there are plenty with no date information at all. So, if you query for records from a specific date you may get some matching results, but might also be missing other potentially relevant records that don&#39;t have date metadata available.   Example: &#x60;\&quot;1970-12-25\&quot;&#x60;  *Tip* - There is a related (but not searchable) field that is returned on each record (where available), that often has a more human readable version of the date information, called &#39;display_date&#39;.  (optional)
     * @param andYear This field allows searching specifically by year. The metadata is derived from the same date information that is searchable and returned in the date field. It is possible to search across a range using syntax the following syntax &#x60;[{start year} TO {end year}]&#x60;.   Example: &#x60;\&quot;1893\&quot;&#x60; &#x60;\&quot;[1982 TO 1987]\&quot;&#x60;  (optional)
     * @param andDecade This field allows searching specifically by decade. The metadata is derived from the same date information that is searchable and returned in the date field.   Example: &#x60;\&quot;1850\&quot;&#x60; &#x60;\&quot;1990\&quot;&#x60;  (optional)
     * @param andCentury This field allows searching specifically by century. The metadata is derived from the same date information that is searchable and returned in the date field.   Example: &#x60;\&quot;1900\&quot;&#x60; &#x60;\&quot;2000\&quot;&#x60;  (optional)
     * @param withoutLeftCurlyBracketFilterFieldRightCurlyBracket All of the above &#x60;and[___][]&#x60; filters in this document are also able to be used with this syntax to exclude specific matches. For example to exclude Papers Past content &#x60;&amp;without[primary_collection]&#x3D;Papers+Past&#x60;  (optional)
     * @param andOrLeftCurlyBracketFilterFieldRightCurlyBracket All of the above &#x60;and[___][]&#x60; filters in this document are also able to be used with the &#x60;and[or][___][]&#x60; syntax to allow multi-select *OR* queries within one field.   Basic example:  - To filter your results to only those with a category or Audio or Videos:    &#x60;&amp;and[or][category][]&#x3D;Audio&amp;and[or][category][]&#x3D;Videos&#x60;     In order to combine *OR* filters across multiple fields the syntax needs to be nested as follows   Nested examples:   - To search for *(year is 2014 OR 2015) AND (primary_collection is TAPUHI OR Public Address)*    &#x60;&amp;and[or][year][]&#x3D;2015&amp;and[or][year][]&#x3D;2014&amp;and[and][or][primary_collection][]&#x3D;TAPUHI&amp;and[and][or][primary_collection][]&#x3D;Public+Address&#x60;    - To search for *(category is Images OR Video) AND (subject is cat OR cats)*    &#x60;&amp;and[or][category][]&#x3D;Images&amp;and[or][category][]&#x3D;Videos&amp;and[and][or][subject][]&#x3D;cat&amp;and[and][or][subject][]&#x3D;cats&#x60;    (optional)
     * @param andIsCommercialUse Some DigitalNZ partners offer their metadata for use in commercial applications. This content can be identified through the *is_commercial_use* flag. Only API results where the *is_commercial_use* field set to True can be used for commercial purposes. Check out the [terms of use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use#commercial_use_terms) for more information.  (optional)
     * @param andHasLargeThumbnailUrl Filters results to only those records that have an image available in the *large_thumbnail_url* field.   **Note:** There is an issue with this field where, in order to get results, it needs to be specified with \&quot;Y\&quot; or not specified at all.  (optional)
     * @param andHasLatLng Filters results to only those records that have latitude and longitude coordinates present in the metadata.    *Tip* - To see the location metadata you&#39;ll need to specifically request that field using the *fields* parameter - *\&quot;&amp;fields&#x3D;verbose,locations\&quot;*  as it is not part of the default, or verbose field sets.  (optional)
     * @param geoBbox A geographic bounding box scoping a search to a geographic region. Order of latitude-longitude coordinates is north, west, south, east.   For example, filtering the Wellington region would be *\&quot;&amp;geo_bbox&#x3D;-41,174,-42,175\&quot;*  (optional)
     * @param fields Comma-separated whitelist of fields to be returned. The syntax *\&quot;&amp;fields&#x3D;verbose\&quot;* can be used to return the bulk of the fields, or you can customise which fields you are interested in, eg. *\&quot;&amp;fields&#x3D;id,title,subject,collection,landing_url,locations\&quot;*.  (optional)
     * @param sort Used to control the order of the results in conjunction with the *direction* field.   - *syndication_date* - is the creation date of the record within DigitalNZ, ie. when DigitalNZ first harvested the record.   - *date* - is the date metadata (if present) associated with the record.        To sort the search results with newest records at the top use: \&quot;&amp;sort&#x3D;syndication_date&amp;direction&#x3D;desc\&quot;  (optional)
     * @param direction Used in conjunction with *sort* to order the results  - *asc* - Ascending, oldest first.  - *desc* - Descending, newest first.  (optional, default to asc)
     * @param page Specify which page of results to return. (optional, default to 1)
     * @param perPage The number of records to return per page of search results. (optional, default to 20)
     * @param facets Shows a breakdown of record counts for the specified facets based on the current result set. In the [DigitalNZ search interface](https://digitalnz.org/records) these facets are used to list the values filterable for each field. A comma-separated list will return multiple facets in one call.  (optional)
     * @param facetsPage This value specifies which page of facet results to return. Allowing pagination through large lists of facet values. (optional)
     * @param facetsPerPage The number of facets to return per page of facet results. (optional, default to 10)
     * @param excludeFiltersFromFacets This field can be used when filtering into some facets, to maintain the context of the wider facet values. A common use case is to allow the results of a search to be filtered down into a specific category (eg Audio), while still showing the other possible filter options as facet counts (eg. Images, Audio, Video, etc). Setting this to &#39;true&#39; will not effect the search results returned but will ignore all search filters (eg. \&quot;and[category]&#x3D;Audio\&quot;) when calculating the facet counts.   (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect field specified in the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API Key (Authentication-Token) is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordsFormatGetAsync(String format, String authenticationToken, String text, String andCategory, String andContentPartner, String andPrimaryCollection, String andCollection, String andUsage, String andSubject, String andDcType, String andFormat, String andPlacename, String andCreator, String andTitle, String andDate, String andYear, String andDecade, String andCentury, String withoutLeftCurlyBracketFilterFieldRightCurlyBracket, String andOrLeftCurlyBracketFilterFieldRightCurlyBracket, Boolean andIsCommercialUse, String andHasLargeThumbnailUrl, Boolean andHasLatLng, String geoBbox, String fields, String sort, String direction, Integer page, Integer perPage, List<String> facets, Integer facetsPage, Integer facetsPerPage, Boolean excludeFiltersFromFacets, final ApiCallback<RecordsFormatGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordsFormatGetValidateBeforeCall(format, authenticationToken, text, andCategory, andContentPartner, andPrimaryCollection, andCollection, andUsage, andSubject, andDcType, andFormat, andPlacename, andCreator, andTitle, andDate, andYear, andDecade, andCentury, withoutLeftCurlyBracketFilterFieldRightCurlyBracket, andOrLeftCurlyBracketFilterFieldRightCurlyBracket, andIsCommercialUse, andHasLargeThumbnailUrl, andHasLatLng, geoBbox, fields, sort, direction, page, perPage, facets, facetsPage, facetsPerPage, excludeFiltersFromFacets, _callback);
        Type localVarReturnType = new TypeToken<RecordsFormatGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recordsRecordIdFormatGet
     * @param recordId Every record has a unique, persistent *record_id*. (required)
     * @param format Note - There is a small difference with some field names in the response between JSON and XML.   When a field name has more than one word, JSON format will separate the words with an underscore, eg. \&quot;content_partner\&quot;, whereas XML uses a hyphenated naming convention, eg. \&quot;content-partner\&quot;.  (required)
     * @param authenticationToken The DigitalNZ API no longer requires a key to access public content. However, if you plan on using the API regularly, expect to be a high volume consumer or are planning on creating an application, we encourage you to use an API key so that we can: - provide targeted help and support - increase your query throughput (by negotiation) - notify you directly of changes to the API - gather usage metrics to help improve the service    API requests that do not pass a valid API key/token are treated as unauthenticated. A maximum rate limit applies across all unauthenticated requests. This rate limit is in place to protect the service from overuse, resulting in unsustainable costs, or potential attack.  **Getting an API key**   [Create a DigitalNZ account](https://digitalnz.org/sign_up), log in and select \&quot;[my API key](https://digitalnz.org/api_keys/edit)\&quot; from your username drop-down menu (on the right hand side)&#39;. The key is a long string of jumbled letters and numbers (hash) that is unique to you. You are required to keep the key secret. (Refer to the [Developer API Terms of Use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) for more information).  **Using an API key**   When you make a call to the API you&#39;ll need to pass the key in a custom HTTP header: ‘Authentication-Token’. For example, a query using the ‘curl’ command might look like the following (where ‘{YOUR_API_KEY}’ is replaced with a valid API key):  &#x60;curl -H \&quot;Authentication-Token:{YOUR_API_KEY}\&quot; http://api.digitalnz.org/v3/records.json?text&#x3D;kiwi&#x60;  (optional)
     * @param fields Comma-separated whitelist of fields to be returned. The syntax *\&quot;&amp;fields&#x3D;verbose\&quot;* can be used to return the bulk of the fields, or you can customise which fields you are interested in, eg. *\&quot;&amp;fields&#x3D;id,title,subject,collection,landing_url,locations\&quot;*.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API Key (Authentication-Token) is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordsRecordIdFormatGetCall(Integer recordId, String format, String authenticationToken, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/records/{record_id}.{format}"
            .replace("{" + "record_id" + "}", localVarApiClient.escapeString(recordId.toString()))
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (authenticationToken != null) {
            localVarHeaderParams.put("Authentication-Token", localVarApiClient.parameterToString(authenticationToken));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordsRecordIdFormatGetValidateBeforeCall(Integer recordId, String format, String authenticationToken, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling recordsRecordIdFormatGet(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling recordsRecordIdFormatGet(Async)");
        }

        return recordsRecordIdFormatGetCall(recordId, format, authenticationToken, fields, _callback);

    }

    /**
     * View metadata associated with a single record.
     * If you know its &#x60;record_id&#x60; you can use this endpoint to view all metadata associated with that specific record. 
     * @param recordId Every record has a unique, persistent *record_id*. (required)
     * @param format Note - There is a small difference with some field names in the response between JSON and XML.   When a field name has more than one word, JSON format will separate the words with an underscore, eg. \&quot;content_partner\&quot;, whereas XML uses a hyphenated naming convention, eg. \&quot;content-partner\&quot;.  (required)
     * @param authenticationToken The DigitalNZ API no longer requires a key to access public content. However, if you plan on using the API regularly, expect to be a high volume consumer or are planning on creating an application, we encourage you to use an API key so that we can: - provide targeted help and support - increase your query throughput (by negotiation) - notify you directly of changes to the API - gather usage metrics to help improve the service    API requests that do not pass a valid API key/token are treated as unauthenticated. A maximum rate limit applies across all unauthenticated requests. This rate limit is in place to protect the service from overuse, resulting in unsustainable costs, or potential attack.  **Getting an API key**   [Create a DigitalNZ account](https://digitalnz.org/sign_up), log in and select \&quot;[my API key](https://digitalnz.org/api_keys/edit)\&quot; from your username drop-down menu (on the right hand side)&#39;. The key is a long string of jumbled letters and numbers (hash) that is unique to you. You are required to keep the key secret. (Refer to the [Developer API Terms of Use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) for more information).  **Using an API key**   When you make a call to the API you&#39;ll need to pass the key in a custom HTTP header: ‘Authentication-Token’. For example, a query using the ‘curl’ command might look like the following (where ‘{YOUR_API_KEY}’ is replaced with a valid API key):  &#x60;curl -H \&quot;Authentication-Token:{YOUR_API_KEY}\&quot; http://api.digitalnz.org/v3/records.json?text&#x3D;kiwi&#x60;  (optional)
     * @param fields Comma-separated whitelist of fields to be returned. The syntax *\&quot;&amp;fields&#x3D;verbose\&quot;* can be used to return the bulk of the fields, or you can customise which fields you are interested in, eg. *\&quot;&amp;fields&#x3D;id,title,subject,collection,landing_url,locations\&quot;*.  (optional)
     * @return Record
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API Key (Authentication-Token) is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public Record recordsRecordIdFormatGet(Integer recordId, String format, String authenticationToken, String fields) throws ApiException {
        ApiResponse<Record> localVarResp = recordsRecordIdFormatGetWithHttpInfo(recordId, format, authenticationToken, fields);
        return localVarResp.getData();
    }

    /**
     * View metadata associated with a single record.
     * If you know its &#x60;record_id&#x60; you can use this endpoint to view all metadata associated with that specific record. 
     * @param recordId Every record has a unique, persistent *record_id*. (required)
     * @param format Note - There is a small difference with some field names in the response between JSON and XML.   When a field name has more than one word, JSON format will separate the words with an underscore, eg. \&quot;content_partner\&quot;, whereas XML uses a hyphenated naming convention, eg. \&quot;content-partner\&quot;.  (required)
     * @param authenticationToken The DigitalNZ API no longer requires a key to access public content. However, if you plan on using the API regularly, expect to be a high volume consumer or are planning on creating an application, we encourage you to use an API key so that we can: - provide targeted help and support - increase your query throughput (by negotiation) - notify you directly of changes to the API - gather usage metrics to help improve the service    API requests that do not pass a valid API key/token are treated as unauthenticated. A maximum rate limit applies across all unauthenticated requests. This rate limit is in place to protect the service from overuse, resulting in unsustainable costs, or potential attack.  **Getting an API key**   [Create a DigitalNZ account](https://digitalnz.org/sign_up), log in and select \&quot;[my API key](https://digitalnz.org/api_keys/edit)\&quot; from your username drop-down menu (on the right hand side)&#39;. The key is a long string of jumbled letters and numbers (hash) that is unique to you. You are required to keep the key secret. (Refer to the [Developer API Terms of Use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) for more information).  **Using an API key**   When you make a call to the API you&#39;ll need to pass the key in a custom HTTP header: ‘Authentication-Token’. For example, a query using the ‘curl’ command might look like the following (where ‘{YOUR_API_KEY}’ is replaced with a valid API key):  &#x60;curl -H \&quot;Authentication-Token:{YOUR_API_KEY}\&quot; http://api.digitalnz.org/v3/records.json?text&#x3D;kiwi&#x60;  (optional)
     * @param fields Comma-separated whitelist of fields to be returned. The syntax *\&quot;&amp;fields&#x3D;verbose\&quot;* can be used to return the bulk of the fields, or you can customise which fields you are interested in, eg. *\&quot;&amp;fields&#x3D;id,title,subject,collection,landing_url,locations\&quot;*.  (optional)
     * @return ApiResponse&lt;Record&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API Key (Authentication-Token) is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Record> recordsRecordIdFormatGetWithHttpInfo(Integer recordId, String format, String authenticationToken, String fields) throws ApiException {
        okhttp3.Call localVarCall = recordsRecordIdFormatGetValidateBeforeCall(recordId, format, authenticationToken, fields, null);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View metadata associated with a single record. (asynchronously)
     * If you know its &#x60;record_id&#x60; you can use this endpoint to view all metadata associated with that specific record. 
     * @param recordId Every record has a unique, persistent *record_id*. (required)
     * @param format Note - There is a small difference with some field names in the response between JSON and XML.   When a field name has more than one word, JSON format will separate the words with an underscore, eg. \&quot;content_partner\&quot;, whereas XML uses a hyphenated naming convention, eg. \&quot;content-partner\&quot;.  (required)
     * @param authenticationToken The DigitalNZ API no longer requires a key to access public content. However, if you plan on using the API regularly, expect to be a high volume consumer or are planning on creating an application, we encourage you to use an API key so that we can: - provide targeted help and support - increase your query throughput (by negotiation) - notify you directly of changes to the API - gather usage metrics to help improve the service    API requests that do not pass a valid API key/token are treated as unauthenticated. A maximum rate limit applies across all unauthenticated requests. This rate limit is in place to protect the service from overuse, resulting in unsustainable costs, or potential attack.  **Getting an API key**   [Create a DigitalNZ account](https://digitalnz.org/sign_up), log in and select \&quot;[my API key](https://digitalnz.org/api_keys/edit)\&quot; from your username drop-down menu (on the right hand side)&#39;. The key is a long string of jumbled letters and numbers (hash) that is unique to you. You are required to keep the key secret. (Refer to the [Developer API Terms of Use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) for more information).  **Using an API key**   When you make a call to the API you&#39;ll need to pass the key in a custom HTTP header: ‘Authentication-Token’. For example, a query using the ‘curl’ command might look like the following (where ‘{YOUR_API_KEY}’ is replaced with a valid API key):  &#x60;curl -H \&quot;Authentication-Token:{YOUR_API_KEY}\&quot; http://api.digitalnz.org/v3/records.json?text&#x3D;kiwi&#x60;  (optional)
     * @param fields Comma-separated whitelist of fields to be returned. The syntax *\&quot;&amp;fields&#x3D;verbose\&quot;* can be used to return the bulk of the fields, or you can customise which fields you are interested in, eg. *\&quot;&amp;fields&#x3D;id,title,subject,collection,landing_url,locations\&quot;*.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API Key (Authentication-Token) is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordsRecordIdFormatGetAsync(Integer recordId, String format, String authenticationToken, String fields, final ApiCallback<Record> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordsRecordIdFormatGetValidateBeforeCall(recordId, format, authenticationToken, fields, _callback);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recordsRecordIdMoreLikeThisFormatGet
     * @param recordId Every record has a unique, persistent *record_id*. (required)
     * @param format Note - There is a small difference with some field names in the response between JSON and XML.   When a field name has more than one word, JSON format will separate the words with an underscore, eg. \&quot;content_partner\&quot;, whereas XML uses a hyphenated naming convention, eg. \&quot;content-partner\&quot;.  (required)
     * @param authenticationToken The DigitalNZ API no longer requires a key to access public content. However, if you plan on using the API regularly, expect to be a high volume consumer or are planning on creating an application, we encourage you to use an API key so that we can: - provide targeted help and support - increase your query throughput (by negotiation) - notify you directly of changes to the API - gather usage metrics to help improve the service    API requests that do not pass a valid API key/token are treated as unauthenticated. A maximum rate limit applies across all unauthenticated requests. This rate limit is in place to protect the service from overuse, resulting in unsustainable costs, or potential attack.  **Getting an API key**   [Create a DigitalNZ account](https://digitalnz.org/sign_up), log in and select \&quot;[my API key](https://digitalnz.org/api_keys/edit)\&quot; from your username drop-down menu (on the right hand side)&#39;. The key is a long string of jumbled letters and numbers (hash) that is unique to you. You are required to keep the key secret. (Refer to the [Developer API Terms of Use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) for more information).  **Using an API key**   When you make a call to the API you&#39;ll need to pass the key in a custom HTTP header: ‘Authentication-Token’. For example, a query using the ‘curl’ command might look like the following (where ‘{YOUR_API_KEY}’ is replaced with a valid API key):  &#x60;curl -H \&quot;Authentication-Token:{YOUR_API_KEY}\&quot; http://api.digitalnz.org/v3/records.json?text&#x3D;kiwi&#x60;  (optional)
     * @param fields Comma-separated whitelist of fields to be returned. The syntax *\&quot;&amp;fields&#x3D;verbose\&quot;* can be used to return the bulk of the fields, or you can customise which fields you are interested in, eg. *\&quot;&amp;fields&#x3D;id,title,subject,collection,landing_url,locations\&quot;*.  (optional)
     * @param mltFields Comma-separated list of fields used to evaluate relatedness. Available fields to compare are *title* and *subject*, eg *&amp;mlt_fields&#x3D;title,subject* or *&amp;mlt_fields&#x3D;title*.  (optional)
     * @param filtering More Like This (MLT) queries can be filtered in the same ways as regular searches, using the same syntax outined in the GET /records call above. This enables things like scoping the related records to only return Images eg *&amp;and[category]&#x3D;Images*, or to only show related records from a specific content partner eg *&amp;and[content_partner]&#x3D;Puke+Ariki*.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API Key (Authentication-Token) is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordsRecordIdMoreLikeThisFormatGetCall(Integer recordId, String format, String authenticationToken, String fields, String mltFields, String filtering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/records/{record_id}/more_like_this.{format}"
            .replace("{" + "record_id" + "}", localVarApiClient.escapeString(recordId.toString()))
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (mltFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mlt_fields", mltFields));
        }

        if (filtering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filtering", filtering));
        }

        if (authenticationToken != null) {
            localVarHeaderParams.put("Authentication-Token", localVarApiClient.parameterToString(authenticationToken));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordsRecordIdMoreLikeThisFormatGetValidateBeforeCall(Integer recordId, String format, String authenticationToken, String fields, String mltFields, String filtering, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling recordsRecordIdMoreLikeThisFormatGet(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling recordsRecordIdMoreLikeThisFormatGet(Async)");
        }

        return recordsRecordIdMoreLikeThisFormatGetCall(recordId, format, authenticationToken, fields, mltFields, filtering, _callback);

    }

    /**
     * The \&quot;More Like This\&quot; call returns similar records to the specified ID. 
     * This feature returns a set of search results that are similar (ie have similar metadata) to a specific record. 
     * @param recordId Every record has a unique, persistent *record_id*. (required)
     * @param format Note - There is a small difference with some field names in the response between JSON and XML.   When a field name has more than one word, JSON format will separate the words with an underscore, eg. \&quot;content_partner\&quot;, whereas XML uses a hyphenated naming convention, eg. \&quot;content-partner\&quot;.  (required)
     * @param authenticationToken The DigitalNZ API no longer requires a key to access public content. However, if you plan on using the API regularly, expect to be a high volume consumer or are planning on creating an application, we encourage you to use an API key so that we can: - provide targeted help and support - increase your query throughput (by negotiation) - notify you directly of changes to the API - gather usage metrics to help improve the service    API requests that do not pass a valid API key/token are treated as unauthenticated. A maximum rate limit applies across all unauthenticated requests. This rate limit is in place to protect the service from overuse, resulting in unsustainable costs, or potential attack.  **Getting an API key**   [Create a DigitalNZ account](https://digitalnz.org/sign_up), log in and select \&quot;[my API key](https://digitalnz.org/api_keys/edit)\&quot; from your username drop-down menu (on the right hand side)&#39;. The key is a long string of jumbled letters and numbers (hash) that is unique to you. You are required to keep the key secret. (Refer to the [Developer API Terms of Use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) for more information).  **Using an API key**   When you make a call to the API you&#39;ll need to pass the key in a custom HTTP header: ‘Authentication-Token’. For example, a query using the ‘curl’ command might look like the following (where ‘{YOUR_API_KEY}’ is replaced with a valid API key):  &#x60;curl -H \&quot;Authentication-Token:{YOUR_API_KEY}\&quot; http://api.digitalnz.org/v3/records.json?text&#x3D;kiwi&#x60;  (optional)
     * @param fields Comma-separated whitelist of fields to be returned. The syntax *\&quot;&amp;fields&#x3D;verbose\&quot;* can be used to return the bulk of the fields, or you can customise which fields you are interested in, eg. *\&quot;&amp;fields&#x3D;id,title,subject,collection,landing_url,locations\&quot;*.  (optional)
     * @param mltFields Comma-separated list of fields used to evaluate relatedness. Available fields to compare are *title* and *subject*, eg *&amp;mlt_fields&#x3D;title,subject* or *&amp;mlt_fields&#x3D;title*.  (optional)
     * @param filtering More Like This (MLT) queries can be filtered in the same ways as regular searches, using the same syntax outined in the GET /records call above. This enables things like scoping the related records to only return Images eg *&amp;and[category]&#x3D;Images*, or to only show related records from a specific content partner eg *&amp;and[content_partner]&#x3D;Puke+Ariki*.  (optional)
     * @return RecordsRecordIdMoreLikeThisFormatGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API Key (Authentication-Token) is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public RecordsRecordIdMoreLikeThisFormatGet200Response recordsRecordIdMoreLikeThisFormatGet(Integer recordId, String format, String authenticationToken, String fields, String mltFields, String filtering) throws ApiException {
        ApiResponse<RecordsRecordIdMoreLikeThisFormatGet200Response> localVarResp = recordsRecordIdMoreLikeThisFormatGetWithHttpInfo(recordId, format, authenticationToken, fields, mltFields, filtering);
        return localVarResp.getData();
    }

    /**
     * The \&quot;More Like This\&quot; call returns similar records to the specified ID. 
     * This feature returns a set of search results that are similar (ie have similar metadata) to a specific record. 
     * @param recordId Every record has a unique, persistent *record_id*. (required)
     * @param format Note - There is a small difference with some field names in the response between JSON and XML.   When a field name has more than one word, JSON format will separate the words with an underscore, eg. \&quot;content_partner\&quot;, whereas XML uses a hyphenated naming convention, eg. \&quot;content-partner\&quot;.  (required)
     * @param authenticationToken The DigitalNZ API no longer requires a key to access public content. However, if you plan on using the API regularly, expect to be a high volume consumer or are planning on creating an application, we encourage you to use an API key so that we can: - provide targeted help and support - increase your query throughput (by negotiation) - notify you directly of changes to the API - gather usage metrics to help improve the service    API requests that do not pass a valid API key/token are treated as unauthenticated. A maximum rate limit applies across all unauthenticated requests. This rate limit is in place to protect the service from overuse, resulting in unsustainable costs, or potential attack.  **Getting an API key**   [Create a DigitalNZ account](https://digitalnz.org/sign_up), log in and select \&quot;[my API key](https://digitalnz.org/api_keys/edit)\&quot; from your username drop-down menu (on the right hand side)&#39;. The key is a long string of jumbled letters and numbers (hash) that is unique to you. You are required to keep the key secret. (Refer to the [Developer API Terms of Use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) for more information).  **Using an API key**   When you make a call to the API you&#39;ll need to pass the key in a custom HTTP header: ‘Authentication-Token’. For example, a query using the ‘curl’ command might look like the following (where ‘{YOUR_API_KEY}’ is replaced with a valid API key):  &#x60;curl -H \&quot;Authentication-Token:{YOUR_API_KEY}\&quot; http://api.digitalnz.org/v3/records.json?text&#x3D;kiwi&#x60;  (optional)
     * @param fields Comma-separated whitelist of fields to be returned. The syntax *\&quot;&amp;fields&#x3D;verbose\&quot;* can be used to return the bulk of the fields, or you can customise which fields you are interested in, eg. *\&quot;&amp;fields&#x3D;id,title,subject,collection,landing_url,locations\&quot;*.  (optional)
     * @param mltFields Comma-separated list of fields used to evaluate relatedness. Available fields to compare are *title* and *subject*, eg *&amp;mlt_fields&#x3D;title,subject* or *&amp;mlt_fields&#x3D;title*.  (optional)
     * @param filtering More Like This (MLT) queries can be filtered in the same ways as regular searches, using the same syntax outined in the GET /records call above. This enables things like scoping the related records to only return Images eg *&amp;and[category]&#x3D;Images*, or to only show related records from a specific content partner eg *&amp;and[content_partner]&#x3D;Puke+Ariki*.  (optional)
     * @return ApiResponse&lt;RecordsRecordIdMoreLikeThisFormatGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API Key (Authentication-Token) is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecordsRecordIdMoreLikeThisFormatGet200Response> recordsRecordIdMoreLikeThisFormatGetWithHttpInfo(Integer recordId, String format, String authenticationToken, String fields, String mltFields, String filtering) throws ApiException {
        okhttp3.Call localVarCall = recordsRecordIdMoreLikeThisFormatGetValidateBeforeCall(recordId, format, authenticationToken, fields, mltFields, filtering, null);
        Type localVarReturnType = new TypeToken<RecordsRecordIdMoreLikeThisFormatGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * The \&quot;More Like This\&quot; call returns similar records to the specified ID.  (asynchronously)
     * This feature returns a set of search results that are similar (ie have similar metadata) to a specific record. 
     * @param recordId Every record has a unique, persistent *record_id*. (required)
     * @param format Note - There is a small difference with some field names in the response between JSON and XML.   When a field name has more than one word, JSON format will separate the words with an underscore, eg. \&quot;content_partner\&quot;, whereas XML uses a hyphenated naming convention, eg. \&quot;content-partner\&quot;.  (required)
     * @param authenticationToken The DigitalNZ API no longer requires a key to access public content. However, if you plan on using the API regularly, expect to be a high volume consumer or are planning on creating an application, we encourage you to use an API key so that we can: - provide targeted help and support - increase your query throughput (by negotiation) - notify you directly of changes to the API - gather usage metrics to help improve the service    API requests that do not pass a valid API key/token are treated as unauthenticated. A maximum rate limit applies across all unauthenticated requests. This rate limit is in place to protect the service from overuse, resulting in unsustainable costs, or potential attack.  **Getting an API key**   [Create a DigitalNZ account](https://digitalnz.org/sign_up), log in and select \&quot;[my API key](https://digitalnz.org/api_keys/edit)\&quot; from your username drop-down menu (on the right hand side)&#39;. The key is a long string of jumbled letters and numbers (hash) that is unique to you. You are required to keep the key secret. (Refer to the [Developer API Terms of Use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) for more information).  **Using an API key**   When you make a call to the API you&#39;ll need to pass the key in a custom HTTP header: ‘Authentication-Token’. For example, a query using the ‘curl’ command might look like the following (where ‘{YOUR_API_KEY}’ is replaced with a valid API key):  &#x60;curl -H \&quot;Authentication-Token:{YOUR_API_KEY}\&quot; http://api.digitalnz.org/v3/records.json?text&#x3D;kiwi&#x60;  (optional)
     * @param fields Comma-separated whitelist of fields to be returned. The syntax *\&quot;&amp;fields&#x3D;verbose\&quot;* can be used to return the bulk of the fields, or you can customise which fields you are interested in, eg. *\&quot;&amp;fields&#x3D;id,title,subject,collection,landing_url,locations\&quot;*.  (optional)
     * @param mltFields Comma-separated list of fields used to evaluate relatedness. Available fields to compare are *title* and *subject*, eg *&amp;mlt_fields&#x3D;title,subject* or *&amp;mlt_fields&#x3D;title*.  (optional)
     * @param filtering More Like This (MLT) queries can be filtered in the same ways as regular searches, using the same syntax outined in the GET /records call above. This enables things like scoping the related records to only return Images eg *&amp;and[category]&#x3D;Images*, or to only show related records from a specific content partner eg *&amp;and[content_partner]&#x3D;Puke+Ariki*.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API Key (Authentication-Token) is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordsRecordIdMoreLikeThisFormatGetAsync(Integer recordId, String format, String authenticationToken, String fields, String mltFields, String filtering, final ApiCallback<RecordsRecordIdMoreLikeThisFormatGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordsRecordIdMoreLikeThisFormatGetValidateBeforeCall(recordId, format, authenticationToken, fields, mltFields, filtering, _callback);
        Type localVarReturnType = new TypeToken<RecordsRecordIdMoreLikeThisFormatGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
