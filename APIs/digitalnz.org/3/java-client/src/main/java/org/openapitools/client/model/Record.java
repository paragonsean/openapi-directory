/*
 * DigitalNZ API
 * OpenAPI specification of DigitalNZ's Record API.   For more information about the API see [digitalnz.org/developers](https://digitalnz.org/developers).   To learn more about the metadata/fields used in the API see the [Metadata Dictionary](https://docs.google.com/document/pub?id=1Z3I_ckQWjnQQ4SzpORbClcIXUheO-Jd4jt-oZFuMcoQ).   To get a sense of what content is available via the API take a look at the search feature on the [DigitalNZ website](https://digitalnz.org/records?text=all%20sorts&tab=Images).   The [terms of use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) specify how developers can use the DigitalNZ API. 
 *
 * The version of the OpenAPI document: 3
 * Contact: develop@digitalnz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RecordLocationsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * *NOTE:* There are a lot of fields that are very rarely used in DigitalNZ. For instance there are custom built fields that are only relevant, and only found on specific collections. The schema below focuses on the most common / well populated fields and does not show every possible field available for a single record.  
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:21.152471-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Record {
  /**
   * Gets or Sets category
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    NEWSPAPERS("Newspapers"),
    
    IMAGES("Images"),
    
    BOOKS("Books"),
    
    ARTICLES("Articles"),
    
    JOURNALS("Journals"),
    
    ARCHIVES("Archives"),
    
    AUDIO("Audio"),
    
    OTHER("Other"),
    
    MANUSCRIPTS("Manuscripts"),
    
    REFERENCE_SOURCES("Reference sources"),
    
    RESEARCH_PAPERS("Research papers"),
    
    VIDEOS("Videos"),
    
    MUSIC_SCORE("Music Score"),
    
    GROUPS("Groups"),
    
    DATA("Data"),
    
    WEBSITES("Websites"),
    
    SETS("Sets");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private List<CategoryEnum> category = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLLECTION = "collection";
  @SerializedName(SERIALIZED_NAME_COLLECTION)
  private List<String> collection = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLLECTION_TITLE = "collection_title";
  @SerializedName(SERIALIZED_NAME_COLLECTION_TITLE)
  private List<String> collectionTitle = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTENT_PARTNER = "content_partner";
  @SerializedName(SERIALIZED_NAME_CONTENT_PARTNER)
  private List<String> contentPartner = new ArrayList<>();

  /**
   * Gets or Sets copyright
   */
  @JsonAdapter(CopyrightEnum.Adapter.class)
  public enum CopyrightEnum {
    ALL_RIGHTS_RESERVED("All rights reserved"),
    
    SOME_RIGHTS_RESERVED("Some rights reserved"),
    
    NO_KNOWN_COPYRIGHT_RESTRICTIONS("No known copyright restrictions"),
    
    UNKNOWN("Unknown");

    private String value;

    CopyrightEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CopyrightEnum fromValue(String value) {
      for (CopyrightEnum b : CopyrightEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CopyrightEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CopyrightEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CopyrightEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CopyrightEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CopyrightEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COPYRIGHT = "copyright";
  @SerializedName(SERIALIZED_NAME_COPYRIGHT)
  private List<CopyrightEnum> copyright = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private List<String> creator = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private List<String> date = new ArrayList<>();

  public static final String SERIALIZED_NAME_DC_IDENTIFIER = "dc_identifier";
  @SerializedName(SERIALIZED_NAME_DC_IDENTIFIER)
  private List<String> dcIdentifier = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_COLLECTION = "display_collection";
  @SerializedName(SERIALIZED_NAME_DISPLAY_COLLECTION)
  private String displayCollection;

  public static final String SERIALIZED_NAME_DISPLAY_CONTENT_PARTNER = "display_content_partner";
  @SerializedName(SERIALIZED_NAME_DISPLAY_CONTENT_PARTNER)
  private String displayContentPartner;

  public static final String SERIALIZED_NAME_DISPLAY_DATE = "display_date";
  @SerializedName(SERIALIZED_NAME_DISPLAY_DATE)
  private String displayDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LANDING_URL = "landing_url";
  @SerializedName(SERIALIZED_NAME_LANDING_URL)
  private String landingUrl;

  public static final String SERIALIZED_NAME_LARGE_THUMBNAIL_URL = "large_thumbnail_url";
  @SerializedName(SERIALIZED_NAME_LARGE_THUMBNAIL_URL)
  private String largeThumbnailUrl;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<RecordLocationsInner> locations = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIMARY_COLLECTION = "primary_collection";
  @SerializedName(SERIALIZED_NAME_PRIMARY_COLLECTION)
  private List<String> primaryCollection = new ArrayList<>();

  public static final String SERIALIZED_NAME_RIGHTS = "rights";
  @SerializedName(SERIALIZED_NAME_RIGHTS)
  private String rights;

  public static final String SERIALIZED_NAME_RIGHTS_URL = "rights_url";
  @SerializedName(SERIALIZED_NAME_RIGHTS_URL)
  private List<String> rightsUrl = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_URL = "source_url";
  @SerializedName(SERIALIZED_NAME_SOURCE_URL)
  private String sourceUrl;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private List<String> subject = new ArrayList<>();

  public static final String SERIALIZED_NAME_THUMBNAIL_URL = "thumbnail_url";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_URL)
  private String thumbnailUrl;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  /**
   * Gets or Sets usage
   */
  @JsonAdapter(UsageEnum.Adapter.class)
  public enum UsageEnum {
    ALL_RIGHTS_RESERVED("All rights reserved"),
    
    SHARE("Share"),
    
    MODIFY("Modify"),
    
    USE_COMMERCIALLY("Use commercially"),
    
    UNKNOWN("Unknown");

    private String value;

    UsageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UsageEnum fromValue(String value) {
      for (UsageEnum b : UsageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UsageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UsageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UsageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UsageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UsageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private List<UsageEnum> usage = new ArrayList<>();

  public Record() {
  }

  public Record category(List<CategoryEnum> category) {
    this.category = category;
    return this;
  }

  public Record addCategoryItem(CategoryEnum categoryItem) {
    if (this.category == null) {
      this.category = new ArrayList<>();
    }
    this.category.add(categoryItem);
    return this;
  }

  /**
   * There will always be at least 1 human-readable category label in this field.
   * @return category
   */
  @javax.annotation.Nullable
  public List<CategoryEnum> getCategory() {
    return category;
  }

  public void setCategory(List<CategoryEnum> category) {
    this.category = category;
  }


  public Record collection(List<String> collection) {
    this.collection = collection;
    return this;
  }

  public Record addCollectionItem(String collectionItem) {
    if (this.collection == null) {
      this.collection = new ArrayList<>();
    }
    this.collection.add(collectionItem);
    return this;
  }

  /**
   * In addition to the top level *\&quot;display_collection\&quot;* above, this field can also contain sub-collections or groupings within the main collection.  
   * @return collection
   */
  @javax.annotation.Nullable
  public List<String> getCollection() {
    return collection;
  }

  public void setCollection(List<String> collection) {
    this.collection = collection;
  }


  public Record collectionTitle(List<String> collectionTitle) {
    this.collectionTitle = collectionTitle;
    return this;
  }

  public Record addCollectionTitleItem(String collectionTitleItem) {
    if (this.collectionTitle == null) {
      this.collectionTitle = new ArrayList<>();
    }
    this.collectionTitle.add(collectionTitleItem);
    return this;
  }

  /**
   * For historic reasons this is a duplicate of the previous field (\&quot;collection\&quot;).
   * @return collectionTitle
   */
  @javax.annotation.Nullable
  public List<String> getCollectionTitle() {
    return collectionTitle;
  }

  public void setCollectionTitle(List<String> collectionTitle) {
    this.collectionTitle = collectionTitle;
  }


  public Record contentPartner(List<String> contentPartner) {
    this.contentPartner = contentPartner;
    return this;
  }

  public Record addContentPartnerItem(String contentPartnerItem) {
    if (this.contentPartner == null) {
      this.contentPartner = new ArrayList<>();
    }
    this.contentPartner.add(contentPartnerItem);
    return this;
  }

  /**
   * Name of the organisation(s), institution(s), or individual(s) making content available through DigitalNZ. This metadata will be present on all records and is usually the name of the organisation that has agreed to the DigitalNZ Metadata Contribution Terms.
   * @return contentPartner
   */
  @javax.annotation.Nullable
  public List<String> getContentPartner() {
    return contentPartner;
  }

  public void setContentPartner(List<String> contentPartner) {
    this.contentPartner = contentPartner;
  }


  public Record copyright(List<CopyrightEnum> copyright) {
    this.copyright = copyright;
    return this;
  }

  public Record addCopyrightItem(CopyrightEnum copyrightItem) {
    if (this.copyright == null) {
      this.copyright = new ArrayList<>();
    }
    this.copyright.add(copyrightItem);
    return this;
  }

  /**
   * A copyright statement applying to the object referenced by this record. This field may be empty.
   * @return copyright
   */
  @javax.annotation.Nullable
  public List<CopyrightEnum> getCopyright() {
    return copyright;
  }

  public void setCopyright(List<CopyrightEnum> copyright) {
    this.copyright = copyright;
  }


  public Record createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The date the record was initially harvested into DigitalNZ.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Record creator(List<String> creator) {
    this.creator = creator;
    return this;
  }

  public Record addCreatorItem(String creatorItem) {
    if (this.creator == null) {
      this.creator = new ArrayList<>();
    }
    this.creator.add(creatorItem);
    return this;
  }

  /**
   * The name&#39;s of the people, organisations, institutions, services etc. who created the content (eg. the photographer, artist, writer or author).
   * @return creator
   */
  @javax.annotation.Nullable
  public List<String> getCreator() {
    return creator;
  }

  public void setCreator(List<String> creator) {
    this.creator = creator;
  }


  public Record date(List<String> date) {
    this.date = date;
    return this;
  }

  public Record addDateItem(String dateItem) {
    if (this.date == null) {
      this.date = new ArrayList<>();
    }
    this.date.add(dateItem);
    return this;
  }

  /**
   * Date information associated with this record (e.g. 1996-01-01T00:00:00.000Z). This field may be empty.
   * @return date
   */
  @javax.annotation.Nullable
  public List<String> getDate() {
    return date;
  }

  public void setDate(List<String> date) {
    this.date = date;
  }


  public Record dcIdentifier(List<String> dcIdentifier) {
    this.dcIdentifier = dcIdentifier;
    return this;
  }

  public Record addDcIdentifierItem(String dcIdentifierItem) {
    if (this.dcIdentifier == null) {
      this.dcIdentifier = new ArrayList<>();
    }
    this.dcIdentifier.add(dcIdentifierItem);
    return this;
  }

  /**
   * Identifiers relating to the content from the content partner&#39;s system.
   * @return dcIdentifier
   */
  @javax.annotation.Nullable
  public List<String> getDcIdentifier() {
    return dcIdentifier;
  }

  public void setDcIdentifier(List<String> dcIdentifier) {
    this.dcIdentifier = dcIdentifier;
  }


  public Record description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the record. Most records have a description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Record displayCollection(String displayCollection) {
    this.displayCollection = displayCollection;
    return this;
  }

  /**
   * The single main collection or website that the item belongs to. This metadata will be present on all records.
   * @return displayCollection
   */
  @javax.annotation.Nullable
  public String getDisplayCollection() {
    return displayCollection;
  }

  public void setDisplayCollection(String displayCollection) {
    this.displayCollection = displayCollection;
  }


  public Record displayContentPartner(String displayContentPartner) {
    this.displayContentPartner = displayContentPartner;
    return this;
  }

  /**
   * The main Content Partner, for cases when there are more than one. This metadata will be present on all records.
   * @return displayContentPartner
   */
  @javax.annotation.Nullable
  public String getDisplayContentPartner() {
    return displayContentPartner;
  }

  public void setDisplayContentPartner(String displayContentPartner) {
    this.displayContentPartner = displayContentPartner;
  }


  public Record displayDate(String displayDate) {
    this.displayDate = displayDate;
    return this;
  }

  /**
   * Where provided, this field contains a human readable version of the date information.
   * @return displayDate
   */
  @javax.annotation.Nullable
  public String getDisplayDate() {
    return displayDate;
  }

  public void setDisplayDate(String displayDate) {
    this.displayDate = displayDate;
  }


  public Record id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * All records have a unique identifier used within the DigitalNZ system.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Record landingUrl(String landingUrl) {
    this.landingUrl = landingUrl;
    return this;
  }

  /**
   * This field will always contain a URL of the item on the content partner&#39;s website.   *Note:* Please use the source_url when providing HTML links. 
   * @return landingUrl
   */
  @javax.annotation.Nullable
  public String getLandingUrl() {
    return landingUrl;
  }

  public void setLandingUrl(String landingUrl) {
    this.landingUrl = landingUrl;
  }


  public Record largeThumbnailUrl(String largeThumbnailUrl) {
    this.largeThumbnailUrl = largeThumbnailUrl;
    return this;
  }

  /**
   * URL for a larger thumbnail image with a width of up to 800px. NOTE - the API Terms do not extend rights to the use of images accessable throught the *large_thumbnail_url* field.
   * @return largeThumbnailUrl
   */
  @javax.annotation.Nullable
  public String getLargeThumbnailUrl() {
    return largeThumbnailUrl;
  }

  public void setLargeThumbnailUrl(String largeThumbnailUrl) {
    this.largeThumbnailUrl = largeThumbnailUrl;
  }


  public Record locations(List<RecordLocationsInner> locations) {
    this.locations = locations;
    return this;
  }

  public Record addLocationsItem(RecordLocationsInner locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * Geographical location information including latitude and longitude co-ordinates, text based location information, and details about where the location information comes from (eg. \&quot;Location provided by Museum of New Zealand Te Papa Tongarewa\&quot;) 
   * @return locations
   */
  @javax.annotation.Nullable
  public List<RecordLocationsInner> getLocations() {
    return locations;
  }

  public void setLocations(List<RecordLocationsInner> locations) {
    this.locations = locations;
  }


  public Record primaryCollection(List<String> primaryCollection) {
    this.primaryCollection = primaryCollection;
    return this;
  }

  public Record addPrimaryCollectionItem(String primaryCollectionItem) {
    if (this.primaryCollection == null) {
      this.primaryCollection = new ArrayList<>();
    }
    this.primaryCollection.add(primaryCollectionItem);
    return this;
  }

  /**
   * In most cases this is the same as *display_collection*, but will occasionally a second value.
   * @return primaryCollection
   */
  @javax.annotation.Nullable
  public List<String> getPrimaryCollection() {
    return primaryCollection;
  }

  public void setPrimaryCollection(List<String> primaryCollection) {
    this.primaryCollection = primaryCollection;
  }


  public Record rights(String rights) {
    this.rights = rights;
    return this;
  }

  /**
   * Rights information. Can be a rights statement explaining the rights of the record or a link to a webpage with more detailed rights information.
   * @return rights
   */
  @javax.annotation.Nullable
  public String getRights() {
    return rights;
  }

  public void setRights(String rights) {
    this.rights = rights;
  }


  public Record rightsUrl(List<String> rightsUrl) {
    this.rightsUrl = rightsUrl;
    return this;
  }

  public Record addRightsUrlItem(String rightsUrlItem) {
    if (this.rightsUrl == null) {
      this.rightsUrl = new ArrayList<>();
    }
    this.rightsUrl.add(rightsUrlItem);
    return this;
  }

  /**
   * An array of HTTP URLs resolving to a rights statement or terms of use information for the resource.
   * @return rightsUrl
   */
  @javax.annotation.Nullable
  public List<String> getRightsUrl() {
    return rightsUrl;
  }

  public void setRightsUrl(List<String> rightsUrl) {
    this.rightsUrl = rightsUrl;
  }


  public Record sourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  /**
   * This URL will always be present and provides a redirect to the landing_url. This link should be used as the main click-through to the content. Passing users through this link allows DNZ to count the number of click-throughs, as well as trigger link-checking activities that help clean up stale links in DigitalNZ.
   * @return sourceUrl
   */
  @javax.annotation.Nullable
  public String getSourceUrl() {
    return sourceUrl;
  }

  public void setSourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
  }


  public Record subject(List<String> subject) {
    this.subject = subject;
    return this;
  }

  public Record addSubjectItem(String subjectItem) {
    if (this.subject == null) {
      this.subject = new ArrayList<>();
    }
    this.subject.add(subjectItem);
    return this;
  }

  /**
   * Keywords about the content.
   * @return subject
   */
  @javax.annotation.Nullable
  public List<String> getSubject() {
    return subject;
  }

  public void setSubject(List<String> subject) {
    this.subject = subject;
  }


  public Record thumbnailUrl(String thumbnailUrl) {
    this.thumbnailUrl = thumbnailUrl;
    return this;
  }

  /**
   * URL for a thumbnail image of the content. The size varies depending on what is available but we aim for a width of 250px. This field is mostly populated on records with a &#39;category&#39; of &#39;Images&#39;, but is also sometimes found on others (eg. \&quot;Videos\&quot;). 
   * @return thumbnailUrl
   */
  @javax.annotation.Nullable
  public String getThumbnailUrl() {
    return thumbnailUrl;
  }

  public void setThumbnailUrl(String thumbnailUrl) {
    this.thumbnailUrl = thumbnailUrl;
  }


  public Record title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the record. All records should have a title.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Record updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The date the record was last updated/re-harvested into DigitalNZ.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Record usage(List<UsageEnum> usage) {
    this.usage = usage;
    return this;
  }

  public Record addUsageItem(UsageEnum usageItem) {
    if (this.usage == null) {
      this.usage = new ArrayList<>();
    }
    this.usage.add(usageItem);
    return this;
  }

  /**
   * This field is always present and contains human-understandable information about how the item may be used based on its copyright/license.
   * @return usage
   */
  @javax.annotation.Nullable
  public List<UsageEnum> getUsage() {
    return usage;
  }

  public void setUsage(List<UsageEnum> usage) {
    this.usage = usage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Record record = (Record) o;
    return Objects.equals(this.category, record.category) &&
        Objects.equals(this.collection, record.collection) &&
        Objects.equals(this.collectionTitle, record.collectionTitle) &&
        Objects.equals(this.contentPartner, record.contentPartner) &&
        Objects.equals(this.copyright, record.copyright) &&
        Objects.equals(this.createdAt, record.createdAt) &&
        Objects.equals(this.creator, record.creator) &&
        Objects.equals(this.date, record.date) &&
        Objects.equals(this.dcIdentifier, record.dcIdentifier) &&
        Objects.equals(this.description, record.description) &&
        Objects.equals(this.displayCollection, record.displayCollection) &&
        Objects.equals(this.displayContentPartner, record.displayContentPartner) &&
        Objects.equals(this.displayDate, record.displayDate) &&
        Objects.equals(this.id, record.id) &&
        Objects.equals(this.landingUrl, record.landingUrl) &&
        Objects.equals(this.largeThumbnailUrl, record.largeThumbnailUrl) &&
        Objects.equals(this.locations, record.locations) &&
        Objects.equals(this.primaryCollection, record.primaryCollection) &&
        Objects.equals(this.rights, record.rights) &&
        Objects.equals(this.rightsUrl, record.rightsUrl) &&
        Objects.equals(this.sourceUrl, record.sourceUrl) &&
        Objects.equals(this.subject, record.subject) &&
        Objects.equals(this.thumbnailUrl, record.thumbnailUrl) &&
        Objects.equals(this.title, record.title) &&
        Objects.equals(this.updatedAt, record.updatedAt) &&
        Objects.equals(this.usage, record.usage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, collection, collectionTitle, contentPartner, copyright, createdAt, creator, date, dcIdentifier, description, displayCollection, displayContentPartner, displayDate, id, landingUrl, largeThumbnailUrl, locations, primaryCollection, rights, rightsUrl, sourceUrl, subject, thumbnailUrl, title, updatedAt, usage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Record {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    collection: ").append(toIndentedString(collection)).append("\n");
    sb.append("    collectionTitle: ").append(toIndentedString(collectionTitle)).append("\n");
    sb.append("    contentPartner: ").append(toIndentedString(contentPartner)).append("\n");
    sb.append("    copyright: ").append(toIndentedString(copyright)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    dcIdentifier: ").append(toIndentedString(dcIdentifier)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayCollection: ").append(toIndentedString(displayCollection)).append("\n");
    sb.append("    displayContentPartner: ").append(toIndentedString(displayContentPartner)).append("\n");
    sb.append("    displayDate: ").append(toIndentedString(displayDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    landingUrl: ").append(toIndentedString(landingUrl)).append("\n");
    sb.append("    largeThumbnailUrl: ").append(toIndentedString(largeThumbnailUrl)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    primaryCollection: ").append(toIndentedString(primaryCollection)).append("\n");
    sb.append("    rights: ").append(toIndentedString(rights)).append("\n");
    sb.append("    rightsUrl: ").append(toIndentedString(rightsUrl)).append("\n");
    sb.append("    sourceUrl: ").append(toIndentedString(sourceUrl)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    thumbnailUrl: ").append(toIndentedString(thumbnailUrl)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("collection");
    openapiFields.add("collection_title");
    openapiFields.add("content_partner");
    openapiFields.add("copyright");
    openapiFields.add("created_at");
    openapiFields.add("creator");
    openapiFields.add("date");
    openapiFields.add("dc_identifier");
    openapiFields.add("description");
    openapiFields.add("display_collection");
    openapiFields.add("display_content_partner");
    openapiFields.add("display_date");
    openapiFields.add("id");
    openapiFields.add("landing_url");
    openapiFields.add("large_thumbnail_url");
    openapiFields.add("locations");
    openapiFields.add("primary_collection");
    openapiFields.add("rights");
    openapiFields.add("rights_url");
    openapiFields.add("source_url");
    openapiFields.add("subject");
    openapiFields.add("thumbnail_url");
    openapiFields.add("title");
    openapiFields.add("updated_at");
    openapiFields.add("usage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Record
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Record.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Record is not found in the empty JSON string", Record.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Record.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Record` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull() && !jsonObj.get("category").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be an array in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("collection") != null && !jsonObj.get("collection").isJsonNull() && !jsonObj.get("collection").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `collection` to be an array in the JSON string but got `%s`", jsonObj.get("collection").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("collection_title") != null && !jsonObj.get("collection_title").isJsonNull() && !jsonObj.get("collection_title").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `collection_title` to be an array in the JSON string but got `%s`", jsonObj.get("collection_title").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("content_partner") != null && !jsonObj.get("content_partner").isJsonNull() && !jsonObj.get("content_partner").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_partner` to be an array in the JSON string but got `%s`", jsonObj.get("content_partner").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("copyright") != null && !jsonObj.get("copyright").isJsonNull() && !jsonObj.get("copyright").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `copyright` to be an array in the JSON string but got `%s`", jsonObj.get("copyright").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("creator") != null && !jsonObj.get("creator").isJsonNull() && !jsonObj.get("creator").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `creator` to be an array in the JSON string but got `%s`", jsonObj.get("creator").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull() && !jsonObj.get("date").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be an array in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dc_identifier") != null && !jsonObj.get("dc_identifier").isJsonNull() && !jsonObj.get("dc_identifier").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dc_identifier` to be an array in the JSON string but got `%s`", jsonObj.get("dc_identifier").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("display_collection") != null && !jsonObj.get("display_collection").isJsonNull()) && !jsonObj.get("display_collection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_collection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_collection").toString()));
      }
      if ((jsonObj.get("display_content_partner") != null && !jsonObj.get("display_content_partner").isJsonNull()) && !jsonObj.get("display_content_partner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_content_partner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_content_partner").toString()));
      }
      if ((jsonObj.get("display_date") != null && !jsonObj.get("display_date").isJsonNull()) && !jsonObj.get("display_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_date").toString()));
      }
      if ((jsonObj.get("landing_url") != null && !jsonObj.get("landing_url").isJsonNull()) && !jsonObj.get("landing_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `landing_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("landing_url").toString()));
      }
      if ((jsonObj.get("large_thumbnail_url") != null && !jsonObj.get("large_thumbnail_url").isJsonNull()) && !jsonObj.get("large_thumbnail_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `large_thumbnail_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("large_thumbnail_url").toString()));
      }
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull()) {
        JsonArray jsonArraylocations = jsonObj.getAsJsonArray("locations");
        if (jsonArraylocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
          }

          // validate the optional field `locations` (array)
          for (int i = 0; i < jsonArraylocations.size(); i++) {
            RecordLocationsInner.validateJsonElement(jsonArraylocations.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("primary_collection") != null && !jsonObj.get("primary_collection").isJsonNull() && !jsonObj.get("primary_collection").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_collection` to be an array in the JSON string but got `%s`", jsonObj.get("primary_collection").toString()));
      }
      if ((jsonObj.get("rights") != null && !jsonObj.get("rights").isJsonNull()) && !jsonObj.get("rights").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rights` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rights").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rights_url") != null && !jsonObj.get("rights_url").isJsonNull() && !jsonObj.get("rights_url").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rights_url` to be an array in the JSON string but got `%s`", jsonObj.get("rights_url").toString()));
      }
      if ((jsonObj.get("source_url") != null && !jsonObj.get("source_url").isJsonNull()) && !jsonObj.get("source_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull() && !jsonObj.get("subject").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be an array in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("thumbnail_url") != null && !jsonObj.get("thumbnail_url").isJsonNull()) && !jsonObj.get("thumbnail_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnail_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnail_url").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("usage") != null && !jsonObj.get("usage").isJsonNull() && !jsonObj.get("usage").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `usage` to be an array in the JSON string but got `%s`", jsonObj.get("usage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Record.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Record' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Record> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Record.class));

       return (TypeAdapter<T>) new TypeAdapter<Record>() {
           @Override
           public void write(JsonWriter out, Record value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Record read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Record given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Record
   * @throws IOException if the JSON string is invalid with respect to Record
   */
  public static Record fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Record.class);
  }

  /**
   * Convert an instance of Record to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

