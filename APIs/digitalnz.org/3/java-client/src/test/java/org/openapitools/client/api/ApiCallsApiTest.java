/*
 * DigitalNZ API
 * OpenAPI specification of DigitalNZ's Record API.   For more information about the API see [digitalnz.org/developers](https://digitalnz.org/developers).   To learn more about the metadata/fields used in the API see the [Metadata Dictionary](https://docs.google.com/document/pub?id=1Z3I_ckQWjnQQ4SzpORbClcIXUheO-Jd4jt-oZFuMcoQ).   To get a sense of what content is available via the API take a look at the search feature on the [DigitalNZ website](https://digitalnz.org/records?text=all%20sorts&tab=Images).   The [terms of use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) specify how developers can use the DigitalNZ API. 
 *
 * The version of the OpenAPI document: 3
 * Contact: develop@digitalnz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Record;
import org.openapitools.client.model.RecordsFormatGet200Response;
import org.openapitools.client.model.RecordsRecordIdMoreLikeThisFormatGet200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApiCallsApi
 */
@Disabled
public class ApiCallsApiTest {

    private final ApiCallsApi api = new ApiCallsApi();

    /**
     * Run queries against DigitalNZ metadata search service.
     *
     * This is the main search endpoint allowing queries against the records database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recordsFormatGetTest() throws ApiException {
        String format = null;
        String authenticationToken = null;
        String text = null;
        String andCategory = null;
        String andContentPartner = null;
        String andPrimaryCollection = null;
        String andCollection = null;
        String andUsage = null;
        String andSubject = null;
        String andDcType = null;
        String andFormat = null;
        String andPlacename = null;
        String andCreator = null;
        String andTitle = null;
        String andDate = null;
        String andYear = null;
        String andDecade = null;
        String andCentury = null;
        String withoutLeftCurlyBracketFilterFieldRightCurlyBracket = null;
        String andOrLeftCurlyBracketFilterFieldRightCurlyBracket = null;
        Boolean andIsCommercialUse = null;
        String andHasLargeThumbnailUrl = null;
        Boolean andHasLatLng = null;
        String geoBbox = null;
        String fields = null;
        String sort = null;
        String direction = null;
        Integer page = null;
        Integer perPage = null;
        List<String> facets = null;
        Integer facetsPage = null;
        Integer facetsPerPage = null;
        Boolean excludeFiltersFromFacets = null;
        RecordsFormatGet200Response response = api.recordsFormatGet(format, authenticationToken, text, andCategory, andContentPartner, andPrimaryCollection, andCollection, andUsage, andSubject, andDcType, andFormat, andPlacename, andCreator, andTitle, andDate, andYear, andDecade, andCentury, withoutLeftCurlyBracketFilterFieldRightCurlyBracket, andOrLeftCurlyBracketFilterFieldRightCurlyBracket, andIsCommercialUse, andHasLargeThumbnailUrl, andHasLatLng, geoBbox, fields, sort, direction, page, perPage, facets, facetsPage, facetsPerPage, excludeFiltersFromFacets);
        // TODO: test validations
    }

    /**
     * View metadata associated with a single record.
     *
     * If you know its &#x60;record_id&#x60; you can use this endpoint to view all metadata associated with that specific record. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recordsRecordIdFormatGetTest() throws ApiException {
        Integer recordId = null;
        String format = null;
        String authenticationToken = null;
        String fields = null;
        Record response = api.recordsRecordIdFormatGet(recordId, format, authenticationToken, fields);
        // TODO: test validations
    }

    /**
     * The \&quot;More Like This\&quot; call returns similar records to the specified ID. 
     *
     * This feature returns a set of search results that are similar (ie have similar metadata) to a specific record. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recordsRecordIdMoreLikeThisFormatGetTest() throws ApiException {
        Integer recordId = null;
        String format = null;
        String authenticationToken = null;
        String fields = null;
        String mltFields = null;
        String filtering = null;
        RecordsRecordIdMoreLikeThisFormatGet200Response response = api.recordsRecordIdMoreLikeThisFormatGet(recordId, format, authenticationToken, fields, mltFields, filtering);
        // TODO: test validations
    }

}
