/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GroupV2GetUserClanInviteSetting200Response from '../model/GroupV2GetUserClanInviteSetting200Response';
import TokensGetBungieRewardsList200Response from '../model/TokensGetBungieRewardsList200Response';
import TokensGetPartnerOfferSkuHistory200Response from '../model/TokensGetPartnerOfferSkuHistory200Response';
import TokensGetPartnerRewardHistory200Response from '../model/TokensGetPartnerRewardHistory200Response';

/**
* Tokens service.
* @module api/TokensApi
* @version 2.18.0
*/
export default class TokensApi {

    /**
    * Constructs a new TokensApi. 
    * @alias module:api/TokensApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the tokensApplyMissingPartnerOffersWithoutClaim operation.
     * @callback module:api/TokensApi~tokensApplyMissingPartnerOffersWithoutClaimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetUserClanInviteSetting200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply a partner offer to the targeted user. This endpoint does not claim a new offer, but any already claimed offers will be applied to the game if not already.
     * @param {Number} partnerApplicationId The partner application identifier.
     * @param {Number} targetBnetMembershipId The bungie.net user to apply missing offers to. If not self, elevated permissions are required.
     * @param {module:api/TokensApi~tokensApplyMissingPartnerOffersWithoutClaimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetUserClanInviteSetting200Response}
     */
    tokensApplyMissingPartnerOffersWithoutClaim(partnerApplicationId, targetBnetMembershipId, callback) {
      let postBody = null;
      // verify the required parameter 'partnerApplicationId' is set
      if (partnerApplicationId === undefined || partnerApplicationId === null) {
        throw new Error("Missing the required parameter 'partnerApplicationId' when calling tokensApplyMissingPartnerOffersWithoutClaim");
      }
      // verify the required parameter 'targetBnetMembershipId' is set
      if (targetBnetMembershipId === undefined || targetBnetMembershipId === null) {
        throw new Error("Missing the required parameter 'targetBnetMembershipId' when calling tokensApplyMissingPartnerOffersWithoutClaim");
      }

      let pathParams = {
        'partnerApplicationId': partnerApplicationId,
        'targetBnetMembershipId': targetBnetMembershipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetUserClanInviteSetting200Response;
      return this.apiClient.callApi(
        '/Tokens/Partner/ApplyMissingOffers/{partnerApplicationId}/{targetBnetMembershipId}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tokensClaimPartnerOffer operation.
     * @callback module:api/TokensApi~tokensClaimPartnerOfferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetUserClanInviteSetting200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim a partner offer as the authenticated user.
     * @param {module:api/TokensApi~tokensClaimPartnerOfferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetUserClanInviteSetting200Response}
     */
    tokensClaimPartnerOffer(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetUserClanInviteSetting200Response;
      return this.apiClient.callApi(
        '/Tokens/Partner/ClaimOffer/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tokensForceDropsRepair operation.
     * @callback module:api/TokensApi~tokensForceDropsRepairCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetUserClanInviteSetting200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Twitch Drops self-repair function - scans twitch for drops not marked as fulfilled and resyncs them.
     * @param {module:api/TokensApi~tokensForceDropsRepairCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetUserClanInviteSetting200Response}
     */
    tokensForceDropsRepair(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetUserClanInviteSetting200Response;
      return this.apiClient.callApi(
        '/Tokens/Partner/ForceDropsRepair/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tokensGetBungieRewardsForPlatformUser operation.
     * @callback module:api/TokensApi~tokensGetBungieRewardsForPlatformUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokensGetBungieRewardsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the bungie rewards for the targeted user when a platform membership Id and Type are used.
     * @param {Number} membershipId users platform membershipId for requested user rewards. If not self, elevated permissions are required.
     * @param {Number} membershipType The target Destiny 2 membership type.
     * @param {module:api/TokensApi~tokensGetBungieRewardsForPlatformUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokensGetBungieRewardsList200Response}
     */
    tokensGetBungieRewardsForPlatformUser(membershipId, membershipType, callback) {
      let postBody = null;
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling tokensGetBungieRewardsForPlatformUser");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling tokensGetBungieRewardsForPlatformUser");
      }

      let pathParams = {
        'membershipId': membershipId,
        'membershipType': membershipType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TokensGetBungieRewardsList200Response;
      return this.apiClient.callApi(
        '/Tokens/Rewards/GetRewardsForPlatformUser/{membershipId}/{membershipType}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tokensGetBungieRewardsForUser operation.
     * @callback module:api/TokensApi~tokensGetBungieRewardsForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokensGetBungieRewardsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the bungie rewards for the targeted user.
     * @param {Number} membershipId bungie.net user membershipId for requested user rewards. If not self, elevated permissions are required.
     * @param {module:api/TokensApi~tokensGetBungieRewardsForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokensGetBungieRewardsList200Response}
     */
    tokensGetBungieRewardsForUser(membershipId, callback) {
      let postBody = null;
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling tokensGetBungieRewardsForUser");
      }

      let pathParams = {
        'membershipId': membershipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TokensGetBungieRewardsList200Response;
      return this.apiClient.callApi(
        '/Tokens/Rewards/GetRewardsForUser/{membershipId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tokensGetBungieRewardsList operation.
     * @callback module:api/TokensApi~tokensGetBungieRewardsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokensGetBungieRewardsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of the current bungie rewards
     * @param {module:api/TokensApi~tokensGetBungieRewardsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokensGetBungieRewardsList200Response}
     */
    tokensGetBungieRewardsList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TokensGetBungieRewardsList200Response;
      return this.apiClient.callApi(
        '/Tokens/Rewards/BungieRewards/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tokensGetPartnerOfferSkuHistory operation.
     * @callback module:api/TokensApi~tokensGetPartnerOfferSkuHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokensGetPartnerOfferSkuHistory200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the partner sku and offer history of the targeted user. Elevated permissions are required to see users that are not yourself.
     * @param {Number} partnerApplicationId The partner application identifier.
     * @param {Number} targetBnetMembershipId The bungie.net user to apply missing offers to. If not self, elevated permissions are required.
     * @param {module:api/TokensApi~tokensGetPartnerOfferSkuHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokensGetPartnerOfferSkuHistory200Response}
     */
    tokensGetPartnerOfferSkuHistory(partnerApplicationId, targetBnetMembershipId, callback) {
      let postBody = null;
      // verify the required parameter 'partnerApplicationId' is set
      if (partnerApplicationId === undefined || partnerApplicationId === null) {
        throw new Error("Missing the required parameter 'partnerApplicationId' when calling tokensGetPartnerOfferSkuHistory");
      }
      // verify the required parameter 'targetBnetMembershipId' is set
      if (targetBnetMembershipId === undefined || targetBnetMembershipId === null) {
        throw new Error("Missing the required parameter 'targetBnetMembershipId' when calling tokensGetPartnerOfferSkuHistory");
      }

      let pathParams = {
        'partnerApplicationId': partnerApplicationId,
        'targetBnetMembershipId': targetBnetMembershipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TokensGetPartnerOfferSkuHistory200Response;
      return this.apiClient.callApi(
        '/Tokens/Partner/History/{partnerApplicationId}/{targetBnetMembershipId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tokensGetPartnerRewardHistory operation.
     * @callback module:api/TokensApi~tokensGetPartnerRewardHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokensGetPartnerRewardHistory200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the partner rewards history of the targeted user, both partner offers and Twitch drops.
     * @param {Number} partnerApplicationId The partner application identifier.
     * @param {Number} targetBnetMembershipId The bungie.net user to return reward history for.
     * @param {module:api/TokensApi~tokensGetPartnerRewardHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokensGetPartnerRewardHistory200Response}
     */
    tokensGetPartnerRewardHistory(partnerApplicationId, targetBnetMembershipId, callback) {
      let postBody = null;
      // verify the required parameter 'partnerApplicationId' is set
      if (partnerApplicationId === undefined || partnerApplicationId === null) {
        throw new Error("Missing the required parameter 'partnerApplicationId' when calling tokensGetPartnerRewardHistory");
      }
      // verify the required parameter 'targetBnetMembershipId' is set
      if (targetBnetMembershipId === undefined || targetBnetMembershipId === null) {
        throw new Error("Missing the required parameter 'targetBnetMembershipId' when calling tokensGetPartnerRewardHistory");
      }

      let pathParams = {
        'partnerApplicationId': partnerApplicationId,
        'targetBnetMembershipId': targetBnetMembershipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TokensGetPartnerRewardHistory200Response;
      return this.apiClient.callApi(
        '/Tokens/Partner/History/{targetBnetMembershipId}/Application/{partnerApplicationId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
