/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Destiny2AwaGetActionToken200Response from '../model/Destiny2AwaGetActionToken200Response';
import Destiny2AwaInitializeRequest200Response from '../model/Destiny2AwaInitializeRequest200Response';
import Destiny2EquipItem200Response from '../model/Destiny2EquipItem200Response';
import Destiny2EquipItems200Response from '../model/Destiny2EquipItems200Response';
import Destiny2GetActivityHistory200Response from '../model/Destiny2GetActivityHistory200Response';
import Destiny2GetCharacter200Response from '../model/Destiny2GetCharacter200Response';
import Destiny2GetClanAggregateStats200Response from '../model/Destiny2GetClanAggregateStats200Response';
import Destiny2GetClanBannerSource200Response from '../model/Destiny2GetClanBannerSource200Response';
import Destiny2GetClanLeaderboards200Response from '../model/Destiny2GetClanLeaderboards200Response';
import Destiny2GetClanWeeklyRewardState200Response from '../model/Destiny2GetClanWeeklyRewardState200Response';
import Destiny2GetCollectibleNodeDetails200Response from '../model/Destiny2GetCollectibleNodeDetails200Response';
import Destiny2GetDestinyAggregateActivityStats200Response from '../model/Destiny2GetDestinyAggregateActivityStats200Response';
import Destiny2GetDestinyEntityDefinition200Response from '../model/Destiny2GetDestinyEntityDefinition200Response';
import Destiny2GetDestinyManifest200Response from '../model/Destiny2GetDestinyManifest200Response';
import Destiny2GetHistoricalStats200Response from '../model/Destiny2GetHistoricalStats200Response';
import Destiny2GetHistoricalStatsDefinition200Response from '../model/Destiny2GetHistoricalStatsDefinition200Response';
import Destiny2GetHistoricalStatsForAccount200Response from '../model/Destiny2GetHistoricalStatsForAccount200Response';
import Destiny2GetItem200Response from '../model/Destiny2GetItem200Response';
import Destiny2GetLinkedProfiles200Response from '../model/Destiny2GetLinkedProfiles200Response';
import Destiny2GetPostGameCarnageReport200Response from '../model/Destiny2GetPostGameCarnageReport200Response';
import Destiny2GetProfile200Response from '../model/Destiny2GetProfile200Response';
import Destiny2GetPublicMilestoneContent200Response from '../model/Destiny2GetPublicMilestoneContent200Response';
import Destiny2GetPublicMilestones200Response from '../model/Destiny2GetPublicMilestones200Response';
import Destiny2GetPublicVendors200Response from '../model/Destiny2GetPublicVendors200Response';
import Destiny2GetUniqueWeaponHistory200Response from '../model/Destiny2GetUniqueWeaponHistory200Response';
import Destiny2GetVendor200Response from '../model/Destiny2GetVendor200Response';
import Destiny2GetVendors200Response from '../model/Destiny2GetVendors200Response';
import Destiny2InsertSocketPlug200Response from '../model/Destiny2InsertSocketPlug200Response';
import Destiny2SearchDestinyEntities200Response from '../model/Destiny2SearchDestinyEntities200Response';
import Destiny2SearchDestinyPlayerByBungieName200Response from '../model/Destiny2SearchDestinyPlayerByBungieName200Response';

/**
* Destiny2 service.
* @module api/Destiny2Api
* @version 2.18.0
*/
export default class Destiny2Api {

    /**
    * Constructs a new Destiny2Api. 
    * @alias module:api/Destiny2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the destiny2AwaGetActionToken operation.
     * @callback module:api/Destiny2Api~destiny2AwaGetActionTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2AwaGetActionToken200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the action token if user approves the request.
     * @param {String} correlationId The identifier for the advanced write action request.
     * @param {module:api/Destiny2Api~destiny2AwaGetActionTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2AwaGetActionToken200Response}
     */
    destiny2AwaGetActionToken(correlationId, callback) {
      let postBody = null;
      // verify the required parameter 'correlationId' is set
      if (correlationId === undefined || correlationId === null) {
        throw new Error("Missing the required parameter 'correlationId' when calling destiny2AwaGetActionToken");
      }

      let pathParams = {
        'correlationId': correlationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2AwaGetActionToken200Response;
      return this.apiClient.callApi(
        '/Destiny2/Awa/GetActionToken/{correlationId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2AwaInitializeRequest operation.
     * @callback module:api/Destiny2Api~destiny2AwaInitializeRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2AwaInitializeRequest200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initialize a request to perform an advanced write action.
     * @param {module:api/Destiny2Api~destiny2AwaInitializeRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2AwaInitializeRequest200Response}
     */
    destiny2AwaInitializeRequest(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2AwaInitializeRequest200Response;
      return this.apiClient.callApi(
        '/Destiny2/Awa/Initialize/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2AwaProvideAuthorizationResult operation.
     * @callback module:api/Destiny2Api~destiny2AwaProvideAuthorizationResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2EquipItem200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
     * @param {module:api/Destiny2Api~destiny2AwaProvideAuthorizationResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2EquipItem200Response}
     */
    destiny2AwaProvideAuthorizationResult(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2EquipItem200Response;
      return this.apiClient.callApi(
        '/Destiny2/Awa/AwaProvideAuthorizationResult/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2ClearLoadout operation.
     * @callback module:api/Destiny2Api~destiny2ClearLoadoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2EquipItem200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear the identifiers and items of a loadout.
     * @param {module:api/Destiny2Api~destiny2ClearLoadoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2EquipItem200Response}
     */
    destiny2ClearLoadout(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2EquipItem200Response;
      return this.apiClient.callApi(
        '/Destiny2/Actions/Loadouts/ClearLoadout/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2EquipItem operation.
     * @callback module:api/Destiny2Api~destiny2EquipItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2EquipItem200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
     * @param {module:api/Destiny2Api~destiny2EquipItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2EquipItem200Response}
     */
    destiny2EquipItem(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2EquipItem200Response;
      return this.apiClient.callApi(
        '/Destiny2/Actions/Items/EquipItem/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2EquipItems operation.
     * @callback module:api/Destiny2Api~destiny2EquipItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2EquipItems200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
     * @param {module:api/Destiny2Api~destiny2EquipItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2EquipItems200Response}
     */
    destiny2EquipItems(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2EquipItems200Response;
      return this.apiClient.callApi(
        '/Destiny2/Actions/Items/EquipItems/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2EquipLoadout operation.
     * @callback module:api/Destiny2Api~destiny2EquipLoadoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2EquipItem200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Equip a loadout. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
     * @param {module:api/Destiny2Api~destiny2EquipLoadoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2EquipItem200Response}
     */
    destiny2EquipLoadout(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2EquipItem200Response;
      return this.apiClient.callApi(
        '/Destiny2/Actions/Loadouts/EquipLoadout/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetActivityHistory operation.
     * @callback module:api/Destiny2Api~destiny2GetActivityHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetActivityHistory200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets activity history stats for indicated character.
     * @param {Number} characterId The id of the character to retrieve.
     * @param {Number} destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param {Number} membershipType A valid non-BungieNet membership type.
     * @param {Object} opts Optional parameters
     * @param {Number} [count] Number of rows to return
     * @param {Number} [mode] A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation.
     * @param {Number} [page] Page number to return, starting with 0.
     * @param {module:api/Destiny2Api~destiny2GetActivityHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetActivityHistory200Response}
     */
    destiny2GetActivityHistory(characterId, destinyMembershipId, membershipType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling destiny2GetActivityHistory");
      }
      // verify the required parameter 'destinyMembershipId' is set
      if (destinyMembershipId === undefined || destinyMembershipId === null) {
        throw new Error("Missing the required parameter 'destinyMembershipId' when calling destiny2GetActivityHistory");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling destiny2GetActivityHistory");
      }

      let pathParams = {
        'characterId': characterId,
        'destinyMembershipId': destinyMembershipId,
        'membershipType': membershipType
      };
      let queryParams = {
        'count': opts['count'],
        'mode': opts['mode'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetActivityHistory200Response;
      return this.apiClient.callApi(
        '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/Activities/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetCharacter operation.
     * @callback module:api/Destiny2Api~destiny2GetCharacterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetCharacter200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns character information for the supplied character.
     * @param {Number} characterId ID of the character.
     * @param {Number} destinyMembershipId Destiny membership ID.
     * @param {Number} membershipType A valid non-BungieNet membership type.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [components] A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
     * @param {module:api/Destiny2Api~destiny2GetCharacterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetCharacter200Response}
     */
    destiny2GetCharacter(characterId, destinyMembershipId, membershipType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling destiny2GetCharacter");
      }
      // verify the required parameter 'destinyMembershipId' is set
      if (destinyMembershipId === undefined || destinyMembershipId === null) {
        throw new Error("Missing the required parameter 'destinyMembershipId' when calling destiny2GetCharacter");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling destiny2GetCharacter");
      }

      let pathParams = {
        'characterId': characterId,
        'destinyMembershipId': destinyMembershipId,
        'membershipType': membershipType
      };
      let queryParams = {
        'components': this.apiClient.buildCollectionParam(opts['components'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetCharacter200Response;
      return this.apiClient.callApi(
        '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetClanAggregateStats operation.
     * @callback module:api/Destiny2Api~destiny2GetClanAggregateStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetClanAggregateStats200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param {Number} groupId Group ID of the clan whose leaderboards you wish to fetch.
     * @param {Object} opts Optional parameters
     * @param {String} [modes] List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
     * @param {module:api/Destiny2Api~destiny2GetClanAggregateStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetClanAggregateStats200Response}
     */
    destiny2GetClanAggregateStats(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling destiny2GetClanAggregateStats");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        'modes': opts['modes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetClanAggregateStats200Response;
      return this.apiClient.callApi(
        '/Destiny2/Stats/AggregateClanStats/{groupId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetClanBannerSource operation.
     * @callback module:api/Destiny2Api~destiny2GetClanBannerSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetClanBannerSource200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the dictionary of values for the Clan Banner
     * @param {module:api/Destiny2Api~destiny2GetClanBannerSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetClanBannerSource200Response}
     */
    destiny2GetClanBannerSource(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetClanBannerSource200Response;
      return this.apiClient.callApi(
        '/Destiny2/Clan/ClanBannerDictionary/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetClanLeaderboards operation.
     * @callback module:api/Destiny2Api~destiny2GetClanLeaderboardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetClanLeaderboards200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param {Number} groupId Group ID of the clan whose leaderboards you wish to fetch.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxtop] Maximum number of top players to return. Use a large number to get entire leaderboard.
     * @param {String} [modes] List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
     * @param {String} [statid] ID of stat to return rather than returning all Leaderboard stats.
     * @param {module:api/Destiny2Api~destiny2GetClanLeaderboardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetClanLeaderboards200Response}
     */
    destiny2GetClanLeaderboards(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling destiny2GetClanLeaderboards");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        'maxtop': opts['maxtop'],
        'modes': opts['modes'],
        'statid': opts['statid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetClanLeaderboards200Response;
      return this.apiClient.callApi(
        '/Destiny2/Stats/Leaderboards/Clans/{groupId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetClanWeeklyRewardState operation.
     * @callback module:api/Destiny2Api~destiny2GetClanWeeklyRewardStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetClanWeeklyRewardState200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
     * @param {Number} groupId A valid group id of clan.
     * @param {module:api/Destiny2Api~destiny2GetClanWeeklyRewardStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetClanWeeklyRewardState200Response}
     */
    destiny2GetClanWeeklyRewardState(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling destiny2GetClanWeeklyRewardState");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetClanWeeklyRewardState200Response;
      return this.apiClient.callApi(
        '/Destiny2/Clan/{groupId}/WeeklyRewardState/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetCollectibleNodeDetails operation.
     * @callback module:api/Destiny2Api~destiny2GetCollectibleNodeDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetCollectibleNodeDetails200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
     * @param {Number} characterId The Destiny Character ID of the character for whom we're getting collectible detail info.
     * @param {Number} collectiblePresentationNodeHash The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node.
     * @param {Number} destinyMembershipId Destiny membership ID of another user. You may be denied.
     * @param {Number} membershipType A valid non-BungieNet membership type.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [components] A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
     * @param {module:api/Destiny2Api~destiny2GetCollectibleNodeDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetCollectibleNodeDetails200Response}
     */
    destiny2GetCollectibleNodeDetails(characterId, collectiblePresentationNodeHash, destinyMembershipId, membershipType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling destiny2GetCollectibleNodeDetails");
      }
      // verify the required parameter 'collectiblePresentationNodeHash' is set
      if (collectiblePresentationNodeHash === undefined || collectiblePresentationNodeHash === null) {
        throw new Error("Missing the required parameter 'collectiblePresentationNodeHash' when calling destiny2GetCollectibleNodeDetails");
      }
      // verify the required parameter 'destinyMembershipId' is set
      if (destinyMembershipId === undefined || destinyMembershipId === null) {
        throw new Error("Missing the required parameter 'destinyMembershipId' when calling destiny2GetCollectibleNodeDetails");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling destiny2GetCollectibleNodeDetails");
      }

      let pathParams = {
        'characterId': characterId,
        'collectiblePresentationNodeHash': collectiblePresentationNodeHash,
        'destinyMembershipId': destinyMembershipId,
        'membershipType': membershipType
      };
      let queryParams = {
        'components': this.apiClient.buildCollectionParam(opts['components'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetCollectibleNodeDetails200Response;
      return this.apiClient.callApi(
        '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Collectibles/{collectiblePresentationNodeHash}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetDestinyAggregateActivityStats operation.
     * @callback module:api/Destiny2Api~destiny2GetDestinyAggregateActivityStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetDestinyAggregateActivityStats200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all activities the character has participated in together with aggregate statistics for those activities.
     * @param {Number} characterId The specific character whose activities should be returned.
     * @param {Number} destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param {Number} membershipType A valid non-BungieNet membership type.
     * @param {module:api/Destiny2Api~destiny2GetDestinyAggregateActivityStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetDestinyAggregateActivityStats200Response}
     */
    destiny2GetDestinyAggregateActivityStats(characterId, destinyMembershipId, membershipType, callback) {
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling destiny2GetDestinyAggregateActivityStats");
      }
      // verify the required parameter 'destinyMembershipId' is set
      if (destinyMembershipId === undefined || destinyMembershipId === null) {
        throw new Error("Missing the required parameter 'destinyMembershipId' when calling destiny2GetDestinyAggregateActivityStats");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling destiny2GetDestinyAggregateActivityStats");
      }

      let pathParams = {
        'characterId': characterId,
        'destinyMembershipId': destinyMembershipId,
        'membershipType': membershipType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetDestinyAggregateActivityStats200Response;
      return this.apiClient.callApi(
        '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/AggregateActivityStats/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetDestinyEntityDefinition operation.
     * @callback module:api/Destiny2Api~destiny2GetDestinyEntityDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetDestinyEntityDefinition200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don't use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
     * @param {String} entityType The type of entity for whom you would like results. These correspond to the entity's definition contract name. For instance, if you are looking for items, this property should be 'DestinyInventoryItemDefinition'. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.
     * @param {Number} hashIdentifier The hash identifier for the specific Entity you want returned.
     * @param {module:api/Destiny2Api~destiny2GetDestinyEntityDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetDestinyEntityDefinition200Response}
     */
    destiny2GetDestinyEntityDefinition(entityType, hashIdentifier, callback) {
      let postBody = null;
      // verify the required parameter 'entityType' is set
      if (entityType === undefined || entityType === null) {
        throw new Error("Missing the required parameter 'entityType' when calling destiny2GetDestinyEntityDefinition");
      }
      // verify the required parameter 'hashIdentifier' is set
      if (hashIdentifier === undefined || hashIdentifier === null) {
        throw new Error("Missing the required parameter 'hashIdentifier' when calling destiny2GetDestinyEntityDefinition");
      }

      let pathParams = {
        'entityType': entityType,
        'hashIdentifier': hashIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetDestinyEntityDefinition200Response;
      return this.apiClient.callApi(
        '/Destiny2/Manifest/{entityType}/{hashIdentifier}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetDestinyManifest operation.
     * @callback module:api/Destiny2Api~destiny2GetDestinyManifestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetDestinyManifest200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the current version of the manifest as a json object.
     * @param {module:api/Destiny2Api~destiny2GetDestinyManifestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetDestinyManifest200Response}
     */
    destiny2GetDestinyManifest(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetDestinyManifest200Response;
      return this.apiClient.callApi(
        '/Destiny2/Manifest/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetHistoricalStats operation.
     * @callback module:api/Destiny2Api~destiny2GetHistoricalStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetHistoricalStats200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets historical stats for indicated character.
     * @param {Number} characterId The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.
     * @param {Number} destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param {Number} membershipType A valid non-BungieNet membership type.
     * @param {Object} opts Optional parameters
     * @param {Date} [dayend] Last day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request.
     * @param {Date} [daystart] First day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request.
     * @param {Array.<Number>} [groups] Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals
     * @param {Array.<Number>} [modes] Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
     * @param {Number} [periodType] Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity
     * @param {module:api/Destiny2Api~destiny2GetHistoricalStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetHistoricalStats200Response}
     */
    destiny2GetHistoricalStats(characterId, destinyMembershipId, membershipType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling destiny2GetHistoricalStats");
      }
      // verify the required parameter 'destinyMembershipId' is set
      if (destinyMembershipId === undefined || destinyMembershipId === null) {
        throw new Error("Missing the required parameter 'destinyMembershipId' when calling destiny2GetHistoricalStats");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling destiny2GetHistoricalStats");
      }

      let pathParams = {
        'characterId': characterId,
        'destinyMembershipId': destinyMembershipId,
        'membershipType': membershipType
      };
      let queryParams = {
        'dayend': opts['dayend'],
        'daystart': opts['daystart'],
        'groups': this.apiClient.buildCollectionParam(opts['groups'], 'csv'),
        'modes': this.apiClient.buildCollectionParam(opts['modes'], 'csv'),
        'periodType': opts['periodType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetHistoricalStats200Response;
      return this.apiClient.callApi(
        '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetHistoricalStatsDefinition operation.
     * @callback module:api/Destiny2Api~destiny2GetHistoricalStatsDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetHistoricalStatsDefinition200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets historical stats definitions.
     * @param {module:api/Destiny2Api~destiny2GetHistoricalStatsDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetHistoricalStatsDefinition200Response}
     */
    destiny2GetHistoricalStatsDefinition(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetHistoricalStatsDefinition200Response;
      return this.apiClient.callApi(
        '/Destiny2/Stats/Definition/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetHistoricalStatsForAccount operation.
     * @callback module:api/Destiny2Api~destiny2GetHistoricalStatsForAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetHistoricalStatsForAccount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets aggregate historical stats organized around each character for a given account.
     * @param {Number} destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param {Number} membershipType A valid non-BungieNet membership type.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [groups] Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals.
     * @param {module:api/Destiny2Api~destiny2GetHistoricalStatsForAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetHistoricalStatsForAccount200Response}
     */
    destiny2GetHistoricalStatsForAccount(destinyMembershipId, membershipType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'destinyMembershipId' is set
      if (destinyMembershipId === undefined || destinyMembershipId === null) {
        throw new Error("Missing the required parameter 'destinyMembershipId' when calling destiny2GetHistoricalStatsForAccount");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling destiny2GetHistoricalStatsForAccount");
      }

      let pathParams = {
        'destinyMembershipId': destinyMembershipId,
        'membershipType': membershipType
      };
      let queryParams = {
        'groups': this.apiClient.buildCollectionParam(opts['groups'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetHistoricalStatsForAccount200Response;
      return this.apiClient.callApi(
        '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetItem operation.
     * @callback module:api/Destiny2Api~destiny2GetItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetItem200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
     * @param {Number} destinyMembershipId The membership ID of the destiny profile.
     * @param {Number} itemInstanceId The Instance ID of the destiny item.
     * @param {Number} membershipType A valid non-BungieNet membership type.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [components] A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
     * @param {module:api/Destiny2Api~destiny2GetItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetItem200Response}
     */
    destiny2GetItem(destinyMembershipId, itemInstanceId, membershipType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'destinyMembershipId' is set
      if (destinyMembershipId === undefined || destinyMembershipId === null) {
        throw new Error("Missing the required parameter 'destinyMembershipId' when calling destiny2GetItem");
      }
      // verify the required parameter 'itemInstanceId' is set
      if (itemInstanceId === undefined || itemInstanceId === null) {
        throw new Error("Missing the required parameter 'itemInstanceId' when calling destiny2GetItem");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling destiny2GetItem");
      }

      let pathParams = {
        'destinyMembershipId': destinyMembershipId,
        'itemInstanceId': itemInstanceId,
        'membershipType': membershipType
      };
      let queryParams = {
        'components': this.apiClient.buildCollectionParam(opts['components'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetItem200Response;
      return this.apiClient.callApi(
        '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Item/{itemInstanceId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetLeaderboards operation.
     * @callback module:api/Destiny2Api~destiny2GetLeaderboardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetClanLeaderboards200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
     * @param {Number} destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param {Number} membershipType A valid non-BungieNet membership type.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxtop] Maximum number of top players to return. Use a large number to get entire leaderboard.
     * @param {String} [modes] List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
     * @param {String} [statid] ID of stat to return rather than returning all Leaderboard stats.
     * @param {module:api/Destiny2Api~destiny2GetLeaderboardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetClanLeaderboards200Response}
     */
    destiny2GetLeaderboards(destinyMembershipId, membershipType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'destinyMembershipId' is set
      if (destinyMembershipId === undefined || destinyMembershipId === null) {
        throw new Error("Missing the required parameter 'destinyMembershipId' when calling destiny2GetLeaderboards");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling destiny2GetLeaderboards");
      }

      let pathParams = {
        'destinyMembershipId': destinyMembershipId,
        'membershipType': membershipType
      };
      let queryParams = {
        'maxtop': opts['maxtop'],
        'modes': opts['modes'],
        'statid': opts['statid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetClanLeaderboards200Response;
      return this.apiClient.callApi(
        '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/Leaderboards/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetLeaderboardsForCharacter operation.
     * @callback module:api/Destiny2Api~destiny2GetLeaderboardsForCharacterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetClanLeaderboards200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param {Number} characterId The specific character to build the leaderboard around for the provided Destiny Membership.
     * @param {Number} destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param {Number} membershipType A valid non-BungieNet membership type.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxtop] Maximum number of top players to return. Use a large number to get entire leaderboard.
     * @param {String} [modes] List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
     * @param {String} [statid] ID of stat to return rather than returning all Leaderboard stats.
     * @param {module:api/Destiny2Api~destiny2GetLeaderboardsForCharacterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetClanLeaderboards200Response}
     */
    destiny2GetLeaderboardsForCharacter(characterId, destinyMembershipId, membershipType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling destiny2GetLeaderboardsForCharacter");
      }
      // verify the required parameter 'destinyMembershipId' is set
      if (destinyMembershipId === undefined || destinyMembershipId === null) {
        throw new Error("Missing the required parameter 'destinyMembershipId' when calling destiny2GetLeaderboardsForCharacter");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling destiny2GetLeaderboardsForCharacter");
      }

      let pathParams = {
        'characterId': characterId,
        'destinyMembershipId': destinyMembershipId,
        'membershipType': membershipType
      };
      let queryParams = {
        'maxtop': opts['maxtop'],
        'modes': opts['modes'],
        'statid': opts['statid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetClanLeaderboards200Response;
      return this.apiClient.callApi(
        '/Destiny2/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/{characterId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetLinkedProfiles operation.
     * @callback module:api/Destiny2Api~destiny2GetLinkedProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetLinkedProfiles200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
     * @param {Number} membershipId The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don't pass us a PSN membership ID and the XBox membership type, it's not going to work!
     * @param {Number} membershipType The type for the membership whose linked Destiny accounts you want returned.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [getAllMemberships] (optional) if set to 'true', all memberships regardless of whether they're obscured by overrides will be returned. Normal privacy restrictions on account linking will still apply no matter what.
     * @param {module:api/Destiny2Api~destiny2GetLinkedProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetLinkedProfiles200Response}
     */
    destiny2GetLinkedProfiles(membershipId, membershipType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling destiny2GetLinkedProfiles");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling destiny2GetLinkedProfiles");
      }

      let pathParams = {
        'membershipId': membershipId,
        'membershipType': membershipType
      };
      let queryParams = {
        'getAllMemberships': opts['getAllMemberships']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetLinkedProfiles200Response;
      return this.apiClient.callApi(
        '/Destiny2/{membershipType}/Profile/{membershipId}/LinkedProfiles/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetPostGameCarnageReport operation.
     * @callback module:api/Destiny2Api~destiny2GetPostGameCarnageReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetPostGameCarnageReport200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the available post game carnage report for the activity ID.
     * @param {Number} activityId The ID of the activity whose PGCR is requested.
     * @param {module:api/Destiny2Api~destiny2GetPostGameCarnageReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetPostGameCarnageReport200Response}
     */
    destiny2GetPostGameCarnageReport(activityId, callback) {
      let postBody = null;
      // verify the required parameter 'activityId' is set
      if (activityId === undefined || activityId === null) {
        throw new Error("Missing the required parameter 'activityId' when calling destiny2GetPostGameCarnageReport");
      }

      let pathParams = {
        'activityId': activityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetPostGameCarnageReport200Response;
      return this.apiClient.callApi(
        '/Destiny2/Stats/PostGameCarnageReport/{activityId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetProfile operation.
     * @callback module:api/Destiny2Api~destiny2GetProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetProfile200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns Destiny Profile information for the supplied membership.
     * @param {Number} destinyMembershipId Destiny membership ID.
     * @param {Number} membershipType A valid non-BungieNet membership type.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [components] A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
     * @param {module:api/Destiny2Api~destiny2GetProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetProfile200Response}
     */
    destiny2GetProfile(destinyMembershipId, membershipType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'destinyMembershipId' is set
      if (destinyMembershipId === undefined || destinyMembershipId === null) {
        throw new Error("Missing the required parameter 'destinyMembershipId' when calling destiny2GetProfile");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling destiny2GetProfile");
      }

      let pathParams = {
        'destinyMembershipId': destinyMembershipId,
        'membershipType': membershipType
      };
      let queryParams = {
        'components': this.apiClient.buildCollectionParam(opts['components'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetProfile200Response;
      return this.apiClient.callApi(
        '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetPublicMilestoneContent operation.
     * @callback module:api/Destiny2Api~destiny2GetPublicMilestoneContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetPublicMilestoneContent200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets custom localized content for the milestone of the given hash, if it exists.
     * @param {Number} milestoneHash The identifier for the milestone to be returned.
     * @param {module:api/Destiny2Api~destiny2GetPublicMilestoneContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetPublicMilestoneContent200Response}
     */
    destiny2GetPublicMilestoneContent(milestoneHash, callback) {
      let postBody = null;
      // verify the required parameter 'milestoneHash' is set
      if (milestoneHash === undefined || milestoneHash === null) {
        throw new Error("Missing the required parameter 'milestoneHash' when calling destiny2GetPublicMilestoneContent");
      }

      let pathParams = {
        'milestoneHash': milestoneHash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetPublicMilestoneContent200Response;
      return this.apiClient.callApi(
        '/Destiny2/Milestones/{milestoneHash}/Content/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetPublicMilestones operation.
     * @callback module:api/Destiny2Api~destiny2GetPublicMilestonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetPublicMilestones200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets public information about currently available Milestones.
     * @param {module:api/Destiny2Api~destiny2GetPublicMilestonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetPublicMilestones200Response}
     */
    destiny2GetPublicMilestones(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetPublicMilestones200Response;
      return this.apiClient.callApi(
        '/Destiny2/Milestones/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetPublicVendors operation.
     * @callback module:api/Destiny2Api~destiny2GetPublicVendorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetPublicVendors200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor's available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: 'It's a long story...'
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [components] A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
     * @param {module:api/Destiny2Api~destiny2GetPublicVendorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetPublicVendors200Response}
     */
    destiny2GetPublicVendors(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'components': this.apiClient.buildCollectionParam(opts['components'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetPublicVendors200Response;
      return this.apiClient.callApi(
        '/Destiny2/Vendors/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetUniqueWeaponHistory operation.
     * @callback module:api/Destiny2Api~destiny2GetUniqueWeaponHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetUniqueWeaponHistory200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details about unique weapon usage, including all exotic weapons.
     * @param {Number} characterId The id of the character to retrieve.
     * @param {Number} destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param {Number} membershipType A valid non-BungieNet membership type.
     * @param {module:api/Destiny2Api~destiny2GetUniqueWeaponHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetUniqueWeaponHistory200Response}
     */
    destiny2GetUniqueWeaponHistory(characterId, destinyMembershipId, membershipType, callback) {
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling destiny2GetUniqueWeaponHistory");
      }
      // verify the required parameter 'destinyMembershipId' is set
      if (destinyMembershipId === undefined || destinyMembershipId === null) {
        throw new Error("Missing the required parameter 'destinyMembershipId' when calling destiny2GetUniqueWeaponHistory");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling destiny2GetUniqueWeaponHistory");
      }

      let pathParams = {
        'characterId': characterId,
        'destinyMembershipId': destinyMembershipId,
        'membershipType': membershipType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetUniqueWeaponHistory200Response;
      return this.apiClient.callApi(
        '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/UniqueWeapons/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetVendor operation.
     * @callback module:api/Destiny2Api~destiny2GetVendorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetVendor200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of a specific Vendor.
     * @param {Number} characterId The Destiny Character ID of the character for whom we're getting vendor info.
     * @param {Number} destinyMembershipId Destiny membership ID of another user. You may be denied.
     * @param {Number} membershipType A valid non-BungieNet membership type.
     * @param {Number} vendorHash The Hash identifier of the Vendor to be returned.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [components] A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
     * @param {module:api/Destiny2Api~destiny2GetVendorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetVendor200Response}
     */
    destiny2GetVendor(characterId, destinyMembershipId, membershipType, vendorHash, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling destiny2GetVendor");
      }
      // verify the required parameter 'destinyMembershipId' is set
      if (destinyMembershipId === undefined || destinyMembershipId === null) {
        throw new Error("Missing the required parameter 'destinyMembershipId' when calling destiny2GetVendor");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling destiny2GetVendor");
      }
      // verify the required parameter 'vendorHash' is set
      if (vendorHash === undefined || vendorHash === null) {
        throw new Error("Missing the required parameter 'vendorHash' when calling destiny2GetVendor");
      }

      let pathParams = {
        'characterId': characterId,
        'destinyMembershipId': destinyMembershipId,
        'membershipType': membershipType,
        'vendorHash': vendorHash
      };
      let queryParams = {
        'components': this.apiClient.buildCollectionParam(opts['components'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetVendor200Response;
      return this.apiClient.callApi(
        '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/{vendorHash}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetVendors operation.
     * @callback module:api/Destiny2Api~destiny2GetVendorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetVendors200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
     * @param {Number} characterId The Destiny Character ID of the character for whom we're getting vendor info.
     * @param {Number} destinyMembershipId Destiny membership ID of another user. You may be denied.
     * @param {Number} membershipType A valid non-BungieNet membership type.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [components] A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
     * @param {Number} [filter] The filter of what vendors and items to return, if any.
     * @param {module:api/Destiny2Api~destiny2GetVendorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetVendors200Response}
     */
    destiny2GetVendors(characterId, destinyMembershipId, membershipType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling destiny2GetVendors");
      }
      // verify the required parameter 'destinyMembershipId' is set
      if (destinyMembershipId === undefined || destinyMembershipId === null) {
        throw new Error("Missing the required parameter 'destinyMembershipId' when calling destiny2GetVendors");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling destiny2GetVendors");
      }

      let pathParams = {
        'characterId': characterId,
        'destinyMembershipId': destinyMembershipId,
        'membershipType': membershipType
      };
      let queryParams = {
        'components': this.apiClient.buildCollectionParam(opts['components'], 'csv'),
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetVendors200Response;
      return this.apiClient.callApi(
        '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2InsertSocketPlug operation.
     * @callback module:api/Destiny2Api~destiny2InsertSocketPlugCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2InsertSocketPlug200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a plug into a socketed item. I know how it sounds, but I assure you it's much more G-rated than you might be guessing. We haven't decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for 'InsertPlugs' from the account owner.
     * @param {module:api/Destiny2Api~destiny2InsertSocketPlugCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2InsertSocketPlug200Response}
     */
    destiny2InsertSocketPlug(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2InsertSocketPlug200Response;
      return this.apiClient.callApi(
        '/Destiny2/Actions/Items/InsertSocketPlug/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2InsertSocketPlugFree operation.
     * @callback module:api/Destiny2Api~destiny2InsertSocketPlugFreeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2InsertSocketPlug200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a 'free' plug into an item's socket. This does not require 'Advanced Write Action' authorization and is available to 3rd-party apps, but will only work on 'free and reversible' socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.
     * @param {module:api/Destiny2Api~destiny2InsertSocketPlugFreeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2InsertSocketPlug200Response}
     */
    destiny2InsertSocketPlugFree(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2InsertSocketPlug200Response;
      return this.apiClient.callApi(
        '/Destiny2/Actions/Items/InsertSocketPlugFree/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2PullFromPostmaster operation.
     * @callback module:api/Destiny2Api~destiny2PullFromPostmasterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2EquipItem200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it's an instanced item.
     * @param {module:api/Destiny2Api~destiny2PullFromPostmasterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2EquipItem200Response}
     */
    destiny2PullFromPostmaster(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2EquipItem200Response;
      return this.apiClient.callApi(
        '/Destiny2/Actions/Items/PullFromPostmaster/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2ReportOffensivePostGameCarnageReportPlayer operation.
     * @callback module:api/Destiny2Api~destiny2ReportOffensivePostGameCarnageReportPlayerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2EquipItem200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
     * @param {Number} activityId The ID of the activity where you ran into the brigand that you're reporting.
     * @param {module:api/Destiny2Api~destiny2ReportOffensivePostGameCarnageReportPlayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2EquipItem200Response}
     */
    destiny2ReportOffensivePostGameCarnageReportPlayer(activityId, callback) {
      let postBody = null;
      // verify the required parameter 'activityId' is set
      if (activityId === undefined || activityId === null) {
        throw new Error("Missing the required parameter 'activityId' when calling destiny2ReportOffensivePostGameCarnageReportPlayer");
      }

      let pathParams = {
        'activityId': activityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2EquipItem200Response;
      return this.apiClient.callApi(
        '/Destiny2/Stats/PostGameCarnageReport/{activityId}/Report/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2SearchDestinyEntities operation.
     * @callback module:api/Destiny2Api~destiny2SearchDestinyEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2SearchDestinyEntities200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a page list of Destiny items.
     * @param {String} searchTerm The string to use when searching for Destiny entities.
     * @param {String} type The type of entity for whom you would like results. These correspond to the entity's definition contract name. For instance, if you are looking for items, this property should be 'DestinyInventoryItemDefinition'.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page number to return, starting with 0.
     * @param {module:api/Destiny2Api~destiny2SearchDestinyEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2SearchDestinyEntities200Response}
     */
    destiny2SearchDestinyEntities(searchTerm, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'searchTerm' is set
      if (searchTerm === undefined || searchTerm === null) {
        throw new Error("Missing the required parameter 'searchTerm' when calling destiny2SearchDestinyEntities");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling destiny2SearchDestinyEntities");
      }

      let pathParams = {
        'searchTerm': searchTerm,
        'type': type
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2SearchDestinyEntities200Response;
      return this.apiClient.callApi(
        '/Destiny2/Armory/Search/{type}/{searchTerm}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2SearchDestinyPlayerByBungieName operation.
     * @callback module:api/Destiny2Api~destiny2SearchDestinyPlayerByBungieNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2SearchDestinyPlayerByBungieName200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of Destiny memberships given a global Bungie Display Name. This method will hide overridden memberships due to cross save.
     * @param {Number} membershipType A valid non-BungieNet membership type, or All. Indicates which memberships to return. You probably want this set to All.
     * @param {module:api/Destiny2Api~destiny2SearchDestinyPlayerByBungieNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2SearchDestinyPlayerByBungieName200Response}
     */
    destiny2SearchDestinyPlayerByBungieName(membershipType, callback) {
      let postBody = null;
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling destiny2SearchDestinyPlayerByBungieName");
      }

      let pathParams = {
        'membershipType': membershipType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2SearchDestinyPlayerByBungieName200Response;
      return this.apiClient.callApi(
        '/Destiny2/SearchDestinyPlayerByBungieName/{membershipType}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2SetItemLockState operation.
     * @callback module:api/Destiny2Api~destiny2SetItemLockStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2EquipItem200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the Lock State for an instanced item. You must have a valid Destiny Account.
     * @param {module:api/Destiny2Api~destiny2SetItemLockStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2EquipItem200Response}
     */
    destiny2SetItemLockState(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2EquipItem200Response;
      return this.apiClient.callApi(
        '/Destiny2/Actions/Items/SetLockState/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2SetQuestTrackedState operation.
     * @callback module:api/Destiny2Api~destiny2SetQuestTrackedStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2EquipItem200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the Tracking State for an instanced item, if that item is a Quest or Bounty. You must have a valid Destiny Account. Yeah, it's an item.
     * @param {module:api/Destiny2Api~destiny2SetQuestTrackedStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2EquipItem200Response}
     */
    destiny2SetQuestTrackedState(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2EquipItem200Response;
      return this.apiClient.callApi(
        '/Destiny2/Actions/Items/SetTrackedState/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2SnapshotLoadout operation.
     * @callback module:api/Destiny2Api~destiny2SnapshotLoadoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2EquipItem200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Snapshot a loadout with the currently equipped items.
     * @param {module:api/Destiny2Api~destiny2SnapshotLoadoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2EquipItem200Response}
     */
    destiny2SnapshotLoadout(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2EquipItem200Response;
      return this.apiClient.callApi(
        '/Destiny2/Actions/Loadouts/SnapshotLoadout/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2TransferItem operation.
     * @callback module:api/Destiny2Api~destiny2TransferItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2EquipItem200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it's an instanced item. itshappening.gif
     * @param {module:api/Destiny2Api~destiny2TransferItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2EquipItem200Response}
     */
    destiny2TransferItem(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2EquipItem200Response;
      return this.apiClient.callApi(
        '/Destiny2/Actions/Items/TransferItem/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2UpdateLoadoutIdentifiers operation.
     * @callback module:api/Destiny2Api~destiny2UpdateLoadoutIdentifiersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2EquipItem200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the color, icon, and name of a loadout.
     * @param {module:api/Destiny2Api~destiny2UpdateLoadoutIdentifiersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2EquipItem200Response}
     */
    destiny2UpdateLoadoutIdentifiers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2EquipItem200Response;
      return this.apiClient.callApi(
        '/Destiny2/Actions/Loadouts/UpdateLoadoutIdentifiers/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
