/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CommunityContentGetCommunityContent200Response from '../model/CommunityContentGetCommunityContent200Response';

/**
* CommunityContent service.
* @module api/CommunityContentApi
* @version 2.18.0
*/
export default class CommunityContentApi {

    /**
    * Constructs a new CommunityContentApi. 
    * @alias module:api/CommunityContentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the communityContentGetCommunityContent operation.
     * @callback module:api/CommunityContentApi~communityContentGetCommunityContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommunityContentGetCommunityContent200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns community content.
     * @param {Number} mediaFilter The type of media to get
     * @param {Number} page Zero based page
     * @param {Number} sort The sort mode.
     * @param {module:api/CommunityContentApi~communityContentGetCommunityContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommunityContentGetCommunityContent200Response}
     */
    communityContentGetCommunityContent(mediaFilter, page, sort, callback) {
      let postBody = null;
      // verify the required parameter 'mediaFilter' is set
      if (mediaFilter === undefined || mediaFilter === null) {
        throw new Error("Missing the required parameter 'mediaFilter' when calling communityContentGetCommunityContent");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling communityContentGetCommunityContent");
      }
      // verify the required parameter 'sort' is set
      if (sort === undefined || sort === null) {
        throw new Error("Missing the required parameter 'sort' when calling communityContentGetCommunityContent");
      }

      let pathParams = {
        'mediaFilter': mediaFilter,
        'page': page,
        'sort': sort
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CommunityContentGetCommunityContent200Response;
      return this.apiClient.callApi(
        '/CommunityContent/Get/{sort}/{mediaFilter}/{page}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
