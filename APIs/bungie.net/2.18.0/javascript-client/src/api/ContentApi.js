/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContentGetContentById200Response from '../model/ContentGetContentById200Response';
import ContentGetContentType200Response from '../model/ContentGetContentType200Response';
import ContentRssNewsArticles200Response from '../model/ContentRssNewsArticles200Response';
import ContentSearchContentWithText200Response from '../model/ContentSearchContentWithText200Response';
import ContentSearchHelpArticles200Response from '../model/ContentSearchHelpArticles200Response';

/**
* Content service.
* @module api/ContentApi
* @version 2.18.0
*/
export default class ContentApi {

    /**
    * Constructs a new ContentApi. 
    * @alias module:api/ContentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the contentGetContentById operation.
     * @callback module:api/ContentApi~contentGetContentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentGetContentById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a content item referenced by id
     * @param {Number} id 
     * @param {String} locale 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [head] false
     * @param {module:api/ContentApi~contentGetContentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentGetContentById200Response}
     */
    contentGetContentById(id, locale, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling contentGetContentById");
      }
      // verify the required parameter 'locale' is set
      if (locale === undefined || locale === null) {
        throw new Error("Missing the required parameter 'locale' when calling contentGetContentById");
      }

      let pathParams = {
        'id': id,
        'locale': locale
      };
      let queryParams = {
        'head': opts['head']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ContentGetContentById200Response;
      return this.apiClient.callApi(
        '/Content/GetContentById/{id}/{locale}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentGetContentByTagAndType operation.
     * @callback module:api/ContentApi~contentGetContentByTagAndTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentGetContentById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the newest item that matches a given tag and Content Type.
     * @param {String} locale 
     * @param {String} tag 
     * @param {String} type 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [head] Not used.
     * @param {module:api/ContentApi~contentGetContentByTagAndTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentGetContentById200Response}
     */
    contentGetContentByTagAndType(locale, tag, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locale' is set
      if (locale === undefined || locale === null) {
        throw new Error("Missing the required parameter 'locale' when calling contentGetContentByTagAndType");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling contentGetContentByTagAndType");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling contentGetContentByTagAndType");
      }

      let pathParams = {
        'locale': locale,
        'tag': tag,
        'type': type
      };
      let queryParams = {
        'head': opts['head']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ContentGetContentById200Response;
      return this.apiClient.callApi(
        '/Content/GetContentByTagAndType/{tag}/{type}/{locale}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentGetContentType operation.
     * @callback module:api/ContentApi~contentGetContentTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentGetContentType200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an object describing a particular variant of content.
     * @param {String} type 
     * @param {module:api/ContentApi~contentGetContentTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentGetContentType200Response}
     */
    contentGetContentType(type, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling contentGetContentType");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ContentGetContentType200Response;
      return this.apiClient.callApi(
        '/Content/GetContentType/{type}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentRssNewsArticles operation.
     * @callback module:api/ContentApi~contentRssNewsArticlesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentRssNewsArticles200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a JSON string response that is the RSS feed for news articles.
     * @param {String} pageToken Zero-based pagination token for paging through result sets.
     * @param {Object} opts Optional parameters
     * @param {String} [categoryfilter] Optionally filter response to only include news items in a certain category.
     * @param {Boolean} [includebody] Optionally include full content body for each news item.
     * @param {module:api/ContentApi~contentRssNewsArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentRssNewsArticles200Response}
     */
    contentRssNewsArticles(pageToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pageToken' is set
      if (pageToken === undefined || pageToken === null) {
        throw new Error("Missing the required parameter 'pageToken' when calling contentRssNewsArticles");
      }

      let pathParams = {
        'pageToken': pageToken
      };
      let queryParams = {
        'categoryfilter': opts['categoryfilter'],
        'includebody': opts['includebody']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ContentRssNewsArticles200Response;
      return this.apiClient.callApi(
        '/Content/Rss/NewsArticles/{pageToken}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentSearchContentByTagAndType operation.
     * @callback module:api/ContentApi~contentSearchContentByTagAndTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentSearchContentWithText200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for Content Items that match the given Tag and Content Type.
     * @param {String} locale 
     * @param {String} tag 
     * @param {String} type 
     * @param {Object} opts Optional parameters
     * @param {Number} [currentpage] Page number for the search results starting with page 1.
     * @param {Boolean} [head] Not used.
     * @param {Number} [itemsperpage] Not used.
     * @param {module:api/ContentApi~contentSearchContentByTagAndTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentSearchContentWithText200Response}
     */
    contentSearchContentByTagAndType(locale, tag, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locale' is set
      if (locale === undefined || locale === null) {
        throw new Error("Missing the required parameter 'locale' when calling contentSearchContentByTagAndType");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling contentSearchContentByTagAndType");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling contentSearchContentByTagAndType");
      }

      let pathParams = {
        'locale': locale,
        'tag': tag,
        'type': type
      };
      let queryParams = {
        'currentpage': opts['currentpage'],
        'head': opts['head'],
        'itemsperpage': opts['itemsperpage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ContentSearchContentWithText200Response;
      return this.apiClient.callApi(
        '/Content/SearchContentByTagAndType/{tag}/{type}/{locale}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentSearchContentWithText operation.
     * @callback module:api/ContentApi~contentSearchContentWithTextCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentSearchContentWithText200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets content based on querystring information passed in. Provides basic search and text search capabilities.
     * @param {String} locale 
     * @param {Object} opts Optional parameters
     * @param {String} [ctype] Content type tag: Help, News, etc. Supply multiple ctypes separated by space.
     * @param {Number} [currentpage] Page number for the search results, starting with page 1.
     * @param {Boolean} [head] Not used.
     * @param {String} [searchtext] Word or phrase for the search.
     * @param {String} [source] For analytics, hint at the part of the app that triggered the search. Optional.
     * @param {String} [tag] Tag used on the content to be searched.
     * @param {module:api/ContentApi~contentSearchContentWithTextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentSearchContentWithText200Response}
     */
    contentSearchContentWithText(locale, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locale' is set
      if (locale === undefined || locale === null) {
        throw new Error("Missing the required parameter 'locale' when calling contentSearchContentWithText");
      }

      let pathParams = {
        'locale': locale
      };
      let queryParams = {
        'ctype': opts['ctype'],
        'currentpage': opts['currentpage'],
        'head': opts['head'],
        'searchtext': opts['searchtext'],
        'source': opts['source'],
        'tag': opts['tag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ContentSearchContentWithText200Response;
      return this.apiClient.callApi(
        '/Content/Search/{locale}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentSearchHelpArticles operation.
     * @callback module:api/ContentApi~contentSearchHelpArticlesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentSearchHelpArticles200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for Help Articles.
     * @param {String} searchtext 
     * @param {String} size 
     * @param {module:api/ContentApi~contentSearchHelpArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentSearchHelpArticles200Response}
     */
    contentSearchHelpArticles(searchtext, size, callback) {
      let postBody = null;
      // verify the required parameter 'searchtext' is set
      if (searchtext === undefined || searchtext === null) {
        throw new Error("Missing the required parameter 'searchtext' when calling contentSearchHelpArticles");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling contentSearchHelpArticles");
      }

      let pathParams = {
        'searchtext': searchtext,
        'size': size
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ContentSearchHelpArticles200Response;
      return this.apiClient.callApi(
        '/Content/SearchHelpArticles/{searchtext}/{size}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
