/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GroupV2GetUserClanInviteSetting200Response from '../model/GroupV2GetUserClanInviteSetting200Response';
import SocialGetFriendList200Response from '../model/SocialGetFriendList200Response';
import SocialGetFriendRequestList200Response from '../model/SocialGetFriendRequestList200Response';
import SocialGetPlatformFriendList200Response from '../model/SocialGetPlatformFriendList200Response';

/**
* Social service.
* @module api/SocialApi
* @version 2.18.0
*/
export default class SocialApi {

    /**
    * Constructs a new SocialApi. 
    * @alias module:api/SocialApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the socialAcceptFriendRequest operation.
     * @callback module:api/SocialApi~socialAcceptFriendRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetUserClanInviteSetting200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accepts a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
     * @param {String} membershipId The membership id of the user you wish to accept.
     * @param {module:api/SocialApi~socialAcceptFriendRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetUserClanInviteSetting200Response}
     */
    socialAcceptFriendRequest(membershipId, callback) {
      let postBody = null;
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling socialAcceptFriendRequest");
      }

      let pathParams = {
        'membershipId': membershipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetUserClanInviteSetting200Response;
      return this.apiClient.callApi(
        '/Social/Friends/Requests/Accept/{membershipId}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the socialDeclineFriendRequest operation.
     * @callback module:api/SocialApi~socialDeclineFriendRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetUserClanInviteSetting200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Declines a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
     * @param {String} membershipId The membership id of the user you wish to decline.
     * @param {module:api/SocialApi~socialDeclineFriendRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetUserClanInviteSetting200Response}
     */
    socialDeclineFriendRequest(membershipId, callback) {
      let postBody = null;
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling socialDeclineFriendRequest");
      }

      let pathParams = {
        'membershipId': membershipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetUserClanInviteSetting200Response;
      return this.apiClient.callApi(
        '/Social/Friends/Requests/Decline/{membershipId}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the socialGetFriendList operation.
     * @callback module:api/SocialApi~socialGetFriendListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SocialGetFriendList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns your Bungie Friend list
     * @param {module:api/SocialApi~socialGetFriendListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SocialGetFriendList200Response}
     */
    socialGetFriendList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SocialGetFriendList200Response;
      return this.apiClient.callApi(
        '/Social/Friends/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the socialGetFriendRequestList operation.
     * @callback module:api/SocialApi~socialGetFriendRequestListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SocialGetFriendRequestList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns your friend request queue.
     * @param {module:api/SocialApi~socialGetFriendRequestListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SocialGetFriendRequestList200Response}
     */
    socialGetFriendRequestList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SocialGetFriendRequestList200Response;
      return this.apiClient.callApi(
        '/Social/Friends/Requests/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the socialGetPlatformFriendList operation.
     * @callback module:api/SocialApi~socialGetPlatformFriendListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SocialGetPlatformFriendList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the platform friend of the requested type, with additional information if they have Bungie accounts. Must have a recent login session with said platform.
     * @param {Number} friendPlatform The platform friend type.
     * @param {String} page The zero based page to return. Page size is 100.
     * @param {module:api/SocialApi~socialGetPlatformFriendListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SocialGetPlatformFriendList200Response}
     */
    socialGetPlatformFriendList(friendPlatform, page, callback) {
      let postBody = null;
      // verify the required parameter 'friendPlatform' is set
      if (friendPlatform === undefined || friendPlatform === null) {
        throw new Error("Missing the required parameter 'friendPlatform' when calling socialGetPlatformFriendList");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling socialGetPlatformFriendList");
      }

      let pathParams = {
        'friendPlatform': friendPlatform,
        'page': page
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SocialGetPlatformFriendList200Response;
      return this.apiClient.callApi(
        '/Social/PlatformFriends/{friendPlatform}/{page}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the socialIssueFriendRequest operation.
     * @callback module:api/SocialApi~socialIssueFriendRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetUserClanInviteSetting200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Requests a friend relationship with the target user. Any of the target user's linked membership ids are valid inputs.
     * @param {String} membershipId The membership id of the user you wish to add.
     * @param {module:api/SocialApi~socialIssueFriendRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetUserClanInviteSetting200Response}
     */
    socialIssueFriendRequest(membershipId, callback) {
      let postBody = null;
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling socialIssueFriendRequest");
      }

      let pathParams = {
        'membershipId': membershipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetUserClanInviteSetting200Response;
      return this.apiClient.callApi(
        '/Social/Friends/Add/{membershipId}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the socialRemoveFriend operation.
     * @callback module:api/SocialApi~socialRemoveFriendCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetUserClanInviteSetting200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a friend relationship with the target user. The user must be on your friend list, though no error will occur if they are not.
     * @param {String} membershipId The membership id of the user you wish to remove.
     * @param {module:api/SocialApi~socialRemoveFriendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetUserClanInviteSetting200Response}
     */
    socialRemoveFriend(membershipId, callback) {
      let postBody = null;
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling socialRemoveFriend");
      }

      let pathParams = {
        'membershipId': membershipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetUserClanInviteSetting200Response;
      return this.apiClient.callApi(
        '/Social/Friends/Remove/{membershipId}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the socialRemoveFriendRequest operation.
     * @callback module:api/SocialApi~socialRemoveFriendRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetUserClanInviteSetting200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a friend relationship with the target user. The user must be on your outgoing request friend list, though no error will occur if they are not.
     * @param {String} membershipId The membership id of the user you wish to remove.
     * @param {module:api/SocialApi~socialRemoveFriendRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetUserClanInviteSetting200Response}
     */
    socialRemoveFriendRequest(membershipId, callback) {
      let postBody = null;
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling socialRemoveFriendRequest");
      }

      let pathParams = {
        'membershipId': membershipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetUserClanInviteSetting200Response;
      return this.apiClient.callApi(
        '/Social/Friends/Requests/Remove/{membershipId}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
