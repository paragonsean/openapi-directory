/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetAvailableLocales200Response from '../model/GetAvailableLocales200Response';
import UserGetAvailableThemes200Response from '../model/UserGetAvailableThemes200Response';
import UserGetBungieNetUserById200Response from '../model/UserGetBungieNetUserById200Response';
import UserGetCredentialTypesForTargetAccount200Response from '../model/UserGetCredentialTypesForTargetAccount200Response';
import UserGetMembershipDataById200Response from '../model/UserGetMembershipDataById200Response';
import UserGetMembershipFromHardLinkedCredential200Response from '../model/UserGetMembershipFromHardLinkedCredential200Response';
import UserSearchByGlobalNamePost200Response from '../model/UserSearchByGlobalNamePost200Response';

/**
* User service.
* @module api/UserApi
* @version 2.18.0
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the userGetAvailableThemes operation.
     * @callback module:api/UserApi~userGetAvailableThemesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGetAvailableThemes200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all available user themes.
     * @param {module:api/UserApi~userGetAvailableThemesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGetAvailableThemes200Response}
     */
    userGetAvailableThemes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserGetAvailableThemes200Response;
      return this.apiClient.callApi(
        '/User/GetAvailableThemes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userGetBungieNetUserById operation.
     * @callback module:api/UserApi~userGetBungieNetUserByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGetBungieNetUserById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Loads a bungienet user by membership id.
     * @param {Number} id The requested Bungie.net membership id.
     * @param {module:api/UserApi~userGetBungieNetUserByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGetBungieNetUserById200Response}
     */
    userGetBungieNetUserById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userGetBungieNetUserById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserGetBungieNetUserById200Response;
      return this.apiClient.callApi(
        '/User/GetBungieNetUserById/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userGetCredentialTypesForTargetAccount operation.
     * @callback module:api/UserApi~userGetCredentialTypesForTargetAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGetCredentialTypesForTargetAccount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of credential types attached to the requested account
     * @param {Number} membershipId The user's membership id
     * @param {module:api/UserApi~userGetCredentialTypesForTargetAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGetCredentialTypesForTargetAccount200Response}
     */
    userGetCredentialTypesForTargetAccount(membershipId, callback) {
      let postBody = null;
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling userGetCredentialTypesForTargetAccount");
      }

      let pathParams = {
        'membershipId': membershipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserGetCredentialTypesForTargetAccount200Response;
      return this.apiClient.callApi(
        '/User/GetCredentialTypesForTargetAccount/{membershipId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userGetMembershipDataById operation.
     * @callback module:api/UserApi~userGetMembershipDataByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGetMembershipDataById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of accounts associated with the supplied membership ID and membership type. This will include all linked accounts (even when hidden) if supplied credentials permit it.
     * @param {Number} membershipId The membership ID of the target user.
     * @param {Number} membershipType Type of the supplied membership ID.
     * @param {module:api/UserApi~userGetMembershipDataByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGetMembershipDataById200Response}
     */
    userGetMembershipDataById(membershipId, membershipType, callback) {
      let postBody = null;
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling userGetMembershipDataById");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling userGetMembershipDataById");
      }

      let pathParams = {
        'membershipId': membershipId,
        'membershipType': membershipType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserGetMembershipDataById200Response;
      return this.apiClient.callApi(
        '/User/GetMembershipsById/{membershipId}/{membershipType}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userGetMembershipDataForCurrentUser operation.
     * @callback module:api/UserApi~userGetMembershipDataForCurrentUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGetMembershipDataById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of accounts associated with signed in user. This is useful for OAuth implementations that do not give you access to the token response.
     * @param {module:api/UserApi~userGetMembershipDataForCurrentUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGetMembershipDataById200Response}
     */
    userGetMembershipDataForCurrentUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserGetMembershipDataById200Response;
      return this.apiClient.callApi(
        '/User/GetMembershipsForCurrentUser/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userGetMembershipFromHardLinkedCredential operation.
     * @callback module:api/UserApi~userGetMembershipFromHardLinkedCredentialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGetMembershipFromHardLinkedCredential200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets any hard linked membership given a credential. Only works for credentials that are public (just SteamID64 right now). Cross Save aware.
     * @param {String} credential The credential to look up. Must be a valid SteamID64.
     * @param {Number} crType The credential type. 'SteamId' is the only valid value at present.
     * @param {module:api/UserApi~userGetMembershipFromHardLinkedCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGetMembershipFromHardLinkedCredential200Response}
     */
    userGetMembershipFromHardLinkedCredential(credential, crType, callback) {
      let postBody = null;
      // verify the required parameter 'credential' is set
      if (credential === undefined || credential === null) {
        throw new Error("Missing the required parameter 'credential' when calling userGetMembershipFromHardLinkedCredential");
      }
      // verify the required parameter 'crType' is set
      if (crType === undefined || crType === null) {
        throw new Error("Missing the required parameter 'crType' when calling userGetMembershipFromHardLinkedCredential");
      }

      let pathParams = {
        'credential': credential,
        'crType': crType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserGetMembershipFromHardLinkedCredential200Response;
      return this.apiClient.callApi(
        '/User/GetMembershipFromHardLinkedCredential/{crType}/{credential}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userGetSanitizedPlatformDisplayNames operation.
     * @callback module:api/UserApi~userGetSanitizedPlatformDisplayNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAvailableLocales200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all display names linked to this membership id but sanitized (profanity filtered). Obeys all visibility rules of calling user and is heavily cached.
     * @param {Number} membershipId The requested membership id to load.
     * @param {module:api/UserApi~userGetSanitizedPlatformDisplayNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAvailableLocales200Response}
     */
    userGetSanitizedPlatformDisplayNames(membershipId, callback) {
      let postBody = null;
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling userGetSanitizedPlatformDisplayNames");
      }

      let pathParams = {
        'membershipId': membershipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GetAvailableLocales200Response;
      return this.apiClient.callApi(
        '/User/GetSanitizedPlatformDisplayNames/{membershipId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userSearchByGlobalNamePost operation.
     * @callback module:api/UserApi~userSearchByGlobalNamePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserSearchByGlobalNamePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Given the prefix of a global display name, returns all users who share that name.
     * @param {Number} page The zero-based page of results you desire.
     * @param {module:api/UserApi~userSearchByGlobalNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserSearchByGlobalNamePost200Response}
     */
    userSearchByGlobalNamePost(page, callback) {
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling userSearchByGlobalNamePost");
      }

      let pathParams = {
        'page': page
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserSearchByGlobalNamePost200Response;
      return this.apiClient.callApi(
        '/User/Search/GlobalName/{page}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userSearchByGlobalNamePrefix operation.
     * @callback module:api/UserApi~userSearchByGlobalNamePrefixCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserSearchByGlobalNamePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [OBSOLETE] Do not use this to search users, use SearchByGlobalNamePost instead.
     * @param {String} displayNamePrefix The display name prefix you're looking for.
     * @param {Number} page The zero-based page of results you desire.
     * @param {module:api/UserApi~userSearchByGlobalNamePrefixCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserSearchByGlobalNamePost200Response}
     */
    userSearchByGlobalNamePrefix(displayNamePrefix, page, callback) {
      let postBody = null;
      // verify the required parameter 'displayNamePrefix' is set
      if (displayNamePrefix === undefined || displayNamePrefix === null) {
        throw new Error("Missing the required parameter 'displayNamePrefix' when calling userSearchByGlobalNamePrefix");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling userSearchByGlobalNamePrefix");
      }

      let pathParams = {
        'displayNamePrefix': displayNamePrefix,
        'page': page
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserSearchByGlobalNamePost200Response;
      return this.apiClient.callApi(
        '/User/Search/Prefix/{displayNamePrefix}/{page}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
