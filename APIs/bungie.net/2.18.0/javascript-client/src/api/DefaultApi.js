/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetAvailableLocales200Response from '../model/GetAvailableLocales200Response';
import GetCommonSettings200Response from '../model/GetCommonSettings200Response';
import GetGlobalAlerts200Response from '../model/GetGlobalAlerts200Response';
import GetUserSystemOverrides200Response from '../model/GetUserSystemOverrides200Response';

/**
*  service.
* @module api/DefaultApi
* @version 2.18.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAvailableLocales operation.
     * @callback module:api/DefaultApi~getAvailableLocalesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAvailableLocales200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of available localization cultures
     * @param {module:api/DefaultApi~getAvailableLocalesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAvailableLocales200Response}
     */
    getAvailableLocales(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GetAvailableLocales200Response;
      return this.apiClient.callApi(
        '/GetAvailableLocales/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommonSettings operation.
     * @callback module:api/DefaultApi~getCommonSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCommonSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the common settings used by the Bungie.Net environment.
     * @param {module:api/DefaultApi~getCommonSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCommonSettings200Response}
     */
    getCommonSettings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GetCommonSettings200Response;
      return this.apiClient.callApi(
        '/Settings/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGlobalAlerts operation.
     * @callback module:api/DefaultApi~getGlobalAlertsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGlobalAlerts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets any active global alert for display in the forum banners, help pages, etc. Usually used for DOC alerts.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includestreaming] Determines whether Streaming Alerts are included in results
     * @param {module:api/DefaultApi~getGlobalAlertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGlobalAlerts200Response}
     */
    getGlobalAlerts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'includestreaming': opts['includestreaming']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GetGlobalAlerts200Response;
      return this.apiClient.callApi(
        '/GlobalAlerts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserSystemOverrides operation.
     * @callback module:api/DefaultApi~getUserSystemOverridesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUserSystemOverrides200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the user-specific system overrides that should be respected alongside common systems.
     * @param {module:api/DefaultApi~getUserSystemOverridesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUserSystemOverrides200Response}
     */
    getUserSystemOverrides(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GetUserSystemOverrides200Response;
      return this.apiClient.callApi(
        '/UserSystemOverrides/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
