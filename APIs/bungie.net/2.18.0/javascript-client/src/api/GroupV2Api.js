/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Destiny2EquipItem200Response from '../model/Destiny2EquipItem200Response';
import ForumGetTopicForContent200Response from '../model/ForumGetTopicForContent200Response';
import GetAvailableLocales200Response from '../model/GetAvailableLocales200Response';
import GroupV2ApproveAllPending200Response from '../model/GroupV2ApproveAllPending200Response';
import GroupV2GetAdminsAndFounderOfGroup200Response from '../model/GroupV2GetAdminsAndFounderOfGroup200Response';
import GroupV2GetAvailableThemes200Response from '../model/GroupV2GetAvailableThemes200Response';
import GroupV2GetBannedMembersOfGroup200Response from '../model/GroupV2GetBannedMembersOfGroup200Response';
import GroupV2GetGroupByName200Response from '../model/GroupV2GetGroupByName200Response';
import GroupV2GetGroupOptionalConversations200Response from '../model/GroupV2GetGroupOptionalConversations200Response';
import GroupV2GetGroupsForMember200Response from '../model/GroupV2GetGroupsForMember200Response';
import GroupV2GetInvitedIndividuals200Response from '../model/GroupV2GetInvitedIndividuals200Response';
import GroupV2GetPotentialGroupsForMember200Response from '../model/GroupV2GetPotentialGroupsForMember200Response';
import GroupV2GetRecommendedGroups200Response from '../model/GroupV2GetRecommendedGroups200Response';
import GroupV2GetUserClanInviteSetting200Response from '../model/GroupV2GetUserClanInviteSetting200Response';
import GroupV2GroupSearch200Response from '../model/GroupV2GroupSearch200Response';
import GroupV2IndividualGroupInvite200Response from '../model/GroupV2IndividualGroupInvite200Response';
import GroupV2KickMember200Response from '../model/GroupV2KickMember200Response';
import GroupV2RecoverGroupForFounder200Response from '../model/GroupV2RecoverGroupForFounder200Response';

/**
* GroupV2 service.
* @module api/GroupV2Api
* @version 2.18.0
*/
export default class GroupV2Api {

    /**
    * Constructs a new GroupV2Api. 
    * @alias module:api/GroupV2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the groupV2AbdicateFoundership operation.
     * @callback module:api/GroupV2Api~groupV2AbdicateFoundershipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetUserClanInviteSetting200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
     * @param {Number} founderIdNew The new founder for this group. Must already be a group admin.
     * @param {Number} groupId The target group id.
     * @param {Number} membershipType Membership type of the provided founderIdNew.
     * @param {module:api/GroupV2Api~groupV2AbdicateFoundershipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetUserClanInviteSetting200Response}
     */
    groupV2AbdicateFoundership(founderIdNew, groupId, membershipType, callback) {
      let postBody = null;
      // verify the required parameter 'founderIdNew' is set
      if (founderIdNew === undefined || founderIdNew === null) {
        throw new Error("Missing the required parameter 'founderIdNew' when calling groupV2AbdicateFoundership");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2AbdicateFoundership");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling groupV2AbdicateFoundership");
      }

      let pathParams = {
        'founderIdNew': founderIdNew,
        'groupId': groupId,
        'membershipType': membershipType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetUserClanInviteSetting200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/Admin/AbdicateFoundership/{membershipType}/{founderIdNew}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2AddOptionalConversation operation.
     * @callback module:api/GroupV2Api~groupV2AddOptionalConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForumGetTopicForContent200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new optional conversation/chat channel. Requires admin permissions to the group.
     * @param {Number} groupId Group ID of the group to edit.
     * @param {module:api/GroupV2Api~groupV2AddOptionalConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForumGetTopicForContent200Response}
     */
    groupV2AddOptionalConversation(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2AddOptionalConversation");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ForumGetTopicForContent200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/OptionalConversations/Add/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2ApproveAllPending operation.
     * @callback module:api/GroupV2Api~groupV2ApproveAllPendingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2ApproveAllPending200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Approve all of the pending users for the given group.
     * @param {Number} groupId ID of the group.
     * @param {module:api/GroupV2Api~groupV2ApproveAllPendingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2ApproveAllPending200Response}
     */
    groupV2ApproveAllPending(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2ApproveAllPending");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2ApproveAllPending200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/Members/ApproveAll/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2ApprovePending operation.
     * @callback module:api/GroupV2Api~groupV2ApprovePendingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetUserClanInviteSetting200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Approve the given membershipId to join the group/clan as long as they have applied.
     * @param {Number} groupId ID of the group.
     * @param {Number} membershipId The membership id being approved.
     * @param {Number} membershipType Membership type of the supplied membership ID.
     * @param {module:api/GroupV2Api~groupV2ApprovePendingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetUserClanInviteSetting200Response}
     */
    groupV2ApprovePending(groupId, membershipId, membershipType, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2ApprovePending");
      }
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling groupV2ApprovePending");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling groupV2ApprovePending");
      }

      let pathParams = {
        'groupId': groupId,
        'membershipId': membershipId,
        'membershipType': membershipType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetUserClanInviteSetting200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/Members/Approve/{membershipType}/{membershipId}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2ApprovePendingForList operation.
     * @callback module:api/GroupV2Api~groupV2ApprovePendingForListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2ApproveAllPending200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Approve all of the pending users for the given group.
     * @param {Number} groupId ID of the group.
     * @param {module:api/GroupV2Api~groupV2ApprovePendingForListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2ApproveAllPending200Response}
     */
    groupV2ApprovePendingForList(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2ApprovePendingForList");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2ApproveAllPending200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/Members/ApproveList/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2BanMember operation.
     * @callback module:api/GroupV2Api~groupV2BanMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2EquipItem200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bans the requested member from the requested group for the specified period of time.
     * @param {Number} groupId Group ID that has the member to ban.
     * @param {Number} membershipId Membership ID of the member to ban from the group.
     * @param {Number} membershipType Membership type of the provided membership ID.
     * @param {module:api/GroupV2Api~groupV2BanMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2EquipItem200Response}
     */
    groupV2BanMember(groupId, membershipId, membershipType, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2BanMember");
      }
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling groupV2BanMember");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling groupV2BanMember");
      }

      let pathParams = {
        'groupId': groupId,
        'membershipId': membershipId,
        'membershipType': membershipType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2EquipItem200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Ban/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2DenyAllPending operation.
     * @callback module:api/GroupV2Api~groupV2DenyAllPendingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2ApproveAllPending200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deny all of the pending users for the given group.
     * @param {Number} groupId ID of the group.
     * @param {module:api/GroupV2Api~groupV2DenyAllPendingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2ApproveAllPending200Response}
     */
    groupV2DenyAllPending(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2DenyAllPending");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2ApproveAllPending200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/Members/DenyAll/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2DenyPendingForList operation.
     * @callback module:api/GroupV2Api~groupV2DenyPendingForListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2ApproveAllPending200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deny all of the pending users for the given group that match the passed-in .
     * @param {Number} groupId ID of the group.
     * @param {module:api/GroupV2Api~groupV2DenyPendingForListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2ApproveAllPending200Response}
     */
    groupV2DenyPendingForList(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2DenyPendingForList");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2ApproveAllPending200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/Members/DenyList/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2EditClanBanner operation.
     * @callback module:api/GroupV2Api~groupV2EditClanBannerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2EquipItem200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit an existing group's clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
     * @param {Number} groupId Group ID of the group to edit.
     * @param {module:api/GroupV2Api~groupV2EditClanBannerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2EquipItem200Response}
     */
    groupV2EditClanBanner(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2EditClanBanner");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2EquipItem200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/EditClanBanner/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2EditFounderOptions operation.
     * @callback module:api/GroupV2Api~groupV2EditFounderOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2EquipItem200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
     * @param {Number} groupId Group ID of the group to edit.
     * @param {module:api/GroupV2Api~groupV2EditFounderOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2EquipItem200Response}
     */
    groupV2EditFounderOptions(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2EditFounderOptions");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2EquipItem200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/EditFounderOptions/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2EditGroup operation.
     * @callback module:api/GroupV2Api~groupV2EditGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2EquipItem200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
     * @param {Number} groupId Group ID of the group to edit.
     * @param {module:api/GroupV2Api~groupV2EditGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2EquipItem200Response}
     */
    groupV2EditGroup(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2EditGroup");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2EquipItem200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/Edit/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2EditGroupMembership operation.
     * @callback module:api/GroupV2Api~groupV2EditGroupMembershipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2EquipItem200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
     * @param {Number} groupId ID of the group to which the member belongs.
     * @param {Number} membershipId Membership ID to modify.
     * @param {Number} membershipType Membership type of the provide membership ID.
     * @param {Number} memberType New membertype for the specified member.
     * @param {module:api/GroupV2Api~groupV2EditGroupMembershipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2EquipItem200Response}
     */
    groupV2EditGroupMembership(groupId, membershipId, membershipType, memberType, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2EditGroupMembership");
      }
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling groupV2EditGroupMembership");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling groupV2EditGroupMembership");
      }
      // verify the required parameter 'memberType' is set
      if (memberType === undefined || memberType === null) {
        throw new Error("Missing the required parameter 'memberType' when calling groupV2EditGroupMembership");
      }

      let pathParams = {
        'groupId': groupId,
        'membershipId': membershipId,
        'membershipType': membershipType,
        'memberType': memberType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2EquipItem200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/SetMembershipType/{memberType}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2EditOptionalConversation operation.
     * @callback module:api/GroupV2Api~groupV2EditOptionalConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForumGetTopicForContent200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
     * @param {Number} conversationId Conversation Id of the channel being edited.
     * @param {Number} groupId Group ID of the group to edit.
     * @param {module:api/GroupV2Api~groupV2EditOptionalConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForumGetTopicForContent200Response}
     */
    groupV2EditOptionalConversation(conversationId, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling groupV2EditOptionalConversation");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2EditOptionalConversation");
      }

      let pathParams = {
        'conversationId': conversationId,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ForumGetTopicForContent200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/OptionalConversations/Edit/{conversationId}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2GetAdminsAndFounderOfGroup operation.
     * @callback module:api/GroupV2Api~groupV2GetAdminsAndFounderOfGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetAdminsAndFounderOfGroup200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of members in a given group who are of admin level or higher.
     * @param {Number} currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page.
     * @param {Number} groupId The ID of the group.
     * @param {module:api/GroupV2Api~groupV2GetAdminsAndFounderOfGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetAdminsAndFounderOfGroup200Response}
     */
    groupV2GetAdminsAndFounderOfGroup(currentpage, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'currentpage' is set
      if (currentpage === undefined || currentpage === null) {
        throw new Error("Missing the required parameter 'currentpage' when calling groupV2GetAdminsAndFounderOfGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2GetAdminsAndFounderOfGroup");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        'currentpage': currentpage
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetAdminsAndFounderOfGroup200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/AdminsAndFounder/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2GetAvailableAvatars operation.
     * @callback module:api/GroupV2Api~groupV2GetAvailableAvatarsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAvailableLocales200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all available group avatars for the signed-in user.
     * @param {module:api/GroupV2Api~groupV2GetAvailableAvatarsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAvailableLocales200Response}
     */
    groupV2GetAvailableAvatars(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GetAvailableLocales200Response;
      return this.apiClient.callApi(
        '/GroupV2/GetAvailableAvatars/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2GetAvailableThemes operation.
     * @callback module:api/GroupV2Api~groupV2GetAvailableThemesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetAvailableThemes200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all available group themes.
     * @param {module:api/GroupV2Api~groupV2GetAvailableThemesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetAvailableThemes200Response}
     */
    groupV2GetAvailableThemes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetAvailableThemes200Response;
      return this.apiClient.callApi(
        '/GroupV2/GetAvailableThemes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2GetBannedMembersOfGroup operation.
     * @callback module:api/GroupV2Api~groupV2GetBannedMembersOfGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetBannedMembersOfGroup200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
     * @param {Number} currentpage Page number (starting with 1). Each page has a fixed size of 50 entries.
     * @param {Number} groupId Group ID whose banned members you are fetching
     * @param {module:api/GroupV2Api~groupV2GetBannedMembersOfGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetBannedMembersOfGroup200Response}
     */
    groupV2GetBannedMembersOfGroup(currentpage, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'currentpage' is set
      if (currentpage === undefined || currentpage === null) {
        throw new Error("Missing the required parameter 'currentpage' when calling groupV2GetBannedMembersOfGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2GetBannedMembersOfGroup");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        'currentpage': currentpage
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetBannedMembersOfGroup200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/Banned/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2GetGroup operation.
     * @callback module:api/GroupV2Api~groupV2GetGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetGroupByName200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a specific group of the given ID.
     * @param {Number} groupId Requested group's id.
     * @param {module:api/GroupV2Api~groupV2GetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetGroupByName200Response}
     */
    groupV2GetGroup(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2GetGroup");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetGroupByName200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2GetGroupByName operation.
     * @callback module:api/GroupV2Api~groupV2GetGroupByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetGroupByName200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a specific group with the given name and type.
     * @param {String} groupName Exact name of the group to find.
     * @param {Number} groupType Type of group to find.
     * @param {module:api/GroupV2Api~groupV2GetGroupByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetGroupByName200Response}
     */
    groupV2GetGroupByName(groupName, groupType, callback) {
      let postBody = null;
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling groupV2GetGroupByName");
      }
      // verify the required parameter 'groupType' is set
      if (groupType === undefined || groupType === null) {
        throw new Error("Missing the required parameter 'groupType' when calling groupV2GetGroupByName");
      }

      let pathParams = {
        'groupName': groupName,
        'groupType': groupType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetGroupByName200Response;
      return this.apiClient.callApi(
        '/GroupV2/Name/{groupName}/{groupType}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2GetGroupByNameV2 operation.
     * @callback module:api/GroupV2Api~groupV2GetGroupByNameV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetGroupByName200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a specific group with the given name and type. The POST version.
     * @param {module:api/GroupV2Api~groupV2GetGroupByNameV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetGroupByName200Response}
     */
    groupV2GetGroupByNameV2(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetGroupByName200Response;
      return this.apiClient.callApi(
        '/GroupV2/NameV2/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2GetGroupOptionalConversations operation.
     * @callback module:api/GroupV2Api~groupV2GetGroupOptionalConversationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetGroupOptionalConversations200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of available optional conversation channels and their settings.
     * @param {Number} groupId Requested group's id.
     * @param {module:api/GroupV2Api~groupV2GetGroupOptionalConversationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetGroupOptionalConversations200Response}
     */
    groupV2GetGroupOptionalConversations(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2GetGroupOptionalConversations");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetGroupOptionalConversations200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/OptionalConversations/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2GetGroupsForMember operation.
     * @callback module:api/GroupV2Api~groupV2GetGroupsForMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetGroupsForMember200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about the groups that a given member has joined.
     * @param {Number} filter Filter apply to list of joined groups.
     * @param {Number} groupType Type of group the supplied member founded.
     * @param {Number} membershipId Membership ID to for which to find founded groups.
     * @param {Number} membershipType Membership type of the supplied membership ID.
     * @param {module:api/GroupV2Api~groupV2GetGroupsForMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetGroupsForMember200Response}
     */
    groupV2GetGroupsForMember(filter, groupType, membershipId, membershipType, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling groupV2GetGroupsForMember");
      }
      // verify the required parameter 'groupType' is set
      if (groupType === undefined || groupType === null) {
        throw new Error("Missing the required parameter 'groupType' when calling groupV2GetGroupsForMember");
      }
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling groupV2GetGroupsForMember");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling groupV2GetGroupsForMember");
      }

      let pathParams = {
        'filter': filter,
        'groupType': groupType,
        'membershipId': membershipId,
        'membershipType': membershipType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetGroupsForMember200Response;
      return this.apiClient.callApi(
        '/GroupV2/User/{membershipType}/{membershipId}/{filter}/{groupType}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2GetInvitedIndividuals operation.
     * @callback module:api/GroupV2Api~groupV2GetInvitedIndividualsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetInvitedIndividuals200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of users who have been invited into the group.
     * @param {Number} currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page.
     * @param {Number} groupId ID of the group.
     * @param {module:api/GroupV2Api~groupV2GetInvitedIndividualsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetInvitedIndividuals200Response}
     */
    groupV2GetInvitedIndividuals(currentpage, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'currentpage' is set
      if (currentpage === undefined || currentpage === null) {
        throw new Error("Missing the required parameter 'currentpage' when calling groupV2GetInvitedIndividuals");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2GetInvitedIndividuals");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        'currentpage': currentpage
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetInvitedIndividuals200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/Members/InvitedIndividuals/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2GetMembersOfGroup operation.
     * @callback module:api/GroupV2Api~groupV2GetMembersOfGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetAdminsAndFounderOfGroup200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of members in a given group.
     * @param {Number} currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page.
     * @param {Number} groupId The ID of the group.
     * @param {Object} opts Optional parameters
     * @param {Number} [memberType] Filter out other member types. Use None for all members.
     * @param {String} [nameSearch] The name fragment upon which a search should be executed for members with matching display or unique names.
     * @param {module:api/GroupV2Api~groupV2GetMembersOfGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetAdminsAndFounderOfGroup200Response}
     */
    groupV2GetMembersOfGroup(currentpage, groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'currentpage' is set
      if (currentpage === undefined || currentpage === null) {
        throw new Error("Missing the required parameter 'currentpage' when calling groupV2GetMembersOfGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2GetMembersOfGroup");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        'currentpage': currentpage,
        'memberType': opts['memberType'],
        'nameSearch': opts['nameSearch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetAdminsAndFounderOfGroup200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/Members/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2GetPendingMemberships operation.
     * @callback module:api/GroupV2Api~groupV2GetPendingMembershipsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetInvitedIndividuals200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
     * @param {Number} currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page.
     * @param {Number} groupId ID of the group.
     * @param {module:api/GroupV2Api~groupV2GetPendingMembershipsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetInvitedIndividuals200Response}
     */
    groupV2GetPendingMemberships(currentpage, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'currentpage' is set
      if (currentpage === undefined || currentpage === null) {
        throw new Error("Missing the required parameter 'currentpage' when calling groupV2GetPendingMemberships");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2GetPendingMemberships");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        'currentpage': currentpage
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetInvitedIndividuals200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/Members/Pending/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2GetPotentialGroupsForMember operation.
     * @callback module:api/GroupV2Api~groupV2GetPotentialGroupsForMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetPotentialGroupsForMember200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about the groups that a given member has applied to or been invited to.
     * @param {Number} filter Filter apply to list of potential joined groups.
     * @param {Number} groupType Type of group the supplied member applied.
     * @param {Number} membershipId Membership ID to for which to find applied groups.
     * @param {Number} membershipType Membership type of the supplied membership ID.
     * @param {module:api/GroupV2Api~groupV2GetPotentialGroupsForMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetPotentialGroupsForMember200Response}
     */
    groupV2GetPotentialGroupsForMember(filter, groupType, membershipId, membershipType, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling groupV2GetPotentialGroupsForMember");
      }
      // verify the required parameter 'groupType' is set
      if (groupType === undefined || groupType === null) {
        throw new Error("Missing the required parameter 'groupType' when calling groupV2GetPotentialGroupsForMember");
      }
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling groupV2GetPotentialGroupsForMember");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling groupV2GetPotentialGroupsForMember");
      }

      let pathParams = {
        'filter': filter,
        'groupType': groupType,
        'membershipId': membershipId,
        'membershipType': membershipType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetPotentialGroupsForMember200Response;
      return this.apiClient.callApi(
        '/GroupV2/User/Potential/{membershipType}/{membershipId}/{filter}/{groupType}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2GetRecommendedGroups operation.
     * @callback module:api/GroupV2Api~groupV2GetRecommendedGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetRecommendedGroups200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets groups recommended for you based on the groups to whom those you follow belong.
     * @param {Number} createDateRange Requested range in which to pull recommended groups
     * @param {Number} groupType Type of groups requested
     * @param {module:api/GroupV2Api~groupV2GetRecommendedGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetRecommendedGroups200Response}
     */
    groupV2GetRecommendedGroups(createDateRange, groupType, callback) {
      let postBody = null;
      // verify the required parameter 'createDateRange' is set
      if (createDateRange === undefined || createDateRange === null) {
        throw new Error("Missing the required parameter 'createDateRange' when calling groupV2GetRecommendedGroups");
      }
      // verify the required parameter 'groupType' is set
      if (groupType === undefined || groupType === null) {
        throw new Error("Missing the required parameter 'groupType' when calling groupV2GetRecommendedGroups");
      }

      let pathParams = {
        'createDateRange': createDateRange,
        'groupType': groupType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetRecommendedGroups200Response;
      return this.apiClient.callApi(
        '/GroupV2/Recommended/{groupType}/{createDateRange}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2GetUserClanInviteSetting operation.
     * @callback module:api/GroupV2Api~groupV2GetUserClanInviteSettingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GetUserClanInviteSetting200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the state of the user's clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
     * @param {Number} mType The Destiny membership type of the account we wish to access settings.
     * @param {module:api/GroupV2Api~groupV2GetUserClanInviteSettingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GetUserClanInviteSetting200Response}
     */
    groupV2GetUserClanInviteSetting(mType, callback) {
      let postBody = null;
      // verify the required parameter 'mType' is set
      if (mType === undefined || mType === null) {
        throw new Error("Missing the required parameter 'mType' when calling groupV2GetUserClanInviteSetting");
      }

      let pathParams = {
        'mType': mType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GetUserClanInviteSetting200Response;
      return this.apiClient.callApi(
        '/GroupV2/GetUserClanInviteSetting/{mType}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2GroupSearch operation.
     * @callback module:api/GroupV2Api~groupV2GroupSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2GroupSearch200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for Groups.
     * @param {module:api/GroupV2Api~groupV2GroupSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2GroupSearch200Response}
     */
    groupV2GroupSearch(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2GroupSearch200Response;
      return this.apiClient.callApi(
        '/GroupV2/Search/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2IndividualGroupInvite operation.
     * @callback module:api/GroupV2Api~groupV2IndividualGroupInviteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2IndividualGroupInvite200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invite a user to join this group.
     * @param {Number} groupId ID of the group you would like to join.
     * @param {Number} membershipId Membership id of the account being invited.
     * @param {Number} membershipType MembershipType of the account being invited.
     * @param {module:api/GroupV2Api~groupV2IndividualGroupInviteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2IndividualGroupInvite200Response}
     */
    groupV2IndividualGroupInvite(groupId, membershipId, membershipType, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2IndividualGroupInvite");
      }
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling groupV2IndividualGroupInvite");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling groupV2IndividualGroupInvite");
      }

      let pathParams = {
        'groupId': groupId,
        'membershipId': membershipId,
        'membershipType': membershipType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2IndividualGroupInvite200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/Members/IndividualInvite/{membershipType}/{membershipId}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2IndividualGroupInviteCancel operation.
     * @callback module:api/GroupV2Api~groupV2IndividualGroupInviteCancelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2IndividualGroupInvite200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a pending invitation to join a group.
     * @param {Number} groupId ID of the group you would like to join.
     * @param {Number} membershipId Membership id of the account being cancelled.
     * @param {Number} membershipType MembershipType of the account being cancelled.
     * @param {module:api/GroupV2Api~groupV2IndividualGroupInviteCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2IndividualGroupInvite200Response}
     */
    groupV2IndividualGroupInviteCancel(groupId, membershipId, membershipType, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2IndividualGroupInviteCancel");
      }
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling groupV2IndividualGroupInviteCancel");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling groupV2IndividualGroupInviteCancel");
      }

      let pathParams = {
        'groupId': groupId,
        'membershipId': membershipId,
        'membershipType': membershipType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2IndividualGroupInvite200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/Members/IndividualInviteCancel/{membershipType}/{membershipId}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2KickMember operation.
     * @callback module:api/GroupV2Api~groupV2KickMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2KickMember200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
     * @param {Number} groupId Group ID to kick the user from.
     * @param {Number} membershipId Membership ID to kick.
     * @param {Number} membershipType Membership type of the provided membership ID.
     * @param {module:api/GroupV2Api~groupV2KickMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2KickMember200Response}
     */
    groupV2KickMember(groupId, membershipId, membershipType, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2KickMember");
      }
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling groupV2KickMember");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling groupV2KickMember");
      }

      let pathParams = {
        'groupId': groupId,
        'membershipId': membershipId,
        'membershipType': membershipType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2KickMember200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Kick/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2RecoverGroupForFounder operation.
     * @callback module:api/GroupV2Api~groupV2RecoverGroupForFounderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupV2RecoverGroupForFounder200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows a founder to manually recover a group they can see in game but not on bungie.net
     * @param {Number} groupType Type of group the supplied member founded.
     * @param {Number} membershipId Membership ID to for which to find founded groups.
     * @param {Number} membershipType Membership type of the supplied membership ID.
     * @param {module:api/GroupV2Api~groupV2RecoverGroupForFounderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupV2RecoverGroupForFounder200Response}
     */
    groupV2RecoverGroupForFounder(groupType, membershipId, membershipType, callback) {
      let postBody = null;
      // verify the required parameter 'groupType' is set
      if (groupType === undefined || groupType === null) {
        throw new Error("Missing the required parameter 'groupType' when calling groupV2RecoverGroupForFounder");
      }
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling groupV2RecoverGroupForFounder");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling groupV2RecoverGroupForFounder");
      }

      let pathParams = {
        'groupType': groupType,
        'membershipId': membershipId,
        'membershipType': membershipType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupV2RecoverGroupForFounder200Response;
      return this.apiClient.callApi(
        '/GroupV2/Recover/{membershipType}/{membershipId}/{groupType}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupV2UnbanMember operation.
     * @callback module:api/GroupV2Api~groupV2UnbanMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2EquipItem200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unbans the requested member, allowing them to re-apply for membership.
     * @param {Number} groupId 
     * @param {Number} membershipId Membership ID of the member to unban from the group
     * @param {Number} membershipType Membership type of the provided membership ID.
     * @param {module:api/GroupV2Api~groupV2UnbanMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2EquipItem200Response}
     */
    groupV2UnbanMember(groupId, membershipId, membershipType, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupV2UnbanMember");
      }
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling groupV2UnbanMember");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling groupV2UnbanMember");
      }

      let pathParams = {
        'groupId': groupId,
        'membershipId': membershipId,
        'membershipType': membershipType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2EquipItem200Response;
      return this.apiClient.callApi(
        '/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Unban/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
