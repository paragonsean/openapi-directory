/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CommunityContentGetCommunityContent200Response from '../model/CommunityContentGetCommunityContent200Response';
import ForumGetForumTagSuggestions200Response from '../model/ForumGetForumTagSuggestions200Response';
import ForumGetRecruitmentThreadSummaries200Response from '../model/ForumGetRecruitmentThreadSummaries200Response';
import ForumGetTopicForContent200Response from '../model/ForumGetTopicForContent200Response';

/**
* Forum service.
* @module api/ForumApi
* @version 2.18.0
*/
export default class ForumApi {

    /**
    * Constructs a new ForumApi. 
    * @alias module:api/ForumApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the forumGetCoreTopicsPaged operation.
     * @callback module:api/ForumApi~forumGetCoreTopicsPagedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommunityContentGetCommunityContent200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a listing of all topics marked as part of the core group.
     * @param {Number} categoryFilter The category filter.
     * @param {Number} page Zero base page
     * @param {Number} quickDate The date filter.
     * @param {Number} sort The sort mode.
     * @param {Object} opts Optional parameters
     * @param {String} [locales] Comma seperated list of locales posts must match to return in the result list. Default 'en'
     * @param {module:api/ForumApi~forumGetCoreTopicsPagedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommunityContentGetCommunityContent200Response}
     */
    forumGetCoreTopicsPaged(categoryFilter, page, quickDate, sort, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'categoryFilter' is set
      if (categoryFilter === undefined || categoryFilter === null) {
        throw new Error("Missing the required parameter 'categoryFilter' when calling forumGetCoreTopicsPaged");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling forumGetCoreTopicsPaged");
      }
      // verify the required parameter 'quickDate' is set
      if (quickDate === undefined || quickDate === null) {
        throw new Error("Missing the required parameter 'quickDate' when calling forumGetCoreTopicsPaged");
      }
      // verify the required parameter 'sort' is set
      if (sort === undefined || sort === null) {
        throw new Error("Missing the required parameter 'sort' when calling forumGetCoreTopicsPaged");
      }

      let pathParams = {
        'categoryFilter': categoryFilter,
        'page': page,
        'quickDate': quickDate,
        'sort': sort
      };
      let queryParams = {
        'locales': opts['locales']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CommunityContentGetCommunityContent200Response;
      return this.apiClient.callApi(
        '/Forum/GetCoreTopicsPaged/{page}/{sort}/{quickDate}/{categoryFilter}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forumGetForumTagSuggestions operation.
     * @callback module:api/ForumApi~forumGetForumTagSuggestionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForumGetForumTagSuggestions200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
     * @param {Object} opts Optional parameters
     * @param {String} [partialtag] The partial tag input to generate suggestions from.
     * @param {module:api/ForumApi~forumGetForumTagSuggestionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForumGetForumTagSuggestions200Response}
     */
    forumGetForumTagSuggestions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'partialtag': opts['partialtag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ForumGetForumTagSuggestions200Response;
      return this.apiClient.callApi(
        '/Forum/GetForumTagSuggestions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forumGetPoll operation.
     * @callback module:api/ForumApi~forumGetPollCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommunityContentGetCommunityContent200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified forum poll.
     * @param {Number} topicId The post id of the topic that has the poll.
     * @param {module:api/ForumApi~forumGetPollCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommunityContentGetCommunityContent200Response}
     */
    forumGetPoll(topicId, callback) {
      let postBody = null;
      // verify the required parameter 'topicId' is set
      if (topicId === undefined || topicId === null) {
        throw new Error("Missing the required parameter 'topicId' when calling forumGetPoll");
      }

      let pathParams = {
        'topicId': topicId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CommunityContentGetCommunityContent200Response;
      return this.apiClient.callApi(
        '/Forum/Poll/{topicId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forumGetPostAndParent operation.
     * @callback module:api/ForumApi~forumGetPostAndParentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommunityContentGetCommunityContent200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the post specified and its immediate parent.
     * @param {Number} childPostId 
     * @param {Object} opts Optional parameters
     * @param {String} [showbanned] If this value is not null or empty, banned posts are requested to be returned
     * @param {module:api/ForumApi~forumGetPostAndParentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommunityContentGetCommunityContent200Response}
     */
    forumGetPostAndParent(childPostId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'childPostId' is set
      if (childPostId === undefined || childPostId === null) {
        throw new Error("Missing the required parameter 'childPostId' when calling forumGetPostAndParent");
      }

      let pathParams = {
        'childPostId': childPostId
      };
      let queryParams = {
        'showbanned': opts['showbanned']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CommunityContentGetCommunityContent200Response;
      return this.apiClient.callApi(
        '/Forum/GetPostAndParent/{childPostId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forumGetPostAndParentAwaitingApproval operation.
     * @callback module:api/ForumApi~forumGetPostAndParentAwaitingApprovalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommunityContentGetCommunityContent200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the post specified and its immediate parent of posts that are awaiting approval.
     * @param {Number} childPostId 
     * @param {Object} opts Optional parameters
     * @param {String} [showbanned] If this value is not null or empty, banned posts are requested to be returned
     * @param {module:api/ForumApi~forumGetPostAndParentAwaitingApprovalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommunityContentGetCommunityContent200Response}
     */
    forumGetPostAndParentAwaitingApproval(childPostId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'childPostId' is set
      if (childPostId === undefined || childPostId === null) {
        throw new Error("Missing the required parameter 'childPostId' when calling forumGetPostAndParentAwaitingApproval");
      }

      let pathParams = {
        'childPostId': childPostId
      };
      let queryParams = {
        'showbanned': opts['showbanned']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CommunityContentGetCommunityContent200Response;
      return this.apiClient.callApi(
        '/Forum/GetPostAndParentAwaitingApproval/{childPostId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forumGetPostsThreadedPaged operation.
     * @callback module:api/ForumApi~forumGetPostsThreadedPagedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommunityContentGetCommunityContent200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
     * @param {Boolean} getParentPost 
     * @param {Number} page 
     * @param {Number} pageSize 
     * @param {Number} parentPostId 
     * @param {Number} replySize 
     * @param {Boolean} rootThreadMode 
     * @param {Number} sortMode 
     * @param {Object} opts Optional parameters
     * @param {String} [showbanned] If this value is not null or empty, banned posts are requested to be returned
     * @param {module:api/ForumApi~forumGetPostsThreadedPagedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommunityContentGetCommunityContent200Response}
     */
    forumGetPostsThreadedPaged(getParentPost, page, pageSize, parentPostId, replySize, rootThreadMode, sortMode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'getParentPost' is set
      if (getParentPost === undefined || getParentPost === null) {
        throw new Error("Missing the required parameter 'getParentPost' when calling forumGetPostsThreadedPaged");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling forumGetPostsThreadedPaged");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling forumGetPostsThreadedPaged");
      }
      // verify the required parameter 'parentPostId' is set
      if (parentPostId === undefined || parentPostId === null) {
        throw new Error("Missing the required parameter 'parentPostId' when calling forumGetPostsThreadedPaged");
      }
      // verify the required parameter 'replySize' is set
      if (replySize === undefined || replySize === null) {
        throw new Error("Missing the required parameter 'replySize' when calling forumGetPostsThreadedPaged");
      }
      // verify the required parameter 'rootThreadMode' is set
      if (rootThreadMode === undefined || rootThreadMode === null) {
        throw new Error("Missing the required parameter 'rootThreadMode' when calling forumGetPostsThreadedPaged");
      }
      // verify the required parameter 'sortMode' is set
      if (sortMode === undefined || sortMode === null) {
        throw new Error("Missing the required parameter 'sortMode' when calling forumGetPostsThreadedPaged");
      }

      let pathParams = {
        'getParentPost': getParentPost,
        'page': page,
        'pageSize': pageSize,
        'parentPostId': parentPostId,
        'replySize': replySize,
        'rootThreadMode': rootThreadMode,
        'sortMode': sortMode
      };
      let queryParams = {
        'showbanned': opts['showbanned']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CommunityContentGetCommunityContent200Response;
      return this.apiClient.callApi(
        '/Forum/GetPostsThreadedPaged/{parentPostId}/{page}/{pageSize}/{replySize}/{getParentPost}/{rootThreadMode}/{sortMode}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forumGetPostsThreadedPagedFromChild operation.
     * @callback module:api/ForumApi~forumGetPostsThreadedPagedFromChildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommunityContentGetCommunityContent200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
     * @param {Number} childPostId 
     * @param {Number} page 
     * @param {Number} pageSize 
     * @param {Number} replySize 
     * @param {Boolean} rootThreadMode 
     * @param {Number} sortMode 
     * @param {Object} opts Optional parameters
     * @param {String} [showbanned] If this value is not null or empty, banned posts are requested to be returned
     * @param {module:api/ForumApi~forumGetPostsThreadedPagedFromChildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommunityContentGetCommunityContent200Response}
     */
    forumGetPostsThreadedPagedFromChild(childPostId, page, pageSize, replySize, rootThreadMode, sortMode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'childPostId' is set
      if (childPostId === undefined || childPostId === null) {
        throw new Error("Missing the required parameter 'childPostId' when calling forumGetPostsThreadedPagedFromChild");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling forumGetPostsThreadedPagedFromChild");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling forumGetPostsThreadedPagedFromChild");
      }
      // verify the required parameter 'replySize' is set
      if (replySize === undefined || replySize === null) {
        throw new Error("Missing the required parameter 'replySize' when calling forumGetPostsThreadedPagedFromChild");
      }
      // verify the required parameter 'rootThreadMode' is set
      if (rootThreadMode === undefined || rootThreadMode === null) {
        throw new Error("Missing the required parameter 'rootThreadMode' when calling forumGetPostsThreadedPagedFromChild");
      }
      // verify the required parameter 'sortMode' is set
      if (sortMode === undefined || sortMode === null) {
        throw new Error("Missing the required parameter 'sortMode' when calling forumGetPostsThreadedPagedFromChild");
      }

      let pathParams = {
        'childPostId': childPostId,
        'page': page,
        'pageSize': pageSize,
        'replySize': replySize,
        'rootThreadMode': rootThreadMode,
        'sortMode': sortMode
      };
      let queryParams = {
        'showbanned': opts['showbanned']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CommunityContentGetCommunityContent200Response;
      return this.apiClient.callApi(
        '/Forum/GetPostsThreadedPagedFromChild/{childPostId}/{page}/{pageSize}/{replySize}/{rootThreadMode}/{sortMode}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forumGetRecruitmentThreadSummaries operation.
     * @callback module:api/ForumApi~forumGetRecruitmentThreadSummariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForumGetRecruitmentThreadSummaries200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows the caller to get a list of to 25 recruitment thread summary information objects.
     * @param {module:api/ForumApi~forumGetRecruitmentThreadSummariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForumGetRecruitmentThreadSummaries200Response}
     */
    forumGetRecruitmentThreadSummaries(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ForumGetRecruitmentThreadSummaries200Response;
      return this.apiClient.callApi(
        '/Forum/Recruit/Summaries/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forumGetTopicForContent operation.
     * @callback module:api/ForumApi~forumGetTopicForContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForumGetTopicForContent200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the post Id for the given content item's comments, if it exists.
     * @param {Number} contentId 
     * @param {module:api/ForumApi~forumGetTopicForContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForumGetTopicForContent200Response}
     */
    forumGetTopicForContent(contentId, callback) {
      let postBody = null;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling forumGetTopicForContent");
      }

      let pathParams = {
        'contentId': contentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ForumGetTopicForContent200Response;
      return this.apiClient.callApi(
        '/Forum/GetTopicForContent/{contentId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forumGetTopicsPaged operation.
     * @callback module:api/ForumApi~forumGetTopicsPagedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommunityContentGetCommunityContent200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get topics from any forum.
     * @param {Number} categoryFilter A category filter
     * @param {Number} group The group, if any.
     * @param {Number} page Zero paged page number
     * @param {Number} pageSize Unused
     * @param {Number} quickDate A date filter.
     * @param {Number} sort The sort mode.
     * @param {Object} opts Optional parameters
     * @param {String} [locales] Comma seperated list of locales posts must match to return in the result list. Default 'en'
     * @param {String} [tagstring] The tags to search, if any.
     * @param {module:api/ForumApi~forumGetTopicsPagedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommunityContentGetCommunityContent200Response}
     */
    forumGetTopicsPaged(categoryFilter, group, page, pageSize, quickDate, sort, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'categoryFilter' is set
      if (categoryFilter === undefined || categoryFilter === null) {
        throw new Error("Missing the required parameter 'categoryFilter' when calling forumGetTopicsPaged");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling forumGetTopicsPaged");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling forumGetTopicsPaged");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling forumGetTopicsPaged");
      }
      // verify the required parameter 'quickDate' is set
      if (quickDate === undefined || quickDate === null) {
        throw new Error("Missing the required parameter 'quickDate' when calling forumGetTopicsPaged");
      }
      // verify the required parameter 'sort' is set
      if (sort === undefined || sort === null) {
        throw new Error("Missing the required parameter 'sort' when calling forumGetTopicsPaged");
      }

      let pathParams = {
        'categoryFilter': categoryFilter,
        'group': group,
        'page': page,
        'pageSize': pageSize,
        'quickDate': quickDate,
        'sort': sort
      };
      let queryParams = {
        'locales': opts['locales'],
        'tagstring': opts['tagstring']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CommunityContentGetCommunityContent200Response;
      return this.apiClient.callApi(
        '/Forum/GetTopicsPaged/{page}/{pageSize}/{group}/{sort}/{quickDate}/{categoryFilter}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
