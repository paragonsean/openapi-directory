/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Destiny2EquipItem200Response from '../model/Destiny2EquipItem200Response';
import FireteamGetAvailableClanFireteams200Response from '../model/FireteamGetAvailableClanFireteams200Response';
import FireteamGetClanFireteam200Response from '../model/FireteamGetClanFireteam200Response';
import FireteamGetMyClanFireteams200Response from '../model/FireteamGetMyClanFireteams200Response';

/**
* Fireteam service.
* @module api/FireteamApi
* @version 2.18.0
*/
export default class FireteamApi {

    /**
    * Constructs a new FireteamApi. 
    * @alias module:api/FireteamApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fireteamGetActivePrivateClanFireteamCount operation.
     * @callback module:api/FireteamApi~fireteamGetActivePrivateClanFireteamCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2EquipItem200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
     * @param {Number} groupId The group id of the clan.
     * @param {module:api/FireteamApi~fireteamGetActivePrivateClanFireteamCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2EquipItem200Response}
     */
    fireteamGetActivePrivateClanFireteamCount(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling fireteamGetActivePrivateClanFireteamCount");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2EquipItem200Response;
      return this.apiClient.callApi(
        '/Fireteam/Clan/{groupId}/ActiveCount/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fireteamGetAvailableClanFireteams operation.
     * @callback module:api/FireteamApi~fireteamGetAvailableClanFireteamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FireteamGetAvailableClanFireteams200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a listing of all of this clan's fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
     * @param {Number} activityType The activity type to filter by.
     * @param {Number} dateRange The date range to grab available fireteams.
     * @param {Number} groupId The group id of the clan.
     * @param {Number} page Zero based page
     * @param {Number} platform The platform filter.
     * @param {Number} publicOnly Determines public/private filtering.
     * @param {Number} slotFilter Filters based on available slots
     * @param {Object} opts Optional parameters
     * @param {Boolean} [excludeImmediate] If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum.
     * @param {String} [langFilter] An optional language filter.
     * @param {module:api/FireteamApi~fireteamGetAvailableClanFireteamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FireteamGetAvailableClanFireteams200Response}
     */
    fireteamGetAvailableClanFireteams(activityType, dateRange, groupId, page, platform, publicOnly, slotFilter, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'activityType' is set
      if (activityType === undefined || activityType === null) {
        throw new Error("Missing the required parameter 'activityType' when calling fireteamGetAvailableClanFireteams");
      }
      // verify the required parameter 'dateRange' is set
      if (dateRange === undefined || dateRange === null) {
        throw new Error("Missing the required parameter 'dateRange' when calling fireteamGetAvailableClanFireteams");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling fireteamGetAvailableClanFireteams");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling fireteamGetAvailableClanFireteams");
      }
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling fireteamGetAvailableClanFireteams");
      }
      // verify the required parameter 'publicOnly' is set
      if (publicOnly === undefined || publicOnly === null) {
        throw new Error("Missing the required parameter 'publicOnly' when calling fireteamGetAvailableClanFireteams");
      }
      // verify the required parameter 'slotFilter' is set
      if (slotFilter === undefined || slotFilter === null) {
        throw new Error("Missing the required parameter 'slotFilter' when calling fireteamGetAvailableClanFireteams");
      }

      let pathParams = {
        'activityType': activityType,
        'dateRange': dateRange,
        'groupId': groupId,
        'page': page,
        'platform': platform,
        'publicOnly': publicOnly,
        'slotFilter': slotFilter
      };
      let queryParams = {
        'excludeImmediate': opts['excludeImmediate'],
        'langFilter': opts['langFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = FireteamGetAvailableClanFireteams200Response;
      return this.apiClient.callApi(
        '/Fireteam/Clan/{groupId}/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{publicOnly}/{page}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fireteamGetClanFireteam operation.
     * @callback module:api/FireteamApi~fireteamGetClanFireteamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FireteamGetClanFireteam200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a specific fireteam.
     * @param {Number} fireteamId The unique id of the fireteam.
     * @param {Number} groupId The group id of the clan.
     * @param {module:api/FireteamApi~fireteamGetClanFireteamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FireteamGetClanFireteam200Response}
     */
    fireteamGetClanFireteam(fireteamId, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'fireteamId' is set
      if (fireteamId === undefined || fireteamId === null) {
        throw new Error("Missing the required parameter 'fireteamId' when calling fireteamGetClanFireteam");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling fireteamGetClanFireteam");
      }

      let pathParams = {
        'fireteamId': fireteamId,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = FireteamGetClanFireteam200Response;
      return this.apiClient.callApi(
        '/Fireteam/Clan/{groupId}/Summary/{fireteamId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fireteamGetMyClanFireteams operation.
     * @callback module:api/FireteamApi~fireteamGetMyClanFireteamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FireteamGetMyClanFireteams200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a listing of all fireteams that caller is an applicant, a member, or an alternate of.
     * @param {Number} groupId The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).
     * @param {Boolean} includeClosed If true, return fireteams that have been closed.
     * @param {Number} page Deprecated parameter, ignored.
     * @param {Number} platform The platform filter.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [groupFilter] If true, filter by clan. Otherwise, ignore the clan and show all of the user's fireteams.
     * @param {String} [langFilter] An optional language filter.
     * @param {module:api/FireteamApi~fireteamGetMyClanFireteamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FireteamGetMyClanFireteams200Response}
     */
    fireteamGetMyClanFireteams(groupId, includeClosed, page, platform, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling fireteamGetMyClanFireteams");
      }
      // verify the required parameter 'includeClosed' is set
      if (includeClosed === undefined || includeClosed === null) {
        throw new Error("Missing the required parameter 'includeClosed' when calling fireteamGetMyClanFireteams");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling fireteamGetMyClanFireteams");
      }
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling fireteamGetMyClanFireteams");
      }

      let pathParams = {
        'groupId': groupId,
        'includeClosed': includeClosed,
        'page': page,
        'platform': platform
      };
      let queryParams = {
        'groupFilter': opts['groupFilter'],
        'langFilter': opts['langFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = FireteamGetMyClanFireteams200Response;
      return this.apiClient.callApi(
        '/Fireteam/Clan/{groupId}/My/{platform}/{includeClosed}/{page}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fireteamSearchPublicAvailableClanFireteams operation.
     * @callback module:api/FireteamApi~fireteamSearchPublicAvailableClanFireteamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FireteamGetAvailableClanFireteams200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
     * @param {Number} activityType The activity type to filter by.
     * @param {Number} dateRange The date range to grab available fireteams.
     * @param {Number} page Zero based page
     * @param {Number} platform The platform filter.
     * @param {Number} slotFilter Filters based on available slots
     * @param {Object} opts Optional parameters
     * @param {Boolean} [excludeImmediate] If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum.
     * @param {String} [langFilter] An optional language filter.
     * @param {module:api/FireteamApi~fireteamSearchPublicAvailableClanFireteamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FireteamGetAvailableClanFireteams200Response}
     */
    fireteamSearchPublicAvailableClanFireteams(activityType, dateRange, page, platform, slotFilter, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'activityType' is set
      if (activityType === undefined || activityType === null) {
        throw new Error("Missing the required parameter 'activityType' when calling fireteamSearchPublicAvailableClanFireteams");
      }
      // verify the required parameter 'dateRange' is set
      if (dateRange === undefined || dateRange === null) {
        throw new Error("Missing the required parameter 'dateRange' when calling fireteamSearchPublicAvailableClanFireteams");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling fireteamSearchPublicAvailableClanFireteams");
      }
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling fireteamSearchPublicAvailableClanFireteams");
      }
      // verify the required parameter 'slotFilter' is set
      if (slotFilter === undefined || slotFilter === null) {
        throw new Error("Missing the required parameter 'slotFilter' when calling fireteamSearchPublicAvailableClanFireteams");
      }

      let pathParams = {
        'activityType': activityType,
        'dateRange': dateRange,
        'page': page,
        'platform': platform,
        'slotFilter': slotFilter
      };
      let queryParams = {
        'excludeImmediate': opts['excludeImmediate'],
        'langFilter': opts['langFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = FireteamGetAvailableClanFireteams200Response;
      return this.apiClient.callApi(
        '/Fireteam/Search/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{page}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
