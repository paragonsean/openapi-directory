/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Destiny2GetClanAggregateStats200Response from '../model/Destiny2GetClanAggregateStats200Response';
import Destiny2GetClanLeaderboards200Response from '../model/Destiny2GetClanLeaderboards200Response';
import Destiny2GetPublicVendors200Response from '../model/Destiny2GetPublicVendors200Response';
import Destiny2InsertSocketPlug200Response from '../model/Destiny2InsertSocketPlug200Response';

/**
* Preview service.
* @module api/PreviewApi
* @version 2.18.0
*/
export default class PreviewApi {

    /**
    * Constructs a new PreviewApi. 
    * @alias module:api/PreviewApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the destiny2GetClanAggregateStats_0 operation.
     * @callback module:api/PreviewApi~destiny2GetClanAggregateStats_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetClanAggregateStats200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param {Number} groupId Group ID of the clan whose leaderboards you wish to fetch.
     * @param {Object} opts Optional parameters
     * @param {String} [modes] List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
     * @param {module:api/PreviewApi~destiny2GetClanAggregateStats_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetClanAggregateStats200Response}
     */
    destiny2GetClanAggregateStats_0(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling destiny2GetClanAggregateStats_0");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        'modes': opts['modes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetClanAggregateStats200Response;
      return this.apiClient.callApi(
        '/Destiny2/Stats/AggregateClanStats/{groupId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetClanLeaderboards_0 operation.
     * @callback module:api/PreviewApi~destiny2GetClanLeaderboards_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetClanLeaderboards200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param {Number} groupId Group ID of the clan whose leaderboards you wish to fetch.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxtop] Maximum number of top players to return. Use a large number to get entire leaderboard.
     * @param {String} [modes] List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
     * @param {String} [statid] ID of stat to return rather than returning all Leaderboard stats.
     * @param {module:api/PreviewApi~destiny2GetClanLeaderboards_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetClanLeaderboards200Response}
     */
    destiny2GetClanLeaderboards_0(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling destiny2GetClanLeaderboards_0");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        'maxtop': opts['maxtop'],
        'modes': opts['modes'],
        'statid': opts['statid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetClanLeaderboards200Response;
      return this.apiClient.callApi(
        '/Destiny2/Stats/Leaderboards/Clans/{groupId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetLeaderboardsForCharacter_0 operation.
     * @callback module:api/PreviewApi~destiny2GetLeaderboardsForCharacter_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetClanLeaderboards200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param {Number} characterId The specific character to build the leaderboard around for the provided Destiny Membership.
     * @param {Number} destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param {Number} membershipType A valid non-BungieNet membership type.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxtop] Maximum number of top players to return. Use a large number to get entire leaderboard.
     * @param {String} [modes] List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
     * @param {String} [statid] ID of stat to return rather than returning all Leaderboard stats.
     * @param {module:api/PreviewApi~destiny2GetLeaderboardsForCharacter_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetClanLeaderboards200Response}
     */
    destiny2GetLeaderboardsForCharacter_0(characterId, destinyMembershipId, membershipType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling destiny2GetLeaderboardsForCharacter_0");
      }
      // verify the required parameter 'destinyMembershipId' is set
      if (destinyMembershipId === undefined || destinyMembershipId === null) {
        throw new Error("Missing the required parameter 'destinyMembershipId' when calling destiny2GetLeaderboardsForCharacter_0");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling destiny2GetLeaderboardsForCharacter_0");
      }

      let pathParams = {
        'characterId': characterId,
        'destinyMembershipId': destinyMembershipId,
        'membershipType': membershipType
      };
      let queryParams = {
        'maxtop': opts['maxtop'],
        'modes': opts['modes'],
        'statid': opts['statid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetClanLeaderboards200Response;
      return this.apiClient.callApi(
        '/Destiny2/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/{characterId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetLeaderboards_0 operation.
     * @callback module:api/PreviewApi~destiny2GetLeaderboards_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetClanLeaderboards200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
     * @param {Number} destinyMembershipId The Destiny membershipId of the user to retrieve.
     * @param {Number} membershipType A valid non-BungieNet membership type.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxtop] Maximum number of top players to return. Use a large number to get entire leaderboard.
     * @param {String} [modes] List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
     * @param {String} [statid] ID of stat to return rather than returning all Leaderboard stats.
     * @param {module:api/PreviewApi~destiny2GetLeaderboards_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetClanLeaderboards200Response}
     */
    destiny2GetLeaderboards_0(destinyMembershipId, membershipType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'destinyMembershipId' is set
      if (destinyMembershipId === undefined || destinyMembershipId === null) {
        throw new Error("Missing the required parameter 'destinyMembershipId' when calling destiny2GetLeaderboards_0");
      }
      // verify the required parameter 'membershipType' is set
      if (membershipType === undefined || membershipType === null) {
        throw new Error("Missing the required parameter 'membershipType' when calling destiny2GetLeaderboards_0");
      }

      let pathParams = {
        'destinyMembershipId': destinyMembershipId,
        'membershipType': membershipType
      };
      let queryParams = {
        'maxtop': opts['maxtop'],
        'modes': opts['modes'],
        'statid': opts['statid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetClanLeaderboards200Response;
      return this.apiClient.callApi(
        '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/Leaderboards/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2GetPublicVendors_0 operation.
     * @callback module:api/PreviewApi~destiny2GetPublicVendors_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2GetPublicVendors200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor's available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: 'It's a long story...'
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [components] A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
     * @param {module:api/PreviewApi~destiny2GetPublicVendors_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2GetPublicVendors200Response}
     */
    destiny2GetPublicVendors_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'components': this.apiClient.buildCollectionParam(opts['components'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2GetPublicVendors200Response;
      return this.apiClient.callApi(
        '/Destiny2/Vendors/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2InsertSocketPlugFree_0 operation.
     * @callback module:api/PreviewApi~destiny2InsertSocketPlugFree_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2InsertSocketPlug200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a 'free' plug into an item's socket. This does not require 'Advanced Write Action' authorization and is available to 3rd-party apps, but will only work on 'free and reversible' socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.
     * @param {module:api/PreviewApi~destiny2InsertSocketPlugFree_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2InsertSocketPlug200Response}
     */
    destiny2InsertSocketPlugFree_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2InsertSocketPlug200Response;
      return this.apiClient.callApi(
        '/Destiny2/Actions/Items/InsertSocketPlugFree/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destiny2InsertSocketPlug_0 operation.
     * @callback module:api/PreviewApi~destiny2InsertSocketPlug_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Destiny2InsertSocketPlug200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a plug into a socketed item. I know how it sounds, but I assure you it's much more G-rated than you might be guessing. We haven't decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for 'InsertPlugs' from the account owner.
     * @param {module:api/PreviewApi~destiny2InsertSocketPlug_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Destiny2InsertSocketPlug200Response}
     */
    destiny2InsertSocketPlug_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Destiny2InsertSocketPlug200Response;
      return this.apiClient.callApi(
        '/Destiny2/Actions/Items/InsertSocketPlug/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
