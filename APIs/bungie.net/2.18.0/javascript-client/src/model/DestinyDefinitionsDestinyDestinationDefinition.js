/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition from './DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition';
import DestinyDefinitionsDestinyActivityGraphListEntryDefinition from './DestinyDefinitionsDestinyActivityGraphListEntryDefinition';
import DestinyDefinitionsDestinyBubbleDefinition from './DestinyDefinitionsDestinyBubbleDefinition';
import DestinyDefinitionsDestinyDestinationBubbleSettingDefinition from './DestinyDefinitionsDestinyDestinationBubbleSettingDefinition';

/**
 * The DestinyDefinitionsDestinyDestinationDefinition model module.
 * @module model/DestinyDefinitionsDestinyDestinationDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsDestinyDestinationDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsDestinyDestinationDefinition</code>.
     * On to one of the more confusing subjects of the API. What is a Destination, and what is the relationship between it, Activities, Locations, and Places?  A \&quot;Destination\&quot; is a specific region/city/area of a larger \&quot;Place\&quot;. For instance, a Place might be Earth where a Destination might be Bellevue, Washington. (Please, pick a more interesting destination if you come to visit Earth).
     * @alias module:model/DestinyDefinitionsDestinyDestinationDefinition
     */
    constructor() { 
        
        DestinyDefinitionsDestinyDestinationDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsDestinyDestinationDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsDestinyDestinationDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsDestinyDestinationDefinition} The populated <code>DestinyDefinitionsDestinyDestinationDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsDestinyDestinationDefinition();

            if (data.hasOwnProperty('activityGraphEntries')) {
                obj['activityGraphEntries'] = ApiClient.convertToType(data['activityGraphEntries'], [DestinyDefinitionsDestinyActivityGraphListEntryDefinition]);
            }
            if (data.hasOwnProperty('bubbleSettings')) {
                obj['bubbleSettings'] = ApiClient.convertToType(data['bubbleSettings'], [DestinyDefinitionsDestinyDestinationBubbleSettingDefinition]);
            }
            if (data.hasOwnProperty('bubbles')) {
                obj['bubbles'] = ApiClient.convertToType(data['bubbles'], [DestinyDefinitionsDestinyBubbleDefinition]);
            }
            if (data.hasOwnProperty('defaultFreeroamActivityHash')) {
                obj['defaultFreeroamActivityHash'] = ApiClient.convertToType(data['defaultFreeroamActivityHash'], 'Number');
            }
            if (data.hasOwnProperty('displayProperties')) {
                obj['displayProperties'] = DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.constructFromObject(data['displayProperties']);
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'Number');
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('placeHash')) {
                obj['placeHash'] = ApiClient.convertToType(data['placeHash'], 'Number');
            }
            if (data.hasOwnProperty('redacted')) {
                obj['redacted'] = ApiClient.convertToType(data['redacted'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsDestinyDestinationDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsDestinyDestinationDefinition</code>.
     */
    static validateJSON(data) {
        if (data['activityGraphEntries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['activityGraphEntries'])) {
                throw new Error("Expected the field `activityGraphEntries` to be an array in the JSON data but got " + data['activityGraphEntries']);
            }
            // validate the optional field `activityGraphEntries` (array)
            for (const item of data['activityGraphEntries']) {
                DestinyDefinitionsDestinyActivityGraphListEntryDefinition.validateJSON(item);
            };
        }
        if (data['bubbleSettings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bubbleSettings'])) {
                throw new Error("Expected the field `bubbleSettings` to be an array in the JSON data but got " + data['bubbleSettings']);
            }
            // validate the optional field `bubbleSettings` (array)
            for (const item of data['bubbleSettings']) {
                DestinyDefinitionsDestinyDestinationBubbleSettingDefinition.validateJSON(item);
            };
        }
        if (data['bubbles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bubbles'])) {
                throw new Error("Expected the field `bubbles` to be an array in the JSON data but got " + data['bubbles']);
            }
            // validate the optional field `bubbles` (array)
            for (const item of data['bubbles']) {
                DestinyDefinitionsDestinyBubbleDefinition.validateJSON(item);
            };
        }
        // validate the optional field `displayProperties`
        if (data['displayProperties']) { // data not null
          DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJSON(data['displayProperties']);
        }

        return true;
    }


}



/**
 * If the Destination has default Activity Graphs (i.e. \"Map\") that should be shown in the director, this is the list of those Graphs. At most, only one should be active at any given time for a Destination: these would represent, for example, different variants on a Map if the Destination is changing on a macro level based on game state.
 * @member {Array.<module:model/DestinyDefinitionsDestinyActivityGraphListEntryDefinition>} activityGraphEntries
 */
DestinyDefinitionsDestinyDestinationDefinition.prototype['activityGraphEntries'] = undefined;

/**
 * A Destination may have many \"Bubbles\" zones with human readable properties.  We don't get as much info as I'd like about them - I'd love to return info like where on the map they are located - but at least this gives you the name of those bubbles. bubbleSettings and bubbles both have the identical number of entries, and you should match up their indexes to provide matching bubble and bubbleSettings data.  DEPRECATED - Just use bubbles, it now has this data.
 * @member {Array.<module:model/DestinyDefinitionsDestinyDestinationBubbleSettingDefinition>} bubbleSettings
 */
DestinyDefinitionsDestinyDestinationDefinition.prototype['bubbleSettings'] = undefined;

/**
 * This provides the unique identifiers for every bubble in the destination (only guaranteed unique within the destination), and any intrinsic properties of the bubble.  bubbleSettings and bubbles both have the identical number of entries, and you should match up their indexes to provide matching bubble and bubbleSettings data.
 * @member {Array.<module:model/DestinyDefinitionsDestinyBubbleDefinition>} bubbles
 */
DestinyDefinitionsDestinyDestinationDefinition.prototype['bubbles'] = undefined;

/**
 * If this Destination has a default Free-Roam activity, this is the hash for that Activity. Use it to look up the DestinyActivityDefintion.
 * @member {Number} defaultFreeroamActivityHash
 */
DestinyDefinitionsDestinyDestinationDefinition.prototype['defaultFreeroamActivityHash'] = undefined;

/**
 * @member {module:model/DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition} displayProperties
 */
DestinyDefinitionsDestinyDestinationDefinition.prototype['displayProperties'] = undefined;

/**
 * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
 * @member {Number} hash
 */
DestinyDefinitionsDestinyDestinationDefinition.prototype['hash'] = undefined;

/**
 * The index of the entity as it was found in the investment tables.
 * @member {Number} index
 */
DestinyDefinitionsDestinyDestinationDefinition.prototype['index'] = undefined;

/**
 * The place that \"owns\" this Destination. Use this hash to look up the DestinyPlaceDefinition.
 * @member {Number} placeHash
 */
DestinyDefinitionsDestinyDestinationDefinition.prototype['placeHash'] = undefined;

/**
 * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
 * @member {Boolean} redacted
 */
DestinyDefinitionsDestinyDestinationDefinition.prototype['redacted'] = undefined;






export default DestinyDefinitionsDestinyDestinationDefinition;

