/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DestinyDefinitionsDestinyInventoryItemStatDefinition model module.
 * @module model/DestinyDefinitionsDestinyInventoryItemStatDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsDestinyInventoryItemStatDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsDestinyInventoryItemStatDefinition</code>.
     * Defines a specific stat value on an item, and the minimum/maximum range that we could compute for the item based on our heuristics for how the item might be generated.  Not guaranteed to match real-world instances of the item, but should hopefully at least be close. If it&#39;s not close, let us know on the Bungie API forums.
     * @alias module:model/DestinyDefinitionsDestinyInventoryItemStatDefinition
     */
    constructor() { 
        
        DestinyDefinitionsDestinyInventoryItemStatDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsDestinyInventoryItemStatDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsDestinyInventoryItemStatDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsDestinyInventoryItemStatDefinition} The populated <code>DestinyDefinitionsDestinyInventoryItemStatDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsDestinyInventoryItemStatDefinition();

            if (data.hasOwnProperty('displayMaximum')) {
                obj['displayMaximum'] = ApiClient.convertToType(data['displayMaximum'], 'Number');
            }
            if (data.hasOwnProperty('maximum')) {
                obj['maximum'] = ApiClient.convertToType(data['maximum'], 'Number');
            }
            if (data.hasOwnProperty('minimum')) {
                obj['minimum'] = ApiClient.convertToType(data['minimum'], 'Number');
            }
            if (data.hasOwnProperty('statHash')) {
                obj['statHash'] = ApiClient.convertToType(data['statHash'], 'Number');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsDestinyInventoryItemStatDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsDestinyInventoryItemStatDefinition</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The maximum possible value for the stat as shown in the UI, if it is being shown somewhere that reveals maximum in the UI (such as a bar chart-style view).  This is pulled directly from the item's DestinyStatGroupDefinition, and placed here for convenience.  If not returned, there is no maximum to use (and thus the stat should not be shown in a way that assumes there is a limit to the stat)
 * @member {Number} displayMaximum
 */
DestinyDefinitionsDestinyInventoryItemStatDefinition.prototype['displayMaximum'] = undefined;

/**
 * The maximum possible value for this stat that we think the item can roll.  WARNING: In Destiny 1, this field was calculated using the potential stat rolls on the item's talent grid. In Destiny 2, items no longer have meaningful talent grids and instead have sockets: but the calculation of this field was never altered to adapt to this change. As such, this field should be considered deprecated until we can address this oversight.
 * @member {Number} maximum
 */
DestinyDefinitionsDestinyInventoryItemStatDefinition.prototype['maximum'] = undefined;

/**
 * The minimum possible value for this stat that we think the item can roll.
 * @member {Number} minimum
 */
DestinyDefinitionsDestinyInventoryItemStatDefinition.prototype['minimum'] = undefined;

/**
 * The hash for the DestinyStatDefinition representing this stat.
 * @member {Number} statHash
 */
DestinyDefinitionsDestinyInventoryItemStatDefinition.prototype['statHash'] = undefined;

/**
 * This value represents the stat value assuming the minimum possible roll but accounting for any mandatory bonuses that should be applied to the stat on item creation.  In Destiny 1, this was different from the \"minimum\" value because there were certain conditions where an item could be theoretically lower level/value than the initial roll.   In Destiny 2, this is not possible unless Talent Grids begin to be used again for these purposes or some other system change occurs... thus in practice, value and minimum should be the same in Destiny 2. Good riddance.
 * @member {Number} value
 */
DestinyDefinitionsDestinyInventoryItemStatDefinition.prototype['value'] = undefined;






export default DestinyDefinitionsDestinyInventoryItemStatDefinition;

