/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDefinitionsDestinyItemCraftingBlockBonusPlugDefinition from './DestinyDefinitionsDestinyItemCraftingBlockBonusPlugDefinition';

/**
 * The DestinyDefinitionsDestinyItemCraftingBlockDefinition model module.
 * @module model/DestinyDefinitionsDestinyItemCraftingBlockDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsDestinyItemCraftingBlockDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsDestinyItemCraftingBlockDefinition</code>.
     * If an item can have an action performed on it (like \&quot;Dismantle\&quot;), it will be defined here if you care.
     * @alias module:model/DestinyDefinitionsDestinyItemCraftingBlockDefinition
     */
    constructor() { 
        
        DestinyDefinitionsDestinyItemCraftingBlockDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsDestinyItemCraftingBlockDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsDestinyItemCraftingBlockDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsDestinyItemCraftingBlockDefinition} The populated <code>DestinyDefinitionsDestinyItemCraftingBlockDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsDestinyItemCraftingBlockDefinition();

            if (data.hasOwnProperty('baseMaterialRequirements')) {
                obj['baseMaterialRequirements'] = ApiClient.convertToType(data['baseMaterialRequirements'], 'Number');
            }
            if (data.hasOwnProperty('bonusPlugs')) {
                obj['bonusPlugs'] = ApiClient.convertToType(data['bonusPlugs'], [DestinyDefinitionsDestinyItemCraftingBlockBonusPlugDefinition]);
            }
            if (data.hasOwnProperty('failedRequirementStrings')) {
                obj['failedRequirementStrings'] = ApiClient.convertToType(data['failedRequirementStrings'], ['String']);
            }
            if (data.hasOwnProperty('outputItemHash')) {
                obj['outputItemHash'] = ApiClient.convertToType(data['outputItemHash'], 'Number');
            }
            if (data.hasOwnProperty('requiredSocketTypeHashes')) {
                obj['requiredSocketTypeHashes'] = ApiClient.convertToType(data['requiredSocketTypeHashes'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsDestinyItemCraftingBlockDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsDestinyItemCraftingBlockDefinition</code>.
     */
    static validateJSON(data) {
        if (data['bonusPlugs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bonusPlugs'])) {
                throw new Error("Expected the field `bonusPlugs` to be an array in the JSON data but got " + data['bonusPlugs']);
            }
            // validate the optional field `bonusPlugs` (array)
            for (const item of data['bonusPlugs']) {
                DestinyDefinitionsDestinyItemCraftingBlockBonusPlugDefinition.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['failedRequirementStrings'])) {
            throw new Error("Expected the field `failedRequirementStrings` to be an array in the JSON data but got " + data['failedRequirementStrings']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['requiredSocketTypeHashes'])) {
            throw new Error("Expected the field `requiredSocketTypeHashes` to be an array in the JSON data but got " + data['requiredSocketTypeHashes']);
        }

        return true;
    }


}



/**
 * A reference to the base material requirements for crafting with this recipe.
 * @member {Number} baseMaterialRequirements
 */
DestinyDefinitionsDestinyItemCraftingBlockDefinition.prototype['baseMaterialRequirements'] = undefined;

/**
 * A list of 'bonus' socket plugs that may be available if certain requirements are met.
 * @member {Array.<module:model/DestinyDefinitionsDestinyItemCraftingBlockBonusPlugDefinition>} bonusPlugs
 */
DestinyDefinitionsDestinyItemCraftingBlockDefinition.prototype['bonusPlugs'] = undefined;

/**
 * @member {Array.<String>} failedRequirementStrings
 */
DestinyDefinitionsDestinyItemCraftingBlockDefinition.prototype['failedRequirementStrings'] = undefined;

/**
 * A reference to the item definition that is created when crafting with this 'recipe' item.
 * @member {Number} outputItemHash
 */
DestinyDefinitionsDestinyItemCraftingBlockDefinition.prototype['outputItemHash'] = undefined;

/**
 * A list of socket type hashes that describes which sockets are required for crafting with this recipe.
 * @member {Array.<Number>} requiredSocketTypeHashes
 */
DestinyDefinitionsDestinyItemCraftingBlockDefinition.prototype['requiredSocketTypeHashes'] = undefined;






export default DestinyDefinitionsDestinyItemCraftingBlockDefinition;

