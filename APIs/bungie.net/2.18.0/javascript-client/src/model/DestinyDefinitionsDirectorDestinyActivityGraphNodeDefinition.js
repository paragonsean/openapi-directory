/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition from './DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition';
import DestinyDefinitionsCommonDestinyPositionDefinition from './DestinyDefinitionsCommonDestinyPositionDefinition';
import DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition from './DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition';
import DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition from './DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition';
import DestinyDefinitionsDirectorDestinyActivityGraphNodeStateEntry from './DestinyDefinitionsDirectorDestinyActivityGraphNodeStateEntry';

/**
 * The DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition model module.
 * @module model/DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition</code>.
     * This is the position and other data related to nodes in the activity graph that you can click to launch activities. An Activity Graph node will only have one active Activity at a time, which will determine the activity to be launched (and, unless overrideDisplay information is provided, will also determine the tooltip and other UI related to the node)
     * @alias module:model/DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition
     */
    constructor() { 
        
        DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition} The populated <code>DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition();

            if (data.hasOwnProperty('activities')) {
                obj['activities'] = ApiClient.convertToType(data['activities'], [DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition]);
            }
            if (data.hasOwnProperty('featuringStates')) {
                obj['featuringStates'] = ApiClient.convertToType(data['featuringStates'], [DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition]);
            }
            if (data.hasOwnProperty('nodeId')) {
                obj['nodeId'] = ApiClient.convertToType(data['nodeId'], 'Number');
            }
            if (data.hasOwnProperty('overrideDisplay')) {
                obj['overrideDisplay'] = ApiClient.convertToType(data['overrideDisplay'], DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition);
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], DestinyDefinitionsCommonDestinyPositionDefinition);
            }
            if (data.hasOwnProperty('states')) {
                obj['states'] = ApiClient.convertToType(data['states'], [DestinyDefinitionsDirectorDestinyActivityGraphNodeStateEntry]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition</code>.
     */
    static validateJSON(data) {
        if (data['activities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['activities'])) {
                throw new Error("Expected the field `activities` to be an array in the JSON data but got " + data['activities']);
            }
            // validate the optional field `activities` (array)
            for (const item of data['activities']) {
                DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition.validateJSON(item);
            };
        }
        if (data['featuringStates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['featuringStates'])) {
                throw new Error("Expected the field `featuringStates` to be an array in the JSON data but got " + data['featuringStates']);
            }
            // validate the optional field `featuringStates` (array)
            for (const item of data['featuringStates']) {
                DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition.validateJSON(item);
            };
        }
        // validate the optional field `overrideDisplay`
        if (data['overrideDisplay']) { // data not null
          DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJSON(data['overrideDisplay']);
        }
        // validate the optional field `position`
        if (data['position']) { // data not null
          DestinyDefinitionsCommonDestinyPositionDefinition.validateJSON(data['position']);
        }
        if (data['states']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['states'])) {
                throw new Error("Expected the field `states` to be an array in the JSON data but got " + data['states']);
            }
            // validate the optional field `states` (array)
            for (const item of data['states']) {
                DestinyDefinitionsDirectorDestinyActivityGraphNodeStateEntry.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The node may have various possible activities that could be active for it, however only one may be active at a time. See the DestinyActivityGraphNodeActivityDefinition for details.
 * @member {Array.<module:model/DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition>} activities
 */
DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.prototype['activities'] = undefined;

/**
 * The node may have various visual accents placed on it, or styles applied. These are the list of possible styles that the Node can have. The game iterates through each, looking for the first one that passes a check of the required game/character/account state in order to show that style, and then renders the node in that style.
 * @member {Array.<module:model/DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition>} featuringStates
 */
DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.prototype['featuringStates'] = undefined;

/**
 * An identifier for the Activity Graph Node, only guaranteed to be unique within its parent Activity Graph.
 * @member {Number} nodeId
 */
DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.prototype['nodeId'] = undefined;

/**
 * The node *may* have display properties that override the active Activity's display properties.
 * @member {module:model/DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition} overrideDisplay
 */
DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.prototype['overrideDisplay'] = undefined;

/**
 * The position on the map for this node.
 * @member {module:model/DestinyDefinitionsCommonDestinyPositionDefinition} position
 */
DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.prototype['position'] = undefined;

/**
 * Represents possible states that the graph node can be in. These are combined with some checking that happens in the game client and server to determine which state is actually active at any given time.
 * @member {Array.<module:model/DestinyDefinitionsDirectorDestinyActivityGraphNodeStateEntry>} states
 */
DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.prototype['states'] = undefined;






export default DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition;

