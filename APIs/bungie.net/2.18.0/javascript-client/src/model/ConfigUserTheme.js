/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConfigUserTheme model module.
 * @module model/ConfigUserTheme
 * @version 2.18.0
 */
class ConfigUserTheme {
    /**
     * Constructs a new <code>ConfigUserTheme</code>.
     * @alias module:model/ConfigUserTheme
     */
    constructor() { 
        
        ConfigUserTheme.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigUserTheme</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigUserTheme} obj Optional instance to populate.
     * @return {module:model/ConfigUserTheme} The populated <code>ConfigUserTheme</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigUserTheme();

            if (data.hasOwnProperty('userThemeDescription')) {
                obj['userThemeDescription'] = ApiClient.convertToType(data['userThemeDescription'], 'String');
            }
            if (data.hasOwnProperty('userThemeId')) {
                obj['userThemeId'] = ApiClient.convertToType(data['userThemeId'], 'Number');
            }
            if (data.hasOwnProperty('userThemeName')) {
                obj['userThemeName'] = ApiClient.convertToType(data['userThemeName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigUserTheme</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigUserTheme</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['userThemeDescription'] && !(typeof data['userThemeDescription'] === 'string' || data['userThemeDescription'] instanceof String)) {
            throw new Error("Expected the field `userThemeDescription` to be a primitive type in the JSON string but got " + data['userThemeDescription']);
        }
        // ensure the json data is a string
        if (data['userThemeName'] && !(typeof data['userThemeName'] === 'string' || data['userThemeName'] instanceof String)) {
            throw new Error("Expected the field `userThemeName` to be a primitive type in the JSON string but got " + data['userThemeName']);
        }

        return true;
    }


}



/**
 * @member {String} userThemeDescription
 */
ConfigUserTheme.prototype['userThemeDescription'] = undefined;

/**
 * @member {Number} userThemeId
 */
ConfigUserTheme.prototype['userThemeId'] = undefined;

/**
 * @member {String} userThemeName
 */
ConfigUserTheme.prototype['userThemeName'] = undefined;






export default ConfigUserTheme;

