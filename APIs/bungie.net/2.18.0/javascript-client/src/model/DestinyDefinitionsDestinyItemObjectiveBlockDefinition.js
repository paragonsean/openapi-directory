/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDefinitionsDestinyObjectiveDisplayProperties from './DestinyDefinitionsDestinyObjectiveDisplayProperties';

/**
 * The DestinyDefinitionsDestinyItemObjectiveBlockDefinition model module.
 * @module model/DestinyDefinitionsDestinyItemObjectiveBlockDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsDestinyItemObjectiveBlockDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsDestinyItemObjectiveBlockDefinition</code>.
     * An item can have objectives on it. In practice, these are the exclusive purview of \&quot;Quest Step\&quot; items: DestinyInventoryItemDefinitions that represent a specific step in a Quest.  Quest steps have 1:M objectives that we end up processing and returning in live data as DestinyQuestStatus data, and other useful information.
     * @alias module:model/DestinyDefinitionsDestinyItemObjectiveBlockDefinition
     */
    constructor() { 
        
        DestinyDefinitionsDestinyItemObjectiveBlockDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsDestinyItemObjectiveBlockDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsDestinyItemObjectiveBlockDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsDestinyItemObjectiveBlockDefinition} The populated <code>DestinyDefinitionsDestinyItemObjectiveBlockDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsDestinyItemObjectiveBlockDefinition();

            if (data.hasOwnProperty('displayActivityHashes')) {
                obj['displayActivityHashes'] = ApiClient.convertToType(data['displayActivityHashes'], ['Number']);
            }
            if (data.hasOwnProperty('displayAsStatTracker')) {
                obj['displayAsStatTracker'] = ApiClient.convertToType(data['displayAsStatTracker'], 'Boolean');
            }
            if (data.hasOwnProperty('narrative')) {
                obj['narrative'] = ApiClient.convertToType(data['narrative'], 'String');
            }
            if (data.hasOwnProperty('objectiveHashes')) {
                obj['objectiveHashes'] = ApiClient.convertToType(data['objectiveHashes'], ['Number']);
            }
            if (data.hasOwnProperty('objectiveVerbName')) {
                obj['objectiveVerbName'] = ApiClient.convertToType(data['objectiveVerbName'], 'String');
            }
            if (data.hasOwnProperty('perObjectiveDisplayProperties')) {
                obj['perObjectiveDisplayProperties'] = ApiClient.convertToType(data['perObjectiveDisplayProperties'], [DestinyDefinitionsDestinyObjectiveDisplayProperties]);
            }
            if (data.hasOwnProperty('questTypeHash')) {
                obj['questTypeHash'] = ApiClient.convertToType(data['questTypeHash'], 'Number');
            }
            if (data.hasOwnProperty('questTypeIdentifier')) {
                obj['questTypeIdentifier'] = ApiClient.convertToType(data['questTypeIdentifier'], 'String');
            }
            if (data.hasOwnProperty('questlineItemHash')) {
                obj['questlineItemHash'] = ApiClient.convertToType(data['questlineItemHash'], 'Number');
            }
            if (data.hasOwnProperty('requireFullObjectiveCompletion')) {
                obj['requireFullObjectiveCompletion'] = ApiClient.convertToType(data['requireFullObjectiveCompletion'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsDestinyItemObjectiveBlockDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsDestinyItemObjectiveBlockDefinition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['displayActivityHashes'])) {
            throw new Error("Expected the field `displayActivityHashes` to be an array in the JSON data but got " + data['displayActivityHashes']);
        }
        // ensure the json data is a string
        if (data['narrative'] && !(typeof data['narrative'] === 'string' || data['narrative'] instanceof String)) {
            throw new Error("Expected the field `narrative` to be a primitive type in the JSON string but got " + data['narrative']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['objectiveHashes'])) {
            throw new Error("Expected the field `objectiveHashes` to be an array in the JSON data but got " + data['objectiveHashes']);
        }
        // ensure the json data is a string
        if (data['objectiveVerbName'] && !(typeof data['objectiveVerbName'] === 'string' || data['objectiveVerbName'] instanceof String)) {
            throw new Error("Expected the field `objectiveVerbName` to be a primitive type in the JSON string but got " + data['objectiveVerbName']);
        }
        if (data['perObjectiveDisplayProperties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['perObjectiveDisplayProperties'])) {
                throw new Error("Expected the field `perObjectiveDisplayProperties` to be an array in the JSON data but got " + data['perObjectiveDisplayProperties']);
            }
            // validate the optional field `perObjectiveDisplayProperties` (array)
            for (const item of data['perObjectiveDisplayProperties']) {
                DestinyDefinitionsDestinyObjectiveDisplayProperties.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['questTypeIdentifier'] && !(typeof data['questTypeIdentifier'] === 'string' || data['questTypeIdentifier'] instanceof String)) {
            throw new Error("Expected the field `questTypeIdentifier` to be a primitive type in the JSON string but got " + data['questTypeIdentifier']);
        }

        return true;
    }


}



/**
 * For every entry in objectiveHashes, there is a corresponding entry in this array at the same index. If the objective is meant to be associated with a specific DestinyActivityDefinition, there will be a valid hash at that index. Otherwise, it will be invalid (0).  Rendered somewhat obsolete by perObjectiveDisplayProperties, which currently has much the same information but may end up with more info in the future.
 * @member {Array.<Number>} displayActivityHashes
 */
DestinyDefinitionsDestinyItemObjectiveBlockDefinition.prototype['displayActivityHashes'] = undefined;

/**
 * @member {Boolean} displayAsStatTracker
 */
DestinyDefinitionsDestinyItemObjectiveBlockDefinition.prototype['displayAsStatTracker'] = undefined;

/**
 * The localized string for narrative text related to this quest step, if any.
 * @member {String} narrative
 */
DestinyDefinitionsDestinyItemObjectiveBlockDefinition.prototype['narrative'] = undefined;

/**
 * The hashes to Objectives (DestinyObjectiveDefinition) that are part of this Quest Step, in the order that they should be rendered.
 * @member {Array.<Number>} objectiveHashes
 */
DestinyDefinitionsDestinyItemObjectiveBlockDefinition.prototype['objectiveHashes'] = undefined;

/**
 * The localized string describing an action to be performed associated with the objectives, if any.
 * @member {String} objectiveVerbName
 */
DestinyDefinitionsDestinyItemObjectiveBlockDefinition.prototype['objectiveVerbName'] = undefined;

/**
 * One entry per Objective on the item, it will have related display information.
 * @member {Array.<module:model/DestinyDefinitionsDestinyObjectiveDisplayProperties>} perObjectiveDisplayProperties
 */
DestinyDefinitionsDestinyItemObjectiveBlockDefinition.prototype['perObjectiveDisplayProperties'] = undefined;

/**
 * A hashed value for the questTypeIdentifier, because apparently I like to be redundant.
 * @member {Number} questTypeHash
 */
DestinyDefinitionsDestinyItemObjectiveBlockDefinition.prototype['questTypeHash'] = undefined;

/**
 * The identifier for the type of quest being performed, if any. Not associated with any fixed definition, yet.
 * @member {String} questTypeIdentifier
 */
DestinyDefinitionsDestinyItemObjectiveBlockDefinition.prototype['questTypeIdentifier'] = undefined;

/**
 * The hash for the DestinyInventoryItemDefinition representing the Quest to which this Quest Step belongs.
 * @member {Number} questlineItemHash
 */
DestinyDefinitionsDestinyItemObjectiveBlockDefinition.prototype['questlineItemHash'] = undefined;

/**
 * If True, all objectives must be completed for the step to be completed. If False, any one objective can be completed for the step to be completed.
 * @member {Boolean} requireFullObjectiveCompletion
 */
DestinyDefinitionsDestinyItemObjectiveBlockDefinition.prototype['requireFullObjectiveCompletion'] = undefined;






export default DestinyDefinitionsDestinyItemObjectiveBlockDefinition;

