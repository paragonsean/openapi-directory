/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyQuestsDestinyObjectiveProgress from './DestinyQuestsDestinyObjectiveProgress';

/**
 * The DestinyComponentsItemsDestinyItemPlugObjectivesComponent model module.
 * @module model/DestinyComponentsItemsDestinyItemPlugObjectivesComponent
 * @version 2.18.0
 */
class DestinyComponentsItemsDestinyItemPlugObjectivesComponent {
    /**
     * Constructs a new <code>DestinyComponentsItemsDestinyItemPlugObjectivesComponent</code>.
     * @alias module:model/DestinyComponentsItemsDestinyItemPlugObjectivesComponent
     */
    constructor() { 
        
        DestinyComponentsItemsDestinyItemPlugObjectivesComponent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyComponentsItemsDestinyItemPlugObjectivesComponent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyComponentsItemsDestinyItemPlugObjectivesComponent} obj Optional instance to populate.
     * @return {module:model/DestinyComponentsItemsDestinyItemPlugObjectivesComponent} The populated <code>DestinyComponentsItemsDestinyItemPlugObjectivesComponent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyComponentsItemsDestinyItemPlugObjectivesComponent();

            if (data.hasOwnProperty('objectivesPerPlug')) {
                obj['objectivesPerPlug'] = ApiClient.convertToType(data['objectivesPerPlug'], {'String': [DestinyQuestsDestinyObjectiveProgress]});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyComponentsItemsDestinyItemPlugObjectivesComponent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyComponentsItemsDestinyItemPlugObjectivesComponent</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * This set of data is keyed by the Item Hash (DestinyInventoryItemDefinition) of the plug whose objectives are being returned, with the value being the list of those objectives.   What if two plugs with the same hash are returned for an item, you ask?   Good question! They share the same item-scoped state, and as such would have identical objective state as a result. How's that for convenient.   Sometimes, Plugs may have objectives: generally, these are used for flavor and display purposes. For instance, a Plug might be tracking the number of PVP kills you have made. It will use the parent item's data about that tracking status to determine what to show, and will generally show it using the DestinyObjectiveDefinition's progressDescription property. Refer to the plug's itemHash and objective property for more information if you would like to display even more data.
 * @member {Object.<String, Array.<module:model/DestinyQuestsDestinyObjectiveProgress>>} objectivesPerPlug
 */
DestinyComponentsItemsDestinyItemPlugObjectivesComponent.prototype['objectivesPerPlug'] = undefined;






export default DestinyComponentsItemsDestinyItemPlugObjectivesComponent;

