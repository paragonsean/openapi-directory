/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDefinitionsMilestonesDestinyMilestoneActivityVariantDefinition from './DestinyDefinitionsMilestonesDestinyMilestoneActivityVariantDefinition';

/**
 * The DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition model module.
 * @module model/DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition</code>.
     * Milestones can have associated activities which provide additional information about the context, challenges, modifiers, state etc... related to this Milestone.   Information we need to be able to return that data is defined here, along with Tier data to establish a relationship between a conceptual Activity and its difficulty levels and variants.
     * @alias module:model/DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition
     */
    constructor() { 
        
        DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition} The populated <code>DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition();

            if (data.hasOwnProperty('conceptualActivityHash')) {
                obj['conceptualActivityHash'] = ApiClient.convertToType(data['conceptualActivityHash'], 'Number');
            }
            if (data.hasOwnProperty('variants')) {
                obj['variants'] = ApiClient.convertToType(data['variants'], {'String': DestinyDefinitionsMilestonesDestinyMilestoneActivityVariantDefinition});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The \"Conceptual\" activity hash. Basically, we picked the lowest level activity and are treating it as the canonical definition of the activity for rendering purposes.  If you care about the specific difficulty modes and variations, use the activities under \"Variants\".
 * @member {Number} conceptualActivityHash
 */
DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition.prototype['conceptualActivityHash'] = undefined;

/**
 * A milestone-referenced activity can have many variants, such as Tiers or alternative modes of play.  Even if there is only a single variant, the details for these are represented within as a variant definition.  It is assumed that, if this DestinyMilestoneActivityDefinition is active, then all variants should be active.  If a Milestone could ever split the variants' active status conditionally, they should all have their own DestinyMilestoneActivityDefinition instead! The potential duplication will be worth it for the obviousness of processing and use.
 * @member {Object.<String, module:model/DestinyDefinitionsMilestonesDestinyMilestoneActivityVariantDefinition>} variants
 */
DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition.prototype['variants'] = undefined;






export default DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition;

