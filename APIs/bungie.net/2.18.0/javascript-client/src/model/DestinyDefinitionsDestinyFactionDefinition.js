/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition from './DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition';
import DestinyDefinitionsDestinyFactionVendorDefinition from './DestinyDefinitionsDestinyFactionVendorDefinition';

/**
 * The DestinyDefinitionsDestinyFactionDefinition model module.
 * @module model/DestinyDefinitionsDestinyFactionDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsDestinyFactionDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsDestinyFactionDefinition</code>.
     * These definitions represent Factions in the game. Factions have ended up unilaterally being related to Vendors that represent them, but that need not necessarily be the case.  A Faction is really just an entity that has a related progression for which a character can gain experience. In Destiny 1, Dead Orbit was an example of a Faction: there happens to be a Vendor that represents Dead Orbit (and indeed, DestinyVendorDefinition.factionHash defines to this relationship), but Dead Orbit could theoretically exist without the Vendor that provides rewards.
     * @alias module:model/DestinyDefinitionsDestinyFactionDefinition
     */
    constructor() { 
        
        DestinyDefinitionsDestinyFactionDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsDestinyFactionDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsDestinyFactionDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsDestinyFactionDefinition} The populated <code>DestinyDefinitionsDestinyFactionDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsDestinyFactionDefinition();

            if (data.hasOwnProperty('displayProperties')) {
                obj['displayProperties'] = DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.constructFromObject(data['displayProperties']);
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'Number');
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('progressionHash')) {
                obj['progressionHash'] = ApiClient.convertToType(data['progressionHash'], 'Number');
            }
            if (data.hasOwnProperty('redacted')) {
                obj['redacted'] = ApiClient.convertToType(data['redacted'], 'Boolean');
            }
            if (data.hasOwnProperty('rewardItemHash')) {
                obj['rewardItemHash'] = ApiClient.convertToType(data['rewardItemHash'], 'Number');
            }
            if (data.hasOwnProperty('rewardVendorHash')) {
                obj['rewardVendorHash'] = ApiClient.convertToType(data['rewardVendorHash'], 'Number');
            }
            if (data.hasOwnProperty('tokenValues')) {
                obj['tokenValues'] = ApiClient.convertToType(data['tokenValues'], {'String': 'Number'});
            }
            if (data.hasOwnProperty('vendors')) {
                obj['vendors'] = ApiClient.convertToType(data['vendors'], [DestinyDefinitionsDestinyFactionVendorDefinition]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsDestinyFactionDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsDestinyFactionDefinition</code>.
     */
    static validateJSON(data) {
        // validate the optional field `displayProperties`
        if (data['displayProperties']) { // data not null
          DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJSON(data['displayProperties']);
        }
        if (data['vendors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vendors'])) {
                throw new Error("Expected the field `vendors` to be an array in the JSON data but got " + data['vendors']);
            }
            // validate the optional field `vendors` (array)
            for (const item of data['vendors']) {
                DestinyDefinitionsDestinyFactionVendorDefinition.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition} displayProperties
 */
DestinyDefinitionsDestinyFactionDefinition.prototype['displayProperties'] = undefined;

/**
 * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
 * @member {Number} hash
 */
DestinyDefinitionsDestinyFactionDefinition.prototype['hash'] = undefined;

/**
 * The index of the entity as it was found in the investment tables.
 * @member {Number} index
 */
DestinyDefinitionsDestinyFactionDefinition.prototype['index'] = undefined;

/**
 * The hash identifier for the DestinyProgressionDefinition that indicates the character's relationship with this faction in terms of experience and levels.
 * @member {Number} progressionHash
 */
DestinyDefinitionsDestinyFactionDefinition.prototype['progressionHash'] = undefined;

/**
 * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
 * @member {Boolean} redacted
 */
DestinyDefinitionsDestinyFactionDefinition.prototype['redacted'] = undefined;

/**
 * The faction reward item hash, usually an engram.
 * @member {Number} rewardItemHash
 */
DestinyDefinitionsDestinyFactionDefinition.prototype['rewardItemHash'] = undefined;

/**
 * The faction reward vendor hash, used for faction engram previews.
 * @member {Number} rewardVendorHash
 */
DestinyDefinitionsDestinyFactionDefinition.prototype['rewardVendorHash'] = undefined;

/**
 * The faction token item hashes, and their respective progression values.
 * @member {Object.<String, Number>} tokenValues
 */
DestinyDefinitionsDestinyFactionDefinition.prototype['tokenValues'] = undefined;

/**
 * List of vendors that are associated with this faction. The last vendor that passes the unlock flag checks is the one that should be shown.
 * @member {Array.<module:model/DestinyDefinitionsDestinyFactionVendorDefinition>} vendors
 */
DestinyDefinitionsDestinyFactionDefinition.prototype['vendors'] = undefined;






export default DestinyDefinitionsDestinyFactionDefinition;

