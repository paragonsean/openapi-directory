/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DestinyDefinitionsDestinyItemInventoryBlockDefinition model module.
 * @module model/DestinyDefinitionsDestinyItemInventoryBlockDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsDestinyItemInventoryBlockDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsDestinyItemInventoryBlockDefinition</code>.
     * If the item can exist in an inventory - the overwhelming majority of them can and do - then this is the basic properties regarding the item&#39;s relationship with the inventory.
     * @alias module:model/DestinyDefinitionsDestinyItemInventoryBlockDefinition
     */
    constructor() { 
        
        DestinyDefinitionsDestinyItemInventoryBlockDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsDestinyItemInventoryBlockDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsDestinyItemInventoryBlockDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsDestinyItemInventoryBlockDefinition} The populated <code>DestinyDefinitionsDestinyItemInventoryBlockDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsDestinyItemInventoryBlockDefinition();

            if (data.hasOwnProperty('bucketTypeHash')) {
                obj['bucketTypeHash'] = ApiClient.convertToType(data['bucketTypeHash'], 'Number');
            }
            if (data.hasOwnProperty('expirationTooltip')) {
                obj['expirationTooltip'] = ApiClient.convertToType(data['expirationTooltip'], 'String');
            }
            if (data.hasOwnProperty('expiredInActivityMessage')) {
                obj['expiredInActivityMessage'] = ApiClient.convertToType(data['expiredInActivityMessage'], 'String');
            }
            if (data.hasOwnProperty('expiredInOrbitMessage')) {
                obj['expiredInOrbitMessage'] = ApiClient.convertToType(data['expiredInOrbitMessage'], 'String');
            }
            if (data.hasOwnProperty('isInstanceItem')) {
                obj['isInstanceItem'] = ApiClient.convertToType(data['isInstanceItem'], 'Boolean');
            }
            if (data.hasOwnProperty('maxStackSize')) {
                obj['maxStackSize'] = ApiClient.convertToType(data['maxStackSize'], 'Number');
            }
            if (data.hasOwnProperty('recipeItemHash')) {
                obj['recipeItemHash'] = ApiClient.convertToType(data['recipeItemHash'], 'Number');
            }
            if (data.hasOwnProperty('recoveryBucketTypeHash')) {
                obj['recoveryBucketTypeHash'] = ApiClient.convertToType(data['recoveryBucketTypeHash'], 'Number');
            }
            if (data.hasOwnProperty('stackUniqueLabel')) {
                obj['stackUniqueLabel'] = ApiClient.convertToType(data['stackUniqueLabel'], 'String');
            }
            if (data.hasOwnProperty('suppressExpirationWhenObjectivesComplete')) {
                obj['suppressExpirationWhenObjectivesComplete'] = ApiClient.convertToType(data['suppressExpirationWhenObjectivesComplete'], 'Boolean');
            }
            if (data.hasOwnProperty('tierType')) {
                obj['tierType'] = ApiClient.convertToType(data['tierType'], 'Number');
            }
            if (data.hasOwnProperty('tierTypeHash')) {
                obj['tierTypeHash'] = ApiClient.convertToType(data['tierTypeHash'], 'Number');
            }
            if (data.hasOwnProperty('tierTypeName')) {
                obj['tierTypeName'] = ApiClient.convertToType(data['tierTypeName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsDestinyItemInventoryBlockDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsDestinyItemInventoryBlockDefinition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['expirationTooltip'] && !(typeof data['expirationTooltip'] === 'string' || data['expirationTooltip'] instanceof String)) {
            throw new Error("Expected the field `expirationTooltip` to be a primitive type in the JSON string but got " + data['expirationTooltip']);
        }
        // ensure the json data is a string
        if (data['expiredInActivityMessage'] && !(typeof data['expiredInActivityMessage'] === 'string' || data['expiredInActivityMessage'] instanceof String)) {
            throw new Error("Expected the field `expiredInActivityMessage` to be a primitive type in the JSON string but got " + data['expiredInActivityMessage']);
        }
        // ensure the json data is a string
        if (data['expiredInOrbitMessage'] && !(typeof data['expiredInOrbitMessage'] === 'string' || data['expiredInOrbitMessage'] instanceof String)) {
            throw new Error("Expected the field `expiredInOrbitMessage` to be a primitive type in the JSON string but got " + data['expiredInOrbitMessage']);
        }
        // ensure the json data is a string
        if (data['stackUniqueLabel'] && !(typeof data['stackUniqueLabel'] === 'string' || data['stackUniqueLabel'] instanceof String)) {
            throw new Error("Expected the field `stackUniqueLabel` to be a primitive type in the JSON string but got " + data['stackUniqueLabel']);
        }
        // ensure the json data is a string
        if (data['tierTypeName'] && !(typeof data['tierTypeName'] === 'string' || data['tierTypeName'] instanceof String)) {
            throw new Error("Expected the field `tierTypeName` to be a primitive type in the JSON string but got " + data['tierTypeName']);
        }

        return true;
    }


}



/**
 * The hash identifier for the DestinyInventoryBucketDefinition to which this item belongs. I should have named this \"bucketHash\", but too many things refer to it now. Sigh.
 * @member {Number} bucketTypeHash
 */
DestinyDefinitionsDestinyItemInventoryBlockDefinition.prototype['bucketTypeHash'] = undefined;

/**
 * The tooltip message to show, if any, when the item expires.
 * @member {String} expirationTooltip
 */
DestinyDefinitionsDestinyItemInventoryBlockDefinition.prototype['expirationTooltip'] = undefined;

/**
 * If the item expires while playing in an activity, we show a different message.
 * @member {String} expiredInActivityMessage
 */
DestinyDefinitionsDestinyItemInventoryBlockDefinition.prototype['expiredInActivityMessage'] = undefined;

/**
 * If the item expires in orbit, we show a... more different message. (\"Consummate V's, consummate!\")
 * @member {String} expiredInOrbitMessage
 */
DestinyDefinitionsDestinyItemInventoryBlockDefinition.prototype['expiredInOrbitMessage'] = undefined;

/**
 * If TRUE, this item is instanced. Otherwise, it is a generic item that merely has a quantity in a stack (like Glimmer).
 * @member {Boolean} isInstanceItem
 */
DestinyDefinitionsDestinyItemInventoryBlockDefinition.prototype['isInstanceItem'] = undefined;

/**
 * The maximum quantity of this item that can exist in a stack.
 * @member {Number} maxStackSize
 */
DestinyDefinitionsDestinyItemInventoryBlockDefinition.prototype['maxStackSize'] = undefined;

/**
 * A reference to the associated crafting 'recipe' item definition, if this item can be crafted.
 * @member {Number} recipeItemHash
 */
DestinyDefinitionsDestinyItemInventoryBlockDefinition.prototype['recipeItemHash'] = undefined;

/**
 * If the item is picked up by the lost loot queue, this is the hash identifier for the DestinyInventoryBucketDefinition into which it will be placed. Again, I should have named this recoveryBucketHash instead.
 * @member {Number} recoveryBucketTypeHash
 */
DestinyDefinitionsDestinyItemInventoryBlockDefinition.prototype['recoveryBucketTypeHash'] = undefined;

/**
 * If this string is populated, you can't have more than one stack with this label in a given inventory. Note that this is different from the equipping block's unique label, which is used for equipping uniqueness.
 * @member {String} stackUniqueLabel
 */
DestinyDefinitionsDestinyItemInventoryBlockDefinition.prototype['stackUniqueLabel'] = undefined;

/**
 * @member {Boolean} suppressExpirationWhenObjectivesComplete
 */
DestinyDefinitionsDestinyItemInventoryBlockDefinition.prototype['suppressExpirationWhenObjectivesComplete'] = undefined;

/**
 * The enumeration matching the tier type of the item to known values, again for convenience sake.
 * @member {Number} tierType
 */
DestinyDefinitionsDestinyItemInventoryBlockDefinition.prototype['tierType'] = undefined;

/**
 * The hash identifier for the Tier Type of the item, use to look up its DestinyItemTierTypeDefinition if you need to show localized data for the item's tier.
 * @member {Number} tierTypeHash
 */
DestinyDefinitionsDestinyItemInventoryBlockDefinition.prototype['tierTypeHash'] = undefined;

/**
 * The localized name of the tier type, which is a useful shortcut so you don't have to look up the definition every time. However, it's mostly a holdover from days before we had a DestinyItemTierTypeDefinition to refer to.
 * @member {String} tierTypeName
 */
DestinyDefinitionsDestinyItemInventoryBlockDefinition.prototype['tierTypeName'] = undefined;






export default DestinyDefinitionsDestinyItemInventoryBlockDefinition;

