/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationsApplicationDeveloper from './ApplicationsApplicationDeveloper';

/**
 * The ApplicationsApplication model module.
 * @module model/ApplicationsApplication
 * @version 2.18.0
 */
class ApplicationsApplication {
    /**
     * Constructs a new <code>ApplicationsApplication</code>.
     * @alias module:model/ApplicationsApplication
     */
    constructor() { 
        
        ApplicationsApplication.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApplicationsApplication</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationsApplication} obj Optional instance to populate.
     * @return {module:model/ApplicationsApplication} The populated <code>ApplicationsApplication</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationsApplication();

            if (data.hasOwnProperty('applicationId')) {
                obj['applicationId'] = ApiClient.convertToType(data['applicationId'], 'Number');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('firstPublished')) {
                obj['firstPublished'] = ApiClient.convertToType(data['firstPublished'], 'Date');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], 'String');
            }
            if (data.hasOwnProperty('overrideAuthorizeViewName')) {
                obj['overrideAuthorizeViewName'] = ApiClient.convertToType(data['overrideAuthorizeViewName'], 'String');
            }
            if (data.hasOwnProperty('redirectUrl')) {
                obj['redirectUrl'] = ApiClient.convertToType(data['redirectUrl'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('statusChanged')) {
                obj['statusChanged'] = ApiClient.convertToType(data['statusChanged'], 'Date');
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = ApiClient.convertToType(data['team'], [ApplicationsApplicationDeveloper]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationsApplication</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationsApplication</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['origin'] && !(typeof data['origin'] === 'string' || data['origin'] instanceof String)) {
            throw new Error("Expected the field `origin` to be a primitive type in the JSON string but got " + data['origin']);
        }
        // ensure the json data is a string
        if (data['overrideAuthorizeViewName'] && !(typeof data['overrideAuthorizeViewName'] === 'string' || data['overrideAuthorizeViewName'] instanceof String)) {
            throw new Error("Expected the field `overrideAuthorizeViewName` to be a primitive type in the JSON string but got " + data['overrideAuthorizeViewName']);
        }
        // ensure the json data is a string
        if (data['redirectUrl'] && !(typeof data['redirectUrl'] === 'string' || data['redirectUrl'] instanceof String)) {
            throw new Error("Expected the field `redirectUrl` to be a primitive type in the JSON string but got " + data['redirectUrl']);
        }
        if (data['team']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['team'])) {
                throw new Error("Expected the field `team` to be an array in the JSON data but got " + data['team']);
            }
            // validate the optional field `team` (array)
            for (const item of data['team']) {
                ApplicationsApplicationDeveloper.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Unique ID assigned to the application
 * @member {Number} applicationId
 */
ApplicationsApplication.prototype['applicationId'] = undefined;

/**
 * Date the application was first added to our database.
 * @member {Date} creationDate
 */
ApplicationsApplication.prototype['creationDate'] = undefined;

/**
 * Date the first time the application status entered the 'Public' status.
 * @member {Date} firstPublished
 */
ApplicationsApplication.prototype['firstPublished'] = undefined;

/**
 * Link to website for the application where a user can learn more about the app.
 * @member {String} link
 */
ApplicationsApplication.prototype['link'] = undefined;

/**
 * Name of the application
 * @member {String} name
 */
ApplicationsApplication.prototype['name'] = undefined;

/**
 * Value of the Origin header sent in requests generated by this application.
 * @member {String} origin
 */
ApplicationsApplication.prototype['origin'] = undefined;

/**
 * An optional override for the Authorize view name.
 * @member {String} overrideAuthorizeViewName
 */
ApplicationsApplication.prototype['overrideAuthorizeViewName'] = undefined;

/**
 * URL used to pass the user's authorization code to the application
 * @member {String} redirectUrl
 */
ApplicationsApplication.prototype['redirectUrl'] = undefined;

/**
 * Permissions the application needs to work
 * @member {Number} scope
 */
ApplicationsApplication.prototype['scope'] = undefined;

/**
 * Current status of the application.
 * @member {Number} status
 */
ApplicationsApplication.prototype['status'] = undefined;

/**
 * Date the application status last changed.
 * @member {Date} statusChanged
 */
ApplicationsApplication.prototype['statusChanged'] = undefined;

/**
 * List of team members who manage this application on Bungie.net. Will always consist of at least the application owner.
 * @member {Array.<module:model/ApplicationsApplicationDeveloper>} team
 */
ApplicationsApplication.prototype['team'] = undefined;






export default ApplicationsApplication;

