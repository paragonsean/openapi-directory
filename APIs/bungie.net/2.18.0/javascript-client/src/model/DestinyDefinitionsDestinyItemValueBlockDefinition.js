/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDestinyItemQuantity from './DestinyDestinyItemQuantity';

/**
 * The DestinyDefinitionsDestinyItemValueBlockDefinition model module.
 * @module model/DestinyDefinitionsDestinyItemValueBlockDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsDestinyItemValueBlockDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsDestinyItemValueBlockDefinition</code>.
     * This defines an item&#39;s \&quot;Value\&quot;. Unfortunately, this appears to be used in different ways depending on the way that the item itself is used.  For items being sold at a Vendor, this is the default \&quot;sale price\&quot; of the item. These days, the vendor itself almost always sets the price, but it still possible for the price to fall back to this value. For quests, it is a preview of rewards you can gain by completing the quest. For dummy items, if the itemValue refers to an Emblem, it is the emblem that should be shown as the reward. (jeez louise)  It will likely be used in a number of other ways in the future, it appears to be a bucket where they put arbitrary items and quantities into the item.
     * @alias module:model/DestinyDefinitionsDestinyItemValueBlockDefinition
     */
    constructor() { 
        
        DestinyDefinitionsDestinyItemValueBlockDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsDestinyItemValueBlockDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsDestinyItemValueBlockDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsDestinyItemValueBlockDefinition} The populated <code>DestinyDefinitionsDestinyItemValueBlockDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsDestinyItemValueBlockDefinition();

            if (data.hasOwnProperty('itemValue')) {
                obj['itemValue'] = ApiClient.convertToType(data['itemValue'], [DestinyDestinyItemQuantity]);
            }
            if (data.hasOwnProperty('valueDescription')) {
                obj['valueDescription'] = ApiClient.convertToType(data['valueDescription'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsDestinyItemValueBlockDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsDestinyItemValueBlockDefinition</code>.
     */
    static validateJSON(data) {
        if (data['itemValue']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['itemValue'])) {
                throw new Error("Expected the field `itemValue` to be an array in the JSON data but got " + data['itemValue']);
            }
            // validate the optional field `itemValue` (array)
            for (const item of data['itemValue']) {
                DestinyDestinyItemQuantity.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['valueDescription'] && !(typeof data['valueDescription'] === 'string' || data['valueDescription'] instanceof String)) {
            throw new Error("Expected the field `valueDescription` to be a primitive type in the JSON string but got " + data['valueDescription']);
        }

        return true;
    }


}



/**
 * References to the items that make up this item's \"value\", and the quantity.
 * @member {Array.<module:model/DestinyDestinyItemQuantity>} itemValue
 */
DestinyDefinitionsDestinyItemValueBlockDefinition.prototype['itemValue'] = undefined;

/**
 * If there's a localized text description of the value provided, this will be said description.
 * @member {String} valueDescription
 */
DestinyDefinitionsDestinyItemValueBlockDefinition.prototype['valueDescription'] = undefined;






export default DestinyDefinitionsDestinyItemValueBlockDefinition;

