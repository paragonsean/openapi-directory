/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationsDatapoint from './ApplicationsDatapoint';

/**
 * The ApplicationsSeries model module.
 * @module model/ApplicationsSeries
 * @version 2.18.0
 */
class ApplicationsSeries {
    /**
     * Constructs a new <code>ApplicationsSeries</code>.
     * @alias module:model/ApplicationsSeries
     */
    constructor() { 
        
        ApplicationsSeries.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApplicationsSeries</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationsSeries} obj Optional instance to populate.
     * @return {module:model/ApplicationsSeries} The populated <code>ApplicationsSeries</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationsSeries();

            if (data.hasOwnProperty('datapoints')) {
                obj['datapoints'] = ApiClient.convertToType(data['datapoints'], [ApplicationsDatapoint]);
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationsSeries</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationsSeries</code>.
     */
    static validateJSON(data) {
        if (data['datapoints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['datapoints'])) {
                throw new Error("Expected the field `datapoints` to be an array in the JSON data but got " + data['datapoints']);
            }
            // validate the optional field `datapoints` (array)
            for (const item of data['datapoints']) {
                ApplicationsDatapoint.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['target'] && !(typeof data['target'] === 'string' || data['target'] instanceof String)) {
            throw new Error("Expected the field `target` to be a primitive type in the JSON string but got " + data['target']);
        }

        return true;
    }


}



/**
 * Collection of samples with time and value.
 * @member {Array.<module:model/ApplicationsDatapoint>} datapoints
 */
ApplicationsSeries.prototype['datapoints'] = undefined;

/**
 * Target to which to datapoints apply.
 * @member {String} target
 */
ApplicationsSeries.prototype['target'] = undefined;






export default ApplicationsSeries;

