/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentModelsContentPreview from './ContentModelsContentPreview';
import ContentModelsContentTypeProperty from './ContentModelsContentTypeProperty';
import ContentModelsContentTypePropertySection from './ContentModelsContentTypePropertySection';
import ContentModelsTagMetadataDefinition from './ContentModelsTagMetadataDefinition';
import ContentModelsTagMetadataItem from './ContentModelsTagMetadataItem';

/**
 * The ContentModelsContentTypeDescription model module.
 * @module model/ContentModelsContentTypeDescription
 * @version 2.18.0
 */
class ContentModelsContentTypeDescription {
    /**
     * Constructs a new <code>ContentModelsContentTypeDescription</code>.
     * @alias module:model/ContentModelsContentTypeDescription
     */
    constructor() { 
        
        ContentModelsContentTypeDescription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContentModelsContentTypeDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContentModelsContentTypeDescription} obj Optional instance to populate.
     * @return {module:model/ContentModelsContentTypeDescription} The populated <code>ContentModelsContentTypeDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContentModelsContentTypeDescription();

            if (data.hasOwnProperty('allowComments')) {
                obj['allowComments'] = ApiClient.convertToType(data['allowComments'], 'Boolean');
            }
            if (data.hasOwnProperty('autoEnglishPropertyFallback')) {
                obj['autoEnglishPropertyFallback'] = ApiClient.convertToType(data['autoEnglishPropertyFallback'], 'Boolean');
            }
            if (data.hasOwnProperty('bindIdentifierToProperty')) {
                obj['bindIdentifierToProperty'] = ApiClient.convertToType(data['bindIdentifierToProperty'], 'String');
            }
            if (data.hasOwnProperty('boundRegex')) {
                obj['boundRegex'] = ApiClient.convertToType(data['boundRegex'], 'String');
            }
            if (data.hasOwnProperty('bulkUploadable')) {
                obj['bulkUploadable'] = ApiClient.convertToType(data['bulkUploadable'], 'Boolean');
            }
            if (data.hasOwnProperty('cType')) {
                obj['cType'] = ApiClient.convertToType(data['cType'], 'String');
            }
            if (data.hasOwnProperty('contentDescription')) {
                obj['contentDescription'] = ApiClient.convertToType(data['contentDescription'], 'String');
            }
            if (data.hasOwnProperty('forceIdentifierBinding')) {
                obj['forceIdentifierBinding'] = ApiClient.convertToType(data['forceIdentifierBinding'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('previewImage')) {
                obj['previewImage'] = ApiClient.convertToType(data['previewImage'], 'String');
            }
            if (data.hasOwnProperty('previews')) {
                obj['previews'] = ApiClient.convertToType(data['previews'], [ContentModelsContentPreview]);
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], [ContentModelsContentTypeProperty]);
            }
            if (data.hasOwnProperty('propertySections')) {
                obj['propertySections'] = ApiClient.convertToType(data['propertySections'], [ContentModelsContentTypePropertySection]);
            }
            if (data.hasOwnProperty('reminder')) {
                obj['reminder'] = ApiClient.convertToType(data['reminder'], 'String');
            }
            if (data.hasOwnProperty('showInContentEditor')) {
                obj['showInContentEditor'] = ApiClient.convertToType(data['showInContentEditor'], 'Boolean');
            }
            if (data.hasOwnProperty('suppressCmsPath')) {
                obj['suppressCmsPath'] = ApiClient.convertToType(data['suppressCmsPath'], 'Boolean');
            }
            if (data.hasOwnProperty('tagMetadata')) {
                obj['tagMetadata'] = ApiClient.convertToType(data['tagMetadata'], [ContentModelsTagMetadataDefinition]);
            }
            if (data.hasOwnProperty('tagMetadataItems')) {
                obj['tagMetadataItems'] = ApiClient.convertToType(data['tagMetadataItems'], {'String': ContentModelsTagMetadataItem});
            }
            if (data.hasOwnProperty('typeOf')) {
                obj['typeOf'] = ApiClient.convertToType(data['typeOf'], 'String');
            }
            if (data.hasOwnProperty('usageExamples')) {
                obj['usageExamples'] = ApiClient.convertToType(data['usageExamples'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContentModelsContentTypeDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContentModelsContentTypeDescription</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bindIdentifierToProperty'] && !(typeof data['bindIdentifierToProperty'] === 'string' || data['bindIdentifierToProperty'] instanceof String)) {
            throw new Error("Expected the field `bindIdentifierToProperty` to be a primitive type in the JSON string but got " + data['bindIdentifierToProperty']);
        }
        // ensure the json data is a string
        if (data['boundRegex'] && !(typeof data['boundRegex'] === 'string' || data['boundRegex'] instanceof String)) {
            throw new Error("Expected the field `boundRegex` to be a primitive type in the JSON string but got " + data['boundRegex']);
        }
        // ensure the json data is a string
        if (data['cType'] && !(typeof data['cType'] === 'string' || data['cType'] instanceof String)) {
            throw new Error("Expected the field `cType` to be a primitive type in the JSON string but got " + data['cType']);
        }
        // ensure the json data is a string
        if (data['contentDescription'] && !(typeof data['contentDescription'] === 'string' || data['contentDescription'] instanceof String)) {
            throw new Error("Expected the field `contentDescription` to be a primitive type in the JSON string but got " + data['contentDescription']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['previewImage'] && !(typeof data['previewImage'] === 'string' || data['previewImage'] instanceof String)) {
            throw new Error("Expected the field `previewImage` to be a primitive type in the JSON string but got " + data['previewImage']);
        }
        if (data['previews']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['previews'])) {
                throw new Error("Expected the field `previews` to be an array in the JSON data but got " + data['previews']);
            }
            // validate the optional field `previews` (array)
            for (const item of data['previews']) {
                ContentModelsContentPreview.validateJSON(item);
            };
        }
        if (data['properties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['properties'])) {
                throw new Error("Expected the field `properties` to be an array in the JSON data but got " + data['properties']);
            }
            // validate the optional field `properties` (array)
            for (const item of data['properties']) {
                ContentModelsContentTypeProperty.validateJSON(item);
            };
        }
        if (data['propertySections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['propertySections'])) {
                throw new Error("Expected the field `propertySections` to be an array in the JSON data but got " + data['propertySections']);
            }
            // validate the optional field `propertySections` (array)
            for (const item of data['propertySections']) {
                ContentModelsContentTypePropertySection.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['reminder'] && !(typeof data['reminder'] === 'string' || data['reminder'] instanceof String)) {
            throw new Error("Expected the field `reminder` to be a primitive type in the JSON string but got " + data['reminder']);
        }
        if (data['tagMetadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tagMetadata'])) {
                throw new Error("Expected the field `tagMetadata` to be an array in the JSON data but got " + data['tagMetadata']);
            }
            // validate the optional field `tagMetadata` (array)
            for (const item of data['tagMetadata']) {
                ContentModelsTagMetadataDefinition.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['typeOf'] && !(typeof data['typeOf'] === 'string' || data['typeOf'] instanceof String)) {
            throw new Error("Expected the field `typeOf` to be a primitive type in the JSON string but got " + data['typeOf']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['usageExamples'])) {
            throw new Error("Expected the field `usageExamples` to be an array in the JSON data but got " + data['usageExamples']);
        }

        return true;
    }


}



/**
 * @member {Boolean} allowComments
 */
ContentModelsContentTypeDescription.prototype['allowComments'] = undefined;

/**
 * @member {Boolean} autoEnglishPropertyFallback
 */
ContentModelsContentTypeDescription.prototype['autoEnglishPropertyFallback'] = undefined;

/**
 * @member {String} bindIdentifierToProperty
 */
ContentModelsContentTypeDescription.prototype['bindIdentifierToProperty'] = undefined;

/**
 * @member {String} boundRegex
 */
ContentModelsContentTypeDescription.prototype['boundRegex'] = undefined;

/**
 * @member {Boolean} bulkUploadable
 */
ContentModelsContentTypeDescription.prototype['bulkUploadable'] = undefined;

/**
 * @member {String} cType
 */
ContentModelsContentTypeDescription.prototype['cType'] = undefined;

/**
 * @member {String} contentDescription
 */
ContentModelsContentTypeDescription.prototype['contentDescription'] = undefined;

/**
 * @member {Boolean} forceIdentifierBinding
 */
ContentModelsContentTypeDescription.prototype['forceIdentifierBinding'] = undefined;

/**
 * @member {String} name
 */
ContentModelsContentTypeDescription.prototype['name'] = undefined;

/**
 * @member {String} previewImage
 */
ContentModelsContentTypeDescription.prototype['previewImage'] = undefined;

/**
 * @member {Array.<module:model/ContentModelsContentPreview>} previews
 */
ContentModelsContentTypeDescription.prototype['previews'] = undefined;

/**
 * @member {Number} priority
 */
ContentModelsContentTypeDescription.prototype['priority'] = undefined;

/**
 * @member {Array.<module:model/ContentModelsContentTypeProperty>} properties
 */
ContentModelsContentTypeDescription.prototype['properties'] = undefined;

/**
 * @member {Array.<module:model/ContentModelsContentTypePropertySection>} propertySections
 */
ContentModelsContentTypeDescription.prototype['propertySections'] = undefined;

/**
 * @member {String} reminder
 */
ContentModelsContentTypeDescription.prototype['reminder'] = undefined;

/**
 * @member {Boolean} showInContentEditor
 */
ContentModelsContentTypeDescription.prototype['showInContentEditor'] = undefined;

/**
 * @member {Boolean} suppressCmsPath
 */
ContentModelsContentTypeDescription.prototype['suppressCmsPath'] = undefined;

/**
 * @member {Array.<module:model/ContentModelsTagMetadataDefinition>} tagMetadata
 */
ContentModelsContentTypeDescription.prototype['tagMetadata'] = undefined;

/**
 * @member {Object.<String, module:model/ContentModelsTagMetadataItem>} tagMetadataItems
 */
ContentModelsContentTypeDescription.prototype['tagMetadataItems'] = undefined;

/**
 * @member {String} typeOf
 */
ContentModelsContentTypeDescription.prototype['typeOf'] = undefined;

/**
 * @member {Array.<String>} usageExamples
 */
ContentModelsContentTypeDescription.prototype['usageExamples'] = undefined;






export default ContentModelsContentTypeDescription;

