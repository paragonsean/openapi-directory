/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinySocketsDestinyItemPlug from './DestinySocketsDestinyItemPlug';

/**
 * The DestinyComponentsPlugSetsDestinyPlugSetsComponent model module.
 * @module model/DestinyComponentsPlugSetsDestinyPlugSetsComponent
 * @version 2.18.0
 */
class DestinyComponentsPlugSetsDestinyPlugSetsComponent {
    /**
     * Constructs a new <code>DestinyComponentsPlugSetsDestinyPlugSetsComponent</code>.
     * Sockets may refer to a \&quot;Plug Set\&quot;: a set of reusable plugs that may be shared across multiple sockets (or even, in theory, multiple sockets over multiple items).  This is the set of those plugs that we came across in the users&#39; inventory, along with the values for plugs in the set. Any given set in this component may be represented in Character and Profile-level, as some plugs may be Profile-level restricted, and some character-level restricted. (note that the ones that are even more specific will remain on the actual socket component itself, as they cannot be reused)
     * @alias module:model/DestinyComponentsPlugSetsDestinyPlugSetsComponent
     */
    constructor() { 
        
        DestinyComponentsPlugSetsDestinyPlugSetsComponent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyComponentsPlugSetsDestinyPlugSetsComponent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyComponentsPlugSetsDestinyPlugSetsComponent} obj Optional instance to populate.
     * @return {module:model/DestinyComponentsPlugSetsDestinyPlugSetsComponent} The populated <code>DestinyComponentsPlugSetsDestinyPlugSetsComponent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyComponentsPlugSetsDestinyPlugSetsComponent();

            if (data.hasOwnProperty('plugs')) {
                obj['plugs'] = ApiClient.convertToType(data['plugs'], {'String': [DestinySocketsDestinyItemPlug]});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyComponentsPlugSetsDestinyPlugSetsComponent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyComponentsPlugSetsDestinyPlugSetsComponent</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The shared list of plugs for each relevant PlugSet, keyed by the hash identifier of the PlugSet (DestinyPlugSetDefinition).
 * @member {Object.<String, Array.<module:model/DestinySocketsDestinyItemPlug>>} plugs
 */
DestinyComponentsPlugSetsDestinyPlugSetsComponent.prototype['plugs'] = undefined;






export default DestinyComponentsPlugSetsDestinyPlugSetsComponent;

