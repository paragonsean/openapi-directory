/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyQuestsDestinyObjectiveProgress from './DestinyQuestsDestinyObjectiveProgress';

/**
 * The DestinyEntitiesItemsDestinyItemComponent model module.
 * @module model/DestinyEntitiesItemsDestinyItemComponent
 * @version 2.18.0
 */
class DestinyEntitiesItemsDestinyItemComponent {
    /**
     * Constructs a new <code>DestinyEntitiesItemsDestinyItemComponent</code>.
     * The base item component, filled with properties that are generally useful to know in any item request or that don&#39;t feel worthwhile to put in their own component.
     * @alias module:model/DestinyEntitiesItemsDestinyItemComponent
     */
    constructor() { 
        
        DestinyEntitiesItemsDestinyItemComponent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyEntitiesItemsDestinyItemComponent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyEntitiesItemsDestinyItemComponent} obj Optional instance to populate.
     * @return {module:model/DestinyEntitiesItemsDestinyItemComponent} The populated <code>DestinyEntitiesItemsDestinyItemComponent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyEntitiesItemsDestinyItemComponent();

            if (data.hasOwnProperty('bindStatus')) {
                obj['bindStatus'] = ApiClient.convertToType(data['bindStatus'], 'Number');
            }
            if (data.hasOwnProperty('bucketHash')) {
                obj['bucketHash'] = ApiClient.convertToType(data['bucketHash'], 'Number');
            }
            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'Date');
            }
            if (data.hasOwnProperty('isWrapper')) {
                obj['isWrapper'] = ApiClient.convertToType(data['isWrapper'], 'Boolean');
            }
            if (data.hasOwnProperty('itemHash')) {
                obj['itemHash'] = ApiClient.convertToType(data['itemHash'], 'Number');
            }
            if (data.hasOwnProperty('itemInstanceId')) {
                obj['itemInstanceId'] = ApiClient.convertToType(data['itemInstanceId'], 'Number');
            }
            if (data.hasOwnProperty('itemValueVisibility')) {
                obj['itemValueVisibility'] = ApiClient.convertToType(data['itemValueVisibility'], ['Boolean']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'Number');
            }
            if (data.hasOwnProperty('lockable')) {
                obj['lockable'] = ApiClient.convertToType(data['lockable'], 'Boolean');
            }
            if (data.hasOwnProperty('metricHash')) {
                obj['metricHash'] = ApiClient.convertToType(data['metricHash'], 'Number');
            }
            if (data.hasOwnProperty('metricObjective')) {
                obj['metricObjective'] = ApiClient.convertToType(data['metricObjective'], DestinyQuestsDestinyObjectiveProgress);
            }
            if (data.hasOwnProperty('overrideStyleItemHash')) {
                obj['overrideStyleItemHash'] = ApiClient.convertToType(data['overrideStyleItemHash'], 'Number');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'Number');
            }
            if (data.hasOwnProperty('tooltipNotificationIndexes')) {
                obj['tooltipNotificationIndexes'] = ApiClient.convertToType(data['tooltipNotificationIndexes'], ['Number']);
            }
            if (data.hasOwnProperty('transferStatus')) {
                obj['transferStatus'] = ApiClient.convertToType(data['transferStatus'], 'Number');
            }
            if (data.hasOwnProperty('versionNumber')) {
                obj['versionNumber'] = ApiClient.convertToType(data['versionNumber'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyEntitiesItemsDestinyItemComponent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyEntitiesItemsDestinyItemComponent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['itemValueVisibility'])) {
            throw new Error("Expected the field `itemValueVisibility` to be an array in the JSON data but got " + data['itemValueVisibility']);
        }
        // validate the optional field `metricObjective`
        if (data['metricObjective']) { // data not null
          DestinyQuestsDestinyObjectiveProgress.validateJSON(data['metricObjective']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tooltipNotificationIndexes'])) {
            throw new Error("Expected the field `tooltipNotificationIndexes` to be an array in the JSON data but got " + data['tooltipNotificationIndexes']);
        }

        return true;
    }


}



/**
 * If the item is bound to a location, it will be specified in this enum.
 * @member {Number} bindStatus
 */
DestinyEntitiesItemsDestinyItemComponent.prototype['bindStatus'] = undefined;

/**
 * The hash identifier for the specific inventory bucket in which the item is located.
 * @member {Number} bucketHash
 */
DestinyEntitiesItemsDestinyItemComponent.prototype['bucketHash'] = undefined;

/**
 * If the item can expire, this is the date at which it will/did expire.
 * @member {Date} expirationDate
 */
DestinyEntitiesItemsDestinyItemComponent.prototype['expirationDate'] = undefined;

/**
 * If this is true, the object is actually a \"wrapper\" of the object it's representing. This means that it's not the actual item itself, but rather an item that must be \"opened\" in game before you have and can use the item.   Wrappers are an evolution of \"bundles\", which give an easy way to let you preview the contents of what you purchased while still letting you get a refund before you \"open\" it.
 * @member {Boolean} isWrapper
 */
DestinyEntitiesItemsDestinyItemComponent.prototype['isWrapper'] = undefined;

/**
 * The identifier for the item's definition, which is where most of the useful static information for the item can be found.
 * @member {Number} itemHash
 */
DestinyEntitiesItemsDestinyItemComponent.prototype['itemHash'] = undefined;

/**
 * If the item is instanced, it will have an instance ID. Lack of an instance ID implies that the item has no distinct local qualities aside from stack size.
 * @member {Number} itemInstanceId
 */
DestinyEntitiesItemsDestinyItemComponent.prototype['itemInstanceId'] = undefined;

/**
 * If available, a list that describes which item values (rewards) should be shown (true) or hidden (false).
 * @member {Array.<Boolean>} itemValueVisibility
 */
DestinyEntitiesItemsDestinyItemComponent.prototype['itemValueVisibility'] = undefined;

/**
 * An easy reference for where the item is located. Redundant if you got the item from an Inventory, but useful when making detail calls on specific items.
 * @member {Number} location
 */
DestinyEntitiesItemsDestinyItemComponent.prototype['location'] = undefined;

/**
 * If the item can be locked, this will indicate that state.
 * @member {Boolean} lockable
 */
DestinyEntitiesItemsDestinyItemComponent.prototype['lockable'] = undefined;

/**
 * The identifier for the currently-selected metric definition, to be displayed on the emblem nameplate.
 * @member {Number} metricHash
 */
DestinyEntitiesItemsDestinyItemComponent.prototype['metricHash'] = undefined;

/**
 * The objective progress for the currently-selected metric definition, to be displayed on the emblem nameplate.
 * @member {module:model/DestinyQuestsDestinyObjectiveProgress} metricObjective
 */
DestinyEntitiesItemsDestinyItemComponent.prototype['metricObjective'] = undefined;

/**
 * If populated, this is the hash of the item whose icon (and other secondary styles, but *not* the human readable strings) should override whatever icons/styles are on the item being sold.  If you don't do this, certain items whose styles are being overridden by socketed items - such as the \"Recycle Shader\" item - would show whatever their default icon/style is, and it wouldn't be pretty or look accurate.
 * @member {Number} overrideStyleItemHash
 */
DestinyEntitiesItemsDestinyItemComponent.prototype['overrideStyleItemHash'] = undefined;

/**
 * The quantity of the item in this stack. Note that Instanced items cannot stack. If an instanced item, this value will always be 1 (as the stack has exactly one item in it)
 * @member {Number} quantity
 */
DestinyEntitiesItemsDestinyItemComponent.prototype['quantity'] = undefined;

/**
 * A flags enumeration indicating the transient/custom states of the item that affect how it is rendered: whether it's tracked or locked for example, or whether it has a masterwork plug inserted.
 * @member {Number} state
 */
DestinyEntitiesItemsDestinyItemComponent.prototype['state'] = undefined;

/**
 * If this is populated, it is a list of indexes into DestinyInventoryItemDefinition.tooltipNotifications for any special tooltip messages that need to be shown for this item.
 * @member {Array.<Number>} tooltipNotificationIndexes
 */
DestinyEntitiesItemsDestinyItemComponent.prototype['tooltipNotificationIndexes'] = undefined;

/**
 * If there is a known error state that would cause this item to not be transferable, this Flags enum will indicate all of those error states. Otherwise, it will be 0 (CanTransfer).
 * @member {Number} transferStatus
 */
DestinyEntitiesItemsDestinyItemComponent.prototype['transferStatus'] = undefined;

/**
 * The version of this item, used to index into the versions list in the item definition quality block.
 * @member {Number} versionNumber
 */
DestinyEntitiesItemsDestinyItemComponent.prototype['versionNumber'] = undefined;






export default DestinyEntitiesItemsDestinyItemComponent;

