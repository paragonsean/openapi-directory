/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DestinyDefinitionsDestinyEquippingBlockDefinition model module.
 * @module model/DestinyDefinitionsDestinyEquippingBlockDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsDestinyEquippingBlockDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsDestinyEquippingBlockDefinition</code>.
     * Items that can be equipped define this block. It contains information we need to understand how and when the item can be equipped.
     * @alias module:model/DestinyDefinitionsDestinyEquippingBlockDefinition
     */
    constructor() { 
        
        DestinyDefinitionsDestinyEquippingBlockDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsDestinyEquippingBlockDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsDestinyEquippingBlockDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsDestinyEquippingBlockDefinition} The populated <code>DestinyDefinitionsDestinyEquippingBlockDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsDestinyEquippingBlockDefinition();

            if (data.hasOwnProperty('ammoType')) {
                obj['ammoType'] = ApiClient.convertToType(data['ammoType'], 'Number');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], 'Number');
            }
            if (data.hasOwnProperty('displayStrings')) {
                obj['displayStrings'] = ApiClient.convertToType(data['displayStrings'], ['String']);
            }
            if (data.hasOwnProperty('equipmentSlotTypeHash')) {
                obj['equipmentSlotTypeHash'] = ApiClient.convertToType(data['equipmentSlotTypeHash'], 'Number');
            }
            if (data.hasOwnProperty('gearsetItemHash')) {
                obj['gearsetItemHash'] = ApiClient.convertToType(data['gearsetItemHash'], 'Number');
            }
            if (data.hasOwnProperty('uniqueLabel')) {
                obj['uniqueLabel'] = ApiClient.convertToType(data['uniqueLabel'], 'String');
            }
            if (data.hasOwnProperty('uniqueLabelHash')) {
                obj['uniqueLabelHash'] = ApiClient.convertToType(data['uniqueLabelHash'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsDestinyEquippingBlockDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsDestinyEquippingBlockDefinition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['displayStrings'])) {
            throw new Error("Expected the field `displayStrings` to be an array in the JSON data but got " + data['displayStrings']);
        }
        // ensure the json data is a string
        if (data['uniqueLabel'] && !(typeof data['uniqueLabel'] === 'string' || data['uniqueLabel'] instanceof String)) {
            throw new Error("Expected the field `uniqueLabel` to be a primitive type in the JSON string but got " + data['uniqueLabel']);
        }

        return true;
    }


}



/**
 * Ammo type used by a weapon is no longer determined by the bucket in which it is contained. If the item has an ammo type - i.e. if it is a weapon - this will be the type of ammunition expected.
 * @member {Number} ammoType
 */
DestinyDefinitionsDestinyEquippingBlockDefinition.prototype['ammoType'] = undefined;

/**
 * These are custom attributes on the equippability of the item.  For now, this can only be \"equip on acquire\", which would mean that the item will be automatically equipped as soon as you pick it up.
 * @member {Number} attributes
 */
DestinyDefinitionsDestinyEquippingBlockDefinition.prototype['attributes'] = undefined;

/**
 * These are strings that represent the possible Game/Account/Character state failure conditions that can occur when trying to equip the item. They match up one-to-one with requiredUnlockExpressions.
 * @member {Array.<String>} displayStrings
 */
DestinyDefinitionsDestinyEquippingBlockDefinition.prototype['displayStrings'] = undefined;

/**
 * An equipped item *must* be equipped in an Equipment Slot. This is the hash identifier of the DestinyEquipmentSlotDefinition into which it must be equipped.
 * @member {Number} equipmentSlotTypeHash
 */
DestinyDefinitionsDestinyEquippingBlockDefinition.prototype['equipmentSlotTypeHash'] = undefined;

/**
 * If the item is part of a gearset, this is a reference to that gearset item.
 * @member {Number} gearsetItemHash
 */
DestinyDefinitionsDestinyEquippingBlockDefinition.prototype['gearsetItemHash'] = undefined;

/**
 * If defined, this is the label used to check if the item has other items of matching types already equipped.   For instance, when you aren't allowed to equip more than one Exotic Weapon, that's because all exotic weapons have identical uniqueLabels and the game checks the to-be-equipped item's uniqueLabel vs. all other already equipped items (other than the item in the slot that's about to be occupied).
 * @member {String} uniqueLabel
 */
DestinyDefinitionsDestinyEquippingBlockDefinition.prototype['uniqueLabel'] = undefined;

/**
 * The hash of that unique label. Does not point to a specific definition.
 * @member {Number} uniqueLabelHash
 */
DestinyDefinitionsDestinyEquippingBlockDefinition.prototype['uniqueLabelHash'] = undefined;






export default DestinyDefinitionsDestinyEquippingBlockDefinition;

