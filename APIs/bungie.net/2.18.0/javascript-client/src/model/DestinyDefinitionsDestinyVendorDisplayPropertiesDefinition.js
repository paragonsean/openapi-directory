/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDefinitionsCommonDestinyIconSequenceDefinition from './DestinyDefinitionsCommonDestinyIconSequenceDefinition';
import DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition from './DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition';

/**
 * The DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition model module.
 * @module model/DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition</code>.
     * @alias module:model/DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition
     */
    constructor() { 
        
        DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition} The populated <code>DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('hasIcon')) {
                obj['hasIcon'] = ApiClient.convertToType(data['hasIcon'], 'Boolean');
            }
            if (data.hasOwnProperty('highResIcon')) {
                obj['highResIcon'] = ApiClient.convertToType(data['highResIcon'], 'String');
            }
            if (data.hasOwnProperty('icon')) {
                obj['icon'] = ApiClient.convertToType(data['icon'], 'String');
            }
            if (data.hasOwnProperty('iconSequences')) {
                obj['iconSequences'] = ApiClient.convertToType(data['iconSequences'], [DestinyDefinitionsCommonDestinyIconSequenceDefinition]);
            }
            if (data.hasOwnProperty('largeIcon')) {
                obj['largeIcon'] = ApiClient.convertToType(data['largeIcon'], 'String');
            }
            if (data.hasOwnProperty('largeTransparentIcon')) {
                obj['largeTransparentIcon'] = ApiClient.convertToType(data['largeTransparentIcon'], 'String');
            }
            if (data.hasOwnProperty('mapIcon')) {
                obj['mapIcon'] = ApiClient.convertToType(data['mapIcon'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('originalIcon')) {
                obj['originalIcon'] = ApiClient.convertToType(data['originalIcon'], 'String');
            }
            if (data.hasOwnProperty('requirementsDisplay')) {
                obj['requirementsDisplay'] = ApiClient.convertToType(data['requirementsDisplay'], [DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition]);
            }
            if (data.hasOwnProperty('smallTransparentIcon')) {
                obj['smallTransparentIcon'] = ApiClient.convertToType(data['smallTransparentIcon'], 'String');
            }
            if (data.hasOwnProperty('subtitle')) {
                obj['subtitle'] = ApiClient.convertToType(data['subtitle'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['highResIcon'] && !(typeof data['highResIcon'] === 'string' || data['highResIcon'] instanceof String)) {
            throw new Error("Expected the field `highResIcon` to be a primitive type in the JSON string but got " + data['highResIcon']);
        }
        // ensure the json data is a string
        if (data['icon'] && !(typeof data['icon'] === 'string' || data['icon'] instanceof String)) {
            throw new Error("Expected the field `icon` to be a primitive type in the JSON string but got " + data['icon']);
        }
        if (data['iconSequences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['iconSequences'])) {
                throw new Error("Expected the field `iconSequences` to be an array in the JSON data but got " + data['iconSequences']);
            }
            // validate the optional field `iconSequences` (array)
            for (const item of data['iconSequences']) {
                DestinyDefinitionsCommonDestinyIconSequenceDefinition.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['largeIcon'] && !(typeof data['largeIcon'] === 'string' || data['largeIcon'] instanceof String)) {
            throw new Error("Expected the field `largeIcon` to be a primitive type in the JSON string but got " + data['largeIcon']);
        }
        // ensure the json data is a string
        if (data['largeTransparentIcon'] && !(typeof data['largeTransparentIcon'] === 'string' || data['largeTransparentIcon'] instanceof String)) {
            throw new Error("Expected the field `largeTransparentIcon` to be a primitive type in the JSON string but got " + data['largeTransparentIcon']);
        }
        // ensure the json data is a string
        if (data['mapIcon'] && !(typeof data['mapIcon'] === 'string' || data['mapIcon'] instanceof String)) {
            throw new Error("Expected the field `mapIcon` to be a primitive type in the JSON string but got " + data['mapIcon']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['originalIcon'] && !(typeof data['originalIcon'] === 'string' || data['originalIcon'] instanceof String)) {
            throw new Error("Expected the field `originalIcon` to be a primitive type in the JSON string but got " + data['originalIcon']);
        }
        if (data['requirementsDisplay']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['requirementsDisplay'])) {
                throw new Error("Expected the field `requirementsDisplay` to be an array in the JSON data but got " + data['requirementsDisplay']);
            }
            // validate the optional field `requirementsDisplay` (array)
            for (const item of data['requirementsDisplay']) {
                DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['smallTransparentIcon'] && !(typeof data['smallTransparentIcon'] === 'string' || data['smallTransparentIcon'] instanceof String)) {
            throw new Error("Expected the field `smallTransparentIcon` to be a primitive type in the JSON string but got " + data['smallTransparentIcon']);
        }
        // ensure the json data is a string
        if (data['subtitle'] && !(typeof data['subtitle'] === 'string' || data['subtitle'] instanceof String)) {
            throw new Error("Expected the field `subtitle` to be a primitive type in the JSON string but got " + data['subtitle']);
        }

        return true;
    }


}



/**
 * @member {String} description
 */
DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.prototype['description'] = undefined;

/**
 * @member {Boolean} hasIcon
 */
DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.prototype['hasIcon'] = undefined;

/**
 * If this item has a high-res icon (at least for now, many things won't), then the path to that icon will be here.
 * @member {String} highResIcon
 */
DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.prototype['highResIcon'] = undefined;

/**
 * Note that \"icon\" is sometimes misleading, and should be interpreted in the context of the entity. For instance, in Destiny 1 the DestinyRecordBookDefinition's icon was a big picture of a book.  But usually, it will be a small square image that you can use as... well, an icon.  They are currently represented as 96px x 96px images.
 * @member {String} icon
 */
DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.prototype['icon'] = undefined;

/**
 * @member {Array.<module:model/DestinyDefinitionsCommonDestinyIconSequenceDefinition>} iconSequences
 */
DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.prototype['iconSequences'] = undefined;

/**
 * I regret calling this a \"large icon\". It's more like a medium-sized image with a picture of the vendor's mug on it, trying their best to look cool. Not what one would call an icon.
 * @member {String} largeIcon
 */
DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.prototype['largeIcon'] = undefined;

/**
 * This is apparently the \"Watermark\". I am not certain offhand where this is actually used in the Game UI, but some people may find it useful.
 * @member {String} largeTransparentIcon
 */
DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.prototype['largeTransparentIcon'] = undefined;

/**
 * This is the icon used in the map overview, when the vendor is located on the map.
 * @member {String} mapIcon
 */
DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.prototype['mapIcon'] = undefined;

/**
 * @member {String} name
 */
DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.prototype['name'] = undefined;

/**
 * If we replaced the icon with something more glitzy, this is the original icon that the vendor had according to the game's content. It may be more lame and/or have less razzle-dazzle. But who am I to tell you which icon to use.
 * @member {String} originalIcon
 */
DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.prototype['originalIcon'] = undefined;

/**
 * Vendors, in addition to expected display property data, may also show some \"common requirements\" as statically defined definition data. This might be when a vendor accepts a single type of currency, or when the currency is unique to the vendor and the designers wanted to show that currency when you interact with the vendor.
 * @member {Array.<module:model/DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition>} requirementsDisplay
 */
DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.prototype['requirementsDisplay'] = undefined;

/**
 * This is the icon used in parts of the game UI such as the vendor's waypoint.
 * @member {String} smallTransparentIcon
 */
DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.prototype['smallTransparentIcon'] = undefined;

/**
 * @member {String} subtitle
 */
DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.prototype['subtitle'] = undefined;






export default DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition;

