/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SingleComponentResponseOfDestinyItemComponent from './SingleComponentResponseOfDestinyItemComponent';
import SingleComponentResponseOfDestinyItemInstanceComponent from './SingleComponentResponseOfDestinyItemInstanceComponent';
import SingleComponentResponseOfDestinyItemObjectivesComponent from './SingleComponentResponseOfDestinyItemObjectivesComponent';
import SingleComponentResponseOfDestinyItemPerksComponent from './SingleComponentResponseOfDestinyItemPerksComponent';
import SingleComponentResponseOfDestinyItemPlugObjectivesComponent from './SingleComponentResponseOfDestinyItemPlugObjectivesComponent';
import SingleComponentResponseOfDestinyItemRenderComponent from './SingleComponentResponseOfDestinyItemRenderComponent';
import SingleComponentResponseOfDestinyItemReusablePlugsComponent from './SingleComponentResponseOfDestinyItemReusablePlugsComponent';
import SingleComponentResponseOfDestinyItemSocketsComponent from './SingleComponentResponseOfDestinyItemSocketsComponent';
import SingleComponentResponseOfDestinyItemStatsComponent from './SingleComponentResponseOfDestinyItemStatsComponent';
import SingleComponentResponseOfDestinyItemTalentGridComponent from './SingleComponentResponseOfDestinyItemTalentGridComponent';

/**
 * The DestinyResponsesDestinyItemResponse model module.
 * @module model/DestinyResponsesDestinyItemResponse
 * @version 2.18.0
 */
class DestinyResponsesDestinyItemResponse {
    /**
     * Constructs a new <code>DestinyResponsesDestinyItemResponse</code>.
     * The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn&#39;t have an \&quot;itemInstanceId\&quot;: for those, get your information from the DestinyInventoryDefinition.
     * @alias module:model/DestinyResponsesDestinyItemResponse
     */
    constructor() { 
        
        DestinyResponsesDestinyItemResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyResponsesDestinyItemResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyResponsesDestinyItemResponse} obj Optional instance to populate.
     * @return {module:model/DestinyResponsesDestinyItemResponse} The populated <code>DestinyResponsesDestinyItemResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyResponsesDestinyItemResponse();

            if (data.hasOwnProperty('characterId')) {
                obj['characterId'] = ApiClient.convertToType(data['characterId'], 'Number');
            }
            if (data.hasOwnProperty('instance')) {
                obj['instance'] = ApiClient.convertToType(data['instance'], SingleComponentResponseOfDestinyItemInstanceComponent);
            }
            if (data.hasOwnProperty('item')) {
                obj['item'] = ApiClient.convertToType(data['item'], SingleComponentResponseOfDestinyItemComponent);
            }
            if (data.hasOwnProperty('objectives')) {
                obj['objectives'] = ApiClient.convertToType(data['objectives'], SingleComponentResponseOfDestinyItemObjectivesComponent);
            }
            if (data.hasOwnProperty('perks')) {
                obj['perks'] = ApiClient.convertToType(data['perks'], SingleComponentResponseOfDestinyItemPerksComponent);
            }
            if (data.hasOwnProperty('plugObjectives')) {
                obj['plugObjectives'] = ApiClient.convertToType(data['plugObjectives'], SingleComponentResponseOfDestinyItemPlugObjectivesComponent);
            }
            if (data.hasOwnProperty('renderData')) {
                obj['renderData'] = ApiClient.convertToType(data['renderData'], SingleComponentResponseOfDestinyItemRenderComponent);
            }
            if (data.hasOwnProperty('reusablePlugs')) {
                obj['reusablePlugs'] = ApiClient.convertToType(data['reusablePlugs'], SingleComponentResponseOfDestinyItemReusablePlugsComponent);
            }
            if (data.hasOwnProperty('sockets')) {
                obj['sockets'] = ApiClient.convertToType(data['sockets'], SingleComponentResponseOfDestinyItemSocketsComponent);
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = ApiClient.convertToType(data['stats'], SingleComponentResponseOfDestinyItemStatsComponent);
            }
            if (data.hasOwnProperty('talentGrid')) {
                obj['talentGrid'] = ApiClient.convertToType(data['talentGrid'], SingleComponentResponseOfDestinyItemTalentGridComponent);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyResponsesDestinyItemResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyResponsesDestinyItemResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `instance`
        if (data['instance']) { // data not null
          SingleComponentResponseOfDestinyItemInstanceComponent.validateJSON(data['instance']);
        }
        // validate the optional field `item`
        if (data['item']) { // data not null
          SingleComponentResponseOfDestinyItemComponent.validateJSON(data['item']);
        }
        // validate the optional field `objectives`
        if (data['objectives']) { // data not null
          SingleComponentResponseOfDestinyItemObjectivesComponent.validateJSON(data['objectives']);
        }
        // validate the optional field `perks`
        if (data['perks']) { // data not null
          SingleComponentResponseOfDestinyItemPerksComponent.validateJSON(data['perks']);
        }
        // validate the optional field `plugObjectives`
        if (data['plugObjectives']) { // data not null
          SingleComponentResponseOfDestinyItemPlugObjectivesComponent.validateJSON(data['plugObjectives']);
        }
        // validate the optional field `renderData`
        if (data['renderData']) { // data not null
          SingleComponentResponseOfDestinyItemRenderComponent.validateJSON(data['renderData']);
        }
        // validate the optional field `reusablePlugs`
        if (data['reusablePlugs']) { // data not null
          SingleComponentResponseOfDestinyItemReusablePlugsComponent.validateJSON(data['reusablePlugs']);
        }
        // validate the optional field `sockets`
        if (data['sockets']) { // data not null
          SingleComponentResponseOfDestinyItemSocketsComponent.validateJSON(data['sockets']);
        }
        // validate the optional field `stats`
        if (data['stats']) { // data not null
          SingleComponentResponseOfDestinyItemStatsComponent.validateJSON(data['stats']);
        }
        // validate the optional field `talentGrid`
        if (data['talentGrid']) { // data not null
          SingleComponentResponseOfDestinyItemTalentGridComponent.validateJSON(data['talentGrid']);
        }

        return true;
    }


}



/**
 * If the item is on a character, this will return the ID of the character that is holding the item.
 * @member {Number} characterId
 */
DestinyResponsesDestinyItemResponse.prototype['characterId'] = undefined;

/**
 * Basic instance data for the item.  COMPONENT TYPE: ItemInstances
 * @member {module:model/SingleComponentResponseOfDestinyItemInstanceComponent} instance
 */
DestinyResponsesDestinyItemResponse.prototype['instance'] = undefined;

/**
 * Common data for the item relevant to its non-instanced properties.  COMPONENT TYPE: ItemCommonData
 * @member {module:model/SingleComponentResponseOfDestinyItemComponent} item
 */
DestinyResponsesDestinyItemResponse.prototype['item'] = undefined;

/**
 * Information specifically about the item's objectives.  COMPONENT TYPE: ItemObjectives
 * @member {module:model/SingleComponentResponseOfDestinyItemObjectivesComponent} objectives
 */
DestinyResponsesDestinyItemResponse.prototype['objectives'] = undefined;

/**
 * Information specifically about the perks currently active on the item.  COMPONENT TYPE: ItemPerks
 * @member {module:model/SingleComponentResponseOfDestinyItemPerksComponent} perks
 */
DestinyResponsesDestinyItemResponse.prototype['perks'] = undefined;

/**
 * Information about objectives on Plugs for a given item. See the component's documentation for more info.  COMPONENT TYPE: ItemPlugObjectives
 * @member {module:model/SingleComponentResponseOfDestinyItemPlugObjectivesComponent} plugObjectives
 */
DestinyResponsesDestinyItemResponse.prototype['plugObjectives'] = undefined;

/**
 * Information about how to render the item in 3D.  COMPONENT TYPE: ItemRenderData
 * @member {module:model/SingleComponentResponseOfDestinyItemRenderComponent} renderData
 */
DestinyResponsesDestinyItemResponse.prototype['renderData'] = undefined;

/**
 * Information about the Reusable Plugs for sockets on an item. These are plugs that you can insert into the given socket regardless of if you actually own an instance of that plug: they are logic-driven plugs rather than inventory-driven.   These may need to be combined with Plug Set component data to get a full picture of available plugs on a given socket.   COMPONENT TYPE: ItemReusablePlugs
 * @member {module:model/SingleComponentResponseOfDestinyItemReusablePlugsComponent} reusablePlugs
 */
DestinyResponsesDestinyItemResponse.prototype['reusablePlugs'] = undefined;

/**
 * Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them.  COMPONENT TYPE: ItemSockets
 * @member {module:model/SingleComponentResponseOfDestinyItemSocketsComponent} sockets
 */
DestinyResponsesDestinyItemResponse.prototype['sockets'] = undefined;

/**
 * Information about the computed stats of the item: power, defense, etc...  COMPONENT TYPE: ItemStats
 * @member {module:model/SingleComponentResponseOfDestinyItemStatsComponent} stats
 */
DestinyResponsesDestinyItemResponse.prototype['stats'] = undefined;

/**
 * Information about the talent grid attached to the item. Talent nodes can provide a variety of benefits and abilities, and in Destiny 2 are used almost exclusively for the character's \"Builds\".  COMPONENT TYPE: ItemTalentGrids
 * @member {module:model/SingleComponentResponseOfDestinyItemTalentGridComponent} talentGrid
 */
DestinyResponsesDestinyItemResponse.prototype['talentGrid'] = undefined;






export default DestinyResponsesDestinyItemResponse;

