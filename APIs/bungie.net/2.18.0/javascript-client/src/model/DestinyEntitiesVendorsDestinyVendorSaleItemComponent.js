/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDestinyItemQuantity from './DestinyDestinyItemQuantity';
import DestinyDestinyUnlockStatus from './DestinyDestinyUnlockStatus';

/**
 * The DestinyEntitiesVendorsDestinyVendorSaleItemComponent model module.
 * @module model/DestinyEntitiesVendorsDestinyVendorSaleItemComponent
 * @version 2.18.0
 */
class DestinyEntitiesVendorsDestinyVendorSaleItemComponent {
    /**
     * Constructs a new <code>DestinyEntitiesVendorsDestinyVendorSaleItemComponent</code>.
     * Request this component if you want the details about an item being sold in relation to the character making the request: whether the character can buy it, whether they can afford it, and other data related to purchasing the item.  Note that if you want instance, stats, etc... data for the item, you&#39;ll have to request additional components such as ItemInstances, ItemPerks etc... and acquire them from the DestinyVendorResponse&#39;s \&quot;items\&quot; property.
     * @alias module:model/DestinyEntitiesVendorsDestinyVendorSaleItemComponent
     */
    constructor() { 
        
        DestinyEntitiesVendorsDestinyVendorSaleItemComponent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyEntitiesVendorsDestinyVendorSaleItemComponent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyEntitiesVendorsDestinyVendorSaleItemComponent} obj Optional instance to populate.
     * @return {module:model/DestinyEntitiesVendorsDestinyVendorSaleItemComponent} The populated <code>DestinyEntitiesVendorsDestinyVendorSaleItemComponent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyEntitiesVendorsDestinyVendorSaleItemComponent();

            if (data.hasOwnProperty('apiPurchasable')) {
                obj['apiPurchasable'] = ApiClient.convertToType(data['apiPurchasable'], 'Boolean');
            }
            if (data.hasOwnProperty('augments')) {
                obj['augments'] = ApiClient.convertToType(data['augments'], 'Number');
            }
            if (data.hasOwnProperty('costs')) {
                obj['costs'] = ApiClient.convertToType(data['costs'], [DestinyDestinyItemQuantity]);
            }
            if (data.hasOwnProperty('failureIndexes')) {
                obj['failureIndexes'] = ApiClient.convertToType(data['failureIndexes'], ['Number']);
            }
            if (data.hasOwnProperty('itemHash')) {
                obj['itemHash'] = ApiClient.convertToType(data['itemHash'], 'Number');
            }
            if (data.hasOwnProperty('itemValueVisibility')) {
                obj['itemValueVisibility'] = ApiClient.convertToType(data['itemValueVisibility'], ['Boolean']);
            }
            if (data.hasOwnProperty('overrideNextRefreshDate')) {
                obj['overrideNextRefreshDate'] = ApiClient.convertToType(data['overrideNextRefreshDate'], 'Date');
            }
            if (data.hasOwnProperty('overrideStyleItemHash')) {
                obj['overrideStyleItemHash'] = ApiClient.convertToType(data['overrideStyleItemHash'], 'Number');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('requiredUnlocks')) {
                obj['requiredUnlocks'] = ApiClient.convertToType(data['requiredUnlocks'], ['Number']);
            }
            if (data.hasOwnProperty('saleStatus')) {
                obj['saleStatus'] = ApiClient.convertToType(data['saleStatus'], 'Number');
            }
            if (data.hasOwnProperty('unlockStatuses')) {
                obj['unlockStatuses'] = ApiClient.convertToType(data['unlockStatuses'], [DestinyDestinyUnlockStatus]);
            }
            if (data.hasOwnProperty('vendorItemIndex')) {
                obj['vendorItemIndex'] = ApiClient.convertToType(data['vendorItemIndex'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyEntitiesVendorsDestinyVendorSaleItemComponent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyEntitiesVendorsDestinyVendorSaleItemComponent</code>.
     */
    static validateJSON(data) {
        if (data['costs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['costs'])) {
                throw new Error("Expected the field `costs` to be an array in the JSON data but got " + data['costs']);
            }
            // validate the optional field `costs` (array)
            for (const item of data['costs']) {
                DestinyDestinyItemQuantity.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['failureIndexes'])) {
            throw new Error("Expected the field `failureIndexes` to be an array in the JSON data but got " + data['failureIndexes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['itemValueVisibility'])) {
            throw new Error("Expected the field `itemValueVisibility` to be an array in the JSON data but got " + data['itemValueVisibility']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['requiredUnlocks'])) {
            throw new Error("Expected the field `requiredUnlocks` to be an array in the JSON data but got " + data['requiredUnlocks']);
        }
        if (data['unlockStatuses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['unlockStatuses'])) {
                throw new Error("Expected the field `unlockStatuses` to be an array in the JSON data but got " + data['unlockStatuses']);
            }
            // validate the optional field `unlockStatuses` (array)
            for (const item of data['unlockStatuses']) {
                DestinyDestinyUnlockStatus.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * If true, this item can be purchased through the Bungie.net API.
 * @member {Boolean} apiPurchasable
 */
DestinyEntitiesVendorsDestinyVendorSaleItemComponent.prototype['apiPurchasable'] = undefined;

/**
 * A flags enumeration value representing the current state of any \"state modifiers\" on the item being sold. These are meant to correspond with some sort of visual indicator as to the augmentation: for instance, if an item is on sale or if you already own the item in question.  Determining how you want to represent these in your own app (or if you even want to) is an exercise left for the reader.
 * @member {Number} augments
 */
DestinyEntitiesVendorsDestinyVendorSaleItemComponent.prototype['augments'] = undefined;

/**
 * A summary of the current costs of the item.
 * @member {Array.<module:model/DestinyDestinyItemQuantity>} costs
 */
DestinyEntitiesVendorsDestinyVendorSaleItemComponent.prototype['costs'] = undefined;

/**
 * Indexes in to the \"failureStrings\" lookup table in DestinyVendorDefinition for the given Vendor. Gives some more reliable failure information for why you can't purchase an item.  It is preferred to use these over requiredUnlocks and unlockStatuses: the latter are provided mostly in case someone can do something interesting with it that I didn't anticipate.
 * @member {Array.<Number>} failureIndexes
 */
DestinyEntitiesVendorsDestinyVendorSaleItemComponent.prototype['failureIndexes'] = undefined;

/**
 * The hash of the item being sold, as a quick shortcut for looking up the DestinyInventoryItemDefinition of the sale item.
 * @member {Number} itemHash
 */
DestinyEntitiesVendorsDestinyVendorSaleItemComponent.prototype['itemHash'] = undefined;

/**
 * If available, a list that describes which item values (rewards) should be shown (true) or hidden (false).
 * @member {Array.<Boolean>} itemValueVisibility
 */
DestinyEntitiesVendorsDestinyVendorSaleItemComponent.prototype['itemValueVisibility'] = undefined;

/**
 * If this item has its own custom date where it may be removed from the Vendor's rotation, this is that date.  Note that there's not actually any guarantee that it will go away: it could be chosen again and end up still being in the Vendor's sale items! But this is the next date where that test will occur, and is also the date that the game shows for availability on things like Bounties being sold. So it's the best we can give.
 * @member {Date} overrideNextRefreshDate
 */
DestinyEntitiesVendorsDestinyVendorSaleItemComponent.prototype['overrideNextRefreshDate'] = undefined;

/**
 * If populated, this is the hash of the item whose icon (and other secondary styles, but *not* the human readable strings) should override whatever icons/styles are on the item being sold.  If you don't do this, certain items whose styles are being overridden by socketed items - such as the \"Recycle Shader\" item - would show whatever their default icon/style is, and it wouldn't be pretty or look accurate.
 * @member {Number} overrideStyleItemHash
 */
DestinyEntitiesVendorsDestinyVendorSaleItemComponent.prototype['overrideStyleItemHash'] = undefined;

/**
 * How much of the item you'll be getting.
 * @member {Number} quantity
 */
DestinyEntitiesVendorsDestinyVendorSaleItemComponent.prototype['quantity'] = undefined;

/**
 * If you can't buy the item due to a complex character state, these will be hashes for DestinyUnlockDefinitions that you can check to see messages regarding the failure (if the unlocks have human readable information: it is not guaranteed that Unlocks will have human readable strings, and your application will have to handle that)  Prefer using failureIndexes instead. These are provided for informational purposes, but have largely been supplanted by failureIndexes.
 * @member {Array.<Number>} requiredUnlocks
 */
DestinyEntitiesVendorsDestinyVendorSaleItemComponent.prototype['requiredUnlocks'] = undefined;

/**
 * A flag indicating whether the requesting character can buy the item, and if not the reasons why the character can't buy it.
 * @member {Number} saleStatus
 */
DestinyEntitiesVendorsDestinyVendorSaleItemComponent.prototype['saleStatus'] = undefined;

/**
 * If any complex unlock states are checked in determining purchasability, these will be returned here along with the status of the unlock check.  Prefer using failureIndexes instead. These are provided for informational purposes, but have largely been supplanted by failureIndexes.
 * @member {Array.<module:model/DestinyDestinyUnlockStatus>} unlockStatuses
 */
DestinyEntitiesVendorsDestinyVendorSaleItemComponent.prototype['unlockStatuses'] = undefined;

/**
 * The index into the DestinyVendorDefinition.itemList property. Note that this means Vendor data *is* Content Version dependent: make sure you have the latest content before you use Vendor data, or these indexes may mismatch.   Most systems avoid this problem, but Vendors is one area where we are unable to reasonably avoid content dependency at the moment.
 * @member {Number} vendorItemIndex
 */
DestinyEntitiesVendorsDestinyVendorSaleItemComponent.prototype['vendorItemIndex'] = undefined;






export default DestinyEntitiesVendorsDestinyVendorSaleItemComponent;

