/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GroupsV2GroupUserInfoCard model module.
 * @module model/GroupsV2GroupUserInfoCard
 * @version 2.18.0
 */
class GroupsV2GroupUserInfoCard {
    /**
     * Constructs a new <code>GroupsV2GroupUserInfoCard</code>.
     * @alias module:model/GroupsV2GroupUserInfoCard
     */
    constructor() { 
        
        GroupsV2GroupUserInfoCard.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GroupsV2GroupUserInfoCard</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GroupsV2GroupUserInfoCard} obj Optional instance to populate.
     * @return {module:model/GroupsV2GroupUserInfoCard} The populated <code>GroupsV2GroupUserInfoCard</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GroupsV2GroupUserInfoCard();

            if (data.hasOwnProperty('LastSeenDisplayName')) {
                obj['LastSeenDisplayName'] = ApiClient.convertToType(data['LastSeenDisplayName'], 'String');
            }
            if (data.hasOwnProperty('LastSeenDisplayNameType')) {
                obj['LastSeenDisplayNameType'] = ApiClient.convertToType(data['LastSeenDisplayNameType'], 'Number');
            }
            if (data.hasOwnProperty('applicableMembershipTypes')) {
                obj['applicableMembershipTypes'] = ApiClient.convertToType(data['applicableMembershipTypes'], ['Number']);
            }
            if (data.hasOwnProperty('bungieGlobalDisplayName')) {
                obj['bungieGlobalDisplayName'] = ApiClient.convertToType(data['bungieGlobalDisplayName'], 'String');
            }
            if (data.hasOwnProperty('bungieGlobalDisplayNameCode')) {
                obj['bungieGlobalDisplayNameCode'] = ApiClient.convertToType(data['bungieGlobalDisplayNameCode'], 'Number');
            }
            if (data.hasOwnProperty('crossSaveOverride')) {
                obj['crossSaveOverride'] = ApiClient.convertToType(data['crossSaveOverride'], 'Number');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('iconPath')) {
                obj['iconPath'] = ApiClient.convertToType(data['iconPath'], 'String');
            }
            if (data.hasOwnProperty('isPublic')) {
                obj['isPublic'] = ApiClient.convertToType(data['isPublic'], 'Boolean');
            }
            if (data.hasOwnProperty('membershipId')) {
                obj['membershipId'] = ApiClient.convertToType(data['membershipId'], 'Number');
            }
            if (data.hasOwnProperty('membershipType')) {
                obj['membershipType'] = ApiClient.convertToType(data['membershipType'], 'Number');
            }
            if (data.hasOwnProperty('supplementalDisplayName')) {
                obj['supplementalDisplayName'] = ApiClient.convertToType(data['supplementalDisplayName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GroupsV2GroupUserInfoCard</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GroupsV2GroupUserInfoCard</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['LastSeenDisplayName'] && !(typeof data['LastSeenDisplayName'] === 'string' || data['LastSeenDisplayName'] instanceof String)) {
            throw new Error("Expected the field `LastSeenDisplayName` to be a primitive type in the JSON string but got " + data['LastSeenDisplayName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['applicableMembershipTypes'])) {
            throw new Error("Expected the field `applicableMembershipTypes` to be an array in the JSON data but got " + data['applicableMembershipTypes']);
        }
        // ensure the json data is a string
        if (data['bungieGlobalDisplayName'] && !(typeof data['bungieGlobalDisplayName'] === 'string' || data['bungieGlobalDisplayName'] instanceof String)) {
            throw new Error("Expected the field `bungieGlobalDisplayName` to be a primitive type in the JSON string but got " + data['bungieGlobalDisplayName']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['iconPath'] && !(typeof data['iconPath'] === 'string' || data['iconPath'] instanceof String)) {
            throw new Error("Expected the field `iconPath` to be a primitive type in the JSON string but got " + data['iconPath']);
        }
        // ensure the json data is a string
        if (data['supplementalDisplayName'] && !(typeof data['supplementalDisplayName'] === 'string' || data['supplementalDisplayName'] instanceof String)) {
            throw new Error("Expected the field `supplementalDisplayName` to be a primitive type in the JSON string but got " + data['supplementalDisplayName']);
        }

        return true;
    }


}



/**
 * This will be the display name the clan server last saw the user as. If the account is an active cross save override, this will be the display name to use. Otherwise, this will match the displayName property.
 * @member {String} LastSeenDisplayName
 */
GroupsV2GroupUserInfoCard.prototype['LastSeenDisplayName'] = undefined;

/**
 * The platform of the LastSeenDisplayName
 * @member {Number} LastSeenDisplayNameType
 */
GroupsV2GroupUserInfoCard.prototype['LastSeenDisplayNameType'] = undefined;

/**
 * The list of Membership Types indicating the platforms on which this Membership can be used.   Not in Cross Save = its original membership type. Cross Save Primary = Any membership types it is overridding, and its original membership type Cross Save Overridden = Empty list
 * @member {Array.<Number>} applicableMembershipTypes
 */
GroupsV2GroupUserInfoCard.prototype['applicableMembershipTypes'] = undefined;

/**
 * The bungie global display name, if set.
 * @member {String} bungieGlobalDisplayName
 */
GroupsV2GroupUserInfoCard.prototype['bungieGlobalDisplayName'] = undefined;

/**
 * The bungie global display name code, if set.
 * @member {Number} bungieGlobalDisplayNameCode
 */
GroupsV2GroupUserInfoCard.prototype['bungieGlobalDisplayNameCode'] = undefined;

/**
 * If there is a cross save override in effect, this value will tell you the type that is overridding this one.
 * @member {Number} crossSaveOverride
 */
GroupsV2GroupUserInfoCard.prototype['crossSaveOverride'] = undefined;

/**
 * Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.
 * @member {String} displayName
 */
GroupsV2GroupUserInfoCard.prototype['displayName'] = undefined;

/**
 * URL the Icon if available.
 * @member {String} iconPath
 */
GroupsV2GroupUserInfoCard.prototype['iconPath'] = undefined;

/**
 * If True, this is a public user membership.
 * @member {Boolean} isPublic
 */
GroupsV2GroupUserInfoCard.prototype['isPublic'] = undefined;

/**
 * Membership ID as they user is known in the Accounts service
 * @member {Number} membershipId
 */
GroupsV2GroupUserInfoCard.prototype['membershipId'] = undefined;

/**
 * Type of the membership. Not necessarily the native type.
 * @member {Number} membershipType
 */
GroupsV2GroupUserInfoCard.prototype['membershipType'] = undefined;

/**
 * A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.
 * @member {String} supplementalDisplayName
 */
GroupsV2GroupUserInfoCard.prototype['supplementalDisplayName'] = undefined;






export default GroupsV2GroupUserInfoCard;

