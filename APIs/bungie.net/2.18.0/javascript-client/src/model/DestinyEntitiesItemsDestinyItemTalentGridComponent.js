/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDestinyProgression from './DestinyDestinyProgression';
import DestinyDestinyTalentNode from './DestinyDestinyTalentNode';

/**
 * The DestinyEntitiesItemsDestinyItemTalentGridComponent model module.
 * @module model/DestinyEntitiesItemsDestinyItemTalentGridComponent
 * @version 2.18.0
 */
class DestinyEntitiesItemsDestinyItemTalentGridComponent {
    /**
     * Constructs a new <code>DestinyEntitiesItemsDestinyItemTalentGridComponent</code>.
     * Well, we&#39;re here in Destiny 2, and Talent Grids are unfortunately still around.  The good news is that they&#39;re pretty much only being used for certain base information on items and for Builds/Subclasses. The bad news is that they still suck. If you really want this information, grab this component.  An important note is that talent grids are defined as such:  A Grid has 1:M Nodes, which has 1:M Steps.  Any given node can only have a single step active at one time, which represents the actual visual contents and effects of the Node (for instance, if you see a \&quot;Super Cool Bonus\&quot; node, the actual icon and text for the node is coming from the current Step of that node).  Nodes can be grouped into exclusivity sets *and* as of D2, exclusivity groups (which are collections of exclusivity sets that affect each other).  See DestinyTalentGridDefinition for more information. Brace yourself, the water&#39;s cold out there in the deep end.
     * @alias module:model/DestinyEntitiesItemsDestinyItemTalentGridComponent
     */
    constructor() { 
        
        DestinyEntitiesItemsDestinyItemTalentGridComponent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyEntitiesItemsDestinyItemTalentGridComponent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyEntitiesItemsDestinyItemTalentGridComponent} obj Optional instance to populate.
     * @return {module:model/DestinyEntitiesItemsDestinyItemTalentGridComponent} The populated <code>DestinyEntitiesItemsDestinyItemTalentGridComponent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyEntitiesItemsDestinyItemTalentGridComponent();

            if (data.hasOwnProperty('gridProgression')) {
                obj['gridProgression'] = ApiClient.convertToType(data['gridProgression'], DestinyDestinyProgression);
            }
            if (data.hasOwnProperty('isGridComplete')) {
                obj['isGridComplete'] = ApiClient.convertToType(data['isGridComplete'], 'Boolean');
            }
            if (data.hasOwnProperty('nodes')) {
                obj['nodes'] = ApiClient.convertToType(data['nodes'], [DestinyDestinyTalentNode]);
            }
            if (data.hasOwnProperty('talentGridHash')) {
                obj['talentGridHash'] = ApiClient.convertToType(data['talentGridHash'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyEntitiesItemsDestinyItemTalentGridComponent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyEntitiesItemsDestinyItemTalentGridComponent</code>.
     */
    static validateJSON(data) {
        // validate the optional field `gridProgression`
        if (data['gridProgression']) { // data not null
          DestinyDestinyProgression.validateJSON(data['gridProgression']);
        }
        if (data['nodes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nodes'])) {
                throw new Error("Expected the field `nodes` to be an array in the JSON data but got " + data['nodes']);
            }
            // validate the optional field `nodes` (array)
            for (const item of data['nodes']) {
                DestinyDestinyTalentNode.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * If the item has a progression, it will be detailed here. A progression means that the item can gain experience. Thresholds of experience are what determines whether and when a talent node can be activated.
 * @member {module:model/DestinyDestinyProgression} gridProgression
 */
DestinyEntitiesItemsDestinyItemTalentGridComponent.prototype['gridProgression'] = undefined;

/**
 * Indicates whether the talent grid on this item is completed, and thus whether it should have a gold border around it.  Only will be true if the item actually *has* a talent grid, and only then if it is completed (i.e. every exclusive set has an activated node, and every non-exclusive set node has been activated)
 * @member {Boolean} isGridComplete
 */
DestinyEntitiesItemsDestinyItemTalentGridComponent.prototype['isGridComplete'] = undefined;

/**
 * Detailed information about the individual nodes in the talent grid.  A node represents a single visual \"pip\" in the talent grid or Build detail view, though each node may have multiple \"steps\" which indicate the actual bonuses and visual representation of that node.
 * @member {Array.<module:model/DestinyDestinyTalentNode>} nodes
 */
DestinyEntitiesItemsDestinyItemTalentGridComponent.prototype['nodes'] = undefined;

/**
 * Most items don't have useful talent grids anymore, but Builds in particular still do.  You can use this hash to lookup the DestinyTalentGridDefinition attached to this item, which will be crucial for understanding the node values on the item.
 * @member {Number} talentGridHash
 */
DestinyEntitiesItemsDestinyItemTalentGridComponent.prototype['talentGridHash'] = undefined;






export default DestinyEntitiesItemsDestinyItemTalentGridComponent;

