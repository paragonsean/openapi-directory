/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDefinitionsDestinyLocationReleaseDefinition from './DestinyDefinitionsDestinyLocationReleaseDefinition';

/**
 * The DestinyDefinitionsDestinyLocationDefinition model module.
 * @module model/DestinyDefinitionsDestinyLocationDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsDestinyLocationDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsDestinyLocationDefinition</code>.
     * A \&quot;Location\&quot; is a sort of shortcut for referring to a specific combination of Activity, Destination, Place, and even Bubble or NavPoint within a space.  Most of this data isn&#39;t intrinsically useful to us, but Objectives refer to locations, and through that we can at least infer the Activity, Destination, and Place being referred to by the Objective.
     * @alias module:model/DestinyDefinitionsDestinyLocationDefinition
     */
    constructor() { 
        
        DestinyDefinitionsDestinyLocationDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsDestinyLocationDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsDestinyLocationDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsDestinyLocationDefinition} The populated <code>DestinyDefinitionsDestinyLocationDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsDestinyLocationDefinition();

            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'Number');
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('locationReleases')) {
                obj['locationReleases'] = ApiClient.convertToType(data['locationReleases'], [DestinyDefinitionsDestinyLocationReleaseDefinition]);
            }
            if (data.hasOwnProperty('redacted')) {
                obj['redacted'] = ApiClient.convertToType(data['redacted'], 'Boolean');
            }
            if (data.hasOwnProperty('vendorHash')) {
                obj['vendorHash'] = ApiClient.convertToType(data['vendorHash'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsDestinyLocationDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsDestinyLocationDefinition</code>.
     */
    static validateJSON(data) {
        if (data['locationReleases']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['locationReleases'])) {
                throw new Error("Expected the field `locationReleases` to be an array in the JSON data but got " + data['locationReleases']);
            }
            // validate the optional field `locationReleases` (array)
            for (const item of data['locationReleases']) {
                DestinyDefinitionsDestinyLocationReleaseDefinition.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
 * @member {Number} hash
 */
DestinyDefinitionsDestinyLocationDefinition.prototype['hash'] = undefined;

/**
 * The index of the entity as it was found in the investment tables.
 * @member {Number} index
 */
DestinyDefinitionsDestinyLocationDefinition.prototype['index'] = undefined;

/**
 * A Location may refer to different specific spots in the world based on the world's current state. This is a list of those potential spots, and the data we can use at runtime to determine which one of the spots is the currently valid one.
 * @member {Array.<module:model/DestinyDefinitionsDestinyLocationReleaseDefinition>} locationReleases
 */
DestinyDefinitionsDestinyLocationDefinition.prototype['locationReleases'] = undefined;

/**
 * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
 * @member {Boolean} redacted
 */
DestinyDefinitionsDestinyLocationDefinition.prototype['redacted'] = undefined;

/**
 * If the location has a Vendor on it, this is the hash identifier for that Vendor. Look them up with DestinyVendorDefinition.
 * @member {Number} vendorHash
 */
DestinyDefinitionsDestinyLocationDefinition.prototype['vendorHash'] = undefined;






export default DestinyDefinitionsDestinyLocationDefinition;

