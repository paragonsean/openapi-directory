/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition from './DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition';

/**
 * The DestinyDefinitionsSocketsDestinySocketCategoryDefinition model module.
 * @module model/DestinyDefinitionsSocketsDestinySocketCategoryDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsSocketsDestinySocketCategoryDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsSocketsDestinySocketCategoryDefinition</code>.
     * Sockets on an item are organized into Categories visually.  You can find references to the socket category defined on an item&#39;s DestinyInventoryItemDefinition.sockets.socketCategories property.  This has the display information for rendering the categories&#39; header, and a hint for how the UI should handle showing this category.  The shitty thing about this, however, is that the socket categories&#39; UI style can be overridden by the item&#39;s UI style. For instance, the Socket Category used by Emote Sockets says it&#39;s \&quot;consumable,\&quot; but that&#39;s a lie: they&#39;re all reusable, and overridden by the detail UI pages in ways that we can&#39;t easily account for in the API.  As a result, I will try to compile these rules into the individual sockets on items, and provide the best hint possible there through the plugSources property. In the future, I may attempt to use this information in conjunction with the item to provide a more usable UI hint on the socket layer, but for now improving the consistency of plugSources is the best I have time to provide. (See https://github.com/Bungie-net/api/issues/522 for more info)
     * @alias module:model/DestinyDefinitionsSocketsDestinySocketCategoryDefinition
     */
    constructor() { 
        
        DestinyDefinitionsSocketsDestinySocketCategoryDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsSocketsDestinySocketCategoryDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsSocketsDestinySocketCategoryDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsSocketsDestinySocketCategoryDefinition} The populated <code>DestinyDefinitionsSocketsDestinySocketCategoryDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsSocketsDestinySocketCategoryDefinition();

            if (data.hasOwnProperty('categoryStyle')) {
                obj['categoryStyle'] = ApiClient.convertToType(data['categoryStyle'], 'Number');
            }
            if (data.hasOwnProperty('displayProperties')) {
                obj['displayProperties'] = DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.constructFromObject(data['displayProperties']);
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'Number');
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('redacted')) {
                obj['redacted'] = ApiClient.convertToType(data['redacted'], 'Boolean');
            }
            if (data.hasOwnProperty('uiCategoryStyle')) {
                obj['uiCategoryStyle'] = ApiClient.convertToType(data['uiCategoryStyle'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsSocketsDestinySocketCategoryDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsSocketsDestinySocketCategoryDefinition</code>.
     */
    static validateJSON(data) {
        // validate the optional field `displayProperties`
        if (data['displayProperties']) { // data not null
          DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJSON(data['displayProperties']);
        }

        return true;
    }


}



/**
 * Same as uiCategoryStyle, but in a more usable enumeration form.
 * @member {Number} categoryStyle
 */
DestinyDefinitionsSocketsDestinySocketCategoryDefinition.prototype['categoryStyle'] = undefined;

/**
 * @member {module:model/DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition} displayProperties
 */
DestinyDefinitionsSocketsDestinySocketCategoryDefinition.prototype['displayProperties'] = undefined;

/**
 * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
 * @member {Number} hash
 */
DestinyDefinitionsSocketsDestinySocketCategoryDefinition.prototype['hash'] = undefined;

/**
 * The index of the entity as it was found in the investment tables.
 * @member {Number} index
 */
DestinyDefinitionsSocketsDestinySocketCategoryDefinition.prototype['index'] = undefined;

/**
 * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
 * @member {Boolean} redacted
 */
DestinyDefinitionsSocketsDestinySocketCategoryDefinition.prototype['redacted'] = undefined;

/**
 * A string hinting to the game's UI system about how the sockets in this category should be displayed.  BNet doesn't use it: it's up to you to find valid values and make your own special UI if you want to honor this category style.
 * @member {Number} uiCategoryStyle
 */
DestinyDefinitionsSocketsDestinySocketCategoryDefinition.prototype['uiCategoryStyle'] = undefined;






export default DestinyDefinitionsSocketsDestinySocketCategoryDefinition;

