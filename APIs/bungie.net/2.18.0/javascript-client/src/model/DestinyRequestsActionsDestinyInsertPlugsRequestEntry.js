/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DestinyRequestsActionsDestinyInsertPlugsRequestEntry model module.
 * @module model/DestinyRequestsActionsDestinyInsertPlugsRequestEntry
 * @version 2.18.0
 */
class DestinyRequestsActionsDestinyInsertPlugsRequestEntry {
    /**
     * Constructs a new <code>DestinyRequestsActionsDestinyInsertPlugsRequestEntry</code>.
     * Represents all of the data related to a single plug to be inserted.  Note that, while you *can* point to a socket that represents infusion, you will receive an error if you attempt to do so. Come on guys, let&#39;s play nice.
     * @alias module:model/DestinyRequestsActionsDestinyInsertPlugsRequestEntry
     */
    constructor() { 
        
        DestinyRequestsActionsDestinyInsertPlugsRequestEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyRequestsActionsDestinyInsertPlugsRequestEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyRequestsActionsDestinyInsertPlugsRequestEntry} obj Optional instance to populate.
     * @return {module:model/DestinyRequestsActionsDestinyInsertPlugsRequestEntry} The populated <code>DestinyRequestsActionsDestinyInsertPlugsRequestEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyRequestsActionsDestinyInsertPlugsRequestEntry();

            if (data.hasOwnProperty('plugItemHash')) {
                obj['plugItemHash'] = ApiClient.convertToType(data['plugItemHash'], 'Number');
            }
            if (data.hasOwnProperty('socketArrayType')) {
                obj['socketArrayType'] = ApiClient.convertToType(data['socketArrayType'], 'Number');
            }
            if (data.hasOwnProperty('socketIndex')) {
                obj['socketIndex'] = ApiClient.convertToType(data['socketIndex'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyRequestsActionsDestinyInsertPlugsRequestEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyRequestsActionsDestinyInsertPlugsRequestEntry</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Plugs are never instanced (except in infusion). So with the hash alone, we should be able to: 1) Infer whether the player actually needs to have the item, or if it's a reusable plug 2) Perform any operation needed to use the Plug, including removing the plug item and running reward sheets.
 * @member {Number} plugItemHash
 */
DestinyRequestsActionsDestinyInsertPlugsRequestEntry.prototype['plugItemHash'] = undefined;

/**
 * This property, combined with the socketIndex, tells us which socket we are referring to (since operations can be performed on both Intrinsic and \"default\" sockets, and they occupy different arrays in the Inventory Item Definition). I know, I know. Don't give me that look.
 * @member {Number} socketArrayType
 */
DestinyRequestsActionsDestinyInsertPlugsRequestEntry.prototype['socketArrayType'] = undefined;

/**
 * The index into the socket array, which identifies the specific socket being operated on. We also need to know the socketArrayType in order to uniquely identify the socket.  Don't point to or try to insert a plug into an infusion socket. It won't work.
 * @member {Number} socketIndex
 */
DestinyRequestsActionsDestinyInsertPlugsRequestEntry.prototype['socketIndex'] = undefined;






export default DestinyRequestsActionsDestinyInsertPlugsRequestEntry;

