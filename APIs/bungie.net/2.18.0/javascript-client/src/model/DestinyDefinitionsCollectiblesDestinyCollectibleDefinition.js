/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDefinitionsCollectiblesDestinyCollectibleAcquisitionBlock from './DestinyDefinitionsCollectiblesDestinyCollectibleAcquisitionBlock';
import DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock from './DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock';
import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition from './DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition';
import DestinyDefinitionsPresentationDestinyPresentationChildBlock from './DestinyDefinitionsPresentationDestinyPresentationChildBlock';

/**
 * The DestinyDefinitionsCollectiblesDestinyCollectibleDefinition model module.
 * @module model/DestinyDefinitionsCollectiblesDestinyCollectibleDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsCollectiblesDestinyCollectibleDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsCollectiblesDestinyCollectibleDefinition</code>.
     * Defines a
     * @alias module:model/DestinyDefinitionsCollectiblesDestinyCollectibleDefinition
     */
    constructor() { 
        
        DestinyDefinitionsCollectiblesDestinyCollectibleDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsCollectiblesDestinyCollectibleDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsCollectiblesDestinyCollectibleDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsCollectiblesDestinyCollectibleDefinition} The populated <code>DestinyDefinitionsCollectiblesDestinyCollectibleDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsCollectiblesDestinyCollectibleDefinition();

            if (data.hasOwnProperty('acquisitionInfo')) {
                obj['acquisitionInfo'] = DestinyDefinitionsCollectiblesDestinyCollectibleAcquisitionBlock.constructFromObject(data['acquisitionInfo']);
            }
            if (data.hasOwnProperty('displayProperties')) {
                obj['displayProperties'] = DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.constructFromObject(data['displayProperties']);
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'Number');
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('itemHash')) {
                obj['itemHash'] = ApiClient.convertToType(data['itemHash'], 'Number');
            }
            if (data.hasOwnProperty('parentNodeHashes')) {
                obj['parentNodeHashes'] = ApiClient.convertToType(data['parentNodeHashes'], ['Number']);
            }
            if (data.hasOwnProperty('presentationInfo')) {
                obj['presentationInfo'] = DestinyDefinitionsPresentationDestinyPresentationChildBlock.constructFromObject(data['presentationInfo']);
            }
            if (data.hasOwnProperty('presentationNodeType')) {
                obj['presentationNodeType'] = ApiClient.convertToType(data['presentationNodeType'], 'Number');
            }
            if (data.hasOwnProperty('redacted')) {
                obj['redacted'] = ApiClient.convertToType(data['redacted'], 'Boolean');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'Number');
            }
            if (data.hasOwnProperty('sourceHash')) {
                obj['sourceHash'] = ApiClient.convertToType(data['sourceHash'], 'Number');
            }
            if (data.hasOwnProperty('sourceString')) {
                obj['sourceString'] = ApiClient.convertToType(data['sourceString'], 'String');
            }
            if (data.hasOwnProperty('stateInfo')) {
                obj['stateInfo'] = DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock.constructFromObject(data['stateInfo']);
            }
            if (data.hasOwnProperty('traitHashes')) {
                obj['traitHashes'] = ApiClient.convertToType(data['traitHashes'], ['Number']);
            }
            if (data.hasOwnProperty('traitIds')) {
                obj['traitIds'] = ApiClient.convertToType(data['traitIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsCollectiblesDestinyCollectibleDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsCollectiblesDestinyCollectibleDefinition</code>.
     */
    static validateJSON(data) {
        // validate the optional field `acquisitionInfo`
        if (data['acquisitionInfo']) { // data not null
          DestinyDefinitionsCollectiblesDestinyCollectibleAcquisitionBlock.validateJSON(data['acquisitionInfo']);
        }
        // validate the optional field `displayProperties`
        if (data['displayProperties']) { // data not null
          DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJSON(data['displayProperties']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['parentNodeHashes'])) {
            throw new Error("Expected the field `parentNodeHashes` to be an array in the JSON data but got " + data['parentNodeHashes']);
        }
        // validate the optional field `presentationInfo`
        if (data['presentationInfo']) { // data not null
          DestinyDefinitionsPresentationDestinyPresentationChildBlock.validateJSON(data['presentationInfo']);
        }
        // ensure the json data is a string
        if (data['sourceString'] && !(typeof data['sourceString'] === 'string' || data['sourceString'] instanceof String)) {
            throw new Error("Expected the field `sourceString` to be a primitive type in the JSON string but got " + data['sourceString']);
        }
        // validate the optional field `stateInfo`
        if (data['stateInfo']) { // data not null
          DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock.validateJSON(data['stateInfo']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['traitHashes'])) {
            throw new Error("Expected the field `traitHashes` to be an array in the JSON data but got " + data['traitHashes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['traitIds'])) {
            throw new Error("Expected the field `traitIds` to be an array in the JSON data but got " + data['traitIds']);
        }

        return true;
    }


}



/**
 * @member {module:model/DestinyDefinitionsCollectiblesDestinyCollectibleAcquisitionBlock} acquisitionInfo
 */
DestinyDefinitionsCollectiblesDestinyCollectibleDefinition.prototype['acquisitionInfo'] = undefined;

/**
 * @member {module:model/DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition} displayProperties
 */
DestinyDefinitionsCollectiblesDestinyCollectibleDefinition.prototype['displayProperties'] = undefined;

/**
 * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
 * @member {Number} hash
 */
DestinyDefinitionsCollectiblesDestinyCollectibleDefinition.prototype['hash'] = undefined;

/**
 * The index of the entity as it was found in the investment tables.
 * @member {Number} index
 */
DestinyDefinitionsCollectiblesDestinyCollectibleDefinition.prototype['index'] = undefined;

/**
 * @member {Number} itemHash
 */
DestinyDefinitionsCollectiblesDestinyCollectibleDefinition.prototype['itemHash'] = undefined;

/**
 * A quick reference to presentation nodes that have this node as a child. Presentation nodes can be parented under multiple parents.
 * @member {Array.<Number>} parentNodeHashes
 */
DestinyDefinitionsCollectiblesDestinyCollectibleDefinition.prototype['parentNodeHashes'] = undefined;

/**
 * @member {module:model/DestinyDefinitionsPresentationDestinyPresentationChildBlock} presentationInfo
 */
DestinyDefinitionsCollectiblesDestinyCollectibleDefinition.prototype['presentationInfo'] = undefined;

/**
 * @member {Number} presentationNodeType
 */
DestinyDefinitionsCollectiblesDestinyCollectibleDefinition.prototype['presentationNodeType'] = undefined;

/**
 * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
 * @member {Boolean} redacted
 */
DestinyDefinitionsCollectiblesDestinyCollectibleDefinition.prototype['redacted'] = undefined;

/**
 * Indicates whether the state of this Collectible is determined on a per-character or on an account-wide basis.
 * @member {Number} scope
 */
DestinyDefinitionsCollectiblesDestinyCollectibleDefinition.prototype['scope'] = undefined;

/**
 * This is a hash identifier we are building on the BNet side in an attempt to let people group collectibles by similar sources.  I can't promise that it's going to be 100% accurate, but if the designers were consistent in assigning the same source strings to items with the same sources, it *ought to* be. No promises though.  This hash also doesn't relate to an actual definition, just to note: we've got nothing useful other than the source string for this data.
 * @member {Number} sourceHash
 */
DestinyDefinitionsCollectiblesDestinyCollectibleDefinition.prototype['sourceHash'] = undefined;

/**
 * A human readable string for a hint about how to acquire the item.
 * @member {String} sourceString
 */
DestinyDefinitionsCollectiblesDestinyCollectibleDefinition.prototype['sourceString'] = undefined;

/**
 * @member {module:model/DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock} stateInfo
 */
DestinyDefinitionsCollectiblesDestinyCollectibleDefinition.prototype['stateInfo'] = undefined;

/**
 * @member {Array.<Number>} traitHashes
 */
DestinyDefinitionsCollectiblesDestinyCollectibleDefinition.prototype['traitHashes'] = undefined;

/**
 * @member {Array.<String>} traitIds
 */
DestinyDefinitionsCollectiblesDestinyCollectibleDefinition.prototype['traitIds'] = undefined;






export default DestinyDefinitionsCollectiblesDestinyCollectibleDefinition;

