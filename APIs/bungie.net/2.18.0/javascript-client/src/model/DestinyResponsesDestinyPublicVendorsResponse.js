/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DictionaryComponentResponseOfuint32AndDestinyPublicVendorComponent from './DictionaryComponentResponseOfuint32AndDestinyPublicVendorComponent';
import DictionaryComponentResponseOfuint32AndDestinyVendorCategoriesComponent from './DictionaryComponentResponseOfuint32AndDestinyVendorCategoriesComponent';
import DictionaryComponentResponseOfuint32AndPublicDestinyVendorSaleItemSetComponent from './DictionaryComponentResponseOfuint32AndPublicDestinyVendorSaleItemSetComponent';
import SingleComponentResponseOfDestinyStringVariablesComponent from './SingleComponentResponseOfDestinyStringVariablesComponent';
import SingleComponentResponseOfDestinyVendorGroupComponent from './SingleComponentResponseOfDestinyVendorGroupComponent';

/**
 * The DestinyResponsesDestinyPublicVendorsResponse model module.
 * @module model/DestinyResponsesDestinyPublicVendorsResponse
 * @version 2.18.0
 */
class DestinyResponsesDestinyPublicVendorsResponse {
    /**
     * Constructs a new <code>DestinyResponsesDestinyPublicVendorsResponse</code>.
     * A response containing all valid components for the public Vendors endpoint.   It is a decisively smaller subset of data compared to what we can get when we know the specific user making the request.   If you want any of the other data - item details, whether or not you can buy it, etc... you&#39;ll have to call in the context of a character. I know, sad but true.
     * @alias module:model/DestinyResponsesDestinyPublicVendorsResponse
     */
    constructor() { 
        
        DestinyResponsesDestinyPublicVendorsResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyResponsesDestinyPublicVendorsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyResponsesDestinyPublicVendorsResponse} obj Optional instance to populate.
     * @return {module:model/DestinyResponsesDestinyPublicVendorsResponse} The populated <code>DestinyResponsesDestinyPublicVendorsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyResponsesDestinyPublicVendorsResponse();

            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], DictionaryComponentResponseOfuint32AndDestinyVendorCategoriesComponent);
            }
            if (data.hasOwnProperty('sales')) {
                obj['sales'] = ApiClient.convertToType(data['sales'], DictionaryComponentResponseOfuint32AndPublicDestinyVendorSaleItemSetComponent);
            }
            if (data.hasOwnProperty('stringVariables')) {
                obj['stringVariables'] = ApiClient.convertToType(data['stringVariables'], SingleComponentResponseOfDestinyStringVariablesComponent);
            }
            if (data.hasOwnProperty('vendorGroups')) {
                obj['vendorGroups'] = ApiClient.convertToType(data['vendorGroups'], SingleComponentResponseOfDestinyVendorGroupComponent);
            }
            if (data.hasOwnProperty('vendors')) {
                obj['vendors'] = ApiClient.convertToType(data['vendors'], DictionaryComponentResponseOfuint32AndDestinyPublicVendorComponent);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyResponsesDestinyPublicVendorsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyResponsesDestinyPublicVendorsResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `categories`
        if (data['categories']) { // data not null
          DictionaryComponentResponseOfuint32AndDestinyVendorCategoriesComponent.validateJSON(data['categories']);
        }
        // validate the optional field `sales`
        if (data['sales']) { // data not null
          DictionaryComponentResponseOfuint32AndPublicDestinyVendorSaleItemSetComponent.validateJSON(data['sales']);
        }
        // validate the optional field `stringVariables`
        if (data['stringVariables']) { // data not null
          SingleComponentResponseOfDestinyStringVariablesComponent.validateJSON(data['stringVariables']);
        }
        // validate the optional field `vendorGroups`
        if (data['vendorGroups']) { // data not null
          SingleComponentResponseOfDestinyVendorGroupComponent.validateJSON(data['vendorGroups']);
        }
        // validate the optional field `vendors`
        if (data['vendors']) { // data not null
          DictionaryComponentResponseOfuint32AndDestinyPublicVendorComponent.validateJSON(data['vendors']);
        }

        return true;
    }


}



/**
 * Categories that the vendor has available, and references to the sales therein. These are keyed by the Vendor Hash, so you will get one Categories Component per vendor returned.  COMPONENT TYPE: VendorCategories
 * @member {module:model/DictionaryComponentResponseOfuint32AndDestinyVendorCategoriesComponent} categories
 */
DestinyResponsesDestinyPublicVendorsResponse.prototype['categories'] = undefined;

/**
 * Sales, keyed by the vendorItemIndex of the item being sold. These are keyed by the Vendor Hash, so you will get one Sale Item Set Component per vendor returned.  Note that within the Sale Item Set component, the sales are themselves keyed by the vendorSaleIndex, so you can relate it to the corrent sale item definition within the Vendor's definition.  COMPONENT TYPE: VendorSales
 * @member {module:model/DictionaryComponentResponseOfuint32AndPublicDestinyVendorSaleItemSetComponent} sales
 */
DestinyResponsesDestinyPublicVendorsResponse.prototype['sales'] = undefined;

/**
 * A set of string variable values by hash for a public vendors context.  COMPONENT TYPE: StringVariables
 * @member {module:model/SingleComponentResponseOfDestinyStringVariablesComponent} stringVariables
 */
DestinyResponsesDestinyPublicVendorsResponse.prototype['stringVariables'] = undefined;

/**
 * For Vendors being returned, this will give you the information you need to group them and order them in the same way that the Bungie Companion app performs grouping. It will automatically be returned if you request the Vendors component.  COMPONENT TYPE: Vendors
 * @member {module:model/SingleComponentResponseOfDestinyVendorGroupComponent} vendorGroups
 */
DestinyResponsesDestinyPublicVendorsResponse.prototype['vendorGroups'] = undefined;

/**
 * The base properties of the vendor. These are keyed by the Vendor Hash, so you will get one Vendor Component per vendor returned.  COMPONENT TYPE: Vendors
 * @member {module:model/DictionaryComponentResponseOfuint32AndDestinyPublicVendorComponent} vendors
 */
DestinyResponsesDestinyPublicVendorsResponse.prototype['vendors'] = undefined;






export default DestinyResponsesDestinyPublicVendorsResponse;

