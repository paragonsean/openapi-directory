/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDestinyStat from './DestinyDestinyStat';
import DestinyEntitiesItemsDestinyItemInstanceEnergy from './DestinyEntitiesItemsDestinyItemInstanceEnergy';

/**
 * The DestinyEntitiesItemsDestinyItemInstanceComponent model module.
 * @module model/DestinyEntitiesItemsDestinyItemInstanceComponent
 * @version 2.18.0
 */
class DestinyEntitiesItemsDestinyItemInstanceComponent {
    /**
     * Constructs a new <code>DestinyEntitiesItemsDestinyItemInstanceComponent</code>.
     * If an item is \&quot;instanced\&quot;, this will contain information about the item&#39;s instance that doesn&#39;t fit easily into other components. One might say this is the \&quot;essential\&quot; instance data for the item.  Items are instanced if they require information or state that can vary. For instance, weapons are Instanced: they are given a unique identifier, uniquely generated stats, and can have their properties altered. Non-instanced items have none of these things: for instance, Glimmer has no unique properties aside from how much of it you own.  You can tell from an item&#39;s definition whether it will be instanced or not by looking at the DestinyInventoryItemDefinition&#39;s definition.inventory.isInstanceItem property.
     * @alias module:model/DestinyEntitiesItemsDestinyItemInstanceComponent
     */
    constructor() { 
        
        DestinyEntitiesItemsDestinyItemInstanceComponent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyEntitiesItemsDestinyItemInstanceComponent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyEntitiesItemsDestinyItemInstanceComponent} obj Optional instance to populate.
     * @return {module:model/DestinyEntitiesItemsDestinyItemInstanceComponent} The populated <code>DestinyEntitiesItemsDestinyItemInstanceComponent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyEntitiesItemsDestinyItemInstanceComponent();

            if (data.hasOwnProperty('breakerType')) {
                obj['breakerType'] = ApiClient.convertToType(data['breakerType'], 'Number');
            }
            if (data.hasOwnProperty('breakerTypeHash')) {
                obj['breakerTypeHash'] = ApiClient.convertToType(data['breakerTypeHash'], 'Number');
            }
            if (data.hasOwnProperty('canEquip')) {
                obj['canEquip'] = ApiClient.convertToType(data['canEquip'], 'Boolean');
            }
            if (data.hasOwnProperty('cannotEquipReason')) {
                obj['cannotEquipReason'] = ApiClient.convertToType(data['cannotEquipReason'], 'Number');
            }
            if (data.hasOwnProperty('damageType')) {
                obj['damageType'] = ApiClient.convertToType(data['damageType'], 'Number');
            }
            if (data.hasOwnProperty('damageTypeHash')) {
                obj['damageTypeHash'] = ApiClient.convertToType(data['damageTypeHash'], 'Number');
            }
            if (data.hasOwnProperty('energy')) {
                obj['energy'] = ApiClient.convertToType(data['energy'], DestinyEntitiesItemsDestinyItemInstanceEnergy);
            }
            if (data.hasOwnProperty('equipRequiredLevel')) {
                obj['equipRequiredLevel'] = ApiClient.convertToType(data['equipRequiredLevel'], 'Number');
            }
            if (data.hasOwnProperty('isEquipped')) {
                obj['isEquipped'] = ApiClient.convertToType(data['isEquipped'], 'Boolean');
            }
            if (data.hasOwnProperty('itemLevel')) {
                obj['itemLevel'] = ApiClient.convertToType(data['itemLevel'], 'Number');
            }
            if (data.hasOwnProperty('primaryStat')) {
                obj['primaryStat'] = ApiClient.convertToType(data['primaryStat'], DestinyDestinyStat);
            }
            if (data.hasOwnProperty('quality')) {
                obj['quality'] = ApiClient.convertToType(data['quality'], 'Number');
            }
            if (data.hasOwnProperty('unlockHashesRequiredToEquip')) {
                obj['unlockHashesRequiredToEquip'] = ApiClient.convertToType(data['unlockHashesRequiredToEquip'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyEntitiesItemsDestinyItemInstanceComponent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyEntitiesItemsDestinyItemInstanceComponent</code>.
     */
    static validateJSON(data) {
        // validate the optional field `energy`
        if (data['energy']) { // data not null
          DestinyEntitiesItemsDestinyItemInstanceEnergy.validateJSON(data['energy']);
        }
        // validate the optional field `primaryStat`
        if (data['primaryStat']) { // data not null
          DestinyDestinyStat.validateJSON(data['primaryStat']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['unlockHashesRequiredToEquip'])) {
            throw new Error("Expected the field `unlockHashesRequiredToEquip` to be an array in the JSON data but got " + data['unlockHashesRequiredToEquip']);
        }

        return true;
    }


}



/**
 * If populated, this item has a breaker type corresponding to the given value. See DestinyBreakerTypeDefinition for more details.
 * @member {module:model/DestinyEntitiesItemsDestinyItemInstanceComponent.BreakerTypeEnum} breakerType
 */
DestinyEntitiesItemsDestinyItemInstanceComponent.prototype['breakerType'] = undefined;

/**
 * If populated, this is the hash identifier for the item's breaker type. See DestinyBreakerTypeDefinition for more details.
 * @member {Number} breakerTypeHash
 */
DestinyEntitiesItemsDestinyItemInstanceComponent.prototype['breakerTypeHash'] = undefined;

/**
 * If this is an equippable item, you can check it here. There are permanent as well as transitory reasons why an item might not be able to be equipped: check cannotEquipReason for details.
 * @member {Boolean} canEquip
 */
DestinyEntitiesItemsDestinyItemInstanceComponent.prototype['canEquip'] = undefined;

/**
 * If you cannot equip the item, this is a flags enum that enumerates all of the reasons why you couldn't equip the item. You may need to refine your UI further by using unlockHashesRequiredToEquip and equipRequiredLevel.
 * @member {Number} cannotEquipReason
 */
DestinyEntitiesItemsDestinyItemInstanceComponent.prototype['cannotEquipReason'] = undefined;

/**
 * If the item has a damage type, this is the item's current damage type.
 * @member {Number} damageType
 */
DestinyEntitiesItemsDestinyItemInstanceComponent.prototype['damageType'] = undefined;

/**
 * The current damage type's hash, so you can look up localized info and icons for it.
 * @member {Number} damageTypeHash
 */
DestinyEntitiesItemsDestinyItemInstanceComponent.prototype['damageTypeHash'] = undefined;

/**
 * IF populated, this item supports Energy mechanics (i.e. Armor 2.0), and these are the current details of its energy type and available capacity to spend energy points.
 * @member {module:model/DestinyEntitiesItemsDestinyItemInstanceEnergy} energy
 */
DestinyEntitiesItemsDestinyItemInstanceComponent.prototype['energy'] = undefined;

/**
 * If the item cannot be equipped until you reach a certain level, that level will be reflected here.
 * @member {Number} equipRequiredLevel
 */
DestinyEntitiesItemsDestinyItemInstanceComponent.prototype['equipRequiredLevel'] = undefined;

/**
 * Is the item currently equipped on the given character?
 * @member {Boolean} isEquipped
 */
DestinyEntitiesItemsDestinyItemInstanceComponent.prototype['isEquipped'] = undefined;

/**
 * The Item's \"Level\" has the most significant bearing on its stats, such as Light and Power.
 * @member {Number} itemLevel
 */
DestinyEntitiesItemsDestinyItemInstanceComponent.prototype['itemLevel'] = undefined;

/**
 * The item stat that we consider to be \"primary\" for the item. For instance, this would be \"Attack\" for Weapons or \"Defense\" for armor.
 * @member {module:model/DestinyDestinyStat} primaryStat
 */
DestinyEntitiesItemsDestinyItemInstanceComponent.prototype['primaryStat'] = undefined;

/**
 * The \"Quality\" of the item has a lesser - but still impactful - bearing on stats like Light and Power.
 * @member {Number} quality
 */
DestinyEntitiesItemsDestinyItemInstanceComponent.prototype['quality'] = undefined;

/**
 * Sometimes, there are limitations to equipping that are represented by character-level flags called \"unlocks\".  This is a list of flags that they need in order to equip the item that the character has not met. Use these to look up the descriptions to show in your UI by looking up the relevant DestinyUnlockDefinitions for the hashes.
 * @member {Array.<Number>} unlockHashesRequiredToEquip
 */
DestinyEntitiesItemsDestinyItemInstanceComponent.prototype['unlockHashesRequiredToEquip'] = undefined;





/**
 * Allowed values for the <code>breakerType</code> property.
 * @enum {Number}
 * @readonly
 */
DestinyEntitiesItemsDestinyItemInstanceComponent['BreakerTypeEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2,

    /**
     * value: 3
     * @const
     */
    "3": 3
};



export default DestinyEntitiesItemsDestinyItemInstanceComponent;

