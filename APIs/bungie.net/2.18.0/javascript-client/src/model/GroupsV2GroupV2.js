/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GroupsV2GroupFeatures from './GroupsV2GroupFeatures';
import GroupsV2GroupV2ClanInfoAndInvestment from './GroupsV2GroupV2ClanInfoAndInvestment';

/**
 * The GroupsV2GroupV2 model module.
 * @module model/GroupsV2GroupV2
 * @version 2.18.0
 */
class GroupsV2GroupV2 {
    /**
     * Constructs a new <code>GroupsV2GroupV2</code>.
     * @alias module:model/GroupsV2GroupV2
     */
    constructor() { 
        
        GroupsV2GroupV2.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GroupsV2GroupV2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GroupsV2GroupV2} obj Optional instance to populate.
     * @return {module:model/GroupsV2GroupV2} The populated <code>GroupsV2GroupV2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GroupsV2GroupV2();

            if (data.hasOwnProperty('about')) {
                obj['about'] = ApiClient.convertToType(data['about'], 'String');
            }
            if (data.hasOwnProperty('allowChat')) {
                obj['allowChat'] = ApiClient.convertToType(data['allowChat'], 'Boolean');
            }
            if (data.hasOwnProperty('avatarImageIndex')) {
                obj['avatarImageIndex'] = ApiClient.convertToType(data['avatarImageIndex'], 'Number');
            }
            if (data.hasOwnProperty('avatarPath')) {
                obj['avatarPath'] = ApiClient.convertToType(data['avatarPath'], 'String');
            }
            if (data.hasOwnProperty('banExpireDate')) {
                obj['banExpireDate'] = ApiClient.convertToType(data['banExpireDate'], 'Date');
            }
            if (data.hasOwnProperty('bannerPath')) {
                obj['bannerPath'] = ApiClient.convertToType(data['bannerPath'], 'String');
            }
            if (data.hasOwnProperty('chatSecurity')) {
                obj['chatSecurity'] = ApiClient.convertToType(data['chatSecurity'], 'Number');
            }
            if (data.hasOwnProperty('clanInfo')) {
                obj['clanInfo'] = GroupsV2GroupV2ClanInfoAndInvestment.constructFromObject(data['clanInfo']);
            }
            if (data.hasOwnProperty('conversationId')) {
                obj['conversationId'] = ApiClient.convertToType(data['conversationId'], 'Number');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('defaultPublicity')) {
                obj['defaultPublicity'] = ApiClient.convertToType(data['defaultPublicity'], 'Number');
            }
            if (data.hasOwnProperty('enableInvitationMessagingForAdmins')) {
                obj['enableInvitationMessagingForAdmins'] = ApiClient.convertToType(data['enableInvitationMessagingForAdmins'], 'Boolean');
            }
            if (data.hasOwnProperty('features')) {
                obj['features'] = GroupsV2GroupFeatures.constructFromObject(data['features']);
            }
            if (data.hasOwnProperty('groupId')) {
                obj['groupId'] = ApiClient.convertToType(data['groupId'], 'Number');
            }
            if (data.hasOwnProperty('groupType')) {
                obj['groupType'] = ApiClient.convertToType(data['groupType'], 'Number');
            }
            if (data.hasOwnProperty('homepage')) {
                obj['homepage'] = ApiClient.convertToType(data['homepage'], 'Number');
            }
            if (data.hasOwnProperty('isDefaultPostPublic')) {
                obj['isDefaultPostPublic'] = ApiClient.convertToType(data['isDefaultPostPublic'], 'Boolean');
            }
            if (data.hasOwnProperty('isPublic')) {
                obj['isPublic'] = ApiClient.convertToType(data['isPublic'], 'Boolean');
            }
            if (data.hasOwnProperty('isPublicTopicAdminOnly')) {
                obj['isPublicTopicAdminOnly'] = ApiClient.convertToType(data['isPublicTopicAdminOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('memberCount')) {
                obj['memberCount'] = ApiClient.convertToType(data['memberCount'], 'Number');
            }
            if (data.hasOwnProperty('membershipIdCreated')) {
                obj['membershipIdCreated'] = ApiClient.convertToType(data['membershipIdCreated'], 'Number');
            }
            if (data.hasOwnProperty('membershipOption')) {
                obj['membershipOption'] = ApiClient.convertToType(data['membershipOption'], 'Number');
            }
            if (data.hasOwnProperty('modificationDate')) {
                obj['modificationDate'] = ApiClient.convertToType(data['modificationDate'], 'Date');
            }
            if (data.hasOwnProperty('motto')) {
                obj['motto'] = ApiClient.convertToType(data['motto'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('theme')) {
                obj['theme'] = ApiClient.convertToType(data['theme'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GroupsV2GroupV2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GroupsV2GroupV2</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['about'] && !(typeof data['about'] === 'string' || data['about'] instanceof String)) {
            throw new Error("Expected the field `about` to be a primitive type in the JSON string but got " + data['about']);
        }
        // ensure the json data is a string
        if (data['avatarPath'] && !(typeof data['avatarPath'] === 'string' || data['avatarPath'] instanceof String)) {
            throw new Error("Expected the field `avatarPath` to be a primitive type in the JSON string but got " + data['avatarPath']);
        }
        // ensure the json data is a string
        if (data['bannerPath'] && !(typeof data['bannerPath'] === 'string' || data['bannerPath'] instanceof String)) {
            throw new Error("Expected the field `bannerPath` to be a primitive type in the JSON string but got " + data['bannerPath']);
        }
        // validate the optional field `clanInfo`
        if (data['clanInfo']) { // data not null
          GroupsV2GroupV2ClanInfoAndInvestment.validateJSON(data['clanInfo']);
        }
        // validate the optional field `features`
        if (data['features']) { // data not null
          GroupsV2GroupFeatures.validateJSON(data['features']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['motto'] && !(typeof data['motto'] === 'string' || data['motto'] instanceof String)) {
            throw new Error("Expected the field `motto` to be a primitive type in the JSON string but got " + data['motto']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['theme'] && !(typeof data['theme'] === 'string' || data['theme'] instanceof String)) {
            throw new Error("Expected the field `theme` to be a primitive type in the JSON string but got " + data['theme']);
        }

        return true;
    }


}



/**
 * @member {String} about
 */
GroupsV2GroupV2.prototype['about'] = undefined;

/**
 * @member {Boolean} allowChat
 */
GroupsV2GroupV2.prototype['allowChat'] = undefined;

/**
 * @member {Number} avatarImageIndex
 */
GroupsV2GroupV2.prototype['avatarImageIndex'] = undefined;

/**
 * @member {String} avatarPath
 */
GroupsV2GroupV2.prototype['avatarPath'] = undefined;

/**
 * @member {Date} banExpireDate
 */
GroupsV2GroupV2.prototype['banExpireDate'] = undefined;

/**
 * @member {String} bannerPath
 */
GroupsV2GroupV2.prototype['bannerPath'] = undefined;

/**
 * @member {Number} chatSecurity
 */
GroupsV2GroupV2.prototype['chatSecurity'] = undefined;

/**
 * @member {module:model/GroupsV2GroupV2ClanInfoAndInvestment} clanInfo
 */
GroupsV2GroupV2.prototype['clanInfo'] = undefined;

/**
 * @member {Number} conversationId
 */
GroupsV2GroupV2.prototype['conversationId'] = undefined;

/**
 * @member {Date} creationDate
 */
GroupsV2GroupV2.prototype['creationDate'] = undefined;

/**
 * @member {Number} defaultPublicity
 */
GroupsV2GroupV2.prototype['defaultPublicity'] = undefined;

/**
 * @member {Boolean} enableInvitationMessagingForAdmins
 */
GroupsV2GroupV2.prototype['enableInvitationMessagingForAdmins'] = undefined;

/**
 * @member {module:model/GroupsV2GroupFeatures} features
 */
GroupsV2GroupV2.prototype['features'] = undefined;

/**
 * @member {Number} groupId
 */
GroupsV2GroupV2.prototype['groupId'] = undefined;

/**
 * @member {Number} groupType
 */
GroupsV2GroupV2.prototype['groupType'] = undefined;

/**
 * @member {Number} homepage
 */
GroupsV2GroupV2.prototype['homepage'] = undefined;

/**
 * @member {Boolean} isDefaultPostPublic
 */
GroupsV2GroupV2.prototype['isDefaultPostPublic'] = undefined;

/**
 * @member {Boolean} isPublic
 */
GroupsV2GroupV2.prototype['isPublic'] = undefined;

/**
 * @member {Boolean} isPublicTopicAdminOnly
 */
GroupsV2GroupV2.prototype['isPublicTopicAdminOnly'] = undefined;

/**
 * @member {String} locale
 */
GroupsV2GroupV2.prototype['locale'] = undefined;

/**
 * @member {Number} memberCount
 */
GroupsV2GroupV2.prototype['memberCount'] = undefined;

/**
 * @member {Number} membershipIdCreated
 */
GroupsV2GroupV2.prototype['membershipIdCreated'] = undefined;

/**
 * @member {Number} membershipOption
 */
GroupsV2GroupV2.prototype['membershipOption'] = undefined;

/**
 * @member {Date} modificationDate
 */
GroupsV2GroupV2.prototype['modificationDate'] = undefined;

/**
 * @member {String} motto
 */
GroupsV2GroupV2.prototype['motto'] = undefined;

/**
 * @member {String} name
 */
GroupsV2GroupV2.prototype['name'] = undefined;

/**
 * @member {Array.<String>} tags
 */
GroupsV2GroupV2.prototype['tags'] = undefined;

/**
 * @member {String} theme
 */
GroupsV2GroupV2.prototype['theme'] = undefined;






export default GroupsV2GroupV2;

