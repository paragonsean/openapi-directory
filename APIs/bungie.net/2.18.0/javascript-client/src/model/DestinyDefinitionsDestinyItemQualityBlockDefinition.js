/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDefinitionsDestinyItemVersionDefinition from './DestinyDefinitionsDestinyItemVersionDefinition';

/**
 * The DestinyDefinitionsDestinyItemQualityBlockDefinition model module.
 * @module model/DestinyDefinitionsDestinyItemQualityBlockDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsDestinyItemQualityBlockDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsDestinyItemQualityBlockDefinition</code>.
     * An item&#39;s \&quot;Quality\&quot; determines its calculated stats. The Level at which the item spawns is combined with its \&quot;qualityLevel\&quot; along with some additional calculations to determine the value of those stats.  In Destiny 2, most items don&#39;t have default item levels and quality, making this property less useful: these apparently are almost always determined by the complex mechanisms of the Reward system rather than statically. They are still provided here in case they are still useful for people. This also contains some information about Infusion.
     * @alias module:model/DestinyDefinitionsDestinyItemQualityBlockDefinition
     */
    constructor() { 
        
        DestinyDefinitionsDestinyItemQualityBlockDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsDestinyItemQualityBlockDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsDestinyItemQualityBlockDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsDestinyItemQualityBlockDefinition} The populated <code>DestinyDefinitionsDestinyItemQualityBlockDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsDestinyItemQualityBlockDefinition();

            if (data.hasOwnProperty('currentVersion')) {
                obj['currentVersion'] = ApiClient.convertToType(data['currentVersion'], 'Number');
            }
            if (data.hasOwnProperty('displayVersionWatermarkIcons')) {
                obj['displayVersionWatermarkIcons'] = ApiClient.convertToType(data['displayVersionWatermarkIcons'], ['String']);
            }
            if (data.hasOwnProperty('infusionCategoryHash')) {
                obj['infusionCategoryHash'] = ApiClient.convertToType(data['infusionCategoryHash'], 'Number');
            }
            if (data.hasOwnProperty('infusionCategoryHashes')) {
                obj['infusionCategoryHashes'] = ApiClient.convertToType(data['infusionCategoryHashes'], ['Number']);
            }
            if (data.hasOwnProperty('infusionCategoryName')) {
                obj['infusionCategoryName'] = ApiClient.convertToType(data['infusionCategoryName'], 'String');
            }
            if (data.hasOwnProperty('itemLevels')) {
                obj['itemLevels'] = ApiClient.convertToType(data['itemLevels'], ['Number']);
            }
            if (data.hasOwnProperty('progressionLevelRequirementHash')) {
                obj['progressionLevelRequirementHash'] = ApiClient.convertToType(data['progressionLevelRequirementHash'], 'Number');
            }
            if (data.hasOwnProperty('qualityLevel')) {
                obj['qualityLevel'] = ApiClient.convertToType(data['qualityLevel'], 'Number');
            }
            if (data.hasOwnProperty('versions')) {
                obj['versions'] = ApiClient.convertToType(data['versions'], [DestinyDefinitionsDestinyItemVersionDefinition]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsDestinyItemQualityBlockDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsDestinyItemQualityBlockDefinition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['displayVersionWatermarkIcons'])) {
            throw new Error("Expected the field `displayVersionWatermarkIcons` to be an array in the JSON data but got " + data['displayVersionWatermarkIcons']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['infusionCategoryHashes'])) {
            throw new Error("Expected the field `infusionCategoryHashes` to be an array in the JSON data but got " + data['infusionCategoryHashes']);
        }
        // ensure the json data is a string
        if (data['infusionCategoryName'] && !(typeof data['infusionCategoryName'] === 'string' || data['infusionCategoryName'] instanceof String)) {
            throw new Error("Expected the field `infusionCategoryName` to be a primitive type in the JSON string but got " + data['infusionCategoryName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['itemLevels'])) {
            throw new Error("Expected the field `itemLevels` to be an array in the JSON data but got " + data['itemLevels']);
        }
        if (data['versions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['versions'])) {
                throw new Error("Expected the field `versions` to be an array in the JSON data but got " + data['versions']);
            }
            // validate the optional field `versions` (array)
            for (const item of data['versions']) {
                DestinyDefinitionsDestinyItemVersionDefinition.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The latest version available for this item.
 * @member {Number} currentVersion
 */
DestinyDefinitionsDestinyItemQualityBlockDefinition.prototype['currentVersion'] = undefined;

/**
 * Icon overlays to denote the item version and power cap status.
 * @member {Array.<String>} displayVersionWatermarkIcons
 */
DestinyDefinitionsDestinyItemQualityBlockDefinition.prototype['displayVersionWatermarkIcons'] = undefined;

/**
 * The hash identifier for the infusion. It does not map to a Definition entity.  DEPRECATED: Items can now have multiple infusion categories. Please use infusionCategoryHashes instead.
 * @member {Number} infusionCategoryHash
 */
DestinyDefinitionsDestinyItemQualityBlockDefinition.prototype['infusionCategoryHash'] = undefined;

/**
 * If any one of these hashes matches any value in another item's infusionCategoryHashes, the two can infuse with each other.
 * @member {Array.<Number>} infusionCategoryHashes
 */
DestinyDefinitionsDestinyItemQualityBlockDefinition.prototype['infusionCategoryHashes'] = undefined;

/**
 * The string identifier for this item's \"infusability\", if any.   Items that match the same infusionCategoryName are allowed to infuse with each other.  DEPRECATED: Items can now have multiple infusion categories. Please use infusionCategoryHashes instead.
 * @member {String} infusionCategoryName
 */
DestinyDefinitionsDestinyItemQualityBlockDefinition.prototype['infusionCategoryName'] = undefined;

/**
 * The \"base\" defined level of an item. This is a list because, in theory, each Expansion could define its own base level for an item.  In practice, not only was that never done in Destiny 1, but now this isn't even populated at all. When it's not populated, the level at which it spawns has to be inferred by Reward information, of which BNet receives an imperfect view and will only be reliable on instanced data as a result.
 * @member {Array.<Number>} itemLevels
 */
DestinyDefinitionsDestinyItemQualityBlockDefinition.prototype['itemLevels'] = undefined;

/**
 * An item can refer to pre-set level requirements. They are defined in DestinyProgressionLevelRequirementDefinition, and you can use this hash to find the appropriate definition.
 * @member {Number} progressionLevelRequirementHash
 */
DestinyDefinitionsDestinyItemQualityBlockDefinition.prototype['progressionLevelRequirementHash'] = undefined;

/**
 * qualityLevel is used in combination with the item's level to calculate stats like Attack and Defense. It plays a role in that calculation, but not nearly as large as itemLevel does.
 * @member {Number} qualityLevel
 */
DestinyDefinitionsDestinyItemQualityBlockDefinition.prototype['qualityLevel'] = undefined;

/**
 * The list of versions available for this item.
 * @member {Array.<module:model/DestinyDefinitionsDestinyItemVersionDefinition>} versions
 */
DestinyDefinitionsDestinyItemQualityBlockDefinition.prototype['versions'] = undefined;






export default DestinyDefinitionsDestinyItemQualityBlockDefinition;

