/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition from './DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition';
import DestinyDefinitionsDestinyTalentNodeStepGroups from './DestinyDefinitionsDestinyTalentNodeStepGroups';

/**
 * The DestinyDefinitionsDestinySandboxPerkDefinition model module.
 * @module model/DestinyDefinitionsDestinySandboxPerkDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsDestinySandboxPerkDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsDestinySandboxPerkDefinition</code>.
     * Perks are modifiers to a character or item that can be applied situationally.  - Perks determine a weapons&#39; damage type.  - Perks put the Mods in Modifiers (they are literally the entity that bestows the Sandbox benefit for whatever fluff text about the modifier in the Socket, Plug or Talent Node)  - Perks are applied for unique alterations of state in Objectives  Anyways, I&#39;m sure you can see why perks are so interesting.  What Perks often don&#39;t have is human readable information, so we attempt to reverse engineer that by pulling that data from places that uniquely refer to these perks: namely, Talent Nodes and Plugs. That only gives us a subset of perks that are human readable, but those perks are the ones people generally care about anyways. The others are left as a mystery, their true purpose mostly unknown and undocumented.
     * @alias module:model/DestinyDefinitionsDestinySandboxPerkDefinition
     */
    constructor() { 
        
        DestinyDefinitionsDestinySandboxPerkDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsDestinySandboxPerkDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsDestinySandboxPerkDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsDestinySandboxPerkDefinition} The populated <code>DestinyDefinitionsDestinySandboxPerkDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsDestinySandboxPerkDefinition();

            if (data.hasOwnProperty('damageType')) {
                obj['damageType'] = ApiClient.convertToType(data['damageType'], 'Number');
            }
            if (data.hasOwnProperty('damageTypeHash')) {
                obj['damageTypeHash'] = ApiClient.convertToType(data['damageTypeHash'], 'Number');
            }
            if (data.hasOwnProperty('displayProperties')) {
                obj['displayProperties'] = ApiClient.convertToType(data['displayProperties'], DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition);
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'Number');
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('isDisplayable')) {
                obj['isDisplayable'] = ApiClient.convertToType(data['isDisplayable'], 'Boolean');
            }
            if (data.hasOwnProperty('perkGroups')) {
                obj['perkGroups'] = ApiClient.convertToType(data['perkGroups'], DestinyDefinitionsDestinyTalentNodeStepGroups);
            }
            if (data.hasOwnProperty('perkIdentifier')) {
                obj['perkIdentifier'] = ApiClient.convertToType(data['perkIdentifier'], 'String');
            }
            if (data.hasOwnProperty('redacted')) {
                obj['redacted'] = ApiClient.convertToType(data['redacted'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsDestinySandboxPerkDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsDestinySandboxPerkDefinition</code>.
     */
    static validateJSON(data) {
        // validate the optional field `displayProperties`
        if (data['displayProperties']) { // data not null
          DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJSON(data['displayProperties']);
        }
        // validate the optional field `perkGroups`
        if (data['perkGroups']) { // data not null
          DestinyDefinitionsDestinyTalentNodeStepGroups.validateJSON(data['perkGroups']);
        }
        // ensure the json data is a string
        if (data['perkIdentifier'] && !(typeof data['perkIdentifier'] === 'string' || data['perkIdentifier'] instanceof String)) {
            throw new Error("Expected the field `perkIdentifier` to be a primitive type in the JSON string but got " + data['perkIdentifier']);
        }

        return true;
    }


}



/**
 * If this perk grants a damage type to a weapon, the damage type will be defined here.  Unless you have a compelling reason to use this enum value, use the damageTypeHash instead to look up the actual DestinyDamageTypeDefinition.
 * @member {Number} damageType
 */
DestinyDefinitionsDestinySandboxPerkDefinition.prototype['damageType'] = undefined;

/**
 * The hash identifier for looking up the DestinyDamageTypeDefinition, if this perk has a damage type.  This is preferred over using the damageType enumeration value, which has been left purely because it is occasionally convenient.
 * @member {Number} damageTypeHash
 */
DestinyDefinitionsDestinySandboxPerkDefinition.prototype['damageTypeHash'] = undefined;

/**
 * These display properties are by no means guaranteed to be populated. Usually when it is, it's only because we back-filled them with the displayProperties of some Talent Node or Plug item that happened to be uniquely providing that perk.
 * @member {module:model/DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition} displayProperties
 */
DestinyDefinitionsDestinySandboxPerkDefinition.prototype['displayProperties'] = undefined;

/**
 * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
 * @member {Number} hash
 */
DestinyDefinitionsDestinySandboxPerkDefinition.prototype['hash'] = undefined;

/**
 * The index of the entity as it was found in the investment tables.
 * @member {Number} index
 */
DestinyDefinitionsDestinySandboxPerkDefinition.prototype['index'] = undefined;

/**
 * If true, you can actually show the perk in the UI. Otherwise, it doesn't have useful player-facing information.
 * @member {Boolean} isDisplayable
 */
DestinyDefinitionsDestinySandboxPerkDefinition.prototype['isDisplayable'] = undefined;

/**
 * An old holdover from the original Armory, this was an attempt to group perks by functionality.  It is as yet unpopulated, and there will be quite a bit of work needed to restore it to its former working order.
 * @member {module:model/DestinyDefinitionsDestinyTalentNodeStepGroups} perkGroups
 */
DestinyDefinitionsDestinySandboxPerkDefinition.prototype['perkGroups'] = undefined;

/**
 * The string identifier for the perk.
 * @member {String} perkIdentifier
 */
DestinyDefinitionsDestinySandboxPerkDefinition.prototype['perkIdentifier'] = undefined;

/**
 * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
 * @member {Boolean} redacted
 */
DestinyDefinitionsDestinySandboxPerkDefinition.prototype['redacted'] = undefined;






export default DestinyDefinitionsDestinySandboxPerkDefinition;

