/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDefinitionsDestinyVendorCategoryOverlayDefinition from './DestinyDefinitionsDestinyVendorCategoryOverlayDefinition';

/**
 * The DestinyDefinitionsDestinyVendorCategoryEntryDefinition model module.
 * @module model/DestinyDefinitionsDestinyVendorCategoryEntryDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsDestinyVendorCategoryEntryDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsDestinyVendorCategoryEntryDefinition</code>.
     * This is the definition for a single Vendor Category, into which Sale Items are grouped.
     * @alias module:model/DestinyDefinitionsDestinyVendorCategoryEntryDefinition
     */
    constructor() { 
        
        DestinyDefinitionsDestinyVendorCategoryEntryDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsDestinyVendorCategoryEntryDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsDestinyVendorCategoryEntryDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsDestinyVendorCategoryEntryDefinition} The populated <code>DestinyDefinitionsDestinyVendorCategoryEntryDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsDestinyVendorCategoryEntryDefinition();

            if (data.hasOwnProperty('buyStringOverride')) {
                obj['buyStringOverride'] = ApiClient.convertToType(data['buyStringOverride'], 'String');
            }
            if (data.hasOwnProperty('categoryHash')) {
                obj['categoryHash'] = ApiClient.convertToType(data['categoryHash'], 'Number');
            }
            if (data.hasOwnProperty('categoryIndex')) {
                obj['categoryIndex'] = ApiClient.convertToType(data['categoryIndex'], 'Number');
            }
            if (data.hasOwnProperty('disabledDescription')) {
                obj['disabledDescription'] = ApiClient.convertToType(data['disabledDescription'], 'String');
            }
            if (data.hasOwnProperty('displayTitle')) {
                obj['displayTitle'] = ApiClient.convertToType(data['displayTitle'], 'String');
            }
            if (data.hasOwnProperty('hideFromRegularPurchase')) {
                obj['hideFromRegularPurchase'] = ApiClient.convertToType(data['hideFromRegularPurchase'], 'Boolean');
            }
            if (data.hasOwnProperty('hideIfNoCurrency')) {
                obj['hideIfNoCurrency'] = ApiClient.convertToType(data['hideIfNoCurrency'], 'Boolean');
            }
            if (data.hasOwnProperty('isDisplayOnly')) {
                obj['isDisplayOnly'] = ApiClient.convertToType(data['isDisplayOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('isPreview')) {
                obj['isPreview'] = ApiClient.convertToType(data['isPreview'], 'Boolean');
            }
            if (data.hasOwnProperty('overlay')) {
                obj['overlay'] = ApiClient.convertToType(data['overlay'], DestinyDefinitionsDestinyVendorCategoryOverlayDefinition);
            }
            if (data.hasOwnProperty('quantityAvailable')) {
                obj['quantityAvailable'] = ApiClient.convertToType(data['quantityAvailable'], 'Number');
            }
            if (data.hasOwnProperty('resetIntervalMinutesOverride')) {
                obj['resetIntervalMinutesOverride'] = ApiClient.convertToType(data['resetIntervalMinutesOverride'], 'Number');
            }
            if (data.hasOwnProperty('resetOffsetMinutesOverride')) {
                obj['resetOffsetMinutesOverride'] = ApiClient.convertToType(data['resetOffsetMinutesOverride'], 'Number');
            }
            if (data.hasOwnProperty('showUnavailableItems')) {
                obj['showUnavailableItems'] = ApiClient.convertToType(data['showUnavailableItems'], 'Boolean');
            }
            if (data.hasOwnProperty('sortValue')) {
                obj['sortValue'] = ApiClient.convertToType(data['sortValue'], 'Number');
            }
            if (data.hasOwnProperty('vendorItemIndexes')) {
                obj['vendorItemIndexes'] = ApiClient.convertToType(data['vendorItemIndexes'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsDestinyVendorCategoryEntryDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsDestinyVendorCategoryEntryDefinition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['buyStringOverride'] && !(typeof data['buyStringOverride'] === 'string' || data['buyStringOverride'] instanceof String)) {
            throw new Error("Expected the field `buyStringOverride` to be a primitive type in the JSON string but got " + data['buyStringOverride']);
        }
        // ensure the json data is a string
        if (data['disabledDescription'] && !(typeof data['disabledDescription'] === 'string' || data['disabledDescription'] instanceof String)) {
            throw new Error("Expected the field `disabledDescription` to be a primitive type in the JSON string but got " + data['disabledDescription']);
        }
        // ensure the json data is a string
        if (data['displayTitle'] && !(typeof data['displayTitle'] === 'string' || data['displayTitle'] instanceof String)) {
            throw new Error("Expected the field `displayTitle` to be a primitive type in the JSON string but got " + data['displayTitle']);
        }
        // validate the optional field `overlay`
        if (data['overlay']) { // data not null
          DestinyDefinitionsDestinyVendorCategoryOverlayDefinition.validateJSON(data['overlay']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['vendorItemIndexes'])) {
            throw new Error("Expected the field `vendorItemIndexes` to be an array in the JSON data but got " + data['vendorItemIndexes']);
        }

        return true;
    }


}



/**
 * The localized string for making purchases from this category, if it is different from the vendor's string for purchasing.
 * @member {String} buyStringOverride
 */
DestinyDefinitionsDestinyVendorCategoryEntryDefinition.prototype['buyStringOverride'] = undefined;

/**
 * The hashed identifier for the category.
 * @member {Number} categoryHash
 */
DestinyDefinitionsDestinyVendorCategoryEntryDefinition.prototype['categoryHash'] = undefined;

/**
 * The index of the category in the original category definitions for the vendor.
 * @member {Number} categoryIndex
 */
DestinyDefinitionsDestinyVendorCategoryEntryDefinition.prototype['categoryIndex'] = undefined;

/**
 * If the category is disabled, this is the localized description to show.
 * @member {String} disabledDescription
 */
DestinyDefinitionsDestinyVendorCategoryEntryDefinition.prototype['disabledDescription'] = undefined;

/**
 * The localized title of the category.
 * @member {String} displayTitle
 */
DestinyDefinitionsDestinyVendorCategoryEntryDefinition.prototype['displayTitle'] = undefined;

/**
 * True if this category doesn't allow purchases.
 * @member {Boolean} hideFromRegularPurchase
 */
DestinyDefinitionsDestinyVendorCategoryEntryDefinition.prototype['hideFromRegularPurchase'] = undefined;

/**
 * If you don't have the currency required to buy items from this category, should the items be hidden?
 * @member {Boolean} hideIfNoCurrency
 */
DestinyDefinitionsDestinyVendorCategoryEntryDefinition.prototype['hideIfNoCurrency'] = undefined;

/**
 * If true, this category only displays items: you can't purchase anything in them.
 * @member {Boolean} isDisplayOnly
 */
DestinyDefinitionsDestinyVendorCategoryEntryDefinition.prototype['isDisplayOnly'] = undefined;

/**
 * Sometimes a category isn't actually used to sell items, but rather to preview them. This implies different UI (and manual placement of the category in the UI) in the game, and special treatment.
 * @member {Boolean} isPreview
 */
DestinyDefinitionsDestinyVendorCategoryEntryDefinition.prototype['isPreview'] = undefined;

/**
 * If this category has an overlay prompt that should appear, this contains the details of that prompt.
 * @member {module:model/DestinyDefinitionsDestinyVendorCategoryOverlayDefinition} overlay
 */
DestinyDefinitionsDestinyVendorCategoryEntryDefinition.prototype['overlay'] = undefined;

/**
 * The amount of items that will be available when this category is shown.
 * @member {Number} quantityAvailable
 */
DestinyDefinitionsDestinyVendorCategoryEntryDefinition.prototype['quantityAvailable'] = undefined;

/**
 * @member {Number} resetIntervalMinutesOverride
 */
DestinyDefinitionsDestinyVendorCategoryEntryDefinition.prototype['resetIntervalMinutesOverride'] = undefined;

/**
 * @member {Number} resetOffsetMinutesOverride
 */
DestinyDefinitionsDestinyVendorCategoryEntryDefinition.prototype['resetOffsetMinutesOverride'] = undefined;

/**
 * If items aren't up for sale in this category, should we still show them (greyed out)?
 * @member {Boolean} showUnavailableItems
 */
DestinyDefinitionsDestinyVendorCategoryEntryDefinition.prototype['showUnavailableItems'] = undefined;

/**
 * Used in sorting items in vendors... but there's a lot more to it. Just go with the order provided in the itemIndexes property on the DestinyVendorCategoryComponent instead, it should be more reliable than trying to recalculate it yourself.
 * @member {Number} sortValue
 */
DestinyDefinitionsDestinyVendorCategoryEntryDefinition.prototype['sortValue'] = undefined;

/**
 * A shortcut for the vendor item indexes sold under this category. Saves us from some expensive reorganization at runtime.
 * @member {Array.<Number>} vendorItemIndexes
 */
DestinyDefinitionsDestinyVendorCategoryEntryDefinition.prototype['vendorItemIndexes'] = undefined;






export default DestinyDefinitionsDestinyVendorCategoryEntryDefinition;

