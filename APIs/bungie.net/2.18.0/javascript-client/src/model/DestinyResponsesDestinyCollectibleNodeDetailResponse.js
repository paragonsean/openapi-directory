/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyItemComponentSetOfuint32 from './DestinyItemComponentSetOfuint32';
import SingleComponentResponseOfDestinyCollectiblesComponent from './SingleComponentResponseOfDestinyCollectiblesComponent';

/**
 * The DestinyResponsesDestinyCollectibleNodeDetailResponse model module.
 * @module model/DestinyResponsesDestinyCollectibleNodeDetailResponse
 * @version 2.18.0
 */
class DestinyResponsesDestinyCollectibleNodeDetailResponse {
    /**
     * Constructs a new <code>DestinyResponsesDestinyCollectibleNodeDetailResponse</code>.
     * Returns the detailed information about a Collectible Presentation Node and any Collectibles that are direct descendants.
     * @alias module:model/DestinyResponsesDestinyCollectibleNodeDetailResponse
     */
    constructor() { 
        
        DestinyResponsesDestinyCollectibleNodeDetailResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyResponsesDestinyCollectibleNodeDetailResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyResponsesDestinyCollectibleNodeDetailResponse} obj Optional instance to populate.
     * @return {module:model/DestinyResponsesDestinyCollectibleNodeDetailResponse} The populated <code>DestinyResponsesDestinyCollectibleNodeDetailResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyResponsesDestinyCollectibleNodeDetailResponse();

            if (data.hasOwnProperty('collectibleItemComponents')) {
                obj['collectibleItemComponents'] = ApiClient.convertToType(data['collectibleItemComponents'], DestinyItemComponentSetOfuint32);
            }
            if (data.hasOwnProperty('collectibles')) {
                obj['collectibles'] = ApiClient.convertToType(data['collectibles'], SingleComponentResponseOfDestinyCollectiblesComponent);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyResponsesDestinyCollectibleNodeDetailResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyResponsesDestinyCollectibleNodeDetailResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `collectibleItemComponents`
        if (data['collectibleItemComponents']) { // data not null
          DestinyItemComponentSetOfuint32.validateJSON(data['collectibleItemComponents']);
        }
        // validate the optional field `collectibles`
        if (data['collectibles']) { // data not null
          SingleComponentResponseOfDestinyCollectiblesComponent.validateJSON(data['collectibles']);
        }

        return true;
    }


}



/**
 * Item components, keyed by the item hash of the items pointed at collectibles found under the requested Presentation Node.  NOTE: I had a lot of hemming and hawing about whether these should be keyed by collectible hash or item hash... but ultimately having it be keyed by item hash meant that UI that already uses DestinyItemComponentSet data wouldn't have to have a special override to do the collectible -> item lookup once you delve into an item's details, and it also meant that you didn't have to remember that the Hash being used as the key for plugSets was different from the Hash being used for the other Dictionaries. As a result, using the Item Hash felt like the least crappy solution.  We may all come to regret this decision. We will see.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
 * @member {module:model/DestinyItemComponentSetOfuint32} collectibleItemComponents
 */
DestinyResponsesDestinyCollectibleNodeDetailResponse.prototype['collectibleItemComponents'] = undefined;

/**
 * COMPONENT TYPE: Collectibles
 * @member {module:model/SingleComponentResponseOfDestinyCollectiblesComponent} collectibles
 */
DestinyResponsesDestinyCollectibleNodeDetailResponse.prototype['collectibles'] = undefined;






export default DestinyResponsesDestinyCollectibleNodeDetailResponse;

