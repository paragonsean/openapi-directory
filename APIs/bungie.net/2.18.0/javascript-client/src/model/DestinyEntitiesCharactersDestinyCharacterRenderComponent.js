/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyCharacterDestinyCharacterCustomization from './DestinyCharacterDestinyCharacterCustomization';
import DestinyCharacterDestinyCharacterPeerView from './DestinyCharacterDestinyCharacterPeerView';
import DestinyDyeReference from './DestinyDyeReference';

/**
 * The DestinyEntitiesCharactersDestinyCharacterRenderComponent model module.
 * @module model/DestinyEntitiesCharactersDestinyCharacterRenderComponent
 * @version 2.18.0
 */
class DestinyEntitiesCharactersDestinyCharacterRenderComponent {
    /**
     * Constructs a new <code>DestinyEntitiesCharactersDestinyCharacterRenderComponent</code>.
     * Only really useful if you&#39;re attempting to render the character&#39;s current appearance in 3D, this returns a bare minimum of information, pre-aggregated, that you&#39;ll need to perform that rendering. Note that you need to combine this with other 3D assets and data from our servers.  Examine the Javascript returned by https://bungie.net/sharedbundle/spasm to see how we use this data, but be warned: the rabbit hole goes pretty deep.
     * @alias module:model/DestinyEntitiesCharactersDestinyCharacterRenderComponent
     */
    constructor() { 
        
        DestinyEntitiesCharactersDestinyCharacterRenderComponent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyEntitiesCharactersDestinyCharacterRenderComponent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyEntitiesCharactersDestinyCharacterRenderComponent} obj Optional instance to populate.
     * @return {module:model/DestinyEntitiesCharactersDestinyCharacterRenderComponent} The populated <code>DestinyEntitiesCharactersDestinyCharacterRenderComponent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyEntitiesCharactersDestinyCharacterRenderComponent();

            if (data.hasOwnProperty('customDyes')) {
                obj['customDyes'] = ApiClient.convertToType(data['customDyes'], [DestinyDyeReference]);
            }
            if (data.hasOwnProperty('customization')) {
                obj['customization'] = ApiClient.convertToType(data['customization'], DestinyCharacterDestinyCharacterCustomization);
            }
            if (data.hasOwnProperty('peerView')) {
                obj['peerView'] = ApiClient.convertToType(data['peerView'], DestinyCharacterDestinyCharacterPeerView);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyEntitiesCharactersDestinyCharacterRenderComponent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyEntitiesCharactersDestinyCharacterRenderComponent</code>.
     */
    static validateJSON(data) {
        if (data['customDyes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customDyes'])) {
                throw new Error("Expected the field `customDyes` to be an array in the JSON data but got " + data['customDyes']);
            }
            // validate the optional field `customDyes` (array)
            for (const item of data['customDyes']) {
                DestinyDyeReference.validateJSON(item);
            };
        }
        // validate the optional field `customization`
        if (data['customization']) { // data not null
          DestinyCharacterDestinyCharacterCustomization.validateJSON(data['customization']);
        }
        // validate the optional field `peerView`
        if (data['peerView']) { // data not null
          DestinyCharacterDestinyCharacterPeerView.validateJSON(data['peerView']);
        }

        return true;
    }


}



/**
 * Custom dyes, calculated by iterating over the character's equipped items. Useful for pre-fetching all of the dye data needed from our server.
 * @member {Array.<module:model/DestinyDyeReference>} customDyes
 */
DestinyEntitiesCharactersDestinyCharacterRenderComponent.prototype['customDyes'] = undefined;

/**
 * This is actually something that Spasm.js *doesn't* do right now, and that we don't return assets for yet. This is the data about what character customization options you picked. You can combine this with DestinyCharacterCustomizationOptionDefinition to show some cool info, and hopefully someday to actually render a user's face in 3D. We'll see if we ever end up with time for that.
 * @member {module:model/DestinyCharacterDestinyCharacterCustomization} customization
 */
DestinyEntitiesCharactersDestinyCharacterRenderComponent.prototype['customization'] = undefined;

/**
 * A minimal view of:  - Equipped items  - The rendering-related custom options on those equipped items  Combined, that should be enough to render all of the items on the equipped character.
 * @member {module:model/DestinyCharacterDestinyCharacterPeerView} peerView
 */
DestinyEntitiesCharactersDestinyCharacterRenderComponent.prototype['peerView'] = undefined;






export default DestinyEntitiesCharactersDestinyCharacterRenderComponent;

