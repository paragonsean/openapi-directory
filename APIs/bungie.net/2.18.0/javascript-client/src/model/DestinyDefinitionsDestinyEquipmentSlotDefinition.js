/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition from './DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition';
import DestinyDefinitionsDestinyArtDyeReference from './DestinyDefinitionsDestinyArtDyeReference';

/**
 * The DestinyDefinitionsDestinyEquipmentSlotDefinition model module.
 * @module model/DestinyDefinitionsDestinyEquipmentSlotDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsDestinyEquipmentSlotDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsDestinyEquipmentSlotDefinition</code>.
     * Characters can not only have Inventory buckets (containers of items that are generally matched by their type or functionality), they can also have Equipment Slots.  The Equipment Slot is an indicator that the related bucket can have instanced items equipped on the character. For instance, the Primary Weapon bucket has an Equipment Slot that determines whether you can equip primary weapons, and holds the association between its slot and the inventory bucket from which it can have items equipped.  An Equipment Slot must have a related Inventory Bucket, but not all inventory buckets must have Equipment Slots.
     * @alias module:model/DestinyDefinitionsDestinyEquipmentSlotDefinition
     */
    constructor() { 
        
        DestinyDefinitionsDestinyEquipmentSlotDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsDestinyEquipmentSlotDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsDestinyEquipmentSlotDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsDestinyEquipmentSlotDefinition} The populated <code>DestinyDefinitionsDestinyEquipmentSlotDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsDestinyEquipmentSlotDefinition();

            if (data.hasOwnProperty('applyCustomArtDyes')) {
                obj['applyCustomArtDyes'] = ApiClient.convertToType(data['applyCustomArtDyes'], 'Boolean');
            }
            if (data.hasOwnProperty('artDyeChannels')) {
                obj['artDyeChannels'] = ApiClient.convertToType(data['artDyeChannels'], [DestinyDefinitionsDestinyArtDyeReference]);
            }
            if (data.hasOwnProperty('bucketTypeHash')) {
                obj['bucketTypeHash'] = ApiClient.convertToType(data['bucketTypeHash'], 'Number');
            }
            if (data.hasOwnProperty('displayProperties')) {
                obj['displayProperties'] = DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.constructFromObject(data['displayProperties']);
            }
            if (data.hasOwnProperty('equipmentCategoryHash')) {
                obj['equipmentCategoryHash'] = ApiClient.convertToType(data['equipmentCategoryHash'], 'Number');
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'Number');
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('redacted')) {
                obj['redacted'] = ApiClient.convertToType(data['redacted'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsDestinyEquipmentSlotDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsDestinyEquipmentSlotDefinition</code>.
     */
    static validateJSON(data) {
        if (data['artDyeChannels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['artDyeChannels'])) {
                throw new Error("Expected the field `artDyeChannels` to be an array in the JSON data but got " + data['artDyeChannels']);
            }
            // validate the optional field `artDyeChannels` (array)
            for (const item of data['artDyeChannels']) {
                DestinyDefinitionsDestinyArtDyeReference.validateJSON(item);
            };
        }
        // validate the optional field `displayProperties`
        if (data['displayProperties']) { // data not null
          DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJSON(data['displayProperties']);
        }

        return true;
    }


}



/**
 * If True, equipped items should have their custom art dyes applied when rendering the item. Otherwise, custom art dyes on an item should be ignored if the item is equipped in this slot.
 * @member {Boolean} applyCustomArtDyes
 */
DestinyDefinitionsDestinyEquipmentSlotDefinition.prototype['applyCustomArtDyes'] = undefined;

/**
 * The Art Dye Channels that apply to this equipment slot.
 * @member {Array.<module:model/DestinyDefinitionsDestinyArtDyeReference>} artDyeChannels
 */
DestinyDefinitionsDestinyEquipmentSlotDefinition.prototype['artDyeChannels'] = undefined;

/**
 * The inventory bucket that owns this equipment slot.
 * @member {Number} bucketTypeHash
 */
DestinyDefinitionsDestinyEquipmentSlotDefinition.prototype['bucketTypeHash'] = undefined;

/**
 * @member {module:model/DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition} displayProperties
 */
DestinyDefinitionsDestinyEquipmentSlotDefinition.prototype['displayProperties'] = undefined;

/**
 * These technically point to \"Equipment Category Definitions\". But don't get excited. There's nothing of significant value in those definitions, so I didn't bother to expose them. You can use the hash here to group equipment slots by common functionality, which serves the same purpose as if we had the Equipment Category definitions exposed.
 * @member {Number} equipmentCategoryHash
 */
DestinyDefinitionsDestinyEquipmentSlotDefinition.prototype['equipmentCategoryHash'] = undefined;

/**
 * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
 * @member {Number} hash
 */
DestinyDefinitionsDestinyEquipmentSlotDefinition.prototype['hash'] = undefined;

/**
 * The index of the entity as it was found in the investment tables.
 * @member {Number} index
 */
DestinyDefinitionsDestinyEquipmentSlotDefinition.prototype['index'] = undefined;

/**
 * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
 * @member {Boolean} redacted
 */
DestinyDefinitionsDestinyEquipmentSlotDefinition.prototype['redacted'] = undefined;






export default DestinyDefinitionsDestinyEquipmentSlotDefinition;

