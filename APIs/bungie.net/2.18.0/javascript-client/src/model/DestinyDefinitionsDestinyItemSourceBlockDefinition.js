/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDefinitionsDestinyItemVendorSourceReference from './DestinyDefinitionsDestinyItemVendorSourceReference';
import DestinyDefinitionsSourcesDestinyItemSourceDefinition from './DestinyDefinitionsSourcesDestinyItemSourceDefinition';

/**
 * The DestinyDefinitionsDestinyItemSourceBlockDefinition model module.
 * @module model/DestinyDefinitionsDestinyItemSourceBlockDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsDestinyItemSourceBlockDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsDestinyItemSourceBlockDefinition</code>.
     * Data about an item&#39;s \&quot;sources\&quot;: ways that the item can be obtained.
     * @alias module:model/DestinyDefinitionsDestinyItemSourceBlockDefinition
     */
    constructor() { 
        
        DestinyDefinitionsDestinyItemSourceBlockDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsDestinyItemSourceBlockDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsDestinyItemSourceBlockDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsDestinyItemSourceBlockDefinition} The populated <code>DestinyDefinitionsDestinyItemSourceBlockDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsDestinyItemSourceBlockDefinition();

            if (data.hasOwnProperty('exclusive')) {
                obj['exclusive'] = ApiClient.convertToType(data['exclusive'], 'Number');
            }
            if (data.hasOwnProperty('sourceHashes')) {
                obj['sourceHashes'] = ApiClient.convertToType(data['sourceHashes'], ['Number']);
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], [DestinyDefinitionsSourcesDestinyItemSourceDefinition]);
            }
            if (data.hasOwnProperty('vendorSources')) {
                obj['vendorSources'] = ApiClient.convertToType(data['vendorSources'], [DestinyDefinitionsDestinyItemVendorSourceReference]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsDestinyItemSourceBlockDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsDestinyItemSourceBlockDefinition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['sourceHashes'])) {
            throw new Error("Expected the field `sourceHashes` to be an array in the JSON data but got " + data['sourceHashes']);
        }
        if (data['sources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sources'])) {
                throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
            }
            // validate the optional field `sources` (array)
            for (const item of data['sources']) {
                DestinyDefinitionsSourcesDestinyItemSourceDefinition.validateJSON(item);
            };
        }
        if (data['vendorSources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vendorSources'])) {
                throw new Error("Expected the field `vendorSources` to be an array in the JSON data but got " + data['vendorSources']);
            }
            // validate the optional field `vendorSources` (array)
            for (const item of data['vendorSources']) {
                DestinyDefinitionsDestinyItemVendorSourceReference.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * If we found that this item is exclusive to a specific platform, this will be set to the BungieMembershipType enumeration that matches that platform.
 * @member {Number} exclusive
 */
DestinyDefinitionsDestinyItemSourceBlockDefinition.prototype['exclusive'] = undefined;

/**
 * The list of hash identifiers for Reward Sources that hint where the item can be found (DestinyRewardSourceDefinition).
 * @member {Array.<Number>} sourceHashes
 */
DestinyDefinitionsDestinyItemSourceBlockDefinition.prototype['sourceHashes'] = undefined;

/**
 * A collection of details about the stats that were computed for the ways we found that the item could be spawned.
 * @member {Array.<module:model/DestinyDefinitionsSourcesDestinyItemSourceDefinition>} sources
 */
DestinyDefinitionsDestinyItemSourceBlockDefinition.prototype['sources'] = undefined;

/**
 * A denormalized reference back to vendors that potentially sell this item.
 * @member {Array.<module:model/DestinyDefinitionsDestinyItemVendorSourceReference>} vendorSources
 */
DestinyDefinitionsDestinyItemSourceBlockDefinition.prototype['vendorSources'] = undefined;






export default DestinyDefinitionsDestinyItemSourceBlockDefinition;

