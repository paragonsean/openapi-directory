/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DestinyConstantsDestinyEnvironmentLocationMapping model module.
 * @module model/DestinyConstantsDestinyEnvironmentLocationMapping
 * @version 2.18.0
 */
class DestinyConstantsDestinyEnvironmentLocationMapping {
    /**
     * Constructs a new <code>DestinyConstantsDestinyEnvironmentLocationMapping</code>.
     * @alias module:model/DestinyConstantsDestinyEnvironmentLocationMapping
     */
    constructor() { 
        
        DestinyConstantsDestinyEnvironmentLocationMapping.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyConstantsDestinyEnvironmentLocationMapping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyConstantsDestinyEnvironmentLocationMapping} obj Optional instance to populate.
     * @return {module:model/DestinyConstantsDestinyEnvironmentLocationMapping} The populated <code>DestinyConstantsDestinyEnvironmentLocationMapping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyConstantsDestinyEnvironmentLocationMapping();

            if (data.hasOwnProperty('activationSource')) {
                obj['activationSource'] = ApiClient.convertToType(data['activationSource'], 'String');
            }
            if (data.hasOwnProperty('activityHash')) {
                obj['activityHash'] = ApiClient.convertToType(data['activityHash'], 'Number');
            }
            if (data.hasOwnProperty('itemHash')) {
                obj['itemHash'] = ApiClient.convertToType(data['itemHash'], 'Number');
            }
            if (data.hasOwnProperty('locationHash')) {
                obj['locationHash'] = ApiClient.convertToType(data['locationHash'], 'Number');
            }
            if (data.hasOwnProperty('objectiveHash')) {
                obj['objectiveHash'] = ApiClient.convertToType(data['objectiveHash'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyConstantsDestinyEnvironmentLocationMapping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyConstantsDestinyEnvironmentLocationMapping</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['activationSource'] && !(typeof data['activationSource'] === 'string' || data['activationSource'] instanceof String)) {
            throw new Error("Expected the field `activationSource` to be a primitive type in the JSON string but got " + data['activationSource']);
        }

        return true;
    }


}



/**
 * A hint that the UI uses to figure out how this location is activated by the player.
 * @member {String} activationSource
 */
DestinyConstantsDestinyEnvironmentLocationMapping.prototype['activationSource'] = undefined;

/**
 * If this is populated, this is the activity you have to be playing in order to see this location appear because of this mapping. (theoretically, a location can have multiple mappings, and some might require you to be in a specific activity when others don't)
 * @member {Number} activityHash
 */
DestinyConstantsDestinyEnvironmentLocationMapping.prototype['activityHash'] = undefined;

/**
 * If this is populated, it is the item that you must possess for this location to be active because of this mapping. (theoretically, a location can have multiple mappings, and some might require an item while others don't)
 * @member {Number} itemHash
 */
DestinyConstantsDestinyEnvironmentLocationMapping.prototype['itemHash'] = undefined;

/**
 * The location that is revealed on the director by this mapping.
 * @member {Number} locationHash
 */
DestinyConstantsDestinyEnvironmentLocationMapping.prototype['locationHash'] = undefined;

/**
 * If this is populated, this is an objective related to the location.
 * @member {Number} objectiveHash
 */
DestinyConstantsDestinyEnvironmentLocationMapping.prototype['objectiveHash'] = undefined;






export default DestinyConstantsDestinyEnvironmentLocationMapping;

