/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition from './DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition';

/**
 * The DestinyDefinitionsDestinyLocationReleaseDefinition model module.
 * @module model/DestinyDefinitionsDestinyLocationReleaseDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsDestinyLocationReleaseDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsDestinyLocationReleaseDefinition</code>.
     * A specific \&quot;spot\&quot; referred to by a location. Only one of these can be active at a time for a given Location.
     * @alias module:model/DestinyDefinitionsDestinyLocationReleaseDefinition
     */
    constructor() { 
        
        DestinyDefinitionsDestinyLocationReleaseDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsDestinyLocationReleaseDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsDestinyLocationReleaseDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsDestinyLocationReleaseDefinition} The populated <code>DestinyDefinitionsDestinyLocationReleaseDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsDestinyLocationReleaseDefinition();

            if (data.hasOwnProperty('activityBubbleName')) {
                obj['activityBubbleName'] = ApiClient.convertToType(data['activityBubbleName'], 'Number');
            }
            if (data.hasOwnProperty('activityGraphHash')) {
                obj['activityGraphHash'] = ApiClient.convertToType(data['activityGraphHash'], 'Number');
            }
            if (data.hasOwnProperty('activityGraphNodeHash')) {
                obj['activityGraphNodeHash'] = ApiClient.convertToType(data['activityGraphNodeHash'], 'Number');
            }
            if (data.hasOwnProperty('activityHash')) {
                obj['activityHash'] = ApiClient.convertToType(data['activityHash'], 'Number');
            }
            if (data.hasOwnProperty('activityPathBundle')) {
                obj['activityPathBundle'] = ApiClient.convertToType(data['activityPathBundle'], 'Number');
            }
            if (data.hasOwnProperty('activityPathDestination')) {
                obj['activityPathDestination'] = ApiClient.convertToType(data['activityPathDestination'], 'Number');
            }
            if (data.hasOwnProperty('destinationHash')) {
                obj['destinationHash'] = ApiClient.convertToType(data['destinationHash'], 'Number');
            }
            if (data.hasOwnProperty('displayProperties')) {
                obj['displayProperties'] = ApiClient.convertToType(data['displayProperties'], DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition);
            }
            if (data.hasOwnProperty('largeTransparentIcon')) {
                obj['largeTransparentIcon'] = ApiClient.convertToType(data['largeTransparentIcon'], 'String');
            }
            if (data.hasOwnProperty('mapIcon')) {
                obj['mapIcon'] = ApiClient.convertToType(data['mapIcon'], 'String');
            }
            if (data.hasOwnProperty('navPointType')) {
                obj['navPointType'] = ApiClient.convertToType(data['navPointType'], 'Number');
            }
            if (data.hasOwnProperty('smallTransparentIcon')) {
                obj['smallTransparentIcon'] = ApiClient.convertToType(data['smallTransparentIcon'], 'String');
            }
            if (data.hasOwnProperty('spawnPoint')) {
                obj['spawnPoint'] = ApiClient.convertToType(data['spawnPoint'], 'Number');
            }
            if (data.hasOwnProperty('worldPosition')) {
                obj['worldPosition'] = ApiClient.convertToType(data['worldPosition'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsDestinyLocationReleaseDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsDestinyLocationReleaseDefinition</code>.
     */
    static validateJSON(data) {
        // validate the optional field `displayProperties`
        if (data['displayProperties']) { // data not null
          DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJSON(data['displayProperties']);
        }
        // ensure the json data is a string
        if (data['largeTransparentIcon'] && !(typeof data['largeTransparentIcon'] === 'string' || data['largeTransparentIcon'] instanceof String)) {
            throw new Error("Expected the field `largeTransparentIcon` to be a primitive type in the JSON string but got " + data['largeTransparentIcon']);
        }
        // ensure the json data is a string
        if (data['mapIcon'] && !(typeof data['mapIcon'] === 'string' || data['mapIcon'] instanceof String)) {
            throw new Error("Expected the field `mapIcon` to be a primitive type in the JSON string but got " + data['mapIcon']);
        }
        // ensure the json data is a string
        if (data['smallTransparentIcon'] && !(typeof data['smallTransparentIcon'] === 'string' || data['smallTransparentIcon'] instanceof String)) {
            throw new Error("Expected the field `smallTransparentIcon` to be a primitive type in the JSON string but got " + data['smallTransparentIcon']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['worldPosition'])) {
            throw new Error("Expected the field `worldPosition` to be an array in the JSON data but got " + data['worldPosition']);
        }

        return true;
    }


}



/**
 * The Activity Bubble within the Destination. Look this up in the DestinyDestinationDefinition's bubbles and bubbleSettings properties.
 * @member {Number} activityBubbleName
 */
DestinyDefinitionsDestinyLocationReleaseDefinition.prototype['activityBubbleName'] = undefined;

/**
 * The Activity Graph being pointed to by this location.
 * @member {Number} activityGraphHash
 */
DestinyDefinitionsDestinyLocationReleaseDefinition.prototype['activityGraphHash'] = undefined;

/**
 * The Activity Graph Node being pointed to by this location. (Remember that Activity Graph Node hashes are only unique within an Activity Graph: so use the combination to find the node being spoken of)
 * @member {Number} activityGraphNodeHash
 */
DestinyDefinitionsDestinyLocationReleaseDefinition.prototype['activityGraphNodeHash'] = undefined;

/**
 * The Activity being pointed to by this location.
 * @member {Number} activityHash
 */
DestinyDefinitionsDestinyLocationReleaseDefinition.prototype['activityHash'] = undefined;

/**
 * If we had map information, this would tell us something cool about the path this location wants you to take. I wish we had map information.
 * @member {Number} activityPathBundle
 */
DestinyDefinitionsDestinyLocationReleaseDefinition.prototype['activityPathBundle'] = undefined;

/**
 * If we had map information, this would tell us about path information related to destination on the map. Sad. Maybe you can do something cool with it. Go to town man.
 * @member {Number} activityPathDestination
 */
DestinyDefinitionsDestinyLocationReleaseDefinition.prototype['activityPathDestination'] = undefined;

/**
 * The Destination being pointed to by this location.
 * @member {Number} destinationHash
 */
DestinyDefinitionsDestinyLocationReleaseDefinition.prototype['destinationHash'] = undefined;

/**
 * Sadly, these don't appear to be populated anymore (ever?)
 * @member {module:model/DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition} displayProperties
 */
DestinyDefinitionsDestinyLocationReleaseDefinition.prototype['displayProperties'] = undefined;

/**
 * @member {String} largeTransparentIcon
 */
DestinyDefinitionsDestinyLocationReleaseDefinition.prototype['largeTransparentIcon'] = undefined;

/**
 * @member {String} mapIcon
 */
DestinyDefinitionsDestinyLocationReleaseDefinition.prototype['mapIcon'] = undefined;

/**
 * The type of Nav Point that this represents. See the enumeration for more info.
 * @member {Number} navPointType
 */
DestinyDefinitionsDestinyLocationReleaseDefinition.prototype['navPointType'] = undefined;

/**
 * @member {String} smallTransparentIcon
 */
DestinyDefinitionsDestinyLocationReleaseDefinition.prototype['smallTransparentIcon'] = undefined;

/**
 * If we had map information, this spawnPoint would be interesting. But sadly, we don't have that info.
 * @member {Number} spawnPoint
 */
DestinyDefinitionsDestinyLocationReleaseDefinition.prototype['spawnPoint'] = undefined;

/**
 * Looks like it should be the position on the map, but sadly it does not look populated... yet?
 * @member {Array.<Number>} worldPosition
 */
DestinyDefinitionsDestinyLocationReleaseDefinition.prototype['worldPosition'] = undefined;






export default DestinyDefinitionsDestinyLocationReleaseDefinition;

