/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QueriesPagedQuery from './QueriesPagedQuery';

/**
 * The QueriesSearchResult model module.
 * @module model/QueriesSearchResult
 * @version 2.18.0
 */
class QueriesSearchResult {
    /**
     * Constructs a new <code>QueriesSearchResult</code>.
     * @alias module:model/QueriesSearchResult
     */
    constructor() { 
        
        QueriesSearchResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QueriesSearchResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueriesSearchResult} obj Optional instance to populate.
     * @return {module:model/QueriesSearchResult} The populated <code>QueriesSearchResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueriesSearchResult();

            if (data.hasOwnProperty('hasMore')) {
                obj['hasMore'] = ApiClient.convertToType(data['hasMore'], 'Boolean');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = QueriesPagedQuery.constructFromObject(data['query']);
            }
            if (data.hasOwnProperty('replacementContinuationToken')) {
                obj['replacementContinuationToken'] = ApiClient.convertToType(data['replacementContinuationToken'], 'String');
            }
            if (data.hasOwnProperty('totalResults')) {
                obj['totalResults'] = ApiClient.convertToType(data['totalResults'], 'Number');
            }
            if (data.hasOwnProperty('useTotalResults')) {
                obj['useTotalResults'] = ApiClient.convertToType(data['useTotalResults'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueriesSearchResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueriesSearchResult</code>.
     */
    static validateJSON(data) {
        // validate the optional field `query`
        if (data['query']) { // data not null
          QueriesPagedQuery.validateJSON(data['query']);
        }
        // ensure the json data is a string
        if (data['replacementContinuationToken'] && !(typeof data['replacementContinuationToken'] === 'string' || data['replacementContinuationToken'] instanceof String)) {
            throw new Error("Expected the field `replacementContinuationToken` to be a primitive type in the JSON string but got " + data['replacementContinuationToken']);
        }

        return true;
    }


}



/**
 * @member {Boolean} hasMore
 */
QueriesSearchResult.prototype['hasMore'] = undefined;

/**
 * @member {module:model/QueriesPagedQuery} query
 */
QueriesSearchResult.prototype['query'] = undefined;

/**
 * @member {String} replacementContinuationToken
 */
QueriesSearchResult.prototype['replacementContinuationToken'] = undefined;

/**
 * @member {Number} totalResults
 */
QueriesSearchResult.prototype['totalResults'] = undefined;

/**
 * If useTotalResults is true, then totalResults represents an accurate count.  If False, it does not, and may be estimated/only the size of the current page.  Either way, you should probably always only trust hasMore.  This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
 * @member {Boolean} useTotalResults
 */
QueriesSearchResult.prototype['useTotalResults'] = undefined;






export default QueriesSearchResult;

