/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDestinyItemQuantity from './DestinyDestinyItemQuantity';

/**
 * The DestinyDefinitionsDestinyProgressionStepDefinition model module.
 * @module model/DestinyDefinitionsDestinyProgressionStepDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsDestinyProgressionStepDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsDestinyProgressionStepDefinition</code>.
     * This defines a single Step in a progression (which roughly equates to a level. See DestinyProgressionDefinition for caveats).
     * @alias module:model/DestinyDefinitionsDestinyProgressionStepDefinition
     */
    constructor() { 
        
        DestinyDefinitionsDestinyProgressionStepDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsDestinyProgressionStepDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsDestinyProgressionStepDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsDestinyProgressionStepDefinition} The populated <code>DestinyDefinitionsDestinyProgressionStepDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsDestinyProgressionStepDefinition();

            if (data.hasOwnProperty('displayEffectType')) {
                obj['displayEffectType'] = ApiClient.convertToType(data['displayEffectType'], 'Number');
            }
            if (data.hasOwnProperty('icon')) {
                obj['icon'] = ApiClient.convertToType(data['icon'], 'String');
            }
            if (data.hasOwnProperty('progressTotal')) {
                obj['progressTotal'] = ApiClient.convertToType(data['progressTotal'], 'Number');
            }
            if (data.hasOwnProperty('rewardItems')) {
                obj['rewardItems'] = ApiClient.convertToType(data['rewardItems'], [DestinyDestinyItemQuantity]);
            }
            if (data.hasOwnProperty('stepName')) {
                obj['stepName'] = ApiClient.convertToType(data['stepName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsDestinyProgressionStepDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsDestinyProgressionStepDefinition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['icon'] && !(typeof data['icon'] === 'string' || data['icon'] instanceof String)) {
            throw new Error("Expected the field `icon` to be a primitive type in the JSON string but got " + data['icon']);
        }
        if (data['rewardItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rewardItems'])) {
                throw new Error("Expected the field `rewardItems` to be an array in the JSON data but got " + data['rewardItems']);
            }
            // validate the optional field `rewardItems` (array)
            for (const item of data['rewardItems']) {
                DestinyDestinyItemQuantity.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['stepName'] && !(typeof data['stepName'] === 'string' || data['stepName'] instanceof String)) {
            throw new Error("Expected the field `stepName` to be a primitive type in the JSON string but got " + data['stepName']);
        }

        return true;
    }


}



/**
 * This appears to be, when you \"level up\", whether a visual effect will display and on what entity. See DestinyProgressionStepDisplayEffect for slightly more info.
 * @member {Number} displayEffectType
 */
DestinyDefinitionsDestinyProgressionStepDefinition.prototype['displayEffectType'] = undefined;

/**
 * If this progression step has a specific icon related to it, this is the icon to show.
 * @member {String} icon
 */
DestinyDefinitionsDestinyProgressionStepDefinition.prototype['icon'] = undefined;

/**
 * The total amount of progression points/\"experience\" you will need to initially reach this step. If this is the last step and the progression is repeating indefinitely (DestinyProgressionDefinition.repeatLastStep), this will also be the progress needed to level it up further by repeating this step again.
 * @member {Number} progressTotal
 */
DestinyDefinitionsDestinyProgressionStepDefinition.prototype['progressTotal'] = undefined;

/**
 * A listing of items rewarded as a result of reaching this level.
 * @member {Array.<module:model/DestinyDestinyItemQuantity>} rewardItems
 */
DestinyDefinitionsDestinyProgressionStepDefinition.prototype['rewardItems'] = undefined;

/**
 * Very rarely, Progressions will have localized text describing the Level of the progression. This will be that localized text, if it exists. Otherwise, the standard appears to be to simply show the level numerically.
 * @member {String} stepName
 */
DestinyDefinitionsDestinyProgressionStepDefinition.prototype['stepName'] = undefined;






export default DestinyDefinitionsDestinyProgressionStepDefinition;

