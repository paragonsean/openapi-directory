/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinySocketsDestinyItemPlugBase from './DestinySocketsDestinyItemPlugBase';

/**
 * The DestinyComponentsItemsDestinyItemReusablePlugsComponent model module.
 * @module model/DestinyComponentsItemsDestinyItemReusablePlugsComponent
 * @version 2.18.0
 */
class DestinyComponentsItemsDestinyItemReusablePlugsComponent {
    /**
     * Constructs a new <code>DestinyComponentsItemsDestinyItemReusablePlugsComponent</code>.
     * @alias module:model/DestinyComponentsItemsDestinyItemReusablePlugsComponent
     */
    constructor() { 
        
        DestinyComponentsItemsDestinyItemReusablePlugsComponent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyComponentsItemsDestinyItemReusablePlugsComponent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyComponentsItemsDestinyItemReusablePlugsComponent} obj Optional instance to populate.
     * @return {module:model/DestinyComponentsItemsDestinyItemReusablePlugsComponent} The populated <code>DestinyComponentsItemsDestinyItemReusablePlugsComponent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyComponentsItemsDestinyItemReusablePlugsComponent();

            if (data.hasOwnProperty('plugs')) {
                obj['plugs'] = ApiClient.convertToType(data['plugs'], {'String': [DestinySocketsDestinyItemPlugBase]});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyComponentsItemsDestinyItemReusablePlugsComponent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyComponentsItemsDestinyItemReusablePlugsComponent</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * If the item supports reusable plugs, this is the list of plugs that are allowed to be used for the socket, and any relevant information about whether they are \"enabled\", whether they are allowed to be inserted, and any other information such as objectives.   A Reusable Plug is a plug that you can always insert into this socket as long as its insertion rules are passed, regardless of whether or not you have the plug in your inventory. An example of it failing an insertion rule would be if it has an Objective that needs to be completed before it can be inserted, and that objective hasn't been completed yet.   In practice, a socket will *either* have reusable plugs *or* it will allow for plugs in your inventory to be inserted. See DestinyInventoryItemDefinition.socket for more info.   KEY = The INDEX into the item's list of sockets. VALUE = The set of plugs for that socket.   If a socket doesn't have any reusable plugs defined at the item scope, there will be no entry for that socket.
 * @member {Object.<String, Array.<module:model/DestinySocketsDestinyItemPlugBase>>} plugs
 */
DestinyComponentsItemsDestinyItemReusablePlugsComponent.prototype['plugs'] = undefined;






export default DestinyComponentsItemsDestinyItemReusablePlugsComponent;

