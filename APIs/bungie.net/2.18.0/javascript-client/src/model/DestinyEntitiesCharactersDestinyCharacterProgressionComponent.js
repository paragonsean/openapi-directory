/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyArtifactsDestinyArtifactCharacterScoped from './DestinyArtifactsDestinyArtifactCharacterScoped';
import DestinyDestinyProgression from './DestinyDestinyProgression';
import DestinyEntitiesItemsDestinyItemPerksComponent from './DestinyEntitiesItemsDestinyItemPerksComponent';
import DestinyMilestonesDestinyMilestone from './DestinyMilestonesDestinyMilestone';
import DestinyProgressionDestinyFactionProgression from './DestinyProgressionDestinyFactionProgression';
import DestinyQuestsDestinyObjectiveProgress from './DestinyQuestsDestinyObjectiveProgress';
import DestinyQuestsDestinyQuestStatus from './DestinyQuestsDestinyQuestStatus';

/**
 * The DestinyEntitiesCharactersDestinyCharacterProgressionComponent model module.
 * @module model/DestinyEntitiesCharactersDestinyCharacterProgressionComponent
 * @version 2.18.0
 */
class DestinyEntitiesCharactersDestinyCharacterProgressionComponent {
    /**
     * Constructs a new <code>DestinyEntitiesCharactersDestinyCharacterProgressionComponent</code>.
     * This component returns anything that could be considered \&quot;Progression\&quot; on a user: data where the user is gaining levels, reputation, completions, rewards, etc...
     * @alias module:model/DestinyEntitiesCharactersDestinyCharacterProgressionComponent
     */
    constructor() { 
        
        DestinyEntitiesCharactersDestinyCharacterProgressionComponent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyEntitiesCharactersDestinyCharacterProgressionComponent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyEntitiesCharactersDestinyCharacterProgressionComponent} obj Optional instance to populate.
     * @return {module:model/DestinyEntitiesCharactersDestinyCharacterProgressionComponent} The populated <code>DestinyEntitiesCharactersDestinyCharacterProgressionComponent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyEntitiesCharactersDestinyCharacterProgressionComponent();

            if (data.hasOwnProperty('checklists')) {
                obj['checklists'] = ApiClient.convertToType(data['checklists'], {'String': {'String': 'Boolean'}});
            }
            if (data.hasOwnProperty('factions')) {
                obj['factions'] = ApiClient.convertToType(data['factions'], {'String': DestinyProgressionDestinyFactionProgression});
            }
            if (data.hasOwnProperty('milestones')) {
                obj['milestones'] = ApiClient.convertToType(data['milestones'], {'String': DestinyMilestonesDestinyMilestone});
            }
            if (data.hasOwnProperty('progressions')) {
                obj['progressions'] = ApiClient.convertToType(data['progressions'], {'String': DestinyDestinyProgression});
            }
            if (data.hasOwnProperty('quests')) {
                obj['quests'] = ApiClient.convertToType(data['quests'], [DestinyQuestsDestinyQuestStatus]);
            }
            if (data.hasOwnProperty('seasonalArtifact')) {
                obj['seasonalArtifact'] = ApiClient.convertToType(data['seasonalArtifact'], DestinyArtifactsDestinyArtifactCharacterScoped);
            }
            if (data.hasOwnProperty('uninstancedItemObjectives')) {
                obj['uninstancedItemObjectives'] = ApiClient.convertToType(data['uninstancedItemObjectives'], {'String': [DestinyQuestsDestinyObjectiveProgress]});
            }
            if (data.hasOwnProperty('uninstancedItemPerks')) {
                obj['uninstancedItemPerks'] = ApiClient.convertToType(data['uninstancedItemPerks'], {'String': DestinyEntitiesItemsDestinyItemPerksComponent});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyEntitiesCharactersDestinyCharacterProgressionComponent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyEntitiesCharactersDestinyCharacterProgressionComponent</code>.
     */
    static validateJSON(data) {
        if (data['quests']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['quests'])) {
                throw new Error("Expected the field `quests` to be an array in the JSON data but got " + data['quests']);
            }
            // validate the optional field `quests` (array)
            for (const item of data['quests']) {
                DestinyQuestsDestinyQuestStatus.validateJSON(item);
            };
        }
        // validate the optional field `seasonalArtifact`
        if (data['seasonalArtifact']) { // data not null
          DestinyArtifactsDestinyArtifactCharacterScoped.validateJSON(data['seasonalArtifact']);
        }

        return true;
    }


}



/**
 * The set of checklists that can be examined for this specific character, keyed by the hash identifier of the Checklist (DestinyChecklistDefinition)  For each checklist returned, its value is itself a Dictionary keyed by the checklist's hash identifier with the value being a boolean indicating if it's been discovered yet.
 * @member {Object.<String, Object.<String, Boolean>>} checklists
 */
DestinyEntitiesCharactersDestinyCharacterProgressionComponent.prototype['checklists'] = undefined;

/**
 * A dictionary of all known Factions, keyed by the Faction's hash. It contains data about this character's status with the faction.
 * @member {Object.<String, module:model/DestinyProgressionDestinyFactionProgression>} factions
 */
DestinyEntitiesCharactersDestinyCharacterProgressionComponent.prototype['factions'] = undefined;

/**
 * Milestones are related to the simple progressions shown in the game, but return additional and hopefully helpful information for users about the specifics of the Milestone's status.
 * @member {Object.<String, module:model/DestinyMilestonesDestinyMilestone>} milestones
 */
DestinyEntitiesCharactersDestinyCharacterProgressionComponent.prototype['milestones'] = undefined;

/**
 * A Dictionary of all known progressions for the Character, keyed by the Progression's hash.  Not all progressions have user-facing data, but those who do will have that data contained in the DestinyProgressionDefinition.
 * @member {Object.<String, module:model/DestinyDestinyProgression>} progressions
 */
DestinyEntitiesCharactersDestinyCharacterProgressionComponent.prototype['progressions'] = undefined;

/**
 * If the user has any active quests, the quests' statuses will be returned here.   Note that quests have been largely supplanted by Milestones, but that doesn't mean that they won't make a comeback independent of milestones at some point.   (Fun fact: quests came back as I feared they would, but we never looped back to populate this... I'm going to put that in the backlog.)
 * @member {Array.<module:model/DestinyQuestsDestinyQuestStatus>} quests
 */
DestinyEntitiesCharactersDestinyCharacterProgressionComponent.prototype['quests'] = undefined;

/**
 * Data related to your progress on the current season's artifact that can vary per character.
 * @member {module:model/DestinyArtifactsDestinyArtifactCharacterScoped} seasonalArtifact
 */
DestinyEntitiesCharactersDestinyCharacterProgressionComponent.prototype['seasonalArtifact'] = undefined;

/**
 * Sometimes, you have items in your inventory that don't have instances, but still have Objective information. This provides you that objective information for uninstanced items.   This dictionary is keyed by the item's hash: which you can use to look up the name and description for the overall task(s) implied by the objective. The value is the list of objectives for this item, and their statuses.
 * @member {Object.<String, Array.<module:model/DestinyQuestsDestinyObjectiveProgress>>} uninstancedItemObjectives
 */
DestinyEntitiesCharactersDestinyCharacterProgressionComponent.prototype['uninstancedItemObjectives'] = undefined;

/**
 * Sometimes, you have items in your inventory that don't have instances, but still have perks (for example: Trials passage cards). This gives you the perk information for uninstanced items.  This dictionary is keyed by item hash, which you can use to look up the corresponding item definition. The value is the list of perks states for the item.
 * @member {Object.<String, module:model/DestinyEntitiesItemsDestinyItemPerksComponent>} uninstancedItemPerks
 */
DestinyEntitiesCharactersDestinyCharacterProgressionComponent.prototype['uninstancedItemPerks'] = undefined;






export default DestinyEntitiesCharactersDestinyCharacterProgressionComponent;

