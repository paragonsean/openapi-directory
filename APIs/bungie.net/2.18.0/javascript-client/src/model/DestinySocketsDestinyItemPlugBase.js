/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DestinySocketsDestinyItemPlugBase model module.
 * @module model/DestinySocketsDestinyItemPlugBase
 * @version 2.18.0
 */
class DestinySocketsDestinyItemPlugBase {
    /**
     * Constructs a new <code>DestinySocketsDestinyItemPlugBase</code>.
     * @alias module:model/DestinySocketsDestinyItemPlugBase
     */
    constructor() { 
        
        DestinySocketsDestinyItemPlugBase.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinySocketsDestinyItemPlugBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinySocketsDestinyItemPlugBase} obj Optional instance to populate.
     * @return {module:model/DestinySocketsDestinyItemPlugBase} The populated <code>DestinySocketsDestinyItemPlugBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinySocketsDestinyItemPlugBase();

            if (data.hasOwnProperty('canInsert')) {
                obj['canInsert'] = ApiClient.convertToType(data['canInsert'], 'Boolean');
            }
            if (data.hasOwnProperty('enableFailIndexes')) {
                obj['enableFailIndexes'] = ApiClient.convertToType(data['enableFailIndexes'], ['Number']);
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('insertFailIndexes')) {
                obj['insertFailIndexes'] = ApiClient.convertToType(data['insertFailIndexes'], ['Number']);
            }
            if (data.hasOwnProperty('plugItemHash')) {
                obj['plugItemHash'] = ApiClient.convertToType(data['plugItemHash'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinySocketsDestinyItemPlugBase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinySocketsDestinyItemPlugBase</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['enableFailIndexes'])) {
            throw new Error("Expected the field `enableFailIndexes` to be an array in the JSON data but got " + data['enableFailIndexes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['insertFailIndexes'])) {
            throw new Error("Expected the field `insertFailIndexes` to be an array in the JSON data but got " + data['insertFailIndexes']);
        }

        return true;
    }


}



/**
 * If true, this plug has met all of its insertion requirements. Big if true.
 * @member {Boolean} canInsert
 */
DestinySocketsDestinyItemPlugBase.prototype['canInsert'] = undefined;

/**
 * If a plug is not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.  This list will be empty if the plug is enabled.
 * @member {Array.<Number>} enableFailIndexes
 */
DestinySocketsDestinyItemPlugBase.prototype['enableFailIndexes'] = undefined;

/**
 * If true, this plug will provide its benefits while inserted.
 * @member {Boolean} enabled
 */
DestinySocketsDestinyItemPlugBase.prototype['enabled'] = undefined;

/**
 * If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition's plug.insertionRules property, so you can show the reasons why it can't be inserted.  This list will be empty if the plug can be inserted.
 * @member {Array.<Number>} insertFailIndexes
 */
DestinySocketsDestinyItemPlugBase.prototype['insertFailIndexes'] = undefined;

/**
 * The hash identifier of the DestinyInventoryItemDefinition that represents this plug.
 * @member {Number} plugItemHash
 */
DestinySocketsDestinyItemPlugBase.prototype['plugItemHash'] = undefined;






export default DestinySocketsDestinyItemPlugBase;

