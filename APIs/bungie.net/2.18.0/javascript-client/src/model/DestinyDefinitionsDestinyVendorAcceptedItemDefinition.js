/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DestinyDefinitionsDestinyVendorAcceptedItemDefinition model module.
 * @module model/DestinyDefinitionsDestinyVendorAcceptedItemDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsDestinyVendorAcceptedItemDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsDestinyVendorAcceptedItemDefinition</code>.
     * If you ever wondered how the Vault works, here it is.  The Vault is merely a set of inventory buckets that exist on your Profile/Account level. When you transfer items in the Vault, the game is using the Vault Vendor&#39;s DestinyVendorAcceptedItemDefinitions to see where the appropriate destination bucket is for the source bucket from whence your item is moving. If it finds such an entry, it transfers the item to the other bucket.  The mechanics for Postmaster works similarly, which is also a vendor. All driven by Accepted Items.
     * @alias module:model/DestinyDefinitionsDestinyVendorAcceptedItemDefinition
     */
    constructor() { 
        
        DestinyDefinitionsDestinyVendorAcceptedItemDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsDestinyVendorAcceptedItemDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsDestinyVendorAcceptedItemDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsDestinyVendorAcceptedItemDefinition} The populated <code>DestinyDefinitionsDestinyVendorAcceptedItemDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsDestinyVendorAcceptedItemDefinition();

            if (data.hasOwnProperty('acceptedInventoryBucketHash')) {
                obj['acceptedInventoryBucketHash'] = ApiClient.convertToType(data['acceptedInventoryBucketHash'], 'Number');
            }
            if (data.hasOwnProperty('destinationInventoryBucketHash')) {
                obj['destinationInventoryBucketHash'] = ApiClient.convertToType(data['destinationInventoryBucketHash'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsDestinyVendorAcceptedItemDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsDestinyVendorAcceptedItemDefinition</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The \"source\" bucket for a transfer. When a user wants to transfer an item, the appropriate DestinyVendorDefinition's acceptedItems property is evaluated, looking for an entry where acceptedInventoryBucketHash matches the bucket that the item being transferred is currently located. If it exists, the item will be transferred into whatever bucket is defined by destinationInventoryBucketHash.
 * @member {Number} acceptedInventoryBucketHash
 */
DestinyDefinitionsDestinyVendorAcceptedItemDefinition.prototype['acceptedInventoryBucketHash'] = undefined;

/**
 * This is the bucket where the item being transferred will be put, given that it was being transferred *from* the bucket defined in acceptedInventoryBucketHash.
 * @member {Number} destinationInventoryBucketHash
 */
DestinyDefinitionsDestinyVendorAcceptedItemDefinition.prototype['destinationInventoryBucketHash'] = undefined;






export default DestinyDefinitionsDestinyVendorAcceptedItemDefinition;

