/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyQuestsDestinyObjectiveProgress from './DestinyQuestsDestinyObjectiveProgress';

/**
 * The DestinyComponentsKiosksDestinyKioskItem model module.
 * @module model/DestinyComponentsKiosksDestinyKioskItem
 * @version 2.18.0
 */
class DestinyComponentsKiosksDestinyKioskItem {
    /**
     * Constructs a new <code>DestinyComponentsKiosksDestinyKioskItem</code>.
     * @alias module:model/DestinyComponentsKiosksDestinyKioskItem
     */
    constructor() { 
        
        DestinyComponentsKiosksDestinyKioskItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyComponentsKiosksDestinyKioskItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyComponentsKiosksDestinyKioskItem} obj Optional instance to populate.
     * @return {module:model/DestinyComponentsKiosksDestinyKioskItem} The populated <code>DestinyComponentsKiosksDestinyKioskItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyComponentsKiosksDestinyKioskItem();

            if (data.hasOwnProperty('canAcquire')) {
                obj['canAcquire'] = ApiClient.convertToType(data['canAcquire'], 'Boolean');
            }
            if (data.hasOwnProperty('failureIndexes')) {
                obj['failureIndexes'] = ApiClient.convertToType(data['failureIndexes'], ['Number']);
            }
            if (data.hasOwnProperty('flavorObjective')) {
                obj['flavorObjective'] = ApiClient.convertToType(data['flavorObjective'], DestinyQuestsDestinyObjectiveProgress);
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyComponentsKiosksDestinyKioskItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyComponentsKiosksDestinyKioskItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['failureIndexes'])) {
            throw new Error("Expected the field `failureIndexes` to be an array in the JSON data but got " + data['failureIndexes']);
        }
        // validate the optional field `flavorObjective`
        if (data['flavorObjective']) { // data not null
          DestinyQuestsDestinyObjectiveProgress.validateJSON(data['flavorObjective']);
        }

        return true;
    }


}



/**
 * If true, the user can not only see the item, but they can acquire it. It is possible that a user can see a kiosk item and not be able to acquire it.
 * @member {Boolean} canAcquire
 */
DestinyComponentsKiosksDestinyKioskItem.prototype['canAcquire'] = undefined;

/**
 * Indexes into failureStrings for the Vendor, indicating the reasons why it failed if any.
 * @member {Array.<Number>} failureIndexes
 */
DestinyComponentsKiosksDestinyKioskItem.prototype['failureIndexes'] = undefined;

/**
 * I may regret naming it this way - but this represents when an item has an objective that doesn't serve a beneficial purpose, but rather is used for \"flavor\" or additional information. For instance, when Emblems track specific stats, those stats are represented as Objectives on the item.
 * @member {module:model/DestinyQuestsDestinyObjectiveProgress} flavorObjective
 */
DestinyComponentsKiosksDestinyKioskItem.prototype['flavorObjective'] = undefined;

/**
 * The index of the item in the related DestinyVendorDefintion's itemList property, representing the sale.
 * @member {Number} index
 */
DestinyComponentsKiosksDestinyKioskItem.prototype['index'] = undefined;






export default DestinyComponentsKiosksDestinyKioskItem;

