/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyConfigGearAssetDataBaseDefinition from './DestinyConfigGearAssetDataBaseDefinition';
import DestinyConfigImagePyramidEntry from './DestinyConfigImagePyramidEntry';

/**
 * The DestinyConfigDestinyManifest model module.
 * @module model/DestinyConfigDestinyManifest
 * @version 2.18.0
 */
class DestinyConfigDestinyManifest {
    /**
     * Constructs a new <code>DestinyConfigDestinyManifest</code>.
     * DestinyManifest is the external-facing contract for just the properties needed by those calling the Destiny Platform.
     * @alias module:model/DestinyConfigDestinyManifest
     */
    constructor() { 
        
        DestinyConfigDestinyManifest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyConfigDestinyManifest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyConfigDestinyManifest} obj Optional instance to populate.
     * @return {module:model/DestinyConfigDestinyManifest} The populated <code>DestinyConfigDestinyManifest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyConfigDestinyManifest();

            if (data.hasOwnProperty('iconImagePyramidInfo')) {
                obj['iconImagePyramidInfo'] = ApiClient.convertToType(data['iconImagePyramidInfo'], [DestinyConfigImagePyramidEntry]);
            }
            if (data.hasOwnProperty('jsonWorldComponentContentPaths')) {
                obj['jsonWorldComponentContentPaths'] = ApiClient.convertToType(data['jsonWorldComponentContentPaths'], {'String': {'String': 'String'}});
            }
            if (data.hasOwnProperty('jsonWorldContentPaths')) {
                obj['jsonWorldContentPaths'] = ApiClient.convertToType(data['jsonWorldContentPaths'], {'String': 'String'});
            }
            if (data.hasOwnProperty('mobileAssetContentPath')) {
                obj['mobileAssetContentPath'] = ApiClient.convertToType(data['mobileAssetContentPath'], 'String');
            }
            if (data.hasOwnProperty('mobileClanBannerDatabasePath')) {
                obj['mobileClanBannerDatabasePath'] = ApiClient.convertToType(data['mobileClanBannerDatabasePath'], 'String');
            }
            if (data.hasOwnProperty('mobileGearAssetDataBases')) {
                obj['mobileGearAssetDataBases'] = ApiClient.convertToType(data['mobileGearAssetDataBases'], [DestinyConfigGearAssetDataBaseDefinition]);
            }
            if (data.hasOwnProperty('mobileGearCDN')) {
                obj['mobileGearCDN'] = ApiClient.convertToType(data['mobileGearCDN'], {'String': 'String'});
            }
            if (data.hasOwnProperty('mobileWorldContentPaths')) {
                obj['mobileWorldContentPaths'] = ApiClient.convertToType(data['mobileWorldContentPaths'], {'String': 'String'});
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyConfigDestinyManifest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyConfigDestinyManifest</code>.
     */
    static validateJSON(data) {
        if (data['iconImagePyramidInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['iconImagePyramidInfo'])) {
                throw new Error("Expected the field `iconImagePyramidInfo` to be an array in the JSON data but got " + data['iconImagePyramidInfo']);
            }
            // validate the optional field `iconImagePyramidInfo` (array)
            for (const item of data['iconImagePyramidInfo']) {
                DestinyConfigImagePyramidEntry.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['mobileAssetContentPath'] && !(typeof data['mobileAssetContentPath'] === 'string' || data['mobileAssetContentPath'] instanceof String)) {
            throw new Error("Expected the field `mobileAssetContentPath` to be a primitive type in the JSON string but got " + data['mobileAssetContentPath']);
        }
        // ensure the json data is a string
        if (data['mobileClanBannerDatabasePath'] && !(typeof data['mobileClanBannerDatabasePath'] === 'string' || data['mobileClanBannerDatabasePath'] instanceof String)) {
            throw new Error("Expected the field `mobileClanBannerDatabasePath` to be a primitive type in the JSON string but got " + data['mobileClanBannerDatabasePath']);
        }
        if (data['mobileGearAssetDataBases']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mobileGearAssetDataBases'])) {
                throw new Error("Expected the field `mobileGearAssetDataBases` to be an array in the JSON data but got " + data['mobileGearAssetDataBases']);
            }
            // validate the optional field `mobileGearAssetDataBases` (array)
            for (const item of data['mobileGearAssetDataBases']) {
                DestinyConfigGearAssetDataBaseDefinition.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * Information about the \"Image Pyramid\" for Destiny icons. Where possible, we create smaller versions of Destiny icons. These are found as subfolders under the location of the \"original/full size\" Destiny images, with the same file name and extension as the original image itself. (this lets us avoid sending largely redundant path info with every entity, at the expense of the smaller versions of the image being less discoverable)
 * @member {Array.<module:model/DestinyConfigImagePyramidEntry>} iconImagePyramidInfo
 */
DestinyConfigDestinyManifest.prototype['iconImagePyramidInfo'] = undefined;

/**
 * This points to the generated JSON that contains all the Definitions. Each key is a locale. The value is a dictionary, where the key is a definition type by name, and the value is the path to the file for that definition. WARNING: This is unsafe and subject to change - do not depend on data in these files staying around long-term.
 * @member {Object.<String, Object.<String, String>>} jsonWorldComponentContentPaths
 */
DestinyConfigDestinyManifest.prototype['jsonWorldComponentContentPaths'] = undefined;

/**
 * This points to the generated JSON that contains all the Definitions. Each key is a locale. The value is a path to the aggregated world definitions (warning: large file!)
 * @member {Object.<String, String>} jsonWorldContentPaths
 */
DestinyConfigDestinyManifest.prototype['jsonWorldContentPaths'] = undefined;

/**
 * @member {String} mobileAssetContentPath
 */
DestinyConfigDestinyManifest.prototype['mobileAssetContentPath'] = undefined;

/**
 * @member {String} mobileClanBannerDatabasePath
 */
DestinyConfigDestinyManifest.prototype['mobileClanBannerDatabasePath'] = undefined;

/**
 * @member {Array.<module:model/DestinyConfigGearAssetDataBaseDefinition>} mobileGearAssetDataBases
 */
DestinyConfigDestinyManifest.prototype['mobileGearAssetDataBases'] = undefined;

/**
 * @member {Object.<String, String>} mobileGearCDN
 */
DestinyConfigDestinyManifest.prototype['mobileGearCDN'] = undefined;

/**
 * @member {Object.<String, String>} mobileWorldContentPaths
 */
DestinyConfigDestinyManifest.prototype['mobileWorldContentPaths'] = undefined;

/**
 * @member {String} version
 */
DestinyConfigDestinyManifest.prototype['version'] = undefined;






export default DestinyConfigDestinyManifest;

