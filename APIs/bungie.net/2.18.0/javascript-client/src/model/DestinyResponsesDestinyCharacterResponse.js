/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyBaseItemComponentSetOfuint32 from './DestinyBaseItemComponentSetOfuint32';
import DestinyItemComponentSetOfint64 from './DestinyItemComponentSetOfint64';
import SingleComponentResponseOfDestinyCharacterActivitiesComponent from './SingleComponentResponseOfDestinyCharacterActivitiesComponent';
import SingleComponentResponseOfDestinyCharacterComponent from './SingleComponentResponseOfDestinyCharacterComponent';
import SingleComponentResponseOfDestinyCharacterProgressionComponent from './SingleComponentResponseOfDestinyCharacterProgressionComponent';
import SingleComponentResponseOfDestinyCharacterRecordsComponent from './SingleComponentResponseOfDestinyCharacterRecordsComponent';
import SingleComponentResponseOfDestinyCharacterRenderComponent from './SingleComponentResponseOfDestinyCharacterRenderComponent';
import SingleComponentResponseOfDestinyCollectiblesComponent from './SingleComponentResponseOfDestinyCollectiblesComponent';
import SingleComponentResponseOfDestinyCurrenciesComponent from './SingleComponentResponseOfDestinyCurrenciesComponent';
import SingleComponentResponseOfDestinyInventoryComponent from './SingleComponentResponseOfDestinyInventoryComponent';
import SingleComponentResponseOfDestinyKiosksComponent from './SingleComponentResponseOfDestinyKiosksComponent';
import SingleComponentResponseOfDestinyLoadoutsComponent from './SingleComponentResponseOfDestinyLoadoutsComponent';
import SingleComponentResponseOfDestinyPlugSetsComponent from './SingleComponentResponseOfDestinyPlugSetsComponent';
import SingleComponentResponseOfDestinyPresentationNodesComponent from './SingleComponentResponseOfDestinyPresentationNodesComponent';

/**
 * The DestinyResponsesDestinyCharacterResponse model module.
 * @module model/DestinyResponsesDestinyCharacterResponse
 * @version 2.18.0
 */
class DestinyResponsesDestinyCharacterResponse {
    /**
     * Constructs a new <code>DestinyResponsesDestinyCharacterResponse</code>.
     * The response contract for GetDestinyCharacter, with components that can be returned for character and item-level data.
     * @alias module:model/DestinyResponsesDestinyCharacterResponse
     */
    constructor() { 
        
        DestinyResponsesDestinyCharacterResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyResponsesDestinyCharacterResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyResponsesDestinyCharacterResponse} obj Optional instance to populate.
     * @return {module:model/DestinyResponsesDestinyCharacterResponse} The populated <code>DestinyResponsesDestinyCharacterResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyResponsesDestinyCharacterResponse();

            if (data.hasOwnProperty('activities')) {
                obj['activities'] = ApiClient.convertToType(data['activities'], SingleComponentResponseOfDestinyCharacterActivitiesComponent);
            }
            if (data.hasOwnProperty('character')) {
                obj['character'] = ApiClient.convertToType(data['character'], SingleComponentResponseOfDestinyCharacterComponent);
            }
            if (data.hasOwnProperty('collectibles')) {
                obj['collectibles'] = ApiClient.convertToType(data['collectibles'], SingleComponentResponseOfDestinyCollectiblesComponent);
            }
            if (data.hasOwnProperty('currencyLookups')) {
                obj['currencyLookups'] = ApiClient.convertToType(data['currencyLookups'], SingleComponentResponseOfDestinyCurrenciesComponent);
            }
            if (data.hasOwnProperty('equipment')) {
                obj['equipment'] = ApiClient.convertToType(data['equipment'], SingleComponentResponseOfDestinyInventoryComponent);
            }
            if (data.hasOwnProperty('inventory')) {
                obj['inventory'] = ApiClient.convertToType(data['inventory'], SingleComponentResponseOfDestinyInventoryComponent);
            }
            if (data.hasOwnProperty('itemComponents')) {
                obj['itemComponents'] = ApiClient.convertToType(data['itemComponents'], DestinyItemComponentSetOfint64);
            }
            if (data.hasOwnProperty('kiosks')) {
                obj['kiosks'] = ApiClient.convertToType(data['kiosks'], SingleComponentResponseOfDestinyKiosksComponent);
            }
            if (data.hasOwnProperty('loadouts')) {
                obj['loadouts'] = ApiClient.convertToType(data['loadouts'], SingleComponentResponseOfDestinyLoadoutsComponent);
            }
            if (data.hasOwnProperty('plugSets')) {
                obj['plugSets'] = ApiClient.convertToType(data['plugSets'], SingleComponentResponseOfDestinyPlugSetsComponent);
            }
            if (data.hasOwnProperty('presentationNodes')) {
                obj['presentationNodes'] = ApiClient.convertToType(data['presentationNodes'], SingleComponentResponseOfDestinyPresentationNodesComponent);
            }
            if (data.hasOwnProperty('progressions')) {
                obj['progressions'] = ApiClient.convertToType(data['progressions'], SingleComponentResponseOfDestinyCharacterProgressionComponent);
            }
            if (data.hasOwnProperty('records')) {
                obj['records'] = ApiClient.convertToType(data['records'], SingleComponentResponseOfDestinyCharacterRecordsComponent);
            }
            if (data.hasOwnProperty('renderData')) {
                obj['renderData'] = ApiClient.convertToType(data['renderData'], SingleComponentResponseOfDestinyCharacterRenderComponent);
            }
            if (data.hasOwnProperty('uninstancedItemComponents')) {
                obj['uninstancedItemComponents'] = ApiClient.convertToType(data['uninstancedItemComponents'], DestinyBaseItemComponentSetOfuint32);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyResponsesDestinyCharacterResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyResponsesDestinyCharacterResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `activities`
        if (data['activities']) { // data not null
          SingleComponentResponseOfDestinyCharacterActivitiesComponent.validateJSON(data['activities']);
        }
        // validate the optional field `character`
        if (data['character']) { // data not null
          SingleComponentResponseOfDestinyCharacterComponent.validateJSON(data['character']);
        }
        // validate the optional field `collectibles`
        if (data['collectibles']) { // data not null
          SingleComponentResponseOfDestinyCollectiblesComponent.validateJSON(data['collectibles']);
        }
        // validate the optional field `currencyLookups`
        if (data['currencyLookups']) { // data not null
          SingleComponentResponseOfDestinyCurrenciesComponent.validateJSON(data['currencyLookups']);
        }
        // validate the optional field `equipment`
        if (data['equipment']) { // data not null
          SingleComponentResponseOfDestinyInventoryComponent.validateJSON(data['equipment']);
        }
        // validate the optional field `inventory`
        if (data['inventory']) { // data not null
          SingleComponentResponseOfDestinyInventoryComponent.validateJSON(data['inventory']);
        }
        // validate the optional field `itemComponents`
        if (data['itemComponents']) { // data not null
          DestinyItemComponentSetOfint64.validateJSON(data['itemComponents']);
        }
        // validate the optional field `kiosks`
        if (data['kiosks']) { // data not null
          SingleComponentResponseOfDestinyKiosksComponent.validateJSON(data['kiosks']);
        }
        // validate the optional field `loadouts`
        if (data['loadouts']) { // data not null
          SingleComponentResponseOfDestinyLoadoutsComponent.validateJSON(data['loadouts']);
        }
        // validate the optional field `plugSets`
        if (data['plugSets']) { // data not null
          SingleComponentResponseOfDestinyPlugSetsComponent.validateJSON(data['plugSets']);
        }
        // validate the optional field `presentationNodes`
        if (data['presentationNodes']) { // data not null
          SingleComponentResponseOfDestinyPresentationNodesComponent.validateJSON(data['presentationNodes']);
        }
        // validate the optional field `progressions`
        if (data['progressions']) { // data not null
          SingleComponentResponseOfDestinyCharacterProgressionComponent.validateJSON(data['progressions']);
        }
        // validate the optional field `records`
        if (data['records']) { // data not null
          SingleComponentResponseOfDestinyCharacterRecordsComponent.validateJSON(data['records']);
        }
        // validate the optional field `renderData`
        if (data['renderData']) { // data not null
          SingleComponentResponseOfDestinyCharacterRenderComponent.validateJSON(data['renderData']);
        }
        // validate the optional field `uninstancedItemComponents`
        if (data['uninstancedItemComponents']) { // data not null
          DestinyBaseItemComponentSetOfuint32.validateJSON(data['uninstancedItemComponents']);
        }

        return true;
    }


}



/**
 * Activity data - info about current activities available to the player.  COMPONENT TYPE: CharacterActivities
 * @member {module:model/SingleComponentResponseOfDestinyCharacterActivitiesComponent} activities
 */
DestinyResponsesDestinyCharacterResponse.prototype['activities'] = undefined;

/**
 * Base information about the character in question.  COMPONENT TYPE: Characters
 * @member {module:model/SingleComponentResponseOfDestinyCharacterComponent} character
 */
DestinyResponsesDestinyCharacterResponse.prototype['character'] = undefined;

/**
 * COMPONENT TYPE: Collectibles
 * @member {module:model/SingleComponentResponseOfDestinyCollectiblesComponent} collectibles
 */
DestinyResponsesDestinyCharacterResponse.prototype['collectibles'] = undefined;

/**
 * A \"lookup\" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.  COMPONENT TYPE: CurrencyLookups
 * @member {module:model/SingleComponentResponseOfDestinyCurrenciesComponent} currencyLookups
 */
DestinyResponsesDestinyCharacterResponse.prototype['currencyLookups'] = undefined;

/**
 * Equipped items on the character.  COMPONENT TYPE: CharacterEquipment
 * @member {module:model/SingleComponentResponseOfDestinyInventoryComponent} equipment
 */
DestinyResponsesDestinyCharacterResponse.prototype['equipment'] = undefined;

/**
 * The character-level non-equipped inventory items.  COMPONENT TYPE: CharacterInventories
 * @member {module:model/SingleComponentResponseOfDestinyInventoryComponent} inventory
 */
DestinyResponsesDestinyCharacterResponse.prototype['inventory'] = undefined;

/**
 * The set of components belonging to the player's instanced items.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
 * @member {module:model/DestinyItemComponentSetOfint64} itemComponents
 */
DestinyResponsesDestinyCharacterResponse.prototype['itemComponents'] = undefined;

/**
 * Items available from Kiosks that are available to this specific character.   COMPONENT TYPE: Kiosks
 * @member {module:model/SingleComponentResponseOfDestinyKiosksComponent} kiosks
 */
DestinyResponsesDestinyCharacterResponse.prototype['kiosks'] = undefined;

/**
 * The loadouts available to the character.  COMPONENT TYPE: CharacterLoadouts
 * @member {module:model/SingleComponentResponseOfDestinyLoadoutsComponent} loadouts
 */
DestinyResponsesDestinyCharacterResponse.prototype['loadouts'] = undefined;

/**
 * When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are scoped to this character.  This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.  COMPONENT TYPE: ItemSockets
 * @member {module:model/SingleComponentResponseOfDestinyPlugSetsComponent} plugSets
 */
DestinyResponsesDestinyCharacterResponse.prototype['plugSets'] = undefined;

/**
 * COMPONENT TYPE: PresentationNodes
 * @member {module:model/SingleComponentResponseOfDestinyPresentationNodesComponent} presentationNodes
 */
DestinyResponsesDestinyCharacterResponse.prototype['presentationNodes'] = undefined;

/**
 * Character progression data, including Milestones.  COMPONENT TYPE: CharacterProgressions
 * @member {module:model/SingleComponentResponseOfDestinyCharacterProgressionComponent} progressions
 */
DestinyResponsesDestinyCharacterResponse.prototype['progressions'] = undefined;

/**
 * COMPONENT TYPE: Records
 * @member {module:model/SingleComponentResponseOfDestinyCharacterRecordsComponent} records
 */
DestinyResponsesDestinyCharacterResponse.prototype['records'] = undefined;

/**
 * Character rendering data - a minimal set of information about equipment and dyes used for rendering.  COMPONENT TYPE: CharacterRenderData
 * @member {module:model/SingleComponentResponseOfDestinyCharacterRenderComponent} renderData
 */
DestinyResponsesDestinyCharacterResponse.prototype['renderData'] = undefined;

/**
 * The set of components belonging to the player's UNinstanced items. Because apparently now those too can have information relevant to the character's state.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
 * @member {module:model/DestinyBaseItemComponentSetOfuint32} uninstancedItemComponents
 */
DestinyResponsesDestinyCharacterResponse.prototype['uninstancedItemComponents'] = undefined;






export default DestinyResponsesDestinyCharacterResponse;

