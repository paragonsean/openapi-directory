/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition from './DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition';
import DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock from './DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock';
import DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock from './DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock';

/**
 * The DestinyDefinitionsPresentationDestinyPresentationNodeDefinition model module.
 * @module model/DestinyDefinitionsPresentationDestinyPresentationNodeDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsPresentationDestinyPresentationNodeDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsPresentationDestinyPresentationNodeDefinition</code>.
     * A PresentationNode is an entity that represents a logical grouping of other entities visually/organizationally.  For now, Presentation Nodes may contain the following... but it may be used for more in the future:  - Collectibles - Records (Or, as the public will call them, \&quot;Triumphs.\&quot; Don&#39;t ask me why we&#39;re overloading the term \&quot;Triumph\&quot;, it still hurts me to think about it) - Metrics (aka Stat Trackers) - Other Presentation Nodes, allowing a tree of Presentation Nodes to be created  Part of me wants to break these into conceptual definitions per entity being collected, but the possibility of these different types being mixed in the same UI and the possibility that it could actually be more useful to return the \&quot;bare metal\&quot; presentation node concept has resulted in me deciding against that for the time being.  We&#39;ll see if I come to regret this as well.
     * @alias module:model/DestinyDefinitionsPresentationDestinyPresentationNodeDefinition
     */
    constructor() { 
        
        DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsPresentationDestinyPresentationNodeDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsPresentationDestinyPresentationNodeDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsPresentationDestinyPresentationNodeDefinition} The populated <code>DestinyDefinitionsPresentationDestinyPresentationNodeDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsPresentationDestinyPresentationNodeDefinition();

            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock);
            }
            if (data.hasOwnProperty('completionRecordHash')) {
                obj['completionRecordHash'] = ApiClient.convertToType(data['completionRecordHash'], 'Number');
            }
            if (data.hasOwnProperty('disableChildSubscreenNavigation')) {
                obj['disableChildSubscreenNavigation'] = ApiClient.convertToType(data['disableChildSubscreenNavigation'], 'Boolean');
            }
            if (data.hasOwnProperty('displayProperties')) {
                obj['displayProperties'] = DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.constructFromObject(data['displayProperties']);
            }
            if (data.hasOwnProperty('displayStyle')) {
                obj['displayStyle'] = ApiClient.convertToType(data['displayStyle'], 'Number');
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'Number');
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('maxCategoryRecordScore')) {
                obj['maxCategoryRecordScore'] = ApiClient.convertToType(data['maxCategoryRecordScore'], 'Number');
            }
            if (data.hasOwnProperty('nodeType')) {
                obj['nodeType'] = ApiClient.convertToType(data['nodeType'], 'Number');
            }
            if (data.hasOwnProperty('objectiveHash')) {
                obj['objectiveHash'] = ApiClient.convertToType(data['objectiveHash'], 'Number');
            }
            if (data.hasOwnProperty('originalIcon')) {
                obj['originalIcon'] = ApiClient.convertToType(data['originalIcon'], 'String');
            }
            if (data.hasOwnProperty('parentNodeHashes')) {
                obj['parentNodeHashes'] = ApiClient.convertToType(data['parentNodeHashes'], ['Number']);
            }
            if (data.hasOwnProperty('presentationNodeType')) {
                obj['presentationNodeType'] = ApiClient.convertToType(data['presentationNodeType'], 'Number');
            }
            if (data.hasOwnProperty('redacted')) {
                obj['redacted'] = ApiClient.convertToType(data['redacted'], 'Boolean');
            }
            if (data.hasOwnProperty('requirements')) {
                obj['requirements'] = ApiClient.convertToType(data['requirements'], DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock);
            }
            if (data.hasOwnProperty('rootViewIcon')) {
                obj['rootViewIcon'] = ApiClient.convertToType(data['rootViewIcon'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'Number');
            }
            if (data.hasOwnProperty('screenStyle')) {
                obj['screenStyle'] = ApiClient.convertToType(data['screenStyle'], 'Number');
            }
            if (data.hasOwnProperty('traitHashes')) {
                obj['traitHashes'] = ApiClient.convertToType(data['traitHashes'], ['Number']);
            }
            if (data.hasOwnProperty('traitIds')) {
                obj['traitIds'] = ApiClient.convertToType(data['traitIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsPresentationDestinyPresentationNodeDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsPresentationDestinyPresentationNodeDefinition</code>.
     */
    static validateJSON(data) {
        // validate the optional field `children`
        if (data['children']) { // data not null
          DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.validateJSON(data['children']);
        }
        // validate the optional field `displayProperties`
        if (data['displayProperties']) { // data not null
          DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJSON(data['displayProperties']);
        }
        // ensure the json data is a string
        if (data['originalIcon'] && !(typeof data['originalIcon'] === 'string' || data['originalIcon'] instanceof String)) {
            throw new Error("Expected the field `originalIcon` to be a primitive type in the JSON string but got " + data['originalIcon']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['parentNodeHashes'])) {
            throw new Error("Expected the field `parentNodeHashes` to be an array in the JSON data but got " + data['parentNodeHashes']);
        }
        // validate the optional field `requirements`
        if (data['requirements']) { // data not null
          DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock.validateJSON(data['requirements']);
        }
        // ensure the json data is a string
        if (data['rootViewIcon'] && !(typeof data['rootViewIcon'] === 'string' || data['rootViewIcon'] instanceof String)) {
            throw new Error("Expected the field `rootViewIcon` to be a primitive type in the JSON string but got " + data['rootViewIcon']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['traitHashes'])) {
            throw new Error("Expected the field `traitHashes` to be an array in the JSON data but got " + data['traitHashes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['traitIds'])) {
            throw new Error("Expected the field `traitIds` to be an array in the JSON data but got " + data['traitIds']);
        }

        return true;
    }


}



/**
 * The child entities contained by this presentation node.
 * @member {module:model/DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock} children
 */
DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.prototype['children'] = undefined;

/**
 * If this presentation node has an associated \"Record\" that you can accomplish for completing its children, this is the identifier of that Record.
 * @member {Number} completionRecordHash
 */
DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.prototype['completionRecordHash'] = undefined;

/**
 * If this presentation node has children, but the game doesn't let you inspect the details of those children, that is indicated here.
 * @member {Boolean} disableChildSubscreenNavigation
 */
DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.prototype['disableChildSubscreenNavigation'] = undefined;

/**
 * @member {module:model/DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition} displayProperties
 */
DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.prototype['displayProperties'] = undefined;

/**
 * A hint for how to display this presentation node when it's shown in a list.
 * @member {Number} displayStyle
 */
DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.prototype['displayStyle'] = undefined;

/**
 * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
 * @member {Number} hash
 */
DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.prototype['hash'] = undefined;

/**
 * The index of the entity as it was found in the investment tables.
 * @member {Number} index
 */
DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.prototype['index'] = undefined;

/**
 * @member {Number} maxCategoryRecordScore
 */
DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.prototype['maxCategoryRecordScore'] = undefined;

/**
 * @member {Number} nodeType
 */
DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.prototype['nodeType'] = undefined;

/**
 * If this presentation node shows a related objective (for instance, if it tracks the progress of its children), the objective being tracked is indicated here.
 * @member {Number} objectiveHash
 */
DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.prototype['objectiveHash'] = undefined;

/**
 * The original icon for this presentation node, before we futzed with it.
 * @member {String} originalIcon
 */
DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.prototype['originalIcon'] = undefined;

/**
 * A quick reference to presentation nodes that have this node as a child. Presentation nodes can be parented under multiple parents.
 * @member {Array.<Number>} parentNodeHashes
 */
DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.prototype['parentNodeHashes'] = undefined;

/**
 * @member {Number} presentationNodeType
 */
DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.prototype['presentationNodeType'] = undefined;

/**
 * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
 * @member {Boolean} redacted
 */
DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.prototype['redacted'] = undefined;

/**
 * The requirements for being able to interact with this presentation node and its children.
 * @member {module:model/DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock} requirements
 */
DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.prototype['requirements'] = undefined;

/**
 * Some presentation nodes are meant to be explicitly shown on the \"root\" or \"entry\" screens for the feature to which they are related. You should use this icon when showing them on such a view, if you have a similar \"entry point\" view in your UI. If you don't have a UI, then I guess it doesn't matter either way does it?
 * @member {String} rootViewIcon
 */
DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.prototype['rootViewIcon'] = undefined;

/**
 * Indicates whether this presentation node's state is determined on a per-character or on an account-wide basis.
 * @member {Number} scope
 */
DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.prototype['scope'] = undefined;

/**
 * A hint for how to display this presentation node when it's shown in its own detail screen.
 * @member {Number} screenStyle
 */
DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.prototype['screenStyle'] = undefined;

/**
 * @member {Array.<Number>} traitHashes
 */
DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.prototype['traitHashes'] = undefined;

/**
 * @member {Array.<String>} traitIds
 */
DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.prototype['traitIds'] = undefined;






export default DestinyDefinitionsPresentationDestinyPresentationNodeDefinition;

