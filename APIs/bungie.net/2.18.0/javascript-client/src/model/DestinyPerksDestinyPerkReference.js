/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DestinyPerksDestinyPerkReference model module.
 * @module model/DestinyPerksDestinyPerkReference
 * @version 2.18.0
 */
class DestinyPerksDestinyPerkReference {
    /**
     * Constructs a new <code>DestinyPerksDestinyPerkReference</code>.
     * The list of perks to display in an item tooltip - and whether or not they have been activated.  Perks apply a variety of effects to a character, and are generally either intrinsic to the item or provided in activated talent nodes or sockets.
     * @alias module:model/DestinyPerksDestinyPerkReference
     */
    constructor() { 
        
        DestinyPerksDestinyPerkReference.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyPerksDestinyPerkReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyPerksDestinyPerkReference} obj Optional instance to populate.
     * @return {module:model/DestinyPerksDestinyPerkReference} The populated <code>DestinyPerksDestinyPerkReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyPerksDestinyPerkReference();

            if (data.hasOwnProperty('iconPath')) {
                obj['iconPath'] = ApiClient.convertToType(data['iconPath'], 'String');
            }
            if (data.hasOwnProperty('isActive')) {
                obj['isActive'] = ApiClient.convertToType(data['isActive'], 'Boolean');
            }
            if (data.hasOwnProperty('perkHash')) {
                obj['perkHash'] = ApiClient.convertToType(data['perkHash'], 'Number');
            }
            if (data.hasOwnProperty('visible')) {
                obj['visible'] = ApiClient.convertToType(data['visible'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyPerksDestinyPerkReference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyPerksDestinyPerkReference</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['iconPath'] && !(typeof data['iconPath'] === 'string' || data['iconPath'] instanceof String)) {
            throw new Error("Expected the field `iconPath` to be a primitive type in the JSON string but got " + data['iconPath']);
        }

        return true;
    }


}



/**
 * The icon for the perk.
 * @member {String} iconPath
 */
DestinyPerksDestinyPerkReference.prototype['iconPath'] = undefined;

/**
 * Whether this perk is currently active. (We may return perks that you have not actually activated yet: these represent perks that you should show in the item's tooltip, but that the user has not yet activated.)
 * @member {Boolean} isActive
 */
DestinyPerksDestinyPerkReference.prototype['isActive'] = undefined;

/**
 * The hash identifier for the perk, which can be used to look up DestinySandboxPerkDefinition if it exists. Be warned, perks frequently do not have user-viewable information. You should examine whether you actually found a name/description in the perk's definition before you show it to the user.
 * @member {Number} perkHash
 */
DestinyPerksDestinyPerkReference.prototype['perkHash'] = undefined;

/**
 * Some perks provide benefits, but aren't visible in the UI. This value will let you know if this is perk should be shown in your UI.
 * @member {Boolean} visible
 */
DestinyPerksDestinyPerkReference.prototype['visible'] = undefined;






export default DestinyPerksDestinyPerkReference;

