/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition from './DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition';
import DestinyDefinitionsDestinyObjectivePerkEntryDefinition from './DestinyDefinitionsDestinyObjectivePerkEntryDefinition';
import DestinyDefinitionsDestinyObjectiveStatEntryDefinition from './DestinyDefinitionsDestinyObjectiveStatEntryDefinition';

/**
 * The DestinyDefinitionsDestinyObjectiveDefinition model module.
 * @module model/DestinyDefinitionsDestinyObjectiveDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsDestinyObjectiveDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsDestinyObjectiveDefinition</code>.
     * Defines an \&quot;Objective\&quot;.  An objective is a specific task you should accomplish in the game. These are referred to by:  - Quest Steps (which are DestinyInventoryItemDefinition entities with Objectives)  - Challenges (which are Objectives defined on an DestinyActivityDefintion)  - Milestones (which refer to Objectives that are defined on both Quest Steps and Activities)  - Anything else that the designers decide to do later.  Objectives have progress, a notion of having been Completed, human readable data describing the task to be accomplished, and a lot of optional tack-on data that can enhance the information provided about the task.
     * @alias module:model/DestinyDefinitionsDestinyObjectiveDefinition
     */
    constructor() { 
        
        DestinyDefinitionsDestinyObjectiveDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsDestinyObjectiveDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsDestinyObjectiveDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsDestinyObjectiveDefinition} The populated <code>DestinyDefinitionsDestinyObjectiveDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsDestinyObjectiveDefinition();

            if (data.hasOwnProperty('allowNegativeValue')) {
                obj['allowNegativeValue'] = ApiClient.convertToType(data['allowNegativeValue'], 'Boolean');
            }
            if (data.hasOwnProperty('allowOvercompletion')) {
                obj['allowOvercompletion'] = ApiClient.convertToType(data['allowOvercompletion'], 'Boolean');
            }
            if (data.hasOwnProperty('allowValueChangeWhenCompleted')) {
                obj['allowValueChangeWhenCompleted'] = ApiClient.convertToType(data['allowValueChangeWhenCompleted'], 'Boolean');
            }
            if (data.hasOwnProperty('completedValueStyle')) {
                obj['completedValueStyle'] = ApiClient.convertToType(data['completedValueStyle'], 'Number');
            }
            if (data.hasOwnProperty('completionValue')) {
                obj['completionValue'] = ApiClient.convertToType(data['completionValue'], 'Number');
            }
            if (data.hasOwnProperty('displayProperties')) {
                obj['displayProperties'] = ApiClient.convertToType(data['displayProperties'], DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition);
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'Number');
            }
            if (data.hasOwnProperty('inProgressValueStyle')) {
                obj['inProgressValueStyle'] = ApiClient.convertToType(data['inProgressValueStyle'], 'Number');
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('isCountingDownward')) {
                obj['isCountingDownward'] = ApiClient.convertToType(data['isCountingDownward'], 'Boolean');
            }
            if (data.hasOwnProperty('locationHash')) {
                obj['locationHash'] = ApiClient.convertToType(data['locationHash'], 'Number');
            }
            if (data.hasOwnProperty('minimumVisibilityThreshold')) {
                obj['minimumVisibilityThreshold'] = ApiClient.convertToType(data['minimumVisibilityThreshold'], 'Number');
            }
            if (data.hasOwnProperty('perks')) {
                obj['perks'] = ApiClient.convertToType(data['perks'], DestinyDefinitionsDestinyObjectivePerkEntryDefinition);
            }
            if (data.hasOwnProperty('progressDescription')) {
                obj['progressDescription'] = ApiClient.convertToType(data['progressDescription'], 'String');
            }
            if (data.hasOwnProperty('redacted')) {
                obj['redacted'] = ApiClient.convertToType(data['redacted'], 'Boolean');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'Number');
            }
            if (data.hasOwnProperty('showValueOnComplete')) {
                obj['showValueOnComplete'] = ApiClient.convertToType(data['showValueOnComplete'], 'Boolean');
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = ApiClient.convertToType(data['stats'], DestinyDefinitionsDestinyObjectiveStatEntryDefinition);
            }
            if (data.hasOwnProperty('uiLabel')) {
                obj['uiLabel'] = ApiClient.convertToType(data['uiLabel'], 'String');
            }
            if (data.hasOwnProperty('uiStyle')) {
                obj['uiStyle'] = ApiClient.convertToType(data['uiStyle'], 'Number');
            }
            if (data.hasOwnProperty('valueStyle')) {
                obj['valueStyle'] = ApiClient.convertToType(data['valueStyle'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsDestinyObjectiveDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsDestinyObjectiveDefinition</code>.
     */
    static validateJSON(data) {
        // validate the optional field `displayProperties`
        if (data['displayProperties']) { // data not null
          DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJSON(data['displayProperties']);
        }
        // validate the optional field `perks`
        if (data['perks']) { // data not null
          DestinyDefinitionsDestinyObjectivePerkEntryDefinition.validateJSON(data['perks']);
        }
        // ensure the json data is a string
        if (data['progressDescription'] && !(typeof data['progressDescription'] === 'string' || data['progressDescription'] instanceof String)) {
            throw new Error("Expected the field `progressDescription` to be a primitive type in the JSON string but got " + data['progressDescription']);
        }
        // validate the optional field `stats`
        if (data['stats']) { // data not null
          DestinyDefinitionsDestinyObjectiveStatEntryDefinition.validateJSON(data['stats']);
        }
        // ensure the json data is a string
        if (data['uiLabel'] && !(typeof data['uiLabel'] === 'string' || data['uiLabel'] instanceof String)) {
            throw new Error("Expected the field `uiLabel` to be a primitive type in the JSON string but got " + data['uiLabel']);
        }

        return true;
    }


}



/**
 * If true, the value is allowed to go negative.
 * @member {Boolean} allowNegativeValue
 */
DestinyDefinitionsDestinyObjectiveDefinition.prototype['allowNegativeValue'] = undefined;

/**
 * If True, the progress will continue even beyond the point where the objective met its minimum completion requirements. Your UI will have to accommodate it.
 * @member {Boolean} allowOvercompletion
 */
DestinyDefinitionsDestinyObjectiveDefinition.prototype['allowOvercompletion'] = undefined;

/**
 * If true, you can effectively \"un-complete\" this objective if you lose progress after crossing the completion threshold.   If False, once you complete the task it will remain completed forever by locking the value.
 * @member {Boolean} allowValueChangeWhenCompleted
 */
DestinyDefinitionsDestinyObjectiveDefinition.prototype['allowValueChangeWhenCompleted'] = undefined;

/**
 * The style to use when the objective is completed.
 * @member {Number} completedValueStyle
 */
DestinyDefinitionsDestinyObjectiveDefinition.prototype['completedValueStyle'] = undefined;

/**
 * The value that the unlock value defined in unlockValueHash must reach in order for the objective to be considered Completed. Used in calculating progress and completion status.
 * @member {Number} completionValue
 */
DestinyDefinitionsDestinyObjectiveDefinition.prototype['completionValue'] = undefined;

/**
 * Ideally, this should tell you what your task is. I'm not going to lie to you though. Sometimes this doesn't have useful information at all. Which sucks, but there's nothing either of us can do about it.
 * @member {module:model/DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition} displayProperties
 */
DestinyDefinitionsDestinyObjectiveDefinition.prototype['displayProperties'] = undefined;

/**
 * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
 * @member {Number} hash
 */
DestinyDefinitionsDestinyObjectiveDefinition.prototype['hash'] = undefined;

/**
 * The style to use when the objective is still in progress.
 * @member {Number} inProgressValueStyle
 */
DestinyDefinitionsDestinyObjectiveDefinition.prototype['inProgressValueStyle'] = undefined;

/**
 * The index of the entity as it was found in the investment tables.
 * @member {Number} index
 */
DestinyDefinitionsDestinyObjectiveDefinition.prototype['index'] = undefined;

/**
 * If true, completion means having an unlock value less than or equal to the completionValue.  If False, completion means having an unlock value greater than or equal to the completionValue.
 * @member {Boolean} isCountingDownward
 */
DestinyDefinitionsDestinyObjectiveDefinition.prototype['isCountingDownward'] = undefined;

/**
 * OPTIONAL: a hash identifier for the location at which this objective must be accomplished, if there is a location defined. Look up the DestinyLocationDefinition for this hash for that additional location info.
 * @member {Number} locationHash
 */
DestinyDefinitionsDestinyObjectiveDefinition.prototype['locationHash'] = undefined;

/**
 * If nonzero, this is the minimum value at which the objective's progression should be shown. Otherwise, don't show it yet.
 * @member {Number} minimumVisibilityThreshold
 */
DestinyDefinitionsDestinyObjectiveDefinition.prototype['minimumVisibilityThreshold'] = undefined;

/**
 * If this objective enables Perks intrinsically, the conditions for that enabling are defined here.
 * @member {module:model/DestinyDefinitionsDestinyObjectivePerkEntryDefinition} perks
 */
DestinyDefinitionsDestinyObjectiveDefinition.prototype['perks'] = undefined;

/**
 * Text to describe the progress bar.
 * @member {String} progressDescription
 */
DestinyDefinitionsDestinyObjectiveDefinition.prototype['progressDescription'] = undefined;

/**
 * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
 * @member {Boolean} redacted
 */
DestinyDefinitionsDestinyObjectiveDefinition.prototype['redacted'] = undefined;

/**
 * A shortcut for determining the most restrictive gating that this Objective is set to use. This includes both the dynamic determination of progress and of completion values. See the DestinyGatingScope enum's documentation for more details.
 * @member {Number} scope
 */
DestinyDefinitionsDestinyObjectiveDefinition.prototype['scope'] = undefined;

/**
 * If True, you should continue showing the progression value in the UI after it's complete. I mean, we already do that in BNet anyways, but if you want to be better behaved than us you could honor this flag.
 * @member {Boolean} showValueOnComplete
 */
DestinyDefinitionsDestinyObjectiveDefinition.prototype['showValueOnComplete'] = undefined;

/**
 * If this objective enables modifications on a player's stats intrinsically, the conditions are defined here.
 * @member {module:model/DestinyDefinitionsDestinyObjectiveStatEntryDefinition} stats
 */
DestinyDefinitionsDestinyObjectiveDefinition.prototype['stats'] = undefined;

/**
 * Objectives can have arbitrary UI-defined identifiers that define the style applied to objectives. For convenience, known UI labels will be defined in the uiStyle enum value.
 * @member {String} uiLabel
 */
DestinyDefinitionsDestinyObjectiveDefinition.prototype['uiLabel'] = undefined;

/**
 * If the objective has a known UI label value, this property will represent it.
 * @member {Number} uiStyle
 */
DestinyDefinitionsDestinyObjectiveDefinition.prototype['uiStyle'] = undefined;

/**
 * The UI style applied to the objective. It's an enum, take a look at DestinyUnlockValueUIStyle for details of the possible styles. Use this info as you wish to customize your UI.  DEPRECATED: This is no longer populated by Destiny 2 game content. Please use inProgressValueStyle and completedValueStyle instead.
 * @member {Number} valueStyle
 */
DestinyDefinitionsDestinyObjectiveDefinition.prototype['valueStyle'] = undefined;






export default DestinyDefinitionsDestinyObjectiveDefinition;

