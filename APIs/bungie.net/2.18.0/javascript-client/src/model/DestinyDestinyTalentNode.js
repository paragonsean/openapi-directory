/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDefinitionsDestinyMaterialRequirement from './DestinyDefinitionsDestinyMaterialRequirement';
import DestinyDestinyTalentNodeStatBlock from './DestinyDestinyTalentNodeStatBlock';

/**
 * The DestinyDestinyTalentNode model module.
 * @module model/DestinyDestinyTalentNode
 * @version 2.18.0
 */
class DestinyDestinyTalentNode {
    /**
     * Constructs a new <code>DestinyDestinyTalentNode</code>.
     * I see you&#39;ve come to find out more about Talent Nodes. I&#39;m so sorry. Talent Nodes are the conceptual, visual nodes that appear on Talent Grids. Talent Grids, in Destiny 1, were found on almost every instanced item: they had Nodes that could be activated to change the properties of the item. In Destiny 2, Talent Grids only exist for Builds/Subclasses, and while the basic concept is the same (Nodes can be activated once you&#39;ve gained sufficient Experience on the Item, and provide effects), there are some new concepts from Destiny 1. Examine DestinyTalentGridDefinition and its subordinates for more information. This is the \&quot;Live\&quot; information for the current status of a Talent Node on a specific item. Talent Nodes have many Steps, but only one can be active at any one time: and it is the Step that determines both the visual and the game state-changing properties that the Node provides. Examine this and DestinyTalentNodeStepDefinition carefully. *IMPORTANT NOTE* Talent Nodes are, unfortunately, Content Version DEPENDENT. Though they refer to hashes for Nodes and Steps, those hashes are not guaranteed to be immutable across content versions. This is a source of great exasperation for me, but as a result anyone using Talent Grid data must ensure that the content version of their static content matches that of the server responses before showing or making decisions based on talent grid data.
     * @alias module:model/DestinyDestinyTalentNode
     */
    constructor() { 
        
        DestinyDestinyTalentNode.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDestinyTalentNode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDestinyTalentNode} obj Optional instance to populate.
     * @return {module:model/DestinyDestinyTalentNode} The populated <code>DestinyDestinyTalentNode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDestinyTalentNode();

            if (data.hasOwnProperty('activationGridLevel')) {
                obj['activationGridLevel'] = ApiClient.convertToType(data['activationGridLevel'], 'Number');
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('isActivated')) {
                obj['isActivated'] = ApiClient.convertToType(data['isActivated'], 'Boolean');
            }
            if (data.hasOwnProperty('materialsToUpgrade')) {
                obj['materialsToUpgrade'] = ApiClient.convertToType(data['materialsToUpgrade'], [DestinyDefinitionsDestinyMaterialRequirement]);
            }
            if (data.hasOwnProperty('nodeHash')) {
                obj['nodeHash'] = ApiClient.convertToType(data['nodeHash'], 'Number');
            }
            if (data.hasOwnProperty('nodeIndex')) {
                obj['nodeIndex'] = ApiClient.convertToType(data['nodeIndex'], 'Number');
            }
            if (data.hasOwnProperty('nodeStatsBlock')) {
                obj['nodeStatsBlock'] = ApiClient.convertToType(data['nodeStatsBlock'], DestinyDestinyTalentNodeStatBlock);
            }
            if (data.hasOwnProperty('progressPercent')) {
                obj['progressPercent'] = ApiClient.convertToType(data['progressPercent'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'Number');
            }
            if (data.hasOwnProperty('stepIndex')) {
                obj['stepIndex'] = ApiClient.convertToType(data['stepIndex'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDestinyTalentNode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDestinyTalentNode</code>.
     */
    static validateJSON(data) {
        if (data['materialsToUpgrade']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['materialsToUpgrade'])) {
                throw new Error("Expected the field `materialsToUpgrade` to be an array in the JSON data but got " + data['materialsToUpgrade']);
            }
            // validate the optional field `materialsToUpgrade` (array)
            for (const item of data['materialsToUpgrade']) {
                DestinyDefinitionsDestinyMaterialRequirement.validateJSON(item);
            };
        }
        // validate the optional field `nodeStatsBlock`
        if (data['nodeStatsBlock']) { // data not null
          DestinyDestinyTalentNodeStatBlock.validateJSON(data['nodeStatsBlock']);
        }

        return true;
    }


}



/**
 * The progression level required on the Talent Grid in order to be able to activate this talent node. Talent Grids have their own Progression - similar to Character Level, but in this case it is experience related to the item itself.
 * @member {Number} activationGridLevel
 */
DestinyDestinyTalentNode.prototype['activationGridLevel'] = undefined;

/**
 * Whether or not the talent node is actually visible in the game's UI. Whether you want to show it in your own UI is up to you! I'm not gonna tell you who to sock it to.
 * @member {Boolean} hidden
 */
DestinyDestinyTalentNode.prototype['hidden'] = undefined;

/**
 * If true, the node is activated: it's current step then provides its benefits.
 * @member {Boolean} isActivated
 */
DestinyDestinyTalentNode.prototype['isActivated'] = undefined;

/**
 * If the node has material requirements to be activated, this is the list of those requirements.
 * @member {Array.<module:model/DestinyDefinitionsDestinyMaterialRequirement>} materialsToUpgrade
 */
DestinyDestinyTalentNode.prototype['materialsToUpgrade'] = undefined;

/**
 * The hash of the Talent Node being referred to (in DestinyTalentGridDefinition.nodes). Deceptively CONTENT VERSION DEPENDENT. We have no guarantee of the hash's immutability between content versions.
 * @member {Number} nodeHash
 */
DestinyDestinyTalentNode.prototype['nodeHash'] = undefined;

/**
 * The index of the Talent Node being referred to (an index into DestinyTalentGridDefinition.nodes[]). CONTENT VERSION DEPENDENT.
 * @member {Number} nodeIndex
 */
DestinyDestinyTalentNode.prototype['nodeIndex'] = undefined;

/**
 * This property has some history. A talent grid can provide stats on both the item it's related to and the character equipping the item. This returns data about those stat bonuses.
 * @member {module:model/DestinyDestinyTalentNodeStatBlock} nodeStatsBlock
 */
DestinyDestinyTalentNode.prototype['nodeStatsBlock'] = undefined;

/**
 * If you want to show a progress bar or circle for how close this talent node is to being activate-able, this is the percentage to show. It follows the node's underlying rules about when the progress bar should first show up, and when it should be filled.
 * @member {Number} progressPercent
 */
DestinyDestinyTalentNode.prototype['progressPercent'] = undefined;

/**
 * An DestinyTalentNodeState enum value indicating the node's state: whether it can be activated or swapped, and why not if neither can be performed.
 * @member {Number} state
 */
DestinyDestinyTalentNode.prototype['state'] = undefined;

/**
 * The currently relevant Step for the node. It is this step that has rendering data for the node and the benefits that are provided if the node is activated. (the actual rules for benefits provided are extremely complicated in theory, but with how Talent Grids are being used in Destiny 2 you don't have to worry about a lot of those old Destiny 1 rules.) This is an index into: DestinyTalentGridDefinition.nodes[nodeIndex].steps[stepIndex]
 * @member {Number} stepIndex
 */
DestinyDestinyTalentNode.prototype['stepIndex'] = undefined;






export default DestinyDestinyTalentNode;

