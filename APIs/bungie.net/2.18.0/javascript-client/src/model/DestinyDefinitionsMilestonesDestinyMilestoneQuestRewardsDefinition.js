/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem from './DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem';

/**
 * The DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition model module.
 * @module model/DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition</code>.
     * If rewards are given in a quest - as opposed to overall in the entire Milestone - there&#39;s way less to track. We&#39;re going to simplify this contract as a result. However, this also gives us the opportunity to potentially put more than just item information into the reward data if we&#39;re able to mine it out in the future. Remember this if you come back and ask \&quot;why are quest reward items nested inside of their own class?\&quot;
     * @alias module:model/DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition
     */
    constructor() { 
        
        DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition} The populated <code>DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition();

            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition</code>.
     */
    static validateJSON(data) {
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The items that represent your reward for completing the quest.  Be warned, these could be \"dummy\" items: items that are only used to render a good-looking in-game tooltip, but aren't the actual items themselves.  For instance, when experience is given there's often a dummy item representing \"experience\", with quantity being the amount of experience you got. We don't have a programmatic association between those and whatever Progression is actually getting that experience... yet.
 * @member {Array.<module:model/DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem>} items
 */
DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition.prototype['items'] = undefined;






export default DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition;

