/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition from './DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition';

/**
 * The DestinyDefinitionsDestinyActivityModeDefinition model module.
 * @module model/DestinyDefinitionsDestinyActivityModeDefinition
 * @version 2.18.0
 */
class DestinyDefinitionsDestinyActivityModeDefinition {
    /**
     * Constructs a new <code>DestinyDefinitionsDestinyActivityModeDefinition</code>.
     * This definition represents an \&quot;Activity Mode\&quot; as it exists in the Historical Stats endpoints. An individual Activity Mode represents a collection of activities that are played in a certain way. For example, Nightfall Strikes are part of a \&quot;Nightfall\&quot; activity mode, and any activities played as the PVP mode \&quot;Clash\&quot; are part of the \&quot;Clash activity mode.  Activity modes are nested under each other in a hierarchy, so that if you ask for - for example - \&quot;AllPvP\&quot;, you will get any PVP activities that the user has played, regardless of what specific PVP mode was being played.
     * @alias module:model/DestinyDefinitionsDestinyActivityModeDefinition
     */
    constructor() { 
        
        DestinyDefinitionsDestinyActivityModeDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyDefinitionsDestinyActivityModeDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyDefinitionsDestinyActivityModeDefinition} obj Optional instance to populate.
     * @return {module:model/DestinyDefinitionsDestinyActivityModeDefinition} The populated <code>DestinyDefinitionsDestinyActivityModeDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyDefinitionsDestinyActivityModeDefinition();

            if (data.hasOwnProperty('activityModeCategory')) {
                obj['activityModeCategory'] = ApiClient.convertToType(data['activityModeCategory'], 'Number');
            }
            if (data.hasOwnProperty('activityModeMappings')) {
                obj['activityModeMappings'] = ApiClient.convertToType(data['activityModeMappings'], {'String': 'Number'});
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'Boolean');
            }
            if (data.hasOwnProperty('displayProperties')) {
                obj['displayProperties'] = DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.constructFromObject(data['displayProperties']);
            }
            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'Number');
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('isAggregateMode')) {
                obj['isAggregateMode'] = ApiClient.convertToType(data['isAggregateMode'], 'Boolean');
            }
            if (data.hasOwnProperty('isTeamBased')) {
                obj['isTeamBased'] = ApiClient.convertToType(data['isTeamBased'], 'Boolean');
            }
            if (data.hasOwnProperty('modeType')) {
                obj['modeType'] = ApiClient.convertToType(data['modeType'], 'Number');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'Number');
            }
            if (data.hasOwnProperty('parentHashes')) {
                obj['parentHashes'] = ApiClient.convertToType(data['parentHashes'], ['Number']);
            }
            if (data.hasOwnProperty('pgcrImage')) {
                obj['pgcrImage'] = ApiClient.convertToType(data['pgcrImage'], 'String');
            }
            if (data.hasOwnProperty('redacted')) {
                obj['redacted'] = ApiClient.convertToType(data['redacted'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyDefinitionsDestinyActivityModeDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyDefinitionsDestinyActivityModeDefinition</code>.
     */
    static validateJSON(data) {
        // validate the optional field `displayProperties`
        if (data['displayProperties']) { // data not null
          DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJSON(data['displayProperties']);
        }
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['parentHashes'])) {
            throw new Error("Expected the field `parentHashes` to be an array in the JSON data but got " + data['parentHashes']);
        }
        // ensure the json data is a string
        if (data['pgcrImage'] && !(typeof data['pgcrImage'] === 'string' || data['pgcrImage'] instanceof String)) {
            throw new Error("Expected the field `pgcrImage` to be a primitive type in the JSON string but got " + data['pgcrImage']);
        }

        return true;
    }


}



/**
 * The type of play being performed in broad terms (PVP, PVE)
 * @member {Number} activityModeCategory
 */
DestinyDefinitionsDestinyActivityModeDefinition.prototype['activityModeCategory'] = undefined;

/**
 * If this exists, the mode has specific Activities (referred to by the Key) that should instead map to other Activity Modes when they are played. This was useful in D1 for Private Matches, where we wanted to have Private Matches as an activity mode while still referring to the specific mode being played.
 * @member {Object.<String, Number>} activityModeMappings
 */
DestinyDefinitionsDestinyActivityModeDefinition.prototype['activityModeMappings'] = undefined;

/**
 * If FALSE, we want to ignore this type when we're showing activity modes in BNet UI. It will still be returned in case 3rd parties want to use it for any purpose.
 * @member {Boolean} display
 */
DestinyDefinitionsDestinyActivityModeDefinition.prototype['display'] = undefined;

/**
 * @member {module:model/DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition} displayProperties
 */
DestinyDefinitionsDestinyActivityModeDefinition.prototype['displayProperties'] = undefined;

/**
 * A Friendly identifier you can use for referring to this Activity Mode. We really only used this in our URLs, so... you know, take that for whatever it's worth.
 * @member {String} friendlyName
 */
DestinyDefinitionsDestinyActivityModeDefinition.prototype['friendlyName'] = undefined;

/**
 * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
 * @member {Number} hash
 */
DestinyDefinitionsDestinyActivityModeDefinition.prototype['hash'] = undefined;

/**
 * The index of the entity as it was found in the investment tables.
 * @member {Number} index
 */
DestinyDefinitionsDestinyActivityModeDefinition.prototype['index'] = undefined;

/**
 * If true, this mode is an aggregation of other, more specific modes rather than being a mode in itself. This includes modes that group Features/Events rather than Gameplay, such as Trials of The Nine: Trials of the Nine being an Event that is interesting to see aggregate data for, but when you play the activities within Trials of the Nine they are more specific activity modes such as Clash.
 * @member {Boolean} isAggregateMode
 */
DestinyDefinitionsDestinyActivityModeDefinition.prototype['isAggregateMode'] = undefined;

/**
 * If True, this mode has oppositional teams fighting against each other rather than \"Free-For-All\" or Co-operative modes of play.  Note that Aggregate modes are never marked as team based, even if they happen to be team based at the moment. At any time, an aggregate whose subordinates are only team based could be changed so that one or more aren't team based, and then this boolean won't make much sense (the aggregation would become \"sometimes team based\"). Let's not deal with that right now.
 * @member {Boolean} isTeamBased
 */
DestinyDefinitionsDestinyActivityModeDefinition.prototype['isTeamBased'] = undefined;

/**
 * The Enumeration value for this Activity Mode. Pass this identifier into Stats endpoints to get aggregate stats for this mode.
 * @member {Number} modeType
 */
DestinyDefinitionsDestinyActivityModeDefinition.prototype['modeType'] = undefined;

/**
 * The relative ordering of activity modes.
 * @member {Number} order
 */
DestinyDefinitionsDestinyActivityModeDefinition.prototype['order'] = undefined;

/**
 * The hash identifiers of the DestinyActivityModeDefinitions that represent all of the \"parent\" modes for this mode. For instance, the Nightfall Mode is also a member of AllStrikes and AllPvE.
 * @member {Array.<Number>} parentHashes
 */
DestinyDefinitionsDestinyActivityModeDefinition.prototype['parentHashes'] = undefined;

/**
 * If this activity mode has a related PGCR image, this will be the path to said image.
 * @member {String} pgcrImage
 */
DestinyDefinitionsDestinyActivityModeDefinition.prototype['pgcrImage'] = undefined;

/**
 * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
 * @member {Boolean} redacted
 */
DestinyDefinitionsDestinyActivityModeDefinition.prototype['redacted'] = undefined;






export default DestinyDefinitionsDestinyActivityModeDefinition;

