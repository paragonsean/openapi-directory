/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinyDestinyItemQuantity from './DestinyDestinyItemQuantity';

/**
 * The DestinyActivitiesDestinyPublicActivityStatus model module.
 * @module model/DestinyActivitiesDestinyPublicActivityStatus
 * @version 2.18.0
 */
class DestinyActivitiesDestinyPublicActivityStatus {
    /**
     * Constructs a new <code>DestinyActivitiesDestinyPublicActivityStatus</code>.
     * Represents the public-facing status of an activity: any data about what is currently active in the Activity, regardless of an individual character&#39;s progress in it.
     * @alias module:model/DestinyActivitiesDestinyPublicActivityStatus
     */
    constructor() { 
        
        DestinyActivitiesDestinyPublicActivityStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinyActivitiesDestinyPublicActivityStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinyActivitiesDestinyPublicActivityStatus} obj Optional instance to populate.
     * @return {module:model/DestinyActivitiesDestinyPublicActivityStatus} The populated <code>DestinyActivitiesDestinyPublicActivityStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinyActivitiesDestinyPublicActivityStatus();

            if (data.hasOwnProperty('challengeObjectiveHashes')) {
                obj['challengeObjectiveHashes'] = ApiClient.convertToType(data['challengeObjectiveHashes'], ['Number']);
            }
            if (data.hasOwnProperty('modifierHashes')) {
                obj['modifierHashes'] = ApiClient.convertToType(data['modifierHashes'], ['Number']);
            }
            if (data.hasOwnProperty('rewardTooltipItems')) {
                obj['rewardTooltipItems'] = ApiClient.convertToType(data['rewardTooltipItems'], [DestinyDestinyItemQuantity]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinyActivitiesDestinyPublicActivityStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinyActivitiesDestinyPublicActivityStatus</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['challengeObjectiveHashes'])) {
            throw new Error("Expected the field `challengeObjectiveHashes` to be an array in the JSON data but got " + data['challengeObjectiveHashes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['modifierHashes'])) {
            throw new Error("Expected the field `modifierHashes` to be an array in the JSON data but got " + data['modifierHashes']);
        }
        if (data['rewardTooltipItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rewardTooltipItems'])) {
                throw new Error("Expected the field `rewardTooltipItems` to be an array in the JSON data but got " + data['rewardTooltipItems']);
            }
            // validate the optional field `rewardTooltipItems` (array)
            for (const item of data['rewardTooltipItems']) {
                DestinyDestinyItemQuantity.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Active Challenges for the activity, if any - represented as hashes for DestinyObjectiveDefinitions.
 * @member {Array.<Number>} challengeObjectiveHashes
 */
DestinyActivitiesDestinyPublicActivityStatus.prototype['challengeObjectiveHashes'] = undefined;

/**
 * The active modifiers on this activity, if any - represented as hashes for DestinyActivityModifierDefinitions.
 * @member {Array.<Number>} modifierHashes
 */
DestinyActivitiesDestinyPublicActivityStatus.prototype['modifierHashes'] = undefined;

/**
 * If the activity itself provides any specific \"mock\" rewards, this will be the items and their quantity.  Why \"mock\", you ask? Because these are the rewards as they are represented in the tooltip of the Activity.  These are often pointers to fake items that look good in a tooltip, but represent an abstract concept of what you will get for a reward rather than the specific items you may obtain.
 * @member {Array.<module:model/DestinyDestinyItemQuantity>} rewardTooltipItems
 */
DestinyActivitiesDestinyPublicActivityStatus.prototype['rewardTooltipItems'] = undefined;






export default DestinyActivitiesDestinyPublicActivityStatus;

