/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Entities_Items_DestinyItemSocketState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Entities_Items_DestinyItemSocketState::OAIDestiny_Entities_Items_DestinyItemSocketState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Entities_Items_DestinyItemSocketState::OAIDestiny_Entities_Items_DestinyItemSocketState() {
    this->initializeModel();
}

OAIDestiny_Entities_Items_DestinyItemSocketState::~OAIDestiny_Entities_Items_DestinyItemSocketState() {}

void OAIDestiny_Entities_Items_DestinyItemSocketState::initializeModel() {

    m_enable_fail_indexes_isSet = false;
    m_enable_fail_indexes_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_is_visible_isSet = false;
    m_is_visible_isValid = false;

    m_plug_hash_isSet = false;
    m_plug_hash_isValid = false;
}

void OAIDestiny_Entities_Items_DestinyItemSocketState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Entities_Items_DestinyItemSocketState::fromJsonObject(QJsonObject json) {

    m_enable_fail_indexes_isValid = ::OpenAPI::fromJsonValue(m_enable_fail_indexes, json[QString("enableFailIndexes")]);
    m_enable_fail_indexes_isSet = !json[QString("enableFailIndexes")].isNull() && m_enable_fail_indexes_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("isEnabled")]);
    m_is_enabled_isSet = !json[QString("isEnabled")].isNull() && m_is_enabled_isValid;

    m_is_visible_isValid = ::OpenAPI::fromJsonValue(m_is_visible, json[QString("isVisible")]);
    m_is_visible_isSet = !json[QString("isVisible")].isNull() && m_is_visible_isValid;

    m_plug_hash_isValid = ::OpenAPI::fromJsonValue(m_plug_hash, json[QString("plugHash")]);
    m_plug_hash_isSet = !json[QString("plugHash")].isNull() && m_plug_hash_isValid;
}

QString OAIDestiny_Entities_Items_DestinyItemSocketState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Entities_Items_DestinyItemSocketState::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_fail_indexes.size() > 0) {
        obj.insert(QString("enableFailIndexes"), ::OpenAPI::toJsonValue(m_enable_fail_indexes));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("isEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_is_visible_isSet) {
        obj.insert(QString("isVisible"), ::OpenAPI::toJsonValue(m_is_visible));
    }
    if (m_plug_hash_isSet) {
        obj.insert(QString("plugHash"), ::OpenAPI::toJsonValue(m_plug_hash));
    }
    return obj;
}

QList<qint32> OAIDestiny_Entities_Items_DestinyItemSocketState::getEnableFailIndexes() const {
    return m_enable_fail_indexes;
}
void OAIDestiny_Entities_Items_DestinyItemSocketState::setEnableFailIndexes(const QList<qint32> &enable_fail_indexes) {
    m_enable_fail_indexes = enable_fail_indexes;
    m_enable_fail_indexes_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemSocketState::is_enable_fail_indexes_Set() const{
    return m_enable_fail_indexes_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemSocketState::is_enable_fail_indexes_Valid() const{
    return m_enable_fail_indexes_isValid;
}

bool OAIDestiny_Entities_Items_DestinyItemSocketState::isIsEnabled() const {
    return m_is_enabled;
}
void OAIDestiny_Entities_Items_DestinyItemSocketState::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemSocketState::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemSocketState::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

bool OAIDestiny_Entities_Items_DestinyItemSocketState::isIsVisible() const {
    return m_is_visible;
}
void OAIDestiny_Entities_Items_DestinyItemSocketState::setIsVisible(const bool &is_visible) {
    m_is_visible = is_visible;
    m_is_visible_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemSocketState::is_is_visible_Set() const{
    return m_is_visible_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemSocketState::is_is_visible_Valid() const{
    return m_is_visible_isValid;
}

qint32 OAIDestiny_Entities_Items_DestinyItemSocketState::getPlugHash() const {
    return m_plug_hash;
}
void OAIDestiny_Entities_Items_DestinyItemSocketState::setPlugHash(const qint32 &plug_hash) {
    m_plug_hash = plug_hash;
    m_plug_hash_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemSocketState::is_plug_hash_Set() const{
    return m_plug_hash_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemSocketState::is_plug_hash_Valid() const{
    return m_plug_hash_isValid;
}

bool OAIDestiny_Entities_Items_DestinyItemSocketState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_fail_indexes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_visible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plug_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Entities_Items_DestinyItemSocketState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
