/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition.h
 *
 * 
 */

#ifndef OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition_H
#define OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition;

class OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition();
    OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition(QString json);
    ~OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBlackIconImagePath() const;
    void setBlackIconImagePath(const QString &black_icon_image_path);
    bool is_black_icon_image_path_Set() const;
    bool is_black_icon_image_path_Valid() const;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition getDisplayProperties() const;
    void setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties);
    bool is_display_properties_Set() const;
    bool is_display_properties_Valid() const;

    qint32 getHash() const;
    void setHash(const qint32 &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    qint32 getIndex() const;
    void setIndex(const qint32 &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    QList<qint32> getLoadoutColorHashes() const;
    void setLoadoutColorHashes(const QList<qint32> &loadout_color_hashes);
    bool is_loadout_color_hashes_Set() const;
    bool is_loadout_color_hashes_Valid() const;

    qint32 getLoadoutCountPerCharacter() const;
    void setLoadoutCountPerCharacter(const qint32 &loadout_count_per_character);
    bool is_loadout_count_per_character_Set() const;
    bool is_loadout_count_per_character_Valid() const;

    QList<qint32> getLoadoutIconHashes() const;
    void setLoadoutIconHashes(const QList<qint32> &loadout_icon_hashes);
    bool is_loadout_icon_hashes_Set() const;
    bool is_loadout_icon_hashes_Valid() const;

    QList<qint32> getLoadoutNameHashes() const;
    void setLoadoutNameHashes(const QList<qint32> &loadout_name_hashes);
    bool is_loadout_name_hashes_Set() const;
    bool is_loadout_name_hashes_Valid() const;

    QList<qint32> getLoadoutPreviewFilterOutSocketCategoryHashes() const;
    void setLoadoutPreviewFilterOutSocketCategoryHashes(const QList<qint32> &loadout_preview_filter_out_socket_category_hashes);
    bool is_loadout_preview_filter_out_socket_category_hashes_Set() const;
    bool is_loadout_preview_filter_out_socket_category_hashes_Valid() const;

    QList<qint32> getLoadoutPreviewFilterOutSocketTypeHashes() const;
    void setLoadoutPreviewFilterOutSocketTypeHashes(const QList<qint32> &loadout_preview_filter_out_socket_type_hashes);
    bool is_loadout_preview_filter_out_socket_type_hashes_Set() const;
    bool is_loadout_preview_filter_out_socket_type_hashes_Valid() const;

    bool isRedacted() const;
    void setRedacted(const bool &redacted);
    bool is_redacted_Set() const;
    bool is_redacted_Valid() const;

    QString getWhiteIconImagePath() const;
    void setWhiteIconImagePath(const QString &white_icon_image_path);
    bool is_white_icon_image_path_Set() const;
    bool is_white_icon_image_path_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_black_icon_image_path;
    bool m_black_icon_image_path_isSet;
    bool m_black_icon_image_path_isValid;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition m_display_properties;
    bool m_display_properties_isSet;
    bool m_display_properties_isValid;

    qint32 m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    qint32 m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    QList<qint32> m_loadout_color_hashes;
    bool m_loadout_color_hashes_isSet;
    bool m_loadout_color_hashes_isValid;

    qint32 m_loadout_count_per_character;
    bool m_loadout_count_per_character_isSet;
    bool m_loadout_count_per_character_isValid;

    QList<qint32> m_loadout_icon_hashes;
    bool m_loadout_icon_hashes_isSet;
    bool m_loadout_icon_hashes_isValid;

    QList<qint32> m_loadout_name_hashes;
    bool m_loadout_name_hashes_isSet;
    bool m_loadout_name_hashes_isValid;

    QList<qint32> m_loadout_preview_filter_out_socket_category_hashes;
    bool m_loadout_preview_filter_out_socket_category_hashes_isSet;
    bool m_loadout_preview_filter_out_socket_category_hashes_isValid;

    QList<qint32> m_loadout_preview_filter_out_socket_type_hashes;
    bool m_loadout_preview_filter_out_socket_type_hashes_isSet;
    bool m_loadout_preview_filter_out_socket_type_hashes_isValid;

    bool m_redacted;
    bool m_redacted_isSet;
    bool m_redacted_isValid;

    QString m_white_icon_image_path;
    bool m_white_icon_image_path_isSet;
    bool m_white_icon_image_path_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition)

#endif // OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition_H
