/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyDisplayCategoryDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::OAIDestiny_Definitions_DestinyDisplayCategoryDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::OAIDestiny_Definitions_DestinyDisplayCategoryDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::~OAIDestiny_Definitions_DestinyDisplayCategoryDefinition() {}

void OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::initializeModel() {

    m_display_category_hash_isSet = false;
    m_display_category_hash_isValid = false;

    m_display_in_banner_isSet = false;
    m_display_in_banner_isValid = false;

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_display_style_hash_isSet = false;
    m_display_style_hash_isValid = false;

    m_display_style_identifier_isSet = false;
    m_display_style_identifier_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_progression_hash_isSet = false;
    m_progression_hash_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;
}

void OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::fromJsonObject(QJsonObject json) {

    m_display_category_hash_isValid = ::OpenAPI::fromJsonValue(m_display_category_hash, json[QString("displayCategoryHash")]);
    m_display_category_hash_isSet = !json[QString("displayCategoryHash")].isNull() && m_display_category_hash_isValid;

    m_display_in_banner_isValid = ::OpenAPI::fromJsonValue(m_display_in_banner, json[QString("displayInBanner")]);
    m_display_in_banner_isSet = !json[QString("displayInBanner")].isNull() && m_display_in_banner_isValid;

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_display_style_hash_isValid = ::OpenAPI::fromJsonValue(m_display_style_hash, json[QString("displayStyleHash")]);
    m_display_style_hash_isSet = !json[QString("displayStyleHash")].isNull() && m_display_style_hash_isValid;

    m_display_style_identifier_isValid = ::OpenAPI::fromJsonValue(m_display_style_identifier, json[QString("displayStyleIdentifier")]);
    m_display_style_identifier_isSet = !json[QString("displayStyleIdentifier")].isNull() && m_display_style_identifier_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_progression_hash_isValid = ::OpenAPI::fromJsonValue(m_progression_hash, json[QString("progressionHash")]);
    m_progression_hash_isSet = !json[QString("progressionHash")].isNull() && m_progression_hash_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;
}

QString OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_display_category_hash_isSet) {
        obj.insert(QString("displayCategoryHash"), ::OpenAPI::toJsonValue(m_display_category_hash));
    }
    if (m_display_in_banner_isSet) {
        obj.insert(QString("displayInBanner"), ::OpenAPI::toJsonValue(m_display_in_banner));
    }
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_display_style_hash_isSet) {
        obj.insert(QString("displayStyleHash"), ::OpenAPI::toJsonValue(m_display_style_hash));
    }
    if (m_display_style_identifier_isSet) {
        obj.insert(QString("displayStyleIdentifier"), ::OpenAPI::toJsonValue(m_display_style_identifier));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_progression_hash_isSet) {
        obj.insert(QString("progressionHash"), ::OpenAPI::toJsonValue(m_progression_hash));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::getDisplayCategoryHash() const {
    return m_display_category_hash;
}
void OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::setDisplayCategoryHash(const qint32 &display_category_hash) {
    m_display_category_hash = display_category_hash;
    m_display_category_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::is_display_category_hash_Set() const{
    return m_display_category_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::is_display_category_hash_Valid() const{
    return m_display_category_hash_isValid;
}

bool OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::isDisplayInBanner() const {
    return m_display_in_banner;
}
void OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::setDisplayInBanner(const bool &display_in_banner) {
    m_display_in_banner = display_in_banner;
    m_display_in_banner_isSet = true;
}

bool OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::is_display_in_banner_Set() const{
    return m_display_in_banner_isSet;
}

bool OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::is_display_in_banner_Valid() const{
    return m_display_in_banner_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

qint32 OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::getDisplayStyleHash() const {
    return m_display_style_hash;
}
void OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::setDisplayStyleHash(const qint32 &display_style_hash) {
    m_display_style_hash = display_style_hash;
    m_display_style_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::is_display_style_hash_Set() const{
    return m_display_style_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::is_display_style_hash_Valid() const{
    return m_display_style_hash_isValid;
}

QString OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::getDisplayStyleIdentifier() const {
    return m_display_style_identifier;
}
void OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::setDisplayStyleIdentifier(const QString &display_style_identifier) {
    m_display_style_identifier = display_style_identifier;
    m_display_style_identifier_isSet = true;
}

bool OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::is_display_style_identifier_Set() const{
    return m_display_style_identifier_isSet;
}

bool OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::is_display_style_identifier_Valid() const{
    return m_display_style_identifier_isValid;
}

QString OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::getIdentifier() const {
    return m_identifier;
}
void OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::is_identifier_Valid() const{
    return m_identifier_isValid;
}

qint32 OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::is_index_Valid() const{
    return m_index_isValid;
}

qint32 OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::getProgressionHash() const {
    return m_progression_hash;
}
void OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::setProgressionHash(const qint32 &progression_hash) {
    m_progression_hash = progression_hash;
    m_progression_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::is_progression_hash_Set() const{
    return m_progression_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::is_progression_hash_Valid() const{
    return m_progression_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::getSortOrder() const {
    return m_sort_order;
}
void OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_category_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_in_banner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_style_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_style_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progression_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyDisplayCategoryDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
