/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod() {
    this->initializeModel();
}

OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::~OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod() {}

void OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::initializeModel() {

    m_all_time_isSet = false;
    m_all_time_isValid = false;

    m_all_time_tier1_isSet = false;
    m_all_time_tier1_isValid = false;

    m_all_time_tier2_isSet = false;
    m_all_time_tier2_isValid = false;

    m_all_time_tier3_isSet = false;
    m_all_time_tier3_isValid = false;

    m_daily_isSet = false;
    m_daily_isValid = false;

    m_monthly_isSet = false;
    m_monthly_isValid = false;
}

void OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::fromJsonObject(QJsonObject json) {

    m_all_time_isValid = ::OpenAPI::fromJsonValue(m_all_time, json[QString("allTime")]);
    m_all_time_isSet = !json[QString("allTime")].isNull() && m_all_time_isValid;

    m_all_time_tier1_isValid = ::OpenAPI::fromJsonValue(m_all_time_tier1, json[QString("allTimeTier1")]);
    m_all_time_tier1_isSet = !json[QString("allTimeTier1")].isNull() && m_all_time_tier1_isValid;

    m_all_time_tier2_isValid = ::OpenAPI::fromJsonValue(m_all_time_tier2, json[QString("allTimeTier2")]);
    m_all_time_tier2_isSet = !json[QString("allTimeTier2")].isNull() && m_all_time_tier2_isValid;

    m_all_time_tier3_isValid = ::OpenAPI::fromJsonValue(m_all_time_tier3, json[QString("allTimeTier3")]);
    m_all_time_tier3_isSet = !json[QString("allTimeTier3")].isNull() && m_all_time_tier3_isValid;

    m_daily_isValid = ::OpenAPI::fromJsonValue(m_daily, json[QString("daily")]);
    m_daily_isSet = !json[QString("daily")].isNull() && m_daily_isValid;

    m_monthly_isValid = ::OpenAPI::fromJsonValue(m_monthly, json[QString("monthly")]);
    m_monthly_isSet = !json[QString("monthly")].isNull() && m_monthly_isValid;
}

QString OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::asJsonObject() const {
    QJsonObject obj;
    if (m_all_time.size() > 0) {
        obj.insert(QString("allTime"), ::OpenAPI::toJsonValue(m_all_time));
    }
    if (m_all_time_tier1.size() > 0) {
        obj.insert(QString("allTimeTier1"), ::OpenAPI::toJsonValue(m_all_time_tier1));
    }
    if (m_all_time_tier2.size() > 0) {
        obj.insert(QString("allTimeTier2"), ::OpenAPI::toJsonValue(m_all_time_tier2));
    }
    if (m_all_time_tier3.size() > 0) {
        obj.insert(QString("allTimeTier3"), ::OpenAPI::toJsonValue(m_all_time_tier3));
    }
    if (m_daily.size() > 0) {
        obj.insert(QString("daily"), ::OpenAPI::toJsonValue(m_daily));
    }
    if (m_monthly.size() > 0) {
        obj.insert(QString("monthly"), ::OpenAPI::toJsonValue(m_monthly));
    }
    return obj;
}

QMap<QString, OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue> OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::getAllTime() const {
    return m_all_time;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::setAllTime(const QMap<QString, OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue> &all_time) {
    m_all_time = all_time;
    m_all_time_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::is_all_time_Set() const{
    return m_all_time_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::is_all_time_Valid() const{
    return m_all_time_isValid;
}

QMap<QString, OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue> OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::getAllTimeTier1() const {
    return m_all_time_tier1;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::setAllTimeTier1(const QMap<QString, OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue> &all_time_tier1) {
    m_all_time_tier1 = all_time_tier1;
    m_all_time_tier1_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::is_all_time_tier1_Set() const{
    return m_all_time_tier1_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::is_all_time_tier1_Valid() const{
    return m_all_time_tier1_isValid;
}

QMap<QString, OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue> OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::getAllTimeTier2() const {
    return m_all_time_tier2;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::setAllTimeTier2(const QMap<QString, OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue> &all_time_tier2) {
    m_all_time_tier2 = all_time_tier2;
    m_all_time_tier2_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::is_all_time_tier2_Set() const{
    return m_all_time_tier2_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::is_all_time_tier2_Valid() const{
    return m_all_time_tier2_isValid;
}

QMap<QString, OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue> OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::getAllTimeTier3() const {
    return m_all_time_tier3;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::setAllTimeTier3(const QMap<QString, OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue> &all_time_tier3) {
    m_all_time_tier3 = all_time_tier3;
    m_all_time_tier3_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::is_all_time_tier3_Set() const{
    return m_all_time_tier3_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::is_all_time_tier3_Valid() const{
    return m_all_time_tier3_isValid;
}

QList<OAIDestiny_HistoricalStats_DestinyHistoricalStatsPeriodGroup> OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::getDaily() const {
    return m_daily;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::setDaily(const QList<OAIDestiny_HistoricalStats_DestinyHistoricalStatsPeriodGroup> &daily) {
    m_daily = daily;
    m_daily_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::is_daily_Set() const{
    return m_daily_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::is_daily_Valid() const{
    return m_daily_isValid;
}

QList<OAIDestiny_HistoricalStats_DestinyHistoricalStatsPeriodGroup> OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::getMonthly() const {
    return m_monthly;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::setMonthly(const QList<OAIDestiny_HistoricalStats_DestinyHistoricalStatsPeriodGroup> &monthly) {
    m_monthly = monthly;
    m_monthly_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::is_monthly_Set() const{
    return m_monthly_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::is_monthly_Valid() const{
    return m_monthly_isValid;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_time.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_time_tier1.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_time_tier2.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_time_tier3.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
