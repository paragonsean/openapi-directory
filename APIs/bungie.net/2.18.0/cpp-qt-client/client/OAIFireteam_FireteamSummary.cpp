/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFireteam_FireteamSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFireteam_FireteamSummary::OAIFireteam_FireteamSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFireteam_FireteamSummary::OAIFireteam_FireteamSummary() {
    this->initializeModel();
}

OAIFireteam_FireteamSummary::~OAIFireteam_FireteamSummary() {}

void OAIFireteam_FireteamSummary::initializeModel() {

    m_activity_type_isSet = false;
    m_activity_type_isValid = false;

    m_alternate_slot_count_isSet = false;
    m_alternate_slot_count_isValid = false;

    m_available_alternate_slot_count_isSet = false;
    m_available_alternate_slot_count_isValid = false;

    m_available_player_slot_count_isSet = false;
    m_available_player_slot_count_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_date_player_modified_isSet = false;
    m_date_player_modified_isValid = false;

    m_fireteam_id_isSet = false;
    m_fireteam_id_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_is_immediate_isSet = false;
    m_is_immediate_isValid = false;

    m_is_public_isSet = false;
    m_is_public_isValid = false;

    m_is_valid_isSet = false;
    m_is_valid_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_owner_current_guardian_rank_snapshot_isSet = false;
    m_owner_current_guardian_rank_snapshot_isValid = false;

    m_owner_highest_lifetime_guardian_rank_snapshot_isSet = false;
    m_owner_highest_lifetime_guardian_rank_snapshot_isValid = false;

    m_owner_membership_id_isSet = false;
    m_owner_membership_id_isValid = false;

    m_owner_total_commendation_score_snapshot_isSet = false;
    m_owner_total_commendation_score_snapshot_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_player_slot_count_isSet = false;
    m_player_slot_count_isValid = false;

    m_scheduled_time_isSet = false;
    m_scheduled_time_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_title_before_moderation_isSet = false;
    m_title_before_moderation_isValid = false;
}

void OAIFireteam_FireteamSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFireteam_FireteamSummary::fromJsonObject(QJsonObject json) {

    m_activity_type_isValid = ::OpenAPI::fromJsonValue(m_activity_type, json[QString("activityType")]);
    m_activity_type_isSet = !json[QString("activityType")].isNull() && m_activity_type_isValid;

    m_alternate_slot_count_isValid = ::OpenAPI::fromJsonValue(m_alternate_slot_count, json[QString("alternateSlotCount")]);
    m_alternate_slot_count_isSet = !json[QString("alternateSlotCount")].isNull() && m_alternate_slot_count_isValid;

    m_available_alternate_slot_count_isValid = ::OpenAPI::fromJsonValue(m_available_alternate_slot_count, json[QString("availableAlternateSlotCount")]);
    m_available_alternate_slot_count_isSet = !json[QString("availableAlternateSlotCount")].isNull() && m_available_alternate_slot_count_isValid;

    m_available_player_slot_count_isValid = ::OpenAPI::fromJsonValue(m_available_player_slot_count, json[QString("availablePlayerSlotCount")]);
    m_available_player_slot_count_isSet = !json[QString("availablePlayerSlotCount")].isNull() && m_available_player_slot_count_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_date_player_modified_isValid = ::OpenAPI::fromJsonValue(m_date_player_modified, json[QString("datePlayerModified")]);
    m_date_player_modified_isSet = !json[QString("datePlayerModified")].isNull() && m_date_player_modified_isValid;

    m_fireteam_id_isValid = ::OpenAPI::fromJsonValue(m_fireteam_id, json[QString("fireteamId")]);
    m_fireteam_id_isSet = !json[QString("fireteamId")].isNull() && m_fireteam_id_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
    m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;

    m_is_immediate_isValid = ::OpenAPI::fromJsonValue(m_is_immediate, json[QString("isImmediate")]);
    m_is_immediate_isSet = !json[QString("isImmediate")].isNull() && m_is_immediate_isValid;

    m_is_public_isValid = ::OpenAPI::fromJsonValue(m_is_public, json[QString("isPublic")]);
    m_is_public_isSet = !json[QString("isPublic")].isNull() && m_is_public_isValid;

    m_is_valid_isValid = ::OpenAPI::fromJsonValue(m_is_valid, json[QString("isValid")]);
    m_is_valid_isSet = !json[QString("isValid")].isNull() && m_is_valid_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_owner_current_guardian_rank_snapshot_isValid = ::OpenAPI::fromJsonValue(m_owner_current_guardian_rank_snapshot, json[QString("ownerCurrentGuardianRankSnapshot")]);
    m_owner_current_guardian_rank_snapshot_isSet = !json[QString("ownerCurrentGuardianRankSnapshot")].isNull() && m_owner_current_guardian_rank_snapshot_isValid;

    m_owner_highest_lifetime_guardian_rank_snapshot_isValid = ::OpenAPI::fromJsonValue(m_owner_highest_lifetime_guardian_rank_snapshot, json[QString("ownerHighestLifetimeGuardianRankSnapshot")]);
    m_owner_highest_lifetime_guardian_rank_snapshot_isSet = !json[QString("ownerHighestLifetimeGuardianRankSnapshot")].isNull() && m_owner_highest_lifetime_guardian_rank_snapshot_isValid;

    m_owner_membership_id_isValid = ::OpenAPI::fromJsonValue(m_owner_membership_id, json[QString("ownerMembershipId")]);
    m_owner_membership_id_isSet = !json[QString("ownerMembershipId")].isNull() && m_owner_membership_id_isValid;

    m_owner_total_commendation_score_snapshot_isValid = ::OpenAPI::fromJsonValue(m_owner_total_commendation_score_snapshot, json[QString("ownerTotalCommendationScoreSnapshot")]);
    m_owner_total_commendation_score_snapshot_isSet = !json[QString("ownerTotalCommendationScoreSnapshot")].isNull() && m_owner_total_commendation_score_snapshot_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_player_slot_count_isValid = ::OpenAPI::fromJsonValue(m_player_slot_count, json[QString("playerSlotCount")]);
    m_player_slot_count_isSet = !json[QString("playerSlotCount")].isNull() && m_player_slot_count_isValid;

    m_scheduled_time_isValid = ::OpenAPI::fromJsonValue(m_scheduled_time, json[QString("scheduledTime")]);
    m_scheduled_time_isSet = !json[QString("scheduledTime")].isNull() && m_scheduled_time_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_title_before_moderation_isValid = ::OpenAPI::fromJsonValue(m_title_before_moderation, json[QString("titleBeforeModeration")]);
    m_title_before_moderation_isSet = !json[QString("titleBeforeModeration")].isNull() && m_title_before_moderation_isValid;
}

QString OAIFireteam_FireteamSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFireteam_FireteamSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_type_isSet) {
        obj.insert(QString("activityType"), ::OpenAPI::toJsonValue(m_activity_type));
    }
    if (m_alternate_slot_count_isSet) {
        obj.insert(QString("alternateSlotCount"), ::OpenAPI::toJsonValue(m_alternate_slot_count));
    }
    if (m_available_alternate_slot_count_isSet) {
        obj.insert(QString("availableAlternateSlotCount"), ::OpenAPI::toJsonValue(m_available_alternate_slot_count));
    }
    if (m_available_player_slot_count_isSet) {
        obj.insert(QString("availablePlayerSlotCount"), ::OpenAPI::toJsonValue(m_available_player_slot_count));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_date_player_modified_isSet) {
        obj.insert(QString("datePlayerModified"), ::OpenAPI::toJsonValue(m_date_player_modified));
    }
    if (m_fireteam_id_isSet) {
        obj.insert(QString("fireteamId"), ::OpenAPI::toJsonValue(m_fireteam_id));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_is_immediate_isSet) {
        obj.insert(QString("isImmediate"), ::OpenAPI::toJsonValue(m_is_immediate));
    }
    if (m_is_public_isSet) {
        obj.insert(QString("isPublic"), ::OpenAPI::toJsonValue(m_is_public));
    }
    if (m_is_valid_isSet) {
        obj.insert(QString("isValid"), ::OpenAPI::toJsonValue(m_is_valid));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_owner_current_guardian_rank_snapshot_isSet) {
        obj.insert(QString("ownerCurrentGuardianRankSnapshot"), ::OpenAPI::toJsonValue(m_owner_current_guardian_rank_snapshot));
    }
    if (m_owner_highest_lifetime_guardian_rank_snapshot_isSet) {
        obj.insert(QString("ownerHighestLifetimeGuardianRankSnapshot"), ::OpenAPI::toJsonValue(m_owner_highest_lifetime_guardian_rank_snapshot));
    }
    if (m_owner_membership_id_isSet) {
        obj.insert(QString("ownerMembershipId"), ::OpenAPI::toJsonValue(m_owner_membership_id));
    }
    if (m_owner_total_commendation_score_snapshot_isSet) {
        obj.insert(QString("ownerTotalCommendationScoreSnapshot"), ::OpenAPI::toJsonValue(m_owner_total_commendation_score_snapshot));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_player_slot_count_isSet) {
        obj.insert(QString("playerSlotCount"), ::OpenAPI::toJsonValue(m_player_slot_count));
    }
    if (m_scheduled_time_isSet) {
        obj.insert(QString("scheduledTime"), ::OpenAPI::toJsonValue(m_scheduled_time));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_title_before_moderation_isSet) {
        obj.insert(QString("titleBeforeModeration"), ::OpenAPI::toJsonValue(m_title_before_moderation));
    }
    return obj;
}

qint32 OAIFireteam_FireteamSummary::getActivityType() const {
    return m_activity_type;
}
void OAIFireteam_FireteamSummary::setActivityType(const qint32 &activity_type) {
    m_activity_type = activity_type;
    m_activity_type_isSet = true;
}

bool OAIFireteam_FireteamSummary::is_activity_type_Set() const{
    return m_activity_type_isSet;
}

bool OAIFireteam_FireteamSummary::is_activity_type_Valid() const{
    return m_activity_type_isValid;
}

qint32 OAIFireteam_FireteamSummary::getAlternateSlotCount() const {
    return m_alternate_slot_count;
}
void OAIFireteam_FireteamSummary::setAlternateSlotCount(const qint32 &alternate_slot_count) {
    m_alternate_slot_count = alternate_slot_count;
    m_alternate_slot_count_isSet = true;
}

bool OAIFireteam_FireteamSummary::is_alternate_slot_count_Set() const{
    return m_alternate_slot_count_isSet;
}

bool OAIFireteam_FireteamSummary::is_alternate_slot_count_Valid() const{
    return m_alternate_slot_count_isValid;
}

qint32 OAIFireteam_FireteamSummary::getAvailableAlternateSlotCount() const {
    return m_available_alternate_slot_count;
}
void OAIFireteam_FireteamSummary::setAvailableAlternateSlotCount(const qint32 &available_alternate_slot_count) {
    m_available_alternate_slot_count = available_alternate_slot_count;
    m_available_alternate_slot_count_isSet = true;
}

bool OAIFireteam_FireteamSummary::is_available_alternate_slot_count_Set() const{
    return m_available_alternate_slot_count_isSet;
}

bool OAIFireteam_FireteamSummary::is_available_alternate_slot_count_Valid() const{
    return m_available_alternate_slot_count_isValid;
}

qint32 OAIFireteam_FireteamSummary::getAvailablePlayerSlotCount() const {
    return m_available_player_slot_count;
}
void OAIFireteam_FireteamSummary::setAvailablePlayerSlotCount(const qint32 &available_player_slot_count) {
    m_available_player_slot_count = available_player_slot_count;
    m_available_player_slot_count_isSet = true;
}

bool OAIFireteam_FireteamSummary::is_available_player_slot_count_Set() const{
    return m_available_player_slot_count_isSet;
}

bool OAIFireteam_FireteamSummary::is_available_player_slot_count_Valid() const{
    return m_available_player_slot_count_isValid;
}

QDateTime OAIFireteam_FireteamSummary::getDateCreated() const {
    return m_date_created;
}
void OAIFireteam_FireteamSummary::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIFireteam_FireteamSummary::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIFireteam_FireteamSummary::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIFireteam_FireteamSummary::getDateModified() const {
    return m_date_modified;
}
void OAIFireteam_FireteamSummary::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIFireteam_FireteamSummary::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIFireteam_FireteamSummary::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

QDateTime OAIFireteam_FireteamSummary::getDatePlayerModified() const {
    return m_date_player_modified;
}
void OAIFireteam_FireteamSummary::setDatePlayerModified(const QDateTime &date_player_modified) {
    m_date_player_modified = date_player_modified;
    m_date_player_modified_isSet = true;
}

bool OAIFireteam_FireteamSummary::is_date_player_modified_Set() const{
    return m_date_player_modified_isSet;
}

bool OAIFireteam_FireteamSummary::is_date_player_modified_Valid() const{
    return m_date_player_modified_isValid;
}

qint64 OAIFireteam_FireteamSummary::getFireteamId() const {
    return m_fireteam_id;
}
void OAIFireteam_FireteamSummary::setFireteamId(const qint64 &fireteam_id) {
    m_fireteam_id = fireteam_id;
    m_fireteam_id_isSet = true;
}

bool OAIFireteam_FireteamSummary::is_fireteam_id_Set() const{
    return m_fireteam_id_isSet;
}

bool OAIFireteam_FireteamSummary::is_fireteam_id_Valid() const{
    return m_fireteam_id_isValid;
}

qint64 OAIFireteam_FireteamSummary::getGroupId() const {
    return m_group_id;
}
void OAIFireteam_FireteamSummary::setGroupId(const qint64 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIFireteam_FireteamSummary::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIFireteam_FireteamSummary::is_group_id_Valid() const{
    return m_group_id_isValid;
}

bool OAIFireteam_FireteamSummary::isIsImmediate() const {
    return m_is_immediate;
}
void OAIFireteam_FireteamSummary::setIsImmediate(const bool &is_immediate) {
    m_is_immediate = is_immediate;
    m_is_immediate_isSet = true;
}

bool OAIFireteam_FireteamSummary::is_is_immediate_Set() const{
    return m_is_immediate_isSet;
}

bool OAIFireteam_FireteamSummary::is_is_immediate_Valid() const{
    return m_is_immediate_isValid;
}

bool OAIFireteam_FireteamSummary::isIsPublic() const {
    return m_is_public;
}
void OAIFireteam_FireteamSummary::setIsPublic(const bool &is_public) {
    m_is_public = is_public;
    m_is_public_isSet = true;
}

bool OAIFireteam_FireteamSummary::is_is_public_Set() const{
    return m_is_public_isSet;
}

bool OAIFireteam_FireteamSummary::is_is_public_Valid() const{
    return m_is_public_isValid;
}

bool OAIFireteam_FireteamSummary::isIsValid() const {
    return m_is_valid;
}
void OAIFireteam_FireteamSummary::setIsValid(const bool &is_valid) {
    m_is_valid = is_valid;
    m_is_valid_isSet = true;
}

bool OAIFireteam_FireteamSummary::is_is_valid_Set() const{
    return m_is_valid_isSet;
}

bool OAIFireteam_FireteamSummary::is_is_valid_Valid() const{
    return m_is_valid_isValid;
}

QString OAIFireteam_FireteamSummary::getLocale() const {
    return m_locale;
}
void OAIFireteam_FireteamSummary::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIFireteam_FireteamSummary::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIFireteam_FireteamSummary::is_locale_Valid() const{
    return m_locale_isValid;
}

qint32 OAIFireteam_FireteamSummary::getOwnerCurrentGuardianRankSnapshot() const {
    return m_owner_current_guardian_rank_snapshot;
}
void OAIFireteam_FireteamSummary::setOwnerCurrentGuardianRankSnapshot(const qint32 &owner_current_guardian_rank_snapshot) {
    m_owner_current_guardian_rank_snapshot = owner_current_guardian_rank_snapshot;
    m_owner_current_guardian_rank_snapshot_isSet = true;
}

bool OAIFireteam_FireteamSummary::is_owner_current_guardian_rank_snapshot_Set() const{
    return m_owner_current_guardian_rank_snapshot_isSet;
}

bool OAIFireteam_FireteamSummary::is_owner_current_guardian_rank_snapshot_Valid() const{
    return m_owner_current_guardian_rank_snapshot_isValid;
}

qint32 OAIFireteam_FireteamSummary::getOwnerHighestLifetimeGuardianRankSnapshot() const {
    return m_owner_highest_lifetime_guardian_rank_snapshot;
}
void OAIFireteam_FireteamSummary::setOwnerHighestLifetimeGuardianRankSnapshot(const qint32 &owner_highest_lifetime_guardian_rank_snapshot) {
    m_owner_highest_lifetime_guardian_rank_snapshot = owner_highest_lifetime_guardian_rank_snapshot;
    m_owner_highest_lifetime_guardian_rank_snapshot_isSet = true;
}

bool OAIFireteam_FireteamSummary::is_owner_highest_lifetime_guardian_rank_snapshot_Set() const{
    return m_owner_highest_lifetime_guardian_rank_snapshot_isSet;
}

bool OAIFireteam_FireteamSummary::is_owner_highest_lifetime_guardian_rank_snapshot_Valid() const{
    return m_owner_highest_lifetime_guardian_rank_snapshot_isValid;
}

qint64 OAIFireteam_FireteamSummary::getOwnerMembershipId() const {
    return m_owner_membership_id;
}
void OAIFireteam_FireteamSummary::setOwnerMembershipId(const qint64 &owner_membership_id) {
    m_owner_membership_id = owner_membership_id;
    m_owner_membership_id_isSet = true;
}

bool OAIFireteam_FireteamSummary::is_owner_membership_id_Set() const{
    return m_owner_membership_id_isSet;
}

bool OAIFireteam_FireteamSummary::is_owner_membership_id_Valid() const{
    return m_owner_membership_id_isValid;
}

qint32 OAIFireteam_FireteamSummary::getOwnerTotalCommendationScoreSnapshot() const {
    return m_owner_total_commendation_score_snapshot;
}
void OAIFireteam_FireteamSummary::setOwnerTotalCommendationScoreSnapshot(const qint32 &owner_total_commendation_score_snapshot) {
    m_owner_total_commendation_score_snapshot = owner_total_commendation_score_snapshot;
    m_owner_total_commendation_score_snapshot_isSet = true;
}

bool OAIFireteam_FireteamSummary::is_owner_total_commendation_score_snapshot_Set() const{
    return m_owner_total_commendation_score_snapshot_isSet;
}

bool OAIFireteam_FireteamSummary::is_owner_total_commendation_score_snapshot_Valid() const{
    return m_owner_total_commendation_score_snapshot_isValid;
}

qint32 OAIFireteam_FireteamSummary::getPlatform() const {
    return m_platform;
}
void OAIFireteam_FireteamSummary::setPlatform(const qint32 &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIFireteam_FireteamSummary::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIFireteam_FireteamSummary::is_platform_Valid() const{
    return m_platform_isValid;
}

qint32 OAIFireteam_FireteamSummary::getPlayerSlotCount() const {
    return m_player_slot_count;
}
void OAIFireteam_FireteamSummary::setPlayerSlotCount(const qint32 &player_slot_count) {
    m_player_slot_count = player_slot_count;
    m_player_slot_count_isSet = true;
}

bool OAIFireteam_FireteamSummary::is_player_slot_count_Set() const{
    return m_player_slot_count_isSet;
}

bool OAIFireteam_FireteamSummary::is_player_slot_count_Valid() const{
    return m_player_slot_count_isValid;
}

QDateTime OAIFireteam_FireteamSummary::getScheduledTime() const {
    return m_scheduled_time;
}
void OAIFireteam_FireteamSummary::setScheduledTime(const QDateTime &scheduled_time) {
    m_scheduled_time = scheduled_time;
    m_scheduled_time_isSet = true;
}

bool OAIFireteam_FireteamSummary::is_scheduled_time_Set() const{
    return m_scheduled_time_isSet;
}

bool OAIFireteam_FireteamSummary::is_scheduled_time_Valid() const{
    return m_scheduled_time_isValid;
}

QString OAIFireteam_FireteamSummary::getTitle() const {
    return m_title;
}
void OAIFireteam_FireteamSummary::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIFireteam_FireteamSummary::is_title_Set() const{
    return m_title_isSet;
}

bool OAIFireteam_FireteamSummary::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIFireteam_FireteamSummary::getTitleBeforeModeration() const {
    return m_title_before_moderation;
}
void OAIFireteam_FireteamSummary::setTitleBeforeModeration(const QString &title_before_moderation) {
    m_title_before_moderation = title_before_moderation;
    m_title_before_moderation_isSet = true;
}

bool OAIFireteam_FireteamSummary::is_title_before_moderation_Set() const{
    return m_title_before_moderation_isSet;
}

bool OAIFireteam_FireteamSummary::is_title_before_moderation_Valid() const{
    return m_title_before_moderation_isValid;
}

bool OAIFireteam_FireteamSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_slot_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_alternate_slot_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_player_slot_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_player_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fireteam_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_immediate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_current_guardian_rank_snapshot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_highest_lifetime_guardian_rank_snapshot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_membership_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_total_commendation_score_snapshot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_slot_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_before_moderation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFireteam_FireteamSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
