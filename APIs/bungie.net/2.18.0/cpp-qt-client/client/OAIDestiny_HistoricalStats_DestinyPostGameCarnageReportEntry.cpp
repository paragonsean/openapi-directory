/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry() {
    this->initializeModel();
}

OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::~OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry() {}

void OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::initializeModel() {

    m_character_id_isSet = false;
    m_character_id_isValid = false;

    m_extended_isSet = false;
    m_extended_isValid = false;

    m_player_isSet = false;
    m_player_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_standing_isSet = false;
    m_standing_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::fromJsonObject(QJsonObject json) {

    m_character_id_isValid = ::OpenAPI::fromJsonValue(m_character_id, json[QString("characterId")]);
    m_character_id_isSet = !json[QString("characterId")].isNull() && m_character_id_isValid;

    m_extended_isValid = ::OpenAPI::fromJsonValue(m_extended, json[QString("extended")]);
    m_extended_isSet = !json[QString("extended")].isNull() && m_extended_isValid;

    m_player_isValid = ::OpenAPI::fromJsonValue(m_player, json[QString("player")]);
    m_player_isSet = !json[QString("player")].isNull() && m_player_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_standing_isValid = ::OpenAPI::fromJsonValue(m_standing, json[QString("standing")]);
    m_standing_isSet = !json[QString("standing")].isNull() && m_standing_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_character_id_isSet) {
        obj.insert(QString("characterId"), ::OpenAPI::toJsonValue(m_character_id));
    }
    if (m_extended.isSet()) {
        obj.insert(QString("extended"), ::OpenAPI::toJsonValue(m_extended));
    }
    if (m_player.isSet()) {
        obj.insert(QString("player"), ::OpenAPI::toJsonValue(m_player));
    }
    if (m_score.isSet()) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_standing_isSet) {
        obj.insert(QString("standing"), ::OpenAPI::toJsonValue(m_standing));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

qint64 OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::getCharacterId() const {
    return m_character_id;
}
void OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::setCharacterId(const qint64 &character_id) {
    m_character_id = character_id;
    m_character_id_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::is_character_id_Set() const{
    return m_character_id_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::is_character_id_Valid() const{
    return m_character_id_isValid;
}

OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportExtendedData OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::getExtended() const {
    return m_extended;
}
void OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::setExtended(const OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportExtendedData &extended) {
    m_extended = extended;
    m_extended_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::is_extended_Set() const{
    return m_extended_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::is_extended_Valid() const{
    return m_extended_isValid;
}

OAIDestiny_HistoricalStats_DestinyPlayer OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::getPlayer() const {
    return m_player;
}
void OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::setPlayer(const OAIDestiny_HistoricalStats_DestinyPlayer &player) {
    m_player = player;
    m_player_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::is_player_Set() const{
    return m_player_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::is_player_Valid() const{
    return m_player_isValid;
}

OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::getScore() const {
    return m_score;
}
void OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::setScore(const OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::is_score_Set() const{
    return m_score_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::is_score_Valid() const{
    return m_score_isValid;
}

qint32 OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::getStanding() const {
    return m_standing;
}
void OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::setStanding(const qint32 &standing) {
    m_standing = standing;
    m_standing_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::is_standing_Set() const{
    return m_standing_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::is_standing_Valid() const{
    return m_standing_isValid;
}

QMap<QString, OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue> OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::getValues() const {
    return m_values;
}
void OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::setValues(const QMap<QString, OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::is_values_Set() const{
    return m_values_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_character_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_player.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_score.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_standing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
