/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_Seasons_DestinySeasonDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::OAIDestiny_Definitions_Seasons_DestinySeasonDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::OAIDestiny_Definitions_Seasons_DestinySeasonDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::~OAIDestiny_Definitions_Seasons_DestinySeasonDefinition() {}

void OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::initializeModel() {

    m_artifact_item_hash_isSet = false;
    m_artifact_item_hash_isValid = false;

    m_background_image_path_isSet = false;
    m_background_image_path_isValid = false;

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_preview_isSet = false;
    m_preview_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;

    m_seal_presentation_node_hash_isSet = false;
    m_seal_presentation_node_hash_isValid = false;

    m_season_number_isSet = false;
    m_season_number_isValid = false;

    m_season_pass_hash_isSet = false;
    m_season_pass_hash_isValid = false;

    m_season_pass_progression_hash_isSet = false;
    m_season_pass_progression_hash_isValid = false;

    m_seasonal_challenges_presentation_node_hash_isSet = false;
    m_seasonal_challenges_presentation_node_hash_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::fromJsonObject(QJsonObject json) {

    m_artifact_item_hash_isValid = ::OpenAPI::fromJsonValue(m_artifact_item_hash, json[QString("artifactItemHash")]);
    m_artifact_item_hash_isSet = !json[QString("artifactItemHash")].isNull() && m_artifact_item_hash_isValid;

    m_background_image_path_isValid = ::OpenAPI::fromJsonValue(m_background_image_path, json[QString("backgroundImagePath")]);
    m_background_image_path_isSet = !json[QString("backgroundImagePath")].isNull() && m_background_image_path_isValid;

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_preview_isValid = ::OpenAPI::fromJsonValue(m_preview, json[QString("preview")]);
    m_preview_isSet = !json[QString("preview")].isNull() && m_preview_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;

    m_seal_presentation_node_hash_isValid = ::OpenAPI::fromJsonValue(m_seal_presentation_node_hash, json[QString("sealPresentationNodeHash")]);
    m_seal_presentation_node_hash_isSet = !json[QString("sealPresentationNodeHash")].isNull() && m_seal_presentation_node_hash_isValid;

    m_season_number_isValid = ::OpenAPI::fromJsonValue(m_season_number, json[QString("seasonNumber")]);
    m_season_number_isSet = !json[QString("seasonNumber")].isNull() && m_season_number_isValid;

    m_season_pass_hash_isValid = ::OpenAPI::fromJsonValue(m_season_pass_hash, json[QString("seasonPassHash")]);
    m_season_pass_hash_isSet = !json[QString("seasonPassHash")].isNull() && m_season_pass_hash_isValid;

    m_season_pass_progression_hash_isValid = ::OpenAPI::fromJsonValue(m_season_pass_progression_hash, json[QString("seasonPassProgressionHash")]);
    m_season_pass_progression_hash_isSet = !json[QString("seasonPassProgressionHash")].isNull() && m_season_pass_progression_hash_isValid;

    m_seasonal_challenges_presentation_node_hash_isValid = ::OpenAPI::fromJsonValue(m_seasonal_challenges_presentation_node_hash, json[QString("seasonalChallengesPresentationNodeHash")]);
    m_seasonal_challenges_presentation_node_hash_isSet = !json[QString("seasonalChallengesPresentationNodeHash")].isNull() && m_seasonal_challenges_presentation_node_hash_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_item_hash_isSet) {
        obj.insert(QString("artifactItemHash"), ::OpenAPI::toJsonValue(m_artifact_item_hash));
    }
    if (m_background_image_path_isSet) {
        obj.insert(QString("backgroundImagePath"), ::OpenAPI::toJsonValue(m_background_image_path));
    }
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_preview.isSet()) {
        obj.insert(QString("preview"), ::OpenAPI::toJsonValue(m_preview));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    if (m_seal_presentation_node_hash_isSet) {
        obj.insert(QString("sealPresentationNodeHash"), ::OpenAPI::toJsonValue(m_seal_presentation_node_hash));
    }
    if (m_season_number_isSet) {
        obj.insert(QString("seasonNumber"), ::OpenAPI::toJsonValue(m_season_number));
    }
    if (m_season_pass_hash_isSet) {
        obj.insert(QString("seasonPassHash"), ::OpenAPI::toJsonValue(m_season_pass_hash));
    }
    if (m_season_pass_progression_hash_isSet) {
        obj.insert(QString("seasonPassProgressionHash"), ::OpenAPI::toJsonValue(m_season_pass_progression_hash));
    }
    if (m_seasonal_challenges_presentation_node_hash_isSet) {
        obj.insert(QString("seasonalChallengesPresentationNodeHash"), ::OpenAPI::toJsonValue(m_seasonal_challenges_presentation_node_hash));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::getArtifactItemHash() const {
    return m_artifact_item_hash;
}
void OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::setArtifactItemHash(const qint32 &artifact_item_hash) {
    m_artifact_item_hash = artifact_item_hash;
    m_artifact_item_hash_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_artifact_item_hash_Set() const{
    return m_artifact_item_hash_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_artifact_item_hash_Valid() const{
    return m_artifact_item_hash_isValid;
}

QString OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::getBackgroundImagePath() const {
    return m_background_image_path;
}
void OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::setBackgroundImagePath(const QString &background_image_path) {
    m_background_image_path = background_image_path;
    m_background_image_path_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_background_image_path_Set() const{
    return m_background_image_path_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_background_image_path_Valid() const{
    return m_background_image_path_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

QDateTime OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::getEndDate() const {
    return m_end_date;
}
void OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_end_date_Valid() const{
    return m_end_date_isValid;
}

qint32 OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_index_Valid() const{
    return m_index_isValid;
}

OAIDestiny_Definitions_Seasons_DestinySeasonPreviewDefinition OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::getPreview() const {
    return m_preview;
}
void OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::setPreview(const OAIDestiny_Definitions_Seasons_DestinySeasonPreviewDefinition &preview) {
    m_preview = preview;
    m_preview_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_preview_Set() const{
    return m_preview_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_preview_Valid() const{
    return m_preview_isValid;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

qint32 OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::getSealPresentationNodeHash() const {
    return m_seal_presentation_node_hash;
}
void OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::setSealPresentationNodeHash(const qint32 &seal_presentation_node_hash) {
    m_seal_presentation_node_hash = seal_presentation_node_hash;
    m_seal_presentation_node_hash_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_seal_presentation_node_hash_Set() const{
    return m_seal_presentation_node_hash_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_seal_presentation_node_hash_Valid() const{
    return m_seal_presentation_node_hash_isValid;
}

qint32 OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::getSeasonNumber() const {
    return m_season_number;
}
void OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::setSeasonNumber(const qint32 &season_number) {
    m_season_number = season_number;
    m_season_number_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_season_number_Set() const{
    return m_season_number_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_season_number_Valid() const{
    return m_season_number_isValid;
}

qint32 OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::getSeasonPassHash() const {
    return m_season_pass_hash;
}
void OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::setSeasonPassHash(const qint32 &season_pass_hash) {
    m_season_pass_hash = season_pass_hash;
    m_season_pass_hash_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_season_pass_hash_Set() const{
    return m_season_pass_hash_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_season_pass_hash_Valid() const{
    return m_season_pass_hash_isValid;
}

qint32 OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::getSeasonPassProgressionHash() const {
    return m_season_pass_progression_hash;
}
void OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::setSeasonPassProgressionHash(const qint32 &season_pass_progression_hash) {
    m_season_pass_progression_hash = season_pass_progression_hash;
    m_season_pass_progression_hash_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_season_pass_progression_hash_Set() const{
    return m_season_pass_progression_hash_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_season_pass_progression_hash_Valid() const{
    return m_season_pass_progression_hash_isValid;
}

qint32 OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::getSeasonalChallengesPresentationNodeHash() const {
    return m_seasonal_challenges_presentation_node_hash;
}
void OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::setSeasonalChallengesPresentationNodeHash(const qint32 &seasonal_challenges_presentation_node_hash) {
    m_seasonal_challenges_presentation_node_hash = seasonal_challenges_presentation_node_hash;
    m_seasonal_challenges_presentation_node_hash_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_seasonal_challenges_presentation_node_hash_Set() const{
    return m_seasonal_challenges_presentation_node_hash_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_seasonal_challenges_presentation_node_hash_Valid() const{
    return m_seasonal_challenges_presentation_node_hash_isValid;
}

QDateTime OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::getStartDate() const {
    return m_start_date;
}
void OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_item_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_image_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seal_presentation_node_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_pass_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_pass_progression_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seasonal_challenges_presentation_node_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_Seasons_DestinySeasonDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
