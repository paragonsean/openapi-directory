/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::~OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition() {}

void OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::initializeModel() {

    m_activity_hash_isSet = false;
    m_activity_hash_isValid = false;

    m_activity_mode_hashes_isSet = false;
    m_activity_mode_hashes_isValid = false;

    m_activity_mode_types_isSet = false;
    m_activity_mode_types_isValid = false;

    m_direct_activity_mode_hash_isSet = false;
    m_direct_activity_mode_hash_isValid = false;

    m_direct_activity_mode_type_isSet = false;
    m_direct_activity_mode_type_isValid = false;
}

void OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::fromJsonObject(QJsonObject json) {

    m_activity_hash_isValid = ::OpenAPI::fromJsonValue(m_activity_hash, json[QString("activityHash")]);
    m_activity_hash_isSet = !json[QString("activityHash")].isNull() && m_activity_hash_isValid;

    m_activity_mode_hashes_isValid = ::OpenAPI::fromJsonValue(m_activity_mode_hashes, json[QString("activityModeHashes")]);
    m_activity_mode_hashes_isSet = !json[QString("activityModeHashes")].isNull() && m_activity_mode_hashes_isValid;

    m_activity_mode_types_isValid = ::OpenAPI::fromJsonValue(m_activity_mode_types, json[QString("activityModeTypes")]);
    m_activity_mode_types_isSet = !json[QString("activityModeTypes")].isNull() && m_activity_mode_types_isValid;

    m_direct_activity_mode_hash_isValid = ::OpenAPI::fromJsonValue(m_direct_activity_mode_hash, json[QString("directActivityModeHash")]);
    m_direct_activity_mode_hash_isSet = !json[QString("directActivityModeHash")].isNull() && m_direct_activity_mode_hash_isValid;

    m_direct_activity_mode_type_isValid = ::OpenAPI::fromJsonValue(m_direct_activity_mode_type, json[QString("directActivityModeType")]);
    m_direct_activity_mode_type_isSet = !json[QString("directActivityModeType")].isNull() && m_direct_activity_mode_type_isValid;
}

QString OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_hash_isSet) {
        obj.insert(QString("activityHash"), ::OpenAPI::toJsonValue(m_activity_hash));
    }
    if (m_activity_mode_hashes.size() > 0) {
        obj.insert(QString("activityModeHashes"), ::OpenAPI::toJsonValue(m_activity_mode_hashes));
    }
    if (m_activity_mode_types.size() > 0) {
        obj.insert(QString("activityModeTypes"), ::OpenAPI::toJsonValue(m_activity_mode_types));
    }
    if (m_direct_activity_mode_hash_isSet) {
        obj.insert(QString("directActivityModeHash"), ::OpenAPI::toJsonValue(m_direct_activity_mode_hash));
    }
    if (m_direct_activity_mode_type_isSet) {
        obj.insert(QString("directActivityModeType"), ::OpenAPI::toJsonValue(m_direct_activity_mode_type));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::getActivityHash() const {
    return m_activity_hash;
}
void OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::setActivityHash(const qint32 &activity_hash) {
    m_activity_hash = activity_hash;
    m_activity_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::is_activity_hash_Set() const{
    return m_activity_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::is_activity_hash_Valid() const{
    return m_activity_hash_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::getActivityModeHashes() const {
    return m_activity_mode_hashes;
}
void OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::setActivityModeHashes(const QList<qint32> &activity_mode_hashes) {
    m_activity_mode_hashes = activity_mode_hashes;
    m_activity_mode_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::is_activity_mode_hashes_Set() const{
    return m_activity_mode_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::is_activity_mode_hashes_Valid() const{
    return m_activity_mode_hashes_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::getActivityModeTypes() const {
    return m_activity_mode_types;
}
void OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::setActivityModeTypes(const QList<qint32> &activity_mode_types) {
    m_activity_mode_types = activity_mode_types;
    m_activity_mode_types_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::is_activity_mode_types_Set() const{
    return m_activity_mode_types_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::is_activity_mode_types_Valid() const{
    return m_activity_mode_types_isValid;
}

qint32 OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::getDirectActivityModeHash() const {
    return m_direct_activity_mode_hash;
}
void OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::setDirectActivityModeHash(const qint32 &direct_activity_mode_hash) {
    m_direct_activity_mode_hash = direct_activity_mode_hash;
    m_direct_activity_mode_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::is_direct_activity_mode_hash_Set() const{
    return m_direct_activity_mode_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::is_direct_activity_mode_hash_Valid() const{
    return m_direct_activity_mode_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::getDirectActivityModeType() const {
    return m_direct_activity_mode_type;
}
void OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::setDirectActivityModeType(const qint32 &direct_activity_mode_type) {
    m_direct_activity_mode_type = direct_activity_mode_type;
    m_direct_activity_mode_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::is_direct_activity_mode_type_Set() const{
    return m_direct_activity_mode_type_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::is_direct_activity_mode_type_Valid() const{
    return m_direct_activity_mode_type_isValid;
}

bool OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_mode_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_mode_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_activity_mode_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_activity_mode_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
