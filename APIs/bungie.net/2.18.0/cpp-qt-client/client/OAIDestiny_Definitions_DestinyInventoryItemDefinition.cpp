/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyInventoryItemDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyInventoryItemDefinition::OAIDestiny_Definitions_DestinyInventoryItemDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyInventoryItemDefinition::OAIDestiny_Definitions_DestinyInventoryItemDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyInventoryItemDefinition::~OAIDestiny_Definitions_DestinyInventoryItemDefinition() {}

void OAIDestiny_Definitions_DestinyInventoryItemDefinition::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_allow_actions_isSet = false;
    m_allow_actions_isValid = false;

    m_animations_isSet = false;
    m_animations_isValid = false;

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_breaker_type_isSet = false;
    m_breaker_type_isValid = false;

    m_breaker_type_hash_isSet = false;
    m_breaker_type_hash_isValid = false;

    m_class_type_isSet = false;
    m_class_type_isValid = false;

    m_collectible_hash_isSet = false;
    m_collectible_hash_isValid = false;

    m_crafting_isSet = false;
    m_crafting_isValid = false;

    m_damage_type_hashes_isSet = false;
    m_damage_type_hashes_isValid = false;

    m_damage_types_isSet = false;
    m_damage_types_isValid = false;

    m_default_damage_type_isSet = false;
    m_default_damage_type_isValid = false;

    m_default_damage_type_hash_isSet = false;
    m_default_damage_type_hash_isValid = false;

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_display_source_isSet = false;
    m_display_source_isValid = false;

    m_does_postmaster_pull_have_side_effects_isSet = false;
    m_does_postmaster_pull_have_side_effects_isValid = false;

    m_emblem_objective_hash_isSet = false;
    m_emblem_objective_hash_isValid = false;

    m_equippable_isSet = false;
    m_equippable_isValid = false;

    m_equipping_block_isSet = false;
    m_equipping_block_isValid = false;

    m_flavor_text_isSet = false;
    m_flavor_text_isValid = false;

    m_gearset_isSet = false;
    m_gearset_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_icon_watermark_isSet = false;
    m_icon_watermark_isValid = false;

    m_icon_watermark_shelved_isSet = false;
    m_icon_watermark_shelved_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_inventory_isSet = false;
    m_inventory_isValid = false;

    m_investment_stats_isSet = false;
    m_investment_stats_isValid = false;

    m_is_wrapper_isSet = false;
    m_is_wrapper_isValid = false;

    m_item_category_hashes_isSet = false;
    m_item_category_hashes_isValid = false;

    m_item_sub_type_isSet = false;
    m_item_sub_type_isValid = false;

    m_item_type_isSet = false;
    m_item_type_isValid = false;

    m_item_type_and_tier_display_name_isSet = false;
    m_item_type_and_tier_display_name_isValid = false;

    m_item_type_display_name_isSet = false;
    m_item_type_display_name_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_lore_hash_isSet = false;
    m_lore_hash_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_non_transferrable_isSet = false;
    m_non_transferrable_isValid = false;

    m_objectives_isSet = false;
    m_objectives_isValid = false;

    m_perks_isSet = false;
    m_perks_isValid = false;

    m_plug_isSet = false;
    m_plug_isValid = false;

    m_preview_isSet = false;
    m_preview_isValid = false;

    m_quality_isSet = false;
    m_quality_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;

    m_sack_isSet = false;
    m_sack_isValid = false;

    m_screenshot_isSet = false;
    m_screenshot_isValid = false;

    m_season_hash_isSet = false;
    m_season_hash_isValid = false;

    m_secondary_icon_isSet = false;
    m_secondary_icon_isValid = false;

    m_secondary_overlay_isSet = false;
    m_secondary_overlay_isValid = false;

    m_secondary_special_isSet = false;
    m_secondary_special_isValid = false;

    m_set_data_isSet = false;
    m_set_data_isValid = false;

    m_sockets_isSet = false;
    m_sockets_isValid = false;

    m_source_data_isSet = false;
    m_source_data_isValid = false;

    m_special_item_type_isSet = false;
    m_special_item_type_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_summary_item_hash_isSet = false;
    m_summary_item_hash_isValid = false;

    m_talent_grid_isSet = false;
    m_talent_grid_isValid = false;

    m_tooltip_notifications_isSet = false;
    m_tooltip_notifications_isValid = false;

    m_tooltip_style_isSet = false;
    m_tooltip_style_isValid = false;

    m_trait_hashes_isSet = false;
    m_trait_hashes_isValid = false;

    m_trait_ids_isSet = false;
    m_trait_ids_isValid = false;

    m_translation_block_isSet = false;
    m_translation_block_isValid = false;

    m_ui_item_display_style_isSet = false;
    m_ui_item_display_style_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIDestiny_Definitions_DestinyInventoryItemDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyInventoryItemDefinition::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_allow_actions_isValid = ::OpenAPI::fromJsonValue(m_allow_actions, json[QString("allowActions")]);
    m_allow_actions_isSet = !json[QString("allowActions")].isNull() && m_allow_actions_isValid;

    m_animations_isValid = ::OpenAPI::fromJsonValue(m_animations, json[QString("animations")]);
    m_animations_isSet = !json[QString("animations")].isNull() && m_animations_isValid;

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("backgroundColor")]);
    m_background_color_isSet = !json[QString("backgroundColor")].isNull() && m_background_color_isValid;

    m_breaker_type_isValid = ::OpenAPI::fromJsonValue(m_breaker_type, json[QString("breakerType")]);
    m_breaker_type_isSet = !json[QString("breakerType")].isNull() && m_breaker_type_isValid;

    m_breaker_type_hash_isValid = ::OpenAPI::fromJsonValue(m_breaker_type_hash, json[QString("breakerTypeHash")]);
    m_breaker_type_hash_isSet = !json[QString("breakerTypeHash")].isNull() && m_breaker_type_hash_isValid;

    m_class_type_isValid = ::OpenAPI::fromJsonValue(m_class_type, json[QString("classType")]);
    m_class_type_isSet = !json[QString("classType")].isNull() && m_class_type_isValid;

    m_collectible_hash_isValid = ::OpenAPI::fromJsonValue(m_collectible_hash, json[QString("collectibleHash")]);
    m_collectible_hash_isSet = !json[QString("collectibleHash")].isNull() && m_collectible_hash_isValid;

    m_crafting_isValid = ::OpenAPI::fromJsonValue(m_crafting, json[QString("crafting")]);
    m_crafting_isSet = !json[QString("crafting")].isNull() && m_crafting_isValid;

    m_damage_type_hashes_isValid = ::OpenAPI::fromJsonValue(m_damage_type_hashes, json[QString("damageTypeHashes")]);
    m_damage_type_hashes_isSet = !json[QString("damageTypeHashes")].isNull() && m_damage_type_hashes_isValid;

    m_damage_types_isValid = ::OpenAPI::fromJsonValue(m_damage_types, json[QString("damageTypes")]);
    m_damage_types_isSet = !json[QString("damageTypes")].isNull() && m_damage_types_isValid;

    m_default_damage_type_isValid = ::OpenAPI::fromJsonValue(m_default_damage_type, json[QString("defaultDamageType")]);
    m_default_damage_type_isSet = !json[QString("defaultDamageType")].isNull() && m_default_damage_type_isValid;

    m_default_damage_type_hash_isValid = ::OpenAPI::fromJsonValue(m_default_damage_type_hash, json[QString("defaultDamageTypeHash")]);
    m_default_damage_type_hash_isSet = !json[QString("defaultDamageTypeHash")].isNull() && m_default_damage_type_hash_isValid;

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_display_source_isValid = ::OpenAPI::fromJsonValue(m_display_source, json[QString("displaySource")]);
    m_display_source_isSet = !json[QString("displaySource")].isNull() && m_display_source_isValid;

    m_does_postmaster_pull_have_side_effects_isValid = ::OpenAPI::fromJsonValue(m_does_postmaster_pull_have_side_effects, json[QString("doesPostmasterPullHaveSideEffects")]);
    m_does_postmaster_pull_have_side_effects_isSet = !json[QString("doesPostmasterPullHaveSideEffects")].isNull() && m_does_postmaster_pull_have_side_effects_isValid;

    m_emblem_objective_hash_isValid = ::OpenAPI::fromJsonValue(m_emblem_objective_hash, json[QString("emblemObjectiveHash")]);
    m_emblem_objective_hash_isSet = !json[QString("emblemObjectiveHash")].isNull() && m_emblem_objective_hash_isValid;

    m_equippable_isValid = ::OpenAPI::fromJsonValue(m_equippable, json[QString("equippable")]);
    m_equippable_isSet = !json[QString("equippable")].isNull() && m_equippable_isValid;

    m_equipping_block_isValid = ::OpenAPI::fromJsonValue(m_equipping_block, json[QString("equippingBlock")]);
    m_equipping_block_isSet = !json[QString("equippingBlock")].isNull() && m_equipping_block_isValid;

    m_flavor_text_isValid = ::OpenAPI::fromJsonValue(m_flavor_text, json[QString("flavorText")]);
    m_flavor_text_isSet = !json[QString("flavorText")].isNull() && m_flavor_text_isValid;

    m_gearset_isValid = ::OpenAPI::fromJsonValue(m_gearset, json[QString("gearset")]);
    m_gearset_isSet = !json[QString("gearset")].isNull() && m_gearset_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_icon_watermark_isValid = ::OpenAPI::fromJsonValue(m_icon_watermark, json[QString("iconWatermark")]);
    m_icon_watermark_isSet = !json[QString("iconWatermark")].isNull() && m_icon_watermark_isValid;

    m_icon_watermark_shelved_isValid = ::OpenAPI::fromJsonValue(m_icon_watermark_shelved, json[QString("iconWatermarkShelved")]);
    m_icon_watermark_shelved_isSet = !json[QString("iconWatermarkShelved")].isNull() && m_icon_watermark_shelved_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_inventory_isValid = ::OpenAPI::fromJsonValue(m_inventory, json[QString("inventory")]);
    m_inventory_isSet = !json[QString("inventory")].isNull() && m_inventory_isValid;

    m_investment_stats_isValid = ::OpenAPI::fromJsonValue(m_investment_stats, json[QString("investmentStats")]);
    m_investment_stats_isSet = !json[QString("investmentStats")].isNull() && m_investment_stats_isValid;

    m_is_wrapper_isValid = ::OpenAPI::fromJsonValue(m_is_wrapper, json[QString("isWrapper")]);
    m_is_wrapper_isSet = !json[QString("isWrapper")].isNull() && m_is_wrapper_isValid;

    m_item_category_hashes_isValid = ::OpenAPI::fromJsonValue(m_item_category_hashes, json[QString("itemCategoryHashes")]);
    m_item_category_hashes_isSet = !json[QString("itemCategoryHashes")].isNull() && m_item_category_hashes_isValid;

    m_item_sub_type_isValid = ::OpenAPI::fromJsonValue(m_item_sub_type, json[QString("itemSubType")]);
    m_item_sub_type_isSet = !json[QString("itemSubType")].isNull() && m_item_sub_type_isValid;

    m_item_type_isValid = ::OpenAPI::fromJsonValue(m_item_type, json[QString("itemType")]);
    m_item_type_isSet = !json[QString("itemType")].isNull() && m_item_type_isValid;

    m_item_type_and_tier_display_name_isValid = ::OpenAPI::fromJsonValue(m_item_type_and_tier_display_name, json[QString("itemTypeAndTierDisplayName")]);
    m_item_type_and_tier_display_name_isSet = !json[QString("itemTypeAndTierDisplayName")].isNull() && m_item_type_and_tier_display_name_isValid;

    m_item_type_display_name_isValid = ::OpenAPI::fromJsonValue(m_item_type_display_name, json[QString("itemTypeDisplayName")]);
    m_item_type_display_name_isSet = !json[QString("itemTypeDisplayName")].isNull() && m_item_type_display_name_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_lore_hash_isValid = ::OpenAPI::fromJsonValue(m_lore_hash, json[QString("loreHash")]);
    m_lore_hash_isSet = !json[QString("loreHash")].isNull() && m_lore_hash_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_non_transferrable_isValid = ::OpenAPI::fromJsonValue(m_non_transferrable, json[QString("nonTransferrable")]);
    m_non_transferrable_isSet = !json[QString("nonTransferrable")].isNull() && m_non_transferrable_isValid;

    m_objectives_isValid = ::OpenAPI::fromJsonValue(m_objectives, json[QString("objectives")]);
    m_objectives_isSet = !json[QString("objectives")].isNull() && m_objectives_isValid;

    m_perks_isValid = ::OpenAPI::fromJsonValue(m_perks, json[QString("perks")]);
    m_perks_isSet = !json[QString("perks")].isNull() && m_perks_isValid;

    m_plug_isValid = ::OpenAPI::fromJsonValue(m_plug, json[QString("plug")]);
    m_plug_isSet = !json[QString("plug")].isNull() && m_plug_isValid;

    m_preview_isValid = ::OpenAPI::fromJsonValue(m_preview, json[QString("preview")]);
    m_preview_isSet = !json[QString("preview")].isNull() && m_preview_isValid;

    m_quality_isValid = ::OpenAPI::fromJsonValue(m_quality, json[QString("quality")]);
    m_quality_isSet = !json[QString("quality")].isNull() && m_quality_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;

    m_sack_isValid = ::OpenAPI::fromJsonValue(m_sack, json[QString("sack")]);
    m_sack_isSet = !json[QString("sack")].isNull() && m_sack_isValid;

    m_screenshot_isValid = ::OpenAPI::fromJsonValue(m_screenshot, json[QString("screenshot")]);
    m_screenshot_isSet = !json[QString("screenshot")].isNull() && m_screenshot_isValid;

    m_season_hash_isValid = ::OpenAPI::fromJsonValue(m_season_hash, json[QString("seasonHash")]);
    m_season_hash_isSet = !json[QString("seasonHash")].isNull() && m_season_hash_isValid;

    m_secondary_icon_isValid = ::OpenAPI::fromJsonValue(m_secondary_icon, json[QString("secondaryIcon")]);
    m_secondary_icon_isSet = !json[QString("secondaryIcon")].isNull() && m_secondary_icon_isValid;

    m_secondary_overlay_isValid = ::OpenAPI::fromJsonValue(m_secondary_overlay, json[QString("secondaryOverlay")]);
    m_secondary_overlay_isSet = !json[QString("secondaryOverlay")].isNull() && m_secondary_overlay_isValid;

    m_secondary_special_isValid = ::OpenAPI::fromJsonValue(m_secondary_special, json[QString("secondarySpecial")]);
    m_secondary_special_isSet = !json[QString("secondarySpecial")].isNull() && m_secondary_special_isValid;

    m_set_data_isValid = ::OpenAPI::fromJsonValue(m_set_data, json[QString("setData")]);
    m_set_data_isSet = !json[QString("setData")].isNull() && m_set_data_isValid;

    m_sockets_isValid = ::OpenAPI::fromJsonValue(m_sockets, json[QString("sockets")]);
    m_sockets_isSet = !json[QString("sockets")].isNull() && m_sockets_isValid;

    m_source_data_isValid = ::OpenAPI::fromJsonValue(m_source_data, json[QString("sourceData")]);
    m_source_data_isSet = !json[QString("sourceData")].isNull() && m_source_data_isValid;

    m_special_item_type_isValid = ::OpenAPI::fromJsonValue(m_special_item_type, json[QString("specialItemType")]);
    m_special_item_type_isSet = !json[QString("specialItemType")].isNull() && m_special_item_type_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_summary_item_hash_isValid = ::OpenAPI::fromJsonValue(m_summary_item_hash, json[QString("summaryItemHash")]);
    m_summary_item_hash_isSet = !json[QString("summaryItemHash")].isNull() && m_summary_item_hash_isValid;

    m_talent_grid_isValid = ::OpenAPI::fromJsonValue(m_talent_grid, json[QString("talentGrid")]);
    m_talent_grid_isSet = !json[QString("talentGrid")].isNull() && m_talent_grid_isValid;

    m_tooltip_notifications_isValid = ::OpenAPI::fromJsonValue(m_tooltip_notifications, json[QString("tooltipNotifications")]);
    m_tooltip_notifications_isSet = !json[QString("tooltipNotifications")].isNull() && m_tooltip_notifications_isValid;

    m_tooltip_style_isValid = ::OpenAPI::fromJsonValue(m_tooltip_style, json[QString("tooltipStyle")]);
    m_tooltip_style_isSet = !json[QString("tooltipStyle")].isNull() && m_tooltip_style_isValid;

    m_trait_hashes_isValid = ::OpenAPI::fromJsonValue(m_trait_hashes, json[QString("traitHashes")]);
    m_trait_hashes_isSet = !json[QString("traitHashes")].isNull() && m_trait_hashes_isValid;

    m_trait_ids_isValid = ::OpenAPI::fromJsonValue(m_trait_ids, json[QString("traitIds")]);
    m_trait_ids_isSet = !json[QString("traitIds")].isNull() && m_trait_ids_isValid;

    m_translation_block_isValid = ::OpenAPI::fromJsonValue(m_translation_block, json[QString("translationBlock")]);
    m_translation_block_isSet = !json[QString("translationBlock")].isNull() && m_translation_block_isValid;

    m_ui_item_display_style_isValid = ::OpenAPI::fromJsonValue(m_ui_item_display_style, json[QString("uiItemDisplayStyle")]);
    m_ui_item_display_style_isSet = !json[QString("uiItemDisplayStyle")].isNull() && m_ui_item_display_style_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIDestiny_Definitions_DestinyInventoryItemDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyInventoryItemDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_allow_actions_isSet) {
        obj.insert(QString("allowActions"), ::OpenAPI::toJsonValue(m_allow_actions));
    }
    if (m_animations.size() > 0) {
        obj.insert(QString("animations"), ::OpenAPI::toJsonValue(m_animations));
    }
    if (m_background_color.isSet()) {
        obj.insert(QString("backgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_breaker_type_isSet) {
        obj.insert(QString("breakerType"), ::OpenAPI::toJsonValue(m_breaker_type));
    }
    if (m_breaker_type_hash_isSet) {
        obj.insert(QString("breakerTypeHash"), ::OpenAPI::toJsonValue(m_breaker_type_hash));
    }
    if (m_class_type_isSet) {
        obj.insert(QString("classType"), ::OpenAPI::toJsonValue(m_class_type));
    }
    if (m_collectible_hash_isSet) {
        obj.insert(QString("collectibleHash"), ::OpenAPI::toJsonValue(m_collectible_hash));
    }
    if (m_crafting.isSet()) {
        obj.insert(QString("crafting"), ::OpenAPI::toJsonValue(m_crafting));
    }
    if (m_damage_type_hashes.size() > 0) {
        obj.insert(QString("damageTypeHashes"), ::OpenAPI::toJsonValue(m_damage_type_hashes));
    }
    if (m_damage_types.size() > 0) {
        obj.insert(QString("damageTypes"), ::OpenAPI::toJsonValue(m_damage_types));
    }
    if (m_default_damage_type_isSet) {
        obj.insert(QString("defaultDamageType"), ::OpenAPI::toJsonValue(m_default_damage_type));
    }
    if (m_default_damage_type_hash_isSet) {
        obj.insert(QString("defaultDamageTypeHash"), ::OpenAPI::toJsonValue(m_default_damage_type_hash));
    }
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_display_source_isSet) {
        obj.insert(QString("displaySource"), ::OpenAPI::toJsonValue(m_display_source));
    }
    if (m_does_postmaster_pull_have_side_effects_isSet) {
        obj.insert(QString("doesPostmasterPullHaveSideEffects"), ::OpenAPI::toJsonValue(m_does_postmaster_pull_have_side_effects));
    }
    if (m_emblem_objective_hash_isSet) {
        obj.insert(QString("emblemObjectiveHash"), ::OpenAPI::toJsonValue(m_emblem_objective_hash));
    }
    if (m_equippable_isSet) {
        obj.insert(QString("equippable"), ::OpenAPI::toJsonValue(m_equippable));
    }
    if (m_equipping_block.isSet()) {
        obj.insert(QString("equippingBlock"), ::OpenAPI::toJsonValue(m_equipping_block));
    }
    if (m_flavor_text_isSet) {
        obj.insert(QString("flavorText"), ::OpenAPI::toJsonValue(m_flavor_text));
    }
    if (m_gearset.isSet()) {
        obj.insert(QString("gearset"), ::OpenAPI::toJsonValue(m_gearset));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_icon_watermark_isSet) {
        obj.insert(QString("iconWatermark"), ::OpenAPI::toJsonValue(m_icon_watermark));
    }
    if (m_icon_watermark_shelved_isSet) {
        obj.insert(QString("iconWatermarkShelved"), ::OpenAPI::toJsonValue(m_icon_watermark_shelved));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_inventory.isSet()) {
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(m_inventory));
    }
    if (m_investment_stats.size() > 0) {
        obj.insert(QString("investmentStats"), ::OpenAPI::toJsonValue(m_investment_stats));
    }
    if (m_is_wrapper_isSet) {
        obj.insert(QString("isWrapper"), ::OpenAPI::toJsonValue(m_is_wrapper));
    }
    if (m_item_category_hashes.size() > 0) {
        obj.insert(QString("itemCategoryHashes"), ::OpenAPI::toJsonValue(m_item_category_hashes));
    }
    if (m_item_sub_type_isSet) {
        obj.insert(QString("itemSubType"), ::OpenAPI::toJsonValue(m_item_sub_type));
    }
    if (m_item_type_isSet) {
        obj.insert(QString("itemType"), ::OpenAPI::toJsonValue(m_item_type));
    }
    if (m_item_type_and_tier_display_name_isSet) {
        obj.insert(QString("itemTypeAndTierDisplayName"), ::OpenAPI::toJsonValue(m_item_type_and_tier_display_name));
    }
    if (m_item_type_display_name_isSet) {
        obj.insert(QString("itemTypeDisplayName"), ::OpenAPI::toJsonValue(m_item_type_display_name));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_lore_hash_isSet) {
        obj.insert(QString("loreHash"), ::OpenAPI::toJsonValue(m_lore_hash));
    }
    if (m_metrics.isSet()) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_non_transferrable_isSet) {
        obj.insert(QString("nonTransferrable"), ::OpenAPI::toJsonValue(m_non_transferrable));
    }
    if (m_objectives.isSet()) {
        obj.insert(QString("objectives"), ::OpenAPI::toJsonValue(m_objectives));
    }
    if (m_perks.size() > 0) {
        obj.insert(QString("perks"), ::OpenAPI::toJsonValue(m_perks));
    }
    if (m_plug.isSet()) {
        obj.insert(QString("plug"), ::OpenAPI::toJsonValue(m_plug));
    }
    if (m_preview.isSet()) {
        obj.insert(QString("preview"), ::OpenAPI::toJsonValue(m_preview));
    }
    if (m_quality.isSet()) {
        obj.insert(QString("quality"), ::OpenAPI::toJsonValue(m_quality));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    if (m_sack.isSet()) {
        obj.insert(QString("sack"), ::OpenAPI::toJsonValue(m_sack));
    }
    if (m_screenshot_isSet) {
        obj.insert(QString("screenshot"), ::OpenAPI::toJsonValue(m_screenshot));
    }
    if (m_season_hash_isSet) {
        obj.insert(QString("seasonHash"), ::OpenAPI::toJsonValue(m_season_hash));
    }
    if (m_secondary_icon_isSet) {
        obj.insert(QString("secondaryIcon"), ::OpenAPI::toJsonValue(m_secondary_icon));
    }
    if (m_secondary_overlay_isSet) {
        obj.insert(QString("secondaryOverlay"), ::OpenAPI::toJsonValue(m_secondary_overlay));
    }
    if (m_secondary_special_isSet) {
        obj.insert(QString("secondarySpecial"), ::OpenAPI::toJsonValue(m_secondary_special));
    }
    if (m_set_data.isSet()) {
        obj.insert(QString("setData"), ::OpenAPI::toJsonValue(m_set_data));
    }
    if (m_sockets.isSet()) {
        obj.insert(QString("sockets"), ::OpenAPI::toJsonValue(m_sockets));
    }
    if (m_source_data.isSet()) {
        obj.insert(QString("sourceData"), ::OpenAPI::toJsonValue(m_source_data));
    }
    if (m_special_item_type_isSet) {
        obj.insert(QString("specialItemType"), ::OpenAPI::toJsonValue(m_special_item_type));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    if (m_summary.isSet()) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_summary_item_hash_isSet) {
        obj.insert(QString("summaryItemHash"), ::OpenAPI::toJsonValue(m_summary_item_hash));
    }
    if (m_talent_grid.isSet()) {
        obj.insert(QString("talentGrid"), ::OpenAPI::toJsonValue(m_talent_grid));
    }
    if (m_tooltip_notifications.size() > 0) {
        obj.insert(QString("tooltipNotifications"), ::OpenAPI::toJsonValue(m_tooltip_notifications));
    }
    if (m_tooltip_style_isSet) {
        obj.insert(QString("tooltipStyle"), ::OpenAPI::toJsonValue(m_tooltip_style));
    }
    if (m_trait_hashes.size() > 0) {
        obj.insert(QString("traitHashes"), ::OpenAPI::toJsonValue(m_trait_hashes));
    }
    if (m_trait_ids.size() > 0) {
        obj.insert(QString("traitIds"), ::OpenAPI::toJsonValue(m_trait_ids));
    }
    if (m_translation_block.isSet()) {
        obj.insert(QString("translationBlock"), ::OpenAPI::toJsonValue(m_translation_block));
    }
    if (m_ui_item_display_style_isSet) {
        obj.insert(QString("uiItemDisplayStyle"), ::OpenAPI::toJsonValue(m_ui_item_display_style));
    }
    if (m_value.isSet()) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAIDestiny_Definitions_DestinyItemActionBlockDefinition OAIDestiny_Definitions_DestinyInventoryItemDefinition::getAction() const {
    return m_action;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setAction(const OAIDestiny_Definitions_DestinyItemActionBlockDefinition &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_action_Set() const{
    return m_action_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_action_Valid() const{
    return m_action_isValid;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::isAllowActions() const {
    return m_allow_actions;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setAllowActions(const bool &allow_actions) {
    m_allow_actions = allow_actions;
    m_allow_actions_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_allow_actions_Set() const{
    return m_allow_actions_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_allow_actions_Valid() const{
    return m_allow_actions_isValid;
}

QList<OAIDestiny_Definitions_Animations_DestinyAnimationReference> OAIDestiny_Definitions_DestinyInventoryItemDefinition::getAnimations() const {
    return m_animations;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setAnimations(const QList<OAIDestiny_Definitions_Animations_DestinyAnimationReference> &animations) {
    m_animations = animations;
    m_animations_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_animations_Set() const{
    return m_animations_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_animations_Valid() const{
    return m_animations_isValid;
}

OAIDestiny_Misc_DestinyColor OAIDestiny_Definitions_DestinyInventoryItemDefinition::getBackgroundColor() const {
    return m_background_color;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setBackgroundColor(const OAIDestiny_Misc_DestinyColor &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_background_color_Valid() const{
    return m_background_color_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryItemDefinition::getBreakerType() const {
    return m_breaker_type;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setBreakerType(const qint32 &breaker_type) {
    m_breaker_type = breaker_type;
    m_breaker_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_breaker_type_Set() const{
    return m_breaker_type_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_breaker_type_Valid() const{
    return m_breaker_type_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryItemDefinition::getBreakerTypeHash() const {
    return m_breaker_type_hash;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setBreakerTypeHash(const qint32 &breaker_type_hash) {
    m_breaker_type_hash = breaker_type_hash;
    m_breaker_type_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_breaker_type_hash_Set() const{
    return m_breaker_type_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_breaker_type_hash_Valid() const{
    return m_breaker_type_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryItemDefinition::getClassType() const {
    return m_class_type;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setClassType(const qint32 &class_type) {
    m_class_type = class_type;
    m_class_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_class_type_Set() const{
    return m_class_type_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_class_type_Valid() const{
    return m_class_type_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryItemDefinition::getCollectibleHash() const {
    return m_collectible_hash;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setCollectibleHash(const qint32 &collectible_hash) {
    m_collectible_hash = collectible_hash;
    m_collectible_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_collectible_hash_Set() const{
    return m_collectible_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_collectible_hash_Valid() const{
    return m_collectible_hash_isValid;
}

OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition OAIDestiny_Definitions_DestinyInventoryItemDefinition::getCrafting() const {
    return m_crafting;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setCrafting(const OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition &crafting) {
    m_crafting = crafting;
    m_crafting_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_crafting_Set() const{
    return m_crafting_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_crafting_Valid() const{
    return m_crafting_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyInventoryItemDefinition::getDamageTypeHashes() const {
    return m_damage_type_hashes;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setDamageTypeHashes(const QList<qint32> &damage_type_hashes) {
    m_damage_type_hashes = damage_type_hashes;
    m_damage_type_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_damage_type_hashes_Set() const{
    return m_damage_type_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_damage_type_hashes_Valid() const{
    return m_damage_type_hashes_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyInventoryItemDefinition::getDamageTypes() const {
    return m_damage_types;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setDamageTypes(const QList<qint32> &damage_types) {
    m_damage_types = damage_types;
    m_damage_types_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_damage_types_Set() const{
    return m_damage_types_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_damage_types_Valid() const{
    return m_damage_types_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryItemDefinition::getDefaultDamageType() const {
    return m_default_damage_type;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setDefaultDamageType(const qint32 &default_damage_type) {
    m_default_damage_type = default_damage_type;
    m_default_damage_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_default_damage_type_Set() const{
    return m_default_damage_type_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_default_damage_type_Valid() const{
    return m_default_damage_type_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryItemDefinition::getDefaultDamageTypeHash() const {
    return m_default_damage_type_hash;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setDefaultDamageTypeHash(const qint32 &default_damage_type_hash) {
    m_default_damage_type_hash = default_damage_type_hash;
    m_default_damage_type_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_default_damage_type_hash_Set() const{
    return m_default_damage_type_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_default_damage_type_hash_Valid() const{
    return m_default_damage_type_hash_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_DestinyInventoryItemDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

QString OAIDestiny_Definitions_DestinyInventoryItemDefinition::getDisplaySource() const {
    return m_display_source;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setDisplaySource(const QString &display_source) {
    m_display_source = display_source;
    m_display_source_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_display_source_Set() const{
    return m_display_source_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_display_source_Valid() const{
    return m_display_source_isValid;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::isDoesPostmasterPullHaveSideEffects() const {
    return m_does_postmaster_pull_have_side_effects;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setDoesPostmasterPullHaveSideEffects(const bool &does_postmaster_pull_have_side_effects) {
    m_does_postmaster_pull_have_side_effects = does_postmaster_pull_have_side_effects;
    m_does_postmaster_pull_have_side_effects_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_does_postmaster_pull_have_side_effects_Set() const{
    return m_does_postmaster_pull_have_side_effects_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_does_postmaster_pull_have_side_effects_Valid() const{
    return m_does_postmaster_pull_have_side_effects_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryItemDefinition::getEmblemObjectiveHash() const {
    return m_emblem_objective_hash;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setEmblemObjectiveHash(const qint32 &emblem_objective_hash) {
    m_emblem_objective_hash = emblem_objective_hash;
    m_emblem_objective_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_emblem_objective_hash_Set() const{
    return m_emblem_objective_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_emblem_objective_hash_Valid() const{
    return m_emblem_objective_hash_isValid;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::isEquippable() const {
    return m_equippable;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setEquippable(const bool &equippable) {
    m_equippable = equippable;
    m_equippable_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_equippable_Set() const{
    return m_equippable_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_equippable_Valid() const{
    return m_equippable_isValid;
}

OAIDestiny_Definitions_DestinyEquippingBlockDefinition OAIDestiny_Definitions_DestinyInventoryItemDefinition::getEquippingBlock() const {
    return m_equipping_block;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setEquippingBlock(const OAIDestiny_Definitions_DestinyEquippingBlockDefinition &equipping_block) {
    m_equipping_block = equipping_block;
    m_equipping_block_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_equipping_block_Set() const{
    return m_equipping_block_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_equipping_block_Valid() const{
    return m_equipping_block_isValid;
}

QString OAIDestiny_Definitions_DestinyInventoryItemDefinition::getFlavorText() const {
    return m_flavor_text;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setFlavorText(const QString &flavor_text) {
    m_flavor_text = flavor_text;
    m_flavor_text_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_flavor_text_Set() const{
    return m_flavor_text_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_flavor_text_Valid() const{
    return m_flavor_text_isValid;
}

OAIDestiny_Definitions_DestinyItemGearsetBlockDefinition OAIDestiny_Definitions_DestinyInventoryItemDefinition::getGearset() const {
    return m_gearset;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setGearset(const OAIDestiny_Definitions_DestinyItemGearsetBlockDefinition &gearset) {
    m_gearset = gearset;
    m_gearset_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_gearset_Set() const{
    return m_gearset_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_gearset_Valid() const{
    return m_gearset_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryItemDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

QString OAIDestiny_Definitions_DestinyInventoryItemDefinition::getIconWatermark() const {
    return m_icon_watermark;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setIconWatermark(const QString &icon_watermark) {
    m_icon_watermark = icon_watermark;
    m_icon_watermark_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_icon_watermark_Set() const{
    return m_icon_watermark_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_icon_watermark_Valid() const{
    return m_icon_watermark_isValid;
}

QString OAIDestiny_Definitions_DestinyInventoryItemDefinition::getIconWatermarkShelved() const {
    return m_icon_watermark_shelved;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setIconWatermarkShelved(const QString &icon_watermark_shelved) {
    m_icon_watermark_shelved = icon_watermark_shelved;
    m_icon_watermark_shelved_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_icon_watermark_shelved_Set() const{
    return m_icon_watermark_shelved_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_icon_watermark_shelved_Valid() const{
    return m_icon_watermark_shelved_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryItemDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_index_Valid() const{
    return m_index_isValid;
}

OAIDestiny_Definitions_DestinyItemInventoryBlockDefinition OAIDestiny_Definitions_DestinyInventoryItemDefinition::getInventory() const {
    return m_inventory;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setInventory(const OAIDestiny_Definitions_DestinyItemInventoryBlockDefinition &inventory) {
    m_inventory = inventory;
    m_inventory_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_inventory_Set() const{
    return m_inventory_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_inventory_Valid() const{
    return m_inventory_isValid;
}

QList<OAIDestiny_Definitions_DestinyItemInvestmentStatDefinition> OAIDestiny_Definitions_DestinyInventoryItemDefinition::getInvestmentStats() const {
    return m_investment_stats;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setInvestmentStats(const QList<OAIDestiny_Definitions_DestinyItemInvestmentStatDefinition> &investment_stats) {
    m_investment_stats = investment_stats;
    m_investment_stats_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_investment_stats_Set() const{
    return m_investment_stats_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_investment_stats_Valid() const{
    return m_investment_stats_isValid;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::isIsWrapper() const {
    return m_is_wrapper;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setIsWrapper(const bool &is_wrapper) {
    m_is_wrapper = is_wrapper;
    m_is_wrapper_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_is_wrapper_Set() const{
    return m_is_wrapper_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_is_wrapper_Valid() const{
    return m_is_wrapper_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyInventoryItemDefinition::getItemCategoryHashes() const {
    return m_item_category_hashes;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setItemCategoryHashes(const QList<qint32> &item_category_hashes) {
    m_item_category_hashes = item_category_hashes;
    m_item_category_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_item_category_hashes_Set() const{
    return m_item_category_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_item_category_hashes_Valid() const{
    return m_item_category_hashes_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryItemDefinition::getItemSubType() const {
    return m_item_sub_type;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setItemSubType(const qint32 &item_sub_type) {
    m_item_sub_type = item_sub_type;
    m_item_sub_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_item_sub_type_Set() const{
    return m_item_sub_type_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_item_sub_type_Valid() const{
    return m_item_sub_type_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryItemDefinition::getItemType() const {
    return m_item_type;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setItemType(const qint32 &item_type) {
    m_item_type = item_type;
    m_item_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_item_type_Set() const{
    return m_item_type_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_item_type_Valid() const{
    return m_item_type_isValid;
}

QString OAIDestiny_Definitions_DestinyInventoryItemDefinition::getItemTypeAndTierDisplayName() const {
    return m_item_type_and_tier_display_name;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setItemTypeAndTierDisplayName(const QString &item_type_and_tier_display_name) {
    m_item_type_and_tier_display_name = item_type_and_tier_display_name;
    m_item_type_and_tier_display_name_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_item_type_and_tier_display_name_Set() const{
    return m_item_type_and_tier_display_name_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_item_type_and_tier_display_name_Valid() const{
    return m_item_type_and_tier_display_name_isValid;
}

QString OAIDestiny_Definitions_DestinyInventoryItemDefinition::getItemTypeDisplayName() const {
    return m_item_type_display_name;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setItemTypeDisplayName(const QString &item_type_display_name) {
    m_item_type_display_name = item_type_display_name;
    m_item_type_display_name_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_item_type_display_name_Set() const{
    return m_item_type_display_name_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_item_type_display_name_Valid() const{
    return m_item_type_display_name_isValid;
}

QList<OAILinks_HyperlinkReference> OAIDestiny_Definitions_DestinyInventoryItemDefinition::getLinks() const {
    return m_links;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setLinks(const QList<OAILinks_HyperlinkReference> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_links_Set() const{
    return m_links_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_links_Valid() const{
    return m_links_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryItemDefinition::getLoreHash() const {
    return m_lore_hash;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setLoreHash(const qint32 &lore_hash) {
    m_lore_hash = lore_hash;
    m_lore_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_lore_hash_Set() const{
    return m_lore_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_lore_hash_Valid() const{
    return m_lore_hash_isValid;
}

OAIDestiny_Definitions_DestinyItemMetricBlockDefinition OAIDestiny_Definitions_DestinyInventoryItemDefinition::getMetrics() const {
    return m_metrics;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setMetrics(const OAIDestiny_Definitions_DestinyItemMetricBlockDefinition &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_metrics_Valid() const{
    return m_metrics_isValid;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::isNonTransferrable() const {
    return m_non_transferrable;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setNonTransferrable(const bool &non_transferrable) {
    m_non_transferrable = non_transferrable;
    m_non_transferrable_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_non_transferrable_Set() const{
    return m_non_transferrable_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_non_transferrable_Valid() const{
    return m_non_transferrable_isValid;
}

OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition OAIDestiny_Definitions_DestinyInventoryItemDefinition::getObjectives() const {
    return m_objectives;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setObjectives(const OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition &objectives) {
    m_objectives = objectives;
    m_objectives_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_objectives_Set() const{
    return m_objectives_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_objectives_Valid() const{
    return m_objectives_isValid;
}

QList<OAIDestiny_Definitions_DestinyItemPerkEntryDefinition> OAIDestiny_Definitions_DestinyInventoryItemDefinition::getPerks() const {
    return m_perks;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setPerks(const QList<OAIDestiny_Definitions_DestinyItemPerkEntryDefinition> &perks) {
    m_perks = perks;
    m_perks_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_perks_Set() const{
    return m_perks_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_perks_Valid() const{
    return m_perks_isValid;
}

OAIDestiny_Definitions_Items_DestinyItemPlugDefinition OAIDestiny_Definitions_DestinyInventoryItemDefinition::getPlug() const {
    return m_plug;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setPlug(const OAIDestiny_Definitions_Items_DestinyItemPlugDefinition &plug) {
    m_plug = plug;
    m_plug_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_plug_Set() const{
    return m_plug_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_plug_Valid() const{
    return m_plug_isValid;
}

OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition OAIDestiny_Definitions_DestinyInventoryItemDefinition::getPreview() const {
    return m_preview;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setPreview(const OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition &preview) {
    m_preview = preview;
    m_preview_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_preview_Set() const{
    return m_preview_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_preview_Valid() const{
    return m_preview_isValid;
}

OAIDestiny_Definitions_DestinyItemQualityBlockDefinition OAIDestiny_Definitions_DestinyInventoryItemDefinition::getQuality() const {
    return m_quality;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setQuality(const OAIDestiny_Definitions_DestinyItemQualityBlockDefinition &quality) {
    m_quality = quality;
    m_quality_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_quality_Set() const{
    return m_quality_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_quality_Valid() const{
    return m_quality_isValid;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

OAIDestiny_Definitions_DestinyItemSackBlockDefinition OAIDestiny_Definitions_DestinyInventoryItemDefinition::getSack() const {
    return m_sack;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setSack(const OAIDestiny_Definitions_DestinyItemSackBlockDefinition &sack) {
    m_sack = sack;
    m_sack_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_sack_Set() const{
    return m_sack_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_sack_Valid() const{
    return m_sack_isValid;
}

QString OAIDestiny_Definitions_DestinyInventoryItemDefinition::getScreenshot() const {
    return m_screenshot;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setScreenshot(const QString &screenshot) {
    m_screenshot = screenshot;
    m_screenshot_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_screenshot_Set() const{
    return m_screenshot_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_screenshot_Valid() const{
    return m_screenshot_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryItemDefinition::getSeasonHash() const {
    return m_season_hash;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setSeasonHash(const qint32 &season_hash) {
    m_season_hash = season_hash;
    m_season_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_season_hash_Set() const{
    return m_season_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_season_hash_Valid() const{
    return m_season_hash_isValid;
}

QString OAIDestiny_Definitions_DestinyInventoryItemDefinition::getSecondaryIcon() const {
    return m_secondary_icon;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setSecondaryIcon(const QString &secondary_icon) {
    m_secondary_icon = secondary_icon;
    m_secondary_icon_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_secondary_icon_Set() const{
    return m_secondary_icon_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_secondary_icon_Valid() const{
    return m_secondary_icon_isValid;
}

QString OAIDestiny_Definitions_DestinyInventoryItemDefinition::getSecondaryOverlay() const {
    return m_secondary_overlay;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setSecondaryOverlay(const QString &secondary_overlay) {
    m_secondary_overlay = secondary_overlay;
    m_secondary_overlay_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_secondary_overlay_Set() const{
    return m_secondary_overlay_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_secondary_overlay_Valid() const{
    return m_secondary_overlay_isValid;
}

QString OAIDestiny_Definitions_DestinyInventoryItemDefinition::getSecondarySpecial() const {
    return m_secondary_special;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setSecondarySpecial(const QString &secondary_special) {
    m_secondary_special = secondary_special;
    m_secondary_special_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_secondary_special_Set() const{
    return m_secondary_special_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_secondary_special_Valid() const{
    return m_secondary_special_isValid;
}

OAIDestiny_Definitions_DestinyItemSetBlockDefinition OAIDestiny_Definitions_DestinyInventoryItemDefinition::getSetData() const {
    return m_set_data;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setSetData(const OAIDestiny_Definitions_DestinyItemSetBlockDefinition &set_data) {
    m_set_data = set_data;
    m_set_data_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_set_data_Set() const{
    return m_set_data_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_set_data_Valid() const{
    return m_set_data_isValid;
}

OAIDestiny_Definitions_DestinyItemSocketBlockDefinition OAIDestiny_Definitions_DestinyInventoryItemDefinition::getSockets() const {
    return m_sockets;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setSockets(const OAIDestiny_Definitions_DestinyItemSocketBlockDefinition &sockets) {
    m_sockets = sockets;
    m_sockets_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_sockets_Set() const{
    return m_sockets_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_sockets_Valid() const{
    return m_sockets_isValid;
}

OAIDestiny_Definitions_DestinyItemSourceBlockDefinition OAIDestiny_Definitions_DestinyInventoryItemDefinition::getSourceData() const {
    return m_source_data;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setSourceData(const OAIDestiny_Definitions_DestinyItemSourceBlockDefinition &source_data) {
    m_source_data = source_data;
    m_source_data_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_source_data_Set() const{
    return m_source_data_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_source_data_Valid() const{
    return m_source_data_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryItemDefinition::getSpecialItemType() const {
    return m_special_item_type;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setSpecialItemType(const qint32 &special_item_type) {
    m_special_item_type = special_item_type;
    m_special_item_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_special_item_type_Set() const{
    return m_special_item_type_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_special_item_type_Valid() const{
    return m_special_item_type_isValid;
}

OAIDestiny_Definitions_DestinyItemStatBlockDefinition OAIDestiny_Definitions_DestinyInventoryItemDefinition::getStats() const {
    return m_stats;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setStats(const OAIDestiny_Definitions_DestinyItemStatBlockDefinition &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_stats_Valid() const{
    return m_stats_isValid;
}

OAIDestiny_Definitions_DestinyItemSummaryBlockDefinition OAIDestiny_Definitions_DestinyInventoryItemDefinition::getSummary() const {
    return m_summary;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setSummary(const OAIDestiny_Definitions_DestinyItemSummaryBlockDefinition &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_summary_Valid() const{
    return m_summary_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryItemDefinition::getSummaryItemHash() const {
    return m_summary_item_hash;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setSummaryItemHash(const qint32 &summary_item_hash) {
    m_summary_item_hash = summary_item_hash;
    m_summary_item_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_summary_item_hash_Set() const{
    return m_summary_item_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_summary_item_hash_Valid() const{
    return m_summary_item_hash_isValid;
}

OAIDestiny_Definitions_DestinyItemTalentGridBlockDefinition OAIDestiny_Definitions_DestinyInventoryItemDefinition::getTalentGrid() const {
    return m_talent_grid;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setTalentGrid(const OAIDestiny_Definitions_DestinyItemTalentGridBlockDefinition &talent_grid) {
    m_talent_grid = talent_grid;
    m_talent_grid_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_talent_grid_Set() const{
    return m_talent_grid_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_talent_grid_Valid() const{
    return m_talent_grid_isValid;
}

QList<OAIDestiny_Definitions_DestinyItemTooltipNotification> OAIDestiny_Definitions_DestinyInventoryItemDefinition::getTooltipNotifications() const {
    return m_tooltip_notifications;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setTooltipNotifications(const QList<OAIDestiny_Definitions_DestinyItemTooltipNotification> &tooltip_notifications) {
    m_tooltip_notifications = tooltip_notifications;
    m_tooltip_notifications_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_tooltip_notifications_Set() const{
    return m_tooltip_notifications_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_tooltip_notifications_Valid() const{
    return m_tooltip_notifications_isValid;
}

QString OAIDestiny_Definitions_DestinyInventoryItemDefinition::getTooltipStyle() const {
    return m_tooltip_style;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setTooltipStyle(const QString &tooltip_style) {
    m_tooltip_style = tooltip_style;
    m_tooltip_style_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_tooltip_style_Set() const{
    return m_tooltip_style_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_tooltip_style_Valid() const{
    return m_tooltip_style_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyInventoryItemDefinition::getTraitHashes() const {
    return m_trait_hashes;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setTraitHashes(const QList<qint32> &trait_hashes) {
    m_trait_hashes = trait_hashes;
    m_trait_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_trait_hashes_Set() const{
    return m_trait_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_trait_hashes_Valid() const{
    return m_trait_hashes_isValid;
}

QList<QString> OAIDestiny_Definitions_DestinyInventoryItemDefinition::getTraitIds() const {
    return m_trait_ids;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setTraitIds(const QList<QString> &trait_ids) {
    m_trait_ids = trait_ids;
    m_trait_ids_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_trait_ids_Set() const{
    return m_trait_ids_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_trait_ids_Valid() const{
    return m_trait_ids_isValid;
}

OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition OAIDestiny_Definitions_DestinyInventoryItemDefinition::getTranslationBlock() const {
    return m_translation_block;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setTranslationBlock(const OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition &translation_block) {
    m_translation_block = translation_block;
    m_translation_block_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_translation_block_Set() const{
    return m_translation_block_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_translation_block_Valid() const{
    return m_translation_block_isValid;
}

QString OAIDestiny_Definitions_DestinyInventoryItemDefinition::getUiItemDisplayStyle() const {
    return m_ui_item_display_style;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setUiItemDisplayStyle(const QString &ui_item_display_style) {
    m_ui_item_display_style = ui_item_display_style;
    m_ui_item_display_style_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_ui_item_display_style_Set() const{
    return m_ui_item_display_style_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_ui_item_display_style_Valid() const{
    return m_ui_item_display_style_isValid;
}

OAIDestiny_Definitions_DestinyItemValueBlockDefinition OAIDestiny_Definitions_DestinyInventoryItemDefinition::getValue() const {
    return m_value;
}
void OAIDestiny_Definitions_DestinyInventoryItemDefinition::setValue(const OAIDestiny_Definitions_DestinyItemValueBlockDefinition &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_value_Set() const{
    return m_value_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_actions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_animations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_breaker_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_breaker_type_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collectible_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crafting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_type_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_damage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_damage_type_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_does_postmaster_pull_have_side_effects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emblem_objective_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_equippable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_equipping_block.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flavor_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gearset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_watermark_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_watermark_shelved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_investment_stats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_wrapper_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_category_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_sub_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_type_and_tier_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_type_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lore_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_transferrable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_objectives.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_perks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_plug.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sack.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_screenshot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_overlay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_special_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sockets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_item_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_item_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_talent_grid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tooltip_notifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tooltip_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trait_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trait_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_translation_block.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ui_item_display_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyInventoryItemDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
