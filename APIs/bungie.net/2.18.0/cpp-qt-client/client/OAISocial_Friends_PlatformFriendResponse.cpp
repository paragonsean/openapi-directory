/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISocial_Friends_PlatformFriendResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISocial_Friends_PlatformFriendResponse::OAISocial_Friends_PlatformFriendResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISocial_Friends_PlatformFriendResponse::OAISocial_Friends_PlatformFriendResponse() {
    this->initializeModel();
}

OAISocial_Friends_PlatformFriendResponse::~OAISocial_Friends_PlatformFriendResponse() {}

void OAISocial_Friends_PlatformFriendResponse::initializeModel() {

    m_current_page_isSet = false;
    m_current_page_isValid = false;

    m_has_more_isSet = false;
    m_has_more_isValid = false;

    m_items_per_page_isSet = false;
    m_items_per_page_isValid = false;

    m_platform_friends_isSet = false;
    m_platform_friends_isValid = false;
}

void OAISocial_Friends_PlatformFriendResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISocial_Friends_PlatformFriendResponse::fromJsonObject(QJsonObject json) {

    m_current_page_isValid = ::OpenAPI::fromJsonValue(m_current_page, json[QString("currentPage")]);
    m_current_page_isSet = !json[QString("currentPage")].isNull() && m_current_page_isValid;

    m_has_more_isValid = ::OpenAPI::fromJsonValue(m_has_more, json[QString("hasMore")]);
    m_has_more_isSet = !json[QString("hasMore")].isNull() && m_has_more_isValid;

    m_items_per_page_isValid = ::OpenAPI::fromJsonValue(m_items_per_page, json[QString("itemsPerPage")]);
    m_items_per_page_isSet = !json[QString("itemsPerPage")].isNull() && m_items_per_page_isValid;

    m_platform_friends_isValid = ::OpenAPI::fromJsonValue(m_platform_friends, json[QString("platformFriends")]);
    m_platform_friends_isSet = !json[QString("platformFriends")].isNull() && m_platform_friends_isValid;
}

QString OAISocial_Friends_PlatformFriendResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISocial_Friends_PlatformFriendResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_current_page_isSet) {
        obj.insert(QString("currentPage"), ::OpenAPI::toJsonValue(m_current_page));
    }
    if (m_has_more_isSet) {
        obj.insert(QString("hasMore"), ::OpenAPI::toJsonValue(m_has_more));
    }
    if (m_items_per_page_isSet) {
        obj.insert(QString("itemsPerPage"), ::OpenAPI::toJsonValue(m_items_per_page));
    }
    if (m_platform_friends.size() > 0) {
        obj.insert(QString("platformFriends"), ::OpenAPI::toJsonValue(m_platform_friends));
    }
    return obj;
}

qint32 OAISocial_Friends_PlatformFriendResponse::getCurrentPage() const {
    return m_current_page;
}
void OAISocial_Friends_PlatformFriendResponse::setCurrentPage(const qint32 &current_page) {
    m_current_page = current_page;
    m_current_page_isSet = true;
}

bool OAISocial_Friends_PlatformFriendResponse::is_current_page_Set() const{
    return m_current_page_isSet;
}

bool OAISocial_Friends_PlatformFriendResponse::is_current_page_Valid() const{
    return m_current_page_isValid;
}

bool OAISocial_Friends_PlatformFriendResponse::isHasMore() const {
    return m_has_more;
}
void OAISocial_Friends_PlatformFriendResponse::setHasMore(const bool &has_more) {
    m_has_more = has_more;
    m_has_more_isSet = true;
}

bool OAISocial_Friends_PlatformFriendResponse::is_has_more_Set() const{
    return m_has_more_isSet;
}

bool OAISocial_Friends_PlatformFriendResponse::is_has_more_Valid() const{
    return m_has_more_isValid;
}

qint32 OAISocial_Friends_PlatformFriendResponse::getItemsPerPage() const {
    return m_items_per_page;
}
void OAISocial_Friends_PlatformFriendResponse::setItemsPerPage(const qint32 &items_per_page) {
    m_items_per_page = items_per_page;
    m_items_per_page_isSet = true;
}

bool OAISocial_Friends_PlatformFriendResponse::is_items_per_page_Set() const{
    return m_items_per_page_isSet;
}

bool OAISocial_Friends_PlatformFriendResponse::is_items_per_page_Valid() const{
    return m_items_per_page_isValid;
}

QList<OAISocial_Friends_PlatformFriend> OAISocial_Friends_PlatformFriendResponse::getPlatformFriends() const {
    return m_platform_friends;
}
void OAISocial_Friends_PlatformFriendResponse::setPlatformFriends(const QList<OAISocial_Friends_PlatformFriend> &platform_friends) {
    m_platform_friends = platform_friends;
    m_platform_friends_isSet = true;
}

bool OAISocial_Friends_PlatformFriendResponse::is_platform_friends_Set() const{
    return m_platform_friends_isSet;
}

bool OAISocial_Friends_PlatformFriendResponse::is_platform_friends_Valid() const{
    return m_platform_friends_isValid;
}

bool OAISocial_Friends_PlatformFriendResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_more_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_friends.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISocial_Friends_PlatformFriendResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
