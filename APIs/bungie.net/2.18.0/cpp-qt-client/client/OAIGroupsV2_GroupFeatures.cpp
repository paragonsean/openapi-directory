/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupsV2_GroupFeatures.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupsV2_GroupFeatures::OAIGroupsV2_GroupFeatures(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupsV2_GroupFeatures::OAIGroupsV2_GroupFeatures() {
    this->initializeModel();
}

OAIGroupsV2_GroupFeatures::~OAIGroupsV2_GroupFeatures() {}

void OAIGroupsV2_GroupFeatures::initializeModel() {

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_host_guided_game_permission_override_isSet = false;
    m_host_guided_game_permission_override_isValid = false;

    m_invite_permission_override_isSet = false;
    m_invite_permission_override_isValid = false;

    m_join_level_isSet = false;
    m_join_level_isValid = false;

    m_maximum_members_isSet = false;
    m_maximum_members_isValid = false;

    m_maximum_memberships_of_group_type_isSet = false;
    m_maximum_memberships_of_group_type_isValid = false;

    m_membership_types_isSet = false;
    m_membership_types_isValid = false;

    m_update_banner_permission_override_isSet = false;
    m_update_banner_permission_override_isValid = false;

    m_update_culture_permission_override_isSet = false;
    m_update_culture_permission_override_isValid = false;
}

void OAIGroupsV2_GroupFeatures::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupsV2_GroupFeatures::fromJsonObject(QJsonObject json) {

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_host_guided_game_permission_override_isValid = ::OpenAPI::fromJsonValue(m_host_guided_game_permission_override, json[QString("hostGuidedGamePermissionOverride")]);
    m_host_guided_game_permission_override_isSet = !json[QString("hostGuidedGamePermissionOverride")].isNull() && m_host_guided_game_permission_override_isValid;

    m_invite_permission_override_isValid = ::OpenAPI::fromJsonValue(m_invite_permission_override, json[QString("invitePermissionOverride")]);
    m_invite_permission_override_isSet = !json[QString("invitePermissionOverride")].isNull() && m_invite_permission_override_isValid;

    m_join_level_isValid = ::OpenAPI::fromJsonValue(m_join_level, json[QString("joinLevel")]);
    m_join_level_isSet = !json[QString("joinLevel")].isNull() && m_join_level_isValid;

    m_maximum_members_isValid = ::OpenAPI::fromJsonValue(m_maximum_members, json[QString("maximumMembers")]);
    m_maximum_members_isSet = !json[QString("maximumMembers")].isNull() && m_maximum_members_isValid;

    m_maximum_memberships_of_group_type_isValid = ::OpenAPI::fromJsonValue(m_maximum_memberships_of_group_type, json[QString("maximumMembershipsOfGroupType")]);
    m_maximum_memberships_of_group_type_isSet = !json[QString("maximumMembershipsOfGroupType")].isNull() && m_maximum_memberships_of_group_type_isValid;

    m_membership_types_isValid = ::OpenAPI::fromJsonValue(m_membership_types, json[QString("membershipTypes")]);
    m_membership_types_isSet = !json[QString("membershipTypes")].isNull() && m_membership_types_isValid;

    m_update_banner_permission_override_isValid = ::OpenAPI::fromJsonValue(m_update_banner_permission_override, json[QString("updateBannerPermissionOverride")]);
    m_update_banner_permission_override_isSet = !json[QString("updateBannerPermissionOverride")].isNull() && m_update_banner_permission_override_isValid;

    m_update_culture_permission_override_isValid = ::OpenAPI::fromJsonValue(m_update_culture_permission_override, json[QString("updateCulturePermissionOverride")]);
    m_update_culture_permission_override_isSet = !json[QString("updateCulturePermissionOverride")].isNull() && m_update_culture_permission_override_isValid;
}

QString OAIGroupsV2_GroupFeatures::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupsV2_GroupFeatures::asJsonObject() const {
    QJsonObject obj;
    if (m_capabilities_isSet) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_host_guided_game_permission_override_isSet) {
        obj.insert(QString("hostGuidedGamePermissionOverride"), ::OpenAPI::toJsonValue(m_host_guided_game_permission_override));
    }
    if (m_invite_permission_override_isSet) {
        obj.insert(QString("invitePermissionOverride"), ::OpenAPI::toJsonValue(m_invite_permission_override));
    }
    if (m_join_level_isSet) {
        obj.insert(QString("joinLevel"), ::OpenAPI::toJsonValue(m_join_level));
    }
    if (m_maximum_members_isSet) {
        obj.insert(QString("maximumMembers"), ::OpenAPI::toJsonValue(m_maximum_members));
    }
    if (m_maximum_memberships_of_group_type_isSet) {
        obj.insert(QString("maximumMembershipsOfGroupType"), ::OpenAPI::toJsonValue(m_maximum_memberships_of_group_type));
    }
    if (m_membership_types.size() > 0) {
        obj.insert(QString("membershipTypes"), ::OpenAPI::toJsonValue(m_membership_types));
    }
    if (m_update_banner_permission_override_isSet) {
        obj.insert(QString("updateBannerPermissionOverride"), ::OpenAPI::toJsonValue(m_update_banner_permission_override));
    }
    if (m_update_culture_permission_override_isSet) {
        obj.insert(QString("updateCulturePermissionOverride"), ::OpenAPI::toJsonValue(m_update_culture_permission_override));
    }
    return obj;
}

qint32 OAIGroupsV2_GroupFeatures::getCapabilities() const {
    return m_capabilities;
}
void OAIGroupsV2_GroupFeatures::setCapabilities(const qint32 &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIGroupsV2_GroupFeatures::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIGroupsV2_GroupFeatures::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

qint32 OAIGroupsV2_GroupFeatures::getHostGuidedGamePermissionOverride() const {
    return m_host_guided_game_permission_override;
}
void OAIGroupsV2_GroupFeatures::setHostGuidedGamePermissionOverride(const qint32 &host_guided_game_permission_override) {
    m_host_guided_game_permission_override = host_guided_game_permission_override;
    m_host_guided_game_permission_override_isSet = true;
}

bool OAIGroupsV2_GroupFeatures::is_host_guided_game_permission_override_Set() const{
    return m_host_guided_game_permission_override_isSet;
}

bool OAIGroupsV2_GroupFeatures::is_host_guided_game_permission_override_Valid() const{
    return m_host_guided_game_permission_override_isValid;
}

bool OAIGroupsV2_GroupFeatures::isInvitePermissionOverride() const {
    return m_invite_permission_override;
}
void OAIGroupsV2_GroupFeatures::setInvitePermissionOverride(const bool &invite_permission_override) {
    m_invite_permission_override = invite_permission_override;
    m_invite_permission_override_isSet = true;
}

bool OAIGroupsV2_GroupFeatures::is_invite_permission_override_Set() const{
    return m_invite_permission_override_isSet;
}

bool OAIGroupsV2_GroupFeatures::is_invite_permission_override_Valid() const{
    return m_invite_permission_override_isValid;
}

qint32 OAIGroupsV2_GroupFeatures::getJoinLevel() const {
    return m_join_level;
}
void OAIGroupsV2_GroupFeatures::setJoinLevel(const qint32 &join_level) {
    m_join_level = join_level;
    m_join_level_isSet = true;
}

bool OAIGroupsV2_GroupFeatures::is_join_level_Set() const{
    return m_join_level_isSet;
}

bool OAIGroupsV2_GroupFeatures::is_join_level_Valid() const{
    return m_join_level_isValid;
}

qint32 OAIGroupsV2_GroupFeatures::getMaximumMembers() const {
    return m_maximum_members;
}
void OAIGroupsV2_GroupFeatures::setMaximumMembers(const qint32 &maximum_members) {
    m_maximum_members = maximum_members;
    m_maximum_members_isSet = true;
}

bool OAIGroupsV2_GroupFeatures::is_maximum_members_Set() const{
    return m_maximum_members_isSet;
}

bool OAIGroupsV2_GroupFeatures::is_maximum_members_Valid() const{
    return m_maximum_members_isValid;
}

qint32 OAIGroupsV2_GroupFeatures::getMaximumMembershipsOfGroupType() const {
    return m_maximum_memberships_of_group_type;
}
void OAIGroupsV2_GroupFeatures::setMaximumMembershipsOfGroupType(const qint32 &maximum_memberships_of_group_type) {
    m_maximum_memberships_of_group_type = maximum_memberships_of_group_type;
    m_maximum_memberships_of_group_type_isSet = true;
}

bool OAIGroupsV2_GroupFeatures::is_maximum_memberships_of_group_type_Set() const{
    return m_maximum_memberships_of_group_type_isSet;
}

bool OAIGroupsV2_GroupFeatures::is_maximum_memberships_of_group_type_Valid() const{
    return m_maximum_memberships_of_group_type_isValid;
}

QList<qint32> OAIGroupsV2_GroupFeatures::getMembershipTypes() const {
    return m_membership_types;
}
void OAIGroupsV2_GroupFeatures::setMembershipTypes(const QList<qint32> &membership_types) {
    m_membership_types = membership_types;
    m_membership_types_isSet = true;
}

bool OAIGroupsV2_GroupFeatures::is_membership_types_Set() const{
    return m_membership_types_isSet;
}

bool OAIGroupsV2_GroupFeatures::is_membership_types_Valid() const{
    return m_membership_types_isValid;
}

bool OAIGroupsV2_GroupFeatures::isUpdateBannerPermissionOverride() const {
    return m_update_banner_permission_override;
}
void OAIGroupsV2_GroupFeatures::setUpdateBannerPermissionOverride(const bool &update_banner_permission_override) {
    m_update_banner_permission_override = update_banner_permission_override;
    m_update_banner_permission_override_isSet = true;
}

bool OAIGroupsV2_GroupFeatures::is_update_banner_permission_override_Set() const{
    return m_update_banner_permission_override_isSet;
}

bool OAIGroupsV2_GroupFeatures::is_update_banner_permission_override_Valid() const{
    return m_update_banner_permission_override_isValid;
}

bool OAIGroupsV2_GroupFeatures::isUpdateCulturePermissionOverride() const {
    return m_update_culture_permission_override;
}
void OAIGroupsV2_GroupFeatures::setUpdateCulturePermissionOverride(const bool &update_culture_permission_override) {
    m_update_culture_permission_override = update_culture_permission_override;
    m_update_culture_permission_override_isSet = true;
}

bool OAIGroupsV2_GroupFeatures::is_update_culture_permission_override_Set() const{
    return m_update_culture_permission_override_isSet;
}

bool OAIGroupsV2_GroupFeatures::is_update_culture_permission_override_Valid() const{
    return m_update_culture_permission_override_isValid;
}

bool OAIGroupsV2_GroupFeatures::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capabilities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_guided_game_permission_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invite_permission_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_join_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_members_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_memberships_of_group_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_banner_permission_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_culture_permission_override_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupsV2_GroupFeatures::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
