/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyNodeActivationRequirement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyNodeActivationRequirement::OAIDestiny_Definitions_DestinyNodeActivationRequirement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyNodeActivationRequirement::OAIDestiny_Definitions_DestinyNodeActivationRequirement() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyNodeActivationRequirement::~OAIDestiny_Definitions_DestinyNodeActivationRequirement() {}

void OAIDestiny_Definitions_DestinyNodeActivationRequirement::initializeModel() {

    m_grid_level_isSet = false;
    m_grid_level_isValid = false;

    m_material_requirement_hashes_isSet = false;
    m_material_requirement_hashes_isValid = false;
}

void OAIDestiny_Definitions_DestinyNodeActivationRequirement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyNodeActivationRequirement::fromJsonObject(QJsonObject json) {

    m_grid_level_isValid = ::OpenAPI::fromJsonValue(m_grid_level, json[QString("gridLevel")]);
    m_grid_level_isSet = !json[QString("gridLevel")].isNull() && m_grid_level_isValid;

    m_material_requirement_hashes_isValid = ::OpenAPI::fromJsonValue(m_material_requirement_hashes, json[QString("materialRequirementHashes")]);
    m_material_requirement_hashes_isSet = !json[QString("materialRequirementHashes")].isNull() && m_material_requirement_hashes_isValid;
}

QString OAIDestiny_Definitions_DestinyNodeActivationRequirement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyNodeActivationRequirement::asJsonObject() const {
    QJsonObject obj;
    if (m_grid_level_isSet) {
        obj.insert(QString("gridLevel"), ::OpenAPI::toJsonValue(m_grid_level));
    }
    if (m_material_requirement_hashes.size() > 0) {
        obj.insert(QString("materialRequirementHashes"), ::OpenAPI::toJsonValue(m_material_requirement_hashes));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_DestinyNodeActivationRequirement::getGridLevel() const {
    return m_grid_level;
}
void OAIDestiny_Definitions_DestinyNodeActivationRequirement::setGridLevel(const qint32 &grid_level) {
    m_grid_level = grid_level;
    m_grid_level_isSet = true;
}

bool OAIDestiny_Definitions_DestinyNodeActivationRequirement::is_grid_level_Set() const{
    return m_grid_level_isSet;
}

bool OAIDestiny_Definitions_DestinyNodeActivationRequirement::is_grid_level_Valid() const{
    return m_grid_level_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyNodeActivationRequirement::getMaterialRequirementHashes() const {
    return m_material_requirement_hashes;
}
void OAIDestiny_Definitions_DestinyNodeActivationRequirement::setMaterialRequirementHashes(const QList<qint32> &material_requirement_hashes) {
    m_material_requirement_hashes = material_requirement_hashes;
    m_material_requirement_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyNodeActivationRequirement::is_material_requirement_hashes_Set() const{
    return m_material_requirement_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyNodeActivationRequirement::is_material_requirement_hashes_Valid() const{
    return m_material_requirement_hashes_isValid;
}

bool OAIDestiny_Definitions_DestinyNodeActivationRequirement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_grid_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_material_requirement_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyNodeActivationRequirement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
