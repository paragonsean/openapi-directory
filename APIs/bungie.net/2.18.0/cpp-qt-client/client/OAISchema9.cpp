/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchema9.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchema9::OAISchema9(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchema9::OAISchema9() {
    this->initializeModel();
}

OAISchema9::~OAISchema9() {}

void OAISchema9::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISchema9::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISchema9::fromJson(QString jsonString) {
    
    if ( jsonString.compare(QString::number(0), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema9::_0;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(1), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema9::_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(2), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema9::_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(3), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema9::_3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(4), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema9::_4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(5), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema9::_5;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(8), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema9::_8;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(9), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema9::_9;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(10), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema9::_10;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(12), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema9::_12;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(14), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema9::_14;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(16), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema9::_16;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(18), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema9::_18;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(20), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema9::_20;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISchema9::fromJsonValue(QJsonValue json) {
m_value = static_cast<eOAISchema9>(json.toInt());
}

QString OAISchema9::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISchema9::_0:
            val = QString::number(0);
            break;
        case eOAISchema9::_1:
            val = QString::number(1);
            break;
        case eOAISchema9::_2:
            val = QString::number(2);
            break;
        case eOAISchema9::_3:
            val = QString::number(3);
            break;
        case eOAISchema9::_4:
            val = QString::number(4);
            break;
        case eOAISchema9::_5:
            val = QString::number(5);
            break;
        case eOAISchema9::_8:
            val = QString::number(8);
            break;
        case eOAISchema9::_9:
            val = QString::number(9);
            break;
        case eOAISchema9::_10:
            val = QString::number(10);
            break;
        case eOAISchema9::_12:
            val = QString::number(12);
            break;
        case eOAISchema9::_14:
            val = QString::number(14);
            break;
        case eOAISchema9::_16:
            val = QString::number(16);
            break;
        case eOAISchema9::_18:
            val = QString::number(18);
            break;
        case eOAISchema9::_20:
            val = QString::number(20);
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISchema9::asJsonValue() const {
    
    return QJsonValue(static_cast<int>(m_value));
}


OAISchema9::eOAISchema9 OAISchema9::getValue() const {
    return m_value;
}

void OAISchema9::setValue(const OAISchema9::eOAISchema9& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISchema9::isSet() const {
    
    return m_value_isSet;
}

bool OAISchema9::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
