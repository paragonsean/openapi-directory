/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Components_Items_DestinyItemReusablePlugsComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Components_Items_DestinyItemReusablePlugsComponent::OAIDestiny_Components_Items_DestinyItemReusablePlugsComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Components_Items_DestinyItemReusablePlugsComponent::OAIDestiny_Components_Items_DestinyItemReusablePlugsComponent() {
    this->initializeModel();
}

OAIDestiny_Components_Items_DestinyItemReusablePlugsComponent::~OAIDestiny_Components_Items_DestinyItemReusablePlugsComponent() {}

void OAIDestiny_Components_Items_DestinyItemReusablePlugsComponent::initializeModel() {

    m_plugs_isSet = false;
    m_plugs_isValid = false;
}

void OAIDestiny_Components_Items_DestinyItemReusablePlugsComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Components_Items_DestinyItemReusablePlugsComponent::fromJsonObject(QJsonObject json) {

    if(json["plugs"].isObject()){
        auto varmap = json["plugs"].toObject().toVariantMap();
        m_plugs_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<OAIDestiny_Sockets_DestinyItemPlugBase> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_plugs_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_plugs_isSet &= !jval.isNull() && m_plugs_isValid;
                m_plugs.insert(m_plugs.end(), val, item);
            }
        }
    }
}

QString OAIDestiny_Components_Items_DestinyItemReusablePlugsComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Components_Items_DestinyItemReusablePlugsComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_plugs.size() > 0) {
        
        obj.insert(QString("plugs"), toJsonValue(m_plugs));
    }
    return obj;
}

QMap<QString, QList<OAIDestiny_Sockets_DestinyItemPlugBase>> OAIDestiny_Components_Items_DestinyItemReusablePlugsComponent::getPlugs() const {
    return m_plugs;
}
void OAIDestiny_Components_Items_DestinyItemReusablePlugsComponent::setPlugs(const QMap<QString, QList<OAIDestiny_Sockets_DestinyItemPlugBase>> &plugs) {
    m_plugs = plugs;
    m_plugs_isSet = true;
}

bool OAIDestiny_Components_Items_DestinyItemReusablePlugsComponent::is_plugs_Set() const{
    return m_plugs_isSet;
}

bool OAIDestiny_Components_Items_DestinyItemReusablePlugsComponent::is_plugs_Valid() const{
    return m_plugs_isValid;
}

bool OAIDestiny_Components_Items_DestinyItemReusablePlugsComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_plugs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Components_Items_DestinyItemReusablePlugsComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
