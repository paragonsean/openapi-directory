/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyLocationReleaseDefinition.h
 *
 * A specific \&quot;spot\&quot; referred to by a location. Only one of these can be active at a time for a given Location.
 */

#ifndef OAIDestiny_Definitions_DestinyLocationReleaseDefinition_H
#define OAIDestiny_Definitions_DestinyLocationReleaseDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition;

class OAIDestiny_Definitions_DestinyLocationReleaseDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyLocationReleaseDefinition();
    OAIDestiny_Definitions_DestinyLocationReleaseDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyLocationReleaseDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getActivityBubbleName() const;
    void setActivityBubbleName(const qint32 &activity_bubble_name);
    bool is_activity_bubble_name_Set() const;
    bool is_activity_bubble_name_Valid() const;

    qint32 getActivityGraphHash() const;
    void setActivityGraphHash(const qint32 &activity_graph_hash);
    bool is_activity_graph_hash_Set() const;
    bool is_activity_graph_hash_Valid() const;

    qint32 getActivityGraphNodeHash() const;
    void setActivityGraphNodeHash(const qint32 &activity_graph_node_hash);
    bool is_activity_graph_node_hash_Set() const;
    bool is_activity_graph_node_hash_Valid() const;

    qint32 getActivityHash() const;
    void setActivityHash(const qint32 &activity_hash);
    bool is_activity_hash_Set() const;
    bool is_activity_hash_Valid() const;

    qint32 getActivityPathBundle() const;
    void setActivityPathBundle(const qint32 &activity_path_bundle);
    bool is_activity_path_bundle_Set() const;
    bool is_activity_path_bundle_Valid() const;

    qint32 getActivityPathDestination() const;
    void setActivityPathDestination(const qint32 &activity_path_destination);
    bool is_activity_path_destination_Set() const;
    bool is_activity_path_destination_Valid() const;

    qint32 getDestinationHash() const;
    void setDestinationHash(const qint32 &destination_hash);
    bool is_destination_hash_Set() const;
    bool is_destination_hash_Valid() const;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition getDisplayProperties() const;
    void setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties);
    bool is_display_properties_Set() const;
    bool is_display_properties_Valid() const;

    QString getLargeTransparentIcon() const;
    void setLargeTransparentIcon(const QString &large_transparent_icon);
    bool is_large_transparent_icon_Set() const;
    bool is_large_transparent_icon_Valid() const;

    QString getMapIcon() const;
    void setMapIcon(const QString &map_icon);
    bool is_map_icon_Set() const;
    bool is_map_icon_Valid() const;

    qint32 getNavPointType() const;
    void setNavPointType(const qint32 &nav_point_type);
    bool is_nav_point_type_Set() const;
    bool is_nav_point_type_Valid() const;

    QString getSmallTransparentIcon() const;
    void setSmallTransparentIcon(const QString &small_transparent_icon);
    bool is_small_transparent_icon_Set() const;
    bool is_small_transparent_icon_Valid() const;

    qint32 getSpawnPoint() const;
    void setSpawnPoint(const qint32 &spawn_point);
    bool is_spawn_point_Set() const;
    bool is_spawn_point_Valid() const;

    QList<qint32> getWorldPosition() const;
    void setWorldPosition(const QList<qint32> &world_position);
    bool is_world_position_Set() const;
    bool is_world_position_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_activity_bubble_name;
    bool m_activity_bubble_name_isSet;
    bool m_activity_bubble_name_isValid;

    qint32 m_activity_graph_hash;
    bool m_activity_graph_hash_isSet;
    bool m_activity_graph_hash_isValid;

    qint32 m_activity_graph_node_hash;
    bool m_activity_graph_node_hash_isSet;
    bool m_activity_graph_node_hash_isValid;

    qint32 m_activity_hash;
    bool m_activity_hash_isSet;
    bool m_activity_hash_isValid;

    qint32 m_activity_path_bundle;
    bool m_activity_path_bundle_isSet;
    bool m_activity_path_bundle_isValid;

    qint32 m_activity_path_destination;
    bool m_activity_path_destination_isSet;
    bool m_activity_path_destination_isValid;

    qint32 m_destination_hash;
    bool m_destination_hash_isSet;
    bool m_destination_hash_isValid;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition m_display_properties;
    bool m_display_properties_isSet;
    bool m_display_properties_isValid;

    QString m_large_transparent_icon;
    bool m_large_transparent_icon_isSet;
    bool m_large_transparent_icon_isValid;

    QString m_map_icon;
    bool m_map_icon_isSet;
    bool m_map_icon_isValid;

    qint32 m_nav_point_type;
    bool m_nav_point_type_isSet;
    bool m_nav_point_type_isValid;

    QString m_small_transparent_icon;
    bool m_small_transparent_icon_isSet;
    bool m_small_transparent_icon_isValid;

    qint32 m_spawn_point;
    bool m_spawn_point_isSet;
    bool m_spawn_point_isValid;

    QList<qint32> m_world_position;
    bool m_world_position_isSet;
    bool m_world_position_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyLocationReleaseDefinition)

#endif // OAIDestiny_Definitions_DestinyLocationReleaseDefinition_H
