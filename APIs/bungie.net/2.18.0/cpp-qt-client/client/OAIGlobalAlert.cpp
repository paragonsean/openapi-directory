/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlobalAlert.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlobalAlert::OAIGlobalAlert(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlobalAlert::OAIGlobalAlert() {
    this->initializeModel();
}

OAIGlobalAlert::~OAIGlobalAlert() {}

void OAIGlobalAlert::initializeModel() {

    m_alert_html_isSet = false;
    m_alert_html_isValid = false;

    m_alert_key_isSet = false;
    m_alert_key_isValid = false;

    m_alert_level_isSet = false;
    m_alert_level_isValid = false;

    m_alert_link_isSet = false;
    m_alert_link_isValid = false;

    m_alert_timestamp_isSet = false;
    m_alert_timestamp_isValid = false;

    m_alert_type_isSet = false;
    m_alert_type_isValid = false;

    m_stream_info_isSet = false;
    m_stream_info_isValid = false;
}

void OAIGlobalAlert::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlobalAlert::fromJsonObject(QJsonObject json) {

    m_alert_html_isValid = ::OpenAPI::fromJsonValue(m_alert_html, json[QString("AlertHtml")]);
    m_alert_html_isSet = !json[QString("AlertHtml")].isNull() && m_alert_html_isValid;

    m_alert_key_isValid = ::OpenAPI::fromJsonValue(m_alert_key, json[QString("AlertKey")]);
    m_alert_key_isSet = !json[QString("AlertKey")].isNull() && m_alert_key_isValid;

    m_alert_level_isValid = ::OpenAPI::fromJsonValue(m_alert_level, json[QString("AlertLevel")]);
    m_alert_level_isSet = !json[QString("AlertLevel")].isNull() && m_alert_level_isValid;

    m_alert_link_isValid = ::OpenAPI::fromJsonValue(m_alert_link, json[QString("AlertLink")]);
    m_alert_link_isSet = !json[QString("AlertLink")].isNull() && m_alert_link_isValid;

    m_alert_timestamp_isValid = ::OpenAPI::fromJsonValue(m_alert_timestamp, json[QString("AlertTimestamp")]);
    m_alert_timestamp_isSet = !json[QString("AlertTimestamp")].isNull() && m_alert_timestamp_isValid;

    m_alert_type_isValid = ::OpenAPI::fromJsonValue(m_alert_type, json[QString("AlertType")]);
    m_alert_type_isSet = !json[QString("AlertType")].isNull() && m_alert_type_isValid;

    m_stream_info_isValid = ::OpenAPI::fromJsonValue(m_stream_info, json[QString("StreamInfo")]);
    m_stream_info_isSet = !json[QString("StreamInfo")].isNull() && m_stream_info_isValid;
}

QString OAIGlobalAlert::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlobalAlert::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_html_isSet) {
        obj.insert(QString("AlertHtml"), ::OpenAPI::toJsonValue(m_alert_html));
    }
    if (m_alert_key_isSet) {
        obj.insert(QString("AlertKey"), ::OpenAPI::toJsonValue(m_alert_key));
    }
    if (m_alert_level_isSet) {
        obj.insert(QString("AlertLevel"), ::OpenAPI::toJsonValue(m_alert_level));
    }
    if (m_alert_link_isSet) {
        obj.insert(QString("AlertLink"), ::OpenAPI::toJsonValue(m_alert_link));
    }
    if (m_alert_timestamp_isSet) {
        obj.insert(QString("AlertTimestamp"), ::OpenAPI::toJsonValue(m_alert_timestamp));
    }
    if (m_alert_type_isSet) {
        obj.insert(QString("AlertType"), ::OpenAPI::toJsonValue(m_alert_type));
    }
    if (m_stream_info.isSet()) {
        obj.insert(QString("StreamInfo"), ::OpenAPI::toJsonValue(m_stream_info));
    }
    return obj;
}

QString OAIGlobalAlert::getAlertHtml() const {
    return m_alert_html;
}
void OAIGlobalAlert::setAlertHtml(const QString &alert_html) {
    m_alert_html = alert_html;
    m_alert_html_isSet = true;
}

bool OAIGlobalAlert::is_alert_html_Set() const{
    return m_alert_html_isSet;
}

bool OAIGlobalAlert::is_alert_html_Valid() const{
    return m_alert_html_isValid;
}

QString OAIGlobalAlert::getAlertKey() const {
    return m_alert_key;
}
void OAIGlobalAlert::setAlertKey(const QString &alert_key) {
    m_alert_key = alert_key;
    m_alert_key_isSet = true;
}

bool OAIGlobalAlert::is_alert_key_Set() const{
    return m_alert_key_isSet;
}

bool OAIGlobalAlert::is_alert_key_Valid() const{
    return m_alert_key_isValid;
}

qint32 OAIGlobalAlert::getAlertLevel() const {
    return m_alert_level;
}
void OAIGlobalAlert::setAlertLevel(const qint32 &alert_level) {
    m_alert_level = alert_level;
    m_alert_level_isSet = true;
}

bool OAIGlobalAlert::is_alert_level_Set() const{
    return m_alert_level_isSet;
}

bool OAIGlobalAlert::is_alert_level_Valid() const{
    return m_alert_level_isValid;
}

QString OAIGlobalAlert::getAlertLink() const {
    return m_alert_link;
}
void OAIGlobalAlert::setAlertLink(const QString &alert_link) {
    m_alert_link = alert_link;
    m_alert_link_isSet = true;
}

bool OAIGlobalAlert::is_alert_link_Set() const{
    return m_alert_link_isSet;
}

bool OAIGlobalAlert::is_alert_link_Valid() const{
    return m_alert_link_isValid;
}

QDateTime OAIGlobalAlert::getAlertTimestamp() const {
    return m_alert_timestamp;
}
void OAIGlobalAlert::setAlertTimestamp(const QDateTime &alert_timestamp) {
    m_alert_timestamp = alert_timestamp;
    m_alert_timestamp_isSet = true;
}

bool OAIGlobalAlert::is_alert_timestamp_Set() const{
    return m_alert_timestamp_isSet;
}

bool OAIGlobalAlert::is_alert_timestamp_Valid() const{
    return m_alert_timestamp_isValid;
}

qint32 OAIGlobalAlert::getAlertType() const {
    return m_alert_type;
}
void OAIGlobalAlert::setAlertType(const qint32 &alert_type) {
    m_alert_type = alert_type;
    m_alert_type_isSet = true;
}

bool OAIGlobalAlert::is_alert_type_Set() const{
    return m_alert_type_isSet;
}

bool OAIGlobalAlert::is_alert_type_Valid() const{
    return m_alert_type_isValid;
}

OAIStreamInfo OAIGlobalAlert::getStreamInfo() const {
    return m_stream_info;
}
void OAIGlobalAlert::setStreamInfo(const OAIStreamInfo &stream_info) {
    m_stream_info = stream_info;
    m_stream_info_isSet = true;
}

bool OAIGlobalAlert::is_stream_info_Set() const{
    return m_stream_info_isSet;
}

bool OAIGlobalAlert::is_stream_info_Valid() const{
    return m_stream_info_isValid;
}

bool OAIGlobalAlert::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlobalAlert::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
