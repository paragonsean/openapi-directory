/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyTalentGridDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyTalentGridDefinition::OAIDestiny_Definitions_DestinyTalentGridDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyTalentGridDefinition::OAIDestiny_Definitions_DestinyTalentGridDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyTalentGridDefinition::~OAIDestiny_Definitions_DestinyTalentGridDefinition() {}

void OAIDestiny_Definitions_DestinyTalentGridDefinition::initializeModel() {

    m_exclusive_sets_isSet = false;
    m_exclusive_sets_isValid = false;

    m_grid_level_per_column_isSet = false;
    m_grid_level_per_column_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_independent_node_indexes_isSet = false;
    m_independent_node_indexes_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_max_grid_level_isSet = false;
    m_max_grid_level_isValid = false;

    m_node_categories_isSet = false;
    m_node_categories_isValid = false;

    m_nodes_isSet = false;
    m_nodes_isValid = false;

    m_progression_hash_isSet = false;
    m_progression_hash_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;
}

void OAIDestiny_Definitions_DestinyTalentGridDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyTalentGridDefinition::fromJsonObject(QJsonObject json) {

    m_exclusive_sets_isValid = ::OpenAPI::fromJsonValue(m_exclusive_sets, json[QString("exclusiveSets")]);
    m_exclusive_sets_isSet = !json[QString("exclusiveSets")].isNull() && m_exclusive_sets_isValid;

    m_grid_level_per_column_isValid = ::OpenAPI::fromJsonValue(m_grid_level_per_column, json[QString("gridLevelPerColumn")]);
    m_grid_level_per_column_isSet = !json[QString("gridLevelPerColumn")].isNull() && m_grid_level_per_column_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_independent_node_indexes_isValid = ::OpenAPI::fromJsonValue(m_independent_node_indexes, json[QString("independentNodeIndexes")]);
    m_independent_node_indexes_isSet = !json[QString("independentNodeIndexes")].isNull() && m_independent_node_indexes_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_max_grid_level_isValid = ::OpenAPI::fromJsonValue(m_max_grid_level, json[QString("maxGridLevel")]);
    m_max_grid_level_isSet = !json[QString("maxGridLevel")].isNull() && m_max_grid_level_isValid;

    m_node_categories_isValid = ::OpenAPI::fromJsonValue(m_node_categories, json[QString("nodeCategories")]);
    m_node_categories_isSet = !json[QString("nodeCategories")].isNull() && m_node_categories_isValid;

    m_nodes_isValid = ::OpenAPI::fromJsonValue(m_nodes, json[QString("nodes")]);
    m_nodes_isSet = !json[QString("nodes")].isNull() && m_nodes_isValid;

    m_progression_hash_isValid = ::OpenAPI::fromJsonValue(m_progression_hash, json[QString("progressionHash")]);
    m_progression_hash_isSet = !json[QString("progressionHash")].isNull() && m_progression_hash_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;
}

QString OAIDestiny_Definitions_DestinyTalentGridDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyTalentGridDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_exclusive_sets.size() > 0) {
        obj.insert(QString("exclusiveSets"), ::OpenAPI::toJsonValue(m_exclusive_sets));
    }
    if (m_grid_level_per_column_isSet) {
        obj.insert(QString("gridLevelPerColumn"), ::OpenAPI::toJsonValue(m_grid_level_per_column));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_independent_node_indexes.size() > 0) {
        obj.insert(QString("independentNodeIndexes"), ::OpenAPI::toJsonValue(m_independent_node_indexes));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_max_grid_level_isSet) {
        obj.insert(QString("maxGridLevel"), ::OpenAPI::toJsonValue(m_max_grid_level));
    }
    if (m_node_categories.size() > 0) {
        obj.insert(QString("nodeCategories"), ::OpenAPI::toJsonValue(m_node_categories));
    }
    if (m_nodes.size() > 0) {
        obj.insert(QString("nodes"), ::OpenAPI::toJsonValue(m_nodes));
    }
    if (m_progression_hash_isSet) {
        obj.insert(QString("progressionHash"), ::OpenAPI::toJsonValue(m_progression_hash));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    return obj;
}

QList<OAIDestiny_Definitions_DestinyTalentNodeExclusiveSetDefinition> OAIDestiny_Definitions_DestinyTalentGridDefinition::getExclusiveSets() const {
    return m_exclusive_sets;
}
void OAIDestiny_Definitions_DestinyTalentGridDefinition::setExclusiveSets(const QList<OAIDestiny_Definitions_DestinyTalentNodeExclusiveSetDefinition> &exclusive_sets) {
    m_exclusive_sets = exclusive_sets;
    m_exclusive_sets_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::is_exclusive_sets_Set() const{
    return m_exclusive_sets_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::is_exclusive_sets_Valid() const{
    return m_exclusive_sets_isValid;
}

qint32 OAIDestiny_Definitions_DestinyTalentGridDefinition::getGridLevelPerColumn() const {
    return m_grid_level_per_column;
}
void OAIDestiny_Definitions_DestinyTalentGridDefinition::setGridLevelPerColumn(const qint32 &grid_level_per_column) {
    m_grid_level_per_column = grid_level_per_column;
    m_grid_level_per_column_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::is_grid_level_per_column_Set() const{
    return m_grid_level_per_column_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::is_grid_level_per_column_Valid() const{
    return m_grid_level_per_column_isValid;
}

QMap<QString, OAIDestiny_Definitions_DestinyTalentExclusiveGroup> OAIDestiny_Definitions_DestinyTalentGridDefinition::getGroups() const {
    return m_groups;
}
void OAIDestiny_Definitions_DestinyTalentGridDefinition::setGroups(const QMap<QString, OAIDestiny_Definitions_DestinyTalentExclusiveGroup> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::is_groups_Valid() const{
    return m_groups_isValid;
}

qint32 OAIDestiny_Definitions_DestinyTalentGridDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_DestinyTalentGridDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyTalentGridDefinition::getIndependentNodeIndexes() const {
    return m_independent_node_indexes;
}
void OAIDestiny_Definitions_DestinyTalentGridDefinition::setIndependentNodeIndexes(const QList<qint32> &independent_node_indexes) {
    m_independent_node_indexes = independent_node_indexes;
    m_independent_node_indexes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::is_independent_node_indexes_Set() const{
    return m_independent_node_indexes_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::is_independent_node_indexes_Valid() const{
    return m_independent_node_indexes_isValid;
}

qint32 OAIDestiny_Definitions_DestinyTalentGridDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_DestinyTalentGridDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::is_index_Valid() const{
    return m_index_isValid;
}

qint32 OAIDestiny_Definitions_DestinyTalentGridDefinition::getMaxGridLevel() const {
    return m_max_grid_level;
}
void OAIDestiny_Definitions_DestinyTalentGridDefinition::setMaxGridLevel(const qint32 &max_grid_level) {
    m_max_grid_level = max_grid_level;
    m_max_grid_level_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::is_max_grid_level_Set() const{
    return m_max_grid_level_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::is_max_grid_level_Valid() const{
    return m_max_grid_level_isValid;
}

QList<OAIDestiny_Definitions_DestinyTalentNodeCategory> OAIDestiny_Definitions_DestinyTalentGridDefinition::getNodeCategories() const {
    return m_node_categories;
}
void OAIDestiny_Definitions_DestinyTalentGridDefinition::setNodeCategories(const QList<OAIDestiny_Definitions_DestinyTalentNodeCategory> &node_categories) {
    m_node_categories = node_categories;
    m_node_categories_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::is_node_categories_Set() const{
    return m_node_categories_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::is_node_categories_Valid() const{
    return m_node_categories_isValid;
}

QList<OAIDestiny_Definitions_DestinyTalentNodeDefinition> OAIDestiny_Definitions_DestinyTalentGridDefinition::getNodes() const {
    return m_nodes;
}
void OAIDestiny_Definitions_DestinyTalentGridDefinition::setNodes(const QList<OAIDestiny_Definitions_DestinyTalentNodeDefinition> &nodes) {
    m_nodes = nodes;
    m_nodes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::is_nodes_Set() const{
    return m_nodes_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::is_nodes_Valid() const{
    return m_nodes_isValid;
}

qint32 OAIDestiny_Definitions_DestinyTalentGridDefinition::getProgressionHash() const {
    return m_progression_hash;
}
void OAIDestiny_Definitions_DestinyTalentGridDefinition::setProgressionHash(const qint32 &progression_hash) {
    m_progression_hash = progression_hash;
    m_progression_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::is_progression_hash_Set() const{
    return m_progression_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::is_progression_hash_Valid() const{
    return m_progression_hash_isValid;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_DestinyTalentGridDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exclusive_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_grid_level_per_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_independent_node_indexes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_grid_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_progression_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyTalentGridDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
