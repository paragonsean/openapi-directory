/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForum_ForumRecruitmentDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForum_ForumRecruitmentDetail::OAIForum_ForumRecruitmentDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForum_ForumRecruitmentDetail::OAIForum_ForumRecruitmentDetail() {
    this->initializeModel();
}

OAIForum_ForumRecruitmentDetail::~OAIForum_ForumRecruitmentDetail() {}

void OAIForum_ForumRecruitmentDetail::initializeModel() {

    m_fireteam_isSet = false;
    m_fireteam_isValid = false;

    m_approved_isSet = false;
    m_approved_isValid = false;

    m_conversation_id_isSet = false;
    m_conversation_id_isValid = false;

    m_intensity_isSet = false;
    m_intensity_isValid = false;

    m_kicked_player_ids_isSet = false;
    m_kicked_player_ids_isValid = false;

    m_microphone_required_isSet = false;
    m_microphone_required_isValid = false;

    m_player_slots_remaining_isSet = false;
    m_player_slots_remaining_isValid = false;

    m_player_slots_total_isSet = false;
    m_player_slots_total_isValid = false;

    m_tone_isSet = false;
    m_tone_isValid = false;

    m_topic_id_isSet = false;
    m_topic_id_isValid = false;
}

void OAIForum_ForumRecruitmentDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForum_ForumRecruitmentDetail::fromJsonObject(QJsonObject json) {

    m_fireteam_isValid = ::OpenAPI::fromJsonValue(m_fireteam, json[QString("Fireteam")]);
    m_fireteam_isSet = !json[QString("Fireteam")].isNull() && m_fireteam_isValid;

    m_approved_isValid = ::OpenAPI::fromJsonValue(m_approved, json[QString("approved")]);
    m_approved_isSet = !json[QString("approved")].isNull() && m_approved_isValid;

    m_conversation_id_isValid = ::OpenAPI::fromJsonValue(m_conversation_id, json[QString("conversationId")]);
    m_conversation_id_isSet = !json[QString("conversationId")].isNull() && m_conversation_id_isValid;

    m_intensity_isValid = ::OpenAPI::fromJsonValue(m_intensity, json[QString("intensity")]);
    m_intensity_isSet = !json[QString("intensity")].isNull() && m_intensity_isValid;

    m_kicked_player_ids_isValid = ::OpenAPI::fromJsonValue(m_kicked_player_ids, json[QString("kickedPlayerIds")]);
    m_kicked_player_ids_isSet = !json[QString("kickedPlayerIds")].isNull() && m_kicked_player_ids_isValid;

    m_microphone_required_isValid = ::OpenAPI::fromJsonValue(m_microphone_required, json[QString("microphoneRequired")]);
    m_microphone_required_isSet = !json[QString("microphoneRequired")].isNull() && m_microphone_required_isValid;

    m_player_slots_remaining_isValid = ::OpenAPI::fromJsonValue(m_player_slots_remaining, json[QString("playerSlotsRemaining")]);
    m_player_slots_remaining_isSet = !json[QString("playerSlotsRemaining")].isNull() && m_player_slots_remaining_isValid;

    m_player_slots_total_isValid = ::OpenAPI::fromJsonValue(m_player_slots_total, json[QString("playerSlotsTotal")]);
    m_player_slots_total_isSet = !json[QString("playerSlotsTotal")].isNull() && m_player_slots_total_isValid;

    m_tone_isValid = ::OpenAPI::fromJsonValue(m_tone, json[QString("tone")]);
    m_tone_isSet = !json[QString("tone")].isNull() && m_tone_isValid;

    m_topic_id_isValid = ::OpenAPI::fromJsonValue(m_topic_id, json[QString("topicId")]);
    m_topic_id_isSet = !json[QString("topicId")].isNull() && m_topic_id_isValid;
}

QString OAIForum_ForumRecruitmentDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForum_ForumRecruitmentDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_fireteam.size() > 0) {
        obj.insert(QString("Fireteam"), ::OpenAPI::toJsonValue(m_fireteam));
    }
    if (m_approved_isSet) {
        obj.insert(QString("approved"), ::OpenAPI::toJsonValue(m_approved));
    }
    if (m_conversation_id_isSet) {
        obj.insert(QString("conversationId"), ::OpenAPI::toJsonValue(m_conversation_id));
    }
    if (m_intensity_isSet) {
        obj.insert(QString("intensity"), ::OpenAPI::toJsonValue(m_intensity));
    }
    if (m_kicked_player_ids.size() > 0) {
        obj.insert(QString("kickedPlayerIds"), ::OpenAPI::toJsonValue(m_kicked_player_ids));
    }
    if (m_microphone_required_isSet) {
        obj.insert(QString("microphoneRequired"), ::OpenAPI::toJsonValue(m_microphone_required));
    }
    if (m_player_slots_remaining_isSet) {
        obj.insert(QString("playerSlotsRemaining"), ::OpenAPI::toJsonValue(m_player_slots_remaining));
    }
    if (m_player_slots_total_isSet) {
        obj.insert(QString("playerSlotsTotal"), ::OpenAPI::toJsonValue(m_player_slots_total));
    }
    if (m_tone_isSet) {
        obj.insert(QString("tone"), ::OpenAPI::toJsonValue(m_tone));
    }
    if (m_topic_id_isSet) {
        obj.insert(QString("topicId"), ::OpenAPI::toJsonValue(m_topic_id));
    }
    return obj;
}

QList<OAIUser_GeneralUser> OAIForum_ForumRecruitmentDetail::getFireteam() const {
    return m_fireteam;
}
void OAIForum_ForumRecruitmentDetail::setFireteam(const QList<OAIUser_GeneralUser> &fireteam) {
    m_fireteam = fireteam;
    m_fireteam_isSet = true;
}

bool OAIForum_ForumRecruitmentDetail::is_fireteam_Set() const{
    return m_fireteam_isSet;
}

bool OAIForum_ForumRecruitmentDetail::is_fireteam_Valid() const{
    return m_fireteam_isValid;
}

bool OAIForum_ForumRecruitmentDetail::isApproved() const {
    return m_approved;
}
void OAIForum_ForumRecruitmentDetail::setApproved(const bool &approved) {
    m_approved = approved;
    m_approved_isSet = true;
}

bool OAIForum_ForumRecruitmentDetail::is_approved_Set() const{
    return m_approved_isSet;
}

bool OAIForum_ForumRecruitmentDetail::is_approved_Valid() const{
    return m_approved_isValid;
}

qint64 OAIForum_ForumRecruitmentDetail::getConversationId() const {
    return m_conversation_id;
}
void OAIForum_ForumRecruitmentDetail::setConversationId(const qint64 &conversation_id) {
    m_conversation_id = conversation_id;
    m_conversation_id_isSet = true;
}

bool OAIForum_ForumRecruitmentDetail::is_conversation_id_Set() const{
    return m_conversation_id_isSet;
}

bool OAIForum_ForumRecruitmentDetail::is_conversation_id_Valid() const{
    return m_conversation_id_isValid;
}

qint32 OAIForum_ForumRecruitmentDetail::getIntensity() const {
    return m_intensity;
}
void OAIForum_ForumRecruitmentDetail::setIntensity(const qint32 &intensity) {
    m_intensity = intensity;
    m_intensity_isSet = true;
}

bool OAIForum_ForumRecruitmentDetail::is_intensity_Set() const{
    return m_intensity_isSet;
}

bool OAIForum_ForumRecruitmentDetail::is_intensity_Valid() const{
    return m_intensity_isValid;
}

QList<qint64> OAIForum_ForumRecruitmentDetail::getKickedPlayerIds() const {
    return m_kicked_player_ids;
}
void OAIForum_ForumRecruitmentDetail::setKickedPlayerIds(const QList<qint64> &kicked_player_ids) {
    m_kicked_player_ids = kicked_player_ids;
    m_kicked_player_ids_isSet = true;
}

bool OAIForum_ForumRecruitmentDetail::is_kicked_player_ids_Set() const{
    return m_kicked_player_ids_isSet;
}

bool OAIForum_ForumRecruitmentDetail::is_kicked_player_ids_Valid() const{
    return m_kicked_player_ids_isValid;
}

bool OAIForum_ForumRecruitmentDetail::isMicrophoneRequired() const {
    return m_microphone_required;
}
void OAIForum_ForumRecruitmentDetail::setMicrophoneRequired(const bool &microphone_required) {
    m_microphone_required = microphone_required;
    m_microphone_required_isSet = true;
}

bool OAIForum_ForumRecruitmentDetail::is_microphone_required_Set() const{
    return m_microphone_required_isSet;
}

bool OAIForum_ForumRecruitmentDetail::is_microphone_required_Valid() const{
    return m_microphone_required_isValid;
}

qint32 OAIForum_ForumRecruitmentDetail::getPlayerSlotsRemaining() const {
    return m_player_slots_remaining;
}
void OAIForum_ForumRecruitmentDetail::setPlayerSlotsRemaining(const qint32 &player_slots_remaining) {
    m_player_slots_remaining = player_slots_remaining;
    m_player_slots_remaining_isSet = true;
}

bool OAIForum_ForumRecruitmentDetail::is_player_slots_remaining_Set() const{
    return m_player_slots_remaining_isSet;
}

bool OAIForum_ForumRecruitmentDetail::is_player_slots_remaining_Valid() const{
    return m_player_slots_remaining_isValid;
}

qint32 OAIForum_ForumRecruitmentDetail::getPlayerSlotsTotal() const {
    return m_player_slots_total;
}
void OAIForum_ForumRecruitmentDetail::setPlayerSlotsTotal(const qint32 &player_slots_total) {
    m_player_slots_total = player_slots_total;
    m_player_slots_total_isSet = true;
}

bool OAIForum_ForumRecruitmentDetail::is_player_slots_total_Set() const{
    return m_player_slots_total_isSet;
}

bool OAIForum_ForumRecruitmentDetail::is_player_slots_total_Valid() const{
    return m_player_slots_total_isValid;
}

qint32 OAIForum_ForumRecruitmentDetail::getTone() const {
    return m_tone;
}
void OAIForum_ForumRecruitmentDetail::setTone(const qint32 &tone) {
    m_tone = tone;
    m_tone_isSet = true;
}

bool OAIForum_ForumRecruitmentDetail::is_tone_Set() const{
    return m_tone_isSet;
}

bool OAIForum_ForumRecruitmentDetail::is_tone_Valid() const{
    return m_tone_isValid;
}

qint64 OAIForum_ForumRecruitmentDetail::getTopicId() const {
    return m_topic_id;
}
void OAIForum_ForumRecruitmentDetail::setTopicId(const qint64 &topic_id) {
    m_topic_id = topic_id;
    m_topic_id_isSet = true;
}

bool OAIForum_ForumRecruitmentDetail::is_topic_id_Set() const{
    return m_topic_id_isSet;
}

bool OAIForum_ForumRecruitmentDetail::is_topic_id_Valid() const{
    return m_topic_id_isValid;
}

bool OAIForum_ForumRecruitmentDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fireteam.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intensity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kicked_player_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_microphone_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_slots_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_slots_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForum_ForumRecruitmentDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
