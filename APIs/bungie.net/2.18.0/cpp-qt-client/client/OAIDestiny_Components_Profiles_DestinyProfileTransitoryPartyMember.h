/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Components_Profiles_DestinyProfileTransitoryPartyMember.h
 *
 * This is some bare minimum information about a party member in a Fireteam. Unfortunately, without great computational expense on our side we can only get at the data contained here. I&#39;d like to give you a character ID for example, but we don&#39;t have it. But we do have these three pieces of information. May they help you on your quest to show meaningful data about current Fireteams.  Notably, we don&#39;t and can&#39;t feasibly return info on characters. If you can, try to use just the data below for your UI and purposes. Only hit us with further queries if you absolutely must know the character ID of the currently playing character. Pretty please with sugar on top.
 */

#ifndef OAIDestiny_Components_Profiles_DestinyProfileTransitoryPartyMember_H
#define OAIDestiny_Components_Profiles_DestinyProfileTransitoryPartyMember_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDestiny_Components_Profiles_DestinyProfileTransitoryPartyMember : public OAIObject {
public:
    OAIDestiny_Components_Profiles_DestinyProfileTransitoryPartyMember();
    OAIDestiny_Components_Profiles_DestinyProfileTransitoryPartyMember(QString json);
    ~OAIDestiny_Components_Profiles_DestinyProfileTransitoryPartyMember() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    qint32 getEmblemHash() const;
    void setEmblemHash(const qint32 &emblem_hash);
    bool is_emblem_hash_Set() const;
    bool is_emblem_hash_Valid() const;

    qint64 getMembershipId() const;
    void setMembershipId(const qint64 &membership_id);
    bool is_membership_id_Set() const;
    bool is_membership_id_Valid() const;

    qint32 getStatus() const;
    void setStatus(const qint32 &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    qint32 m_emblem_hash;
    bool m_emblem_hash_isSet;
    bool m_emblem_hash_isValid;

    qint64 m_membership_id;
    bool m_membership_id_isSet;
    bool m_membership_id_isValid;

    qint32 m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Components_Profiles_DestinyProfileTransitoryPartyMember)

#endif // OAIDestiny_Components_Profiles_DestinyProfileTransitoryPartyMember_H
