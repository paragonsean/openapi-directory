/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::~OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition() {}

void OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::initializeModel() {

    m_buckets_isSet = false;
    m_buckets_isValid = false;

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_equipment_slot_hash_isSet = false;
    m_equipment_slot_hash_isValid = false;

    m_flyout_id_isSet = false;
    m_flyout_id_isValid = false;

    m_locked_description_isSet = false;
    m_locked_description_isValid = false;

    m_suppress_newness_isSet = false;
    m_suppress_newness_isValid = false;
}

void OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::fromJsonObject(QJsonObject json) {

    m_buckets_isValid = ::OpenAPI::fromJsonValue(m_buckets, json[QString("buckets")]);
    m_buckets_isSet = !json[QString("buckets")].isNull() && m_buckets_isValid;

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_equipment_slot_hash_isValid = ::OpenAPI::fromJsonValue(m_equipment_slot_hash, json[QString("equipmentSlotHash")]);
    m_equipment_slot_hash_isSet = !json[QString("equipmentSlotHash")].isNull() && m_equipment_slot_hash_isValid;

    m_flyout_id_isValid = ::OpenAPI::fromJsonValue(m_flyout_id, json[QString("flyoutId")]);
    m_flyout_id_isSet = !json[QString("flyoutId")].isNull() && m_flyout_id_isValid;

    m_locked_description_isValid = ::OpenAPI::fromJsonValue(m_locked_description, json[QString("lockedDescription")]);
    m_locked_description_isSet = !json[QString("lockedDescription")].isNull() && m_locked_description_isValid;

    m_suppress_newness_isValid = ::OpenAPI::fromJsonValue(m_suppress_newness, json[QString("suppressNewness")]);
    m_suppress_newness_isSet = !json[QString("suppressNewness")].isNull() && m_suppress_newness_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_buckets.size() > 0) {
        obj.insert(QString("buckets"), ::OpenAPI::toJsonValue(m_buckets));
    }
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_equipment_slot_hash_isSet) {
        obj.insert(QString("equipmentSlotHash"), ::OpenAPI::toJsonValue(m_equipment_slot_hash));
    }
    if (m_flyout_id_isSet) {
        obj.insert(QString("flyoutId"), ::OpenAPI::toJsonValue(m_flyout_id));
    }
    if (m_locked_description_isSet) {
        obj.insert(QString("lockedDescription"), ::OpenAPI::toJsonValue(m_locked_description));
    }
    if (m_suppress_newness_isSet) {
        obj.insert(QString("suppressNewness"), ::OpenAPI::toJsonValue(m_suppress_newness));
    }
    return obj;
}

QList<OAIDestiny_Definitions_DestinyVendorInventoryFlyoutBucketDefinition> OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::getBuckets() const {
    return m_buckets;
}
void OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::setBuckets(const QList<OAIDestiny_Definitions_DestinyVendorInventoryFlyoutBucketDefinition> &buckets) {
    m_buckets = buckets;
    m_buckets_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::is_buckets_Set() const{
    return m_buckets_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::is_buckets_Valid() const{
    return m_buckets_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::getEquipmentSlotHash() const {
    return m_equipment_slot_hash;
}
void OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::setEquipmentSlotHash(const qint32 &equipment_slot_hash) {
    m_equipment_slot_hash = equipment_slot_hash;
    m_equipment_slot_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::is_equipment_slot_hash_Set() const{
    return m_equipment_slot_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::is_equipment_slot_hash_Valid() const{
    return m_equipment_slot_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::getFlyoutId() const {
    return m_flyout_id;
}
void OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::setFlyoutId(const qint32 &flyout_id) {
    m_flyout_id = flyout_id;
    m_flyout_id_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::is_flyout_id_Set() const{
    return m_flyout_id_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::is_flyout_id_Valid() const{
    return m_flyout_id_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::getLockedDescription() const {
    return m_locked_description;
}
void OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::setLockedDescription(const QString &locked_description) {
    m_locked_description = locked_description;
    m_locked_description_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::is_locked_description_Set() const{
    return m_locked_description_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::is_locked_description_Valid() const{
    return m_locked_description_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::isSuppressNewness() const {
    return m_suppress_newness;
}
void OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::setSuppressNewness(const bool &suppress_newness) {
    m_suppress_newness = suppress_newness;
    m_suppress_newness_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::is_suppress_newness_Set() const{
    return m_suppress_newness_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::is_suppress_newness_Valid() const{
    return m_suppress_newness_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buckets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_equipment_slot_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flyout_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suppress_newness_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
