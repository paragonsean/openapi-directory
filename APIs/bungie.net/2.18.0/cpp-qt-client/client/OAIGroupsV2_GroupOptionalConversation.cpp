/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupsV2_GroupOptionalConversation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupsV2_GroupOptionalConversation::OAIGroupsV2_GroupOptionalConversation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupsV2_GroupOptionalConversation::OAIGroupsV2_GroupOptionalConversation() {
    this->initializeModel();
}

OAIGroupsV2_GroupOptionalConversation::~OAIGroupsV2_GroupOptionalConversation() {}

void OAIGroupsV2_GroupOptionalConversation::initializeModel() {

    m_chat_enabled_isSet = false;
    m_chat_enabled_isValid = false;

    m_chat_name_isSet = false;
    m_chat_name_isValid = false;

    m_chat_security_isSet = false;
    m_chat_security_isValid = false;

    m_conversation_id_isSet = false;
    m_conversation_id_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;
}

void OAIGroupsV2_GroupOptionalConversation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupsV2_GroupOptionalConversation::fromJsonObject(QJsonObject json) {

    m_chat_enabled_isValid = ::OpenAPI::fromJsonValue(m_chat_enabled, json[QString("chatEnabled")]);
    m_chat_enabled_isSet = !json[QString("chatEnabled")].isNull() && m_chat_enabled_isValid;

    m_chat_name_isValid = ::OpenAPI::fromJsonValue(m_chat_name, json[QString("chatName")]);
    m_chat_name_isSet = !json[QString("chatName")].isNull() && m_chat_name_isValid;

    m_chat_security_isValid = ::OpenAPI::fromJsonValue(m_chat_security, json[QString("chatSecurity")]);
    m_chat_security_isSet = !json[QString("chatSecurity")].isNull() && m_chat_security_isValid;

    m_conversation_id_isValid = ::OpenAPI::fromJsonValue(m_conversation_id, json[QString("conversationId")]);
    m_conversation_id_isSet = !json[QString("conversationId")].isNull() && m_conversation_id_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
    m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;
}

QString OAIGroupsV2_GroupOptionalConversation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupsV2_GroupOptionalConversation::asJsonObject() const {
    QJsonObject obj;
    if (m_chat_enabled_isSet) {
        obj.insert(QString("chatEnabled"), ::OpenAPI::toJsonValue(m_chat_enabled));
    }
    if (m_chat_name_isSet) {
        obj.insert(QString("chatName"), ::OpenAPI::toJsonValue(m_chat_name));
    }
    if (m_chat_security_isSet) {
        obj.insert(QString("chatSecurity"), ::OpenAPI::toJsonValue(m_chat_security));
    }
    if (m_conversation_id_isSet) {
        obj.insert(QString("conversationId"), ::OpenAPI::toJsonValue(m_conversation_id));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    return obj;
}

bool OAIGroupsV2_GroupOptionalConversation::isChatEnabled() const {
    return m_chat_enabled;
}
void OAIGroupsV2_GroupOptionalConversation::setChatEnabled(const bool &chat_enabled) {
    m_chat_enabled = chat_enabled;
    m_chat_enabled_isSet = true;
}

bool OAIGroupsV2_GroupOptionalConversation::is_chat_enabled_Set() const{
    return m_chat_enabled_isSet;
}

bool OAIGroupsV2_GroupOptionalConversation::is_chat_enabled_Valid() const{
    return m_chat_enabled_isValid;
}

QString OAIGroupsV2_GroupOptionalConversation::getChatName() const {
    return m_chat_name;
}
void OAIGroupsV2_GroupOptionalConversation::setChatName(const QString &chat_name) {
    m_chat_name = chat_name;
    m_chat_name_isSet = true;
}

bool OAIGroupsV2_GroupOptionalConversation::is_chat_name_Set() const{
    return m_chat_name_isSet;
}

bool OAIGroupsV2_GroupOptionalConversation::is_chat_name_Valid() const{
    return m_chat_name_isValid;
}

qint32 OAIGroupsV2_GroupOptionalConversation::getChatSecurity() const {
    return m_chat_security;
}
void OAIGroupsV2_GroupOptionalConversation::setChatSecurity(const qint32 &chat_security) {
    m_chat_security = chat_security;
    m_chat_security_isSet = true;
}

bool OAIGroupsV2_GroupOptionalConversation::is_chat_security_Set() const{
    return m_chat_security_isSet;
}

bool OAIGroupsV2_GroupOptionalConversation::is_chat_security_Valid() const{
    return m_chat_security_isValid;
}

qint64 OAIGroupsV2_GroupOptionalConversation::getConversationId() const {
    return m_conversation_id;
}
void OAIGroupsV2_GroupOptionalConversation::setConversationId(const qint64 &conversation_id) {
    m_conversation_id = conversation_id;
    m_conversation_id_isSet = true;
}

bool OAIGroupsV2_GroupOptionalConversation::is_conversation_id_Set() const{
    return m_conversation_id_isSet;
}

bool OAIGroupsV2_GroupOptionalConversation::is_conversation_id_Valid() const{
    return m_conversation_id_isValid;
}

qint64 OAIGroupsV2_GroupOptionalConversation::getGroupId() const {
    return m_group_id;
}
void OAIGroupsV2_GroupOptionalConversation::setGroupId(const qint64 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIGroupsV2_GroupOptionalConversation::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIGroupsV2_GroupOptionalConversation::is_group_id_Valid() const{
    return m_group_id_isValid;
}

bool OAIGroupsV2_GroupOptionalConversation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chat_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_security_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupsV2_GroupOptionalConversation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
