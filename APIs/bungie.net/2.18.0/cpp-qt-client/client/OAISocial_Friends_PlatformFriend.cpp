/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISocial_Friends_PlatformFriend.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISocial_Friends_PlatformFriend::OAISocial_Friends_PlatformFriend(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISocial_Friends_PlatformFriend::OAISocial_Friends_PlatformFriend() {
    this->initializeModel();
}

OAISocial_Friends_PlatformFriend::~OAISocial_Friends_PlatformFriend() {}

void OAISocial_Friends_PlatformFriend::initializeModel() {

    m_bungie_global_display_name_isSet = false;
    m_bungie_global_display_name_isValid = false;

    m_bungie_global_display_name_code_isSet = false;
    m_bungie_global_display_name_code_isValid = false;

    m_bungie_net_membership_id_isSet = false;
    m_bungie_net_membership_id_isValid = false;

    m_destiny_membership_id_isSet = false;
    m_destiny_membership_id_isValid = false;

    m_destiny_membership_type_isSet = false;
    m_destiny_membership_type_isValid = false;

    m_friend_platform_isSet = false;
    m_friend_platform_isValid = false;

    m_platform_display_name_isSet = false;
    m_platform_display_name_isValid = false;
}

void OAISocial_Friends_PlatformFriend::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISocial_Friends_PlatformFriend::fromJsonObject(QJsonObject json) {

    m_bungie_global_display_name_isValid = ::OpenAPI::fromJsonValue(m_bungie_global_display_name, json[QString("bungieGlobalDisplayName")]);
    m_bungie_global_display_name_isSet = !json[QString("bungieGlobalDisplayName")].isNull() && m_bungie_global_display_name_isValid;

    m_bungie_global_display_name_code_isValid = ::OpenAPI::fromJsonValue(m_bungie_global_display_name_code, json[QString("bungieGlobalDisplayNameCode")]);
    m_bungie_global_display_name_code_isSet = !json[QString("bungieGlobalDisplayNameCode")].isNull() && m_bungie_global_display_name_code_isValid;

    m_bungie_net_membership_id_isValid = ::OpenAPI::fromJsonValue(m_bungie_net_membership_id, json[QString("bungieNetMembershipId")]);
    m_bungie_net_membership_id_isSet = !json[QString("bungieNetMembershipId")].isNull() && m_bungie_net_membership_id_isValid;

    m_destiny_membership_id_isValid = ::OpenAPI::fromJsonValue(m_destiny_membership_id, json[QString("destinyMembershipId")]);
    m_destiny_membership_id_isSet = !json[QString("destinyMembershipId")].isNull() && m_destiny_membership_id_isValid;

    m_destiny_membership_type_isValid = ::OpenAPI::fromJsonValue(m_destiny_membership_type, json[QString("destinyMembershipType")]);
    m_destiny_membership_type_isSet = !json[QString("destinyMembershipType")].isNull() && m_destiny_membership_type_isValid;

    m_friend_platform_isValid = ::OpenAPI::fromJsonValue(m_friend_platform, json[QString("friendPlatform")]);
    m_friend_platform_isSet = !json[QString("friendPlatform")].isNull() && m_friend_platform_isValid;

    m_platform_display_name_isValid = ::OpenAPI::fromJsonValue(m_platform_display_name, json[QString("platformDisplayName")]);
    m_platform_display_name_isSet = !json[QString("platformDisplayName")].isNull() && m_platform_display_name_isValid;
}

QString OAISocial_Friends_PlatformFriend::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISocial_Friends_PlatformFriend::asJsonObject() const {
    QJsonObject obj;
    if (m_bungie_global_display_name_isSet) {
        obj.insert(QString("bungieGlobalDisplayName"), ::OpenAPI::toJsonValue(m_bungie_global_display_name));
    }
    if (m_bungie_global_display_name_code_isSet) {
        obj.insert(QString("bungieGlobalDisplayNameCode"), ::OpenAPI::toJsonValue(m_bungie_global_display_name_code));
    }
    if (m_bungie_net_membership_id_isSet) {
        obj.insert(QString("bungieNetMembershipId"), ::OpenAPI::toJsonValue(m_bungie_net_membership_id));
    }
    if (m_destiny_membership_id_isSet) {
        obj.insert(QString("destinyMembershipId"), ::OpenAPI::toJsonValue(m_destiny_membership_id));
    }
    if (m_destiny_membership_type_isSet) {
        obj.insert(QString("destinyMembershipType"), ::OpenAPI::toJsonValue(m_destiny_membership_type));
    }
    if (m_friend_platform_isSet) {
        obj.insert(QString("friendPlatform"), ::OpenAPI::toJsonValue(m_friend_platform));
    }
    if (m_platform_display_name_isSet) {
        obj.insert(QString("platformDisplayName"), ::OpenAPI::toJsonValue(m_platform_display_name));
    }
    return obj;
}

QString OAISocial_Friends_PlatformFriend::getBungieGlobalDisplayName() const {
    return m_bungie_global_display_name;
}
void OAISocial_Friends_PlatformFriend::setBungieGlobalDisplayName(const QString &bungie_global_display_name) {
    m_bungie_global_display_name = bungie_global_display_name;
    m_bungie_global_display_name_isSet = true;
}

bool OAISocial_Friends_PlatformFriend::is_bungie_global_display_name_Set() const{
    return m_bungie_global_display_name_isSet;
}

bool OAISocial_Friends_PlatformFriend::is_bungie_global_display_name_Valid() const{
    return m_bungie_global_display_name_isValid;
}

qint32 OAISocial_Friends_PlatformFriend::getBungieGlobalDisplayNameCode() const {
    return m_bungie_global_display_name_code;
}
void OAISocial_Friends_PlatformFriend::setBungieGlobalDisplayNameCode(const qint32 &bungie_global_display_name_code) {
    m_bungie_global_display_name_code = bungie_global_display_name_code;
    m_bungie_global_display_name_code_isSet = true;
}

bool OAISocial_Friends_PlatformFriend::is_bungie_global_display_name_code_Set() const{
    return m_bungie_global_display_name_code_isSet;
}

bool OAISocial_Friends_PlatformFriend::is_bungie_global_display_name_code_Valid() const{
    return m_bungie_global_display_name_code_isValid;
}

qint64 OAISocial_Friends_PlatformFriend::getBungieNetMembershipId() const {
    return m_bungie_net_membership_id;
}
void OAISocial_Friends_PlatformFriend::setBungieNetMembershipId(const qint64 &bungie_net_membership_id) {
    m_bungie_net_membership_id = bungie_net_membership_id;
    m_bungie_net_membership_id_isSet = true;
}

bool OAISocial_Friends_PlatformFriend::is_bungie_net_membership_id_Set() const{
    return m_bungie_net_membership_id_isSet;
}

bool OAISocial_Friends_PlatformFriend::is_bungie_net_membership_id_Valid() const{
    return m_bungie_net_membership_id_isValid;
}

qint64 OAISocial_Friends_PlatformFriend::getDestinyMembershipId() const {
    return m_destiny_membership_id;
}
void OAISocial_Friends_PlatformFriend::setDestinyMembershipId(const qint64 &destiny_membership_id) {
    m_destiny_membership_id = destiny_membership_id;
    m_destiny_membership_id_isSet = true;
}

bool OAISocial_Friends_PlatformFriend::is_destiny_membership_id_Set() const{
    return m_destiny_membership_id_isSet;
}

bool OAISocial_Friends_PlatformFriend::is_destiny_membership_id_Valid() const{
    return m_destiny_membership_id_isValid;
}

qint32 OAISocial_Friends_PlatformFriend::getDestinyMembershipType() const {
    return m_destiny_membership_type;
}
void OAISocial_Friends_PlatformFriend::setDestinyMembershipType(const qint32 &destiny_membership_type) {
    m_destiny_membership_type = destiny_membership_type;
    m_destiny_membership_type_isSet = true;
}

bool OAISocial_Friends_PlatformFriend::is_destiny_membership_type_Set() const{
    return m_destiny_membership_type_isSet;
}

bool OAISocial_Friends_PlatformFriend::is_destiny_membership_type_Valid() const{
    return m_destiny_membership_type_isValid;
}

qint32 OAISocial_Friends_PlatformFriend::getFriendPlatform() const {
    return m_friend_platform;
}
void OAISocial_Friends_PlatformFriend::setFriendPlatform(const qint32 &friend_platform) {
    m_friend_platform = friend_platform;
    m_friend_platform_isSet = true;
}

bool OAISocial_Friends_PlatformFriend::is_friend_platform_Set() const{
    return m_friend_platform_isSet;
}

bool OAISocial_Friends_PlatformFriend::is_friend_platform_Valid() const{
    return m_friend_platform_isValid;
}

QString OAISocial_Friends_PlatformFriend::getPlatformDisplayName() const {
    return m_platform_display_name;
}
void OAISocial_Friends_PlatformFriend::setPlatformDisplayName(const QString &platform_display_name) {
    m_platform_display_name = platform_display_name;
    m_platform_display_name_isSet = true;
}

bool OAISocial_Friends_PlatformFriend::is_platform_display_name_Set() const{
    return m_platform_display_name_isSet;
}

bool OAISocial_Friends_PlatformFriend::is_platform_display_name_Valid() const{
    return m_platform_display_name_isValid;
}

bool OAISocial_Friends_PlatformFriend::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bungie_global_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bungie_global_display_name_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bungie_net_membership_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destiny_membership_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destiny_membership_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friend_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISocial_Friends_PlatformFriend::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
