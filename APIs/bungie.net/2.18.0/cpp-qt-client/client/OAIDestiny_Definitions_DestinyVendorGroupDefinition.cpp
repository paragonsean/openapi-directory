/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyVendorGroupDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyVendorGroupDefinition::OAIDestiny_Definitions_DestinyVendorGroupDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyVendorGroupDefinition::OAIDestiny_Definitions_DestinyVendorGroupDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyVendorGroupDefinition::~OAIDestiny_Definitions_DestinyVendorGroupDefinition() {}

void OAIDestiny_Definitions_DestinyVendorGroupDefinition::initializeModel() {

    m_category_name_isSet = false;
    m_category_name_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;
}

void OAIDestiny_Definitions_DestinyVendorGroupDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyVendorGroupDefinition::fromJsonObject(QJsonObject json) {

    m_category_name_isValid = ::OpenAPI::fromJsonValue(m_category_name, json[QString("categoryName")]);
    m_category_name_isSet = !json[QString("categoryName")].isNull() && m_category_name_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorGroupDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyVendorGroupDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_category_name_isSet) {
        obj.insert(QString("categoryName"), ::OpenAPI::toJsonValue(m_category_name));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    return obj;
}

QString OAIDestiny_Definitions_DestinyVendorGroupDefinition::getCategoryName() const {
    return m_category_name;
}
void OAIDestiny_Definitions_DestinyVendorGroupDefinition::setCategoryName(const QString &category_name) {
    m_category_name = category_name;
    m_category_name_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorGroupDefinition::is_category_name_Set() const{
    return m_category_name_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorGroupDefinition::is_category_name_Valid() const{
    return m_category_name_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorGroupDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_DestinyVendorGroupDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorGroupDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorGroupDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorGroupDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_DestinyVendorGroupDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorGroupDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorGroupDefinition::is_index_Valid() const{
    return m_index_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorGroupDefinition::getOrder() const {
    return m_order;
}
void OAIDestiny_Definitions_DestinyVendorGroupDefinition::setOrder(const qint32 &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorGroupDefinition::is_order_Set() const{
    return m_order_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorGroupDefinition::is_order_Valid() const{
    return m_order_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorGroupDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_DestinyVendorGroupDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorGroupDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorGroupDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorGroupDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyVendorGroupDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
