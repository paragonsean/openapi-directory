/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFireteam_FireteamSummary.h
 *
 * 
 */

#ifndef OAIFireteam_FireteamSummary_H
#define OAIFireteam_FireteamSummary_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFireteam_FireteamSummary : public OAIObject {
public:
    OAIFireteam_FireteamSummary();
    OAIFireteam_FireteamSummary(QString json);
    ~OAIFireteam_FireteamSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getActivityType() const;
    void setActivityType(const qint32 &activity_type);
    bool is_activity_type_Set() const;
    bool is_activity_type_Valid() const;

    qint32 getAlternateSlotCount() const;
    void setAlternateSlotCount(const qint32 &alternate_slot_count);
    bool is_alternate_slot_count_Set() const;
    bool is_alternate_slot_count_Valid() const;

    qint32 getAvailableAlternateSlotCount() const;
    void setAvailableAlternateSlotCount(const qint32 &available_alternate_slot_count);
    bool is_available_alternate_slot_count_Set() const;
    bool is_available_alternate_slot_count_Valid() const;

    qint32 getAvailablePlayerSlotCount() const;
    void setAvailablePlayerSlotCount(const qint32 &available_player_slot_count);
    bool is_available_player_slot_count_Set() const;
    bool is_available_player_slot_count_Valid() const;

    QDateTime getDateCreated() const;
    void setDateCreated(const QDateTime &date_created);
    bool is_date_created_Set() const;
    bool is_date_created_Valid() const;

    QDateTime getDateModified() const;
    void setDateModified(const QDateTime &date_modified);
    bool is_date_modified_Set() const;
    bool is_date_modified_Valid() const;

    QDateTime getDatePlayerModified() const;
    void setDatePlayerModified(const QDateTime &date_player_modified);
    bool is_date_player_modified_Set() const;
    bool is_date_player_modified_Valid() const;

    qint64 getFireteamId() const;
    void setFireteamId(const qint64 &fireteam_id);
    bool is_fireteam_id_Set() const;
    bool is_fireteam_id_Valid() const;

    qint64 getGroupId() const;
    void setGroupId(const qint64 &group_id);
    bool is_group_id_Set() const;
    bool is_group_id_Valid() const;

    bool isIsImmediate() const;
    void setIsImmediate(const bool &is_immediate);
    bool is_is_immediate_Set() const;
    bool is_is_immediate_Valid() const;

    bool isIsPublic() const;
    void setIsPublic(const bool &is_public);
    bool is_is_public_Set() const;
    bool is_is_public_Valid() const;

    bool isIsValid() const;
    void setIsValid(const bool &is_valid);
    bool is_is_valid_Set() const;
    bool is_is_valid_Valid() const;

    QString getLocale() const;
    void setLocale(const QString &locale);
    bool is_locale_Set() const;
    bool is_locale_Valid() const;

    qint32 getOwnerCurrentGuardianRankSnapshot() const;
    void setOwnerCurrentGuardianRankSnapshot(const qint32 &owner_current_guardian_rank_snapshot);
    bool is_owner_current_guardian_rank_snapshot_Set() const;
    bool is_owner_current_guardian_rank_snapshot_Valid() const;

    qint32 getOwnerHighestLifetimeGuardianRankSnapshot() const;
    void setOwnerHighestLifetimeGuardianRankSnapshot(const qint32 &owner_highest_lifetime_guardian_rank_snapshot);
    bool is_owner_highest_lifetime_guardian_rank_snapshot_Set() const;
    bool is_owner_highest_lifetime_guardian_rank_snapshot_Valid() const;

    qint64 getOwnerMembershipId() const;
    void setOwnerMembershipId(const qint64 &owner_membership_id);
    bool is_owner_membership_id_Set() const;
    bool is_owner_membership_id_Valid() const;

    qint32 getOwnerTotalCommendationScoreSnapshot() const;
    void setOwnerTotalCommendationScoreSnapshot(const qint32 &owner_total_commendation_score_snapshot);
    bool is_owner_total_commendation_score_snapshot_Set() const;
    bool is_owner_total_commendation_score_snapshot_Valid() const;

    qint32 getPlatform() const;
    void setPlatform(const qint32 &platform);
    bool is_platform_Set() const;
    bool is_platform_Valid() const;

    qint32 getPlayerSlotCount() const;
    void setPlayerSlotCount(const qint32 &player_slot_count);
    bool is_player_slot_count_Set() const;
    bool is_player_slot_count_Valid() const;

    QDateTime getScheduledTime() const;
    void setScheduledTime(const QDateTime &scheduled_time);
    bool is_scheduled_time_Set() const;
    bool is_scheduled_time_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getTitleBeforeModeration() const;
    void setTitleBeforeModeration(const QString &title_before_moderation);
    bool is_title_before_moderation_Set() const;
    bool is_title_before_moderation_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_activity_type;
    bool m_activity_type_isSet;
    bool m_activity_type_isValid;

    qint32 m_alternate_slot_count;
    bool m_alternate_slot_count_isSet;
    bool m_alternate_slot_count_isValid;

    qint32 m_available_alternate_slot_count;
    bool m_available_alternate_slot_count_isSet;
    bool m_available_alternate_slot_count_isValid;

    qint32 m_available_player_slot_count;
    bool m_available_player_slot_count_isSet;
    bool m_available_player_slot_count_isValid;

    QDateTime m_date_created;
    bool m_date_created_isSet;
    bool m_date_created_isValid;

    QDateTime m_date_modified;
    bool m_date_modified_isSet;
    bool m_date_modified_isValid;

    QDateTime m_date_player_modified;
    bool m_date_player_modified_isSet;
    bool m_date_player_modified_isValid;

    qint64 m_fireteam_id;
    bool m_fireteam_id_isSet;
    bool m_fireteam_id_isValid;

    qint64 m_group_id;
    bool m_group_id_isSet;
    bool m_group_id_isValid;

    bool m_is_immediate;
    bool m_is_immediate_isSet;
    bool m_is_immediate_isValid;

    bool m_is_public;
    bool m_is_public_isSet;
    bool m_is_public_isValid;

    bool m_is_valid;
    bool m_is_valid_isSet;
    bool m_is_valid_isValid;

    QString m_locale;
    bool m_locale_isSet;
    bool m_locale_isValid;

    qint32 m_owner_current_guardian_rank_snapshot;
    bool m_owner_current_guardian_rank_snapshot_isSet;
    bool m_owner_current_guardian_rank_snapshot_isValid;

    qint32 m_owner_highest_lifetime_guardian_rank_snapshot;
    bool m_owner_highest_lifetime_guardian_rank_snapshot_isSet;
    bool m_owner_highest_lifetime_guardian_rank_snapshot_isValid;

    qint64 m_owner_membership_id;
    bool m_owner_membership_id_isSet;
    bool m_owner_membership_id_isValid;

    qint32 m_owner_total_commendation_score_snapshot;
    bool m_owner_total_commendation_score_snapshot_isSet;
    bool m_owner_total_commendation_score_snapshot_isValid;

    qint32 m_platform;
    bool m_platform_isSet;
    bool m_platform_isValid;

    qint32 m_player_slot_count;
    bool m_player_slot_count_isSet;
    bool m_player_slot_count_isValid;

    QDateTime m_scheduled_time;
    bool m_scheduled_time_isSet;
    bool m_scheduled_time_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_title_before_moderation;
    bool m_title_before_moderation_isSet;
    bool m_title_before_moderation_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFireteam_FireteamSummary)

#endif // OAIFireteam_FireteamSummary_H
