/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestinyBaseItemComponentSetOfuint32.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestinyBaseItemComponentSetOfuint32::OAIDestinyBaseItemComponentSetOfuint32(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestinyBaseItemComponentSetOfuint32::OAIDestinyBaseItemComponentSetOfuint32() {
    this->initializeModel();
}

OAIDestinyBaseItemComponentSetOfuint32::~OAIDestinyBaseItemComponentSetOfuint32() {}

void OAIDestinyBaseItemComponentSetOfuint32::initializeModel() {

    m_objectives_isSet = false;
    m_objectives_isValid = false;

    m_perks_isSet = false;
    m_perks_isValid = false;
}

void OAIDestinyBaseItemComponentSetOfuint32::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestinyBaseItemComponentSetOfuint32::fromJsonObject(QJsonObject json) {

    m_objectives_isValid = ::OpenAPI::fromJsonValue(m_objectives, json[QString("objectives")]);
    m_objectives_isSet = !json[QString("objectives")].isNull() && m_objectives_isValid;

    m_perks_isValid = ::OpenAPI::fromJsonValue(m_perks, json[QString("perks")]);
    m_perks_isSet = !json[QString("perks")].isNull() && m_perks_isValid;
}

QString OAIDestinyBaseItemComponentSetOfuint32::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestinyBaseItemComponentSetOfuint32::asJsonObject() const {
    QJsonObject obj;
    if (m_objectives.isSet()) {
        obj.insert(QString("objectives"), ::OpenAPI::toJsonValue(m_objectives));
    }
    if (m_perks.isSet()) {
        obj.insert(QString("perks"), ::OpenAPI::toJsonValue(m_perks));
    }
    return obj;
}

OAIDictionaryComponentResponseOfuint32AndDestinyItemObjectivesComponent OAIDestinyBaseItemComponentSetOfuint32::getObjectives() const {
    return m_objectives;
}
void OAIDestinyBaseItemComponentSetOfuint32::setObjectives(const OAIDictionaryComponentResponseOfuint32AndDestinyItemObjectivesComponent &objectives) {
    m_objectives = objectives;
    m_objectives_isSet = true;
}

bool OAIDestinyBaseItemComponentSetOfuint32::is_objectives_Set() const{
    return m_objectives_isSet;
}

bool OAIDestinyBaseItemComponentSetOfuint32::is_objectives_Valid() const{
    return m_objectives_isValid;
}

OAIDictionaryComponentResponseOfuint32AndDestinyItemPerksComponent OAIDestinyBaseItemComponentSetOfuint32::getPerks() const {
    return m_perks;
}
void OAIDestinyBaseItemComponentSetOfuint32::setPerks(const OAIDictionaryComponentResponseOfuint32AndDestinyItemPerksComponent &perks) {
    m_perks = perks;
    m_perks_isSet = true;
}

bool OAIDestinyBaseItemComponentSetOfuint32::is_perks_Set() const{
    return m_perks_isSet;
}

bool OAIDestinyBaseItemComponentSetOfuint32::is_perks_Valid() const{
    return m_perks_isValid;
}

bool OAIDestinyBaseItemComponentSetOfuint32::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_objectives.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_perks.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestinyBaseItemComponentSetOfuint32::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
