/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinySandboxPerkDefinition.h
 *
 * Perks are modifiers to a character or item that can be applied situationally.  - Perks determine a weapons&#39; damage type.  - Perks put the Mods in Modifiers (they are literally the entity that bestows the Sandbox benefit for whatever fluff text about the modifier in the Socket, Plug or Talent Node)  - Perks are applied for unique alterations of state in Objectives  Anyways, I&#39;m sure you can see why perks are so interesting.  What Perks often don&#39;t have is human readable information, so we attempt to reverse engineer that by pulling that data from places that uniquely refer to these perks: namely, Talent Nodes and Plugs. That only gives us a subset of perks that are human readable, but those perks are the ones people generally care about anyways. The others are left as a mystery, their true purpose mostly unknown and undocumented.
 */

#ifndef OAIDestiny_Definitions_DestinySandboxPerkDefinition_H
#define OAIDestiny_Definitions_DestinySandboxPerkDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition.h"
#include "OAIDestiny_Definitions_DestinyTalentNodeStepGroups.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition;
class OAIDestiny_Definitions_DestinyTalentNodeStepGroups;

class OAIDestiny_Definitions_DestinySandboxPerkDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinySandboxPerkDefinition();
    OAIDestiny_Definitions_DestinySandboxPerkDefinition(QString json);
    ~OAIDestiny_Definitions_DestinySandboxPerkDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDamageType() const;
    void setDamageType(const qint32 &damage_type);
    bool is_damage_type_Set() const;
    bool is_damage_type_Valid() const;

    qint32 getDamageTypeHash() const;
    void setDamageTypeHash(const qint32 &damage_type_hash);
    bool is_damage_type_hash_Set() const;
    bool is_damage_type_hash_Valid() const;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition getDisplayProperties() const;
    void setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties);
    bool is_display_properties_Set() const;
    bool is_display_properties_Valid() const;

    qint32 getHash() const;
    void setHash(const qint32 &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    qint32 getIndex() const;
    void setIndex(const qint32 &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    bool isIsDisplayable() const;
    void setIsDisplayable(const bool &is_displayable);
    bool is_is_displayable_Set() const;
    bool is_is_displayable_Valid() const;

    OAIDestiny_Definitions_DestinyTalentNodeStepGroups getPerkGroups() const;
    void setPerkGroups(const OAIDestiny_Definitions_DestinyTalentNodeStepGroups &perk_groups);
    bool is_perk_groups_Set() const;
    bool is_perk_groups_Valid() const;

    QString getPerkIdentifier() const;
    void setPerkIdentifier(const QString &perk_identifier);
    bool is_perk_identifier_Set() const;
    bool is_perk_identifier_Valid() const;

    bool isRedacted() const;
    void setRedacted(const bool &redacted);
    bool is_redacted_Set() const;
    bool is_redacted_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_damage_type;
    bool m_damage_type_isSet;
    bool m_damage_type_isValid;

    qint32 m_damage_type_hash;
    bool m_damage_type_hash_isSet;
    bool m_damage_type_hash_isValid;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition m_display_properties;
    bool m_display_properties_isSet;
    bool m_display_properties_isValid;

    qint32 m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    qint32 m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    bool m_is_displayable;
    bool m_is_displayable_isSet;
    bool m_is_displayable_isValid;

    OAIDestiny_Definitions_DestinyTalentNodeStepGroups m_perk_groups;
    bool m_perk_groups_isSet;
    bool m_perk_groups_isValid;

    QString m_perk_identifier;
    bool m_perk_identifier_isSet;
    bool m_perk_identifier_isValid;

    bool m_redacted;
    bool m_redacted_isSet;
    bool m_redacted_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinySandboxPerkDefinition)

#endif // OAIDestiny_Definitions_DestinySandboxPerkDefinition_H
