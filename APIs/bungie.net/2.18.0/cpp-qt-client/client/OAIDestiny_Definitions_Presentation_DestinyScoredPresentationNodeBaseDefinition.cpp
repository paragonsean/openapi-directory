/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::~OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition() {}

void OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::initializeModel() {

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_max_category_record_score_isSet = false;
    m_max_category_record_score_isValid = false;

    m_parent_node_hashes_isSet = false;
    m_parent_node_hashes_isValid = false;

    m_presentation_node_type_isSet = false;
    m_presentation_node_type_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;

    m_trait_hashes_isSet = false;
    m_trait_hashes_isValid = false;

    m_trait_ids_isSet = false;
    m_trait_ids_isValid = false;
}

void OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::fromJsonObject(QJsonObject json) {

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_max_category_record_score_isValid = ::OpenAPI::fromJsonValue(m_max_category_record_score, json[QString("maxCategoryRecordScore")]);
    m_max_category_record_score_isSet = !json[QString("maxCategoryRecordScore")].isNull() && m_max_category_record_score_isValid;

    m_parent_node_hashes_isValid = ::OpenAPI::fromJsonValue(m_parent_node_hashes, json[QString("parentNodeHashes")]);
    m_parent_node_hashes_isSet = !json[QString("parentNodeHashes")].isNull() && m_parent_node_hashes_isValid;

    m_presentation_node_type_isValid = ::OpenAPI::fromJsonValue(m_presentation_node_type, json[QString("presentationNodeType")]);
    m_presentation_node_type_isSet = !json[QString("presentationNodeType")].isNull() && m_presentation_node_type_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;

    m_trait_hashes_isValid = ::OpenAPI::fromJsonValue(m_trait_hashes, json[QString("traitHashes")]);
    m_trait_hashes_isSet = !json[QString("traitHashes")].isNull() && m_trait_hashes_isValid;

    m_trait_ids_isValid = ::OpenAPI::fromJsonValue(m_trait_ids, json[QString("traitIds")]);
    m_trait_ids_isSet = !json[QString("traitIds")].isNull() && m_trait_ids_isValid;
}

QString OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_max_category_record_score_isSet) {
        obj.insert(QString("maxCategoryRecordScore"), ::OpenAPI::toJsonValue(m_max_category_record_score));
    }
    if (m_parent_node_hashes.size() > 0) {
        obj.insert(QString("parentNodeHashes"), ::OpenAPI::toJsonValue(m_parent_node_hashes));
    }
    if (m_presentation_node_type_isSet) {
        obj.insert(QString("presentationNodeType"), ::OpenAPI::toJsonValue(m_presentation_node_type));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    if (m_trait_hashes.size() > 0) {
        obj.insert(QString("traitHashes"), ::OpenAPI::toJsonValue(m_trait_hashes));
    }
    if (m_trait_ids.size() > 0) {
        obj.insert(QString("traitIds"), ::OpenAPI::toJsonValue(m_trait_ids));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::is_index_Valid() const{
    return m_index_isValid;
}

qint32 OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::getMaxCategoryRecordScore() const {
    return m_max_category_record_score;
}
void OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::setMaxCategoryRecordScore(const qint32 &max_category_record_score) {
    m_max_category_record_score = max_category_record_score;
    m_max_category_record_score_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::is_max_category_record_score_Set() const{
    return m_max_category_record_score_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::is_max_category_record_score_Valid() const{
    return m_max_category_record_score_isValid;
}

QList<qint32> OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::getParentNodeHashes() const {
    return m_parent_node_hashes;
}
void OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::setParentNodeHashes(const QList<qint32> &parent_node_hashes) {
    m_parent_node_hashes = parent_node_hashes;
    m_parent_node_hashes_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::is_parent_node_hashes_Set() const{
    return m_parent_node_hashes_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::is_parent_node_hashes_Valid() const{
    return m_parent_node_hashes_isValid;
}

qint32 OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::getPresentationNodeType() const {
    return m_presentation_node_type;
}
void OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::setPresentationNodeType(const qint32 &presentation_node_type) {
    m_presentation_node_type = presentation_node_type;
    m_presentation_node_type_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::is_presentation_node_type_Set() const{
    return m_presentation_node_type_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::is_presentation_node_type_Valid() const{
    return m_presentation_node_type_isValid;
}

bool OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

QList<qint32> OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::getTraitHashes() const {
    return m_trait_hashes;
}
void OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::setTraitHashes(const QList<qint32> &trait_hashes) {
    m_trait_hashes = trait_hashes;
    m_trait_hashes_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::is_trait_hashes_Set() const{
    return m_trait_hashes_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::is_trait_hashes_Valid() const{
    return m_trait_hashes_isValid;
}

QList<QString> OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::getTraitIds() const {
    return m_trait_ids;
}
void OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::setTraitIds(const QList<QString> &trait_ids) {
    m_trait_ids = trait_ids;
    m_trait_ids_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::is_trait_ids_Set() const{
    return m_trait_ids_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::is_trait_ids_Valid() const{
    return m_trait_ids_isValid;
}

bool OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_category_record_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_node_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_presentation_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trait_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trait_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_Presentation_DestinyScoredPresentationNodeBaseDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
