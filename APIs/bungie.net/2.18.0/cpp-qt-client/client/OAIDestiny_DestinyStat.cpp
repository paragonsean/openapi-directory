/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_DestinyStat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_DestinyStat::OAIDestiny_DestinyStat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_DestinyStat::OAIDestiny_DestinyStat() {
    this->initializeModel();
}

OAIDestiny_DestinyStat::~OAIDestiny_DestinyStat() {}

void OAIDestiny_DestinyStat::initializeModel() {

    m_stat_hash_isSet = false;
    m_stat_hash_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIDestiny_DestinyStat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_DestinyStat::fromJsonObject(QJsonObject json) {

    m_stat_hash_isValid = ::OpenAPI::fromJsonValue(m_stat_hash, json[QString("statHash")]);
    m_stat_hash_isSet = !json[QString("statHash")].isNull() && m_stat_hash_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIDestiny_DestinyStat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_DestinyStat::asJsonObject() const {
    QJsonObject obj;
    if (m_stat_hash_isSet) {
        obj.insert(QString("statHash"), ::OpenAPI::toJsonValue(m_stat_hash));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

qint32 OAIDestiny_DestinyStat::getStatHash() const {
    return m_stat_hash;
}
void OAIDestiny_DestinyStat::setStatHash(const qint32 &stat_hash) {
    m_stat_hash = stat_hash;
    m_stat_hash_isSet = true;
}

bool OAIDestiny_DestinyStat::is_stat_hash_Set() const{
    return m_stat_hash_isSet;
}

bool OAIDestiny_DestinyStat::is_stat_hash_Valid() const{
    return m_stat_hash_isValid;
}

qint32 OAIDestiny_DestinyStat::getValue() const {
    return m_value;
}
void OAIDestiny_DestinyStat::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIDestiny_DestinyStat::is_value_Set() const{
    return m_value_isSet;
}

bool OAIDestiny_DestinyStat::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIDestiny_DestinyStat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stat_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_DestinyStat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
