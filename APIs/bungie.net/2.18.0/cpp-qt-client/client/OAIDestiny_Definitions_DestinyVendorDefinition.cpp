/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyVendorDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyVendorDefinition::OAIDestiny_Definitions_DestinyVendorDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyVendorDefinition::OAIDestiny_Definitions_DestinyVendorDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyVendorDefinition::~OAIDestiny_Definitions_DestinyVendorDefinition() {}

void OAIDestiny_Definitions_DestinyVendorDefinition::initializeModel() {

    m_accepted_items_isSet = false;
    m_accepted_items_isValid = false;

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_buy_string_isSet = false;
    m_buy_string_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_consolidate_categories_isSet = false;
    m_consolidate_categories_isValid = false;

    m_display_categories_isSet = false;
    m_display_categories_isValid = false;

    m_display_item_hash_isSet = false;
    m_display_item_hash_isValid = false;

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_faction_hash_isSet = false;
    m_faction_hash_isValid = false;

    m_failure_strings_isSet = false;
    m_failure_strings_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_ignore_sale_item_hashes_isSet = false;
    m_ignore_sale_item_hashes_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_inhibit_buying_isSet = false;
    m_inhibit_buying_isValid = false;

    m_inhibit_selling_isSet = false;
    m_inhibit_selling_isValid = false;

    m_interactions_isSet = false;
    m_interactions_isValid = false;

    m_inventory_flyouts_isSet = false;
    m_inventory_flyouts_isValid = false;

    m_item_list_isSet = false;
    m_item_list_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_original_categories_isSet = false;
    m_original_categories_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;

    m_reset_interval_minutes_isSet = false;
    m_reset_interval_minutes_isValid = false;

    m_reset_offset_minutes_isSet = false;
    m_reset_offset_minutes_isValid = false;

    m_return_with_vendor_request_isSet = false;
    m_return_with_vendor_request_isValid = false;

    m_sell_string_isSet = false;
    m_sell_string_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;

    m_unlock_ranges_isSet = false;
    m_unlock_ranges_isValid = false;

    m_vendor_banner_isSet = false;
    m_vendor_banner_isValid = false;

    m_vendor_identifier_isSet = false;
    m_vendor_identifier_isValid = false;

    m_vendor_portrait_isSet = false;
    m_vendor_portrait_isValid = false;

    m_vendor_progression_type_isSet = false;
    m_vendor_progression_type_isValid = false;

    m_vendor_subcategory_identifier_isSet = false;
    m_vendor_subcategory_identifier_isValid = false;

    m_visible_isSet = false;
    m_visible_isValid = false;
}

void OAIDestiny_Definitions_DestinyVendorDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyVendorDefinition::fromJsonObject(QJsonObject json) {

    m_accepted_items_isValid = ::OpenAPI::fromJsonValue(m_accepted_items, json[QString("acceptedItems")]);
    m_accepted_items_isSet = !json[QString("acceptedItems")].isNull() && m_accepted_items_isValid;

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_buy_string_isValid = ::OpenAPI::fromJsonValue(m_buy_string, json[QString("buyString")]);
    m_buy_string_isSet = !json[QString("buyString")].isNull() && m_buy_string_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_consolidate_categories_isValid = ::OpenAPI::fromJsonValue(m_consolidate_categories, json[QString("consolidateCategories")]);
    m_consolidate_categories_isSet = !json[QString("consolidateCategories")].isNull() && m_consolidate_categories_isValid;

    m_display_categories_isValid = ::OpenAPI::fromJsonValue(m_display_categories, json[QString("displayCategories")]);
    m_display_categories_isSet = !json[QString("displayCategories")].isNull() && m_display_categories_isValid;

    m_display_item_hash_isValid = ::OpenAPI::fromJsonValue(m_display_item_hash, json[QString("displayItemHash")]);
    m_display_item_hash_isSet = !json[QString("displayItemHash")].isNull() && m_display_item_hash_isValid;

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_faction_hash_isValid = ::OpenAPI::fromJsonValue(m_faction_hash, json[QString("factionHash")]);
    m_faction_hash_isSet = !json[QString("factionHash")].isNull() && m_faction_hash_isValid;

    m_failure_strings_isValid = ::OpenAPI::fromJsonValue(m_failure_strings, json[QString("failureStrings")]);
    m_failure_strings_isSet = !json[QString("failureStrings")].isNull() && m_failure_strings_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_ignore_sale_item_hashes_isValid = ::OpenAPI::fromJsonValue(m_ignore_sale_item_hashes, json[QString("ignoreSaleItemHashes")]);
    m_ignore_sale_item_hashes_isSet = !json[QString("ignoreSaleItemHashes")].isNull() && m_ignore_sale_item_hashes_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_inhibit_buying_isValid = ::OpenAPI::fromJsonValue(m_inhibit_buying, json[QString("inhibitBuying")]);
    m_inhibit_buying_isSet = !json[QString("inhibitBuying")].isNull() && m_inhibit_buying_isValid;

    m_inhibit_selling_isValid = ::OpenAPI::fromJsonValue(m_inhibit_selling, json[QString("inhibitSelling")]);
    m_inhibit_selling_isSet = !json[QString("inhibitSelling")].isNull() && m_inhibit_selling_isValid;

    m_interactions_isValid = ::OpenAPI::fromJsonValue(m_interactions, json[QString("interactions")]);
    m_interactions_isSet = !json[QString("interactions")].isNull() && m_interactions_isValid;

    m_inventory_flyouts_isValid = ::OpenAPI::fromJsonValue(m_inventory_flyouts, json[QString("inventoryFlyouts")]);
    m_inventory_flyouts_isSet = !json[QString("inventoryFlyouts")].isNull() && m_inventory_flyouts_isValid;

    m_item_list_isValid = ::OpenAPI::fromJsonValue(m_item_list, json[QString("itemList")]);
    m_item_list_isSet = !json[QString("itemList")].isNull() && m_item_list_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_original_categories_isValid = ::OpenAPI::fromJsonValue(m_original_categories, json[QString("originalCategories")]);
    m_original_categories_isSet = !json[QString("originalCategories")].isNull() && m_original_categories_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;

    m_reset_interval_minutes_isValid = ::OpenAPI::fromJsonValue(m_reset_interval_minutes, json[QString("resetIntervalMinutes")]);
    m_reset_interval_minutes_isSet = !json[QString("resetIntervalMinutes")].isNull() && m_reset_interval_minutes_isValid;

    m_reset_offset_minutes_isValid = ::OpenAPI::fromJsonValue(m_reset_offset_minutes, json[QString("resetOffsetMinutes")]);
    m_reset_offset_minutes_isSet = !json[QString("resetOffsetMinutes")].isNull() && m_reset_offset_minutes_isValid;

    m_return_with_vendor_request_isValid = ::OpenAPI::fromJsonValue(m_return_with_vendor_request, json[QString("returnWithVendorRequest")]);
    m_return_with_vendor_request_isSet = !json[QString("returnWithVendorRequest")].isNull() && m_return_with_vendor_request_isValid;

    m_sell_string_isValid = ::OpenAPI::fromJsonValue(m_sell_string, json[QString("sellString")]);
    m_sell_string_isSet = !json[QString("sellString")].isNull() && m_sell_string_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;

    m_unlock_ranges_isValid = ::OpenAPI::fromJsonValue(m_unlock_ranges, json[QString("unlockRanges")]);
    m_unlock_ranges_isSet = !json[QString("unlockRanges")].isNull() && m_unlock_ranges_isValid;

    m_vendor_banner_isValid = ::OpenAPI::fromJsonValue(m_vendor_banner, json[QString("vendorBanner")]);
    m_vendor_banner_isSet = !json[QString("vendorBanner")].isNull() && m_vendor_banner_isValid;

    m_vendor_identifier_isValid = ::OpenAPI::fromJsonValue(m_vendor_identifier, json[QString("vendorIdentifier")]);
    m_vendor_identifier_isSet = !json[QString("vendorIdentifier")].isNull() && m_vendor_identifier_isValid;

    m_vendor_portrait_isValid = ::OpenAPI::fromJsonValue(m_vendor_portrait, json[QString("vendorPortrait")]);
    m_vendor_portrait_isSet = !json[QString("vendorPortrait")].isNull() && m_vendor_portrait_isValid;

    m_vendor_progression_type_isValid = ::OpenAPI::fromJsonValue(m_vendor_progression_type, json[QString("vendorProgressionType")]);
    m_vendor_progression_type_isSet = !json[QString("vendorProgressionType")].isNull() && m_vendor_progression_type_isValid;

    m_vendor_subcategory_identifier_isValid = ::OpenAPI::fromJsonValue(m_vendor_subcategory_identifier, json[QString("vendorSubcategoryIdentifier")]);
    m_vendor_subcategory_identifier_isSet = !json[QString("vendorSubcategoryIdentifier")].isNull() && m_vendor_subcategory_identifier_isValid;

    m_visible_isValid = ::OpenAPI::fromJsonValue(m_visible, json[QString("visible")]);
    m_visible_isSet = !json[QString("visible")].isNull() && m_visible_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyVendorDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_accepted_items.size() > 0) {
        obj.insert(QString("acceptedItems"), ::OpenAPI::toJsonValue(m_accepted_items));
    }
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_buy_string_isSet) {
        obj.insert(QString("buyString"), ::OpenAPI::toJsonValue(m_buy_string));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_consolidate_categories_isSet) {
        obj.insert(QString("consolidateCategories"), ::OpenAPI::toJsonValue(m_consolidate_categories));
    }
    if (m_display_categories.size() > 0) {
        obj.insert(QString("displayCategories"), ::OpenAPI::toJsonValue(m_display_categories));
    }
    if (m_display_item_hash_isSet) {
        obj.insert(QString("displayItemHash"), ::OpenAPI::toJsonValue(m_display_item_hash));
    }
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_faction_hash_isSet) {
        obj.insert(QString("factionHash"), ::OpenAPI::toJsonValue(m_faction_hash));
    }
    if (m_failure_strings.size() > 0) {
        obj.insert(QString("failureStrings"), ::OpenAPI::toJsonValue(m_failure_strings));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_ignore_sale_item_hashes.size() > 0) {
        obj.insert(QString("ignoreSaleItemHashes"), ::OpenAPI::toJsonValue(m_ignore_sale_item_hashes));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_inhibit_buying_isSet) {
        obj.insert(QString("inhibitBuying"), ::OpenAPI::toJsonValue(m_inhibit_buying));
    }
    if (m_inhibit_selling_isSet) {
        obj.insert(QString("inhibitSelling"), ::OpenAPI::toJsonValue(m_inhibit_selling));
    }
    if (m_interactions.size() > 0) {
        obj.insert(QString("interactions"), ::OpenAPI::toJsonValue(m_interactions));
    }
    if (m_inventory_flyouts.size() > 0) {
        obj.insert(QString("inventoryFlyouts"), ::OpenAPI::toJsonValue(m_inventory_flyouts));
    }
    if (m_item_list.size() > 0) {
        obj.insert(QString("itemList"), ::OpenAPI::toJsonValue(m_item_list));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_original_categories.size() > 0) {
        obj.insert(QString("originalCategories"), ::OpenAPI::toJsonValue(m_original_categories));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    if (m_reset_interval_minutes_isSet) {
        obj.insert(QString("resetIntervalMinutes"), ::OpenAPI::toJsonValue(m_reset_interval_minutes));
    }
    if (m_reset_offset_minutes_isSet) {
        obj.insert(QString("resetOffsetMinutes"), ::OpenAPI::toJsonValue(m_reset_offset_minutes));
    }
    if (m_return_with_vendor_request_isSet) {
        obj.insert(QString("returnWithVendorRequest"), ::OpenAPI::toJsonValue(m_return_with_vendor_request));
    }
    if (m_sell_string_isSet) {
        obj.insert(QString("sellString"), ::OpenAPI::toJsonValue(m_sell_string));
    }
    if (m_services.size() > 0) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_unlock_ranges.size() > 0) {
        obj.insert(QString("unlockRanges"), ::OpenAPI::toJsonValue(m_unlock_ranges));
    }
    if (m_vendor_banner_isSet) {
        obj.insert(QString("vendorBanner"), ::OpenAPI::toJsonValue(m_vendor_banner));
    }
    if (m_vendor_identifier_isSet) {
        obj.insert(QString("vendorIdentifier"), ::OpenAPI::toJsonValue(m_vendor_identifier));
    }
    if (m_vendor_portrait_isSet) {
        obj.insert(QString("vendorPortrait"), ::OpenAPI::toJsonValue(m_vendor_portrait));
    }
    if (m_vendor_progression_type_isSet) {
        obj.insert(QString("vendorProgressionType"), ::OpenAPI::toJsonValue(m_vendor_progression_type));
    }
    if (m_vendor_subcategory_identifier_isSet) {
        obj.insert(QString("vendorSubcategoryIdentifier"), ::OpenAPI::toJsonValue(m_vendor_subcategory_identifier));
    }
    if (m_visible_isSet) {
        obj.insert(QString("visible"), ::OpenAPI::toJsonValue(m_visible));
    }
    return obj;
}

QList<OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition> OAIDestiny_Definitions_DestinyVendorDefinition::getAcceptedItems() const {
    return m_accepted_items;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setAcceptedItems(const QList<OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition> &accepted_items) {
    m_accepted_items = accepted_items;
    m_accepted_items_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_accepted_items_Set() const{
    return m_accepted_items_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_accepted_items_Valid() const{
    return m_accepted_items_isValid;
}

QList<OAIDestiny_Definitions_DestinyVendorActionDefinition> OAIDestiny_Definitions_DestinyVendorDefinition::getActions() const {
    return m_actions;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setActions(const QList<OAIDestiny_Definitions_DestinyVendorActionDefinition> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_actions_Valid() const{
    return m_actions_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorDefinition::getBuyString() const {
    return m_buy_string;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setBuyString(const QString &buy_string) {
    m_buy_string = buy_string;
    m_buy_string_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_buy_string_Set() const{
    return m_buy_string_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_buy_string_Valid() const{
    return m_buy_string_isValid;
}

QList<OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition> OAIDestiny_Definitions_DestinyVendorDefinition::getCategories() const {
    return m_categories;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setCategories(const QList<OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_categories_Valid() const{
    return m_categories_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::isConsolidateCategories() const {
    return m_consolidate_categories;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setConsolidateCategories(const bool &consolidate_categories) {
    m_consolidate_categories = consolidate_categories;
    m_consolidate_categories_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_consolidate_categories_Set() const{
    return m_consolidate_categories_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_consolidate_categories_Valid() const{
    return m_consolidate_categories_isValid;
}

QList<OAIDestiny_Definitions_DestinyDisplayCategoryDefinition> OAIDestiny_Definitions_DestinyVendorDefinition::getDisplayCategories() const {
    return m_display_categories;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setDisplayCategories(const QList<OAIDestiny_Definitions_DestinyDisplayCategoryDefinition> &display_categories) {
    m_display_categories = display_categories;
    m_display_categories_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_display_categories_Set() const{
    return m_display_categories_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_display_categories_Valid() const{
    return m_display_categories_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorDefinition::getDisplayItemHash() const {
    return m_display_item_hash;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setDisplayItemHash(const qint32 &display_item_hash) {
    m_display_item_hash = display_item_hash;
    m_display_item_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_display_item_hash_Set() const{
    return m_display_item_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_display_item_hash_Valid() const{
    return m_display_item_hash_isValid;
}

OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition OAIDestiny_Definitions_DestinyVendorDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setDisplayProperties(const OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::isEnabled() const {
    return m_enabled;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_enabled_Valid() const{
    return m_enabled_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorDefinition::getFactionHash() const {
    return m_faction_hash;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setFactionHash(const qint32 &faction_hash) {
    m_faction_hash = faction_hash;
    m_faction_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_faction_hash_Set() const{
    return m_faction_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_faction_hash_Valid() const{
    return m_faction_hash_isValid;
}

QList<QString> OAIDestiny_Definitions_DestinyVendorDefinition::getFailureStrings() const {
    return m_failure_strings;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setFailureStrings(const QList<QString> &failure_strings) {
    m_failure_strings = failure_strings;
    m_failure_strings_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_failure_strings_Set() const{
    return m_failure_strings_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_failure_strings_Valid() const{
    return m_failure_strings_isValid;
}

QList<OAIDestiny_Definitions_DestinyVendorGroupReference> OAIDestiny_Definitions_DestinyVendorDefinition::getGroups() const {
    return m_groups;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setGroups(const QList<OAIDestiny_Definitions_DestinyVendorGroupReference> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_groups_Valid() const{
    return m_groups_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyVendorDefinition::getIgnoreSaleItemHashes() const {
    return m_ignore_sale_item_hashes;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setIgnoreSaleItemHashes(const QList<qint32> &ignore_sale_item_hashes) {
    m_ignore_sale_item_hashes = ignore_sale_item_hashes;
    m_ignore_sale_item_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_ignore_sale_item_hashes_Set() const{
    return m_ignore_sale_item_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_ignore_sale_item_hashes_Valid() const{
    return m_ignore_sale_item_hashes_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_index_Valid() const{
    return m_index_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::isInhibitBuying() const {
    return m_inhibit_buying;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setInhibitBuying(const bool &inhibit_buying) {
    m_inhibit_buying = inhibit_buying;
    m_inhibit_buying_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_inhibit_buying_Set() const{
    return m_inhibit_buying_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_inhibit_buying_Valid() const{
    return m_inhibit_buying_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::isInhibitSelling() const {
    return m_inhibit_selling;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setInhibitSelling(const bool &inhibit_selling) {
    m_inhibit_selling = inhibit_selling;
    m_inhibit_selling_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_inhibit_selling_Set() const{
    return m_inhibit_selling_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_inhibit_selling_Valid() const{
    return m_inhibit_selling_isValid;
}

QList<OAIDestiny_Definitions_DestinyVendorInteractionDefinition> OAIDestiny_Definitions_DestinyVendorDefinition::getInteractions() const {
    return m_interactions;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setInteractions(const QList<OAIDestiny_Definitions_DestinyVendorInteractionDefinition> &interactions) {
    m_interactions = interactions;
    m_interactions_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_interactions_Set() const{
    return m_interactions_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_interactions_Valid() const{
    return m_interactions_isValid;
}

QList<OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition> OAIDestiny_Definitions_DestinyVendorDefinition::getInventoryFlyouts() const {
    return m_inventory_flyouts;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setInventoryFlyouts(const QList<OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition> &inventory_flyouts) {
    m_inventory_flyouts = inventory_flyouts;
    m_inventory_flyouts_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_inventory_flyouts_Set() const{
    return m_inventory_flyouts_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_inventory_flyouts_Valid() const{
    return m_inventory_flyouts_isValid;
}

QList<OAIDestiny_Definitions_DestinyVendorItemDefinition> OAIDestiny_Definitions_DestinyVendorDefinition::getItemList() const {
    return m_item_list;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setItemList(const QList<OAIDestiny_Definitions_DestinyVendorItemDefinition> &item_list) {
    m_item_list = item_list;
    m_item_list_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_item_list_Set() const{
    return m_item_list_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_item_list_Valid() const{
    return m_item_list_isValid;
}

QList<OAIDestiny_Definitions_Vendors_DestinyVendorLocationDefinition> OAIDestiny_Definitions_DestinyVendorDefinition::getLocations() const {
    return m_locations;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setLocations(const QList<OAIDestiny_Definitions_Vendors_DestinyVendorLocationDefinition> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_locations_Valid() const{
    return m_locations_isValid;
}

QList<OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition> OAIDestiny_Definitions_DestinyVendorDefinition::getOriginalCategories() const {
    return m_original_categories;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setOriginalCategories(const QList<OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition> &original_categories) {
    m_original_categories = original_categories;
    m_original_categories_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_original_categories_Set() const{
    return m_original_categories_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_original_categories_Valid() const{
    return m_original_categories_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorDefinition::getResetIntervalMinutes() const {
    return m_reset_interval_minutes;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setResetIntervalMinutes(const qint32 &reset_interval_minutes) {
    m_reset_interval_minutes = reset_interval_minutes;
    m_reset_interval_minutes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_reset_interval_minutes_Set() const{
    return m_reset_interval_minutes_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_reset_interval_minutes_Valid() const{
    return m_reset_interval_minutes_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorDefinition::getResetOffsetMinutes() const {
    return m_reset_offset_minutes;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setResetOffsetMinutes(const qint32 &reset_offset_minutes) {
    m_reset_offset_minutes = reset_offset_minutes;
    m_reset_offset_minutes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_reset_offset_minutes_Set() const{
    return m_reset_offset_minutes_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_reset_offset_minutes_Valid() const{
    return m_reset_offset_minutes_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::isReturnWithVendorRequest() const {
    return m_return_with_vendor_request;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setReturnWithVendorRequest(const bool &return_with_vendor_request) {
    m_return_with_vendor_request = return_with_vendor_request;
    m_return_with_vendor_request_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_return_with_vendor_request_Set() const{
    return m_return_with_vendor_request_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_return_with_vendor_request_Valid() const{
    return m_return_with_vendor_request_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorDefinition::getSellString() const {
    return m_sell_string;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setSellString(const QString &sell_string) {
    m_sell_string = sell_string;
    m_sell_string_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_sell_string_Set() const{
    return m_sell_string_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_sell_string_Valid() const{
    return m_sell_string_isValid;
}

QList<OAIDestiny_Definitions_DestinyVendorServiceDefinition> OAIDestiny_Definitions_DestinyVendorDefinition::getServices() const {
    return m_services;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setServices(const QList<OAIDestiny_Definitions_DestinyVendorServiceDefinition> &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_services_Set() const{
    return m_services_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_services_Valid() const{
    return m_services_isValid;
}

QList<OAIDates_DateRange> OAIDestiny_Definitions_DestinyVendorDefinition::getUnlockRanges() const {
    return m_unlock_ranges;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setUnlockRanges(const QList<OAIDates_DateRange> &unlock_ranges) {
    m_unlock_ranges = unlock_ranges;
    m_unlock_ranges_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_unlock_ranges_Set() const{
    return m_unlock_ranges_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_unlock_ranges_Valid() const{
    return m_unlock_ranges_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorDefinition::getVendorBanner() const {
    return m_vendor_banner;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setVendorBanner(const QString &vendor_banner) {
    m_vendor_banner = vendor_banner;
    m_vendor_banner_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_vendor_banner_Set() const{
    return m_vendor_banner_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_vendor_banner_Valid() const{
    return m_vendor_banner_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorDefinition::getVendorIdentifier() const {
    return m_vendor_identifier;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setVendorIdentifier(const QString &vendor_identifier) {
    m_vendor_identifier = vendor_identifier;
    m_vendor_identifier_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_vendor_identifier_Set() const{
    return m_vendor_identifier_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_vendor_identifier_Valid() const{
    return m_vendor_identifier_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorDefinition::getVendorPortrait() const {
    return m_vendor_portrait;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setVendorPortrait(const QString &vendor_portrait) {
    m_vendor_portrait = vendor_portrait;
    m_vendor_portrait_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_vendor_portrait_Set() const{
    return m_vendor_portrait_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_vendor_portrait_Valid() const{
    return m_vendor_portrait_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorDefinition::getVendorProgressionType() const {
    return m_vendor_progression_type;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setVendorProgressionType(const qint32 &vendor_progression_type) {
    m_vendor_progression_type = vendor_progression_type;
    m_vendor_progression_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_vendor_progression_type_Set() const{
    return m_vendor_progression_type_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_vendor_progression_type_Valid() const{
    return m_vendor_progression_type_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorDefinition::getVendorSubcategoryIdentifier() const {
    return m_vendor_subcategory_identifier;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setVendorSubcategoryIdentifier(const QString &vendor_subcategory_identifier) {
    m_vendor_subcategory_identifier = vendor_subcategory_identifier;
    m_vendor_subcategory_identifier_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_vendor_subcategory_identifier_Set() const{
    return m_vendor_subcategory_identifier_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_vendor_subcategory_identifier_Valid() const{
    return m_vendor_subcategory_identifier_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::isVisible() const {
    return m_visible;
}
void OAIDestiny_Definitions_DestinyVendorDefinition::setVisible(const bool &visible) {
    m_visible = visible;
    m_visible_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_visible_Set() const{
    return m_visible_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::is_visible_Valid() const{
    return m_visible_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepted_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_buy_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_consolidate_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_item_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_faction_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_strings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_sale_item_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inhibit_buying_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inhibit_selling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_flyouts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_interval_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_offset_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_with_vendor_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sell_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unlock_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_banner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_portrait_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_progression_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_subcategory_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyVendorDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
