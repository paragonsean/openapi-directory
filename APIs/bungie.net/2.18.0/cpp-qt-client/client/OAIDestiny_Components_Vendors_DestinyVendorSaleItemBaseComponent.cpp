/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent() {
    this->initializeModel();
}

OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::~OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent() {}

void OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::initializeModel() {

    m_api_purchasable_isSet = false;
    m_api_purchasable_isValid = false;

    m_costs_isSet = false;
    m_costs_isValid = false;

    m_item_hash_isSet = false;
    m_item_hash_isValid = false;

    m_override_next_refresh_date_isSet = false;
    m_override_next_refresh_date_isValid = false;

    m_override_style_item_hash_isSet = false;
    m_override_style_item_hash_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_vendor_item_index_isSet = false;
    m_vendor_item_index_isValid = false;
}

void OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::fromJsonObject(QJsonObject json) {

    m_api_purchasable_isValid = ::OpenAPI::fromJsonValue(m_api_purchasable, json[QString("apiPurchasable")]);
    m_api_purchasable_isSet = !json[QString("apiPurchasable")].isNull() && m_api_purchasable_isValid;

    m_costs_isValid = ::OpenAPI::fromJsonValue(m_costs, json[QString("costs")]);
    m_costs_isSet = !json[QString("costs")].isNull() && m_costs_isValid;

    m_item_hash_isValid = ::OpenAPI::fromJsonValue(m_item_hash, json[QString("itemHash")]);
    m_item_hash_isSet = !json[QString("itemHash")].isNull() && m_item_hash_isValid;

    m_override_next_refresh_date_isValid = ::OpenAPI::fromJsonValue(m_override_next_refresh_date, json[QString("overrideNextRefreshDate")]);
    m_override_next_refresh_date_isSet = !json[QString("overrideNextRefreshDate")].isNull() && m_override_next_refresh_date_isValid;

    m_override_style_item_hash_isValid = ::OpenAPI::fromJsonValue(m_override_style_item_hash, json[QString("overrideStyleItemHash")]);
    m_override_style_item_hash_isSet = !json[QString("overrideStyleItemHash")].isNull() && m_override_style_item_hash_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_vendor_item_index_isValid = ::OpenAPI::fromJsonValue(m_vendor_item_index, json[QString("vendorItemIndex")]);
    m_vendor_item_index_isSet = !json[QString("vendorItemIndex")].isNull() && m_vendor_item_index_isValid;
}

QString OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_api_purchasable_isSet) {
        obj.insert(QString("apiPurchasable"), ::OpenAPI::toJsonValue(m_api_purchasable));
    }
    if (m_costs.size() > 0) {
        obj.insert(QString("costs"), ::OpenAPI::toJsonValue(m_costs));
    }
    if (m_item_hash_isSet) {
        obj.insert(QString("itemHash"), ::OpenAPI::toJsonValue(m_item_hash));
    }
    if (m_override_next_refresh_date_isSet) {
        obj.insert(QString("overrideNextRefreshDate"), ::OpenAPI::toJsonValue(m_override_next_refresh_date));
    }
    if (m_override_style_item_hash_isSet) {
        obj.insert(QString("overrideStyleItemHash"), ::OpenAPI::toJsonValue(m_override_style_item_hash));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_vendor_item_index_isSet) {
        obj.insert(QString("vendorItemIndex"), ::OpenAPI::toJsonValue(m_vendor_item_index));
    }
    return obj;
}

bool OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::isApiPurchasable() const {
    return m_api_purchasable;
}
void OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::setApiPurchasable(const bool &api_purchasable) {
    m_api_purchasable = api_purchasable;
    m_api_purchasable_isSet = true;
}

bool OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::is_api_purchasable_Set() const{
    return m_api_purchasable_isSet;
}

bool OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::is_api_purchasable_Valid() const{
    return m_api_purchasable_isValid;
}

QList<OAIDestiny_DestinyItemQuantity> OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::getCosts() const {
    return m_costs;
}
void OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::setCosts(const QList<OAIDestiny_DestinyItemQuantity> &costs) {
    m_costs = costs;
    m_costs_isSet = true;
}

bool OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::is_costs_Set() const{
    return m_costs_isSet;
}

bool OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::is_costs_Valid() const{
    return m_costs_isValid;
}

qint32 OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::getItemHash() const {
    return m_item_hash;
}
void OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::setItemHash(const qint32 &item_hash) {
    m_item_hash = item_hash;
    m_item_hash_isSet = true;
}

bool OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::is_item_hash_Set() const{
    return m_item_hash_isSet;
}

bool OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::is_item_hash_Valid() const{
    return m_item_hash_isValid;
}

QDateTime OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::getOverrideNextRefreshDate() const {
    return m_override_next_refresh_date;
}
void OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::setOverrideNextRefreshDate(const QDateTime &override_next_refresh_date) {
    m_override_next_refresh_date = override_next_refresh_date;
    m_override_next_refresh_date_isSet = true;
}

bool OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::is_override_next_refresh_date_Set() const{
    return m_override_next_refresh_date_isSet;
}

bool OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::is_override_next_refresh_date_Valid() const{
    return m_override_next_refresh_date_isValid;
}

qint32 OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::getOverrideStyleItemHash() const {
    return m_override_style_item_hash;
}
void OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::setOverrideStyleItemHash(const qint32 &override_style_item_hash) {
    m_override_style_item_hash = override_style_item_hash;
    m_override_style_item_hash_isSet = true;
}

bool OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::is_override_style_item_hash_Set() const{
    return m_override_style_item_hash_isSet;
}

bool OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::is_override_style_item_hash_Valid() const{
    return m_override_style_item_hash_isValid;
}

qint32 OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::getQuantity() const {
    return m_quantity;
}
void OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::is_quantity_Valid() const{
    return m_quantity_isValid;
}

qint32 OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::getVendorItemIndex() const {
    return m_vendor_item_index;
}
void OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::setVendorItemIndex(const qint32 &vendor_item_index) {
    m_vendor_item_index = vendor_item_index;
    m_vendor_item_index_isSet = true;
}

bool OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::is_vendor_item_index_Set() const{
    return m_vendor_item_index_isSet;
}

bool OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::is_vendor_item_index_Valid() const{
    return m_vendor_item_index_isValid;
}

bool OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_purchasable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_costs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_next_refresh_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_style_item_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_item_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Components_Vendors_DestinyVendorSaleItemBaseComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
