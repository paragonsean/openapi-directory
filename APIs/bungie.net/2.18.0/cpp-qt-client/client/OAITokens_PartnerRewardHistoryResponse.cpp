/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITokens_PartnerRewardHistoryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITokens_PartnerRewardHistoryResponse::OAITokens_PartnerRewardHistoryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITokens_PartnerRewardHistoryResponse::OAITokens_PartnerRewardHistoryResponse() {
    this->initializeModel();
}

OAITokens_PartnerRewardHistoryResponse::~OAITokens_PartnerRewardHistoryResponse() {}

void OAITokens_PartnerRewardHistoryResponse::initializeModel() {

    m_partner_offers_isSet = false;
    m_partner_offers_isValid = false;

    m_twitch_drops_isSet = false;
    m_twitch_drops_isValid = false;
}

void OAITokens_PartnerRewardHistoryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITokens_PartnerRewardHistoryResponse::fromJsonObject(QJsonObject json) {

    m_partner_offers_isValid = ::OpenAPI::fromJsonValue(m_partner_offers, json[QString("PartnerOffers")]);
    m_partner_offers_isSet = !json[QString("PartnerOffers")].isNull() && m_partner_offers_isValid;

    m_twitch_drops_isValid = ::OpenAPI::fromJsonValue(m_twitch_drops, json[QString("TwitchDrops")]);
    m_twitch_drops_isSet = !json[QString("TwitchDrops")].isNull() && m_twitch_drops_isValid;
}

QString OAITokens_PartnerRewardHistoryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITokens_PartnerRewardHistoryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_partner_offers.size() > 0) {
        obj.insert(QString("PartnerOffers"), ::OpenAPI::toJsonValue(m_partner_offers));
    }
    if (m_twitch_drops.size() > 0) {
        obj.insert(QString("TwitchDrops"), ::OpenAPI::toJsonValue(m_twitch_drops));
    }
    return obj;
}

QList<OAITokens_PartnerOfferSkuHistoryResponse> OAITokens_PartnerRewardHistoryResponse::getPartnerOffers() const {
    return m_partner_offers;
}
void OAITokens_PartnerRewardHistoryResponse::setPartnerOffers(const QList<OAITokens_PartnerOfferSkuHistoryResponse> &partner_offers) {
    m_partner_offers = partner_offers;
    m_partner_offers_isSet = true;
}

bool OAITokens_PartnerRewardHistoryResponse::is_partner_offers_Set() const{
    return m_partner_offers_isSet;
}

bool OAITokens_PartnerRewardHistoryResponse::is_partner_offers_Valid() const{
    return m_partner_offers_isValid;
}

QList<OAITokens_TwitchDropHistoryResponse> OAITokens_PartnerRewardHistoryResponse::getTwitchDrops() const {
    return m_twitch_drops;
}
void OAITokens_PartnerRewardHistoryResponse::setTwitchDrops(const QList<OAITokens_TwitchDropHistoryResponse> &twitch_drops) {
    m_twitch_drops = twitch_drops;
    m_twitch_drops_isSet = true;
}

bool OAITokens_PartnerRewardHistoryResponse::is_twitch_drops_Set() const{
    return m_twitch_drops_isSet;
}

bool OAITokens_PartnerRewardHistoryResponse::is_twitch_drops_Valid() const{
    return m_twitch_drops_isValid;
}

bool OAITokens_PartnerRewardHistoryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_partner_offers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitch_drops.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITokens_PartnerRewardHistoryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
