/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPreviewApi_H
#define OAI_OAIPreviewApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDestiny2_GetClanAggregateStats_200_response.h"
#include "OAIDestiny2_GetClanLeaderboards_200_response.h"
#include "OAIDestiny2_GetPublicVendors_200_response.h"
#include "OAIDestiny2_InsertSocketPlug_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPreviewApi : public QObject {
    Q_OBJECT

public:
    OAIPreviewApi(const int timeOut = 0);
    ~OAIPreviewApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  group_id qint64 [required]
    * @param[in]  modes QString [optional]
    */
    virtual void destiny2_GetClanAggregateStats(const qint64 &group_id, const ::OpenAPI::OptionalParam<QString> &modes = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id qint64 [required]
    * @param[in]  maxtop qint32 [optional]
    * @param[in]  modes QString [optional]
    * @param[in]  statid QString [optional]
    */
    virtual void destiny2_GetClanLeaderboards(const qint64 &group_id, const ::OpenAPI::OptionalParam<qint32> &maxtop = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &modes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &statid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint64 [required]
    * @param[in]  destiny_membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    * @param[in]  maxtop qint32 [optional]
    * @param[in]  modes QString [optional]
    * @param[in]  statid QString [optional]
    */
    virtual void destiny2_GetLeaderboardsForCharacter(const qint64 &character_id, const qint64 &destiny_membership_id, const qint32 &membership_type, const ::OpenAPI::OptionalParam<qint32> &maxtop = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &modes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &statid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  destiny_membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    * @param[in]  maxtop qint32 [optional]
    * @param[in]  modes QString [optional]
    * @param[in]  statid QString [optional]
    */
    virtual void destiny2_GetLeaderboards(const qint64 &destiny_membership_id, const qint32 &membership_type, const ::OpenAPI::OptionalParam<qint32> &maxtop = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &modes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &statid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  components QList<qint32> [optional]
    */
    virtual void destiny2_GetPublicVendors(const ::OpenAPI::OptionalParam<QList<qint32>> &components = ::OpenAPI::OptionalParam<QList<qint32>>());


    virtual void destiny2_InsertSocketPlugFree();


    virtual void destiny2_InsertSocketPlug();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void destiny2_GetClanAggregateStatsCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetClanLeaderboardsCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetLeaderboardsForCharacterCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetLeaderboardsCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetPublicVendorsCallback(OAIHttpRequestWorker *worker);
    void destiny2_InsertSocketPlugFreeCallback(OAIHttpRequestWorker *worker);
    void destiny2_InsertSocketPlugCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void destiny2_GetClanAggregateStatsSignal(OAIDestiny2_GetClanAggregateStats_200_response summary);
    void destiny2_GetClanLeaderboardsSignal(OAIDestiny2_GetClanLeaderboards_200_response summary);
    void destiny2_GetLeaderboardsForCharacterSignal(OAIDestiny2_GetClanLeaderboards_200_response summary);
    void destiny2_GetLeaderboardsSignal(OAIDestiny2_GetClanLeaderboards_200_response summary);
    void destiny2_GetPublicVendorsSignal(OAIDestiny2_GetPublicVendors_200_response summary);
    void destiny2_InsertSocketPlugFreeSignal(OAIDestiny2_InsertSocketPlug_200_response summary);
    void destiny2_InsertSocketPlugSignal(OAIDestiny2_InsertSocketPlug_200_response summary);


    void destiny2_GetClanAggregateStatsSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetClanAggregateStats_200_response summary);
    void destiny2_GetClanLeaderboardsSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetClanLeaderboards_200_response summary);
    void destiny2_GetLeaderboardsForCharacterSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetClanLeaderboards_200_response summary);
    void destiny2_GetLeaderboardsSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetClanLeaderboards_200_response summary);
    void destiny2_GetPublicVendorsSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetPublicVendors_200_response summary);
    void destiny2_InsertSocketPlugFreeSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_InsertSocketPlug_200_response summary);
    void destiny2_InsertSocketPlugSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_InsertSocketPlug_200_response summary);

    Q_DECL_DEPRECATED_X("Use destiny2_GetClanAggregateStatsSignalError() instead")
    void destiny2_GetClanAggregateStatsSignalE(OAIDestiny2_GetClanAggregateStats_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetClanAggregateStatsSignalError(OAIDestiny2_GetClanAggregateStats_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetClanLeaderboardsSignalError() instead")
    void destiny2_GetClanLeaderboardsSignalE(OAIDestiny2_GetClanLeaderboards_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetClanLeaderboardsSignalError(OAIDestiny2_GetClanLeaderboards_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetLeaderboardsForCharacterSignalError() instead")
    void destiny2_GetLeaderboardsForCharacterSignalE(OAIDestiny2_GetClanLeaderboards_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetLeaderboardsForCharacterSignalError(OAIDestiny2_GetClanLeaderboards_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetLeaderboardsSignalError() instead")
    void destiny2_GetLeaderboardsSignalE(OAIDestiny2_GetClanLeaderboards_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetLeaderboardsSignalError(OAIDestiny2_GetClanLeaderboards_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetPublicVendorsSignalError() instead")
    void destiny2_GetPublicVendorsSignalE(OAIDestiny2_GetPublicVendors_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetPublicVendorsSignalError(OAIDestiny2_GetPublicVendors_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_InsertSocketPlugFreeSignalError() instead")
    void destiny2_InsertSocketPlugFreeSignalE(OAIDestiny2_InsertSocketPlug_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_InsertSocketPlugFreeSignalError(OAIDestiny2_InsertSocketPlug_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_InsertSocketPlugSignalError() instead")
    void destiny2_InsertSocketPlugSignalE(OAIDestiny2_InsertSocketPlug_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_InsertSocketPlugSignalError(OAIDestiny2_InsertSocketPlug_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use destiny2_GetClanAggregateStatsSignalErrorFull() instead")
    void destiny2_GetClanAggregateStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetClanAggregateStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetClanLeaderboardsSignalErrorFull() instead")
    void destiny2_GetClanLeaderboardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetClanLeaderboardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetLeaderboardsForCharacterSignalErrorFull() instead")
    void destiny2_GetLeaderboardsForCharacterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetLeaderboardsForCharacterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetLeaderboardsSignalErrorFull() instead")
    void destiny2_GetLeaderboardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetLeaderboardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetPublicVendorsSignalErrorFull() instead")
    void destiny2_GetPublicVendorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetPublicVendorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_InsertSocketPlugFreeSignalErrorFull() instead")
    void destiny2_InsertSocketPlugFreeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_InsertSocketPlugFreeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_InsertSocketPlugSignalErrorFull() instead")
    void destiny2_InsertSocketPlugSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_InsertSocketPlugSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
