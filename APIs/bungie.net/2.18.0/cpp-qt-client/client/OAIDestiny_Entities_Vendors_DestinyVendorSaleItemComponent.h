/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Entities_Vendors_DestinyVendorSaleItemComponent.h
 *
 * Request this component if you want the details about an item being sold in relation to the character making the request: whether the character can buy it, whether they can afford it, and other data related to purchasing the item.  Note that if you want instance, stats, etc... data for the item, you&#39;ll have to request additional components such as ItemInstances, ItemPerks etc... and acquire them from the DestinyVendorResponse&#39;s \&quot;items\&quot; property.
 */

#ifndef OAIDestiny_Entities_Vendors_DestinyVendorSaleItemComponent_H
#define OAIDestiny_Entities_Vendors_DestinyVendorSaleItemComponent_H

#include <QJsonObject>

#include "OAIDestiny_DestinyItemQuantity.h"
#include "OAIDestiny_DestinyUnlockStatus.h"
#include <QDateTime>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_DestinyItemQuantity;
class OAIDestiny_DestinyUnlockStatus;

class OAIDestiny_Entities_Vendors_DestinyVendorSaleItemComponent : public OAIObject {
public:
    OAIDestiny_Entities_Vendors_DestinyVendorSaleItemComponent();
    OAIDestiny_Entities_Vendors_DestinyVendorSaleItemComponent(QString json);
    ~OAIDestiny_Entities_Vendors_DestinyVendorSaleItemComponent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isApiPurchasable() const;
    void setApiPurchasable(const bool &api_purchasable);
    bool is_api_purchasable_Set() const;
    bool is_api_purchasable_Valid() const;

    qint32 getAugments() const;
    void setAugments(const qint32 &augments);
    bool is_augments_Set() const;
    bool is_augments_Valid() const;

    QList<OAIDestiny_DestinyItemQuantity> getCosts() const;
    void setCosts(const QList<OAIDestiny_DestinyItemQuantity> &costs);
    bool is_costs_Set() const;
    bool is_costs_Valid() const;

    QList<qint32> getFailureIndexes() const;
    void setFailureIndexes(const QList<qint32> &failure_indexes);
    bool is_failure_indexes_Set() const;
    bool is_failure_indexes_Valid() const;

    qint32 getItemHash() const;
    void setItemHash(const qint32 &item_hash);
    bool is_item_hash_Set() const;
    bool is_item_hash_Valid() const;

    QList<bool> getItemValueVisibility() const;
    void setItemValueVisibility(const QList<bool> &item_value_visibility);
    bool is_item_value_visibility_Set() const;
    bool is_item_value_visibility_Valid() const;

    QDateTime getOverrideNextRefreshDate() const;
    void setOverrideNextRefreshDate(const QDateTime &override_next_refresh_date);
    bool is_override_next_refresh_date_Set() const;
    bool is_override_next_refresh_date_Valid() const;

    qint32 getOverrideStyleItemHash() const;
    void setOverrideStyleItemHash(const qint32 &override_style_item_hash);
    bool is_override_style_item_hash_Set() const;
    bool is_override_style_item_hash_Valid() const;

    qint32 getQuantity() const;
    void setQuantity(const qint32 &quantity);
    bool is_quantity_Set() const;
    bool is_quantity_Valid() const;

    QList<qint32> getRequiredUnlocks() const;
    void setRequiredUnlocks(const QList<qint32> &required_unlocks);
    bool is_required_unlocks_Set() const;
    bool is_required_unlocks_Valid() const;

    qint32 getSaleStatus() const;
    void setSaleStatus(const qint32 &sale_status);
    bool is_sale_status_Set() const;
    bool is_sale_status_Valid() const;

    QList<OAIDestiny_DestinyUnlockStatus> getUnlockStatuses() const;
    void setUnlockStatuses(const QList<OAIDestiny_DestinyUnlockStatus> &unlock_statuses);
    bool is_unlock_statuses_Set() const;
    bool is_unlock_statuses_Valid() const;

    qint32 getVendorItemIndex() const;
    void setVendorItemIndex(const qint32 &vendor_item_index);
    bool is_vendor_item_index_Set() const;
    bool is_vendor_item_index_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_api_purchasable;
    bool m_api_purchasable_isSet;
    bool m_api_purchasable_isValid;

    qint32 m_augments;
    bool m_augments_isSet;
    bool m_augments_isValid;

    QList<OAIDestiny_DestinyItemQuantity> m_costs;
    bool m_costs_isSet;
    bool m_costs_isValid;

    QList<qint32> m_failure_indexes;
    bool m_failure_indexes_isSet;
    bool m_failure_indexes_isValid;

    qint32 m_item_hash;
    bool m_item_hash_isSet;
    bool m_item_hash_isValid;

    QList<bool> m_item_value_visibility;
    bool m_item_value_visibility_isSet;
    bool m_item_value_visibility_isValid;

    QDateTime m_override_next_refresh_date;
    bool m_override_next_refresh_date_isSet;
    bool m_override_next_refresh_date_isValid;

    qint32 m_override_style_item_hash;
    bool m_override_style_item_hash_isSet;
    bool m_override_style_item_hash_isValid;

    qint32 m_quantity;
    bool m_quantity_isSet;
    bool m_quantity_isValid;

    QList<qint32> m_required_unlocks;
    bool m_required_unlocks_isSet;
    bool m_required_unlocks_isValid;

    qint32 m_sale_status;
    bool m_sale_status_isSet;
    bool m_sale_status_isValid;

    QList<OAIDestiny_DestinyUnlockStatus> m_unlock_statuses;
    bool m_unlock_statuses_isSet;
    bool m_unlock_statuses_isValid;

    qint32 m_vendor_item_index;
    bool m_vendor_item_index_isSet;
    bool m_vendor_item_index_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Entities_Vendors_DestinyVendorSaleItemComponent)

#endif // OAIDestiny_Entities_Vendors_DestinyVendorSaleItemComponent_H
