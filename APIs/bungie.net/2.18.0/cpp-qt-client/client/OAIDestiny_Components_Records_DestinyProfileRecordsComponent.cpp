/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Components_Records_DestinyProfileRecordsComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Components_Records_DestinyProfileRecordsComponent::OAIDestiny_Components_Records_DestinyProfileRecordsComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Components_Records_DestinyProfileRecordsComponent::OAIDestiny_Components_Records_DestinyProfileRecordsComponent() {
    this->initializeModel();
}

OAIDestiny_Components_Records_DestinyProfileRecordsComponent::~OAIDestiny_Components_Records_DestinyProfileRecordsComponent() {}

void OAIDestiny_Components_Records_DestinyProfileRecordsComponent::initializeModel() {

    m_active_score_isSet = false;
    m_active_score_isValid = false;

    m_legacy_score_isSet = false;
    m_legacy_score_isValid = false;

    m_lifetime_score_isSet = false;
    m_lifetime_score_isValid = false;

    m_record_categories_root_node_hash_isSet = false;
    m_record_categories_root_node_hash_isValid = false;

    m_record_seals_root_node_hash_isSet = false;
    m_record_seals_root_node_hash_isValid = false;

    m_records_isSet = false;
    m_records_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_tracked_record_hash_isSet = false;
    m_tracked_record_hash_isValid = false;
}

void OAIDestiny_Components_Records_DestinyProfileRecordsComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Components_Records_DestinyProfileRecordsComponent::fromJsonObject(QJsonObject json) {

    m_active_score_isValid = ::OpenAPI::fromJsonValue(m_active_score, json[QString("activeScore")]);
    m_active_score_isSet = !json[QString("activeScore")].isNull() && m_active_score_isValid;

    m_legacy_score_isValid = ::OpenAPI::fromJsonValue(m_legacy_score, json[QString("legacyScore")]);
    m_legacy_score_isSet = !json[QString("legacyScore")].isNull() && m_legacy_score_isValid;

    m_lifetime_score_isValid = ::OpenAPI::fromJsonValue(m_lifetime_score, json[QString("lifetimeScore")]);
    m_lifetime_score_isSet = !json[QString("lifetimeScore")].isNull() && m_lifetime_score_isValid;

    m_record_categories_root_node_hash_isValid = ::OpenAPI::fromJsonValue(m_record_categories_root_node_hash, json[QString("recordCategoriesRootNodeHash")]);
    m_record_categories_root_node_hash_isSet = !json[QString("recordCategoriesRootNodeHash")].isNull() && m_record_categories_root_node_hash_isValid;

    m_record_seals_root_node_hash_isValid = ::OpenAPI::fromJsonValue(m_record_seals_root_node_hash, json[QString("recordSealsRootNodeHash")]);
    m_record_seals_root_node_hash_isSet = !json[QString("recordSealsRootNodeHash")].isNull() && m_record_seals_root_node_hash_isValid;

    m_records_isValid = ::OpenAPI::fromJsonValue(m_records, json[QString("records")]);
    m_records_isSet = !json[QString("records")].isNull() && m_records_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_tracked_record_hash_isValid = ::OpenAPI::fromJsonValue(m_tracked_record_hash, json[QString("trackedRecordHash")]);
    m_tracked_record_hash_isSet = !json[QString("trackedRecordHash")].isNull() && m_tracked_record_hash_isValid;
}

QString OAIDestiny_Components_Records_DestinyProfileRecordsComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Components_Records_DestinyProfileRecordsComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_active_score_isSet) {
        obj.insert(QString("activeScore"), ::OpenAPI::toJsonValue(m_active_score));
    }
    if (m_legacy_score_isSet) {
        obj.insert(QString("legacyScore"), ::OpenAPI::toJsonValue(m_legacy_score));
    }
    if (m_lifetime_score_isSet) {
        obj.insert(QString("lifetimeScore"), ::OpenAPI::toJsonValue(m_lifetime_score));
    }
    if (m_record_categories_root_node_hash_isSet) {
        obj.insert(QString("recordCategoriesRootNodeHash"), ::OpenAPI::toJsonValue(m_record_categories_root_node_hash));
    }
    if (m_record_seals_root_node_hash_isSet) {
        obj.insert(QString("recordSealsRootNodeHash"), ::OpenAPI::toJsonValue(m_record_seals_root_node_hash));
    }
    if (m_records.size() > 0) {
        obj.insert(QString("records"), ::OpenAPI::toJsonValue(m_records));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_tracked_record_hash_isSet) {
        obj.insert(QString("trackedRecordHash"), ::OpenAPI::toJsonValue(m_tracked_record_hash));
    }
    return obj;
}

qint32 OAIDestiny_Components_Records_DestinyProfileRecordsComponent::getActiveScore() const {
    return m_active_score;
}
void OAIDestiny_Components_Records_DestinyProfileRecordsComponent::setActiveScore(const qint32 &active_score) {
    m_active_score = active_score;
    m_active_score_isSet = true;
}

bool OAIDestiny_Components_Records_DestinyProfileRecordsComponent::is_active_score_Set() const{
    return m_active_score_isSet;
}

bool OAIDestiny_Components_Records_DestinyProfileRecordsComponent::is_active_score_Valid() const{
    return m_active_score_isValid;
}

qint32 OAIDestiny_Components_Records_DestinyProfileRecordsComponent::getLegacyScore() const {
    return m_legacy_score;
}
void OAIDestiny_Components_Records_DestinyProfileRecordsComponent::setLegacyScore(const qint32 &legacy_score) {
    m_legacy_score = legacy_score;
    m_legacy_score_isSet = true;
}

bool OAIDestiny_Components_Records_DestinyProfileRecordsComponent::is_legacy_score_Set() const{
    return m_legacy_score_isSet;
}

bool OAIDestiny_Components_Records_DestinyProfileRecordsComponent::is_legacy_score_Valid() const{
    return m_legacy_score_isValid;
}

qint32 OAIDestiny_Components_Records_DestinyProfileRecordsComponent::getLifetimeScore() const {
    return m_lifetime_score;
}
void OAIDestiny_Components_Records_DestinyProfileRecordsComponent::setLifetimeScore(const qint32 &lifetime_score) {
    m_lifetime_score = lifetime_score;
    m_lifetime_score_isSet = true;
}

bool OAIDestiny_Components_Records_DestinyProfileRecordsComponent::is_lifetime_score_Set() const{
    return m_lifetime_score_isSet;
}

bool OAIDestiny_Components_Records_DestinyProfileRecordsComponent::is_lifetime_score_Valid() const{
    return m_lifetime_score_isValid;
}

qint32 OAIDestiny_Components_Records_DestinyProfileRecordsComponent::getRecordCategoriesRootNodeHash() const {
    return m_record_categories_root_node_hash;
}
void OAIDestiny_Components_Records_DestinyProfileRecordsComponent::setRecordCategoriesRootNodeHash(const qint32 &record_categories_root_node_hash) {
    m_record_categories_root_node_hash = record_categories_root_node_hash;
    m_record_categories_root_node_hash_isSet = true;
}

bool OAIDestiny_Components_Records_DestinyProfileRecordsComponent::is_record_categories_root_node_hash_Set() const{
    return m_record_categories_root_node_hash_isSet;
}

bool OAIDestiny_Components_Records_DestinyProfileRecordsComponent::is_record_categories_root_node_hash_Valid() const{
    return m_record_categories_root_node_hash_isValid;
}

qint32 OAIDestiny_Components_Records_DestinyProfileRecordsComponent::getRecordSealsRootNodeHash() const {
    return m_record_seals_root_node_hash;
}
void OAIDestiny_Components_Records_DestinyProfileRecordsComponent::setRecordSealsRootNodeHash(const qint32 &record_seals_root_node_hash) {
    m_record_seals_root_node_hash = record_seals_root_node_hash;
    m_record_seals_root_node_hash_isSet = true;
}

bool OAIDestiny_Components_Records_DestinyProfileRecordsComponent::is_record_seals_root_node_hash_Set() const{
    return m_record_seals_root_node_hash_isSet;
}

bool OAIDestiny_Components_Records_DestinyProfileRecordsComponent::is_record_seals_root_node_hash_Valid() const{
    return m_record_seals_root_node_hash_isValid;
}

QMap<QString, OAIDestiny_Components_Records_DestinyRecordComponent> OAIDestiny_Components_Records_DestinyProfileRecordsComponent::getRecords() const {
    return m_records;
}
void OAIDestiny_Components_Records_DestinyProfileRecordsComponent::setRecords(const QMap<QString, OAIDestiny_Components_Records_DestinyRecordComponent> &records) {
    m_records = records;
    m_records_isSet = true;
}

bool OAIDestiny_Components_Records_DestinyProfileRecordsComponent::is_records_Set() const{
    return m_records_isSet;
}

bool OAIDestiny_Components_Records_DestinyProfileRecordsComponent::is_records_Valid() const{
    return m_records_isValid;
}

qint32 OAIDestiny_Components_Records_DestinyProfileRecordsComponent::getScore() const {
    return m_score;
}
void OAIDestiny_Components_Records_DestinyProfileRecordsComponent::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIDestiny_Components_Records_DestinyProfileRecordsComponent::is_score_Set() const{
    return m_score_isSet;
}

bool OAIDestiny_Components_Records_DestinyProfileRecordsComponent::is_score_Valid() const{
    return m_score_isValid;
}

qint32 OAIDestiny_Components_Records_DestinyProfileRecordsComponent::getTrackedRecordHash() const {
    return m_tracked_record_hash;
}
void OAIDestiny_Components_Records_DestinyProfileRecordsComponent::setTrackedRecordHash(const qint32 &tracked_record_hash) {
    m_tracked_record_hash = tracked_record_hash;
    m_tracked_record_hash_isSet = true;
}

bool OAIDestiny_Components_Records_DestinyProfileRecordsComponent::is_tracked_record_hash_Set() const{
    return m_tracked_record_hash_isSet;
}

bool OAIDestiny_Components_Records_DestinyProfileRecordsComponent::is_tracked_record_hash_Valid() const{
    return m_tracked_record_hash_isValid;
}

bool OAIDestiny_Components_Records_DestinyProfileRecordsComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legacy_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_categories_root_node_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_seals_root_node_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_records.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracked_record_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Components_Records_DestinyProfileRecordsComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
