/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent() {
    this->initializeModel();
}

OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::~OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent() {}

void OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::initializeModel() {

    m_collectibles_isSet = false;
    m_collectibles_isValid = false;

    m_collection_badges_root_node_hash_isSet = false;
    m_collection_badges_root_node_hash_isValid = false;

    m_collection_categories_root_node_hash_isSet = false;
    m_collection_categories_root_node_hash_isValid = false;

    m_newness_flagged_collectible_hashes_isSet = false;
    m_newness_flagged_collectible_hashes_isValid = false;

    m_recent_collectible_hashes_isSet = false;
    m_recent_collectible_hashes_isValid = false;
}

void OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::fromJsonObject(QJsonObject json) {

    m_collectibles_isValid = ::OpenAPI::fromJsonValue(m_collectibles, json[QString("collectibles")]);
    m_collectibles_isSet = !json[QString("collectibles")].isNull() && m_collectibles_isValid;

    m_collection_badges_root_node_hash_isValid = ::OpenAPI::fromJsonValue(m_collection_badges_root_node_hash, json[QString("collectionBadgesRootNodeHash")]);
    m_collection_badges_root_node_hash_isSet = !json[QString("collectionBadgesRootNodeHash")].isNull() && m_collection_badges_root_node_hash_isValid;

    m_collection_categories_root_node_hash_isValid = ::OpenAPI::fromJsonValue(m_collection_categories_root_node_hash, json[QString("collectionCategoriesRootNodeHash")]);
    m_collection_categories_root_node_hash_isSet = !json[QString("collectionCategoriesRootNodeHash")].isNull() && m_collection_categories_root_node_hash_isValid;

    m_newness_flagged_collectible_hashes_isValid = ::OpenAPI::fromJsonValue(m_newness_flagged_collectible_hashes, json[QString("newnessFlaggedCollectibleHashes")]);
    m_newness_flagged_collectible_hashes_isSet = !json[QString("newnessFlaggedCollectibleHashes")].isNull() && m_newness_flagged_collectible_hashes_isValid;

    m_recent_collectible_hashes_isValid = ::OpenAPI::fromJsonValue(m_recent_collectible_hashes, json[QString("recentCollectibleHashes")]);
    m_recent_collectible_hashes_isSet = !json[QString("recentCollectibleHashes")].isNull() && m_recent_collectible_hashes_isValid;
}

QString OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_collectibles.size() > 0) {
        obj.insert(QString("collectibles"), ::OpenAPI::toJsonValue(m_collectibles));
    }
    if (m_collection_badges_root_node_hash_isSet) {
        obj.insert(QString("collectionBadgesRootNodeHash"), ::OpenAPI::toJsonValue(m_collection_badges_root_node_hash));
    }
    if (m_collection_categories_root_node_hash_isSet) {
        obj.insert(QString("collectionCategoriesRootNodeHash"), ::OpenAPI::toJsonValue(m_collection_categories_root_node_hash));
    }
    if (m_newness_flagged_collectible_hashes.size() > 0) {
        obj.insert(QString("newnessFlaggedCollectibleHashes"), ::OpenAPI::toJsonValue(m_newness_flagged_collectible_hashes));
    }
    if (m_recent_collectible_hashes.size() > 0) {
        obj.insert(QString("recentCollectibleHashes"), ::OpenAPI::toJsonValue(m_recent_collectible_hashes));
    }
    return obj;
}

QMap<QString, OAIDestiny_Components_Collectibles_DestinyCollectibleComponent> OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::getCollectibles() const {
    return m_collectibles;
}
void OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::setCollectibles(const QMap<QString, OAIDestiny_Components_Collectibles_DestinyCollectibleComponent> &collectibles) {
    m_collectibles = collectibles;
    m_collectibles_isSet = true;
}

bool OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::is_collectibles_Set() const{
    return m_collectibles_isSet;
}

bool OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::is_collectibles_Valid() const{
    return m_collectibles_isValid;
}

qint32 OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::getCollectionBadgesRootNodeHash() const {
    return m_collection_badges_root_node_hash;
}
void OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::setCollectionBadgesRootNodeHash(const qint32 &collection_badges_root_node_hash) {
    m_collection_badges_root_node_hash = collection_badges_root_node_hash;
    m_collection_badges_root_node_hash_isSet = true;
}

bool OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::is_collection_badges_root_node_hash_Set() const{
    return m_collection_badges_root_node_hash_isSet;
}

bool OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::is_collection_badges_root_node_hash_Valid() const{
    return m_collection_badges_root_node_hash_isValid;
}

qint32 OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::getCollectionCategoriesRootNodeHash() const {
    return m_collection_categories_root_node_hash;
}
void OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::setCollectionCategoriesRootNodeHash(const qint32 &collection_categories_root_node_hash) {
    m_collection_categories_root_node_hash = collection_categories_root_node_hash;
    m_collection_categories_root_node_hash_isSet = true;
}

bool OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::is_collection_categories_root_node_hash_Set() const{
    return m_collection_categories_root_node_hash_isSet;
}

bool OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::is_collection_categories_root_node_hash_Valid() const{
    return m_collection_categories_root_node_hash_isValid;
}

QList<qint32> OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::getNewnessFlaggedCollectibleHashes() const {
    return m_newness_flagged_collectible_hashes;
}
void OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::setNewnessFlaggedCollectibleHashes(const QList<qint32> &newness_flagged_collectible_hashes) {
    m_newness_flagged_collectible_hashes = newness_flagged_collectible_hashes;
    m_newness_flagged_collectible_hashes_isSet = true;
}

bool OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::is_newness_flagged_collectible_hashes_Set() const{
    return m_newness_flagged_collectible_hashes_isSet;
}

bool OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::is_newness_flagged_collectible_hashes_Valid() const{
    return m_newness_flagged_collectible_hashes_isValid;
}

QList<qint32> OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::getRecentCollectibleHashes() const {
    return m_recent_collectible_hashes;
}
void OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::setRecentCollectibleHashes(const QList<qint32> &recent_collectible_hashes) {
    m_recent_collectible_hashes = recent_collectible_hashes;
    m_recent_collectible_hashes_isSet = true;
}

bool OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::is_recent_collectible_hashes_Set() const{
    return m_recent_collectible_hashes_isSet;
}

bool OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::is_recent_collectible_hashes_Valid() const{
    return m_recent_collectible_hashes_isValid;
}

bool OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collectibles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_badges_root_node_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_categories_root_node_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_newness_flagged_collectible_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recent_collectible_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
