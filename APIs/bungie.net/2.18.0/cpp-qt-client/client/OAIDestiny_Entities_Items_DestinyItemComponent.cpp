/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Entities_Items_DestinyItemComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Entities_Items_DestinyItemComponent::OAIDestiny_Entities_Items_DestinyItemComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Entities_Items_DestinyItemComponent::OAIDestiny_Entities_Items_DestinyItemComponent() {
    this->initializeModel();
}

OAIDestiny_Entities_Items_DestinyItemComponent::~OAIDestiny_Entities_Items_DestinyItemComponent() {}

void OAIDestiny_Entities_Items_DestinyItemComponent::initializeModel() {

    m_bind_status_isSet = false;
    m_bind_status_isValid = false;

    m_bucket_hash_isSet = false;
    m_bucket_hash_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_is_wrapper_isSet = false;
    m_is_wrapper_isValid = false;

    m_item_hash_isSet = false;
    m_item_hash_isValid = false;

    m_item_instance_id_isSet = false;
    m_item_instance_id_isValid = false;

    m_item_value_visibility_isSet = false;
    m_item_value_visibility_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_lockable_isSet = false;
    m_lockable_isValid = false;

    m_metric_hash_isSet = false;
    m_metric_hash_isValid = false;

    m_metric_objective_isSet = false;
    m_metric_objective_isValid = false;

    m_override_style_item_hash_isSet = false;
    m_override_style_item_hash_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tooltip_notification_indexes_isSet = false;
    m_tooltip_notification_indexes_isValid = false;

    m_transfer_status_isSet = false;
    m_transfer_status_isValid = false;

    m_version_number_isSet = false;
    m_version_number_isValid = false;
}

void OAIDestiny_Entities_Items_DestinyItemComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Entities_Items_DestinyItemComponent::fromJsonObject(QJsonObject json) {

    m_bind_status_isValid = ::OpenAPI::fromJsonValue(m_bind_status, json[QString("bindStatus")]);
    m_bind_status_isSet = !json[QString("bindStatus")].isNull() && m_bind_status_isValid;

    m_bucket_hash_isValid = ::OpenAPI::fromJsonValue(m_bucket_hash, json[QString("bucketHash")]);
    m_bucket_hash_isSet = !json[QString("bucketHash")].isNull() && m_bucket_hash_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_is_wrapper_isValid = ::OpenAPI::fromJsonValue(m_is_wrapper, json[QString("isWrapper")]);
    m_is_wrapper_isSet = !json[QString("isWrapper")].isNull() && m_is_wrapper_isValid;

    m_item_hash_isValid = ::OpenAPI::fromJsonValue(m_item_hash, json[QString("itemHash")]);
    m_item_hash_isSet = !json[QString("itemHash")].isNull() && m_item_hash_isValid;

    m_item_instance_id_isValid = ::OpenAPI::fromJsonValue(m_item_instance_id, json[QString("itemInstanceId")]);
    m_item_instance_id_isSet = !json[QString("itemInstanceId")].isNull() && m_item_instance_id_isValid;

    m_item_value_visibility_isValid = ::OpenAPI::fromJsonValue(m_item_value_visibility, json[QString("itemValueVisibility")]);
    m_item_value_visibility_isSet = !json[QString("itemValueVisibility")].isNull() && m_item_value_visibility_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_lockable_isValid = ::OpenAPI::fromJsonValue(m_lockable, json[QString("lockable")]);
    m_lockable_isSet = !json[QString("lockable")].isNull() && m_lockable_isValid;

    m_metric_hash_isValid = ::OpenAPI::fromJsonValue(m_metric_hash, json[QString("metricHash")]);
    m_metric_hash_isSet = !json[QString("metricHash")].isNull() && m_metric_hash_isValid;

    m_metric_objective_isValid = ::OpenAPI::fromJsonValue(m_metric_objective, json[QString("metricObjective")]);
    m_metric_objective_isSet = !json[QString("metricObjective")].isNull() && m_metric_objective_isValid;

    m_override_style_item_hash_isValid = ::OpenAPI::fromJsonValue(m_override_style_item_hash, json[QString("overrideStyleItemHash")]);
    m_override_style_item_hash_isSet = !json[QString("overrideStyleItemHash")].isNull() && m_override_style_item_hash_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_tooltip_notification_indexes_isValid = ::OpenAPI::fromJsonValue(m_tooltip_notification_indexes, json[QString("tooltipNotificationIndexes")]);
    m_tooltip_notification_indexes_isSet = !json[QString("tooltipNotificationIndexes")].isNull() && m_tooltip_notification_indexes_isValid;

    m_transfer_status_isValid = ::OpenAPI::fromJsonValue(m_transfer_status, json[QString("transferStatus")]);
    m_transfer_status_isSet = !json[QString("transferStatus")].isNull() && m_transfer_status_isValid;

    m_version_number_isValid = ::OpenAPI::fromJsonValue(m_version_number, json[QString("versionNumber")]);
    m_version_number_isSet = !json[QString("versionNumber")].isNull() && m_version_number_isValid;
}

QString OAIDestiny_Entities_Items_DestinyItemComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Entities_Items_DestinyItemComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_bind_status_isSet) {
        obj.insert(QString("bindStatus"), ::OpenAPI::toJsonValue(m_bind_status));
    }
    if (m_bucket_hash_isSet) {
        obj.insert(QString("bucketHash"), ::OpenAPI::toJsonValue(m_bucket_hash));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_is_wrapper_isSet) {
        obj.insert(QString("isWrapper"), ::OpenAPI::toJsonValue(m_is_wrapper));
    }
    if (m_item_hash_isSet) {
        obj.insert(QString("itemHash"), ::OpenAPI::toJsonValue(m_item_hash));
    }
    if (m_item_instance_id_isSet) {
        obj.insert(QString("itemInstanceId"), ::OpenAPI::toJsonValue(m_item_instance_id));
    }
    if (m_item_value_visibility.size() > 0) {
        obj.insert(QString("itemValueVisibility"), ::OpenAPI::toJsonValue(m_item_value_visibility));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_lockable_isSet) {
        obj.insert(QString("lockable"), ::OpenAPI::toJsonValue(m_lockable));
    }
    if (m_metric_hash_isSet) {
        obj.insert(QString("metricHash"), ::OpenAPI::toJsonValue(m_metric_hash));
    }
    if (m_metric_objective.isSet()) {
        obj.insert(QString("metricObjective"), ::OpenAPI::toJsonValue(m_metric_objective));
    }
    if (m_override_style_item_hash_isSet) {
        obj.insert(QString("overrideStyleItemHash"), ::OpenAPI::toJsonValue(m_override_style_item_hash));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tooltip_notification_indexes.size() > 0) {
        obj.insert(QString("tooltipNotificationIndexes"), ::OpenAPI::toJsonValue(m_tooltip_notification_indexes));
    }
    if (m_transfer_status_isSet) {
        obj.insert(QString("transferStatus"), ::OpenAPI::toJsonValue(m_transfer_status));
    }
    if (m_version_number_isSet) {
        obj.insert(QString("versionNumber"), ::OpenAPI::toJsonValue(m_version_number));
    }
    return obj;
}

qint32 OAIDestiny_Entities_Items_DestinyItemComponent::getBindStatus() const {
    return m_bind_status;
}
void OAIDestiny_Entities_Items_DestinyItemComponent::setBindStatus(const qint32 &bind_status) {
    m_bind_status = bind_status;
    m_bind_status_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_bind_status_Set() const{
    return m_bind_status_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_bind_status_Valid() const{
    return m_bind_status_isValid;
}

qint32 OAIDestiny_Entities_Items_DestinyItemComponent::getBucketHash() const {
    return m_bucket_hash;
}
void OAIDestiny_Entities_Items_DestinyItemComponent::setBucketHash(const qint32 &bucket_hash) {
    m_bucket_hash = bucket_hash;
    m_bucket_hash_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_bucket_hash_Set() const{
    return m_bucket_hash_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_bucket_hash_Valid() const{
    return m_bucket_hash_isValid;
}

QDateTime OAIDestiny_Entities_Items_DestinyItemComponent::getExpirationDate() const {
    return m_expiration_date;
}
void OAIDestiny_Entities_Items_DestinyItemComponent::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::isIsWrapper() const {
    return m_is_wrapper;
}
void OAIDestiny_Entities_Items_DestinyItemComponent::setIsWrapper(const bool &is_wrapper) {
    m_is_wrapper = is_wrapper;
    m_is_wrapper_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_is_wrapper_Set() const{
    return m_is_wrapper_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_is_wrapper_Valid() const{
    return m_is_wrapper_isValid;
}

qint32 OAIDestiny_Entities_Items_DestinyItemComponent::getItemHash() const {
    return m_item_hash;
}
void OAIDestiny_Entities_Items_DestinyItemComponent::setItemHash(const qint32 &item_hash) {
    m_item_hash = item_hash;
    m_item_hash_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_item_hash_Set() const{
    return m_item_hash_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_item_hash_Valid() const{
    return m_item_hash_isValid;
}

qint64 OAIDestiny_Entities_Items_DestinyItemComponent::getItemInstanceId() const {
    return m_item_instance_id;
}
void OAIDestiny_Entities_Items_DestinyItemComponent::setItemInstanceId(const qint64 &item_instance_id) {
    m_item_instance_id = item_instance_id;
    m_item_instance_id_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_item_instance_id_Set() const{
    return m_item_instance_id_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_item_instance_id_Valid() const{
    return m_item_instance_id_isValid;
}

QList<bool> OAIDestiny_Entities_Items_DestinyItemComponent::getItemValueVisibility() const {
    return m_item_value_visibility;
}
void OAIDestiny_Entities_Items_DestinyItemComponent::setItemValueVisibility(const QList<bool> &item_value_visibility) {
    m_item_value_visibility = item_value_visibility;
    m_item_value_visibility_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_item_value_visibility_Set() const{
    return m_item_value_visibility_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_item_value_visibility_Valid() const{
    return m_item_value_visibility_isValid;
}

qint32 OAIDestiny_Entities_Items_DestinyItemComponent::getLocation() const {
    return m_location;
}
void OAIDestiny_Entities_Items_DestinyItemComponent::setLocation(const qint32 &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_location_Set() const{
    return m_location_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_location_Valid() const{
    return m_location_isValid;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::isLockable() const {
    return m_lockable;
}
void OAIDestiny_Entities_Items_DestinyItemComponent::setLockable(const bool &lockable) {
    m_lockable = lockable;
    m_lockable_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_lockable_Set() const{
    return m_lockable_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_lockable_Valid() const{
    return m_lockable_isValid;
}

qint32 OAIDestiny_Entities_Items_DestinyItemComponent::getMetricHash() const {
    return m_metric_hash;
}
void OAIDestiny_Entities_Items_DestinyItemComponent::setMetricHash(const qint32 &metric_hash) {
    m_metric_hash = metric_hash;
    m_metric_hash_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_metric_hash_Set() const{
    return m_metric_hash_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_metric_hash_Valid() const{
    return m_metric_hash_isValid;
}

OAIDestiny_Quests_DestinyObjectiveProgress OAIDestiny_Entities_Items_DestinyItemComponent::getMetricObjective() const {
    return m_metric_objective;
}
void OAIDestiny_Entities_Items_DestinyItemComponent::setMetricObjective(const OAIDestiny_Quests_DestinyObjectiveProgress &metric_objective) {
    m_metric_objective = metric_objective;
    m_metric_objective_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_metric_objective_Set() const{
    return m_metric_objective_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_metric_objective_Valid() const{
    return m_metric_objective_isValid;
}

qint32 OAIDestiny_Entities_Items_DestinyItemComponent::getOverrideStyleItemHash() const {
    return m_override_style_item_hash;
}
void OAIDestiny_Entities_Items_DestinyItemComponent::setOverrideStyleItemHash(const qint32 &override_style_item_hash) {
    m_override_style_item_hash = override_style_item_hash;
    m_override_style_item_hash_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_override_style_item_hash_Set() const{
    return m_override_style_item_hash_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_override_style_item_hash_Valid() const{
    return m_override_style_item_hash_isValid;
}

qint32 OAIDestiny_Entities_Items_DestinyItemComponent::getQuantity() const {
    return m_quantity;
}
void OAIDestiny_Entities_Items_DestinyItemComponent::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_quantity_Valid() const{
    return m_quantity_isValid;
}

qint32 OAIDestiny_Entities_Items_DestinyItemComponent::getState() const {
    return m_state;
}
void OAIDestiny_Entities_Items_DestinyItemComponent::setState(const qint32 &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_state_Valid() const{
    return m_state_isValid;
}

QList<qint32> OAIDestiny_Entities_Items_DestinyItemComponent::getTooltipNotificationIndexes() const {
    return m_tooltip_notification_indexes;
}
void OAIDestiny_Entities_Items_DestinyItemComponent::setTooltipNotificationIndexes(const QList<qint32> &tooltip_notification_indexes) {
    m_tooltip_notification_indexes = tooltip_notification_indexes;
    m_tooltip_notification_indexes_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_tooltip_notification_indexes_Set() const{
    return m_tooltip_notification_indexes_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_tooltip_notification_indexes_Valid() const{
    return m_tooltip_notification_indexes_isValid;
}

qint32 OAIDestiny_Entities_Items_DestinyItemComponent::getTransferStatus() const {
    return m_transfer_status;
}
void OAIDestiny_Entities_Items_DestinyItemComponent::setTransferStatus(const qint32 &transfer_status) {
    m_transfer_status = transfer_status;
    m_transfer_status_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_transfer_status_Set() const{
    return m_transfer_status_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_transfer_status_Valid() const{
    return m_transfer_status_isValid;
}

qint32 OAIDestiny_Entities_Items_DestinyItemComponent::getVersionNumber() const {
    return m_version_number;
}
void OAIDestiny_Entities_Items_DestinyItemComponent::setVersionNumber(const qint32 &version_number) {
    m_version_number = version_number;
    m_version_number_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_version_number_Set() const{
    return m_version_number_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::is_version_number_Valid() const{
    return m_version_number_isValid;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bind_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_wrapper_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_value_visibility.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lockable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_objective.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_style_item_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tooltip_notification_indexes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Entities_Items_DestinyItemComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
