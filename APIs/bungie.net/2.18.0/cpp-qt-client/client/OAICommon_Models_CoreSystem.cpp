/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommon_Models_CoreSystem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommon_Models_CoreSystem::OAICommon_Models_CoreSystem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommon_Models_CoreSystem::OAICommon_Models_CoreSystem() {
    this->initializeModel();
}

OAICommon_Models_CoreSystem::~OAICommon_Models_CoreSystem() {}

void OAICommon_Models_CoreSystem::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;
}

void OAICommon_Models_CoreSystem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommon_Models_CoreSystem::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;
}

QString OAICommon_Models_CoreSystem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommon_Models_CoreSystem::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    return obj;
}

bool OAICommon_Models_CoreSystem::isEnabled() const {
    return m_enabled;
}
void OAICommon_Models_CoreSystem::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICommon_Models_CoreSystem::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICommon_Models_CoreSystem::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QMap<QString, QString> OAICommon_Models_CoreSystem::getParameters() const {
    return m_parameters;
}
void OAICommon_Models_CoreSystem::setParameters(const QMap<QString, QString> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAICommon_Models_CoreSystem::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAICommon_Models_CoreSystem::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAICommon_Models_CoreSystem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommon_Models_CoreSystem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
