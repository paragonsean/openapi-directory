/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::~OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition() {}

void OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::initializeModel() {

    m_base_material_requirements_isSet = false;
    m_base_material_requirements_isValid = false;

    m_bonus_plugs_isSet = false;
    m_bonus_plugs_isValid = false;

    m_failed_requirement_strings_isSet = false;
    m_failed_requirement_strings_isValid = false;

    m_output_item_hash_isSet = false;
    m_output_item_hash_isValid = false;

    m_required_socket_type_hashes_isSet = false;
    m_required_socket_type_hashes_isValid = false;
}

void OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::fromJsonObject(QJsonObject json) {

    m_base_material_requirements_isValid = ::OpenAPI::fromJsonValue(m_base_material_requirements, json[QString("baseMaterialRequirements")]);
    m_base_material_requirements_isSet = !json[QString("baseMaterialRequirements")].isNull() && m_base_material_requirements_isValid;

    m_bonus_plugs_isValid = ::OpenAPI::fromJsonValue(m_bonus_plugs, json[QString("bonusPlugs")]);
    m_bonus_plugs_isSet = !json[QString("bonusPlugs")].isNull() && m_bonus_plugs_isValid;

    m_failed_requirement_strings_isValid = ::OpenAPI::fromJsonValue(m_failed_requirement_strings, json[QString("failedRequirementStrings")]);
    m_failed_requirement_strings_isSet = !json[QString("failedRequirementStrings")].isNull() && m_failed_requirement_strings_isValid;

    m_output_item_hash_isValid = ::OpenAPI::fromJsonValue(m_output_item_hash, json[QString("outputItemHash")]);
    m_output_item_hash_isSet = !json[QString("outputItemHash")].isNull() && m_output_item_hash_isValid;

    m_required_socket_type_hashes_isValid = ::OpenAPI::fromJsonValue(m_required_socket_type_hashes, json[QString("requiredSocketTypeHashes")]);
    m_required_socket_type_hashes_isSet = !json[QString("requiredSocketTypeHashes")].isNull() && m_required_socket_type_hashes_isValid;
}

QString OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_base_material_requirements_isSet) {
        obj.insert(QString("baseMaterialRequirements"), ::OpenAPI::toJsonValue(m_base_material_requirements));
    }
    if (m_bonus_plugs.size() > 0) {
        obj.insert(QString("bonusPlugs"), ::OpenAPI::toJsonValue(m_bonus_plugs));
    }
    if (m_failed_requirement_strings.size() > 0) {
        obj.insert(QString("failedRequirementStrings"), ::OpenAPI::toJsonValue(m_failed_requirement_strings));
    }
    if (m_output_item_hash_isSet) {
        obj.insert(QString("outputItemHash"), ::OpenAPI::toJsonValue(m_output_item_hash));
    }
    if (m_required_socket_type_hashes.size() > 0) {
        obj.insert(QString("requiredSocketTypeHashes"), ::OpenAPI::toJsonValue(m_required_socket_type_hashes));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::getBaseMaterialRequirements() const {
    return m_base_material_requirements;
}
void OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::setBaseMaterialRequirements(const qint32 &base_material_requirements) {
    m_base_material_requirements = base_material_requirements;
    m_base_material_requirements_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::is_base_material_requirements_Set() const{
    return m_base_material_requirements_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::is_base_material_requirements_Valid() const{
    return m_base_material_requirements_isValid;
}

QList<OAIDestiny_Definitions_DestinyItemCraftingBlockBonusPlugDefinition> OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::getBonusPlugs() const {
    return m_bonus_plugs;
}
void OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::setBonusPlugs(const QList<OAIDestiny_Definitions_DestinyItemCraftingBlockBonusPlugDefinition> &bonus_plugs) {
    m_bonus_plugs = bonus_plugs;
    m_bonus_plugs_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::is_bonus_plugs_Set() const{
    return m_bonus_plugs_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::is_bonus_plugs_Valid() const{
    return m_bonus_plugs_isValid;
}

QList<QString> OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::getFailedRequirementStrings() const {
    return m_failed_requirement_strings;
}
void OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::setFailedRequirementStrings(const QList<QString> &failed_requirement_strings) {
    m_failed_requirement_strings = failed_requirement_strings;
    m_failed_requirement_strings_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::is_failed_requirement_strings_Set() const{
    return m_failed_requirement_strings_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::is_failed_requirement_strings_Valid() const{
    return m_failed_requirement_strings_isValid;
}

qint32 OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::getOutputItemHash() const {
    return m_output_item_hash;
}
void OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::setOutputItemHash(const qint32 &output_item_hash) {
    m_output_item_hash = output_item_hash;
    m_output_item_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::is_output_item_hash_Set() const{
    return m_output_item_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::is_output_item_hash_Valid() const{
    return m_output_item_hash_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::getRequiredSocketTypeHashes() const {
    return m_required_socket_type_hashes;
}
void OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::setRequiredSocketTypeHashes(const QList<qint32> &required_socket_type_hashes) {
    m_required_socket_type_hashes = required_socket_type_hashes;
    m_required_socket_type_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::is_required_socket_type_hashes_Set() const{
    return m_required_socket_type_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::is_required_socket_type_hashes_Valid() const{
    return m_required_socket_type_hashes_isValid;
}

bool OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_material_requirements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bonus_plugs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_requirement_strings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_item_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_socket_type_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
