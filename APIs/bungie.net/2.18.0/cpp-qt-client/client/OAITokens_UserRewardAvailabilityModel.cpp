/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITokens_UserRewardAvailabilityModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITokens_UserRewardAvailabilityModel::OAITokens_UserRewardAvailabilityModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITokens_UserRewardAvailabilityModel::OAITokens_UserRewardAvailabilityModel() {
    this->initializeModel();
}

OAITokens_UserRewardAvailabilityModel::~OAITokens_UserRewardAvailabilityModel() {}

void OAITokens_UserRewardAvailabilityModel::initializeModel() {

    m_availability_model_isSet = false;
    m_availability_model_isValid = false;

    m_is_available_for_user_isSet = false;
    m_is_available_for_user_isValid = false;

    m_is_unlocked_for_user_isSet = false;
    m_is_unlocked_for_user_isValid = false;
}

void OAITokens_UserRewardAvailabilityModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITokens_UserRewardAvailabilityModel::fromJsonObject(QJsonObject json) {

    m_availability_model_isValid = ::OpenAPI::fromJsonValue(m_availability_model, json[QString("AvailabilityModel")]);
    m_availability_model_isSet = !json[QString("AvailabilityModel")].isNull() && m_availability_model_isValid;

    m_is_available_for_user_isValid = ::OpenAPI::fromJsonValue(m_is_available_for_user, json[QString("IsAvailableForUser")]);
    m_is_available_for_user_isSet = !json[QString("IsAvailableForUser")].isNull() && m_is_available_for_user_isValid;

    m_is_unlocked_for_user_isValid = ::OpenAPI::fromJsonValue(m_is_unlocked_for_user, json[QString("IsUnlockedForUser")]);
    m_is_unlocked_for_user_isSet = !json[QString("IsUnlockedForUser")].isNull() && m_is_unlocked_for_user_isValid;
}

QString OAITokens_UserRewardAvailabilityModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITokens_UserRewardAvailabilityModel::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_model.isSet()) {
        obj.insert(QString("AvailabilityModel"), ::OpenAPI::toJsonValue(m_availability_model));
    }
    if (m_is_available_for_user_isSet) {
        obj.insert(QString("IsAvailableForUser"), ::OpenAPI::toJsonValue(m_is_available_for_user));
    }
    if (m_is_unlocked_for_user_isSet) {
        obj.insert(QString("IsUnlockedForUser"), ::OpenAPI::toJsonValue(m_is_unlocked_for_user));
    }
    return obj;
}

OAITokens_RewardAvailabilityModel OAITokens_UserRewardAvailabilityModel::getAvailabilityModel() const {
    return m_availability_model;
}
void OAITokens_UserRewardAvailabilityModel::setAvailabilityModel(const OAITokens_RewardAvailabilityModel &availability_model) {
    m_availability_model = availability_model;
    m_availability_model_isSet = true;
}

bool OAITokens_UserRewardAvailabilityModel::is_availability_model_Set() const{
    return m_availability_model_isSet;
}

bool OAITokens_UserRewardAvailabilityModel::is_availability_model_Valid() const{
    return m_availability_model_isValid;
}

bool OAITokens_UserRewardAvailabilityModel::isIsAvailableForUser() const {
    return m_is_available_for_user;
}
void OAITokens_UserRewardAvailabilityModel::setIsAvailableForUser(const bool &is_available_for_user) {
    m_is_available_for_user = is_available_for_user;
    m_is_available_for_user_isSet = true;
}

bool OAITokens_UserRewardAvailabilityModel::is_is_available_for_user_Set() const{
    return m_is_available_for_user_isSet;
}

bool OAITokens_UserRewardAvailabilityModel::is_is_available_for_user_Valid() const{
    return m_is_available_for_user_isValid;
}

bool OAITokens_UserRewardAvailabilityModel::isIsUnlockedForUser() const {
    return m_is_unlocked_for_user;
}
void OAITokens_UserRewardAvailabilityModel::setIsUnlockedForUser(const bool &is_unlocked_for_user) {
    m_is_unlocked_for_user = is_unlocked_for_user;
    m_is_unlocked_for_user_isSet = true;
}

bool OAITokens_UserRewardAvailabilityModel::is_is_unlocked_for_user_Set() const{
    return m_is_unlocked_for_user_isSet;
}

bool OAITokens_UserRewardAvailabilityModel::is_is_unlocked_for_user_Valid() const{
    return m_is_unlocked_for_user_isValid;
}

bool OAITokens_UserRewardAvailabilityModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_available_for_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_unlocked_for_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITokens_UserRewardAvailabilityModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
