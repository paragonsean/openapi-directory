/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Quests_DestinyQuestStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Quests_DestinyQuestStatus::OAIDestiny_Quests_DestinyQuestStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Quests_DestinyQuestStatus::OAIDestiny_Quests_DestinyQuestStatus() {
    this->initializeModel();
}

OAIDestiny_Quests_DestinyQuestStatus::~OAIDestiny_Quests_DestinyQuestStatus() {}

void OAIDestiny_Quests_DestinyQuestStatus::initializeModel() {

    m_completed_isSet = false;
    m_completed_isValid = false;

    m_item_instance_id_isSet = false;
    m_item_instance_id_isValid = false;

    m_quest_hash_isSet = false;
    m_quest_hash_isValid = false;

    m_redeemed_isSet = false;
    m_redeemed_isValid = false;

    m_started_isSet = false;
    m_started_isValid = false;

    m_step_hash_isSet = false;
    m_step_hash_isValid = false;

    m_step_objectives_isSet = false;
    m_step_objectives_isValid = false;

    m_tracked_isSet = false;
    m_tracked_isValid = false;

    m_vendor_hash_isSet = false;
    m_vendor_hash_isValid = false;
}

void OAIDestiny_Quests_DestinyQuestStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Quests_DestinyQuestStatus::fromJsonObject(QJsonObject json) {

    m_completed_isValid = ::OpenAPI::fromJsonValue(m_completed, json[QString("completed")]);
    m_completed_isSet = !json[QString("completed")].isNull() && m_completed_isValid;

    m_item_instance_id_isValid = ::OpenAPI::fromJsonValue(m_item_instance_id, json[QString("itemInstanceId")]);
    m_item_instance_id_isSet = !json[QString("itemInstanceId")].isNull() && m_item_instance_id_isValid;

    m_quest_hash_isValid = ::OpenAPI::fromJsonValue(m_quest_hash, json[QString("questHash")]);
    m_quest_hash_isSet = !json[QString("questHash")].isNull() && m_quest_hash_isValid;

    m_redeemed_isValid = ::OpenAPI::fromJsonValue(m_redeemed, json[QString("redeemed")]);
    m_redeemed_isSet = !json[QString("redeemed")].isNull() && m_redeemed_isValid;

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("started")]);
    m_started_isSet = !json[QString("started")].isNull() && m_started_isValid;

    m_step_hash_isValid = ::OpenAPI::fromJsonValue(m_step_hash, json[QString("stepHash")]);
    m_step_hash_isSet = !json[QString("stepHash")].isNull() && m_step_hash_isValid;

    m_step_objectives_isValid = ::OpenAPI::fromJsonValue(m_step_objectives, json[QString("stepObjectives")]);
    m_step_objectives_isSet = !json[QString("stepObjectives")].isNull() && m_step_objectives_isValid;

    m_tracked_isValid = ::OpenAPI::fromJsonValue(m_tracked, json[QString("tracked")]);
    m_tracked_isSet = !json[QString("tracked")].isNull() && m_tracked_isValid;

    m_vendor_hash_isValid = ::OpenAPI::fromJsonValue(m_vendor_hash, json[QString("vendorHash")]);
    m_vendor_hash_isSet = !json[QString("vendorHash")].isNull() && m_vendor_hash_isValid;
}

QString OAIDestiny_Quests_DestinyQuestStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Quests_DestinyQuestStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_completed_isSet) {
        obj.insert(QString("completed"), ::OpenAPI::toJsonValue(m_completed));
    }
    if (m_item_instance_id_isSet) {
        obj.insert(QString("itemInstanceId"), ::OpenAPI::toJsonValue(m_item_instance_id));
    }
    if (m_quest_hash_isSet) {
        obj.insert(QString("questHash"), ::OpenAPI::toJsonValue(m_quest_hash));
    }
    if (m_redeemed_isSet) {
        obj.insert(QString("redeemed"), ::OpenAPI::toJsonValue(m_redeemed));
    }
    if (m_started_isSet) {
        obj.insert(QString("started"), ::OpenAPI::toJsonValue(m_started));
    }
    if (m_step_hash_isSet) {
        obj.insert(QString("stepHash"), ::OpenAPI::toJsonValue(m_step_hash));
    }
    if (m_step_objectives.size() > 0) {
        obj.insert(QString("stepObjectives"), ::OpenAPI::toJsonValue(m_step_objectives));
    }
    if (m_tracked_isSet) {
        obj.insert(QString("tracked"), ::OpenAPI::toJsonValue(m_tracked));
    }
    if (m_vendor_hash_isSet) {
        obj.insert(QString("vendorHash"), ::OpenAPI::toJsonValue(m_vendor_hash));
    }
    return obj;
}

bool OAIDestiny_Quests_DestinyQuestStatus::isCompleted() const {
    return m_completed;
}
void OAIDestiny_Quests_DestinyQuestStatus::setCompleted(const bool &completed) {
    m_completed = completed;
    m_completed_isSet = true;
}

bool OAIDestiny_Quests_DestinyQuestStatus::is_completed_Set() const{
    return m_completed_isSet;
}

bool OAIDestiny_Quests_DestinyQuestStatus::is_completed_Valid() const{
    return m_completed_isValid;
}

qint64 OAIDestiny_Quests_DestinyQuestStatus::getItemInstanceId() const {
    return m_item_instance_id;
}
void OAIDestiny_Quests_DestinyQuestStatus::setItemInstanceId(const qint64 &item_instance_id) {
    m_item_instance_id = item_instance_id;
    m_item_instance_id_isSet = true;
}

bool OAIDestiny_Quests_DestinyQuestStatus::is_item_instance_id_Set() const{
    return m_item_instance_id_isSet;
}

bool OAIDestiny_Quests_DestinyQuestStatus::is_item_instance_id_Valid() const{
    return m_item_instance_id_isValid;
}

qint32 OAIDestiny_Quests_DestinyQuestStatus::getQuestHash() const {
    return m_quest_hash;
}
void OAIDestiny_Quests_DestinyQuestStatus::setQuestHash(const qint32 &quest_hash) {
    m_quest_hash = quest_hash;
    m_quest_hash_isSet = true;
}

bool OAIDestiny_Quests_DestinyQuestStatus::is_quest_hash_Set() const{
    return m_quest_hash_isSet;
}

bool OAIDestiny_Quests_DestinyQuestStatus::is_quest_hash_Valid() const{
    return m_quest_hash_isValid;
}

bool OAIDestiny_Quests_DestinyQuestStatus::isRedeemed() const {
    return m_redeemed;
}
void OAIDestiny_Quests_DestinyQuestStatus::setRedeemed(const bool &redeemed) {
    m_redeemed = redeemed;
    m_redeemed_isSet = true;
}

bool OAIDestiny_Quests_DestinyQuestStatus::is_redeemed_Set() const{
    return m_redeemed_isSet;
}

bool OAIDestiny_Quests_DestinyQuestStatus::is_redeemed_Valid() const{
    return m_redeemed_isValid;
}

bool OAIDestiny_Quests_DestinyQuestStatus::isStarted() const {
    return m_started;
}
void OAIDestiny_Quests_DestinyQuestStatus::setStarted(const bool &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAIDestiny_Quests_DestinyQuestStatus::is_started_Set() const{
    return m_started_isSet;
}

bool OAIDestiny_Quests_DestinyQuestStatus::is_started_Valid() const{
    return m_started_isValid;
}

qint32 OAIDestiny_Quests_DestinyQuestStatus::getStepHash() const {
    return m_step_hash;
}
void OAIDestiny_Quests_DestinyQuestStatus::setStepHash(const qint32 &step_hash) {
    m_step_hash = step_hash;
    m_step_hash_isSet = true;
}

bool OAIDestiny_Quests_DestinyQuestStatus::is_step_hash_Set() const{
    return m_step_hash_isSet;
}

bool OAIDestiny_Quests_DestinyQuestStatus::is_step_hash_Valid() const{
    return m_step_hash_isValid;
}

QList<OAIDestiny_Quests_DestinyObjectiveProgress> OAIDestiny_Quests_DestinyQuestStatus::getStepObjectives() const {
    return m_step_objectives;
}
void OAIDestiny_Quests_DestinyQuestStatus::setStepObjectives(const QList<OAIDestiny_Quests_DestinyObjectiveProgress> &step_objectives) {
    m_step_objectives = step_objectives;
    m_step_objectives_isSet = true;
}

bool OAIDestiny_Quests_DestinyQuestStatus::is_step_objectives_Set() const{
    return m_step_objectives_isSet;
}

bool OAIDestiny_Quests_DestinyQuestStatus::is_step_objectives_Valid() const{
    return m_step_objectives_isValid;
}

bool OAIDestiny_Quests_DestinyQuestStatus::isTracked() const {
    return m_tracked;
}
void OAIDestiny_Quests_DestinyQuestStatus::setTracked(const bool &tracked) {
    m_tracked = tracked;
    m_tracked_isSet = true;
}

bool OAIDestiny_Quests_DestinyQuestStatus::is_tracked_Set() const{
    return m_tracked_isSet;
}

bool OAIDestiny_Quests_DestinyQuestStatus::is_tracked_Valid() const{
    return m_tracked_isValid;
}

qint32 OAIDestiny_Quests_DestinyQuestStatus::getVendorHash() const {
    return m_vendor_hash;
}
void OAIDestiny_Quests_DestinyQuestStatus::setVendorHash(const qint32 &vendor_hash) {
    m_vendor_hash = vendor_hash;
    m_vendor_hash_isSet = true;
}

bool OAIDestiny_Quests_DestinyQuestStatus::is_vendor_hash_Set() const{
    return m_vendor_hash_isSet;
}

bool OAIDestiny_Quests_DestinyQuestStatus::is_vendor_hash_Valid() const{
    return m_vendor_hash_isValid;
}

bool OAIDestiny_Quests_DestinyQuestStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quest_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redeemed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_objectives.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Quests_DestinyQuestStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
