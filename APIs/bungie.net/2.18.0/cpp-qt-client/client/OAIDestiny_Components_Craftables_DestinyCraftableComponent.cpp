/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Components_Craftables_DestinyCraftableComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Components_Craftables_DestinyCraftableComponent::OAIDestiny_Components_Craftables_DestinyCraftableComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Components_Craftables_DestinyCraftableComponent::OAIDestiny_Components_Craftables_DestinyCraftableComponent() {
    this->initializeModel();
}

OAIDestiny_Components_Craftables_DestinyCraftableComponent::~OAIDestiny_Components_Craftables_DestinyCraftableComponent() {}

void OAIDestiny_Components_Craftables_DestinyCraftableComponent::initializeModel() {

    m_failed_requirement_indexes_isSet = false;
    m_failed_requirement_indexes_isValid = false;

    m_sockets_isSet = false;
    m_sockets_isValid = false;

    m_visible_isSet = false;
    m_visible_isValid = false;
}

void OAIDestiny_Components_Craftables_DestinyCraftableComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Components_Craftables_DestinyCraftableComponent::fromJsonObject(QJsonObject json) {

    m_failed_requirement_indexes_isValid = ::OpenAPI::fromJsonValue(m_failed_requirement_indexes, json[QString("failedRequirementIndexes")]);
    m_failed_requirement_indexes_isSet = !json[QString("failedRequirementIndexes")].isNull() && m_failed_requirement_indexes_isValid;

    m_sockets_isValid = ::OpenAPI::fromJsonValue(m_sockets, json[QString("sockets")]);
    m_sockets_isSet = !json[QString("sockets")].isNull() && m_sockets_isValid;

    m_visible_isValid = ::OpenAPI::fromJsonValue(m_visible, json[QString("visible")]);
    m_visible_isSet = !json[QString("visible")].isNull() && m_visible_isValid;
}

QString OAIDestiny_Components_Craftables_DestinyCraftableComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Components_Craftables_DestinyCraftableComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_failed_requirement_indexes.size() > 0) {
        obj.insert(QString("failedRequirementIndexes"), ::OpenAPI::toJsonValue(m_failed_requirement_indexes));
    }
    if (m_sockets.size() > 0) {
        obj.insert(QString("sockets"), ::OpenAPI::toJsonValue(m_sockets));
    }
    if (m_visible_isSet) {
        obj.insert(QString("visible"), ::OpenAPI::toJsonValue(m_visible));
    }
    return obj;
}

QList<qint32> OAIDestiny_Components_Craftables_DestinyCraftableComponent::getFailedRequirementIndexes() const {
    return m_failed_requirement_indexes;
}
void OAIDestiny_Components_Craftables_DestinyCraftableComponent::setFailedRequirementIndexes(const QList<qint32> &failed_requirement_indexes) {
    m_failed_requirement_indexes = failed_requirement_indexes;
    m_failed_requirement_indexes_isSet = true;
}

bool OAIDestiny_Components_Craftables_DestinyCraftableComponent::is_failed_requirement_indexes_Set() const{
    return m_failed_requirement_indexes_isSet;
}

bool OAIDestiny_Components_Craftables_DestinyCraftableComponent::is_failed_requirement_indexes_Valid() const{
    return m_failed_requirement_indexes_isValid;
}

QList<OAIDestiny_Components_Craftables_DestinyCraftableSocketComponent> OAIDestiny_Components_Craftables_DestinyCraftableComponent::getSockets() const {
    return m_sockets;
}
void OAIDestiny_Components_Craftables_DestinyCraftableComponent::setSockets(const QList<OAIDestiny_Components_Craftables_DestinyCraftableSocketComponent> &sockets) {
    m_sockets = sockets;
    m_sockets_isSet = true;
}

bool OAIDestiny_Components_Craftables_DestinyCraftableComponent::is_sockets_Set() const{
    return m_sockets_isSet;
}

bool OAIDestiny_Components_Craftables_DestinyCraftableComponent::is_sockets_Valid() const{
    return m_sockets_isValid;
}

bool OAIDestiny_Components_Craftables_DestinyCraftableComponent::isVisible() const {
    return m_visible;
}
void OAIDestiny_Components_Craftables_DestinyCraftableComponent::setVisible(const bool &visible) {
    m_visible = visible;
    m_visible_isSet = true;
}

bool OAIDestiny_Components_Craftables_DestinyCraftableComponent::is_visible_Set() const{
    return m_visible_isSet;
}

bool OAIDestiny_Components_Craftables_DestinyCraftableComponent::is_visible_Valid() const{
    return m_visible_isValid;
}

bool OAIDestiny_Components_Craftables_DestinyCraftableComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failed_requirement_indexes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sockets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Components_Craftables_DestinyCraftableComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
