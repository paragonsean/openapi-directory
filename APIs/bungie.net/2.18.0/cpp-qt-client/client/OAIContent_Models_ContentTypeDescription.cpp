/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContent_Models_ContentTypeDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContent_Models_ContentTypeDescription::OAIContent_Models_ContentTypeDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContent_Models_ContentTypeDescription::OAIContent_Models_ContentTypeDescription() {
    this->initializeModel();
}

OAIContent_Models_ContentTypeDescription::~OAIContent_Models_ContentTypeDescription() {}

void OAIContent_Models_ContentTypeDescription::initializeModel() {

    m_allow_comments_isSet = false;
    m_allow_comments_isValid = false;

    m_auto_english_property_fallback_isSet = false;
    m_auto_english_property_fallback_isValid = false;

    m_bind_identifier_to_property_isSet = false;
    m_bind_identifier_to_property_isValid = false;

    m_bound_regex_isSet = false;
    m_bound_regex_isValid = false;

    m_bulk_uploadable_isSet = false;
    m_bulk_uploadable_isValid = false;

    m_c_type_isSet = false;
    m_c_type_isValid = false;

    m_content_description_isSet = false;
    m_content_description_isValid = false;

    m_force_identifier_binding_isSet = false;
    m_force_identifier_binding_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_preview_image_isSet = false;
    m_preview_image_isValid = false;

    m_previews_isSet = false;
    m_previews_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_property_sections_isSet = false;
    m_property_sections_isValid = false;

    m_reminder_isSet = false;
    m_reminder_isValid = false;

    m_show_in_content_editor_isSet = false;
    m_show_in_content_editor_isValid = false;

    m_suppress_cms_path_isSet = false;
    m_suppress_cms_path_isValid = false;

    m_tag_metadata_isSet = false;
    m_tag_metadata_isValid = false;

    m_tag_metadata_items_isSet = false;
    m_tag_metadata_items_isValid = false;

    m_type_of_isSet = false;
    m_type_of_isValid = false;

    m_usage_examples_isSet = false;
    m_usage_examples_isValid = false;
}

void OAIContent_Models_ContentTypeDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContent_Models_ContentTypeDescription::fromJsonObject(QJsonObject json) {

    m_allow_comments_isValid = ::OpenAPI::fromJsonValue(m_allow_comments, json[QString("allowComments")]);
    m_allow_comments_isSet = !json[QString("allowComments")].isNull() && m_allow_comments_isValid;

    m_auto_english_property_fallback_isValid = ::OpenAPI::fromJsonValue(m_auto_english_property_fallback, json[QString("autoEnglishPropertyFallback")]);
    m_auto_english_property_fallback_isSet = !json[QString("autoEnglishPropertyFallback")].isNull() && m_auto_english_property_fallback_isValid;

    m_bind_identifier_to_property_isValid = ::OpenAPI::fromJsonValue(m_bind_identifier_to_property, json[QString("bindIdentifierToProperty")]);
    m_bind_identifier_to_property_isSet = !json[QString("bindIdentifierToProperty")].isNull() && m_bind_identifier_to_property_isValid;

    m_bound_regex_isValid = ::OpenAPI::fromJsonValue(m_bound_regex, json[QString("boundRegex")]);
    m_bound_regex_isSet = !json[QString("boundRegex")].isNull() && m_bound_regex_isValid;

    m_bulk_uploadable_isValid = ::OpenAPI::fromJsonValue(m_bulk_uploadable, json[QString("bulkUploadable")]);
    m_bulk_uploadable_isSet = !json[QString("bulkUploadable")].isNull() && m_bulk_uploadable_isValid;

    m_c_type_isValid = ::OpenAPI::fromJsonValue(m_c_type, json[QString("cType")]);
    m_c_type_isSet = !json[QString("cType")].isNull() && m_c_type_isValid;

    m_content_description_isValid = ::OpenAPI::fromJsonValue(m_content_description, json[QString("contentDescription")]);
    m_content_description_isSet = !json[QString("contentDescription")].isNull() && m_content_description_isValid;

    m_force_identifier_binding_isValid = ::OpenAPI::fromJsonValue(m_force_identifier_binding, json[QString("forceIdentifierBinding")]);
    m_force_identifier_binding_isSet = !json[QString("forceIdentifierBinding")].isNull() && m_force_identifier_binding_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_preview_image_isValid = ::OpenAPI::fromJsonValue(m_preview_image, json[QString("previewImage")]);
    m_preview_image_isSet = !json[QString("previewImage")].isNull() && m_preview_image_isValid;

    m_previews_isValid = ::OpenAPI::fromJsonValue(m_previews, json[QString("previews")]);
    m_previews_isSet = !json[QString("previews")].isNull() && m_previews_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_property_sections_isValid = ::OpenAPI::fromJsonValue(m_property_sections, json[QString("propertySections")]);
    m_property_sections_isSet = !json[QString("propertySections")].isNull() && m_property_sections_isValid;

    m_reminder_isValid = ::OpenAPI::fromJsonValue(m_reminder, json[QString("reminder")]);
    m_reminder_isSet = !json[QString("reminder")].isNull() && m_reminder_isValid;

    m_show_in_content_editor_isValid = ::OpenAPI::fromJsonValue(m_show_in_content_editor, json[QString("showInContentEditor")]);
    m_show_in_content_editor_isSet = !json[QString("showInContentEditor")].isNull() && m_show_in_content_editor_isValid;

    m_suppress_cms_path_isValid = ::OpenAPI::fromJsonValue(m_suppress_cms_path, json[QString("suppressCmsPath")]);
    m_suppress_cms_path_isSet = !json[QString("suppressCmsPath")].isNull() && m_suppress_cms_path_isValid;

    m_tag_metadata_isValid = ::OpenAPI::fromJsonValue(m_tag_metadata, json[QString("tagMetadata")]);
    m_tag_metadata_isSet = !json[QString("tagMetadata")].isNull() && m_tag_metadata_isValid;

    m_tag_metadata_items_isValid = ::OpenAPI::fromJsonValue(m_tag_metadata_items, json[QString("tagMetadataItems")]);
    m_tag_metadata_items_isSet = !json[QString("tagMetadataItems")].isNull() && m_tag_metadata_items_isValid;

    m_type_of_isValid = ::OpenAPI::fromJsonValue(m_type_of, json[QString("typeOf")]);
    m_type_of_isSet = !json[QString("typeOf")].isNull() && m_type_of_isValid;

    m_usage_examples_isValid = ::OpenAPI::fromJsonValue(m_usage_examples, json[QString("usageExamples")]);
    m_usage_examples_isSet = !json[QString("usageExamples")].isNull() && m_usage_examples_isValid;
}

QString OAIContent_Models_ContentTypeDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContent_Models_ContentTypeDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_comments_isSet) {
        obj.insert(QString("allowComments"), ::OpenAPI::toJsonValue(m_allow_comments));
    }
    if (m_auto_english_property_fallback_isSet) {
        obj.insert(QString("autoEnglishPropertyFallback"), ::OpenAPI::toJsonValue(m_auto_english_property_fallback));
    }
    if (m_bind_identifier_to_property_isSet) {
        obj.insert(QString("bindIdentifierToProperty"), ::OpenAPI::toJsonValue(m_bind_identifier_to_property));
    }
    if (m_bound_regex_isSet) {
        obj.insert(QString("boundRegex"), ::OpenAPI::toJsonValue(m_bound_regex));
    }
    if (m_bulk_uploadable_isSet) {
        obj.insert(QString("bulkUploadable"), ::OpenAPI::toJsonValue(m_bulk_uploadable));
    }
    if (m_c_type_isSet) {
        obj.insert(QString("cType"), ::OpenAPI::toJsonValue(m_c_type));
    }
    if (m_content_description_isSet) {
        obj.insert(QString("contentDescription"), ::OpenAPI::toJsonValue(m_content_description));
    }
    if (m_force_identifier_binding_isSet) {
        obj.insert(QString("forceIdentifierBinding"), ::OpenAPI::toJsonValue(m_force_identifier_binding));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_preview_image_isSet) {
        obj.insert(QString("previewImage"), ::OpenAPI::toJsonValue(m_preview_image));
    }
    if (m_previews.size() > 0) {
        obj.insert(QString("previews"), ::OpenAPI::toJsonValue(m_previews));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_property_sections.size() > 0) {
        obj.insert(QString("propertySections"), ::OpenAPI::toJsonValue(m_property_sections));
    }
    if (m_reminder_isSet) {
        obj.insert(QString("reminder"), ::OpenAPI::toJsonValue(m_reminder));
    }
    if (m_show_in_content_editor_isSet) {
        obj.insert(QString("showInContentEditor"), ::OpenAPI::toJsonValue(m_show_in_content_editor));
    }
    if (m_suppress_cms_path_isSet) {
        obj.insert(QString("suppressCmsPath"), ::OpenAPI::toJsonValue(m_suppress_cms_path));
    }
    if (m_tag_metadata.size() > 0) {
        obj.insert(QString("tagMetadata"), ::OpenAPI::toJsonValue(m_tag_metadata));
    }
    if (m_tag_metadata_items.size() > 0) {
        obj.insert(QString("tagMetadataItems"), ::OpenAPI::toJsonValue(m_tag_metadata_items));
    }
    if (m_type_of_isSet) {
        obj.insert(QString("typeOf"), ::OpenAPI::toJsonValue(m_type_of));
    }
    if (m_usage_examples.size() > 0) {
        obj.insert(QString("usageExamples"), ::OpenAPI::toJsonValue(m_usage_examples));
    }
    return obj;
}

bool OAIContent_Models_ContentTypeDescription::isAllowComments() const {
    return m_allow_comments;
}
void OAIContent_Models_ContentTypeDescription::setAllowComments(const bool &allow_comments) {
    m_allow_comments = allow_comments;
    m_allow_comments_isSet = true;
}

bool OAIContent_Models_ContentTypeDescription::is_allow_comments_Set() const{
    return m_allow_comments_isSet;
}

bool OAIContent_Models_ContentTypeDescription::is_allow_comments_Valid() const{
    return m_allow_comments_isValid;
}

bool OAIContent_Models_ContentTypeDescription::isAutoEnglishPropertyFallback() const {
    return m_auto_english_property_fallback;
}
void OAIContent_Models_ContentTypeDescription::setAutoEnglishPropertyFallback(const bool &auto_english_property_fallback) {
    m_auto_english_property_fallback = auto_english_property_fallback;
    m_auto_english_property_fallback_isSet = true;
}

bool OAIContent_Models_ContentTypeDescription::is_auto_english_property_fallback_Set() const{
    return m_auto_english_property_fallback_isSet;
}

bool OAIContent_Models_ContentTypeDescription::is_auto_english_property_fallback_Valid() const{
    return m_auto_english_property_fallback_isValid;
}

QString OAIContent_Models_ContentTypeDescription::getBindIdentifierToProperty() const {
    return m_bind_identifier_to_property;
}
void OAIContent_Models_ContentTypeDescription::setBindIdentifierToProperty(const QString &bind_identifier_to_property) {
    m_bind_identifier_to_property = bind_identifier_to_property;
    m_bind_identifier_to_property_isSet = true;
}

bool OAIContent_Models_ContentTypeDescription::is_bind_identifier_to_property_Set() const{
    return m_bind_identifier_to_property_isSet;
}

bool OAIContent_Models_ContentTypeDescription::is_bind_identifier_to_property_Valid() const{
    return m_bind_identifier_to_property_isValid;
}

QString OAIContent_Models_ContentTypeDescription::getBoundRegex() const {
    return m_bound_regex;
}
void OAIContent_Models_ContentTypeDescription::setBoundRegex(const QString &bound_regex) {
    m_bound_regex = bound_regex;
    m_bound_regex_isSet = true;
}

bool OAIContent_Models_ContentTypeDescription::is_bound_regex_Set() const{
    return m_bound_regex_isSet;
}

bool OAIContent_Models_ContentTypeDescription::is_bound_regex_Valid() const{
    return m_bound_regex_isValid;
}

bool OAIContent_Models_ContentTypeDescription::isBulkUploadable() const {
    return m_bulk_uploadable;
}
void OAIContent_Models_ContentTypeDescription::setBulkUploadable(const bool &bulk_uploadable) {
    m_bulk_uploadable = bulk_uploadable;
    m_bulk_uploadable_isSet = true;
}

bool OAIContent_Models_ContentTypeDescription::is_bulk_uploadable_Set() const{
    return m_bulk_uploadable_isSet;
}

bool OAIContent_Models_ContentTypeDescription::is_bulk_uploadable_Valid() const{
    return m_bulk_uploadable_isValid;
}

QString OAIContent_Models_ContentTypeDescription::getCType() const {
    return m_c_type;
}
void OAIContent_Models_ContentTypeDescription::setCType(const QString &c_type) {
    m_c_type = c_type;
    m_c_type_isSet = true;
}

bool OAIContent_Models_ContentTypeDescription::is_c_type_Set() const{
    return m_c_type_isSet;
}

bool OAIContent_Models_ContentTypeDescription::is_c_type_Valid() const{
    return m_c_type_isValid;
}

QString OAIContent_Models_ContentTypeDescription::getContentDescription() const {
    return m_content_description;
}
void OAIContent_Models_ContentTypeDescription::setContentDescription(const QString &content_description) {
    m_content_description = content_description;
    m_content_description_isSet = true;
}

bool OAIContent_Models_ContentTypeDescription::is_content_description_Set() const{
    return m_content_description_isSet;
}

bool OAIContent_Models_ContentTypeDescription::is_content_description_Valid() const{
    return m_content_description_isValid;
}

bool OAIContent_Models_ContentTypeDescription::isForceIdentifierBinding() const {
    return m_force_identifier_binding;
}
void OAIContent_Models_ContentTypeDescription::setForceIdentifierBinding(const bool &force_identifier_binding) {
    m_force_identifier_binding = force_identifier_binding;
    m_force_identifier_binding_isSet = true;
}

bool OAIContent_Models_ContentTypeDescription::is_force_identifier_binding_Set() const{
    return m_force_identifier_binding_isSet;
}

bool OAIContent_Models_ContentTypeDescription::is_force_identifier_binding_Valid() const{
    return m_force_identifier_binding_isValid;
}

QString OAIContent_Models_ContentTypeDescription::getName() const {
    return m_name;
}
void OAIContent_Models_ContentTypeDescription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContent_Models_ContentTypeDescription::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContent_Models_ContentTypeDescription::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIContent_Models_ContentTypeDescription::getPreviewImage() const {
    return m_preview_image;
}
void OAIContent_Models_ContentTypeDescription::setPreviewImage(const QString &preview_image) {
    m_preview_image = preview_image;
    m_preview_image_isSet = true;
}

bool OAIContent_Models_ContentTypeDescription::is_preview_image_Set() const{
    return m_preview_image_isSet;
}

bool OAIContent_Models_ContentTypeDescription::is_preview_image_Valid() const{
    return m_preview_image_isValid;
}

QList<OAIContent_Models_ContentPreview> OAIContent_Models_ContentTypeDescription::getPreviews() const {
    return m_previews;
}
void OAIContent_Models_ContentTypeDescription::setPreviews(const QList<OAIContent_Models_ContentPreview> &previews) {
    m_previews = previews;
    m_previews_isSet = true;
}

bool OAIContent_Models_ContentTypeDescription::is_previews_Set() const{
    return m_previews_isSet;
}

bool OAIContent_Models_ContentTypeDescription::is_previews_Valid() const{
    return m_previews_isValid;
}

qint32 OAIContent_Models_ContentTypeDescription::getPriority() const {
    return m_priority;
}
void OAIContent_Models_ContentTypeDescription::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIContent_Models_ContentTypeDescription::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIContent_Models_ContentTypeDescription::is_priority_Valid() const{
    return m_priority_isValid;
}

QList<OAIContent_Models_ContentTypeProperty> OAIContent_Models_ContentTypeDescription::getProperties() const {
    return m_properties;
}
void OAIContent_Models_ContentTypeDescription::setProperties(const QList<OAIContent_Models_ContentTypeProperty> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIContent_Models_ContentTypeDescription::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIContent_Models_ContentTypeDescription::is_properties_Valid() const{
    return m_properties_isValid;
}

QList<OAIContent_Models_ContentTypePropertySection> OAIContent_Models_ContentTypeDescription::getPropertySections() const {
    return m_property_sections;
}
void OAIContent_Models_ContentTypeDescription::setPropertySections(const QList<OAIContent_Models_ContentTypePropertySection> &property_sections) {
    m_property_sections = property_sections;
    m_property_sections_isSet = true;
}

bool OAIContent_Models_ContentTypeDescription::is_property_sections_Set() const{
    return m_property_sections_isSet;
}

bool OAIContent_Models_ContentTypeDescription::is_property_sections_Valid() const{
    return m_property_sections_isValid;
}

QString OAIContent_Models_ContentTypeDescription::getReminder() const {
    return m_reminder;
}
void OAIContent_Models_ContentTypeDescription::setReminder(const QString &reminder) {
    m_reminder = reminder;
    m_reminder_isSet = true;
}

bool OAIContent_Models_ContentTypeDescription::is_reminder_Set() const{
    return m_reminder_isSet;
}

bool OAIContent_Models_ContentTypeDescription::is_reminder_Valid() const{
    return m_reminder_isValid;
}

bool OAIContent_Models_ContentTypeDescription::isShowInContentEditor() const {
    return m_show_in_content_editor;
}
void OAIContent_Models_ContentTypeDescription::setShowInContentEditor(const bool &show_in_content_editor) {
    m_show_in_content_editor = show_in_content_editor;
    m_show_in_content_editor_isSet = true;
}

bool OAIContent_Models_ContentTypeDescription::is_show_in_content_editor_Set() const{
    return m_show_in_content_editor_isSet;
}

bool OAIContent_Models_ContentTypeDescription::is_show_in_content_editor_Valid() const{
    return m_show_in_content_editor_isValid;
}

bool OAIContent_Models_ContentTypeDescription::isSuppressCmsPath() const {
    return m_suppress_cms_path;
}
void OAIContent_Models_ContentTypeDescription::setSuppressCmsPath(const bool &suppress_cms_path) {
    m_suppress_cms_path = suppress_cms_path;
    m_suppress_cms_path_isSet = true;
}

bool OAIContent_Models_ContentTypeDescription::is_suppress_cms_path_Set() const{
    return m_suppress_cms_path_isSet;
}

bool OAIContent_Models_ContentTypeDescription::is_suppress_cms_path_Valid() const{
    return m_suppress_cms_path_isValid;
}

QList<OAIContent_Models_TagMetadataDefinition> OAIContent_Models_ContentTypeDescription::getTagMetadata() const {
    return m_tag_metadata;
}
void OAIContent_Models_ContentTypeDescription::setTagMetadata(const QList<OAIContent_Models_TagMetadataDefinition> &tag_metadata) {
    m_tag_metadata = tag_metadata;
    m_tag_metadata_isSet = true;
}

bool OAIContent_Models_ContentTypeDescription::is_tag_metadata_Set() const{
    return m_tag_metadata_isSet;
}

bool OAIContent_Models_ContentTypeDescription::is_tag_metadata_Valid() const{
    return m_tag_metadata_isValid;
}

QMap<QString, OAIContent_Models_TagMetadataItem> OAIContent_Models_ContentTypeDescription::getTagMetadataItems() const {
    return m_tag_metadata_items;
}
void OAIContent_Models_ContentTypeDescription::setTagMetadataItems(const QMap<QString, OAIContent_Models_TagMetadataItem> &tag_metadata_items) {
    m_tag_metadata_items = tag_metadata_items;
    m_tag_metadata_items_isSet = true;
}

bool OAIContent_Models_ContentTypeDescription::is_tag_metadata_items_Set() const{
    return m_tag_metadata_items_isSet;
}

bool OAIContent_Models_ContentTypeDescription::is_tag_metadata_items_Valid() const{
    return m_tag_metadata_items_isValid;
}

QString OAIContent_Models_ContentTypeDescription::getTypeOf() const {
    return m_type_of;
}
void OAIContent_Models_ContentTypeDescription::setTypeOf(const QString &type_of) {
    m_type_of = type_of;
    m_type_of_isSet = true;
}

bool OAIContent_Models_ContentTypeDescription::is_type_of_Set() const{
    return m_type_of_isSet;
}

bool OAIContent_Models_ContentTypeDescription::is_type_of_Valid() const{
    return m_type_of_isValid;
}

QList<QString> OAIContent_Models_ContentTypeDescription::getUsageExamples() const {
    return m_usage_examples;
}
void OAIContent_Models_ContentTypeDescription::setUsageExamples(const QList<QString> &usage_examples) {
    m_usage_examples = usage_examples;
    m_usage_examples_isSet = true;
}

bool OAIContent_Models_ContentTypeDescription::is_usage_examples_Set() const{
    return m_usage_examples_isSet;
}

bool OAIContent_Models_ContentTypeDescription::is_usage_examples_Valid() const{
    return m_usage_examples_isValid;
}

bool OAIContent_Models_ContentTypeDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_english_property_fallback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bind_identifier_to_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bound_regex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bulk_uploadable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_c_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_identifier_binding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previews.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_sections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reminder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_in_content_editor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suppress_cms_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_metadata_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_of_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_examples.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContent_Models_ContentTypeDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
