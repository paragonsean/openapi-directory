/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Milestones_DestinyMilestoneChallengeActivity.h
 *
 * 
 */

#ifndef OAIDestiny_Milestones_DestinyMilestoneChallengeActivity_H
#define OAIDestiny_Milestones_DestinyMilestoneChallengeActivity_H

#include <QJsonObject>

#include "OAIDestiny_Challenges_DestinyChallengeStatus.h"
#include "OAIDestiny_Milestones_DestinyMilestoneActivityPhase.h"
#include <QList>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Challenges_DestinyChallengeStatus;
class OAIDestiny_Milestones_DestinyMilestoneActivityPhase;

class OAIDestiny_Milestones_DestinyMilestoneChallengeActivity : public OAIObject {
public:
    OAIDestiny_Milestones_DestinyMilestoneChallengeActivity();
    OAIDestiny_Milestones_DestinyMilestoneChallengeActivity(QString json);
    ~OAIDestiny_Milestones_DestinyMilestoneChallengeActivity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getActivityHash() const;
    void setActivityHash(const qint32 &activity_hash);
    bool is_activity_hash_Set() const;
    bool is_activity_hash_Valid() const;

    QMap<QString, bool> getBooleanActivityOptions() const;
    void setBooleanActivityOptions(const QMap<QString, bool> &boolean_activity_options);
    bool is_boolean_activity_options_Set() const;
    bool is_boolean_activity_options_Valid() const;

    QList<OAIDestiny_Challenges_DestinyChallengeStatus> getChallenges() const;
    void setChallenges(const QList<OAIDestiny_Challenges_DestinyChallengeStatus> &challenges);
    bool is_challenges_Set() const;
    bool is_challenges_Valid() const;

    qint32 getLoadoutRequirementIndex() const;
    void setLoadoutRequirementIndex(const qint32 &loadout_requirement_index);
    bool is_loadout_requirement_index_Set() const;
    bool is_loadout_requirement_index_Valid() const;

    QList<qint32> getModifierHashes() const;
    void setModifierHashes(const QList<qint32> &modifier_hashes);
    bool is_modifier_hashes_Set() const;
    bool is_modifier_hashes_Valid() const;

    QList<OAIDestiny_Milestones_DestinyMilestoneActivityPhase> getPhases() const;
    void setPhases(const QList<OAIDestiny_Milestones_DestinyMilestoneActivityPhase> &phases);
    bool is_phases_Set() const;
    bool is_phases_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_activity_hash;
    bool m_activity_hash_isSet;
    bool m_activity_hash_isValid;

    QMap<QString, bool> m_boolean_activity_options;
    bool m_boolean_activity_options_isSet;
    bool m_boolean_activity_options_isValid;

    QList<OAIDestiny_Challenges_DestinyChallengeStatus> m_challenges;
    bool m_challenges_isSet;
    bool m_challenges_isValid;

    qint32 m_loadout_requirement_index;
    bool m_loadout_requirement_index_isSet;
    bool m_loadout_requirement_index_isValid;

    QList<qint32> m_modifier_hashes;
    bool m_modifier_hashes_isSet;
    bool m_modifier_hashes_isValid;

    QList<OAIDestiny_Milestones_DestinyMilestoneActivityPhase> m_phases;
    bool m_phases_isSet;
    bool m_phases_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Milestones_DestinyMilestoneChallengeActivity)

#endif // OAIDestiny_Milestones_DestinyMilestoneChallengeActivity_H
