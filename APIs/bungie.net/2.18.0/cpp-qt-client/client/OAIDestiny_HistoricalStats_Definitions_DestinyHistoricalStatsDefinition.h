/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition.h
 *
 * 
 */

#ifndef OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition_H
#define OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition : public OAIObject {
public:
    OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition();
    OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition(QString json);
    ~OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCategory() const;
    void setCategory(const qint32 &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    qint32 getGroup() const;
    void setGroup(const qint32 &group);
    bool is_group_Set() const;
    bool is_group_Valid() const;

    QString getIconImage() const;
    void setIconImage(const QString &icon_image);
    bool is_icon_image_Set() const;
    bool is_icon_image_Valid() const;

    qint32 getMedalTierHash() const;
    void setMedalTierHash(const qint32 &medal_tier_hash);
    bool is_medal_tier_hash_Set() const;
    bool is_medal_tier_hash_Valid() const;

    qint32 getMergeMethod() const;
    void setMergeMethod(const qint32 &merge_method);
    bool is_merge_method_Set() const;
    bool is_merge_method_Valid() const;

    QList<qint32> getModes() const;
    void setModes(const QList<qint32> &modes);
    bool is_modes_Set() const;
    bool is_modes_Valid() const;

    QList<qint32> getPeriodTypes() const;
    void setPeriodTypes(const QList<qint32> &period_types);
    bool is_period_types_Set() const;
    bool is_period_types_Valid() const;

    QString getStatDescription() const;
    void setStatDescription(const QString &stat_description);
    bool is_stat_description_Set() const;
    bool is_stat_description_Valid() const;

    QString getStatId() const;
    void setStatId(const QString &stat_id);
    bool is_stat_id_Set() const;
    bool is_stat_id_Valid() const;

    QString getStatName() const;
    void setStatName(const QString &stat_name);
    bool is_stat_name_Set() const;
    bool is_stat_name_Valid() const;

    QString getStatNameAbbr() const;
    void setStatNameAbbr(const QString &stat_name_abbr);
    bool is_stat_name_abbr_Set() const;
    bool is_stat_name_abbr_Valid() const;

    QString getUnitLabel() const;
    void setUnitLabel(const QString &unit_label);
    bool is_unit_label_Set() const;
    bool is_unit_label_Valid() const;

    qint32 getUnitType() const;
    void setUnitType(const qint32 &unit_type);
    bool is_unit_type_Set() const;
    bool is_unit_type_Valid() const;

    qint32 getWeight() const;
    void setWeight(const qint32 &weight);
    bool is_weight_Set() const;
    bool is_weight_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    qint32 m_group;
    bool m_group_isSet;
    bool m_group_isValid;

    QString m_icon_image;
    bool m_icon_image_isSet;
    bool m_icon_image_isValid;

    qint32 m_medal_tier_hash;
    bool m_medal_tier_hash_isSet;
    bool m_medal_tier_hash_isValid;

    qint32 m_merge_method;
    bool m_merge_method_isSet;
    bool m_merge_method_isValid;

    QList<qint32> m_modes;
    bool m_modes_isSet;
    bool m_modes_isValid;

    QList<qint32> m_period_types;
    bool m_period_types_isSet;
    bool m_period_types_isValid;

    QString m_stat_description;
    bool m_stat_description_isSet;
    bool m_stat_description_isValid;

    QString m_stat_id;
    bool m_stat_id_isSet;
    bool m_stat_id_isValid;

    QString m_stat_name;
    bool m_stat_name_isSet;
    bool m_stat_name_isValid;

    QString m_stat_name_abbr;
    bool m_stat_name_abbr_isSet;
    bool m_stat_name_abbr_isValid;

    QString m_unit_label;
    bool m_unit_label_isSet;
    bool m_unit_label_isValid;

    qint32 m_unit_type;
    bool m_unit_type_isSet;
    bool m_unit_type_isValid;

    qint32 m_weight;
    bool m_weight_isSet;
    bool m_weight_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition)

#endif // OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition_H
