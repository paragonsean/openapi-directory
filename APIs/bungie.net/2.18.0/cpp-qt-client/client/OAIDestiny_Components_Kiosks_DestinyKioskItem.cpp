/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Components_Kiosks_DestinyKioskItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Components_Kiosks_DestinyKioskItem::OAIDestiny_Components_Kiosks_DestinyKioskItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Components_Kiosks_DestinyKioskItem::OAIDestiny_Components_Kiosks_DestinyKioskItem() {
    this->initializeModel();
}

OAIDestiny_Components_Kiosks_DestinyKioskItem::~OAIDestiny_Components_Kiosks_DestinyKioskItem() {}

void OAIDestiny_Components_Kiosks_DestinyKioskItem::initializeModel() {

    m_can_acquire_isSet = false;
    m_can_acquire_isValid = false;

    m_failure_indexes_isSet = false;
    m_failure_indexes_isValid = false;

    m_flavor_objective_isSet = false;
    m_flavor_objective_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;
}

void OAIDestiny_Components_Kiosks_DestinyKioskItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Components_Kiosks_DestinyKioskItem::fromJsonObject(QJsonObject json) {

    m_can_acquire_isValid = ::OpenAPI::fromJsonValue(m_can_acquire, json[QString("canAcquire")]);
    m_can_acquire_isSet = !json[QString("canAcquire")].isNull() && m_can_acquire_isValid;

    m_failure_indexes_isValid = ::OpenAPI::fromJsonValue(m_failure_indexes, json[QString("failureIndexes")]);
    m_failure_indexes_isSet = !json[QString("failureIndexes")].isNull() && m_failure_indexes_isValid;

    m_flavor_objective_isValid = ::OpenAPI::fromJsonValue(m_flavor_objective, json[QString("flavorObjective")]);
    m_flavor_objective_isSet = !json[QString("flavorObjective")].isNull() && m_flavor_objective_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;
}

QString OAIDestiny_Components_Kiosks_DestinyKioskItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Components_Kiosks_DestinyKioskItem::asJsonObject() const {
    QJsonObject obj;
    if (m_can_acquire_isSet) {
        obj.insert(QString("canAcquire"), ::OpenAPI::toJsonValue(m_can_acquire));
    }
    if (m_failure_indexes.size() > 0) {
        obj.insert(QString("failureIndexes"), ::OpenAPI::toJsonValue(m_failure_indexes));
    }
    if (m_flavor_objective.isSet()) {
        obj.insert(QString("flavorObjective"), ::OpenAPI::toJsonValue(m_flavor_objective));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    return obj;
}

bool OAIDestiny_Components_Kiosks_DestinyKioskItem::isCanAcquire() const {
    return m_can_acquire;
}
void OAIDestiny_Components_Kiosks_DestinyKioskItem::setCanAcquire(const bool &can_acquire) {
    m_can_acquire = can_acquire;
    m_can_acquire_isSet = true;
}

bool OAIDestiny_Components_Kiosks_DestinyKioskItem::is_can_acquire_Set() const{
    return m_can_acquire_isSet;
}

bool OAIDestiny_Components_Kiosks_DestinyKioskItem::is_can_acquire_Valid() const{
    return m_can_acquire_isValid;
}

QList<qint32> OAIDestiny_Components_Kiosks_DestinyKioskItem::getFailureIndexes() const {
    return m_failure_indexes;
}
void OAIDestiny_Components_Kiosks_DestinyKioskItem::setFailureIndexes(const QList<qint32> &failure_indexes) {
    m_failure_indexes = failure_indexes;
    m_failure_indexes_isSet = true;
}

bool OAIDestiny_Components_Kiosks_DestinyKioskItem::is_failure_indexes_Set() const{
    return m_failure_indexes_isSet;
}

bool OAIDestiny_Components_Kiosks_DestinyKioskItem::is_failure_indexes_Valid() const{
    return m_failure_indexes_isValid;
}

OAIDestiny_Quests_DestinyObjectiveProgress OAIDestiny_Components_Kiosks_DestinyKioskItem::getFlavorObjective() const {
    return m_flavor_objective;
}
void OAIDestiny_Components_Kiosks_DestinyKioskItem::setFlavorObjective(const OAIDestiny_Quests_DestinyObjectiveProgress &flavor_objective) {
    m_flavor_objective = flavor_objective;
    m_flavor_objective_isSet = true;
}

bool OAIDestiny_Components_Kiosks_DestinyKioskItem::is_flavor_objective_Set() const{
    return m_flavor_objective_isSet;
}

bool OAIDestiny_Components_Kiosks_DestinyKioskItem::is_flavor_objective_Valid() const{
    return m_flavor_objective_isValid;
}

qint32 OAIDestiny_Components_Kiosks_DestinyKioskItem::getIndex() const {
    return m_index;
}
void OAIDestiny_Components_Kiosks_DestinyKioskItem::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Components_Kiosks_DestinyKioskItem::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Components_Kiosks_DestinyKioskItem::is_index_Valid() const{
    return m_index_isValid;
}

bool OAIDestiny_Components_Kiosks_DestinyKioskItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_acquire_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_indexes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_flavor_objective.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Components_Kiosks_DestinyKioskItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
