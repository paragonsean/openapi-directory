/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData() {
    this->initializeModel();
}

OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::~OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData() {}

void OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::initializeModel() {

    m_activity_details_isSet = false;
    m_activity_details_isValid = false;

    m_activity_was_started_from_beginning_isSet = false;
    m_activity_was_started_from_beginning_isValid = false;

    m_entries_isSet = false;
    m_entries_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_starting_phase_index_isSet = false;
    m_starting_phase_index_isValid = false;

    m_teams_isSet = false;
    m_teams_isValid = false;
}

void OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::fromJsonObject(QJsonObject json) {

    m_activity_details_isValid = ::OpenAPI::fromJsonValue(m_activity_details, json[QString("activityDetails")]);
    m_activity_details_isSet = !json[QString("activityDetails")].isNull() && m_activity_details_isValid;

    m_activity_was_started_from_beginning_isValid = ::OpenAPI::fromJsonValue(m_activity_was_started_from_beginning, json[QString("activityWasStartedFromBeginning")]);
    m_activity_was_started_from_beginning_isSet = !json[QString("activityWasStartedFromBeginning")].isNull() && m_activity_was_started_from_beginning_isValid;

    m_entries_isValid = ::OpenAPI::fromJsonValue(m_entries, json[QString("entries")]);
    m_entries_isSet = !json[QString("entries")].isNull() && m_entries_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_starting_phase_index_isValid = ::OpenAPI::fromJsonValue(m_starting_phase_index, json[QString("startingPhaseIndex")]);
    m_starting_phase_index_isSet = !json[QString("startingPhaseIndex")].isNull() && m_starting_phase_index_isValid;

    m_teams_isValid = ::OpenAPI::fromJsonValue(m_teams, json[QString("teams")]);
    m_teams_isSet = !json[QString("teams")].isNull() && m_teams_isValid;
}

QString OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_details.isSet()) {
        obj.insert(QString("activityDetails"), ::OpenAPI::toJsonValue(m_activity_details));
    }
    if (m_activity_was_started_from_beginning_isSet) {
        obj.insert(QString("activityWasStartedFromBeginning"), ::OpenAPI::toJsonValue(m_activity_was_started_from_beginning));
    }
    if (m_entries.size() > 0) {
        obj.insert(QString("entries"), ::OpenAPI::toJsonValue(m_entries));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_starting_phase_index_isSet) {
        obj.insert(QString("startingPhaseIndex"), ::OpenAPI::toJsonValue(m_starting_phase_index));
    }
    if (m_teams.size() > 0) {
        obj.insert(QString("teams"), ::OpenAPI::toJsonValue(m_teams));
    }
    return obj;
}

OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::getActivityDetails() const {
    return m_activity_details;
}
void OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::setActivityDetails(const OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity &activity_details) {
    m_activity_details = activity_details;
    m_activity_details_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::is_activity_details_Set() const{
    return m_activity_details_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::is_activity_details_Valid() const{
    return m_activity_details_isValid;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::isActivityWasStartedFromBeginning() const {
    return m_activity_was_started_from_beginning;
}
void OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::setActivityWasStartedFromBeginning(const bool &activity_was_started_from_beginning) {
    m_activity_was_started_from_beginning = activity_was_started_from_beginning;
    m_activity_was_started_from_beginning_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::is_activity_was_started_from_beginning_Set() const{
    return m_activity_was_started_from_beginning_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::is_activity_was_started_from_beginning_Valid() const{
    return m_activity_was_started_from_beginning_isValid;
}

QList<OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry> OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::getEntries() const {
    return m_entries;
}
void OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::setEntries(const QList<OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportEntry> &entries) {
    m_entries = entries;
    m_entries_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::is_entries_Set() const{
    return m_entries_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::is_entries_Valid() const{
    return m_entries_isValid;
}

QDateTime OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::getPeriod() const {
    return m_period;
}
void OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::setPeriod(const QDateTime &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::is_period_Set() const{
    return m_period_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::is_period_Valid() const{
    return m_period_isValid;
}

qint32 OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::getStartingPhaseIndex() const {
    return m_starting_phase_index;
}
void OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::setStartingPhaseIndex(const qint32 &starting_phase_index) {
    m_starting_phase_index = starting_phase_index;
    m_starting_phase_index_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::is_starting_phase_index_Set() const{
    return m_starting_phase_index_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::is_starting_phase_index_Valid() const{
    return m_starting_phase_index_isValid;
}

QList<OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportTeamEntry> OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::getTeams() const {
    return m_teams;
}
void OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::setTeams(const QList<OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportTeamEntry> &teams) {
    m_teams = teams;
    m_teams_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::is_teams_Set() const{
    return m_teams_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::is_teams_Valid() const{
    return m_teams_isValid;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_was_started_from_beginning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starting_phase_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teams.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_HistoricalStats_DestinyPostGameCarnageReportData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
