/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_Items_DestinyItemPlugDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::OAIDestiny_Definitions_Items_DestinyItemPlugDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::OAIDestiny_Definitions_Items_DestinyItemPlugDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::~OAIDestiny_Definitions_Items_DestinyItemPlugDefinition() {}

void OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::initializeModel() {

    m_alternate_plug_style_isSet = false;
    m_alternate_plug_style_isValid = false;

    m_alternate_ui_plug_label_isSet = false;
    m_alternate_ui_plug_label_isValid = false;

    m_enabled_material_requirement_hash_isSet = false;
    m_enabled_material_requirement_hash_isValid = false;

    m_enabled_rules_isSet = false;
    m_enabled_rules_isValid = false;

    m_energy_capacity_isSet = false;
    m_energy_capacity_isValid = false;

    m_energy_cost_isSet = false;
    m_energy_cost_isValid = false;

    m_insertion_material_requirement_hash_isSet = false;
    m_insertion_material_requirement_hash_isValid = false;

    m_insertion_rules_isSet = false;
    m_insertion_rules_isValid = false;

    m_is_dummy_plug_isSet = false;
    m_is_dummy_plug_isValid = false;

    m_on_action_recreate_self_isSet = false;
    m_on_action_recreate_self_isValid = false;

    m_parent_item_override_isSet = false;
    m_parent_item_override_isValid = false;

    m_plug_availability_isSet = false;
    m_plug_availability_isValid = false;

    m_plug_category_hash_isSet = false;
    m_plug_category_hash_isValid = false;

    m_plug_category_identifier_isSet = false;
    m_plug_category_identifier_isValid = false;

    m_plug_style_isSet = false;
    m_plug_style_isValid = false;

    m_preview_item_override_hash_isSet = false;
    m_preview_item_override_hash_isValid = false;

    m_ui_plug_label_isSet = false;
    m_ui_plug_label_isValid = false;
}

void OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::fromJsonObject(QJsonObject json) {

    m_alternate_plug_style_isValid = ::OpenAPI::fromJsonValue(m_alternate_plug_style, json[QString("alternatePlugStyle")]);
    m_alternate_plug_style_isSet = !json[QString("alternatePlugStyle")].isNull() && m_alternate_plug_style_isValid;

    m_alternate_ui_plug_label_isValid = ::OpenAPI::fromJsonValue(m_alternate_ui_plug_label, json[QString("alternateUiPlugLabel")]);
    m_alternate_ui_plug_label_isSet = !json[QString("alternateUiPlugLabel")].isNull() && m_alternate_ui_plug_label_isValid;

    m_enabled_material_requirement_hash_isValid = ::OpenAPI::fromJsonValue(m_enabled_material_requirement_hash, json[QString("enabledMaterialRequirementHash")]);
    m_enabled_material_requirement_hash_isSet = !json[QString("enabledMaterialRequirementHash")].isNull() && m_enabled_material_requirement_hash_isValid;

    m_enabled_rules_isValid = ::OpenAPI::fromJsonValue(m_enabled_rules, json[QString("enabledRules")]);
    m_enabled_rules_isSet = !json[QString("enabledRules")].isNull() && m_enabled_rules_isValid;

    m_energy_capacity_isValid = ::OpenAPI::fromJsonValue(m_energy_capacity, json[QString("energyCapacity")]);
    m_energy_capacity_isSet = !json[QString("energyCapacity")].isNull() && m_energy_capacity_isValid;

    m_energy_cost_isValid = ::OpenAPI::fromJsonValue(m_energy_cost, json[QString("energyCost")]);
    m_energy_cost_isSet = !json[QString("energyCost")].isNull() && m_energy_cost_isValid;

    m_insertion_material_requirement_hash_isValid = ::OpenAPI::fromJsonValue(m_insertion_material_requirement_hash, json[QString("insertionMaterialRequirementHash")]);
    m_insertion_material_requirement_hash_isSet = !json[QString("insertionMaterialRequirementHash")].isNull() && m_insertion_material_requirement_hash_isValid;

    m_insertion_rules_isValid = ::OpenAPI::fromJsonValue(m_insertion_rules, json[QString("insertionRules")]);
    m_insertion_rules_isSet = !json[QString("insertionRules")].isNull() && m_insertion_rules_isValid;

    m_is_dummy_plug_isValid = ::OpenAPI::fromJsonValue(m_is_dummy_plug, json[QString("isDummyPlug")]);
    m_is_dummy_plug_isSet = !json[QString("isDummyPlug")].isNull() && m_is_dummy_plug_isValid;

    m_on_action_recreate_self_isValid = ::OpenAPI::fromJsonValue(m_on_action_recreate_self, json[QString("onActionRecreateSelf")]);
    m_on_action_recreate_self_isSet = !json[QString("onActionRecreateSelf")].isNull() && m_on_action_recreate_self_isValid;

    m_parent_item_override_isValid = ::OpenAPI::fromJsonValue(m_parent_item_override, json[QString("parentItemOverride")]);
    m_parent_item_override_isSet = !json[QString("parentItemOverride")].isNull() && m_parent_item_override_isValid;

    m_plug_availability_isValid = ::OpenAPI::fromJsonValue(m_plug_availability, json[QString("plugAvailability")]);
    m_plug_availability_isSet = !json[QString("plugAvailability")].isNull() && m_plug_availability_isValid;

    m_plug_category_hash_isValid = ::OpenAPI::fromJsonValue(m_plug_category_hash, json[QString("plugCategoryHash")]);
    m_plug_category_hash_isSet = !json[QString("plugCategoryHash")].isNull() && m_plug_category_hash_isValid;

    m_plug_category_identifier_isValid = ::OpenAPI::fromJsonValue(m_plug_category_identifier, json[QString("plugCategoryIdentifier")]);
    m_plug_category_identifier_isSet = !json[QString("plugCategoryIdentifier")].isNull() && m_plug_category_identifier_isValid;

    m_plug_style_isValid = ::OpenAPI::fromJsonValue(m_plug_style, json[QString("plugStyle")]);
    m_plug_style_isSet = !json[QString("plugStyle")].isNull() && m_plug_style_isValid;

    m_preview_item_override_hash_isValid = ::OpenAPI::fromJsonValue(m_preview_item_override_hash, json[QString("previewItemOverrideHash")]);
    m_preview_item_override_hash_isSet = !json[QString("previewItemOverrideHash")].isNull() && m_preview_item_override_hash_isValid;

    m_ui_plug_label_isValid = ::OpenAPI::fromJsonValue(m_ui_plug_label, json[QString("uiPlugLabel")]);
    m_ui_plug_label_isSet = !json[QString("uiPlugLabel")].isNull() && m_ui_plug_label_isValid;
}

QString OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_alternate_plug_style_isSet) {
        obj.insert(QString("alternatePlugStyle"), ::OpenAPI::toJsonValue(m_alternate_plug_style));
    }
    if (m_alternate_ui_plug_label_isSet) {
        obj.insert(QString("alternateUiPlugLabel"), ::OpenAPI::toJsonValue(m_alternate_ui_plug_label));
    }
    if (m_enabled_material_requirement_hash_isSet) {
        obj.insert(QString("enabledMaterialRequirementHash"), ::OpenAPI::toJsonValue(m_enabled_material_requirement_hash));
    }
    if (m_enabled_rules.size() > 0) {
        obj.insert(QString("enabledRules"), ::OpenAPI::toJsonValue(m_enabled_rules));
    }
    if (m_energy_capacity.isSet()) {
        obj.insert(QString("energyCapacity"), ::OpenAPI::toJsonValue(m_energy_capacity));
    }
    if (m_energy_cost.isSet()) {
        obj.insert(QString("energyCost"), ::OpenAPI::toJsonValue(m_energy_cost));
    }
    if (m_insertion_material_requirement_hash_isSet) {
        obj.insert(QString("insertionMaterialRequirementHash"), ::OpenAPI::toJsonValue(m_insertion_material_requirement_hash));
    }
    if (m_insertion_rules.size() > 0) {
        obj.insert(QString("insertionRules"), ::OpenAPI::toJsonValue(m_insertion_rules));
    }
    if (m_is_dummy_plug_isSet) {
        obj.insert(QString("isDummyPlug"), ::OpenAPI::toJsonValue(m_is_dummy_plug));
    }
    if (m_on_action_recreate_self_isSet) {
        obj.insert(QString("onActionRecreateSelf"), ::OpenAPI::toJsonValue(m_on_action_recreate_self));
    }
    if (m_parent_item_override.isSet()) {
        obj.insert(QString("parentItemOverride"), ::OpenAPI::toJsonValue(m_parent_item_override));
    }
    if (m_plug_availability_isSet) {
        obj.insert(QString("plugAvailability"), ::OpenAPI::toJsonValue(m_plug_availability));
    }
    if (m_plug_category_hash_isSet) {
        obj.insert(QString("plugCategoryHash"), ::OpenAPI::toJsonValue(m_plug_category_hash));
    }
    if (m_plug_category_identifier_isSet) {
        obj.insert(QString("plugCategoryIdentifier"), ::OpenAPI::toJsonValue(m_plug_category_identifier));
    }
    if (m_plug_style_isSet) {
        obj.insert(QString("plugStyle"), ::OpenAPI::toJsonValue(m_plug_style));
    }
    if (m_preview_item_override_hash_isSet) {
        obj.insert(QString("previewItemOverrideHash"), ::OpenAPI::toJsonValue(m_preview_item_override_hash));
    }
    if (m_ui_plug_label_isSet) {
        obj.insert(QString("uiPlugLabel"), ::OpenAPI::toJsonValue(m_ui_plug_label));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::getAlternatePlugStyle() const {
    return m_alternate_plug_style;
}
void OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::setAlternatePlugStyle(const qint32 &alternate_plug_style) {
    m_alternate_plug_style = alternate_plug_style;
    m_alternate_plug_style_isSet = true;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_alternate_plug_style_Set() const{
    return m_alternate_plug_style_isSet;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_alternate_plug_style_Valid() const{
    return m_alternate_plug_style_isValid;
}

QString OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::getAlternateUiPlugLabel() const {
    return m_alternate_ui_plug_label;
}
void OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::setAlternateUiPlugLabel(const QString &alternate_ui_plug_label) {
    m_alternate_ui_plug_label = alternate_ui_plug_label;
    m_alternate_ui_plug_label_isSet = true;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_alternate_ui_plug_label_Set() const{
    return m_alternate_ui_plug_label_isSet;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_alternate_ui_plug_label_Valid() const{
    return m_alternate_ui_plug_label_isValid;
}

qint32 OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::getEnabledMaterialRequirementHash() const {
    return m_enabled_material_requirement_hash;
}
void OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::setEnabledMaterialRequirementHash(const qint32 &enabled_material_requirement_hash) {
    m_enabled_material_requirement_hash = enabled_material_requirement_hash;
    m_enabled_material_requirement_hash_isSet = true;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_enabled_material_requirement_hash_Set() const{
    return m_enabled_material_requirement_hash_isSet;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_enabled_material_requirement_hash_Valid() const{
    return m_enabled_material_requirement_hash_isValid;
}

QList<OAIDestiny_Definitions_Items_DestinyPlugRuleDefinition> OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::getEnabledRules() const {
    return m_enabled_rules;
}
void OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::setEnabledRules(const QList<OAIDestiny_Definitions_Items_DestinyPlugRuleDefinition> &enabled_rules) {
    m_enabled_rules = enabled_rules;
    m_enabled_rules_isSet = true;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_enabled_rules_Set() const{
    return m_enabled_rules_isSet;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_enabled_rules_Valid() const{
    return m_enabled_rules_isValid;
}

OAIDestiny_Definitions_Items_DestinyEnergyCapacityEntry OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::getEnergyCapacity() const {
    return m_energy_capacity;
}
void OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::setEnergyCapacity(const OAIDestiny_Definitions_Items_DestinyEnergyCapacityEntry &energy_capacity) {
    m_energy_capacity = energy_capacity;
    m_energy_capacity_isSet = true;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_energy_capacity_Set() const{
    return m_energy_capacity_isSet;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_energy_capacity_Valid() const{
    return m_energy_capacity_isValid;
}

OAIDestiny_Definitions_Items_DestinyEnergyCostEntry OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::getEnergyCost() const {
    return m_energy_cost;
}
void OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::setEnergyCost(const OAIDestiny_Definitions_Items_DestinyEnergyCostEntry &energy_cost) {
    m_energy_cost = energy_cost;
    m_energy_cost_isSet = true;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_energy_cost_Set() const{
    return m_energy_cost_isSet;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_energy_cost_Valid() const{
    return m_energy_cost_isValid;
}

qint32 OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::getInsertionMaterialRequirementHash() const {
    return m_insertion_material_requirement_hash;
}
void OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::setInsertionMaterialRequirementHash(const qint32 &insertion_material_requirement_hash) {
    m_insertion_material_requirement_hash = insertion_material_requirement_hash;
    m_insertion_material_requirement_hash_isSet = true;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_insertion_material_requirement_hash_Set() const{
    return m_insertion_material_requirement_hash_isSet;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_insertion_material_requirement_hash_Valid() const{
    return m_insertion_material_requirement_hash_isValid;
}

QList<OAIDestiny_Definitions_Items_DestinyPlugRuleDefinition> OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::getInsertionRules() const {
    return m_insertion_rules;
}
void OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::setInsertionRules(const QList<OAIDestiny_Definitions_Items_DestinyPlugRuleDefinition> &insertion_rules) {
    m_insertion_rules = insertion_rules;
    m_insertion_rules_isSet = true;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_insertion_rules_Set() const{
    return m_insertion_rules_isSet;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_insertion_rules_Valid() const{
    return m_insertion_rules_isValid;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::isIsDummyPlug() const {
    return m_is_dummy_plug;
}
void OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::setIsDummyPlug(const bool &is_dummy_plug) {
    m_is_dummy_plug = is_dummy_plug;
    m_is_dummy_plug_isSet = true;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_is_dummy_plug_Set() const{
    return m_is_dummy_plug_isSet;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_is_dummy_plug_Valid() const{
    return m_is_dummy_plug_isValid;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::isOnActionRecreateSelf() const {
    return m_on_action_recreate_self;
}
void OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::setOnActionRecreateSelf(const bool &on_action_recreate_self) {
    m_on_action_recreate_self = on_action_recreate_self;
    m_on_action_recreate_self_isSet = true;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_on_action_recreate_self_Set() const{
    return m_on_action_recreate_self_isSet;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_on_action_recreate_self_Valid() const{
    return m_on_action_recreate_self_isValid;
}

OAIDestiny_Definitions_Items_DestinyParentItemOverride OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::getParentItemOverride() const {
    return m_parent_item_override;
}
void OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::setParentItemOverride(const OAIDestiny_Definitions_Items_DestinyParentItemOverride &parent_item_override) {
    m_parent_item_override = parent_item_override;
    m_parent_item_override_isSet = true;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_parent_item_override_Set() const{
    return m_parent_item_override_isSet;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_parent_item_override_Valid() const{
    return m_parent_item_override_isValid;
}

qint32 OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::getPlugAvailability() const {
    return m_plug_availability;
}
void OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::setPlugAvailability(const qint32 &plug_availability) {
    m_plug_availability = plug_availability;
    m_plug_availability_isSet = true;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_plug_availability_Set() const{
    return m_plug_availability_isSet;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_plug_availability_Valid() const{
    return m_plug_availability_isValid;
}

qint32 OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::getPlugCategoryHash() const {
    return m_plug_category_hash;
}
void OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::setPlugCategoryHash(const qint32 &plug_category_hash) {
    m_plug_category_hash = plug_category_hash;
    m_plug_category_hash_isSet = true;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_plug_category_hash_Set() const{
    return m_plug_category_hash_isSet;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_plug_category_hash_Valid() const{
    return m_plug_category_hash_isValid;
}

QString OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::getPlugCategoryIdentifier() const {
    return m_plug_category_identifier;
}
void OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::setPlugCategoryIdentifier(const QString &plug_category_identifier) {
    m_plug_category_identifier = plug_category_identifier;
    m_plug_category_identifier_isSet = true;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_plug_category_identifier_Set() const{
    return m_plug_category_identifier_isSet;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_plug_category_identifier_Valid() const{
    return m_plug_category_identifier_isValid;
}

qint32 OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::getPlugStyle() const {
    return m_plug_style;
}
void OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::setPlugStyle(const qint32 &plug_style) {
    m_plug_style = plug_style;
    m_plug_style_isSet = true;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_plug_style_Set() const{
    return m_plug_style_isSet;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_plug_style_Valid() const{
    return m_plug_style_isValid;
}

qint32 OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::getPreviewItemOverrideHash() const {
    return m_preview_item_override_hash;
}
void OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::setPreviewItemOverrideHash(const qint32 &preview_item_override_hash) {
    m_preview_item_override_hash = preview_item_override_hash;
    m_preview_item_override_hash_isSet = true;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_preview_item_override_hash_Set() const{
    return m_preview_item_override_hash_isSet;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_preview_item_override_hash_Valid() const{
    return m_preview_item_override_hash_isValid;
}

QString OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::getUiPlugLabel() const {
    return m_ui_plug_label;
}
void OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::setUiPlugLabel(const QString &ui_plug_label) {
    m_ui_plug_label = ui_plug_label;
    m_ui_plug_label_isSet = true;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_ui_plug_label_Set() const{
    return m_ui_plug_label_isSet;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::is_ui_plug_label_Valid() const{
    return m_ui_plug_label_isValid;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternate_plug_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_ui_plug_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_material_requirement_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_energy_capacity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_energy_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insertion_material_requirement_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insertion_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_dummy_plug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_action_recreate_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_item_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plug_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plug_category_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plug_category_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plug_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_item_override_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ui_plug_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_Items_DestinyItemPlugDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
