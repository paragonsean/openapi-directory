/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyItemQualityBlockDefinition.h
 *
 * An item&#39;s \&quot;Quality\&quot; determines its calculated stats. The Level at which the item spawns is combined with its \&quot;qualityLevel\&quot; along with some additional calculations to determine the value of those stats.  In Destiny 2, most items don&#39;t have default item levels and quality, making this property less useful: these apparently are almost always determined by the complex mechanisms of the Reward system rather than statically. They are still provided here in case they are still useful for people. This also contains some information about Infusion.
 */

#ifndef OAIDestiny_Definitions_DestinyItemQualityBlockDefinition_H
#define OAIDestiny_Definitions_DestinyItemQualityBlockDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_DestinyItemVersionDefinition.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_DestinyItemVersionDefinition;

class OAIDestiny_Definitions_DestinyItemQualityBlockDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyItemQualityBlockDefinition();
    OAIDestiny_Definitions_DestinyItemQualityBlockDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyItemQualityBlockDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCurrentVersion() const;
    void setCurrentVersion(const qint32 &current_version);
    bool is_current_version_Set() const;
    bool is_current_version_Valid() const;

    QList<QString> getDisplayVersionWatermarkIcons() const;
    void setDisplayVersionWatermarkIcons(const QList<QString> &display_version_watermark_icons);
    bool is_display_version_watermark_icons_Set() const;
    bool is_display_version_watermark_icons_Valid() const;

    qint32 getInfusionCategoryHash() const;
    void setInfusionCategoryHash(const qint32 &infusion_category_hash);
    bool is_infusion_category_hash_Set() const;
    bool is_infusion_category_hash_Valid() const;

    QList<qint32> getInfusionCategoryHashes() const;
    void setInfusionCategoryHashes(const QList<qint32> &infusion_category_hashes);
    bool is_infusion_category_hashes_Set() const;
    bool is_infusion_category_hashes_Valid() const;

    QString getInfusionCategoryName() const;
    void setInfusionCategoryName(const QString &infusion_category_name);
    bool is_infusion_category_name_Set() const;
    bool is_infusion_category_name_Valid() const;

    QList<qint32> getItemLevels() const;
    void setItemLevels(const QList<qint32> &item_levels);
    bool is_item_levels_Set() const;
    bool is_item_levels_Valid() const;

    qint32 getProgressionLevelRequirementHash() const;
    void setProgressionLevelRequirementHash(const qint32 &progression_level_requirement_hash);
    bool is_progression_level_requirement_hash_Set() const;
    bool is_progression_level_requirement_hash_Valid() const;

    qint32 getQualityLevel() const;
    void setQualityLevel(const qint32 &quality_level);
    bool is_quality_level_Set() const;
    bool is_quality_level_Valid() const;

    QList<OAIDestiny_Definitions_DestinyItemVersionDefinition> getVersions() const;
    void setVersions(const QList<OAIDestiny_Definitions_DestinyItemVersionDefinition> &versions);
    bool is_versions_Set() const;
    bool is_versions_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_current_version;
    bool m_current_version_isSet;
    bool m_current_version_isValid;

    QList<QString> m_display_version_watermark_icons;
    bool m_display_version_watermark_icons_isSet;
    bool m_display_version_watermark_icons_isValid;

    qint32 m_infusion_category_hash;
    bool m_infusion_category_hash_isSet;
    bool m_infusion_category_hash_isValid;

    QList<qint32> m_infusion_category_hashes;
    bool m_infusion_category_hashes_isSet;
    bool m_infusion_category_hashes_isValid;

    QString m_infusion_category_name;
    bool m_infusion_category_name_isSet;
    bool m_infusion_category_name_isValid;

    QList<qint32> m_item_levels;
    bool m_item_levels_isSet;
    bool m_item_levels_isValid;

    qint32 m_progression_level_requirement_hash;
    bool m_progression_level_requirement_hash_isSet;
    bool m_progression_level_requirement_hash_isValid;

    qint32 m_quality_level;
    bool m_quality_level_isSet;
    bool m_quality_level_isValid;

    QList<OAIDestiny_Definitions_DestinyItemVersionDefinition> m_versions;
    bool m_versions_isSet;
    bool m_versions_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyItemQualityBlockDefinition)

#endif // OAIDestiny_Definitions_DestinyItemQualityBlockDefinition_H
