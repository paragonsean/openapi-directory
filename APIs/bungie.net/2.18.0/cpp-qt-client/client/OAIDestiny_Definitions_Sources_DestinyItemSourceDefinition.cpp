/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::~OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition() {}

void OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::initializeModel() {

    m_computed_stats_isSet = false;
    m_computed_stats_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_max_level_required_isSet = false;
    m_max_level_required_isValid = false;

    m_max_quality_isSet = false;
    m_max_quality_isValid = false;

    m_min_level_required_isSet = false;
    m_min_level_required_isValid = false;

    m_min_quality_isSet = false;
    m_min_quality_isValid = false;

    m_source_hashes_isSet = false;
    m_source_hashes_isValid = false;
}

void OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::fromJsonObject(QJsonObject json) {

    m_computed_stats_isValid = ::OpenAPI::fromJsonValue(m_computed_stats, json[QString("computedStats")]);
    m_computed_stats_isSet = !json[QString("computedStats")].isNull() && m_computed_stats_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_max_level_required_isValid = ::OpenAPI::fromJsonValue(m_max_level_required, json[QString("maxLevelRequired")]);
    m_max_level_required_isSet = !json[QString("maxLevelRequired")].isNull() && m_max_level_required_isValid;

    m_max_quality_isValid = ::OpenAPI::fromJsonValue(m_max_quality, json[QString("maxQuality")]);
    m_max_quality_isSet = !json[QString("maxQuality")].isNull() && m_max_quality_isValid;

    m_min_level_required_isValid = ::OpenAPI::fromJsonValue(m_min_level_required, json[QString("minLevelRequired")]);
    m_min_level_required_isSet = !json[QString("minLevelRequired")].isNull() && m_min_level_required_isValid;

    m_min_quality_isValid = ::OpenAPI::fromJsonValue(m_min_quality, json[QString("minQuality")]);
    m_min_quality_isSet = !json[QString("minQuality")].isNull() && m_min_quality_isValid;

    m_source_hashes_isValid = ::OpenAPI::fromJsonValue(m_source_hashes, json[QString("sourceHashes")]);
    m_source_hashes_isSet = !json[QString("sourceHashes")].isNull() && m_source_hashes_isValid;
}

QString OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_computed_stats.size() > 0) {
        obj.insert(QString("computedStats"), ::OpenAPI::toJsonValue(m_computed_stats));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_max_level_required_isSet) {
        obj.insert(QString("maxLevelRequired"), ::OpenAPI::toJsonValue(m_max_level_required));
    }
    if (m_max_quality_isSet) {
        obj.insert(QString("maxQuality"), ::OpenAPI::toJsonValue(m_max_quality));
    }
    if (m_min_level_required_isSet) {
        obj.insert(QString("minLevelRequired"), ::OpenAPI::toJsonValue(m_min_level_required));
    }
    if (m_min_quality_isSet) {
        obj.insert(QString("minQuality"), ::OpenAPI::toJsonValue(m_min_quality));
    }
    if (m_source_hashes.size() > 0) {
        obj.insert(QString("sourceHashes"), ::OpenAPI::toJsonValue(m_source_hashes));
    }
    return obj;
}

QMap<QString, OAIDestiny_Definitions_DestinyInventoryItemStatDefinition> OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::getComputedStats() const {
    return m_computed_stats;
}
void OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::setComputedStats(const QMap<QString, OAIDestiny_Definitions_DestinyInventoryItemStatDefinition> &computed_stats) {
    m_computed_stats = computed_stats;
    m_computed_stats_isSet = true;
}

bool OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::is_computed_stats_Set() const{
    return m_computed_stats_isSet;
}

bool OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::is_computed_stats_Valid() const{
    return m_computed_stats_isValid;
}

qint32 OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::getLevel() const {
    return m_level;
}
void OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::setLevel(const qint32 &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::is_level_Set() const{
    return m_level_isSet;
}

bool OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::is_level_Valid() const{
    return m_level_isValid;
}

qint32 OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::getMaxLevelRequired() const {
    return m_max_level_required;
}
void OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::setMaxLevelRequired(const qint32 &max_level_required) {
    m_max_level_required = max_level_required;
    m_max_level_required_isSet = true;
}

bool OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::is_max_level_required_Set() const{
    return m_max_level_required_isSet;
}

bool OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::is_max_level_required_Valid() const{
    return m_max_level_required_isValid;
}

qint32 OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::getMaxQuality() const {
    return m_max_quality;
}
void OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::setMaxQuality(const qint32 &max_quality) {
    m_max_quality = max_quality;
    m_max_quality_isSet = true;
}

bool OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::is_max_quality_Set() const{
    return m_max_quality_isSet;
}

bool OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::is_max_quality_Valid() const{
    return m_max_quality_isValid;
}

qint32 OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::getMinLevelRequired() const {
    return m_min_level_required;
}
void OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::setMinLevelRequired(const qint32 &min_level_required) {
    m_min_level_required = min_level_required;
    m_min_level_required_isSet = true;
}

bool OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::is_min_level_required_Set() const{
    return m_min_level_required_isSet;
}

bool OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::is_min_level_required_Valid() const{
    return m_min_level_required_isValid;
}

qint32 OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::getMinQuality() const {
    return m_min_quality;
}
void OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::setMinQuality(const qint32 &min_quality) {
    m_min_quality = min_quality;
    m_min_quality_isSet = true;
}

bool OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::is_min_quality_Set() const{
    return m_min_quality_isSet;
}

bool OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::is_min_quality_Valid() const{
    return m_min_quality_isValid;
}

QList<qint32> OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::getSourceHashes() const {
    return m_source_hashes;
}
void OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::setSourceHashes(const QList<qint32> &source_hashes) {
    m_source_hashes = source_hashes;
    m_source_hashes_isSet = true;
}

bool OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::is_source_hashes_Set() const{
    return m_source_hashes_isSet;
}

bool OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::is_source_hashes_Valid() const{
    return m_source_hashes_isValid;
}

bool OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computed_stats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_level_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_quality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_level_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_quality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
