/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrending_TrendingEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrending_TrendingEntry::OAITrending_TrendingEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrending_TrendingEntry::OAITrending_TrendingEntry() {
    this->initializeModel();
}

OAITrending_TrendingEntry::~OAITrending_TrendingEntry() {}

void OAITrending_TrendingEntry::initializeModel() {

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_feature_image_isSet = false;
    m_feature_image_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_is_featured_isSet = false;
    m_is_featured_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_mp4_video_isSet = false;
    m_mp4_video_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_tagline_isSet = false;
    m_tagline_isValid = false;

    m_webm_video_isSet = false;
    m_webm_video_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAITrending_TrendingEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrending_TrendingEntry::fromJsonObject(QJsonObject json) {

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_feature_image_isValid = ::OpenAPI::fromJsonValue(m_feature_image, json[QString("featureImage")]);
    m_feature_image_isSet = !json[QString("featureImage")].isNull() && m_feature_image_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_is_featured_isValid = ::OpenAPI::fromJsonValue(m_is_featured, json[QString("isFeatured")]);
    m_is_featured_isSet = !json[QString("isFeatured")].isNull() && m_is_featured_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_mp4_video_isValid = ::OpenAPI::fromJsonValue(m_mp4_video, json[QString("mp4Video")]);
    m_mp4_video_isSet = !json[QString("mp4Video")].isNull() && m_mp4_video_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_tagline_isValid = ::OpenAPI::fromJsonValue(m_tagline, json[QString("tagline")]);
    m_tagline_isSet = !json[QString("tagline")].isNull() && m_tagline_isValid;

    m_webm_video_isValid = ::OpenAPI::fromJsonValue(m_webm_video, json[QString("webmVideo")]);
    m_webm_video_isSet = !json[QString("webmVideo")].isNull() && m_webm_video_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAITrending_TrendingEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrending_TrendingEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_feature_image_isSet) {
        obj.insert(QString("featureImage"), ::OpenAPI::toJsonValue(m_feature_image));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_is_featured_isSet) {
        obj.insert(QString("isFeatured"), ::OpenAPI::toJsonValue(m_is_featured));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_mp4_video_isSet) {
        obj.insert(QString("mp4Video"), ::OpenAPI::toJsonValue(m_mp4_video));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_tagline_isSet) {
        obj.insert(QString("tagline"), ::OpenAPI::toJsonValue(m_tagline));
    }
    if (m_webm_video_isSet) {
        obj.insert(QString("webmVideo"), ::OpenAPI::toJsonValue(m_webm_video));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QDateTime OAITrending_TrendingEntry::getCreationDate() const {
    return m_creation_date;
}
void OAITrending_TrendingEntry::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAITrending_TrendingEntry::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAITrending_TrendingEntry::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAITrending_TrendingEntry::getDisplayName() const {
    return m_display_name;
}
void OAITrending_TrendingEntry::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAITrending_TrendingEntry::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAITrending_TrendingEntry::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QDateTime OAITrending_TrendingEntry::getEndDate() const {
    return m_end_date;
}
void OAITrending_TrendingEntry::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAITrending_TrendingEntry::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAITrending_TrendingEntry::is_end_date_Valid() const{
    return m_end_date_isValid;
}

qint32 OAITrending_TrendingEntry::getEntityType() const {
    return m_entity_type;
}
void OAITrending_TrendingEntry::setEntityType(const qint32 &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAITrending_TrendingEntry::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAITrending_TrendingEntry::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAITrending_TrendingEntry::getFeatureImage() const {
    return m_feature_image;
}
void OAITrending_TrendingEntry::setFeatureImage(const QString &feature_image) {
    m_feature_image = feature_image;
    m_feature_image_isSet = true;
}

bool OAITrending_TrendingEntry::is_feature_image_Set() const{
    return m_feature_image_isSet;
}

bool OAITrending_TrendingEntry::is_feature_image_Valid() const{
    return m_feature_image_isValid;
}

QString OAITrending_TrendingEntry::getIdentifier() const {
    return m_identifier;
}
void OAITrending_TrendingEntry::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAITrending_TrendingEntry::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAITrending_TrendingEntry::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAITrending_TrendingEntry::getImage() const {
    return m_image;
}
void OAITrending_TrendingEntry::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAITrending_TrendingEntry::is_image_Set() const{
    return m_image_isSet;
}

bool OAITrending_TrendingEntry::is_image_Valid() const{
    return m_image_isValid;
}

bool OAITrending_TrendingEntry::isIsFeatured() const {
    return m_is_featured;
}
void OAITrending_TrendingEntry::setIsFeatured(const bool &is_featured) {
    m_is_featured = is_featured;
    m_is_featured_isSet = true;
}

bool OAITrending_TrendingEntry::is_is_featured_Set() const{
    return m_is_featured_isSet;
}

bool OAITrending_TrendingEntry::is_is_featured_Valid() const{
    return m_is_featured_isValid;
}

QList<OAITrending_TrendingEntry> OAITrending_TrendingEntry::getItems() const {
    return m_items;
}
void OAITrending_TrendingEntry::setItems(const QList<OAITrending_TrendingEntry> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAITrending_TrendingEntry::is_items_Set() const{
    return m_items_isSet;
}

bool OAITrending_TrendingEntry::is_items_Valid() const{
    return m_items_isValid;
}

QString OAITrending_TrendingEntry::getLink() const {
    return m_link;
}
void OAITrending_TrendingEntry::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAITrending_TrendingEntry::is_link_Set() const{
    return m_link_isSet;
}

bool OAITrending_TrendingEntry::is_link_Valid() const{
    return m_link_isValid;
}

QString OAITrending_TrendingEntry::getMp4Video() const {
    return m_mp4_video;
}
void OAITrending_TrendingEntry::setMp4Video(const QString &mp4_video) {
    m_mp4_video = mp4_video;
    m_mp4_video_isSet = true;
}

bool OAITrending_TrendingEntry::is_mp4_video_Set() const{
    return m_mp4_video_isSet;
}

bool OAITrending_TrendingEntry::is_mp4_video_Valid() const{
    return m_mp4_video_isValid;
}

QDateTime OAITrending_TrendingEntry::getStartDate() const {
    return m_start_date;
}
void OAITrending_TrendingEntry::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAITrending_TrendingEntry::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAITrending_TrendingEntry::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAITrending_TrendingEntry::getTagline() const {
    return m_tagline;
}
void OAITrending_TrendingEntry::setTagline(const QString &tagline) {
    m_tagline = tagline;
    m_tagline_isSet = true;
}

bool OAITrending_TrendingEntry::is_tagline_Set() const{
    return m_tagline_isSet;
}

bool OAITrending_TrendingEntry::is_tagline_Valid() const{
    return m_tagline_isValid;
}

QString OAITrending_TrendingEntry::getWebmVideo() const {
    return m_webm_video;
}
void OAITrending_TrendingEntry::setWebmVideo(const QString &webm_video) {
    m_webm_video = webm_video;
    m_webm_video_isSet = true;
}

bool OAITrending_TrendingEntry::is_webm_video_Set() const{
    return m_webm_video_isSet;
}

bool OAITrending_TrendingEntry::is_webm_video_Valid() const{
    return m_webm_video_isValid;
}

double OAITrending_TrendingEntry::getWeight() const {
    return m_weight;
}
void OAITrending_TrendingEntry::setWeight(const double &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAITrending_TrendingEntry::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAITrending_TrendingEntry::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAITrending_TrendingEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_featured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mp4_video_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tagline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webm_video_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrending_TrendingEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
