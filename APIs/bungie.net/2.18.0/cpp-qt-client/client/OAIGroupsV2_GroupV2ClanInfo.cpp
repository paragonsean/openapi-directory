/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupsV2_GroupV2ClanInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupsV2_GroupV2ClanInfo::OAIGroupsV2_GroupV2ClanInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupsV2_GroupV2ClanInfo::OAIGroupsV2_GroupV2ClanInfo() {
    this->initializeModel();
}

OAIGroupsV2_GroupV2ClanInfo::~OAIGroupsV2_GroupV2ClanInfo() {}

void OAIGroupsV2_GroupV2ClanInfo::initializeModel() {

    m_clan_banner_data_isSet = false;
    m_clan_banner_data_isValid = false;

    m_clan_callsign_isSet = false;
    m_clan_callsign_isValid = false;
}

void OAIGroupsV2_GroupV2ClanInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupsV2_GroupV2ClanInfo::fromJsonObject(QJsonObject json) {

    m_clan_banner_data_isValid = ::OpenAPI::fromJsonValue(m_clan_banner_data, json[QString("clanBannerData")]);
    m_clan_banner_data_isSet = !json[QString("clanBannerData")].isNull() && m_clan_banner_data_isValid;

    m_clan_callsign_isValid = ::OpenAPI::fromJsonValue(m_clan_callsign, json[QString("clanCallsign")]);
    m_clan_callsign_isSet = !json[QString("clanCallsign")].isNull() && m_clan_callsign_isValid;
}

QString OAIGroupsV2_GroupV2ClanInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupsV2_GroupV2ClanInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_clan_banner_data.isSet()) {
        obj.insert(QString("clanBannerData"), ::OpenAPI::toJsonValue(m_clan_banner_data));
    }
    if (m_clan_callsign_isSet) {
        obj.insert(QString("clanCallsign"), ::OpenAPI::toJsonValue(m_clan_callsign));
    }
    return obj;
}

OAIGroupsV2_ClanBanner OAIGroupsV2_GroupV2ClanInfo::getClanBannerData() const {
    return m_clan_banner_data;
}
void OAIGroupsV2_GroupV2ClanInfo::setClanBannerData(const OAIGroupsV2_ClanBanner &clan_banner_data) {
    m_clan_banner_data = clan_banner_data;
    m_clan_banner_data_isSet = true;
}

bool OAIGroupsV2_GroupV2ClanInfo::is_clan_banner_data_Set() const{
    return m_clan_banner_data_isSet;
}

bool OAIGroupsV2_GroupV2ClanInfo::is_clan_banner_data_Valid() const{
    return m_clan_banner_data_isValid;
}

QString OAIGroupsV2_GroupV2ClanInfo::getClanCallsign() const {
    return m_clan_callsign;
}
void OAIGroupsV2_GroupV2ClanInfo::setClanCallsign(const QString &clan_callsign) {
    m_clan_callsign = clan_callsign;
    m_clan_callsign_isSet = true;
}

bool OAIGroupsV2_GroupV2ClanInfo::is_clan_callsign_Set() const{
    return m_clan_callsign_isSet;
}

bool OAIGroupsV2_GroupV2ClanInfo::is_clan_callsign_Valid() const{
    return m_clan_callsign_isValid;
}

bool OAIGroupsV2_GroupV2ClanInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clan_banner_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clan_callsign_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupsV2_GroupV2ClanInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
