/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContent_Models_ContentTypeProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContent_Models_ContentTypeProperty::OAIContent_Models_ContentTypeProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContent_Models_ContentTypeProperty::OAIContent_Models_ContentTypeProperty() {
    this->initializeModel();
}

OAIContent_Models_ContentTypeProperty::~OAIContent_Models_ContentTypeProperty() {}

void OAIContent_Models_ContentTypeProperty::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_bind_to_property_isSet = false;
    m_bind_to_property_isValid = false;

    m_bound_regex_isSet = false;
    m_bound_regex_isValid = false;

    m_child_properties_isSet = false;
    m_child_properties_isValid = false;

    m_content_type_allowed_isSet = false;
    m_content_type_allowed_isValid = false;

    m_datatype_isSet = false;
    m_datatype_isValid = false;

    m_default_values_isSet = false;
    m_default_values_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_entitytype_isSet = false;
    m_entitytype_isValid = false;

    m_fallback_isSet = false;
    m_fallback_isValid = false;

    m_is_combo_isSet = false;
    m_is_combo_isValid = false;

    m_is_external_allowed_isSet = false;
    m_is_external_allowed_isValid = false;

    m_is_image_isSet = false;
    m_is_image_isValid = false;

    m_is_title_isSet = false;
    m_is_title_isValid = false;

    m_is_video_isSet = false;
    m_is_video_isValid = false;

    m_legal_content_types_isSet = false;
    m_legal_content_types_isValid = false;

    m_localizable_isSet = false;
    m_localizable_isValid = false;

    m_max_byte_length_isSet = false;
    m_max_byte_length_isValid = false;

    m_max_file_size_isSet = false;
    m_max_file_size_isValid = false;

    m_max_height_isSet = false;
    m_max_height_isValid = false;

    m_max_length_isSet = false;
    m_max_length_isValid = false;

    m_max_width_isSet = false;
    m_max_width_isValid = false;

    m_min_height_isSet = false;
    m_min_height_isValid = false;

    m_min_width_isSet = false;
    m_min_width_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_property_description_isSet = false;
    m_property_description_isValid = false;

    m_property_section_isSet = false;
    m_property_section_isValid = false;

    m_readable_name_isSet = false;
    m_readable_name_isValid = false;

    m_regexp_isSet = false;
    m_regexp_isValid = false;

    m_representation_selection_isSet = false;
    m_representation_selection_isValid = false;

    m_representation_validation_string_isSet = false;
    m_representation_validation_string_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_root_property_name_isSet = false;
    m_root_property_name_isValid = false;

    m_rss_attribute_isSet = false;
    m_rss_attribute_isValid = false;

    m_suppress_property_isSet = false;
    m_suppress_property_isValid = false;

    m_validate_as_isSet = false;
    m_validate_as_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_visible_isSet = false;
    m_visible_isValid = false;

    m_visible_dependency_isSet = false;
    m_visible_dependency_isValid = false;

    m_visible_on_isSet = false;
    m_visible_on_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIContent_Models_ContentTypeProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContent_Models_ContentTypeProperty::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_bind_to_property_isValid = ::OpenAPI::fromJsonValue(m_bind_to_property, json[QString("bindToProperty")]);
    m_bind_to_property_isSet = !json[QString("bindToProperty")].isNull() && m_bind_to_property_isValid;

    m_bound_regex_isValid = ::OpenAPI::fromJsonValue(m_bound_regex, json[QString("boundRegex")]);
    m_bound_regex_isSet = !json[QString("boundRegex")].isNull() && m_bound_regex_isValid;

    m_child_properties_isValid = ::OpenAPI::fromJsonValue(m_child_properties, json[QString("childProperties")]);
    m_child_properties_isSet = !json[QString("childProperties")].isNull() && m_child_properties_isValid;

    m_content_type_allowed_isValid = ::OpenAPI::fromJsonValue(m_content_type_allowed, json[QString("contentTypeAllowed")]);
    m_content_type_allowed_isSet = !json[QString("contentTypeAllowed")].isNull() && m_content_type_allowed_isValid;

    m_datatype_isValid = ::OpenAPI::fromJsonValue(m_datatype, json[QString("datatype")]);
    m_datatype_isSet = !json[QString("datatype")].isNull() && m_datatype_isValid;

    m_default_values_isValid = ::OpenAPI::fromJsonValue(m_default_values, json[QString("defaultValues")]);
    m_default_values_isSet = !json[QString("defaultValues")].isNull() && m_default_values_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_entitytype_isValid = ::OpenAPI::fromJsonValue(m_entitytype, json[QString("entitytype")]);
    m_entitytype_isSet = !json[QString("entitytype")].isNull() && m_entitytype_isValid;

    m_fallback_isValid = ::OpenAPI::fromJsonValue(m_fallback, json[QString("fallback")]);
    m_fallback_isSet = !json[QString("fallback")].isNull() && m_fallback_isValid;

    m_is_combo_isValid = ::OpenAPI::fromJsonValue(m_is_combo, json[QString("isCombo")]);
    m_is_combo_isSet = !json[QString("isCombo")].isNull() && m_is_combo_isValid;

    m_is_external_allowed_isValid = ::OpenAPI::fromJsonValue(m_is_external_allowed, json[QString("isExternalAllowed")]);
    m_is_external_allowed_isSet = !json[QString("isExternalAllowed")].isNull() && m_is_external_allowed_isValid;

    m_is_image_isValid = ::OpenAPI::fromJsonValue(m_is_image, json[QString("isImage")]);
    m_is_image_isSet = !json[QString("isImage")].isNull() && m_is_image_isValid;

    m_is_title_isValid = ::OpenAPI::fromJsonValue(m_is_title, json[QString("isTitle")]);
    m_is_title_isSet = !json[QString("isTitle")].isNull() && m_is_title_isValid;

    m_is_video_isValid = ::OpenAPI::fromJsonValue(m_is_video, json[QString("isVideo")]);
    m_is_video_isSet = !json[QString("isVideo")].isNull() && m_is_video_isValid;

    m_legal_content_types_isValid = ::OpenAPI::fromJsonValue(m_legal_content_types, json[QString("legalContentTypes")]);
    m_legal_content_types_isSet = !json[QString("legalContentTypes")].isNull() && m_legal_content_types_isValid;

    m_localizable_isValid = ::OpenAPI::fromJsonValue(m_localizable, json[QString("localizable")]);
    m_localizable_isSet = !json[QString("localizable")].isNull() && m_localizable_isValid;

    m_max_byte_length_isValid = ::OpenAPI::fromJsonValue(m_max_byte_length, json[QString("maxByteLength")]);
    m_max_byte_length_isSet = !json[QString("maxByteLength")].isNull() && m_max_byte_length_isValid;

    m_max_file_size_isValid = ::OpenAPI::fromJsonValue(m_max_file_size, json[QString("maxFileSize")]);
    m_max_file_size_isSet = !json[QString("maxFileSize")].isNull() && m_max_file_size_isValid;

    m_max_height_isValid = ::OpenAPI::fromJsonValue(m_max_height, json[QString("maxHeight")]);
    m_max_height_isSet = !json[QString("maxHeight")].isNull() && m_max_height_isValid;

    m_max_length_isValid = ::OpenAPI::fromJsonValue(m_max_length, json[QString("maxLength")]);
    m_max_length_isSet = !json[QString("maxLength")].isNull() && m_max_length_isValid;

    m_max_width_isValid = ::OpenAPI::fromJsonValue(m_max_width, json[QString("maxWidth")]);
    m_max_width_isSet = !json[QString("maxWidth")].isNull() && m_max_width_isValid;

    m_min_height_isValid = ::OpenAPI::fromJsonValue(m_min_height, json[QString("minHeight")]);
    m_min_height_isSet = !json[QString("minHeight")].isNull() && m_min_height_isValid;

    m_min_width_isValid = ::OpenAPI::fromJsonValue(m_min_width, json[QString("minWidth")]);
    m_min_width_isSet = !json[QString("minWidth")].isNull() && m_min_width_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_property_description_isValid = ::OpenAPI::fromJsonValue(m_property_description, json[QString("propertyDescription")]);
    m_property_description_isSet = !json[QString("propertyDescription")].isNull() && m_property_description_isValid;

    m_property_section_isValid = ::OpenAPI::fromJsonValue(m_property_section, json[QString("propertySection")]);
    m_property_section_isSet = !json[QString("propertySection")].isNull() && m_property_section_isValid;

    m_readable_name_isValid = ::OpenAPI::fromJsonValue(m_readable_name, json[QString("readableName")]);
    m_readable_name_isSet = !json[QString("readableName")].isNull() && m_readable_name_isValid;

    m_regexp_isValid = ::OpenAPI::fromJsonValue(m_regexp, json[QString("regexp")]);
    m_regexp_isSet = !json[QString("regexp")].isNull() && m_regexp_isValid;

    m_representation_selection_isValid = ::OpenAPI::fromJsonValue(m_representation_selection, json[QString("representationSelection")]);
    m_representation_selection_isSet = !json[QString("representationSelection")].isNull() && m_representation_selection_isValid;

    m_representation_validation_string_isValid = ::OpenAPI::fromJsonValue(m_representation_validation_string, json[QString("representationValidationString")]);
    m_representation_validation_string_isSet = !json[QString("representationValidationString")].isNull() && m_representation_validation_string_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_root_property_name_isValid = ::OpenAPI::fromJsonValue(m_root_property_name, json[QString("rootPropertyName")]);
    m_root_property_name_isSet = !json[QString("rootPropertyName")].isNull() && m_root_property_name_isValid;

    m_rss_attribute_isValid = ::OpenAPI::fromJsonValue(m_rss_attribute, json[QString("rssAttribute")]);
    m_rss_attribute_isSet = !json[QString("rssAttribute")].isNull() && m_rss_attribute_isValid;

    m_suppress_property_isValid = ::OpenAPI::fromJsonValue(m_suppress_property, json[QString("suppressProperty")]);
    m_suppress_property_isSet = !json[QString("suppressProperty")].isNull() && m_suppress_property_isValid;

    m_validate_as_isValid = ::OpenAPI::fromJsonValue(m_validate_as, json[QString("validateAs")]);
    m_validate_as_isSet = !json[QString("validateAs")].isNull() && m_validate_as_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_visible_isValid = ::OpenAPI::fromJsonValue(m_visible, json[QString("visible")]);
    m_visible_isSet = !json[QString("visible")].isNull() && m_visible_isValid;

    m_visible_dependency_isValid = ::OpenAPI::fromJsonValue(m_visible_dependency, json[QString("visibleDependency")]);
    m_visible_dependency_isSet = !json[QString("visibleDependency")].isNull() && m_visible_dependency_isValid;

    m_visible_on_isValid = ::OpenAPI::fromJsonValue(m_visible_on, json[QString("visibleOn")]);
    m_visible_on_isSet = !json[QString("visibleOn")].isNull() && m_visible_on_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIContent_Models_ContentTypeProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContent_Models_ContentTypeProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_bind_to_property_isSet) {
        obj.insert(QString("bindToProperty"), ::OpenAPI::toJsonValue(m_bind_to_property));
    }
    if (m_bound_regex_isSet) {
        obj.insert(QString("boundRegex"), ::OpenAPI::toJsonValue(m_bound_regex));
    }
    if (m_child_properties.size() > 0) {
        obj.insert(QString("childProperties"), ::OpenAPI::toJsonValue(m_child_properties));
    }
    if (m_content_type_allowed_isSet) {
        obj.insert(QString("contentTypeAllowed"), ::OpenAPI::toJsonValue(m_content_type_allowed));
    }
    if (m_datatype_isSet) {
        obj.insert(QString("datatype"), ::OpenAPI::toJsonValue(m_datatype));
    }
    if (m_default_values.size() > 0) {
        obj.insert(QString("defaultValues"), ::OpenAPI::toJsonValue(m_default_values));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_entitytype_isSet) {
        obj.insert(QString("entitytype"), ::OpenAPI::toJsonValue(m_entitytype));
    }
    if (m_fallback_isSet) {
        obj.insert(QString("fallback"), ::OpenAPI::toJsonValue(m_fallback));
    }
    if (m_is_combo_isSet) {
        obj.insert(QString("isCombo"), ::OpenAPI::toJsonValue(m_is_combo));
    }
    if (m_is_external_allowed_isSet) {
        obj.insert(QString("isExternalAllowed"), ::OpenAPI::toJsonValue(m_is_external_allowed));
    }
    if (m_is_image_isSet) {
        obj.insert(QString("isImage"), ::OpenAPI::toJsonValue(m_is_image));
    }
    if (m_is_title_isSet) {
        obj.insert(QString("isTitle"), ::OpenAPI::toJsonValue(m_is_title));
    }
    if (m_is_video_isSet) {
        obj.insert(QString("isVideo"), ::OpenAPI::toJsonValue(m_is_video));
    }
    if (m_legal_content_types.size() > 0) {
        obj.insert(QString("legalContentTypes"), ::OpenAPI::toJsonValue(m_legal_content_types));
    }
    if (m_localizable_isSet) {
        obj.insert(QString("localizable"), ::OpenAPI::toJsonValue(m_localizable));
    }
    if (m_max_byte_length_isSet) {
        obj.insert(QString("maxByteLength"), ::OpenAPI::toJsonValue(m_max_byte_length));
    }
    if (m_max_file_size_isSet) {
        obj.insert(QString("maxFileSize"), ::OpenAPI::toJsonValue(m_max_file_size));
    }
    if (m_max_height_isSet) {
        obj.insert(QString("maxHeight"), ::OpenAPI::toJsonValue(m_max_height));
    }
    if (m_max_length_isSet) {
        obj.insert(QString("maxLength"), ::OpenAPI::toJsonValue(m_max_length));
    }
    if (m_max_width_isSet) {
        obj.insert(QString("maxWidth"), ::OpenAPI::toJsonValue(m_max_width));
    }
    if (m_min_height_isSet) {
        obj.insert(QString("minHeight"), ::OpenAPI::toJsonValue(m_min_height));
    }
    if (m_min_width_isSet) {
        obj.insert(QString("minWidth"), ::OpenAPI::toJsonValue(m_min_width));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_property_description_isSet) {
        obj.insert(QString("propertyDescription"), ::OpenAPI::toJsonValue(m_property_description));
    }
    if (m_property_section_isSet) {
        obj.insert(QString("propertySection"), ::OpenAPI::toJsonValue(m_property_section));
    }
    if (m_readable_name_isSet) {
        obj.insert(QString("readableName"), ::OpenAPI::toJsonValue(m_readable_name));
    }
    if (m_regexp_isSet) {
        obj.insert(QString("regexp"), ::OpenAPI::toJsonValue(m_regexp));
    }
    if (m_representation_selection.size() > 0) {
        obj.insert(QString("representationSelection"), ::OpenAPI::toJsonValue(m_representation_selection));
    }
    if (m_representation_validation_string_isSet) {
        obj.insert(QString("representationValidationString"), ::OpenAPI::toJsonValue(m_representation_validation_string));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_root_property_name_isSet) {
        obj.insert(QString("rootPropertyName"), ::OpenAPI::toJsonValue(m_root_property_name));
    }
    if (m_rss_attribute_isSet) {
        obj.insert(QString("rssAttribute"), ::OpenAPI::toJsonValue(m_rss_attribute));
    }
    if (m_suppress_property_isSet) {
        obj.insert(QString("suppressProperty"), ::OpenAPI::toJsonValue(m_suppress_property));
    }
    if (m_validate_as_isSet) {
        obj.insert(QString("validateAs"), ::OpenAPI::toJsonValue(m_validate_as));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_visible_isSet) {
        obj.insert(QString("visible"), ::OpenAPI::toJsonValue(m_visible));
    }
    if (m_visible_dependency_isSet) {
        obj.insert(QString("visibleDependency"), ::OpenAPI::toJsonValue(m_visible_dependency));
    }
    if (m_visible_on_isSet) {
        obj.insert(QString("visibleOn"), ::OpenAPI::toJsonValue(m_visible_on));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QMap<QString, QString> OAIContent_Models_ContentTypeProperty::getAttributes() const {
    return m_attributes;
}
void OAIContent_Models_ContentTypeProperty::setAttributes(const QMap<QString, QString> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIContent_Models_ContentTypeProperty::getBindToProperty() const {
    return m_bind_to_property;
}
void OAIContent_Models_ContentTypeProperty::setBindToProperty(const QString &bind_to_property) {
    m_bind_to_property = bind_to_property;
    m_bind_to_property_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_bind_to_property_Set() const{
    return m_bind_to_property_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_bind_to_property_Valid() const{
    return m_bind_to_property_isValid;
}

QString OAIContent_Models_ContentTypeProperty::getBoundRegex() const {
    return m_bound_regex;
}
void OAIContent_Models_ContentTypeProperty::setBoundRegex(const QString &bound_regex) {
    m_bound_regex = bound_regex;
    m_bound_regex_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_bound_regex_Set() const{
    return m_bound_regex_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_bound_regex_Valid() const{
    return m_bound_regex_isValid;
}

QList<OAIContent_Models_ContentTypeProperty> OAIContent_Models_ContentTypeProperty::getChildProperties() const {
    return m_child_properties;
}
void OAIContent_Models_ContentTypeProperty::setChildProperties(const QList<OAIContent_Models_ContentTypeProperty> &child_properties) {
    m_child_properties = child_properties;
    m_child_properties_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_child_properties_Set() const{
    return m_child_properties_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_child_properties_Valid() const{
    return m_child_properties_isValid;
}

QString OAIContent_Models_ContentTypeProperty::getContentTypeAllowed() const {
    return m_content_type_allowed;
}
void OAIContent_Models_ContentTypeProperty::setContentTypeAllowed(const QString &content_type_allowed) {
    m_content_type_allowed = content_type_allowed;
    m_content_type_allowed_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_content_type_allowed_Set() const{
    return m_content_type_allowed_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_content_type_allowed_Valid() const{
    return m_content_type_allowed_isValid;
}

qint32 OAIContent_Models_ContentTypeProperty::getDatatype() const {
    return m_datatype;
}
void OAIContent_Models_ContentTypeProperty::setDatatype(const qint32 &datatype) {
    m_datatype = datatype;
    m_datatype_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_datatype_Set() const{
    return m_datatype_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_datatype_Valid() const{
    return m_datatype_isValid;
}

QList<OAIContent_Models_ContentTypeDefaultValue> OAIContent_Models_ContentTypeProperty::getDefaultValues() const {
    return m_default_values;
}
void OAIContent_Models_ContentTypeProperty::setDefaultValues(const QList<OAIContent_Models_ContentTypeDefaultValue> &default_values) {
    m_default_values = default_values;
    m_default_values_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_default_values_Set() const{
    return m_default_values_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_default_values_Valid() const{
    return m_default_values_isValid;
}

bool OAIContent_Models_ContentTypeProperty::isEnabled() const {
    return m_enabled;
}
void OAIContent_Models_ContentTypeProperty::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIContent_Models_ContentTypeProperty::getEntitytype() const {
    return m_entitytype;
}
void OAIContent_Models_ContentTypeProperty::setEntitytype(const QString &entitytype) {
    m_entitytype = entitytype;
    m_entitytype_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_entitytype_Set() const{
    return m_entitytype_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_entitytype_Valid() const{
    return m_entitytype_isValid;
}

bool OAIContent_Models_ContentTypeProperty::isFallback() const {
    return m_fallback;
}
void OAIContent_Models_ContentTypeProperty::setFallback(const bool &fallback) {
    m_fallback = fallback;
    m_fallback_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_fallback_Set() const{
    return m_fallback_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_fallback_Valid() const{
    return m_fallback_isValid;
}

bool OAIContent_Models_ContentTypeProperty::isIsCombo() const {
    return m_is_combo;
}
void OAIContent_Models_ContentTypeProperty::setIsCombo(const bool &is_combo) {
    m_is_combo = is_combo;
    m_is_combo_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_is_combo_Set() const{
    return m_is_combo_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_is_combo_Valid() const{
    return m_is_combo_isValid;
}

bool OAIContent_Models_ContentTypeProperty::isIsExternalAllowed() const {
    return m_is_external_allowed;
}
void OAIContent_Models_ContentTypeProperty::setIsExternalAllowed(const bool &is_external_allowed) {
    m_is_external_allowed = is_external_allowed;
    m_is_external_allowed_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_is_external_allowed_Set() const{
    return m_is_external_allowed_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_is_external_allowed_Valid() const{
    return m_is_external_allowed_isValid;
}

bool OAIContent_Models_ContentTypeProperty::isIsImage() const {
    return m_is_image;
}
void OAIContent_Models_ContentTypeProperty::setIsImage(const bool &is_image) {
    m_is_image = is_image;
    m_is_image_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_is_image_Set() const{
    return m_is_image_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_is_image_Valid() const{
    return m_is_image_isValid;
}

bool OAIContent_Models_ContentTypeProperty::isIsTitle() const {
    return m_is_title;
}
void OAIContent_Models_ContentTypeProperty::setIsTitle(const bool &is_title) {
    m_is_title = is_title;
    m_is_title_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_is_title_Set() const{
    return m_is_title_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_is_title_Valid() const{
    return m_is_title_isValid;
}

bool OAIContent_Models_ContentTypeProperty::isIsVideo() const {
    return m_is_video;
}
void OAIContent_Models_ContentTypeProperty::setIsVideo(const bool &is_video) {
    m_is_video = is_video;
    m_is_video_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_is_video_Set() const{
    return m_is_video_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_is_video_Valid() const{
    return m_is_video_isValid;
}

QList<QString> OAIContent_Models_ContentTypeProperty::getLegalContentTypes() const {
    return m_legal_content_types;
}
void OAIContent_Models_ContentTypeProperty::setLegalContentTypes(const QList<QString> &legal_content_types) {
    m_legal_content_types = legal_content_types;
    m_legal_content_types_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_legal_content_types_Set() const{
    return m_legal_content_types_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_legal_content_types_Valid() const{
    return m_legal_content_types_isValid;
}

bool OAIContent_Models_ContentTypeProperty::isLocalizable() const {
    return m_localizable;
}
void OAIContent_Models_ContentTypeProperty::setLocalizable(const bool &localizable) {
    m_localizable = localizable;
    m_localizable_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_localizable_Set() const{
    return m_localizable_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_localizable_Valid() const{
    return m_localizable_isValid;
}

qint32 OAIContent_Models_ContentTypeProperty::getMaxByteLength() const {
    return m_max_byte_length;
}
void OAIContent_Models_ContentTypeProperty::setMaxByteLength(const qint32 &max_byte_length) {
    m_max_byte_length = max_byte_length;
    m_max_byte_length_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_max_byte_length_Set() const{
    return m_max_byte_length_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_max_byte_length_Valid() const{
    return m_max_byte_length_isValid;
}

qint32 OAIContent_Models_ContentTypeProperty::getMaxFileSize() const {
    return m_max_file_size;
}
void OAIContent_Models_ContentTypeProperty::setMaxFileSize(const qint32 &max_file_size) {
    m_max_file_size = max_file_size;
    m_max_file_size_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_max_file_size_Set() const{
    return m_max_file_size_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_max_file_size_Valid() const{
    return m_max_file_size_isValid;
}

qint32 OAIContent_Models_ContentTypeProperty::getMaxHeight() const {
    return m_max_height;
}
void OAIContent_Models_ContentTypeProperty::setMaxHeight(const qint32 &max_height) {
    m_max_height = max_height;
    m_max_height_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_max_height_Set() const{
    return m_max_height_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_max_height_Valid() const{
    return m_max_height_isValid;
}

qint32 OAIContent_Models_ContentTypeProperty::getMaxLength() const {
    return m_max_length;
}
void OAIContent_Models_ContentTypeProperty::setMaxLength(const qint32 &max_length) {
    m_max_length = max_length;
    m_max_length_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_max_length_Set() const{
    return m_max_length_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_max_length_Valid() const{
    return m_max_length_isValid;
}

qint32 OAIContent_Models_ContentTypeProperty::getMaxWidth() const {
    return m_max_width;
}
void OAIContent_Models_ContentTypeProperty::setMaxWidth(const qint32 &max_width) {
    m_max_width = max_width;
    m_max_width_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_max_width_Set() const{
    return m_max_width_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_max_width_Valid() const{
    return m_max_width_isValid;
}

qint32 OAIContent_Models_ContentTypeProperty::getMinHeight() const {
    return m_min_height;
}
void OAIContent_Models_ContentTypeProperty::setMinHeight(const qint32 &min_height) {
    m_min_height = min_height;
    m_min_height_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_min_height_Set() const{
    return m_min_height_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_min_height_Valid() const{
    return m_min_height_isValid;
}

qint32 OAIContent_Models_ContentTypeProperty::getMinWidth() const {
    return m_min_width;
}
void OAIContent_Models_ContentTypeProperty::setMinWidth(const qint32 &min_width) {
    m_min_width = min_width;
    m_min_width_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_min_width_Set() const{
    return m_min_width_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_min_width_Valid() const{
    return m_min_width_isValid;
}

QString OAIContent_Models_ContentTypeProperty::getName() const {
    return m_name;
}
void OAIContent_Models_ContentTypeProperty::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIContent_Models_ContentTypeProperty::getOrder() const {
    return m_order;
}
void OAIContent_Models_ContentTypeProperty::setOrder(const qint32 &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_order_Set() const{
    return m_order_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_order_Valid() const{
    return m_order_isValid;
}

QString OAIContent_Models_ContentTypeProperty::getPropertyDescription() const {
    return m_property_description;
}
void OAIContent_Models_ContentTypeProperty::setPropertyDescription(const QString &property_description) {
    m_property_description = property_description;
    m_property_description_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_property_description_Set() const{
    return m_property_description_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_property_description_Valid() const{
    return m_property_description_isValid;
}

QString OAIContent_Models_ContentTypeProperty::getPropertySection() const {
    return m_property_section;
}
void OAIContent_Models_ContentTypeProperty::setPropertySection(const QString &property_section) {
    m_property_section = property_section;
    m_property_section_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_property_section_Set() const{
    return m_property_section_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_property_section_Valid() const{
    return m_property_section_isValid;
}

QString OAIContent_Models_ContentTypeProperty::getReadableName() const {
    return m_readable_name;
}
void OAIContent_Models_ContentTypeProperty::setReadableName(const QString &readable_name) {
    m_readable_name = readable_name;
    m_readable_name_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_readable_name_Set() const{
    return m_readable_name_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_readable_name_Valid() const{
    return m_readable_name_isValid;
}

QString OAIContent_Models_ContentTypeProperty::getRegexp() const {
    return m_regexp;
}
void OAIContent_Models_ContentTypeProperty::setRegexp(const QString &regexp) {
    m_regexp = regexp;
    m_regexp_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_regexp_Set() const{
    return m_regexp_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_regexp_Valid() const{
    return m_regexp_isValid;
}

QMap<QString, QString> OAIContent_Models_ContentTypeProperty::getRepresentationSelection() const {
    return m_representation_selection;
}
void OAIContent_Models_ContentTypeProperty::setRepresentationSelection(const QMap<QString, QString> &representation_selection) {
    m_representation_selection = representation_selection;
    m_representation_selection_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_representation_selection_Set() const{
    return m_representation_selection_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_representation_selection_Valid() const{
    return m_representation_selection_isValid;
}

QString OAIContent_Models_ContentTypeProperty::getRepresentationValidationString() const {
    return m_representation_validation_string;
}
void OAIContent_Models_ContentTypeProperty::setRepresentationValidationString(const QString &representation_validation_string) {
    m_representation_validation_string = representation_validation_string;
    m_representation_validation_string_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_representation_validation_string_Set() const{
    return m_representation_validation_string_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_representation_validation_string_Valid() const{
    return m_representation_validation_string_isValid;
}

bool OAIContent_Models_ContentTypeProperty::isRequired() const {
    return m_required;
}
void OAIContent_Models_ContentTypeProperty::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_required_Set() const{
    return m_required_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_required_Valid() const{
    return m_required_isValid;
}

QString OAIContent_Models_ContentTypeProperty::getRootPropertyName() const {
    return m_root_property_name;
}
void OAIContent_Models_ContentTypeProperty::setRootPropertyName(const QString &root_property_name) {
    m_root_property_name = root_property_name;
    m_root_property_name_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_root_property_name_Set() const{
    return m_root_property_name_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_root_property_name_Valid() const{
    return m_root_property_name_isValid;
}

QString OAIContent_Models_ContentTypeProperty::getRssAttribute() const {
    return m_rss_attribute;
}
void OAIContent_Models_ContentTypeProperty::setRssAttribute(const QString &rss_attribute) {
    m_rss_attribute = rss_attribute;
    m_rss_attribute_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_rss_attribute_Set() const{
    return m_rss_attribute_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_rss_attribute_Valid() const{
    return m_rss_attribute_isValid;
}

bool OAIContent_Models_ContentTypeProperty::isSuppressProperty() const {
    return m_suppress_property;
}
void OAIContent_Models_ContentTypeProperty::setSuppressProperty(const bool &suppress_property) {
    m_suppress_property = suppress_property;
    m_suppress_property_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_suppress_property_Set() const{
    return m_suppress_property_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_suppress_property_Valid() const{
    return m_suppress_property_isValid;
}

QString OAIContent_Models_ContentTypeProperty::getValidateAs() const {
    return m_validate_as;
}
void OAIContent_Models_ContentTypeProperty::setValidateAs(const QString &validate_as) {
    m_validate_as = validate_as;
    m_validate_as_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_validate_as_Set() const{
    return m_validate_as_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_validate_as_Valid() const{
    return m_validate_as_isValid;
}

QString OAIContent_Models_ContentTypeProperty::getValue() const {
    return m_value;
}
void OAIContent_Models_ContentTypeProperty::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_value_Set() const{
    return m_value_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIContent_Models_ContentTypeProperty::isVisible() const {
    return m_visible;
}
void OAIContent_Models_ContentTypeProperty::setVisible(const bool &visible) {
    m_visible = visible;
    m_visible_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_visible_Set() const{
    return m_visible_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_visible_Valid() const{
    return m_visible_isValid;
}

QString OAIContent_Models_ContentTypeProperty::getVisibleDependency() const {
    return m_visible_dependency;
}
void OAIContent_Models_ContentTypeProperty::setVisibleDependency(const QString &visible_dependency) {
    m_visible_dependency = visible_dependency;
    m_visible_dependency_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_visible_dependency_Set() const{
    return m_visible_dependency_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_visible_dependency_Valid() const{
    return m_visible_dependency_isValid;
}

QString OAIContent_Models_ContentTypeProperty::getVisibleOn() const {
    return m_visible_on;
}
void OAIContent_Models_ContentTypeProperty::setVisibleOn(const QString &visible_on) {
    m_visible_on = visible_on;
    m_visible_on_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_visible_on_Set() const{
    return m_visible_on_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_visible_on_Valid() const{
    return m_visible_on_isValid;
}

qint32 OAIContent_Models_ContentTypeProperty::getWeight() const {
    return m_weight;
}
void OAIContent_Models_ContentTypeProperty::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIContent_Models_ContentTypeProperty::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIContent_Models_ContentTypeProperty::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIContent_Models_ContentTypeProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bind_to_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bound_regex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datatype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entitytype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fallback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_combo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_external_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_video_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_content_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_localizable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_byte_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_section_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_readable_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regexp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_representation_selection.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_representation_validation_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_property_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rss_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suppress_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_as_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_dependency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContent_Models_ContentTypeProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
