/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition.h
 *
 * 
 */

#ifndef OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition_H
#define OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_Artifacts_DestinyArtifactTierItemDefinition.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_Artifacts_DestinyArtifactTierItemDefinition;

class OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition();
    OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition(QString json);
    ~OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDisplayTitle() const;
    void setDisplayTitle(const QString &display_title);
    bool is_display_title_Set() const;
    bool is_display_title_Valid() const;

    QList<OAIDestiny_Definitions_Artifacts_DestinyArtifactTierItemDefinition> getItems() const;
    void setItems(const QList<OAIDestiny_Definitions_Artifacts_DestinyArtifactTierItemDefinition> &items);
    bool is_items_Set() const;
    bool is_items_Valid() const;

    qint32 getMinimumUnlockPointsUsedRequirement() const;
    void setMinimumUnlockPointsUsedRequirement(const qint32 &minimum_unlock_points_used_requirement);
    bool is_minimum_unlock_points_used_requirement_Set() const;
    bool is_minimum_unlock_points_used_requirement_Valid() const;

    QString getProgressRequirementMessage() const;
    void setProgressRequirementMessage(const QString &progress_requirement_message);
    bool is_progress_requirement_message_Set() const;
    bool is_progress_requirement_message_Valid() const;

    qint32 getTierHash() const;
    void setTierHash(const qint32 &tier_hash);
    bool is_tier_hash_Set() const;
    bool is_tier_hash_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_display_title;
    bool m_display_title_isSet;
    bool m_display_title_isValid;

    QList<OAIDestiny_Definitions_Artifacts_DestinyArtifactTierItemDefinition> m_items;
    bool m_items_isSet;
    bool m_items_isValid;

    qint32 m_minimum_unlock_points_used_requirement;
    bool m_minimum_unlock_points_used_requirement_isSet;
    bool m_minimum_unlock_points_used_requirement_isValid;

    QString m_progress_requirement_message;
    bool m_progress_requirement_message_isSet;
    bool m_progress_requirement_message_isValid;

    qint32 m_tier_hash;
    bool m_tier_hash_isSet;
    bool m_tier_hash_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition)

#endif // OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition_H
