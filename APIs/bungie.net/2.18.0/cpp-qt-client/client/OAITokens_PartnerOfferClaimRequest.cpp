/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITokens_PartnerOfferClaimRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITokens_PartnerOfferClaimRequest::OAITokens_PartnerOfferClaimRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITokens_PartnerOfferClaimRequest::OAITokens_PartnerOfferClaimRequest() {
    this->initializeModel();
}

OAITokens_PartnerOfferClaimRequest::~OAITokens_PartnerOfferClaimRequest() {}

void OAITokens_PartnerOfferClaimRequest::initializeModel() {

    m_bungie_net_membership_id_isSet = false;
    m_bungie_net_membership_id_isValid = false;

    m_partner_offer_id_isSet = false;
    m_partner_offer_id_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;
}

void OAITokens_PartnerOfferClaimRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITokens_PartnerOfferClaimRequest::fromJsonObject(QJsonObject json) {

    m_bungie_net_membership_id_isValid = ::OpenAPI::fromJsonValue(m_bungie_net_membership_id, json[QString("BungieNetMembershipId")]);
    m_bungie_net_membership_id_isSet = !json[QString("BungieNetMembershipId")].isNull() && m_bungie_net_membership_id_isValid;

    m_partner_offer_id_isValid = ::OpenAPI::fromJsonValue(m_partner_offer_id, json[QString("PartnerOfferId")]);
    m_partner_offer_id_isSet = !json[QString("PartnerOfferId")].isNull() && m_partner_offer_id_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("TransactionId")]);
    m_transaction_id_isSet = !json[QString("TransactionId")].isNull() && m_transaction_id_isValid;
}

QString OAITokens_PartnerOfferClaimRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITokens_PartnerOfferClaimRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_bungie_net_membership_id_isSet) {
        obj.insert(QString("BungieNetMembershipId"), ::OpenAPI::toJsonValue(m_bungie_net_membership_id));
    }
    if (m_partner_offer_id_isSet) {
        obj.insert(QString("PartnerOfferId"), ::OpenAPI::toJsonValue(m_partner_offer_id));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("TransactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    return obj;
}

qint64 OAITokens_PartnerOfferClaimRequest::getBungieNetMembershipId() const {
    return m_bungie_net_membership_id;
}
void OAITokens_PartnerOfferClaimRequest::setBungieNetMembershipId(const qint64 &bungie_net_membership_id) {
    m_bungie_net_membership_id = bungie_net_membership_id;
    m_bungie_net_membership_id_isSet = true;
}

bool OAITokens_PartnerOfferClaimRequest::is_bungie_net_membership_id_Set() const{
    return m_bungie_net_membership_id_isSet;
}

bool OAITokens_PartnerOfferClaimRequest::is_bungie_net_membership_id_Valid() const{
    return m_bungie_net_membership_id_isValid;
}

QString OAITokens_PartnerOfferClaimRequest::getPartnerOfferId() const {
    return m_partner_offer_id;
}
void OAITokens_PartnerOfferClaimRequest::setPartnerOfferId(const QString &partner_offer_id) {
    m_partner_offer_id = partner_offer_id;
    m_partner_offer_id_isSet = true;
}

bool OAITokens_PartnerOfferClaimRequest::is_partner_offer_id_Set() const{
    return m_partner_offer_id_isSet;
}

bool OAITokens_PartnerOfferClaimRequest::is_partner_offer_id_Valid() const{
    return m_partner_offer_id_isValid;
}

QString OAITokens_PartnerOfferClaimRequest::getTransactionId() const {
    return m_transaction_id;
}
void OAITokens_PartnerOfferClaimRequest::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAITokens_PartnerOfferClaimRequest::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAITokens_PartnerOfferClaimRequest::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

bool OAITokens_PartnerOfferClaimRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bungie_net_membership_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITokens_PartnerOfferClaimRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
