/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForum_PostSearchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForum_PostSearchResponse::OAIForum_PostSearchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForum_PostSearchResponse::OAIForum_PostSearchResponse() {
    this->initializeModel();
}

OAIForum_PostSearchResponse::~OAIForum_PostSearchResponse() {}

void OAIForum_PostSearchResponse::initializeModel() {

    m_authors_isSet = false;
    m_authors_isValid = false;

    m_available_pages_isSet = false;
    m_available_pages_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_has_more_isSet = false;
    m_has_more_isValid = false;

    m_polls_isSet = false;
    m_polls_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_recruitment_details_isSet = false;
    m_recruitment_details_isValid = false;

    m_related_posts_isSet = false;
    m_related_posts_isValid = false;

    m_replacement_continuation_token_isSet = false;
    m_replacement_continuation_token_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_searched_tags_isSet = false;
    m_searched_tags_isValid = false;

    m_total_results_isSet = false;
    m_total_results_isValid = false;

    m_use_total_results_isSet = false;
    m_use_total_results_isValid = false;
}

void OAIForum_PostSearchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForum_PostSearchResponse::fromJsonObject(QJsonObject json) {

    m_authors_isValid = ::OpenAPI::fromJsonValue(m_authors, json[QString("authors")]);
    m_authors_isSet = !json[QString("authors")].isNull() && m_authors_isValid;

    m_available_pages_isValid = ::OpenAPI::fromJsonValue(m_available_pages, json[QString("availablePages")]);
    m_available_pages_isSet = !json[QString("availablePages")].isNull() && m_available_pages_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_has_more_isValid = ::OpenAPI::fromJsonValue(m_has_more, json[QString("hasMore")]);
    m_has_more_isSet = !json[QString("hasMore")].isNull() && m_has_more_isValid;

    m_polls_isValid = ::OpenAPI::fromJsonValue(m_polls, json[QString("polls")]);
    m_polls_isSet = !json[QString("polls")].isNull() && m_polls_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_recruitment_details_isValid = ::OpenAPI::fromJsonValue(m_recruitment_details, json[QString("recruitmentDetails")]);
    m_recruitment_details_isSet = !json[QString("recruitmentDetails")].isNull() && m_recruitment_details_isValid;

    m_related_posts_isValid = ::OpenAPI::fromJsonValue(m_related_posts, json[QString("relatedPosts")]);
    m_related_posts_isSet = !json[QString("relatedPosts")].isNull() && m_related_posts_isValid;

    m_replacement_continuation_token_isValid = ::OpenAPI::fromJsonValue(m_replacement_continuation_token, json[QString("replacementContinuationToken")]);
    m_replacement_continuation_token_isSet = !json[QString("replacementContinuationToken")].isNull() && m_replacement_continuation_token_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_searched_tags_isValid = ::OpenAPI::fromJsonValue(m_searched_tags, json[QString("searchedTags")]);
    m_searched_tags_isSet = !json[QString("searchedTags")].isNull() && m_searched_tags_isValid;

    m_total_results_isValid = ::OpenAPI::fromJsonValue(m_total_results, json[QString("totalResults")]);
    m_total_results_isSet = !json[QString("totalResults")].isNull() && m_total_results_isValid;

    m_use_total_results_isValid = ::OpenAPI::fromJsonValue(m_use_total_results, json[QString("useTotalResults")]);
    m_use_total_results_isSet = !json[QString("useTotalResults")].isNull() && m_use_total_results_isValid;
}

QString OAIForum_PostSearchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForum_PostSearchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_authors.size() > 0) {
        obj.insert(QString("authors"), ::OpenAPI::toJsonValue(m_authors));
    }
    if (m_available_pages_isSet) {
        obj.insert(QString("availablePages"), ::OpenAPI::toJsonValue(m_available_pages));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_has_more_isSet) {
        obj.insert(QString("hasMore"), ::OpenAPI::toJsonValue(m_has_more));
    }
    if (m_polls.size() > 0) {
        obj.insert(QString("polls"), ::OpenAPI::toJsonValue(m_polls));
    }
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_recruitment_details.size() > 0) {
        obj.insert(QString("recruitmentDetails"), ::OpenAPI::toJsonValue(m_recruitment_details));
    }
    if (m_related_posts.size() > 0) {
        obj.insert(QString("relatedPosts"), ::OpenAPI::toJsonValue(m_related_posts));
    }
    if (m_replacement_continuation_token_isSet) {
        obj.insert(QString("replacementContinuationToken"), ::OpenAPI::toJsonValue(m_replacement_continuation_token));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_searched_tags.size() > 0) {
        obj.insert(QString("searchedTags"), ::OpenAPI::toJsonValue(m_searched_tags));
    }
    if (m_total_results_isSet) {
        obj.insert(QString("totalResults"), ::OpenAPI::toJsonValue(m_total_results));
    }
    if (m_use_total_results_isSet) {
        obj.insert(QString("useTotalResults"), ::OpenAPI::toJsonValue(m_use_total_results));
    }
    return obj;
}

QList<OAIUser_GeneralUser> OAIForum_PostSearchResponse::getAuthors() const {
    return m_authors;
}
void OAIForum_PostSearchResponse::setAuthors(const QList<OAIUser_GeneralUser> &authors) {
    m_authors = authors;
    m_authors_isSet = true;
}

bool OAIForum_PostSearchResponse::is_authors_Set() const{
    return m_authors_isSet;
}

bool OAIForum_PostSearchResponse::is_authors_Valid() const{
    return m_authors_isValid;
}

qint32 OAIForum_PostSearchResponse::getAvailablePages() const {
    return m_available_pages;
}
void OAIForum_PostSearchResponse::setAvailablePages(const qint32 &available_pages) {
    m_available_pages = available_pages;
    m_available_pages_isSet = true;
}

bool OAIForum_PostSearchResponse::is_available_pages_Set() const{
    return m_available_pages_isSet;
}

bool OAIForum_PostSearchResponse::is_available_pages_Valid() const{
    return m_available_pages_isValid;
}

QList<OAIGroupsV2_GroupResponse> OAIForum_PostSearchResponse::getGroups() const {
    return m_groups;
}
void OAIForum_PostSearchResponse::setGroups(const QList<OAIGroupsV2_GroupResponse> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIForum_PostSearchResponse::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIForum_PostSearchResponse::is_groups_Valid() const{
    return m_groups_isValid;
}

bool OAIForum_PostSearchResponse::isHasMore() const {
    return m_has_more;
}
void OAIForum_PostSearchResponse::setHasMore(const bool &has_more) {
    m_has_more = has_more;
    m_has_more_isSet = true;
}

bool OAIForum_PostSearchResponse::is_has_more_Set() const{
    return m_has_more_isSet;
}

bool OAIForum_PostSearchResponse::is_has_more_Valid() const{
    return m_has_more_isValid;
}

QList<OAIForum_PollResponse> OAIForum_PostSearchResponse::getPolls() const {
    return m_polls;
}
void OAIForum_PostSearchResponse::setPolls(const QList<OAIForum_PollResponse> &polls) {
    m_polls = polls;
    m_polls_isSet = true;
}

bool OAIForum_PostSearchResponse::is_polls_Set() const{
    return m_polls_isSet;
}

bool OAIForum_PostSearchResponse::is_polls_Valid() const{
    return m_polls_isValid;
}

OAIQueries_PagedQuery OAIForum_PostSearchResponse::getQuery() const {
    return m_query;
}
void OAIForum_PostSearchResponse::setQuery(const OAIQueries_PagedQuery &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIForum_PostSearchResponse::is_query_Set() const{
    return m_query_isSet;
}

bool OAIForum_PostSearchResponse::is_query_Valid() const{
    return m_query_isValid;
}

QList<OAIForum_ForumRecruitmentDetail> OAIForum_PostSearchResponse::getRecruitmentDetails() const {
    return m_recruitment_details;
}
void OAIForum_PostSearchResponse::setRecruitmentDetails(const QList<OAIForum_ForumRecruitmentDetail> &recruitment_details) {
    m_recruitment_details = recruitment_details;
    m_recruitment_details_isSet = true;
}

bool OAIForum_PostSearchResponse::is_recruitment_details_Set() const{
    return m_recruitment_details_isSet;
}

bool OAIForum_PostSearchResponse::is_recruitment_details_Valid() const{
    return m_recruitment_details_isValid;
}

QList<OAIForum_PostResponse> OAIForum_PostSearchResponse::getRelatedPosts() const {
    return m_related_posts;
}
void OAIForum_PostSearchResponse::setRelatedPosts(const QList<OAIForum_PostResponse> &related_posts) {
    m_related_posts = related_posts;
    m_related_posts_isSet = true;
}

bool OAIForum_PostSearchResponse::is_related_posts_Set() const{
    return m_related_posts_isSet;
}

bool OAIForum_PostSearchResponse::is_related_posts_Valid() const{
    return m_related_posts_isValid;
}

QString OAIForum_PostSearchResponse::getReplacementContinuationToken() const {
    return m_replacement_continuation_token;
}
void OAIForum_PostSearchResponse::setReplacementContinuationToken(const QString &replacement_continuation_token) {
    m_replacement_continuation_token = replacement_continuation_token;
    m_replacement_continuation_token_isSet = true;
}

bool OAIForum_PostSearchResponse::is_replacement_continuation_token_Set() const{
    return m_replacement_continuation_token_isSet;
}

bool OAIForum_PostSearchResponse::is_replacement_continuation_token_Valid() const{
    return m_replacement_continuation_token_isValid;
}

QList<OAIForum_PostResponse> OAIForum_PostSearchResponse::getResults() const {
    return m_results;
}
void OAIForum_PostSearchResponse::setResults(const QList<OAIForum_PostResponse> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIForum_PostSearchResponse::is_results_Set() const{
    return m_results_isSet;
}

bool OAIForum_PostSearchResponse::is_results_Valid() const{
    return m_results_isValid;
}

QList<OAITags_Models_Contracts_TagResponse> OAIForum_PostSearchResponse::getSearchedTags() const {
    return m_searched_tags;
}
void OAIForum_PostSearchResponse::setSearchedTags(const QList<OAITags_Models_Contracts_TagResponse> &searched_tags) {
    m_searched_tags = searched_tags;
    m_searched_tags_isSet = true;
}

bool OAIForum_PostSearchResponse::is_searched_tags_Set() const{
    return m_searched_tags_isSet;
}

bool OAIForum_PostSearchResponse::is_searched_tags_Valid() const{
    return m_searched_tags_isValid;
}

qint32 OAIForum_PostSearchResponse::getTotalResults() const {
    return m_total_results;
}
void OAIForum_PostSearchResponse::setTotalResults(const qint32 &total_results) {
    m_total_results = total_results;
    m_total_results_isSet = true;
}

bool OAIForum_PostSearchResponse::is_total_results_Set() const{
    return m_total_results_isSet;
}

bool OAIForum_PostSearchResponse::is_total_results_Valid() const{
    return m_total_results_isValid;
}

bool OAIForum_PostSearchResponse::isUseTotalResults() const {
    return m_use_total_results;
}
void OAIForum_PostSearchResponse::setUseTotalResults(const bool &use_total_results) {
    m_use_total_results = use_total_results;
    m_use_total_results_isSet = true;
}

bool OAIForum_PostSearchResponse::is_use_total_results_Set() const{
    return m_use_total_results_isSet;
}

bool OAIForum_PostSearchResponse::is_use_total_results_Valid() const{
    return m_use_total_results_isValid;
}

bool OAIForum_PostSearchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_more_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_polls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recruitment_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_posts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_replacement_continuation_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_searched_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_total_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForum_PostSearchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
