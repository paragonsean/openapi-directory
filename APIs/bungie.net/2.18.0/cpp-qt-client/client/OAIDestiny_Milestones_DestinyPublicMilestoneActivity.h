/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Milestones_DestinyPublicMilestoneActivity.h
 *
 * A milestone may have one or more conceptual Activities associated with it, and each of those conceptual activities could have a variety of variants, modes, tiers, what-have-you. Our attempts to determine what qualifies as a conceptual activity are, unfortunately, janky. So if you see missing modes or modes that don&#39;t seem appropriate to you, let us know and I&#39;ll buy you a beer if we ever meet up in person.
 */

#ifndef OAIDestiny_Milestones_DestinyPublicMilestoneActivity_H
#define OAIDestiny_Milestones_DestinyPublicMilestoneActivity_H

#include <QJsonObject>

#include "OAIDestiny_Milestones_DestinyPublicMilestoneActivityVariant.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Milestones_DestinyPublicMilestoneActivityVariant;

class OAIDestiny_Milestones_DestinyPublicMilestoneActivity : public OAIObject {
public:
    OAIDestiny_Milestones_DestinyPublicMilestoneActivity();
    OAIDestiny_Milestones_DestinyPublicMilestoneActivity(QString json);
    ~OAIDestiny_Milestones_DestinyPublicMilestoneActivity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getActivityHash() const;
    void setActivityHash(const qint32 &activity_hash);
    bool is_activity_hash_Set() const;
    bool is_activity_hash_Valid() const;

    qint32 getActivityModeHash() const;
    void setActivityModeHash(const qint32 &activity_mode_hash);
    bool is_activity_mode_hash_Set() const;
    bool is_activity_mode_hash_Valid() const;

    qint32 getActivityModeType() const;
    void setActivityModeType(const qint32 &activity_mode_type);
    bool is_activity_mode_type_Set() const;
    bool is_activity_mode_type_Valid() const;

    QList<qint32> getModifierHashes() const;
    void setModifierHashes(const QList<qint32> &modifier_hashes);
    bool is_modifier_hashes_Set() const;
    bool is_modifier_hashes_Valid() const;

    QList<OAIDestiny_Milestones_DestinyPublicMilestoneActivityVariant> getVariants() const;
    void setVariants(const QList<OAIDestiny_Milestones_DestinyPublicMilestoneActivityVariant> &variants);
    bool is_variants_Set() const;
    bool is_variants_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_activity_hash;
    bool m_activity_hash_isSet;
    bool m_activity_hash_isValid;

    qint32 m_activity_mode_hash;
    bool m_activity_mode_hash_isSet;
    bool m_activity_mode_hash_isValid;

    qint32 m_activity_mode_type;
    bool m_activity_mode_type_isSet;
    bool m_activity_mode_type_isValid;

    QList<qint32> m_modifier_hashes;
    bool m_modifier_hashes_isSet;
    bool m_modifier_hashes_isValid;

    QList<OAIDestiny_Milestones_DestinyPublicMilestoneActivityVariant> m_variants;
    bool m_variants_isSet;
    bool m_variants_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Milestones_DestinyPublicMilestoneActivity)

#endif // OAIDestiny_Milestones_DestinyPublicMilestoneActivity_H
