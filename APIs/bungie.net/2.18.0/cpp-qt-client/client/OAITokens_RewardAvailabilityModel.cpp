/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITokens_RewardAvailabilityModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITokens_RewardAvailabilityModel::OAITokens_RewardAvailabilityModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITokens_RewardAvailabilityModel::OAITokens_RewardAvailabilityModel() {
    this->initializeModel();
}

OAITokens_RewardAvailabilityModel::~OAITokens_RewardAvailabilityModel() {}

void OAITokens_RewardAvailabilityModel::initializeModel() {

    m_collectible_definitions_isSet = false;
    m_collectible_definitions_isValid = false;

    m_decrypted_token_isSet = false;
    m_decrypted_token_isValid = false;

    m_game_earn_by_date_isSet = false;
    m_game_earn_by_date_isValid = false;

    m_has_existing_code_isSet = false;
    m_has_existing_code_isValid = false;

    m_has_offer_isSet = false;
    m_has_offer_isValid = false;

    m_is_loyalty_reward_isSet = false;
    m_is_loyalty_reward_isValid = false;

    m_is_offer_isSet = false;
    m_is_offer_isValid = false;

    m_offer_applied_isSet = false;
    m_offer_applied_isValid = false;

    m_record_definitions_isSet = false;
    m_record_definitions_isValid = false;

    m_redemption_end_date_isSet = false;
    m_redemption_end_date_isValid = false;

    m_shopify_end_date_isSet = false;
    m_shopify_end_date_isValid = false;
}

void OAITokens_RewardAvailabilityModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITokens_RewardAvailabilityModel::fromJsonObject(QJsonObject json) {

    m_collectible_definitions_isValid = ::OpenAPI::fromJsonValue(m_collectible_definitions, json[QString("CollectibleDefinitions")]);
    m_collectible_definitions_isSet = !json[QString("CollectibleDefinitions")].isNull() && m_collectible_definitions_isValid;

    m_decrypted_token_isValid = ::OpenAPI::fromJsonValue(m_decrypted_token, json[QString("DecryptedToken")]);
    m_decrypted_token_isSet = !json[QString("DecryptedToken")].isNull() && m_decrypted_token_isValid;

    m_game_earn_by_date_isValid = ::OpenAPI::fromJsonValue(m_game_earn_by_date, json[QString("GameEarnByDate")]);
    m_game_earn_by_date_isSet = !json[QString("GameEarnByDate")].isNull() && m_game_earn_by_date_isValid;

    m_has_existing_code_isValid = ::OpenAPI::fromJsonValue(m_has_existing_code, json[QString("HasExistingCode")]);
    m_has_existing_code_isSet = !json[QString("HasExistingCode")].isNull() && m_has_existing_code_isValid;

    m_has_offer_isValid = ::OpenAPI::fromJsonValue(m_has_offer, json[QString("HasOffer")]);
    m_has_offer_isSet = !json[QString("HasOffer")].isNull() && m_has_offer_isValid;

    m_is_loyalty_reward_isValid = ::OpenAPI::fromJsonValue(m_is_loyalty_reward, json[QString("IsLoyaltyReward")]);
    m_is_loyalty_reward_isSet = !json[QString("IsLoyaltyReward")].isNull() && m_is_loyalty_reward_isValid;

    m_is_offer_isValid = ::OpenAPI::fromJsonValue(m_is_offer, json[QString("IsOffer")]);
    m_is_offer_isSet = !json[QString("IsOffer")].isNull() && m_is_offer_isValid;

    m_offer_applied_isValid = ::OpenAPI::fromJsonValue(m_offer_applied, json[QString("OfferApplied")]);
    m_offer_applied_isSet = !json[QString("OfferApplied")].isNull() && m_offer_applied_isValid;

    m_record_definitions_isValid = ::OpenAPI::fromJsonValue(m_record_definitions, json[QString("RecordDefinitions")]);
    m_record_definitions_isSet = !json[QString("RecordDefinitions")].isNull() && m_record_definitions_isValid;

    m_redemption_end_date_isValid = ::OpenAPI::fromJsonValue(m_redemption_end_date, json[QString("RedemptionEndDate")]);
    m_redemption_end_date_isSet = !json[QString("RedemptionEndDate")].isNull() && m_redemption_end_date_isValid;

    m_shopify_end_date_isValid = ::OpenAPI::fromJsonValue(m_shopify_end_date, json[QString("ShopifyEndDate")]);
    m_shopify_end_date_isSet = !json[QString("ShopifyEndDate")].isNull() && m_shopify_end_date_isValid;
}

QString OAITokens_RewardAvailabilityModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITokens_RewardAvailabilityModel::asJsonObject() const {
    QJsonObject obj;
    if (m_collectible_definitions.size() > 0) {
        obj.insert(QString("CollectibleDefinitions"), ::OpenAPI::toJsonValue(m_collectible_definitions));
    }
    if (m_decrypted_token_isSet) {
        obj.insert(QString("DecryptedToken"), ::OpenAPI::toJsonValue(m_decrypted_token));
    }
    if (m_game_earn_by_date_isSet) {
        obj.insert(QString("GameEarnByDate"), ::OpenAPI::toJsonValue(m_game_earn_by_date));
    }
    if (m_has_existing_code_isSet) {
        obj.insert(QString("HasExistingCode"), ::OpenAPI::toJsonValue(m_has_existing_code));
    }
    if (m_has_offer_isSet) {
        obj.insert(QString("HasOffer"), ::OpenAPI::toJsonValue(m_has_offer));
    }
    if (m_is_loyalty_reward_isSet) {
        obj.insert(QString("IsLoyaltyReward"), ::OpenAPI::toJsonValue(m_is_loyalty_reward));
    }
    if (m_is_offer_isSet) {
        obj.insert(QString("IsOffer"), ::OpenAPI::toJsonValue(m_is_offer));
    }
    if (m_offer_applied_isSet) {
        obj.insert(QString("OfferApplied"), ::OpenAPI::toJsonValue(m_offer_applied));
    }
    if (m_record_definitions.size() > 0) {
        obj.insert(QString("RecordDefinitions"), ::OpenAPI::toJsonValue(m_record_definitions));
    }
    if (m_redemption_end_date_isSet) {
        obj.insert(QString("RedemptionEndDate"), ::OpenAPI::toJsonValue(m_redemption_end_date));
    }
    if (m_shopify_end_date_isSet) {
        obj.insert(QString("ShopifyEndDate"), ::OpenAPI::toJsonValue(m_shopify_end_date));
    }
    return obj;
}

QList<OAITokens_CollectibleDefinitions> OAITokens_RewardAvailabilityModel::getCollectibleDefinitions() const {
    return m_collectible_definitions;
}
void OAITokens_RewardAvailabilityModel::setCollectibleDefinitions(const QList<OAITokens_CollectibleDefinitions> &collectible_definitions) {
    m_collectible_definitions = collectible_definitions;
    m_collectible_definitions_isSet = true;
}

bool OAITokens_RewardAvailabilityModel::is_collectible_definitions_Set() const{
    return m_collectible_definitions_isSet;
}

bool OAITokens_RewardAvailabilityModel::is_collectible_definitions_Valid() const{
    return m_collectible_definitions_isValid;
}

QString OAITokens_RewardAvailabilityModel::getDecryptedToken() const {
    return m_decrypted_token;
}
void OAITokens_RewardAvailabilityModel::setDecryptedToken(const QString &decrypted_token) {
    m_decrypted_token = decrypted_token;
    m_decrypted_token_isSet = true;
}

bool OAITokens_RewardAvailabilityModel::is_decrypted_token_Set() const{
    return m_decrypted_token_isSet;
}

bool OAITokens_RewardAvailabilityModel::is_decrypted_token_Valid() const{
    return m_decrypted_token_isValid;
}

QDateTime OAITokens_RewardAvailabilityModel::getGameEarnByDate() const {
    return m_game_earn_by_date;
}
void OAITokens_RewardAvailabilityModel::setGameEarnByDate(const QDateTime &game_earn_by_date) {
    m_game_earn_by_date = game_earn_by_date;
    m_game_earn_by_date_isSet = true;
}

bool OAITokens_RewardAvailabilityModel::is_game_earn_by_date_Set() const{
    return m_game_earn_by_date_isSet;
}

bool OAITokens_RewardAvailabilityModel::is_game_earn_by_date_Valid() const{
    return m_game_earn_by_date_isValid;
}

bool OAITokens_RewardAvailabilityModel::isHasExistingCode() const {
    return m_has_existing_code;
}
void OAITokens_RewardAvailabilityModel::setHasExistingCode(const bool &has_existing_code) {
    m_has_existing_code = has_existing_code;
    m_has_existing_code_isSet = true;
}

bool OAITokens_RewardAvailabilityModel::is_has_existing_code_Set() const{
    return m_has_existing_code_isSet;
}

bool OAITokens_RewardAvailabilityModel::is_has_existing_code_Valid() const{
    return m_has_existing_code_isValid;
}

bool OAITokens_RewardAvailabilityModel::isHasOffer() const {
    return m_has_offer;
}
void OAITokens_RewardAvailabilityModel::setHasOffer(const bool &has_offer) {
    m_has_offer = has_offer;
    m_has_offer_isSet = true;
}

bool OAITokens_RewardAvailabilityModel::is_has_offer_Set() const{
    return m_has_offer_isSet;
}

bool OAITokens_RewardAvailabilityModel::is_has_offer_Valid() const{
    return m_has_offer_isValid;
}

bool OAITokens_RewardAvailabilityModel::isIsLoyaltyReward() const {
    return m_is_loyalty_reward;
}
void OAITokens_RewardAvailabilityModel::setIsLoyaltyReward(const bool &is_loyalty_reward) {
    m_is_loyalty_reward = is_loyalty_reward;
    m_is_loyalty_reward_isSet = true;
}

bool OAITokens_RewardAvailabilityModel::is_is_loyalty_reward_Set() const{
    return m_is_loyalty_reward_isSet;
}

bool OAITokens_RewardAvailabilityModel::is_is_loyalty_reward_Valid() const{
    return m_is_loyalty_reward_isValid;
}

bool OAITokens_RewardAvailabilityModel::isIsOffer() const {
    return m_is_offer;
}
void OAITokens_RewardAvailabilityModel::setIsOffer(const bool &is_offer) {
    m_is_offer = is_offer;
    m_is_offer_isSet = true;
}

bool OAITokens_RewardAvailabilityModel::is_is_offer_Set() const{
    return m_is_offer_isSet;
}

bool OAITokens_RewardAvailabilityModel::is_is_offer_Valid() const{
    return m_is_offer_isValid;
}

bool OAITokens_RewardAvailabilityModel::isOfferApplied() const {
    return m_offer_applied;
}
void OAITokens_RewardAvailabilityModel::setOfferApplied(const bool &offer_applied) {
    m_offer_applied = offer_applied;
    m_offer_applied_isSet = true;
}

bool OAITokens_RewardAvailabilityModel::is_offer_applied_Set() const{
    return m_offer_applied_isSet;
}

bool OAITokens_RewardAvailabilityModel::is_offer_applied_Valid() const{
    return m_offer_applied_isValid;
}

QList<OAIDestiny_Definitions_Records_DestinyRecordDefinition> OAITokens_RewardAvailabilityModel::getRecordDefinitions() const {
    return m_record_definitions;
}
void OAITokens_RewardAvailabilityModel::setRecordDefinitions(const QList<OAIDestiny_Definitions_Records_DestinyRecordDefinition> &record_definitions) {
    m_record_definitions = record_definitions;
    m_record_definitions_isSet = true;
}

bool OAITokens_RewardAvailabilityModel::is_record_definitions_Set() const{
    return m_record_definitions_isSet;
}

bool OAITokens_RewardAvailabilityModel::is_record_definitions_Valid() const{
    return m_record_definitions_isValid;
}

QDateTime OAITokens_RewardAvailabilityModel::getRedemptionEndDate() const {
    return m_redemption_end_date;
}
void OAITokens_RewardAvailabilityModel::setRedemptionEndDate(const QDateTime &redemption_end_date) {
    m_redemption_end_date = redemption_end_date;
    m_redemption_end_date_isSet = true;
}

bool OAITokens_RewardAvailabilityModel::is_redemption_end_date_Set() const{
    return m_redemption_end_date_isSet;
}

bool OAITokens_RewardAvailabilityModel::is_redemption_end_date_Valid() const{
    return m_redemption_end_date_isValid;
}

QDateTime OAITokens_RewardAvailabilityModel::getShopifyEndDate() const {
    return m_shopify_end_date;
}
void OAITokens_RewardAvailabilityModel::setShopifyEndDate(const QDateTime &shopify_end_date) {
    m_shopify_end_date = shopify_end_date;
    m_shopify_end_date_isSet = true;
}

bool OAITokens_RewardAvailabilityModel::is_shopify_end_date_Set() const{
    return m_shopify_end_date_isSet;
}

bool OAITokens_RewardAvailabilityModel::is_shopify_end_date_Valid() const{
    return m_shopify_end_date_isValid;
}

bool OAITokens_RewardAvailabilityModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collectible_definitions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_decrypted_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_earn_by_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_existing_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_offer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_loyalty_reward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_offer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_applied_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_definitions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopify_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITokens_RewardAvailabilityModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
