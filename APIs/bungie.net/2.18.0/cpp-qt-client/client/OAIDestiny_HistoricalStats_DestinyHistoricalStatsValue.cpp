/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue() {
    this->initializeModel();
}

OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::~OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue() {}

void OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::initializeModel() {

    m_activity_id_isSet = false;
    m_activity_id_isValid = false;

    m_basic_isSet = false;
    m_basic_isValid = false;

    m_pga_isSet = false;
    m_pga_isValid = false;

    m_stat_id_isSet = false;
    m_stat_id_isValid = false;

    m_weighted_isSet = false;
    m_weighted_isValid = false;
}

void OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::fromJsonObject(QJsonObject json) {

    m_activity_id_isValid = ::OpenAPI::fromJsonValue(m_activity_id, json[QString("activityId")]);
    m_activity_id_isSet = !json[QString("activityId")].isNull() && m_activity_id_isValid;

    m_basic_isValid = ::OpenAPI::fromJsonValue(m_basic, json[QString("basic")]);
    m_basic_isSet = !json[QString("basic")].isNull() && m_basic_isValid;

    m_pga_isValid = ::OpenAPI::fromJsonValue(m_pga, json[QString("pga")]);
    m_pga_isSet = !json[QString("pga")].isNull() && m_pga_isValid;

    m_stat_id_isValid = ::OpenAPI::fromJsonValue(m_stat_id, json[QString("statId")]);
    m_stat_id_isSet = !json[QString("statId")].isNull() && m_stat_id_isValid;

    m_weighted_isValid = ::OpenAPI::fromJsonValue(m_weighted, json[QString("weighted")]);
    m_weighted_isSet = !json[QString("weighted")].isNull() && m_weighted_isValid;
}

QString OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_id_isSet) {
        obj.insert(QString("activityId"), ::OpenAPI::toJsonValue(m_activity_id));
    }
    if (m_basic.isSet()) {
        obj.insert(QString("basic"), ::OpenAPI::toJsonValue(m_basic));
    }
    if (m_pga.isSet()) {
        obj.insert(QString("pga"), ::OpenAPI::toJsonValue(m_pga));
    }
    if (m_stat_id_isSet) {
        obj.insert(QString("statId"), ::OpenAPI::toJsonValue(m_stat_id));
    }
    if (m_weighted.isSet()) {
        obj.insert(QString("weighted"), ::OpenAPI::toJsonValue(m_weighted));
    }
    return obj;
}

qint64 OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::getActivityId() const {
    return m_activity_id;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::setActivityId(const qint64 &activity_id) {
    m_activity_id = activity_id;
    m_activity_id_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::is_activity_id_Set() const{
    return m_activity_id_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::is_activity_id_Valid() const{
    return m_activity_id_isValid;
}

OAIDestiny_HistoricalStats_DestinyHistoricalStatsValuePair OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::getBasic() const {
    return m_basic;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::setBasic(const OAIDestiny_HistoricalStats_DestinyHistoricalStatsValuePair &basic) {
    m_basic = basic;
    m_basic_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::is_basic_Set() const{
    return m_basic_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::is_basic_Valid() const{
    return m_basic_isValid;
}

OAIDestiny_HistoricalStats_DestinyHistoricalStatsValuePair OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::getPga() const {
    return m_pga;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::setPga(const OAIDestiny_HistoricalStats_DestinyHistoricalStatsValuePair &pga) {
    m_pga = pga;
    m_pga_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::is_pga_Set() const{
    return m_pga_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::is_pga_Valid() const{
    return m_pga_isValid;
}

QString OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::getStatId() const {
    return m_stat_id;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::setStatId(const QString &stat_id) {
    m_stat_id = stat_id;
    m_stat_id_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::is_stat_id_Set() const{
    return m_stat_id_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::is_stat_id_Valid() const{
    return m_stat_id_isValid;
}

OAIDestiny_HistoricalStats_DestinyHistoricalStatsValuePair OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::getWeighted() const {
    return m_weighted;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::setWeighted(const OAIDestiny_HistoricalStats_DestinyHistoricalStatsValuePair &weighted) {
    m_weighted = weighted;
    m_weighted_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::is_weighted_Set() const{
    return m_weighted_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::is_weighted_Valid() const{
    return m_weighted_isValid;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_basic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pga.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weighted.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
