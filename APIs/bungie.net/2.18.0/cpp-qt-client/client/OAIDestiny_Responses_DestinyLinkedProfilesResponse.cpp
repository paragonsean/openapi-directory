/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Responses_DestinyLinkedProfilesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Responses_DestinyLinkedProfilesResponse::OAIDestiny_Responses_DestinyLinkedProfilesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Responses_DestinyLinkedProfilesResponse::OAIDestiny_Responses_DestinyLinkedProfilesResponse() {
    this->initializeModel();
}

OAIDestiny_Responses_DestinyLinkedProfilesResponse::~OAIDestiny_Responses_DestinyLinkedProfilesResponse() {}

void OAIDestiny_Responses_DestinyLinkedProfilesResponse::initializeModel() {

    m_bnet_membership_isSet = false;
    m_bnet_membership_isValid = false;

    m_profiles_isSet = false;
    m_profiles_isValid = false;

    m_profiles_with_errors_isSet = false;
    m_profiles_with_errors_isValid = false;
}

void OAIDestiny_Responses_DestinyLinkedProfilesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Responses_DestinyLinkedProfilesResponse::fromJsonObject(QJsonObject json) {

    m_bnet_membership_isValid = ::OpenAPI::fromJsonValue(m_bnet_membership, json[QString("bnetMembership")]);
    m_bnet_membership_isSet = !json[QString("bnetMembership")].isNull() && m_bnet_membership_isValid;

    m_profiles_isValid = ::OpenAPI::fromJsonValue(m_profiles, json[QString("profiles")]);
    m_profiles_isSet = !json[QString("profiles")].isNull() && m_profiles_isValid;

    m_profiles_with_errors_isValid = ::OpenAPI::fromJsonValue(m_profiles_with_errors, json[QString("profilesWithErrors")]);
    m_profiles_with_errors_isSet = !json[QString("profilesWithErrors")].isNull() && m_profiles_with_errors_isValid;
}

QString OAIDestiny_Responses_DestinyLinkedProfilesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Responses_DestinyLinkedProfilesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_bnet_membership.isSet()) {
        obj.insert(QString("bnetMembership"), ::OpenAPI::toJsonValue(m_bnet_membership));
    }
    if (m_profiles.size() > 0) {
        obj.insert(QString("profiles"), ::OpenAPI::toJsonValue(m_profiles));
    }
    if (m_profiles_with_errors.size() > 0) {
        obj.insert(QString("profilesWithErrors"), ::OpenAPI::toJsonValue(m_profiles_with_errors));
    }
    return obj;
}

OAIUser_UserInfoCard OAIDestiny_Responses_DestinyLinkedProfilesResponse::getBnetMembership() const {
    return m_bnet_membership;
}
void OAIDestiny_Responses_DestinyLinkedProfilesResponse::setBnetMembership(const OAIUser_UserInfoCard &bnet_membership) {
    m_bnet_membership = bnet_membership;
    m_bnet_membership_isSet = true;
}

bool OAIDestiny_Responses_DestinyLinkedProfilesResponse::is_bnet_membership_Set() const{
    return m_bnet_membership_isSet;
}

bool OAIDestiny_Responses_DestinyLinkedProfilesResponse::is_bnet_membership_Valid() const{
    return m_bnet_membership_isValid;
}

QList<OAIDestiny_Responses_DestinyProfileUserInfoCard> OAIDestiny_Responses_DestinyLinkedProfilesResponse::getProfiles() const {
    return m_profiles;
}
void OAIDestiny_Responses_DestinyLinkedProfilesResponse::setProfiles(const QList<OAIDestiny_Responses_DestinyProfileUserInfoCard> &profiles) {
    m_profiles = profiles;
    m_profiles_isSet = true;
}

bool OAIDestiny_Responses_DestinyLinkedProfilesResponse::is_profiles_Set() const{
    return m_profiles_isSet;
}

bool OAIDestiny_Responses_DestinyLinkedProfilesResponse::is_profiles_Valid() const{
    return m_profiles_isValid;
}

QList<OAIDestiny_Responses_DestinyErrorProfile> OAIDestiny_Responses_DestinyLinkedProfilesResponse::getProfilesWithErrors() const {
    return m_profiles_with_errors;
}
void OAIDestiny_Responses_DestinyLinkedProfilesResponse::setProfilesWithErrors(const QList<OAIDestiny_Responses_DestinyErrorProfile> &profiles_with_errors) {
    m_profiles_with_errors = profiles_with_errors;
    m_profiles_with_errors_isSet = true;
}

bool OAIDestiny_Responses_DestinyLinkedProfilesResponse::is_profiles_with_errors_Set() const{
    return m_profiles_with_errors_isSet;
}

bool OAIDestiny_Responses_DestinyLinkedProfilesResponse::is_profiles_with_errors_Valid() const{
    return m_profiles_with_errors_isValid;
}

bool OAIDestiny_Responses_DestinyLinkedProfilesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bnet_membership.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_profiles_with_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Responses_DestinyLinkedProfilesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
