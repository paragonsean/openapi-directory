/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::~OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition() {}

void OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::initializeModel() {

    m_display_title_isSet = false;
    m_display_title_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_minimum_unlock_points_used_requirement_isSet = false;
    m_minimum_unlock_points_used_requirement_isValid = false;

    m_progress_requirement_message_isSet = false;
    m_progress_requirement_message_isValid = false;

    m_tier_hash_isSet = false;
    m_tier_hash_isValid = false;
}

void OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::fromJsonObject(QJsonObject json) {

    m_display_title_isValid = ::OpenAPI::fromJsonValue(m_display_title, json[QString("displayTitle")]);
    m_display_title_isSet = !json[QString("displayTitle")].isNull() && m_display_title_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_minimum_unlock_points_used_requirement_isValid = ::OpenAPI::fromJsonValue(m_minimum_unlock_points_used_requirement, json[QString("minimumUnlockPointsUsedRequirement")]);
    m_minimum_unlock_points_used_requirement_isSet = !json[QString("minimumUnlockPointsUsedRequirement")].isNull() && m_minimum_unlock_points_used_requirement_isValid;

    m_progress_requirement_message_isValid = ::OpenAPI::fromJsonValue(m_progress_requirement_message, json[QString("progressRequirementMessage")]);
    m_progress_requirement_message_isSet = !json[QString("progressRequirementMessage")].isNull() && m_progress_requirement_message_isValid;

    m_tier_hash_isValid = ::OpenAPI::fromJsonValue(m_tier_hash, json[QString("tierHash")]);
    m_tier_hash_isSet = !json[QString("tierHash")].isNull() && m_tier_hash_isValid;
}

QString OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_display_title_isSet) {
        obj.insert(QString("displayTitle"), ::OpenAPI::toJsonValue(m_display_title));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_minimum_unlock_points_used_requirement_isSet) {
        obj.insert(QString("minimumUnlockPointsUsedRequirement"), ::OpenAPI::toJsonValue(m_minimum_unlock_points_used_requirement));
    }
    if (m_progress_requirement_message_isSet) {
        obj.insert(QString("progressRequirementMessage"), ::OpenAPI::toJsonValue(m_progress_requirement_message));
    }
    if (m_tier_hash_isSet) {
        obj.insert(QString("tierHash"), ::OpenAPI::toJsonValue(m_tier_hash));
    }
    return obj;
}

QString OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::getDisplayTitle() const {
    return m_display_title;
}
void OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::setDisplayTitle(const QString &display_title) {
    m_display_title = display_title;
    m_display_title_isSet = true;
}

bool OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::is_display_title_Set() const{
    return m_display_title_isSet;
}

bool OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::is_display_title_Valid() const{
    return m_display_title_isValid;
}

QList<OAIDestiny_Definitions_Artifacts_DestinyArtifactTierItemDefinition> OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::getItems() const {
    return m_items;
}
void OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::setItems(const QList<OAIDestiny_Definitions_Artifacts_DestinyArtifactTierItemDefinition> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::is_items_Set() const{
    return m_items_isSet;
}

bool OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::is_items_Valid() const{
    return m_items_isValid;
}

qint32 OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::getMinimumUnlockPointsUsedRequirement() const {
    return m_minimum_unlock_points_used_requirement;
}
void OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::setMinimumUnlockPointsUsedRequirement(const qint32 &minimum_unlock_points_used_requirement) {
    m_minimum_unlock_points_used_requirement = minimum_unlock_points_used_requirement;
    m_minimum_unlock_points_used_requirement_isSet = true;
}

bool OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::is_minimum_unlock_points_used_requirement_Set() const{
    return m_minimum_unlock_points_used_requirement_isSet;
}

bool OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::is_minimum_unlock_points_used_requirement_Valid() const{
    return m_minimum_unlock_points_used_requirement_isValid;
}

QString OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::getProgressRequirementMessage() const {
    return m_progress_requirement_message;
}
void OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::setProgressRequirementMessage(const QString &progress_requirement_message) {
    m_progress_requirement_message = progress_requirement_message;
    m_progress_requirement_message_isSet = true;
}

bool OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::is_progress_requirement_message_Set() const{
    return m_progress_requirement_message_isSet;
}

bool OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::is_progress_requirement_message_Valid() const{
    return m_progress_requirement_message_isValid;
}

qint32 OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::getTierHash() const {
    return m_tier_hash;
}
void OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::setTierHash(const qint32 &tier_hash) {
    m_tier_hash = tier_hash;
    m_tier_hash_isSet = true;
}

bool OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::is_tier_hash_Set() const{
    return m_tier_hash_isSet;
}

bool OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::is_tier_hash_Valid() const{
    return m_tier_hash_isValid;
}

bool OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_unlock_points_used_requirement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_requirement_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_Artifacts_DestinyArtifactTierDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
