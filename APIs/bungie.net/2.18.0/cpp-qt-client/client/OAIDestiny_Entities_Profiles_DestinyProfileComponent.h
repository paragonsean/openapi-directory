/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Entities_Profiles_DestinyProfileComponent.h
 *
 * The most essential summary information about a Profile (in Destiny 1, we called these \&quot;Accounts\&quot;).
 */

#ifndef OAIDestiny_Entities_Profiles_DestinyProfileComponent_H
#define OAIDestiny_Entities_Profiles_DestinyProfileComponent_H

#include <QJsonObject>

#include "OAIUser_UserInfoCard.h"
#include <QDateTime>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUser_UserInfoCard;

class OAIDestiny_Entities_Profiles_DestinyProfileComponent : public OAIObject {
public:
    OAIDestiny_Entities_Profiles_DestinyProfileComponent();
    OAIDestiny_Entities_Profiles_DestinyProfileComponent(QString json);
    ~OAIDestiny_Entities_Profiles_DestinyProfileComponent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getActiveEventCardHash() const;
    void setActiveEventCardHash(const qint32 &active_event_card_hash);
    bool is_active_event_card_hash_Set() const;
    bool is_active_event_card_hash_Valid() const;

    QList<qint64> getCharacterIds() const;
    void setCharacterIds(const QList<qint64> &character_ids);
    bool is_character_ids_Set() const;
    bool is_character_ids_Valid() const;

    qint32 getCurrentGuardianRank() const;
    void setCurrentGuardianRank(const qint32 &current_guardian_rank);
    bool is_current_guardian_rank_Set() const;
    bool is_current_guardian_rank_Valid() const;

    qint32 getCurrentSeasonHash() const;
    void setCurrentSeasonHash(const qint32 &current_season_hash);
    bool is_current_season_hash_Set() const;
    bool is_current_season_hash_Valid() const;

    qint32 getCurrentSeasonRewardPowerCap() const;
    void setCurrentSeasonRewardPowerCap(const qint32 &current_season_reward_power_cap);
    bool is_current_season_reward_power_cap_Set() const;
    bool is_current_season_reward_power_cap_Valid() const;

    QDateTime getDateLastPlayed() const;
    void setDateLastPlayed(const QDateTime &date_last_played);
    bool is_date_last_played_Set() const;
    bool is_date_last_played_Valid() const;

    QList<qint32> getEventCardHashesOwned() const;
    void setEventCardHashesOwned(const QList<qint32> &event_card_hashes_owned);
    bool is_event_card_hashes_owned_Set() const;
    bool is_event_card_hashes_owned_Valid() const;

    qint32 getLifetimeHighestGuardianRank() const;
    void setLifetimeHighestGuardianRank(const qint32 &lifetime_highest_guardian_rank);
    bool is_lifetime_highest_guardian_rank_Set() const;
    bool is_lifetime_highest_guardian_rank_Valid() const;

    QList<qint32> getSeasonHashes() const;
    void setSeasonHashes(const QList<qint32> &season_hashes);
    bool is_season_hashes_Set() const;
    bool is_season_hashes_Valid() const;

    OAIUser_UserInfoCard getUserInfo() const;
    void setUserInfo(const OAIUser_UserInfoCard &user_info);
    bool is_user_info_Set() const;
    bool is_user_info_Valid() const;

    qint32 getVersionsOwned() const;
    void setVersionsOwned(const qint32 &versions_owned);
    bool is_versions_owned_Set() const;
    bool is_versions_owned_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_active_event_card_hash;
    bool m_active_event_card_hash_isSet;
    bool m_active_event_card_hash_isValid;

    QList<qint64> m_character_ids;
    bool m_character_ids_isSet;
    bool m_character_ids_isValid;

    qint32 m_current_guardian_rank;
    bool m_current_guardian_rank_isSet;
    bool m_current_guardian_rank_isValid;

    qint32 m_current_season_hash;
    bool m_current_season_hash_isSet;
    bool m_current_season_hash_isValid;

    qint32 m_current_season_reward_power_cap;
    bool m_current_season_reward_power_cap_isSet;
    bool m_current_season_reward_power_cap_isValid;

    QDateTime m_date_last_played;
    bool m_date_last_played_isSet;
    bool m_date_last_played_isValid;

    QList<qint32> m_event_card_hashes_owned;
    bool m_event_card_hashes_owned_isSet;
    bool m_event_card_hashes_owned_isValid;

    qint32 m_lifetime_highest_guardian_rank;
    bool m_lifetime_highest_guardian_rank_isSet;
    bool m_lifetime_highest_guardian_rank_isValid;

    QList<qint32> m_season_hashes;
    bool m_season_hashes_isSet;
    bool m_season_hashes_isValid;

    OAIUser_UserInfoCard m_user_info;
    bool m_user_info_isSet;
    bool m_user_info_isValid;

    qint32 m_versions_owned;
    bool m_versions_owned_isSet;
    bool m_versions_owned_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Entities_Profiles_DestinyProfileComponent)

#endif // OAIDestiny_Entities_Profiles_DestinyProfileComponent_H
