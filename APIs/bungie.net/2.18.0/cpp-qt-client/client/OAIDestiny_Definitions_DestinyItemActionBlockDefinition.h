/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyItemActionBlockDefinition.h
 *
 * If an item can have an action performed on it (like \&quot;Dismantle\&quot;), it will be defined here if you care.
 */

#ifndef OAIDestiny_Definitions_DestinyItemActionBlockDefinition_H
#define OAIDestiny_Definitions_DestinyItemActionBlockDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_DestinyItemActionRequiredItemDefinition.h"
#include "OAIDestiny_Definitions_DestinyProgressionRewardDefinition.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_DestinyProgressionRewardDefinition;
class OAIDestiny_Definitions_DestinyItemActionRequiredItemDefinition;

class OAIDestiny_Definitions_DestinyItemActionBlockDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyItemActionBlockDefinition();
    OAIDestiny_Definitions_DestinyItemActionBlockDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyItemActionBlockDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getActionTypeLabel() const;
    void setActionTypeLabel(const QString &action_type_label);
    bool is_action_type_label_Set() const;
    bool is_action_type_label_Valid() const;

    bool isConsumeEntireStack() const;
    void setConsumeEntireStack(const bool &consume_entire_stack);
    bool is_consume_entire_stack_Set() const;
    bool is_consume_entire_stack_Valid() const;

    bool isDeleteOnAction() const;
    void setDeleteOnAction(const bool &delete_on_action);
    bool is_delete_on_action_Set() const;
    bool is_delete_on_action_Valid() const;

    bool isIsPositive() const;
    void setIsPositive(const bool &is_positive);
    bool is_is_positive_Set() const;
    bool is_is_positive_Valid() const;

    QString getOverlayIcon() const;
    void setOverlayIcon(const QString &overlay_icon);
    bool is_overlay_icon_Set() const;
    bool is_overlay_icon_Valid() const;

    QString getOverlayScreenName() const;
    void setOverlayScreenName(const QString &overlay_screen_name);
    bool is_overlay_screen_name_Set() const;
    bool is_overlay_screen_name_Valid() const;

    QList<OAIDestiny_Definitions_DestinyProgressionRewardDefinition> getProgressionRewards() const;
    void setProgressionRewards(const QList<OAIDestiny_Definitions_DestinyProgressionRewardDefinition> &progression_rewards);
    bool is_progression_rewards_Set() const;
    bool is_progression_rewards_Valid() const;

    qint32 getRequiredCooldownHash() const;
    void setRequiredCooldownHash(const qint32 &required_cooldown_hash);
    bool is_required_cooldown_hash_Set() const;
    bool is_required_cooldown_hash_Valid() const;

    qint32 getRequiredCooldownSeconds() const;
    void setRequiredCooldownSeconds(const qint32 &required_cooldown_seconds);
    bool is_required_cooldown_seconds_Set() const;
    bool is_required_cooldown_seconds_Valid() const;

    QList<OAIDestiny_Definitions_DestinyItemActionRequiredItemDefinition> getRequiredItems() const;
    void setRequiredItems(const QList<OAIDestiny_Definitions_DestinyItemActionRequiredItemDefinition> &required_items);
    bool is_required_items_Set() const;
    bool is_required_items_Valid() const;

    QString getRequiredLocation() const;
    void setRequiredLocation(const QString &required_location);
    bool is_required_location_Set() const;
    bool is_required_location_Valid() const;

    bool isUseOnAcquire() const;
    void setUseOnAcquire(const bool &use_on_acquire);
    bool is_use_on_acquire_Set() const;
    bool is_use_on_acquire_Valid() const;

    QString getVerbDescription() const;
    void setVerbDescription(const QString &verb_description);
    bool is_verb_description_Set() const;
    bool is_verb_description_Valid() const;

    QString getVerbName() const;
    void setVerbName(const QString &verb_name);
    bool is_verb_name_Set() const;
    bool is_verb_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_action_type_label;
    bool m_action_type_label_isSet;
    bool m_action_type_label_isValid;

    bool m_consume_entire_stack;
    bool m_consume_entire_stack_isSet;
    bool m_consume_entire_stack_isValid;

    bool m_delete_on_action;
    bool m_delete_on_action_isSet;
    bool m_delete_on_action_isValid;

    bool m_is_positive;
    bool m_is_positive_isSet;
    bool m_is_positive_isValid;

    QString m_overlay_icon;
    bool m_overlay_icon_isSet;
    bool m_overlay_icon_isValid;

    QString m_overlay_screen_name;
    bool m_overlay_screen_name_isSet;
    bool m_overlay_screen_name_isValid;

    QList<OAIDestiny_Definitions_DestinyProgressionRewardDefinition> m_progression_rewards;
    bool m_progression_rewards_isSet;
    bool m_progression_rewards_isValid;

    qint32 m_required_cooldown_hash;
    bool m_required_cooldown_hash_isSet;
    bool m_required_cooldown_hash_isValid;

    qint32 m_required_cooldown_seconds;
    bool m_required_cooldown_seconds_isSet;
    bool m_required_cooldown_seconds_isValid;

    QList<OAIDestiny_Definitions_DestinyItemActionRequiredItemDefinition> m_required_items;
    bool m_required_items_isSet;
    bool m_required_items_isValid;

    QString m_required_location;
    bool m_required_location_isSet;
    bool m_required_location_isValid;

    bool m_use_on_acquire;
    bool m_use_on_acquire_isSet;
    bool m_use_on_acquire_isValid;

    QString m_verb_description;
    bool m_verb_description_isSet;
    bool m_verb_description_isValid;

    QString m_verb_name;
    bool m_verb_name_isSet;
    bool m_verb_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyItemActionBlockDefinition)

#endif // OAIDestiny_Definitions_DestinyItemActionBlockDefinition_H
