/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyActivityDefinition.h
 *
 * The static data about Activities in Destiny 2.  Note that an Activity must be combined with an ActivityMode to know - from a Gameplay perspective - what the user is \&quot;Playing\&quot;.  In most PvE activities, this is fairly straightforward. A Story Activity can only be played in the Story Activity Mode.  However, in PvP activities, the Activity alone only tells you the map being played, or the Playlist that the user chose to enter. You&#39;ll need to know the Activity Mode they&#39;re playing to know that they&#39;re playing Mode X on Map Y.  Activity Definitions tell a great deal of information about what *could* be relevant to a user: what rewards they can earn, what challenges could be performed, what modifiers could be applied. To figure out which of these properties is actually live, you&#39;ll need to combine the definition with \&quot;Live\&quot; data from one of the Destiny endpoints.  Activities also have Activity Types, but unfortunately in Destiny 2 these are even less reliable of a source of information than they were in Destiny 1. I will be looking into ways to provide more reliable sources for type information as time goes on, but for now we&#39;re going to have to deal with the limitations. See DestinyActivityTypeDefinition for more information.
 */

#ifndef OAIDestiny_Definitions_DestinyActivityDefinition_H
#define OAIDestiny_Definitions_DestinyActivityDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Constants_DestinyEnvironmentLocationMapping.h"
#include "OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition.h"
#include "OAIDestiny_Definitions_DestinyActivityChallengeDefinition.h"
#include "OAIDestiny_Definitions_DestinyActivityGraphListEntryDefinition.h"
#include "OAIDestiny_Definitions_DestinyActivityGuidedBlockDefinition.h"
#include "OAIDestiny_Definitions_DestinyActivityInsertionPointDefinition.h"
#include "OAIDestiny_Definitions_DestinyActivityLoadoutRequirementSet.h"
#include "OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition.h"
#include "OAIDestiny_Definitions_DestinyActivityModifierReferenceDefinition.h"
#include "OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition.h"
#include "OAIDestiny_Definitions_DestinyActivityRewardDefinition.h"
#include "OAIDestiny_Definitions_DestinyActivityUnlockStringDefinition.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_DestinyActivityGraphListEntryDefinition;
class OAIDestiny_Constants_DestinyEnvironmentLocationMapping;
class OAIDestiny_Definitions_DestinyActivityChallengeDefinition;
class OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition;
class OAIDestiny_Definitions_DestinyActivityGuidedBlockDefinition;
class OAIDestiny_Definitions_DestinyActivityInsertionPointDefinition;
class OAIDestiny_Definitions_DestinyActivityLoadoutRequirementSet;
class OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition;
class OAIDestiny_Definitions_DestinyActivityModifierReferenceDefinition;
class OAIDestiny_Definitions_DestinyActivityUnlockStringDefinition;
class OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition;
class OAIDestiny_Definitions_DestinyActivityRewardDefinition;

class OAIDestiny_Definitions_DestinyActivityDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyActivityDefinition();
    OAIDestiny_Definitions_DestinyActivityDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyActivityDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIDestiny_Definitions_DestinyActivityGraphListEntryDefinition> getActivityGraphList() const;
    void setActivityGraphList(const QList<OAIDestiny_Definitions_DestinyActivityGraphListEntryDefinition> &activity_graph_list);
    bool is_activity_graph_list_Set() const;
    bool is_activity_graph_list_Valid() const;

    qint32 getActivityLightLevel() const;
    void setActivityLightLevel(const qint32 &activity_light_level);
    bool is_activity_light_level_Set() const;
    bool is_activity_light_level_Valid() const;

    QList<OAIDestiny_Constants_DestinyEnvironmentLocationMapping> getActivityLocationMappings() const;
    void setActivityLocationMappings(const QList<OAIDestiny_Constants_DestinyEnvironmentLocationMapping> &activity_location_mappings);
    bool is_activity_location_mappings_Set() const;
    bool is_activity_location_mappings_Valid() const;

    QList<qint32> getActivityModeHashes() const;
    void setActivityModeHashes(const QList<qint32> &activity_mode_hashes);
    bool is_activity_mode_hashes_Set() const;
    bool is_activity_mode_hashes_Valid() const;

    QList<qint32> getActivityModeTypes() const;
    void setActivityModeTypes(const QList<qint32> &activity_mode_types);
    bool is_activity_mode_types_Set() const;
    bool is_activity_mode_types_Valid() const;

    qint32 getActivityTypeHash() const;
    void setActivityTypeHash(const qint32 &activity_type_hash);
    bool is_activity_type_hash_Set() const;
    bool is_activity_type_hash_Valid() const;

    QList<OAIDestiny_Definitions_DestinyActivityChallengeDefinition> getChallenges() const;
    void setChallenges(const QList<OAIDestiny_Definitions_DestinyActivityChallengeDefinition> &challenges);
    bool is_challenges_Set() const;
    bool is_challenges_Valid() const;

    qint32 getDestinationHash() const;
    void setDestinationHash(const qint32 &destination_hash);
    bool is_destination_hash_Set() const;
    bool is_destination_hash_Valid() const;

    qint32 getDirectActivityModeHash() const;
    void setDirectActivityModeHash(const qint32 &direct_activity_mode_hash);
    bool is_direct_activity_mode_hash_Set() const;
    bool is_direct_activity_mode_hash_Valid() const;

    qint32 getDirectActivityModeType() const;
    void setDirectActivityModeType(const qint32 &direct_activity_mode_type);
    bool is_direct_activity_mode_type_Set() const;
    bool is_direct_activity_mode_type_Valid() const;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition getDisplayProperties() const;
    void setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties);
    bool is_display_properties_Set() const;
    bool is_display_properties_Valid() const;

    OAIDestiny_Definitions_DestinyActivityGuidedBlockDefinition getGuidedGame() const;
    void setGuidedGame(const OAIDestiny_Definitions_DestinyActivityGuidedBlockDefinition &guided_game);
    bool is_guided_game_Set() const;
    bool is_guided_game_Valid() const;

    qint32 getHash() const;
    void setHash(const qint32 &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    qint32 getIndex() const;
    void setIndex(const qint32 &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    QList<OAIDestiny_Definitions_DestinyActivityInsertionPointDefinition> getInsertionPoints() const;
    void setInsertionPoints(const QList<OAIDestiny_Definitions_DestinyActivityInsertionPointDefinition> &insertion_points);
    bool is_insertion_points_Set() const;
    bool is_insertion_points_Valid() const;

    bool isIsPlaylist() const;
    void setIsPlaylist(const bool &is_playlist);
    bool is_is_playlist_Set() const;
    bool is_is_playlist_Valid() const;

    bool isIsPvP() const;
    void setIsPvP(const bool &is_pv_p);
    bool is_is_pv_p_Set() const;
    bool is_is_pv_p_Valid() const;

    QList<OAIDestiny_Definitions_DestinyActivityLoadoutRequirementSet> getLoadouts() const;
    void setLoadouts(const QList<OAIDestiny_Definitions_DestinyActivityLoadoutRequirementSet> &loadouts);
    bool is_loadouts_Set() const;
    bool is_loadouts_Valid() const;

    OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition getMatchmaking() const;
    void setMatchmaking(const OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition &matchmaking);
    bool is_matchmaking_Set() const;
    bool is_matchmaking_Valid() const;

    QList<OAIDestiny_Definitions_DestinyActivityModifierReferenceDefinition> getModifiers() const;
    void setModifiers(const QList<OAIDestiny_Definitions_DestinyActivityModifierReferenceDefinition> &modifiers);
    bool is_modifiers_Set() const;
    bool is_modifiers_Valid() const;

    QList<OAIDestiny_Definitions_DestinyActivityUnlockStringDefinition> getOptionalUnlockStrings() const;
    void setOptionalUnlockStrings(const QList<OAIDestiny_Definitions_DestinyActivityUnlockStringDefinition> &optional_unlock_strings);
    bool is_optional_unlock_strings_Set() const;
    bool is_optional_unlock_strings_Valid() const;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition getOriginalDisplayProperties() const;
    void setOriginalDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &original_display_properties);
    bool is_original_display_properties_Set() const;
    bool is_original_display_properties_Valid() const;

    QString getPgcrImage() const;
    void setPgcrImage(const QString &pgcr_image);
    bool is_pgcr_image_Set() const;
    bool is_pgcr_image_Valid() const;

    qint32 getPlaceHash() const;
    void setPlaceHash(const qint32 &place_hash);
    bool is_place_hash_Set() const;
    bool is_place_hash_Valid() const;

    QList<OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition> getPlaylistItems() const;
    void setPlaylistItems(const QList<OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition> &playlist_items);
    bool is_playlist_items_Set() const;
    bool is_playlist_items_Valid() const;

    bool isRedacted() const;
    void setRedacted(const bool &redacted);
    bool is_redacted_Set() const;
    bool is_redacted_Valid() const;

    QString getReleaseIcon() const;
    void setReleaseIcon(const QString &release_icon);
    bool is_release_icon_Set() const;
    bool is_release_icon_Valid() const;

    qint32 getReleaseTime() const;
    void setReleaseTime(const qint32 &release_time);
    bool is_release_time_Set() const;
    bool is_release_time_Valid() const;

    QList<OAIDestiny_Definitions_DestinyActivityRewardDefinition> getRewards() const;
    void setRewards(const QList<OAIDestiny_Definitions_DestinyActivityRewardDefinition> &rewards);
    bool is_rewards_Set() const;
    bool is_rewards_Valid() const;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition getSelectionScreenDisplayProperties() const;
    void setSelectionScreenDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &selection_screen_display_properties);
    bool is_selection_screen_display_properties_Set() const;
    bool is_selection_screen_display_properties_Valid() const;

    qint32 getTier() const;
    void setTier(const qint32 &tier);
    bool is_tier_Set() const;
    bool is_tier_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIDestiny_Definitions_DestinyActivityGraphListEntryDefinition> m_activity_graph_list;
    bool m_activity_graph_list_isSet;
    bool m_activity_graph_list_isValid;

    qint32 m_activity_light_level;
    bool m_activity_light_level_isSet;
    bool m_activity_light_level_isValid;

    QList<OAIDestiny_Constants_DestinyEnvironmentLocationMapping> m_activity_location_mappings;
    bool m_activity_location_mappings_isSet;
    bool m_activity_location_mappings_isValid;

    QList<qint32> m_activity_mode_hashes;
    bool m_activity_mode_hashes_isSet;
    bool m_activity_mode_hashes_isValid;

    QList<qint32> m_activity_mode_types;
    bool m_activity_mode_types_isSet;
    bool m_activity_mode_types_isValid;

    qint32 m_activity_type_hash;
    bool m_activity_type_hash_isSet;
    bool m_activity_type_hash_isValid;

    QList<OAIDestiny_Definitions_DestinyActivityChallengeDefinition> m_challenges;
    bool m_challenges_isSet;
    bool m_challenges_isValid;

    qint32 m_destination_hash;
    bool m_destination_hash_isSet;
    bool m_destination_hash_isValid;

    qint32 m_direct_activity_mode_hash;
    bool m_direct_activity_mode_hash_isSet;
    bool m_direct_activity_mode_hash_isValid;

    qint32 m_direct_activity_mode_type;
    bool m_direct_activity_mode_type_isSet;
    bool m_direct_activity_mode_type_isValid;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition m_display_properties;
    bool m_display_properties_isSet;
    bool m_display_properties_isValid;

    OAIDestiny_Definitions_DestinyActivityGuidedBlockDefinition m_guided_game;
    bool m_guided_game_isSet;
    bool m_guided_game_isValid;

    qint32 m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    qint32 m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    QList<OAIDestiny_Definitions_DestinyActivityInsertionPointDefinition> m_insertion_points;
    bool m_insertion_points_isSet;
    bool m_insertion_points_isValid;

    bool m_is_playlist;
    bool m_is_playlist_isSet;
    bool m_is_playlist_isValid;

    bool m_is_pv_p;
    bool m_is_pv_p_isSet;
    bool m_is_pv_p_isValid;

    QList<OAIDestiny_Definitions_DestinyActivityLoadoutRequirementSet> m_loadouts;
    bool m_loadouts_isSet;
    bool m_loadouts_isValid;

    OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition m_matchmaking;
    bool m_matchmaking_isSet;
    bool m_matchmaking_isValid;

    QList<OAIDestiny_Definitions_DestinyActivityModifierReferenceDefinition> m_modifiers;
    bool m_modifiers_isSet;
    bool m_modifiers_isValid;

    QList<OAIDestiny_Definitions_DestinyActivityUnlockStringDefinition> m_optional_unlock_strings;
    bool m_optional_unlock_strings_isSet;
    bool m_optional_unlock_strings_isValid;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition m_original_display_properties;
    bool m_original_display_properties_isSet;
    bool m_original_display_properties_isValid;

    QString m_pgcr_image;
    bool m_pgcr_image_isSet;
    bool m_pgcr_image_isValid;

    qint32 m_place_hash;
    bool m_place_hash_isSet;
    bool m_place_hash_isValid;

    QList<OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition> m_playlist_items;
    bool m_playlist_items_isSet;
    bool m_playlist_items_isValid;

    bool m_redacted;
    bool m_redacted_isSet;
    bool m_redacted_isValid;

    QString m_release_icon;
    bool m_release_icon_isSet;
    bool m_release_icon_isValid;

    qint32 m_release_time;
    bool m_release_time_isSet;
    bool m_release_time_isValid;

    QList<OAIDestiny_Definitions_DestinyActivityRewardDefinition> m_rewards;
    bool m_rewards_isSet;
    bool m_rewards_isValid;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition m_selection_screen_display_properties;
    bool m_selection_screen_display_properties_isSet;
    bool m_selection_screen_display_properties_isValid;

    qint32 m_tier;
    bool m_tier_isSet;
    bool m_tier_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyActivityDefinition)

#endif // OAIDestiny_Definitions_DestinyActivityDefinition_H
