/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfig_ClanBanner_ClanBannerDecal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfig_ClanBanner_ClanBannerDecal::OAIConfig_ClanBanner_ClanBannerDecal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfig_ClanBanner_ClanBannerDecal::OAIConfig_ClanBanner_ClanBannerDecal() {
    this->initializeModel();
}

OAIConfig_ClanBanner_ClanBannerDecal::~OAIConfig_ClanBanner_ClanBannerDecal() {}

void OAIConfig_ClanBanner_ClanBannerDecal::initializeModel() {

    m_background_path_isSet = false;
    m_background_path_isValid = false;

    m_foreground_path_isSet = false;
    m_foreground_path_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;
}

void OAIConfig_ClanBanner_ClanBannerDecal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfig_ClanBanner_ClanBannerDecal::fromJsonObject(QJsonObject json) {

    m_background_path_isValid = ::OpenAPI::fromJsonValue(m_background_path, json[QString("backgroundPath")]);
    m_background_path_isSet = !json[QString("backgroundPath")].isNull() && m_background_path_isValid;

    m_foreground_path_isValid = ::OpenAPI::fromJsonValue(m_foreground_path, json[QString("foregroundPath")]);
    m_foreground_path_isSet = !json[QString("foregroundPath")].isNull() && m_foreground_path_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;
}

QString OAIConfig_ClanBanner_ClanBannerDecal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfig_ClanBanner_ClanBannerDecal::asJsonObject() const {
    QJsonObject obj;
    if (m_background_path_isSet) {
        obj.insert(QString("backgroundPath"), ::OpenAPI::toJsonValue(m_background_path));
    }
    if (m_foreground_path_isSet) {
        obj.insert(QString("foregroundPath"), ::OpenAPI::toJsonValue(m_foreground_path));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    return obj;
}

QString OAIConfig_ClanBanner_ClanBannerDecal::getBackgroundPath() const {
    return m_background_path;
}
void OAIConfig_ClanBanner_ClanBannerDecal::setBackgroundPath(const QString &background_path) {
    m_background_path = background_path;
    m_background_path_isSet = true;
}

bool OAIConfig_ClanBanner_ClanBannerDecal::is_background_path_Set() const{
    return m_background_path_isSet;
}

bool OAIConfig_ClanBanner_ClanBannerDecal::is_background_path_Valid() const{
    return m_background_path_isValid;
}

QString OAIConfig_ClanBanner_ClanBannerDecal::getForegroundPath() const {
    return m_foreground_path;
}
void OAIConfig_ClanBanner_ClanBannerDecal::setForegroundPath(const QString &foreground_path) {
    m_foreground_path = foreground_path;
    m_foreground_path_isSet = true;
}

bool OAIConfig_ClanBanner_ClanBannerDecal::is_foreground_path_Set() const{
    return m_foreground_path_isSet;
}

bool OAIConfig_ClanBanner_ClanBannerDecal::is_foreground_path_Valid() const{
    return m_foreground_path_isValid;
}

QString OAIConfig_ClanBanner_ClanBannerDecal::getIdentifier() const {
    return m_identifier;
}
void OAIConfig_ClanBanner_ClanBannerDecal::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIConfig_ClanBanner_ClanBannerDecal::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIConfig_ClanBanner_ClanBannerDecal::is_identifier_Valid() const{
    return m_identifier_isValid;
}

bool OAIConfig_ClanBanner_ClanBannerDecal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foreground_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfig_ClanBanner_ClanBannerDecal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
