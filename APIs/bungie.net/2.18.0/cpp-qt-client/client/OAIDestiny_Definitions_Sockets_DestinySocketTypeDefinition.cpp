/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::~OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition() {}

void OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::initializeModel() {

    m_always_randomize_sockets_isSet = false;
    m_always_randomize_sockets_isValid = false;

    m_avoid_duplicates_on_initialization_isSet = false;
    m_avoid_duplicates_on_initialization_isValid = false;

    m_currency_scalars_isSet = false;
    m_currency_scalars_isValid = false;

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_hide_duplicate_reusable_plugs_isSet = false;
    m_hide_duplicate_reusable_plugs_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_insert_action_isSet = false;
    m_insert_action_isValid = false;

    m_is_preview_enabled_isSet = false;
    m_is_preview_enabled_isValid = false;

    m_overrides_ui_appearance_isSet = false;
    m_overrides_ui_appearance_isValid = false;

    m_plug_whitelist_isSet = false;
    m_plug_whitelist_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;

    m_socket_category_hash_isSet = false;
    m_socket_category_hash_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::fromJsonObject(QJsonObject json) {

    m_always_randomize_sockets_isValid = ::OpenAPI::fromJsonValue(m_always_randomize_sockets, json[QString("alwaysRandomizeSockets")]);
    m_always_randomize_sockets_isSet = !json[QString("alwaysRandomizeSockets")].isNull() && m_always_randomize_sockets_isValid;

    m_avoid_duplicates_on_initialization_isValid = ::OpenAPI::fromJsonValue(m_avoid_duplicates_on_initialization, json[QString("avoidDuplicatesOnInitialization")]);
    m_avoid_duplicates_on_initialization_isSet = !json[QString("avoidDuplicatesOnInitialization")].isNull() && m_avoid_duplicates_on_initialization_isValid;

    m_currency_scalars_isValid = ::OpenAPI::fromJsonValue(m_currency_scalars, json[QString("currencyScalars")]);
    m_currency_scalars_isSet = !json[QString("currencyScalars")].isNull() && m_currency_scalars_isValid;

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_hide_duplicate_reusable_plugs_isValid = ::OpenAPI::fromJsonValue(m_hide_duplicate_reusable_plugs, json[QString("hideDuplicateReusablePlugs")]);
    m_hide_duplicate_reusable_plugs_isSet = !json[QString("hideDuplicateReusablePlugs")].isNull() && m_hide_duplicate_reusable_plugs_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_insert_action_isValid = ::OpenAPI::fromJsonValue(m_insert_action, json[QString("insertAction")]);
    m_insert_action_isSet = !json[QString("insertAction")].isNull() && m_insert_action_isValid;

    m_is_preview_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_preview_enabled, json[QString("isPreviewEnabled")]);
    m_is_preview_enabled_isSet = !json[QString("isPreviewEnabled")].isNull() && m_is_preview_enabled_isValid;

    m_overrides_ui_appearance_isValid = ::OpenAPI::fromJsonValue(m_overrides_ui_appearance, json[QString("overridesUiAppearance")]);
    m_overrides_ui_appearance_isSet = !json[QString("overridesUiAppearance")].isNull() && m_overrides_ui_appearance_isValid;

    m_plug_whitelist_isValid = ::OpenAPI::fromJsonValue(m_plug_whitelist, json[QString("plugWhitelist")]);
    m_plug_whitelist_isSet = !json[QString("plugWhitelist")].isNull() && m_plug_whitelist_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;

    m_socket_category_hash_isValid = ::OpenAPI::fromJsonValue(m_socket_category_hash, json[QString("socketCategoryHash")]);
    m_socket_category_hash_isSet = !json[QString("socketCategoryHash")].isNull() && m_socket_category_hash_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_always_randomize_sockets_isSet) {
        obj.insert(QString("alwaysRandomizeSockets"), ::OpenAPI::toJsonValue(m_always_randomize_sockets));
    }
    if (m_avoid_duplicates_on_initialization_isSet) {
        obj.insert(QString("avoidDuplicatesOnInitialization"), ::OpenAPI::toJsonValue(m_avoid_duplicates_on_initialization));
    }
    if (m_currency_scalars.size() > 0) {
        obj.insert(QString("currencyScalars"), ::OpenAPI::toJsonValue(m_currency_scalars));
    }
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_hide_duplicate_reusable_plugs_isSet) {
        obj.insert(QString("hideDuplicateReusablePlugs"), ::OpenAPI::toJsonValue(m_hide_duplicate_reusable_plugs));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_insert_action.isSet()) {
        obj.insert(QString("insertAction"), ::OpenAPI::toJsonValue(m_insert_action));
    }
    if (m_is_preview_enabled_isSet) {
        obj.insert(QString("isPreviewEnabled"), ::OpenAPI::toJsonValue(m_is_preview_enabled));
    }
    if (m_overrides_ui_appearance_isSet) {
        obj.insert(QString("overridesUiAppearance"), ::OpenAPI::toJsonValue(m_overrides_ui_appearance));
    }
    if (m_plug_whitelist.size() > 0) {
        obj.insert(QString("plugWhitelist"), ::OpenAPI::toJsonValue(m_plug_whitelist));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    if (m_socket_category_hash_isSet) {
        obj.insert(QString("socketCategoryHash"), ::OpenAPI::toJsonValue(m_socket_category_hash));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::isAlwaysRandomizeSockets() const {
    return m_always_randomize_sockets;
}
void OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::setAlwaysRandomizeSockets(const bool &always_randomize_sockets) {
    m_always_randomize_sockets = always_randomize_sockets;
    m_always_randomize_sockets_isSet = true;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_always_randomize_sockets_Set() const{
    return m_always_randomize_sockets_isSet;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_always_randomize_sockets_Valid() const{
    return m_always_randomize_sockets_isValid;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::isAvoidDuplicatesOnInitialization() const {
    return m_avoid_duplicates_on_initialization;
}
void OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::setAvoidDuplicatesOnInitialization(const bool &avoid_duplicates_on_initialization) {
    m_avoid_duplicates_on_initialization = avoid_duplicates_on_initialization;
    m_avoid_duplicates_on_initialization_isSet = true;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_avoid_duplicates_on_initialization_Set() const{
    return m_avoid_duplicates_on_initialization_isSet;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_avoid_duplicates_on_initialization_Valid() const{
    return m_avoid_duplicates_on_initialization_isValid;
}

QList<OAIDestiny_Definitions_Sockets_DestinySocketTypeScalarMaterialRequirementEntry> OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::getCurrencyScalars() const {
    return m_currency_scalars;
}
void OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::setCurrencyScalars(const QList<OAIDestiny_Definitions_Sockets_DestinySocketTypeScalarMaterialRequirementEntry> &currency_scalars) {
    m_currency_scalars = currency_scalars;
    m_currency_scalars_isSet = true;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_currency_scalars_Set() const{
    return m_currency_scalars_isSet;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_currency_scalars_Valid() const{
    return m_currency_scalars_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

qint32 OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::isHideDuplicateReusablePlugs() const {
    return m_hide_duplicate_reusable_plugs;
}
void OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::setHideDuplicateReusablePlugs(const bool &hide_duplicate_reusable_plugs) {
    m_hide_duplicate_reusable_plugs = hide_duplicate_reusable_plugs;
    m_hide_duplicate_reusable_plugs_isSet = true;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_hide_duplicate_reusable_plugs_Set() const{
    return m_hide_duplicate_reusable_plugs_isSet;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_hide_duplicate_reusable_plugs_Valid() const{
    return m_hide_duplicate_reusable_plugs_isValid;
}

qint32 OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_index_Valid() const{
    return m_index_isValid;
}

OAIDestiny_Definitions_Sockets_DestinyInsertPlugActionDefinition OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::getInsertAction() const {
    return m_insert_action;
}
void OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::setInsertAction(const OAIDestiny_Definitions_Sockets_DestinyInsertPlugActionDefinition &insert_action) {
    m_insert_action = insert_action;
    m_insert_action_isSet = true;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_insert_action_Set() const{
    return m_insert_action_isSet;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_insert_action_Valid() const{
    return m_insert_action_isValid;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::isIsPreviewEnabled() const {
    return m_is_preview_enabled;
}
void OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::setIsPreviewEnabled(const bool &is_preview_enabled) {
    m_is_preview_enabled = is_preview_enabled;
    m_is_preview_enabled_isSet = true;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_is_preview_enabled_Set() const{
    return m_is_preview_enabled_isSet;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_is_preview_enabled_Valid() const{
    return m_is_preview_enabled_isValid;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::isOverridesUiAppearance() const {
    return m_overrides_ui_appearance;
}
void OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::setOverridesUiAppearance(const bool &overrides_ui_appearance) {
    m_overrides_ui_appearance = overrides_ui_appearance;
    m_overrides_ui_appearance_isSet = true;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_overrides_ui_appearance_Set() const{
    return m_overrides_ui_appearance_isSet;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_overrides_ui_appearance_Valid() const{
    return m_overrides_ui_appearance_isValid;
}

QList<OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition> OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::getPlugWhitelist() const {
    return m_plug_whitelist;
}
void OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::setPlugWhitelist(const QList<OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition> &plug_whitelist) {
    m_plug_whitelist = plug_whitelist;
    m_plug_whitelist_isSet = true;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_plug_whitelist_Set() const{
    return m_plug_whitelist_isSet;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_plug_whitelist_Valid() const{
    return m_plug_whitelist_isValid;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

qint32 OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::getSocketCategoryHash() const {
    return m_socket_category_hash;
}
void OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::setSocketCategoryHash(const qint32 &socket_category_hash) {
    m_socket_category_hash = socket_category_hash;
    m_socket_category_hash_isSet = true;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_socket_category_hash_Set() const{
    return m_socket_category_hash_isSet;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_socket_category_hash_Valid() const{
    return m_socket_category_hash_isValid;
}

qint32 OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::getVisibility() const {
    return m_visibility;
}
void OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::setVisibility(const qint32 &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_always_randomize_sockets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avoid_duplicates_on_initialization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_scalars.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_duplicate_reusable_plugs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_preview_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overrides_ui_appearance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plug_whitelist.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_socket_category_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
