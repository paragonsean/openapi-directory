/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGroupV2Api_H
#define OAI_OAIGroupV2Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDestiny2_EquipItem_200_response.h"
#include "OAIForum_GetTopicForContent_200_response.h"
#include "OAIGroupV2_ApproveAllPending_200_response.h"
#include "OAIGroupV2_GetAdminsAndFounderOfGroup_200_response.h"
#include "OAIGroupV2_GetAvailableThemes_200_response.h"
#include "OAIGroupV2_GetBannedMembersOfGroup_200_response.h"
#include "OAIGroupV2_GetGroupByName_200_response.h"
#include "OAIGroupV2_GetGroupOptionalConversations_200_response.h"
#include "OAIGroupV2_GetGroupsForMember_200_response.h"
#include "OAIGroupV2_GetInvitedIndividuals_200_response.h"
#include "OAIGroupV2_GetPotentialGroupsForMember_200_response.h"
#include "OAIGroupV2_GetRecommendedGroups_200_response.h"
#include "OAIGroupV2_GetUserClanInviteSetting_200_response.h"
#include "OAIGroupV2_GroupSearch_200_response.h"
#include "OAIGroupV2_IndividualGroupInvite_200_response.h"
#include "OAIGroupV2_KickMember_200_response.h"
#include "OAIGroupV2_RecoverGroupForFounder_200_response.h"
#include "OAI_GetAvailableLocales_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGroupV2Api : public QObject {
    Q_OBJECT

public:
    OAIGroupV2Api(const int timeOut = 0);
    ~OAIGroupV2Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  founder_id_new qint64 [required]
    * @param[in]  group_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    */
    virtual void groupV2_AbdicateFoundership(const qint64 &founder_id_new, const qint64 &group_id, const qint32 &membership_type);

    /**
    * @param[in]  group_id qint64 [required]
    */
    virtual void groupV2_AddOptionalConversation(const qint64 &group_id);

    /**
    * @param[in]  group_id qint64 [required]
    */
    virtual void groupV2_ApproveAllPending(const qint64 &group_id);

    /**
    * @param[in]  group_id qint64 [required]
    * @param[in]  membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    */
    virtual void groupV2_ApprovePending(const qint64 &group_id, const qint64 &membership_id, const qint32 &membership_type);

    /**
    * @param[in]  group_id qint64 [required]
    */
    virtual void groupV2_ApprovePendingForList(const qint64 &group_id);

    /**
    * @param[in]  group_id qint64 [required]
    * @param[in]  membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    */
    virtual void groupV2_BanMember(const qint64 &group_id, const qint64 &membership_id, const qint32 &membership_type);

    /**
    * @param[in]  group_id qint64 [required]
    */
    virtual void groupV2_DenyAllPending(const qint64 &group_id);

    /**
    * @param[in]  group_id qint64 [required]
    */
    virtual void groupV2_DenyPendingForList(const qint64 &group_id);

    /**
    * @param[in]  group_id qint64 [required]
    */
    virtual void groupV2_EditClanBanner(const qint64 &group_id);

    /**
    * @param[in]  group_id qint64 [required]
    */
    virtual void groupV2_EditFounderOptions(const qint64 &group_id);

    /**
    * @param[in]  group_id qint64 [required]
    */
    virtual void groupV2_EditGroup(const qint64 &group_id);

    /**
    * @param[in]  group_id qint64 [required]
    * @param[in]  membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    * @param[in]  member_type qint32 [required]
    */
    virtual void groupV2_EditGroupMembership(const qint64 &group_id, const qint64 &membership_id, const qint32 &membership_type, const qint32 &member_type);

    /**
    * @param[in]  conversation_id qint64 [required]
    * @param[in]  group_id qint64 [required]
    */
    virtual void groupV2_EditOptionalConversation(const qint64 &conversation_id, const qint64 &group_id);

    /**
    * @param[in]  currentpage qint32 [required]
    * @param[in]  group_id qint64 [required]
    */
    virtual void groupV2_GetAdminsAndFounderOfGroup(const qint32 &currentpage, const qint64 &group_id);


    virtual void groupV2_GetAvailableAvatars();


    virtual void groupV2_GetAvailableThemes();

    /**
    * @param[in]  currentpage qint32 [required]
    * @param[in]  group_id qint64 [required]
    */
    virtual void groupV2_GetBannedMembersOfGroup(const qint32 &currentpage, const qint64 &group_id);

    /**
    * @param[in]  group_id qint64 [required]
    */
    virtual void groupV2_GetGroup(const qint64 &group_id);

    /**
    * @param[in]  group_name QString [required]
    * @param[in]  group_type qint32 [required]
    */
    virtual void groupV2_GetGroupByName(const QString &group_name, const qint32 &group_type);


    virtual void groupV2_GetGroupByNameV2();

    /**
    * @param[in]  group_id qint64 [required]
    */
    virtual void groupV2_GetGroupOptionalConversations(const qint64 &group_id);

    /**
    * @param[in]  filter qint32 [required]
    * @param[in]  group_type qint32 [required]
    * @param[in]  membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    */
    virtual void groupV2_GetGroupsForMember(const qint32 &filter, const qint32 &group_type, const qint64 &membership_id, const qint32 &membership_type);

    /**
    * @param[in]  currentpage qint32 [required]
    * @param[in]  group_id qint64 [required]
    */
    virtual void groupV2_GetInvitedIndividuals(const qint32 &currentpage, const qint64 &group_id);

    /**
    * @param[in]  currentpage qint32 [required]
    * @param[in]  group_id qint64 [required]
    * @param[in]  member_type qint32 [optional]
    * @param[in]  name_search QString [optional]
    */
    virtual void groupV2_GetMembersOfGroup(const qint32 &currentpage, const qint64 &group_id, const ::OpenAPI::OptionalParam<qint32> &member_type = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_search = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  currentpage qint32 [required]
    * @param[in]  group_id qint64 [required]
    */
    virtual void groupV2_GetPendingMemberships(const qint32 &currentpage, const qint64 &group_id);

    /**
    * @param[in]  filter qint32 [required]
    * @param[in]  group_type qint32 [required]
    * @param[in]  membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    */
    virtual void groupV2_GetPotentialGroupsForMember(const qint32 &filter, const qint32 &group_type, const qint64 &membership_id, const qint32 &membership_type);

    /**
    * @param[in]  create_date_range qint32 [required]
    * @param[in]  group_type qint32 [required]
    */
    virtual void groupV2_GetRecommendedGroups(const qint32 &create_date_range, const qint32 &group_type);

    /**
    * @param[in]  m_type qint32 [required]
    */
    virtual void groupV2_GetUserClanInviteSetting(const qint32 &m_type);


    virtual void groupV2_GroupSearch();

    /**
    * @param[in]  group_id qint64 [required]
    * @param[in]  membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    */
    virtual void groupV2_IndividualGroupInvite(const qint64 &group_id, const qint64 &membership_id, const qint32 &membership_type);

    /**
    * @param[in]  group_id qint64 [required]
    * @param[in]  membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    */
    virtual void groupV2_IndividualGroupInviteCancel(const qint64 &group_id, const qint64 &membership_id, const qint32 &membership_type);

    /**
    * @param[in]  group_id qint64 [required]
    * @param[in]  membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    */
    virtual void groupV2_KickMember(const qint64 &group_id, const qint64 &membership_id, const qint32 &membership_type);

    /**
    * @param[in]  group_type qint32 [required]
    * @param[in]  membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    */
    virtual void groupV2_RecoverGroupForFounder(const qint32 &group_type, const qint64 &membership_id, const qint32 &membership_type);

    /**
    * @param[in]  group_id qint64 [required]
    * @param[in]  membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    */
    virtual void groupV2_UnbanMember(const qint64 &group_id, const qint64 &membership_id, const qint32 &membership_type);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void groupV2_AbdicateFoundershipCallback(OAIHttpRequestWorker *worker);
    void groupV2_AddOptionalConversationCallback(OAIHttpRequestWorker *worker);
    void groupV2_ApproveAllPendingCallback(OAIHttpRequestWorker *worker);
    void groupV2_ApprovePendingCallback(OAIHttpRequestWorker *worker);
    void groupV2_ApprovePendingForListCallback(OAIHttpRequestWorker *worker);
    void groupV2_BanMemberCallback(OAIHttpRequestWorker *worker);
    void groupV2_DenyAllPendingCallback(OAIHttpRequestWorker *worker);
    void groupV2_DenyPendingForListCallback(OAIHttpRequestWorker *worker);
    void groupV2_EditClanBannerCallback(OAIHttpRequestWorker *worker);
    void groupV2_EditFounderOptionsCallback(OAIHttpRequestWorker *worker);
    void groupV2_EditGroupCallback(OAIHttpRequestWorker *worker);
    void groupV2_EditGroupMembershipCallback(OAIHttpRequestWorker *worker);
    void groupV2_EditOptionalConversationCallback(OAIHttpRequestWorker *worker);
    void groupV2_GetAdminsAndFounderOfGroupCallback(OAIHttpRequestWorker *worker);
    void groupV2_GetAvailableAvatarsCallback(OAIHttpRequestWorker *worker);
    void groupV2_GetAvailableThemesCallback(OAIHttpRequestWorker *worker);
    void groupV2_GetBannedMembersOfGroupCallback(OAIHttpRequestWorker *worker);
    void groupV2_GetGroupCallback(OAIHttpRequestWorker *worker);
    void groupV2_GetGroupByNameCallback(OAIHttpRequestWorker *worker);
    void groupV2_GetGroupByNameV2Callback(OAIHttpRequestWorker *worker);
    void groupV2_GetGroupOptionalConversationsCallback(OAIHttpRequestWorker *worker);
    void groupV2_GetGroupsForMemberCallback(OAIHttpRequestWorker *worker);
    void groupV2_GetInvitedIndividualsCallback(OAIHttpRequestWorker *worker);
    void groupV2_GetMembersOfGroupCallback(OAIHttpRequestWorker *worker);
    void groupV2_GetPendingMembershipsCallback(OAIHttpRequestWorker *worker);
    void groupV2_GetPotentialGroupsForMemberCallback(OAIHttpRequestWorker *worker);
    void groupV2_GetRecommendedGroupsCallback(OAIHttpRequestWorker *worker);
    void groupV2_GetUserClanInviteSettingCallback(OAIHttpRequestWorker *worker);
    void groupV2_GroupSearchCallback(OAIHttpRequestWorker *worker);
    void groupV2_IndividualGroupInviteCallback(OAIHttpRequestWorker *worker);
    void groupV2_IndividualGroupInviteCancelCallback(OAIHttpRequestWorker *worker);
    void groupV2_KickMemberCallback(OAIHttpRequestWorker *worker);
    void groupV2_RecoverGroupForFounderCallback(OAIHttpRequestWorker *worker);
    void groupV2_UnbanMemberCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void groupV2_AbdicateFoundershipSignal(OAIGroupV2_GetUserClanInviteSetting_200_response summary);
    void groupV2_AddOptionalConversationSignal(OAIForum_GetTopicForContent_200_response summary);
    void groupV2_ApproveAllPendingSignal(OAIGroupV2_ApproveAllPending_200_response summary);
    void groupV2_ApprovePendingSignal(OAIGroupV2_GetUserClanInviteSetting_200_response summary);
    void groupV2_ApprovePendingForListSignal(OAIGroupV2_ApproveAllPending_200_response summary);
    void groupV2_BanMemberSignal(OAIDestiny2_EquipItem_200_response summary);
    void groupV2_DenyAllPendingSignal(OAIGroupV2_ApproveAllPending_200_response summary);
    void groupV2_DenyPendingForListSignal(OAIGroupV2_ApproveAllPending_200_response summary);
    void groupV2_EditClanBannerSignal(OAIDestiny2_EquipItem_200_response summary);
    void groupV2_EditFounderOptionsSignal(OAIDestiny2_EquipItem_200_response summary);
    void groupV2_EditGroupSignal(OAIDestiny2_EquipItem_200_response summary);
    void groupV2_EditGroupMembershipSignal(OAIDestiny2_EquipItem_200_response summary);
    void groupV2_EditOptionalConversationSignal(OAIForum_GetTopicForContent_200_response summary);
    void groupV2_GetAdminsAndFounderOfGroupSignal(OAIGroupV2_GetAdminsAndFounderOfGroup_200_response summary);
    void groupV2_GetAvailableAvatarsSignal(OAI_GetAvailableLocales_200_response summary);
    void groupV2_GetAvailableThemesSignal(OAIGroupV2_GetAvailableThemes_200_response summary);
    void groupV2_GetBannedMembersOfGroupSignal(OAIGroupV2_GetBannedMembersOfGroup_200_response summary);
    void groupV2_GetGroupSignal(OAIGroupV2_GetGroupByName_200_response summary);
    void groupV2_GetGroupByNameSignal(OAIGroupV2_GetGroupByName_200_response summary);
    void groupV2_GetGroupByNameV2Signal(OAIGroupV2_GetGroupByName_200_response summary);
    void groupV2_GetGroupOptionalConversationsSignal(OAIGroupV2_GetGroupOptionalConversations_200_response summary);
    void groupV2_GetGroupsForMemberSignal(OAIGroupV2_GetGroupsForMember_200_response summary);
    void groupV2_GetInvitedIndividualsSignal(OAIGroupV2_GetInvitedIndividuals_200_response summary);
    void groupV2_GetMembersOfGroupSignal(OAIGroupV2_GetAdminsAndFounderOfGroup_200_response summary);
    void groupV2_GetPendingMembershipsSignal(OAIGroupV2_GetInvitedIndividuals_200_response summary);
    void groupV2_GetPotentialGroupsForMemberSignal(OAIGroupV2_GetPotentialGroupsForMember_200_response summary);
    void groupV2_GetRecommendedGroupsSignal(OAIGroupV2_GetRecommendedGroups_200_response summary);
    void groupV2_GetUserClanInviteSettingSignal(OAIGroupV2_GetUserClanInviteSetting_200_response summary);
    void groupV2_GroupSearchSignal(OAIGroupV2_GroupSearch_200_response summary);
    void groupV2_IndividualGroupInviteSignal(OAIGroupV2_IndividualGroupInvite_200_response summary);
    void groupV2_IndividualGroupInviteCancelSignal(OAIGroupV2_IndividualGroupInvite_200_response summary);
    void groupV2_KickMemberSignal(OAIGroupV2_KickMember_200_response summary);
    void groupV2_RecoverGroupForFounderSignal(OAIGroupV2_RecoverGroupForFounder_200_response summary);
    void groupV2_UnbanMemberSignal(OAIDestiny2_EquipItem_200_response summary);


    void groupV2_AbdicateFoundershipSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetUserClanInviteSetting_200_response summary);
    void groupV2_AddOptionalConversationSignalFull(OAIHttpRequestWorker *worker, OAIForum_GetTopicForContent_200_response summary);
    void groupV2_ApproveAllPendingSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_ApproveAllPending_200_response summary);
    void groupV2_ApprovePendingSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetUserClanInviteSetting_200_response summary);
    void groupV2_ApprovePendingForListSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_ApproveAllPending_200_response summary);
    void groupV2_BanMemberSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_EquipItem_200_response summary);
    void groupV2_DenyAllPendingSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_ApproveAllPending_200_response summary);
    void groupV2_DenyPendingForListSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_ApproveAllPending_200_response summary);
    void groupV2_EditClanBannerSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_EquipItem_200_response summary);
    void groupV2_EditFounderOptionsSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_EquipItem_200_response summary);
    void groupV2_EditGroupSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_EquipItem_200_response summary);
    void groupV2_EditGroupMembershipSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_EquipItem_200_response summary);
    void groupV2_EditOptionalConversationSignalFull(OAIHttpRequestWorker *worker, OAIForum_GetTopicForContent_200_response summary);
    void groupV2_GetAdminsAndFounderOfGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetAdminsAndFounderOfGroup_200_response summary);
    void groupV2_GetAvailableAvatarsSignalFull(OAIHttpRequestWorker *worker, OAI_GetAvailableLocales_200_response summary);
    void groupV2_GetAvailableThemesSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetAvailableThemes_200_response summary);
    void groupV2_GetBannedMembersOfGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetBannedMembersOfGroup_200_response summary);
    void groupV2_GetGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetGroupByName_200_response summary);
    void groupV2_GetGroupByNameSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetGroupByName_200_response summary);
    void groupV2_GetGroupByNameV2SignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetGroupByName_200_response summary);
    void groupV2_GetGroupOptionalConversationsSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetGroupOptionalConversations_200_response summary);
    void groupV2_GetGroupsForMemberSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetGroupsForMember_200_response summary);
    void groupV2_GetInvitedIndividualsSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetInvitedIndividuals_200_response summary);
    void groupV2_GetMembersOfGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetAdminsAndFounderOfGroup_200_response summary);
    void groupV2_GetPendingMembershipsSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetInvitedIndividuals_200_response summary);
    void groupV2_GetPotentialGroupsForMemberSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetPotentialGroupsForMember_200_response summary);
    void groupV2_GetRecommendedGroupsSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetRecommendedGroups_200_response summary);
    void groupV2_GetUserClanInviteSettingSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetUserClanInviteSetting_200_response summary);
    void groupV2_GroupSearchSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GroupSearch_200_response summary);
    void groupV2_IndividualGroupInviteSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_IndividualGroupInvite_200_response summary);
    void groupV2_IndividualGroupInviteCancelSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_IndividualGroupInvite_200_response summary);
    void groupV2_KickMemberSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_KickMember_200_response summary);
    void groupV2_RecoverGroupForFounderSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_RecoverGroupForFounder_200_response summary);
    void groupV2_UnbanMemberSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_EquipItem_200_response summary);

    Q_DECL_DEPRECATED_X("Use groupV2_AbdicateFoundershipSignalError() instead")
    void groupV2_AbdicateFoundershipSignalE(OAIGroupV2_GetUserClanInviteSetting_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_AbdicateFoundershipSignalError(OAIGroupV2_GetUserClanInviteSetting_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_AddOptionalConversationSignalError() instead")
    void groupV2_AddOptionalConversationSignalE(OAIForum_GetTopicForContent_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_AddOptionalConversationSignalError(OAIForum_GetTopicForContent_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_ApproveAllPendingSignalError() instead")
    void groupV2_ApproveAllPendingSignalE(OAIGroupV2_ApproveAllPending_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_ApproveAllPendingSignalError(OAIGroupV2_ApproveAllPending_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_ApprovePendingSignalError() instead")
    void groupV2_ApprovePendingSignalE(OAIGroupV2_GetUserClanInviteSetting_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_ApprovePendingSignalError(OAIGroupV2_GetUserClanInviteSetting_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_ApprovePendingForListSignalError() instead")
    void groupV2_ApprovePendingForListSignalE(OAIGroupV2_ApproveAllPending_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_ApprovePendingForListSignalError(OAIGroupV2_ApproveAllPending_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_BanMemberSignalError() instead")
    void groupV2_BanMemberSignalE(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_BanMemberSignalError(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_DenyAllPendingSignalError() instead")
    void groupV2_DenyAllPendingSignalE(OAIGroupV2_ApproveAllPending_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_DenyAllPendingSignalError(OAIGroupV2_ApproveAllPending_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_DenyPendingForListSignalError() instead")
    void groupV2_DenyPendingForListSignalE(OAIGroupV2_ApproveAllPending_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_DenyPendingForListSignalError(OAIGroupV2_ApproveAllPending_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_EditClanBannerSignalError() instead")
    void groupV2_EditClanBannerSignalE(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_EditClanBannerSignalError(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_EditFounderOptionsSignalError() instead")
    void groupV2_EditFounderOptionsSignalE(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_EditFounderOptionsSignalError(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_EditGroupSignalError() instead")
    void groupV2_EditGroupSignalE(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_EditGroupSignalError(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_EditGroupMembershipSignalError() instead")
    void groupV2_EditGroupMembershipSignalE(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_EditGroupMembershipSignalError(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_EditOptionalConversationSignalError() instead")
    void groupV2_EditOptionalConversationSignalE(OAIForum_GetTopicForContent_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_EditOptionalConversationSignalError(OAIForum_GetTopicForContent_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetAdminsAndFounderOfGroupSignalError() instead")
    void groupV2_GetAdminsAndFounderOfGroupSignalE(OAIGroupV2_GetAdminsAndFounderOfGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetAdminsAndFounderOfGroupSignalError(OAIGroupV2_GetAdminsAndFounderOfGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetAvailableAvatarsSignalError() instead")
    void groupV2_GetAvailableAvatarsSignalE(OAI_GetAvailableLocales_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetAvailableAvatarsSignalError(OAI_GetAvailableLocales_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetAvailableThemesSignalError() instead")
    void groupV2_GetAvailableThemesSignalE(OAIGroupV2_GetAvailableThemes_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetAvailableThemesSignalError(OAIGroupV2_GetAvailableThemes_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetBannedMembersOfGroupSignalError() instead")
    void groupV2_GetBannedMembersOfGroupSignalE(OAIGroupV2_GetBannedMembersOfGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetBannedMembersOfGroupSignalError(OAIGroupV2_GetBannedMembersOfGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetGroupSignalError() instead")
    void groupV2_GetGroupSignalE(OAIGroupV2_GetGroupByName_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetGroupSignalError(OAIGroupV2_GetGroupByName_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetGroupByNameSignalError() instead")
    void groupV2_GetGroupByNameSignalE(OAIGroupV2_GetGroupByName_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetGroupByNameSignalError(OAIGroupV2_GetGroupByName_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetGroupByNameV2SignalError() instead")
    void groupV2_GetGroupByNameV2SignalE(OAIGroupV2_GetGroupByName_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetGroupByNameV2SignalError(OAIGroupV2_GetGroupByName_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetGroupOptionalConversationsSignalError() instead")
    void groupV2_GetGroupOptionalConversationsSignalE(OAIGroupV2_GetGroupOptionalConversations_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetGroupOptionalConversationsSignalError(OAIGroupV2_GetGroupOptionalConversations_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetGroupsForMemberSignalError() instead")
    void groupV2_GetGroupsForMemberSignalE(OAIGroupV2_GetGroupsForMember_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetGroupsForMemberSignalError(OAIGroupV2_GetGroupsForMember_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetInvitedIndividualsSignalError() instead")
    void groupV2_GetInvitedIndividualsSignalE(OAIGroupV2_GetInvitedIndividuals_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetInvitedIndividualsSignalError(OAIGroupV2_GetInvitedIndividuals_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetMembersOfGroupSignalError() instead")
    void groupV2_GetMembersOfGroupSignalE(OAIGroupV2_GetAdminsAndFounderOfGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetMembersOfGroupSignalError(OAIGroupV2_GetAdminsAndFounderOfGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetPendingMembershipsSignalError() instead")
    void groupV2_GetPendingMembershipsSignalE(OAIGroupV2_GetInvitedIndividuals_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetPendingMembershipsSignalError(OAIGroupV2_GetInvitedIndividuals_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetPotentialGroupsForMemberSignalError() instead")
    void groupV2_GetPotentialGroupsForMemberSignalE(OAIGroupV2_GetPotentialGroupsForMember_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetPotentialGroupsForMemberSignalError(OAIGroupV2_GetPotentialGroupsForMember_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetRecommendedGroupsSignalError() instead")
    void groupV2_GetRecommendedGroupsSignalE(OAIGroupV2_GetRecommendedGroups_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetRecommendedGroupsSignalError(OAIGroupV2_GetRecommendedGroups_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetUserClanInviteSettingSignalError() instead")
    void groupV2_GetUserClanInviteSettingSignalE(OAIGroupV2_GetUserClanInviteSetting_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetUserClanInviteSettingSignalError(OAIGroupV2_GetUserClanInviteSetting_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GroupSearchSignalError() instead")
    void groupV2_GroupSearchSignalE(OAIGroupV2_GroupSearch_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GroupSearchSignalError(OAIGroupV2_GroupSearch_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_IndividualGroupInviteSignalError() instead")
    void groupV2_IndividualGroupInviteSignalE(OAIGroupV2_IndividualGroupInvite_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_IndividualGroupInviteSignalError(OAIGroupV2_IndividualGroupInvite_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_IndividualGroupInviteCancelSignalError() instead")
    void groupV2_IndividualGroupInviteCancelSignalE(OAIGroupV2_IndividualGroupInvite_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_IndividualGroupInviteCancelSignalError(OAIGroupV2_IndividualGroupInvite_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_KickMemberSignalError() instead")
    void groupV2_KickMemberSignalE(OAIGroupV2_KickMember_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_KickMemberSignalError(OAIGroupV2_KickMember_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_RecoverGroupForFounderSignalError() instead")
    void groupV2_RecoverGroupForFounderSignalE(OAIGroupV2_RecoverGroupForFounder_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_RecoverGroupForFounderSignalError(OAIGroupV2_RecoverGroupForFounder_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_UnbanMemberSignalError() instead")
    void groupV2_UnbanMemberSignalE(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_UnbanMemberSignalError(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use groupV2_AbdicateFoundershipSignalErrorFull() instead")
    void groupV2_AbdicateFoundershipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_AbdicateFoundershipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_AddOptionalConversationSignalErrorFull() instead")
    void groupV2_AddOptionalConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_AddOptionalConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_ApproveAllPendingSignalErrorFull() instead")
    void groupV2_ApproveAllPendingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_ApproveAllPendingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_ApprovePendingSignalErrorFull() instead")
    void groupV2_ApprovePendingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_ApprovePendingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_ApprovePendingForListSignalErrorFull() instead")
    void groupV2_ApprovePendingForListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_ApprovePendingForListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_BanMemberSignalErrorFull() instead")
    void groupV2_BanMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_BanMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_DenyAllPendingSignalErrorFull() instead")
    void groupV2_DenyAllPendingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_DenyAllPendingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_DenyPendingForListSignalErrorFull() instead")
    void groupV2_DenyPendingForListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_DenyPendingForListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_EditClanBannerSignalErrorFull() instead")
    void groupV2_EditClanBannerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_EditClanBannerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_EditFounderOptionsSignalErrorFull() instead")
    void groupV2_EditFounderOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_EditFounderOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_EditGroupSignalErrorFull() instead")
    void groupV2_EditGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_EditGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_EditGroupMembershipSignalErrorFull() instead")
    void groupV2_EditGroupMembershipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_EditGroupMembershipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_EditOptionalConversationSignalErrorFull() instead")
    void groupV2_EditOptionalConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_EditOptionalConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetAdminsAndFounderOfGroupSignalErrorFull() instead")
    void groupV2_GetAdminsAndFounderOfGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetAdminsAndFounderOfGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetAvailableAvatarsSignalErrorFull() instead")
    void groupV2_GetAvailableAvatarsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetAvailableAvatarsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetAvailableThemesSignalErrorFull() instead")
    void groupV2_GetAvailableThemesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetAvailableThemesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetBannedMembersOfGroupSignalErrorFull() instead")
    void groupV2_GetBannedMembersOfGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetBannedMembersOfGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetGroupSignalErrorFull() instead")
    void groupV2_GetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetGroupByNameSignalErrorFull() instead")
    void groupV2_GetGroupByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetGroupByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetGroupByNameV2SignalErrorFull() instead")
    void groupV2_GetGroupByNameV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetGroupByNameV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetGroupOptionalConversationsSignalErrorFull() instead")
    void groupV2_GetGroupOptionalConversationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetGroupOptionalConversationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetGroupsForMemberSignalErrorFull() instead")
    void groupV2_GetGroupsForMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetGroupsForMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetInvitedIndividualsSignalErrorFull() instead")
    void groupV2_GetInvitedIndividualsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetInvitedIndividualsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetMembersOfGroupSignalErrorFull() instead")
    void groupV2_GetMembersOfGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetMembersOfGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetPendingMembershipsSignalErrorFull() instead")
    void groupV2_GetPendingMembershipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetPendingMembershipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetPotentialGroupsForMemberSignalErrorFull() instead")
    void groupV2_GetPotentialGroupsForMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetPotentialGroupsForMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetRecommendedGroupsSignalErrorFull() instead")
    void groupV2_GetRecommendedGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetRecommendedGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GetUserClanInviteSettingSignalErrorFull() instead")
    void groupV2_GetUserClanInviteSettingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GetUserClanInviteSettingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_GroupSearchSignalErrorFull() instead")
    void groupV2_GroupSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_GroupSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_IndividualGroupInviteSignalErrorFull() instead")
    void groupV2_IndividualGroupInviteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_IndividualGroupInviteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_IndividualGroupInviteCancelSignalErrorFull() instead")
    void groupV2_IndividualGroupInviteCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_IndividualGroupInviteCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_KickMemberSignalErrorFull() instead")
    void groupV2_KickMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_KickMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_RecoverGroupForFounderSignalErrorFull() instead")
    void groupV2_RecoverGroupForFounderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_RecoverGroupForFounderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupV2_UnbanMemberSignalErrorFull() instead")
    void groupV2_UnbanMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupV2_UnbanMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
