/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_DestinyEquipItemResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_DestinyEquipItemResult::OAIDestiny_DestinyEquipItemResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_DestinyEquipItemResult::OAIDestiny_DestinyEquipItemResult() {
    this->initializeModel();
}

OAIDestiny_DestinyEquipItemResult::~OAIDestiny_DestinyEquipItemResult() {}

void OAIDestiny_DestinyEquipItemResult::initializeModel() {

    m_equip_status_isSet = false;
    m_equip_status_isValid = false;

    m_item_instance_id_isSet = false;
    m_item_instance_id_isValid = false;
}

void OAIDestiny_DestinyEquipItemResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_DestinyEquipItemResult::fromJsonObject(QJsonObject json) {

    m_equip_status_isValid = ::OpenAPI::fromJsonValue(m_equip_status, json[QString("equipStatus")]);
    m_equip_status_isSet = !json[QString("equipStatus")].isNull() && m_equip_status_isValid;

    m_item_instance_id_isValid = ::OpenAPI::fromJsonValue(m_item_instance_id, json[QString("itemInstanceId")]);
    m_item_instance_id_isSet = !json[QString("itemInstanceId")].isNull() && m_item_instance_id_isValid;
}

QString OAIDestiny_DestinyEquipItemResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_DestinyEquipItemResult::asJsonObject() const {
    QJsonObject obj;
    if (m_equip_status_isSet) {
        obj.insert(QString("equipStatus"), ::OpenAPI::toJsonValue(m_equip_status));
    }
    if (m_item_instance_id_isSet) {
        obj.insert(QString("itemInstanceId"), ::OpenAPI::toJsonValue(m_item_instance_id));
    }
    return obj;
}

qint32 OAIDestiny_DestinyEquipItemResult::getEquipStatus() const {
    return m_equip_status;
}
void OAIDestiny_DestinyEquipItemResult::setEquipStatus(const qint32 &equip_status) {
    m_equip_status = equip_status;
    m_equip_status_isSet = true;
}

bool OAIDestiny_DestinyEquipItemResult::is_equip_status_Set() const{
    return m_equip_status_isSet;
}

bool OAIDestiny_DestinyEquipItemResult::is_equip_status_Valid() const{
    return m_equip_status_isValid;
}

qint64 OAIDestiny_DestinyEquipItemResult::getItemInstanceId() const {
    return m_item_instance_id;
}
void OAIDestiny_DestinyEquipItemResult::setItemInstanceId(const qint64 &item_instance_id) {
    m_item_instance_id = item_instance_id;
    m_item_instance_id_isSet = true;
}

bool OAIDestiny_DestinyEquipItemResult::is_item_instance_id_Set() const{
    return m_item_instance_id_isSet;
}

bool OAIDestiny_DestinyEquipItemResult::is_item_instance_id_Valid() const{
    return m_item_instance_id_isValid;
}

bool OAIDestiny_DestinyEquipItemResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_equip_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_DestinyEquipItemResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
