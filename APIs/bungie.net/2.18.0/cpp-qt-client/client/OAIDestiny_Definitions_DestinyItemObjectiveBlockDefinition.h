/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition.h
 *
 * An item can have objectives on it. In practice, these are the exclusive purview of \&quot;Quest Step\&quot; items: DestinyInventoryItemDefinitions that represent a specific step in a Quest.  Quest steps have 1:M objectives that we end up processing and returning in live data as DestinyQuestStatus data, and other useful information.
 */

#ifndef OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition_H
#define OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_DestinyObjectiveDisplayProperties.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_DestinyObjectiveDisplayProperties;

class OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition();
    OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<qint32> getDisplayActivityHashes() const;
    void setDisplayActivityHashes(const QList<qint32> &display_activity_hashes);
    bool is_display_activity_hashes_Set() const;
    bool is_display_activity_hashes_Valid() const;

    bool isDisplayAsStatTracker() const;
    void setDisplayAsStatTracker(const bool &display_as_stat_tracker);
    bool is_display_as_stat_tracker_Set() const;
    bool is_display_as_stat_tracker_Valid() const;

    QString getNarrative() const;
    void setNarrative(const QString &narrative);
    bool is_narrative_Set() const;
    bool is_narrative_Valid() const;

    QList<qint32> getObjectiveHashes() const;
    void setObjectiveHashes(const QList<qint32> &objective_hashes);
    bool is_objective_hashes_Set() const;
    bool is_objective_hashes_Valid() const;

    QString getObjectiveVerbName() const;
    void setObjectiveVerbName(const QString &objective_verb_name);
    bool is_objective_verb_name_Set() const;
    bool is_objective_verb_name_Valid() const;

    QList<OAIDestiny_Definitions_DestinyObjectiveDisplayProperties> getPerObjectiveDisplayProperties() const;
    void setPerObjectiveDisplayProperties(const QList<OAIDestiny_Definitions_DestinyObjectiveDisplayProperties> &per_objective_display_properties);
    bool is_per_objective_display_properties_Set() const;
    bool is_per_objective_display_properties_Valid() const;

    qint32 getQuestTypeHash() const;
    void setQuestTypeHash(const qint32 &quest_type_hash);
    bool is_quest_type_hash_Set() const;
    bool is_quest_type_hash_Valid() const;

    QString getQuestTypeIdentifier() const;
    void setQuestTypeIdentifier(const QString &quest_type_identifier);
    bool is_quest_type_identifier_Set() const;
    bool is_quest_type_identifier_Valid() const;

    qint32 getQuestlineItemHash() const;
    void setQuestlineItemHash(const qint32 &questline_item_hash);
    bool is_questline_item_hash_Set() const;
    bool is_questline_item_hash_Valid() const;

    bool isRequireFullObjectiveCompletion() const;
    void setRequireFullObjectiveCompletion(const bool &require_full_objective_completion);
    bool is_require_full_objective_completion_Set() const;
    bool is_require_full_objective_completion_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<qint32> m_display_activity_hashes;
    bool m_display_activity_hashes_isSet;
    bool m_display_activity_hashes_isValid;

    bool m_display_as_stat_tracker;
    bool m_display_as_stat_tracker_isSet;
    bool m_display_as_stat_tracker_isValid;

    QString m_narrative;
    bool m_narrative_isSet;
    bool m_narrative_isValid;

    QList<qint32> m_objective_hashes;
    bool m_objective_hashes_isSet;
    bool m_objective_hashes_isValid;

    QString m_objective_verb_name;
    bool m_objective_verb_name_isSet;
    bool m_objective_verb_name_isValid;

    QList<OAIDestiny_Definitions_DestinyObjectiveDisplayProperties> m_per_objective_display_properties;
    bool m_per_objective_display_properties_isSet;
    bool m_per_objective_display_properties_isValid;

    qint32 m_quest_type_hash;
    bool m_quest_type_hash_isSet;
    bool m_quest_type_hash_isValid;

    QString m_quest_type_identifier;
    bool m_quest_type_identifier_isSet;
    bool m_quest_type_identifier_isValid;

    qint32 m_questline_item_hash;
    bool m_questline_item_hash_isSet;
    bool m_questline_item_hash_isValid;

    bool m_require_full_objective_completion;
    bool m_require_full_objective_completion_isSet;
    bool m_require_full_objective_completion_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition)

#endif // OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition_H
