/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITrending_TrendingEntry.h
 *
 * The list entry view for trending items. Returns just enough to show the item on the trending page.
 */

#ifndef OAITrending_TrendingEntry_H
#define OAITrending_TrendingEntry_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITrending_TrendingEntry : public OAIObject {
public:
    OAITrending_TrendingEntry();
    OAITrending_TrendingEntry(QString json);
    ~OAITrending_TrendingEntry() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCreationDate() const;
    void setCreationDate(const QDateTime &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QDateTime getEndDate() const;
    void setEndDate(const QDateTime &end_date);
    bool is_end_date_Set() const;
    bool is_end_date_Valid() const;

    qint32 getEntityType() const;
    void setEntityType(const qint32 &entity_type);
    bool is_entity_type_Set() const;
    bool is_entity_type_Valid() const;

    QString getFeatureImage() const;
    void setFeatureImage(const QString &feature_image);
    bool is_feature_image_Set() const;
    bool is_feature_image_Valid() const;

    QString getIdentifier() const;
    void setIdentifier(const QString &identifier);
    bool is_identifier_Set() const;
    bool is_identifier_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    bool isIsFeatured() const;
    void setIsFeatured(const bool &is_featured);
    bool is_is_featured_Set() const;
    bool is_is_featured_Valid() const;

    QList<OAITrending_TrendingEntry> getItems() const;
    void setItems(const QList<OAITrending_TrendingEntry> &items);
    bool is_items_Set() const;
    bool is_items_Valid() const;

    QString getLink() const;
    void setLink(const QString &link);
    bool is_link_Set() const;
    bool is_link_Valid() const;

    QString getMp4Video() const;
    void setMp4Video(const QString &mp4_video);
    bool is_mp4_video_Set() const;
    bool is_mp4_video_Valid() const;

    QDateTime getStartDate() const;
    void setStartDate(const QDateTime &start_date);
    bool is_start_date_Set() const;
    bool is_start_date_Valid() const;

    QString getTagline() const;
    void setTagline(const QString &tagline);
    bool is_tagline_Set() const;
    bool is_tagline_Valid() const;

    QString getWebmVideo() const;
    void setWebmVideo(const QString &webm_video);
    bool is_webm_video_Set() const;
    bool is_webm_video_Valid() const;

    double getWeight() const;
    void setWeight(const double &weight);
    bool is_weight_Set() const;
    bool is_weight_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QDateTime m_end_date;
    bool m_end_date_isSet;
    bool m_end_date_isValid;

    qint32 m_entity_type;
    bool m_entity_type_isSet;
    bool m_entity_type_isValid;

    QString m_feature_image;
    bool m_feature_image_isSet;
    bool m_feature_image_isValid;

    QString m_identifier;
    bool m_identifier_isSet;
    bool m_identifier_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    bool m_is_featured;
    bool m_is_featured_isSet;
    bool m_is_featured_isValid;

    QList<OAITrending_TrendingEntry> m_items;
    bool m_items_isSet;
    bool m_items_isValid;

    QString m_link;
    bool m_link_isSet;
    bool m_link_isValid;

    QString m_mp4_video;
    bool m_mp4_video_isSet;
    bool m_mp4_video_isValid;

    QDateTime m_start_date;
    bool m_start_date_isSet;
    bool m_start_date_isValid;

    QString m_tagline;
    bool m_tagline_isSet;
    bool m_tagline_isValid;

    QString m_webm_video;
    bool m_webm_video_isSet;
    bool m_webm_video_isValid;

    double m_weight;
    bool m_weight_isSet;
    bool m_weight_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITrending_TrendingEntry)

#endif // OAITrending_TrendingEntry_H
