/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_GetMembershipDataById_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_GetMembershipDataById_200_response::OAIUser_GetMembershipDataById_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_GetMembershipDataById_200_response::OAIUser_GetMembershipDataById_200_response() {
    this->initializeModel();
}

OAIUser_GetMembershipDataById_200_response::~OAIUser_GetMembershipDataById_200_response() {}

void OAIUser_GetMembershipDataById_200_response::initializeModel() {

    m_detailed_error_trace_isSet = false;
    m_detailed_error_trace_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_status_isSet = false;
    m_error_status_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_message_data_isSet = false;
    m_message_data_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_throttle_seconds_isSet = false;
    m_throttle_seconds_isValid = false;
}

void OAIUser_GetMembershipDataById_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_GetMembershipDataById_200_response::fromJsonObject(QJsonObject json) {

    m_detailed_error_trace_isValid = ::OpenAPI::fromJsonValue(m_detailed_error_trace, json[QString("DetailedErrorTrace")]);
    m_detailed_error_trace_isSet = !json[QString("DetailedErrorTrace")].isNull() && m_detailed_error_trace_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("ErrorCode")]);
    m_error_code_isSet = !json[QString("ErrorCode")].isNull() && m_error_code_isValid;

    m_error_status_isValid = ::OpenAPI::fromJsonValue(m_error_status, json[QString("ErrorStatus")]);
    m_error_status_isSet = !json[QString("ErrorStatus")].isNull() && m_error_status_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_message_data_isValid = ::OpenAPI::fromJsonValue(m_message_data, json[QString("MessageData")]);
    m_message_data_isSet = !json[QString("MessageData")].isNull() && m_message_data_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("Response")]);
    m_response_isSet = !json[QString("Response")].isNull() && m_response_isValid;

    m_throttle_seconds_isValid = ::OpenAPI::fromJsonValue(m_throttle_seconds, json[QString("ThrottleSeconds")]);
    m_throttle_seconds_isSet = !json[QString("ThrottleSeconds")].isNull() && m_throttle_seconds_isValid;
}

QString OAIUser_GetMembershipDataById_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_GetMembershipDataById_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_detailed_error_trace_isSet) {
        obj.insert(QString("DetailedErrorTrace"), ::OpenAPI::toJsonValue(m_detailed_error_trace));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("ErrorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_status_isSet) {
        obj.insert(QString("ErrorStatus"), ::OpenAPI::toJsonValue(m_error_status));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_message_data.size() > 0) {
        obj.insert(QString("MessageData"), ::OpenAPI::toJsonValue(m_message_data));
    }
    if (m_response.isSet()) {
        obj.insert(QString("Response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_throttle_seconds_isSet) {
        obj.insert(QString("ThrottleSeconds"), ::OpenAPI::toJsonValue(m_throttle_seconds));
    }
    return obj;
}

QString OAIUser_GetMembershipDataById_200_response::getDetailedErrorTrace() const {
    return m_detailed_error_trace;
}
void OAIUser_GetMembershipDataById_200_response::setDetailedErrorTrace(const QString &detailed_error_trace) {
    m_detailed_error_trace = detailed_error_trace;
    m_detailed_error_trace_isSet = true;
}

bool OAIUser_GetMembershipDataById_200_response::is_detailed_error_trace_Set() const{
    return m_detailed_error_trace_isSet;
}

bool OAIUser_GetMembershipDataById_200_response::is_detailed_error_trace_Valid() const{
    return m_detailed_error_trace_isValid;
}

qint32 OAIUser_GetMembershipDataById_200_response::getErrorCode() const {
    return m_error_code;
}
void OAIUser_GetMembershipDataById_200_response::setErrorCode(const qint32 &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIUser_GetMembershipDataById_200_response::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIUser_GetMembershipDataById_200_response::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIUser_GetMembershipDataById_200_response::getErrorStatus() const {
    return m_error_status;
}
void OAIUser_GetMembershipDataById_200_response::setErrorStatus(const QString &error_status) {
    m_error_status = error_status;
    m_error_status_isSet = true;
}

bool OAIUser_GetMembershipDataById_200_response::is_error_status_Set() const{
    return m_error_status_isSet;
}

bool OAIUser_GetMembershipDataById_200_response::is_error_status_Valid() const{
    return m_error_status_isValid;
}

QString OAIUser_GetMembershipDataById_200_response::getMessage() const {
    return m_message;
}
void OAIUser_GetMembershipDataById_200_response::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIUser_GetMembershipDataById_200_response::is_message_Set() const{
    return m_message_isSet;
}

bool OAIUser_GetMembershipDataById_200_response::is_message_Valid() const{
    return m_message_isValid;
}

QMap<QString, QString> OAIUser_GetMembershipDataById_200_response::getMessageData() const {
    return m_message_data;
}
void OAIUser_GetMembershipDataById_200_response::setMessageData(const QMap<QString, QString> &message_data) {
    m_message_data = message_data;
    m_message_data_isSet = true;
}

bool OAIUser_GetMembershipDataById_200_response::is_message_data_Set() const{
    return m_message_data_isSet;
}

bool OAIUser_GetMembershipDataById_200_response::is_message_data_Valid() const{
    return m_message_data_isValid;
}

OAIUser_UserMembershipData OAIUser_GetMembershipDataById_200_response::getResponse() const {
    return m_response;
}
void OAIUser_GetMembershipDataById_200_response::setResponse(const OAIUser_UserMembershipData &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIUser_GetMembershipDataById_200_response::is_response_Set() const{
    return m_response_isSet;
}

bool OAIUser_GetMembershipDataById_200_response::is_response_Valid() const{
    return m_response_isValid;
}

qint32 OAIUser_GetMembershipDataById_200_response::getThrottleSeconds() const {
    return m_throttle_seconds;
}
void OAIUser_GetMembershipDataById_200_response::setThrottleSeconds(const qint32 &throttle_seconds) {
    m_throttle_seconds = throttle_seconds;
    m_throttle_seconds_isSet = true;
}

bool OAIUser_GetMembershipDataById_200_response::is_throttle_seconds_Set() const{
    return m_throttle_seconds_isSet;
}

bool OAIUser_GetMembershipDataById_200_response::is_throttle_seconds_Valid() const{
    return m_throttle_seconds_isValid;
}

bool OAIUser_GetMembershipDataById_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detailed_error_trace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_throttle_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_GetMembershipDataById_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
