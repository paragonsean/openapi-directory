/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity.h
 *
 * Summary information about the activity that was played.
 */

#ifndef OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity_H
#define OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity_H

#include <QJsonObject>

#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity : public OAIObject {
public:
    OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity();
    OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity(QString json);
    ~OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDirectorActivityHash() const;
    void setDirectorActivityHash(const qint32 &director_activity_hash);
    bool is_director_activity_hash_Set() const;
    bool is_director_activity_hash_Valid() const;

    qint64 getInstanceId() const;
    void setInstanceId(const qint64 &instance_id);
    bool is_instance_id_Set() const;
    bool is_instance_id_Valid() const;

    bool isIsPrivate() const;
    void setIsPrivate(const bool &is_private);
    bool is_is_private_Set() const;
    bool is_is_private_Valid() const;

    qint32 getMembershipType() const;
    void setMembershipType(const qint32 &membership_type);
    bool is_membership_type_Set() const;
    bool is_membership_type_Valid() const;

    qint32 getMode() const;
    void setMode(const qint32 &mode);
    bool is_mode_Set() const;
    bool is_mode_Valid() const;

    QList<qint32> getModes() const;
    void setModes(const QList<qint32> &modes);
    bool is_modes_Set() const;
    bool is_modes_Valid() const;

    qint32 getReferenceId() const;
    void setReferenceId(const qint32 &reference_id);
    bool is_reference_id_Set() const;
    bool is_reference_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_director_activity_hash;
    bool m_director_activity_hash_isSet;
    bool m_director_activity_hash_isValid;

    qint64 m_instance_id;
    bool m_instance_id_isSet;
    bool m_instance_id_isValid;

    bool m_is_private;
    bool m_is_private_isSet;
    bool m_is_private_isValid;

    qint32 m_membership_type;
    bool m_membership_type_isSet;
    bool m_membership_type_isValid;

    qint32 m_mode;
    bool m_mode_isSet;
    bool m_mode_isValid;

    QList<qint32> m_modes;
    bool m_modes_isSet;
    bool m_modes_isValid;

    qint32 m_reference_id;
    bool m_reference_id_isSet;
    bool m_reference_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity)

#endif // OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity_H
