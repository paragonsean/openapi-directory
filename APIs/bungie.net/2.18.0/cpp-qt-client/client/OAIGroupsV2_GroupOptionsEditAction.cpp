/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupsV2_GroupOptionsEditAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupsV2_GroupOptionsEditAction::OAIGroupsV2_GroupOptionsEditAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupsV2_GroupOptionsEditAction::OAIGroupsV2_GroupOptionsEditAction() {
    this->initializeModel();
}

OAIGroupsV2_GroupOptionsEditAction::~OAIGroupsV2_GroupOptionsEditAction() {}

void OAIGroupsV2_GroupOptionsEditAction::initializeModel() {

    m_host_guided_game_permission_override_isSet = false;
    m_host_guided_game_permission_override_isValid = false;

    m_invite_permission_override_isSet = false;
    m_invite_permission_override_isValid = false;

    m_join_level_isSet = false;
    m_join_level_isValid = false;

    m_update_banner_permission_override_isSet = false;
    m_update_banner_permission_override_isValid = false;

    m_update_culture_permission_override_isSet = false;
    m_update_culture_permission_override_isValid = false;
}

void OAIGroupsV2_GroupOptionsEditAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupsV2_GroupOptionsEditAction::fromJsonObject(QJsonObject json) {

    m_host_guided_game_permission_override_isValid = ::OpenAPI::fromJsonValue(m_host_guided_game_permission_override, json[QString("HostGuidedGamePermissionOverride")]);
    m_host_guided_game_permission_override_isSet = !json[QString("HostGuidedGamePermissionOverride")].isNull() && m_host_guided_game_permission_override_isValid;

    m_invite_permission_override_isValid = ::OpenAPI::fromJsonValue(m_invite_permission_override, json[QString("InvitePermissionOverride")]);
    m_invite_permission_override_isSet = !json[QString("InvitePermissionOverride")].isNull() && m_invite_permission_override_isValid;

    m_join_level_isValid = ::OpenAPI::fromJsonValue(m_join_level, json[QString("JoinLevel")]);
    m_join_level_isSet = !json[QString("JoinLevel")].isNull() && m_join_level_isValid;

    m_update_banner_permission_override_isValid = ::OpenAPI::fromJsonValue(m_update_banner_permission_override, json[QString("UpdateBannerPermissionOverride")]);
    m_update_banner_permission_override_isSet = !json[QString("UpdateBannerPermissionOverride")].isNull() && m_update_banner_permission_override_isValid;

    m_update_culture_permission_override_isValid = ::OpenAPI::fromJsonValue(m_update_culture_permission_override, json[QString("UpdateCulturePermissionOverride")]);
    m_update_culture_permission_override_isSet = !json[QString("UpdateCulturePermissionOverride")].isNull() && m_update_culture_permission_override_isValid;
}

QString OAIGroupsV2_GroupOptionsEditAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupsV2_GroupOptionsEditAction::asJsonObject() const {
    QJsonObject obj;
    if (m_host_guided_game_permission_override_isSet) {
        obj.insert(QString("HostGuidedGamePermissionOverride"), ::OpenAPI::toJsonValue(m_host_guided_game_permission_override));
    }
    if (m_invite_permission_override_isSet) {
        obj.insert(QString("InvitePermissionOverride"), ::OpenAPI::toJsonValue(m_invite_permission_override));
    }
    if (m_join_level_isSet) {
        obj.insert(QString("JoinLevel"), ::OpenAPI::toJsonValue(m_join_level));
    }
    if (m_update_banner_permission_override_isSet) {
        obj.insert(QString("UpdateBannerPermissionOverride"), ::OpenAPI::toJsonValue(m_update_banner_permission_override));
    }
    if (m_update_culture_permission_override_isSet) {
        obj.insert(QString("UpdateCulturePermissionOverride"), ::OpenAPI::toJsonValue(m_update_culture_permission_override));
    }
    return obj;
}

qint32 OAIGroupsV2_GroupOptionsEditAction::getHostGuidedGamePermissionOverride() const {
    return m_host_guided_game_permission_override;
}
void OAIGroupsV2_GroupOptionsEditAction::setHostGuidedGamePermissionOverride(const qint32 &host_guided_game_permission_override) {
    m_host_guided_game_permission_override = host_guided_game_permission_override;
    m_host_guided_game_permission_override_isSet = true;
}

bool OAIGroupsV2_GroupOptionsEditAction::is_host_guided_game_permission_override_Set() const{
    return m_host_guided_game_permission_override_isSet;
}

bool OAIGroupsV2_GroupOptionsEditAction::is_host_guided_game_permission_override_Valid() const{
    return m_host_guided_game_permission_override_isValid;
}

bool OAIGroupsV2_GroupOptionsEditAction::isInvitePermissionOverride() const {
    return m_invite_permission_override;
}
void OAIGroupsV2_GroupOptionsEditAction::setInvitePermissionOverride(const bool &invite_permission_override) {
    m_invite_permission_override = invite_permission_override;
    m_invite_permission_override_isSet = true;
}

bool OAIGroupsV2_GroupOptionsEditAction::is_invite_permission_override_Set() const{
    return m_invite_permission_override_isSet;
}

bool OAIGroupsV2_GroupOptionsEditAction::is_invite_permission_override_Valid() const{
    return m_invite_permission_override_isValid;
}

qint32 OAIGroupsV2_GroupOptionsEditAction::getJoinLevel() const {
    return m_join_level;
}
void OAIGroupsV2_GroupOptionsEditAction::setJoinLevel(const qint32 &join_level) {
    m_join_level = join_level;
    m_join_level_isSet = true;
}

bool OAIGroupsV2_GroupOptionsEditAction::is_join_level_Set() const{
    return m_join_level_isSet;
}

bool OAIGroupsV2_GroupOptionsEditAction::is_join_level_Valid() const{
    return m_join_level_isValid;
}

bool OAIGroupsV2_GroupOptionsEditAction::isUpdateBannerPermissionOverride() const {
    return m_update_banner_permission_override;
}
void OAIGroupsV2_GroupOptionsEditAction::setUpdateBannerPermissionOverride(const bool &update_banner_permission_override) {
    m_update_banner_permission_override = update_banner_permission_override;
    m_update_banner_permission_override_isSet = true;
}

bool OAIGroupsV2_GroupOptionsEditAction::is_update_banner_permission_override_Set() const{
    return m_update_banner_permission_override_isSet;
}

bool OAIGroupsV2_GroupOptionsEditAction::is_update_banner_permission_override_Valid() const{
    return m_update_banner_permission_override_isValid;
}

bool OAIGroupsV2_GroupOptionsEditAction::isUpdateCulturePermissionOverride() const {
    return m_update_culture_permission_override;
}
void OAIGroupsV2_GroupOptionsEditAction::setUpdateCulturePermissionOverride(const bool &update_culture_permission_override) {
    m_update_culture_permission_override = update_culture_permission_override;
    m_update_culture_permission_override_isSet = true;
}

bool OAIGroupsV2_GroupOptionsEditAction::is_update_culture_permission_override_Set() const{
    return m_update_culture_permission_override_isSet;
}

bool OAIGroupsV2_GroupOptionsEditAction::is_update_culture_permission_override_Valid() const{
    return m_update_culture_permission_override_isValid;
}

bool OAIGroupsV2_GroupOptionsEditAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_guided_game_permission_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invite_permission_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_join_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_banner_permission_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_culture_permission_override_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupsV2_GroupOptionsEditAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
