/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_Models_GetCredentialTypesForAccountResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_Models_GetCredentialTypesForAccountResponse::OAIUser_Models_GetCredentialTypesForAccountResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_Models_GetCredentialTypesForAccountResponse::OAIUser_Models_GetCredentialTypesForAccountResponse() {
    this->initializeModel();
}

OAIUser_Models_GetCredentialTypesForAccountResponse::~OAIUser_Models_GetCredentialTypesForAccountResponse() {}

void OAIUser_Models_GetCredentialTypesForAccountResponse::initializeModel() {

    m_credential_as_string_isSet = false;
    m_credential_as_string_isValid = false;

    m_credential_display_name_isSet = false;
    m_credential_display_name_isValid = false;

    m_credential_type_isSet = false;
    m_credential_type_isValid = false;

    m_is_public_isSet = false;
    m_is_public_isValid = false;
}

void OAIUser_Models_GetCredentialTypesForAccountResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_Models_GetCredentialTypesForAccountResponse::fromJsonObject(QJsonObject json) {

    m_credential_as_string_isValid = ::OpenAPI::fromJsonValue(m_credential_as_string, json[QString("credentialAsString")]);
    m_credential_as_string_isSet = !json[QString("credentialAsString")].isNull() && m_credential_as_string_isValid;

    m_credential_display_name_isValid = ::OpenAPI::fromJsonValue(m_credential_display_name, json[QString("credentialDisplayName")]);
    m_credential_display_name_isSet = !json[QString("credentialDisplayName")].isNull() && m_credential_display_name_isValid;

    m_credential_type_isValid = ::OpenAPI::fromJsonValue(m_credential_type, json[QString("credentialType")]);
    m_credential_type_isSet = !json[QString("credentialType")].isNull() && m_credential_type_isValid;

    m_is_public_isValid = ::OpenAPI::fromJsonValue(m_is_public, json[QString("isPublic")]);
    m_is_public_isSet = !json[QString("isPublic")].isNull() && m_is_public_isValid;
}

QString OAIUser_Models_GetCredentialTypesForAccountResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_Models_GetCredentialTypesForAccountResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_credential_as_string_isSet) {
        obj.insert(QString("credentialAsString"), ::OpenAPI::toJsonValue(m_credential_as_string));
    }
    if (m_credential_display_name_isSet) {
        obj.insert(QString("credentialDisplayName"), ::OpenAPI::toJsonValue(m_credential_display_name));
    }
    if (m_credential_type_isSet) {
        obj.insert(QString("credentialType"), ::OpenAPI::toJsonValue(m_credential_type));
    }
    if (m_is_public_isSet) {
        obj.insert(QString("isPublic"), ::OpenAPI::toJsonValue(m_is_public));
    }
    return obj;
}

QString OAIUser_Models_GetCredentialTypesForAccountResponse::getCredentialAsString() const {
    return m_credential_as_string;
}
void OAIUser_Models_GetCredentialTypesForAccountResponse::setCredentialAsString(const QString &credential_as_string) {
    m_credential_as_string = credential_as_string;
    m_credential_as_string_isSet = true;
}

bool OAIUser_Models_GetCredentialTypesForAccountResponse::is_credential_as_string_Set() const{
    return m_credential_as_string_isSet;
}

bool OAIUser_Models_GetCredentialTypesForAccountResponse::is_credential_as_string_Valid() const{
    return m_credential_as_string_isValid;
}

QString OAIUser_Models_GetCredentialTypesForAccountResponse::getCredentialDisplayName() const {
    return m_credential_display_name;
}
void OAIUser_Models_GetCredentialTypesForAccountResponse::setCredentialDisplayName(const QString &credential_display_name) {
    m_credential_display_name = credential_display_name;
    m_credential_display_name_isSet = true;
}

bool OAIUser_Models_GetCredentialTypesForAccountResponse::is_credential_display_name_Set() const{
    return m_credential_display_name_isSet;
}

bool OAIUser_Models_GetCredentialTypesForAccountResponse::is_credential_display_name_Valid() const{
    return m_credential_display_name_isValid;
}

qint32 OAIUser_Models_GetCredentialTypesForAccountResponse::getCredentialType() const {
    return m_credential_type;
}
void OAIUser_Models_GetCredentialTypesForAccountResponse::setCredentialType(const qint32 &credential_type) {
    m_credential_type = credential_type;
    m_credential_type_isSet = true;
}

bool OAIUser_Models_GetCredentialTypesForAccountResponse::is_credential_type_Set() const{
    return m_credential_type_isSet;
}

bool OAIUser_Models_GetCredentialTypesForAccountResponse::is_credential_type_Valid() const{
    return m_credential_type_isValid;
}

bool OAIUser_Models_GetCredentialTypesForAccountResponse::isIsPublic() const {
    return m_is_public;
}
void OAIUser_Models_GetCredentialTypesForAccountResponse::setIsPublic(const bool &is_public) {
    m_is_public = is_public;
    m_is_public_isSet = true;
}

bool OAIUser_Models_GetCredentialTypesForAccountResponse::is_is_public_Set() const{
    return m_is_public_isSet;
}

bool OAIUser_Models_GetCredentialTypesForAccountResponse::is_is_public_Valid() const{
    return m_is_public_isValid;
}

bool OAIUser_Models_GetCredentialTypesForAccountResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_credential_as_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credential_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credential_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_public_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_Models_GetCredentialTypesForAccountResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
