/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyItemSocketEntryDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::OAIDestiny_Definitions_DestinyItemSocketEntryDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::OAIDestiny_Definitions_DestinyItemSocketEntryDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::~OAIDestiny_Definitions_DestinyItemSocketEntryDefinition() {}

void OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::initializeModel() {

    m_default_visible_isSet = false;
    m_default_visible_isValid = false;

    m_hide_perks_in_item_tooltip_isSet = false;
    m_hide_perks_in_item_tooltip_isValid = false;

    m_plug_sources_isSet = false;
    m_plug_sources_isValid = false;

    m_prevent_initialization_on_vendor_purchase_isSet = false;
    m_prevent_initialization_on_vendor_purchase_isValid = false;

    m_randomized_plug_set_hash_isSet = false;
    m_randomized_plug_set_hash_isValid = false;

    m_reusable_plug_items_isSet = false;
    m_reusable_plug_items_isValid = false;

    m_reusable_plug_set_hash_isSet = false;
    m_reusable_plug_set_hash_isValid = false;

    m_single_initial_item_hash_isSet = false;
    m_single_initial_item_hash_isValid = false;

    m_socket_type_hash_isSet = false;
    m_socket_type_hash_isValid = false;
}

void OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::fromJsonObject(QJsonObject json) {

    m_default_visible_isValid = ::OpenAPI::fromJsonValue(m_default_visible, json[QString("defaultVisible")]);
    m_default_visible_isSet = !json[QString("defaultVisible")].isNull() && m_default_visible_isValid;

    m_hide_perks_in_item_tooltip_isValid = ::OpenAPI::fromJsonValue(m_hide_perks_in_item_tooltip, json[QString("hidePerksInItemTooltip")]);
    m_hide_perks_in_item_tooltip_isSet = !json[QString("hidePerksInItemTooltip")].isNull() && m_hide_perks_in_item_tooltip_isValid;

    m_plug_sources_isValid = ::OpenAPI::fromJsonValue(m_plug_sources, json[QString("plugSources")]);
    m_plug_sources_isSet = !json[QString("plugSources")].isNull() && m_plug_sources_isValid;

    m_prevent_initialization_on_vendor_purchase_isValid = ::OpenAPI::fromJsonValue(m_prevent_initialization_on_vendor_purchase, json[QString("preventInitializationOnVendorPurchase")]);
    m_prevent_initialization_on_vendor_purchase_isSet = !json[QString("preventInitializationOnVendorPurchase")].isNull() && m_prevent_initialization_on_vendor_purchase_isValid;

    m_randomized_plug_set_hash_isValid = ::OpenAPI::fromJsonValue(m_randomized_plug_set_hash, json[QString("randomizedPlugSetHash")]);
    m_randomized_plug_set_hash_isSet = !json[QString("randomizedPlugSetHash")].isNull() && m_randomized_plug_set_hash_isValid;

    m_reusable_plug_items_isValid = ::OpenAPI::fromJsonValue(m_reusable_plug_items, json[QString("reusablePlugItems")]);
    m_reusable_plug_items_isSet = !json[QString("reusablePlugItems")].isNull() && m_reusable_plug_items_isValid;

    m_reusable_plug_set_hash_isValid = ::OpenAPI::fromJsonValue(m_reusable_plug_set_hash, json[QString("reusablePlugSetHash")]);
    m_reusable_plug_set_hash_isSet = !json[QString("reusablePlugSetHash")].isNull() && m_reusable_plug_set_hash_isValid;

    m_single_initial_item_hash_isValid = ::OpenAPI::fromJsonValue(m_single_initial_item_hash, json[QString("singleInitialItemHash")]);
    m_single_initial_item_hash_isSet = !json[QString("singleInitialItemHash")].isNull() && m_single_initial_item_hash_isValid;

    m_socket_type_hash_isValid = ::OpenAPI::fromJsonValue(m_socket_type_hash, json[QString("socketTypeHash")]);
    m_socket_type_hash_isSet = !json[QString("socketTypeHash")].isNull() && m_socket_type_hash_isValid;
}

QString OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_default_visible_isSet) {
        obj.insert(QString("defaultVisible"), ::OpenAPI::toJsonValue(m_default_visible));
    }
    if (m_hide_perks_in_item_tooltip_isSet) {
        obj.insert(QString("hidePerksInItemTooltip"), ::OpenAPI::toJsonValue(m_hide_perks_in_item_tooltip));
    }
    if (m_plug_sources_isSet) {
        obj.insert(QString("plugSources"), ::OpenAPI::toJsonValue(m_plug_sources));
    }
    if (m_prevent_initialization_on_vendor_purchase_isSet) {
        obj.insert(QString("preventInitializationOnVendorPurchase"), ::OpenAPI::toJsonValue(m_prevent_initialization_on_vendor_purchase));
    }
    if (m_randomized_plug_set_hash_isSet) {
        obj.insert(QString("randomizedPlugSetHash"), ::OpenAPI::toJsonValue(m_randomized_plug_set_hash));
    }
    if (m_reusable_plug_items.size() > 0) {
        obj.insert(QString("reusablePlugItems"), ::OpenAPI::toJsonValue(m_reusable_plug_items));
    }
    if (m_reusable_plug_set_hash_isSet) {
        obj.insert(QString("reusablePlugSetHash"), ::OpenAPI::toJsonValue(m_reusable_plug_set_hash));
    }
    if (m_single_initial_item_hash_isSet) {
        obj.insert(QString("singleInitialItemHash"), ::OpenAPI::toJsonValue(m_single_initial_item_hash));
    }
    if (m_socket_type_hash_isSet) {
        obj.insert(QString("socketTypeHash"), ::OpenAPI::toJsonValue(m_socket_type_hash));
    }
    return obj;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::isDefaultVisible() const {
    return m_default_visible;
}
void OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::setDefaultVisible(const bool &default_visible) {
    m_default_visible = default_visible;
    m_default_visible_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::is_default_visible_Set() const{
    return m_default_visible_isSet;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::is_default_visible_Valid() const{
    return m_default_visible_isValid;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::isHidePerksInItemTooltip() const {
    return m_hide_perks_in_item_tooltip;
}
void OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::setHidePerksInItemTooltip(const bool &hide_perks_in_item_tooltip) {
    m_hide_perks_in_item_tooltip = hide_perks_in_item_tooltip;
    m_hide_perks_in_item_tooltip_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::is_hide_perks_in_item_tooltip_Set() const{
    return m_hide_perks_in_item_tooltip_isSet;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::is_hide_perks_in_item_tooltip_Valid() const{
    return m_hide_perks_in_item_tooltip_isValid;
}

qint32 OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::getPlugSources() const {
    return m_plug_sources;
}
void OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::setPlugSources(const qint32 &plug_sources) {
    m_plug_sources = plug_sources;
    m_plug_sources_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::is_plug_sources_Set() const{
    return m_plug_sources_isSet;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::is_plug_sources_Valid() const{
    return m_plug_sources_isValid;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::isPreventInitializationOnVendorPurchase() const {
    return m_prevent_initialization_on_vendor_purchase;
}
void OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::setPreventInitializationOnVendorPurchase(const bool &prevent_initialization_on_vendor_purchase) {
    m_prevent_initialization_on_vendor_purchase = prevent_initialization_on_vendor_purchase;
    m_prevent_initialization_on_vendor_purchase_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::is_prevent_initialization_on_vendor_purchase_Set() const{
    return m_prevent_initialization_on_vendor_purchase_isSet;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::is_prevent_initialization_on_vendor_purchase_Valid() const{
    return m_prevent_initialization_on_vendor_purchase_isValid;
}

qint32 OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::getRandomizedPlugSetHash() const {
    return m_randomized_plug_set_hash;
}
void OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::setRandomizedPlugSetHash(const qint32 &randomized_plug_set_hash) {
    m_randomized_plug_set_hash = randomized_plug_set_hash;
    m_randomized_plug_set_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::is_randomized_plug_set_hash_Set() const{
    return m_randomized_plug_set_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::is_randomized_plug_set_hash_Valid() const{
    return m_randomized_plug_set_hash_isValid;
}

QList<OAIDestiny_Definitions_DestinyItemSocketEntryPlugItemDefinition> OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::getReusablePlugItems() const {
    return m_reusable_plug_items;
}
void OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::setReusablePlugItems(const QList<OAIDestiny_Definitions_DestinyItemSocketEntryPlugItemDefinition> &reusable_plug_items) {
    m_reusable_plug_items = reusable_plug_items;
    m_reusable_plug_items_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::is_reusable_plug_items_Set() const{
    return m_reusable_plug_items_isSet;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::is_reusable_plug_items_Valid() const{
    return m_reusable_plug_items_isValid;
}

qint32 OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::getReusablePlugSetHash() const {
    return m_reusable_plug_set_hash;
}
void OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::setReusablePlugSetHash(const qint32 &reusable_plug_set_hash) {
    m_reusable_plug_set_hash = reusable_plug_set_hash;
    m_reusable_plug_set_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::is_reusable_plug_set_hash_Set() const{
    return m_reusable_plug_set_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::is_reusable_plug_set_hash_Valid() const{
    return m_reusable_plug_set_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::getSingleInitialItemHash() const {
    return m_single_initial_item_hash;
}
void OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::setSingleInitialItemHash(const qint32 &single_initial_item_hash) {
    m_single_initial_item_hash = single_initial_item_hash;
    m_single_initial_item_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::is_single_initial_item_hash_Set() const{
    return m_single_initial_item_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::is_single_initial_item_hash_Valid() const{
    return m_single_initial_item_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::getSocketTypeHash() const {
    return m_socket_type_hash;
}
void OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::setSocketTypeHash(const qint32 &socket_type_hash) {
    m_socket_type_hash = socket_type_hash;
    m_socket_type_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::is_socket_type_hash_Set() const{
    return m_socket_type_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::is_socket_type_hash_Valid() const{
    return m_socket_type_hash_isValid;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_visible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_perks_in_item_tooltip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plug_sources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prevent_initialization_on_vendor_purchase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_randomized_plug_set_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reusable_plug_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reusable_plug_set_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_initial_item_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_socket_type_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyItemSocketEntryDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
