/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Responses_DestinyItemResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Responses_DestinyItemResponse::OAIDestiny_Responses_DestinyItemResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Responses_DestinyItemResponse::OAIDestiny_Responses_DestinyItemResponse() {
    this->initializeModel();
}

OAIDestiny_Responses_DestinyItemResponse::~OAIDestiny_Responses_DestinyItemResponse() {}

void OAIDestiny_Responses_DestinyItemResponse::initializeModel() {

    m_character_id_isSet = false;
    m_character_id_isValid = false;

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_item_isSet = false;
    m_item_isValid = false;

    m_objectives_isSet = false;
    m_objectives_isValid = false;

    m_perks_isSet = false;
    m_perks_isValid = false;

    m_plug_objectives_isSet = false;
    m_plug_objectives_isValid = false;

    m_render_data_isSet = false;
    m_render_data_isValid = false;

    m_reusable_plugs_isSet = false;
    m_reusable_plugs_isValid = false;

    m_sockets_isSet = false;
    m_sockets_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;

    m_talent_grid_isSet = false;
    m_talent_grid_isValid = false;
}

void OAIDestiny_Responses_DestinyItemResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Responses_DestinyItemResponse::fromJsonObject(QJsonObject json) {

    m_character_id_isValid = ::OpenAPI::fromJsonValue(m_character_id, json[QString("characterId")]);
    m_character_id_isSet = !json[QString("characterId")].isNull() && m_character_id_isValid;

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("item")]);
    m_item_isSet = !json[QString("item")].isNull() && m_item_isValid;

    m_objectives_isValid = ::OpenAPI::fromJsonValue(m_objectives, json[QString("objectives")]);
    m_objectives_isSet = !json[QString("objectives")].isNull() && m_objectives_isValid;

    m_perks_isValid = ::OpenAPI::fromJsonValue(m_perks, json[QString("perks")]);
    m_perks_isSet = !json[QString("perks")].isNull() && m_perks_isValid;

    m_plug_objectives_isValid = ::OpenAPI::fromJsonValue(m_plug_objectives, json[QString("plugObjectives")]);
    m_plug_objectives_isSet = !json[QString("plugObjectives")].isNull() && m_plug_objectives_isValid;

    m_render_data_isValid = ::OpenAPI::fromJsonValue(m_render_data, json[QString("renderData")]);
    m_render_data_isSet = !json[QString("renderData")].isNull() && m_render_data_isValid;

    m_reusable_plugs_isValid = ::OpenAPI::fromJsonValue(m_reusable_plugs, json[QString("reusablePlugs")]);
    m_reusable_plugs_isSet = !json[QString("reusablePlugs")].isNull() && m_reusable_plugs_isValid;

    m_sockets_isValid = ::OpenAPI::fromJsonValue(m_sockets, json[QString("sockets")]);
    m_sockets_isSet = !json[QString("sockets")].isNull() && m_sockets_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;

    m_talent_grid_isValid = ::OpenAPI::fromJsonValue(m_talent_grid, json[QString("talentGrid")]);
    m_talent_grid_isSet = !json[QString("talentGrid")].isNull() && m_talent_grid_isValid;
}

QString OAIDestiny_Responses_DestinyItemResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Responses_DestinyItemResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_character_id_isSet) {
        obj.insert(QString("characterId"), ::OpenAPI::toJsonValue(m_character_id));
    }
    if (m_instance.isSet()) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    if (m_item.isSet()) {
        obj.insert(QString("item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_objectives.isSet()) {
        obj.insert(QString("objectives"), ::OpenAPI::toJsonValue(m_objectives));
    }
    if (m_perks.isSet()) {
        obj.insert(QString("perks"), ::OpenAPI::toJsonValue(m_perks));
    }
    if (m_plug_objectives.isSet()) {
        obj.insert(QString("plugObjectives"), ::OpenAPI::toJsonValue(m_plug_objectives));
    }
    if (m_render_data.isSet()) {
        obj.insert(QString("renderData"), ::OpenAPI::toJsonValue(m_render_data));
    }
    if (m_reusable_plugs.isSet()) {
        obj.insert(QString("reusablePlugs"), ::OpenAPI::toJsonValue(m_reusable_plugs));
    }
    if (m_sockets.isSet()) {
        obj.insert(QString("sockets"), ::OpenAPI::toJsonValue(m_sockets));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    if (m_talent_grid.isSet()) {
        obj.insert(QString("talentGrid"), ::OpenAPI::toJsonValue(m_talent_grid));
    }
    return obj;
}

qint64 OAIDestiny_Responses_DestinyItemResponse::getCharacterId() const {
    return m_character_id;
}
void OAIDestiny_Responses_DestinyItemResponse::setCharacterId(const qint64 &character_id) {
    m_character_id = character_id;
    m_character_id_isSet = true;
}

bool OAIDestiny_Responses_DestinyItemResponse::is_character_id_Set() const{
    return m_character_id_isSet;
}

bool OAIDestiny_Responses_DestinyItemResponse::is_character_id_Valid() const{
    return m_character_id_isValid;
}

OAISingleComponentResponseOfDestinyItemInstanceComponent OAIDestiny_Responses_DestinyItemResponse::getInstance() const {
    return m_instance;
}
void OAIDestiny_Responses_DestinyItemResponse::setInstance(const OAISingleComponentResponseOfDestinyItemInstanceComponent &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAIDestiny_Responses_DestinyItemResponse::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAIDestiny_Responses_DestinyItemResponse::is_instance_Valid() const{
    return m_instance_isValid;
}

OAISingleComponentResponseOfDestinyItemComponent OAIDestiny_Responses_DestinyItemResponse::getItem() const {
    return m_item;
}
void OAIDestiny_Responses_DestinyItemResponse::setItem(const OAISingleComponentResponseOfDestinyItemComponent &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAIDestiny_Responses_DestinyItemResponse::is_item_Set() const{
    return m_item_isSet;
}

bool OAIDestiny_Responses_DestinyItemResponse::is_item_Valid() const{
    return m_item_isValid;
}

OAISingleComponentResponseOfDestinyItemObjectivesComponent OAIDestiny_Responses_DestinyItemResponse::getObjectives() const {
    return m_objectives;
}
void OAIDestiny_Responses_DestinyItemResponse::setObjectives(const OAISingleComponentResponseOfDestinyItemObjectivesComponent &objectives) {
    m_objectives = objectives;
    m_objectives_isSet = true;
}

bool OAIDestiny_Responses_DestinyItemResponse::is_objectives_Set() const{
    return m_objectives_isSet;
}

bool OAIDestiny_Responses_DestinyItemResponse::is_objectives_Valid() const{
    return m_objectives_isValid;
}

OAISingleComponentResponseOfDestinyItemPerksComponent OAIDestiny_Responses_DestinyItemResponse::getPerks() const {
    return m_perks;
}
void OAIDestiny_Responses_DestinyItemResponse::setPerks(const OAISingleComponentResponseOfDestinyItemPerksComponent &perks) {
    m_perks = perks;
    m_perks_isSet = true;
}

bool OAIDestiny_Responses_DestinyItemResponse::is_perks_Set() const{
    return m_perks_isSet;
}

bool OAIDestiny_Responses_DestinyItemResponse::is_perks_Valid() const{
    return m_perks_isValid;
}

OAISingleComponentResponseOfDestinyItemPlugObjectivesComponent OAIDestiny_Responses_DestinyItemResponse::getPlugObjectives() const {
    return m_plug_objectives;
}
void OAIDestiny_Responses_DestinyItemResponse::setPlugObjectives(const OAISingleComponentResponseOfDestinyItemPlugObjectivesComponent &plug_objectives) {
    m_plug_objectives = plug_objectives;
    m_plug_objectives_isSet = true;
}

bool OAIDestiny_Responses_DestinyItemResponse::is_plug_objectives_Set() const{
    return m_plug_objectives_isSet;
}

bool OAIDestiny_Responses_DestinyItemResponse::is_plug_objectives_Valid() const{
    return m_plug_objectives_isValid;
}

OAISingleComponentResponseOfDestinyItemRenderComponent OAIDestiny_Responses_DestinyItemResponse::getRenderData() const {
    return m_render_data;
}
void OAIDestiny_Responses_DestinyItemResponse::setRenderData(const OAISingleComponentResponseOfDestinyItemRenderComponent &render_data) {
    m_render_data = render_data;
    m_render_data_isSet = true;
}

bool OAIDestiny_Responses_DestinyItemResponse::is_render_data_Set() const{
    return m_render_data_isSet;
}

bool OAIDestiny_Responses_DestinyItemResponse::is_render_data_Valid() const{
    return m_render_data_isValid;
}

OAISingleComponentResponseOfDestinyItemReusablePlugsComponent OAIDestiny_Responses_DestinyItemResponse::getReusablePlugs() const {
    return m_reusable_plugs;
}
void OAIDestiny_Responses_DestinyItemResponse::setReusablePlugs(const OAISingleComponentResponseOfDestinyItemReusablePlugsComponent &reusable_plugs) {
    m_reusable_plugs = reusable_plugs;
    m_reusable_plugs_isSet = true;
}

bool OAIDestiny_Responses_DestinyItemResponse::is_reusable_plugs_Set() const{
    return m_reusable_plugs_isSet;
}

bool OAIDestiny_Responses_DestinyItemResponse::is_reusable_plugs_Valid() const{
    return m_reusable_plugs_isValid;
}

OAISingleComponentResponseOfDestinyItemSocketsComponent OAIDestiny_Responses_DestinyItemResponse::getSockets() const {
    return m_sockets;
}
void OAIDestiny_Responses_DestinyItemResponse::setSockets(const OAISingleComponentResponseOfDestinyItemSocketsComponent &sockets) {
    m_sockets = sockets;
    m_sockets_isSet = true;
}

bool OAIDestiny_Responses_DestinyItemResponse::is_sockets_Set() const{
    return m_sockets_isSet;
}

bool OAIDestiny_Responses_DestinyItemResponse::is_sockets_Valid() const{
    return m_sockets_isValid;
}

OAISingleComponentResponseOfDestinyItemStatsComponent OAIDestiny_Responses_DestinyItemResponse::getStats() const {
    return m_stats;
}
void OAIDestiny_Responses_DestinyItemResponse::setStats(const OAISingleComponentResponseOfDestinyItemStatsComponent &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIDestiny_Responses_DestinyItemResponse::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIDestiny_Responses_DestinyItemResponse::is_stats_Valid() const{
    return m_stats_isValid;
}

OAISingleComponentResponseOfDestinyItemTalentGridComponent OAIDestiny_Responses_DestinyItemResponse::getTalentGrid() const {
    return m_talent_grid;
}
void OAIDestiny_Responses_DestinyItemResponse::setTalentGrid(const OAISingleComponentResponseOfDestinyItemTalentGridComponent &talent_grid) {
    m_talent_grid = talent_grid;
    m_talent_grid_isSet = true;
}

bool OAIDestiny_Responses_DestinyItemResponse::is_talent_grid_Set() const{
    return m_talent_grid_isSet;
}

bool OAIDestiny_Responses_DestinyItemResponse::is_talent_grid_Valid() const{
    return m_talent_grid_isValid;
}

bool OAIDestiny_Responses_DestinyItemResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_character_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_objectives.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_perks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plug_objectives.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_render_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reusable_plugs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sockets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_talent_grid.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Responses_DestinyItemResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
