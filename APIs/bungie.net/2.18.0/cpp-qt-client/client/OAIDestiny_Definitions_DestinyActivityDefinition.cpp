/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyActivityDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyActivityDefinition::OAIDestiny_Definitions_DestinyActivityDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyActivityDefinition::OAIDestiny_Definitions_DestinyActivityDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyActivityDefinition::~OAIDestiny_Definitions_DestinyActivityDefinition() {}

void OAIDestiny_Definitions_DestinyActivityDefinition::initializeModel() {

    m_activity_graph_list_isSet = false;
    m_activity_graph_list_isValid = false;

    m_activity_light_level_isSet = false;
    m_activity_light_level_isValid = false;

    m_activity_location_mappings_isSet = false;
    m_activity_location_mappings_isValid = false;

    m_activity_mode_hashes_isSet = false;
    m_activity_mode_hashes_isValid = false;

    m_activity_mode_types_isSet = false;
    m_activity_mode_types_isValid = false;

    m_activity_type_hash_isSet = false;
    m_activity_type_hash_isValid = false;

    m_challenges_isSet = false;
    m_challenges_isValid = false;

    m_destination_hash_isSet = false;
    m_destination_hash_isValid = false;

    m_direct_activity_mode_hash_isSet = false;
    m_direct_activity_mode_hash_isValid = false;

    m_direct_activity_mode_type_isSet = false;
    m_direct_activity_mode_type_isValid = false;

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_guided_game_isSet = false;
    m_guided_game_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_insertion_points_isSet = false;
    m_insertion_points_isValid = false;

    m_is_playlist_isSet = false;
    m_is_playlist_isValid = false;

    m_is_pv_p_isSet = false;
    m_is_pv_p_isValid = false;

    m_loadouts_isSet = false;
    m_loadouts_isValid = false;

    m_matchmaking_isSet = false;
    m_matchmaking_isValid = false;

    m_modifiers_isSet = false;
    m_modifiers_isValid = false;

    m_optional_unlock_strings_isSet = false;
    m_optional_unlock_strings_isValid = false;

    m_original_display_properties_isSet = false;
    m_original_display_properties_isValid = false;

    m_pgcr_image_isSet = false;
    m_pgcr_image_isValid = false;

    m_place_hash_isSet = false;
    m_place_hash_isValid = false;

    m_playlist_items_isSet = false;
    m_playlist_items_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;

    m_release_icon_isSet = false;
    m_release_icon_isValid = false;

    m_release_time_isSet = false;
    m_release_time_isValid = false;

    m_rewards_isSet = false;
    m_rewards_isValid = false;

    m_selection_screen_display_properties_isSet = false;
    m_selection_screen_display_properties_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;
}

void OAIDestiny_Definitions_DestinyActivityDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyActivityDefinition::fromJsonObject(QJsonObject json) {

    m_activity_graph_list_isValid = ::OpenAPI::fromJsonValue(m_activity_graph_list, json[QString("activityGraphList")]);
    m_activity_graph_list_isSet = !json[QString("activityGraphList")].isNull() && m_activity_graph_list_isValid;

    m_activity_light_level_isValid = ::OpenAPI::fromJsonValue(m_activity_light_level, json[QString("activityLightLevel")]);
    m_activity_light_level_isSet = !json[QString("activityLightLevel")].isNull() && m_activity_light_level_isValid;

    m_activity_location_mappings_isValid = ::OpenAPI::fromJsonValue(m_activity_location_mappings, json[QString("activityLocationMappings")]);
    m_activity_location_mappings_isSet = !json[QString("activityLocationMappings")].isNull() && m_activity_location_mappings_isValid;

    m_activity_mode_hashes_isValid = ::OpenAPI::fromJsonValue(m_activity_mode_hashes, json[QString("activityModeHashes")]);
    m_activity_mode_hashes_isSet = !json[QString("activityModeHashes")].isNull() && m_activity_mode_hashes_isValid;

    m_activity_mode_types_isValid = ::OpenAPI::fromJsonValue(m_activity_mode_types, json[QString("activityModeTypes")]);
    m_activity_mode_types_isSet = !json[QString("activityModeTypes")].isNull() && m_activity_mode_types_isValid;

    m_activity_type_hash_isValid = ::OpenAPI::fromJsonValue(m_activity_type_hash, json[QString("activityTypeHash")]);
    m_activity_type_hash_isSet = !json[QString("activityTypeHash")].isNull() && m_activity_type_hash_isValid;

    m_challenges_isValid = ::OpenAPI::fromJsonValue(m_challenges, json[QString("challenges")]);
    m_challenges_isSet = !json[QString("challenges")].isNull() && m_challenges_isValid;

    m_destination_hash_isValid = ::OpenAPI::fromJsonValue(m_destination_hash, json[QString("destinationHash")]);
    m_destination_hash_isSet = !json[QString("destinationHash")].isNull() && m_destination_hash_isValid;

    m_direct_activity_mode_hash_isValid = ::OpenAPI::fromJsonValue(m_direct_activity_mode_hash, json[QString("directActivityModeHash")]);
    m_direct_activity_mode_hash_isSet = !json[QString("directActivityModeHash")].isNull() && m_direct_activity_mode_hash_isValid;

    m_direct_activity_mode_type_isValid = ::OpenAPI::fromJsonValue(m_direct_activity_mode_type, json[QString("directActivityModeType")]);
    m_direct_activity_mode_type_isSet = !json[QString("directActivityModeType")].isNull() && m_direct_activity_mode_type_isValid;

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_guided_game_isValid = ::OpenAPI::fromJsonValue(m_guided_game, json[QString("guidedGame")]);
    m_guided_game_isSet = !json[QString("guidedGame")].isNull() && m_guided_game_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_insertion_points_isValid = ::OpenAPI::fromJsonValue(m_insertion_points, json[QString("insertionPoints")]);
    m_insertion_points_isSet = !json[QString("insertionPoints")].isNull() && m_insertion_points_isValid;

    m_is_playlist_isValid = ::OpenAPI::fromJsonValue(m_is_playlist, json[QString("isPlaylist")]);
    m_is_playlist_isSet = !json[QString("isPlaylist")].isNull() && m_is_playlist_isValid;

    m_is_pv_p_isValid = ::OpenAPI::fromJsonValue(m_is_pv_p, json[QString("isPvP")]);
    m_is_pv_p_isSet = !json[QString("isPvP")].isNull() && m_is_pv_p_isValid;

    m_loadouts_isValid = ::OpenAPI::fromJsonValue(m_loadouts, json[QString("loadouts")]);
    m_loadouts_isSet = !json[QString("loadouts")].isNull() && m_loadouts_isValid;

    m_matchmaking_isValid = ::OpenAPI::fromJsonValue(m_matchmaking, json[QString("matchmaking")]);
    m_matchmaking_isSet = !json[QString("matchmaking")].isNull() && m_matchmaking_isValid;

    m_modifiers_isValid = ::OpenAPI::fromJsonValue(m_modifiers, json[QString("modifiers")]);
    m_modifiers_isSet = !json[QString("modifiers")].isNull() && m_modifiers_isValid;

    m_optional_unlock_strings_isValid = ::OpenAPI::fromJsonValue(m_optional_unlock_strings, json[QString("optionalUnlockStrings")]);
    m_optional_unlock_strings_isSet = !json[QString("optionalUnlockStrings")].isNull() && m_optional_unlock_strings_isValid;

    m_original_display_properties_isValid = ::OpenAPI::fromJsonValue(m_original_display_properties, json[QString("originalDisplayProperties")]);
    m_original_display_properties_isSet = !json[QString("originalDisplayProperties")].isNull() && m_original_display_properties_isValid;

    m_pgcr_image_isValid = ::OpenAPI::fromJsonValue(m_pgcr_image, json[QString("pgcrImage")]);
    m_pgcr_image_isSet = !json[QString("pgcrImage")].isNull() && m_pgcr_image_isValid;

    m_place_hash_isValid = ::OpenAPI::fromJsonValue(m_place_hash, json[QString("placeHash")]);
    m_place_hash_isSet = !json[QString("placeHash")].isNull() && m_place_hash_isValid;

    m_playlist_items_isValid = ::OpenAPI::fromJsonValue(m_playlist_items, json[QString("playlistItems")]);
    m_playlist_items_isSet = !json[QString("playlistItems")].isNull() && m_playlist_items_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;

    m_release_icon_isValid = ::OpenAPI::fromJsonValue(m_release_icon, json[QString("releaseIcon")]);
    m_release_icon_isSet = !json[QString("releaseIcon")].isNull() && m_release_icon_isValid;

    m_release_time_isValid = ::OpenAPI::fromJsonValue(m_release_time, json[QString("releaseTime")]);
    m_release_time_isSet = !json[QString("releaseTime")].isNull() && m_release_time_isValid;

    m_rewards_isValid = ::OpenAPI::fromJsonValue(m_rewards, json[QString("rewards")]);
    m_rewards_isSet = !json[QString("rewards")].isNull() && m_rewards_isValid;

    m_selection_screen_display_properties_isValid = ::OpenAPI::fromJsonValue(m_selection_screen_display_properties, json[QString("selectionScreenDisplayProperties")]);
    m_selection_screen_display_properties_isSet = !json[QString("selectionScreenDisplayProperties")].isNull() && m_selection_screen_display_properties_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;
}

QString OAIDestiny_Definitions_DestinyActivityDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyActivityDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_graph_list.size() > 0) {
        obj.insert(QString("activityGraphList"), ::OpenAPI::toJsonValue(m_activity_graph_list));
    }
    if (m_activity_light_level_isSet) {
        obj.insert(QString("activityLightLevel"), ::OpenAPI::toJsonValue(m_activity_light_level));
    }
    if (m_activity_location_mappings.size() > 0) {
        obj.insert(QString("activityLocationMappings"), ::OpenAPI::toJsonValue(m_activity_location_mappings));
    }
    if (m_activity_mode_hashes.size() > 0) {
        obj.insert(QString("activityModeHashes"), ::OpenAPI::toJsonValue(m_activity_mode_hashes));
    }
    if (m_activity_mode_types.size() > 0) {
        obj.insert(QString("activityModeTypes"), ::OpenAPI::toJsonValue(m_activity_mode_types));
    }
    if (m_activity_type_hash_isSet) {
        obj.insert(QString("activityTypeHash"), ::OpenAPI::toJsonValue(m_activity_type_hash));
    }
    if (m_challenges.size() > 0) {
        obj.insert(QString("challenges"), ::OpenAPI::toJsonValue(m_challenges));
    }
    if (m_destination_hash_isSet) {
        obj.insert(QString("destinationHash"), ::OpenAPI::toJsonValue(m_destination_hash));
    }
    if (m_direct_activity_mode_hash_isSet) {
        obj.insert(QString("directActivityModeHash"), ::OpenAPI::toJsonValue(m_direct_activity_mode_hash));
    }
    if (m_direct_activity_mode_type_isSet) {
        obj.insert(QString("directActivityModeType"), ::OpenAPI::toJsonValue(m_direct_activity_mode_type));
    }
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_guided_game.isSet()) {
        obj.insert(QString("guidedGame"), ::OpenAPI::toJsonValue(m_guided_game));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_insertion_points.size() > 0) {
        obj.insert(QString("insertionPoints"), ::OpenAPI::toJsonValue(m_insertion_points));
    }
    if (m_is_playlist_isSet) {
        obj.insert(QString("isPlaylist"), ::OpenAPI::toJsonValue(m_is_playlist));
    }
    if (m_is_pv_p_isSet) {
        obj.insert(QString("isPvP"), ::OpenAPI::toJsonValue(m_is_pv_p));
    }
    if (m_loadouts.size() > 0) {
        obj.insert(QString("loadouts"), ::OpenAPI::toJsonValue(m_loadouts));
    }
    if (m_matchmaking.isSet()) {
        obj.insert(QString("matchmaking"), ::OpenAPI::toJsonValue(m_matchmaking));
    }
    if (m_modifiers.size() > 0) {
        obj.insert(QString("modifiers"), ::OpenAPI::toJsonValue(m_modifiers));
    }
    if (m_optional_unlock_strings.size() > 0) {
        obj.insert(QString("optionalUnlockStrings"), ::OpenAPI::toJsonValue(m_optional_unlock_strings));
    }
    if (m_original_display_properties.isSet()) {
        obj.insert(QString("originalDisplayProperties"), ::OpenAPI::toJsonValue(m_original_display_properties));
    }
    if (m_pgcr_image_isSet) {
        obj.insert(QString("pgcrImage"), ::OpenAPI::toJsonValue(m_pgcr_image));
    }
    if (m_place_hash_isSet) {
        obj.insert(QString("placeHash"), ::OpenAPI::toJsonValue(m_place_hash));
    }
    if (m_playlist_items.size() > 0) {
        obj.insert(QString("playlistItems"), ::OpenAPI::toJsonValue(m_playlist_items));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    if (m_release_icon_isSet) {
        obj.insert(QString("releaseIcon"), ::OpenAPI::toJsonValue(m_release_icon));
    }
    if (m_release_time_isSet) {
        obj.insert(QString("releaseTime"), ::OpenAPI::toJsonValue(m_release_time));
    }
    if (m_rewards.size() > 0) {
        obj.insert(QString("rewards"), ::OpenAPI::toJsonValue(m_rewards));
    }
    if (m_selection_screen_display_properties.isSet()) {
        obj.insert(QString("selectionScreenDisplayProperties"), ::OpenAPI::toJsonValue(m_selection_screen_display_properties));
    }
    if (m_tier_isSet) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    return obj;
}

QList<OAIDestiny_Definitions_DestinyActivityGraphListEntryDefinition> OAIDestiny_Definitions_DestinyActivityDefinition::getActivityGraphList() const {
    return m_activity_graph_list;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setActivityGraphList(const QList<OAIDestiny_Definitions_DestinyActivityGraphListEntryDefinition> &activity_graph_list) {
    m_activity_graph_list = activity_graph_list;
    m_activity_graph_list_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_activity_graph_list_Set() const{
    return m_activity_graph_list_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_activity_graph_list_Valid() const{
    return m_activity_graph_list_isValid;
}

qint32 OAIDestiny_Definitions_DestinyActivityDefinition::getActivityLightLevel() const {
    return m_activity_light_level;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setActivityLightLevel(const qint32 &activity_light_level) {
    m_activity_light_level = activity_light_level;
    m_activity_light_level_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_activity_light_level_Set() const{
    return m_activity_light_level_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_activity_light_level_Valid() const{
    return m_activity_light_level_isValid;
}

QList<OAIDestiny_Constants_DestinyEnvironmentLocationMapping> OAIDestiny_Definitions_DestinyActivityDefinition::getActivityLocationMappings() const {
    return m_activity_location_mappings;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setActivityLocationMappings(const QList<OAIDestiny_Constants_DestinyEnvironmentLocationMapping> &activity_location_mappings) {
    m_activity_location_mappings = activity_location_mappings;
    m_activity_location_mappings_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_activity_location_mappings_Set() const{
    return m_activity_location_mappings_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_activity_location_mappings_Valid() const{
    return m_activity_location_mappings_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyActivityDefinition::getActivityModeHashes() const {
    return m_activity_mode_hashes;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setActivityModeHashes(const QList<qint32> &activity_mode_hashes) {
    m_activity_mode_hashes = activity_mode_hashes;
    m_activity_mode_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_activity_mode_hashes_Set() const{
    return m_activity_mode_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_activity_mode_hashes_Valid() const{
    return m_activity_mode_hashes_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyActivityDefinition::getActivityModeTypes() const {
    return m_activity_mode_types;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setActivityModeTypes(const QList<qint32> &activity_mode_types) {
    m_activity_mode_types = activity_mode_types;
    m_activity_mode_types_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_activity_mode_types_Set() const{
    return m_activity_mode_types_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_activity_mode_types_Valid() const{
    return m_activity_mode_types_isValid;
}

qint32 OAIDestiny_Definitions_DestinyActivityDefinition::getActivityTypeHash() const {
    return m_activity_type_hash;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setActivityTypeHash(const qint32 &activity_type_hash) {
    m_activity_type_hash = activity_type_hash;
    m_activity_type_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_activity_type_hash_Set() const{
    return m_activity_type_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_activity_type_hash_Valid() const{
    return m_activity_type_hash_isValid;
}

QList<OAIDestiny_Definitions_DestinyActivityChallengeDefinition> OAIDestiny_Definitions_DestinyActivityDefinition::getChallenges() const {
    return m_challenges;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setChallenges(const QList<OAIDestiny_Definitions_DestinyActivityChallengeDefinition> &challenges) {
    m_challenges = challenges;
    m_challenges_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_challenges_Set() const{
    return m_challenges_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_challenges_Valid() const{
    return m_challenges_isValid;
}

qint32 OAIDestiny_Definitions_DestinyActivityDefinition::getDestinationHash() const {
    return m_destination_hash;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setDestinationHash(const qint32 &destination_hash) {
    m_destination_hash = destination_hash;
    m_destination_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_destination_hash_Set() const{
    return m_destination_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_destination_hash_Valid() const{
    return m_destination_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyActivityDefinition::getDirectActivityModeHash() const {
    return m_direct_activity_mode_hash;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setDirectActivityModeHash(const qint32 &direct_activity_mode_hash) {
    m_direct_activity_mode_hash = direct_activity_mode_hash;
    m_direct_activity_mode_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_direct_activity_mode_hash_Set() const{
    return m_direct_activity_mode_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_direct_activity_mode_hash_Valid() const{
    return m_direct_activity_mode_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyActivityDefinition::getDirectActivityModeType() const {
    return m_direct_activity_mode_type;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setDirectActivityModeType(const qint32 &direct_activity_mode_type) {
    m_direct_activity_mode_type = direct_activity_mode_type;
    m_direct_activity_mode_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_direct_activity_mode_type_Set() const{
    return m_direct_activity_mode_type_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_direct_activity_mode_type_Valid() const{
    return m_direct_activity_mode_type_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_DestinyActivityDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

OAIDestiny_Definitions_DestinyActivityGuidedBlockDefinition OAIDestiny_Definitions_DestinyActivityDefinition::getGuidedGame() const {
    return m_guided_game;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setGuidedGame(const OAIDestiny_Definitions_DestinyActivityGuidedBlockDefinition &guided_game) {
    m_guided_game = guided_game;
    m_guided_game_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_guided_game_Set() const{
    return m_guided_game_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_guided_game_Valid() const{
    return m_guided_game_isValid;
}

qint32 OAIDestiny_Definitions_DestinyActivityDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyActivityDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_index_Valid() const{
    return m_index_isValid;
}

QList<OAIDestiny_Definitions_DestinyActivityInsertionPointDefinition> OAIDestiny_Definitions_DestinyActivityDefinition::getInsertionPoints() const {
    return m_insertion_points;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setInsertionPoints(const QList<OAIDestiny_Definitions_DestinyActivityInsertionPointDefinition> &insertion_points) {
    m_insertion_points = insertion_points;
    m_insertion_points_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_insertion_points_Set() const{
    return m_insertion_points_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_insertion_points_Valid() const{
    return m_insertion_points_isValid;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::isIsPlaylist() const {
    return m_is_playlist;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setIsPlaylist(const bool &is_playlist) {
    m_is_playlist = is_playlist;
    m_is_playlist_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_is_playlist_Set() const{
    return m_is_playlist_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_is_playlist_Valid() const{
    return m_is_playlist_isValid;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::isIsPvP() const {
    return m_is_pv_p;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setIsPvP(const bool &is_pv_p) {
    m_is_pv_p = is_pv_p;
    m_is_pv_p_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_is_pv_p_Set() const{
    return m_is_pv_p_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_is_pv_p_Valid() const{
    return m_is_pv_p_isValid;
}

QList<OAIDestiny_Definitions_DestinyActivityLoadoutRequirementSet> OAIDestiny_Definitions_DestinyActivityDefinition::getLoadouts() const {
    return m_loadouts;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setLoadouts(const QList<OAIDestiny_Definitions_DestinyActivityLoadoutRequirementSet> &loadouts) {
    m_loadouts = loadouts;
    m_loadouts_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_loadouts_Set() const{
    return m_loadouts_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_loadouts_Valid() const{
    return m_loadouts_isValid;
}

OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition OAIDestiny_Definitions_DestinyActivityDefinition::getMatchmaking() const {
    return m_matchmaking;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setMatchmaking(const OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition &matchmaking) {
    m_matchmaking = matchmaking;
    m_matchmaking_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_matchmaking_Set() const{
    return m_matchmaking_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_matchmaking_Valid() const{
    return m_matchmaking_isValid;
}

QList<OAIDestiny_Definitions_DestinyActivityModifierReferenceDefinition> OAIDestiny_Definitions_DestinyActivityDefinition::getModifiers() const {
    return m_modifiers;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setModifiers(const QList<OAIDestiny_Definitions_DestinyActivityModifierReferenceDefinition> &modifiers) {
    m_modifiers = modifiers;
    m_modifiers_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_modifiers_Set() const{
    return m_modifiers_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_modifiers_Valid() const{
    return m_modifiers_isValid;
}

QList<OAIDestiny_Definitions_DestinyActivityUnlockStringDefinition> OAIDestiny_Definitions_DestinyActivityDefinition::getOptionalUnlockStrings() const {
    return m_optional_unlock_strings;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setOptionalUnlockStrings(const QList<OAIDestiny_Definitions_DestinyActivityUnlockStringDefinition> &optional_unlock_strings) {
    m_optional_unlock_strings = optional_unlock_strings;
    m_optional_unlock_strings_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_optional_unlock_strings_Set() const{
    return m_optional_unlock_strings_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_optional_unlock_strings_Valid() const{
    return m_optional_unlock_strings_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_DestinyActivityDefinition::getOriginalDisplayProperties() const {
    return m_original_display_properties;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setOriginalDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &original_display_properties) {
    m_original_display_properties = original_display_properties;
    m_original_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_original_display_properties_Set() const{
    return m_original_display_properties_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_original_display_properties_Valid() const{
    return m_original_display_properties_isValid;
}

QString OAIDestiny_Definitions_DestinyActivityDefinition::getPgcrImage() const {
    return m_pgcr_image;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setPgcrImage(const QString &pgcr_image) {
    m_pgcr_image = pgcr_image;
    m_pgcr_image_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_pgcr_image_Set() const{
    return m_pgcr_image_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_pgcr_image_Valid() const{
    return m_pgcr_image_isValid;
}

qint32 OAIDestiny_Definitions_DestinyActivityDefinition::getPlaceHash() const {
    return m_place_hash;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setPlaceHash(const qint32 &place_hash) {
    m_place_hash = place_hash;
    m_place_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_place_hash_Set() const{
    return m_place_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_place_hash_Valid() const{
    return m_place_hash_isValid;
}

QList<OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition> OAIDestiny_Definitions_DestinyActivityDefinition::getPlaylistItems() const {
    return m_playlist_items;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setPlaylistItems(const QList<OAIDestiny_Definitions_DestinyActivityPlaylistItemDefinition> &playlist_items) {
    m_playlist_items = playlist_items;
    m_playlist_items_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_playlist_items_Set() const{
    return m_playlist_items_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_playlist_items_Valid() const{
    return m_playlist_items_isValid;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

QString OAIDestiny_Definitions_DestinyActivityDefinition::getReleaseIcon() const {
    return m_release_icon;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setReleaseIcon(const QString &release_icon) {
    m_release_icon = release_icon;
    m_release_icon_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_release_icon_Set() const{
    return m_release_icon_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_release_icon_Valid() const{
    return m_release_icon_isValid;
}

qint32 OAIDestiny_Definitions_DestinyActivityDefinition::getReleaseTime() const {
    return m_release_time;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setReleaseTime(const qint32 &release_time) {
    m_release_time = release_time;
    m_release_time_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_release_time_Set() const{
    return m_release_time_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_release_time_Valid() const{
    return m_release_time_isValid;
}

QList<OAIDestiny_Definitions_DestinyActivityRewardDefinition> OAIDestiny_Definitions_DestinyActivityDefinition::getRewards() const {
    return m_rewards;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setRewards(const QList<OAIDestiny_Definitions_DestinyActivityRewardDefinition> &rewards) {
    m_rewards = rewards;
    m_rewards_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_rewards_Set() const{
    return m_rewards_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_rewards_Valid() const{
    return m_rewards_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_DestinyActivityDefinition::getSelectionScreenDisplayProperties() const {
    return m_selection_screen_display_properties;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setSelectionScreenDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &selection_screen_display_properties) {
    m_selection_screen_display_properties = selection_screen_display_properties;
    m_selection_screen_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_selection_screen_display_properties_Set() const{
    return m_selection_screen_display_properties_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_selection_screen_display_properties_Valid() const{
    return m_selection_screen_display_properties_isValid;
}

qint32 OAIDestiny_Definitions_DestinyActivityDefinition::getTier() const {
    return m_tier;
}
void OAIDestiny_Definitions_DestinyActivityDefinition::setTier(const qint32 &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::is_tier_Valid() const{
    return m_tier_isValid;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_graph_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_light_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_location_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_mode_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_mode_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_type_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_challenges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_activity_mode_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_activity_mode_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guided_game.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insertion_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_playlist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_pv_p_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loadouts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_matchmaking.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_modifiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_optional_unlock_strings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pgcr_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playlist_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rewards.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_selection_screen_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyActivityDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
