/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyItemSourceBlockDefinition.h
 *
 * Data about an item&#39;s \&quot;sources\&quot;: ways that the item can be obtained.
 */

#ifndef OAIDestiny_Definitions_DestinyItemSourceBlockDefinition_H
#define OAIDestiny_Definitions_DestinyItemSourceBlockDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_DestinyItemVendorSourceReference.h"
#include "OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition;
class OAIDestiny_Definitions_DestinyItemVendorSourceReference;

class OAIDestiny_Definitions_DestinyItemSourceBlockDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyItemSourceBlockDefinition();
    OAIDestiny_Definitions_DestinyItemSourceBlockDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyItemSourceBlockDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getExclusive() const;
    void setExclusive(const qint32 &exclusive);
    bool is_exclusive_Set() const;
    bool is_exclusive_Valid() const;

    QList<qint32> getSourceHashes() const;
    void setSourceHashes(const QList<qint32> &source_hashes);
    bool is_source_hashes_Set() const;
    bool is_source_hashes_Valid() const;

    QList<OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition> getSources() const;
    void setSources(const QList<OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition> &sources);
    bool is_sources_Set() const;
    bool is_sources_Valid() const;

    QList<OAIDestiny_Definitions_DestinyItemVendorSourceReference> getVendorSources() const;
    void setVendorSources(const QList<OAIDestiny_Definitions_DestinyItemVendorSourceReference> &vendor_sources);
    bool is_vendor_sources_Set() const;
    bool is_vendor_sources_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_exclusive;
    bool m_exclusive_isSet;
    bool m_exclusive_isValid;

    QList<qint32> m_source_hashes;
    bool m_source_hashes_isSet;
    bool m_source_hashes_isValid;

    QList<OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition> m_sources;
    bool m_sources_isSet;
    bool m_sources_isValid;

    QList<OAIDestiny_Definitions_DestinyItemVendorSourceReference> m_vendor_sources;
    bool m_vendor_sources_isSet;
    bool m_vendor_sources_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyItemSourceBlockDefinition)

#endif // OAIDestiny_Definitions_DestinyItemSourceBlockDefinition_H
