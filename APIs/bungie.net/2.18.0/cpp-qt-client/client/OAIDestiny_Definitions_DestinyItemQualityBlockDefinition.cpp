/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyItemQualityBlockDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::OAIDestiny_Definitions_DestinyItemQualityBlockDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::OAIDestiny_Definitions_DestinyItemQualityBlockDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::~OAIDestiny_Definitions_DestinyItemQualityBlockDefinition() {}

void OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::initializeModel() {

    m_current_version_isSet = false;
    m_current_version_isValid = false;

    m_display_version_watermark_icons_isSet = false;
    m_display_version_watermark_icons_isValid = false;

    m_infusion_category_hash_isSet = false;
    m_infusion_category_hash_isValid = false;

    m_infusion_category_hashes_isSet = false;
    m_infusion_category_hashes_isValid = false;

    m_infusion_category_name_isSet = false;
    m_infusion_category_name_isValid = false;

    m_item_levels_isSet = false;
    m_item_levels_isValid = false;

    m_progression_level_requirement_hash_isSet = false;
    m_progression_level_requirement_hash_isValid = false;

    m_quality_level_isSet = false;
    m_quality_level_isValid = false;

    m_versions_isSet = false;
    m_versions_isValid = false;
}

void OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::fromJsonObject(QJsonObject json) {

    m_current_version_isValid = ::OpenAPI::fromJsonValue(m_current_version, json[QString("currentVersion")]);
    m_current_version_isSet = !json[QString("currentVersion")].isNull() && m_current_version_isValid;

    m_display_version_watermark_icons_isValid = ::OpenAPI::fromJsonValue(m_display_version_watermark_icons, json[QString("displayVersionWatermarkIcons")]);
    m_display_version_watermark_icons_isSet = !json[QString("displayVersionWatermarkIcons")].isNull() && m_display_version_watermark_icons_isValid;

    m_infusion_category_hash_isValid = ::OpenAPI::fromJsonValue(m_infusion_category_hash, json[QString("infusionCategoryHash")]);
    m_infusion_category_hash_isSet = !json[QString("infusionCategoryHash")].isNull() && m_infusion_category_hash_isValid;

    m_infusion_category_hashes_isValid = ::OpenAPI::fromJsonValue(m_infusion_category_hashes, json[QString("infusionCategoryHashes")]);
    m_infusion_category_hashes_isSet = !json[QString("infusionCategoryHashes")].isNull() && m_infusion_category_hashes_isValid;

    m_infusion_category_name_isValid = ::OpenAPI::fromJsonValue(m_infusion_category_name, json[QString("infusionCategoryName")]);
    m_infusion_category_name_isSet = !json[QString("infusionCategoryName")].isNull() && m_infusion_category_name_isValid;

    m_item_levels_isValid = ::OpenAPI::fromJsonValue(m_item_levels, json[QString("itemLevels")]);
    m_item_levels_isSet = !json[QString("itemLevels")].isNull() && m_item_levels_isValid;

    m_progression_level_requirement_hash_isValid = ::OpenAPI::fromJsonValue(m_progression_level_requirement_hash, json[QString("progressionLevelRequirementHash")]);
    m_progression_level_requirement_hash_isSet = !json[QString("progressionLevelRequirementHash")].isNull() && m_progression_level_requirement_hash_isValid;

    m_quality_level_isValid = ::OpenAPI::fromJsonValue(m_quality_level, json[QString("qualityLevel")]);
    m_quality_level_isSet = !json[QString("qualityLevel")].isNull() && m_quality_level_isValid;

    m_versions_isValid = ::OpenAPI::fromJsonValue(m_versions, json[QString("versions")]);
    m_versions_isSet = !json[QString("versions")].isNull() && m_versions_isValid;
}

QString OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_current_version_isSet) {
        obj.insert(QString("currentVersion"), ::OpenAPI::toJsonValue(m_current_version));
    }
    if (m_display_version_watermark_icons.size() > 0) {
        obj.insert(QString("displayVersionWatermarkIcons"), ::OpenAPI::toJsonValue(m_display_version_watermark_icons));
    }
    if (m_infusion_category_hash_isSet) {
        obj.insert(QString("infusionCategoryHash"), ::OpenAPI::toJsonValue(m_infusion_category_hash));
    }
    if (m_infusion_category_hashes.size() > 0) {
        obj.insert(QString("infusionCategoryHashes"), ::OpenAPI::toJsonValue(m_infusion_category_hashes));
    }
    if (m_infusion_category_name_isSet) {
        obj.insert(QString("infusionCategoryName"), ::OpenAPI::toJsonValue(m_infusion_category_name));
    }
    if (m_item_levels.size() > 0) {
        obj.insert(QString("itemLevels"), ::OpenAPI::toJsonValue(m_item_levels));
    }
    if (m_progression_level_requirement_hash_isSet) {
        obj.insert(QString("progressionLevelRequirementHash"), ::OpenAPI::toJsonValue(m_progression_level_requirement_hash));
    }
    if (m_quality_level_isSet) {
        obj.insert(QString("qualityLevel"), ::OpenAPI::toJsonValue(m_quality_level));
    }
    if (m_versions.size() > 0) {
        obj.insert(QString("versions"), ::OpenAPI::toJsonValue(m_versions));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::getCurrentVersion() const {
    return m_current_version;
}
void OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::setCurrentVersion(const qint32 &current_version) {
    m_current_version = current_version;
    m_current_version_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::is_current_version_Set() const{
    return m_current_version_isSet;
}

bool OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::is_current_version_Valid() const{
    return m_current_version_isValid;
}

QList<QString> OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::getDisplayVersionWatermarkIcons() const {
    return m_display_version_watermark_icons;
}
void OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::setDisplayVersionWatermarkIcons(const QList<QString> &display_version_watermark_icons) {
    m_display_version_watermark_icons = display_version_watermark_icons;
    m_display_version_watermark_icons_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::is_display_version_watermark_icons_Set() const{
    return m_display_version_watermark_icons_isSet;
}

bool OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::is_display_version_watermark_icons_Valid() const{
    return m_display_version_watermark_icons_isValid;
}

qint32 OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::getInfusionCategoryHash() const {
    return m_infusion_category_hash;
}
void OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::setInfusionCategoryHash(const qint32 &infusion_category_hash) {
    m_infusion_category_hash = infusion_category_hash;
    m_infusion_category_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::is_infusion_category_hash_Set() const{
    return m_infusion_category_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::is_infusion_category_hash_Valid() const{
    return m_infusion_category_hash_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::getInfusionCategoryHashes() const {
    return m_infusion_category_hashes;
}
void OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::setInfusionCategoryHashes(const QList<qint32> &infusion_category_hashes) {
    m_infusion_category_hashes = infusion_category_hashes;
    m_infusion_category_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::is_infusion_category_hashes_Set() const{
    return m_infusion_category_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::is_infusion_category_hashes_Valid() const{
    return m_infusion_category_hashes_isValid;
}

QString OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::getInfusionCategoryName() const {
    return m_infusion_category_name;
}
void OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::setInfusionCategoryName(const QString &infusion_category_name) {
    m_infusion_category_name = infusion_category_name;
    m_infusion_category_name_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::is_infusion_category_name_Set() const{
    return m_infusion_category_name_isSet;
}

bool OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::is_infusion_category_name_Valid() const{
    return m_infusion_category_name_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::getItemLevels() const {
    return m_item_levels;
}
void OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::setItemLevels(const QList<qint32> &item_levels) {
    m_item_levels = item_levels;
    m_item_levels_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::is_item_levels_Set() const{
    return m_item_levels_isSet;
}

bool OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::is_item_levels_Valid() const{
    return m_item_levels_isValid;
}

qint32 OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::getProgressionLevelRequirementHash() const {
    return m_progression_level_requirement_hash;
}
void OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::setProgressionLevelRequirementHash(const qint32 &progression_level_requirement_hash) {
    m_progression_level_requirement_hash = progression_level_requirement_hash;
    m_progression_level_requirement_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::is_progression_level_requirement_hash_Set() const{
    return m_progression_level_requirement_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::is_progression_level_requirement_hash_Valid() const{
    return m_progression_level_requirement_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::getQualityLevel() const {
    return m_quality_level;
}
void OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::setQualityLevel(const qint32 &quality_level) {
    m_quality_level = quality_level;
    m_quality_level_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::is_quality_level_Set() const{
    return m_quality_level_isSet;
}

bool OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::is_quality_level_Valid() const{
    return m_quality_level_isValid;
}

QList<OAIDestiny_Definitions_DestinyItemVersionDefinition> OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::getVersions() const {
    return m_versions;
}
void OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::setVersions(const QList<OAIDestiny_Definitions_DestinyItemVersionDefinition> &versions) {
    m_versions = versions;
    m_versions_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::is_versions_Set() const{
    return m_versions_isSet;
}

bool OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::is_versions_Valid() const{
    return m_versions_isValid;
}

bool OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_version_watermark_icons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_infusion_category_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_infusion_category_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_infusion_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_levels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_progression_level_requirement_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyItemQualityBlockDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
