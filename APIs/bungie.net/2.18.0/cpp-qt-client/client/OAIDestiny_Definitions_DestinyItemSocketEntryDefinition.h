/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyItemSocketEntryDefinition.h
 *
 * The definition information for a specific socket on an item. This will determine how the socket behaves in-game.
 */

#ifndef OAIDestiny_Definitions_DestinyItemSocketEntryDefinition_H
#define OAIDestiny_Definitions_DestinyItemSocketEntryDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_DestinyItemSocketEntryPlugItemDefinition.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_DestinyItemSocketEntryPlugItemDefinition;

class OAIDestiny_Definitions_DestinyItemSocketEntryDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyItemSocketEntryDefinition();
    OAIDestiny_Definitions_DestinyItemSocketEntryDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyItemSocketEntryDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isDefaultVisible() const;
    void setDefaultVisible(const bool &default_visible);
    bool is_default_visible_Set() const;
    bool is_default_visible_Valid() const;

    bool isHidePerksInItemTooltip() const;
    void setHidePerksInItemTooltip(const bool &hide_perks_in_item_tooltip);
    bool is_hide_perks_in_item_tooltip_Set() const;
    bool is_hide_perks_in_item_tooltip_Valid() const;

    qint32 getPlugSources() const;
    void setPlugSources(const qint32 &plug_sources);
    bool is_plug_sources_Set() const;
    bool is_plug_sources_Valid() const;

    bool isPreventInitializationOnVendorPurchase() const;
    void setPreventInitializationOnVendorPurchase(const bool &prevent_initialization_on_vendor_purchase);
    bool is_prevent_initialization_on_vendor_purchase_Set() const;
    bool is_prevent_initialization_on_vendor_purchase_Valid() const;

    qint32 getRandomizedPlugSetHash() const;
    void setRandomizedPlugSetHash(const qint32 &randomized_plug_set_hash);
    bool is_randomized_plug_set_hash_Set() const;
    bool is_randomized_plug_set_hash_Valid() const;

    QList<OAIDestiny_Definitions_DestinyItemSocketEntryPlugItemDefinition> getReusablePlugItems() const;
    void setReusablePlugItems(const QList<OAIDestiny_Definitions_DestinyItemSocketEntryPlugItemDefinition> &reusable_plug_items);
    bool is_reusable_plug_items_Set() const;
    bool is_reusable_plug_items_Valid() const;

    qint32 getReusablePlugSetHash() const;
    void setReusablePlugSetHash(const qint32 &reusable_plug_set_hash);
    bool is_reusable_plug_set_hash_Set() const;
    bool is_reusable_plug_set_hash_Valid() const;

    qint32 getSingleInitialItemHash() const;
    void setSingleInitialItemHash(const qint32 &single_initial_item_hash);
    bool is_single_initial_item_hash_Set() const;
    bool is_single_initial_item_hash_Valid() const;

    qint32 getSocketTypeHash() const;
    void setSocketTypeHash(const qint32 &socket_type_hash);
    bool is_socket_type_hash_Set() const;
    bool is_socket_type_hash_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_default_visible;
    bool m_default_visible_isSet;
    bool m_default_visible_isValid;

    bool m_hide_perks_in_item_tooltip;
    bool m_hide_perks_in_item_tooltip_isSet;
    bool m_hide_perks_in_item_tooltip_isValid;

    qint32 m_plug_sources;
    bool m_plug_sources_isSet;
    bool m_plug_sources_isValid;

    bool m_prevent_initialization_on_vendor_purchase;
    bool m_prevent_initialization_on_vendor_purchase_isSet;
    bool m_prevent_initialization_on_vendor_purchase_isValid;

    qint32 m_randomized_plug_set_hash;
    bool m_randomized_plug_set_hash_isSet;
    bool m_randomized_plug_set_hash_isValid;

    QList<OAIDestiny_Definitions_DestinyItemSocketEntryPlugItemDefinition> m_reusable_plug_items;
    bool m_reusable_plug_items_isSet;
    bool m_reusable_plug_items_isValid;

    qint32 m_reusable_plug_set_hash;
    bool m_reusable_plug_set_hash_isSet;
    bool m_reusable_plug_set_hash_isValid;

    qint32 m_single_initial_item_hash;
    bool m_single_initial_item_hash_isSet;
    bool m_single_initial_item_hash_isValid;

    qint32 m_socket_type_hash;
    bool m_socket_type_hash_isSet;
    bool m_socket_type_hash_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyItemSocketEntryDefinition)

#endif // OAIDestiny_Definitions_DestinyItemSocketEntryDefinition_H
