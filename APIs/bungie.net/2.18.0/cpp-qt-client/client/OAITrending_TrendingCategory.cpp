/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrending_TrendingCategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrending_TrendingCategory::OAITrending_TrendingCategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrending_TrendingCategory::OAITrending_TrendingCategory() {
    this->initializeModel();
}

OAITrending_TrendingCategory::~OAITrending_TrendingCategory() {}

void OAITrending_TrendingCategory::initializeModel() {

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_category_name_isSet = false;
    m_category_name_isValid = false;

    m_entries_isSet = false;
    m_entries_isValid = false;
}

void OAITrending_TrendingCategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrending_TrendingCategory::fromJsonObject(QJsonObject json) {

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_category_name_isValid = ::OpenAPI::fromJsonValue(m_category_name, json[QString("categoryName")]);
    m_category_name_isSet = !json[QString("categoryName")].isNull() && m_category_name_isValid;

    m_entries_isValid = ::OpenAPI::fromJsonValue(m_entries, json[QString("entries")]);
    m_entries_isSet = !json[QString("entries")].isNull() && m_entries_isValid;
}

QString OAITrending_TrendingCategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrending_TrendingCategory::asJsonObject() const {
    QJsonObject obj;
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_category_name_isSet) {
        obj.insert(QString("categoryName"), ::OpenAPI::toJsonValue(m_category_name));
    }
    if (m_entries.isSet()) {
        obj.insert(QString("entries"), ::OpenAPI::toJsonValue(m_entries));
    }
    return obj;
}

QString OAITrending_TrendingCategory::getCategoryId() const {
    return m_category_id;
}
void OAITrending_TrendingCategory::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAITrending_TrendingCategory::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAITrending_TrendingCategory::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAITrending_TrendingCategory::getCategoryName() const {
    return m_category_name;
}
void OAITrending_TrendingCategory::setCategoryName(const QString &category_name) {
    m_category_name = category_name;
    m_category_name_isSet = true;
}

bool OAITrending_TrendingCategory::is_category_name_Set() const{
    return m_category_name_isSet;
}

bool OAITrending_TrendingCategory::is_category_name_Valid() const{
    return m_category_name_isValid;
}

OAISearchResultOfTrendingEntry OAITrending_TrendingCategory::getEntries() const {
    return m_entries;
}
void OAITrending_TrendingCategory::setEntries(const OAISearchResultOfTrendingEntry &entries) {
    m_entries = entries;
    m_entries_isSet = true;
}

bool OAITrending_TrendingCategory::is_entries_Set() const{
    return m_entries_isSet;
}

bool OAITrending_TrendingCategory::is_entries_Valid() const{
    return m_entries_isValid;
}

bool OAITrending_TrendingCategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entries.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrending_TrendingCategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
