/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Advanced_AwaAuthorizationResult.h
 *
 * 
 */

#ifndef OAIDestiny_Advanced_AwaAuthorizationResult_H
#define OAIDestiny_Advanced_AwaAuthorizationResult_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDestiny_Advanced_AwaAuthorizationResult : public OAIObject {
public:
    OAIDestiny_Advanced_AwaAuthorizationResult();
    OAIDestiny_Advanced_AwaAuthorizationResult(QString json);
    ~OAIDestiny_Advanced_AwaAuthorizationResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getActionToken() const;
    void setActionToken(const QString &action_token);
    bool is_action_token_Set() const;
    bool is_action_token_Valid() const;

    QString getDeveloperNote() const;
    void setDeveloperNote(const QString &developer_note);
    bool is_developer_note_Set() const;
    bool is_developer_note_Valid() const;

    qint32 getMaximumNumberOfUses() const;
    void setMaximumNumberOfUses(const qint32 &maximum_number_of_uses);
    bool is_maximum_number_of_uses_Set() const;
    bool is_maximum_number_of_uses_Valid() const;

    qint32 getMembershipType() const;
    void setMembershipType(const qint32 &membership_type);
    bool is_membership_type_Set() const;
    bool is_membership_type_Valid() const;

    qint32 getResponseReason() const;
    void setResponseReason(const qint32 &response_reason);
    bool is_response_reason_Set() const;
    bool is_response_reason_Valid() const;

    qint32 getType() const;
    void setType(const qint32 &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    qint32 getUserSelection() const;
    void setUserSelection(const qint32 &user_selection);
    bool is_user_selection_Set() const;
    bool is_user_selection_Valid() const;

    QDateTime getValidUntil() const;
    void setValidUntil(const QDateTime &valid_until);
    bool is_valid_until_Set() const;
    bool is_valid_until_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_action_token;
    bool m_action_token_isSet;
    bool m_action_token_isValid;

    QString m_developer_note;
    bool m_developer_note_isSet;
    bool m_developer_note_isValid;

    qint32 m_maximum_number_of_uses;
    bool m_maximum_number_of_uses_isSet;
    bool m_maximum_number_of_uses_isValid;

    qint32 m_membership_type;
    bool m_membership_type_isSet;
    bool m_membership_type_isValid;

    qint32 m_response_reason;
    bool m_response_reason_isSet;
    bool m_response_reason_isValid;

    qint32 m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    qint32 m_user_selection;
    bool m_user_selection_isSet;
    bool m_user_selection_isValid;

    QDateTime m_valid_until;
    bool m_valid_until_isSet;
    bool m_valid_until_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Advanced_AwaAuthorizationResult)

#endif // OAIDestiny_Advanced_AwaAuthorizationResult_H
