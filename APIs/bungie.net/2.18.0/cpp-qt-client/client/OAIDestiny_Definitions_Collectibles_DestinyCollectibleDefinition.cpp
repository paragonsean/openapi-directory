/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::~OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition() {}

void OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::initializeModel() {

    m_acquisition_info_isSet = false;
    m_acquisition_info_isValid = false;

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_item_hash_isSet = false;
    m_item_hash_isValid = false;

    m_parent_node_hashes_isSet = false;
    m_parent_node_hashes_isValid = false;

    m_presentation_info_isSet = false;
    m_presentation_info_isValid = false;

    m_presentation_node_type_isSet = false;
    m_presentation_node_type_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_source_hash_isSet = false;
    m_source_hash_isValid = false;

    m_source_string_isSet = false;
    m_source_string_isValid = false;

    m_state_info_isSet = false;
    m_state_info_isValid = false;

    m_trait_hashes_isSet = false;
    m_trait_hashes_isValid = false;

    m_trait_ids_isSet = false;
    m_trait_ids_isValid = false;
}

void OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::fromJsonObject(QJsonObject json) {

    m_acquisition_info_isValid = ::OpenAPI::fromJsonValue(m_acquisition_info, json[QString("acquisitionInfo")]);
    m_acquisition_info_isSet = !json[QString("acquisitionInfo")].isNull() && m_acquisition_info_isValid;

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_item_hash_isValid = ::OpenAPI::fromJsonValue(m_item_hash, json[QString("itemHash")]);
    m_item_hash_isSet = !json[QString("itemHash")].isNull() && m_item_hash_isValid;

    m_parent_node_hashes_isValid = ::OpenAPI::fromJsonValue(m_parent_node_hashes, json[QString("parentNodeHashes")]);
    m_parent_node_hashes_isSet = !json[QString("parentNodeHashes")].isNull() && m_parent_node_hashes_isValid;

    m_presentation_info_isValid = ::OpenAPI::fromJsonValue(m_presentation_info, json[QString("presentationInfo")]);
    m_presentation_info_isSet = !json[QString("presentationInfo")].isNull() && m_presentation_info_isValid;

    m_presentation_node_type_isValid = ::OpenAPI::fromJsonValue(m_presentation_node_type, json[QString("presentationNodeType")]);
    m_presentation_node_type_isSet = !json[QString("presentationNodeType")].isNull() && m_presentation_node_type_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_source_hash_isValid = ::OpenAPI::fromJsonValue(m_source_hash, json[QString("sourceHash")]);
    m_source_hash_isSet = !json[QString("sourceHash")].isNull() && m_source_hash_isValid;

    m_source_string_isValid = ::OpenAPI::fromJsonValue(m_source_string, json[QString("sourceString")]);
    m_source_string_isSet = !json[QString("sourceString")].isNull() && m_source_string_isValid;

    m_state_info_isValid = ::OpenAPI::fromJsonValue(m_state_info, json[QString("stateInfo")]);
    m_state_info_isSet = !json[QString("stateInfo")].isNull() && m_state_info_isValid;

    m_trait_hashes_isValid = ::OpenAPI::fromJsonValue(m_trait_hashes, json[QString("traitHashes")]);
    m_trait_hashes_isSet = !json[QString("traitHashes")].isNull() && m_trait_hashes_isValid;

    m_trait_ids_isValid = ::OpenAPI::fromJsonValue(m_trait_ids, json[QString("traitIds")]);
    m_trait_ids_isSet = !json[QString("traitIds")].isNull() && m_trait_ids_isValid;
}

QString OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_acquisition_info.isSet()) {
        obj.insert(QString("acquisitionInfo"), ::OpenAPI::toJsonValue(m_acquisition_info));
    }
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_item_hash_isSet) {
        obj.insert(QString("itemHash"), ::OpenAPI::toJsonValue(m_item_hash));
    }
    if (m_parent_node_hashes.size() > 0) {
        obj.insert(QString("parentNodeHashes"), ::OpenAPI::toJsonValue(m_parent_node_hashes));
    }
    if (m_presentation_info.isSet()) {
        obj.insert(QString("presentationInfo"), ::OpenAPI::toJsonValue(m_presentation_info));
    }
    if (m_presentation_node_type_isSet) {
        obj.insert(QString("presentationNodeType"), ::OpenAPI::toJsonValue(m_presentation_node_type));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_source_hash_isSet) {
        obj.insert(QString("sourceHash"), ::OpenAPI::toJsonValue(m_source_hash));
    }
    if (m_source_string_isSet) {
        obj.insert(QString("sourceString"), ::OpenAPI::toJsonValue(m_source_string));
    }
    if (m_state_info.isSet()) {
        obj.insert(QString("stateInfo"), ::OpenAPI::toJsonValue(m_state_info));
    }
    if (m_trait_hashes.size() > 0) {
        obj.insert(QString("traitHashes"), ::OpenAPI::toJsonValue(m_trait_hashes));
    }
    if (m_trait_ids.size() > 0) {
        obj.insert(QString("traitIds"), ::OpenAPI::toJsonValue(m_trait_ids));
    }
    return obj;
}

OAIDestiny_Definitions_Collectibles_DestinyCollectibleAcquisitionBlock OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::getAcquisitionInfo() const {
    return m_acquisition_info;
}
void OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::setAcquisitionInfo(const OAIDestiny_Definitions_Collectibles_DestinyCollectibleAcquisitionBlock &acquisition_info) {
    m_acquisition_info = acquisition_info;
    m_acquisition_info_isSet = true;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_acquisition_info_Set() const{
    return m_acquisition_info_isSet;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_acquisition_info_Valid() const{
    return m_acquisition_info_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

qint32 OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_index_Valid() const{
    return m_index_isValid;
}

qint32 OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::getItemHash() const {
    return m_item_hash;
}
void OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::setItemHash(const qint32 &item_hash) {
    m_item_hash = item_hash;
    m_item_hash_isSet = true;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_item_hash_Set() const{
    return m_item_hash_isSet;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_item_hash_Valid() const{
    return m_item_hash_isValid;
}

QList<qint32> OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::getParentNodeHashes() const {
    return m_parent_node_hashes;
}
void OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::setParentNodeHashes(const QList<qint32> &parent_node_hashes) {
    m_parent_node_hashes = parent_node_hashes;
    m_parent_node_hashes_isSet = true;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_parent_node_hashes_Set() const{
    return m_parent_node_hashes_isSet;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_parent_node_hashes_Valid() const{
    return m_parent_node_hashes_isValid;
}

OAIDestiny_Definitions_Presentation_DestinyPresentationChildBlock OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::getPresentationInfo() const {
    return m_presentation_info;
}
void OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::setPresentationInfo(const OAIDestiny_Definitions_Presentation_DestinyPresentationChildBlock &presentation_info) {
    m_presentation_info = presentation_info;
    m_presentation_info_isSet = true;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_presentation_info_Set() const{
    return m_presentation_info_isSet;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_presentation_info_Valid() const{
    return m_presentation_info_isValid;
}

qint32 OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::getPresentationNodeType() const {
    return m_presentation_node_type;
}
void OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::setPresentationNodeType(const qint32 &presentation_node_type) {
    m_presentation_node_type = presentation_node_type;
    m_presentation_node_type_isSet = true;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_presentation_node_type_Set() const{
    return m_presentation_node_type_isSet;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_presentation_node_type_Valid() const{
    return m_presentation_node_type_isValid;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

qint32 OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::getScope() const {
    return m_scope;
}
void OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::setScope(const qint32 &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_scope_Valid() const{
    return m_scope_isValid;
}

qint32 OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::getSourceHash() const {
    return m_source_hash;
}
void OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::setSourceHash(const qint32 &source_hash) {
    m_source_hash = source_hash;
    m_source_hash_isSet = true;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_source_hash_Set() const{
    return m_source_hash_isSet;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_source_hash_Valid() const{
    return m_source_hash_isValid;
}

QString OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::getSourceString() const {
    return m_source_string;
}
void OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::setSourceString(const QString &source_string) {
    m_source_string = source_string;
    m_source_string_isSet = true;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_source_string_Set() const{
    return m_source_string_isSet;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_source_string_Valid() const{
    return m_source_string_isValid;
}

OAIDestiny_Definitions_Collectibles_DestinyCollectibleStateBlock OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::getStateInfo() const {
    return m_state_info;
}
void OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::setStateInfo(const OAIDestiny_Definitions_Collectibles_DestinyCollectibleStateBlock &state_info) {
    m_state_info = state_info;
    m_state_info_isSet = true;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_state_info_Set() const{
    return m_state_info_isSet;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_state_info_Valid() const{
    return m_state_info_isValid;
}

QList<qint32> OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::getTraitHashes() const {
    return m_trait_hashes;
}
void OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::setTraitHashes(const QList<qint32> &trait_hashes) {
    m_trait_hashes = trait_hashes;
    m_trait_hashes_isSet = true;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_trait_hashes_Set() const{
    return m_trait_hashes_isSet;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_trait_hashes_Valid() const{
    return m_trait_hashes_isValid;
}

QList<QString> OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::getTraitIds() const {
    return m_trait_ids;
}
void OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::setTraitIds(const QList<QString> &trait_ids) {
    m_trait_ids = trait_ids;
    m_trait_ids_isSet = true;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_trait_ids_Set() const{
    return m_trait_ids_isSet;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::is_trait_ids_Valid() const{
    return m_trait_ids_isValid;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquisition_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_node_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_presentation_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_presentation_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trait_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trait_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_Collectibles_DestinyCollectibleDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
