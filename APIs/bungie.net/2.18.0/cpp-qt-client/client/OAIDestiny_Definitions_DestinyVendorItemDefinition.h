/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyVendorItemDefinition.h
 *
 * This represents an item being sold by the vendor.
 */

#ifndef OAIDestiny_Definitions_DestinyVendorItemDefinition_H
#define OAIDestiny_Definitions_DestinyVendorItemDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_DestinyItemCreationEntryLevelDefinition.h"
#include "OAIDestiny_Definitions_DestinyVendorItemQuantity.h"
#include "OAIDestiny_Definitions_DestinyVendorItemSocketOverride.h"
#include "OAIDestiny_Definitions_DestinyVendorSaleItemActionBlockDefinition.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_DestinyVendorSaleItemActionBlockDefinition;
class OAIDestiny_Definitions_DestinyItemCreationEntryLevelDefinition;
class OAIDestiny_Definitions_DestinyVendorItemQuantity;
class OAIDestiny_Definitions_DestinyVendorItemSocketOverride;

class OAIDestiny_Definitions_DestinyVendorItemDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyVendorItemDefinition();
    OAIDestiny_Definitions_DestinyVendorItemDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyVendorItemDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDestiny_Definitions_DestinyVendorSaleItemActionBlockDefinition getAction() const;
    void setAction(const OAIDestiny_Definitions_DestinyVendorSaleItemActionBlockDefinition &action);
    bool is_action_Set() const;
    bool is_action_Valid() const;

    qint32 getCategoryIndex() const;
    void setCategoryIndex(const qint32 &category_index);
    bool is_category_index_Set() const;
    bool is_category_index_Valid() const;

    QList<OAIDestiny_Definitions_DestinyItemCreationEntryLevelDefinition> getCreationLevels() const;
    void setCreationLevels(const QList<OAIDestiny_Definitions_DestinyItemCreationEntryLevelDefinition> &creation_levels);
    bool is_creation_levels_Set() const;
    bool is_creation_levels_Valid() const;

    QList<OAIDestiny_Definitions_DestinyVendorItemQuantity> getCurrencies() const;
    void setCurrencies(const QList<OAIDestiny_Definitions_DestinyVendorItemQuantity> &currencies);
    bool is_currencies_Set() const;
    bool is_currencies_Valid() const;

    QString getDisplayCategory() const;
    void setDisplayCategory(const QString &display_category);
    bool is_display_category_Set() const;
    bool is_display_category_Valid() const;

    qint32 getDisplayCategoryIndex() const;
    void setDisplayCategoryIndex(const qint32 &display_category_index);
    bool is_display_category_index_Set() const;
    bool is_display_category_index_Valid() const;

    qint32 getExclusivity() const;
    void setExclusivity(const qint32 &exclusivity);
    bool is_exclusivity_Set() const;
    bool is_exclusivity_Valid() const;

    QString getExpirationTooltip() const;
    void setExpirationTooltip(const QString &expiration_tooltip);
    bool is_expiration_tooltip_Set() const;
    bool is_expiration_tooltip_Valid() const;

    QList<qint32> getFailureIndexes() const;
    void setFailureIndexes(const QList<qint32> &failure_indexes);
    bool is_failure_indexes_Set() const;
    bool is_failure_indexes_Valid() const;

    qint32 getInventoryBucketHash() const;
    void setInventoryBucketHash(const qint32 &inventory_bucket_hash);
    bool is_inventory_bucket_hash_Set() const;
    bool is_inventory_bucket_hash_Valid() const;

    bool isIsCrm() const;
    void setIsCrm(const bool &is_crm);
    bool is_is_crm_Set() const;
    bool is_is_crm_Valid() const;

    bool isIsOffer() const;
    void setIsOffer(const bool &is_offer);
    bool is_is_offer_Set() const;
    bool is_is_offer_Valid() const;

    qint32 getItemHash() const;
    void setItemHash(const qint32 &item_hash);
    bool is_item_hash_Set() const;
    bool is_item_hash_Valid() const;

    qint32 getMaximumLevel() const;
    void setMaximumLevel(const qint32 &maximum_level);
    bool is_maximum_level_Set() const;
    bool is_maximum_level_Valid() const;

    qint32 getMinimumLevel() const;
    void setMinimumLevel(const qint32 &minimum_level);
    bool is_minimum_level_Set() const;
    bool is_minimum_level_Valid() const;

    qint32 getOriginalCategoryIndex() const;
    void setOriginalCategoryIndex(const qint32 &original_category_index);
    bool is_original_category_index_Set() const;
    bool is_original_category_index_Valid() const;

    qint32 getPurchasableScope() const;
    void setPurchasableScope(const qint32 &purchasable_scope);
    bool is_purchasable_scope_Set() const;
    bool is_purchasable_scope_Valid() const;

    qint32 getQuantity() const;
    void setQuantity(const qint32 &quantity);
    bool is_quantity_Set() const;
    bool is_quantity_Valid() const;

    QList<qint32> getRedirectToSaleIndexes() const;
    void setRedirectToSaleIndexes(const QList<qint32> &redirect_to_sale_indexes);
    bool is_redirect_to_sale_indexes_Set() const;
    bool is_redirect_to_sale_indexes_Valid() const;

    qint32 getRefundPolicy() const;
    void setRefundPolicy(const qint32 &refund_policy);
    bool is_refund_policy_Set() const;
    bool is_refund_policy_Valid() const;

    qint32 getRefundTimeLimit() const;
    void setRefundTimeLimit(const qint32 &refund_time_limit);
    bool is_refund_time_limit_Set() const;
    bool is_refund_time_limit_Valid() const;

    QList<OAIDestiny_Definitions_DestinyVendorItemSocketOverride> getSocketOverrides() const;
    void setSocketOverrides(const QList<OAIDestiny_Definitions_DestinyVendorItemSocketOverride> &socket_overrides);
    bool is_socket_overrides_Set() const;
    bool is_socket_overrides_Valid() const;

    qint32 getSortValue() const;
    void setSortValue(const qint32 &sort_value);
    bool is_sort_value_Set() const;
    bool is_sort_value_Valid() const;

    bool isUnpurchasable() const;
    void setUnpurchasable(const bool &unpurchasable);
    bool is_unpurchasable_Set() const;
    bool is_unpurchasable_Valid() const;

    qint32 getVendorItemIndex() const;
    void setVendorItemIndex(const qint32 &vendor_item_index);
    bool is_vendor_item_index_Set() const;
    bool is_vendor_item_index_Valid() const;

    qint32 getVisibilityScope() const;
    void setVisibilityScope(const qint32 &visibility_scope);
    bool is_visibility_scope_Set() const;
    bool is_visibility_scope_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDestiny_Definitions_DestinyVendorSaleItemActionBlockDefinition m_action;
    bool m_action_isSet;
    bool m_action_isValid;

    qint32 m_category_index;
    bool m_category_index_isSet;
    bool m_category_index_isValid;

    QList<OAIDestiny_Definitions_DestinyItemCreationEntryLevelDefinition> m_creation_levels;
    bool m_creation_levels_isSet;
    bool m_creation_levels_isValid;

    QList<OAIDestiny_Definitions_DestinyVendorItemQuantity> m_currencies;
    bool m_currencies_isSet;
    bool m_currencies_isValid;

    QString m_display_category;
    bool m_display_category_isSet;
    bool m_display_category_isValid;

    qint32 m_display_category_index;
    bool m_display_category_index_isSet;
    bool m_display_category_index_isValid;

    qint32 m_exclusivity;
    bool m_exclusivity_isSet;
    bool m_exclusivity_isValid;

    QString m_expiration_tooltip;
    bool m_expiration_tooltip_isSet;
    bool m_expiration_tooltip_isValid;

    QList<qint32> m_failure_indexes;
    bool m_failure_indexes_isSet;
    bool m_failure_indexes_isValid;

    qint32 m_inventory_bucket_hash;
    bool m_inventory_bucket_hash_isSet;
    bool m_inventory_bucket_hash_isValid;

    bool m_is_crm;
    bool m_is_crm_isSet;
    bool m_is_crm_isValid;

    bool m_is_offer;
    bool m_is_offer_isSet;
    bool m_is_offer_isValid;

    qint32 m_item_hash;
    bool m_item_hash_isSet;
    bool m_item_hash_isValid;

    qint32 m_maximum_level;
    bool m_maximum_level_isSet;
    bool m_maximum_level_isValid;

    qint32 m_minimum_level;
    bool m_minimum_level_isSet;
    bool m_minimum_level_isValid;

    qint32 m_original_category_index;
    bool m_original_category_index_isSet;
    bool m_original_category_index_isValid;

    qint32 m_purchasable_scope;
    bool m_purchasable_scope_isSet;
    bool m_purchasable_scope_isValid;

    qint32 m_quantity;
    bool m_quantity_isSet;
    bool m_quantity_isValid;

    QList<qint32> m_redirect_to_sale_indexes;
    bool m_redirect_to_sale_indexes_isSet;
    bool m_redirect_to_sale_indexes_isValid;

    qint32 m_refund_policy;
    bool m_refund_policy_isSet;
    bool m_refund_policy_isValid;

    qint32 m_refund_time_limit;
    bool m_refund_time_limit_isSet;
    bool m_refund_time_limit_isValid;

    QList<OAIDestiny_Definitions_DestinyVendorItemSocketOverride> m_socket_overrides;
    bool m_socket_overrides_isSet;
    bool m_socket_overrides_isValid;

    qint32 m_sort_value;
    bool m_sort_value_isSet;
    bool m_sort_value_isValid;

    bool m_unpurchasable;
    bool m_unpurchasable_isSet;
    bool m_unpurchasable_isValid;

    qint32 m_vendor_item_index;
    bool m_vendor_item_index_isSet;
    bool m_vendor_item_index_isValid;

    qint32 m_visibility_scope;
    bool m_visibility_scope_isSet;
    bool m_visibility_scope_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyVendorItemDefinition)

#endif // OAIDestiny_Definitions_DestinyVendorItemDefinition_H
