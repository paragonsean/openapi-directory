/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyProgressionStepDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyProgressionStepDefinition::OAIDestiny_Definitions_DestinyProgressionStepDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyProgressionStepDefinition::OAIDestiny_Definitions_DestinyProgressionStepDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyProgressionStepDefinition::~OAIDestiny_Definitions_DestinyProgressionStepDefinition() {}

void OAIDestiny_Definitions_DestinyProgressionStepDefinition::initializeModel() {

    m_display_effect_type_isSet = false;
    m_display_effect_type_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_progress_total_isSet = false;
    m_progress_total_isValid = false;

    m_reward_items_isSet = false;
    m_reward_items_isValid = false;

    m_step_name_isSet = false;
    m_step_name_isValid = false;
}

void OAIDestiny_Definitions_DestinyProgressionStepDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyProgressionStepDefinition::fromJsonObject(QJsonObject json) {

    m_display_effect_type_isValid = ::OpenAPI::fromJsonValue(m_display_effect_type, json[QString("displayEffectType")]);
    m_display_effect_type_isSet = !json[QString("displayEffectType")].isNull() && m_display_effect_type_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_progress_total_isValid = ::OpenAPI::fromJsonValue(m_progress_total, json[QString("progressTotal")]);
    m_progress_total_isSet = !json[QString("progressTotal")].isNull() && m_progress_total_isValid;

    m_reward_items_isValid = ::OpenAPI::fromJsonValue(m_reward_items, json[QString("rewardItems")]);
    m_reward_items_isSet = !json[QString("rewardItems")].isNull() && m_reward_items_isValid;

    m_step_name_isValid = ::OpenAPI::fromJsonValue(m_step_name, json[QString("stepName")]);
    m_step_name_isSet = !json[QString("stepName")].isNull() && m_step_name_isValid;
}

QString OAIDestiny_Definitions_DestinyProgressionStepDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyProgressionStepDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_display_effect_type_isSet) {
        obj.insert(QString("displayEffectType"), ::OpenAPI::toJsonValue(m_display_effect_type));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_progress_total_isSet) {
        obj.insert(QString("progressTotal"), ::OpenAPI::toJsonValue(m_progress_total));
    }
    if (m_reward_items.size() > 0) {
        obj.insert(QString("rewardItems"), ::OpenAPI::toJsonValue(m_reward_items));
    }
    if (m_step_name_isSet) {
        obj.insert(QString("stepName"), ::OpenAPI::toJsonValue(m_step_name));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_DestinyProgressionStepDefinition::getDisplayEffectType() const {
    return m_display_effect_type;
}
void OAIDestiny_Definitions_DestinyProgressionStepDefinition::setDisplayEffectType(const qint32 &display_effect_type) {
    m_display_effect_type = display_effect_type;
    m_display_effect_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionStepDefinition::is_display_effect_type_Set() const{
    return m_display_effect_type_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionStepDefinition::is_display_effect_type_Valid() const{
    return m_display_effect_type_isValid;
}

QString OAIDestiny_Definitions_DestinyProgressionStepDefinition::getIcon() const {
    return m_icon;
}
void OAIDestiny_Definitions_DestinyProgressionStepDefinition::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionStepDefinition::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionStepDefinition::is_icon_Valid() const{
    return m_icon_isValid;
}

qint32 OAIDestiny_Definitions_DestinyProgressionStepDefinition::getProgressTotal() const {
    return m_progress_total;
}
void OAIDestiny_Definitions_DestinyProgressionStepDefinition::setProgressTotal(const qint32 &progress_total) {
    m_progress_total = progress_total;
    m_progress_total_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionStepDefinition::is_progress_total_Set() const{
    return m_progress_total_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionStepDefinition::is_progress_total_Valid() const{
    return m_progress_total_isValid;
}

QList<OAIDestiny_DestinyItemQuantity> OAIDestiny_Definitions_DestinyProgressionStepDefinition::getRewardItems() const {
    return m_reward_items;
}
void OAIDestiny_Definitions_DestinyProgressionStepDefinition::setRewardItems(const QList<OAIDestiny_DestinyItemQuantity> &reward_items) {
    m_reward_items = reward_items;
    m_reward_items_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionStepDefinition::is_reward_items_Set() const{
    return m_reward_items_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionStepDefinition::is_reward_items_Valid() const{
    return m_reward_items_isValid;
}

QString OAIDestiny_Definitions_DestinyProgressionStepDefinition::getStepName() const {
    return m_step_name;
}
void OAIDestiny_Definitions_DestinyProgressionStepDefinition::setStepName(const QString &step_name) {
    m_step_name = step_name;
    m_step_name_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionStepDefinition::is_step_name_Set() const{
    return m_step_name_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionStepDefinition::is_step_name_Valid() const{
    return m_step_name_isValid;
}

bool OAIDestiny_Definitions_DestinyProgressionStepDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_effect_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyProgressionStepDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
