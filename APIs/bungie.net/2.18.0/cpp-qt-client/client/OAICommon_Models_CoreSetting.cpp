/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommon_Models_CoreSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommon_Models_CoreSetting::OAICommon_Models_CoreSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommon_Models_CoreSetting::OAICommon_Models_CoreSetting() {
    this->initializeModel();
}

OAICommon_Models_CoreSetting::~OAICommon_Models_CoreSetting() {}

void OAICommon_Models_CoreSetting::initializeModel() {

    m_child_settings_isSet = false;
    m_child_settings_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_image_path_isSet = false;
    m_image_path_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAICommon_Models_CoreSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommon_Models_CoreSetting::fromJsonObject(QJsonObject json) {

    m_child_settings_isValid = ::OpenAPI::fromJsonValue(m_child_settings, json[QString("childSettings")]);
    m_child_settings_isSet = !json[QString("childSettings")].isNull() && m_child_settings_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_image_path_isValid = ::OpenAPI::fromJsonValue(m_image_path, json[QString("imagePath")]);
    m_image_path_isSet = !json[QString("imagePath")].isNull() && m_image_path_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;
}

QString OAICommon_Models_CoreSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommon_Models_CoreSetting::asJsonObject() const {
    QJsonObject obj;
    if (m_child_settings.size() > 0) {
        obj.insert(QString("childSettings"), ::OpenAPI::toJsonValue(m_child_settings));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_image_path_isSet) {
        obj.insert(QString("imagePath"), ::OpenAPI::toJsonValue(m_image_path));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QList<OAICommon_Models_CoreSetting> OAICommon_Models_CoreSetting::getChildSettings() const {
    return m_child_settings;
}
void OAICommon_Models_CoreSetting::setChildSettings(const QList<OAICommon_Models_CoreSetting> &child_settings) {
    m_child_settings = child_settings;
    m_child_settings_isSet = true;
}

bool OAICommon_Models_CoreSetting::is_child_settings_Set() const{
    return m_child_settings_isSet;
}

bool OAICommon_Models_CoreSetting::is_child_settings_Valid() const{
    return m_child_settings_isValid;
}

QString OAICommon_Models_CoreSetting::getDisplayName() const {
    return m_display_name;
}
void OAICommon_Models_CoreSetting::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICommon_Models_CoreSetting::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICommon_Models_CoreSetting::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAICommon_Models_CoreSetting::getIdentifier() const {
    return m_identifier;
}
void OAICommon_Models_CoreSetting::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAICommon_Models_CoreSetting::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAICommon_Models_CoreSetting::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAICommon_Models_CoreSetting::getImagePath() const {
    return m_image_path;
}
void OAICommon_Models_CoreSetting::setImagePath(const QString &image_path) {
    m_image_path = image_path;
    m_image_path_isSet = true;
}

bool OAICommon_Models_CoreSetting::is_image_path_Set() const{
    return m_image_path_isSet;
}

bool OAICommon_Models_CoreSetting::is_image_path_Valid() const{
    return m_image_path_isValid;
}

bool OAICommon_Models_CoreSetting::isIsDefault() const {
    return m_is_default;
}
void OAICommon_Models_CoreSetting::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAICommon_Models_CoreSetting::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAICommon_Models_CoreSetting::is_is_default_Valid() const{
    return m_is_default_isValid;
}

QString OAICommon_Models_CoreSetting::getSummary() const {
    return m_summary;
}
void OAICommon_Models_CoreSetting::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAICommon_Models_CoreSetting::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAICommon_Models_CoreSetting::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAICommon_Models_CoreSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommon_Models_CoreSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
