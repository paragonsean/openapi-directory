/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_DestinyTalentNode.h
 *
 * I see you&#39;ve come to find out more about Talent Nodes. I&#39;m so sorry. Talent Nodes are the conceptual, visual nodes that appear on Talent Grids. Talent Grids, in Destiny 1, were found on almost every instanced item: they had Nodes that could be activated to change the properties of the item. In Destiny 2, Talent Grids only exist for Builds/Subclasses, and while the basic concept is the same (Nodes can be activated once you&#39;ve gained sufficient Experience on the Item, and provide effects), there are some new concepts from Destiny 1. Examine DestinyTalentGridDefinition and its subordinates for more information. This is the \&quot;Live\&quot; information for the current status of a Talent Node on a specific item. Talent Nodes have many Steps, but only one can be active at any one time: and it is the Step that determines both the visual and the game state-changing properties that the Node provides. Examine this and DestinyTalentNodeStepDefinition carefully. *IMPORTANT NOTE* Talent Nodes are, unfortunately, Content Version DEPENDENT. Though they refer to hashes for Nodes and Steps, those hashes are not guaranteed to be immutable across content versions. This is a source of great exasperation for me, but as a result anyone using Talent Grid data must ensure that the content version of their static content matches that of the server responses before showing or making decisions based on talent grid data.
 */

#ifndef OAIDestiny_DestinyTalentNode_H
#define OAIDestiny_DestinyTalentNode_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_DestinyMaterialRequirement.h"
#include "OAIDestiny_DestinyTalentNodeStatBlock.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_DestinyMaterialRequirement;
class OAIDestiny_DestinyTalentNodeStatBlock;

class OAIDestiny_DestinyTalentNode : public OAIObject {
public:
    OAIDestiny_DestinyTalentNode();
    OAIDestiny_DestinyTalentNode(QString json);
    ~OAIDestiny_DestinyTalentNode() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getActivationGridLevel() const;
    void setActivationGridLevel(const qint32 &activation_grid_level);
    bool is_activation_grid_level_Set() const;
    bool is_activation_grid_level_Valid() const;

    bool isHidden() const;
    void setHidden(const bool &hidden);
    bool is_hidden_Set() const;
    bool is_hidden_Valid() const;

    bool isIsActivated() const;
    void setIsActivated(const bool &is_activated);
    bool is_is_activated_Set() const;
    bool is_is_activated_Valid() const;

    QList<OAIDestiny_Definitions_DestinyMaterialRequirement> getMaterialsToUpgrade() const;
    void setMaterialsToUpgrade(const QList<OAIDestiny_Definitions_DestinyMaterialRequirement> &materials_to_upgrade);
    bool is_materials_to_upgrade_Set() const;
    bool is_materials_to_upgrade_Valid() const;

    qint32 getNodeHash() const;
    void setNodeHash(const qint32 &node_hash);
    bool is_node_hash_Set() const;
    bool is_node_hash_Valid() const;

    qint32 getNodeIndex() const;
    void setNodeIndex(const qint32 &node_index);
    bool is_node_index_Set() const;
    bool is_node_index_Valid() const;

    OAIDestiny_DestinyTalentNodeStatBlock getNodeStatsBlock() const;
    void setNodeStatsBlock(const OAIDestiny_DestinyTalentNodeStatBlock &node_stats_block);
    bool is_node_stats_block_Set() const;
    bool is_node_stats_block_Valid() const;

    float getProgressPercent() const;
    void setProgressPercent(const float &progress_percent);
    bool is_progress_percent_Set() const;
    bool is_progress_percent_Valid() const;

    qint32 getState() const;
    void setState(const qint32 &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    qint32 getStepIndex() const;
    void setStepIndex(const qint32 &step_index);
    bool is_step_index_Set() const;
    bool is_step_index_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_activation_grid_level;
    bool m_activation_grid_level_isSet;
    bool m_activation_grid_level_isValid;

    bool m_hidden;
    bool m_hidden_isSet;
    bool m_hidden_isValid;

    bool m_is_activated;
    bool m_is_activated_isSet;
    bool m_is_activated_isValid;

    QList<OAIDestiny_Definitions_DestinyMaterialRequirement> m_materials_to_upgrade;
    bool m_materials_to_upgrade_isSet;
    bool m_materials_to_upgrade_isValid;

    qint32 m_node_hash;
    bool m_node_hash_isSet;
    bool m_node_hash_isValid;

    qint32 m_node_index;
    bool m_node_index_isSet;
    bool m_node_index_isValid;

    OAIDestiny_DestinyTalentNodeStatBlock m_node_stats_block;
    bool m_node_stats_block_isSet;
    bool m_node_stats_block_isValid;

    float m_progress_percent;
    bool m_progress_percent_isSet;
    bool m_progress_percent_isValid;

    qint32 m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    qint32 m_step_index;
    bool m_step_index_isSet;
    bool m_step_index_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_DestinyTalentNode)

#endif // OAIDestiny_DestinyTalentNode_H
