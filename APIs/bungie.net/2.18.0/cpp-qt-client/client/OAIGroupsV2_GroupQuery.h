/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGroupsV2_GroupQuery.h
 *
 * NOTE: GroupQuery, as of Destiny 2, has essentially two totally different and incompatible \&quot;modes\&quot;.  If you are querying for a group, you can pass any of the properties below.  If you are querying for a Clan, you MUST NOT pass any of the following properties (they must be null or undefined in your request, not just empty string/default values):  - groupMemberCountFilter - localeFilter - tagText  If you pass these, you will get a useless InvalidParameters error.
 */

#ifndef OAIGroupsV2_GroupQuery_H
#define OAIGroupsV2_GroupQuery_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGroupsV2_GroupQuery : public OAIObject {
public:
    OAIGroupsV2_GroupQuery();
    OAIGroupsV2_GroupQuery(QString json);
    ~OAIGroupsV2_GroupQuery() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCreationDate() const;
    void setCreationDate(const qint32 &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    qint32 getCurrentPage() const;
    void setCurrentPage(const qint32 &current_page);
    bool is_current_page_Set() const;
    bool is_current_page_Valid() const;

    qint32 getGroupMemberCountFilter() const;
    void setGroupMemberCountFilter(const qint32 &group_member_count_filter);
    bool is_group_member_count_filter_Set() const;
    bool is_group_member_count_filter_Valid() const;

    qint32 getGroupType() const;
    void setGroupType(const qint32 &group_type);
    bool is_group_type_Set() const;
    bool is_group_type_Valid() const;

    qint32 getItemsPerPage() const;
    void setItemsPerPage(const qint32 &items_per_page);
    bool is_items_per_page_Set() const;
    bool is_items_per_page_Valid() const;

    QString getLocaleFilter() const;
    void setLocaleFilter(const QString &locale_filter);
    bool is_locale_filter_Set() const;
    bool is_locale_filter_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRequestContinuationToken() const;
    void setRequestContinuationToken(const QString &request_continuation_token);
    bool is_request_continuation_token_Set() const;
    bool is_request_continuation_token_Valid() const;

    qint32 getSortBy() const;
    void setSortBy(const qint32 &sort_by);
    bool is_sort_by_Set() const;
    bool is_sort_by_Valid() const;

    QString getTagText() const;
    void setTagText(const QString &tag_text);
    bool is_tag_text_Set() const;
    bool is_tag_text_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    qint32 m_current_page;
    bool m_current_page_isSet;
    bool m_current_page_isValid;

    qint32 m_group_member_count_filter;
    bool m_group_member_count_filter_isSet;
    bool m_group_member_count_filter_isValid;

    qint32 m_group_type;
    bool m_group_type_isSet;
    bool m_group_type_isValid;

    qint32 m_items_per_page;
    bool m_items_per_page_isSet;
    bool m_items_per_page_isValid;

    QString m_locale_filter;
    bool m_locale_filter_isSet;
    bool m_locale_filter_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_request_continuation_token;
    bool m_request_continuation_token_isSet;
    bool m_request_continuation_token_isValid;

    qint32 m_sort_by;
    bool m_sort_by_isSet;
    bool m_sort_by_isValid;

    QString m_tag_text;
    bool m_tag_text_isSet;
    bool m_tag_text_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGroupsV2_GroupQuery)

#endif // OAIGroupsV2_GroupQuery_H
