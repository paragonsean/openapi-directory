/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyEquippingBlockDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyEquippingBlockDefinition::OAIDestiny_Definitions_DestinyEquippingBlockDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyEquippingBlockDefinition::OAIDestiny_Definitions_DestinyEquippingBlockDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyEquippingBlockDefinition::~OAIDestiny_Definitions_DestinyEquippingBlockDefinition() {}

void OAIDestiny_Definitions_DestinyEquippingBlockDefinition::initializeModel() {

    m_ammo_type_isSet = false;
    m_ammo_type_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_display_strings_isSet = false;
    m_display_strings_isValid = false;

    m_equipment_slot_type_hash_isSet = false;
    m_equipment_slot_type_hash_isValid = false;

    m_gearset_item_hash_isSet = false;
    m_gearset_item_hash_isValid = false;

    m_unique_label_isSet = false;
    m_unique_label_isValid = false;

    m_unique_label_hash_isSet = false;
    m_unique_label_hash_isValid = false;
}

void OAIDestiny_Definitions_DestinyEquippingBlockDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyEquippingBlockDefinition::fromJsonObject(QJsonObject json) {

    m_ammo_type_isValid = ::OpenAPI::fromJsonValue(m_ammo_type, json[QString("ammoType")]);
    m_ammo_type_isSet = !json[QString("ammoType")].isNull() && m_ammo_type_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_display_strings_isValid = ::OpenAPI::fromJsonValue(m_display_strings, json[QString("displayStrings")]);
    m_display_strings_isSet = !json[QString("displayStrings")].isNull() && m_display_strings_isValid;

    m_equipment_slot_type_hash_isValid = ::OpenAPI::fromJsonValue(m_equipment_slot_type_hash, json[QString("equipmentSlotTypeHash")]);
    m_equipment_slot_type_hash_isSet = !json[QString("equipmentSlotTypeHash")].isNull() && m_equipment_slot_type_hash_isValid;

    m_gearset_item_hash_isValid = ::OpenAPI::fromJsonValue(m_gearset_item_hash, json[QString("gearsetItemHash")]);
    m_gearset_item_hash_isSet = !json[QString("gearsetItemHash")].isNull() && m_gearset_item_hash_isValid;

    m_unique_label_isValid = ::OpenAPI::fromJsonValue(m_unique_label, json[QString("uniqueLabel")]);
    m_unique_label_isSet = !json[QString("uniqueLabel")].isNull() && m_unique_label_isValid;

    m_unique_label_hash_isValid = ::OpenAPI::fromJsonValue(m_unique_label_hash, json[QString("uniqueLabelHash")]);
    m_unique_label_hash_isSet = !json[QString("uniqueLabelHash")].isNull() && m_unique_label_hash_isValid;
}

QString OAIDestiny_Definitions_DestinyEquippingBlockDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyEquippingBlockDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_ammo_type_isSet) {
        obj.insert(QString("ammoType"), ::OpenAPI::toJsonValue(m_ammo_type));
    }
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_display_strings.size() > 0) {
        obj.insert(QString("displayStrings"), ::OpenAPI::toJsonValue(m_display_strings));
    }
    if (m_equipment_slot_type_hash_isSet) {
        obj.insert(QString("equipmentSlotTypeHash"), ::OpenAPI::toJsonValue(m_equipment_slot_type_hash));
    }
    if (m_gearset_item_hash_isSet) {
        obj.insert(QString("gearsetItemHash"), ::OpenAPI::toJsonValue(m_gearset_item_hash));
    }
    if (m_unique_label_isSet) {
        obj.insert(QString("uniqueLabel"), ::OpenAPI::toJsonValue(m_unique_label));
    }
    if (m_unique_label_hash_isSet) {
        obj.insert(QString("uniqueLabelHash"), ::OpenAPI::toJsonValue(m_unique_label_hash));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_DestinyEquippingBlockDefinition::getAmmoType() const {
    return m_ammo_type;
}
void OAIDestiny_Definitions_DestinyEquippingBlockDefinition::setAmmoType(const qint32 &ammo_type) {
    m_ammo_type = ammo_type;
    m_ammo_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyEquippingBlockDefinition::is_ammo_type_Set() const{
    return m_ammo_type_isSet;
}

bool OAIDestiny_Definitions_DestinyEquippingBlockDefinition::is_ammo_type_Valid() const{
    return m_ammo_type_isValid;
}

qint32 OAIDestiny_Definitions_DestinyEquippingBlockDefinition::getAttributes() const {
    return m_attributes;
}
void OAIDestiny_Definitions_DestinyEquippingBlockDefinition::setAttributes(const qint32 &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyEquippingBlockDefinition::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIDestiny_Definitions_DestinyEquippingBlockDefinition::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QList<QString> OAIDestiny_Definitions_DestinyEquippingBlockDefinition::getDisplayStrings() const {
    return m_display_strings;
}
void OAIDestiny_Definitions_DestinyEquippingBlockDefinition::setDisplayStrings(const QList<QString> &display_strings) {
    m_display_strings = display_strings;
    m_display_strings_isSet = true;
}

bool OAIDestiny_Definitions_DestinyEquippingBlockDefinition::is_display_strings_Set() const{
    return m_display_strings_isSet;
}

bool OAIDestiny_Definitions_DestinyEquippingBlockDefinition::is_display_strings_Valid() const{
    return m_display_strings_isValid;
}

qint32 OAIDestiny_Definitions_DestinyEquippingBlockDefinition::getEquipmentSlotTypeHash() const {
    return m_equipment_slot_type_hash;
}
void OAIDestiny_Definitions_DestinyEquippingBlockDefinition::setEquipmentSlotTypeHash(const qint32 &equipment_slot_type_hash) {
    m_equipment_slot_type_hash = equipment_slot_type_hash;
    m_equipment_slot_type_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyEquippingBlockDefinition::is_equipment_slot_type_hash_Set() const{
    return m_equipment_slot_type_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyEquippingBlockDefinition::is_equipment_slot_type_hash_Valid() const{
    return m_equipment_slot_type_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyEquippingBlockDefinition::getGearsetItemHash() const {
    return m_gearset_item_hash;
}
void OAIDestiny_Definitions_DestinyEquippingBlockDefinition::setGearsetItemHash(const qint32 &gearset_item_hash) {
    m_gearset_item_hash = gearset_item_hash;
    m_gearset_item_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyEquippingBlockDefinition::is_gearset_item_hash_Set() const{
    return m_gearset_item_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyEquippingBlockDefinition::is_gearset_item_hash_Valid() const{
    return m_gearset_item_hash_isValid;
}

QString OAIDestiny_Definitions_DestinyEquippingBlockDefinition::getUniqueLabel() const {
    return m_unique_label;
}
void OAIDestiny_Definitions_DestinyEquippingBlockDefinition::setUniqueLabel(const QString &unique_label) {
    m_unique_label = unique_label;
    m_unique_label_isSet = true;
}

bool OAIDestiny_Definitions_DestinyEquippingBlockDefinition::is_unique_label_Set() const{
    return m_unique_label_isSet;
}

bool OAIDestiny_Definitions_DestinyEquippingBlockDefinition::is_unique_label_Valid() const{
    return m_unique_label_isValid;
}

qint32 OAIDestiny_Definitions_DestinyEquippingBlockDefinition::getUniqueLabelHash() const {
    return m_unique_label_hash;
}
void OAIDestiny_Definitions_DestinyEquippingBlockDefinition::setUniqueLabelHash(const qint32 &unique_label_hash) {
    m_unique_label_hash = unique_label_hash;
    m_unique_label_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyEquippingBlockDefinition::is_unique_label_hash_Set() const{
    return m_unique_label_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyEquippingBlockDefinition::is_unique_label_hash_Valid() const{
    return m_unique_label_hash_isValid;
}

bool OAIDestiny_Definitions_DestinyEquippingBlockDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ammo_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_strings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_equipment_slot_type_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gearset_item_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_label_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyEquippingBlockDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
