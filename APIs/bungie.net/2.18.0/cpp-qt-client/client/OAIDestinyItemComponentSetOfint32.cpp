/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestinyItemComponentSetOfint32.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestinyItemComponentSetOfint32::OAIDestinyItemComponentSetOfint32(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestinyItemComponentSetOfint32::OAIDestinyItemComponentSetOfint32() {
    this->initializeModel();
}

OAIDestinyItemComponentSetOfint32::~OAIDestinyItemComponentSetOfint32() {}

void OAIDestinyItemComponentSetOfint32::initializeModel() {

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_objectives_isSet = false;
    m_objectives_isValid = false;

    m_perks_isSet = false;
    m_perks_isValid = false;

    m_plug_objectives_isSet = false;
    m_plug_objectives_isValid = false;

    m_plug_states_isSet = false;
    m_plug_states_isValid = false;

    m_render_data_isSet = false;
    m_render_data_isValid = false;

    m_reusable_plugs_isSet = false;
    m_reusable_plugs_isValid = false;

    m_sockets_isSet = false;
    m_sockets_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;

    m_talent_grids_isSet = false;
    m_talent_grids_isValid = false;
}

void OAIDestinyItemComponentSetOfint32::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestinyItemComponentSetOfint32::fromJsonObject(QJsonObject json) {

    m_instances_isValid = ::OpenAPI::fromJsonValue(m_instances, json[QString("instances")]);
    m_instances_isSet = !json[QString("instances")].isNull() && m_instances_isValid;

    m_objectives_isValid = ::OpenAPI::fromJsonValue(m_objectives, json[QString("objectives")]);
    m_objectives_isSet = !json[QString("objectives")].isNull() && m_objectives_isValid;

    m_perks_isValid = ::OpenAPI::fromJsonValue(m_perks, json[QString("perks")]);
    m_perks_isSet = !json[QString("perks")].isNull() && m_perks_isValid;

    m_plug_objectives_isValid = ::OpenAPI::fromJsonValue(m_plug_objectives, json[QString("plugObjectives")]);
    m_plug_objectives_isSet = !json[QString("plugObjectives")].isNull() && m_plug_objectives_isValid;

    m_plug_states_isValid = ::OpenAPI::fromJsonValue(m_plug_states, json[QString("plugStates")]);
    m_plug_states_isSet = !json[QString("plugStates")].isNull() && m_plug_states_isValid;

    m_render_data_isValid = ::OpenAPI::fromJsonValue(m_render_data, json[QString("renderData")]);
    m_render_data_isSet = !json[QString("renderData")].isNull() && m_render_data_isValid;

    m_reusable_plugs_isValid = ::OpenAPI::fromJsonValue(m_reusable_plugs, json[QString("reusablePlugs")]);
    m_reusable_plugs_isSet = !json[QString("reusablePlugs")].isNull() && m_reusable_plugs_isValid;

    m_sockets_isValid = ::OpenAPI::fromJsonValue(m_sockets, json[QString("sockets")]);
    m_sockets_isSet = !json[QString("sockets")].isNull() && m_sockets_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;

    m_talent_grids_isValid = ::OpenAPI::fromJsonValue(m_talent_grids, json[QString("talentGrids")]);
    m_talent_grids_isSet = !json[QString("talentGrids")].isNull() && m_talent_grids_isValid;
}

QString OAIDestinyItemComponentSetOfint32::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestinyItemComponentSetOfint32::asJsonObject() const {
    QJsonObject obj;
    if (m_instances.isSet()) {
        obj.insert(QString("instances"), ::OpenAPI::toJsonValue(m_instances));
    }
    if (m_objectives.isSet()) {
        obj.insert(QString("objectives"), ::OpenAPI::toJsonValue(m_objectives));
    }
    if (m_perks.isSet()) {
        obj.insert(QString("perks"), ::OpenAPI::toJsonValue(m_perks));
    }
    if (m_plug_objectives.isSet()) {
        obj.insert(QString("plugObjectives"), ::OpenAPI::toJsonValue(m_plug_objectives));
    }
    if (m_plug_states.isSet()) {
        obj.insert(QString("plugStates"), ::OpenAPI::toJsonValue(m_plug_states));
    }
    if (m_render_data.isSet()) {
        obj.insert(QString("renderData"), ::OpenAPI::toJsonValue(m_render_data));
    }
    if (m_reusable_plugs.isSet()) {
        obj.insert(QString("reusablePlugs"), ::OpenAPI::toJsonValue(m_reusable_plugs));
    }
    if (m_sockets.isSet()) {
        obj.insert(QString("sockets"), ::OpenAPI::toJsonValue(m_sockets));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    if (m_talent_grids.isSet()) {
        obj.insert(QString("talentGrids"), ::OpenAPI::toJsonValue(m_talent_grids));
    }
    return obj;
}

OAIDictionaryComponentResponseOfint32AndDestinyItemInstanceComponent OAIDestinyItemComponentSetOfint32::getInstances() const {
    return m_instances;
}
void OAIDestinyItemComponentSetOfint32::setInstances(const OAIDictionaryComponentResponseOfint32AndDestinyItemInstanceComponent &instances) {
    m_instances = instances;
    m_instances_isSet = true;
}

bool OAIDestinyItemComponentSetOfint32::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAIDestinyItemComponentSetOfint32::is_instances_Valid() const{
    return m_instances_isValid;
}

OAIDictionaryComponentResponseOfint32AndDestinyItemObjectivesComponent OAIDestinyItemComponentSetOfint32::getObjectives() const {
    return m_objectives;
}
void OAIDestinyItemComponentSetOfint32::setObjectives(const OAIDictionaryComponentResponseOfint32AndDestinyItemObjectivesComponent &objectives) {
    m_objectives = objectives;
    m_objectives_isSet = true;
}

bool OAIDestinyItemComponentSetOfint32::is_objectives_Set() const{
    return m_objectives_isSet;
}

bool OAIDestinyItemComponentSetOfint32::is_objectives_Valid() const{
    return m_objectives_isValid;
}

OAIDictionaryComponentResponseOfint32AndDestinyItemPerksComponent OAIDestinyItemComponentSetOfint32::getPerks() const {
    return m_perks;
}
void OAIDestinyItemComponentSetOfint32::setPerks(const OAIDictionaryComponentResponseOfint32AndDestinyItemPerksComponent &perks) {
    m_perks = perks;
    m_perks_isSet = true;
}

bool OAIDestinyItemComponentSetOfint32::is_perks_Set() const{
    return m_perks_isSet;
}

bool OAIDestinyItemComponentSetOfint32::is_perks_Valid() const{
    return m_perks_isValid;
}

OAIDictionaryComponentResponseOfint32AndDestinyItemPlugObjectivesComponent OAIDestinyItemComponentSetOfint32::getPlugObjectives() const {
    return m_plug_objectives;
}
void OAIDestinyItemComponentSetOfint32::setPlugObjectives(const OAIDictionaryComponentResponseOfint32AndDestinyItemPlugObjectivesComponent &plug_objectives) {
    m_plug_objectives = plug_objectives;
    m_plug_objectives_isSet = true;
}

bool OAIDestinyItemComponentSetOfint32::is_plug_objectives_Set() const{
    return m_plug_objectives_isSet;
}

bool OAIDestinyItemComponentSetOfint32::is_plug_objectives_Valid() const{
    return m_plug_objectives_isValid;
}

OAIDictionaryComponentResponseOfuint32AndDestinyItemPlugComponent OAIDestinyItemComponentSetOfint32::getPlugStates() const {
    return m_plug_states;
}
void OAIDestinyItemComponentSetOfint32::setPlugStates(const OAIDictionaryComponentResponseOfuint32AndDestinyItemPlugComponent &plug_states) {
    m_plug_states = plug_states;
    m_plug_states_isSet = true;
}

bool OAIDestinyItemComponentSetOfint32::is_plug_states_Set() const{
    return m_plug_states_isSet;
}

bool OAIDestinyItemComponentSetOfint32::is_plug_states_Valid() const{
    return m_plug_states_isValid;
}

OAIDictionaryComponentResponseOfint32AndDestinyItemRenderComponent OAIDestinyItemComponentSetOfint32::getRenderData() const {
    return m_render_data;
}
void OAIDestinyItemComponentSetOfint32::setRenderData(const OAIDictionaryComponentResponseOfint32AndDestinyItemRenderComponent &render_data) {
    m_render_data = render_data;
    m_render_data_isSet = true;
}

bool OAIDestinyItemComponentSetOfint32::is_render_data_Set() const{
    return m_render_data_isSet;
}

bool OAIDestinyItemComponentSetOfint32::is_render_data_Valid() const{
    return m_render_data_isValid;
}

OAIDictionaryComponentResponseOfint32AndDestinyItemReusablePlugsComponent OAIDestinyItemComponentSetOfint32::getReusablePlugs() const {
    return m_reusable_plugs;
}
void OAIDestinyItemComponentSetOfint32::setReusablePlugs(const OAIDictionaryComponentResponseOfint32AndDestinyItemReusablePlugsComponent &reusable_plugs) {
    m_reusable_plugs = reusable_plugs;
    m_reusable_plugs_isSet = true;
}

bool OAIDestinyItemComponentSetOfint32::is_reusable_plugs_Set() const{
    return m_reusable_plugs_isSet;
}

bool OAIDestinyItemComponentSetOfint32::is_reusable_plugs_Valid() const{
    return m_reusable_plugs_isValid;
}

OAIDictionaryComponentResponseOfint32AndDestinyItemSocketsComponent OAIDestinyItemComponentSetOfint32::getSockets() const {
    return m_sockets;
}
void OAIDestinyItemComponentSetOfint32::setSockets(const OAIDictionaryComponentResponseOfint32AndDestinyItemSocketsComponent &sockets) {
    m_sockets = sockets;
    m_sockets_isSet = true;
}

bool OAIDestinyItemComponentSetOfint32::is_sockets_Set() const{
    return m_sockets_isSet;
}

bool OAIDestinyItemComponentSetOfint32::is_sockets_Valid() const{
    return m_sockets_isValid;
}

OAIDictionaryComponentResponseOfint32AndDestinyItemStatsComponent OAIDestinyItemComponentSetOfint32::getStats() const {
    return m_stats;
}
void OAIDestinyItemComponentSetOfint32::setStats(const OAIDictionaryComponentResponseOfint32AndDestinyItemStatsComponent &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIDestinyItemComponentSetOfint32::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIDestinyItemComponentSetOfint32::is_stats_Valid() const{
    return m_stats_isValid;
}

OAIDictionaryComponentResponseOfint32AndDestinyItemTalentGridComponent OAIDestinyItemComponentSetOfint32::getTalentGrids() const {
    return m_talent_grids;
}
void OAIDestinyItemComponentSetOfint32::setTalentGrids(const OAIDictionaryComponentResponseOfint32AndDestinyItemTalentGridComponent &talent_grids) {
    m_talent_grids = talent_grids;
    m_talent_grids_isSet = true;
}

bool OAIDestinyItemComponentSetOfint32::is_talent_grids_Set() const{
    return m_talent_grids_isSet;
}

bool OAIDestinyItemComponentSetOfint32::is_talent_grids_Valid() const{
    return m_talent_grids_isValid;
}

bool OAIDestinyItemComponentSetOfint32::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_objectives.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_perks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plug_objectives.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plug_states.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_render_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reusable_plugs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sockets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_talent_grids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestinyItemComponentSetOfint32::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
