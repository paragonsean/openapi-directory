/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Artifacts_DestinyArtifactProfileScoped.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Artifacts_DestinyArtifactProfileScoped::OAIDestiny_Artifacts_DestinyArtifactProfileScoped(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Artifacts_DestinyArtifactProfileScoped::OAIDestiny_Artifacts_DestinyArtifactProfileScoped() {
    this->initializeModel();
}

OAIDestiny_Artifacts_DestinyArtifactProfileScoped::~OAIDestiny_Artifacts_DestinyArtifactProfileScoped() {}

void OAIDestiny_Artifacts_DestinyArtifactProfileScoped::initializeModel() {

    m_artifact_hash_isSet = false;
    m_artifact_hash_isValid = false;

    m_point_progression_isSet = false;
    m_point_progression_isValid = false;

    m_points_acquired_isSet = false;
    m_points_acquired_isValid = false;

    m_power_bonus_isSet = false;
    m_power_bonus_isValid = false;

    m_power_bonus_progression_isSet = false;
    m_power_bonus_progression_isValid = false;
}

void OAIDestiny_Artifacts_DestinyArtifactProfileScoped::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Artifacts_DestinyArtifactProfileScoped::fromJsonObject(QJsonObject json) {

    m_artifact_hash_isValid = ::OpenAPI::fromJsonValue(m_artifact_hash, json[QString("artifactHash")]);
    m_artifact_hash_isSet = !json[QString("artifactHash")].isNull() && m_artifact_hash_isValid;

    m_point_progression_isValid = ::OpenAPI::fromJsonValue(m_point_progression, json[QString("pointProgression")]);
    m_point_progression_isSet = !json[QString("pointProgression")].isNull() && m_point_progression_isValid;

    m_points_acquired_isValid = ::OpenAPI::fromJsonValue(m_points_acquired, json[QString("pointsAcquired")]);
    m_points_acquired_isSet = !json[QString("pointsAcquired")].isNull() && m_points_acquired_isValid;

    m_power_bonus_isValid = ::OpenAPI::fromJsonValue(m_power_bonus, json[QString("powerBonus")]);
    m_power_bonus_isSet = !json[QString("powerBonus")].isNull() && m_power_bonus_isValid;

    m_power_bonus_progression_isValid = ::OpenAPI::fromJsonValue(m_power_bonus_progression, json[QString("powerBonusProgression")]);
    m_power_bonus_progression_isSet = !json[QString("powerBonusProgression")].isNull() && m_power_bonus_progression_isValid;
}

QString OAIDestiny_Artifacts_DestinyArtifactProfileScoped::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Artifacts_DestinyArtifactProfileScoped::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_hash_isSet) {
        obj.insert(QString("artifactHash"), ::OpenAPI::toJsonValue(m_artifact_hash));
    }
    if (m_point_progression.isSet()) {
        obj.insert(QString("pointProgression"), ::OpenAPI::toJsonValue(m_point_progression));
    }
    if (m_points_acquired_isSet) {
        obj.insert(QString("pointsAcquired"), ::OpenAPI::toJsonValue(m_points_acquired));
    }
    if (m_power_bonus_isSet) {
        obj.insert(QString("powerBonus"), ::OpenAPI::toJsonValue(m_power_bonus));
    }
    if (m_power_bonus_progression.isSet()) {
        obj.insert(QString("powerBonusProgression"), ::OpenAPI::toJsonValue(m_power_bonus_progression));
    }
    return obj;
}

qint32 OAIDestiny_Artifacts_DestinyArtifactProfileScoped::getArtifactHash() const {
    return m_artifact_hash;
}
void OAIDestiny_Artifacts_DestinyArtifactProfileScoped::setArtifactHash(const qint32 &artifact_hash) {
    m_artifact_hash = artifact_hash;
    m_artifact_hash_isSet = true;
}

bool OAIDestiny_Artifacts_DestinyArtifactProfileScoped::is_artifact_hash_Set() const{
    return m_artifact_hash_isSet;
}

bool OAIDestiny_Artifacts_DestinyArtifactProfileScoped::is_artifact_hash_Valid() const{
    return m_artifact_hash_isValid;
}

OAIDestiny_DestinyProgression OAIDestiny_Artifacts_DestinyArtifactProfileScoped::getPointProgression() const {
    return m_point_progression;
}
void OAIDestiny_Artifacts_DestinyArtifactProfileScoped::setPointProgression(const OAIDestiny_DestinyProgression &point_progression) {
    m_point_progression = point_progression;
    m_point_progression_isSet = true;
}

bool OAIDestiny_Artifacts_DestinyArtifactProfileScoped::is_point_progression_Set() const{
    return m_point_progression_isSet;
}

bool OAIDestiny_Artifacts_DestinyArtifactProfileScoped::is_point_progression_Valid() const{
    return m_point_progression_isValid;
}

qint32 OAIDestiny_Artifacts_DestinyArtifactProfileScoped::getPointsAcquired() const {
    return m_points_acquired;
}
void OAIDestiny_Artifacts_DestinyArtifactProfileScoped::setPointsAcquired(const qint32 &points_acquired) {
    m_points_acquired = points_acquired;
    m_points_acquired_isSet = true;
}

bool OAIDestiny_Artifacts_DestinyArtifactProfileScoped::is_points_acquired_Set() const{
    return m_points_acquired_isSet;
}

bool OAIDestiny_Artifacts_DestinyArtifactProfileScoped::is_points_acquired_Valid() const{
    return m_points_acquired_isValid;
}

qint32 OAIDestiny_Artifacts_DestinyArtifactProfileScoped::getPowerBonus() const {
    return m_power_bonus;
}
void OAIDestiny_Artifacts_DestinyArtifactProfileScoped::setPowerBonus(const qint32 &power_bonus) {
    m_power_bonus = power_bonus;
    m_power_bonus_isSet = true;
}

bool OAIDestiny_Artifacts_DestinyArtifactProfileScoped::is_power_bonus_Set() const{
    return m_power_bonus_isSet;
}

bool OAIDestiny_Artifacts_DestinyArtifactProfileScoped::is_power_bonus_Valid() const{
    return m_power_bonus_isValid;
}

OAIDestiny_DestinyProgression OAIDestiny_Artifacts_DestinyArtifactProfileScoped::getPowerBonusProgression() const {
    return m_power_bonus_progression;
}
void OAIDestiny_Artifacts_DestinyArtifactProfileScoped::setPowerBonusProgression(const OAIDestiny_DestinyProgression &power_bonus_progression) {
    m_power_bonus_progression = power_bonus_progression;
    m_power_bonus_progression_isSet = true;
}

bool OAIDestiny_Artifacts_DestinyArtifactProfileScoped::is_power_bonus_progression_Set() const{
    return m_power_bonus_progression_isSet;
}

bool OAIDestiny_Artifacts_DestinyArtifactProfileScoped::is_power_bonus_progression_Valid() const{
    return m_power_bonus_progression_isValid;
}

bool OAIDestiny_Artifacts_DestinyArtifactProfileScoped::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_progression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_acquired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_bonus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_bonus_progression.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Artifacts_DestinyArtifactProfileScoped::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
