/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_DestinyUnlockStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_DestinyUnlockStatus::OAIDestiny_DestinyUnlockStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_DestinyUnlockStatus::OAIDestiny_DestinyUnlockStatus() {
    this->initializeModel();
}

OAIDestiny_DestinyUnlockStatus::~OAIDestiny_DestinyUnlockStatus() {}

void OAIDestiny_DestinyUnlockStatus::initializeModel() {

    m_is_set_isSet = false;
    m_is_set_isValid = false;

    m_unlock_hash_isSet = false;
    m_unlock_hash_isValid = false;
}

void OAIDestiny_DestinyUnlockStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_DestinyUnlockStatus::fromJsonObject(QJsonObject json) {

    m_is_set_isValid = ::OpenAPI::fromJsonValue(m_is_set, json[QString("isSet")]);
    m_is_set_isSet = !json[QString("isSet")].isNull() && m_is_set_isValid;

    m_unlock_hash_isValid = ::OpenAPI::fromJsonValue(m_unlock_hash, json[QString("unlockHash")]);
    m_unlock_hash_isSet = !json[QString("unlockHash")].isNull() && m_unlock_hash_isValid;
}

QString OAIDestiny_DestinyUnlockStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_DestinyUnlockStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_is_set_isSet) {
        obj.insert(QString("isSet"), ::OpenAPI::toJsonValue(m_is_set));
    }
    if (m_unlock_hash_isSet) {
        obj.insert(QString("unlockHash"), ::OpenAPI::toJsonValue(m_unlock_hash));
    }
    return obj;
}

bool OAIDestiny_DestinyUnlockStatus::isIsSet() const {
    return m_is_set;
}
void OAIDestiny_DestinyUnlockStatus::setIsSet(const bool &is_set) {
    m_is_set = is_set;
    m_is_set_isSet = true;
}

bool OAIDestiny_DestinyUnlockStatus::is_is_set_Set() const{
    return m_is_set_isSet;
}

bool OAIDestiny_DestinyUnlockStatus::is_is_set_Valid() const{
    return m_is_set_isValid;
}

qint32 OAIDestiny_DestinyUnlockStatus::getUnlockHash() const {
    return m_unlock_hash;
}
void OAIDestiny_DestinyUnlockStatus::setUnlockHash(const qint32 &unlock_hash) {
    m_unlock_hash = unlock_hash;
    m_unlock_hash_isSet = true;
}

bool OAIDestiny_DestinyUnlockStatus::is_unlock_hash_Set() const{
    return m_unlock_hash_isSet;
}

bool OAIDestiny_DestinyUnlockStatus::is_unlock_hash_Valid() const{
    return m_unlock_hash_isValid;
}

bool OAIDestiny_DestinyUnlockStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unlock_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_DestinyUnlockStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
