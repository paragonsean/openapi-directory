/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Character_DestinyCharacterCustomization.h
 *
 * Raw data about the customization options chosen for a character&#39;s face and appearance.  You can look up the relevant class/race/gender combo in DestinyCharacterCustomizationOptionDefinition for the character, and then look up these values within the CustomizationOptions found to pull some data about their choices. Warning: not all of that data is meaningful. Some data has useful icons. Others have nothing, and are only meant for 3D rendering purposes (which we sadly do not expose yet)
 */

#ifndef OAIDestiny_Character_DestinyCharacterCustomization_H
#define OAIDestiny_Character_DestinyCharacterCustomization_H

#include <QJsonObject>

#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDestiny_Character_DestinyCharacterCustomization : public OAIObject {
public:
    OAIDestiny_Character_DestinyCharacterCustomization();
    OAIDestiny_Character_DestinyCharacterCustomization(QString json);
    ~OAIDestiny_Character_DestinyCharacterCustomization() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDecalColor() const;
    void setDecalColor(const qint32 &decal_color);
    bool is_decal_color_Set() const;
    bool is_decal_color_Valid() const;

    qint32 getDecalIndex() const;
    void setDecalIndex(const qint32 &decal_index);
    bool is_decal_index_Set() const;
    bool is_decal_index_Valid() const;

    qint32 getEyeColor() const;
    void setEyeColor(const qint32 &eye_color);
    bool is_eye_color_Set() const;
    bool is_eye_color_Valid() const;

    qint32 getFace() const;
    void setFace(const qint32 &face);
    bool is_face_Set() const;
    bool is_face_Valid() const;

    QList<qint32> getFeatureColors() const;
    void setFeatureColors(const QList<qint32> &feature_colors);
    bool is_feature_colors_Set() const;
    bool is_feature_colors_Valid() const;

    qint32 getFeatureIndex() const;
    void setFeatureIndex(const qint32 &feature_index);
    bool is_feature_index_Set() const;
    bool is_feature_index_Valid() const;

    QList<qint32> getHairColors() const;
    void setHairColors(const QList<qint32> &hair_colors);
    bool is_hair_colors_Set() const;
    bool is_hair_colors_Valid() const;

    qint32 getHairIndex() const;
    void setHairIndex(const qint32 &hair_index);
    bool is_hair_index_Set() const;
    bool is_hair_index_Valid() const;

    qint32 getLipColor() const;
    void setLipColor(const qint32 &lip_color);
    bool is_lip_color_Set() const;
    bool is_lip_color_Valid() const;

    qint32 getPersonality() const;
    void setPersonality(const qint32 &personality);
    bool is_personality_Set() const;
    bool is_personality_Valid() const;

    qint32 getSkinColor() const;
    void setSkinColor(const qint32 &skin_color);
    bool is_skin_color_Set() const;
    bool is_skin_color_Valid() const;

    bool isWearHelmet() const;
    void setWearHelmet(const bool &wear_helmet);
    bool is_wear_helmet_Set() const;
    bool is_wear_helmet_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_decal_color;
    bool m_decal_color_isSet;
    bool m_decal_color_isValid;

    qint32 m_decal_index;
    bool m_decal_index_isSet;
    bool m_decal_index_isValid;

    qint32 m_eye_color;
    bool m_eye_color_isSet;
    bool m_eye_color_isValid;

    qint32 m_face;
    bool m_face_isSet;
    bool m_face_isValid;

    QList<qint32> m_feature_colors;
    bool m_feature_colors_isSet;
    bool m_feature_colors_isValid;

    qint32 m_feature_index;
    bool m_feature_index_isSet;
    bool m_feature_index_isValid;

    QList<qint32> m_hair_colors;
    bool m_hair_colors_isSet;
    bool m_hair_colors_isValid;

    qint32 m_hair_index;
    bool m_hair_index_isSet;
    bool m_hair_index_isValid;

    qint32 m_lip_color;
    bool m_lip_color_isSet;
    bool m_lip_color_isValid;

    qint32 m_personality;
    bool m_personality_isSet;
    bool m_personality_isValid;

    qint32 m_skin_color;
    bool m_skin_color_isSet;
    bool m_skin_color_isValid;

    bool m_wear_helmet;
    bool m_wear_helmet_isSet;
    bool m_wear_helmet_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Character_DestinyCharacterCustomization)

#endif // OAIDestiny_Character_DestinyCharacterCustomization_H
