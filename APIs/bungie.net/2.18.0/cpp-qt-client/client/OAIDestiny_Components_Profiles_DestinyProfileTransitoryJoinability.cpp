/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability::OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability::OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability() {
    this->initializeModel();
}

OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability::~OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability() {}

void OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability::initializeModel() {

    m_closed_reasons_isSet = false;
    m_closed_reasons_isValid = false;

    m_open_slots_isSet = false;
    m_open_slots_isValid = false;

    m_privacy_setting_isSet = false;
    m_privacy_setting_isValid = false;
}

void OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability::fromJsonObject(QJsonObject json) {

    m_closed_reasons_isValid = ::OpenAPI::fromJsonValue(m_closed_reasons, json[QString("closedReasons")]);
    m_closed_reasons_isSet = !json[QString("closedReasons")].isNull() && m_closed_reasons_isValid;

    m_open_slots_isValid = ::OpenAPI::fromJsonValue(m_open_slots, json[QString("openSlots")]);
    m_open_slots_isSet = !json[QString("openSlots")].isNull() && m_open_slots_isValid;

    m_privacy_setting_isValid = ::OpenAPI::fromJsonValue(m_privacy_setting, json[QString("privacySetting")]);
    m_privacy_setting_isSet = !json[QString("privacySetting")].isNull() && m_privacy_setting_isValid;
}

QString OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability::asJsonObject() const {
    QJsonObject obj;
    if (m_closed_reasons_isSet) {
        obj.insert(QString("closedReasons"), ::OpenAPI::toJsonValue(m_closed_reasons));
    }
    if (m_open_slots_isSet) {
        obj.insert(QString("openSlots"), ::OpenAPI::toJsonValue(m_open_slots));
    }
    if (m_privacy_setting_isSet) {
        obj.insert(QString("privacySetting"), ::OpenAPI::toJsonValue(m_privacy_setting));
    }
    return obj;
}

qint32 OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability::getClosedReasons() const {
    return m_closed_reasons;
}
void OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability::setClosedReasons(const qint32 &closed_reasons) {
    m_closed_reasons = closed_reasons;
    m_closed_reasons_isSet = true;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability::is_closed_reasons_Set() const{
    return m_closed_reasons_isSet;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability::is_closed_reasons_Valid() const{
    return m_closed_reasons_isValid;
}

qint32 OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability::getOpenSlots() const {
    return m_open_slots;
}
void OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability::setOpenSlots(const qint32 &open_slots) {
    m_open_slots = open_slots;
    m_open_slots_isSet = true;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability::is_open_slots_Set() const{
    return m_open_slots_isSet;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability::is_open_slots_Valid() const{
    return m_open_slots_isValid;
}

qint32 OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability::getPrivacySetting() const {
    return m_privacy_setting;
}
void OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability::setPrivacySetting(const qint32 &privacy_setting) {
    m_privacy_setting = privacy_setting;
    m_privacy_setting_isSet = true;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability::is_privacy_setting_Set() const{
    return m_privacy_setting_isSet;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability::is_privacy_setting_Valid() const{
    return m_privacy_setting_isValid;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closed_reasons_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_slots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_setting_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
