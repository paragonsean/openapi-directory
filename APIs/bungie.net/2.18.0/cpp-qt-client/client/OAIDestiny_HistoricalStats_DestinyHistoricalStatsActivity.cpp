/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity() {
    this->initializeModel();
}

OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::~OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity() {}

void OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::initializeModel() {

    m_director_activity_hash_isSet = false;
    m_director_activity_hash_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_is_private_isSet = false;
    m_is_private_isValid = false;

    m_membership_type_isSet = false;
    m_membership_type_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_modes_isSet = false;
    m_modes_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;
}

void OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::fromJsonObject(QJsonObject json) {

    m_director_activity_hash_isValid = ::OpenAPI::fromJsonValue(m_director_activity_hash, json[QString("directorActivityHash")]);
    m_director_activity_hash_isSet = !json[QString("directorActivityHash")].isNull() && m_director_activity_hash_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_is_private_isValid = ::OpenAPI::fromJsonValue(m_is_private, json[QString("isPrivate")]);
    m_is_private_isSet = !json[QString("isPrivate")].isNull() && m_is_private_isValid;

    m_membership_type_isValid = ::OpenAPI::fromJsonValue(m_membership_type, json[QString("membershipType")]);
    m_membership_type_isSet = !json[QString("membershipType")].isNull() && m_membership_type_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_modes_isValid = ::OpenAPI::fromJsonValue(m_modes, json[QString("modes")]);
    m_modes_isSet = !json[QString("modes")].isNull() && m_modes_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("referenceId")]);
    m_reference_id_isSet = !json[QString("referenceId")].isNull() && m_reference_id_isValid;
}

QString OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_director_activity_hash_isSet) {
        obj.insert(QString("directorActivityHash"), ::OpenAPI::toJsonValue(m_director_activity_hash));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_is_private_isSet) {
        obj.insert(QString("isPrivate"), ::OpenAPI::toJsonValue(m_is_private));
    }
    if (m_membership_type_isSet) {
        obj.insert(QString("membershipType"), ::OpenAPI::toJsonValue(m_membership_type));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_modes.size() > 0) {
        obj.insert(QString("modes"), ::OpenAPI::toJsonValue(m_modes));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("referenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    return obj;
}

qint32 OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::getDirectorActivityHash() const {
    return m_director_activity_hash;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::setDirectorActivityHash(const qint32 &director_activity_hash) {
    m_director_activity_hash = director_activity_hash;
    m_director_activity_hash_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::is_director_activity_hash_Set() const{
    return m_director_activity_hash_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::is_director_activity_hash_Valid() const{
    return m_director_activity_hash_isValid;
}

qint64 OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::getInstanceId() const {
    return m_instance_id;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::setInstanceId(const qint64 &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::isIsPrivate() const {
    return m_is_private;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::setIsPrivate(const bool &is_private) {
    m_is_private = is_private;
    m_is_private_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::is_is_private_Set() const{
    return m_is_private_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::is_is_private_Valid() const{
    return m_is_private_isValid;
}

qint32 OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::getMembershipType() const {
    return m_membership_type;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::setMembershipType(const qint32 &membership_type) {
    m_membership_type = membership_type;
    m_membership_type_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::is_membership_type_Set() const{
    return m_membership_type_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::is_membership_type_Valid() const{
    return m_membership_type_isValid;
}

qint32 OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::getMode() const {
    return m_mode;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::setMode(const qint32 &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::is_mode_Valid() const{
    return m_mode_isValid;
}

QList<qint32> OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::getModes() const {
    return m_modes;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::setModes(const QList<qint32> &modes) {
    m_modes = modes;
    m_modes_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::is_modes_Set() const{
    return m_modes_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::is_modes_Valid() const{
    return m_modes_isValid;
}

qint32 OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::getReferenceId() const {
    return m_reference_id;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::setReferenceId(const qint32 &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_director_activity_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
