/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContent_ContentRepresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContent_ContentRepresentation::OAIContent_ContentRepresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContent_ContentRepresentation::OAIContent_ContentRepresentation() {
    this->initializeModel();
}

OAIContent_ContentRepresentation::~OAIContent_ContentRepresentation() {}

void OAIContent_ContentRepresentation::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_validation_string_isSet = false;
    m_validation_string_isValid = false;
}

void OAIContent_ContentRepresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContent_ContentRepresentation::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_validation_string_isValid = ::OpenAPI::fromJsonValue(m_validation_string, json[QString("validationString")]);
    m_validation_string_isSet = !json[QString("validationString")].isNull() && m_validation_string_isValid;
}

QString OAIContent_ContentRepresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContent_ContentRepresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_validation_string_isSet) {
        obj.insert(QString("validationString"), ::OpenAPI::toJsonValue(m_validation_string));
    }
    return obj;
}

QString OAIContent_ContentRepresentation::getName() const {
    return m_name;
}
void OAIContent_ContentRepresentation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContent_ContentRepresentation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContent_ContentRepresentation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIContent_ContentRepresentation::getPath() const {
    return m_path;
}
void OAIContent_ContentRepresentation::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIContent_ContentRepresentation::is_path_Set() const{
    return m_path_isSet;
}

bool OAIContent_ContentRepresentation::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIContent_ContentRepresentation::getValidationString() const {
    return m_validation_string;
}
void OAIContent_ContentRepresentation::setValidationString(const QString &validation_string) {
    m_validation_string = validation_string;
    m_validation_string_isSet = true;
}

bool OAIContent_ContentRepresentation::is_validation_string_Set() const{
    return m_validation_string_isSet;
}

bool OAIContent_ContentRepresentation::is_validation_string_Valid() const{
    return m_validation_string_isValid;
}

bool OAIContent_ContentRepresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_string_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContent_ContentRepresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
