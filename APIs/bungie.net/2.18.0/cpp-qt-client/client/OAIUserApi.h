/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserApi_H
#define OAI_OAIUserApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIUser_GetAvailableThemes_200_response.h"
#include "OAIUser_GetBungieNetUserById_200_response.h"
#include "OAIUser_GetCredentialTypesForTargetAccount_200_response.h"
#include "OAIUser_GetMembershipDataById_200_response.h"
#include "OAIUser_GetMembershipFromHardLinkedCredential_200_response.h"
#include "OAIUser_SearchByGlobalNamePost_200_response.h"
#include "OAI_GetAvailableLocales_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserApi : public QObject {
    Q_OBJECT

public:
    OAIUserApi(const int timeOut = 0);
    ~OAIUserApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void user_GetAvailableThemes();

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void user_GetBungieNetUserById(const qint64 &id);

    /**
    * @param[in]  membership_id qint64 [required]
    */
    virtual void user_GetCredentialTypesForTargetAccount(const qint64 &membership_id);

    /**
    * @param[in]  membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    */
    virtual void user_GetMembershipDataById(const qint64 &membership_id, const qint32 &membership_type);


    virtual void user_GetMembershipDataForCurrentUser();

    /**
    * @param[in]  credential QString [required]
    * @param[in]  cr_type qint32 [required]
    */
    virtual void user_GetMembershipFromHardLinkedCredential(const QString &credential, const qint32 &cr_type);

    /**
    * @param[in]  membership_id qint64 [required]
    */
    virtual void user_GetSanitizedPlatformDisplayNames(const qint64 &membership_id);

    /**
    * @param[in]  page qint32 [required]
    */
    virtual void user_SearchByGlobalNamePost(const qint32 &page);

    /**
    * @param[in]  display_name_prefix QString [required]
    * @param[in]  page qint32 [required]
    */
    virtual void user_SearchByGlobalNamePrefix(const QString &display_name_prefix, const qint32 &page);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void user_GetAvailableThemesCallback(OAIHttpRequestWorker *worker);
    void user_GetBungieNetUserByIdCallback(OAIHttpRequestWorker *worker);
    void user_GetCredentialTypesForTargetAccountCallback(OAIHttpRequestWorker *worker);
    void user_GetMembershipDataByIdCallback(OAIHttpRequestWorker *worker);
    void user_GetMembershipDataForCurrentUserCallback(OAIHttpRequestWorker *worker);
    void user_GetMembershipFromHardLinkedCredentialCallback(OAIHttpRequestWorker *worker);
    void user_GetSanitizedPlatformDisplayNamesCallback(OAIHttpRequestWorker *worker);
    void user_SearchByGlobalNamePostCallback(OAIHttpRequestWorker *worker);
    void user_SearchByGlobalNamePrefixCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void user_GetAvailableThemesSignal(OAIUser_GetAvailableThemes_200_response summary);
    void user_GetBungieNetUserByIdSignal(OAIUser_GetBungieNetUserById_200_response summary);
    void user_GetCredentialTypesForTargetAccountSignal(OAIUser_GetCredentialTypesForTargetAccount_200_response summary);
    void user_GetMembershipDataByIdSignal(OAIUser_GetMembershipDataById_200_response summary);
    void user_GetMembershipDataForCurrentUserSignal(OAIUser_GetMembershipDataById_200_response summary);
    void user_GetMembershipFromHardLinkedCredentialSignal(OAIUser_GetMembershipFromHardLinkedCredential_200_response summary);
    void user_GetSanitizedPlatformDisplayNamesSignal(OAI_GetAvailableLocales_200_response summary);
    void user_SearchByGlobalNamePostSignal(OAIUser_SearchByGlobalNamePost_200_response summary);
    void user_SearchByGlobalNamePrefixSignal(OAIUser_SearchByGlobalNamePost_200_response summary);


    void user_GetAvailableThemesSignalFull(OAIHttpRequestWorker *worker, OAIUser_GetAvailableThemes_200_response summary);
    void user_GetBungieNetUserByIdSignalFull(OAIHttpRequestWorker *worker, OAIUser_GetBungieNetUserById_200_response summary);
    void user_GetCredentialTypesForTargetAccountSignalFull(OAIHttpRequestWorker *worker, OAIUser_GetCredentialTypesForTargetAccount_200_response summary);
    void user_GetMembershipDataByIdSignalFull(OAIHttpRequestWorker *worker, OAIUser_GetMembershipDataById_200_response summary);
    void user_GetMembershipDataForCurrentUserSignalFull(OAIHttpRequestWorker *worker, OAIUser_GetMembershipDataById_200_response summary);
    void user_GetMembershipFromHardLinkedCredentialSignalFull(OAIHttpRequestWorker *worker, OAIUser_GetMembershipFromHardLinkedCredential_200_response summary);
    void user_GetSanitizedPlatformDisplayNamesSignalFull(OAIHttpRequestWorker *worker, OAI_GetAvailableLocales_200_response summary);
    void user_SearchByGlobalNamePostSignalFull(OAIHttpRequestWorker *worker, OAIUser_SearchByGlobalNamePost_200_response summary);
    void user_SearchByGlobalNamePrefixSignalFull(OAIHttpRequestWorker *worker, OAIUser_SearchByGlobalNamePost_200_response summary);

    Q_DECL_DEPRECATED_X("Use user_GetAvailableThemesSignalError() instead")
    void user_GetAvailableThemesSignalE(OAIUser_GetAvailableThemes_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void user_GetAvailableThemesSignalError(OAIUser_GetAvailableThemes_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use user_GetBungieNetUserByIdSignalError() instead")
    void user_GetBungieNetUserByIdSignalE(OAIUser_GetBungieNetUserById_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void user_GetBungieNetUserByIdSignalError(OAIUser_GetBungieNetUserById_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use user_GetCredentialTypesForTargetAccountSignalError() instead")
    void user_GetCredentialTypesForTargetAccountSignalE(OAIUser_GetCredentialTypesForTargetAccount_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void user_GetCredentialTypesForTargetAccountSignalError(OAIUser_GetCredentialTypesForTargetAccount_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use user_GetMembershipDataByIdSignalError() instead")
    void user_GetMembershipDataByIdSignalE(OAIUser_GetMembershipDataById_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void user_GetMembershipDataByIdSignalError(OAIUser_GetMembershipDataById_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use user_GetMembershipDataForCurrentUserSignalError() instead")
    void user_GetMembershipDataForCurrentUserSignalE(OAIUser_GetMembershipDataById_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void user_GetMembershipDataForCurrentUserSignalError(OAIUser_GetMembershipDataById_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use user_GetMembershipFromHardLinkedCredentialSignalError() instead")
    void user_GetMembershipFromHardLinkedCredentialSignalE(OAIUser_GetMembershipFromHardLinkedCredential_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void user_GetMembershipFromHardLinkedCredentialSignalError(OAIUser_GetMembershipFromHardLinkedCredential_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use user_GetSanitizedPlatformDisplayNamesSignalError() instead")
    void user_GetSanitizedPlatformDisplayNamesSignalE(OAI_GetAvailableLocales_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void user_GetSanitizedPlatformDisplayNamesSignalError(OAI_GetAvailableLocales_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use user_SearchByGlobalNamePostSignalError() instead")
    void user_SearchByGlobalNamePostSignalE(OAIUser_SearchByGlobalNamePost_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void user_SearchByGlobalNamePostSignalError(OAIUser_SearchByGlobalNamePost_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use user_SearchByGlobalNamePrefixSignalError() instead")
    void user_SearchByGlobalNamePrefixSignalE(OAIUser_SearchByGlobalNamePost_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void user_SearchByGlobalNamePrefixSignalError(OAIUser_SearchByGlobalNamePost_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use user_GetAvailableThemesSignalErrorFull() instead")
    void user_GetAvailableThemesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void user_GetAvailableThemesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use user_GetBungieNetUserByIdSignalErrorFull() instead")
    void user_GetBungieNetUserByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void user_GetBungieNetUserByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use user_GetCredentialTypesForTargetAccountSignalErrorFull() instead")
    void user_GetCredentialTypesForTargetAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void user_GetCredentialTypesForTargetAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use user_GetMembershipDataByIdSignalErrorFull() instead")
    void user_GetMembershipDataByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void user_GetMembershipDataByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use user_GetMembershipDataForCurrentUserSignalErrorFull() instead")
    void user_GetMembershipDataForCurrentUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void user_GetMembershipDataForCurrentUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use user_GetMembershipFromHardLinkedCredentialSignalErrorFull() instead")
    void user_GetMembershipFromHardLinkedCredentialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void user_GetMembershipFromHardLinkedCredentialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use user_GetSanitizedPlatformDisplayNamesSignalErrorFull() instead")
    void user_GetSanitizedPlatformDisplayNamesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void user_GetSanitizedPlatformDisplayNamesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use user_SearchByGlobalNamePostSignalErrorFull() instead")
    void user_SearchByGlobalNamePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void user_SearchByGlobalNamePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use user_SearchByGlobalNamePrefixSignalErrorFull() instead")
    void user_SearchByGlobalNamePrefixSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void user_SearchByGlobalNamePrefixSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
