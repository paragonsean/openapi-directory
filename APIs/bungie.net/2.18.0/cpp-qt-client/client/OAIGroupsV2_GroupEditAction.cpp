/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupsV2_GroupEditAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupsV2_GroupEditAction::OAIGroupsV2_GroupEditAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupsV2_GroupEditAction::OAIGroupsV2_GroupEditAction() {
    this->initializeModel();
}

OAIGroupsV2_GroupEditAction::~OAIGroupsV2_GroupEditAction() {}

void OAIGroupsV2_GroupEditAction::initializeModel() {

    m_about_isSet = false;
    m_about_isValid = false;

    m_allow_chat_isSet = false;
    m_allow_chat_isValid = false;

    m_avatar_image_index_isSet = false;
    m_avatar_image_index_isValid = false;

    m_callsign_isSet = false;
    m_callsign_isValid = false;

    m_chat_security_isSet = false;
    m_chat_security_isValid = false;

    m_default_publicity_isSet = false;
    m_default_publicity_isValid = false;

    m_enable_invitation_messaging_for_admins_isSet = false;
    m_enable_invitation_messaging_for_admins_isValid = false;

    m_homepage_isSet = false;
    m_homepage_isValid = false;

    m_is_public_isSet = false;
    m_is_public_isValid = false;

    m_is_public_topic_admin_only_isSet = false;
    m_is_public_topic_admin_only_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_membership_option_isSet = false;
    m_membership_option_isValid = false;

    m_motto_isSet = false;
    m_motto_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_theme_isSet = false;
    m_theme_isValid = false;
}

void OAIGroupsV2_GroupEditAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupsV2_GroupEditAction::fromJsonObject(QJsonObject json) {

    m_about_isValid = ::OpenAPI::fromJsonValue(m_about, json[QString("about")]);
    m_about_isSet = !json[QString("about")].isNull() && m_about_isValid;

    m_allow_chat_isValid = ::OpenAPI::fromJsonValue(m_allow_chat, json[QString("allowChat")]);
    m_allow_chat_isSet = !json[QString("allowChat")].isNull() && m_allow_chat_isValid;

    m_avatar_image_index_isValid = ::OpenAPI::fromJsonValue(m_avatar_image_index, json[QString("avatarImageIndex")]);
    m_avatar_image_index_isSet = !json[QString("avatarImageIndex")].isNull() && m_avatar_image_index_isValid;

    m_callsign_isValid = ::OpenAPI::fromJsonValue(m_callsign, json[QString("callsign")]);
    m_callsign_isSet = !json[QString("callsign")].isNull() && m_callsign_isValid;

    m_chat_security_isValid = ::OpenAPI::fromJsonValue(m_chat_security, json[QString("chatSecurity")]);
    m_chat_security_isSet = !json[QString("chatSecurity")].isNull() && m_chat_security_isValid;

    m_default_publicity_isValid = ::OpenAPI::fromJsonValue(m_default_publicity, json[QString("defaultPublicity")]);
    m_default_publicity_isSet = !json[QString("defaultPublicity")].isNull() && m_default_publicity_isValid;

    m_enable_invitation_messaging_for_admins_isValid = ::OpenAPI::fromJsonValue(m_enable_invitation_messaging_for_admins, json[QString("enableInvitationMessagingForAdmins")]);
    m_enable_invitation_messaging_for_admins_isSet = !json[QString("enableInvitationMessagingForAdmins")].isNull() && m_enable_invitation_messaging_for_admins_isValid;

    m_homepage_isValid = ::OpenAPI::fromJsonValue(m_homepage, json[QString("homepage")]);
    m_homepage_isSet = !json[QString("homepage")].isNull() && m_homepage_isValid;

    m_is_public_isValid = ::OpenAPI::fromJsonValue(m_is_public, json[QString("isPublic")]);
    m_is_public_isSet = !json[QString("isPublic")].isNull() && m_is_public_isValid;

    m_is_public_topic_admin_only_isValid = ::OpenAPI::fromJsonValue(m_is_public_topic_admin_only, json[QString("isPublicTopicAdminOnly")]);
    m_is_public_topic_admin_only_isSet = !json[QString("isPublicTopicAdminOnly")].isNull() && m_is_public_topic_admin_only_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_membership_option_isValid = ::OpenAPI::fromJsonValue(m_membership_option, json[QString("membershipOption")]);
    m_membership_option_isSet = !json[QString("membershipOption")].isNull() && m_membership_option_isValid;

    m_motto_isValid = ::OpenAPI::fromJsonValue(m_motto, json[QString("motto")]);
    m_motto_isSet = !json[QString("motto")].isNull() && m_motto_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_theme_isValid = ::OpenAPI::fromJsonValue(m_theme, json[QString("theme")]);
    m_theme_isSet = !json[QString("theme")].isNull() && m_theme_isValid;
}

QString OAIGroupsV2_GroupEditAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupsV2_GroupEditAction::asJsonObject() const {
    QJsonObject obj;
    if (m_about_isSet) {
        obj.insert(QString("about"), ::OpenAPI::toJsonValue(m_about));
    }
    if (m_allow_chat_isSet) {
        obj.insert(QString("allowChat"), ::OpenAPI::toJsonValue(m_allow_chat));
    }
    if (m_avatar_image_index_isSet) {
        obj.insert(QString("avatarImageIndex"), ::OpenAPI::toJsonValue(m_avatar_image_index));
    }
    if (m_callsign_isSet) {
        obj.insert(QString("callsign"), ::OpenAPI::toJsonValue(m_callsign));
    }
    if (m_chat_security_isSet) {
        obj.insert(QString("chatSecurity"), ::OpenAPI::toJsonValue(m_chat_security));
    }
    if (m_default_publicity_isSet) {
        obj.insert(QString("defaultPublicity"), ::OpenAPI::toJsonValue(m_default_publicity));
    }
    if (m_enable_invitation_messaging_for_admins_isSet) {
        obj.insert(QString("enableInvitationMessagingForAdmins"), ::OpenAPI::toJsonValue(m_enable_invitation_messaging_for_admins));
    }
    if (m_homepage_isSet) {
        obj.insert(QString("homepage"), ::OpenAPI::toJsonValue(m_homepage));
    }
    if (m_is_public_isSet) {
        obj.insert(QString("isPublic"), ::OpenAPI::toJsonValue(m_is_public));
    }
    if (m_is_public_topic_admin_only_isSet) {
        obj.insert(QString("isPublicTopicAdminOnly"), ::OpenAPI::toJsonValue(m_is_public_topic_admin_only));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_membership_option_isSet) {
        obj.insert(QString("membershipOption"), ::OpenAPI::toJsonValue(m_membership_option));
    }
    if (m_motto_isSet) {
        obj.insert(QString("motto"), ::OpenAPI::toJsonValue(m_motto));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags_isSet) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_theme_isSet) {
        obj.insert(QString("theme"), ::OpenAPI::toJsonValue(m_theme));
    }
    return obj;
}

QString OAIGroupsV2_GroupEditAction::getAbout() const {
    return m_about;
}
void OAIGroupsV2_GroupEditAction::setAbout(const QString &about) {
    m_about = about;
    m_about_isSet = true;
}

bool OAIGroupsV2_GroupEditAction::is_about_Set() const{
    return m_about_isSet;
}

bool OAIGroupsV2_GroupEditAction::is_about_Valid() const{
    return m_about_isValid;
}

bool OAIGroupsV2_GroupEditAction::isAllowChat() const {
    return m_allow_chat;
}
void OAIGroupsV2_GroupEditAction::setAllowChat(const bool &allow_chat) {
    m_allow_chat = allow_chat;
    m_allow_chat_isSet = true;
}

bool OAIGroupsV2_GroupEditAction::is_allow_chat_Set() const{
    return m_allow_chat_isSet;
}

bool OAIGroupsV2_GroupEditAction::is_allow_chat_Valid() const{
    return m_allow_chat_isValid;
}

qint32 OAIGroupsV2_GroupEditAction::getAvatarImageIndex() const {
    return m_avatar_image_index;
}
void OAIGroupsV2_GroupEditAction::setAvatarImageIndex(const qint32 &avatar_image_index) {
    m_avatar_image_index = avatar_image_index;
    m_avatar_image_index_isSet = true;
}

bool OAIGroupsV2_GroupEditAction::is_avatar_image_index_Set() const{
    return m_avatar_image_index_isSet;
}

bool OAIGroupsV2_GroupEditAction::is_avatar_image_index_Valid() const{
    return m_avatar_image_index_isValid;
}

QString OAIGroupsV2_GroupEditAction::getCallsign() const {
    return m_callsign;
}
void OAIGroupsV2_GroupEditAction::setCallsign(const QString &callsign) {
    m_callsign = callsign;
    m_callsign_isSet = true;
}

bool OAIGroupsV2_GroupEditAction::is_callsign_Set() const{
    return m_callsign_isSet;
}

bool OAIGroupsV2_GroupEditAction::is_callsign_Valid() const{
    return m_callsign_isValid;
}

qint32 OAIGroupsV2_GroupEditAction::getChatSecurity() const {
    return m_chat_security;
}
void OAIGroupsV2_GroupEditAction::setChatSecurity(const qint32 &chat_security) {
    m_chat_security = chat_security;
    m_chat_security_isSet = true;
}

bool OAIGroupsV2_GroupEditAction::is_chat_security_Set() const{
    return m_chat_security_isSet;
}

bool OAIGroupsV2_GroupEditAction::is_chat_security_Valid() const{
    return m_chat_security_isValid;
}

qint32 OAIGroupsV2_GroupEditAction::getDefaultPublicity() const {
    return m_default_publicity;
}
void OAIGroupsV2_GroupEditAction::setDefaultPublicity(const qint32 &default_publicity) {
    m_default_publicity = default_publicity;
    m_default_publicity_isSet = true;
}

bool OAIGroupsV2_GroupEditAction::is_default_publicity_Set() const{
    return m_default_publicity_isSet;
}

bool OAIGroupsV2_GroupEditAction::is_default_publicity_Valid() const{
    return m_default_publicity_isValid;
}

bool OAIGroupsV2_GroupEditAction::isEnableInvitationMessagingForAdmins() const {
    return m_enable_invitation_messaging_for_admins;
}
void OAIGroupsV2_GroupEditAction::setEnableInvitationMessagingForAdmins(const bool &enable_invitation_messaging_for_admins) {
    m_enable_invitation_messaging_for_admins = enable_invitation_messaging_for_admins;
    m_enable_invitation_messaging_for_admins_isSet = true;
}

bool OAIGroupsV2_GroupEditAction::is_enable_invitation_messaging_for_admins_Set() const{
    return m_enable_invitation_messaging_for_admins_isSet;
}

bool OAIGroupsV2_GroupEditAction::is_enable_invitation_messaging_for_admins_Valid() const{
    return m_enable_invitation_messaging_for_admins_isValid;
}

qint32 OAIGroupsV2_GroupEditAction::getHomepage() const {
    return m_homepage;
}
void OAIGroupsV2_GroupEditAction::setHomepage(const qint32 &homepage) {
    m_homepage = homepage;
    m_homepage_isSet = true;
}

bool OAIGroupsV2_GroupEditAction::is_homepage_Set() const{
    return m_homepage_isSet;
}

bool OAIGroupsV2_GroupEditAction::is_homepage_Valid() const{
    return m_homepage_isValid;
}

bool OAIGroupsV2_GroupEditAction::isIsPublic() const {
    return m_is_public;
}
void OAIGroupsV2_GroupEditAction::setIsPublic(const bool &is_public) {
    m_is_public = is_public;
    m_is_public_isSet = true;
}

bool OAIGroupsV2_GroupEditAction::is_is_public_Set() const{
    return m_is_public_isSet;
}

bool OAIGroupsV2_GroupEditAction::is_is_public_Valid() const{
    return m_is_public_isValid;
}

bool OAIGroupsV2_GroupEditAction::isIsPublicTopicAdminOnly() const {
    return m_is_public_topic_admin_only;
}
void OAIGroupsV2_GroupEditAction::setIsPublicTopicAdminOnly(const bool &is_public_topic_admin_only) {
    m_is_public_topic_admin_only = is_public_topic_admin_only;
    m_is_public_topic_admin_only_isSet = true;
}

bool OAIGroupsV2_GroupEditAction::is_is_public_topic_admin_only_Set() const{
    return m_is_public_topic_admin_only_isSet;
}

bool OAIGroupsV2_GroupEditAction::is_is_public_topic_admin_only_Valid() const{
    return m_is_public_topic_admin_only_isValid;
}

QString OAIGroupsV2_GroupEditAction::getLocale() const {
    return m_locale;
}
void OAIGroupsV2_GroupEditAction::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIGroupsV2_GroupEditAction::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIGroupsV2_GroupEditAction::is_locale_Valid() const{
    return m_locale_isValid;
}

qint32 OAIGroupsV2_GroupEditAction::getMembershipOption() const {
    return m_membership_option;
}
void OAIGroupsV2_GroupEditAction::setMembershipOption(const qint32 &membership_option) {
    m_membership_option = membership_option;
    m_membership_option_isSet = true;
}

bool OAIGroupsV2_GroupEditAction::is_membership_option_Set() const{
    return m_membership_option_isSet;
}

bool OAIGroupsV2_GroupEditAction::is_membership_option_Valid() const{
    return m_membership_option_isValid;
}

QString OAIGroupsV2_GroupEditAction::getMotto() const {
    return m_motto;
}
void OAIGroupsV2_GroupEditAction::setMotto(const QString &motto) {
    m_motto = motto;
    m_motto_isSet = true;
}

bool OAIGroupsV2_GroupEditAction::is_motto_Set() const{
    return m_motto_isSet;
}

bool OAIGroupsV2_GroupEditAction::is_motto_Valid() const{
    return m_motto_isValid;
}

QString OAIGroupsV2_GroupEditAction::getName() const {
    return m_name;
}
void OAIGroupsV2_GroupEditAction::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGroupsV2_GroupEditAction::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGroupsV2_GroupEditAction::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGroupsV2_GroupEditAction::getTags() const {
    return m_tags;
}
void OAIGroupsV2_GroupEditAction::setTags(const QString &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGroupsV2_GroupEditAction::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGroupsV2_GroupEditAction::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIGroupsV2_GroupEditAction::getTheme() const {
    return m_theme;
}
void OAIGroupsV2_GroupEditAction::setTheme(const QString &theme) {
    m_theme = theme;
    m_theme_isSet = true;
}

bool OAIGroupsV2_GroupEditAction::is_theme_Set() const{
    return m_theme_isSet;
}

bool OAIGroupsV2_GroupEditAction::is_theme_Valid() const{
    return m_theme_isValid;
}

bool OAIGroupsV2_GroupEditAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_about_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_chat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_image_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callsign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_security_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_publicity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_invitation_messaging_for_admins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_homepage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_public_topic_admin_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_motto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupsV2_GroupEditAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
