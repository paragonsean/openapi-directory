/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFireteamApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIFireteamApi::OAIFireteamApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIFireteamApi::~OAIFireteamApi() {
}

void OAIFireteamApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://www.bungie.net/Platform"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("fireteam_GetActivePrivateClanFireteamCount", defaultConf);
    _serverIndices.insert("fireteam_GetActivePrivateClanFireteamCount", 0);
    _serverConfigs.insert("fireteam_GetAvailableClanFireteams", defaultConf);
    _serverIndices.insert("fireteam_GetAvailableClanFireteams", 0);
    _serverConfigs.insert("fireteam_GetClanFireteam", defaultConf);
    _serverIndices.insert("fireteam_GetClanFireteam", 0);
    _serverConfigs.insert("fireteam_GetMyClanFireteams", defaultConf);
    _serverIndices.insert("fireteam_GetMyClanFireteams", 0);
    _serverConfigs.insert("fireteam_SearchPublicAvailableClanFireteams", defaultConf);
    _serverIndices.insert("fireteam_SearchPublicAvailableClanFireteams", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIFireteamApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIFireteamApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIFireteamApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIFireteamApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIFireteamApi::setUsername(const QString &username) {
    _username = username;
}

void OAIFireteamApi::setPassword(const QString &password) {
    _password = password;
}


void OAIFireteamApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIFireteamApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIFireteamApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIFireteamApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIFireteamApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIFireteamApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIFireteamApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIFireteamApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIFireteamApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIFireteamApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIFireteamApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIFireteamApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIFireteamApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIFireteamApi::fireteam_GetActivePrivateClanFireteamCount(const qint64 &group_id) {
    QString fullPath = QString(_serverConfigs["fireteam_GetActivePrivateClanFireteamCount"][_serverIndices.value("fireteam_GetActivePrivateClanFireteamCount")].URL()+"/Fireteam/Clan/{groupId}/ActiveCount/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFireteamApi::fireteam_GetActivePrivateClanFireteamCountCallback);
    connect(this, &OAIFireteamApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("ReadGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFireteamApi::fireteam_GetActivePrivateClanFireteamCountCallback);
    connect(this, &OAIFireteamApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIFireteamApi::fireteam_GetActivePrivateClanFireteamCountCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDestiny2_EquipItem_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fireteam_GetActivePrivateClanFireteamCountSignal(output);
        Q_EMIT fireteam_GetActivePrivateClanFireteamCountSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("ReadGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fireteam_GetActivePrivateClanFireteamCountSignalE(output, error_type, error_str);
        Q_EMIT fireteam_GetActivePrivateClanFireteamCountSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fireteam_GetActivePrivateClanFireteamCountSignalError(output, error_type, error_str);
        Q_EMIT fireteam_GetActivePrivateClanFireteamCountSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFireteamApi::fireteam_GetAvailableClanFireteams(const qint32 &activity_type, const qint32 &date_range, const qint64 &group_id, const qint32 &page, const qint32 &platform, const qint32 &public_only, const qint32 &slot_filter, const ::OpenAPI::OptionalParam<bool> &exclude_immediate, const ::OpenAPI::OptionalParam<QString> &lang_filter) {
    QString fullPath = QString(_serverConfigs["fireteam_GetAvailableClanFireteams"][_serverIndices.value("fireteam_GetAvailableClanFireteams")].URL()+"/Fireteam/Clan/{groupId}/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{publicOnly}/{page}/");
    
    
    {
        QString activity_typePathParam("{");
        activity_typePathParam.append("activityType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "activityType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"activityType"+pathSuffix : pathPrefix;
        fullPath.replace(activity_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(activity_type)));
    }
    
    {
        QString date_rangePathParam("{");
        date_rangePathParam.append("dateRange").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateRange", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateRange"+pathSuffix : pathPrefix;
        fullPath.replace(date_rangePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_range)));
    }
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    
    {
        QString pagePathParam("{");
        pagePathParam.append("page").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "page", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"page"+pathSuffix : pathPrefix;
        fullPath.replace(pagePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page)));
    }
    
    {
        QString platformPathParam("{");
        platformPathParam.append("platform").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "platform", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"platform"+pathSuffix : pathPrefix;
        fullPath.replace(platformPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(platform)));
    }
    
    {
        QString public_onlyPathParam("{");
        public_onlyPathParam.append("publicOnly").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "publicOnly", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"publicOnly"+pathSuffix : pathPrefix;
        fullPath.replace(public_onlyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(public_only)));
    }
    
    {
        QString slot_filterPathParam("{");
        slot_filterPathParam.append("slotFilter").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "slotFilter", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"slotFilter"+pathSuffix : pathPrefix;
        fullPath.replace(slot_filterPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(slot_filter)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (exclude_immediate.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "excludeImmediate", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("excludeImmediate")).append(querySuffix).append(QUrl::toPercentEncoding(exclude_immediate.stringValue()));
    }
    if (lang_filter.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "langFilter", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("langFilter")).append(querySuffix).append(QUrl::toPercentEncoding(lang_filter.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFireteamApi::fireteam_GetAvailableClanFireteamsCallback);
    connect(this, &OAIFireteamApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("ReadGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFireteamApi::fireteam_GetAvailableClanFireteamsCallback);
    connect(this, &OAIFireteamApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIFireteamApi::fireteam_GetAvailableClanFireteamsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFireteam_GetAvailableClanFireteams_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fireteam_GetAvailableClanFireteamsSignal(output);
        Q_EMIT fireteam_GetAvailableClanFireteamsSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("ReadGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fireteam_GetAvailableClanFireteamsSignalE(output, error_type, error_str);
        Q_EMIT fireteam_GetAvailableClanFireteamsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fireteam_GetAvailableClanFireteamsSignalError(output, error_type, error_str);
        Q_EMIT fireteam_GetAvailableClanFireteamsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFireteamApi::fireteam_GetClanFireteam(const qint64 &fireteam_id, const qint64 &group_id) {
    QString fullPath = QString(_serverConfigs["fireteam_GetClanFireteam"][_serverIndices.value("fireteam_GetClanFireteam")].URL()+"/Fireteam/Clan/{groupId}/Summary/{fireteamId}/");
    
    
    {
        QString fireteam_idPathParam("{");
        fireteam_idPathParam.append("fireteamId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "fireteamId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"fireteamId"+pathSuffix : pathPrefix;
        fullPath.replace(fireteam_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(fireteam_id)));
    }
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFireteamApi::fireteam_GetClanFireteamCallback);
    connect(this, &OAIFireteamApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("ReadGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFireteamApi::fireteam_GetClanFireteamCallback);
    connect(this, &OAIFireteamApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIFireteamApi::fireteam_GetClanFireteamCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFireteam_GetClanFireteam_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fireteam_GetClanFireteamSignal(output);
        Q_EMIT fireteam_GetClanFireteamSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("ReadGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fireteam_GetClanFireteamSignalE(output, error_type, error_str);
        Q_EMIT fireteam_GetClanFireteamSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fireteam_GetClanFireteamSignalError(output, error_type, error_str);
        Q_EMIT fireteam_GetClanFireteamSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFireteamApi::fireteam_GetMyClanFireteams(const qint64 &group_id, const bool &include_closed, const qint32 &page, const qint32 &platform, const ::OpenAPI::OptionalParam<bool> &group_filter, const ::OpenAPI::OptionalParam<QString> &lang_filter) {
    QString fullPath = QString(_serverConfigs["fireteam_GetMyClanFireteams"][_serverIndices.value("fireteam_GetMyClanFireteams")].URL()+"/Fireteam/Clan/{groupId}/My/{platform}/{includeClosed}/{page}/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    
    {
        QString include_closedPathParam("{");
        include_closedPathParam.append("includeClosed").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "includeClosed", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"includeClosed"+pathSuffix : pathPrefix;
        fullPath.replace(include_closedPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(include_closed)));
    }
    
    {
        QString pagePathParam("{");
        pagePathParam.append("page").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "page", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"page"+pathSuffix : pathPrefix;
        fullPath.replace(pagePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page)));
    }
    
    {
        QString platformPathParam("{");
        platformPathParam.append("platform").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "platform", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"platform"+pathSuffix : pathPrefix;
        fullPath.replace(platformPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(platform)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (group_filter.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "groupFilter", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("groupFilter")).append(querySuffix).append(QUrl::toPercentEncoding(group_filter.stringValue()));
    }
    if (lang_filter.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "langFilter", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("langFilter")).append(querySuffix).append(QUrl::toPercentEncoding(lang_filter.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFireteamApi::fireteam_GetMyClanFireteamsCallback);
    connect(this, &OAIFireteamApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("ReadGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFireteamApi::fireteam_GetMyClanFireteamsCallback);
    connect(this, &OAIFireteamApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIFireteamApi::fireteam_GetMyClanFireteamsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFireteam_GetMyClanFireteams_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fireteam_GetMyClanFireteamsSignal(output);
        Q_EMIT fireteam_GetMyClanFireteamsSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("ReadGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fireteam_GetMyClanFireteamsSignalE(output, error_type, error_str);
        Q_EMIT fireteam_GetMyClanFireteamsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fireteam_GetMyClanFireteamsSignalError(output, error_type, error_str);
        Q_EMIT fireteam_GetMyClanFireteamsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFireteamApi::fireteam_SearchPublicAvailableClanFireteams(const qint32 &activity_type, const qint32 &date_range, const qint32 &page, const qint32 &platform, const qint32 &slot_filter, const ::OpenAPI::OptionalParam<bool> &exclude_immediate, const ::OpenAPI::OptionalParam<QString> &lang_filter) {
    QString fullPath = QString(_serverConfigs["fireteam_SearchPublicAvailableClanFireteams"][_serverIndices.value("fireteam_SearchPublicAvailableClanFireteams")].URL()+"/Fireteam/Search/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{page}/");
    
    
    {
        QString activity_typePathParam("{");
        activity_typePathParam.append("activityType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "activityType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"activityType"+pathSuffix : pathPrefix;
        fullPath.replace(activity_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(activity_type)));
    }
    
    {
        QString date_rangePathParam("{");
        date_rangePathParam.append("dateRange").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dateRange", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dateRange"+pathSuffix : pathPrefix;
        fullPath.replace(date_rangePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date_range)));
    }
    
    {
        QString pagePathParam("{");
        pagePathParam.append("page").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "page", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"page"+pathSuffix : pathPrefix;
        fullPath.replace(pagePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page)));
    }
    
    {
        QString platformPathParam("{");
        platformPathParam.append("platform").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "platform", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"platform"+pathSuffix : pathPrefix;
        fullPath.replace(platformPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(platform)));
    }
    
    {
        QString slot_filterPathParam("{");
        slot_filterPathParam.append("slotFilter").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "slotFilter", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"slotFilter"+pathSuffix : pathPrefix;
        fullPath.replace(slot_filterPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(slot_filter)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (exclude_immediate.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "excludeImmediate", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("excludeImmediate")).append(querySuffix).append(QUrl::toPercentEncoding(exclude_immediate.stringValue()));
    }
    if (lang_filter.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "langFilter", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("langFilter")).append(querySuffix).append(QUrl::toPercentEncoding(lang_filter.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFireteamApi::fireteam_SearchPublicAvailableClanFireteamsCallback);
    connect(this, &OAIFireteamApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("ReadGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFireteamApi::fireteam_SearchPublicAvailableClanFireteamsCallback);
    connect(this, &OAIFireteamApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIFireteamApi::fireteam_SearchPublicAvailableClanFireteamsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFireteam_GetAvailableClanFireteams_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fireteam_SearchPublicAvailableClanFireteamsSignal(output);
        Q_EMIT fireteam_SearchPublicAvailableClanFireteamsSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("ReadGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fireteam_SearchPublicAvailableClanFireteamsSignalE(output, error_type, error_str);
        Q_EMIT fireteam_SearchPublicAvailableClanFireteamsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fireteam_SearchPublicAvailableClanFireteamsSignalError(output, error_type, error_str);
        Q_EMIT fireteam_SearchPublicAvailableClanFireteamsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFireteamApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
