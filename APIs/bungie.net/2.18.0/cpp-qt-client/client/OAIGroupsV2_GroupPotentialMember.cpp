/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupsV2_GroupPotentialMember.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupsV2_GroupPotentialMember::OAIGroupsV2_GroupPotentialMember(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupsV2_GroupPotentialMember::OAIGroupsV2_GroupPotentialMember() {
    this->initializeModel();
}

OAIGroupsV2_GroupPotentialMember::~OAIGroupsV2_GroupPotentialMember() {}

void OAIGroupsV2_GroupPotentialMember::initializeModel() {

    m_bungie_net_user_info_isSet = false;
    m_bungie_net_user_info_isValid = false;

    m_destiny_user_info_isSet = false;
    m_destiny_user_info_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_join_date_isSet = false;
    m_join_date_isValid = false;

    m_potential_status_isSet = false;
    m_potential_status_isValid = false;
}

void OAIGroupsV2_GroupPotentialMember::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupsV2_GroupPotentialMember::fromJsonObject(QJsonObject json) {

    m_bungie_net_user_info_isValid = ::OpenAPI::fromJsonValue(m_bungie_net_user_info, json[QString("bungieNetUserInfo")]);
    m_bungie_net_user_info_isSet = !json[QString("bungieNetUserInfo")].isNull() && m_bungie_net_user_info_isValid;

    m_destiny_user_info_isValid = ::OpenAPI::fromJsonValue(m_destiny_user_info, json[QString("destinyUserInfo")]);
    m_destiny_user_info_isSet = !json[QString("destinyUserInfo")].isNull() && m_destiny_user_info_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
    m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;

    m_join_date_isValid = ::OpenAPI::fromJsonValue(m_join_date, json[QString("joinDate")]);
    m_join_date_isSet = !json[QString("joinDate")].isNull() && m_join_date_isValid;

    m_potential_status_isValid = ::OpenAPI::fromJsonValue(m_potential_status, json[QString("potentialStatus")]);
    m_potential_status_isSet = !json[QString("potentialStatus")].isNull() && m_potential_status_isValid;
}

QString OAIGroupsV2_GroupPotentialMember::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupsV2_GroupPotentialMember::asJsonObject() const {
    QJsonObject obj;
    if (m_bungie_net_user_info.isSet()) {
        obj.insert(QString("bungieNetUserInfo"), ::OpenAPI::toJsonValue(m_bungie_net_user_info));
    }
    if (m_destiny_user_info.isSet()) {
        obj.insert(QString("destinyUserInfo"), ::OpenAPI::toJsonValue(m_destiny_user_info));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_join_date_isSet) {
        obj.insert(QString("joinDate"), ::OpenAPI::toJsonValue(m_join_date));
    }
    if (m_potential_status_isSet) {
        obj.insert(QString("potentialStatus"), ::OpenAPI::toJsonValue(m_potential_status));
    }
    return obj;
}

OAIUser_UserInfoCard OAIGroupsV2_GroupPotentialMember::getBungieNetUserInfo() const {
    return m_bungie_net_user_info;
}
void OAIGroupsV2_GroupPotentialMember::setBungieNetUserInfo(const OAIUser_UserInfoCard &bungie_net_user_info) {
    m_bungie_net_user_info = bungie_net_user_info;
    m_bungie_net_user_info_isSet = true;
}

bool OAIGroupsV2_GroupPotentialMember::is_bungie_net_user_info_Set() const{
    return m_bungie_net_user_info_isSet;
}

bool OAIGroupsV2_GroupPotentialMember::is_bungie_net_user_info_Valid() const{
    return m_bungie_net_user_info_isValid;
}

OAIGroupsV2_GroupUserInfoCard OAIGroupsV2_GroupPotentialMember::getDestinyUserInfo() const {
    return m_destiny_user_info;
}
void OAIGroupsV2_GroupPotentialMember::setDestinyUserInfo(const OAIGroupsV2_GroupUserInfoCard &destiny_user_info) {
    m_destiny_user_info = destiny_user_info;
    m_destiny_user_info_isSet = true;
}

bool OAIGroupsV2_GroupPotentialMember::is_destiny_user_info_Set() const{
    return m_destiny_user_info_isSet;
}

bool OAIGroupsV2_GroupPotentialMember::is_destiny_user_info_Valid() const{
    return m_destiny_user_info_isValid;
}

qint64 OAIGroupsV2_GroupPotentialMember::getGroupId() const {
    return m_group_id;
}
void OAIGroupsV2_GroupPotentialMember::setGroupId(const qint64 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIGroupsV2_GroupPotentialMember::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIGroupsV2_GroupPotentialMember::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QDateTime OAIGroupsV2_GroupPotentialMember::getJoinDate() const {
    return m_join_date;
}
void OAIGroupsV2_GroupPotentialMember::setJoinDate(const QDateTime &join_date) {
    m_join_date = join_date;
    m_join_date_isSet = true;
}

bool OAIGroupsV2_GroupPotentialMember::is_join_date_Set() const{
    return m_join_date_isSet;
}

bool OAIGroupsV2_GroupPotentialMember::is_join_date_Valid() const{
    return m_join_date_isValid;
}

qint32 OAIGroupsV2_GroupPotentialMember::getPotentialStatus() const {
    return m_potential_status;
}
void OAIGroupsV2_GroupPotentialMember::setPotentialStatus(const qint32 &potential_status) {
    m_potential_status = potential_status;
    m_potential_status_isSet = true;
}

bool OAIGroupsV2_GroupPotentialMember::is_potential_status_Set() const{
    return m_potential_status_isSet;
}

bool OAIGroupsV2_GroupPotentialMember::is_potential_status_Valid() const{
    return m_potential_status_isValid;
}

bool OAIGroupsV2_GroupPotentialMember::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bungie_net_user_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destiny_user_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_join_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_potential_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupsV2_GroupPotentialMember::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
