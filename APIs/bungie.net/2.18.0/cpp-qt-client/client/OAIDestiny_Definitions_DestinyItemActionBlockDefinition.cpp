/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyItemActionBlockDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyItemActionBlockDefinition::OAIDestiny_Definitions_DestinyItemActionBlockDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyItemActionBlockDefinition::OAIDestiny_Definitions_DestinyItemActionBlockDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyItemActionBlockDefinition::~OAIDestiny_Definitions_DestinyItemActionBlockDefinition() {}

void OAIDestiny_Definitions_DestinyItemActionBlockDefinition::initializeModel() {

    m_action_type_label_isSet = false;
    m_action_type_label_isValid = false;

    m_consume_entire_stack_isSet = false;
    m_consume_entire_stack_isValid = false;

    m_delete_on_action_isSet = false;
    m_delete_on_action_isValid = false;

    m_is_positive_isSet = false;
    m_is_positive_isValid = false;

    m_overlay_icon_isSet = false;
    m_overlay_icon_isValid = false;

    m_overlay_screen_name_isSet = false;
    m_overlay_screen_name_isValid = false;

    m_progression_rewards_isSet = false;
    m_progression_rewards_isValid = false;

    m_required_cooldown_hash_isSet = false;
    m_required_cooldown_hash_isValid = false;

    m_required_cooldown_seconds_isSet = false;
    m_required_cooldown_seconds_isValid = false;

    m_required_items_isSet = false;
    m_required_items_isValid = false;

    m_required_location_isSet = false;
    m_required_location_isValid = false;

    m_use_on_acquire_isSet = false;
    m_use_on_acquire_isValid = false;

    m_verb_description_isSet = false;
    m_verb_description_isValid = false;

    m_verb_name_isSet = false;
    m_verb_name_isValid = false;
}

void OAIDestiny_Definitions_DestinyItemActionBlockDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyItemActionBlockDefinition::fromJsonObject(QJsonObject json) {

    m_action_type_label_isValid = ::OpenAPI::fromJsonValue(m_action_type_label, json[QString("actionTypeLabel")]);
    m_action_type_label_isSet = !json[QString("actionTypeLabel")].isNull() && m_action_type_label_isValid;

    m_consume_entire_stack_isValid = ::OpenAPI::fromJsonValue(m_consume_entire_stack, json[QString("consumeEntireStack")]);
    m_consume_entire_stack_isSet = !json[QString("consumeEntireStack")].isNull() && m_consume_entire_stack_isValid;

    m_delete_on_action_isValid = ::OpenAPI::fromJsonValue(m_delete_on_action, json[QString("deleteOnAction")]);
    m_delete_on_action_isSet = !json[QString("deleteOnAction")].isNull() && m_delete_on_action_isValid;

    m_is_positive_isValid = ::OpenAPI::fromJsonValue(m_is_positive, json[QString("isPositive")]);
    m_is_positive_isSet = !json[QString("isPositive")].isNull() && m_is_positive_isValid;

    m_overlay_icon_isValid = ::OpenAPI::fromJsonValue(m_overlay_icon, json[QString("overlayIcon")]);
    m_overlay_icon_isSet = !json[QString("overlayIcon")].isNull() && m_overlay_icon_isValid;

    m_overlay_screen_name_isValid = ::OpenAPI::fromJsonValue(m_overlay_screen_name, json[QString("overlayScreenName")]);
    m_overlay_screen_name_isSet = !json[QString("overlayScreenName")].isNull() && m_overlay_screen_name_isValid;

    m_progression_rewards_isValid = ::OpenAPI::fromJsonValue(m_progression_rewards, json[QString("progressionRewards")]);
    m_progression_rewards_isSet = !json[QString("progressionRewards")].isNull() && m_progression_rewards_isValid;

    m_required_cooldown_hash_isValid = ::OpenAPI::fromJsonValue(m_required_cooldown_hash, json[QString("requiredCooldownHash")]);
    m_required_cooldown_hash_isSet = !json[QString("requiredCooldownHash")].isNull() && m_required_cooldown_hash_isValid;

    m_required_cooldown_seconds_isValid = ::OpenAPI::fromJsonValue(m_required_cooldown_seconds, json[QString("requiredCooldownSeconds")]);
    m_required_cooldown_seconds_isSet = !json[QString("requiredCooldownSeconds")].isNull() && m_required_cooldown_seconds_isValid;

    m_required_items_isValid = ::OpenAPI::fromJsonValue(m_required_items, json[QString("requiredItems")]);
    m_required_items_isSet = !json[QString("requiredItems")].isNull() && m_required_items_isValid;

    m_required_location_isValid = ::OpenAPI::fromJsonValue(m_required_location, json[QString("requiredLocation")]);
    m_required_location_isSet = !json[QString("requiredLocation")].isNull() && m_required_location_isValid;

    m_use_on_acquire_isValid = ::OpenAPI::fromJsonValue(m_use_on_acquire, json[QString("useOnAcquire")]);
    m_use_on_acquire_isSet = !json[QString("useOnAcquire")].isNull() && m_use_on_acquire_isValid;

    m_verb_description_isValid = ::OpenAPI::fromJsonValue(m_verb_description, json[QString("verbDescription")]);
    m_verb_description_isSet = !json[QString("verbDescription")].isNull() && m_verb_description_isValid;

    m_verb_name_isValid = ::OpenAPI::fromJsonValue(m_verb_name, json[QString("verbName")]);
    m_verb_name_isSet = !json[QString("verbName")].isNull() && m_verb_name_isValid;
}

QString OAIDestiny_Definitions_DestinyItemActionBlockDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyItemActionBlockDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_action_type_label_isSet) {
        obj.insert(QString("actionTypeLabel"), ::OpenAPI::toJsonValue(m_action_type_label));
    }
    if (m_consume_entire_stack_isSet) {
        obj.insert(QString("consumeEntireStack"), ::OpenAPI::toJsonValue(m_consume_entire_stack));
    }
    if (m_delete_on_action_isSet) {
        obj.insert(QString("deleteOnAction"), ::OpenAPI::toJsonValue(m_delete_on_action));
    }
    if (m_is_positive_isSet) {
        obj.insert(QString("isPositive"), ::OpenAPI::toJsonValue(m_is_positive));
    }
    if (m_overlay_icon_isSet) {
        obj.insert(QString("overlayIcon"), ::OpenAPI::toJsonValue(m_overlay_icon));
    }
    if (m_overlay_screen_name_isSet) {
        obj.insert(QString("overlayScreenName"), ::OpenAPI::toJsonValue(m_overlay_screen_name));
    }
    if (m_progression_rewards.size() > 0) {
        obj.insert(QString("progressionRewards"), ::OpenAPI::toJsonValue(m_progression_rewards));
    }
    if (m_required_cooldown_hash_isSet) {
        obj.insert(QString("requiredCooldownHash"), ::OpenAPI::toJsonValue(m_required_cooldown_hash));
    }
    if (m_required_cooldown_seconds_isSet) {
        obj.insert(QString("requiredCooldownSeconds"), ::OpenAPI::toJsonValue(m_required_cooldown_seconds));
    }
    if (m_required_items.size() > 0) {
        obj.insert(QString("requiredItems"), ::OpenAPI::toJsonValue(m_required_items));
    }
    if (m_required_location_isSet) {
        obj.insert(QString("requiredLocation"), ::OpenAPI::toJsonValue(m_required_location));
    }
    if (m_use_on_acquire_isSet) {
        obj.insert(QString("useOnAcquire"), ::OpenAPI::toJsonValue(m_use_on_acquire));
    }
    if (m_verb_description_isSet) {
        obj.insert(QString("verbDescription"), ::OpenAPI::toJsonValue(m_verb_description));
    }
    if (m_verb_name_isSet) {
        obj.insert(QString("verbName"), ::OpenAPI::toJsonValue(m_verb_name));
    }
    return obj;
}

QString OAIDestiny_Definitions_DestinyItemActionBlockDefinition::getActionTypeLabel() const {
    return m_action_type_label;
}
void OAIDestiny_Definitions_DestinyItemActionBlockDefinition::setActionTypeLabel(const QString &action_type_label) {
    m_action_type_label = action_type_label;
    m_action_type_label_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_action_type_label_Set() const{
    return m_action_type_label_isSet;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_action_type_label_Valid() const{
    return m_action_type_label_isValid;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::isConsumeEntireStack() const {
    return m_consume_entire_stack;
}
void OAIDestiny_Definitions_DestinyItemActionBlockDefinition::setConsumeEntireStack(const bool &consume_entire_stack) {
    m_consume_entire_stack = consume_entire_stack;
    m_consume_entire_stack_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_consume_entire_stack_Set() const{
    return m_consume_entire_stack_isSet;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_consume_entire_stack_Valid() const{
    return m_consume_entire_stack_isValid;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::isDeleteOnAction() const {
    return m_delete_on_action;
}
void OAIDestiny_Definitions_DestinyItemActionBlockDefinition::setDeleteOnAction(const bool &delete_on_action) {
    m_delete_on_action = delete_on_action;
    m_delete_on_action_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_delete_on_action_Set() const{
    return m_delete_on_action_isSet;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_delete_on_action_Valid() const{
    return m_delete_on_action_isValid;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::isIsPositive() const {
    return m_is_positive;
}
void OAIDestiny_Definitions_DestinyItemActionBlockDefinition::setIsPositive(const bool &is_positive) {
    m_is_positive = is_positive;
    m_is_positive_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_is_positive_Set() const{
    return m_is_positive_isSet;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_is_positive_Valid() const{
    return m_is_positive_isValid;
}

QString OAIDestiny_Definitions_DestinyItemActionBlockDefinition::getOverlayIcon() const {
    return m_overlay_icon;
}
void OAIDestiny_Definitions_DestinyItemActionBlockDefinition::setOverlayIcon(const QString &overlay_icon) {
    m_overlay_icon = overlay_icon;
    m_overlay_icon_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_overlay_icon_Set() const{
    return m_overlay_icon_isSet;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_overlay_icon_Valid() const{
    return m_overlay_icon_isValid;
}

QString OAIDestiny_Definitions_DestinyItemActionBlockDefinition::getOverlayScreenName() const {
    return m_overlay_screen_name;
}
void OAIDestiny_Definitions_DestinyItemActionBlockDefinition::setOverlayScreenName(const QString &overlay_screen_name) {
    m_overlay_screen_name = overlay_screen_name;
    m_overlay_screen_name_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_overlay_screen_name_Set() const{
    return m_overlay_screen_name_isSet;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_overlay_screen_name_Valid() const{
    return m_overlay_screen_name_isValid;
}

QList<OAIDestiny_Definitions_DestinyProgressionRewardDefinition> OAIDestiny_Definitions_DestinyItemActionBlockDefinition::getProgressionRewards() const {
    return m_progression_rewards;
}
void OAIDestiny_Definitions_DestinyItemActionBlockDefinition::setProgressionRewards(const QList<OAIDestiny_Definitions_DestinyProgressionRewardDefinition> &progression_rewards) {
    m_progression_rewards = progression_rewards;
    m_progression_rewards_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_progression_rewards_Set() const{
    return m_progression_rewards_isSet;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_progression_rewards_Valid() const{
    return m_progression_rewards_isValid;
}

qint32 OAIDestiny_Definitions_DestinyItemActionBlockDefinition::getRequiredCooldownHash() const {
    return m_required_cooldown_hash;
}
void OAIDestiny_Definitions_DestinyItemActionBlockDefinition::setRequiredCooldownHash(const qint32 &required_cooldown_hash) {
    m_required_cooldown_hash = required_cooldown_hash;
    m_required_cooldown_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_required_cooldown_hash_Set() const{
    return m_required_cooldown_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_required_cooldown_hash_Valid() const{
    return m_required_cooldown_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyItemActionBlockDefinition::getRequiredCooldownSeconds() const {
    return m_required_cooldown_seconds;
}
void OAIDestiny_Definitions_DestinyItemActionBlockDefinition::setRequiredCooldownSeconds(const qint32 &required_cooldown_seconds) {
    m_required_cooldown_seconds = required_cooldown_seconds;
    m_required_cooldown_seconds_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_required_cooldown_seconds_Set() const{
    return m_required_cooldown_seconds_isSet;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_required_cooldown_seconds_Valid() const{
    return m_required_cooldown_seconds_isValid;
}

QList<OAIDestiny_Definitions_DestinyItemActionRequiredItemDefinition> OAIDestiny_Definitions_DestinyItemActionBlockDefinition::getRequiredItems() const {
    return m_required_items;
}
void OAIDestiny_Definitions_DestinyItemActionBlockDefinition::setRequiredItems(const QList<OAIDestiny_Definitions_DestinyItemActionRequiredItemDefinition> &required_items) {
    m_required_items = required_items;
    m_required_items_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_required_items_Set() const{
    return m_required_items_isSet;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_required_items_Valid() const{
    return m_required_items_isValid;
}

QString OAIDestiny_Definitions_DestinyItemActionBlockDefinition::getRequiredLocation() const {
    return m_required_location;
}
void OAIDestiny_Definitions_DestinyItemActionBlockDefinition::setRequiredLocation(const QString &required_location) {
    m_required_location = required_location;
    m_required_location_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_required_location_Set() const{
    return m_required_location_isSet;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_required_location_Valid() const{
    return m_required_location_isValid;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::isUseOnAcquire() const {
    return m_use_on_acquire;
}
void OAIDestiny_Definitions_DestinyItemActionBlockDefinition::setUseOnAcquire(const bool &use_on_acquire) {
    m_use_on_acquire = use_on_acquire;
    m_use_on_acquire_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_use_on_acquire_Set() const{
    return m_use_on_acquire_isSet;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_use_on_acquire_Valid() const{
    return m_use_on_acquire_isValid;
}

QString OAIDestiny_Definitions_DestinyItemActionBlockDefinition::getVerbDescription() const {
    return m_verb_description;
}
void OAIDestiny_Definitions_DestinyItemActionBlockDefinition::setVerbDescription(const QString &verb_description) {
    m_verb_description = verb_description;
    m_verb_description_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_verb_description_Set() const{
    return m_verb_description_isSet;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_verb_description_Valid() const{
    return m_verb_description_isValid;
}

QString OAIDestiny_Definitions_DestinyItemActionBlockDefinition::getVerbName() const {
    return m_verb_name;
}
void OAIDestiny_Definitions_DestinyItemActionBlockDefinition::setVerbName(const QString &verb_name) {
    m_verb_name = verb_name;
    m_verb_name_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_verb_name_Set() const{
    return m_verb_name_isSet;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::is_verb_name_Valid() const{
    return m_verb_name_isValid;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_type_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consume_entire_stack_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_on_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_positive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overlay_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overlay_screen_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progression_rewards.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_cooldown_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_cooldown_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_on_acquire_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verb_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verb_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyItemActionBlockDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
