/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_Items_DestinyItemPlugDefinition.h
 *
 * If an item is a Plug, its DestinyInventoryItemDefinition.plug property will be populated with an instance of one of these bad boys.  This gives information about when it can be inserted, what the plug&#39;s category is (and thus whether it is compatible with a socket... see DestinySocketTypeDefinition for information about Plug Categories and socket compatibility), whether it is enabled and other Plug info.
 */

#ifndef OAIDestiny_Definitions_Items_DestinyItemPlugDefinition_H
#define OAIDestiny_Definitions_Items_DestinyItemPlugDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_Items_DestinyEnergyCapacityEntry.h"
#include "OAIDestiny_Definitions_Items_DestinyEnergyCostEntry.h"
#include "OAIDestiny_Definitions_Items_DestinyParentItemOverride.h"
#include "OAIDestiny_Definitions_Items_DestinyPlugRuleDefinition.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_Items_DestinyPlugRuleDefinition;
class OAIDestiny_Definitions_Items_DestinyEnergyCapacityEntry;
class OAIDestiny_Definitions_Items_DestinyEnergyCostEntry;
class OAIDestiny_Definitions_Items_DestinyParentItemOverride;

class OAIDestiny_Definitions_Items_DestinyItemPlugDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_Items_DestinyItemPlugDefinition();
    OAIDestiny_Definitions_Items_DestinyItemPlugDefinition(QString json);
    ~OAIDestiny_Definitions_Items_DestinyItemPlugDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAlternatePlugStyle() const;
    void setAlternatePlugStyle(const qint32 &alternate_plug_style);
    bool is_alternate_plug_style_Set() const;
    bool is_alternate_plug_style_Valid() const;

    QString getAlternateUiPlugLabel() const;
    void setAlternateUiPlugLabel(const QString &alternate_ui_plug_label);
    bool is_alternate_ui_plug_label_Set() const;
    bool is_alternate_ui_plug_label_Valid() const;

    qint32 getEnabledMaterialRequirementHash() const;
    void setEnabledMaterialRequirementHash(const qint32 &enabled_material_requirement_hash);
    bool is_enabled_material_requirement_hash_Set() const;
    bool is_enabled_material_requirement_hash_Valid() const;

    QList<OAIDestiny_Definitions_Items_DestinyPlugRuleDefinition> getEnabledRules() const;
    void setEnabledRules(const QList<OAIDestiny_Definitions_Items_DestinyPlugRuleDefinition> &enabled_rules);
    bool is_enabled_rules_Set() const;
    bool is_enabled_rules_Valid() const;

    OAIDestiny_Definitions_Items_DestinyEnergyCapacityEntry getEnergyCapacity() const;
    void setEnergyCapacity(const OAIDestiny_Definitions_Items_DestinyEnergyCapacityEntry &energy_capacity);
    bool is_energy_capacity_Set() const;
    bool is_energy_capacity_Valid() const;

    OAIDestiny_Definitions_Items_DestinyEnergyCostEntry getEnergyCost() const;
    void setEnergyCost(const OAIDestiny_Definitions_Items_DestinyEnergyCostEntry &energy_cost);
    bool is_energy_cost_Set() const;
    bool is_energy_cost_Valid() const;

    qint32 getInsertionMaterialRequirementHash() const;
    void setInsertionMaterialRequirementHash(const qint32 &insertion_material_requirement_hash);
    bool is_insertion_material_requirement_hash_Set() const;
    bool is_insertion_material_requirement_hash_Valid() const;

    QList<OAIDestiny_Definitions_Items_DestinyPlugRuleDefinition> getInsertionRules() const;
    void setInsertionRules(const QList<OAIDestiny_Definitions_Items_DestinyPlugRuleDefinition> &insertion_rules);
    bool is_insertion_rules_Set() const;
    bool is_insertion_rules_Valid() const;

    bool isIsDummyPlug() const;
    void setIsDummyPlug(const bool &is_dummy_plug);
    bool is_is_dummy_plug_Set() const;
    bool is_is_dummy_plug_Valid() const;

    bool isOnActionRecreateSelf() const;
    void setOnActionRecreateSelf(const bool &on_action_recreate_self);
    bool is_on_action_recreate_self_Set() const;
    bool is_on_action_recreate_self_Valid() const;

    OAIDestiny_Definitions_Items_DestinyParentItemOverride getParentItemOverride() const;
    void setParentItemOverride(const OAIDestiny_Definitions_Items_DestinyParentItemOverride &parent_item_override);
    bool is_parent_item_override_Set() const;
    bool is_parent_item_override_Valid() const;

    qint32 getPlugAvailability() const;
    void setPlugAvailability(const qint32 &plug_availability);
    bool is_plug_availability_Set() const;
    bool is_plug_availability_Valid() const;

    qint32 getPlugCategoryHash() const;
    void setPlugCategoryHash(const qint32 &plug_category_hash);
    bool is_plug_category_hash_Set() const;
    bool is_plug_category_hash_Valid() const;

    QString getPlugCategoryIdentifier() const;
    void setPlugCategoryIdentifier(const QString &plug_category_identifier);
    bool is_plug_category_identifier_Set() const;
    bool is_plug_category_identifier_Valid() const;

    qint32 getPlugStyle() const;
    void setPlugStyle(const qint32 &plug_style);
    bool is_plug_style_Set() const;
    bool is_plug_style_Valid() const;

    qint32 getPreviewItemOverrideHash() const;
    void setPreviewItemOverrideHash(const qint32 &preview_item_override_hash);
    bool is_preview_item_override_hash_Set() const;
    bool is_preview_item_override_hash_Valid() const;

    QString getUiPlugLabel() const;
    void setUiPlugLabel(const QString &ui_plug_label);
    bool is_ui_plug_label_Set() const;
    bool is_ui_plug_label_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_alternate_plug_style;
    bool m_alternate_plug_style_isSet;
    bool m_alternate_plug_style_isValid;

    QString m_alternate_ui_plug_label;
    bool m_alternate_ui_plug_label_isSet;
    bool m_alternate_ui_plug_label_isValid;

    qint32 m_enabled_material_requirement_hash;
    bool m_enabled_material_requirement_hash_isSet;
    bool m_enabled_material_requirement_hash_isValid;

    QList<OAIDestiny_Definitions_Items_DestinyPlugRuleDefinition> m_enabled_rules;
    bool m_enabled_rules_isSet;
    bool m_enabled_rules_isValid;

    OAIDestiny_Definitions_Items_DestinyEnergyCapacityEntry m_energy_capacity;
    bool m_energy_capacity_isSet;
    bool m_energy_capacity_isValid;

    OAIDestiny_Definitions_Items_DestinyEnergyCostEntry m_energy_cost;
    bool m_energy_cost_isSet;
    bool m_energy_cost_isValid;

    qint32 m_insertion_material_requirement_hash;
    bool m_insertion_material_requirement_hash_isSet;
    bool m_insertion_material_requirement_hash_isValid;

    QList<OAIDestiny_Definitions_Items_DestinyPlugRuleDefinition> m_insertion_rules;
    bool m_insertion_rules_isSet;
    bool m_insertion_rules_isValid;

    bool m_is_dummy_plug;
    bool m_is_dummy_plug_isSet;
    bool m_is_dummy_plug_isValid;

    bool m_on_action_recreate_self;
    bool m_on_action_recreate_self_isSet;
    bool m_on_action_recreate_self_isValid;

    OAIDestiny_Definitions_Items_DestinyParentItemOverride m_parent_item_override;
    bool m_parent_item_override_isSet;
    bool m_parent_item_override_isValid;

    qint32 m_plug_availability;
    bool m_plug_availability_isSet;
    bool m_plug_availability_isValid;

    qint32 m_plug_category_hash;
    bool m_plug_category_hash_isSet;
    bool m_plug_category_hash_isValid;

    QString m_plug_category_identifier;
    bool m_plug_category_identifier_isSet;
    bool m_plug_category_identifier_isValid;

    qint32 m_plug_style;
    bool m_plug_style_isSet;
    bool m_plug_style_isValid;

    qint32 m_preview_item_override_hash;
    bool m_preview_item_override_hash_isSet;
    bool m_preview_item_override_hash_isValid;

    QString m_ui_plug_label;
    bool m_ui_plug_label_isSet;
    bool m_ui_plug_label_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_Items_DestinyItemPlugDefinition)

#endif // OAIDestiny_Definitions_Items_DestinyItemPlugDefinition_H
