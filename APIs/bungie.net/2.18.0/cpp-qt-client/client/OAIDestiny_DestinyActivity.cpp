/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_DestinyActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_DestinyActivity::OAIDestiny_DestinyActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_DestinyActivity::OAIDestiny_DestinyActivity() {
    this->initializeModel();
}

OAIDestiny_DestinyActivity::~OAIDestiny_DestinyActivity() {}

void OAIDestiny_DestinyActivity::initializeModel() {

    m_activity_hash_isSet = false;
    m_activity_hash_isValid = false;

    m_boolean_activity_options_isSet = false;
    m_boolean_activity_options_isValid = false;

    m_can_join_isSet = false;
    m_can_join_isValid = false;

    m_can_lead_isSet = false;
    m_can_lead_isValid = false;

    m_challenges_isSet = false;
    m_challenges_isValid = false;

    m_difficulty_tier_isSet = false;
    m_difficulty_tier_isValid = false;

    m_display_level_isSet = false;
    m_display_level_isValid = false;

    m_is_completed_isSet = false;
    m_is_completed_isValid = false;

    m_is_new_isSet = false;
    m_is_new_isValid = false;

    m_is_visible_isSet = false;
    m_is_visible_isValid = false;

    m_loadout_requirement_index_isSet = false;
    m_loadout_requirement_index_isValid = false;

    m_modifier_hashes_isSet = false;
    m_modifier_hashes_isValid = false;

    m_recommended_light_isSet = false;
    m_recommended_light_isValid = false;
}

void OAIDestiny_DestinyActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_DestinyActivity::fromJsonObject(QJsonObject json) {

    m_activity_hash_isValid = ::OpenAPI::fromJsonValue(m_activity_hash, json[QString("activityHash")]);
    m_activity_hash_isSet = !json[QString("activityHash")].isNull() && m_activity_hash_isValid;

    m_boolean_activity_options_isValid = ::OpenAPI::fromJsonValue(m_boolean_activity_options, json[QString("booleanActivityOptions")]);
    m_boolean_activity_options_isSet = !json[QString("booleanActivityOptions")].isNull() && m_boolean_activity_options_isValid;

    m_can_join_isValid = ::OpenAPI::fromJsonValue(m_can_join, json[QString("canJoin")]);
    m_can_join_isSet = !json[QString("canJoin")].isNull() && m_can_join_isValid;

    m_can_lead_isValid = ::OpenAPI::fromJsonValue(m_can_lead, json[QString("canLead")]);
    m_can_lead_isSet = !json[QString("canLead")].isNull() && m_can_lead_isValid;

    m_challenges_isValid = ::OpenAPI::fromJsonValue(m_challenges, json[QString("challenges")]);
    m_challenges_isSet = !json[QString("challenges")].isNull() && m_challenges_isValid;

    m_difficulty_tier_isValid = ::OpenAPI::fromJsonValue(m_difficulty_tier, json[QString("difficultyTier")]);
    m_difficulty_tier_isSet = !json[QString("difficultyTier")].isNull() && m_difficulty_tier_isValid;

    m_display_level_isValid = ::OpenAPI::fromJsonValue(m_display_level, json[QString("displayLevel")]);
    m_display_level_isSet = !json[QString("displayLevel")].isNull() && m_display_level_isValid;

    m_is_completed_isValid = ::OpenAPI::fromJsonValue(m_is_completed, json[QString("isCompleted")]);
    m_is_completed_isSet = !json[QString("isCompleted")].isNull() && m_is_completed_isValid;

    m_is_new_isValid = ::OpenAPI::fromJsonValue(m_is_new, json[QString("isNew")]);
    m_is_new_isSet = !json[QString("isNew")].isNull() && m_is_new_isValid;

    m_is_visible_isValid = ::OpenAPI::fromJsonValue(m_is_visible, json[QString("isVisible")]);
    m_is_visible_isSet = !json[QString("isVisible")].isNull() && m_is_visible_isValid;

    m_loadout_requirement_index_isValid = ::OpenAPI::fromJsonValue(m_loadout_requirement_index, json[QString("loadoutRequirementIndex")]);
    m_loadout_requirement_index_isSet = !json[QString("loadoutRequirementIndex")].isNull() && m_loadout_requirement_index_isValid;

    m_modifier_hashes_isValid = ::OpenAPI::fromJsonValue(m_modifier_hashes, json[QString("modifierHashes")]);
    m_modifier_hashes_isSet = !json[QString("modifierHashes")].isNull() && m_modifier_hashes_isValid;

    m_recommended_light_isValid = ::OpenAPI::fromJsonValue(m_recommended_light, json[QString("recommendedLight")]);
    m_recommended_light_isSet = !json[QString("recommendedLight")].isNull() && m_recommended_light_isValid;
}

QString OAIDestiny_DestinyActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_DestinyActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_hash_isSet) {
        obj.insert(QString("activityHash"), ::OpenAPI::toJsonValue(m_activity_hash));
    }
    if (m_boolean_activity_options.size() > 0) {
        obj.insert(QString("booleanActivityOptions"), ::OpenAPI::toJsonValue(m_boolean_activity_options));
    }
    if (m_can_join_isSet) {
        obj.insert(QString("canJoin"), ::OpenAPI::toJsonValue(m_can_join));
    }
    if (m_can_lead_isSet) {
        obj.insert(QString("canLead"), ::OpenAPI::toJsonValue(m_can_lead));
    }
    if (m_challenges.size() > 0) {
        obj.insert(QString("challenges"), ::OpenAPI::toJsonValue(m_challenges));
    }
    if (m_difficulty_tier_isSet) {
        obj.insert(QString("difficultyTier"), ::OpenAPI::toJsonValue(m_difficulty_tier));
    }
    if (m_display_level_isSet) {
        obj.insert(QString("displayLevel"), ::OpenAPI::toJsonValue(m_display_level));
    }
    if (m_is_completed_isSet) {
        obj.insert(QString("isCompleted"), ::OpenAPI::toJsonValue(m_is_completed));
    }
    if (m_is_new_isSet) {
        obj.insert(QString("isNew"), ::OpenAPI::toJsonValue(m_is_new));
    }
    if (m_is_visible_isSet) {
        obj.insert(QString("isVisible"), ::OpenAPI::toJsonValue(m_is_visible));
    }
    if (m_loadout_requirement_index_isSet) {
        obj.insert(QString("loadoutRequirementIndex"), ::OpenAPI::toJsonValue(m_loadout_requirement_index));
    }
    if (m_modifier_hashes.size() > 0) {
        obj.insert(QString("modifierHashes"), ::OpenAPI::toJsonValue(m_modifier_hashes));
    }
    if (m_recommended_light_isSet) {
        obj.insert(QString("recommendedLight"), ::OpenAPI::toJsonValue(m_recommended_light));
    }
    return obj;
}

qint32 OAIDestiny_DestinyActivity::getActivityHash() const {
    return m_activity_hash;
}
void OAIDestiny_DestinyActivity::setActivityHash(const qint32 &activity_hash) {
    m_activity_hash = activity_hash;
    m_activity_hash_isSet = true;
}

bool OAIDestiny_DestinyActivity::is_activity_hash_Set() const{
    return m_activity_hash_isSet;
}

bool OAIDestiny_DestinyActivity::is_activity_hash_Valid() const{
    return m_activity_hash_isValid;
}

QMap<QString, bool> OAIDestiny_DestinyActivity::getBooleanActivityOptions() const {
    return m_boolean_activity_options;
}
void OAIDestiny_DestinyActivity::setBooleanActivityOptions(const QMap<QString, bool> &boolean_activity_options) {
    m_boolean_activity_options = boolean_activity_options;
    m_boolean_activity_options_isSet = true;
}

bool OAIDestiny_DestinyActivity::is_boolean_activity_options_Set() const{
    return m_boolean_activity_options_isSet;
}

bool OAIDestiny_DestinyActivity::is_boolean_activity_options_Valid() const{
    return m_boolean_activity_options_isValid;
}

bool OAIDestiny_DestinyActivity::isCanJoin() const {
    return m_can_join;
}
void OAIDestiny_DestinyActivity::setCanJoin(const bool &can_join) {
    m_can_join = can_join;
    m_can_join_isSet = true;
}

bool OAIDestiny_DestinyActivity::is_can_join_Set() const{
    return m_can_join_isSet;
}

bool OAIDestiny_DestinyActivity::is_can_join_Valid() const{
    return m_can_join_isValid;
}

bool OAIDestiny_DestinyActivity::isCanLead() const {
    return m_can_lead;
}
void OAIDestiny_DestinyActivity::setCanLead(const bool &can_lead) {
    m_can_lead = can_lead;
    m_can_lead_isSet = true;
}

bool OAIDestiny_DestinyActivity::is_can_lead_Set() const{
    return m_can_lead_isSet;
}

bool OAIDestiny_DestinyActivity::is_can_lead_Valid() const{
    return m_can_lead_isValid;
}

QList<OAIDestiny_Challenges_DestinyChallengeStatus> OAIDestiny_DestinyActivity::getChallenges() const {
    return m_challenges;
}
void OAIDestiny_DestinyActivity::setChallenges(const QList<OAIDestiny_Challenges_DestinyChallengeStatus> &challenges) {
    m_challenges = challenges;
    m_challenges_isSet = true;
}

bool OAIDestiny_DestinyActivity::is_challenges_Set() const{
    return m_challenges_isSet;
}

bool OAIDestiny_DestinyActivity::is_challenges_Valid() const{
    return m_challenges_isValid;
}

qint32 OAIDestiny_DestinyActivity::getDifficultyTier() const {
    return m_difficulty_tier;
}
void OAIDestiny_DestinyActivity::setDifficultyTier(const qint32 &difficulty_tier) {
    m_difficulty_tier = difficulty_tier;
    m_difficulty_tier_isSet = true;
}

bool OAIDestiny_DestinyActivity::is_difficulty_tier_Set() const{
    return m_difficulty_tier_isSet;
}

bool OAIDestiny_DestinyActivity::is_difficulty_tier_Valid() const{
    return m_difficulty_tier_isValid;
}

qint32 OAIDestiny_DestinyActivity::getDisplayLevel() const {
    return m_display_level;
}
void OAIDestiny_DestinyActivity::setDisplayLevel(const qint32 &display_level) {
    m_display_level = display_level;
    m_display_level_isSet = true;
}

bool OAIDestiny_DestinyActivity::is_display_level_Set() const{
    return m_display_level_isSet;
}

bool OAIDestiny_DestinyActivity::is_display_level_Valid() const{
    return m_display_level_isValid;
}

bool OAIDestiny_DestinyActivity::isIsCompleted() const {
    return m_is_completed;
}
void OAIDestiny_DestinyActivity::setIsCompleted(const bool &is_completed) {
    m_is_completed = is_completed;
    m_is_completed_isSet = true;
}

bool OAIDestiny_DestinyActivity::is_is_completed_Set() const{
    return m_is_completed_isSet;
}

bool OAIDestiny_DestinyActivity::is_is_completed_Valid() const{
    return m_is_completed_isValid;
}

bool OAIDestiny_DestinyActivity::isIsNew() const {
    return m_is_new;
}
void OAIDestiny_DestinyActivity::setIsNew(const bool &is_new) {
    m_is_new = is_new;
    m_is_new_isSet = true;
}

bool OAIDestiny_DestinyActivity::is_is_new_Set() const{
    return m_is_new_isSet;
}

bool OAIDestiny_DestinyActivity::is_is_new_Valid() const{
    return m_is_new_isValid;
}

bool OAIDestiny_DestinyActivity::isIsVisible() const {
    return m_is_visible;
}
void OAIDestiny_DestinyActivity::setIsVisible(const bool &is_visible) {
    m_is_visible = is_visible;
    m_is_visible_isSet = true;
}

bool OAIDestiny_DestinyActivity::is_is_visible_Set() const{
    return m_is_visible_isSet;
}

bool OAIDestiny_DestinyActivity::is_is_visible_Valid() const{
    return m_is_visible_isValid;
}

qint32 OAIDestiny_DestinyActivity::getLoadoutRequirementIndex() const {
    return m_loadout_requirement_index;
}
void OAIDestiny_DestinyActivity::setLoadoutRequirementIndex(const qint32 &loadout_requirement_index) {
    m_loadout_requirement_index = loadout_requirement_index;
    m_loadout_requirement_index_isSet = true;
}

bool OAIDestiny_DestinyActivity::is_loadout_requirement_index_Set() const{
    return m_loadout_requirement_index_isSet;
}

bool OAIDestiny_DestinyActivity::is_loadout_requirement_index_Valid() const{
    return m_loadout_requirement_index_isValid;
}

QList<qint32> OAIDestiny_DestinyActivity::getModifierHashes() const {
    return m_modifier_hashes;
}
void OAIDestiny_DestinyActivity::setModifierHashes(const QList<qint32> &modifier_hashes) {
    m_modifier_hashes = modifier_hashes;
    m_modifier_hashes_isSet = true;
}

bool OAIDestiny_DestinyActivity::is_modifier_hashes_Set() const{
    return m_modifier_hashes_isSet;
}

bool OAIDestiny_DestinyActivity::is_modifier_hashes_Valid() const{
    return m_modifier_hashes_isValid;
}

qint32 OAIDestiny_DestinyActivity::getRecommendedLight() const {
    return m_recommended_light;
}
void OAIDestiny_DestinyActivity::setRecommendedLight(const qint32 &recommended_light) {
    m_recommended_light = recommended_light;
    m_recommended_light_isSet = true;
}

bool OAIDestiny_DestinyActivity::is_recommended_light_Set() const{
    return m_recommended_light_isSet;
}

bool OAIDestiny_DestinyActivity::is_recommended_light_Valid() const{
    return m_recommended_light_isValid;
}

bool OAIDestiny_DestinyActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boolean_activity_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_join_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_lead_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_challenges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_difficulty_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_new_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_visible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loadout_requirement_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modifier_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_light_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_DestinyActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
