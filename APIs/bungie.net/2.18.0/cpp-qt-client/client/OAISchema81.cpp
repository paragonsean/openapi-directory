/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchema81.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchema81::OAISchema81(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchema81::OAISchema81() {
    this->initializeModel();
}

OAISchema81::~OAISchema81() {}

void OAISchema81::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISchema81::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISchema81::fromJson(QString jsonString) {
    
    if ( jsonString.compare(QString::number(0), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema81::_0;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(1), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema81::_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(2), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema81::_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(3), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema81::_3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(4), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema81::_4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(5), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema81::_5;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(6), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema81::_6;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(7), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema81::_7;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(8), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema81::_8;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(9), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema81::_9;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(10), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema81::_10;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(11), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema81::_11;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISchema81::fromJsonValue(QJsonValue json) {
m_value = static_cast<eOAISchema81>(json.toInt());
}

QString OAISchema81::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISchema81::_0:
            val = QString::number(0);
            break;
        case eOAISchema81::_1:
            val = QString::number(1);
            break;
        case eOAISchema81::_2:
            val = QString::number(2);
            break;
        case eOAISchema81::_3:
            val = QString::number(3);
            break;
        case eOAISchema81::_4:
            val = QString::number(4);
            break;
        case eOAISchema81::_5:
            val = QString::number(5);
            break;
        case eOAISchema81::_6:
            val = QString::number(6);
            break;
        case eOAISchema81::_7:
            val = QString::number(7);
            break;
        case eOAISchema81::_8:
            val = QString::number(8);
            break;
        case eOAISchema81::_9:
            val = QString::number(9);
            break;
        case eOAISchema81::_10:
            val = QString::number(10);
            break;
        case eOAISchema81::_11:
            val = QString::number(11);
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISchema81::asJsonValue() const {
    
    return QJsonValue(static_cast<int>(m_value));
}


OAISchema81::eOAISchema81 OAISchema81::getValue() const {
    return m_value;
}

void OAISchema81::setValue(const OAISchema81::eOAISchema81& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISchema81::isSet() const {
    
    return m_value_isSet;
}

bool OAISchema81::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
