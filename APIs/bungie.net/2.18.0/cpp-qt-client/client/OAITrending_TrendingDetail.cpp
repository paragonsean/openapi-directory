/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrending_TrendingDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrending_TrendingDetail::OAITrending_TrendingDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrending_TrendingDetail::OAITrending_TrendingDetail() {
    this->initializeModel();
}

OAITrending_TrendingDetail::~OAITrending_TrendingDetail() {}

void OAITrending_TrendingDetail::initializeModel() {

    m_creation_isSet = false;
    m_creation_isValid = false;

    m_destiny_activity_isSet = false;
    m_destiny_activity_isValid = false;

    m_destiny_item_isSet = false;
    m_destiny_item_isValid = false;

    m_destiny_ritual_isSet = false;
    m_destiny_ritual_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_news_isSet = false;
    m_news_isValid = false;

    m_support_isSet = false;
    m_support_isValid = false;
}

void OAITrending_TrendingDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrending_TrendingDetail::fromJsonObject(QJsonObject json) {

    m_creation_isValid = ::OpenAPI::fromJsonValue(m_creation, json[QString("creation")]);
    m_creation_isSet = !json[QString("creation")].isNull() && m_creation_isValid;

    m_destiny_activity_isValid = ::OpenAPI::fromJsonValue(m_destiny_activity, json[QString("destinyActivity")]);
    m_destiny_activity_isSet = !json[QString("destinyActivity")].isNull() && m_destiny_activity_isValid;

    m_destiny_item_isValid = ::OpenAPI::fromJsonValue(m_destiny_item, json[QString("destinyItem")]);
    m_destiny_item_isSet = !json[QString("destinyItem")].isNull() && m_destiny_item_isValid;

    m_destiny_ritual_isValid = ::OpenAPI::fromJsonValue(m_destiny_ritual, json[QString("destinyRitual")]);
    m_destiny_ritual_isSet = !json[QString("destinyRitual")].isNull() && m_destiny_ritual_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_news_isValid = ::OpenAPI::fromJsonValue(m_news, json[QString("news")]);
    m_news_isSet = !json[QString("news")].isNull() && m_news_isValid;

    m_support_isValid = ::OpenAPI::fromJsonValue(m_support, json[QString("support")]);
    m_support_isSet = !json[QString("support")].isNull() && m_support_isValid;
}

QString OAITrending_TrendingDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrending_TrendingDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_creation.isSet()) {
        obj.insert(QString("creation"), ::OpenAPI::toJsonValue(m_creation));
    }
    if (m_destiny_activity.isSet()) {
        obj.insert(QString("destinyActivity"), ::OpenAPI::toJsonValue(m_destiny_activity));
    }
    if (m_destiny_item.isSet()) {
        obj.insert(QString("destinyItem"), ::OpenAPI::toJsonValue(m_destiny_item));
    }
    if (m_destiny_ritual.isSet()) {
        obj.insert(QString("destinyRitual"), ::OpenAPI::toJsonValue(m_destiny_ritual));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_news.isSet()) {
        obj.insert(QString("news"), ::OpenAPI::toJsonValue(m_news));
    }
    if (m_support.isSet()) {
        obj.insert(QString("support"), ::OpenAPI::toJsonValue(m_support));
    }
    return obj;
}

OAITrending_TrendingEntryCommunityCreation OAITrending_TrendingDetail::getCreation() const {
    return m_creation;
}
void OAITrending_TrendingDetail::setCreation(const OAITrending_TrendingEntryCommunityCreation &creation) {
    m_creation = creation;
    m_creation_isSet = true;
}

bool OAITrending_TrendingDetail::is_creation_Set() const{
    return m_creation_isSet;
}

bool OAITrending_TrendingDetail::is_creation_Valid() const{
    return m_creation_isValid;
}

OAITrending_TrendingEntryDestinyActivity OAITrending_TrendingDetail::getDestinyActivity() const {
    return m_destiny_activity;
}
void OAITrending_TrendingDetail::setDestinyActivity(const OAITrending_TrendingEntryDestinyActivity &destiny_activity) {
    m_destiny_activity = destiny_activity;
    m_destiny_activity_isSet = true;
}

bool OAITrending_TrendingDetail::is_destiny_activity_Set() const{
    return m_destiny_activity_isSet;
}

bool OAITrending_TrendingDetail::is_destiny_activity_Valid() const{
    return m_destiny_activity_isValid;
}

OAITrending_TrendingEntryDestinyItem OAITrending_TrendingDetail::getDestinyItem() const {
    return m_destiny_item;
}
void OAITrending_TrendingDetail::setDestinyItem(const OAITrending_TrendingEntryDestinyItem &destiny_item) {
    m_destiny_item = destiny_item;
    m_destiny_item_isSet = true;
}

bool OAITrending_TrendingDetail::is_destiny_item_Set() const{
    return m_destiny_item_isSet;
}

bool OAITrending_TrendingDetail::is_destiny_item_Valid() const{
    return m_destiny_item_isValid;
}

OAITrending_TrendingEntryDestinyRitual OAITrending_TrendingDetail::getDestinyRitual() const {
    return m_destiny_ritual;
}
void OAITrending_TrendingDetail::setDestinyRitual(const OAITrending_TrendingEntryDestinyRitual &destiny_ritual) {
    m_destiny_ritual = destiny_ritual;
    m_destiny_ritual_isSet = true;
}

bool OAITrending_TrendingDetail::is_destiny_ritual_Set() const{
    return m_destiny_ritual_isSet;
}

bool OAITrending_TrendingDetail::is_destiny_ritual_Valid() const{
    return m_destiny_ritual_isValid;
}

qint32 OAITrending_TrendingDetail::getEntityType() const {
    return m_entity_type;
}
void OAITrending_TrendingDetail::setEntityType(const qint32 &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAITrending_TrendingDetail::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAITrending_TrendingDetail::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAITrending_TrendingDetail::getIdentifier() const {
    return m_identifier;
}
void OAITrending_TrendingDetail::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAITrending_TrendingDetail::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAITrending_TrendingDetail::is_identifier_Valid() const{
    return m_identifier_isValid;
}

OAITrending_TrendingEntryNews OAITrending_TrendingDetail::getNews() const {
    return m_news;
}
void OAITrending_TrendingDetail::setNews(const OAITrending_TrendingEntryNews &news) {
    m_news = news;
    m_news_isSet = true;
}

bool OAITrending_TrendingDetail::is_news_Set() const{
    return m_news_isSet;
}

bool OAITrending_TrendingDetail::is_news_Valid() const{
    return m_news_isValid;
}

OAITrending_TrendingEntrySupportArticle OAITrending_TrendingDetail::getSupport() const {
    return m_support;
}
void OAITrending_TrendingDetail::setSupport(const OAITrending_TrendingEntrySupportArticle &support) {
    m_support = support;
    m_support_isSet = true;
}

bool OAITrending_TrendingDetail::is_support_Set() const{
    return m_support_isSet;
}

bool OAITrending_TrendingDetail::is_support_Valid() const{
    return m_support_isValid;
}

bool OAITrending_TrendingDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destiny_activity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destiny_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destiny_ritual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_news.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_support.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrending_TrendingDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
