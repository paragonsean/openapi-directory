/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::~OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition() {}

void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::initializeModel() {

    m_activities_isSet = false;
    m_activities_isValid = false;

    m_default_order_isSet = false;
    m_default_order_isValid = false;

    m_display_preference_isSet = false;
    m_display_preference_isValid = false;

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_explore_prioritizes_activity_image_isSet = false;
    m_explore_prioritizes_activity_image_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_has_predictable_dates_isSet = false;
    m_has_predictable_dates_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_is_in_game_milestone_isSet = false;
    m_is_in_game_milestone_isValid = false;

    m_milestone_type_isSet = false;
    m_milestone_type_isValid = false;

    m_quests_isSet = false;
    m_quests_isValid = false;

    m_recruitable_isSet = false;
    m_recruitable_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;

    m_rewards_isSet = false;
    m_rewards_isValid = false;

    m_show_in_explorer_isSet = false;
    m_show_in_explorer_isValid = false;

    m_show_in_milestones_isSet = false;
    m_show_in_milestones_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_vendors_isSet = false;
    m_vendors_isValid = false;

    m_vendors_display_title_isSet = false;
    m_vendors_display_title_isValid = false;
}

void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::fromJsonObject(QJsonObject json) {

    m_activities_isValid = ::OpenAPI::fromJsonValue(m_activities, json[QString("activities")]);
    m_activities_isSet = !json[QString("activities")].isNull() && m_activities_isValid;

    m_default_order_isValid = ::OpenAPI::fromJsonValue(m_default_order, json[QString("defaultOrder")]);
    m_default_order_isSet = !json[QString("defaultOrder")].isNull() && m_default_order_isValid;

    m_display_preference_isValid = ::OpenAPI::fromJsonValue(m_display_preference, json[QString("displayPreference")]);
    m_display_preference_isSet = !json[QString("displayPreference")].isNull() && m_display_preference_isValid;

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_explore_prioritizes_activity_image_isValid = ::OpenAPI::fromJsonValue(m_explore_prioritizes_activity_image, json[QString("explorePrioritizesActivityImage")]);
    m_explore_prioritizes_activity_image_isSet = !json[QString("explorePrioritizesActivityImage")].isNull() && m_explore_prioritizes_activity_image_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_has_predictable_dates_isValid = ::OpenAPI::fromJsonValue(m_has_predictable_dates, json[QString("hasPredictableDates")]);
    m_has_predictable_dates_isSet = !json[QString("hasPredictableDates")].isNull() && m_has_predictable_dates_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_is_in_game_milestone_isValid = ::OpenAPI::fromJsonValue(m_is_in_game_milestone, json[QString("isInGameMilestone")]);
    m_is_in_game_milestone_isSet = !json[QString("isInGameMilestone")].isNull() && m_is_in_game_milestone_isValid;

    m_milestone_type_isValid = ::OpenAPI::fromJsonValue(m_milestone_type, json[QString("milestoneType")]);
    m_milestone_type_isSet = !json[QString("milestoneType")].isNull() && m_milestone_type_isValid;

    m_quests_isValid = ::OpenAPI::fromJsonValue(m_quests, json[QString("quests")]);
    m_quests_isSet = !json[QString("quests")].isNull() && m_quests_isValid;

    m_recruitable_isValid = ::OpenAPI::fromJsonValue(m_recruitable, json[QString("recruitable")]);
    m_recruitable_isSet = !json[QString("recruitable")].isNull() && m_recruitable_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;

    m_rewards_isValid = ::OpenAPI::fromJsonValue(m_rewards, json[QString("rewards")]);
    m_rewards_isSet = !json[QString("rewards")].isNull() && m_rewards_isValid;

    m_show_in_explorer_isValid = ::OpenAPI::fromJsonValue(m_show_in_explorer, json[QString("showInExplorer")]);
    m_show_in_explorer_isSet = !json[QString("showInExplorer")].isNull() && m_show_in_explorer_isValid;

    m_show_in_milestones_isValid = ::OpenAPI::fromJsonValue(m_show_in_milestones, json[QString("showInMilestones")]);
    m_show_in_milestones_isSet = !json[QString("showInMilestones")].isNull() && m_show_in_milestones_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;

    m_vendors_isValid = ::OpenAPI::fromJsonValue(m_vendors, json[QString("vendors")]);
    m_vendors_isSet = !json[QString("vendors")].isNull() && m_vendors_isValid;

    m_vendors_display_title_isValid = ::OpenAPI::fromJsonValue(m_vendors_display_title, json[QString("vendorsDisplayTitle")]);
    m_vendors_display_title_isSet = !json[QString("vendorsDisplayTitle")].isNull() && m_vendors_display_title_isValid;
}

QString OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_activities.size() > 0) {
        obj.insert(QString("activities"), ::OpenAPI::toJsonValue(m_activities));
    }
    if (m_default_order_isSet) {
        obj.insert(QString("defaultOrder"), ::OpenAPI::toJsonValue(m_default_order));
    }
    if (m_display_preference_isSet) {
        obj.insert(QString("displayPreference"), ::OpenAPI::toJsonValue(m_display_preference));
    }
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_explore_prioritizes_activity_image_isSet) {
        obj.insert(QString("explorePrioritizesActivityImage"), ::OpenAPI::toJsonValue(m_explore_prioritizes_activity_image));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_has_predictable_dates_isSet) {
        obj.insert(QString("hasPredictableDates"), ::OpenAPI::toJsonValue(m_has_predictable_dates));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_is_in_game_milestone_isSet) {
        obj.insert(QString("isInGameMilestone"), ::OpenAPI::toJsonValue(m_is_in_game_milestone));
    }
    if (m_milestone_type_isSet) {
        obj.insert(QString("milestoneType"), ::OpenAPI::toJsonValue(m_milestone_type));
    }
    if (m_quests.size() > 0) {
        obj.insert(QString("quests"), ::OpenAPI::toJsonValue(m_quests));
    }
    if (m_recruitable_isSet) {
        obj.insert(QString("recruitable"), ::OpenAPI::toJsonValue(m_recruitable));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    if (m_rewards.size() > 0) {
        obj.insert(QString("rewards"), ::OpenAPI::toJsonValue(m_rewards));
    }
    if (m_show_in_explorer_isSet) {
        obj.insert(QString("showInExplorer"), ::OpenAPI::toJsonValue(m_show_in_explorer));
    }
    if (m_show_in_milestones_isSet) {
        obj.insert(QString("showInMilestones"), ::OpenAPI::toJsonValue(m_show_in_milestones));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_vendors.size() > 0) {
        obj.insert(QString("vendors"), ::OpenAPI::toJsonValue(m_vendors));
    }
    if (m_vendors_display_title_isSet) {
        obj.insert(QString("vendorsDisplayTitle"), ::OpenAPI::toJsonValue(m_vendors_display_title));
    }
    return obj;
}

QList<OAIDestiny_Definitions_Milestones_DestinyMilestoneChallengeActivityDefinition> OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::getActivities() const {
    return m_activities;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::setActivities(const QList<OAIDestiny_Definitions_Milestones_DestinyMilestoneChallengeActivityDefinition> &activities) {
    m_activities = activities;
    m_activities_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_activities_Set() const{
    return m_activities_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_activities_Valid() const{
    return m_activities_isValid;
}

qint32 OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::getDefaultOrder() const {
    return m_default_order;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::setDefaultOrder(const qint32 &default_order) {
    m_default_order = default_order;
    m_default_order_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_default_order_Set() const{
    return m_default_order_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_default_order_Valid() const{
    return m_default_order_isValid;
}

qint32 OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::getDisplayPreference() const {
    return m_display_preference;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::setDisplayPreference(const qint32 &display_preference) {
    m_display_preference = display_preference;
    m_display_preference_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_display_preference_Set() const{
    return m_display_preference_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_display_preference_Valid() const{
    return m_display_preference_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::isExplorePrioritizesActivityImage() const {
    return m_explore_prioritizes_activity_image;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::setExplorePrioritizesActivityImage(const bool &explore_prioritizes_activity_image) {
    m_explore_prioritizes_activity_image = explore_prioritizes_activity_image;
    m_explore_prioritizes_activity_image_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_explore_prioritizes_activity_image_Set() const{
    return m_explore_prioritizes_activity_image_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_explore_prioritizes_activity_image_Valid() const{
    return m_explore_prioritizes_activity_image_isValid;
}

QString OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::getFriendlyName() const {
    return m_friendly_name;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::isHasPredictableDates() const {
    return m_has_predictable_dates;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::setHasPredictableDates(const bool &has_predictable_dates) {
    m_has_predictable_dates = has_predictable_dates;
    m_has_predictable_dates_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_has_predictable_dates_Set() const{
    return m_has_predictable_dates_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_has_predictable_dates_Valid() const{
    return m_has_predictable_dates_isValid;
}

qint32 OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

QString OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::getImage() const {
    return m_image;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_image_Set() const{
    return m_image_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_image_Valid() const{
    return m_image_isValid;
}

qint32 OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_index_Valid() const{
    return m_index_isValid;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::isIsInGameMilestone() const {
    return m_is_in_game_milestone;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::setIsInGameMilestone(const bool &is_in_game_milestone) {
    m_is_in_game_milestone = is_in_game_milestone;
    m_is_in_game_milestone_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_is_in_game_milestone_Set() const{
    return m_is_in_game_milestone_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_is_in_game_milestone_Valid() const{
    return m_is_in_game_milestone_isValid;
}

qint32 OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::getMilestoneType() const {
    return m_milestone_type;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::setMilestoneType(const qint32 &milestone_type) {
    m_milestone_type = milestone_type;
    m_milestone_type_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_milestone_type_Set() const{
    return m_milestone_type_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_milestone_type_Valid() const{
    return m_milestone_type_isValid;
}

QMap<QString, OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestDefinition> OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::getQuests() const {
    return m_quests;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::setQuests(const QMap<QString, OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestDefinition> &quests) {
    m_quests = quests;
    m_quests_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_quests_Set() const{
    return m_quests_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_quests_Valid() const{
    return m_quests_isValid;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::isRecruitable() const {
    return m_recruitable;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::setRecruitable(const bool &recruitable) {
    m_recruitable = recruitable;
    m_recruitable_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_recruitable_Set() const{
    return m_recruitable_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_recruitable_Valid() const{
    return m_recruitable_isValid;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

QMap<QString, OAIDestiny_Definitions_Milestones_DestinyMilestoneRewardCategoryDefinition> OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::getRewards() const {
    return m_rewards;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::setRewards(const QMap<QString, OAIDestiny_Definitions_Milestones_DestinyMilestoneRewardCategoryDefinition> &rewards) {
    m_rewards = rewards;
    m_rewards_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_rewards_Set() const{
    return m_rewards_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_rewards_Valid() const{
    return m_rewards_isValid;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::isShowInExplorer() const {
    return m_show_in_explorer;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::setShowInExplorer(const bool &show_in_explorer) {
    m_show_in_explorer = show_in_explorer;
    m_show_in_explorer_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_show_in_explorer_Set() const{
    return m_show_in_explorer_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_show_in_explorer_Valid() const{
    return m_show_in_explorer_isValid;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::isShowInMilestones() const {
    return m_show_in_milestones;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::setShowInMilestones(const bool &show_in_milestones) {
    m_show_in_milestones = show_in_milestones;
    m_show_in_milestones_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_show_in_milestones_Set() const{
    return m_show_in_milestones_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_show_in_milestones_Valid() const{
    return m_show_in_milestones_isValid;
}

QMap<QString, OAIDestiny_Definitions_Milestones_DestinyMilestoneValueDefinition> OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::getValues() const {
    return m_values;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::setValues(const QMap<QString, OAIDestiny_Definitions_Milestones_DestinyMilestoneValueDefinition> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_values_Set() const{
    return m_values_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_values_Valid() const{
    return m_values_isValid;
}

QList<OAIDestiny_Definitions_Milestones_DestinyMilestoneVendorDefinition> OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::getVendors() const {
    return m_vendors;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::setVendors(const QList<OAIDestiny_Definitions_Milestones_DestinyMilestoneVendorDefinition> &vendors) {
    m_vendors = vendors;
    m_vendors_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_vendors_Set() const{
    return m_vendors_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_vendors_Valid() const{
    return m_vendors_isValid;
}

QString OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::getVendorsDisplayTitle() const {
    return m_vendors_display_title;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::setVendorsDisplayTitle(const QString &vendors_display_title) {
    m_vendors_display_title = vendors_display_title;
    m_vendors_display_title_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_vendors_display_title_Set() const{
    return m_vendors_display_title_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::is_vendors_display_title_Valid() const{
    return m_vendors_display_title_isValid;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_preference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_explore_prioritizes_activity_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_predictable_dates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_game_milestone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestone_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recruitable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rewards.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_in_explorer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_in_milestones_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendors_display_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
