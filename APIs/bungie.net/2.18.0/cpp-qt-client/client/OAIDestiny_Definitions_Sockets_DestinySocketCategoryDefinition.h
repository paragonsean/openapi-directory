/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_Sockets_DestinySocketCategoryDefinition.h
 *
 * Sockets on an item are organized into Categories visually.  You can find references to the socket category defined on an item&#39;s DestinyInventoryItemDefinition.sockets.socketCategories property.  This has the display information for rendering the categories&#39; header, and a hint for how the UI should handle showing this category.  The shitty thing about this, however, is that the socket categories&#39; UI style can be overridden by the item&#39;s UI style. For instance, the Socket Category used by Emote Sockets says it&#39;s \&quot;consumable,\&quot; but that&#39;s a lie: they&#39;re all reusable, and overridden by the detail UI pages in ways that we can&#39;t easily account for in the API.  As a result, I will try to compile these rules into the individual sockets on items, and provide the best hint possible there through the plugSources property. In the future, I may attempt to use this information in conjunction with the item to provide a more usable UI hint on the socket layer, but for now improving the consistency of plugSources is the best I have time to provide. (See https://github.com/Bungie-net/api/issues/522 for more info)
 */

#ifndef OAIDestiny_Definitions_Sockets_DestinySocketCategoryDefinition_H
#define OAIDestiny_Definitions_Sockets_DestinySocketCategoryDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition;

class OAIDestiny_Definitions_Sockets_DestinySocketCategoryDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_Sockets_DestinySocketCategoryDefinition();
    OAIDestiny_Definitions_Sockets_DestinySocketCategoryDefinition(QString json);
    ~OAIDestiny_Definitions_Sockets_DestinySocketCategoryDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCategoryStyle() const;
    void setCategoryStyle(const qint32 &category_style);
    bool is_category_style_Set() const;
    bool is_category_style_Valid() const;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition getDisplayProperties() const;
    void setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties);
    bool is_display_properties_Set() const;
    bool is_display_properties_Valid() const;

    qint32 getHash() const;
    void setHash(const qint32 &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    qint32 getIndex() const;
    void setIndex(const qint32 &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    bool isRedacted() const;
    void setRedacted(const bool &redacted);
    bool is_redacted_Set() const;
    bool is_redacted_Valid() const;

    qint32 getUiCategoryStyle() const;
    void setUiCategoryStyle(const qint32 &ui_category_style);
    bool is_ui_category_style_Set() const;
    bool is_ui_category_style_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_category_style;
    bool m_category_style_isSet;
    bool m_category_style_isValid;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition m_display_properties;
    bool m_display_properties_isSet;
    bool m_display_properties_isValid;

    qint32 m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    qint32 m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    bool m_redacted;
    bool m_redacted_isSet;
    bool m_redacted_isValid;

    qint32 m_ui_category_style;
    bool m_ui_category_style_isSet;
    bool m_ui_category_style_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_Sockets_DestinySocketCategoryDefinition)

#endif // OAIDestiny_Definitions_Sockets_DestinySocketCategoryDefinition_H
