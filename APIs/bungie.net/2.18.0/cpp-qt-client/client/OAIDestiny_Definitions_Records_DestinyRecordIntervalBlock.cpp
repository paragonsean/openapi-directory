/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock::OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock::OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock() {
    this->initializeModel();
}

OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock::~OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock() {}

void OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock::initializeModel() {

    m_interval_objectives_isSet = false;
    m_interval_objectives_isValid = false;

    m_interval_rewards_isSet = false;
    m_interval_rewards_isValid = false;

    m_original_objective_array_insertion_index_isSet = false;
    m_original_objective_array_insertion_index_isValid = false;
}

void OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock::fromJsonObject(QJsonObject json) {

    m_interval_objectives_isValid = ::OpenAPI::fromJsonValue(m_interval_objectives, json[QString("intervalObjectives")]);
    m_interval_objectives_isSet = !json[QString("intervalObjectives")].isNull() && m_interval_objectives_isValid;

    m_interval_rewards_isValid = ::OpenAPI::fromJsonValue(m_interval_rewards, json[QString("intervalRewards")]);
    m_interval_rewards_isSet = !json[QString("intervalRewards")].isNull() && m_interval_rewards_isValid;

    m_original_objective_array_insertion_index_isValid = ::OpenAPI::fromJsonValue(m_original_objective_array_insertion_index, json[QString("originalObjectiveArrayInsertionIndex")]);
    m_original_objective_array_insertion_index_isSet = !json[QString("originalObjectiveArrayInsertionIndex")].isNull() && m_original_objective_array_insertion_index_isValid;
}

QString OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock::asJsonObject() const {
    QJsonObject obj;
    if (m_interval_objectives.size() > 0) {
        obj.insert(QString("intervalObjectives"), ::OpenAPI::toJsonValue(m_interval_objectives));
    }
    if (m_interval_rewards.size() > 0) {
        obj.insert(QString("intervalRewards"), ::OpenAPI::toJsonValue(m_interval_rewards));
    }
    if (m_original_objective_array_insertion_index_isSet) {
        obj.insert(QString("originalObjectiveArrayInsertionIndex"), ::OpenAPI::toJsonValue(m_original_objective_array_insertion_index));
    }
    return obj;
}

QList<OAIDestiny_Definitions_Records_DestinyRecordIntervalObjective> OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock::getIntervalObjectives() const {
    return m_interval_objectives;
}
void OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock::setIntervalObjectives(const QList<OAIDestiny_Definitions_Records_DestinyRecordIntervalObjective> &interval_objectives) {
    m_interval_objectives = interval_objectives;
    m_interval_objectives_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock::is_interval_objectives_Set() const{
    return m_interval_objectives_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock::is_interval_objectives_Valid() const{
    return m_interval_objectives_isValid;
}

QList<OAIDestiny_Definitions_Records_DestinyRecordIntervalRewards> OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock::getIntervalRewards() const {
    return m_interval_rewards;
}
void OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock::setIntervalRewards(const QList<OAIDestiny_Definitions_Records_DestinyRecordIntervalRewards> &interval_rewards) {
    m_interval_rewards = interval_rewards;
    m_interval_rewards_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock::is_interval_rewards_Set() const{
    return m_interval_rewards_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock::is_interval_rewards_Valid() const{
    return m_interval_rewards_isValid;
}

qint32 OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock::getOriginalObjectiveArrayInsertionIndex() const {
    return m_original_objective_array_insertion_index;
}
void OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock::setOriginalObjectiveArrayInsertionIndex(const qint32 &original_objective_array_insertion_index) {
    m_original_objective_array_insertion_index = original_objective_array_insertion_index;
    m_original_objective_array_insertion_index_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock::is_original_objective_array_insertion_index_Set() const{
    return m_original_objective_array_insertion_index_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock::is_original_objective_array_insertion_index_Valid() const{
    return m_original_objective_array_insertion_index_isValid;
}

bool OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interval_objectives.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_rewards.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_objective_array_insertion_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
