/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Config_DestinyManifest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Config_DestinyManifest::OAIDestiny_Config_DestinyManifest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Config_DestinyManifest::OAIDestiny_Config_DestinyManifest() {
    this->initializeModel();
}

OAIDestiny_Config_DestinyManifest::~OAIDestiny_Config_DestinyManifest() {}

void OAIDestiny_Config_DestinyManifest::initializeModel() {

    m_icon_image_pyramid_info_isSet = false;
    m_icon_image_pyramid_info_isValid = false;

    m_json_world_component_content_paths_isSet = false;
    m_json_world_component_content_paths_isValid = false;

    m_json_world_content_paths_isSet = false;
    m_json_world_content_paths_isValid = false;

    m_mobile_asset_content_path_isSet = false;
    m_mobile_asset_content_path_isValid = false;

    m_mobile_clan_banner_database_path_isSet = false;
    m_mobile_clan_banner_database_path_isValid = false;

    m_mobile_gear_asset_data_bases_isSet = false;
    m_mobile_gear_asset_data_bases_isValid = false;

    m_mobile_gear_cdn_isSet = false;
    m_mobile_gear_cdn_isValid = false;

    m_mobile_world_content_paths_isSet = false;
    m_mobile_world_content_paths_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIDestiny_Config_DestinyManifest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Config_DestinyManifest::fromJsonObject(QJsonObject json) {

    m_icon_image_pyramid_info_isValid = ::OpenAPI::fromJsonValue(m_icon_image_pyramid_info, json[QString("iconImagePyramidInfo")]);
    m_icon_image_pyramid_info_isSet = !json[QString("iconImagePyramidInfo")].isNull() && m_icon_image_pyramid_info_isValid;

    if(json["jsonWorldComponentContentPaths"].isObject()){
        auto varmap = json["jsonWorldComponentContentPaths"].toObject().toVariantMap();
        m_json_world_component_content_paths_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QMap<QString, QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_json_world_component_content_paths_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_json_world_component_content_paths_isSet &= !jval.isNull() && m_json_world_component_content_paths_isValid;
                m_json_world_component_content_paths.insert(m_json_world_component_content_paths.end(), val, item);
            }
        }
    }

    m_json_world_content_paths_isValid = ::OpenAPI::fromJsonValue(m_json_world_content_paths, json[QString("jsonWorldContentPaths")]);
    m_json_world_content_paths_isSet = !json[QString("jsonWorldContentPaths")].isNull() && m_json_world_content_paths_isValid;

    m_mobile_asset_content_path_isValid = ::OpenAPI::fromJsonValue(m_mobile_asset_content_path, json[QString("mobileAssetContentPath")]);
    m_mobile_asset_content_path_isSet = !json[QString("mobileAssetContentPath")].isNull() && m_mobile_asset_content_path_isValid;

    m_mobile_clan_banner_database_path_isValid = ::OpenAPI::fromJsonValue(m_mobile_clan_banner_database_path, json[QString("mobileClanBannerDatabasePath")]);
    m_mobile_clan_banner_database_path_isSet = !json[QString("mobileClanBannerDatabasePath")].isNull() && m_mobile_clan_banner_database_path_isValid;

    m_mobile_gear_asset_data_bases_isValid = ::OpenAPI::fromJsonValue(m_mobile_gear_asset_data_bases, json[QString("mobileGearAssetDataBases")]);
    m_mobile_gear_asset_data_bases_isSet = !json[QString("mobileGearAssetDataBases")].isNull() && m_mobile_gear_asset_data_bases_isValid;

    m_mobile_gear_cdn_isValid = ::OpenAPI::fromJsonValue(m_mobile_gear_cdn, json[QString("mobileGearCDN")]);
    m_mobile_gear_cdn_isSet = !json[QString("mobileGearCDN")].isNull() && m_mobile_gear_cdn_isValid;

    m_mobile_world_content_paths_isValid = ::OpenAPI::fromJsonValue(m_mobile_world_content_paths, json[QString("mobileWorldContentPaths")]);
    m_mobile_world_content_paths_isSet = !json[QString("mobileWorldContentPaths")].isNull() && m_mobile_world_content_paths_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIDestiny_Config_DestinyManifest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Config_DestinyManifest::asJsonObject() const {
    QJsonObject obj;
    if (m_icon_image_pyramid_info.size() > 0) {
        obj.insert(QString("iconImagePyramidInfo"), ::OpenAPI::toJsonValue(m_icon_image_pyramid_info));
    }
    if (m_json_world_component_content_paths.size() > 0) {
        
        obj.insert(QString("jsonWorldComponentContentPaths"), toJsonValue(m_json_world_component_content_paths));
    }
    if (m_json_world_content_paths.size() > 0) {
        obj.insert(QString("jsonWorldContentPaths"), ::OpenAPI::toJsonValue(m_json_world_content_paths));
    }
    if (m_mobile_asset_content_path_isSet) {
        obj.insert(QString("mobileAssetContentPath"), ::OpenAPI::toJsonValue(m_mobile_asset_content_path));
    }
    if (m_mobile_clan_banner_database_path_isSet) {
        obj.insert(QString("mobileClanBannerDatabasePath"), ::OpenAPI::toJsonValue(m_mobile_clan_banner_database_path));
    }
    if (m_mobile_gear_asset_data_bases.size() > 0) {
        obj.insert(QString("mobileGearAssetDataBases"), ::OpenAPI::toJsonValue(m_mobile_gear_asset_data_bases));
    }
    if (m_mobile_gear_cdn.size() > 0) {
        obj.insert(QString("mobileGearCDN"), ::OpenAPI::toJsonValue(m_mobile_gear_cdn));
    }
    if (m_mobile_world_content_paths.size() > 0) {
        obj.insert(QString("mobileWorldContentPaths"), ::OpenAPI::toJsonValue(m_mobile_world_content_paths));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAIDestiny_Config_ImagePyramidEntry> OAIDestiny_Config_DestinyManifest::getIconImagePyramidInfo() const {
    return m_icon_image_pyramid_info;
}
void OAIDestiny_Config_DestinyManifest::setIconImagePyramidInfo(const QList<OAIDestiny_Config_ImagePyramidEntry> &icon_image_pyramid_info) {
    m_icon_image_pyramid_info = icon_image_pyramid_info;
    m_icon_image_pyramid_info_isSet = true;
}

bool OAIDestiny_Config_DestinyManifest::is_icon_image_pyramid_info_Set() const{
    return m_icon_image_pyramid_info_isSet;
}

bool OAIDestiny_Config_DestinyManifest::is_icon_image_pyramid_info_Valid() const{
    return m_icon_image_pyramid_info_isValid;
}

QMap<QString, QMap<QString, QString>> OAIDestiny_Config_DestinyManifest::getJsonWorldComponentContentPaths() const {
    return m_json_world_component_content_paths;
}
void OAIDestiny_Config_DestinyManifest::setJsonWorldComponentContentPaths(const QMap<QString, QMap<QString, QString>> &json_world_component_content_paths) {
    m_json_world_component_content_paths = json_world_component_content_paths;
    m_json_world_component_content_paths_isSet = true;
}

bool OAIDestiny_Config_DestinyManifest::is_json_world_component_content_paths_Set() const{
    return m_json_world_component_content_paths_isSet;
}

bool OAIDestiny_Config_DestinyManifest::is_json_world_component_content_paths_Valid() const{
    return m_json_world_component_content_paths_isValid;
}

QMap<QString, QString> OAIDestiny_Config_DestinyManifest::getJsonWorldContentPaths() const {
    return m_json_world_content_paths;
}
void OAIDestiny_Config_DestinyManifest::setJsonWorldContentPaths(const QMap<QString, QString> &json_world_content_paths) {
    m_json_world_content_paths = json_world_content_paths;
    m_json_world_content_paths_isSet = true;
}

bool OAIDestiny_Config_DestinyManifest::is_json_world_content_paths_Set() const{
    return m_json_world_content_paths_isSet;
}

bool OAIDestiny_Config_DestinyManifest::is_json_world_content_paths_Valid() const{
    return m_json_world_content_paths_isValid;
}

QString OAIDestiny_Config_DestinyManifest::getMobileAssetContentPath() const {
    return m_mobile_asset_content_path;
}
void OAIDestiny_Config_DestinyManifest::setMobileAssetContentPath(const QString &mobile_asset_content_path) {
    m_mobile_asset_content_path = mobile_asset_content_path;
    m_mobile_asset_content_path_isSet = true;
}

bool OAIDestiny_Config_DestinyManifest::is_mobile_asset_content_path_Set() const{
    return m_mobile_asset_content_path_isSet;
}

bool OAIDestiny_Config_DestinyManifest::is_mobile_asset_content_path_Valid() const{
    return m_mobile_asset_content_path_isValid;
}

QString OAIDestiny_Config_DestinyManifest::getMobileClanBannerDatabasePath() const {
    return m_mobile_clan_banner_database_path;
}
void OAIDestiny_Config_DestinyManifest::setMobileClanBannerDatabasePath(const QString &mobile_clan_banner_database_path) {
    m_mobile_clan_banner_database_path = mobile_clan_banner_database_path;
    m_mobile_clan_banner_database_path_isSet = true;
}

bool OAIDestiny_Config_DestinyManifest::is_mobile_clan_banner_database_path_Set() const{
    return m_mobile_clan_banner_database_path_isSet;
}

bool OAIDestiny_Config_DestinyManifest::is_mobile_clan_banner_database_path_Valid() const{
    return m_mobile_clan_banner_database_path_isValid;
}

QList<OAIDestiny_Config_GearAssetDataBaseDefinition> OAIDestiny_Config_DestinyManifest::getMobileGearAssetDataBases() const {
    return m_mobile_gear_asset_data_bases;
}
void OAIDestiny_Config_DestinyManifest::setMobileGearAssetDataBases(const QList<OAIDestiny_Config_GearAssetDataBaseDefinition> &mobile_gear_asset_data_bases) {
    m_mobile_gear_asset_data_bases = mobile_gear_asset_data_bases;
    m_mobile_gear_asset_data_bases_isSet = true;
}

bool OAIDestiny_Config_DestinyManifest::is_mobile_gear_asset_data_bases_Set() const{
    return m_mobile_gear_asset_data_bases_isSet;
}

bool OAIDestiny_Config_DestinyManifest::is_mobile_gear_asset_data_bases_Valid() const{
    return m_mobile_gear_asset_data_bases_isValid;
}

QMap<QString, QString> OAIDestiny_Config_DestinyManifest::getMobileGearCdn() const {
    return m_mobile_gear_cdn;
}
void OAIDestiny_Config_DestinyManifest::setMobileGearCdn(const QMap<QString, QString> &mobile_gear_cdn) {
    m_mobile_gear_cdn = mobile_gear_cdn;
    m_mobile_gear_cdn_isSet = true;
}

bool OAIDestiny_Config_DestinyManifest::is_mobile_gear_cdn_Set() const{
    return m_mobile_gear_cdn_isSet;
}

bool OAIDestiny_Config_DestinyManifest::is_mobile_gear_cdn_Valid() const{
    return m_mobile_gear_cdn_isValid;
}

QMap<QString, QString> OAIDestiny_Config_DestinyManifest::getMobileWorldContentPaths() const {
    return m_mobile_world_content_paths;
}
void OAIDestiny_Config_DestinyManifest::setMobileWorldContentPaths(const QMap<QString, QString> &mobile_world_content_paths) {
    m_mobile_world_content_paths = mobile_world_content_paths;
    m_mobile_world_content_paths_isSet = true;
}

bool OAIDestiny_Config_DestinyManifest::is_mobile_world_content_paths_Set() const{
    return m_mobile_world_content_paths_isSet;
}

bool OAIDestiny_Config_DestinyManifest::is_mobile_world_content_paths_Valid() const{
    return m_mobile_world_content_paths_isValid;
}

QString OAIDestiny_Config_DestinyManifest::getVersion() const {
    return m_version;
}
void OAIDestiny_Config_DestinyManifest::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIDestiny_Config_DestinyManifest::is_version_Set() const{
    return m_version_isSet;
}

bool OAIDestiny_Config_DestinyManifest::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIDestiny_Config_DestinyManifest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_icon_image_pyramid_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_world_component_content_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_world_content_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_asset_content_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_clan_banner_database_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_gear_asset_data_bases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_gear_cdn.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_world_content_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Config_DestinyManifest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
