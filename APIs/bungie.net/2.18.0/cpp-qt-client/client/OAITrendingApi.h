/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITrendingApi_H
#define OAI_OAITrendingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAITrending_GetTrendingCategories_200_response.h"
#include "OAITrending_GetTrendingCategory_200_response.h"
#include "OAITrending_GetTrendingEntryDetail_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITrendingApi : public QObject {
    Q_OBJECT

public:
    OAITrendingApi(const int timeOut = 0);
    ~OAITrendingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void trending_GetTrendingCategories();

    /**
    * @param[in]  category_id QString [required]
    * @param[in]  page_number qint32 [required]
    */
    virtual void trending_GetTrendingCategory(const QString &category_id, const qint32 &page_number);

    /**
    * @param[in]  identifier QString [required]
    * @param[in]  trending_entry_type qint32 [required]
    */
    virtual void trending_GetTrendingEntryDetail(const QString &identifier, const qint32 &trending_entry_type);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void trending_GetTrendingCategoriesCallback(OAIHttpRequestWorker *worker);
    void trending_GetTrendingCategoryCallback(OAIHttpRequestWorker *worker);
    void trending_GetTrendingEntryDetailCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void trending_GetTrendingCategoriesSignal(OAITrending_GetTrendingCategories_200_response summary);
    void trending_GetTrendingCategorySignal(OAITrending_GetTrendingCategory_200_response summary);
    void trending_GetTrendingEntryDetailSignal(OAITrending_GetTrendingEntryDetail_200_response summary);


    void trending_GetTrendingCategoriesSignalFull(OAIHttpRequestWorker *worker, OAITrending_GetTrendingCategories_200_response summary);
    void trending_GetTrendingCategorySignalFull(OAIHttpRequestWorker *worker, OAITrending_GetTrendingCategory_200_response summary);
    void trending_GetTrendingEntryDetailSignalFull(OAIHttpRequestWorker *worker, OAITrending_GetTrendingEntryDetail_200_response summary);

    Q_DECL_DEPRECATED_X("Use trending_GetTrendingCategoriesSignalError() instead")
    void trending_GetTrendingCategoriesSignalE(OAITrending_GetTrendingCategories_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void trending_GetTrendingCategoriesSignalError(OAITrending_GetTrendingCategories_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trending_GetTrendingCategorySignalError() instead")
    void trending_GetTrendingCategorySignalE(OAITrending_GetTrendingCategory_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void trending_GetTrendingCategorySignalError(OAITrending_GetTrendingCategory_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trending_GetTrendingEntryDetailSignalError() instead")
    void trending_GetTrendingEntryDetailSignalE(OAITrending_GetTrendingEntryDetail_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void trending_GetTrendingEntryDetailSignalError(OAITrending_GetTrendingEntryDetail_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use trending_GetTrendingCategoriesSignalErrorFull() instead")
    void trending_GetTrendingCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trending_GetTrendingCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trending_GetTrendingCategorySignalErrorFull() instead")
    void trending_GetTrendingCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trending_GetTrendingCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trending_GetTrendingEntryDetailSignalErrorFull() instead")
    void trending_GetTrendingEntryDetailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trending_GetTrendingEntryDetailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
