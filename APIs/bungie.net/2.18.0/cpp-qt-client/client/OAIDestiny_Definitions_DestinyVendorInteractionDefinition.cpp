/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyVendorInteractionDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyVendorInteractionDefinition::OAIDestiny_Definitions_DestinyVendorInteractionDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyVendorInteractionDefinition::OAIDestiny_Definitions_DestinyVendorInteractionDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyVendorInteractionDefinition::~OAIDestiny_Definitions_DestinyVendorInteractionDefinition() {}

void OAIDestiny_Definitions_DestinyVendorInteractionDefinition::initializeModel() {

    m_flavor_line_one_isSet = false;
    m_flavor_line_one_isValid = false;

    m_flavor_line_two_isSet = false;
    m_flavor_line_two_isValid = false;

    m_header_display_properties_isSet = false;
    m_header_display_properties_isValid = false;

    m_instructions_isSet = false;
    m_instructions_isValid = false;

    m_interaction_index_isSet = false;
    m_interaction_index_isValid = false;

    m_interaction_type_isSet = false;
    m_interaction_type_isValid = false;

    m_questline_item_hash_isSet = false;
    m_questline_item_hash_isValid = false;

    m_replies_isSet = false;
    m_replies_isValid = false;

    m_reward_block_label_isSet = false;
    m_reward_block_label_isValid = false;

    m_reward_vendor_category_index_isSet = false;
    m_reward_vendor_category_index_isValid = false;

    m_sack_interaction_list_isSet = false;
    m_sack_interaction_list_isValid = false;

    m_ui_interaction_type_isSet = false;
    m_ui_interaction_type_isValid = false;

    m_vendor_category_index_isSet = false;
    m_vendor_category_index_isValid = false;
}

void OAIDestiny_Definitions_DestinyVendorInteractionDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyVendorInteractionDefinition::fromJsonObject(QJsonObject json) {

    m_flavor_line_one_isValid = ::OpenAPI::fromJsonValue(m_flavor_line_one, json[QString("flavorLineOne")]);
    m_flavor_line_one_isSet = !json[QString("flavorLineOne")].isNull() && m_flavor_line_one_isValid;

    m_flavor_line_two_isValid = ::OpenAPI::fromJsonValue(m_flavor_line_two, json[QString("flavorLineTwo")]);
    m_flavor_line_two_isSet = !json[QString("flavorLineTwo")].isNull() && m_flavor_line_two_isValid;

    m_header_display_properties_isValid = ::OpenAPI::fromJsonValue(m_header_display_properties, json[QString("headerDisplayProperties")]);
    m_header_display_properties_isSet = !json[QString("headerDisplayProperties")].isNull() && m_header_display_properties_isValid;

    m_instructions_isValid = ::OpenAPI::fromJsonValue(m_instructions, json[QString("instructions")]);
    m_instructions_isSet = !json[QString("instructions")].isNull() && m_instructions_isValid;

    m_interaction_index_isValid = ::OpenAPI::fromJsonValue(m_interaction_index, json[QString("interactionIndex")]);
    m_interaction_index_isSet = !json[QString("interactionIndex")].isNull() && m_interaction_index_isValid;

    m_interaction_type_isValid = ::OpenAPI::fromJsonValue(m_interaction_type, json[QString("interactionType")]);
    m_interaction_type_isSet = !json[QString("interactionType")].isNull() && m_interaction_type_isValid;

    m_questline_item_hash_isValid = ::OpenAPI::fromJsonValue(m_questline_item_hash, json[QString("questlineItemHash")]);
    m_questline_item_hash_isSet = !json[QString("questlineItemHash")].isNull() && m_questline_item_hash_isValid;

    m_replies_isValid = ::OpenAPI::fromJsonValue(m_replies, json[QString("replies")]);
    m_replies_isSet = !json[QString("replies")].isNull() && m_replies_isValid;

    m_reward_block_label_isValid = ::OpenAPI::fromJsonValue(m_reward_block_label, json[QString("rewardBlockLabel")]);
    m_reward_block_label_isSet = !json[QString("rewardBlockLabel")].isNull() && m_reward_block_label_isValid;

    m_reward_vendor_category_index_isValid = ::OpenAPI::fromJsonValue(m_reward_vendor_category_index, json[QString("rewardVendorCategoryIndex")]);
    m_reward_vendor_category_index_isSet = !json[QString("rewardVendorCategoryIndex")].isNull() && m_reward_vendor_category_index_isValid;

    m_sack_interaction_list_isValid = ::OpenAPI::fromJsonValue(m_sack_interaction_list, json[QString("sackInteractionList")]);
    m_sack_interaction_list_isSet = !json[QString("sackInteractionList")].isNull() && m_sack_interaction_list_isValid;

    m_ui_interaction_type_isValid = ::OpenAPI::fromJsonValue(m_ui_interaction_type, json[QString("uiInteractionType")]);
    m_ui_interaction_type_isSet = !json[QString("uiInteractionType")].isNull() && m_ui_interaction_type_isValid;

    m_vendor_category_index_isValid = ::OpenAPI::fromJsonValue(m_vendor_category_index, json[QString("vendorCategoryIndex")]);
    m_vendor_category_index_isSet = !json[QString("vendorCategoryIndex")].isNull() && m_vendor_category_index_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorInteractionDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyVendorInteractionDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_flavor_line_one_isSet) {
        obj.insert(QString("flavorLineOne"), ::OpenAPI::toJsonValue(m_flavor_line_one));
    }
    if (m_flavor_line_two_isSet) {
        obj.insert(QString("flavorLineTwo"), ::OpenAPI::toJsonValue(m_flavor_line_two));
    }
    if (m_header_display_properties.isSet()) {
        obj.insert(QString("headerDisplayProperties"), ::OpenAPI::toJsonValue(m_header_display_properties));
    }
    if (m_instructions_isSet) {
        obj.insert(QString("instructions"), ::OpenAPI::toJsonValue(m_instructions));
    }
    if (m_interaction_index_isSet) {
        obj.insert(QString("interactionIndex"), ::OpenAPI::toJsonValue(m_interaction_index));
    }
    if (m_interaction_type_isSet) {
        obj.insert(QString("interactionType"), ::OpenAPI::toJsonValue(m_interaction_type));
    }
    if (m_questline_item_hash_isSet) {
        obj.insert(QString("questlineItemHash"), ::OpenAPI::toJsonValue(m_questline_item_hash));
    }
    if (m_replies.size() > 0) {
        obj.insert(QString("replies"), ::OpenAPI::toJsonValue(m_replies));
    }
    if (m_reward_block_label_isSet) {
        obj.insert(QString("rewardBlockLabel"), ::OpenAPI::toJsonValue(m_reward_block_label));
    }
    if (m_reward_vendor_category_index_isSet) {
        obj.insert(QString("rewardVendorCategoryIndex"), ::OpenAPI::toJsonValue(m_reward_vendor_category_index));
    }
    if (m_sack_interaction_list.size() > 0) {
        obj.insert(QString("sackInteractionList"), ::OpenAPI::toJsonValue(m_sack_interaction_list));
    }
    if (m_ui_interaction_type_isSet) {
        obj.insert(QString("uiInteractionType"), ::OpenAPI::toJsonValue(m_ui_interaction_type));
    }
    if (m_vendor_category_index_isSet) {
        obj.insert(QString("vendorCategoryIndex"), ::OpenAPI::toJsonValue(m_vendor_category_index));
    }
    return obj;
}

QString OAIDestiny_Definitions_DestinyVendorInteractionDefinition::getFlavorLineOne() const {
    return m_flavor_line_one;
}
void OAIDestiny_Definitions_DestinyVendorInteractionDefinition::setFlavorLineOne(const QString &flavor_line_one) {
    m_flavor_line_one = flavor_line_one;
    m_flavor_line_one_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_flavor_line_one_Set() const{
    return m_flavor_line_one_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_flavor_line_one_Valid() const{
    return m_flavor_line_one_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorInteractionDefinition::getFlavorLineTwo() const {
    return m_flavor_line_two;
}
void OAIDestiny_Definitions_DestinyVendorInteractionDefinition::setFlavorLineTwo(const QString &flavor_line_two) {
    m_flavor_line_two = flavor_line_two;
    m_flavor_line_two_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_flavor_line_two_Set() const{
    return m_flavor_line_two_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_flavor_line_two_Valid() const{
    return m_flavor_line_two_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_DestinyVendorInteractionDefinition::getHeaderDisplayProperties() const {
    return m_header_display_properties;
}
void OAIDestiny_Definitions_DestinyVendorInteractionDefinition::setHeaderDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &header_display_properties) {
    m_header_display_properties = header_display_properties;
    m_header_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_header_display_properties_Set() const{
    return m_header_display_properties_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_header_display_properties_Valid() const{
    return m_header_display_properties_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorInteractionDefinition::getInstructions() const {
    return m_instructions;
}
void OAIDestiny_Definitions_DestinyVendorInteractionDefinition::setInstructions(const QString &instructions) {
    m_instructions = instructions;
    m_instructions_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_instructions_Set() const{
    return m_instructions_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_instructions_Valid() const{
    return m_instructions_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorInteractionDefinition::getInteractionIndex() const {
    return m_interaction_index;
}
void OAIDestiny_Definitions_DestinyVendorInteractionDefinition::setInteractionIndex(const qint32 &interaction_index) {
    m_interaction_index = interaction_index;
    m_interaction_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_interaction_index_Set() const{
    return m_interaction_index_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_interaction_index_Valid() const{
    return m_interaction_index_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorInteractionDefinition::getInteractionType() const {
    return m_interaction_type;
}
void OAIDestiny_Definitions_DestinyVendorInteractionDefinition::setInteractionType(const qint32 &interaction_type) {
    m_interaction_type = interaction_type;
    m_interaction_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_interaction_type_Set() const{
    return m_interaction_type_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_interaction_type_Valid() const{
    return m_interaction_type_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorInteractionDefinition::getQuestlineItemHash() const {
    return m_questline_item_hash;
}
void OAIDestiny_Definitions_DestinyVendorInteractionDefinition::setQuestlineItemHash(const qint32 &questline_item_hash) {
    m_questline_item_hash = questline_item_hash;
    m_questline_item_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_questline_item_hash_Set() const{
    return m_questline_item_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_questline_item_hash_Valid() const{
    return m_questline_item_hash_isValid;
}

QList<OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition> OAIDestiny_Definitions_DestinyVendorInteractionDefinition::getReplies() const {
    return m_replies;
}
void OAIDestiny_Definitions_DestinyVendorInteractionDefinition::setReplies(const QList<OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition> &replies) {
    m_replies = replies;
    m_replies_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_replies_Set() const{
    return m_replies_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_replies_Valid() const{
    return m_replies_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorInteractionDefinition::getRewardBlockLabel() const {
    return m_reward_block_label;
}
void OAIDestiny_Definitions_DestinyVendorInteractionDefinition::setRewardBlockLabel(const QString &reward_block_label) {
    m_reward_block_label = reward_block_label;
    m_reward_block_label_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_reward_block_label_Set() const{
    return m_reward_block_label_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_reward_block_label_Valid() const{
    return m_reward_block_label_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorInteractionDefinition::getRewardVendorCategoryIndex() const {
    return m_reward_vendor_category_index;
}
void OAIDestiny_Definitions_DestinyVendorInteractionDefinition::setRewardVendorCategoryIndex(const qint32 &reward_vendor_category_index) {
    m_reward_vendor_category_index = reward_vendor_category_index;
    m_reward_vendor_category_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_reward_vendor_category_index_Set() const{
    return m_reward_vendor_category_index_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_reward_vendor_category_index_Valid() const{
    return m_reward_vendor_category_index_isValid;
}

QList<OAIDestiny_Definitions_DestinyVendorInteractionSackEntryDefinition> OAIDestiny_Definitions_DestinyVendorInteractionDefinition::getSackInteractionList() const {
    return m_sack_interaction_list;
}
void OAIDestiny_Definitions_DestinyVendorInteractionDefinition::setSackInteractionList(const QList<OAIDestiny_Definitions_DestinyVendorInteractionSackEntryDefinition> &sack_interaction_list) {
    m_sack_interaction_list = sack_interaction_list;
    m_sack_interaction_list_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_sack_interaction_list_Set() const{
    return m_sack_interaction_list_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_sack_interaction_list_Valid() const{
    return m_sack_interaction_list_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorInteractionDefinition::getUiInteractionType() const {
    return m_ui_interaction_type;
}
void OAIDestiny_Definitions_DestinyVendorInteractionDefinition::setUiInteractionType(const qint32 &ui_interaction_type) {
    m_ui_interaction_type = ui_interaction_type;
    m_ui_interaction_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_ui_interaction_type_Set() const{
    return m_ui_interaction_type_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_ui_interaction_type_Valid() const{
    return m_ui_interaction_type_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorInteractionDefinition::getVendorCategoryIndex() const {
    return m_vendor_category_index;
}
void OAIDestiny_Definitions_DestinyVendorInteractionDefinition::setVendorCategoryIndex(const qint32 &vendor_category_index) {
    m_vendor_category_index = vendor_category_index;
    m_vendor_category_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_vendor_category_index_Set() const{
    return m_vendor_category_index_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::is_vendor_category_index_Valid() const{
    return m_vendor_category_index_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_flavor_line_one_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flavor_line_two_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interaction_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interaction_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_questline_item_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_block_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_vendor_category_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sack_interaction_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ui_interaction_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_category_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
