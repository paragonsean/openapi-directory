/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity.h
 *
 * If you are playing in an activity, this is some information about it.  Note that we cannot guarantee any of this resembles what ends up in the PGCR in any way. They are sourced by two entirely separate systems with their own logic, and the one we source this data from should be considered non-authoritative in comparison.
 */

#ifndef OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity_H
#define OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity_H

#include <QJsonObject>

#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity : public OAIObject {
public:
    OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity();
    OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity(QString json);
    ~OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    float getHighestOpposingFactionScore() const;
    void setHighestOpposingFactionScore(const float &highest_opposing_faction_score);
    bool is_highest_opposing_faction_score_Set() const;
    bool is_highest_opposing_faction_score_Valid() const;

    qint32 getNumberOfOpponents() const;
    void setNumberOfOpponents(const qint32 &number_of_opponents);
    bool is_number_of_opponents_Set() const;
    bool is_number_of_opponents_Valid() const;

    qint32 getNumberOfPlayers() const;
    void setNumberOfPlayers(const qint32 &number_of_players);
    bool is_number_of_players_Set() const;
    bool is_number_of_players_Valid() const;

    float getScore() const;
    void setScore(const float &score);
    bool is_score_Set() const;
    bool is_score_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    float m_highest_opposing_faction_score;
    bool m_highest_opposing_faction_score_isSet;
    bool m_highest_opposing_faction_score_isValid;

    qint32 m_number_of_opponents;
    bool m_number_of_opponents_isSet;
    bool m_number_of_opponents_isValid;

    qint32 m_number_of_players;
    bool m_number_of_players_isSet;
    bool m_number_of_players_isValid;

    float m_score;
    bool m_score_isSet;
    bool m_score_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity)

#endif // OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity_H
