/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIgnores_IgnoreResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIgnores_IgnoreResponse::OAIIgnores_IgnoreResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIgnores_IgnoreResponse::OAIIgnores_IgnoreResponse() {
    this->initializeModel();
}

OAIIgnores_IgnoreResponse::~OAIIgnores_IgnoreResponse() {}

void OAIIgnores_IgnoreResponse::initializeModel() {

    m_ignore_flags_isSet = false;
    m_ignore_flags_isValid = false;

    m_is_ignored_isSet = false;
    m_is_ignored_isValid = false;
}

void OAIIgnores_IgnoreResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIgnores_IgnoreResponse::fromJsonObject(QJsonObject json) {

    m_ignore_flags_isValid = ::OpenAPI::fromJsonValue(m_ignore_flags, json[QString("ignoreFlags")]);
    m_ignore_flags_isSet = !json[QString("ignoreFlags")].isNull() && m_ignore_flags_isValid;

    m_is_ignored_isValid = ::OpenAPI::fromJsonValue(m_is_ignored, json[QString("isIgnored")]);
    m_is_ignored_isSet = !json[QString("isIgnored")].isNull() && m_is_ignored_isValid;
}

QString OAIIgnores_IgnoreResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIgnores_IgnoreResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_ignore_flags_isSet) {
        obj.insert(QString("ignoreFlags"), ::OpenAPI::toJsonValue(m_ignore_flags));
    }
    if (m_is_ignored_isSet) {
        obj.insert(QString("isIgnored"), ::OpenAPI::toJsonValue(m_is_ignored));
    }
    return obj;
}

qint32 OAIIgnores_IgnoreResponse::getIgnoreFlags() const {
    return m_ignore_flags;
}
void OAIIgnores_IgnoreResponse::setIgnoreFlags(const qint32 &ignore_flags) {
    m_ignore_flags = ignore_flags;
    m_ignore_flags_isSet = true;
}

bool OAIIgnores_IgnoreResponse::is_ignore_flags_Set() const{
    return m_ignore_flags_isSet;
}

bool OAIIgnores_IgnoreResponse::is_ignore_flags_Valid() const{
    return m_ignore_flags_isValid;
}

bool OAIIgnores_IgnoreResponse::isIsIgnored() const {
    return m_is_ignored;
}
void OAIIgnores_IgnoreResponse::setIsIgnored(const bool &is_ignored) {
    m_is_ignored = is_ignored;
    m_is_ignored_isSet = true;
}

bool OAIIgnores_IgnoreResponse::is_is_ignored_Set() const{
    return m_is_ignored_isSet;
}

bool OAIIgnores_IgnoreResponse::is_is_ignored_Valid() const{
    return m_is_ignored_isValid;
}

bool OAIIgnores_IgnoreResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ignore_flags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_ignored_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIgnores_IgnoreResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
