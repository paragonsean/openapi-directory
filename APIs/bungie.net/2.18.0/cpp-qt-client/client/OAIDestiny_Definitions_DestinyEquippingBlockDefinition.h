/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyEquippingBlockDefinition.h
 *
 * Items that can be equipped define this block. It contains information we need to understand how and when the item can be equipped.
 */

#ifndef OAIDestiny_Definitions_DestinyEquippingBlockDefinition_H
#define OAIDestiny_Definitions_DestinyEquippingBlockDefinition_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDestiny_Definitions_DestinyEquippingBlockDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyEquippingBlockDefinition();
    OAIDestiny_Definitions_DestinyEquippingBlockDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyEquippingBlockDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAmmoType() const;
    void setAmmoType(const qint32 &ammo_type);
    bool is_ammo_type_Set() const;
    bool is_ammo_type_Valid() const;

    qint32 getAttributes() const;
    void setAttributes(const qint32 &attributes);
    bool is_attributes_Set() const;
    bool is_attributes_Valid() const;

    QList<QString> getDisplayStrings() const;
    void setDisplayStrings(const QList<QString> &display_strings);
    bool is_display_strings_Set() const;
    bool is_display_strings_Valid() const;

    qint32 getEquipmentSlotTypeHash() const;
    void setEquipmentSlotTypeHash(const qint32 &equipment_slot_type_hash);
    bool is_equipment_slot_type_hash_Set() const;
    bool is_equipment_slot_type_hash_Valid() const;

    qint32 getGearsetItemHash() const;
    void setGearsetItemHash(const qint32 &gearset_item_hash);
    bool is_gearset_item_hash_Set() const;
    bool is_gearset_item_hash_Valid() const;

    QString getUniqueLabel() const;
    void setUniqueLabel(const QString &unique_label);
    bool is_unique_label_Set() const;
    bool is_unique_label_Valid() const;

    qint32 getUniqueLabelHash() const;
    void setUniqueLabelHash(const qint32 &unique_label_hash);
    bool is_unique_label_hash_Set() const;
    bool is_unique_label_hash_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_ammo_type;
    bool m_ammo_type_isSet;
    bool m_ammo_type_isValid;

    qint32 m_attributes;
    bool m_attributes_isSet;
    bool m_attributes_isValid;

    QList<QString> m_display_strings;
    bool m_display_strings_isSet;
    bool m_display_strings_isValid;

    qint32 m_equipment_slot_type_hash;
    bool m_equipment_slot_type_hash_isSet;
    bool m_equipment_slot_type_hash_isValid;

    qint32 m_gearset_item_hash;
    bool m_gearset_item_hash_isSet;
    bool m_gearset_item_hash_isValid;

    QString m_unique_label;
    bool m_unique_label_isSet;
    bool m_unique_label_isValid;

    qint32 m_unique_label_hash;
    bool m_unique_label_hash_isSet;
    bool m_unique_label_hash_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyEquippingBlockDefinition)

#endif // OAIDestiny_Definitions_DestinyEquippingBlockDefinition_H
