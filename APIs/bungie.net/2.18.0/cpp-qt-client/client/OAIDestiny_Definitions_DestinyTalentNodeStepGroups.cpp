/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyTalentNodeStepGroups.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyTalentNodeStepGroups::OAIDestiny_Definitions_DestinyTalentNodeStepGroups(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyTalentNodeStepGroups::OAIDestiny_Definitions_DestinyTalentNodeStepGroups() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyTalentNodeStepGroups::~OAIDestiny_Definitions_DestinyTalentNodeStepGroups() {}

void OAIDestiny_Definitions_DestinyTalentNodeStepGroups::initializeModel() {

    m_damage_types_isSet = false;
    m_damage_types_isValid = false;

    m_guardian_attributes_isSet = false;
    m_guardian_attributes_isValid = false;

    m_impact_effects_isSet = false;
    m_impact_effects_isValid = false;

    m_light_abilities_isSet = false;
    m_light_abilities_isValid = false;

    m_weapon_performance_isSet = false;
    m_weapon_performance_isValid = false;
}

void OAIDestiny_Definitions_DestinyTalentNodeStepGroups::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyTalentNodeStepGroups::fromJsonObject(QJsonObject json) {

    m_damage_types_isValid = ::OpenAPI::fromJsonValue(m_damage_types, json[QString("damageTypes")]);
    m_damage_types_isSet = !json[QString("damageTypes")].isNull() && m_damage_types_isValid;

    m_guardian_attributes_isValid = ::OpenAPI::fromJsonValue(m_guardian_attributes, json[QString("guardianAttributes")]);
    m_guardian_attributes_isSet = !json[QString("guardianAttributes")].isNull() && m_guardian_attributes_isValid;

    m_impact_effects_isValid = ::OpenAPI::fromJsonValue(m_impact_effects, json[QString("impactEffects")]);
    m_impact_effects_isSet = !json[QString("impactEffects")].isNull() && m_impact_effects_isValid;

    m_light_abilities_isValid = ::OpenAPI::fromJsonValue(m_light_abilities, json[QString("lightAbilities")]);
    m_light_abilities_isSet = !json[QString("lightAbilities")].isNull() && m_light_abilities_isValid;

    m_weapon_performance_isValid = ::OpenAPI::fromJsonValue(m_weapon_performance, json[QString("weaponPerformance")]);
    m_weapon_performance_isSet = !json[QString("weaponPerformance")].isNull() && m_weapon_performance_isValid;
}

QString OAIDestiny_Definitions_DestinyTalentNodeStepGroups::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyTalentNodeStepGroups::asJsonObject() const {
    QJsonObject obj;
    if (m_damage_types_isSet) {
        obj.insert(QString("damageTypes"), ::OpenAPI::toJsonValue(m_damage_types));
    }
    if (m_guardian_attributes_isSet) {
        obj.insert(QString("guardianAttributes"), ::OpenAPI::toJsonValue(m_guardian_attributes));
    }
    if (m_impact_effects_isSet) {
        obj.insert(QString("impactEffects"), ::OpenAPI::toJsonValue(m_impact_effects));
    }
    if (m_light_abilities_isSet) {
        obj.insert(QString("lightAbilities"), ::OpenAPI::toJsonValue(m_light_abilities));
    }
    if (m_weapon_performance_isSet) {
        obj.insert(QString("weaponPerformance"), ::OpenAPI::toJsonValue(m_weapon_performance));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_DestinyTalentNodeStepGroups::getDamageTypes() const {
    return m_damage_types;
}
void OAIDestiny_Definitions_DestinyTalentNodeStepGroups::setDamageTypes(const qint32 &damage_types) {
    m_damage_types = damage_types;
    m_damage_types_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeStepGroups::is_damage_types_Set() const{
    return m_damage_types_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeStepGroups::is_damage_types_Valid() const{
    return m_damage_types_isValid;
}

qint32 OAIDestiny_Definitions_DestinyTalentNodeStepGroups::getGuardianAttributes() const {
    return m_guardian_attributes;
}
void OAIDestiny_Definitions_DestinyTalentNodeStepGroups::setGuardianAttributes(const qint32 &guardian_attributes) {
    m_guardian_attributes = guardian_attributes;
    m_guardian_attributes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeStepGroups::is_guardian_attributes_Set() const{
    return m_guardian_attributes_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeStepGroups::is_guardian_attributes_Valid() const{
    return m_guardian_attributes_isValid;
}

qint32 OAIDestiny_Definitions_DestinyTalentNodeStepGroups::getImpactEffects() const {
    return m_impact_effects;
}
void OAIDestiny_Definitions_DestinyTalentNodeStepGroups::setImpactEffects(const qint32 &impact_effects) {
    m_impact_effects = impact_effects;
    m_impact_effects_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeStepGroups::is_impact_effects_Set() const{
    return m_impact_effects_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeStepGroups::is_impact_effects_Valid() const{
    return m_impact_effects_isValid;
}

qint32 OAIDestiny_Definitions_DestinyTalentNodeStepGroups::getLightAbilities() const {
    return m_light_abilities;
}
void OAIDestiny_Definitions_DestinyTalentNodeStepGroups::setLightAbilities(const qint32 &light_abilities) {
    m_light_abilities = light_abilities;
    m_light_abilities_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeStepGroups::is_light_abilities_Set() const{
    return m_light_abilities_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeStepGroups::is_light_abilities_Valid() const{
    return m_light_abilities_isValid;
}

qint32 OAIDestiny_Definitions_DestinyTalentNodeStepGroups::getWeaponPerformance() const {
    return m_weapon_performance;
}
void OAIDestiny_Definitions_DestinyTalentNodeStepGroups::setWeaponPerformance(const qint32 &weapon_performance) {
    m_weapon_performance = weapon_performance;
    m_weapon_performance_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeStepGroups::is_weapon_performance_Set() const{
    return m_weapon_performance_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeStepGroups::is_weapon_performance_Valid() const{
    return m_weapon_performance_isValid;
}

bool OAIDestiny_Definitions_DestinyTalentNodeStepGroups::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_damage_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guardian_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impact_effects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_light_abilities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weapon_performance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyTalentNodeStepGroups::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
