/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchema2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchema2::OAISchema2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchema2::OAISchema2() {
    this->initializeModel();
}

OAISchema2::~OAISchema2() {}

void OAISchema2::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISchema2::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISchema2::fromJson(QString jsonString) {
    
    if ( jsonString.compare(QString::number(0), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_0;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(100), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_100;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(101), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_101;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(102), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_102;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(103), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_103;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(104), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_104;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(105), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_105;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(200), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_200;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(201), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_201;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(202), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_202;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(203), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_203;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(204), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_204;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(205), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_205;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(206), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_206;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(300), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_300;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(301), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_301;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(302), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_302;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(303), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_303;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(304), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_304;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(305), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_305;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(306), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_306;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(307), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_307;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(308), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_308;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(309), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_309;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(310), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_310;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(400), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_400;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(401), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_401;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(402), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_402;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(500), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_500;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(600), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_600;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(700), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_700;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(800), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_800;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(900), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_900;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(1000), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_1000;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(1100), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_1100;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(1200), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_1200;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(1300), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_1300;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(1400), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema2::_1400;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISchema2::fromJsonValue(QJsonValue json) {
m_value = static_cast<eOAISchema2>(json.toInt());
}

QString OAISchema2::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISchema2::_0:
            val = QString::number(0);
            break;
        case eOAISchema2::_100:
            val = QString::number(100);
            break;
        case eOAISchema2::_101:
            val = QString::number(101);
            break;
        case eOAISchema2::_102:
            val = QString::number(102);
            break;
        case eOAISchema2::_103:
            val = QString::number(103);
            break;
        case eOAISchema2::_104:
            val = QString::number(104);
            break;
        case eOAISchema2::_105:
            val = QString::number(105);
            break;
        case eOAISchema2::_200:
            val = QString::number(200);
            break;
        case eOAISchema2::_201:
            val = QString::number(201);
            break;
        case eOAISchema2::_202:
            val = QString::number(202);
            break;
        case eOAISchema2::_203:
            val = QString::number(203);
            break;
        case eOAISchema2::_204:
            val = QString::number(204);
            break;
        case eOAISchema2::_205:
            val = QString::number(205);
            break;
        case eOAISchema2::_206:
            val = QString::number(206);
            break;
        case eOAISchema2::_300:
            val = QString::number(300);
            break;
        case eOAISchema2::_301:
            val = QString::number(301);
            break;
        case eOAISchema2::_302:
            val = QString::number(302);
            break;
        case eOAISchema2::_303:
            val = QString::number(303);
            break;
        case eOAISchema2::_304:
            val = QString::number(304);
            break;
        case eOAISchema2::_305:
            val = QString::number(305);
            break;
        case eOAISchema2::_306:
            val = QString::number(306);
            break;
        case eOAISchema2::_307:
            val = QString::number(307);
            break;
        case eOAISchema2::_308:
            val = QString::number(308);
            break;
        case eOAISchema2::_309:
            val = QString::number(309);
            break;
        case eOAISchema2::_310:
            val = QString::number(310);
            break;
        case eOAISchema2::_400:
            val = QString::number(400);
            break;
        case eOAISchema2::_401:
            val = QString::number(401);
            break;
        case eOAISchema2::_402:
            val = QString::number(402);
            break;
        case eOAISchema2::_500:
            val = QString::number(500);
            break;
        case eOAISchema2::_600:
            val = QString::number(600);
            break;
        case eOAISchema2::_700:
            val = QString::number(700);
            break;
        case eOAISchema2::_800:
            val = QString::number(800);
            break;
        case eOAISchema2::_900:
            val = QString::number(900);
            break;
        case eOAISchema2::_1000:
            val = QString::number(1000);
            break;
        case eOAISchema2::_1100:
            val = QString::number(1100);
            break;
        case eOAISchema2::_1200:
            val = QString::number(1200);
            break;
        case eOAISchema2::_1300:
            val = QString::number(1300);
            break;
        case eOAISchema2::_1400:
            val = QString::number(1400);
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISchema2::asJsonValue() const {
    
    return QJsonValue(static_cast<int>(m_value));
}


OAISchema2::eOAISchema2 OAISchema2::getValue() const {
    return m_value;
}

void OAISchema2::setValue(const OAISchema2::eOAISchema2& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISchema2::isSet() const {
    
    return m_value_isSet;
}

bool OAISchema2::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
