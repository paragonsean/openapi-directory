/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::~OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition() {}

void OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::initializeModel() {

    m_choice_description_isSet = false;
    m_choice_description_isValid = false;

    m_currency_item_hash_isSet = false;
    m_currency_item_hash_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::fromJsonObject(QJsonObject json) {

    m_choice_description_isValid = ::OpenAPI::fromJsonValue(m_choice_description, json[QString("choiceDescription")]);
    m_choice_description_isSet = !json[QString("choiceDescription")].isNull() && m_choice_description_isValid;

    m_currency_item_hash_isValid = ::OpenAPI::fromJsonValue(m_currency_item_hash, json[QString("currencyItemHash")]);
    m_currency_item_hash_isSet = !json[QString("currencyItemHash")].isNull() && m_currency_item_hash_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_choice_description_isSet) {
        obj.insert(QString("choiceDescription"), ::OpenAPI::toJsonValue(m_choice_description));
    }
    if (m_currency_item_hash_isSet) {
        obj.insert(QString("currencyItemHash"), ::OpenAPI::toJsonValue(m_currency_item_hash));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::getChoiceDescription() const {
    return m_choice_description;
}
void OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::setChoiceDescription(const QString &choice_description) {
    m_choice_description = choice_description;
    m_choice_description_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::is_choice_description_Set() const{
    return m_choice_description_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::is_choice_description_Valid() const{
    return m_choice_description_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::getCurrencyItemHash() const {
    return m_currency_item_hash;
}
void OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::setCurrencyItemHash(const qint32 &currency_item_hash) {
    m_currency_item_hash = currency_item_hash;
    m_currency_item_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::is_currency_item_hash_Set() const{
    return m_currency_item_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::is_currency_item_hash_Valid() const{
    return m_currency_item_hash_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::getDescription() const {
    return m_description;
}
void OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::getIcon() const {
    return m_icon;
}
void OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::is_icon_Valid() const{
    return m_icon_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::getTitle() const {
    return m_title;
}
void OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::is_title_Set() const{
    return m_title_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_choice_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_item_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
