/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Components_Profiles_DestinyProfileProgressionComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Components_Profiles_DestinyProfileProgressionComponent::OAIDestiny_Components_Profiles_DestinyProfileProgressionComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Components_Profiles_DestinyProfileProgressionComponent::OAIDestiny_Components_Profiles_DestinyProfileProgressionComponent() {
    this->initializeModel();
}

OAIDestiny_Components_Profiles_DestinyProfileProgressionComponent::~OAIDestiny_Components_Profiles_DestinyProfileProgressionComponent() {}

void OAIDestiny_Components_Profiles_DestinyProfileProgressionComponent::initializeModel() {

    m_checklists_isSet = false;
    m_checklists_isValid = false;

    m_seasonal_artifact_isSet = false;
    m_seasonal_artifact_isValid = false;
}

void OAIDestiny_Components_Profiles_DestinyProfileProgressionComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Components_Profiles_DestinyProfileProgressionComponent::fromJsonObject(QJsonObject json) {

    if(json["checklists"].isObject()){
        auto varmap = json["checklists"].toObject().toVariantMap();
        m_checklists_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QMap<QString, bool> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_checklists_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_checklists_isSet &= !jval.isNull() && m_checklists_isValid;
                m_checklists.insert(m_checklists.end(), val, item);
            }
        }
    }

    m_seasonal_artifact_isValid = ::OpenAPI::fromJsonValue(m_seasonal_artifact, json[QString("seasonalArtifact")]);
    m_seasonal_artifact_isSet = !json[QString("seasonalArtifact")].isNull() && m_seasonal_artifact_isValid;
}

QString OAIDestiny_Components_Profiles_DestinyProfileProgressionComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Components_Profiles_DestinyProfileProgressionComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_checklists.size() > 0) {
        
        obj.insert(QString("checklists"), toJsonValue(m_checklists));
    }
    if (m_seasonal_artifact.isSet()) {
        obj.insert(QString("seasonalArtifact"), ::OpenAPI::toJsonValue(m_seasonal_artifact));
    }
    return obj;
}

QMap<QString, QMap<QString, bool>> OAIDestiny_Components_Profiles_DestinyProfileProgressionComponent::getChecklists() const {
    return m_checklists;
}
void OAIDestiny_Components_Profiles_DestinyProfileProgressionComponent::setChecklists(const QMap<QString, QMap<QString, bool>> &checklists) {
    m_checklists = checklists;
    m_checklists_isSet = true;
}

bool OAIDestiny_Components_Profiles_DestinyProfileProgressionComponent::is_checklists_Set() const{
    return m_checklists_isSet;
}

bool OAIDestiny_Components_Profiles_DestinyProfileProgressionComponent::is_checklists_Valid() const{
    return m_checklists_isValid;
}

OAIDestiny_Artifacts_DestinyArtifactProfileScoped OAIDestiny_Components_Profiles_DestinyProfileProgressionComponent::getSeasonalArtifact() const {
    return m_seasonal_artifact;
}
void OAIDestiny_Components_Profiles_DestinyProfileProgressionComponent::setSeasonalArtifact(const OAIDestiny_Artifacts_DestinyArtifactProfileScoped &seasonal_artifact) {
    m_seasonal_artifact = seasonal_artifact;
    m_seasonal_artifact_isSet = true;
}

bool OAIDestiny_Components_Profiles_DestinyProfileProgressionComponent::is_seasonal_artifact_Set() const{
    return m_seasonal_artifact_isSet;
}

bool OAIDestiny_Components_Profiles_DestinyProfileProgressionComponent::is_seasonal_artifact_Valid() const{
    return m_seasonal_artifact_isValid;
}

bool OAIDestiny_Components_Profiles_DestinyProfileProgressionComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checklists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_seasonal_artifact.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Components_Profiles_DestinyProfileProgressionComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
