/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinySandboxPatternDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinySandboxPatternDefinition::OAIDestiny_Definitions_DestinySandboxPatternDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinySandboxPatternDefinition::OAIDestiny_Definitions_DestinySandboxPatternDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinySandboxPatternDefinition::~OAIDestiny_Definitions_DestinySandboxPatternDefinition() {}

void OAIDestiny_Definitions_DestinySandboxPatternDefinition::initializeModel() {

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_pattern_global_tag_id_hash_isSet = false;
    m_pattern_global_tag_id_hash_isValid = false;

    m_pattern_hash_isSet = false;
    m_pattern_hash_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;

    m_weapon_content_group_hash_isSet = false;
    m_weapon_content_group_hash_isValid = false;

    m_weapon_translation_group_hash_isSet = false;
    m_weapon_translation_group_hash_isValid = false;

    m_weapon_type_isSet = false;
    m_weapon_type_isValid = false;

    m_weapon_type_hash_isSet = false;
    m_weapon_type_hash_isValid = false;
}

void OAIDestiny_Definitions_DestinySandboxPatternDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinySandboxPatternDefinition::fromJsonObject(QJsonObject json) {

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_pattern_global_tag_id_hash_isValid = ::OpenAPI::fromJsonValue(m_pattern_global_tag_id_hash, json[QString("patternGlobalTagIdHash")]);
    m_pattern_global_tag_id_hash_isSet = !json[QString("patternGlobalTagIdHash")].isNull() && m_pattern_global_tag_id_hash_isValid;

    m_pattern_hash_isValid = ::OpenAPI::fromJsonValue(m_pattern_hash, json[QString("patternHash")]);
    m_pattern_hash_isSet = !json[QString("patternHash")].isNull() && m_pattern_hash_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;

    m_weapon_content_group_hash_isValid = ::OpenAPI::fromJsonValue(m_weapon_content_group_hash, json[QString("weaponContentGroupHash")]);
    m_weapon_content_group_hash_isSet = !json[QString("weaponContentGroupHash")].isNull() && m_weapon_content_group_hash_isValid;

    m_weapon_translation_group_hash_isValid = ::OpenAPI::fromJsonValue(m_weapon_translation_group_hash, json[QString("weaponTranslationGroupHash")]);
    m_weapon_translation_group_hash_isSet = !json[QString("weaponTranslationGroupHash")].isNull() && m_weapon_translation_group_hash_isValid;

    m_weapon_type_isValid = ::OpenAPI::fromJsonValue(m_weapon_type, json[QString("weaponType")]);
    m_weapon_type_isSet = !json[QString("weaponType")].isNull() && m_weapon_type_isValid;

    m_weapon_type_hash_isValid = ::OpenAPI::fromJsonValue(m_weapon_type_hash, json[QString("weaponTypeHash")]);
    m_weapon_type_hash_isSet = !json[QString("weaponTypeHash")].isNull() && m_weapon_type_hash_isValid;
}

QString OAIDestiny_Definitions_DestinySandboxPatternDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinySandboxPatternDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_filters.size() > 0) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_pattern_global_tag_id_hash_isSet) {
        obj.insert(QString("patternGlobalTagIdHash"), ::OpenAPI::toJsonValue(m_pattern_global_tag_id_hash));
    }
    if (m_pattern_hash_isSet) {
        obj.insert(QString("patternHash"), ::OpenAPI::toJsonValue(m_pattern_hash));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    if (m_weapon_content_group_hash_isSet) {
        obj.insert(QString("weaponContentGroupHash"), ::OpenAPI::toJsonValue(m_weapon_content_group_hash));
    }
    if (m_weapon_translation_group_hash_isSet) {
        obj.insert(QString("weaponTranslationGroupHash"), ::OpenAPI::toJsonValue(m_weapon_translation_group_hash));
    }
    if (m_weapon_type_isSet) {
        obj.insert(QString("weaponType"), ::OpenAPI::toJsonValue(m_weapon_type));
    }
    if (m_weapon_type_hash_isSet) {
        obj.insert(QString("weaponTypeHash"), ::OpenAPI::toJsonValue(m_weapon_type_hash));
    }
    return obj;
}

QList<OAIDestiny_Definitions_DestinyArrangementRegionFilterDefinition> OAIDestiny_Definitions_DestinySandboxPatternDefinition::getFilters() const {
    return m_filters;
}
void OAIDestiny_Definitions_DestinySandboxPatternDefinition::setFilters(const QList<OAIDestiny_Definitions_DestinyArrangementRegionFilterDefinition> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::is_filters_Valid() const{
    return m_filters_isValid;
}

qint32 OAIDestiny_Definitions_DestinySandboxPatternDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_DestinySandboxPatternDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinySandboxPatternDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_DestinySandboxPatternDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::is_index_Valid() const{
    return m_index_isValid;
}

qint32 OAIDestiny_Definitions_DestinySandboxPatternDefinition::getPatternGlobalTagIdHash() const {
    return m_pattern_global_tag_id_hash;
}
void OAIDestiny_Definitions_DestinySandboxPatternDefinition::setPatternGlobalTagIdHash(const qint32 &pattern_global_tag_id_hash) {
    m_pattern_global_tag_id_hash = pattern_global_tag_id_hash;
    m_pattern_global_tag_id_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::is_pattern_global_tag_id_hash_Set() const{
    return m_pattern_global_tag_id_hash_isSet;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::is_pattern_global_tag_id_hash_Valid() const{
    return m_pattern_global_tag_id_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinySandboxPatternDefinition::getPatternHash() const {
    return m_pattern_hash;
}
void OAIDestiny_Definitions_DestinySandboxPatternDefinition::setPatternHash(const qint32 &pattern_hash) {
    m_pattern_hash = pattern_hash;
    m_pattern_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::is_pattern_hash_Set() const{
    return m_pattern_hash_isSet;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::is_pattern_hash_Valid() const{
    return m_pattern_hash_isValid;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_DestinySandboxPatternDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

qint32 OAIDestiny_Definitions_DestinySandboxPatternDefinition::getWeaponContentGroupHash() const {
    return m_weapon_content_group_hash;
}
void OAIDestiny_Definitions_DestinySandboxPatternDefinition::setWeaponContentGroupHash(const qint32 &weapon_content_group_hash) {
    m_weapon_content_group_hash = weapon_content_group_hash;
    m_weapon_content_group_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::is_weapon_content_group_hash_Set() const{
    return m_weapon_content_group_hash_isSet;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::is_weapon_content_group_hash_Valid() const{
    return m_weapon_content_group_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinySandboxPatternDefinition::getWeaponTranslationGroupHash() const {
    return m_weapon_translation_group_hash;
}
void OAIDestiny_Definitions_DestinySandboxPatternDefinition::setWeaponTranslationGroupHash(const qint32 &weapon_translation_group_hash) {
    m_weapon_translation_group_hash = weapon_translation_group_hash;
    m_weapon_translation_group_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::is_weapon_translation_group_hash_Set() const{
    return m_weapon_translation_group_hash_isSet;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::is_weapon_translation_group_hash_Valid() const{
    return m_weapon_translation_group_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinySandboxPatternDefinition::getWeaponType() const {
    return m_weapon_type;
}
void OAIDestiny_Definitions_DestinySandboxPatternDefinition::setWeaponType(const qint32 &weapon_type) {
    m_weapon_type = weapon_type;
    m_weapon_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::is_weapon_type_Set() const{
    return m_weapon_type_isSet;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::is_weapon_type_Valid() const{
    return m_weapon_type_isValid;
}

qint32 OAIDestiny_Definitions_DestinySandboxPatternDefinition::getWeaponTypeHash() const {
    return m_weapon_type_hash;
}
void OAIDestiny_Definitions_DestinySandboxPatternDefinition::setWeaponTypeHash(const qint32 &weapon_type_hash) {
    m_weapon_type_hash = weapon_type_hash;
    m_weapon_type_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::is_weapon_type_hash_Set() const{
    return m_weapon_type_hash_isSet;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::is_weapon_type_hash_Valid() const{
    return m_weapon_type_hash_isValid;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pattern_global_tag_id_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pattern_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weapon_content_group_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weapon_translation_group_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weapon_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weapon_type_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinySandboxPatternDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
