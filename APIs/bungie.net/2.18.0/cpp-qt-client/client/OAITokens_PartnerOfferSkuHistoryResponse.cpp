/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITokens_PartnerOfferSkuHistoryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITokens_PartnerOfferSkuHistoryResponse::OAITokens_PartnerOfferSkuHistoryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITokens_PartnerOfferSkuHistoryResponse::OAITokens_PartnerOfferSkuHistoryResponse() {
    this->initializeModel();
}

OAITokens_PartnerOfferSkuHistoryResponse::~OAITokens_PartnerOfferSkuHistoryResponse() {}

void OAITokens_PartnerOfferSkuHistoryResponse::initializeModel() {

    m_all_offers_applied_isSet = false;
    m_all_offers_applied_isValid = false;

    m_claim_date_isSet = false;
    m_claim_date_isValid = false;

    m_localized_description_isSet = false;
    m_localized_description_isValid = false;

    m_localized_name_isSet = false;
    m_localized_name_isValid = false;

    m_sku_identifier_isSet = false;
    m_sku_identifier_isValid = false;

    m_sku_offers_isSet = false;
    m_sku_offers_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;
}

void OAITokens_PartnerOfferSkuHistoryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITokens_PartnerOfferSkuHistoryResponse::fromJsonObject(QJsonObject json) {

    m_all_offers_applied_isValid = ::OpenAPI::fromJsonValue(m_all_offers_applied, json[QString("AllOffersApplied")]);
    m_all_offers_applied_isSet = !json[QString("AllOffersApplied")].isNull() && m_all_offers_applied_isValid;

    m_claim_date_isValid = ::OpenAPI::fromJsonValue(m_claim_date, json[QString("ClaimDate")]);
    m_claim_date_isSet = !json[QString("ClaimDate")].isNull() && m_claim_date_isValid;

    m_localized_description_isValid = ::OpenAPI::fromJsonValue(m_localized_description, json[QString("LocalizedDescription")]);
    m_localized_description_isSet = !json[QString("LocalizedDescription")].isNull() && m_localized_description_isValid;

    m_localized_name_isValid = ::OpenAPI::fromJsonValue(m_localized_name, json[QString("LocalizedName")]);
    m_localized_name_isSet = !json[QString("LocalizedName")].isNull() && m_localized_name_isValid;

    m_sku_identifier_isValid = ::OpenAPI::fromJsonValue(m_sku_identifier, json[QString("SkuIdentifier")]);
    m_sku_identifier_isSet = !json[QString("SkuIdentifier")].isNull() && m_sku_identifier_isValid;

    m_sku_offers_isValid = ::OpenAPI::fromJsonValue(m_sku_offers, json[QString("SkuOffers")]);
    m_sku_offers_isSet = !json[QString("SkuOffers")].isNull() && m_sku_offers_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("TransactionId")]);
    m_transaction_id_isSet = !json[QString("TransactionId")].isNull() && m_transaction_id_isValid;
}

QString OAITokens_PartnerOfferSkuHistoryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITokens_PartnerOfferSkuHistoryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_all_offers_applied_isSet) {
        obj.insert(QString("AllOffersApplied"), ::OpenAPI::toJsonValue(m_all_offers_applied));
    }
    if (m_claim_date_isSet) {
        obj.insert(QString("ClaimDate"), ::OpenAPI::toJsonValue(m_claim_date));
    }
    if (m_localized_description_isSet) {
        obj.insert(QString("LocalizedDescription"), ::OpenAPI::toJsonValue(m_localized_description));
    }
    if (m_localized_name_isSet) {
        obj.insert(QString("LocalizedName"), ::OpenAPI::toJsonValue(m_localized_name));
    }
    if (m_sku_identifier_isSet) {
        obj.insert(QString("SkuIdentifier"), ::OpenAPI::toJsonValue(m_sku_identifier));
    }
    if (m_sku_offers.size() > 0) {
        obj.insert(QString("SkuOffers"), ::OpenAPI::toJsonValue(m_sku_offers));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("TransactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    return obj;
}

bool OAITokens_PartnerOfferSkuHistoryResponse::isAllOffersApplied() const {
    return m_all_offers_applied;
}
void OAITokens_PartnerOfferSkuHistoryResponse::setAllOffersApplied(const bool &all_offers_applied) {
    m_all_offers_applied = all_offers_applied;
    m_all_offers_applied_isSet = true;
}

bool OAITokens_PartnerOfferSkuHistoryResponse::is_all_offers_applied_Set() const{
    return m_all_offers_applied_isSet;
}

bool OAITokens_PartnerOfferSkuHistoryResponse::is_all_offers_applied_Valid() const{
    return m_all_offers_applied_isValid;
}

QDateTime OAITokens_PartnerOfferSkuHistoryResponse::getClaimDate() const {
    return m_claim_date;
}
void OAITokens_PartnerOfferSkuHistoryResponse::setClaimDate(const QDateTime &claim_date) {
    m_claim_date = claim_date;
    m_claim_date_isSet = true;
}

bool OAITokens_PartnerOfferSkuHistoryResponse::is_claim_date_Set() const{
    return m_claim_date_isSet;
}

bool OAITokens_PartnerOfferSkuHistoryResponse::is_claim_date_Valid() const{
    return m_claim_date_isValid;
}

QString OAITokens_PartnerOfferSkuHistoryResponse::getLocalizedDescription() const {
    return m_localized_description;
}
void OAITokens_PartnerOfferSkuHistoryResponse::setLocalizedDescription(const QString &localized_description) {
    m_localized_description = localized_description;
    m_localized_description_isSet = true;
}

bool OAITokens_PartnerOfferSkuHistoryResponse::is_localized_description_Set() const{
    return m_localized_description_isSet;
}

bool OAITokens_PartnerOfferSkuHistoryResponse::is_localized_description_Valid() const{
    return m_localized_description_isValid;
}

QString OAITokens_PartnerOfferSkuHistoryResponse::getLocalizedName() const {
    return m_localized_name;
}
void OAITokens_PartnerOfferSkuHistoryResponse::setLocalizedName(const QString &localized_name) {
    m_localized_name = localized_name;
    m_localized_name_isSet = true;
}

bool OAITokens_PartnerOfferSkuHistoryResponse::is_localized_name_Set() const{
    return m_localized_name_isSet;
}

bool OAITokens_PartnerOfferSkuHistoryResponse::is_localized_name_Valid() const{
    return m_localized_name_isValid;
}

QString OAITokens_PartnerOfferSkuHistoryResponse::getSkuIdentifier() const {
    return m_sku_identifier;
}
void OAITokens_PartnerOfferSkuHistoryResponse::setSkuIdentifier(const QString &sku_identifier) {
    m_sku_identifier = sku_identifier;
    m_sku_identifier_isSet = true;
}

bool OAITokens_PartnerOfferSkuHistoryResponse::is_sku_identifier_Set() const{
    return m_sku_identifier_isSet;
}

bool OAITokens_PartnerOfferSkuHistoryResponse::is_sku_identifier_Valid() const{
    return m_sku_identifier_isValid;
}

QList<OAITokens_PartnerOfferHistoryResponse> OAITokens_PartnerOfferSkuHistoryResponse::getSkuOffers() const {
    return m_sku_offers;
}
void OAITokens_PartnerOfferSkuHistoryResponse::setSkuOffers(const QList<OAITokens_PartnerOfferHistoryResponse> &sku_offers) {
    m_sku_offers = sku_offers;
    m_sku_offers_isSet = true;
}

bool OAITokens_PartnerOfferSkuHistoryResponse::is_sku_offers_Set() const{
    return m_sku_offers_isSet;
}

bool OAITokens_PartnerOfferSkuHistoryResponse::is_sku_offers_Valid() const{
    return m_sku_offers_isValid;
}

QString OAITokens_PartnerOfferSkuHistoryResponse::getTransactionId() const {
    return m_transaction_id;
}
void OAITokens_PartnerOfferSkuHistoryResponse::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAITokens_PartnerOfferSkuHistoryResponse::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAITokens_PartnerOfferSkuHistoryResponse::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

bool OAITokens_PartnerOfferSkuHistoryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_offers_applied_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_claim_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_offers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITokens_PartnerOfferSkuHistoryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
