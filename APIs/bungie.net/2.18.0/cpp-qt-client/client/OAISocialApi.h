/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISocialApi_H
#define OAI_OAISocialApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGroupV2_GetUserClanInviteSetting_200_response.h"
#include "OAISocial_GetFriendList_200_response.h"
#include "OAISocial_GetFriendRequestList_200_response.h"
#include "OAISocial_GetPlatformFriendList_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISocialApi : public QObject {
    Q_OBJECT

public:
    OAISocialApi(const int timeOut = 0);
    ~OAISocialApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  membership_id QString [required]
    */
    virtual void social_AcceptFriendRequest(const QString &membership_id);

    /**
    * @param[in]  membership_id QString [required]
    */
    virtual void social_DeclineFriendRequest(const QString &membership_id);


    virtual void social_GetFriendList();


    virtual void social_GetFriendRequestList();

    /**
    * @param[in]  friend_platform qint32 [required]
    * @param[in]  page QString [required]
    */
    virtual void social_GetPlatformFriendList(const qint32 &friend_platform, const QString &page);

    /**
    * @param[in]  membership_id QString [required]
    */
    virtual void social_IssueFriendRequest(const QString &membership_id);

    /**
    * @param[in]  membership_id QString [required]
    */
    virtual void social_RemoveFriend(const QString &membership_id);

    /**
    * @param[in]  membership_id QString [required]
    */
    virtual void social_RemoveFriendRequest(const QString &membership_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void social_AcceptFriendRequestCallback(OAIHttpRequestWorker *worker);
    void social_DeclineFriendRequestCallback(OAIHttpRequestWorker *worker);
    void social_GetFriendListCallback(OAIHttpRequestWorker *worker);
    void social_GetFriendRequestListCallback(OAIHttpRequestWorker *worker);
    void social_GetPlatformFriendListCallback(OAIHttpRequestWorker *worker);
    void social_IssueFriendRequestCallback(OAIHttpRequestWorker *worker);
    void social_RemoveFriendCallback(OAIHttpRequestWorker *worker);
    void social_RemoveFriendRequestCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void social_AcceptFriendRequestSignal(OAIGroupV2_GetUserClanInviteSetting_200_response summary);
    void social_DeclineFriendRequestSignal(OAIGroupV2_GetUserClanInviteSetting_200_response summary);
    void social_GetFriendListSignal(OAISocial_GetFriendList_200_response summary);
    void social_GetFriendRequestListSignal(OAISocial_GetFriendRequestList_200_response summary);
    void social_GetPlatformFriendListSignal(OAISocial_GetPlatformFriendList_200_response summary);
    void social_IssueFriendRequestSignal(OAIGroupV2_GetUserClanInviteSetting_200_response summary);
    void social_RemoveFriendSignal(OAIGroupV2_GetUserClanInviteSetting_200_response summary);
    void social_RemoveFriendRequestSignal(OAIGroupV2_GetUserClanInviteSetting_200_response summary);


    void social_AcceptFriendRequestSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetUserClanInviteSetting_200_response summary);
    void social_DeclineFriendRequestSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetUserClanInviteSetting_200_response summary);
    void social_GetFriendListSignalFull(OAIHttpRequestWorker *worker, OAISocial_GetFriendList_200_response summary);
    void social_GetFriendRequestListSignalFull(OAIHttpRequestWorker *worker, OAISocial_GetFriendRequestList_200_response summary);
    void social_GetPlatformFriendListSignalFull(OAIHttpRequestWorker *worker, OAISocial_GetPlatformFriendList_200_response summary);
    void social_IssueFriendRequestSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetUserClanInviteSetting_200_response summary);
    void social_RemoveFriendSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetUserClanInviteSetting_200_response summary);
    void social_RemoveFriendRequestSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetUserClanInviteSetting_200_response summary);

    Q_DECL_DEPRECATED_X("Use social_AcceptFriendRequestSignalError() instead")
    void social_AcceptFriendRequestSignalE(OAIGroupV2_GetUserClanInviteSetting_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void social_AcceptFriendRequestSignalError(OAIGroupV2_GetUserClanInviteSetting_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use social_DeclineFriendRequestSignalError() instead")
    void social_DeclineFriendRequestSignalE(OAIGroupV2_GetUserClanInviteSetting_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void social_DeclineFriendRequestSignalError(OAIGroupV2_GetUserClanInviteSetting_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use social_GetFriendListSignalError() instead")
    void social_GetFriendListSignalE(OAISocial_GetFriendList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void social_GetFriendListSignalError(OAISocial_GetFriendList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use social_GetFriendRequestListSignalError() instead")
    void social_GetFriendRequestListSignalE(OAISocial_GetFriendRequestList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void social_GetFriendRequestListSignalError(OAISocial_GetFriendRequestList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use social_GetPlatformFriendListSignalError() instead")
    void social_GetPlatformFriendListSignalE(OAISocial_GetPlatformFriendList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void social_GetPlatformFriendListSignalError(OAISocial_GetPlatformFriendList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use social_IssueFriendRequestSignalError() instead")
    void social_IssueFriendRequestSignalE(OAIGroupV2_GetUserClanInviteSetting_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void social_IssueFriendRequestSignalError(OAIGroupV2_GetUserClanInviteSetting_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use social_RemoveFriendSignalError() instead")
    void social_RemoveFriendSignalE(OAIGroupV2_GetUserClanInviteSetting_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void social_RemoveFriendSignalError(OAIGroupV2_GetUserClanInviteSetting_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use social_RemoveFriendRequestSignalError() instead")
    void social_RemoveFriendRequestSignalE(OAIGroupV2_GetUserClanInviteSetting_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void social_RemoveFriendRequestSignalError(OAIGroupV2_GetUserClanInviteSetting_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use social_AcceptFriendRequestSignalErrorFull() instead")
    void social_AcceptFriendRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void social_AcceptFriendRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use social_DeclineFriendRequestSignalErrorFull() instead")
    void social_DeclineFriendRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void social_DeclineFriendRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use social_GetFriendListSignalErrorFull() instead")
    void social_GetFriendListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void social_GetFriendListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use social_GetFriendRequestListSignalErrorFull() instead")
    void social_GetFriendRequestListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void social_GetFriendRequestListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use social_GetPlatformFriendListSignalErrorFull() instead")
    void social_GetPlatformFriendListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void social_GetPlatformFriendListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use social_IssueFriendRequestSignalErrorFull() instead")
    void social_IssueFriendRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void social_IssueFriendRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use social_RemoveFriendSignalErrorFull() instead")
    void social_RemoveFriendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void social_RemoveFriendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use social_RemoveFriendRequestSignalErrorFull() instead")
    void social_RemoveFriendRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void social_RemoveFriendRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
