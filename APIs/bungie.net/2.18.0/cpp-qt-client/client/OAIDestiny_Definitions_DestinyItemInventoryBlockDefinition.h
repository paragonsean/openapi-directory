/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyItemInventoryBlockDefinition.h
 *
 * If the item can exist in an inventory - the overwhelming majority of them can and do - then this is the basic properties regarding the item&#39;s relationship with the inventory.
 */

#ifndef OAIDestiny_Definitions_DestinyItemInventoryBlockDefinition_H
#define OAIDestiny_Definitions_DestinyItemInventoryBlockDefinition_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDestiny_Definitions_DestinyItemInventoryBlockDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyItemInventoryBlockDefinition();
    OAIDestiny_Definitions_DestinyItemInventoryBlockDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyItemInventoryBlockDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBucketTypeHash() const;
    void setBucketTypeHash(const qint32 &bucket_type_hash);
    bool is_bucket_type_hash_Set() const;
    bool is_bucket_type_hash_Valid() const;

    QString getExpirationTooltip() const;
    void setExpirationTooltip(const QString &expiration_tooltip);
    bool is_expiration_tooltip_Set() const;
    bool is_expiration_tooltip_Valid() const;

    QString getExpiredInActivityMessage() const;
    void setExpiredInActivityMessage(const QString &expired_in_activity_message);
    bool is_expired_in_activity_message_Set() const;
    bool is_expired_in_activity_message_Valid() const;

    QString getExpiredInOrbitMessage() const;
    void setExpiredInOrbitMessage(const QString &expired_in_orbit_message);
    bool is_expired_in_orbit_message_Set() const;
    bool is_expired_in_orbit_message_Valid() const;

    bool isIsInstanceItem() const;
    void setIsInstanceItem(const bool &is_instance_item);
    bool is_is_instance_item_Set() const;
    bool is_is_instance_item_Valid() const;

    qint32 getMaxStackSize() const;
    void setMaxStackSize(const qint32 &max_stack_size);
    bool is_max_stack_size_Set() const;
    bool is_max_stack_size_Valid() const;

    qint32 getRecipeItemHash() const;
    void setRecipeItemHash(const qint32 &recipe_item_hash);
    bool is_recipe_item_hash_Set() const;
    bool is_recipe_item_hash_Valid() const;

    qint32 getRecoveryBucketTypeHash() const;
    void setRecoveryBucketTypeHash(const qint32 &recovery_bucket_type_hash);
    bool is_recovery_bucket_type_hash_Set() const;
    bool is_recovery_bucket_type_hash_Valid() const;

    QString getStackUniqueLabel() const;
    void setStackUniqueLabel(const QString &stack_unique_label);
    bool is_stack_unique_label_Set() const;
    bool is_stack_unique_label_Valid() const;

    bool isSuppressExpirationWhenObjectivesComplete() const;
    void setSuppressExpirationWhenObjectivesComplete(const bool &suppress_expiration_when_objectives_complete);
    bool is_suppress_expiration_when_objectives_complete_Set() const;
    bool is_suppress_expiration_when_objectives_complete_Valid() const;

    qint32 getTierType() const;
    void setTierType(const qint32 &tier_type);
    bool is_tier_type_Set() const;
    bool is_tier_type_Valid() const;

    qint32 getTierTypeHash() const;
    void setTierTypeHash(const qint32 &tier_type_hash);
    bool is_tier_type_hash_Set() const;
    bool is_tier_type_hash_Valid() const;

    QString getTierTypeName() const;
    void setTierTypeName(const QString &tier_type_name);
    bool is_tier_type_name_Set() const;
    bool is_tier_type_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_bucket_type_hash;
    bool m_bucket_type_hash_isSet;
    bool m_bucket_type_hash_isValid;

    QString m_expiration_tooltip;
    bool m_expiration_tooltip_isSet;
    bool m_expiration_tooltip_isValid;

    QString m_expired_in_activity_message;
    bool m_expired_in_activity_message_isSet;
    bool m_expired_in_activity_message_isValid;

    QString m_expired_in_orbit_message;
    bool m_expired_in_orbit_message_isSet;
    bool m_expired_in_orbit_message_isValid;

    bool m_is_instance_item;
    bool m_is_instance_item_isSet;
    bool m_is_instance_item_isValid;

    qint32 m_max_stack_size;
    bool m_max_stack_size_isSet;
    bool m_max_stack_size_isValid;

    qint32 m_recipe_item_hash;
    bool m_recipe_item_hash_isSet;
    bool m_recipe_item_hash_isValid;

    qint32 m_recovery_bucket_type_hash;
    bool m_recovery_bucket_type_hash_isSet;
    bool m_recovery_bucket_type_hash_isValid;

    QString m_stack_unique_label;
    bool m_stack_unique_label_isSet;
    bool m_stack_unique_label_isValid;

    bool m_suppress_expiration_when_objectives_complete;
    bool m_suppress_expiration_when_objectives_complete_isSet;
    bool m_suppress_expiration_when_objectives_complete_isValid;

    qint32 m_tier_type;
    bool m_tier_type_isSet;
    bool m_tier_type_isValid;

    qint32 m_tier_type_hash;
    bool m_tier_type_hash_isSet;
    bool m_tier_type_hash_isValid;

    QString m_tier_type_name;
    bool m_tier_type_name_isSet;
    bool m_tier_type_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyItemInventoryBlockDefinition)

#endif // OAIDestiny_Definitions_DestinyItemInventoryBlockDefinition_H
