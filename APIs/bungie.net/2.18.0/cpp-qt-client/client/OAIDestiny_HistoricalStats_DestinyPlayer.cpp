/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_HistoricalStats_DestinyPlayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_HistoricalStats_DestinyPlayer::OAIDestiny_HistoricalStats_DestinyPlayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_HistoricalStats_DestinyPlayer::OAIDestiny_HistoricalStats_DestinyPlayer() {
    this->initializeModel();
}

OAIDestiny_HistoricalStats_DestinyPlayer::~OAIDestiny_HistoricalStats_DestinyPlayer() {}

void OAIDestiny_HistoricalStats_DestinyPlayer::initializeModel() {

    m_bungie_net_user_info_isSet = false;
    m_bungie_net_user_info_isValid = false;

    m_character_class_isSet = false;
    m_character_class_isValid = false;

    m_character_level_isSet = false;
    m_character_level_isValid = false;

    m_clan_name_isSet = false;
    m_clan_name_isValid = false;

    m_clan_tag_isSet = false;
    m_clan_tag_isValid = false;

    m_class_hash_isSet = false;
    m_class_hash_isValid = false;

    m_destiny_user_info_isSet = false;
    m_destiny_user_info_isValid = false;

    m_emblem_hash_isSet = false;
    m_emblem_hash_isValid = false;

    m_gender_hash_isSet = false;
    m_gender_hash_isValid = false;

    m_light_level_isSet = false;
    m_light_level_isValid = false;

    m_race_hash_isSet = false;
    m_race_hash_isValid = false;
}

void OAIDestiny_HistoricalStats_DestinyPlayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_HistoricalStats_DestinyPlayer::fromJsonObject(QJsonObject json) {

    m_bungie_net_user_info_isValid = ::OpenAPI::fromJsonValue(m_bungie_net_user_info, json[QString("bungieNetUserInfo")]);
    m_bungie_net_user_info_isSet = !json[QString("bungieNetUserInfo")].isNull() && m_bungie_net_user_info_isValid;

    m_character_class_isValid = ::OpenAPI::fromJsonValue(m_character_class, json[QString("characterClass")]);
    m_character_class_isSet = !json[QString("characterClass")].isNull() && m_character_class_isValid;

    m_character_level_isValid = ::OpenAPI::fromJsonValue(m_character_level, json[QString("characterLevel")]);
    m_character_level_isSet = !json[QString("characterLevel")].isNull() && m_character_level_isValid;

    m_clan_name_isValid = ::OpenAPI::fromJsonValue(m_clan_name, json[QString("clanName")]);
    m_clan_name_isSet = !json[QString("clanName")].isNull() && m_clan_name_isValid;

    m_clan_tag_isValid = ::OpenAPI::fromJsonValue(m_clan_tag, json[QString("clanTag")]);
    m_clan_tag_isSet = !json[QString("clanTag")].isNull() && m_clan_tag_isValid;

    m_class_hash_isValid = ::OpenAPI::fromJsonValue(m_class_hash, json[QString("classHash")]);
    m_class_hash_isSet = !json[QString("classHash")].isNull() && m_class_hash_isValid;

    m_destiny_user_info_isValid = ::OpenAPI::fromJsonValue(m_destiny_user_info, json[QString("destinyUserInfo")]);
    m_destiny_user_info_isSet = !json[QString("destinyUserInfo")].isNull() && m_destiny_user_info_isValid;

    m_emblem_hash_isValid = ::OpenAPI::fromJsonValue(m_emblem_hash, json[QString("emblemHash")]);
    m_emblem_hash_isSet = !json[QString("emblemHash")].isNull() && m_emblem_hash_isValid;

    m_gender_hash_isValid = ::OpenAPI::fromJsonValue(m_gender_hash, json[QString("genderHash")]);
    m_gender_hash_isSet = !json[QString("genderHash")].isNull() && m_gender_hash_isValid;

    m_light_level_isValid = ::OpenAPI::fromJsonValue(m_light_level, json[QString("lightLevel")]);
    m_light_level_isSet = !json[QString("lightLevel")].isNull() && m_light_level_isValid;

    m_race_hash_isValid = ::OpenAPI::fromJsonValue(m_race_hash, json[QString("raceHash")]);
    m_race_hash_isSet = !json[QString("raceHash")].isNull() && m_race_hash_isValid;
}

QString OAIDestiny_HistoricalStats_DestinyPlayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_HistoricalStats_DestinyPlayer::asJsonObject() const {
    QJsonObject obj;
    if (m_bungie_net_user_info.isSet()) {
        obj.insert(QString("bungieNetUserInfo"), ::OpenAPI::toJsonValue(m_bungie_net_user_info));
    }
    if (m_character_class_isSet) {
        obj.insert(QString("characterClass"), ::OpenAPI::toJsonValue(m_character_class));
    }
    if (m_character_level_isSet) {
        obj.insert(QString("characterLevel"), ::OpenAPI::toJsonValue(m_character_level));
    }
    if (m_clan_name_isSet) {
        obj.insert(QString("clanName"), ::OpenAPI::toJsonValue(m_clan_name));
    }
    if (m_clan_tag_isSet) {
        obj.insert(QString("clanTag"), ::OpenAPI::toJsonValue(m_clan_tag));
    }
    if (m_class_hash_isSet) {
        obj.insert(QString("classHash"), ::OpenAPI::toJsonValue(m_class_hash));
    }
    if (m_destiny_user_info.isSet()) {
        obj.insert(QString("destinyUserInfo"), ::OpenAPI::toJsonValue(m_destiny_user_info));
    }
    if (m_emblem_hash_isSet) {
        obj.insert(QString("emblemHash"), ::OpenAPI::toJsonValue(m_emblem_hash));
    }
    if (m_gender_hash_isSet) {
        obj.insert(QString("genderHash"), ::OpenAPI::toJsonValue(m_gender_hash));
    }
    if (m_light_level_isSet) {
        obj.insert(QString("lightLevel"), ::OpenAPI::toJsonValue(m_light_level));
    }
    if (m_race_hash_isSet) {
        obj.insert(QString("raceHash"), ::OpenAPI::toJsonValue(m_race_hash));
    }
    return obj;
}

OAIUser_UserInfoCard OAIDestiny_HistoricalStats_DestinyPlayer::getBungieNetUserInfo() const {
    return m_bungie_net_user_info;
}
void OAIDestiny_HistoricalStats_DestinyPlayer::setBungieNetUserInfo(const OAIUser_UserInfoCard &bungie_net_user_info) {
    m_bungie_net_user_info = bungie_net_user_info;
    m_bungie_net_user_info_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::is_bungie_net_user_info_Set() const{
    return m_bungie_net_user_info_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::is_bungie_net_user_info_Valid() const{
    return m_bungie_net_user_info_isValid;
}

QString OAIDestiny_HistoricalStats_DestinyPlayer::getCharacterClass() const {
    return m_character_class;
}
void OAIDestiny_HistoricalStats_DestinyPlayer::setCharacterClass(const QString &character_class) {
    m_character_class = character_class;
    m_character_class_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::is_character_class_Set() const{
    return m_character_class_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::is_character_class_Valid() const{
    return m_character_class_isValid;
}

qint32 OAIDestiny_HistoricalStats_DestinyPlayer::getCharacterLevel() const {
    return m_character_level;
}
void OAIDestiny_HistoricalStats_DestinyPlayer::setCharacterLevel(const qint32 &character_level) {
    m_character_level = character_level;
    m_character_level_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::is_character_level_Set() const{
    return m_character_level_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::is_character_level_Valid() const{
    return m_character_level_isValid;
}

QString OAIDestiny_HistoricalStats_DestinyPlayer::getClanName() const {
    return m_clan_name;
}
void OAIDestiny_HistoricalStats_DestinyPlayer::setClanName(const QString &clan_name) {
    m_clan_name = clan_name;
    m_clan_name_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::is_clan_name_Set() const{
    return m_clan_name_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::is_clan_name_Valid() const{
    return m_clan_name_isValid;
}

QString OAIDestiny_HistoricalStats_DestinyPlayer::getClanTag() const {
    return m_clan_tag;
}
void OAIDestiny_HistoricalStats_DestinyPlayer::setClanTag(const QString &clan_tag) {
    m_clan_tag = clan_tag;
    m_clan_tag_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::is_clan_tag_Set() const{
    return m_clan_tag_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::is_clan_tag_Valid() const{
    return m_clan_tag_isValid;
}

qint32 OAIDestiny_HistoricalStats_DestinyPlayer::getClassHash() const {
    return m_class_hash;
}
void OAIDestiny_HistoricalStats_DestinyPlayer::setClassHash(const qint32 &class_hash) {
    m_class_hash = class_hash;
    m_class_hash_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::is_class_hash_Set() const{
    return m_class_hash_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::is_class_hash_Valid() const{
    return m_class_hash_isValid;
}

OAIUser_UserInfoCard OAIDestiny_HistoricalStats_DestinyPlayer::getDestinyUserInfo() const {
    return m_destiny_user_info;
}
void OAIDestiny_HistoricalStats_DestinyPlayer::setDestinyUserInfo(const OAIUser_UserInfoCard &destiny_user_info) {
    m_destiny_user_info = destiny_user_info;
    m_destiny_user_info_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::is_destiny_user_info_Set() const{
    return m_destiny_user_info_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::is_destiny_user_info_Valid() const{
    return m_destiny_user_info_isValid;
}

qint32 OAIDestiny_HistoricalStats_DestinyPlayer::getEmblemHash() const {
    return m_emblem_hash;
}
void OAIDestiny_HistoricalStats_DestinyPlayer::setEmblemHash(const qint32 &emblem_hash) {
    m_emblem_hash = emblem_hash;
    m_emblem_hash_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::is_emblem_hash_Set() const{
    return m_emblem_hash_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::is_emblem_hash_Valid() const{
    return m_emblem_hash_isValid;
}

qint32 OAIDestiny_HistoricalStats_DestinyPlayer::getGenderHash() const {
    return m_gender_hash;
}
void OAIDestiny_HistoricalStats_DestinyPlayer::setGenderHash(const qint32 &gender_hash) {
    m_gender_hash = gender_hash;
    m_gender_hash_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::is_gender_hash_Set() const{
    return m_gender_hash_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::is_gender_hash_Valid() const{
    return m_gender_hash_isValid;
}

qint32 OAIDestiny_HistoricalStats_DestinyPlayer::getLightLevel() const {
    return m_light_level;
}
void OAIDestiny_HistoricalStats_DestinyPlayer::setLightLevel(const qint32 &light_level) {
    m_light_level = light_level;
    m_light_level_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::is_light_level_Set() const{
    return m_light_level_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::is_light_level_Valid() const{
    return m_light_level_isValid;
}

qint32 OAIDestiny_HistoricalStats_DestinyPlayer::getRaceHash() const {
    return m_race_hash;
}
void OAIDestiny_HistoricalStats_DestinyPlayer::setRaceHash(const qint32 &race_hash) {
    m_race_hash = race_hash;
    m_race_hash_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::is_race_hash_Set() const{
    return m_race_hash_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::is_race_hash_Valid() const{
    return m_race_hash_isValid;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bungie_net_user_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clan_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clan_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destiny_user_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_emblem_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_light_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_race_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_HistoricalStats_DestinyPlayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
