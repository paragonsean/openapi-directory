/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::~OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition() {}

void OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::initializeModel() {

    m_is_matchmade_isSet = false;
    m_is_matchmade_isValid = false;

    m_max_party_isSet = false;
    m_max_party_isValid = false;

    m_max_players_isSet = false;
    m_max_players_isValid = false;

    m_min_party_isSet = false;
    m_min_party_isValid = false;

    m_requires_guardian_oath_isSet = false;
    m_requires_guardian_oath_isValid = false;
}

void OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::fromJsonObject(QJsonObject json) {

    m_is_matchmade_isValid = ::OpenAPI::fromJsonValue(m_is_matchmade, json[QString("isMatchmade")]);
    m_is_matchmade_isSet = !json[QString("isMatchmade")].isNull() && m_is_matchmade_isValid;

    m_max_party_isValid = ::OpenAPI::fromJsonValue(m_max_party, json[QString("maxParty")]);
    m_max_party_isSet = !json[QString("maxParty")].isNull() && m_max_party_isValid;

    m_max_players_isValid = ::OpenAPI::fromJsonValue(m_max_players, json[QString("maxPlayers")]);
    m_max_players_isSet = !json[QString("maxPlayers")].isNull() && m_max_players_isValid;

    m_min_party_isValid = ::OpenAPI::fromJsonValue(m_min_party, json[QString("minParty")]);
    m_min_party_isSet = !json[QString("minParty")].isNull() && m_min_party_isValid;

    m_requires_guardian_oath_isValid = ::OpenAPI::fromJsonValue(m_requires_guardian_oath, json[QString("requiresGuardianOath")]);
    m_requires_guardian_oath_isSet = !json[QString("requiresGuardianOath")].isNull() && m_requires_guardian_oath_isValid;
}

QString OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_is_matchmade_isSet) {
        obj.insert(QString("isMatchmade"), ::OpenAPI::toJsonValue(m_is_matchmade));
    }
    if (m_max_party_isSet) {
        obj.insert(QString("maxParty"), ::OpenAPI::toJsonValue(m_max_party));
    }
    if (m_max_players_isSet) {
        obj.insert(QString("maxPlayers"), ::OpenAPI::toJsonValue(m_max_players));
    }
    if (m_min_party_isSet) {
        obj.insert(QString("minParty"), ::OpenAPI::toJsonValue(m_min_party));
    }
    if (m_requires_guardian_oath_isSet) {
        obj.insert(QString("requiresGuardianOath"), ::OpenAPI::toJsonValue(m_requires_guardian_oath));
    }
    return obj;
}

bool OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::isIsMatchmade() const {
    return m_is_matchmade;
}
void OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::setIsMatchmade(const bool &is_matchmade) {
    m_is_matchmade = is_matchmade;
    m_is_matchmade_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::is_is_matchmade_Set() const{
    return m_is_matchmade_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::is_is_matchmade_Valid() const{
    return m_is_matchmade_isValid;
}

qint32 OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::getMaxParty() const {
    return m_max_party;
}
void OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::setMaxParty(const qint32 &max_party) {
    m_max_party = max_party;
    m_max_party_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::is_max_party_Set() const{
    return m_max_party_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::is_max_party_Valid() const{
    return m_max_party_isValid;
}

qint32 OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::getMaxPlayers() const {
    return m_max_players;
}
void OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::setMaxPlayers(const qint32 &max_players) {
    m_max_players = max_players;
    m_max_players_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::is_max_players_Set() const{
    return m_max_players_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::is_max_players_Valid() const{
    return m_max_players_isValid;
}

qint32 OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::getMinParty() const {
    return m_min_party;
}
void OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::setMinParty(const qint32 &min_party) {
    m_min_party = min_party;
    m_min_party_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::is_min_party_Set() const{
    return m_min_party_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::is_min_party_Valid() const{
    return m_min_party_isValid;
}

bool OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::isRequiresGuardianOath() const {
    return m_requires_guardian_oath;
}
void OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::setRequiresGuardianOath(const bool &requires_guardian_oath) {
    m_requires_guardian_oath = requires_guardian_oath;
    m_requires_guardian_oath_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::is_requires_guardian_oath_Set() const{
    return m_requires_guardian_oath_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::is_requires_guardian_oath_Valid() const{
    return m_requires_guardian_oath_isValid;
}

bool OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_matchmade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_party_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_players_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_party_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_guardian_oath_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
