/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_EMailSettingSubscriptionLocalization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_EMailSettingSubscriptionLocalization::OAIUser_EMailSettingSubscriptionLocalization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_EMailSettingSubscriptionLocalization::OAIUser_EMailSettingSubscriptionLocalization() {
    this->initializeModel();
}

OAIUser_EMailSettingSubscriptionLocalization::~OAIUser_EMailSettingSubscriptionLocalization() {}

void OAIUser_EMailSettingSubscriptionLocalization::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_known_user_action_text_isSet = false;
    m_known_user_action_text_isValid = false;

    m_registered_user_description_isSet = false;
    m_registered_user_description_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_unknown_user_action_text_isSet = false;
    m_unknown_user_action_text_isValid = false;

    m_unknown_user_description_isSet = false;
    m_unknown_user_description_isValid = false;

    m_unregistered_user_description_isSet = false;
    m_unregistered_user_description_isValid = false;
}

void OAIUser_EMailSettingSubscriptionLocalization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_EMailSettingSubscriptionLocalization::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_known_user_action_text_isValid = ::OpenAPI::fromJsonValue(m_known_user_action_text, json[QString("knownUserActionText")]);
    m_known_user_action_text_isSet = !json[QString("knownUserActionText")].isNull() && m_known_user_action_text_isValid;

    m_registered_user_description_isValid = ::OpenAPI::fromJsonValue(m_registered_user_description, json[QString("registeredUserDescription")]);
    m_registered_user_description_isSet = !json[QString("registeredUserDescription")].isNull() && m_registered_user_description_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_unknown_user_action_text_isValid = ::OpenAPI::fromJsonValue(m_unknown_user_action_text, json[QString("unknownUserActionText")]);
    m_unknown_user_action_text_isSet = !json[QString("unknownUserActionText")].isNull() && m_unknown_user_action_text_isValid;

    m_unknown_user_description_isValid = ::OpenAPI::fromJsonValue(m_unknown_user_description, json[QString("unknownUserDescription")]);
    m_unknown_user_description_isSet = !json[QString("unknownUserDescription")].isNull() && m_unknown_user_description_isValid;

    m_unregistered_user_description_isValid = ::OpenAPI::fromJsonValue(m_unregistered_user_description, json[QString("unregisteredUserDescription")]);
    m_unregistered_user_description_isSet = !json[QString("unregisteredUserDescription")].isNull() && m_unregistered_user_description_isValid;
}

QString OAIUser_EMailSettingSubscriptionLocalization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_EMailSettingSubscriptionLocalization::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_known_user_action_text_isSet) {
        obj.insert(QString("knownUserActionText"), ::OpenAPI::toJsonValue(m_known_user_action_text));
    }
    if (m_registered_user_description_isSet) {
        obj.insert(QString("registeredUserDescription"), ::OpenAPI::toJsonValue(m_registered_user_description));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_unknown_user_action_text_isSet) {
        obj.insert(QString("unknownUserActionText"), ::OpenAPI::toJsonValue(m_unknown_user_action_text));
    }
    if (m_unknown_user_description_isSet) {
        obj.insert(QString("unknownUserDescription"), ::OpenAPI::toJsonValue(m_unknown_user_description));
    }
    if (m_unregistered_user_description_isSet) {
        obj.insert(QString("unregisteredUserDescription"), ::OpenAPI::toJsonValue(m_unregistered_user_description));
    }
    return obj;
}

QString OAIUser_EMailSettingSubscriptionLocalization::getDescription() const {
    return m_description;
}
void OAIUser_EMailSettingSubscriptionLocalization::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUser_EMailSettingSubscriptionLocalization::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUser_EMailSettingSubscriptionLocalization::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUser_EMailSettingSubscriptionLocalization::getKnownUserActionText() const {
    return m_known_user_action_text;
}
void OAIUser_EMailSettingSubscriptionLocalization::setKnownUserActionText(const QString &known_user_action_text) {
    m_known_user_action_text = known_user_action_text;
    m_known_user_action_text_isSet = true;
}

bool OAIUser_EMailSettingSubscriptionLocalization::is_known_user_action_text_Set() const{
    return m_known_user_action_text_isSet;
}

bool OAIUser_EMailSettingSubscriptionLocalization::is_known_user_action_text_Valid() const{
    return m_known_user_action_text_isValid;
}

QString OAIUser_EMailSettingSubscriptionLocalization::getRegisteredUserDescription() const {
    return m_registered_user_description;
}
void OAIUser_EMailSettingSubscriptionLocalization::setRegisteredUserDescription(const QString &registered_user_description) {
    m_registered_user_description = registered_user_description;
    m_registered_user_description_isSet = true;
}

bool OAIUser_EMailSettingSubscriptionLocalization::is_registered_user_description_Set() const{
    return m_registered_user_description_isSet;
}

bool OAIUser_EMailSettingSubscriptionLocalization::is_registered_user_description_Valid() const{
    return m_registered_user_description_isValid;
}

QString OAIUser_EMailSettingSubscriptionLocalization::getTitle() const {
    return m_title;
}
void OAIUser_EMailSettingSubscriptionLocalization::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIUser_EMailSettingSubscriptionLocalization::is_title_Set() const{
    return m_title_isSet;
}

bool OAIUser_EMailSettingSubscriptionLocalization::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIUser_EMailSettingSubscriptionLocalization::getUnknownUserActionText() const {
    return m_unknown_user_action_text;
}
void OAIUser_EMailSettingSubscriptionLocalization::setUnknownUserActionText(const QString &unknown_user_action_text) {
    m_unknown_user_action_text = unknown_user_action_text;
    m_unknown_user_action_text_isSet = true;
}

bool OAIUser_EMailSettingSubscriptionLocalization::is_unknown_user_action_text_Set() const{
    return m_unknown_user_action_text_isSet;
}

bool OAIUser_EMailSettingSubscriptionLocalization::is_unknown_user_action_text_Valid() const{
    return m_unknown_user_action_text_isValid;
}

QString OAIUser_EMailSettingSubscriptionLocalization::getUnknownUserDescription() const {
    return m_unknown_user_description;
}
void OAIUser_EMailSettingSubscriptionLocalization::setUnknownUserDescription(const QString &unknown_user_description) {
    m_unknown_user_description = unknown_user_description;
    m_unknown_user_description_isSet = true;
}

bool OAIUser_EMailSettingSubscriptionLocalization::is_unknown_user_description_Set() const{
    return m_unknown_user_description_isSet;
}

bool OAIUser_EMailSettingSubscriptionLocalization::is_unknown_user_description_Valid() const{
    return m_unknown_user_description_isValid;
}

QString OAIUser_EMailSettingSubscriptionLocalization::getUnregisteredUserDescription() const {
    return m_unregistered_user_description;
}
void OAIUser_EMailSettingSubscriptionLocalization::setUnregisteredUserDescription(const QString &unregistered_user_description) {
    m_unregistered_user_description = unregistered_user_description;
    m_unregistered_user_description_isSet = true;
}

bool OAIUser_EMailSettingSubscriptionLocalization::is_unregistered_user_description_Set() const{
    return m_unregistered_user_description_isSet;
}

bool OAIUser_EMailSettingSubscriptionLocalization::is_unregistered_user_description_Valid() const{
    return m_unregistered_user_description_isValid;
}

bool OAIUser_EMailSettingSubscriptionLocalization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_known_user_action_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_user_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unknown_user_action_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unknown_user_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unregistered_user_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_EMailSettingSubscriptionLocalization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
