/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::~OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition() {}

void OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::initializeModel() {

    m_black_icon_image_path_isSet = false;
    m_black_icon_image_path_isValid = false;

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_loadout_color_hashes_isSet = false;
    m_loadout_color_hashes_isValid = false;

    m_loadout_count_per_character_isSet = false;
    m_loadout_count_per_character_isValid = false;

    m_loadout_icon_hashes_isSet = false;
    m_loadout_icon_hashes_isValid = false;

    m_loadout_name_hashes_isSet = false;
    m_loadout_name_hashes_isValid = false;

    m_loadout_preview_filter_out_socket_category_hashes_isSet = false;
    m_loadout_preview_filter_out_socket_category_hashes_isValid = false;

    m_loadout_preview_filter_out_socket_type_hashes_isSet = false;
    m_loadout_preview_filter_out_socket_type_hashes_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;

    m_white_icon_image_path_isSet = false;
    m_white_icon_image_path_isValid = false;
}

void OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::fromJsonObject(QJsonObject json) {

    m_black_icon_image_path_isValid = ::OpenAPI::fromJsonValue(m_black_icon_image_path, json[QString("blackIconImagePath")]);
    m_black_icon_image_path_isSet = !json[QString("blackIconImagePath")].isNull() && m_black_icon_image_path_isValid;

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_loadout_color_hashes_isValid = ::OpenAPI::fromJsonValue(m_loadout_color_hashes, json[QString("loadoutColorHashes")]);
    m_loadout_color_hashes_isSet = !json[QString("loadoutColorHashes")].isNull() && m_loadout_color_hashes_isValid;

    m_loadout_count_per_character_isValid = ::OpenAPI::fromJsonValue(m_loadout_count_per_character, json[QString("loadoutCountPerCharacter")]);
    m_loadout_count_per_character_isSet = !json[QString("loadoutCountPerCharacter")].isNull() && m_loadout_count_per_character_isValid;

    m_loadout_icon_hashes_isValid = ::OpenAPI::fromJsonValue(m_loadout_icon_hashes, json[QString("loadoutIconHashes")]);
    m_loadout_icon_hashes_isSet = !json[QString("loadoutIconHashes")].isNull() && m_loadout_icon_hashes_isValid;

    m_loadout_name_hashes_isValid = ::OpenAPI::fromJsonValue(m_loadout_name_hashes, json[QString("loadoutNameHashes")]);
    m_loadout_name_hashes_isSet = !json[QString("loadoutNameHashes")].isNull() && m_loadout_name_hashes_isValid;

    m_loadout_preview_filter_out_socket_category_hashes_isValid = ::OpenAPI::fromJsonValue(m_loadout_preview_filter_out_socket_category_hashes, json[QString("loadoutPreviewFilterOutSocketCategoryHashes")]);
    m_loadout_preview_filter_out_socket_category_hashes_isSet = !json[QString("loadoutPreviewFilterOutSocketCategoryHashes")].isNull() && m_loadout_preview_filter_out_socket_category_hashes_isValid;

    m_loadout_preview_filter_out_socket_type_hashes_isValid = ::OpenAPI::fromJsonValue(m_loadout_preview_filter_out_socket_type_hashes, json[QString("loadoutPreviewFilterOutSocketTypeHashes")]);
    m_loadout_preview_filter_out_socket_type_hashes_isSet = !json[QString("loadoutPreviewFilterOutSocketTypeHashes")].isNull() && m_loadout_preview_filter_out_socket_type_hashes_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;

    m_white_icon_image_path_isValid = ::OpenAPI::fromJsonValue(m_white_icon_image_path, json[QString("whiteIconImagePath")]);
    m_white_icon_image_path_isSet = !json[QString("whiteIconImagePath")].isNull() && m_white_icon_image_path_isValid;
}

QString OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_black_icon_image_path_isSet) {
        obj.insert(QString("blackIconImagePath"), ::OpenAPI::toJsonValue(m_black_icon_image_path));
    }
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_loadout_color_hashes.size() > 0) {
        obj.insert(QString("loadoutColorHashes"), ::OpenAPI::toJsonValue(m_loadout_color_hashes));
    }
    if (m_loadout_count_per_character_isSet) {
        obj.insert(QString("loadoutCountPerCharacter"), ::OpenAPI::toJsonValue(m_loadout_count_per_character));
    }
    if (m_loadout_icon_hashes.size() > 0) {
        obj.insert(QString("loadoutIconHashes"), ::OpenAPI::toJsonValue(m_loadout_icon_hashes));
    }
    if (m_loadout_name_hashes.size() > 0) {
        obj.insert(QString("loadoutNameHashes"), ::OpenAPI::toJsonValue(m_loadout_name_hashes));
    }
    if (m_loadout_preview_filter_out_socket_category_hashes.size() > 0) {
        obj.insert(QString("loadoutPreviewFilterOutSocketCategoryHashes"), ::OpenAPI::toJsonValue(m_loadout_preview_filter_out_socket_category_hashes));
    }
    if (m_loadout_preview_filter_out_socket_type_hashes.size() > 0) {
        obj.insert(QString("loadoutPreviewFilterOutSocketTypeHashes"), ::OpenAPI::toJsonValue(m_loadout_preview_filter_out_socket_type_hashes));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    if (m_white_icon_image_path_isSet) {
        obj.insert(QString("whiteIconImagePath"), ::OpenAPI::toJsonValue(m_white_icon_image_path));
    }
    return obj;
}

QString OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::getBlackIconImagePath() const {
    return m_black_icon_image_path;
}
void OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::setBlackIconImagePath(const QString &black_icon_image_path) {
    m_black_icon_image_path = black_icon_image_path;
    m_black_icon_image_path_isSet = true;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_black_icon_image_path_Set() const{
    return m_black_icon_image_path_isSet;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_black_icon_image_path_Valid() const{
    return m_black_icon_image_path_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

qint32 OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_index_Valid() const{
    return m_index_isValid;
}

QList<qint32> OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::getLoadoutColorHashes() const {
    return m_loadout_color_hashes;
}
void OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::setLoadoutColorHashes(const QList<qint32> &loadout_color_hashes) {
    m_loadout_color_hashes = loadout_color_hashes;
    m_loadout_color_hashes_isSet = true;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_loadout_color_hashes_Set() const{
    return m_loadout_color_hashes_isSet;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_loadout_color_hashes_Valid() const{
    return m_loadout_color_hashes_isValid;
}

qint32 OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::getLoadoutCountPerCharacter() const {
    return m_loadout_count_per_character;
}
void OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::setLoadoutCountPerCharacter(const qint32 &loadout_count_per_character) {
    m_loadout_count_per_character = loadout_count_per_character;
    m_loadout_count_per_character_isSet = true;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_loadout_count_per_character_Set() const{
    return m_loadout_count_per_character_isSet;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_loadout_count_per_character_Valid() const{
    return m_loadout_count_per_character_isValid;
}

QList<qint32> OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::getLoadoutIconHashes() const {
    return m_loadout_icon_hashes;
}
void OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::setLoadoutIconHashes(const QList<qint32> &loadout_icon_hashes) {
    m_loadout_icon_hashes = loadout_icon_hashes;
    m_loadout_icon_hashes_isSet = true;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_loadout_icon_hashes_Set() const{
    return m_loadout_icon_hashes_isSet;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_loadout_icon_hashes_Valid() const{
    return m_loadout_icon_hashes_isValid;
}

QList<qint32> OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::getLoadoutNameHashes() const {
    return m_loadout_name_hashes;
}
void OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::setLoadoutNameHashes(const QList<qint32> &loadout_name_hashes) {
    m_loadout_name_hashes = loadout_name_hashes;
    m_loadout_name_hashes_isSet = true;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_loadout_name_hashes_Set() const{
    return m_loadout_name_hashes_isSet;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_loadout_name_hashes_Valid() const{
    return m_loadout_name_hashes_isValid;
}

QList<qint32> OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::getLoadoutPreviewFilterOutSocketCategoryHashes() const {
    return m_loadout_preview_filter_out_socket_category_hashes;
}
void OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::setLoadoutPreviewFilterOutSocketCategoryHashes(const QList<qint32> &loadout_preview_filter_out_socket_category_hashes) {
    m_loadout_preview_filter_out_socket_category_hashes = loadout_preview_filter_out_socket_category_hashes;
    m_loadout_preview_filter_out_socket_category_hashes_isSet = true;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_loadout_preview_filter_out_socket_category_hashes_Set() const{
    return m_loadout_preview_filter_out_socket_category_hashes_isSet;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_loadout_preview_filter_out_socket_category_hashes_Valid() const{
    return m_loadout_preview_filter_out_socket_category_hashes_isValid;
}

QList<qint32> OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::getLoadoutPreviewFilterOutSocketTypeHashes() const {
    return m_loadout_preview_filter_out_socket_type_hashes;
}
void OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::setLoadoutPreviewFilterOutSocketTypeHashes(const QList<qint32> &loadout_preview_filter_out_socket_type_hashes) {
    m_loadout_preview_filter_out_socket_type_hashes = loadout_preview_filter_out_socket_type_hashes;
    m_loadout_preview_filter_out_socket_type_hashes_isSet = true;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_loadout_preview_filter_out_socket_type_hashes_Set() const{
    return m_loadout_preview_filter_out_socket_type_hashes_isSet;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_loadout_preview_filter_out_socket_type_hashes_Valid() const{
    return m_loadout_preview_filter_out_socket_type_hashes_isValid;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

QString OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::getWhiteIconImagePath() const {
    return m_white_icon_image_path;
}
void OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::setWhiteIconImagePath(const QString &white_icon_image_path) {
    m_white_icon_image_path = white_icon_image_path;
    m_white_icon_image_path_isSet = true;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_white_icon_image_path_Set() const{
    return m_white_icon_image_path_isSet;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::is_white_icon_image_path_Valid() const{
    return m_white_icon_image_path_isValid;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_black_icon_image_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loadout_color_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_loadout_count_per_character_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loadout_icon_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_loadout_name_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_loadout_preview_filter_out_socket_category_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_loadout_preview_filter_out_socket_type_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_white_icon_image_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_Loadouts_DestinyLoadoutConstantsDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
