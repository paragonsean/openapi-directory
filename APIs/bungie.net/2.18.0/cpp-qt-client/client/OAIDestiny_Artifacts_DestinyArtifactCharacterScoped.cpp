/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Artifacts_DestinyArtifactCharacterScoped.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::OAIDestiny_Artifacts_DestinyArtifactCharacterScoped(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::OAIDestiny_Artifacts_DestinyArtifactCharacterScoped() {
    this->initializeModel();
}

OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::~OAIDestiny_Artifacts_DestinyArtifactCharacterScoped() {}

void OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::initializeModel() {

    m_artifact_hash_isSet = false;
    m_artifact_hash_isValid = false;

    m_points_used_isSet = false;
    m_points_used_isValid = false;

    m_reset_count_isSet = false;
    m_reset_count_isValid = false;

    m_tiers_isSet = false;
    m_tiers_isValid = false;
}

void OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::fromJsonObject(QJsonObject json) {

    m_artifact_hash_isValid = ::OpenAPI::fromJsonValue(m_artifact_hash, json[QString("artifactHash")]);
    m_artifact_hash_isSet = !json[QString("artifactHash")].isNull() && m_artifact_hash_isValid;

    m_points_used_isValid = ::OpenAPI::fromJsonValue(m_points_used, json[QString("pointsUsed")]);
    m_points_used_isSet = !json[QString("pointsUsed")].isNull() && m_points_used_isValid;

    m_reset_count_isValid = ::OpenAPI::fromJsonValue(m_reset_count, json[QString("resetCount")]);
    m_reset_count_isSet = !json[QString("resetCount")].isNull() && m_reset_count_isValid;

    m_tiers_isValid = ::OpenAPI::fromJsonValue(m_tiers, json[QString("tiers")]);
    m_tiers_isSet = !json[QString("tiers")].isNull() && m_tiers_isValid;
}

QString OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_hash_isSet) {
        obj.insert(QString("artifactHash"), ::OpenAPI::toJsonValue(m_artifact_hash));
    }
    if (m_points_used_isSet) {
        obj.insert(QString("pointsUsed"), ::OpenAPI::toJsonValue(m_points_used));
    }
    if (m_reset_count_isSet) {
        obj.insert(QString("resetCount"), ::OpenAPI::toJsonValue(m_reset_count));
    }
    if (m_tiers.size() > 0) {
        obj.insert(QString("tiers"), ::OpenAPI::toJsonValue(m_tiers));
    }
    return obj;
}

qint32 OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::getArtifactHash() const {
    return m_artifact_hash;
}
void OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::setArtifactHash(const qint32 &artifact_hash) {
    m_artifact_hash = artifact_hash;
    m_artifact_hash_isSet = true;
}

bool OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::is_artifact_hash_Set() const{
    return m_artifact_hash_isSet;
}

bool OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::is_artifact_hash_Valid() const{
    return m_artifact_hash_isValid;
}

qint32 OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::getPointsUsed() const {
    return m_points_used;
}
void OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::setPointsUsed(const qint32 &points_used) {
    m_points_used = points_used;
    m_points_used_isSet = true;
}

bool OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::is_points_used_Set() const{
    return m_points_used_isSet;
}

bool OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::is_points_used_Valid() const{
    return m_points_used_isValid;
}

qint32 OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::getResetCount() const {
    return m_reset_count;
}
void OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::setResetCount(const qint32 &reset_count) {
    m_reset_count = reset_count;
    m_reset_count_isSet = true;
}

bool OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::is_reset_count_Set() const{
    return m_reset_count_isSet;
}

bool OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::is_reset_count_Valid() const{
    return m_reset_count_isValid;
}

QList<OAIDestiny_Artifacts_DestinyArtifactTier> OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::getTiers() const {
    return m_tiers;
}
void OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::setTiers(const QList<OAIDestiny_Artifacts_DestinyArtifactTier> &tiers) {
    m_tiers = tiers;
    m_tiers_isSet = true;
}

bool OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::is_tiers_Set() const{
    return m_tiers_isSet;
}

bool OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::is_tiers_Valid() const{
    return m_tiers_isValid;
}

bool OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Artifacts_DestinyArtifactCharacterScoped::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
