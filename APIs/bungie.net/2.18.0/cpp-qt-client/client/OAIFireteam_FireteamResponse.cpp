/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFireteam_FireteamResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFireteam_FireteamResponse::OAIFireteam_FireteamResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFireteam_FireteamResponse::OAIFireteam_FireteamResponse() {
    this->initializeModel();
}

OAIFireteam_FireteamResponse::~OAIFireteam_FireteamResponse() {}

void OAIFireteam_FireteamResponse::initializeModel() {

    m_alternates_isSet = false;
    m_alternates_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAIFireteam_FireteamResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFireteam_FireteamResponse::fromJsonObject(QJsonObject json) {

    m_alternates_isValid = ::OpenAPI::fromJsonValue(m_alternates, json[QString("Alternates")]);
    m_alternates_isSet = !json[QString("Alternates")].isNull() && m_alternates_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("Members")]);
    m_members_isSet = !json[QString("Members")].isNull() && m_members_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("Summary")]);
    m_summary_isSet = !json[QString("Summary")].isNull() && m_summary_isValid;
}

QString OAIFireteam_FireteamResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFireteam_FireteamResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_alternates.size() > 0) {
        obj.insert(QString("Alternates"), ::OpenAPI::toJsonValue(m_alternates));
    }
    if (m_members.size() > 0) {
        obj.insert(QString("Members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_summary.isSet()) {
        obj.insert(QString("Summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QList<OAIFireteam_FireteamMember> OAIFireteam_FireteamResponse::getAlternates() const {
    return m_alternates;
}
void OAIFireteam_FireteamResponse::setAlternates(const QList<OAIFireteam_FireteamMember> &alternates) {
    m_alternates = alternates;
    m_alternates_isSet = true;
}

bool OAIFireteam_FireteamResponse::is_alternates_Set() const{
    return m_alternates_isSet;
}

bool OAIFireteam_FireteamResponse::is_alternates_Valid() const{
    return m_alternates_isValid;
}

QList<OAIFireteam_FireteamMember> OAIFireteam_FireteamResponse::getMembers() const {
    return m_members;
}
void OAIFireteam_FireteamResponse::setMembers(const QList<OAIFireteam_FireteamMember> &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAIFireteam_FireteamResponse::is_members_Set() const{
    return m_members_isSet;
}

bool OAIFireteam_FireteamResponse::is_members_Valid() const{
    return m_members_isValid;
}

OAIFireteam_FireteamSummary OAIFireteam_FireteamResponse::getSummary() const {
    return m_summary;
}
void OAIFireteam_FireteamResponse::setSummary(const OAIFireteam_FireteamSummary &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIFireteam_FireteamResponse::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIFireteam_FireteamResponse::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAIFireteam_FireteamResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFireteam_FireteamResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
