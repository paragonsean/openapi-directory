/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter() {
    this->initializeModel();
}

OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::~OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter() {}

void OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::initializeModel() {

    m_character_id_isSet = false;
    m_character_id_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_merged_isSet = false;
    m_merged_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;
}

void OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::fromJsonObject(QJsonObject json) {

    m_character_id_isValid = ::OpenAPI::fromJsonValue(m_character_id, json[QString("characterId")]);
    m_character_id_isSet = !json[QString("characterId")].isNull() && m_character_id_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_merged_isValid = ::OpenAPI::fromJsonValue(m_merged, json[QString("merged")]);
    m_merged_isSet = !json[QString("merged")].isNull() && m_merged_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;
}

QString OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::asJsonObject() const {
    QJsonObject obj;
    if (m_character_id_isSet) {
        obj.insert(QString("characterId"), ::OpenAPI::toJsonValue(m_character_id));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_merged.isSet()) {
        obj.insert(QString("merged"), ::OpenAPI::toJsonValue(m_merged));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    return obj;
}

qint64 OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::getCharacterId() const {
    return m_character_id;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::setCharacterId(const qint64 &character_id) {
    m_character_id = character_id;
    m_character_id_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::is_character_id_Set() const{
    return m_character_id_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::is_character_id_Valid() const{
    return m_character_id_isValid;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::isDeleted() const {
    return m_deleted;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::is_deleted_Valid() const{
    return m_deleted_isValid;
}

OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::getMerged() const {
    return m_merged;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::setMerged(const OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod &merged) {
    m_merged = merged;
    m_merged_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::is_merged_Set() const{
    return m_merged_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::is_merged_Valid() const{
    return m_merged_isValid;
}

QMap<QString, OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod> OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::getResults() const {
    return m_results;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::setResults(const QMap<QString, OAIDestiny_HistoricalStats_DestinyHistoricalStatsByPeriod> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::is_results_Set() const{
    return m_results_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::is_results_Valid() const{
    return m_results_isValid;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_character_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merged.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalStatsPerCharacter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
