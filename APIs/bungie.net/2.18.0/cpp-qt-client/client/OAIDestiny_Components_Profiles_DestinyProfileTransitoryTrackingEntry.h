/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Components_Profiles_DestinyProfileTransitoryTrackingEntry.h
 *
 * This represents a single \&quot;thing\&quot; being tracked by the player.  This can point to many types of entities, but only a subset of them will actually have a valid hash identifier for whatever it is being pointed to.  It&#39;s up to you to interpret what it means when various combinations of these entries have values being tracked.
 */

#ifndef OAIDestiny_Components_Profiles_DestinyProfileTransitoryTrackingEntry_H
#define OAIDestiny_Components_Profiles_DestinyProfileTransitoryTrackingEntry_H

#include <QJsonObject>

#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDestiny_Components_Profiles_DestinyProfileTransitoryTrackingEntry : public OAIObject {
public:
    OAIDestiny_Components_Profiles_DestinyProfileTransitoryTrackingEntry();
    OAIDestiny_Components_Profiles_DestinyProfileTransitoryTrackingEntry(QString json);
    ~OAIDestiny_Components_Profiles_DestinyProfileTransitoryTrackingEntry() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getActivityHash() const;
    void setActivityHash(const qint32 &activity_hash);
    bool is_activity_hash_Set() const;
    bool is_activity_hash_Valid() const;

    qint32 getItemHash() const;
    void setItemHash(const qint32 &item_hash);
    bool is_item_hash_Set() const;
    bool is_item_hash_Valid() const;

    qint32 getLocationHash() const;
    void setLocationHash(const qint32 &location_hash);
    bool is_location_hash_Set() const;
    bool is_location_hash_Valid() const;

    qint32 getObjectiveHash() const;
    void setObjectiveHash(const qint32 &objective_hash);
    bool is_objective_hash_Set() const;
    bool is_objective_hash_Valid() const;

    qint32 getQuestlineItemHash() const;
    void setQuestlineItemHash(const qint32 &questline_item_hash);
    bool is_questline_item_hash_Set() const;
    bool is_questline_item_hash_Valid() const;

    QDateTime getTrackedDate() const;
    void setTrackedDate(const QDateTime &tracked_date);
    bool is_tracked_date_Set() const;
    bool is_tracked_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_activity_hash;
    bool m_activity_hash_isSet;
    bool m_activity_hash_isValid;

    qint32 m_item_hash;
    bool m_item_hash_isSet;
    bool m_item_hash_isValid;

    qint32 m_location_hash;
    bool m_location_hash_isSet;
    bool m_location_hash_isValid;

    qint32 m_objective_hash;
    bool m_objective_hash_isSet;
    bool m_objective_hash_isValid;

    qint32 m_questline_item_hash;
    bool m_questline_item_hash_isSet;
    bool m_questline_item_hash_isValid;

    QDateTime m_tracked_date;
    bool m_tracked_date_isSet;
    bool m_tracked_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Components_Profiles_DestinyProfileTransitoryTrackingEntry)

#endif // OAIDestiny_Components_Profiles_DestinyProfileTransitoryTrackingEntry_H
