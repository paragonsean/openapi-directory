/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition.h
 *
 * Milestones are an in-game concept where they&#39;re attempting to tell you what you can do next in-game.  If that sounds a lot like Advisors in Destiny 1, it is! So we threw out Advisors in the Destiny 2 API and tacked all of the data we would have put on Advisors onto Milestones instead.  Each Milestone represents something going on in the game right now:  - A \&quot;ritual activity\&quot; you can perform, like nightfall  - A \&quot;special event\&quot; that may have activities related to it, like Taco Tuesday (there&#39;s no Taco Tuesday in Destiny 2)  - A checklist you can fulfill, like helping your Clan complete all of its weekly objectives  - A tutorial quest you can play through, like the introduction to the Crucible.  Most of these milestones appear in game as well. Some of them are BNet only, because we&#39;re so extra. You&#39;re welcome.  There are some important caveats to understand about how we currently render Milestones and their deficiencies. The game currently doesn&#39;t have any content that actually tells you oughtright *what* the Milestone is: that is to say, what you&#39;ll be doing. The best we get is either a description of the overall Milestone, or of the Quest that the Milestone is having you partake in: which is usually something that assumes you already know what it&#39;s talking about, like \&quot;Complete 5 Challenges\&quot;. 5 Challenges for what? What&#39;s a challenge? These are not questions that the Milestone data will answer for you unfortunately.  This isn&#39;t great, and in the future I&#39;d like to add some custom text to give you more contextual information to pass on to your users. But for now, you can do what we do to render what little display info we do have:  Start by looking at the currently active quest (ideally, you&#39;ve fetched DestinyMilestone or DestinyPublicMilestone data from the API, so you know the currently active quest for the Milestone in question). Look up the Quests property in the Milestone Definition, and check if it has display properties. If it does, show that as the description of the Milestone. If it doesn&#39;t, fall back on the Milestone&#39;s description.  This approach will let you avoid, whenever possible, the even less useful (and sometimes nonexistant) milestone-level names and descriptions.
 */

#ifndef OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition_H
#define OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition.h"
#include "OAIDestiny_Definitions_Milestones_DestinyMilestoneChallengeActivityDefinition.h"
#include "OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestDefinition.h"
#include "OAIDestiny_Definitions_Milestones_DestinyMilestoneRewardCategoryDefinition.h"
#include "OAIDestiny_Definitions_Milestones_DestinyMilestoneValueDefinition.h"
#include "OAIDestiny_Definitions_Milestones_DestinyMilestoneVendorDefinition.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_Milestones_DestinyMilestoneChallengeActivityDefinition;
class OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition;
class OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestDefinition;
class OAIDestiny_Definitions_Milestones_DestinyMilestoneRewardCategoryDefinition;
class OAIDestiny_Definitions_Milestones_DestinyMilestoneValueDefinition;
class OAIDestiny_Definitions_Milestones_DestinyMilestoneVendorDefinition;

class OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition();
    OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition(QString json);
    ~OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIDestiny_Definitions_Milestones_DestinyMilestoneChallengeActivityDefinition> getActivities() const;
    void setActivities(const QList<OAIDestiny_Definitions_Milestones_DestinyMilestoneChallengeActivityDefinition> &activities);
    bool is_activities_Set() const;
    bool is_activities_Valid() const;

    qint32 getDefaultOrder() const;
    void setDefaultOrder(const qint32 &default_order);
    bool is_default_order_Set() const;
    bool is_default_order_Valid() const;

    qint32 getDisplayPreference() const;
    void setDisplayPreference(const qint32 &display_preference);
    bool is_display_preference_Set() const;
    bool is_display_preference_Valid() const;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition getDisplayProperties() const;
    void setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties);
    bool is_display_properties_Set() const;
    bool is_display_properties_Valid() const;

    bool isExplorePrioritizesActivityImage() const;
    void setExplorePrioritizesActivityImage(const bool &explore_prioritizes_activity_image);
    bool is_explore_prioritizes_activity_image_Set() const;
    bool is_explore_prioritizes_activity_image_Valid() const;

    QString getFriendlyName() const;
    void setFriendlyName(const QString &friendly_name);
    bool is_friendly_name_Set() const;
    bool is_friendly_name_Valid() const;

    bool isHasPredictableDates() const;
    void setHasPredictableDates(const bool &has_predictable_dates);
    bool is_has_predictable_dates_Set() const;
    bool is_has_predictable_dates_Valid() const;

    qint32 getHash() const;
    void setHash(const qint32 &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    qint32 getIndex() const;
    void setIndex(const qint32 &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    bool isIsInGameMilestone() const;
    void setIsInGameMilestone(const bool &is_in_game_milestone);
    bool is_is_in_game_milestone_Set() const;
    bool is_is_in_game_milestone_Valid() const;

    qint32 getMilestoneType() const;
    void setMilestoneType(const qint32 &milestone_type);
    bool is_milestone_type_Set() const;
    bool is_milestone_type_Valid() const;

    QMap<QString, OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestDefinition> getQuests() const;
    void setQuests(const QMap<QString, OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestDefinition> &quests);
    bool is_quests_Set() const;
    bool is_quests_Valid() const;

    bool isRecruitable() const;
    void setRecruitable(const bool &recruitable);
    bool is_recruitable_Set() const;
    bool is_recruitable_Valid() const;

    bool isRedacted() const;
    void setRedacted(const bool &redacted);
    bool is_redacted_Set() const;
    bool is_redacted_Valid() const;

    QMap<QString, OAIDestiny_Definitions_Milestones_DestinyMilestoneRewardCategoryDefinition> getRewards() const;
    void setRewards(const QMap<QString, OAIDestiny_Definitions_Milestones_DestinyMilestoneRewardCategoryDefinition> &rewards);
    bool is_rewards_Set() const;
    bool is_rewards_Valid() const;

    bool isShowInExplorer() const;
    void setShowInExplorer(const bool &show_in_explorer);
    bool is_show_in_explorer_Set() const;
    bool is_show_in_explorer_Valid() const;

    bool isShowInMilestones() const;
    void setShowInMilestones(const bool &show_in_milestones);
    bool is_show_in_milestones_Set() const;
    bool is_show_in_milestones_Valid() const;

    QMap<QString, OAIDestiny_Definitions_Milestones_DestinyMilestoneValueDefinition> getValues() const;
    void setValues(const QMap<QString, OAIDestiny_Definitions_Milestones_DestinyMilestoneValueDefinition> &values);
    bool is_values_Set() const;
    bool is_values_Valid() const;

    QList<OAIDestiny_Definitions_Milestones_DestinyMilestoneVendorDefinition> getVendors() const;
    void setVendors(const QList<OAIDestiny_Definitions_Milestones_DestinyMilestoneVendorDefinition> &vendors);
    bool is_vendors_Set() const;
    bool is_vendors_Valid() const;

    QString getVendorsDisplayTitle() const;
    void setVendorsDisplayTitle(const QString &vendors_display_title);
    bool is_vendors_display_title_Set() const;
    bool is_vendors_display_title_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIDestiny_Definitions_Milestones_DestinyMilestoneChallengeActivityDefinition> m_activities;
    bool m_activities_isSet;
    bool m_activities_isValid;

    qint32 m_default_order;
    bool m_default_order_isSet;
    bool m_default_order_isValid;

    qint32 m_display_preference;
    bool m_display_preference_isSet;
    bool m_display_preference_isValid;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition m_display_properties;
    bool m_display_properties_isSet;
    bool m_display_properties_isValid;

    bool m_explore_prioritizes_activity_image;
    bool m_explore_prioritizes_activity_image_isSet;
    bool m_explore_prioritizes_activity_image_isValid;

    QString m_friendly_name;
    bool m_friendly_name_isSet;
    bool m_friendly_name_isValid;

    bool m_has_predictable_dates;
    bool m_has_predictable_dates_isSet;
    bool m_has_predictable_dates_isValid;

    qint32 m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    qint32 m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    bool m_is_in_game_milestone;
    bool m_is_in_game_milestone_isSet;
    bool m_is_in_game_milestone_isValid;

    qint32 m_milestone_type;
    bool m_milestone_type_isSet;
    bool m_milestone_type_isValid;

    QMap<QString, OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestDefinition> m_quests;
    bool m_quests_isSet;
    bool m_quests_isValid;

    bool m_recruitable;
    bool m_recruitable_isSet;
    bool m_recruitable_isValid;

    bool m_redacted;
    bool m_redacted_isSet;
    bool m_redacted_isValid;

    QMap<QString, OAIDestiny_Definitions_Milestones_DestinyMilestoneRewardCategoryDefinition> m_rewards;
    bool m_rewards_isSet;
    bool m_rewards_isValid;

    bool m_show_in_explorer;
    bool m_show_in_explorer_isSet;
    bool m_show_in_explorer_isValid;

    bool m_show_in_milestones;
    bool m_show_in_milestones_isSet;
    bool m_show_in_milestones_isValid;

    QMap<QString, OAIDestiny_Definitions_Milestones_DestinyMilestoneValueDefinition> m_values;
    bool m_values_isSet;
    bool m_values_isValid;

    QList<OAIDestiny_Definitions_Milestones_DestinyMilestoneVendorDefinition> m_vendors;
    bool m_vendors_isSet;
    bool m_vendors_isValid;

    QString m_vendors_display_title;
    bool m_vendors_display_title_isSet;
    bool m_vendors_display_title_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition)

#endif // OAIDestiny_Definitions_Milestones_DestinyMilestoneDefinition_H
