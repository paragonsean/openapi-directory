/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyInventoryBucketDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyInventoryBucketDefinition::OAIDestiny_Definitions_DestinyInventoryBucketDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyInventoryBucketDefinition::OAIDestiny_Definitions_DestinyInventoryBucketDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyInventoryBucketDefinition::~OAIDestiny_Definitions_DestinyInventoryBucketDefinition() {}

void OAIDestiny_Definitions_DestinyInventoryBucketDefinition::initializeModel() {

    m_bucket_order_isSet = false;
    m_bucket_order_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_fifo_isSet = false;
    m_fifo_isValid = false;

    m_has_transfer_destination_isSet = false;
    m_has_transfer_destination_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_item_count_isSet = false;
    m_item_count_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;
}

void OAIDestiny_Definitions_DestinyInventoryBucketDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyInventoryBucketDefinition::fromJsonObject(QJsonObject json) {

    m_bucket_order_isValid = ::OpenAPI::fromJsonValue(m_bucket_order, json[QString("bucketOrder")]);
    m_bucket_order_isSet = !json[QString("bucketOrder")].isNull() && m_bucket_order_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_fifo_isValid = ::OpenAPI::fromJsonValue(m_fifo, json[QString("fifo")]);
    m_fifo_isSet = !json[QString("fifo")].isNull() && m_fifo_isValid;

    m_has_transfer_destination_isValid = ::OpenAPI::fromJsonValue(m_has_transfer_destination, json[QString("hasTransferDestination")]);
    m_has_transfer_destination_isSet = !json[QString("hasTransferDestination")].isNull() && m_has_transfer_destination_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_item_count_isValid = ::OpenAPI::fromJsonValue(m_item_count, json[QString("itemCount")]);
    m_item_count_isSet = !json[QString("itemCount")].isNull() && m_item_count_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;
}

QString OAIDestiny_Definitions_DestinyInventoryBucketDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyInventoryBucketDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_order_isSet) {
        obj.insert(QString("bucketOrder"), ::OpenAPI::toJsonValue(m_bucket_order));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_fifo_isSet) {
        obj.insert(QString("fifo"), ::OpenAPI::toJsonValue(m_fifo));
    }
    if (m_has_transfer_destination_isSet) {
        obj.insert(QString("hasTransferDestination"), ::OpenAPI::toJsonValue(m_has_transfer_destination));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_item_count_isSet) {
        obj.insert(QString("itemCount"), ::OpenAPI::toJsonValue(m_item_count));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_DestinyInventoryBucketDefinition::getBucketOrder() const {
    return m_bucket_order;
}
void OAIDestiny_Definitions_DestinyInventoryBucketDefinition::setBucketOrder(const qint32 &bucket_order) {
    m_bucket_order = bucket_order;
    m_bucket_order_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_bucket_order_Set() const{
    return m_bucket_order_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_bucket_order_Valid() const{
    return m_bucket_order_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryBucketDefinition::getCategory() const {
    return m_category;
}
void OAIDestiny_Definitions_DestinyInventoryBucketDefinition::setCategory(const qint32 &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_category_Set() const{
    return m_category_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_category_Valid() const{
    return m_category_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_DestinyInventoryBucketDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_DestinyInventoryBucketDefinition::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::isEnabled() const {
    return m_enabled;
}
void OAIDestiny_Definitions_DestinyInventoryBucketDefinition::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::isFifo() const {
    return m_fifo;
}
void OAIDestiny_Definitions_DestinyInventoryBucketDefinition::setFifo(const bool &fifo) {
    m_fifo = fifo;
    m_fifo_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_fifo_Set() const{
    return m_fifo_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_fifo_Valid() const{
    return m_fifo_isValid;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::isHasTransferDestination() const {
    return m_has_transfer_destination;
}
void OAIDestiny_Definitions_DestinyInventoryBucketDefinition::setHasTransferDestination(const bool &has_transfer_destination) {
    m_has_transfer_destination = has_transfer_destination;
    m_has_transfer_destination_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_has_transfer_destination_Set() const{
    return m_has_transfer_destination_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_has_transfer_destination_Valid() const{
    return m_has_transfer_destination_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryBucketDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_DestinyInventoryBucketDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryBucketDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_DestinyInventoryBucketDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_index_Valid() const{
    return m_index_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryBucketDefinition::getItemCount() const {
    return m_item_count;
}
void OAIDestiny_Definitions_DestinyInventoryBucketDefinition::setItemCount(const qint32 &item_count) {
    m_item_count = item_count;
    m_item_count_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_item_count_Set() const{
    return m_item_count_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_item_count_Valid() const{
    return m_item_count_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryBucketDefinition::getLocation() const {
    return m_location;
}
void OAIDestiny_Definitions_DestinyInventoryBucketDefinition::setLocation(const qint32 &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_location_Set() const{
    return m_location_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_location_Valid() const{
    return m_location_isValid;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_DestinyInventoryBucketDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryBucketDefinition::getScope() const {
    return m_scope;
}
void OAIDestiny_Definitions_DestinyInventoryBucketDefinition::setScope(const qint32 &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fifo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_transfer_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyInventoryBucketDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
