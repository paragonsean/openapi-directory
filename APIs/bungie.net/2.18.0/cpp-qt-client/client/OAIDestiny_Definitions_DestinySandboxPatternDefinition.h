/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinySandboxPatternDefinition.h
 *
 * 
 */

#ifndef OAIDestiny_Definitions_DestinySandboxPatternDefinition_H
#define OAIDestiny_Definitions_DestinySandboxPatternDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_DestinyArrangementRegionFilterDefinition.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_DestinyArrangementRegionFilterDefinition;

class OAIDestiny_Definitions_DestinySandboxPatternDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinySandboxPatternDefinition();
    OAIDestiny_Definitions_DestinySandboxPatternDefinition(QString json);
    ~OAIDestiny_Definitions_DestinySandboxPatternDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIDestiny_Definitions_DestinyArrangementRegionFilterDefinition> getFilters() const;
    void setFilters(const QList<OAIDestiny_Definitions_DestinyArrangementRegionFilterDefinition> &filters);
    bool is_filters_Set() const;
    bool is_filters_Valid() const;

    qint32 getHash() const;
    void setHash(const qint32 &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    qint32 getIndex() const;
    void setIndex(const qint32 &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    qint32 getPatternGlobalTagIdHash() const;
    void setPatternGlobalTagIdHash(const qint32 &pattern_global_tag_id_hash);
    bool is_pattern_global_tag_id_hash_Set() const;
    bool is_pattern_global_tag_id_hash_Valid() const;

    qint32 getPatternHash() const;
    void setPatternHash(const qint32 &pattern_hash);
    bool is_pattern_hash_Set() const;
    bool is_pattern_hash_Valid() const;

    bool isRedacted() const;
    void setRedacted(const bool &redacted);
    bool is_redacted_Set() const;
    bool is_redacted_Valid() const;

    qint32 getWeaponContentGroupHash() const;
    void setWeaponContentGroupHash(const qint32 &weapon_content_group_hash);
    bool is_weapon_content_group_hash_Set() const;
    bool is_weapon_content_group_hash_Valid() const;

    qint32 getWeaponTranslationGroupHash() const;
    void setWeaponTranslationGroupHash(const qint32 &weapon_translation_group_hash);
    bool is_weapon_translation_group_hash_Set() const;
    bool is_weapon_translation_group_hash_Valid() const;

    qint32 getWeaponType() const;
    void setWeaponType(const qint32 &weapon_type);
    bool is_weapon_type_Set() const;
    bool is_weapon_type_Valid() const;

    qint32 getWeaponTypeHash() const;
    void setWeaponTypeHash(const qint32 &weapon_type_hash);
    bool is_weapon_type_hash_Set() const;
    bool is_weapon_type_hash_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIDestiny_Definitions_DestinyArrangementRegionFilterDefinition> m_filters;
    bool m_filters_isSet;
    bool m_filters_isValid;

    qint32 m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    qint32 m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    qint32 m_pattern_global_tag_id_hash;
    bool m_pattern_global_tag_id_hash_isSet;
    bool m_pattern_global_tag_id_hash_isValid;

    qint32 m_pattern_hash;
    bool m_pattern_hash_isSet;
    bool m_pattern_hash_isValid;

    bool m_redacted;
    bool m_redacted_isSet;
    bool m_redacted_isValid;

    qint32 m_weapon_content_group_hash;
    bool m_weapon_content_group_hash_isSet;
    bool m_weapon_content_group_hash_isValid;

    qint32 m_weapon_translation_group_hash;
    bool m_weapon_translation_group_hash_isSet;
    bool m_weapon_translation_group_hash_isValid;

    qint32 m_weapon_type;
    bool m_weapon_type_isSet;
    bool m_weapon_type_isValid;

    qint32 m_weapon_type_hash;
    bool m_weapon_type_hash_isSet;
    bool m_weapon_type_hash_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinySandboxPatternDefinition)

#endif // OAIDestiny_Definitions_DestinySandboxPatternDefinition_H
