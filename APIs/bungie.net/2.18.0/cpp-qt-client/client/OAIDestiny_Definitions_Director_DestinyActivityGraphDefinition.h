/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition.h
 *
 * Represents a Map View in the director: be them overview views, destination views, or other.  They have nodes which map to activities, and other various visual elements that we (or others) may or may not be able to use.  Activity graphs, most importantly, have nodes which can have activities in various states of playability.  Unfortunately, activity graphs are combined at runtime with Game UI-only assets such as fragments of map images, various in-game special effects, decals etc... that we don&#39;t get in these definitions.  If we end up having time, we may end up trying to manually populate those here: but the last time we tried that, before the lead-up to D1, it proved to be unmaintainable as the game&#39;s content changed. So don&#39;t bet the farm on us providing that content in this definition.
 */

#ifndef OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition_H
#define OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_Director_DestinyActivityGraphArtElementDefinition.h"
#include "OAIDestiny_Definitions_Director_DestinyActivityGraphConnectionDefinition.h"
#include "OAIDestiny_Definitions_Director_DestinyActivityGraphDisplayObjectiveDefinition.h"
#include "OAIDestiny_Definitions_Director_DestinyActivityGraphDisplayProgressionDefinition.h"
#include "OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition.h"
#include "OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_Director_DestinyActivityGraphArtElementDefinition;
class OAIDestiny_Definitions_Director_DestinyActivityGraphConnectionDefinition;
class OAIDestiny_Definitions_Director_DestinyActivityGraphDisplayObjectiveDefinition;
class OAIDestiny_Definitions_Director_DestinyActivityGraphDisplayProgressionDefinition;
class OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition;
class OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition;

class OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition();
    OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition(QString json);
    ~OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIDestiny_Definitions_Director_DestinyActivityGraphArtElementDefinition> getArtElements() const;
    void setArtElements(const QList<OAIDestiny_Definitions_Director_DestinyActivityGraphArtElementDefinition> &art_elements);
    bool is_art_elements_Set() const;
    bool is_art_elements_Valid() const;

    QList<OAIDestiny_Definitions_Director_DestinyActivityGraphConnectionDefinition> getConnections() const;
    void setConnections(const QList<OAIDestiny_Definitions_Director_DestinyActivityGraphConnectionDefinition> &connections);
    bool is_connections_Set() const;
    bool is_connections_Valid() const;

    QList<OAIDestiny_Definitions_Director_DestinyActivityGraphDisplayObjectiveDefinition> getDisplayObjectives() const;
    void setDisplayObjectives(const QList<OAIDestiny_Definitions_Director_DestinyActivityGraphDisplayObjectiveDefinition> &display_objectives);
    bool is_display_objectives_Set() const;
    bool is_display_objectives_Valid() const;

    QList<OAIDestiny_Definitions_Director_DestinyActivityGraphDisplayProgressionDefinition> getDisplayProgressions() const;
    void setDisplayProgressions(const QList<OAIDestiny_Definitions_Director_DestinyActivityGraphDisplayProgressionDefinition> &display_progressions);
    bool is_display_progressions_Set() const;
    bool is_display_progressions_Valid() const;

    qint32 getHash() const;
    void setHash(const qint32 &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    qint32 getIndex() const;
    void setIndex(const qint32 &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    QList<OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition> getLinkedGraphs() const;
    void setLinkedGraphs(const QList<OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition> &linked_graphs);
    bool is_linked_graphs_Set() const;
    bool is_linked_graphs_Valid() const;

    QList<OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition> getNodes() const;
    void setNodes(const QList<OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition> &nodes);
    bool is_nodes_Set() const;
    bool is_nodes_Valid() const;

    bool isRedacted() const;
    void setRedacted(const bool &redacted);
    bool is_redacted_Set() const;
    bool is_redacted_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIDestiny_Definitions_Director_DestinyActivityGraphArtElementDefinition> m_art_elements;
    bool m_art_elements_isSet;
    bool m_art_elements_isValid;

    QList<OAIDestiny_Definitions_Director_DestinyActivityGraphConnectionDefinition> m_connections;
    bool m_connections_isSet;
    bool m_connections_isValid;

    QList<OAIDestiny_Definitions_Director_DestinyActivityGraphDisplayObjectiveDefinition> m_display_objectives;
    bool m_display_objectives_isSet;
    bool m_display_objectives_isValid;

    QList<OAIDestiny_Definitions_Director_DestinyActivityGraphDisplayProgressionDefinition> m_display_progressions;
    bool m_display_progressions_isSet;
    bool m_display_progressions_isValid;

    qint32 m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    qint32 m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    QList<OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition> m_linked_graphs;
    bool m_linked_graphs_isSet;
    bool m_linked_graphs_isValid;

    QList<OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition> m_nodes;
    bool m_nodes_isSet;
    bool m_nodes_isValid;

    bool m_redacted;
    bool m_redacted_isSet;
    bool m_redacted_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition)

#endif // OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition_H
