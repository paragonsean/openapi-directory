/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupsV2_ClanBanner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupsV2_ClanBanner::OAIGroupsV2_ClanBanner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupsV2_ClanBanner::OAIGroupsV2_ClanBanner() {
    this->initializeModel();
}

OAIGroupsV2_ClanBanner::~OAIGroupsV2_ClanBanner() {}

void OAIGroupsV2_ClanBanner::initializeModel() {

    m_decal_background_color_id_isSet = false;
    m_decal_background_color_id_isValid = false;

    m_decal_color_id_isSet = false;
    m_decal_color_id_isValid = false;

    m_decal_id_isSet = false;
    m_decal_id_isValid = false;

    m_gonfalon_color_id_isSet = false;
    m_gonfalon_color_id_isValid = false;

    m_gonfalon_detail_color_id_isSet = false;
    m_gonfalon_detail_color_id_isValid = false;

    m_gonfalon_detail_id_isSet = false;
    m_gonfalon_detail_id_isValid = false;

    m_gonfalon_id_isSet = false;
    m_gonfalon_id_isValid = false;
}

void OAIGroupsV2_ClanBanner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupsV2_ClanBanner::fromJsonObject(QJsonObject json) {

    m_decal_background_color_id_isValid = ::OpenAPI::fromJsonValue(m_decal_background_color_id, json[QString("decalBackgroundColorId")]);
    m_decal_background_color_id_isSet = !json[QString("decalBackgroundColorId")].isNull() && m_decal_background_color_id_isValid;

    m_decal_color_id_isValid = ::OpenAPI::fromJsonValue(m_decal_color_id, json[QString("decalColorId")]);
    m_decal_color_id_isSet = !json[QString("decalColorId")].isNull() && m_decal_color_id_isValid;

    m_decal_id_isValid = ::OpenAPI::fromJsonValue(m_decal_id, json[QString("decalId")]);
    m_decal_id_isSet = !json[QString("decalId")].isNull() && m_decal_id_isValid;

    m_gonfalon_color_id_isValid = ::OpenAPI::fromJsonValue(m_gonfalon_color_id, json[QString("gonfalonColorId")]);
    m_gonfalon_color_id_isSet = !json[QString("gonfalonColorId")].isNull() && m_gonfalon_color_id_isValid;

    m_gonfalon_detail_color_id_isValid = ::OpenAPI::fromJsonValue(m_gonfalon_detail_color_id, json[QString("gonfalonDetailColorId")]);
    m_gonfalon_detail_color_id_isSet = !json[QString("gonfalonDetailColorId")].isNull() && m_gonfalon_detail_color_id_isValid;

    m_gonfalon_detail_id_isValid = ::OpenAPI::fromJsonValue(m_gonfalon_detail_id, json[QString("gonfalonDetailId")]);
    m_gonfalon_detail_id_isSet = !json[QString("gonfalonDetailId")].isNull() && m_gonfalon_detail_id_isValid;

    m_gonfalon_id_isValid = ::OpenAPI::fromJsonValue(m_gonfalon_id, json[QString("gonfalonId")]);
    m_gonfalon_id_isSet = !json[QString("gonfalonId")].isNull() && m_gonfalon_id_isValid;
}

QString OAIGroupsV2_ClanBanner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupsV2_ClanBanner::asJsonObject() const {
    QJsonObject obj;
    if (m_decal_background_color_id_isSet) {
        obj.insert(QString("decalBackgroundColorId"), ::OpenAPI::toJsonValue(m_decal_background_color_id));
    }
    if (m_decal_color_id_isSet) {
        obj.insert(QString("decalColorId"), ::OpenAPI::toJsonValue(m_decal_color_id));
    }
    if (m_decal_id_isSet) {
        obj.insert(QString("decalId"), ::OpenAPI::toJsonValue(m_decal_id));
    }
    if (m_gonfalon_color_id_isSet) {
        obj.insert(QString("gonfalonColorId"), ::OpenAPI::toJsonValue(m_gonfalon_color_id));
    }
    if (m_gonfalon_detail_color_id_isSet) {
        obj.insert(QString("gonfalonDetailColorId"), ::OpenAPI::toJsonValue(m_gonfalon_detail_color_id));
    }
    if (m_gonfalon_detail_id_isSet) {
        obj.insert(QString("gonfalonDetailId"), ::OpenAPI::toJsonValue(m_gonfalon_detail_id));
    }
    if (m_gonfalon_id_isSet) {
        obj.insert(QString("gonfalonId"), ::OpenAPI::toJsonValue(m_gonfalon_id));
    }
    return obj;
}

qint32 OAIGroupsV2_ClanBanner::getDecalBackgroundColorId() const {
    return m_decal_background_color_id;
}
void OAIGroupsV2_ClanBanner::setDecalBackgroundColorId(const qint32 &decal_background_color_id) {
    m_decal_background_color_id = decal_background_color_id;
    m_decal_background_color_id_isSet = true;
}

bool OAIGroupsV2_ClanBanner::is_decal_background_color_id_Set() const{
    return m_decal_background_color_id_isSet;
}

bool OAIGroupsV2_ClanBanner::is_decal_background_color_id_Valid() const{
    return m_decal_background_color_id_isValid;
}

qint32 OAIGroupsV2_ClanBanner::getDecalColorId() const {
    return m_decal_color_id;
}
void OAIGroupsV2_ClanBanner::setDecalColorId(const qint32 &decal_color_id) {
    m_decal_color_id = decal_color_id;
    m_decal_color_id_isSet = true;
}

bool OAIGroupsV2_ClanBanner::is_decal_color_id_Set() const{
    return m_decal_color_id_isSet;
}

bool OAIGroupsV2_ClanBanner::is_decal_color_id_Valid() const{
    return m_decal_color_id_isValid;
}

qint32 OAIGroupsV2_ClanBanner::getDecalId() const {
    return m_decal_id;
}
void OAIGroupsV2_ClanBanner::setDecalId(const qint32 &decal_id) {
    m_decal_id = decal_id;
    m_decal_id_isSet = true;
}

bool OAIGroupsV2_ClanBanner::is_decal_id_Set() const{
    return m_decal_id_isSet;
}

bool OAIGroupsV2_ClanBanner::is_decal_id_Valid() const{
    return m_decal_id_isValid;
}

qint32 OAIGroupsV2_ClanBanner::getGonfalonColorId() const {
    return m_gonfalon_color_id;
}
void OAIGroupsV2_ClanBanner::setGonfalonColorId(const qint32 &gonfalon_color_id) {
    m_gonfalon_color_id = gonfalon_color_id;
    m_gonfalon_color_id_isSet = true;
}

bool OAIGroupsV2_ClanBanner::is_gonfalon_color_id_Set() const{
    return m_gonfalon_color_id_isSet;
}

bool OAIGroupsV2_ClanBanner::is_gonfalon_color_id_Valid() const{
    return m_gonfalon_color_id_isValid;
}

qint32 OAIGroupsV2_ClanBanner::getGonfalonDetailColorId() const {
    return m_gonfalon_detail_color_id;
}
void OAIGroupsV2_ClanBanner::setGonfalonDetailColorId(const qint32 &gonfalon_detail_color_id) {
    m_gonfalon_detail_color_id = gonfalon_detail_color_id;
    m_gonfalon_detail_color_id_isSet = true;
}

bool OAIGroupsV2_ClanBanner::is_gonfalon_detail_color_id_Set() const{
    return m_gonfalon_detail_color_id_isSet;
}

bool OAIGroupsV2_ClanBanner::is_gonfalon_detail_color_id_Valid() const{
    return m_gonfalon_detail_color_id_isValid;
}

qint32 OAIGroupsV2_ClanBanner::getGonfalonDetailId() const {
    return m_gonfalon_detail_id;
}
void OAIGroupsV2_ClanBanner::setGonfalonDetailId(const qint32 &gonfalon_detail_id) {
    m_gonfalon_detail_id = gonfalon_detail_id;
    m_gonfalon_detail_id_isSet = true;
}

bool OAIGroupsV2_ClanBanner::is_gonfalon_detail_id_Set() const{
    return m_gonfalon_detail_id_isSet;
}

bool OAIGroupsV2_ClanBanner::is_gonfalon_detail_id_Valid() const{
    return m_gonfalon_detail_id_isValid;
}

qint32 OAIGroupsV2_ClanBanner::getGonfalonId() const {
    return m_gonfalon_id;
}
void OAIGroupsV2_ClanBanner::setGonfalonId(const qint32 &gonfalon_id) {
    m_gonfalon_id = gonfalon_id;
    m_gonfalon_id_isSet = true;
}

bool OAIGroupsV2_ClanBanner::is_gonfalon_id_Set() const{
    return m_gonfalon_id_isSet;
}

bool OAIGroupsV2_ClanBanner::is_gonfalon_id_Valid() const{
    return m_gonfalon_id_isValid;
}

bool OAIGroupsV2_ClanBanner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_decal_background_color_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decal_color_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gonfalon_color_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gonfalon_detail_color_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gonfalon_detail_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gonfalon_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupsV2_ClanBanner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
