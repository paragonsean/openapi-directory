/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition::OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition::OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition::~OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition() {}

void OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition::initializeModel() {

    m_accepted_inventory_bucket_hash_isSet = false;
    m_accepted_inventory_bucket_hash_isValid = false;

    m_destination_inventory_bucket_hash_isSet = false;
    m_destination_inventory_bucket_hash_isValid = false;
}

void OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition::fromJsonObject(QJsonObject json) {

    m_accepted_inventory_bucket_hash_isValid = ::OpenAPI::fromJsonValue(m_accepted_inventory_bucket_hash, json[QString("acceptedInventoryBucketHash")]);
    m_accepted_inventory_bucket_hash_isSet = !json[QString("acceptedInventoryBucketHash")].isNull() && m_accepted_inventory_bucket_hash_isValid;

    m_destination_inventory_bucket_hash_isValid = ::OpenAPI::fromJsonValue(m_destination_inventory_bucket_hash, json[QString("destinationInventoryBucketHash")]);
    m_destination_inventory_bucket_hash_isSet = !json[QString("destinationInventoryBucketHash")].isNull() && m_destination_inventory_bucket_hash_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_accepted_inventory_bucket_hash_isSet) {
        obj.insert(QString("acceptedInventoryBucketHash"), ::OpenAPI::toJsonValue(m_accepted_inventory_bucket_hash));
    }
    if (m_destination_inventory_bucket_hash_isSet) {
        obj.insert(QString("destinationInventoryBucketHash"), ::OpenAPI::toJsonValue(m_destination_inventory_bucket_hash));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition::getAcceptedInventoryBucketHash() const {
    return m_accepted_inventory_bucket_hash;
}
void OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition::setAcceptedInventoryBucketHash(const qint32 &accepted_inventory_bucket_hash) {
    m_accepted_inventory_bucket_hash = accepted_inventory_bucket_hash;
    m_accepted_inventory_bucket_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition::is_accepted_inventory_bucket_hash_Set() const{
    return m_accepted_inventory_bucket_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition::is_accepted_inventory_bucket_hash_Valid() const{
    return m_accepted_inventory_bucket_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition::getDestinationInventoryBucketHash() const {
    return m_destination_inventory_bucket_hash;
}
void OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition::setDestinationInventoryBucketHash(const qint32 &destination_inventory_bucket_hash) {
    m_destination_inventory_bucket_hash = destination_inventory_bucket_hash;
    m_destination_inventory_bucket_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition::is_destination_inventory_bucket_hash_Set() const{
    return m_destination_inventory_bucket_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition::is_destination_inventory_bucket_hash_Valid() const{
    return m_destination_inventory_bucket_hash_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepted_inventory_bucket_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_inventory_bucket_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
