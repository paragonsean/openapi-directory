/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIContentApi_H
#define OAI_OAIContentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIContent_GetContentById_200_response.h"
#include "OAIContent_GetContentType_200_response.h"
#include "OAIContent_RssNewsArticles_200_response.h"
#include "OAIContent_SearchContentWithText_200_response.h"
#include "OAIContent_SearchHelpArticles_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIContentApi : public QObject {
    Q_OBJECT

public:
    OAIContentApi(const int timeOut = 0);
    ~OAIContentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  locale QString [required]
    * @param[in]  head bool [optional]
    */
    virtual void content_GetContentById(const qint64 &id, const QString &locale, const ::OpenAPI::OptionalParam<bool> &head = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  locale QString [required]
    * @param[in]  tag QString [required]
    * @param[in]  type QString [required]
    * @param[in]  head bool [optional]
    */
    virtual void content_GetContentByTagAndType(const QString &locale, const QString &tag, const QString &type, const ::OpenAPI::OptionalParam<bool> &head = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  type QString [required]
    */
    virtual void content_GetContentType(const QString &type);

    /**
    * @param[in]  page_token QString [required]
    * @param[in]  categoryfilter QString [optional]
    * @param[in]  includebody bool [optional]
    */
    virtual void content_RssNewsArticles(const QString &page_token, const ::OpenAPI::OptionalParam<QString> &categoryfilter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &includebody = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  locale QString [required]
    * @param[in]  tag QString [required]
    * @param[in]  type QString [required]
    * @param[in]  currentpage qint32 [optional]
    * @param[in]  head bool [optional]
    * @param[in]  itemsperpage qint32 [optional]
    */
    virtual void content_SearchContentByTagAndType(const QString &locale, const QString &tag, const QString &type, const ::OpenAPI::OptionalParam<qint32> &currentpage = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &head = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &itemsperpage = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  locale QString [required]
    * @param[in]  ctype QString [optional]
    * @param[in]  currentpage qint32 [optional]
    * @param[in]  head bool [optional]
    * @param[in]  searchtext QString [optional]
    * @param[in]  source QString [optional]
    * @param[in]  tag QString [optional]
    */
    virtual void content_SearchContentWithText(const QString &locale, const ::OpenAPI::OptionalParam<QString> &ctype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &currentpage = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &head = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &searchtext = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  searchtext QString [required]
    * @param[in]  size QString [required]
    */
    virtual void content_SearchHelpArticles(const QString &searchtext, const QString &size);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void content_GetContentByIdCallback(OAIHttpRequestWorker *worker);
    void content_GetContentByTagAndTypeCallback(OAIHttpRequestWorker *worker);
    void content_GetContentTypeCallback(OAIHttpRequestWorker *worker);
    void content_RssNewsArticlesCallback(OAIHttpRequestWorker *worker);
    void content_SearchContentByTagAndTypeCallback(OAIHttpRequestWorker *worker);
    void content_SearchContentWithTextCallback(OAIHttpRequestWorker *worker);
    void content_SearchHelpArticlesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void content_GetContentByIdSignal(OAIContent_GetContentById_200_response summary);
    void content_GetContentByTagAndTypeSignal(OAIContent_GetContentById_200_response summary);
    void content_GetContentTypeSignal(OAIContent_GetContentType_200_response summary);
    void content_RssNewsArticlesSignal(OAIContent_RssNewsArticles_200_response summary);
    void content_SearchContentByTagAndTypeSignal(OAIContent_SearchContentWithText_200_response summary);
    void content_SearchContentWithTextSignal(OAIContent_SearchContentWithText_200_response summary);
    void content_SearchHelpArticlesSignal(OAIContent_SearchHelpArticles_200_response summary);


    void content_GetContentByIdSignalFull(OAIHttpRequestWorker *worker, OAIContent_GetContentById_200_response summary);
    void content_GetContentByTagAndTypeSignalFull(OAIHttpRequestWorker *worker, OAIContent_GetContentById_200_response summary);
    void content_GetContentTypeSignalFull(OAIHttpRequestWorker *worker, OAIContent_GetContentType_200_response summary);
    void content_RssNewsArticlesSignalFull(OAIHttpRequestWorker *worker, OAIContent_RssNewsArticles_200_response summary);
    void content_SearchContentByTagAndTypeSignalFull(OAIHttpRequestWorker *worker, OAIContent_SearchContentWithText_200_response summary);
    void content_SearchContentWithTextSignalFull(OAIHttpRequestWorker *worker, OAIContent_SearchContentWithText_200_response summary);
    void content_SearchHelpArticlesSignalFull(OAIHttpRequestWorker *worker, OAIContent_SearchHelpArticles_200_response summary);

    Q_DECL_DEPRECATED_X("Use content_GetContentByIdSignalError() instead")
    void content_GetContentByIdSignalE(OAIContent_GetContentById_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_GetContentByIdSignalError(OAIContent_GetContentById_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_GetContentByTagAndTypeSignalError() instead")
    void content_GetContentByTagAndTypeSignalE(OAIContent_GetContentById_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_GetContentByTagAndTypeSignalError(OAIContent_GetContentById_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_GetContentTypeSignalError() instead")
    void content_GetContentTypeSignalE(OAIContent_GetContentType_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_GetContentTypeSignalError(OAIContent_GetContentType_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_RssNewsArticlesSignalError() instead")
    void content_RssNewsArticlesSignalE(OAIContent_RssNewsArticles_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_RssNewsArticlesSignalError(OAIContent_RssNewsArticles_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_SearchContentByTagAndTypeSignalError() instead")
    void content_SearchContentByTagAndTypeSignalE(OAIContent_SearchContentWithText_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_SearchContentByTagAndTypeSignalError(OAIContent_SearchContentWithText_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_SearchContentWithTextSignalError() instead")
    void content_SearchContentWithTextSignalE(OAIContent_SearchContentWithText_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_SearchContentWithTextSignalError(OAIContent_SearchContentWithText_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_SearchHelpArticlesSignalError() instead")
    void content_SearchHelpArticlesSignalE(OAIContent_SearchHelpArticles_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_SearchHelpArticlesSignalError(OAIContent_SearchHelpArticles_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use content_GetContentByIdSignalErrorFull() instead")
    void content_GetContentByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_GetContentByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_GetContentByTagAndTypeSignalErrorFull() instead")
    void content_GetContentByTagAndTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_GetContentByTagAndTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_GetContentTypeSignalErrorFull() instead")
    void content_GetContentTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_GetContentTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_RssNewsArticlesSignalErrorFull() instead")
    void content_RssNewsArticlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_RssNewsArticlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_SearchContentByTagAndTypeSignalErrorFull() instead")
    void content_SearchContentByTagAndTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_SearchContentByTagAndTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_SearchContentWithTextSignalErrorFull() instead")
    void content_SearchContentWithTextSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_SearchContentWithTextSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_SearchHelpArticlesSignalErrorFull() instead")
    void content_SearchHelpArticlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_SearchHelpArticlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
