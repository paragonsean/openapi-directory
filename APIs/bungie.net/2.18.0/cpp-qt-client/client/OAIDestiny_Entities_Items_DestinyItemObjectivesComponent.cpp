/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Entities_Items_DestinyItemObjectivesComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Entities_Items_DestinyItemObjectivesComponent::OAIDestiny_Entities_Items_DestinyItemObjectivesComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Entities_Items_DestinyItemObjectivesComponent::OAIDestiny_Entities_Items_DestinyItemObjectivesComponent() {
    this->initializeModel();
}

OAIDestiny_Entities_Items_DestinyItemObjectivesComponent::~OAIDestiny_Entities_Items_DestinyItemObjectivesComponent() {}

void OAIDestiny_Entities_Items_DestinyItemObjectivesComponent::initializeModel() {

    m_date_completed_isSet = false;
    m_date_completed_isValid = false;

    m_flavor_objective_isSet = false;
    m_flavor_objective_isValid = false;

    m_objectives_isSet = false;
    m_objectives_isValid = false;
}

void OAIDestiny_Entities_Items_DestinyItemObjectivesComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Entities_Items_DestinyItemObjectivesComponent::fromJsonObject(QJsonObject json) {

    m_date_completed_isValid = ::OpenAPI::fromJsonValue(m_date_completed, json[QString("dateCompleted")]);
    m_date_completed_isSet = !json[QString("dateCompleted")].isNull() && m_date_completed_isValid;

    m_flavor_objective_isValid = ::OpenAPI::fromJsonValue(m_flavor_objective, json[QString("flavorObjective")]);
    m_flavor_objective_isSet = !json[QString("flavorObjective")].isNull() && m_flavor_objective_isValid;

    m_objectives_isValid = ::OpenAPI::fromJsonValue(m_objectives, json[QString("objectives")]);
    m_objectives_isSet = !json[QString("objectives")].isNull() && m_objectives_isValid;
}

QString OAIDestiny_Entities_Items_DestinyItemObjectivesComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Entities_Items_DestinyItemObjectivesComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_date_completed_isSet) {
        obj.insert(QString("dateCompleted"), ::OpenAPI::toJsonValue(m_date_completed));
    }
    if (m_flavor_objective.isSet()) {
        obj.insert(QString("flavorObjective"), ::OpenAPI::toJsonValue(m_flavor_objective));
    }
    if (m_objectives.size() > 0) {
        obj.insert(QString("objectives"), ::OpenAPI::toJsonValue(m_objectives));
    }
    return obj;
}

QDateTime OAIDestiny_Entities_Items_DestinyItemObjectivesComponent::getDateCompleted() const {
    return m_date_completed;
}
void OAIDestiny_Entities_Items_DestinyItemObjectivesComponent::setDateCompleted(const QDateTime &date_completed) {
    m_date_completed = date_completed;
    m_date_completed_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemObjectivesComponent::is_date_completed_Set() const{
    return m_date_completed_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemObjectivesComponent::is_date_completed_Valid() const{
    return m_date_completed_isValid;
}

OAIDestiny_Quests_DestinyObjectiveProgress OAIDestiny_Entities_Items_DestinyItemObjectivesComponent::getFlavorObjective() const {
    return m_flavor_objective;
}
void OAIDestiny_Entities_Items_DestinyItemObjectivesComponent::setFlavorObjective(const OAIDestiny_Quests_DestinyObjectiveProgress &flavor_objective) {
    m_flavor_objective = flavor_objective;
    m_flavor_objective_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemObjectivesComponent::is_flavor_objective_Set() const{
    return m_flavor_objective_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemObjectivesComponent::is_flavor_objective_Valid() const{
    return m_flavor_objective_isValid;
}

QList<OAIDestiny_Quests_DestinyObjectiveProgress> OAIDestiny_Entities_Items_DestinyItemObjectivesComponent::getObjectives() const {
    return m_objectives;
}
void OAIDestiny_Entities_Items_DestinyItemObjectivesComponent::setObjectives(const QList<OAIDestiny_Quests_DestinyObjectiveProgress> &objectives) {
    m_objectives = objectives;
    m_objectives_isSet = true;
}

bool OAIDestiny_Entities_Items_DestinyItemObjectivesComponent::is_objectives_Set() const{
    return m_objectives_isSet;
}

bool OAIDestiny_Entities_Items_DestinyItemObjectivesComponent::is_objectives_Valid() const{
    return m_objectives_isValid;
}

bool OAIDestiny_Entities_Items_DestinyItemObjectivesComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flavor_objective.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_objectives.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Entities_Items_DestinyItemObjectivesComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
