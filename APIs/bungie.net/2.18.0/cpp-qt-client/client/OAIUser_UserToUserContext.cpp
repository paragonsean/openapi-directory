/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_UserToUserContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_UserToUserContext::OAIUser_UserToUserContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_UserToUserContext::OAIUser_UserToUserContext() {
    this->initializeModel();
}

OAIUser_UserToUserContext::~OAIUser_UserToUserContext() {}

void OAIUser_UserToUserContext::initializeModel() {

    m_global_ignore_end_date_isSet = false;
    m_global_ignore_end_date_isValid = false;

    m_ignore_status_isSet = false;
    m_ignore_status_isValid = false;

    m_is_following_isSet = false;
    m_is_following_isValid = false;
}

void OAIUser_UserToUserContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_UserToUserContext::fromJsonObject(QJsonObject json) {

    m_global_ignore_end_date_isValid = ::OpenAPI::fromJsonValue(m_global_ignore_end_date, json[QString("globalIgnoreEndDate")]);
    m_global_ignore_end_date_isSet = !json[QString("globalIgnoreEndDate")].isNull() && m_global_ignore_end_date_isValid;

    m_ignore_status_isValid = ::OpenAPI::fromJsonValue(m_ignore_status, json[QString("ignoreStatus")]);
    m_ignore_status_isSet = !json[QString("ignoreStatus")].isNull() && m_ignore_status_isValid;

    m_is_following_isValid = ::OpenAPI::fromJsonValue(m_is_following, json[QString("isFollowing")]);
    m_is_following_isSet = !json[QString("isFollowing")].isNull() && m_is_following_isValid;
}

QString OAIUser_UserToUserContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_UserToUserContext::asJsonObject() const {
    QJsonObject obj;
    if (m_global_ignore_end_date_isSet) {
        obj.insert(QString("globalIgnoreEndDate"), ::OpenAPI::toJsonValue(m_global_ignore_end_date));
    }
    if (m_ignore_status.isSet()) {
        obj.insert(QString("ignoreStatus"), ::OpenAPI::toJsonValue(m_ignore_status));
    }
    if (m_is_following_isSet) {
        obj.insert(QString("isFollowing"), ::OpenAPI::toJsonValue(m_is_following));
    }
    return obj;
}

QDateTime OAIUser_UserToUserContext::getGlobalIgnoreEndDate() const {
    return m_global_ignore_end_date;
}
void OAIUser_UserToUserContext::setGlobalIgnoreEndDate(const QDateTime &global_ignore_end_date) {
    m_global_ignore_end_date = global_ignore_end_date;
    m_global_ignore_end_date_isSet = true;
}

bool OAIUser_UserToUserContext::is_global_ignore_end_date_Set() const{
    return m_global_ignore_end_date_isSet;
}

bool OAIUser_UserToUserContext::is_global_ignore_end_date_Valid() const{
    return m_global_ignore_end_date_isValid;
}

OAIIgnores_IgnoreResponse OAIUser_UserToUserContext::getIgnoreStatus() const {
    return m_ignore_status;
}
void OAIUser_UserToUserContext::setIgnoreStatus(const OAIIgnores_IgnoreResponse &ignore_status) {
    m_ignore_status = ignore_status;
    m_ignore_status_isSet = true;
}

bool OAIUser_UserToUserContext::is_ignore_status_Set() const{
    return m_ignore_status_isSet;
}

bool OAIUser_UserToUserContext::is_ignore_status_Valid() const{
    return m_ignore_status_isValid;
}

bool OAIUser_UserToUserContext::isIsFollowing() const {
    return m_is_following;
}
void OAIUser_UserToUserContext::setIsFollowing(const bool &is_following) {
    m_is_following = is_following;
    m_is_following_isSet = true;
}

bool OAIUser_UserToUserContext::is_is_following_Set() const{
    return m_is_following_isSet;
}

bool OAIUser_UserToUserContext::is_is_following_Valid() const{
    return m_is_following_isValid;
}

bool OAIUser_UserToUserContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_global_ignore_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_following_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_UserToUserContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
