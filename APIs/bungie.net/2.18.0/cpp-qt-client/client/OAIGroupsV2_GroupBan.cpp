/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupsV2_GroupBan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupsV2_GroupBan::OAIGroupsV2_GroupBan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupsV2_GroupBan::OAIGroupsV2_GroupBan() {
    this->initializeModel();
}

OAIGroupsV2_GroupBan::~OAIGroupsV2_GroupBan() {}

void OAIGroupsV2_GroupBan::initializeModel() {

    m_bungie_net_user_info_isSet = false;
    m_bungie_net_user_info_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_date_banned_isSet = false;
    m_date_banned_isValid = false;

    m_date_expires_isSet = false;
    m_date_expires_isValid = false;

    m_destiny_user_info_isSet = false;
    m_destiny_user_info_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_last_modified_by_isSet = false;
    m_last_modified_by_isValid = false;
}

void OAIGroupsV2_GroupBan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupsV2_GroupBan::fromJsonObject(QJsonObject json) {

    m_bungie_net_user_info_isValid = ::OpenAPI::fromJsonValue(m_bungie_net_user_info, json[QString("bungieNetUserInfo")]);
    m_bungie_net_user_info_isSet = !json[QString("bungieNetUserInfo")].isNull() && m_bungie_net_user_info_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_date_banned_isValid = ::OpenAPI::fromJsonValue(m_date_banned, json[QString("dateBanned")]);
    m_date_banned_isSet = !json[QString("dateBanned")].isNull() && m_date_banned_isValid;

    m_date_expires_isValid = ::OpenAPI::fromJsonValue(m_date_expires, json[QString("dateExpires")]);
    m_date_expires_isSet = !json[QString("dateExpires")].isNull() && m_date_expires_isValid;

    m_destiny_user_info_isValid = ::OpenAPI::fromJsonValue(m_destiny_user_info, json[QString("destinyUserInfo")]);
    m_destiny_user_info_isSet = !json[QString("destinyUserInfo")].isNull() && m_destiny_user_info_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
    m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;

    m_last_modified_by_isValid = ::OpenAPI::fromJsonValue(m_last_modified_by, json[QString("lastModifiedBy")]);
    m_last_modified_by_isSet = !json[QString("lastModifiedBy")].isNull() && m_last_modified_by_isValid;
}

QString OAIGroupsV2_GroupBan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupsV2_GroupBan::asJsonObject() const {
    QJsonObject obj;
    if (m_bungie_net_user_info.isSet()) {
        obj.insert(QString("bungieNetUserInfo"), ::OpenAPI::toJsonValue(m_bungie_net_user_info));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_date_banned_isSet) {
        obj.insert(QString("dateBanned"), ::OpenAPI::toJsonValue(m_date_banned));
    }
    if (m_date_expires_isSet) {
        obj.insert(QString("dateExpires"), ::OpenAPI::toJsonValue(m_date_expires));
    }
    if (m_destiny_user_info.isSet()) {
        obj.insert(QString("destinyUserInfo"), ::OpenAPI::toJsonValue(m_destiny_user_info));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_last_modified_by.isSet()) {
        obj.insert(QString("lastModifiedBy"), ::OpenAPI::toJsonValue(m_last_modified_by));
    }
    return obj;
}

OAIUser_UserInfoCard OAIGroupsV2_GroupBan::getBungieNetUserInfo() const {
    return m_bungie_net_user_info;
}
void OAIGroupsV2_GroupBan::setBungieNetUserInfo(const OAIUser_UserInfoCard &bungie_net_user_info) {
    m_bungie_net_user_info = bungie_net_user_info;
    m_bungie_net_user_info_isSet = true;
}

bool OAIGroupsV2_GroupBan::is_bungie_net_user_info_Set() const{
    return m_bungie_net_user_info_isSet;
}

bool OAIGroupsV2_GroupBan::is_bungie_net_user_info_Valid() const{
    return m_bungie_net_user_info_isValid;
}

QString OAIGroupsV2_GroupBan::getComment() const {
    return m_comment;
}
void OAIGroupsV2_GroupBan::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIGroupsV2_GroupBan::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIGroupsV2_GroupBan::is_comment_Valid() const{
    return m_comment_isValid;
}

OAIUser_UserInfoCard OAIGroupsV2_GroupBan::getCreatedBy() const {
    return m_created_by;
}
void OAIGroupsV2_GroupBan::setCreatedBy(const OAIUser_UserInfoCard &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIGroupsV2_GroupBan::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIGroupsV2_GroupBan::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIGroupsV2_GroupBan::getDateBanned() const {
    return m_date_banned;
}
void OAIGroupsV2_GroupBan::setDateBanned(const QDateTime &date_banned) {
    m_date_banned = date_banned;
    m_date_banned_isSet = true;
}

bool OAIGroupsV2_GroupBan::is_date_banned_Set() const{
    return m_date_banned_isSet;
}

bool OAIGroupsV2_GroupBan::is_date_banned_Valid() const{
    return m_date_banned_isValid;
}

QDateTime OAIGroupsV2_GroupBan::getDateExpires() const {
    return m_date_expires;
}
void OAIGroupsV2_GroupBan::setDateExpires(const QDateTime &date_expires) {
    m_date_expires = date_expires;
    m_date_expires_isSet = true;
}

bool OAIGroupsV2_GroupBan::is_date_expires_Set() const{
    return m_date_expires_isSet;
}

bool OAIGroupsV2_GroupBan::is_date_expires_Valid() const{
    return m_date_expires_isValid;
}

OAIGroupsV2_GroupUserInfoCard OAIGroupsV2_GroupBan::getDestinyUserInfo() const {
    return m_destiny_user_info;
}
void OAIGroupsV2_GroupBan::setDestinyUserInfo(const OAIGroupsV2_GroupUserInfoCard &destiny_user_info) {
    m_destiny_user_info = destiny_user_info;
    m_destiny_user_info_isSet = true;
}

bool OAIGroupsV2_GroupBan::is_destiny_user_info_Set() const{
    return m_destiny_user_info_isSet;
}

bool OAIGroupsV2_GroupBan::is_destiny_user_info_Valid() const{
    return m_destiny_user_info_isValid;
}

qint64 OAIGroupsV2_GroupBan::getGroupId() const {
    return m_group_id;
}
void OAIGroupsV2_GroupBan::setGroupId(const qint64 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIGroupsV2_GroupBan::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIGroupsV2_GroupBan::is_group_id_Valid() const{
    return m_group_id_isValid;
}

OAIUser_UserInfoCard OAIGroupsV2_GroupBan::getLastModifiedBy() const {
    return m_last_modified_by;
}
void OAIGroupsV2_GroupBan::setLastModifiedBy(const OAIUser_UserInfoCard &last_modified_by) {
    m_last_modified_by = last_modified_by;
    m_last_modified_by_isSet = true;
}

bool OAIGroupsV2_GroupBan::is_last_modified_by_Set() const{
    return m_last_modified_by_isSet;
}

bool OAIGroupsV2_GroupBan::is_last_modified_by_Valid() const{
    return m_last_modified_by_isValid;
}

bool OAIGroupsV2_GroupBan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bungie_net_user_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_banned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destiny_user_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_by.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupsV2_GroupBan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
