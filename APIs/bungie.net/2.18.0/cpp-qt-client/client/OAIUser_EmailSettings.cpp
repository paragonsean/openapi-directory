/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_EmailSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_EmailSettings::OAIUser_EmailSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_EmailSettings::OAIUser_EmailSettings() {
    this->initializeModel();
}

OAIUser_EmailSettings::~OAIUser_EmailSettings() {}

void OAIUser_EmailSettings::initializeModel() {

    m_opt_in_definitions_isSet = false;
    m_opt_in_definitions_isValid = false;

    m_subscription_definitions_isSet = false;
    m_subscription_definitions_isValid = false;

    m_views_isSet = false;
    m_views_isValid = false;
}

void OAIUser_EmailSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_EmailSettings::fromJsonObject(QJsonObject json) {

    m_opt_in_definitions_isValid = ::OpenAPI::fromJsonValue(m_opt_in_definitions, json[QString("optInDefinitions")]);
    m_opt_in_definitions_isSet = !json[QString("optInDefinitions")].isNull() && m_opt_in_definitions_isValid;

    m_subscription_definitions_isValid = ::OpenAPI::fromJsonValue(m_subscription_definitions, json[QString("subscriptionDefinitions")]);
    m_subscription_definitions_isSet = !json[QString("subscriptionDefinitions")].isNull() && m_subscription_definitions_isValid;

    m_views_isValid = ::OpenAPI::fromJsonValue(m_views, json[QString("views")]);
    m_views_isSet = !json[QString("views")].isNull() && m_views_isValid;
}

QString OAIUser_EmailSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_EmailSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_opt_in_definitions.size() > 0) {
        obj.insert(QString("optInDefinitions"), ::OpenAPI::toJsonValue(m_opt_in_definitions));
    }
    if (m_subscription_definitions.size() > 0) {
        obj.insert(QString("subscriptionDefinitions"), ::OpenAPI::toJsonValue(m_subscription_definitions));
    }
    if (m_views.size() > 0) {
        obj.insert(QString("views"), ::OpenAPI::toJsonValue(m_views));
    }
    return obj;
}

QMap<QString, OAIUser_EmailOptInDefinition> OAIUser_EmailSettings::getOptInDefinitions() const {
    return m_opt_in_definitions;
}
void OAIUser_EmailSettings::setOptInDefinitions(const QMap<QString, OAIUser_EmailOptInDefinition> &opt_in_definitions) {
    m_opt_in_definitions = opt_in_definitions;
    m_opt_in_definitions_isSet = true;
}

bool OAIUser_EmailSettings::is_opt_in_definitions_Set() const{
    return m_opt_in_definitions_isSet;
}

bool OAIUser_EmailSettings::is_opt_in_definitions_Valid() const{
    return m_opt_in_definitions_isValid;
}

QMap<QString, OAIUser_EmailSubscriptionDefinition> OAIUser_EmailSettings::getSubscriptionDefinitions() const {
    return m_subscription_definitions;
}
void OAIUser_EmailSettings::setSubscriptionDefinitions(const QMap<QString, OAIUser_EmailSubscriptionDefinition> &subscription_definitions) {
    m_subscription_definitions = subscription_definitions;
    m_subscription_definitions_isSet = true;
}

bool OAIUser_EmailSettings::is_subscription_definitions_Set() const{
    return m_subscription_definitions_isSet;
}

bool OAIUser_EmailSettings::is_subscription_definitions_Valid() const{
    return m_subscription_definitions_isValid;
}

QMap<QString, OAIUser_EmailViewDefinition> OAIUser_EmailSettings::getViews() const {
    return m_views;
}
void OAIUser_EmailSettings::setViews(const QMap<QString, OAIUser_EmailViewDefinition> &views) {
    m_views = views;
    m_views_isSet = true;
}

bool OAIUser_EmailSettings::is_views_Set() const{
    return m_views_isSet;
}

bool OAIUser_EmailSettings::is_views_Valid() const{
    return m_views_isValid;
}

bool OAIUser_EmailSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_opt_in_definitions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_definitions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_views.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_EmailSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
