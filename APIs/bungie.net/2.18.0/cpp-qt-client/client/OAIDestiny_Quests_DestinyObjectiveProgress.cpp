/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Quests_DestinyObjectiveProgress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Quests_DestinyObjectiveProgress::OAIDestiny_Quests_DestinyObjectiveProgress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Quests_DestinyObjectiveProgress::OAIDestiny_Quests_DestinyObjectiveProgress() {
    this->initializeModel();
}

OAIDestiny_Quests_DestinyObjectiveProgress::~OAIDestiny_Quests_DestinyObjectiveProgress() {}

void OAIDestiny_Quests_DestinyObjectiveProgress::initializeModel() {

    m_activity_hash_isSet = false;
    m_activity_hash_isValid = false;

    m_complete_isSet = false;
    m_complete_isValid = false;

    m_completion_value_isSet = false;
    m_completion_value_isValid = false;

    m_destination_hash_isSet = false;
    m_destination_hash_isValid = false;

    m_objective_hash_isSet = false;
    m_objective_hash_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_visible_isSet = false;
    m_visible_isValid = false;
}

void OAIDestiny_Quests_DestinyObjectiveProgress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Quests_DestinyObjectiveProgress::fromJsonObject(QJsonObject json) {

    m_activity_hash_isValid = ::OpenAPI::fromJsonValue(m_activity_hash, json[QString("activityHash")]);
    m_activity_hash_isSet = !json[QString("activityHash")].isNull() && m_activity_hash_isValid;

    m_complete_isValid = ::OpenAPI::fromJsonValue(m_complete, json[QString("complete")]);
    m_complete_isSet = !json[QString("complete")].isNull() && m_complete_isValid;

    m_completion_value_isValid = ::OpenAPI::fromJsonValue(m_completion_value, json[QString("completionValue")]);
    m_completion_value_isSet = !json[QString("completionValue")].isNull() && m_completion_value_isValid;

    m_destination_hash_isValid = ::OpenAPI::fromJsonValue(m_destination_hash, json[QString("destinationHash")]);
    m_destination_hash_isSet = !json[QString("destinationHash")].isNull() && m_destination_hash_isValid;

    m_objective_hash_isValid = ::OpenAPI::fromJsonValue(m_objective_hash, json[QString("objectiveHash")]);
    m_objective_hash_isSet = !json[QString("objectiveHash")].isNull() && m_objective_hash_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m_visible_isValid = ::OpenAPI::fromJsonValue(m_visible, json[QString("visible")]);
    m_visible_isSet = !json[QString("visible")].isNull() && m_visible_isValid;
}

QString OAIDestiny_Quests_DestinyObjectiveProgress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Quests_DestinyObjectiveProgress::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_hash_isSet) {
        obj.insert(QString("activityHash"), ::OpenAPI::toJsonValue(m_activity_hash));
    }
    if (m_complete_isSet) {
        obj.insert(QString("complete"), ::OpenAPI::toJsonValue(m_complete));
    }
    if (m_completion_value_isSet) {
        obj.insert(QString("completionValue"), ::OpenAPI::toJsonValue(m_completion_value));
    }
    if (m_destination_hash_isSet) {
        obj.insert(QString("destinationHash"), ::OpenAPI::toJsonValue(m_destination_hash));
    }
    if (m_objective_hash_isSet) {
        obj.insert(QString("objectiveHash"), ::OpenAPI::toJsonValue(m_objective_hash));
    }
    if (m_progress_isSet) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_visible_isSet) {
        obj.insert(QString("visible"), ::OpenAPI::toJsonValue(m_visible));
    }
    return obj;
}

qint32 OAIDestiny_Quests_DestinyObjectiveProgress::getActivityHash() const {
    return m_activity_hash;
}
void OAIDestiny_Quests_DestinyObjectiveProgress::setActivityHash(const qint32 &activity_hash) {
    m_activity_hash = activity_hash;
    m_activity_hash_isSet = true;
}

bool OAIDestiny_Quests_DestinyObjectiveProgress::is_activity_hash_Set() const{
    return m_activity_hash_isSet;
}

bool OAIDestiny_Quests_DestinyObjectiveProgress::is_activity_hash_Valid() const{
    return m_activity_hash_isValid;
}

bool OAIDestiny_Quests_DestinyObjectiveProgress::isComplete() const {
    return m_complete;
}
void OAIDestiny_Quests_DestinyObjectiveProgress::setComplete(const bool &complete) {
    m_complete = complete;
    m_complete_isSet = true;
}

bool OAIDestiny_Quests_DestinyObjectiveProgress::is_complete_Set() const{
    return m_complete_isSet;
}

bool OAIDestiny_Quests_DestinyObjectiveProgress::is_complete_Valid() const{
    return m_complete_isValid;
}

qint32 OAIDestiny_Quests_DestinyObjectiveProgress::getCompletionValue() const {
    return m_completion_value;
}
void OAIDestiny_Quests_DestinyObjectiveProgress::setCompletionValue(const qint32 &completion_value) {
    m_completion_value = completion_value;
    m_completion_value_isSet = true;
}

bool OAIDestiny_Quests_DestinyObjectiveProgress::is_completion_value_Set() const{
    return m_completion_value_isSet;
}

bool OAIDestiny_Quests_DestinyObjectiveProgress::is_completion_value_Valid() const{
    return m_completion_value_isValid;
}

qint32 OAIDestiny_Quests_DestinyObjectiveProgress::getDestinationHash() const {
    return m_destination_hash;
}
void OAIDestiny_Quests_DestinyObjectiveProgress::setDestinationHash(const qint32 &destination_hash) {
    m_destination_hash = destination_hash;
    m_destination_hash_isSet = true;
}

bool OAIDestiny_Quests_DestinyObjectiveProgress::is_destination_hash_Set() const{
    return m_destination_hash_isSet;
}

bool OAIDestiny_Quests_DestinyObjectiveProgress::is_destination_hash_Valid() const{
    return m_destination_hash_isValid;
}

qint32 OAIDestiny_Quests_DestinyObjectiveProgress::getObjectiveHash() const {
    return m_objective_hash;
}
void OAIDestiny_Quests_DestinyObjectiveProgress::setObjectiveHash(const qint32 &objective_hash) {
    m_objective_hash = objective_hash;
    m_objective_hash_isSet = true;
}

bool OAIDestiny_Quests_DestinyObjectiveProgress::is_objective_hash_Set() const{
    return m_objective_hash_isSet;
}

bool OAIDestiny_Quests_DestinyObjectiveProgress::is_objective_hash_Valid() const{
    return m_objective_hash_isValid;
}

qint32 OAIDestiny_Quests_DestinyObjectiveProgress::getProgress() const {
    return m_progress;
}
void OAIDestiny_Quests_DestinyObjectiveProgress::setProgress(const qint32 &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAIDestiny_Quests_DestinyObjectiveProgress::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIDestiny_Quests_DestinyObjectiveProgress::is_progress_Valid() const{
    return m_progress_isValid;
}

bool OAIDestiny_Quests_DestinyObjectiveProgress::isVisible() const {
    return m_visible;
}
void OAIDestiny_Quests_DestinyObjectiveProgress::setVisible(const bool &visible) {
    m_visible = visible;
    m_visible_isSet = true;
}

bool OAIDestiny_Quests_DestinyObjectiveProgress::is_visible_Set() const{
    return m_visible_isSet;
}

bool OAIDestiny_Quests_DestinyObjectiveProgress::is_visible_Valid() const{
    return m_visible_isValid;
}

bool OAIDestiny_Quests_DestinyObjectiveProgress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_objective_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Quests_DestinyObjectiveProgress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
