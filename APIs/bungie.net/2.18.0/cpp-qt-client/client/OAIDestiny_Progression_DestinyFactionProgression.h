/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Progression_DestinyFactionProgression.h
 *
 * Mostly for historical purposes, we segregate Faction progressions from other progressions. This is just a DestinyProgression with a shortcut for finding the DestinyFactionDefinition of the faction related to the progression.
 */

#ifndef OAIDestiny_Progression_DestinyFactionProgression_H
#define OAIDestiny_Progression_DestinyFactionProgression_H

#include <QJsonObject>

#include "OAIDestiny_DestinyProgressionResetEntry.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_DestinyProgressionResetEntry;

class OAIDestiny_Progression_DestinyFactionProgression : public OAIObject {
public:
    OAIDestiny_Progression_DestinyFactionProgression();
    OAIDestiny_Progression_DestinyFactionProgression(QString json);
    ~OAIDestiny_Progression_DestinyFactionProgression() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCurrentProgress() const;
    void setCurrentProgress(const qint32 &current_progress);
    bool is_current_progress_Set() const;
    bool is_current_progress_Valid() const;

    qint32 getCurrentResetCount() const;
    void setCurrentResetCount(const qint32 &current_reset_count);
    bool is_current_reset_count_Set() const;
    bool is_current_reset_count_Valid() const;

    qint32 getDailyLimit() const;
    void setDailyLimit(const qint32 &daily_limit);
    bool is_daily_limit_Set() const;
    bool is_daily_limit_Valid() const;

    qint32 getDailyProgress() const;
    void setDailyProgress(const qint32 &daily_progress);
    bool is_daily_progress_Set() const;
    bool is_daily_progress_Valid() const;

    qint32 getFactionHash() const;
    void setFactionHash(const qint32 &faction_hash);
    bool is_faction_hash_Set() const;
    bool is_faction_hash_Valid() const;

    qint32 getFactionVendorIndex() const;
    void setFactionVendorIndex(const qint32 &faction_vendor_index);
    bool is_faction_vendor_index_Set() const;
    bool is_faction_vendor_index_Valid() const;

    qint32 getLevel() const;
    void setLevel(const qint32 &level);
    bool is_level_Set() const;
    bool is_level_Valid() const;

    qint32 getLevelCap() const;
    void setLevelCap(const qint32 &level_cap);
    bool is_level_cap_Set() const;
    bool is_level_cap_Valid() const;

    qint32 getNextLevelAt() const;
    void setNextLevelAt(const qint32 &next_level_at);
    bool is_next_level_at_Set() const;
    bool is_next_level_at_Valid() const;

    qint32 getProgressToNextLevel() const;
    void setProgressToNextLevel(const qint32 &progress_to_next_level);
    bool is_progress_to_next_level_Set() const;
    bool is_progress_to_next_level_Valid() const;

    qint32 getProgressionHash() const;
    void setProgressionHash(const qint32 &progression_hash);
    bool is_progression_hash_Set() const;
    bool is_progression_hash_Valid() const;

    QList<qint32> getRewardItemStates() const;
    void setRewardItemStates(const QList<qint32> &reward_item_states);
    bool is_reward_item_states_Set() const;
    bool is_reward_item_states_Valid() const;

    QList<OAIDestiny_DestinyProgressionResetEntry> getSeasonResets() const;
    void setSeasonResets(const QList<OAIDestiny_DestinyProgressionResetEntry> &season_resets);
    bool is_season_resets_Set() const;
    bool is_season_resets_Valid() const;

    qint32 getStepIndex() const;
    void setStepIndex(const qint32 &step_index);
    bool is_step_index_Set() const;
    bool is_step_index_Valid() const;

    qint32 getWeeklyLimit() const;
    void setWeeklyLimit(const qint32 &weekly_limit);
    bool is_weekly_limit_Set() const;
    bool is_weekly_limit_Valid() const;

    qint32 getWeeklyProgress() const;
    void setWeeklyProgress(const qint32 &weekly_progress);
    bool is_weekly_progress_Set() const;
    bool is_weekly_progress_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_current_progress;
    bool m_current_progress_isSet;
    bool m_current_progress_isValid;

    qint32 m_current_reset_count;
    bool m_current_reset_count_isSet;
    bool m_current_reset_count_isValid;

    qint32 m_daily_limit;
    bool m_daily_limit_isSet;
    bool m_daily_limit_isValid;

    qint32 m_daily_progress;
    bool m_daily_progress_isSet;
    bool m_daily_progress_isValid;

    qint32 m_faction_hash;
    bool m_faction_hash_isSet;
    bool m_faction_hash_isValid;

    qint32 m_faction_vendor_index;
    bool m_faction_vendor_index_isSet;
    bool m_faction_vendor_index_isValid;

    qint32 m_level;
    bool m_level_isSet;
    bool m_level_isValid;

    qint32 m_level_cap;
    bool m_level_cap_isSet;
    bool m_level_cap_isValid;

    qint32 m_next_level_at;
    bool m_next_level_at_isSet;
    bool m_next_level_at_isValid;

    qint32 m_progress_to_next_level;
    bool m_progress_to_next_level_isSet;
    bool m_progress_to_next_level_isValid;

    qint32 m_progression_hash;
    bool m_progression_hash_isSet;
    bool m_progression_hash_isValid;

    QList<qint32> m_reward_item_states;
    bool m_reward_item_states_isSet;
    bool m_reward_item_states_isValid;

    QList<OAIDestiny_DestinyProgressionResetEntry> m_season_resets;
    bool m_season_resets_isSet;
    bool m_season_resets_isValid;

    qint32 m_step_index;
    bool m_step_index_isSet;
    bool m_step_index_isValid;

    qint32 m_weekly_limit;
    bool m_weekly_limit_isSet;
    bool m_weekly_limit_isValid;

    qint32 m_weekly_progress;
    bool m_weekly_progress_isSet;
    bool m_weekly_progress_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Progression_DestinyFactionProgression)

#endif // OAIDestiny_Progression_DestinyFactionProgression_H
