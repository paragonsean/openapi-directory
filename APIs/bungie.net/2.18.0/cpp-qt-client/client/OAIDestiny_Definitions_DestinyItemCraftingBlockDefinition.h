/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition.h
 *
 * If an item can have an action performed on it (like \&quot;Dismantle\&quot;), it will be defined here if you care.
 */

#ifndef OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition_H
#define OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_DestinyItemCraftingBlockBonusPlugDefinition.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_DestinyItemCraftingBlockBonusPlugDefinition;

class OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition();
    OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBaseMaterialRequirements() const;
    void setBaseMaterialRequirements(const qint32 &base_material_requirements);
    bool is_base_material_requirements_Set() const;
    bool is_base_material_requirements_Valid() const;

    QList<OAIDestiny_Definitions_DestinyItemCraftingBlockBonusPlugDefinition> getBonusPlugs() const;
    void setBonusPlugs(const QList<OAIDestiny_Definitions_DestinyItemCraftingBlockBonusPlugDefinition> &bonus_plugs);
    bool is_bonus_plugs_Set() const;
    bool is_bonus_plugs_Valid() const;

    QList<QString> getFailedRequirementStrings() const;
    void setFailedRequirementStrings(const QList<QString> &failed_requirement_strings);
    bool is_failed_requirement_strings_Set() const;
    bool is_failed_requirement_strings_Valid() const;

    qint32 getOutputItemHash() const;
    void setOutputItemHash(const qint32 &output_item_hash);
    bool is_output_item_hash_Set() const;
    bool is_output_item_hash_Valid() const;

    QList<qint32> getRequiredSocketTypeHashes() const;
    void setRequiredSocketTypeHashes(const QList<qint32> &required_socket_type_hashes);
    bool is_required_socket_type_hashes_Set() const;
    bool is_required_socket_type_hashes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_base_material_requirements;
    bool m_base_material_requirements_isSet;
    bool m_base_material_requirements_isValid;

    QList<OAIDestiny_Definitions_DestinyItemCraftingBlockBonusPlugDefinition> m_bonus_plugs;
    bool m_bonus_plugs_isSet;
    bool m_bonus_plugs_isValid;

    QList<QString> m_failed_requirement_strings;
    bool m_failed_requirement_strings_isSet;
    bool m_failed_requirement_strings_isValid;

    qint32 m_output_item_hash;
    bool m_output_item_hash_isSet;
    bool m_output_item_hash_isValid;

    QList<qint32> m_required_socket_type_hashes;
    bool m_required_socket_type_hashes_isSet;
    bool m_required_socket_type_hashes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition)

#endif // OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition_H
