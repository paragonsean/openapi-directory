/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommon_Models_CoreSettingsConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommon_Models_CoreSettingsConfiguration::OAICommon_Models_CoreSettingsConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommon_Models_CoreSettingsConfiguration::OAICommon_Models_CoreSettingsConfiguration() {
    this->initializeModel();
}

OAICommon_Models_CoreSettingsConfiguration::~OAICommon_Models_CoreSettingsConfiguration() {}

void OAICommon_Models_CoreSettingsConfiguration::initializeModel() {

    m_clan_banner_decal_colors_isSet = false;
    m_clan_banner_decal_colors_isValid = false;

    m_clan_banner_decals_isSet = false;
    m_clan_banner_decals_isValid = false;

    m_clan_banner_gonfalon_colors_isSet = false;
    m_clan_banner_gonfalon_colors_isValid = false;

    m_clan_banner_gonfalon_detail_colors_isSet = false;
    m_clan_banner_gonfalon_detail_colors_isValid = false;

    m_clan_banner_gonfalon_details_isSet = false;
    m_clan_banner_gonfalon_details_isValid = false;

    m_clan_banner_gonfalons_isSet = false;
    m_clan_banner_gonfalons_isValid = false;

    m_clan_banner_standards_isSet = false;
    m_clan_banner_standards_isValid = false;

    m_default_group_theme_isSet = false;
    m_default_group_theme_isValid = false;

    m_destiny2_core_settings_isSet = false;
    m_destiny2_core_settings_isValid = false;

    m_destiny_membership_types_isSet = false;
    m_destiny_membership_types_isValid = false;

    m_email_settings_isSet = false;
    m_email_settings_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_fireteam_activities_isSet = false;
    m_fireteam_activities_isValid = false;

    m_forum_categories_isSet = false;
    m_forum_categories_isValid = false;

    m_group_avatars_isSet = false;
    m_group_avatars_isValid = false;

    m_ignore_reasons_isSet = false;
    m_ignore_reasons_isValid = false;

    m_recruitment_activities_isSet = false;
    m_recruitment_activities_isValid = false;

    m_recruitment_misc_tags_isSet = false;
    m_recruitment_misc_tags_isValid = false;

    m_recruitment_platform_tags_isSet = false;
    m_recruitment_platform_tags_isValid = false;

    m_system_content_locales_isSet = false;
    m_system_content_locales_isValid = false;

    m_systems_isSet = false;
    m_systems_isValid = false;

    m_user_content_locales_isSet = false;
    m_user_content_locales_isValid = false;
}

void OAICommon_Models_CoreSettingsConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommon_Models_CoreSettingsConfiguration::fromJsonObject(QJsonObject json) {

    m_clan_banner_decal_colors_isValid = ::OpenAPI::fromJsonValue(m_clan_banner_decal_colors, json[QString("clanBannerDecalColors")]);
    m_clan_banner_decal_colors_isSet = !json[QString("clanBannerDecalColors")].isNull() && m_clan_banner_decal_colors_isValid;

    m_clan_banner_decals_isValid = ::OpenAPI::fromJsonValue(m_clan_banner_decals, json[QString("clanBannerDecals")]);
    m_clan_banner_decals_isSet = !json[QString("clanBannerDecals")].isNull() && m_clan_banner_decals_isValid;

    m_clan_banner_gonfalon_colors_isValid = ::OpenAPI::fromJsonValue(m_clan_banner_gonfalon_colors, json[QString("clanBannerGonfalonColors")]);
    m_clan_banner_gonfalon_colors_isSet = !json[QString("clanBannerGonfalonColors")].isNull() && m_clan_banner_gonfalon_colors_isValid;

    m_clan_banner_gonfalon_detail_colors_isValid = ::OpenAPI::fromJsonValue(m_clan_banner_gonfalon_detail_colors, json[QString("clanBannerGonfalonDetailColors")]);
    m_clan_banner_gonfalon_detail_colors_isSet = !json[QString("clanBannerGonfalonDetailColors")].isNull() && m_clan_banner_gonfalon_detail_colors_isValid;

    m_clan_banner_gonfalon_details_isValid = ::OpenAPI::fromJsonValue(m_clan_banner_gonfalon_details, json[QString("clanBannerGonfalonDetails")]);
    m_clan_banner_gonfalon_details_isSet = !json[QString("clanBannerGonfalonDetails")].isNull() && m_clan_banner_gonfalon_details_isValid;

    m_clan_banner_gonfalons_isValid = ::OpenAPI::fromJsonValue(m_clan_banner_gonfalons, json[QString("clanBannerGonfalons")]);
    m_clan_banner_gonfalons_isSet = !json[QString("clanBannerGonfalons")].isNull() && m_clan_banner_gonfalons_isValid;

    m_clan_banner_standards_isValid = ::OpenAPI::fromJsonValue(m_clan_banner_standards, json[QString("clanBannerStandards")]);
    m_clan_banner_standards_isSet = !json[QString("clanBannerStandards")].isNull() && m_clan_banner_standards_isValid;

    m_default_group_theme_isValid = ::OpenAPI::fromJsonValue(m_default_group_theme, json[QString("defaultGroupTheme")]);
    m_default_group_theme_isSet = !json[QString("defaultGroupTheme")].isNull() && m_default_group_theme_isValid;

    m_destiny2_core_settings_isValid = ::OpenAPI::fromJsonValue(m_destiny2_core_settings, json[QString("destiny2CoreSettings")]);
    m_destiny2_core_settings_isSet = !json[QString("destiny2CoreSettings")].isNull() && m_destiny2_core_settings_isValid;

    m_destiny_membership_types_isValid = ::OpenAPI::fromJsonValue(m_destiny_membership_types, json[QString("destinyMembershipTypes")]);
    m_destiny_membership_types_isSet = !json[QString("destinyMembershipTypes")].isNull() && m_destiny_membership_types_isValid;

    m_email_settings_isValid = ::OpenAPI::fromJsonValue(m_email_settings, json[QString("emailSettings")]);
    m_email_settings_isSet = !json[QString("emailSettings")].isNull() && m_email_settings_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_fireteam_activities_isValid = ::OpenAPI::fromJsonValue(m_fireteam_activities, json[QString("fireteamActivities")]);
    m_fireteam_activities_isSet = !json[QString("fireteamActivities")].isNull() && m_fireteam_activities_isValid;

    m_forum_categories_isValid = ::OpenAPI::fromJsonValue(m_forum_categories, json[QString("forumCategories")]);
    m_forum_categories_isSet = !json[QString("forumCategories")].isNull() && m_forum_categories_isValid;

    m_group_avatars_isValid = ::OpenAPI::fromJsonValue(m_group_avatars, json[QString("groupAvatars")]);
    m_group_avatars_isSet = !json[QString("groupAvatars")].isNull() && m_group_avatars_isValid;

    m_ignore_reasons_isValid = ::OpenAPI::fromJsonValue(m_ignore_reasons, json[QString("ignoreReasons")]);
    m_ignore_reasons_isSet = !json[QString("ignoreReasons")].isNull() && m_ignore_reasons_isValid;

    m_recruitment_activities_isValid = ::OpenAPI::fromJsonValue(m_recruitment_activities, json[QString("recruitmentActivities")]);
    m_recruitment_activities_isSet = !json[QString("recruitmentActivities")].isNull() && m_recruitment_activities_isValid;

    m_recruitment_misc_tags_isValid = ::OpenAPI::fromJsonValue(m_recruitment_misc_tags, json[QString("recruitmentMiscTags")]);
    m_recruitment_misc_tags_isSet = !json[QString("recruitmentMiscTags")].isNull() && m_recruitment_misc_tags_isValid;

    m_recruitment_platform_tags_isValid = ::OpenAPI::fromJsonValue(m_recruitment_platform_tags, json[QString("recruitmentPlatformTags")]);
    m_recruitment_platform_tags_isSet = !json[QString("recruitmentPlatformTags")].isNull() && m_recruitment_platform_tags_isValid;

    m_system_content_locales_isValid = ::OpenAPI::fromJsonValue(m_system_content_locales, json[QString("systemContentLocales")]);
    m_system_content_locales_isSet = !json[QString("systemContentLocales")].isNull() && m_system_content_locales_isValid;

    m_systems_isValid = ::OpenAPI::fromJsonValue(m_systems, json[QString("systems")]);
    m_systems_isSet = !json[QString("systems")].isNull() && m_systems_isValid;

    m_user_content_locales_isValid = ::OpenAPI::fromJsonValue(m_user_content_locales, json[QString("userContentLocales")]);
    m_user_content_locales_isSet = !json[QString("userContentLocales")].isNull() && m_user_content_locales_isValid;
}

QString OAICommon_Models_CoreSettingsConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommon_Models_CoreSettingsConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_clan_banner_decal_colors.size() > 0) {
        obj.insert(QString("clanBannerDecalColors"), ::OpenAPI::toJsonValue(m_clan_banner_decal_colors));
    }
    if (m_clan_banner_decals.size() > 0) {
        obj.insert(QString("clanBannerDecals"), ::OpenAPI::toJsonValue(m_clan_banner_decals));
    }
    if (m_clan_banner_gonfalon_colors.size() > 0) {
        obj.insert(QString("clanBannerGonfalonColors"), ::OpenAPI::toJsonValue(m_clan_banner_gonfalon_colors));
    }
    if (m_clan_banner_gonfalon_detail_colors.size() > 0) {
        obj.insert(QString("clanBannerGonfalonDetailColors"), ::OpenAPI::toJsonValue(m_clan_banner_gonfalon_detail_colors));
    }
    if (m_clan_banner_gonfalon_details.size() > 0) {
        obj.insert(QString("clanBannerGonfalonDetails"), ::OpenAPI::toJsonValue(m_clan_banner_gonfalon_details));
    }
    if (m_clan_banner_gonfalons.size() > 0) {
        obj.insert(QString("clanBannerGonfalons"), ::OpenAPI::toJsonValue(m_clan_banner_gonfalons));
    }
    if (m_clan_banner_standards.size() > 0) {
        obj.insert(QString("clanBannerStandards"), ::OpenAPI::toJsonValue(m_clan_banner_standards));
    }
    if (m_default_group_theme.isSet()) {
        obj.insert(QString("defaultGroupTheme"), ::OpenAPI::toJsonValue(m_default_group_theme));
    }
    if (m_destiny2_core_settings.isSet()) {
        obj.insert(QString("destiny2CoreSettings"), ::OpenAPI::toJsonValue(m_destiny2_core_settings));
    }
    if (m_destiny_membership_types.size() > 0) {
        obj.insert(QString("destinyMembershipTypes"), ::OpenAPI::toJsonValue(m_destiny_membership_types));
    }
    if (m_email_settings.isSet()) {
        obj.insert(QString("emailSettings"), ::OpenAPI::toJsonValue(m_email_settings));
    }
    if (m_environment_isSet) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_fireteam_activities.size() > 0) {
        obj.insert(QString("fireteamActivities"), ::OpenAPI::toJsonValue(m_fireteam_activities));
    }
    if (m_forum_categories.size() > 0) {
        obj.insert(QString("forumCategories"), ::OpenAPI::toJsonValue(m_forum_categories));
    }
    if (m_group_avatars.size() > 0) {
        obj.insert(QString("groupAvatars"), ::OpenAPI::toJsonValue(m_group_avatars));
    }
    if (m_ignore_reasons.size() > 0) {
        obj.insert(QString("ignoreReasons"), ::OpenAPI::toJsonValue(m_ignore_reasons));
    }
    if (m_recruitment_activities.size() > 0) {
        obj.insert(QString("recruitmentActivities"), ::OpenAPI::toJsonValue(m_recruitment_activities));
    }
    if (m_recruitment_misc_tags.size() > 0) {
        obj.insert(QString("recruitmentMiscTags"), ::OpenAPI::toJsonValue(m_recruitment_misc_tags));
    }
    if (m_recruitment_platform_tags.size() > 0) {
        obj.insert(QString("recruitmentPlatformTags"), ::OpenAPI::toJsonValue(m_recruitment_platform_tags));
    }
    if (m_system_content_locales.size() > 0) {
        obj.insert(QString("systemContentLocales"), ::OpenAPI::toJsonValue(m_system_content_locales));
    }
    if (m_systems.size() > 0) {
        obj.insert(QString("systems"), ::OpenAPI::toJsonValue(m_systems));
    }
    if (m_user_content_locales.size() > 0) {
        obj.insert(QString("userContentLocales"), ::OpenAPI::toJsonValue(m_user_content_locales));
    }
    return obj;
}

QList<OAICommon_Models_CoreSetting> OAICommon_Models_CoreSettingsConfiguration::getClanBannerDecalColors() const {
    return m_clan_banner_decal_colors;
}
void OAICommon_Models_CoreSettingsConfiguration::setClanBannerDecalColors(const QList<OAICommon_Models_CoreSetting> &clan_banner_decal_colors) {
    m_clan_banner_decal_colors = clan_banner_decal_colors;
    m_clan_banner_decal_colors_isSet = true;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_clan_banner_decal_colors_Set() const{
    return m_clan_banner_decal_colors_isSet;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_clan_banner_decal_colors_Valid() const{
    return m_clan_banner_decal_colors_isValid;
}

QList<OAICommon_Models_CoreSetting> OAICommon_Models_CoreSettingsConfiguration::getClanBannerDecals() const {
    return m_clan_banner_decals;
}
void OAICommon_Models_CoreSettingsConfiguration::setClanBannerDecals(const QList<OAICommon_Models_CoreSetting> &clan_banner_decals) {
    m_clan_banner_decals = clan_banner_decals;
    m_clan_banner_decals_isSet = true;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_clan_banner_decals_Set() const{
    return m_clan_banner_decals_isSet;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_clan_banner_decals_Valid() const{
    return m_clan_banner_decals_isValid;
}

QList<OAICommon_Models_CoreSetting> OAICommon_Models_CoreSettingsConfiguration::getClanBannerGonfalonColors() const {
    return m_clan_banner_gonfalon_colors;
}
void OAICommon_Models_CoreSettingsConfiguration::setClanBannerGonfalonColors(const QList<OAICommon_Models_CoreSetting> &clan_banner_gonfalon_colors) {
    m_clan_banner_gonfalon_colors = clan_banner_gonfalon_colors;
    m_clan_banner_gonfalon_colors_isSet = true;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_clan_banner_gonfalon_colors_Set() const{
    return m_clan_banner_gonfalon_colors_isSet;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_clan_banner_gonfalon_colors_Valid() const{
    return m_clan_banner_gonfalon_colors_isValid;
}

QList<OAICommon_Models_CoreSetting> OAICommon_Models_CoreSettingsConfiguration::getClanBannerGonfalonDetailColors() const {
    return m_clan_banner_gonfalon_detail_colors;
}
void OAICommon_Models_CoreSettingsConfiguration::setClanBannerGonfalonDetailColors(const QList<OAICommon_Models_CoreSetting> &clan_banner_gonfalon_detail_colors) {
    m_clan_banner_gonfalon_detail_colors = clan_banner_gonfalon_detail_colors;
    m_clan_banner_gonfalon_detail_colors_isSet = true;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_clan_banner_gonfalon_detail_colors_Set() const{
    return m_clan_banner_gonfalon_detail_colors_isSet;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_clan_banner_gonfalon_detail_colors_Valid() const{
    return m_clan_banner_gonfalon_detail_colors_isValid;
}

QList<OAICommon_Models_CoreSetting> OAICommon_Models_CoreSettingsConfiguration::getClanBannerGonfalonDetails() const {
    return m_clan_banner_gonfalon_details;
}
void OAICommon_Models_CoreSettingsConfiguration::setClanBannerGonfalonDetails(const QList<OAICommon_Models_CoreSetting> &clan_banner_gonfalon_details) {
    m_clan_banner_gonfalon_details = clan_banner_gonfalon_details;
    m_clan_banner_gonfalon_details_isSet = true;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_clan_banner_gonfalon_details_Set() const{
    return m_clan_banner_gonfalon_details_isSet;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_clan_banner_gonfalon_details_Valid() const{
    return m_clan_banner_gonfalon_details_isValid;
}

QList<OAICommon_Models_CoreSetting> OAICommon_Models_CoreSettingsConfiguration::getClanBannerGonfalons() const {
    return m_clan_banner_gonfalons;
}
void OAICommon_Models_CoreSettingsConfiguration::setClanBannerGonfalons(const QList<OAICommon_Models_CoreSetting> &clan_banner_gonfalons) {
    m_clan_banner_gonfalons = clan_banner_gonfalons;
    m_clan_banner_gonfalons_isSet = true;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_clan_banner_gonfalons_Set() const{
    return m_clan_banner_gonfalons_isSet;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_clan_banner_gonfalons_Valid() const{
    return m_clan_banner_gonfalons_isValid;
}

QList<OAICommon_Models_CoreSetting> OAICommon_Models_CoreSettingsConfiguration::getClanBannerStandards() const {
    return m_clan_banner_standards;
}
void OAICommon_Models_CoreSettingsConfiguration::setClanBannerStandards(const QList<OAICommon_Models_CoreSetting> &clan_banner_standards) {
    m_clan_banner_standards = clan_banner_standards;
    m_clan_banner_standards_isSet = true;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_clan_banner_standards_Set() const{
    return m_clan_banner_standards_isSet;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_clan_banner_standards_Valid() const{
    return m_clan_banner_standards_isValid;
}

OAICommon_Models_CoreSetting OAICommon_Models_CoreSettingsConfiguration::getDefaultGroupTheme() const {
    return m_default_group_theme;
}
void OAICommon_Models_CoreSettingsConfiguration::setDefaultGroupTheme(const OAICommon_Models_CoreSetting &default_group_theme) {
    m_default_group_theme = default_group_theme;
    m_default_group_theme_isSet = true;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_default_group_theme_Set() const{
    return m_default_group_theme_isSet;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_default_group_theme_Valid() const{
    return m_default_group_theme_isValid;
}

OAICommon_Models_Destiny2CoreSettings OAICommon_Models_CoreSettingsConfiguration::getDestiny2CoreSettings() const {
    return m_destiny2_core_settings;
}
void OAICommon_Models_CoreSettingsConfiguration::setDestiny2CoreSettings(const OAICommon_Models_Destiny2CoreSettings &destiny2_core_settings) {
    m_destiny2_core_settings = destiny2_core_settings;
    m_destiny2_core_settings_isSet = true;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_destiny2_core_settings_Set() const{
    return m_destiny2_core_settings_isSet;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_destiny2_core_settings_Valid() const{
    return m_destiny2_core_settings_isValid;
}

QList<OAICommon_Models_CoreSetting> OAICommon_Models_CoreSettingsConfiguration::getDestinyMembershipTypes() const {
    return m_destiny_membership_types;
}
void OAICommon_Models_CoreSettingsConfiguration::setDestinyMembershipTypes(const QList<OAICommon_Models_CoreSetting> &destiny_membership_types) {
    m_destiny_membership_types = destiny_membership_types;
    m_destiny_membership_types_isSet = true;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_destiny_membership_types_Set() const{
    return m_destiny_membership_types_isSet;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_destiny_membership_types_Valid() const{
    return m_destiny_membership_types_isValid;
}

OAIUser_EmailSettings OAICommon_Models_CoreSettingsConfiguration::getEmailSettings() const {
    return m_email_settings;
}
void OAICommon_Models_CoreSettingsConfiguration::setEmailSettings(const OAIUser_EmailSettings &email_settings) {
    m_email_settings = email_settings;
    m_email_settings_isSet = true;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_email_settings_Set() const{
    return m_email_settings_isSet;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_email_settings_Valid() const{
    return m_email_settings_isValid;
}

QString OAICommon_Models_CoreSettingsConfiguration::getEnvironment() const {
    return m_environment;
}
void OAICommon_Models_CoreSettingsConfiguration::setEnvironment(const QString &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_environment_Valid() const{
    return m_environment_isValid;
}

QList<OAICommon_Models_CoreSetting> OAICommon_Models_CoreSettingsConfiguration::getFireteamActivities() const {
    return m_fireteam_activities;
}
void OAICommon_Models_CoreSettingsConfiguration::setFireteamActivities(const QList<OAICommon_Models_CoreSetting> &fireteam_activities) {
    m_fireteam_activities = fireteam_activities;
    m_fireteam_activities_isSet = true;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_fireteam_activities_Set() const{
    return m_fireteam_activities_isSet;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_fireteam_activities_Valid() const{
    return m_fireteam_activities_isValid;
}

QList<OAICommon_Models_CoreSetting> OAICommon_Models_CoreSettingsConfiguration::getForumCategories() const {
    return m_forum_categories;
}
void OAICommon_Models_CoreSettingsConfiguration::setForumCategories(const QList<OAICommon_Models_CoreSetting> &forum_categories) {
    m_forum_categories = forum_categories;
    m_forum_categories_isSet = true;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_forum_categories_Set() const{
    return m_forum_categories_isSet;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_forum_categories_Valid() const{
    return m_forum_categories_isValid;
}

QList<OAICommon_Models_CoreSetting> OAICommon_Models_CoreSettingsConfiguration::getGroupAvatars() const {
    return m_group_avatars;
}
void OAICommon_Models_CoreSettingsConfiguration::setGroupAvatars(const QList<OAICommon_Models_CoreSetting> &group_avatars) {
    m_group_avatars = group_avatars;
    m_group_avatars_isSet = true;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_group_avatars_Set() const{
    return m_group_avatars_isSet;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_group_avatars_Valid() const{
    return m_group_avatars_isValid;
}

QList<OAICommon_Models_CoreSetting> OAICommon_Models_CoreSettingsConfiguration::getIgnoreReasons() const {
    return m_ignore_reasons;
}
void OAICommon_Models_CoreSettingsConfiguration::setIgnoreReasons(const QList<OAICommon_Models_CoreSetting> &ignore_reasons) {
    m_ignore_reasons = ignore_reasons;
    m_ignore_reasons_isSet = true;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_ignore_reasons_Set() const{
    return m_ignore_reasons_isSet;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_ignore_reasons_Valid() const{
    return m_ignore_reasons_isValid;
}

QList<OAICommon_Models_CoreSetting> OAICommon_Models_CoreSettingsConfiguration::getRecruitmentActivities() const {
    return m_recruitment_activities;
}
void OAICommon_Models_CoreSettingsConfiguration::setRecruitmentActivities(const QList<OAICommon_Models_CoreSetting> &recruitment_activities) {
    m_recruitment_activities = recruitment_activities;
    m_recruitment_activities_isSet = true;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_recruitment_activities_Set() const{
    return m_recruitment_activities_isSet;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_recruitment_activities_Valid() const{
    return m_recruitment_activities_isValid;
}

QList<OAICommon_Models_CoreSetting> OAICommon_Models_CoreSettingsConfiguration::getRecruitmentMiscTags() const {
    return m_recruitment_misc_tags;
}
void OAICommon_Models_CoreSettingsConfiguration::setRecruitmentMiscTags(const QList<OAICommon_Models_CoreSetting> &recruitment_misc_tags) {
    m_recruitment_misc_tags = recruitment_misc_tags;
    m_recruitment_misc_tags_isSet = true;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_recruitment_misc_tags_Set() const{
    return m_recruitment_misc_tags_isSet;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_recruitment_misc_tags_Valid() const{
    return m_recruitment_misc_tags_isValid;
}

QList<OAICommon_Models_CoreSetting> OAICommon_Models_CoreSettingsConfiguration::getRecruitmentPlatformTags() const {
    return m_recruitment_platform_tags;
}
void OAICommon_Models_CoreSettingsConfiguration::setRecruitmentPlatformTags(const QList<OAICommon_Models_CoreSetting> &recruitment_platform_tags) {
    m_recruitment_platform_tags = recruitment_platform_tags;
    m_recruitment_platform_tags_isSet = true;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_recruitment_platform_tags_Set() const{
    return m_recruitment_platform_tags_isSet;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_recruitment_platform_tags_Valid() const{
    return m_recruitment_platform_tags_isValid;
}

QList<OAICommon_Models_CoreSetting> OAICommon_Models_CoreSettingsConfiguration::getSystemContentLocales() const {
    return m_system_content_locales;
}
void OAICommon_Models_CoreSettingsConfiguration::setSystemContentLocales(const QList<OAICommon_Models_CoreSetting> &system_content_locales) {
    m_system_content_locales = system_content_locales;
    m_system_content_locales_isSet = true;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_system_content_locales_Set() const{
    return m_system_content_locales_isSet;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_system_content_locales_Valid() const{
    return m_system_content_locales_isValid;
}

QMap<QString, OAICommon_Models_CoreSystem> OAICommon_Models_CoreSettingsConfiguration::getSystems() const {
    return m_systems;
}
void OAICommon_Models_CoreSettingsConfiguration::setSystems(const QMap<QString, OAICommon_Models_CoreSystem> &systems) {
    m_systems = systems;
    m_systems_isSet = true;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_systems_Set() const{
    return m_systems_isSet;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_systems_Valid() const{
    return m_systems_isValid;
}

QList<OAICommon_Models_CoreSetting> OAICommon_Models_CoreSettingsConfiguration::getUserContentLocales() const {
    return m_user_content_locales;
}
void OAICommon_Models_CoreSettingsConfiguration::setUserContentLocales(const QList<OAICommon_Models_CoreSetting> &user_content_locales) {
    m_user_content_locales = user_content_locales;
    m_user_content_locales_isSet = true;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_user_content_locales_Set() const{
    return m_user_content_locales_isSet;
}

bool OAICommon_Models_CoreSettingsConfiguration::is_user_content_locales_Valid() const{
    return m_user_content_locales_isValid;
}

bool OAICommon_Models_CoreSettingsConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clan_banner_decal_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_clan_banner_decals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_clan_banner_gonfalon_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_clan_banner_gonfalon_detail_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_clan_banner_gonfalon_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_clan_banner_gonfalons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_clan_banner_standards.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_group_theme.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destiny2_core_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destiny_membership_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fireteam_activities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_forum_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_avatars.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_reasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recruitment_activities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recruitment_misc_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recruitment_platform_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_content_locales.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_systems.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_content_locales.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommon_Models_CoreSettingsConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
