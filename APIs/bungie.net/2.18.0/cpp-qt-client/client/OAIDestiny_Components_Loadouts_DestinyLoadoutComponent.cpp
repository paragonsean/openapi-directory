/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Components_Loadouts_DestinyLoadoutComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::OAIDestiny_Components_Loadouts_DestinyLoadoutComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::OAIDestiny_Components_Loadouts_DestinyLoadoutComponent() {
    this->initializeModel();
}

OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::~OAIDestiny_Components_Loadouts_DestinyLoadoutComponent() {}

void OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::initializeModel() {

    m_color_hash_isSet = false;
    m_color_hash_isValid = false;

    m_icon_hash_isSet = false;
    m_icon_hash_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_name_hash_isSet = false;
    m_name_hash_isValid = false;
}

void OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::fromJsonObject(QJsonObject json) {

    m_color_hash_isValid = ::OpenAPI::fromJsonValue(m_color_hash, json[QString("colorHash")]);
    m_color_hash_isSet = !json[QString("colorHash")].isNull() && m_color_hash_isValid;

    m_icon_hash_isValid = ::OpenAPI::fromJsonValue(m_icon_hash, json[QString("iconHash")]);
    m_icon_hash_isSet = !json[QString("iconHash")].isNull() && m_icon_hash_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_name_hash_isValid = ::OpenAPI::fromJsonValue(m_name_hash, json[QString("nameHash")]);
    m_name_hash_isSet = !json[QString("nameHash")].isNull() && m_name_hash_isValid;
}

QString OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_color_hash_isSet) {
        obj.insert(QString("colorHash"), ::OpenAPI::toJsonValue(m_color_hash));
    }
    if (m_icon_hash_isSet) {
        obj.insert(QString("iconHash"), ::OpenAPI::toJsonValue(m_icon_hash));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_name_hash_isSet) {
        obj.insert(QString("nameHash"), ::OpenAPI::toJsonValue(m_name_hash));
    }
    return obj;
}

qint32 OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::getColorHash() const {
    return m_color_hash;
}
void OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::setColorHash(const qint32 &color_hash) {
    m_color_hash = color_hash;
    m_color_hash_isSet = true;
}

bool OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::is_color_hash_Set() const{
    return m_color_hash_isSet;
}

bool OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::is_color_hash_Valid() const{
    return m_color_hash_isValid;
}

qint32 OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::getIconHash() const {
    return m_icon_hash;
}
void OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::setIconHash(const qint32 &icon_hash) {
    m_icon_hash = icon_hash;
    m_icon_hash_isSet = true;
}

bool OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::is_icon_hash_Set() const{
    return m_icon_hash_isSet;
}

bool OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::is_icon_hash_Valid() const{
    return m_icon_hash_isValid;
}

QList<OAIDestiny_Components_Loadouts_DestinyLoadoutItemComponent> OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::getItems() const {
    return m_items;
}
void OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::setItems(const QList<OAIDestiny_Components_Loadouts_DestinyLoadoutItemComponent> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::is_items_Set() const{
    return m_items_isSet;
}

bool OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::is_items_Valid() const{
    return m_items_isValid;
}

qint32 OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::getNameHash() const {
    return m_name_hash;
}
void OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::setNameHash(const qint32 &name_hash) {
    m_name_hash = name_hash;
    m_name_hash_isSet = true;
}

bool OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::is_name_hash_Set() const{
    return m_name_hash_isSet;
}

bool OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::is_name_hash_Valid() const{
    return m_name_hash_isValid;
}

bool OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Components_Loadouts_DestinyLoadoutComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
