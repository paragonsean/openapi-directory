/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContent_Models_TagMetadataDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContent_Models_TagMetadataDefinition::OAIContent_Models_TagMetadataDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContent_Models_TagMetadataDefinition::OAIContent_Models_TagMetadataDefinition() {
    this->initializeModel();
}

OAIContent_Models_TagMetadataDefinition::~OAIContent_Models_TagMetadataDefinition() {}

void OAIContent_Models_TagMetadataDefinition::initializeModel() {

    m_datatype_isSet = false;
    m_datatype_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_required_isSet = false;
    m_is_required_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;
}

void OAIContent_Models_TagMetadataDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContent_Models_TagMetadataDefinition::fromJsonObject(QJsonObject json) {

    m_datatype_isValid = ::OpenAPI::fromJsonValue(m_datatype, json[QString("datatype")]);
    m_datatype_isSet = !json[QString("datatype")].isNull() && m_datatype_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_required_isValid = ::OpenAPI::fromJsonValue(m_is_required, json[QString("isRequired")]);
    m_is_required_isSet = !json[QString("isRequired")].isNull() && m_is_required_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;
}

QString OAIContent_Models_TagMetadataDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContent_Models_TagMetadataDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_datatype_isSet) {
        obj.insert(QString("datatype"), ::OpenAPI::toJsonValue(m_datatype));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_required_isSet) {
        obj.insert(QString("isRequired"), ::OpenAPI::toJsonValue(m_is_required));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    return obj;
}

QString OAIContent_Models_TagMetadataDefinition::getDatatype() const {
    return m_datatype;
}
void OAIContent_Models_TagMetadataDefinition::setDatatype(const QString &datatype) {
    m_datatype = datatype;
    m_datatype_isSet = true;
}

bool OAIContent_Models_TagMetadataDefinition::is_datatype_Set() const{
    return m_datatype_isSet;
}

bool OAIContent_Models_TagMetadataDefinition::is_datatype_Valid() const{
    return m_datatype_isValid;
}

QString OAIContent_Models_TagMetadataDefinition::getDescription() const {
    return m_description;
}
void OAIContent_Models_TagMetadataDefinition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIContent_Models_TagMetadataDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAIContent_Models_TagMetadataDefinition::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIContent_Models_TagMetadataDefinition::isIsRequired() const {
    return m_is_required;
}
void OAIContent_Models_TagMetadataDefinition::setIsRequired(const bool &is_required) {
    m_is_required = is_required;
    m_is_required_isSet = true;
}

bool OAIContent_Models_TagMetadataDefinition::is_is_required_Set() const{
    return m_is_required_isSet;
}

bool OAIContent_Models_TagMetadataDefinition::is_is_required_Valid() const{
    return m_is_required_isValid;
}

QList<OAIContent_Models_TagMetadataItem> OAIContent_Models_TagMetadataDefinition::getItems() const {
    return m_items;
}
void OAIContent_Models_TagMetadataDefinition::setItems(const QList<OAIContent_Models_TagMetadataItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIContent_Models_TagMetadataDefinition::is_items_Set() const{
    return m_items_isSet;
}

bool OAIContent_Models_TagMetadataDefinition::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIContent_Models_TagMetadataDefinition::getName() const {
    return m_name;
}
void OAIContent_Models_TagMetadataDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContent_Models_TagMetadataDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContent_Models_TagMetadataDefinition::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIContent_Models_TagMetadataDefinition::getOrder() const {
    return m_order;
}
void OAIContent_Models_TagMetadataDefinition::setOrder(const qint32 &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIContent_Models_TagMetadataDefinition::is_order_Set() const{
    return m_order_isSet;
}

bool OAIContent_Models_TagMetadataDefinition::is_order_Valid() const{
    return m_order_isValid;
}

bool OAIContent_Models_TagMetadataDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_datatype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContent_Models_TagMetadataDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
