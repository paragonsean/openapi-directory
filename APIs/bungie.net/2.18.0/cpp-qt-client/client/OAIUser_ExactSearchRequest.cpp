/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_ExactSearchRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_ExactSearchRequest::OAIUser_ExactSearchRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_ExactSearchRequest::OAIUser_ExactSearchRequest() {
    this->initializeModel();
}

OAIUser_ExactSearchRequest::~OAIUser_ExactSearchRequest() {}

void OAIUser_ExactSearchRequest::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_display_name_code_isSet = false;
    m_display_name_code_isValid = false;
}

void OAIUser_ExactSearchRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_ExactSearchRequest::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_display_name_code_isValid = ::OpenAPI::fromJsonValue(m_display_name_code, json[QString("displayNameCode")]);
    m_display_name_code_isSet = !json[QString("displayNameCode")].isNull() && m_display_name_code_isValid;
}

QString OAIUser_ExactSearchRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_ExactSearchRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_display_name_code_isSet) {
        obj.insert(QString("displayNameCode"), ::OpenAPI::toJsonValue(m_display_name_code));
    }
    return obj;
}

QString OAIUser_ExactSearchRequest::getDisplayName() const {
    return m_display_name;
}
void OAIUser_ExactSearchRequest::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUser_ExactSearchRequest::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUser_ExactSearchRequest::is_display_name_Valid() const{
    return m_display_name_isValid;
}

qint32 OAIUser_ExactSearchRequest::getDisplayNameCode() const {
    return m_display_name_code;
}
void OAIUser_ExactSearchRequest::setDisplayNameCode(const qint32 &display_name_code) {
    m_display_name_code = display_name_code;
    m_display_name_code_isSet = true;
}

bool OAIUser_ExactSearchRequest::is_display_name_code_Set() const{
    return m_display_name_code_isSet;
}

bool OAIUser_ExactSearchRequest::is_display_name_code_Valid() const{
    return m_display_name_code_isValid;
}

bool OAIUser_ExactSearchRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_ExactSearchRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
