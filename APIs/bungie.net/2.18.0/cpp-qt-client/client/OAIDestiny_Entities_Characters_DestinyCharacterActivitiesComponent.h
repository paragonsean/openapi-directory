/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent.h
 *
 * This component holds activity data for a character. It will tell you about the character&#39;s current activity status, as well as activities that are available to the user.
 */

#ifndef OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent_H
#define OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent_H

#include <QJsonObject>

#include "OAIDestiny_DestinyActivity.h"
#include <QDateTime>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_DestinyActivity;

class OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent : public OAIObject {
public:
    OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent();
    OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent(QString json);
    ~OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIDestiny_DestinyActivity> getAvailableActivities() const;
    void setAvailableActivities(const QList<OAIDestiny_DestinyActivity> &available_activities);
    bool is_available_activities_Set() const;
    bool is_available_activities_Valid() const;

    qint32 getCurrentActivityHash() const;
    void setCurrentActivityHash(const qint32 &current_activity_hash);
    bool is_current_activity_hash_Set() const;
    bool is_current_activity_hash_Valid() const;

    qint32 getCurrentActivityModeHash() const;
    void setCurrentActivityModeHash(const qint32 &current_activity_mode_hash);
    bool is_current_activity_mode_hash_Set() const;
    bool is_current_activity_mode_hash_Valid() const;

    QList<qint32> getCurrentActivityModeHashes() const;
    void setCurrentActivityModeHashes(const QList<qint32> &current_activity_mode_hashes);
    bool is_current_activity_mode_hashes_Set() const;
    bool is_current_activity_mode_hashes_Valid() const;

    qint32 getCurrentActivityModeType() const;
    void setCurrentActivityModeType(const qint32 &current_activity_mode_type);
    bool is_current_activity_mode_type_Set() const;
    bool is_current_activity_mode_type_Valid() const;

    QList<qint32> getCurrentActivityModeTypes() const;
    void setCurrentActivityModeTypes(const QList<qint32> &current_activity_mode_types);
    bool is_current_activity_mode_types_Set() const;
    bool is_current_activity_mode_types_Valid() const;

    qint32 getCurrentPlaylistActivityHash() const;
    void setCurrentPlaylistActivityHash(const qint32 &current_playlist_activity_hash);
    bool is_current_playlist_activity_hash_Set() const;
    bool is_current_playlist_activity_hash_Valid() const;

    QDateTime getDateActivityStarted() const;
    void setDateActivityStarted(const QDateTime &date_activity_started);
    bool is_date_activity_started_Set() const;
    bool is_date_activity_started_Valid() const;

    qint32 getLastCompletedStoryHash() const;
    void setLastCompletedStoryHash(const qint32 &last_completed_story_hash);
    bool is_last_completed_story_hash_Set() const;
    bool is_last_completed_story_hash_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIDestiny_DestinyActivity> m_available_activities;
    bool m_available_activities_isSet;
    bool m_available_activities_isValid;

    qint32 m_current_activity_hash;
    bool m_current_activity_hash_isSet;
    bool m_current_activity_hash_isValid;

    qint32 m_current_activity_mode_hash;
    bool m_current_activity_mode_hash_isSet;
    bool m_current_activity_mode_hash_isValid;

    QList<qint32> m_current_activity_mode_hashes;
    bool m_current_activity_mode_hashes_isSet;
    bool m_current_activity_mode_hashes_isValid;

    qint32 m_current_activity_mode_type;
    bool m_current_activity_mode_type_isSet;
    bool m_current_activity_mode_type_isValid;

    QList<qint32> m_current_activity_mode_types;
    bool m_current_activity_mode_types_isSet;
    bool m_current_activity_mode_types_isValid;

    qint32 m_current_playlist_activity_hash;
    bool m_current_playlist_activity_hash_isSet;
    bool m_current_playlist_activity_hash_isValid;

    QDateTime m_date_activity_started;
    bool m_date_activity_started_isSet;
    bool m_date_activity_started_isValid;

    qint32 m_last_completed_story_hash;
    bool m_last_completed_story_hash_isSet;
    bool m_last_completed_story_hash_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent)

#endif // OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent_H
