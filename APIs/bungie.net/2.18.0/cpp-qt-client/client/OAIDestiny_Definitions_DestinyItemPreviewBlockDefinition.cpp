/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::~OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition() {}

void OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::initializeModel() {

    m_artifact_hash_isSet = false;
    m_artifact_hash_isValid = false;

    m_derived_item_categories_isSet = false;
    m_derived_item_categories_isValid = false;

    m_preview_action_string_isSet = false;
    m_preview_action_string_isValid = false;

    m_preview_vendor_hash_isSet = false;
    m_preview_vendor_hash_isValid = false;

    m_screen_style_isSet = false;
    m_screen_style_isValid = false;
}

void OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::fromJsonObject(QJsonObject json) {

    m_artifact_hash_isValid = ::OpenAPI::fromJsonValue(m_artifact_hash, json[QString("artifactHash")]);
    m_artifact_hash_isSet = !json[QString("artifactHash")].isNull() && m_artifact_hash_isValid;

    m_derived_item_categories_isValid = ::OpenAPI::fromJsonValue(m_derived_item_categories, json[QString("derivedItemCategories")]);
    m_derived_item_categories_isSet = !json[QString("derivedItemCategories")].isNull() && m_derived_item_categories_isValid;

    m_preview_action_string_isValid = ::OpenAPI::fromJsonValue(m_preview_action_string, json[QString("previewActionString")]);
    m_preview_action_string_isSet = !json[QString("previewActionString")].isNull() && m_preview_action_string_isValid;

    m_preview_vendor_hash_isValid = ::OpenAPI::fromJsonValue(m_preview_vendor_hash, json[QString("previewVendorHash")]);
    m_preview_vendor_hash_isSet = !json[QString("previewVendorHash")].isNull() && m_preview_vendor_hash_isValid;

    m_screen_style_isValid = ::OpenAPI::fromJsonValue(m_screen_style, json[QString("screenStyle")]);
    m_screen_style_isSet = !json[QString("screenStyle")].isNull() && m_screen_style_isValid;
}

QString OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_hash_isSet) {
        obj.insert(QString("artifactHash"), ::OpenAPI::toJsonValue(m_artifact_hash));
    }
    if (m_derived_item_categories.size() > 0) {
        obj.insert(QString("derivedItemCategories"), ::OpenAPI::toJsonValue(m_derived_item_categories));
    }
    if (m_preview_action_string_isSet) {
        obj.insert(QString("previewActionString"), ::OpenAPI::toJsonValue(m_preview_action_string));
    }
    if (m_preview_vendor_hash_isSet) {
        obj.insert(QString("previewVendorHash"), ::OpenAPI::toJsonValue(m_preview_vendor_hash));
    }
    if (m_screen_style_isSet) {
        obj.insert(QString("screenStyle"), ::OpenAPI::toJsonValue(m_screen_style));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::getArtifactHash() const {
    return m_artifact_hash;
}
void OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::setArtifactHash(const qint32 &artifact_hash) {
    m_artifact_hash = artifact_hash;
    m_artifact_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::is_artifact_hash_Set() const{
    return m_artifact_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::is_artifact_hash_Valid() const{
    return m_artifact_hash_isValid;
}

QList<OAIDestiny_Definitions_Items_DestinyDerivedItemCategoryDefinition> OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::getDerivedItemCategories() const {
    return m_derived_item_categories;
}
void OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::setDerivedItemCategories(const QList<OAIDestiny_Definitions_Items_DestinyDerivedItemCategoryDefinition> &derived_item_categories) {
    m_derived_item_categories = derived_item_categories;
    m_derived_item_categories_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::is_derived_item_categories_Set() const{
    return m_derived_item_categories_isSet;
}

bool OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::is_derived_item_categories_Valid() const{
    return m_derived_item_categories_isValid;
}

QString OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::getPreviewActionString() const {
    return m_preview_action_string;
}
void OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::setPreviewActionString(const QString &preview_action_string) {
    m_preview_action_string = preview_action_string;
    m_preview_action_string_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::is_preview_action_string_Set() const{
    return m_preview_action_string_isSet;
}

bool OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::is_preview_action_string_Valid() const{
    return m_preview_action_string_isValid;
}

qint32 OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::getPreviewVendorHash() const {
    return m_preview_vendor_hash;
}
void OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::setPreviewVendorHash(const qint32 &preview_vendor_hash) {
    m_preview_vendor_hash = preview_vendor_hash;
    m_preview_vendor_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::is_preview_vendor_hash_Set() const{
    return m_preview_vendor_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::is_preview_vendor_hash_Valid() const{
    return m_preview_vendor_hash_isValid;
}

QString OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::getScreenStyle() const {
    return m_screen_style;
}
void OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::setScreenStyle(const QString &screen_style) {
    m_screen_style = screen_style;
    m_screen_style_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::is_screen_style_Set() const{
    return m_screen_style_isSet;
}

bool OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::is_screen_style_Valid() const{
    return m_screen_style_isValid;
}

bool OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_derived_item_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_action_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_vendor_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_style_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
