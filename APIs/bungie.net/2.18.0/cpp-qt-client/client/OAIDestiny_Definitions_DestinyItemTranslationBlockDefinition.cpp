/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::~OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition() {}

void OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::initializeModel() {

    m_arrangements_isSet = false;
    m_arrangements_isValid = false;

    m_custom_dyes_isSet = false;
    m_custom_dyes_isValid = false;

    m_default_dyes_isSet = false;
    m_default_dyes_isValid = false;

    m_has_geometry_isSet = false;
    m_has_geometry_isValid = false;

    m_locked_dyes_isSet = false;
    m_locked_dyes_isValid = false;

    m_weapon_pattern_hash_isSet = false;
    m_weapon_pattern_hash_isValid = false;

    m_weapon_pattern_identifier_isSet = false;
    m_weapon_pattern_identifier_isValid = false;
}

void OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::fromJsonObject(QJsonObject json) {

    m_arrangements_isValid = ::OpenAPI::fromJsonValue(m_arrangements, json[QString("arrangements")]);
    m_arrangements_isSet = !json[QString("arrangements")].isNull() && m_arrangements_isValid;

    m_custom_dyes_isValid = ::OpenAPI::fromJsonValue(m_custom_dyes, json[QString("customDyes")]);
    m_custom_dyes_isSet = !json[QString("customDyes")].isNull() && m_custom_dyes_isValid;

    m_default_dyes_isValid = ::OpenAPI::fromJsonValue(m_default_dyes, json[QString("defaultDyes")]);
    m_default_dyes_isSet = !json[QString("defaultDyes")].isNull() && m_default_dyes_isValid;

    m_has_geometry_isValid = ::OpenAPI::fromJsonValue(m_has_geometry, json[QString("hasGeometry")]);
    m_has_geometry_isSet = !json[QString("hasGeometry")].isNull() && m_has_geometry_isValid;

    m_locked_dyes_isValid = ::OpenAPI::fromJsonValue(m_locked_dyes, json[QString("lockedDyes")]);
    m_locked_dyes_isSet = !json[QString("lockedDyes")].isNull() && m_locked_dyes_isValid;

    m_weapon_pattern_hash_isValid = ::OpenAPI::fromJsonValue(m_weapon_pattern_hash, json[QString("weaponPatternHash")]);
    m_weapon_pattern_hash_isSet = !json[QString("weaponPatternHash")].isNull() && m_weapon_pattern_hash_isValid;

    m_weapon_pattern_identifier_isValid = ::OpenAPI::fromJsonValue(m_weapon_pattern_identifier, json[QString("weaponPatternIdentifier")]);
    m_weapon_pattern_identifier_isSet = !json[QString("weaponPatternIdentifier")].isNull() && m_weapon_pattern_identifier_isValid;
}

QString OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_arrangements.size() > 0) {
        obj.insert(QString("arrangements"), ::OpenAPI::toJsonValue(m_arrangements));
    }
    if (m_custom_dyes.size() > 0) {
        obj.insert(QString("customDyes"), ::OpenAPI::toJsonValue(m_custom_dyes));
    }
    if (m_default_dyes.size() > 0) {
        obj.insert(QString("defaultDyes"), ::OpenAPI::toJsonValue(m_default_dyes));
    }
    if (m_has_geometry_isSet) {
        obj.insert(QString("hasGeometry"), ::OpenAPI::toJsonValue(m_has_geometry));
    }
    if (m_locked_dyes.size() > 0) {
        obj.insert(QString("lockedDyes"), ::OpenAPI::toJsonValue(m_locked_dyes));
    }
    if (m_weapon_pattern_hash_isSet) {
        obj.insert(QString("weaponPatternHash"), ::OpenAPI::toJsonValue(m_weapon_pattern_hash));
    }
    if (m_weapon_pattern_identifier_isSet) {
        obj.insert(QString("weaponPatternIdentifier"), ::OpenAPI::toJsonValue(m_weapon_pattern_identifier));
    }
    return obj;
}

QList<OAIDestiny_Definitions_DestinyGearArtArrangementReference> OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::getArrangements() const {
    return m_arrangements;
}
void OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::setArrangements(const QList<OAIDestiny_Definitions_DestinyGearArtArrangementReference> &arrangements) {
    m_arrangements = arrangements;
    m_arrangements_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::is_arrangements_Set() const{
    return m_arrangements_isSet;
}

bool OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::is_arrangements_Valid() const{
    return m_arrangements_isValid;
}

QList<OAIDestiny_DyeReference> OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::getCustomDyes() const {
    return m_custom_dyes;
}
void OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::setCustomDyes(const QList<OAIDestiny_DyeReference> &custom_dyes) {
    m_custom_dyes = custom_dyes;
    m_custom_dyes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::is_custom_dyes_Set() const{
    return m_custom_dyes_isSet;
}

bool OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::is_custom_dyes_Valid() const{
    return m_custom_dyes_isValid;
}

QList<OAIDestiny_DyeReference> OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::getDefaultDyes() const {
    return m_default_dyes;
}
void OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::setDefaultDyes(const QList<OAIDestiny_DyeReference> &default_dyes) {
    m_default_dyes = default_dyes;
    m_default_dyes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::is_default_dyes_Set() const{
    return m_default_dyes_isSet;
}

bool OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::is_default_dyes_Valid() const{
    return m_default_dyes_isValid;
}

bool OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::isHasGeometry() const {
    return m_has_geometry;
}
void OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::setHasGeometry(const bool &has_geometry) {
    m_has_geometry = has_geometry;
    m_has_geometry_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::is_has_geometry_Set() const{
    return m_has_geometry_isSet;
}

bool OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::is_has_geometry_Valid() const{
    return m_has_geometry_isValid;
}

QList<OAIDestiny_DyeReference> OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::getLockedDyes() const {
    return m_locked_dyes;
}
void OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::setLockedDyes(const QList<OAIDestiny_DyeReference> &locked_dyes) {
    m_locked_dyes = locked_dyes;
    m_locked_dyes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::is_locked_dyes_Set() const{
    return m_locked_dyes_isSet;
}

bool OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::is_locked_dyes_Valid() const{
    return m_locked_dyes_isValid;
}

qint32 OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::getWeaponPatternHash() const {
    return m_weapon_pattern_hash;
}
void OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::setWeaponPatternHash(const qint32 &weapon_pattern_hash) {
    m_weapon_pattern_hash = weapon_pattern_hash;
    m_weapon_pattern_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::is_weapon_pattern_hash_Set() const{
    return m_weapon_pattern_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::is_weapon_pattern_hash_Valid() const{
    return m_weapon_pattern_hash_isValid;
}

QString OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::getWeaponPatternIdentifier() const {
    return m_weapon_pattern_identifier;
}
void OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::setWeaponPatternIdentifier(const QString &weapon_pattern_identifier) {
    m_weapon_pattern_identifier = weapon_pattern_identifier;
    m_weapon_pattern_identifier_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::is_weapon_pattern_identifier_Set() const{
    return m_weapon_pattern_identifier_isSet;
}

bool OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::is_weapon_pattern_identifier_Valid() const{
    return m_weapon_pattern_identifier_isValid;
}

bool OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arrangements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_dyes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_dyes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_geometry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_dyes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_weapon_pattern_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weapon_pattern_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
