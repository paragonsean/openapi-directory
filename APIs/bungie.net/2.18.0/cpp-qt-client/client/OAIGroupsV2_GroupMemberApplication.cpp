/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupsV2_GroupMemberApplication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupsV2_GroupMemberApplication::OAIGroupsV2_GroupMemberApplication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupsV2_GroupMemberApplication::OAIGroupsV2_GroupMemberApplication() {
    this->initializeModel();
}

OAIGroupsV2_GroupMemberApplication::~OAIGroupsV2_GroupMemberApplication() {}

void OAIGroupsV2_GroupMemberApplication::initializeModel() {

    m_bungie_net_user_info_isSet = false;
    m_bungie_net_user_info_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_destiny_user_info_isSet = false;
    m_destiny_user_info_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_request_message_isSet = false;
    m_request_message_isValid = false;

    m_resolve_date_isSet = false;
    m_resolve_date_isValid = false;

    m_resolve_message_isSet = false;
    m_resolve_message_isValid = false;

    m_resolve_state_isSet = false;
    m_resolve_state_isValid = false;

    m_resolved_by_membership_id_isSet = false;
    m_resolved_by_membership_id_isValid = false;
}

void OAIGroupsV2_GroupMemberApplication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupsV2_GroupMemberApplication::fromJsonObject(QJsonObject json) {

    m_bungie_net_user_info_isValid = ::OpenAPI::fromJsonValue(m_bungie_net_user_info, json[QString("bungieNetUserInfo")]);
    m_bungie_net_user_info_isSet = !json[QString("bungieNetUserInfo")].isNull() && m_bungie_net_user_info_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_destiny_user_info_isValid = ::OpenAPI::fromJsonValue(m_destiny_user_info, json[QString("destinyUserInfo")]);
    m_destiny_user_info_isSet = !json[QString("destinyUserInfo")].isNull() && m_destiny_user_info_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
    m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;

    m_request_message_isValid = ::OpenAPI::fromJsonValue(m_request_message, json[QString("requestMessage")]);
    m_request_message_isSet = !json[QString("requestMessage")].isNull() && m_request_message_isValid;

    m_resolve_date_isValid = ::OpenAPI::fromJsonValue(m_resolve_date, json[QString("resolveDate")]);
    m_resolve_date_isSet = !json[QString("resolveDate")].isNull() && m_resolve_date_isValid;

    m_resolve_message_isValid = ::OpenAPI::fromJsonValue(m_resolve_message, json[QString("resolveMessage")]);
    m_resolve_message_isSet = !json[QString("resolveMessage")].isNull() && m_resolve_message_isValid;

    m_resolve_state_isValid = ::OpenAPI::fromJsonValue(m_resolve_state, json[QString("resolveState")]);
    m_resolve_state_isSet = !json[QString("resolveState")].isNull() && m_resolve_state_isValid;

    m_resolved_by_membership_id_isValid = ::OpenAPI::fromJsonValue(m_resolved_by_membership_id, json[QString("resolvedByMembershipId")]);
    m_resolved_by_membership_id_isSet = !json[QString("resolvedByMembershipId")].isNull() && m_resolved_by_membership_id_isValid;
}

QString OAIGroupsV2_GroupMemberApplication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupsV2_GroupMemberApplication::asJsonObject() const {
    QJsonObject obj;
    if (m_bungie_net_user_info.isSet()) {
        obj.insert(QString("bungieNetUserInfo"), ::OpenAPI::toJsonValue(m_bungie_net_user_info));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_destiny_user_info.isSet()) {
        obj.insert(QString("destinyUserInfo"), ::OpenAPI::toJsonValue(m_destiny_user_info));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_request_message_isSet) {
        obj.insert(QString("requestMessage"), ::OpenAPI::toJsonValue(m_request_message));
    }
    if (m_resolve_date_isSet) {
        obj.insert(QString("resolveDate"), ::OpenAPI::toJsonValue(m_resolve_date));
    }
    if (m_resolve_message_isSet) {
        obj.insert(QString("resolveMessage"), ::OpenAPI::toJsonValue(m_resolve_message));
    }
    if (m_resolve_state_isSet) {
        obj.insert(QString("resolveState"), ::OpenAPI::toJsonValue(m_resolve_state));
    }
    if (m_resolved_by_membership_id_isSet) {
        obj.insert(QString("resolvedByMembershipId"), ::OpenAPI::toJsonValue(m_resolved_by_membership_id));
    }
    return obj;
}

OAIUser_UserInfoCard OAIGroupsV2_GroupMemberApplication::getBungieNetUserInfo() const {
    return m_bungie_net_user_info;
}
void OAIGroupsV2_GroupMemberApplication::setBungieNetUserInfo(const OAIUser_UserInfoCard &bungie_net_user_info) {
    m_bungie_net_user_info = bungie_net_user_info;
    m_bungie_net_user_info_isSet = true;
}

bool OAIGroupsV2_GroupMemberApplication::is_bungie_net_user_info_Set() const{
    return m_bungie_net_user_info_isSet;
}

bool OAIGroupsV2_GroupMemberApplication::is_bungie_net_user_info_Valid() const{
    return m_bungie_net_user_info_isValid;
}

QDateTime OAIGroupsV2_GroupMemberApplication::getCreationDate() const {
    return m_creation_date;
}
void OAIGroupsV2_GroupMemberApplication::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIGroupsV2_GroupMemberApplication::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIGroupsV2_GroupMemberApplication::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

OAIGroupsV2_GroupUserInfoCard OAIGroupsV2_GroupMemberApplication::getDestinyUserInfo() const {
    return m_destiny_user_info;
}
void OAIGroupsV2_GroupMemberApplication::setDestinyUserInfo(const OAIGroupsV2_GroupUserInfoCard &destiny_user_info) {
    m_destiny_user_info = destiny_user_info;
    m_destiny_user_info_isSet = true;
}

bool OAIGroupsV2_GroupMemberApplication::is_destiny_user_info_Set() const{
    return m_destiny_user_info_isSet;
}

bool OAIGroupsV2_GroupMemberApplication::is_destiny_user_info_Valid() const{
    return m_destiny_user_info_isValid;
}

qint64 OAIGroupsV2_GroupMemberApplication::getGroupId() const {
    return m_group_id;
}
void OAIGroupsV2_GroupMemberApplication::setGroupId(const qint64 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIGroupsV2_GroupMemberApplication::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIGroupsV2_GroupMemberApplication::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAIGroupsV2_GroupMemberApplication::getRequestMessage() const {
    return m_request_message;
}
void OAIGroupsV2_GroupMemberApplication::setRequestMessage(const QString &request_message) {
    m_request_message = request_message;
    m_request_message_isSet = true;
}

bool OAIGroupsV2_GroupMemberApplication::is_request_message_Set() const{
    return m_request_message_isSet;
}

bool OAIGroupsV2_GroupMemberApplication::is_request_message_Valid() const{
    return m_request_message_isValid;
}

QDateTime OAIGroupsV2_GroupMemberApplication::getResolveDate() const {
    return m_resolve_date;
}
void OAIGroupsV2_GroupMemberApplication::setResolveDate(const QDateTime &resolve_date) {
    m_resolve_date = resolve_date;
    m_resolve_date_isSet = true;
}

bool OAIGroupsV2_GroupMemberApplication::is_resolve_date_Set() const{
    return m_resolve_date_isSet;
}

bool OAIGroupsV2_GroupMemberApplication::is_resolve_date_Valid() const{
    return m_resolve_date_isValid;
}

QString OAIGroupsV2_GroupMemberApplication::getResolveMessage() const {
    return m_resolve_message;
}
void OAIGroupsV2_GroupMemberApplication::setResolveMessage(const QString &resolve_message) {
    m_resolve_message = resolve_message;
    m_resolve_message_isSet = true;
}

bool OAIGroupsV2_GroupMemberApplication::is_resolve_message_Set() const{
    return m_resolve_message_isSet;
}

bool OAIGroupsV2_GroupMemberApplication::is_resolve_message_Valid() const{
    return m_resolve_message_isValid;
}

qint32 OAIGroupsV2_GroupMemberApplication::getResolveState() const {
    return m_resolve_state;
}
void OAIGroupsV2_GroupMemberApplication::setResolveState(const qint32 &resolve_state) {
    m_resolve_state = resolve_state;
    m_resolve_state_isSet = true;
}

bool OAIGroupsV2_GroupMemberApplication::is_resolve_state_Set() const{
    return m_resolve_state_isSet;
}

bool OAIGroupsV2_GroupMemberApplication::is_resolve_state_Valid() const{
    return m_resolve_state_isValid;
}

qint64 OAIGroupsV2_GroupMemberApplication::getResolvedByMembershipId() const {
    return m_resolved_by_membership_id;
}
void OAIGroupsV2_GroupMemberApplication::setResolvedByMembershipId(const qint64 &resolved_by_membership_id) {
    m_resolved_by_membership_id = resolved_by_membership_id;
    m_resolved_by_membership_id_isSet = true;
}

bool OAIGroupsV2_GroupMemberApplication::is_resolved_by_membership_id_Set() const{
    return m_resolved_by_membership_id_isSet;
}

bool OAIGroupsV2_GroupMemberApplication::is_resolved_by_membership_id_Valid() const{
    return m_resolved_by_membership_id_isValid;
}

bool OAIGroupsV2_GroupMemberApplication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bungie_net_user_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destiny_user_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolve_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolve_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolve_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_by_membership_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupsV2_GroupMemberApplication::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
