/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGroupsV2_GroupResponse.h
 *
 * 
 */

#ifndef OAIGroupsV2_GroupResponse_H
#define OAIGroupsV2_GroupResponse_H

#include <QJsonObject>

#include "OAIGroupsV2_GroupMember.h"
#include "OAIGroupsV2_GroupPotentialMember.h"
#include "OAIGroupsV2_GroupV2.h"
#include <QList>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGroupsV2_GroupMember;
class OAIGroupsV2_GroupPotentialMember;
class OAIGroupsV2_GroupV2;

class OAIGroupsV2_GroupResponse : public OAIObject {
public:
    OAIGroupsV2_GroupResponse();
    OAIGroupsV2_GroupResponse(QString json);
    ~OAIGroupsV2_GroupResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAllianceStatus() const;
    void setAllianceStatus(const qint32 &alliance_status);
    bool is_alliance_status_Set() const;
    bool is_alliance_status_Valid() const;

    QList<qint64> getAlliedIds() const;
    void setAlliedIds(const QList<qint64> &allied_ids);
    bool is_allied_ids_Set() const;
    bool is_allied_ids_Valid() const;

    QMap<QString, OAIGroupsV2_GroupMember> getCurrentUserMemberMap() const;
    void setCurrentUserMemberMap(const QMap<QString, OAIGroupsV2_GroupMember> &current_user_member_map);
    bool is_current_user_member_map_Set() const;
    bool is_current_user_member_map_Valid() const;

    bool isCurrentUserMembershipsInactiveForDestiny() const;
    void setCurrentUserMembershipsInactiveForDestiny(const bool &current_user_memberships_inactive_for_destiny);
    bool is_current_user_memberships_inactive_for_destiny_Set() const;
    bool is_current_user_memberships_inactive_for_destiny_Valid() const;

    QMap<QString, OAIGroupsV2_GroupPotentialMember> getCurrentUserPotentialMemberMap() const;
    void setCurrentUserPotentialMemberMap(const QMap<QString, OAIGroupsV2_GroupPotentialMember> &current_user_potential_member_map);
    bool is_current_user_potential_member_map_Set() const;
    bool is_current_user_potential_member_map_Valid() const;

    OAIGroupsV2_GroupV2 getDetail() const;
    void setDetail(const OAIGroupsV2_GroupV2 &detail);
    bool is_detail_Set() const;
    bool is_detail_Valid() const;

    OAIGroupsV2_GroupMember getFounder() const;
    void setFounder(const OAIGroupsV2_GroupMember &founder);
    bool is_founder_Set() const;
    bool is_founder_Valid() const;

    qint32 getGroupJoinInviteCount() const;
    void setGroupJoinInviteCount(const qint32 &group_join_invite_count);
    bool is_group_join_invite_count_Set() const;
    bool is_group_join_invite_count_Valid() const;

    OAIGroupsV2_GroupV2 getParentGroup() const;
    void setParentGroup(const OAIGroupsV2_GroupV2 &parent_group);
    bool is_parent_group_Set() const;
    bool is_parent_group_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_alliance_status;
    bool m_alliance_status_isSet;
    bool m_alliance_status_isValid;

    QList<qint64> m_allied_ids;
    bool m_allied_ids_isSet;
    bool m_allied_ids_isValid;

    QMap<QString, OAIGroupsV2_GroupMember> m_current_user_member_map;
    bool m_current_user_member_map_isSet;
    bool m_current_user_member_map_isValid;

    bool m_current_user_memberships_inactive_for_destiny;
    bool m_current_user_memberships_inactive_for_destiny_isSet;
    bool m_current_user_memberships_inactive_for_destiny_isValid;

    QMap<QString, OAIGroupsV2_GroupPotentialMember> m_current_user_potential_member_map;
    bool m_current_user_potential_member_map_isSet;
    bool m_current_user_potential_member_map_isValid;

    OAIGroupsV2_GroupV2 m_detail;
    bool m_detail_isSet;
    bool m_detail_isValid;

    OAIGroupsV2_GroupMember m_founder;
    bool m_founder_isSet;
    bool m_founder_isValid;

    qint32 m_group_join_invite_count;
    bool m_group_join_invite_count_isSet;
    bool m_group_join_invite_count_isValid;

    OAIGroupsV2_GroupV2 m_parent_group;
    bool m_parent_group_isSet;
    bool m_parent_group_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGroupsV2_GroupResponse)

#endif // OAIGroupsV2_GroupResponse_H
