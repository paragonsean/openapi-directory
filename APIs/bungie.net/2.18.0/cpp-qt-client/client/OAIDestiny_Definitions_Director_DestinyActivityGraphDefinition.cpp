/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::~OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition() {}

void OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::initializeModel() {

    m_art_elements_isSet = false;
    m_art_elements_isValid = false;

    m_connections_isSet = false;
    m_connections_isValid = false;

    m_display_objectives_isSet = false;
    m_display_objectives_isValid = false;

    m_display_progressions_isSet = false;
    m_display_progressions_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_linked_graphs_isSet = false;
    m_linked_graphs_isValid = false;

    m_nodes_isSet = false;
    m_nodes_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;
}

void OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::fromJsonObject(QJsonObject json) {

    m_art_elements_isValid = ::OpenAPI::fromJsonValue(m_art_elements, json[QString("artElements")]);
    m_art_elements_isSet = !json[QString("artElements")].isNull() && m_art_elements_isValid;

    m_connections_isValid = ::OpenAPI::fromJsonValue(m_connections, json[QString("connections")]);
    m_connections_isSet = !json[QString("connections")].isNull() && m_connections_isValid;

    m_display_objectives_isValid = ::OpenAPI::fromJsonValue(m_display_objectives, json[QString("displayObjectives")]);
    m_display_objectives_isSet = !json[QString("displayObjectives")].isNull() && m_display_objectives_isValid;

    m_display_progressions_isValid = ::OpenAPI::fromJsonValue(m_display_progressions, json[QString("displayProgressions")]);
    m_display_progressions_isSet = !json[QString("displayProgressions")].isNull() && m_display_progressions_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_linked_graphs_isValid = ::OpenAPI::fromJsonValue(m_linked_graphs, json[QString("linkedGraphs")]);
    m_linked_graphs_isSet = !json[QString("linkedGraphs")].isNull() && m_linked_graphs_isValid;

    m_nodes_isValid = ::OpenAPI::fromJsonValue(m_nodes, json[QString("nodes")]);
    m_nodes_isSet = !json[QString("nodes")].isNull() && m_nodes_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;
}

QString OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_art_elements.size() > 0) {
        obj.insert(QString("artElements"), ::OpenAPI::toJsonValue(m_art_elements));
    }
    if (m_connections.size() > 0) {
        obj.insert(QString("connections"), ::OpenAPI::toJsonValue(m_connections));
    }
    if (m_display_objectives.size() > 0) {
        obj.insert(QString("displayObjectives"), ::OpenAPI::toJsonValue(m_display_objectives));
    }
    if (m_display_progressions.size() > 0) {
        obj.insert(QString("displayProgressions"), ::OpenAPI::toJsonValue(m_display_progressions));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_linked_graphs.size() > 0) {
        obj.insert(QString("linkedGraphs"), ::OpenAPI::toJsonValue(m_linked_graphs));
    }
    if (m_nodes.size() > 0) {
        obj.insert(QString("nodes"), ::OpenAPI::toJsonValue(m_nodes));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    return obj;
}

QList<OAIDestiny_Definitions_Director_DestinyActivityGraphArtElementDefinition> OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::getArtElements() const {
    return m_art_elements;
}
void OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::setArtElements(const QList<OAIDestiny_Definitions_Director_DestinyActivityGraphArtElementDefinition> &art_elements) {
    m_art_elements = art_elements;
    m_art_elements_isSet = true;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::is_art_elements_Set() const{
    return m_art_elements_isSet;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::is_art_elements_Valid() const{
    return m_art_elements_isValid;
}

QList<OAIDestiny_Definitions_Director_DestinyActivityGraphConnectionDefinition> OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::getConnections() const {
    return m_connections;
}
void OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::setConnections(const QList<OAIDestiny_Definitions_Director_DestinyActivityGraphConnectionDefinition> &connections) {
    m_connections = connections;
    m_connections_isSet = true;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::is_connections_Set() const{
    return m_connections_isSet;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::is_connections_Valid() const{
    return m_connections_isValid;
}

QList<OAIDestiny_Definitions_Director_DestinyActivityGraphDisplayObjectiveDefinition> OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::getDisplayObjectives() const {
    return m_display_objectives;
}
void OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::setDisplayObjectives(const QList<OAIDestiny_Definitions_Director_DestinyActivityGraphDisplayObjectiveDefinition> &display_objectives) {
    m_display_objectives = display_objectives;
    m_display_objectives_isSet = true;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::is_display_objectives_Set() const{
    return m_display_objectives_isSet;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::is_display_objectives_Valid() const{
    return m_display_objectives_isValid;
}

QList<OAIDestiny_Definitions_Director_DestinyActivityGraphDisplayProgressionDefinition> OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::getDisplayProgressions() const {
    return m_display_progressions;
}
void OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::setDisplayProgressions(const QList<OAIDestiny_Definitions_Director_DestinyActivityGraphDisplayProgressionDefinition> &display_progressions) {
    m_display_progressions = display_progressions;
    m_display_progressions_isSet = true;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::is_display_progressions_Set() const{
    return m_display_progressions_isSet;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::is_display_progressions_Valid() const{
    return m_display_progressions_isValid;
}

qint32 OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::is_index_Valid() const{
    return m_index_isValid;
}

QList<OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition> OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::getLinkedGraphs() const {
    return m_linked_graphs;
}
void OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::setLinkedGraphs(const QList<OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition> &linked_graphs) {
    m_linked_graphs = linked_graphs;
    m_linked_graphs_isSet = true;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::is_linked_graphs_Set() const{
    return m_linked_graphs_isSet;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::is_linked_graphs_Valid() const{
    return m_linked_graphs_isValid;
}

QList<OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition> OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::getNodes() const {
    return m_nodes;
}
void OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::setNodes(const QList<OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition> &nodes) {
    m_nodes = nodes;
    m_nodes_isSet = true;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::is_nodes_Set() const{
    return m_nodes_isSet;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::is_nodes_Valid() const{
    return m_nodes_isValid;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_art_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_objectives.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_progressions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_graphs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
