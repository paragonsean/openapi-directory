/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupsV2_GroupBanRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupsV2_GroupBanRequest::OAIGroupsV2_GroupBanRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupsV2_GroupBanRequest::OAIGroupsV2_GroupBanRequest() {
    this->initializeModel();
}

OAIGroupsV2_GroupBanRequest::~OAIGroupsV2_GroupBanRequest() {}

void OAIGroupsV2_GroupBanRequest::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;
}

void OAIGroupsV2_GroupBanRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupsV2_GroupBanRequest::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;
}

QString OAIGroupsV2_GroupBanRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupsV2_GroupBanRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    return obj;
}

QString OAIGroupsV2_GroupBanRequest::getComment() const {
    return m_comment;
}
void OAIGroupsV2_GroupBanRequest::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIGroupsV2_GroupBanRequest::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIGroupsV2_GroupBanRequest::is_comment_Valid() const{
    return m_comment_isValid;
}

qint32 OAIGroupsV2_GroupBanRequest::getLength() const {
    return m_length;
}
void OAIGroupsV2_GroupBanRequest::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIGroupsV2_GroupBanRequest::is_length_Set() const{
    return m_length_isSet;
}

bool OAIGroupsV2_GroupBanRequest::is_length_Valid() const{
    return m_length_isValid;
}

bool OAIGroupsV2_GroupBanRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupsV2_GroupBanRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
