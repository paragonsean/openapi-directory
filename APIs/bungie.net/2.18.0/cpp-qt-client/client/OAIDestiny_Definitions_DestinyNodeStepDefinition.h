/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyNodeStepDefinition.h
 *
 * This defines the properties of a \&quot;Talent Node Step\&quot;. When you see a talent node in game, the actual visible properties that you see (its icon, description, the perks and stats it provides) are not provided by the Node itself, but rather by the currently active Step on the node.  When a Talent Node is activated, the currently active step&#39;s benefits are conferred upon the item and character.  The currently active step on talent nodes are determined when an item is first instantiated. Sometimes it is random, sometimes it is more deterministic (particularly when a node has only a single step).  Note that, when dealing with Talent Node Steps, you must ensure that you have the latest version of content. stepIndex and nodeStepHash - two ways of identifying the step within a node - are both content version dependent, and thus are subject to change between content updates.
 */

#ifndef OAIDestiny_Definitions_DestinyNodeStepDefinition_H
#define OAIDestiny_Definitions_DestinyNodeStepDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition.h"
#include "OAIDestiny_Definitions_DestinyNodeActivationRequirement.h"
#include "OAIDestiny_Definitions_DestinyNodeSocketReplaceResponse.h"
#include "OAIDestiny_Definitions_DestinyTalentNodeStepGroups.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_DestinyNodeActivationRequirement;
class OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition;
class OAIDestiny_Definitions_DestinyNodeSocketReplaceResponse;
class OAIDestiny_Definitions_DestinyTalentNodeStepGroups;

class OAIDestiny_Definitions_DestinyNodeStepDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyNodeStepDefinition();
    OAIDestiny_Definitions_DestinyNodeStepDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyNodeStepDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDestiny_Definitions_DestinyNodeActivationRequirement getActivationRequirement() const;
    void setActivationRequirement(const OAIDestiny_Definitions_DestinyNodeActivationRequirement &activation_requirement);
    bool is_activation_requirement_Set() const;
    bool is_activation_requirement_Valid() const;

    bool isAffectsLevel() const;
    void setAffectsLevel(const bool &affects_level);
    bool is_affects_level_Set() const;
    bool is_affects_level_Valid() const;

    bool isAffectsQuality() const;
    void setAffectsQuality(const bool &affects_quality);
    bool is_affects_quality_Set() const;
    bool is_affects_quality_Valid() const;

    bool isCanActivateNextStep() const;
    void setCanActivateNextStep(const bool &can_activate_next_step);
    bool is_can_activate_next_step_Set() const;
    bool is_can_activate_next_step_Valid() const;

    qint32 getDamageType() const;
    void setDamageType(const qint32 &damage_type);
    bool is_damage_type_Set() const;
    bool is_damage_type_Valid() const;

    qint32 getDamageTypeHash() const;
    void setDamageTypeHash(const qint32 &damage_type_hash);
    bool is_damage_type_hash_Set() const;
    bool is_damage_type_hash_Valid() const;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition getDisplayProperties() const;
    void setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties);
    bool is_display_properties_Set() const;
    bool is_display_properties_Valid() const;

    QString getInteractionDescription() const;
    void setInteractionDescription(const QString &interaction_description);
    bool is_interaction_description_Set() const;
    bool is_interaction_description_Valid() const;

    bool isIsNextStepRandom() const;
    void setIsNextStepRandom(const bool &is_next_step_random);
    bool is_is_next_step_random_Set() const;
    bool is_is_next_step_random_Valid() const;

    qint32 getNextStepIndex() const;
    void setNextStepIndex(const qint32 &next_step_index);
    bool is_next_step_index_Set() const;
    bool is_next_step_index_Valid() const;

    qint32 getNodeStepHash() const;
    void setNodeStepHash(const qint32 &node_step_hash);
    bool is_node_step_hash_Set() const;
    bool is_node_step_hash_Valid() const;

    QList<qint32> getPerkHashes() const;
    void setPerkHashes(const QList<qint32> &perk_hashes);
    bool is_perk_hashes_Set() const;
    bool is_perk_hashes_Valid() const;

    QList<OAIDestiny_Definitions_DestinyNodeSocketReplaceResponse> getSocketReplacements() const;
    void setSocketReplacements(const QList<OAIDestiny_Definitions_DestinyNodeSocketReplaceResponse> &socket_replacements);
    bool is_socket_replacements_Set() const;
    bool is_socket_replacements_Valid() const;

    qint32 getStartProgressionBarAtProgress() const;
    void setStartProgressionBarAtProgress(const qint32 &start_progression_bar_at_progress);
    bool is_start_progression_bar_at_progress_Set() const;
    bool is_start_progression_bar_at_progress_Valid() const;

    QList<qint32> getStatHashes() const;
    void setStatHashes(const QList<qint32> &stat_hashes);
    bool is_stat_hashes_Set() const;
    bool is_stat_hashes_Valid() const;

    OAIDestiny_Definitions_DestinyTalentNodeStepGroups getStepGroups() const;
    void setStepGroups(const OAIDestiny_Definitions_DestinyTalentNodeStepGroups &step_groups);
    bool is_step_groups_Set() const;
    bool is_step_groups_Valid() const;

    qint32 getStepIndex() const;
    void setStepIndex(const qint32 &step_index);
    bool is_step_index_Set() const;
    bool is_step_index_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDestiny_Definitions_DestinyNodeActivationRequirement m_activation_requirement;
    bool m_activation_requirement_isSet;
    bool m_activation_requirement_isValid;

    bool m_affects_level;
    bool m_affects_level_isSet;
    bool m_affects_level_isValid;

    bool m_affects_quality;
    bool m_affects_quality_isSet;
    bool m_affects_quality_isValid;

    bool m_can_activate_next_step;
    bool m_can_activate_next_step_isSet;
    bool m_can_activate_next_step_isValid;

    qint32 m_damage_type;
    bool m_damage_type_isSet;
    bool m_damage_type_isValid;

    qint32 m_damage_type_hash;
    bool m_damage_type_hash_isSet;
    bool m_damage_type_hash_isValid;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition m_display_properties;
    bool m_display_properties_isSet;
    bool m_display_properties_isValid;

    QString m_interaction_description;
    bool m_interaction_description_isSet;
    bool m_interaction_description_isValid;

    bool m_is_next_step_random;
    bool m_is_next_step_random_isSet;
    bool m_is_next_step_random_isValid;

    qint32 m_next_step_index;
    bool m_next_step_index_isSet;
    bool m_next_step_index_isValid;

    qint32 m_node_step_hash;
    bool m_node_step_hash_isSet;
    bool m_node_step_hash_isValid;

    QList<qint32> m_perk_hashes;
    bool m_perk_hashes_isSet;
    bool m_perk_hashes_isValid;

    QList<OAIDestiny_Definitions_DestinyNodeSocketReplaceResponse> m_socket_replacements;
    bool m_socket_replacements_isSet;
    bool m_socket_replacements_isValid;

    qint32 m_start_progression_bar_at_progress;
    bool m_start_progression_bar_at_progress_isSet;
    bool m_start_progression_bar_at_progress_isValid;

    QList<qint32> m_stat_hashes;
    bool m_stat_hashes_isSet;
    bool m_stat_hashes_isValid;

    OAIDestiny_Definitions_DestinyTalentNodeStepGroups m_step_groups;
    bool m_step_groups_isSet;
    bool m_step_groups_isValid;

    qint32 m_step_index;
    bool m_step_index_isSet;
    bool m_step_index_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyNodeStepDefinition)

#endif // OAIDestiny_Definitions_DestinyNodeStepDefinition_H
