/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Artifacts_DestinyArtifactTier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Artifacts_DestinyArtifactTier::OAIDestiny_Artifacts_DestinyArtifactTier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Artifacts_DestinyArtifactTier::OAIDestiny_Artifacts_DestinyArtifactTier() {
    this->initializeModel();
}

OAIDestiny_Artifacts_DestinyArtifactTier::~OAIDestiny_Artifacts_DestinyArtifactTier() {}

void OAIDestiny_Artifacts_DestinyArtifactTier::initializeModel() {

    m_is_unlocked_isSet = false;
    m_is_unlocked_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_points_to_unlock_isSet = false;
    m_points_to_unlock_isValid = false;

    m_tier_hash_isSet = false;
    m_tier_hash_isValid = false;
}

void OAIDestiny_Artifacts_DestinyArtifactTier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Artifacts_DestinyArtifactTier::fromJsonObject(QJsonObject json) {

    m_is_unlocked_isValid = ::OpenAPI::fromJsonValue(m_is_unlocked, json[QString("isUnlocked")]);
    m_is_unlocked_isSet = !json[QString("isUnlocked")].isNull() && m_is_unlocked_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_points_to_unlock_isValid = ::OpenAPI::fromJsonValue(m_points_to_unlock, json[QString("pointsToUnlock")]);
    m_points_to_unlock_isSet = !json[QString("pointsToUnlock")].isNull() && m_points_to_unlock_isValid;

    m_tier_hash_isValid = ::OpenAPI::fromJsonValue(m_tier_hash, json[QString("tierHash")]);
    m_tier_hash_isSet = !json[QString("tierHash")].isNull() && m_tier_hash_isValid;
}

QString OAIDestiny_Artifacts_DestinyArtifactTier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Artifacts_DestinyArtifactTier::asJsonObject() const {
    QJsonObject obj;
    if (m_is_unlocked_isSet) {
        obj.insert(QString("isUnlocked"), ::OpenAPI::toJsonValue(m_is_unlocked));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_points_to_unlock_isSet) {
        obj.insert(QString("pointsToUnlock"), ::OpenAPI::toJsonValue(m_points_to_unlock));
    }
    if (m_tier_hash_isSet) {
        obj.insert(QString("tierHash"), ::OpenAPI::toJsonValue(m_tier_hash));
    }
    return obj;
}

bool OAIDestiny_Artifacts_DestinyArtifactTier::isIsUnlocked() const {
    return m_is_unlocked;
}
void OAIDestiny_Artifacts_DestinyArtifactTier::setIsUnlocked(const bool &is_unlocked) {
    m_is_unlocked = is_unlocked;
    m_is_unlocked_isSet = true;
}

bool OAIDestiny_Artifacts_DestinyArtifactTier::is_is_unlocked_Set() const{
    return m_is_unlocked_isSet;
}

bool OAIDestiny_Artifacts_DestinyArtifactTier::is_is_unlocked_Valid() const{
    return m_is_unlocked_isValid;
}

QList<OAIDestiny_Artifacts_DestinyArtifactTierItem> OAIDestiny_Artifacts_DestinyArtifactTier::getItems() const {
    return m_items;
}
void OAIDestiny_Artifacts_DestinyArtifactTier::setItems(const QList<OAIDestiny_Artifacts_DestinyArtifactTierItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIDestiny_Artifacts_DestinyArtifactTier::is_items_Set() const{
    return m_items_isSet;
}

bool OAIDestiny_Artifacts_DestinyArtifactTier::is_items_Valid() const{
    return m_items_isValid;
}

qint32 OAIDestiny_Artifacts_DestinyArtifactTier::getPointsToUnlock() const {
    return m_points_to_unlock;
}
void OAIDestiny_Artifacts_DestinyArtifactTier::setPointsToUnlock(const qint32 &points_to_unlock) {
    m_points_to_unlock = points_to_unlock;
    m_points_to_unlock_isSet = true;
}

bool OAIDestiny_Artifacts_DestinyArtifactTier::is_points_to_unlock_Set() const{
    return m_points_to_unlock_isSet;
}

bool OAIDestiny_Artifacts_DestinyArtifactTier::is_points_to_unlock_Valid() const{
    return m_points_to_unlock_isValid;
}

qint32 OAIDestiny_Artifacts_DestinyArtifactTier::getTierHash() const {
    return m_tier_hash;
}
void OAIDestiny_Artifacts_DestinyArtifactTier::setTierHash(const qint32 &tier_hash) {
    m_tier_hash = tier_hash;
    m_tier_hash_isSet = true;
}

bool OAIDestiny_Artifacts_DestinyArtifactTier::is_tier_hash_Set() const{
    return m_tier_hash_isSet;
}

bool OAIDestiny_Artifacts_DestinyArtifactTier::is_tier_hash_Valid() const{
    return m_tier_hash_isValid;
}

bool OAIDestiny_Artifacts_DestinyArtifactTier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_unlocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_to_unlock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Artifacts_DestinyArtifactTier::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
