/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplications_Application.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplications_Application::OAIApplications_Application(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplications_Application::OAIApplications_Application() {
    this->initializeModel();
}

OAIApplications_Application::~OAIApplications_Application() {}

void OAIApplications_Application::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_first_published_isSet = false;
    m_first_published_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_override_authorize_view_name_isSet = false;
    m_override_authorize_view_name_isValid = false;

    m_redirect_url_isSet = false;
    m_redirect_url_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_changed_isSet = false;
    m_status_changed_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;
}

void OAIApplications_Application::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplications_Application::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("applicationId")]);
    m_application_id_isSet = !json[QString("applicationId")].isNull() && m_application_id_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_first_published_isValid = ::OpenAPI::fromJsonValue(m_first_published, json[QString("firstPublished")]);
    m_first_published_isSet = !json[QString("firstPublished")].isNull() && m_first_published_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_override_authorize_view_name_isValid = ::OpenAPI::fromJsonValue(m_override_authorize_view_name, json[QString("overrideAuthorizeViewName")]);
    m_override_authorize_view_name_isSet = !json[QString("overrideAuthorizeViewName")].isNull() && m_override_authorize_view_name_isValid;

    m_redirect_url_isValid = ::OpenAPI::fromJsonValue(m_redirect_url, json[QString("redirectUrl")]);
    m_redirect_url_isSet = !json[QString("redirectUrl")].isNull() && m_redirect_url_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_changed_isValid = ::OpenAPI::fromJsonValue(m_status_changed, json[QString("statusChanged")]);
    m_status_changed_isSet = !json[QString("statusChanged")].isNull() && m_status_changed_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;
}

QString OAIApplications_Application::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplications_Application::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("applicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_first_published_isSet) {
        obj.insert(QString("firstPublished"), ::OpenAPI::toJsonValue(m_first_published));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_override_authorize_view_name_isSet) {
        obj.insert(QString("overrideAuthorizeViewName"), ::OpenAPI::toJsonValue(m_override_authorize_view_name));
    }
    if (m_redirect_url_isSet) {
        obj.insert(QString("redirectUrl"), ::OpenAPI::toJsonValue(m_redirect_url));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_changed_isSet) {
        obj.insert(QString("statusChanged"), ::OpenAPI::toJsonValue(m_status_changed));
    }
    if (m_team.size() > 0) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    return obj;
}

qint32 OAIApplications_Application::getApplicationId() const {
    return m_application_id;
}
void OAIApplications_Application::setApplicationId(const qint32 &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIApplications_Application::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIApplications_Application::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QDateTime OAIApplications_Application::getCreationDate() const {
    return m_creation_date;
}
void OAIApplications_Application::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIApplications_Application::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIApplications_Application::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QDateTime OAIApplications_Application::getFirstPublished() const {
    return m_first_published;
}
void OAIApplications_Application::setFirstPublished(const QDateTime &first_published) {
    m_first_published = first_published;
    m_first_published_isSet = true;
}

bool OAIApplications_Application::is_first_published_Set() const{
    return m_first_published_isSet;
}

bool OAIApplications_Application::is_first_published_Valid() const{
    return m_first_published_isValid;
}

QString OAIApplications_Application::getLink() const {
    return m_link;
}
void OAIApplications_Application::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIApplications_Application::is_link_Set() const{
    return m_link_isSet;
}

bool OAIApplications_Application::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIApplications_Application::getName() const {
    return m_name;
}
void OAIApplications_Application::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplications_Application::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplications_Application::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApplications_Application::getOrigin() const {
    return m_origin;
}
void OAIApplications_Application::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIApplications_Application::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIApplications_Application::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIApplications_Application::getOverrideAuthorizeViewName() const {
    return m_override_authorize_view_name;
}
void OAIApplications_Application::setOverrideAuthorizeViewName(const QString &override_authorize_view_name) {
    m_override_authorize_view_name = override_authorize_view_name;
    m_override_authorize_view_name_isSet = true;
}

bool OAIApplications_Application::is_override_authorize_view_name_Set() const{
    return m_override_authorize_view_name_isSet;
}

bool OAIApplications_Application::is_override_authorize_view_name_Valid() const{
    return m_override_authorize_view_name_isValid;
}

QString OAIApplications_Application::getRedirectUrl() const {
    return m_redirect_url;
}
void OAIApplications_Application::setRedirectUrl(const QString &redirect_url) {
    m_redirect_url = redirect_url;
    m_redirect_url_isSet = true;
}

bool OAIApplications_Application::is_redirect_url_Set() const{
    return m_redirect_url_isSet;
}

bool OAIApplications_Application::is_redirect_url_Valid() const{
    return m_redirect_url_isValid;
}

qint64 OAIApplications_Application::getScope() const {
    return m_scope;
}
void OAIApplications_Application::setScope(const qint64 &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIApplications_Application::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIApplications_Application::is_scope_Valid() const{
    return m_scope_isValid;
}

qint32 OAIApplications_Application::getStatus() const {
    return m_status;
}
void OAIApplications_Application::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIApplications_Application::is_status_Set() const{
    return m_status_isSet;
}

bool OAIApplications_Application::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIApplications_Application::getStatusChanged() const {
    return m_status_changed;
}
void OAIApplications_Application::setStatusChanged(const QDateTime &status_changed) {
    m_status_changed = status_changed;
    m_status_changed_isSet = true;
}

bool OAIApplications_Application::is_status_changed_Set() const{
    return m_status_changed_isSet;
}

bool OAIApplications_Application::is_status_changed_Valid() const{
    return m_status_changed_isValid;
}

QList<OAIApplications_ApplicationDeveloper> OAIApplications_Application::getTeam() const {
    return m_team;
}
void OAIApplications_Application::setTeam(const QList<OAIApplications_ApplicationDeveloper> &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIApplications_Application::is_team_Set() const{
    return m_team_isSet;
}

bool OAIApplications_Application::is_team_Valid() const{
    return m_team_isValid;
}

bool OAIApplications_Application::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_authorize_view_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_changed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplications_Application::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
