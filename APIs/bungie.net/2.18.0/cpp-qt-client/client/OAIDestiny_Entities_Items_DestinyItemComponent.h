/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Entities_Items_DestinyItemComponent.h
 *
 * The base item component, filled with properties that are generally useful to know in any item request or that don&#39;t feel worthwhile to put in their own component.
 */

#ifndef OAIDestiny_Entities_Items_DestinyItemComponent_H
#define OAIDestiny_Entities_Items_DestinyItemComponent_H

#include <QJsonObject>

#include "OAIDestiny_Quests_DestinyObjectiveProgress.h"
#include <QDateTime>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Quests_DestinyObjectiveProgress;

class OAIDestiny_Entities_Items_DestinyItemComponent : public OAIObject {
public:
    OAIDestiny_Entities_Items_DestinyItemComponent();
    OAIDestiny_Entities_Items_DestinyItemComponent(QString json);
    ~OAIDestiny_Entities_Items_DestinyItemComponent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBindStatus() const;
    void setBindStatus(const qint32 &bind_status);
    bool is_bind_status_Set() const;
    bool is_bind_status_Valid() const;

    qint32 getBucketHash() const;
    void setBucketHash(const qint32 &bucket_hash);
    bool is_bucket_hash_Set() const;
    bool is_bucket_hash_Valid() const;

    QDateTime getExpirationDate() const;
    void setExpirationDate(const QDateTime &expiration_date);
    bool is_expiration_date_Set() const;
    bool is_expiration_date_Valid() const;

    bool isIsWrapper() const;
    void setIsWrapper(const bool &is_wrapper);
    bool is_is_wrapper_Set() const;
    bool is_is_wrapper_Valid() const;

    qint32 getItemHash() const;
    void setItemHash(const qint32 &item_hash);
    bool is_item_hash_Set() const;
    bool is_item_hash_Valid() const;

    qint64 getItemInstanceId() const;
    void setItemInstanceId(const qint64 &item_instance_id);
    bool is_item_instance_id_Set() const;
    bool is_item_instance_id_Valid() const;

    QList<bool> getItemValueVisibility() const;
    void setItemValueVisibility(const QList<bool> &item_value_visibility);
    bool is_item_value_visibility_Set() const;
    bool is_item_value_visibility_Valid() const;

    qint32 getLocation() const;
    void setLocation(const qint32 &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    bool isLockable() const;
    void setLockable(const bool &lockable);
    bool is_lockable_Set() const;
    bool is_lockable_Valid() const;

    qint32 getMetricHash() const;
    void setMetricHash(const qint32 &metric_hash);
    bool is_metric_hash_Set() const;
    bool is_metric_hash_Valid() const;

    OAIDestiny_Quests_DestinyObjectiveProgress getMetricObjective() const;
    void setMetricObjective(const OAIDestiny_Quests_DestinyObjectiveProgress &metric_objective);
    bool is_metric_objective_Set() const;
    bool is_metric_objective_Valid() const;

    qint32 getOverrideStyleItemHash() const;
    void setOverrideStyleItemHash(const qint32 &override_style_item_hash);
    bool is_override_style_item_hash_Set() const;
    bool is_override_style_item_hash_Valid() const;

    qint32 getQuantity() const;
    void setQuantity(const qint32 &quantity);
    bool is_quantity_Set() const;
    bool is_quantity_Valid() const;

    qint32 getState() const;
    void setState(const qint32 &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QList<qint32> getTooltipNotificationIndexes() const;
    void setTooltipNotificationIndexes(const QList<qint32> &tooltip_notification_indexes);
    bool is_tooltip_notification_indexes_Set() const;
    bool is_tooltip_notification_indexes_Valid() const;

    qint32 getTransferStatus() const;
    void setTransferStatus(const qint32 &transfer_status);
    bool is_transfer_status_Set() const;
    bool is_transfer_status_Valid() const;

    qint32 getVersionNumber() const;
    void setVersionNumber(const qint32 &version_number);
    bool is_version_number_Set() const;
    bool is_version_number_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_bind_status;
    bool m_bind_status_isSet;
    bool m_bind_status_isValid;

    qint32 m_bucket_hash;
    bool m_bucket_hash_isSet;
    bool m_bucket_hash_isValid;

    QDateTime m_expiration_date;
    bool m_expiration_date_isSet;
    bool m_expiration_date_isValid;

    bool m_is_wrapper;
    bool m_is_wrapper_isSet;
    bool m_is_wrapper_isValid;

    qint32 m_item_hash;
    bool m_item_hash_isSet;
    bool m_item_hash_isValid;

    qint64 m_item_instance_id;
    bool m_item_instance_id_isSet;
    bool m_item_instance_id_isValid;

    QList<bool> m_item_value_visibility;
    bool m_item_value_visibility_isSet;
    bool m_item_value_visibility_isValid;

    qint32 m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    bool m_lockable;
    bool m_lockable_isSet;
    bool m_lockable_isValid;

    qint32 m_metric_hash;
    bool m_metric_hash_isSet;
    bool m_metric_hash_isValid;

    OAIDestiny_Quests_DestinyObjectiveProgress m_metric_objective;
    bool m_metric_objective_isSet;
    bool m_metric_objective_isValid;

    qint32 m_override_style_item_hash;
    bool m_override_style_item_hash_isSet;
    bool m_override_style_item_hash_isValid;

    qint32 m_quantity;
    bool m_quantity_isSet;
    bool m_quantity_isValid;

    qint32 m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QList<qint32> m_tooltip_notification_indexes;
    bool m_tooltip_notification_indexes_isSet;
    bool m_tooltip_notification_indexes_isValid;

    qint32 m_transfer_status;
    bool m_transfer_status_isSet;
    bool m_transfer_status_isValid;

    qint32 m_version_number;
    bool m_version_number_isSet;
    bool m_version_number_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Entities_Items_DestinyItemComponent)

#endif // OAIDestiny_Entities_Items_DestinyItemComponent_H
