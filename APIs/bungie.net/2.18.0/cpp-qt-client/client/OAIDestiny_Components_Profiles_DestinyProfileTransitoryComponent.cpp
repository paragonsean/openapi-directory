/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent() {
    this->initializeModel();
}

OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::~OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent() {}

void OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::initializeModel() {

    m_current_activity_isSet = false;
    m_current_activity_isValid = false;

    m_joinability_isSet = false;
    m_joinability_isValid = false;

    m_last_orbited_destination_hash_isSet = false;
    m_last_orbited_destination_hash_isValid = false;

    m_party_members_isSet = false;
    m_party_members_isValid = false;

    m_tracking_isSet = false;
    m_tracking_isValid = false;
}

void OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::fromJsonObject(QJsonObject json) {

    m_current_activity_isValid = ::OpenAPI::fromJsonValue(m_current_activity, json[QString("currentActivity")]);
    m_current_activity_isSet = !json[QString("currentActivity")].isNull() && m_current_activity_isValid;

    m_joinability_isValid = ::OpenAPI::fromJsonValue(m_joinability, json[QString("joinability")]);
    m_joinability_isSet = !json[QString("joinability")].isNull() && m_joinability_isValid;

    m_last_orbited_destination_hash_isValid = ::OpenAPI::fromJsonValue(m_last_orbited_destination_hash, json[QString("lastOrbitedDestinationHash")]);
    m_last_orbited_destination_hash_isSet = !json[QString("lastOrbitedDestinationHash")].isNull() && m_last_orbited_destination_hash_isValid;

    m_party_members_isValid = ::OpenAPI::fromJsonValue(m_party_members, json[QString("partyMembers")]);
    m_party_members_isSet = !json[QString("partyMembers")].isNull() && m_party_members_isValid;

    m_tracking_isValid = ::OpenAPI::fromJsonValue(m_tracking, json[QString("tracking")]);
    m_tracking_isSet = !json[QString("tracking")].isNull() && m_tracking_isValid;
}

QString OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_current_activity.isSet()) {
        obj.insert(QString("currentActivity"), ::OpenAPI::toJsonValue(m_current_activity));
    }
    if (m_joinability.isSet()) {
        obj.insert(QString("joinability"), ::OpenAPI::toJsonValue(m_joinability));
    }
    if (m_last_orbited_destination_hash_isSet) {
        obj.insert(QString("lastOrbitedDestinationHash"), ::OpenAPI::toJsonValue(m_last_orbited_destination_hash));
    }
    if (m_party_members.size() > 0) {
        obj.insert(QString("partyMembers"), ::OpenAPI::toJsonValue(m_party_members));
    }
    if (m_tracking.size() > 0) {
        obj.insert(QString("tracking"), ::OpenAPI::toJsonValue(m_tracking));
    }
    return obj;
}

OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::getCurrentActivity() const {
    return m_current_activity;
}
void OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::setCurrentActivity(const OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity &current_activity) {
    m_current_activity = current_activity;
    m_current_activity_isSet = true;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::is_current_activity_Set() const{
    return m_current_activity_isSet;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::is_current_activity_Valid() const{
    return m_current_activity_isValid;
}

OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::getJoinability() const {
    return m_joinability;
}
void OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::setJoinability(const OAIDestiny_Components_Profiles_DestinyProfileTransitoryJoinability &joinability) {
    m_joinability = joinability;
    m_joinability_isSet = true;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::is_joinability_Set() const{
    return m_joinability_isSet;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::is_joinability_Valid() const{
    return m_joinability_isValid;
}

qint32 OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::getLastOrbitedDestinationHash() const {
    return m_last_orbited_destination_hash;
}
void OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::setLastOrbitedDestinationHash(const qint32 &last_orbited_destination_hash) {
    m_last_orbited_destination_hash = last_orbited_destination_hash;
    m_last_orbited_destination_hash_isSet = true;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::is_last_orbited_destination_hash_Set() const{
    return m_last_orbited_destination_hash_isSet;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::is_last_orbited_destination_hash_Valid() const{
    return m_last_orbited_destination_hash_isValid;
}

QList<OAIDestiny_Components_Profiles_DestinyProfileTransitoryPartyMember> OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::getPartyMembers() const {
    return m_party_members;
}
void OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::setPartyMembers(const QList<OAIDestiny_Components_Profiles_DestinyProfileTransitoryPartyMember> &party_members) {
    m_party_members = party_members;
    m_party_members_isSet = true;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::is_party_members_Set() const{
    return m_party_members_isSet;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::is_party_members_Valid() const{
    return m_party_members_isValid;
}

QList<OAIDestiny_Components_Profiles_DestinyProfileTransitoryTrackingEntry> OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::getTracking() const {
    return m_tracking;
}
void OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::setTracking(const QList<OAIDestiny_Components_Profiles_DestinyProfileTransitoryTrackingEntry> &tracking) {
    m_tracking = tracking;
    m_tracking_isSet = true;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::is_tracking_Set() const{
    return m_tracking_isSet;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::is_tracking_Valid() const{
    return m_tracking_isValid;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_activity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_joinability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_orbited_destination_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
