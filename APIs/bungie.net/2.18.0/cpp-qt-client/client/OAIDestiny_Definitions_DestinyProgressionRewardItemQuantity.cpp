/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::~OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity() {}

void OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::initializeModel() {

    m_acquisition_behavior_isSet = false;
    m_acquisition_behavior_isValid = false;

    m_claim_unlock_display_strings_isSet = false;
    m_claim_unlock_display_strings_isValid = false;

    m_has_conditional_visibility_isSet = false;
    m_has_conditional_visibility_isValid = false;

    m_item_hash_isSet = false;
    m_item_hash_isValid = false;

    m_item_instance_id_isSet = false;
    m_item_instance_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_rewarded_at_progression_level_isSet = false;
    m_rewarded_at_progression_level_isValid = false;

    m_ui_display_style_isSet = false;
    m_ui_display_style_isValid = false;
}

void OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::fromJsonObject(QJsonObject json) {

    m_acquisition_behavior_isValid = ::OpenAPI::fromJsonValue(m_acquisition_behavior, json[QString("acquisitionBehavior")]);
    m_acquisition_behavior_isSet = !json[QString("acquisitionBehavior")].isNull() && m_acquisition_behavior_isValid;

    m_claim_unlock_display_strings_isValid = ::OpenAPI::fromJsonValue(m_claim_unlock_display_strings, json[QString("claimUnlockDisplayStrings")]);
    m_claim_unlock_display_strings_isSet = !json[QString("claimUnlockDisplayStrings")].isNull() && m_claim_unlock_display_strings_isValid;

    m_has_conditional_visibility_isValid = ::OpenAPI::fromJsonValue(m_has_conditional_visibility, json[QString("hasConditionalVisibility")]);
    m_has_conditional_visibility_isSet = !json[QString("hasConditionalVisibility")].isNull() && m_has_conditional_visibility_isValid;

    m_item_hash_isValid = ::OpenAPI::fromJsonValue(m_item_hash, json[QString("itemHash")]);
    m_item_hash_isSet = !json[QString("itemHash")].isNull() && m_item_hash_isValid;

    m_item_instance_id_isValid = ::OpenAPI::fromJsonValue(m_item_instance_id, json[QString("itemInstanceId")]);
    m_item_instance_id_isSet = !json[QString("itemInstanceId")].isNull() && m_item_instance_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_rewarded_at_progression_level_isValid = ::OpenAPI::fromJsonValue(m_rewarded_at_progression_level, json[QString("rewardedAtProgressionLevel")]);
    m_rewarded_at_progression_level_isSet = !json[QString("rewardedAtProgressionLevel")].isNull() && m_rewarded_at_progression_level_isValid;

    m_ui_display_style_isValid = ::OpenAPI::fromJsonValue(m_ui_display_style, json[QString("uiDisplayStyle")]);
    m_ui_display_style_isSet = !json[QString("uiDisplayStyle")].isNull() && m_ui_display_style_isValid;
}

QString OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::asJsonObject() const {
    QJsonObject obj;
    if (m_acquisition_behavior_isSet) {
        obj.insert(QString("acquisitionBehavior"), ::OpenAPI::toJsonValue(m_acquisition_behavior));
    }
    if (m_claim_unlock_display_strings.size() > 0) {
        obj.insert(QString("claimUnlockDisplayStrings"), ::OpenAPI::toJsonValue(m_claim_unlock_display_strings));
    }
    if (m_has_conditional_visibility_isSet) {
        obj.insert(QString("hasConditionalVisibility"), ::OpenAPI::toJsonValue(m_has_conditional_visibility));
    }
    if (m_item_hash_isSet) {
        obj.insert(QString("itemHash"), ::OpenAPI::toJsonValue(m_item_hash));
    }
    if (m_item_instance_id_isSet) {
        obj.insert(QString("itemInstanceId"), ::OpenAPI::toJsonValue(m_item_instance_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_rewarded_at_progression_level_isSet) {
        obj.insert(QString("rewardedAtProgressionLevel"), ::OpenAPI::toJsonValue(m_rewarded_at_progression_level));
    }
    if (m_ui_display_style_isSet) {
        obj.insert(QString("uiDisplayStyle"), ::OpenAPI::toJsonValue(m_ui_display_style));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::getAcquisitionBehavior() const {
    return m_acquisition_behavior;
}
void OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::setAcquisitionBehavior(const qint32 &acquisition_behavior) {
    m_acquisition_behavior = acquisition_behavior;
    m_acquisition_behavior_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::is_acquisition_behavior_Set() const{
    return m_acquisition_behavior_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::is_acquisition_behavior_Valid() const{
    return m_acquisition_behavior_isValid;
}

QList<QString> OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::getClaimUnlockDisplayStrings() const {
    return m_claim_unlock_display_strings;
}
void OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::setClaimUnlockDisplayStrings(const QList<QString> &claim_unlock_display_strings) {
    m_claim_unlock_display_strings = claim_unlock_display_strings;
    m_claim_unlock_display_strings_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::is_claim_unlock_display_strings_Set() const{
    return m_claim_unlock_display_strings_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::is_claim_unlock_display_strings_Valid() const{
    return m_claim_unlock_display_strings_isValid;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::isHasConditionalVisibility() const {
    return m_has_conditional_visibility;
}
void OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::setHasConditionalVisibility(const bool &has_conditional_visibility) {
    m_has_conditional_visibility = has_conditional_visibility;
    m_has_conditional_visibility_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::is_has_conditional_visibility_Set() const{
    return m_has_conditional_visibility_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::is_has_conditional_visibility_Valid() const{
    return m_has_conditional_visibility_isValid;
}

qint32 OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::getItemHash() const {
    return m_item_hash;
}
void OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::setItemHash(const qint32 &item_hash) {
    m_item_hash = item_hash;
    m_item_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::is_item_hash_Set() const{
    return m_item_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::is_item_hash_Valid() const{
    return m_item_hash_isValid;
}

qint64 OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::getItemInstanceId() const {
    return m_item_instance_id;
}
void OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::setItemInstanceId(const qint64 &item_instance_id) {
    m_item_instance_id = item_instance_id;
    m_item_instance_id_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::is_item_instance_id_Set() const{
    return m_item_instance_id_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::is_item_instance_id_Valid() const{
    return m_item_instance_id_isValid;
}

qint32 OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::getQuantity() const {
    return m_quantity;
}
void OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::is_quantity_Valid() const{
    return m_quantity_isValid;
}

qint32 OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::getRewardedAtProgressionLevel() const {
    return m_rewarded_at_progression_level;
}
void OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::setRewardedAtProgressionLevel(const qint32 &rewarded_at_progression_level) {
    m_rewarded_at_progression_level = rewarded_at_progression_level;
    m_rewarded_at_progression_level_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::is_rewarded_at_progression_level_Set() const{
    return m_rewarded_at_progression_level_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::is_rewarded_at_progression_level_Valid() const{
    return m_rewarded_at_progression_level_isValid;
}

QString OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::getUiDisplayStyle() const {
    return m_ui_display_style;
}
void OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::setUiDisplayStyle(const QString &ui_display_style) {
    m_ui_display_style = ui_display_style;
    m_ui_display_style_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::is_ui_display_style_Set() const{
    return m_ui_display_style_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::is_ui_display_style_Valid() const{
    return m_ui_display_style_isValid;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquisition_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_claim_unlock_display_strings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_conditional_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rewarded_at_progression_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ui_display_style_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
