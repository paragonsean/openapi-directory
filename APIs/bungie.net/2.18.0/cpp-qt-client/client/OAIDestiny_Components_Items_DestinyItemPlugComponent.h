/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Components_Items_DestinyItemPlugComponent.h
 *
 * Plugs are non-instanced items that can provide Stat and Perk benefits when socketed into an instanced item. Items have Sockets, and Plugs are inserted into Sockets.  This component finds all items that are considered \&quot;Plugs\&quot; in your inventory, and return information about the plug aside from any specific Socket into which it could be inserted.
 */

#ifndef OAIDestiny_Components_Items_DestinyItemPlugComponent_H
#define OAIDestiny_Components_Items_DestinyItemPlugComponent_H

#include <QJsonObject>

#include "OAIDestiny_Quests_DestinyObjectiveProgress.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Quests_DestinyObjectiveProgress;

class OAIDestiny_Components_Items_DestinyItemPlugComponent : public OAIObject {
public:
    OAIDestiny_Components_Items_DestinyItemPlugComponent();
    OAIDestiny_Components_Items_DestinyItemPlugComponent(QString json);
    ~OAIDestiny_Components_Items_DestinyItemPlugComponent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isCanInsert() const;
    void setCanInsert(const bool &can_insert);
    bool is_can_insert_Set() const;
    bool is_can_insert_Valid() const;

    QList<qint32> getEnableFailIndexes() const;
    void setEnableFailIndexes(const QList<qint32> &enable_fail_indexes);
    bool is_enable_fail_indexes_Set() const;
    bool is_enable_fail_indexes_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QList<qint32> getInsertFailIndexes() const;
    void setInsertFailIndexes(const QList<qint32> &insert_fail_indexes);
    bool is_insert_fail_indexes_Set() const;
    bool is_insert_fail_indexes_Valid() const;

    qint32 getPlugItemHash() const;
    void setPlugItemHash(const qint32 &plug_item_hash);
    bool is_plug_item_hash_Set() const;
    bool is_plug_item_hash_Valid() const;

    QList<OAIDestiny_Quests_DestinyObjectiveProgress> getPlugObjectives() const;
    void setPlugObjectives(const QList<OAIDestiny_Quests_DestinyObjectiveProgress> &plug_objectives);
    bool is_plug_objectives_Set() const;
    bool is_plug_objectives_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_can_insert;
    bool m_can_insert_isSet;
    bool m_can_insert_isValid;

    QList<qint32> m_enable_fail_indexes;
    bool m_enable_fail_indexes_isSet;
    bool m_enable_fail_indexes_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QList<qint32> m_insert_fail_indexes;
    bool m_insert_fail_indexes_isSet;
    bool m_insert_fail_indexes_isValid;

    qint32 m_plug_item_hash;
    bool m_plug_item_hash_isSet;
    bool m_plug_item_hash_isValid;

    QList<OAIDestiny_Quests_DestinyObjectiveProgress> m_plug_objectives;
    bool m_plug_objectives_isSet;
    bool m_plug_objectives_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Components_Items_DestinyItemPlugComponent)

#endif // OAIDestiny_Components_Items_DestinyItemPlugComponent_H
