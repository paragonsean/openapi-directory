/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem() {
    this->initializeModel();
}

OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::~OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem() {}

void OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::initializeModel() {

    m_has_conditional_visibility_isSet = false;
    m_has_conditional_visibility_isValid = false;

    m_item_hash_isSet = false;
    m_item_hash_isValid = false;

    m_item_instance_id_isSet = false;
    m_item_instance_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_vendor_hash_isSet = false;
    m_vendor_hash_isValid = false;

    m_vendor_item_index_isSet = false;
    m_vendor_item_index_isValid = false;
}

void OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::fromJsonObject(QJsonObject json) {

    m_has_conditional_visibility_isValid = ::OpenAPI::fromJsonValue(m_has_conditional_visibility, json[QString("hasConditionalVisibility")]);
    m_has_conditional_visibility_isSet = !json[QString("hasConditionalVisibility")].isNull() && m_has_conditional_visibility_isValid;

    m_item_hash_isValid = ::OpenAPI::fromJsonValue(m_item_hash, json[QString("itemHash")]);
    m_item_hash_isSet = !json[QString("itemHash")].isNull() && m_item_hash_isValid;

    m_item_instance_id_isValid = ::OpenAPI::fromJsonValue(m_item_instance_id, json[QString("itemInstanceId")]);
    m_item_instance_id_isSet = !json[QString("itemInstanceId")].isNull() && m_item_instance_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_vendor_hash_isValid = ::OpenAPI::fromJsonValue(m_vendor_hash, json[QString("vendorHash")]);
    m_vendor_hash_isSet = !json[QString("vendorHash")].isNull() && m_vendor_hash_isValid;

    m_vendor_item_index_isValid = ::OpenAPI::fromJsonValue(m_vendor_item_index, json[QString("vendorItemIndex")]);
    m_vendor_item_index_isSet = !json[QString("vendorItemIndex")].isNull() && m_vendor_item_index_isValid;
}

QString OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::asJsonObject() const {
    QJsonObject obj;
    if (m_has_conditional_visibility_isSet) {
        obj.insert(QString("hasConditionalVisibility"), ::OpenAPI::toJsonValue(m_has_conditional_visibility));
    }
    if (m_item_hash_isSet) {
        obj.insert(QString("itemHash"), ::OpenAPI::toJsonValue(m_item_hash));
    }
    if (m_item_instance_id_isSet) {
        obj.insert(QString("itemInstanceId"), ::OpenAPI::toJsonValue(m_item_instance_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_vendor_hash_isSet) {
        obj.insert(QString("vendorHash"), ::OpenAPI::toJsonValue(m_vendor_hash));
    }
    if (m_vendor_item_index_isSet) {
        obj.insert(QString("vendorItemIndex"), ::OpenAPI::toJsonValue(m_vendor_item_index));
    }
    return obj;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::isHasConditionalVisibility() const {
    return m_has_conditional_visibility;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::setHasConditionalVisibility(const bool &has_conditional_visibility) {
    m_has_conditional_visibility = has_conditional_visibility;
    m_has_conditional_visibility_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::is_has_conditional_visibility_Set() const{
    return m_has_conditional_visibility_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::is_has_conditional_visibility_Valid() const{
    return m_has_conditional_visibility_isValid;
}

qint32 OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::getItemHash() const {
    return m_item_hash;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::setItemHash(const qint32 &item_hash) {
    m_item_hash = item_hash;
    m_item_hash_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::is_item_hash_Set() const{
    return m_item_hash_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::is_item_hash_Valid() const{
    return m_item_hash_isValid;
}

qint64 OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::getItemInstanceId() const {
    return m_item_instance_id;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::setItemInstanceId(const qint64 &item_instance_id) {
    m_item_instance_id = item_instance_id;
    m_item_instance_id_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::is_item_instance_id_Set() const{
    return m_item_instance_id_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::is_item_instance_id_Valid() const{
    return m_item_instance_id_isValid;
}

qint32 OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::getQuantity() const {
    return m_quantity;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::is_quantity_Valid() const{
    return m_quantity_isValid;
}

qint32 OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::getVendorHash() const {
    return m_vendor_hash;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::setVendorHash(const qint32 &vendor_hash) {
    m_vendor_hash = vendor_hash;
    m_vendor_hash_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::is_vendor_hash_Set() const{
    return m_vendor_hash_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::is_vendor_hash_Valid() const{
    return m_vendor_hash_isValid;
}

qint32 OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::getVendorItemIndex() const {
    return m_vendor_item_index;
}
void OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::setVendorItemIndex(const qint32 &vendor_item_index) {
    m_vendor_item_index = vendor_item_index;
    m_vendor_item_index_isSet = true;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::is_vendor_item_index_Set() const{
    return m_vendor_item_index_isSet;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::is_vendor_item_index_Valid() const{
    return m_vendor_item_index_isValid;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_has_conditional_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_item_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_Milestones_DestinyMilestoneQuestRewardItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
