/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyDestinationDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyDestinationDefinition::OAIDestiny_Definitions_DestinyDestinationDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyDestinationDefinition::OAIDestiny_Definitions_DestinyDestinationDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyDestinationDefinition::~OAIDestiny_Definitions_DestinyDestinationDefinition() {}

void OAIDestiny_Definitions_DestinyDestinationDefinition::initializeModel() {

    m_activity_graph_entries_isSet = false;
    m_activity_graph_entries_isValid = false;

    m_bubble_settings_isSet = false;
    m_bubble_settings_isValid = false;

    m_bubbles_isSet = false;
    m_bubbles_isValid = false;

    m_default_freeroam_activity_hash_isSet = false;
    m_default_freeroam_activity_hash_isValid = false;

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_place_hash_isSet = false;
    m_place_hash_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;
}

void OAIDestiny_Definitions_DestinyDestinationDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyDestinationDefinition::fromJsonObject(QJsonObject json) {

    m_activity_graph_entries_isValid = ::OpenAPI::fromJsonValue(m_activity_graph_entries, json[QString("activityGraphEntries")]);
    m_activity_graph_entries_isSet = !json[QString("activityGraphEntries")].isNull() && m_activity_graph_entries_isValid;

    m_bubble_settings_isValid = ::OpenAPI::fromJsonValue(m_bubble_settings, json[QString("bubbleSettings")]);
    m_bubble_settings_isSet = !json[QString("bubbleSettings")].isNull() && m_bubble_settings_isValid;

    m_bubbles_isValid = ::OpenAPI::fromJsonValue(m_bubbles, json[QString("bubbles")]);
    m_bubbles_isSet = !json[QString("bubbles")].isNull() && m_bubbles_isValid;

    m_default_freeroam_activity_hash_isValid = ::OpenAPI::fromJsonValue(m_default_freeroam_activity_hash, json[QString("defaultFreeroamActivityHash")]);
    m_default_freeroam_activity_hash_isSet = !json[QString("defaultFreeroamActivityHash")].isNull() && m_default_freeroam_activity_hash_isValid;

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_place_hash_isValid = ::OpenAPI::fromJsonValue(m_place_hash, json[QString("placeHash")]);
    m_place_hash_isSet = !json[QString("placeHash")].isNull() && m_place_hash_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;
}

QString OAIDestiny_Definitions_DestinyDestinationDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyDestinationDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_graph_entries.size() > 0) {
        obj.insert(QString("activityGraphEntries"), ::OpenAPI::toJsonValue(m_activity_graph_entries));
    }
    if (m_bubble_settings.size() > 0) {
        obj.insert(QString("bubbleSettings"), ::OpenAPI::toJsonValue(m_bubble_settings));
    }
    if (m_bubbles.size() > 0) {
        obj.insert(QString("bubbles"), ::OpenAPI::toJsonValue(m_bubbles));
    }
    if (m_default_freeroam_activity_hash_isSet) {
        obj.insert(QString("defaultFreeroamActivityHash"), ::OpenAPI::toJsonValue(m_default_freeroam_activity_hash));
    }
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_place_hash_isSet) {
        obj.insert(QString("placeHash"), ::OpenAPI::toJsonValue(m_place_hash));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    return obj;
}

QList<OAIDestiny_Definitions_DestinyActivityGraphListEntryDefinition> OAIDestiny_Definitions_DestinyDestinationDefinition::getActivityGraphEntries() const {
    return m_activity_graph_entries;
}
void OAIDestiny_Definitions_DestinyDestinationDefinition::setActivityGraphEntries(const QList<OAIDestiny_Definitions_DestinyActivityGraphListEntryDefinition> &activity_graph_entries) {
    m_activity_graph_entries = activity_graph_entries;
    m_activity_graph_entries_isSet = true;
}

bool OAIDestiny_Definitions_DestinyDestinationDefinition::is_activity_graph_entries_Set() const{
    return m_activity_graph_entries_isSet;
}

bool OAIDestiny_Definitions_DestinyDestinationDefinition::is_activity_graph_entries_Valid() const{
    return m_activity_graph_entries_isValid;
}

QList<OAIDestiny_Definitions_DestinyDestinationBubbleSettingDefinition> OAIDestiny_Definitions_DestinyDestinationDefinition::getBubbleSettings() const {
    return m_bubble_settings;
}
void OAIDestiny_Definitions_DestinyDestinationDefinition::setBubbleSettings(const QList<OAIDestiny_Definitions_DestinyDestinationBubbleSettingDefinition> &bubble_settings) {
    m_bubble_settings = bubble_settings;
    m_bubble_settings_isSet = true;
}

bool OAIDestiny_Definitions_DestinyDestinationDefinition::is_bubble_settings_Set() const{
    return m_bubble_settings_isSet;
}

bool OAIDestiny_Definitions_DestinyDestinationDefinition::is_bubble_settings_Valid() const{
    return m_bubble_settings_isValid;
}

QList<OAIDestiny_Definitions_DestinyBubbleDefinition> OAIDestiny_Definitions_DestinyDestinationDefinition::getBubbles() const {
    return m_bubbles;
}
void OAIDestiny_Definitions_DestinyDestinationDefinition::setBubbles(const QList<OAIDestiny_Definitions_DestinyBubbleDefinition> &bubbles) {
    m_bubbles = bubbles;
    m_bubbles_isSet = true;
}

bool OAIDestiny_Definitions_DestinyDestinationDefinition::is_bubbles_Set() const{
    return m_bubbles_isSet;
}

bool OAIDestiny_Definitions_DestinyDestinationDefinition::is_bubbles_Valid() const{
    return m_bubbles_isValid;
}

qint32 OAIDestiny_Definitions_DestinyDestinationDefinition::getDefaultFreeroamActivityHash() const {
    return m_default_freeroam_activity_hash;
}
void OAIDestiny_Definitions_DestinyDestinationDefinition::setDefaultFreeroamActivityHash(const qint32 &default_freeroam_activity_hash) {
    m_default_freeroam_activity_hash = default_freeroam_activity_hash;
    m_default_freeroam_activity_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyDestinationDefinition::is_default_freeroam_activity_hash_Set() const{
    return m_default_freeroam_activity_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyDestinationDefinition::is_default_freeroam_activity_hash_Valid() const{
    return m_default_freeroam_activity_hash_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_DestinyDestinationDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_DestinyDestinationDefinition::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_DestinyDestinationDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_DestinyDestinationDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

qint32 OAIDestiny_Definitions_DestinyDestinationDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_DestinyDestinationDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyDestinationDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyDestinationDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyDestinationDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_DestinyDestinationDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyDestinationDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_DestinyDestinationDefinition::is_index_Valid() const{
    return m_index_isValid;
}

qint32 OAIDestiny_Definitions_DestinyDestinationDefinition::getPlaceHash() const {
    return m_place_hash;
}
void OAIDestiny_Definitions_DestinyDestinationDefinition::setPlaceHash(const qint32 &place_hash) {
    m_place_hash = place_hash;
    m_place_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyDestinationDefinition::is_place_hash_Set() const{
    return m_place_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyDestinationDefinition::is_place_hash_Valid() const{
    return m_place_hash_isValid;
}

bool OAIDestiny_Definitions_DestinyDestinationDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_DestinyDestinationDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_DestinyDestinationDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_DestinyDestinationDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

bool OAIDestiny_Definitions_DestinyDestinationDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_graph_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bubble_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bubbles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_freeroam_activity_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyDestinationDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
