/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Components_Kiosks_DestinyKiosksComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Components_Kiosks_DestinyKiosksComponent::OAIDestiny_Components_Kiosks_DestinyKiosksComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Components_Kiosks_DestinyKiosksComponent::OAIDestiny_Components_Kiosks_DestinyKiosksComponent() {
    this->initializeModel();
}

OAIDestiny_Components_Kiosks_DestinyKiosksComponent::~OAIDestiny_Components_Kiosks_DestinyKiosksComponent() {}

void OAIDestiny_Components_Kiosks_DestinyKiosksComponent::initializeModel() {

    m_kiosk_items_isSet = false;
    m_kiosk_items_isValid = false;
}

void OAIDestiny_Components_Kiosks_DestinyKiosksComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Components_Kiosks_DestinyKiosksComponent::fromJsonObject(QJsonObject json) {

    if(json["kioskItems"].isObject()){
        auto varmap = json["kioskItems"].toObject().toVariantMap();
        m_kiosk_items_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<OAIDestiny_Components_Kiosks_DestinyKioskItem> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_kiosk_items_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_kiosk_items_isSet &= !jval.isNull() && m_kiosk_items_isValid;
                m_kiosk_items.insert(m_kiosk_items.end(), val, item);
            }
        }
    }
}

QString OAIDestiny_Components_Kiosks_DestinyKiosksComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Components_Kiosks_DestinyKiosksComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_kiosk_items.size() > 0) {
        
        obj.insert(QString("kioskItems"), toJsonValue(m_kiosk_items));
    }
    return obj;
}

QMap<QString, QList<OAIDestiny_Components_Kiosks_DestinyKioskItem>> OAIDestiny_Components_Kiosks_DestinyKiosksComponent::getKioskItems() const {
    return m_kiosk_items;
}
void OAIDestiny_Components_Kiosks_DestinyKiosksComponent::setKioskItems(const QMap<QString, QList<OAIDestiny_Components_Kiosks_DestinyKioskItem>> &kiosk_items) {
    m_kiosk_items = kiosk_items;
    m_kiosk_items_isSet = true;
}

bool OAIDestiny_Components_Kiosks_DestinyKiosksComponent::is_kiosk_items_Set() const{
    return m_kiosk_items_isSet;
}

bool OAIDestiny_Components_Kiosks_DestinyKiosksComponent::is_kiosk_items_Valid() const{
    return m_kiosk_items_isValid;
}

bool OAIDestiny_Components_Kiosks_DestinyKiosksComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kiosk_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Components_Kiosks_DestinyKiosksComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
