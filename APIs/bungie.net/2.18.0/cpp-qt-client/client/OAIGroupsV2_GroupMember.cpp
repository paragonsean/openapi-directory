/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupsV2_GroupMember.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupsV2_GroupMember::OAIGroupsV2_GroupMember(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupsV2_GroupMember::OAIGroupsV2_GroupMember() {
    this->initializeModel();
}

OAIGroupsV2_GroupMember::~OAIGroupsV2_GroupMember() {}

void OAIGroupsV2_GroupMember::initializeModel() {

    m_bungie_net_user_info_isSet = false;
    m_bungie_net_user_info_isValid = false;

    m_destiny_user_info_isSet = false;
    m_destiny_user_info_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_is_online_isSet = false;
    m_is_online_isValid = false;

    m_join_date_isSet = false;
    m_join_date_isValid = false;

    m_last_online_status_change_isSet = false;
    m_last_online_status_change_isValid = false;

    m_member_type_isSet = false;
    m_member_type_isValid = false;
}

void OAIGroupsV2_GroupMember::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupsV2_GroupMember::fromJsonObject(QJsonObject json) {

    m_bungie_net_user_info_isValid = ::OpenAPI::fromJsonValue(m_bungie_net_user_info, json[QString("bungieNetUserInfo")]);
    m_bungie_net_user_info_isSet = !json[QString("bungieNetUserInfo")].isNull() && m_bungie_net_user_info_isValid;

    m_destiny_user_info_isValid = ::OpenAPI::fromJsonValue(m_destiny_user_info, json[QString("destinyUserInfo")]);
    m_destiny_user_info_isSet = !json[QString("destinyUserInfo")].isNull() && m_destiny_user_info_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
    m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;

    m_is_online_isValid = ::OpenAPI::fromJsonValue(m_is_online, json[QString("isOnline")]);
    m_is_online_isSet = !json[QString("isOnline")].isNull() && m_is_online_isValid;

    m_join_date_isValid = ::OpenAPI::fromJsonValue(m_join_date, json[QString("joinDate")]);
    m_join_date_isSet = !json[QString("joinDate")].isNull() && m_join_date_isValid;

    m_last_online_status_change_isValid = ::OpenAPI::fromJsonValue(m_last_online_status_change, json[QString("lastOnlineStatusChange")]);
    m_last_online_status_change_isSet = !json[QString("lastOnlineStatusChange")].isNull() && m_last_online_status_change_isValid;

    m_member_type_isValid = ::OpenAPI::fromJsonValue(m_member_type, json[QString("memberType")]);
    m_member_type_isSet = !json[QString("memberType")].isNull() && m_member_type_isValid;
}

QString OAIGroupsV2_GroupMember::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupsV2_GroupMember::asJsonObject() const {
    QJsonObject obj;
    if (m_bungie_net_user_info.isSet()) {
        obj.insert(QString("bungieNetUserInfo"), ::OpenAPI::toJsonValue(m_bungie_net_user_info));
    }
    if (m_destiny_user_info.isSet()) {
        obj.insert(QString("destinyUserInfo"), ::OpenAPI::toJsonValue(m_destiny_user_info));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_is_online_isSet) {
        obj.insert(QString("isOnline"), ::OpenAPI::toJsonValue(m_is_online));
    }
    if (m_join_date_isSet) {
        obj.insert(QString("joinDate"), ::OpenAPI::toJsonValue(m_join_date));
    }
    if (m_last_online_status_change_isSet) {
        obj.insert(QString("lastOnlineStatusChange"), ::OpenAPI::toJsonValue(m_last_online_status_change));
    }
    if (m_member_type_isSet) {
        obj.insert(QString("memberType"), ::OpenAPI::toJsonValue(m_member_type));
    }
    return obj;
}

OAIUser_UserInfoCard OAIGroupsV2_GroupMember::getBungieNetUserInfo() const {
    return m_bungie_net_user_info;
}
void OAIGroupsV2_GroupMember::setBungieNetUserInfo(const OAIUser_UserInfoCard &bungie_net_user_info) {
    m_bungie_net_user_info = bungie_net_user_info;
    m_bungie_net_user_info_isSet = true;
}

bool OAIGroupsV2_GroupMember::is_bungie_net_user_info_Set() const{
    return m_bungie_net_user_info_isSet;
}

bool OAIGroupsV2_GroupMember::is_bungie_net_user_info_Valid() const{
    return m_bungie_net_user_info_isValid;
}

OAIGroupsV2_GroupUserInfoCard OAIGroupsV2_GroupMember::getDestinyUserInfo() const {
    return m_destiny_user_info;
}
void OAIGroupsV2_GroupMember::setDestinyUserInfo(const OAIGroupsV2_GroupUserInfoCard &destiny_user_info) {
    m_destiny_user_info = destiny_user_info;
    m_destiny_user_info_isSet = true;
}

bool OAIGroupsV2_GroupMember::is_destiny_user_info_Set() const{
    return m_destiny_user_info_isSet;
}

bool OAIGroupsV2_GroupMember::is_destiny_user_info_Valid() const{
    return m_destiny_user_info_isValid;
}

qint64 OAIGroupsV2_GroupMember::getGroupId() const {
    return m_group_id;
}
void OAIGroupsV2_GroupMember::setGroupId(const qint64 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIGroupsV2_GroupMember::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIGroupsV2_GroupMember::is_group_id_Valid() const{
    return m_group_id_isValid;
}

bool OAIGroupsV2_GroupMember::isIsOnline() const {
    return m_is_online;
}
void OAIGroupsV2_GroupMember::setIsOnline(const bool &is_online) {
    m_is_online = is_online;
    m_is_online_isSet = true;
}

bool OAIGroupsV2_GroupMember::is_is_online_Set() const{
    return m_is_online_isSet;
}

bool OAIGroupsV2_GroupMember::is_is_online_Valid() const{
    return m_is_online_isValid;
}

QDateTime OAIGroupsV2_GroupMember::getJoinDate() const {
    return m_join_date;
}
void OAIGroupsV2_GroupMember::setJoinDate(const QDateTime &join_date) {
    m_join_date = join_date;
    m_join_date_isSet = true;
}

bool OAIGroupsV2_GroupMember::is_join_date_Set() const{
    return m_join_date_isSet;
}

bool OAIGroupsV2_GroupMember::is_join_date_Valid() const{
    return m_join_date_isValid;
}

qint64 OAIGroupsV2_GroupMember::getLastOnlineStatusChange() const {
    return m_last_online_status_change;
}
void OAIGroupsV2_GroupMember::setLastOnlineStatusChange(const qint64 &last_online_status_change) {
    m_last_online_status_change = last_online_status_change;
    m_last_online_status_change_isSet = true;
}

bool OAIGroupsV2_GroupMember::is_last_online_status_change_Set() const{
    return m_last_online_status_change_isSet;
}

bool OAIGroupsV2_GroupMember::is_last_online_status_change_Valid() const{
    return m_last_online_status_change_isValid;
}

qint32 OAIGroupsV2_GroupMember::getMemberType() const {
    return m_member_type;
}
void OAIGroupsV2_GroupMember::setMemberType(const qint32 &member_type) {
    m_member_type = member_type;
    m_member_type_isSet = true;
}

bool OAIGroupsV2_GroupMember::is_member_type_Set() const{
    return m_member_type_isSet;
}

bool OAIGroupsV2_GroupMember::is_member_type_Valid() const{
    return m_member_type_isValid;
}

bool OAIGroupsV2_GroupMember::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bungie_net_user_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destiny_user_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_online_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_join_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_online_status_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupsV2_GroupMember::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
