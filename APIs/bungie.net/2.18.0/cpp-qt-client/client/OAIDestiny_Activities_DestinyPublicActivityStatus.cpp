/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Activities_DestinyPublicActivityStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Activities_DestinyPublicActivityStatus::OAIDestiny_Activities_DestinyPublicActivityStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Activities_DestinyPublicActivityStatus::OAIDestiny_Activities_DestinyPublicActivityStatus() {
    this->initializeModel();
}

OAIDestiny_Activities_DestinyPublicActivityStatus::~OAIDestiny_Activities_DestinyPublicActivityStatus() {}

void OAIDestiny_Activities_DestinyPublicActivityStatus::initializeModel() {

    m_challenge_objective_hashes_isSet = false;
    m_challenge_objective_hashes_isValid = false;

    m_modifier_hashes_isSet = false;
    m_modifier_hashes_isValid = false;

    m_reward_tooltip_items_isSet = false;
    m_reward_tooltip_items_isValid = false;
}

void OAIDestiny_Activities_DestinyPublicActivityStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Activities_DestinyPublicActivityStatus::fromJsonObject(QJsonObject json) {

    m_challenge_objective_hashes_isValid = ::OpenAPI::fromJsonValue(m_challenge_objective_hashes, json[QString("challengeObjectiveHashes")]);
    m_challenge_objective_hashes_isSet = !json[QString("challengeObjectiveHashes")].isNull() && m_challenge_objective_hashes_isValid;

    m_modifier_hashes_isValid = ::OpenAPI::fromJsonValue(m_modifier_hashes, json[QString("modifierHashes")]);
    m_modifier_hashes_isSet = !json[QString("modifierHashes")].isNull() && m_modifier_hashes_isValid;

    m_reward_tooltip_items_isValid = ::OpenAPI::fromJsonValue(m_reward_tooltip_items, json[QString("rewardTooltipItems")]);
    m_reward_tooltip_items_isSet = !json[QString("rewardTooltipItems")].isNull() && m_reward_tooltip_items_isValid;
}

QString OAIDestiny_Activities_DestinyPublicActivityStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Activities_DestinyPublicActivityStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_challenge_objective_hashes.size() > 0) {
        obj.insert(QString("challengeObjectiveHashes"), ::OpenAPI::toJsonValue(m_challenge_objective_hashes));
    }
    if (m_modifier_hashes.size() > 0) {
        obj.insert(QString("modifierHashes"), ::OpenAPI::toJsonValue(m_modifier_hashes));
    }
    if (m_reward_tooltip_items.size() > 0) {
        obj.insert(QString("rewardTooltipItems"), ::OpenAPI::toJsonValue(m_reward_tooltip_items));
    }
    return obj;
}

QList<qint32> OAIDestiny_Activities_DestinyPublicActivityStatus::getChallengeObjectiveHashes() const {
    return m_challenge_objective_hashes;
}
void OAIDestiny_Activities_DestinyPublicActivityStatus::setChallengeObjectiveHashes(const QList<qint32> &challenge_objective_hashes) {
    m_challenge_objective_hashes = challenge_objective_hashes;
    m_challenge_objective_hashes_isSet = true;
}

bool OAIDestiny_Activities_DestinyPublicActivityStatus::is_challenge_objective_hashes_Set() const{
    return m_challenge_objective_hashes_isSet;
}

bool OAIDestiny_Activities_DestinyPublicActivityStatus::is_challenge_objective_hashes_Valid() const{
    return m_challenge_objective_hashes_isValid;
}

QList<qint32> OAIDestiny_Activities_DestinyPublicActivityStatus::getModifierHashes() const {
    return m_modifier_hashes;
}
void OAIDestiny_Activities_DestinyPublicActivityStatus::setModifierHashes(const QList<qint32> &modifier_hashes) {
    m_modifier_hashes = modifier_hashes;
    m_modifier_hashes_isSet = true;
}

bool OAIDestiny_Activities_DestinyPublicActivityStatus::is_modifier_hashes_Set() const{
    return m_modifier_hashes_isSet;
}

bool OAIDestiny_Activities_DestinyPublicActivityStatus::is_modifier_hashes_Valid() const{
    return m_modifier_hashes_isValid;
}

QList<OAIDestiny_DestinyItemQuantity> OAIDestiny_Activities_DestinyPublicActivityStatus::getRewardTooltipItems() const {
    return m_reward_tooltip_items;
}
void OAIDestiny_Activities_DestinyPublicActivityStatus::setRewardTooltipItems(const QList<OAIDestiny_DestinyItemQuantity> &reward_tooltip_items) {
    m_reward_tooltip_items = reward_tooltip_items;
    m_reward_tooltip_items_isSet = true;
}

bool OAIDestiny_Activities_DestinyPublicActivityStatus::is_reward_tooltip_items_Set() const{
    return m_reward_tooltip_items_isSet;
}

bool OAIDestiny_Activities_DestinyPublicActivityStatus::is_reward_tooltip_items_Valid() const{
    return m_reward_tooltip_items_isValid;
}

bool OAIDestiny_Activities_DestinyPublicActivityStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_challenge_objective_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_modifier_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_tooltip_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Activities_DestinyPublicActivityStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
