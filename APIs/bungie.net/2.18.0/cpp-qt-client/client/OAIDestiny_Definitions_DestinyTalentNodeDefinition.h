/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyTalentNodeDefinition.h
 *
 * Talent Grids on items have Nodes. These nodes have positions in the talent grid&#39;s UI, and contain \&quot;Steps\&quot; (DestinyTalentNodeStepDefinition), one of whom will be the \&quot;Current\&quot; step.  The Current Step determines the visual properties of the node, as well as what the node grants when it is activated.  See DestinyTalentGridDefinition for a more complete overview of how Talent Grids work, and how they are used in Destiny 2 (and how they were used in Destiny 1).
 */

#ifndef OAIDestiny_Definitions_DestinyTalentNodeDefinition_H
#define OAIDestiny_Definitions_DestinyTalentNodeDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_DestinyNodeActivationRequirement.h"
#include "OAIDestiny_Definitions_DestinyNodeStepDefinition.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_DestinyNodeActivationRequirement;
class OAIDestiny_Definitions_DestinyNodeStepDefinition;

class OAIDestiny_Definitions_DestinyTalentNodeDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyTalentNodeDefinition();
    OAIDestiny_Definitions_DestinyTalentNodeDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyTalentNodeDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAutoUnlocks() const;
    void setAutoUnlocks(const bool &auto_unlocks);
    bool is_auto_unlocks_Set() const;
    bool is_auto_unlocks_Valid() const;

    qint32 getBinaryPairNodeIndex() const;
    void setBinaryPairNodeIndex(const qint32 &binary_pair_node_index);
    bool is_binary_pair_node_index_Set() const;
    bool is_binary_pair_node_index_Valid() const;

    qint32 getColumn() const;
    void setColumn(const qint32 &column);
    bool is_column_Set() const;
    bool is_column_Valid() const;

    QList<qint32> getExclusiveWithNodeHashes() const;
    void setExclusiveWithNodeHashes(const QList<qint32> &exclusive_with_node_hashes);
    bool is_exclusive_with_node_hashes_Set() const;
    bool is_exclusive_with_node_hashes_Valid() const;

    qint32 getGroupHash() const;
    void setGroupHash(const qint32 &group_hash);
    bool is_group_hash_Set() const;
    bool is_group_hash_Valid() const;

    bool isIgnoreForCompletion() const;
    void setIgnoreForCompletion(const bool &ignore_for_completion);
    bool is_ignore_for_completion_Set() const;
    bool is_ignore_for_completion_Valid() const;

    bool isIsRandom() const;
    void setIsRandom(const bool &is_random);
    bool is_is_random_Set() const;
    bool is_is_random_Valid() const;

    bool isIsRandomRepurchasable() const;
    void setIsRandomRepurchasable(const bool &is_random_repurchasable);
    bool is_is_random_repurchasable_Set() const;
    bool is_is_random_repurchasable_Valid() const;

    bool isLastStepRepeats() const;
    void setLastStepRepeats(const bool &last_step_repeats);
    bool is_last_step_repeats_Set() const;
    bool is_last_step_repeats_Valid() const;

    QString getLayoutIdentifier() const;
    void setLayoutIdentifier(const QString &layout_identifier);
    bool is_layout_identifier_Set() const;
    bool is_layout_identifier_Valid() const;

    qint32 getLoreHash() const;
    void setLoreHash(const qint32 &lore_hash);
    bool is_lore_hash_Set() const;
    bool is_lore_hash_Valid() const;

    qint32 getNodeHash() const;
    void setNodeHash(const qint32 &node_hash);
    bool is_node_hash_Set() const;
    bool is_node_hash_Valid() const;

    qint32 getNodeIndex() const;
    void setNodeIndex(const qint32 &node_index);
    bool is_node_index_Set() const;
    bool is_node_index_Valid() const;

    QString getNodeStyleIdentifier() const;
    void setNodeStyleIdentifier(const QString &node_style_identifier);
    bool is_node_style_identifier_Set() const;
    bool is_node_style_identifier_Valid() const;

    QList<qint32> getPrerequisiteNodeIndexes() const;
    void setPrerequisiteNodeIndexes(const QList<qint32> &prerequisite_node_indexes);
    bool is_prerequisite_node_indexes_Set() const;
    bool is_prerequisite_node_indexes_Valid() const;

    OAIDestiny_Definitions_DestinyNodeActivationRequirement getRandomActivationRequirement() const;
    void setRandomActivationRequirement(const OAIDestiny_Definitions_DestinyNodeActivationRequirement &random_activation_requirement);
    bool is_random_activation_requirement_Set() const;
    bool is_random_activation_requirement_Valid() const;

    qint32 getRandomStartProgressionBarAtProgression() const;
    void setRandomStartProgressionBarAtProgression(const qint32 &random_start_progression_bar_at_progression);
    bool is_random_start_progression_bar_at_progression_Set() const;
    bool is_random_start_progression_bar_at_progression_Valid() const;

    qint32 getRow() const;
    void setRow(const qint32 &row);
    bool is_row_Set() const;
    bool is_row_Valid() const;

    QList<OAIDestiny_Definitions_DestinyNodeStepDefinition> getSteps() const;
    void setSteps(const QList<OAIDestiny_Definitions_DestinyNodeStepDefinition> &steps);
    bool is_steps_Set() const;
    bool is_steps_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_auto_unlocks;
    bool m_auto_unlocks_isSet;
    bool m_auto_unlocks_isValid;

    qint32 m_binary_pair_node_index;
    bool m_binary_pair_node_index_isSet;
    bool m_binary_pair_node_index_isValid;

    qint32 m_column;
    bool m_column_isSet;
    bool m_column_isValid;

    QList<qint32> m_exclusive_with_node_hashes;
    bool m_exclusive_with_node_hashes_isSet;
    bool m_exclusive_with_node_hashes_isValid;

    qint32 m_group_hash;
    bool m_group_hash_isSet;
    bool m_group_hash_isValid;

    bool m_ignore_for_completion;
    bool m_ignore_for_completion_isSet;
    bool m_ignore_for_completion_isValid;

    bool m_is_random;
    bool m_is_random_isSet;
    bool m_is_random_isValid;

    bool m_is_random_repurchasable;
    bool m_is_random_repurchasable_isSet;
    bool m_is_random_repurchasable_isValid;

    bool m_last_step_repeats;
    bool m_last_step_repeats_isSet;
    bool m_last_step_repeats_isValid;

    QString m_layout_identifier;
    bool m_layout_identifier_isSet;
    bool m_layout_identifier_isValid;

    qint32 m_lore_hash;
    bool m_lore_hash_isSet;
    bool m_lore_hash_isValid;

    qint32 m_node_hash;
    bool m_node_hash_isSet;
    bool m_node_hash_isValid;

    qint32 m_node_index;
    bool m_node_index_isSet;
    bool m_node_index_isValid;

    QString m_node_style_identifier;
    bool m_node_style_identifier_isSet;
    bool m_node_style_identifier_isValid;

    QList<qint32> m_prerequisite_node_indexes;
    bool m_prerequisite_node_indexes_isSet;
    bool m_prerequisite_node_indexes_isValid;

    OAIDestiny_Definitions_DestinyNodeActivationRequirement m_random_activation_requirement;
    bool m_random_activation_requirement_isSet;
    bool m_random_activation_requirement_isValid;

    qint32 m_random_start_progression_bar_at_progression;
    bool m_random_start_progression_bar_at_progression_isSet;
    bool m_random_start_progression_bar_at_progression_isValid;

    qint32 m_row;
    bool m_row_isSet;
    bool m_row_isValid;

    QList<OAIDestiny_Definitions_DestinyNodeStepDefinition> m_steps;
    bool m_steps_isSet;
    bool m_steps_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyTalentNodeDefinition)

#endif // OAIDestiny_Definitions_DestinyTalentNodeDefinition_H
