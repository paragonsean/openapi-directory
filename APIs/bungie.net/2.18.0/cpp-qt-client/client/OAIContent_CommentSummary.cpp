/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContent_CommentSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContent_CommentSummary::OAIContent_CommentSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContent_CommentSummary::OAIContent_CommentSummary() {
    this->initializeModel();
}

OAIContent_CommentSummary::~OAIContent_CommentSummary() {}

void OAIContent_CommentSummary::initializeModel() {

    m_comment_count_isSet = false;
    m_comment_count_isValid = false;

    m_topic_id_isSet = false;
    m_topic_id_isValid = false;
}

void OAIContent_CommentSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContent_CommentSummary::fromJsonObject(QJsonObject json) {

    m_comment_count_isValid = ::OpenAPI::fromJsonValue(m_comment_count, json[QString("commentCount")]);
    m_comment_count_isSet = !json[QString("commentCount")].isNull() && m_comment_count_isValid;

    m_topic_id_isValid = ::OpenAPI::fromJsonValue(m_topic_id, json[QString("topicId")]);
    m_topic_id_isSet = !json[QString("topicId")].isNull() && m_topic_id_isValid;
}

QString OAIContent_CommentSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContent_CommentSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_count_isSet) {
        obj.insert(QString("commentCount"), ::OpenAPI::toJsonValue(m_comment_count));
    }
    if (m_topic_id_isSet) {
        obj.insert(QString("topicId"), ::OpenAPI::toJsonValue(m_topic_id));
    }
    return obj;
}

qint32 OAIContent_CommentSummary::getCommentCount() const {
    return m_comment_count;
}
void OAIContent_CommentSummary::setCommentCount(const qint32 &comment_count) {
    m_comment_count = comment_count;
    m_comment_count_isSet = true;
}

bool OAIContent_CommentSummary::is_comment_count_Set() const{
    return m_comment_count_isSet;
}

bool OAIContent_CommentSummary::is_comment_count_Valid() const{
    return m_comment_count_isValid;
}

qint64 OAIContent_CommentSummary::getTopicId() const {
    return m_topic_id;
}
void OAIContent_CommentSummary::setTopicId(const qint64 &topic_id) {
    m_topic_id = topic_id;
    m_topic_id_isSet = true;
}

bool OAIContent_CommentSummary::is_topic_id_Set() const{
    return m_topic_id_isSet;
}

bool OAIContent_CommentSummary::is_topic_id_Valid() const{
    return m_topic_id_isValid;
}

bool OAIContent_CommentSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContent_CommentSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
