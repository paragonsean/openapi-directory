/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Responses_DestinyCharacterResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Responses_DestinyCharacterResponse::OAIDestiny_Responses_DestinyCharacterResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Responses_DestinyCharacterResponse::OAIDestiny_Responses_DestinyCharacterResponse() {
    this->initializeModel();
}

OAIDestiny_Responses_DestinyCharacterResponse::~OAIDestiny_Responses_DestinyCharacterResponse() {}

void OAIDestiny_Responses_DestinyCharacterResponse::initializeModel() {

    m_activities_isSet = false;
    m_activities_isValid = false;

    m_character_isSet = false;
    m_character_isValid = false;

    m_collectibles_isSet = false;
    m_collectibles_isValid = false;

    m_currency_lookups_isSet = false;
    m_currency_lookups_isValid = false;

    m_equipment_isSet = false;
    m_equipment_isValid = false;

    m_inventory_isSet = false;
    m_inventory_isValid = false;

    m_item_components_isSet = false;
    m_item_components_isValid = false;

    m_kiosks_isSet = false;
    m_kiosks_isValid = false;

    m_loadouts_isSet = false;
    m_loadouts_isValid = false;

    m_plug_sets_isSet = false;
    m_plug_sets_isValid = false;

    m_presentation_nodes_isSet = false;
    m_presentation_nodes_isValid = false;

    m_progressions_isSet = false;
    m_progressions_isValid = false;

    m_records_isSet = false;
    m_records_isValid = false;

    m_render_data_isSet = false;
    m_render_data_isValid = false;

    m_uninstanced_item_components_isSet = false;
    m_uninstanced_item_components_isValid = false;
}

void OAIDestiny_Responses_DestinyCharacterResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Responses_DestinyCharacterResponse::fromJsonObject(QJsonObject json) {

    m_activities_isValid = ::OpenAPI::fromJsonValue(m_activities, json[QString("activities")]);
    m_activities_isSet = !json[QString("activities")].isNull() && m_activities_isValid;

    m_character_isValid = ::OpenAPI::fromJsonValue(m_character, json[QString("character")]);
    m_character_isSet = !json[QString("character")].isNull() && m_character_isValid;

    m_collectibles_isValid = ::OpenAPI::fromJsonValue(m_collectibles, json[QString("collectibles")]);
    m_collectibles_isSet = !json[QString("collectibles")].isNull() && m_collectibles_isValid;

    m_currency_lookups_isValid = ::OpenAPI::fromJsonValue(m_currency_lookups, json[QString("currencyLookups")]);
    m_currency_lookups_isSet = !json[QString("currencyLookups")].isNull() && m_currency_lookups_isValid;

    m_equipment_isValid = ::OpenAPI::fromJsonValue(m_equipment, json[QString("equipment")]);
    m_equipment_isSet = !json[QString("equipment")].isNull() && m_equipment_isValid;

    m_inventory_isValid = ::OpenAPI::fromJsonValue(m_inventory, json[QString("inventory")]);
    m_inventory_isSet = !json[QString("inventory")].isNull() && m_inventory_isValid;

    m_item_components_isValid = ::OpenAPI::fromJsonValue(m_item_components, json[QString("itemComponents")]);
    m_item_components_isSet = !json[QString("itemComponents")].isNull() && m_item_components_isValid;

    m_kiosks_isValid = ::OpenAPI::fromJsonValue(m_kiosks, json[QString("kiosks")]);
    m_kiosks_isSet = !json[QString("kiosks")].isNull() && m_kiosks_isValid;

    m_loadouts_isValid = ::OpenAPI::fromJsonValue(m_loadouts, json[QString("loadouts")]);
    m_loadouts_isSet = !json[QString("loadouts")].isNull() && m_loadouts_isValid;

    m_plug_sets_isValid = ::OpenAPI::fromJsonValue(m_plug_sets, json[QString("plugSets")]);
    m_plug_sets_isSet = !json[QString("plugSets")].isNull() && m_plug_sets_isValid;

    m_presentation_nodes_isValid = ::OpenAPI::fromJsonValue(m_presentation_nodes, json[QString("presentationNodes")]);
    m_presentation_nodes_isSet = !json[QString("presentationNodes")].isNull() && m_presentation_nodes_isValid;

    m_progressions_isValid = ::OpenAPI::fromJsonValue(m_progressions, json[QString("progressions")]);
    m_progressions_isSet = !json[QString("progressions")].isNull() && m_progressions_isValid;

    m_records_isValid = ::OpenAPI::fromJsonValue(m_records, json[QString("records")]);
    m_records_isSet = !json[QString("records")].isNull() && m_records_isValid;

    m_render_data_isValid = ::OpenAPI::fromJsonValue(m_render_data, json[QString("renderData")]);
    m_render_data_isSet = !json[QString("renderData")].isNull() && m_render_data_isValid;

    m_uninstanced_item_components_isValid = ::OpenAPI::fromJsonValue(m_uninstanced_item_components, json[QString("uninstancedItemComponents")]);
    m_uninstanced_item_components_isSet = !json[QString("uninstancedItemComponents")].isNull() && m_uninstanced_item_components_isValid;
}

QString OAIDestiny_Responses_DestinyCharacterResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Responses_DestinyCharacterResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_activities.isSet()) {
        obj.insert(QString("activities"), ::OpenAPI::toJsonValue(m_activities));
    }
    if (m_character.isSet()) {
        obj.insert(QString("character"), ::OpenAPI::toJsonValue(m_character));
    }
    if (m_collectibles.isSet()) {
        obj.insert(QString("collectibles"), ::OpenAPI::toJsonValue(m_collectibles));
    }
    if (m_currency_lookups.isSet()) {
        obj.insert(QString("currencyLookups"), ::OpenAPI::toJsonValue(m_currency_lookups));
    }
    if (m_equipment.isSet()) {
        obj.insert(QString("equipment"), ::OpenAPI::toJsonValue(m_equipment));
    }
    if (m_inventory.isSet()) {
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(m_inventory));
    }
    if (m_item_components.isSet()) {
        obj.insert(QString("itemComponents"), ::OpenAPI::toJsonValue(m_item_components));
    }
    if (m_kiosks.isSet()) {
        obj.insert(QString("kiosks"), ::OpenAPI::toJsonValue(m_kiosks));
    }
    if (m_loadouts.isSet()) {
        obj.insert(QString("loadouts"), ::OpenAPI::toJsonValue(m_loadouts));
    }
    if (m_plug_sets.isSet()) {
        obj.insert(QString("plugSets"), ::OpenAPI::toJsonValue(m_plug_sets));
    }
    if (m_presentation_nodes.isSet()) {
        obj.insert(QString("presentationNodes"), ::OpenAPI::toJsonValue(m_presentation_nodes));
    }
    if (m_progressions.isSet()) {
        obj.insert(QString("progressions"), ::OpenAPI::toJsonValue(m_progressions));
    }
    if (m_records.isSet()) {
        obj.insert(QString("records"), ::OpenAPI::toJsonValue(m_records));
    }
    if (m_render_data.isSet()) {
        obj.insert(QString("renderData"), ::OpenAPI::toJsonValue(m_render_data));
    }
    if (m_uninstanced_item_components.isSet()) {
        obj.insert(QString("uninstancedItemComponents"), ::OpenAPI::toJsonValue(m_uninstanced_item_components));
    }
    return obj;
}

OAISingleComponentResponseOfDestinyCharacterActivitiesComponent OAIDestiny_Responses_DestinyCharacterResponse::getActivities() const {
    return m_activities;
}
void OAIDestiny_Responses_DestinyCharacterResponse::setActivities(const OAISingleComponentResponseOfDestinyCharacterActivitiesComponent &activities) {
    m_activities = activities;
    m_activities_isSet = true;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_activities_Set() const{
    return m_activities_isSet;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_activities_Valid() const{
    return m_activities_isValid;
}

OAISingleComponentResponseOfDestinyCharacterComponent OAIDestiny_Responses_DestinyCharacterResponse::getCharacter() const {
    return m_character;
}
void OAIDestiny_Responses_DestinyCharacterResponse::setCharacter(const OAISingleComponentResponseOfDestinyCharacterComponent &character) {
    m_character = character;
    m_character_isSet = true;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_character_Set() const{
    return m_character_isSet;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_character_Valid() const{
    return m_character_isValid;
}

OAISingleComponentResponseOfDestinyCollectiblesComponent OAIDestiny_Responses_DestinyCharacterResponse::getCollectibles() const {
    return m_collectibles;
}
void OAIDestiny_Responses_DestinyCharacterResponse::setCollectibles(const OAISingleComponentResponseOfDestinyCollectiblesComponent &collectibles) {
    m_collectibles = collectibles;
    m_collectibles_isSet = true;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_collectibles_Set() const{
    return m_collectibles_isSet;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_collectibles_Valid() const{
    return m_collectibles_isValid;
}

OAISingleComponentResponseOfDestinyCurrenciesComponent OAIDestiny_Responses_DestinyCharacterResponse::getCurrencyLookups() const {
    return m_currency_lookups;
}
void OAIDestiny_Responses_DestinyCharacterResponse::setCurrencyLookups(const OAISingleComponentResponseOfDestinyCurrenciesComponent &currency_lookups) {
    m_currency_lookups = currency_lookups;
    m_currency_lookups_isSet = true;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_currency_lookups_Set() const{
    return m_currency_lookups_isSet;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_currency_lookups_Valid() const{
    return m_currency_lookups_isValid;
}

OAISingleComponentResponseOfDestinyInventoryComponent OAIDestiny_Responses_DestinyCharacterResponse::getEquipment() const {
    return m_equipment;
}
void OAIDestiny_Responses_DestinyCharacterResponse::setEquipment(const OAISingleComponentResponseOfDestinyInventoryComponent &equipment) {
    m_equipment = equipment;
    m_equipment_isSet = true;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_equipment_Set() const{
    return m_equipment_isSet;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_equipment_Valid() const{
    return m_equipment_isValid;
}

OAISingleComponentResponseOfDestinyInventoryComponent OAIDestiny_Responses_DestinyCharacterResponse::getInventory() const {
    return m_inventory;
}
void OAIDestiny_Responses_DestinyCharacterResponse::setInventory(const OAISingleComponentResponseOfDestinyInventoryComponent &inventory) {
    m_inventory = inventory;
    m_inventory_isSet = true;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_inventory_Set() const{
    return m_inventory_isSet;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_inventory_Valid() const{
    return m_inventory_isValid;
}

OAIDestinyItemComponentSetOfint64 OAIDestiny_Responses_DestinyCharacterResponse::getItemComponents() const {
    return m_item_components;
}
void OAIDestiny_Responses_DestinyCharacterResponse::setItemComponents(const OAIDestinyItemComponentSetOfint64 &item_components) {
    m_item_components = item_components;
    m_item_components_isSet = true;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_item_components_Set() const{
    return m_item_components_isSet;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_item_components_Valid() const{
    return m_item_components_isValid;
}

OAISingleComponentResponseOfDestinyKiosksComponent OAIDestiny_Responses_DestinyCharacterResponse::getKiosks() const {
    return m_kiosks;
}
void OAIDestiny_Responses_DestinyCharacterResponse::setKiosks(const OAISingleComponentResponseOfDestinyKiosksComponent &kiosks) {
    m_kiosks = kiosks;
    m_kiosks_isSet = true;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_kiosks_Set() const{
    return m_kiosks_isSet;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_kiosks_Valid() const{
    return m_kiosks_isValid;
}

OAISingleComponentResponseOfDestinyLoadoutsComponent OAIDestiny_Responses_DestinyCharacterResponse::getLoadouts() const {
    return m_loadouts;
}
void OAIDestiny_Responses_DestinyCharacterResponse::setLoadouts(const OAISingleComponentResponseOfDestinyLoadoutsComponent &loadouts) {
    m_loadouts = loadouts;
    m_loadouts_isSet = true;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_loadouts_Set() const{
    return m_loadouts_isSet;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_loadouts_Valid() const{
    return m_loadouts_isValid;
}

OAISingleComponentResponseOfDestinyPlugSetsComponent OAIDestiny_Responses_DestinyCharacterResponse::getPlugSets() const {
    return m_plug_sets;
}
void OAIDestiny_Responses_DestinyCharacterResponse::setPlugSets(const OAISingleComponentResponseOfDestinyPlugSetsComponent &plug_sets) {
    m_plug_sets = plug_sets;
    m_plug_sets_isSet = true;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_plug_sets_Set() const{
    return m_plug_sets_isSet;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_plug_sets_Valid() const{
    return m_plug_sets_isValid;
}

OAISingleComponentResponseOfDestinyPresentationNodesComponent OAIDestiny_Responses_DestinyCharacterResponse::getPresentationNodes() const {
    return m_presentation_nodes;
}
void OAIDestiny_Responses_DestinyCharacterResponse::setPresentationNodes(const OAISingleComponentResponseOfDestinyPresentationNodesComponent &presentation_nodes) {
    m_presentation_nodes = presentation_nodes;
    m_presentation_nodes_isSet = true;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_presentation_nodes_Set() const{
    return m_presentation_nodes_isSet;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_presentation_nodes_Valid() const{
    return m_presentation_nodes_isValid;
}

OAISingleComponentResponseOfDestinyCharacterProgressionComponent OAIDestiny_Responses_DestinyCharacterResponse::getProgressions() const {
    return m_progressions;
}
void OAIDestiny_Responses_DestinyCharacterResponse::setProgressions(const OAISingleComponentResponseOfDestinyCharacterProgressionComponent &progressions) {
    m_progressions = progressions;
    m_progressions_isSet = true;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_progressions_Set() const{
    return m_progressions_isSet;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_progressions_Valid() const{
    return m_progressions_isValid;
}

OAISingleComponentResponseOfDestinyCharacterRecordsComponent OAIDestiny_Responses_DestinyCharacterResponse::getRecords() const {
    return m_records;
}
void OAIDestiny_Responses_DestinyCharacterResponse::setRecords(const OAISingleComponentResponseOfDestinyCharacterRecordsComponent &records) {
    m_records = records;
    m_records_isSet = true;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_records_Set() const{
    return m_records_isSet;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_records_Valid() const{
    return m_records_isValid;
}

OAISingleComponentResponseOfDestinyCharacterRenderComponent OAIDestiny_Responses_DestinyCharacterResponse::getRenderData() const {
    return m_render_data;
}
void OAIDestiny_Responses_DestinyCharacterResponse::setRenderData(const OAISingleComponentResponseOfDestinyCharacterRenderComponent &render_data) {
    m_render_data = render_data;
    m_render_data_isSet = true;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_render_data_Set() const{
    return m_render_data_isSet;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_render_data_Valid() const{
    return m_render_data_isValid;
}

OAIDestinyBaseItemComponentSetOfuint32 OAIDestiny_Responses_DestinyCharacterResponse::getUninstancedItemComponents() const {
    return m_uninstanced_item_components;
}
void OAIDestiny_Responses_DestinyCharacterResponse::setUninstancedItemComponents(const OAIDestinyBaseItemComponentSetOfuint32 &uninstanced_item_components) {
    m_uninstanced_item_components = uninstanced_item_components;
    m_uninstanced_item_components_isSet = true;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_uninstanced_item_components_Set() const{
    return m_uninstanced_item_components_isSet;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::is_uninstanced_item_components_Valid() const{
    return m_uninstanced_item_components_isValid;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_character.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_collectibles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_lookups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_equipment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_components.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kiosks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_loadouts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plug_sets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_presentation_nodes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_progressions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_records.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_render_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uninstanced_item_components.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Responses_DestinyCharacterResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
