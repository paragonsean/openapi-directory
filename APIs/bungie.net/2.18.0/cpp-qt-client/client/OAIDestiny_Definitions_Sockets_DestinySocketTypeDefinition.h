/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition.h
 *
 * All Sockets have a \&quot;Type\&quot;: a set of common properties that determine when the socket allows Plugs to be inserted, what Categories of Plugs can be inserted, and whether the socket is even visible at all given the current game/character/account state.  See DestinyInventoryItemDefinition for more information about Socketed items and Plugs.
 */

#ifndef OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition_H
#define OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition.h"
#include "OAIDestiny_Definitions_Sockets_DestinyInsertPlugActionDefinition.h"
#include "OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition.h"
#include "OAIDestiny_Definitions_Sockets_DestinySocketTypeScalarMaterialRequirementEntry.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_Sockets_DestinySocketTypeScalarMaterialRequirementEntry;
class OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition;
class OAIDestiny_Definitions_Sockets_DestinyInsertPlugActionDefinition;
class OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition;

class OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition();
    OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition(QString json);
    ~OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAlwaysRandomizeSockets() const;
    void setAlwaysRandomizeSockets(const bool &always_randomize_sockets);
    bool is_always_randomize_sockets_Set() const;
    bool is_always_randomize_sockets_Valid() const;

    bool isAvoidDuplicatesOnInitialization() const;
    void setAvoidDuplicatesOnInitialization(const bool &avoid_duplicates_on_initialization);
    bool is_avoid_duplicates_on_initialization_Set() const;
    bool is_avoid_duplicates_on_initialization_Valid() const;

    QList<OAIDestiny_Definitions_Sockets_DestinySocketTypeScalarMaterialRequirementEntry> getCurrencyScalars() const;
    void setCurrencyScalars(const QList<OAIDestiny_Definitions_Sockets_DestinySocketTypeScalarMaterialRequirementEntry> &currency_scalars);
    bool is_currency_scalars_Set() const;
    bool is_currency_scalars_Valid() const;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition getDisplayProperties() const;
    void setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties);
    bool is_display_properties_Set() const;
    bool is_display_properties_Valid() const;

    qint32 getHash() const;
    void setHash(const qint32 &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    bool isHideDuplicateReusablePlugs() const;
    void setHideDuplicateReusablePlugs(const bool &hide_duplicate_reusable_plugs);
    bool is_hide_duplicate_reusable_plugs_Set() const;
    bool is_hide_duplicate_reusable_plugs_Valid() const;

    qint32 getIndex() const;
    void setIndex(const qint32 &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    OAIDestiny_Definitions_Sockets_DestinyInsertPlugActionDefinition getInsertAction() const;
    void setInsertAction(const OAIDestiny_Definitions_Sockets_DestinyInsertPlugActionDefinition &insert_action);
    bool is_insert_action_Set() const;
    bool is_insert_action_Valid() const;

    bool isIsPreviewEnabled() const;
    void setIsPreviewEnabled(const bool &is_preview_enabled);
    bool is_is_preview_enabled_Set() const;
    bool is_is_preview_enabled_Valid() const;

    bool isOverridesUiAppearance() const;
    void setOverridesUiAppearance(const bool &overrides_ui_appearance);
    bool is_overrides_ui_appearance_Set() const;
    bool is_overrides_ui_appearance_Valid() const;

    QList<OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition> getPlugWhitelist() const;
    void setPlugWhitelist(const QList<OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition> &plug_whitelist);
    bool is_plug_whitelist_Set() const;
    bool is_plug_whitelist_Valid() const;

    bool isRedacted() const;
    void setRedacted(const bool &redacted);
    bool is_redacted_Set() const;
    bool is_redacted_Valid() const;

    qint32 getSocketCategoryHash() const;
    void setSocketCategoryHash(const qint32 &socket_category_hash);
    bool is_socket_category_hash_Set() const;
    bool is_socket_category_hash_Valid() const;

    qint32 getVisibility() const;
    void setVisibility(const qint32 &visibility);
    bool is_visibility_Set() const;
    bool is_visibility_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_always_randomize_sockets;
    bool m_always_randomize_sockets_isSet;
    bool m_always_randomize_sockets_isValid;

    bool m_avoid_duplicates_on_initialization;
    bool m_avoid_duplicates_on_initialization_isSet;
    bool m_avoid_duplicates_on_initialization_isValid;

    QList<OAIDestiny_Definitions_Sockets_DestinySocketTypeScalarMaterialRequirementEntry> m_currency_scalars;
    bool m_currency_scalars_isSet;
    bool m_currency_scalars_isValid;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition m_display_properties;
    bool m_display_properties_isSet;
    bool m_display_properties_isValid;

    qint32 m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    bool m_hide_duplicate_reusable_plugs;
    bool m_hide_duplicate_reusable_plugs_isSet;
    bool m_hide_duplicate_reusable_plugs_isValid;

    qint32 m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    OAIDestiny_Definitions_Sockets_DestinyInsertPlugActionDefinition m_insert_action;
    bool m_insert_action_isSet;
    bool m_insert_action_isValid;

    bool m_is_preview_enabled;
    bool m_is_preview_enabled_isSet;
    bool m_is_preview_enabled_isValid;

    bool m_overrides_ui_appearance;
    bool m_overrides_ui_appearance_isSet;
    bool m_overrides_ui_appearance_isValid;

    QList<OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition> m_plug_whitelist;
    bool m_plug_whitelist_isSet;
    bool m_plug_whitelist_isValid;

    bool m_redacted;
    bool m_redacted_isSet;
    bool m_redacted_isValid;

    qint32 m_socket_category_hash;
    bool m_socket_category_hash_isSet;
    bool m_socket_category_hash_isValid;

    qint32 m_visibility;
    bool m_visibility_isSet;
    bool m_visibility_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition)

#endif // OAIDestiny_Definitions_Sockets_DestinySocketTypeDefinition_H
