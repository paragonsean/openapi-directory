/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Components_Records_DestinyCharacterRecordsComponent.h
 *
 * 
 */

#ifndef OAIDestiny_Components_Records_DestinyCharacterRecordsComponent_H
#define OAIDestiny_Components_Records_DestinyCharacterRecordsComponent_H

#include <QJsonObject>

#include "OAIDestiny_Components_Records_DestinyRecordComponent.h"
#include <QList>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Components_Records_DestinyRecordComponent;

class OAIDestiny_Components_Records_DestinyCharacterRecordsComponent : public OAIObject {
public:
    OAIDestiny_Components_Records_DestinyCharacterRecordsComponent();
    OAIDestiny_Components_Records_DestinyCharacterRecordsComponent(QString json);
    ~OAIDestiny_Components_Records_DestinyCharacterRecordsComponent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<qint32> getFeaturedRecordHashes() const;
    void setFeaturedRecordHashes(const QList<qint32> &featured_record_hashes);
    bool is_featured_record_hashes_Set() const;
    bool is_featured_record_hashes_Valid() const;

    qint32 getRecordCategoriesRootNodeHash() const;
    void setRecordCategoriesRootNodeHash(const qint32 &record_categories_root_node_hash);
    bool is_record_categories_root_node_hash_Set() const;
    bool is_record_categories_root_node_hash_Valid() const;

    qint32 getRecordSealsRootNodeHash() const;
    void setRecordSealsRootNodeHash(const qint32 &record_seals_root_node_hash);
    bool is_record_seals_root_node_hash_Set() const;
    bool is_record_seals_root_node_hash_Valid() const;

    QMap<QString, OAIDestiny_Components_Records_DestinyRecordComponent> getRecords() const;
    void setRecords(const QMap<QString, OAIDestiny_Components_Records_DestinyRecordComponent> &records);
    bool is_records_Set() const;
    bool is_records_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<qint32> m_featured_record_hashes;
    bool m_featured_record_hashes_isSet;
    bool m_featured_record_hashes_isValid;

    qint32 m_record_categories_root_node_hash;
    bool m_record_categories_root_node_hash_isSet;
    bool m_record_categories_root_node_hash_isValid;

    qint32 m_record_seals_root_node_hash;
    bool m_record_seals_root_node_hash_isSet;
    bool m_record_seals_root_node_hash_isValid;

    QMap<QString, OAIDestiny_Components_Records_DestinyRecordComponent> m_records;
    bool m_records_isSet;
    bool m_records_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Components_Records_DestinyCharacterRecordsComponent)

#endif // OAIDestiny_Components_Records_DestinyCharacterRecordsComponent_H
