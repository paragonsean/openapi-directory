/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::~OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition() {}

void OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_linked_graph_id_isSet = false;
    m_linked_graph_id_isValid = false;

    m_linked_graphs_isSet = false;
    m_linked_graphs_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_overview_isSet = false;
    m_overview_isValid = false;

    m_unlock_expression_isSet = false;
    m_unlock_expression_isValid = false;
}

void OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_linked_graph_id_isValid = ::OpenAPI::fromJsonValue(m_linked_graph_id, json[QString("linkedGraphId")]);
    m_linked_graph_id_isSet = !json[QString("linkedGraphId")].isNull() && m_linked_graph_id_isValid;

    m_linked_graphs_isValid = ::OpenAPI::fromJsonValue(m_linked_graphs, json[QString("linkedGraphs")]);
    m_linked_graphs_isSet = !json[QString("linkedGraphs")].isNull() && m_linked_graphs_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_overview_isValid = ::OpenAPI::fromJsonValue(m_overview, json[QString("overview")]);
    m_overview_isSet = !json[QString("overview")].isNull() && m_overview_isValid;

    m_unlock_expression_isValid = ::OpenAPI::fromJsonValue(m_unlock_expression, json[QString("unlockExpression")]);
    m_unlock_expression_isSet = !json[QString("unlockExpression")].isNull() && m_unlock_expression_isValid;
}

QString OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_linked_graph_id_isSet) {
        obj.insert(QString("linkedGraphId"), ::OpenAPI::toJsonValue(m_linked_graph_id));
    }
    if (m_linked_graphs.size() > 0) {
        obj.insert(QString("linkedGraphs"), ::OpenAPI::toJsonValue(m_linked_graphs));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_overview_isSet) {
        obj.insert(QString("overview"), ::OpenAPI::toJsonValue(m_overview));
    }
    if (m_unlock_expression.isSet()) {
        obj.insert(QString("unlockExpression"), ::OpenAPI::toJsonValue(m_unlock_expression));
    }
    return obj;
}

QString OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::getDescription() const {
    return m_description;
}
void OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::getLinkedGraphId() const {
    return m_linked_graph_id;
}
void OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::setLinkedGraphId(const qint32 &linked_graph_id) {
    m_linked_graph_id = linked_graph_id;
    m_linked_graph_id_isSet = true;
}

bool OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::is_linked_graph_id_Set() const{
    return m_linked_graph_id_isSet;
}

bool OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::is_linked_graph_id_Valid() const{
    return m_linked_graph_id_isValid;
}

QList<OAIDestiny_Definitions_Director_DestinyLinkedGraphEntryDefinition> OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::getLinkedGraphs() const {
    return m_linked_graphs;
}
void OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::setLinkedGraphs(const QList<OAIDestiny_Definitions_Director_DestinyLinkedGraphEntryDefinition> &linked_graphs) {
    m_linked_graphs = linked_graphs;
    m_linked_graphs_isSet = true;
}

bool OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::is_linked_graphs_Set() const{
    return m_linked_graphs_isSet;
}

bool OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::is_linked_graphs_Valid() const{
    return m_linked_graphs_isValid;
}

QString OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::getName() const {
    return m_name;
}
void OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::getOverview() const {
    return m_overview;
}
void OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::setOverview(const QString &overview) {
    m_overview = overview;
    m_overview_isSet = true;
}

bool OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::is_overview_Set() const{
    return m_overview_isSet;
}

bool OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::is_overview_Valid() const{
    return m_overview_isValid;
}

OAIDestiny_Definitions_DestinyUnlockExpressionDefinition OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::getUnlockExpression() const {
    return m_unlock_expression;
}
void OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::setUnlockExpression(const OAIDestiny_Definitions_DestinyUnlockExpressionDefinition &unlock_expression) {
    m_unlock_expression = unlock_expression;
    m_unlock_expression_isSet = true;
}

bool OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::is_unlock_expression_Set() const{
    return m_unlock_expression_isSet;
}

bool OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::is_unlock_expression_Valid() const{
    return m_unlock_expression_isValid;
}

bool OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_graph_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_graphs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unlock_expression.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_Director_DestinyLinkedGraphDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
