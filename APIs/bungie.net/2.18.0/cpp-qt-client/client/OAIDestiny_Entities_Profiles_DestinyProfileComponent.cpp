/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Entities_Profiles_DestinyProfileComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Entities_Profiles_DestinyProfileComponent::OAIDestiny_Entities_Profiles_DestinyProfileComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Entities_Profiles_DestinyProfileComponent::OAIDestiny_Entities_Profiles_DestinyProfileComponent() {
    this->initializeModel();
}

OAIDestiny_Entities_Profiles_DestinyProfileComponent::~OAIDestiny_Entities_Profiles_DestinyProfileComponent() {}

void OAIDestiny_Entities_Profiles_DestinyProfileComponent::initializeModel() {

    m_active_event_card_hash_isSet = false;
    m_active_event_card_hash_isValid = false;

    m_character_ids_isSet = false;
    m_character_ids_isValid = false;

    m_current_guardian_rank_isSet = false;
    m_current_guardian_rank_isValid = false;

    m_current_season_hash_isSet = false;
    m_current_season_hash_isValid = false;

    m_current_season_reward_power_cap_isSet = false;
    m_current_season_reward_power_cap_isValid = false;

    m_date_last_played_isSet = false;
    m_date_last_played_isValid = false;

    m_event_card_hashes_owned_isSet = false;
    m_event_card_hashes_owned_isValid = false;

    m_lifetime_highest_guardian_rank_isSet = false;
    m_lifetime_highest_guardian_rank_isValid = false;

    m_season_hashes_isSet = false;
    m_season_hashes_isValid = false;

    m_user_info_isSet = false;
    m_user_info_isValid = false;

    m_versions_owned_isSet = false;
    m_versions_owned_isValid = false;
}

void OAIDestiny_Entities_Profiles_DestinyProfileComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Entities_Profiles_DestinyProfileComponent::fromJsonObject(QJsonObject json) {

    m_active_event_card_hash_isValid = ::OpenAPI::fromJsonValue(m_active_event_card_hash, json[QString("activeEventCardHash")]);
    m_active_event_card_hash_isSet = !json[QString("activeEventCardHash")].isNull() && m_active_event_card_hash_isValid;

    m_character_ids_isValid = ::OpenAPI::fromJsonValue(m_character_ids, json[QString("characterIds")]);
    m_character_ids_isSet = !json[QString("characterIds")].isNull() && m_character_ids_isValid;

    m_current_guardian_rank_isValid = ::OpenAPI::fromJsonValue(m_current_guardian_rank, json[QString("currentGuardianRank")]);
    m_current_guardian_rank_isSet = !json[QString("currentGuardianRank")].isNull() && m_current_guardian_rank_isValid;

    m_current_season_hash_isValid = ::OpenAPI::fromJsonValue(m_current_season_hash, json[QString("currentSeasonHash")]);
    m_current_season_hash_isSet = !json[QString("currentSeasonHash")].isNull() && m_current_season_hash_isValid;

    m_current_season_reward_power_cap_isValid = ::OpenAPI::fromJsonValue(m_current_season_reward_power_cap, json[QString("currentSeasonRewardPowerCap")]);
    m_current_season_reward_power_cap_isSet = !json[QString("currentSeasonRewardPowerCap")].isNull() && m_current_season_reward_power_cap_isValid;

    m_date_last_played_isValid = ::OpenAPI::fromJsonValue(m_date_last_played, json[QString("dateLastPlayed")]);
    m_date_last_played_isSet = !json[QString("dateLastPlayed")].isNull() && m_date_last_played_isValid;

    m_event_card_hashes_owned_isValid = ::OpenAPI::fromJsonValue(m_event_card_hashes_owned, json[QString("eventCardHashesOwned")]);
    m_event_card_hashes_owned_isSet = !json[QString("eventCardHashesOwned")].isNull() && m_event_card_hashes_owned_isValid;

    m_lifetime_highest_guardian_rank_isValid = ::OpenAPI::fromJsonValue(m_lifetime_highest_guardian_rank, json[QString("lifetimeHighestGuardianRank")]);
    m_lifetime_highest_guardian_rank_isSet = !json[QString("lifetimeHighestGuardianRank")].isNull() && m_lifetime_highest_guardian_rank_isValid;

    m_season_hashes_isValid = ::OpenAPI::fromJsonValue(m_season_hashes, json[QString("seasonHashes")]);
    m_season_hashes_isSet = !json[QString("seasonHashes")].isNull() && m_season_hashes_isValid;

    m_user_info_isValid = ::OpenAPI::fromJsonValue(m_user_info, json[QString("userInfo")]);
    m_user_info_isSet = !json[QString("userInfo")].isNull() && m_user_info_isValid;

    m_versions_owned_isValid = ::OpenAPI::fromJsonValue(m_versions_owned, json[QString("versionsOwned")]);
    m_versions_owned_isSet = !json[QString("versionsOwned")].isNull() && m_versions_owned_isValid;
}

QString OAIDestiny_Entities_Profiles_DestinyProfileComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Entities_Profiles_DestinyProfileComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_active_event_card_hash_isSet) {
        obj.insert(QString("activeEventCardHash"), ::OpenAPI::toJsonValue(m_active_event_card_hash));
    }
    if (m_character_ids.size() > 0) {
        obj.insert(QString("characterIds"), ::OpenAPI::toJsonValue(m_character_ids));
    }
    if (m_current_guardian_rank_isSet) {
        obj.insert(QString("currentGuardianRank"), ::OpenAPI::toJsonValue(m_current_guardian_rank));
    }
    if (m_current_season_hash_isSet) {
        obj.insert(QString("currentSeasonHash"), ::OpenAPI::toJsonValue(m_current_season_hash));
    }
    if (m_current_season_reward_power_cap_isSet) {
        obj.insert(QString("currentSeasonRewardPowerCap"), ::OpenAPI::toJsonValue(m_current_season_reward_power_cap));
    }
    if (m_date_last_played_isSet) {
        obj.insert(QString("dateLastPlayed"), ::OpenAPI::toJsonValue(m_date_last_played));
    }
    if (m_event_card_hashes_owned.size() > 0) {
        obj.insert(QString("eventCardHashesOwned"), ::OpenAPI::toJsonValue(m_event_card_hashes_owned));
    }
    if (m_lifetime_highest_guardian_rank_isSet) {
        obj.insert(QString("lifetimeHighestGuardianRank"), ::OpenAPI::toJsonValue(m_lifetime_highest_guardian_rank));
    }
    if (m_season_hashes.size() > 0) {
        obj.insert(QString("seasonHashes"), ::OpenAPI::toJsonValue(m_season_hashes));
    }
    if (m_user_info.isSet()) {
        obj.insert(QString("userInfo"), ::OpenAPI::toJsonValue(m_user_info));
    }
    if (m_versions_owned_isSet) {
        obj.insert(QString("versionsOwned"), ::OpenAPI::toJsonValue(m_versions_owned));
    }
    return obj;
}

qint32 OAIDestiny_Entities_Profiles_DestinyProfileComponent::getActiveEventCardHash() const {
    return m_active_event_card_hash;
}
void OAIDestiny_Entities_Profiles_DestinyProfileComponent::setActiveEventCardHash(const qint32 &active_event_card_hash) {
    m_active_event_card_hash = active_event_card_hash;
    m_active_event_card_hash_isSet = true;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::is_active_event_card_hash_Set() const{
    return m_active_event_card_hash_isSet;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::is_active_event_card_hash_Valid() const{
    return m_active_event_card_hash_isValid;
}

QList<qint64> OAIDestiny_Entities_Profiles_DestinyProfileComponent::getCharacterIds() const {
    return m_character_ids;
}
void OAIDestiny_Entities_Profiles_DestinyProfileComponent::setCharacterIds(const QList<qint64> &character_ids) {
    m_character_ids = character_ids;
    m_character_ids_isSet = true;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::is_character_ids_Set() const{
    return m_character_ids_isSet;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::is_character_ids_Valid() const{
    return m_character_ids_isValid;
}

qint32 OAIDestiny_Entities_Profiles_DestinyProfileComponent::getCurrentGuardianRank() const {
    return m_current_guardian_rank;
}
void OAIDestiny_Entities_Profiles_DestinyProfileComponent::setCurrentGuardianRank(const qint32 &current_guardian_rank) {
    m_current_guardian_rank = current_guardian_rank;
    m_current_guardian_rank_isSet = true;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::is_current_guardian_rank_Set() const{
    return m_current_guardian_rank_isSet;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::is_current_guardian_rank_Valid() const{
    return m_current_guardian_rank_isValid;
}

qint32 OAIDestiny_Entities_Profiles_DestinyProfileComponent::getCurrentSeasonHash() const {
    return m_current_season_hash;
}
void OAIDestiny_Entities_Profiles_DestinyProfileComponent::setCurrentSeasonHash(const qint32 &current_season_hash) {
    m_current_season_hash = current_season_hash;
    m_current_season_hash_isSet = true;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::is_current_season_hash_Set() const{
    return m_current_season_hash_isSet;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::is_current_season_hash_Valid() const{
    return m_current_season_hash_isValid;
}

qint32 OAIDestiny_Entities_Profiles_DestinyProfileComponent::getCurrentSeasonRewardPowerCap() const {
    return m_current_season_reward_power_cap;
}
void OAIDestiny_Entities_Profiles_DestinyProfileComponent::setCurrentSeasonRewardPowerCap(const qint32 &current_season_reward_power_cap) {
    m_current_season_reward_power_cap = current_season_reward_power_cap;
    m_current_season_reward_power_cap_isSet = true;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::is_current_season_reward_power_cap_Set() const{
    return m_current_season_reward_power_cap_isSet;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::is_current_season_reward_power_cap_Valid() const{
    return m_current_season_reward_power_cap_isValid;
}

QDateTime OAIDestiny_Entities_Profiles_DestinyProfileComponent::getDateLastPlayed() const {
    return m_date_last_played;
}
void OAIDestiny_Entities_Profiles_DestinyProfileComponent::setDateLastPlayed(const QDateTime &date_last_played) {
    m_date_last_played = date_last_played;
    m_date_last_played_isSet = true;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::is_date_last_played_Set() const{
    return m_date_last_played_isSet;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::is_date_last_played_Valid() const{
    return m_date_last_played_isValid;
}

QList<qint32> OAIDestiny_Entities_Profiles_DestinyProfileComponent::getEventCardHashesOwned() const {
    return m_event_card_hashes_owned;
}
void OAIDestiny_Entities_Profiles_DestinyProfileComponent::setEventCardHashesOwned(const QList<qint32> &event_card_hashes_owned) {
    m_event_card_hashes_owned = event_card_hashes_owned;
    m_event_card_hashes_owned_isSet = true;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::is_event_card_hashes_owned_Set() const{
    return m_event_card_hashes_owned_isSet;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::is_event_card_hashes_owned_Valid() const{
    return m_event_card_hashes_owned_isValid;
}

qint32 OAIDestiny_Entities_Profiles_DestinyProfileComponent::getLifetimeHighestGuardianRank() const {
    return m_lifetime_highest_guardian_rank;
}
void OAIDestiny_Entities_Profiles_DestinyProfileComponent::setLifetimeHighestGuardianRank(const qint32 &lifetime_highest_guardian_rank) {
    m_lifetime_highest_guardian_rank = lifetime_highest_guardian_rank;
    m_lifetime_highest_guardian_rank_isSet = true;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::is_lifetime_highest_guardian_rank_Set() const{
    return m_lifetime_highest_guardian_rank_isSet;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::is_lifetime_highest_guardian_rank_Valid() const{
    return m_lifetime_highest_guardian_rank_isValid;
}

QList<qint32> OAIDestiny_Entities_Profiles_DestinyProfileComponent::getSeasonHashes() const {
    return m_season_hashes;
}
void OAIDestiny_Entities_Profiles_DestinyProfileComponent::setSeasonHashes(const QList<qint32> &season_hashes) {
    m_season_hashes = season_hashes;
    m_season_hashes_isSet = true;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::is_season_hashes_Set() const{
    return m_season_hashes_isSet;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::is_season_hashes_Valid() const{
    return m_season_hashes_isValid;
}

OAIUser_UserInfoCard OAIDestiny_Entities_Profiles_DestinyProfileComponent::getUserInfo() const {
    return m_user_info;
}
void OAIDestiny_Entities_Profiles_DestinyProfileComponent::setUserInfo(const OAIUser_UserInfoCard &user_info) {
    m_user_info = user_info;
    m_user_info_isSet = true;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::is_user_info_Set() const{
    return m_user_info_isSet;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::is_user_info_Valid() const{
    return m_user_info_isValid;
}

qint32 OAIDestiny_Entities_Profiles_DestinyProfileComponent::getVersionsOwned() const {
    return m_versions_owned;
}
void OAIDestiny_Entities_Profiles_DestinyProfileComponent::setVersionsOwned(const qint32 &versions_owned) {
    m_versions_owned = versions_owned;
    m_versions_owned_isSet = true;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::is_versions_owned_Set() const{
    return m_versions_owned_isSet;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::is_versions_owned_Valid() const{
    return m_versions_owned_isValid;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_event_card_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_guardian_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_season_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_season_reward_power_cap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_last_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_card_hashes_owned.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_highest_guardian_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_versions_owned_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Entities_Profiles_DestinyProfileComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
