/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContent_ContentItemPublicContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContent_ContentItemPublicContract::OAIContent_ContentItemPublicContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContent_ContentItemPublicContract::OAIContent_ContentItemPublicContract() {
    this->initializeModel();
}

OAIContent_ContentItemPublicContract::~OAIContent_ContentItemPublicContract() {}

void OAIContent_ContentItemPublicContract::initializeModel() {

    m_allow_comments_isSet = false;
    m_allow_comments_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_auto_english_property_fallback_isSet = false;
    m_auto_english_property_fallback_isValid = false;

    m_c_type_isSet = false;
    m_c_type_isValid = false;

    m_cms_path_isSet = false;
    m_cms_path_isValid = false;

    m_comment_summary_isSet = false;
    m_comment_summary_isValid = false;

    m_content_id_isSet = false;
    m_content_id_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_has_age_gate_isSet = false;
    m_has_age_gate_isValid = false;

    m_minimum_age_isSet = false;
    m_minimum_age_isValid = false;

    m_modify_date_isSet = false;
    m_modify_date_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_rating_image_path_isSet = false;
    m_rating_image_path_isValid = false;

    m_representations_isSet = false;
    m_representations_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIContent_ContentItemPublicContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContent_ContentItemPublicContract::fromJsonObject(QJsonObject json) {

    m_allow_comments_isValid = ::OpenAPI::fromJsonValue(m_allow_comments, json[QString("allowComments")]);
    m_allow_comments_isSet = !json[QString("allowComments")].isNull() && m_allow_comments_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_auto_english_property_fallback_isValid = ::OpenAPI::fromJsonValue(m_auto_english_property_fallback, json[QString("autoEnglishPropertyFallback")]);
    m_auto_english_property_fallback_isSet = !json[QString("autoEnglishPropertyFallback")].isNull() && m_auto_english_property_fallback_isValid;

    m_c_type_isValid = ::OpenAPI::fromJsonValue(m_c_type, json[QString("cType")]);
    m_c_type_isSet = !json[QString("cType")].isNull() && m_c_type_isValid;

    m_cms_path_isValid = ::OpenAPI::fromJsonValue(m_cms_path, json[QString("cmsPath")]);
    m_cms_path_isSet = !json[QString("cmsPath")].isNull() && m_cms_path_isValid;

    m_comment_summary_isValid = ::OpenAPI::fromJsonValue(m_comment_summary, json[QString("commentSummary")]);
    m_comment_summary_isSet = !json[QString("commentSummary")].isNull() && m_comment_summary_isValid;

    m_content_id_isValid = ::OpenAPI::fromJsonValue(m_content_id, json[QString("contentId")]);
    m_content_id_isSet = !json[QString("contentId")].isNull() && m_content_id_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_has_age_gate_isValid = ::OpenAPI::fromJsonValue(m_has_age_gate, json[QString("hasAgeGate")]);
    m_has_age_gate_isSet = !json[QString("hasAgeGate")].isNull() && m_has_age_gate_isValid;

    m_minimum_age_isValid = ::OpenAPI::fromJsonValue(m_minimum_age, json[QString("minimumAge")]);
    m_minimum_age_isSet = !json[QString("minimumAge")].isNull() && m_minimum_age_isValid;

    m_modify_date_isValid = ::OpenAPI::fromJsonValue(m_modify_date, json[QString("modifyDate")]);
    m_modify_date_isSet = !json[QString("modifyDate")].isNull() && m_modify_date_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_rating_image_path_isValid = ::OpenAPI::fromJsonValue(m_rating_image_path, json[QString("ratingImagePath")]);
    m_rating_image_path_isSet = !json[QString("ratingImagePath")].isNull() && m_rating_image_path_isValid;

    m_representations_isValid = ::OpenAPI::fromJsonValue(m_representations, json[QString("representations")]);
    m_representations_isSet = !json[QString("representations")].isNull() && m_representations_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIContent_ContentItemPublicContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContent_ContentItemPublicContract::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_comments_isSet) {
        obj.insert(QString("allowComments"), ::OpenAPI::toJsonValue(m_allow_comments));
    }
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_auto_english_property_fallback_isSet) {
        obj.insert(QString("autoEnglishPropertyFallback"), ::OpenAPI::toJsonValue(m_auto_english_property_fallback));
    }
    if (m_c_type_isSet) {
        obj.insert(QString("cType"), ::OpenAPI::toJsonValue(m_c_type));
    }
    if (m_cms_path_isSet) {
        obj.insert(QString("cmsPath"), ::OpenAPI::toJsonValue(m_cms_path));
    }
    if (m_comment_summary.isSet()) {
        obj.insert(QString("commentSummary"), ::OpenAPI::toJsonValue(m_comment_summary));
    }
    if (m_content_id_isSet) {
        obj.insert(QString("contentId"), ::OpenAPI::toJsonValue(m_content_id));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_has_age_gate_isSet) {
        obj.insert(QString("hasAgeGate"), ::OpenAPI::toJsonValue(m_has_age_gate));
    }
    if (m_minimum_age_isSet) {
        obj.insert(QString("minimumAge"), ::OpenAPI::toJsonValue(m_minimum_age));
    }
    if (m_modify_date_isSet) {
        obj.insert(QString("modifyDate"), ::OpenAPI::toJsonValue(m_modify_date));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_rating_image_path_isSet) {
        obj.insert(QString("ratingImagePath"), ::OpenAPI::toJsonValue(m_rating_image_path));
    }
    if (m_representations.size() > 0) {
        obj.insert(QString("representations"), ::OpenAPI::toJsonValue(m_representations));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

bool OAIContent_ContentItemPublicContract::isAllowComments() const {
    return m_allow_comments;
}
void OAIContent_ContentItemPublicContract::setAllowComments(const bool &allow_comments) {
    m_allow_comments = allow_comments;
    m_allow_comments_isSet = true;
}

bool OAIContent_ContentItemPublicContract::is_allow_comments_Set() const{
    return m_allow_comments_isSet;
}

bool OAIContent_ContentItemPublicContract::is_allow_comments_Valid() const{
    return m_allow_comments_isValid;
}

OAIUser_GeneralUser OAIContent_ContentItemPublicContract::getAuthor() const {
    return m_author;
}
void OAIContent_ContentItemPublicContract::setAuthor(const OAIUser_GeneralUser &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIContent_ContentItemPublicContract::is_author_Set() const{
    return m_author_isSet;
}

bool OAIContent_ContentItemPublicContract::is_author_Valid() const{
    return m_author_isValid;
}

bool OAIContent_ContentItemPublicContract::isAutoEnglishPropertyFallback() const {
    return m_auto_english_property_fallback;
}
void OAIContent_ContentItemPublicContract::setAutoEnglishPropertyFallback(const bool &auto_english_property_fallback) {
    m_auto_english_property_fallback = auto_english_property_fallback;
    m_auto_english_property_fallback_isSet = true;
}

bool OAIContent_ContentItemPublicContract::is_auto_english_property_fallback_Set() const{
    return m_auto_english_property_fallback_isSet;
}

bool OAIContent_ContentItemPublicContract::is_auto_english_property_fallback_Valid() const{
    return m_auto_english_property_fallback_isValid;
}

QString OAIContent_ContentItemPublicContract::getCType() const {
    return m_c_type;
}
void OAIContent_ContentItemPublicContract::setCType(const QString &c_type) {
    m_c_type = c_type;
    m_c_type_isSet = true;
}

bool OAIContent_ContentItemPublicContract::is_c_type_Set() const{
    return m_c_type_isSet;
}

bool OAIContent_ContentItemPublicContract::is_c_type_Valid() const{
    return m_c_type_isValid;
}

QString OAIContent_ContentItemPublicContract::getCmsPath() const {
    return m_cms_path;
}
void OAIContent_ContentItemPublicContract::setCmsPath(const QString &cms_path) {
    m_cms_path = cms_path;
    m_cms_path_isSet = true;
}

bool OAIContent_ContentItemPublicContract::is_cms_path_Set() const{
    return m_cms_path_isSet;
}

bool OAIContent_ContentItemPublicContract::is_cms_path_Valid() const{
    return m_cms_path_isValid;
}

OAIContent_CommentSummary OAIContent_ContentItemPublicContract::getCommentSummary() const {
    return m_comment_summary;
}
void OAIContent_ContentItemPublicContract::setCommentSummary(const OAIContent_CommentSummary &comment_summary) {
    m_comment_summary = comment_summary;
    m_comment_summary_isSet = true;
}

bool OAIContent_ContentItemPublicContract::is_comment_summary_Set() const{
    return m_comment_summary_isSet;
}

bool OAIContent_ContentItemPublicContract::is_comment_summary_Valid() const{
    return m_comment_summary_isValid;
}

qint64 OAIContent_ContentItemPublicContract::getContentId() const {
    return m_content_id;
}
void OAIContent_ContentItemPublicContract::setContentId(const qint64 &content_id) {
    m_content_id = content_id;
    m_content_id_isSet = true;
}

bool OAIContent_ContentItemPublicContract::is_content_id_Set() const{
    return m_content_id_isSet;
}

bool OAIContent_ContentItemPublicContract::is_content_id_Valid() const{
    return m_content_id_isValid;
}

QDateTime OAIContent_ContentItemPublicContract::getCreationDate() const {
    return m_creation_date;
}
void OAIContent_ContentItemPublicContract::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIContent_ContentItemPublicContract::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIContent_ContentItemPublicContract::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

bool OAIContent_ContentItemPublicContract::isHasAgeGate() const {
    return m_has_age_gate;
}
void OAIContent_ContentItemPublicContract::setHasAgeGate(const bool &has_age_gate) {
    m_has_age_gate = has_age_gate;
    m_has_age_gate_isSet = true;
}

bool OAIContent_ContentItemPublicContract::is_has_age_gate_Set() const{
    return m_has_age_gate_isSet;
}

bool OAIContent_ContentItemPublicContract::is_has_age_gate_Valid() const{
    return m_has_age_gate_isValid;
}

qint32 OAIContent_ContentItemPublicContract::getMinimumAge() const {
    return m_minimum_age;
}
void OAIContent_ContentItemPublicContract::setMinimumAge(const qint32 &minimum_age) {
    m_minimum_age = minimum_age;
    m_minimum_age_isSet = true;
}

bool OAIContent_ContentItemPublicContract::is_minimum_age_Set() const{
    return m_minimum_age_isSet;
}

bool OAIContent_ContentItemPublicContract::is_minimum_age_Valid() const{
    return m_minimum_age_isValid;
}

QDateTime OAIContent_ContentItemPublicContract::getModifyDate() const {
    return m_modify_date;
}
void OAIContent_ContentItemPublicContract::setModifyDate(const QDateTime &modify_date) {
    m_modify_date = modify_date;
    m_modify_date_isSet = true;
}

bool OAIContent_ContentItemPublicContract::is_modify_date_Set() const{
    return m_modify_date_isSet;
}

bool OAIContent_ContentItemPublicContract::is_modify_date_Valid() const{
    return m_modify_date_isValid;
}

QMap<QString, OAIObject> OAIContent_ContentItemPublicContract::getProperties() const {
    return m_properties;
}
void OAIContent_ContentItemPublicContract::setProperties(const QMap<QString, OAIObject> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIContent_ContentItemPublicContract::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIContent_ContentItemPublicContract::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIContent_ContentItemPublicContract::getRatingImagePath() const {
    return m_rating_image_path;
}
void OAIContent_ContentItemPublicContract::setRatingImagePath(const QString &rating_image_path) {
    m_rating_image_path = rating_image_path;
    m_rating_image_path_isSet = true;
}

bool OAIContent_ContentItemPublicContract::is_rating_image_path_Set() const{
    return m_rating_image_path_isSet;
}

bool OAIContent_ContentItemPublicContract::is_rating_image_path_Valid() const{
    return m_rating_image_path_isValid;
}

QList<OAIContent_ContentRepresentation> OAIContent_ContentItemPublicContract::getRepresentations() const {
    return m_representations;
}
void OAIContent_ContentItemPublicContract::setRepresentations(const QList<OAIContent_ContentRepresentation> &representations) {
    m_representations = representations;
    m_representations_isSet = true;
}

bool OAIContent_ContentItemPublicContract::is_representations_Set() const{
    return m_representations_isSet;
}

bool OAIContent_ContentItemPublicContract::is_representations_Valid() const{
    return m_representations_isValid;
}

QList<QString> OAIContent_ContentItemPublicContract::getTags() const {
    return m_tags;
}
void OAIContent_ContentItemPublicContract::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIContent_ContentItemPublicContract::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIContent_ContentItemPublicContract::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIContent_ContentItemPublicContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_english_property_fallback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_c_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cms_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_age_gate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modify_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_image_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_representations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContent_ContentItemPublicContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
