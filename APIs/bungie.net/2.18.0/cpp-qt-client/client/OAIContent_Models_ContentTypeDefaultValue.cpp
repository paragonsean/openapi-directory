/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContent_Models_ContentTypeDefaultValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContent_Models_ContentTypeDefaultValue::OAIContent_Models_ContentTypeDefaultValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContent_Models_ContentTypeDefaultValue::OAIContent_Models_ContentTypeDefaultValue() {
    this->initializeModel();
}

OAIContent_Models_ContentTypeDefaultValue::~OAIContent_Models_ContentTypeDefaultValue() {}

void OAIContent_Models_ContentTypeDefaultValue::initializeModel() {

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_when_clause_isSet = false;
    m_when_clause_isValid = false;

    m_when_value_isSet = false;
    m_when_value_isValid = false;
}

void OAIContent_Models_ContentTypeDefaultValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContent_Models_ContentTypeDefaultValue::fromJsonObject(QJsonObject json) {

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;

    m_when_clause_isValid = ::OpenAPI::fromJsonValue(m_when_clause, json[QString("whenClause")]);
    m_when_clause_isSet = !json[QString("whenClause")].isNull() && m_when_clause_isValid;

    m_when_value_isValid = ::OpenAPI::fromJsonValue(m_when_value, json[QString("whenValue")]);
    m_when_value_isSet = !json[QString("whenValue")].isNull() && m_when_value_isValid;
}

QString OAIContent_Models_ContentTypeDefaultValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContent_Models_ContentTypeDefaultValue::asJsonObject() const {
    QJsonObject obj;
    if (m_default_value_isSet) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_when_clause_isSet) {
        obj.insert(QString("whenClause"), ::OpenAPI::toJsonValue(m_when_clause));
    }
    if (m_when_value_isSet) {
        obj.insert(QString("whenValue"), ::OpenAPI::toJsonValue(m_when_value));
    }
    return obj;
}

QString OAIContent_Models_ContentTypeDefaultValue::getDefaultValue() const {
    return m_default_value;
}
void OAIContent_Models_ContentTypeDefaultValue::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIContent_Models_ContentTypeDefaultValue::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIContent_Models_ContentTypeDefaultValue::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAIContent_Models_ContentTypeDefaultValue::getWhenClause() const {
    return m_when_clause;
}
void OAIContent_Models_ContentTypeDefaultValue::setWhenClause(const QString &when_clause) {
    m_when_clause = when_clause;
    m_when_clause_isSet = true;
}

bool OAIContent_Models_ContentTypeDefaultValue::is_when_clause_Set() const{
    return m_when_clause_isSet;
}

bool OAIContent_Models_ContentTypeDefaultValue::is_when_clause_Valid() const{
    return m_when_clause_isValid;
}

QString OAIContent_Models_ContentTypeDefaultValue::getWhenValue() const {
    return m_when_value;
}
void OAIContent_Models_ContentTypeDefaultValue::setWhenValue(const QString &when_value) {
    m_when_value = when_value;
    m_when_value_isSet = true;
}

bool OAIContent_Models_ContentTypeDefaultValue::is_when_value_Set() const{
    return m_when_value_isSet;
}

bool OAIContent_Models_ContentTypeDefaultValue::is_when_value_Valid() const{
    return m_when_value_isValid;
}

bool OAIContent_Models_ContentTypeDefaultValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_when_clause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_when_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContent_Models_ContentTypeDefaultValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
