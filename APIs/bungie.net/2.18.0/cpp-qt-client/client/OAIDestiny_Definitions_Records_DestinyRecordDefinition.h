/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_Records_DestinyRecordDefinition.h
 *
 * 
 */

#ifndef OAIDestiny_Definitions_Records_DestinyRecordDefinition_H
#define OAIDestiny_Definitions_Records_DestinyRecordDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition.h"
#include "OAIDestiny_Definitions_Presentation_DestinyPresentationChildBlock.h"
#include "OAIDestiny_Definitions_Presentation_DestinyPresentationNodeRequirementsBlock.h"
#include "OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock.h"
#include "OAIDestiny_Definitions_Records_DestinyRecordExpirationBlock.h"
#include "OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock.h"
#include "OAIDestiny_Definitions_Records_DestinyRecordTitleBlock.h"
#include "OAIDestiny_Definitions_Records_SchemaRecordStateBlock.h"
#include "OAIDestiny_DestinyItemQuantity.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock;
class OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition;
class OAIDestiny_Definitions_Records_DestinyRecordExpirationBlock;
class OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock;
class OAIDestiny_Definitions_Presentation_DestinyPresentationChildBlock;
class OAIDestiny_Definitions_Presentation_DestinyPresentationNodeRequirementsBlock;
class OAIDestiny_DestinyItemQuantity;
class OAIDestiny_Definitions_Records_SchemaRecordStateBlock;
class OAIDestiny_Definitions_Records_DestinyRecordTitleBlock;

class OAIDestiny_Definitions_Records_DestinyRecordDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_Records_DestinyRecordDefinition();
    OAIDestiny_Definitions_Records_DestinyRecordDefinition(QString json);
    ~OAIDestiny_Definitions_Records_DestinyRecordDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock getCompletionInfo() const;
    void setCompletionInfo(const OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock &completion_info);
    bool is_completion_info_Set() const;
    bool is_completion_info_Valid() const;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition getDisplayProperties() const;
    void setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties);
    bool is_display_properties_Set() const;
    bool is_display_properties_Valid() const;

    OAIDestiny_Definitions_Records_DestinyRecordExpirationBlock getExpirationInfo() const;
    void setExpirationInfo(const OAIDestiny_Definitions_Records_DestinyRecordExpirationBlock &expiration_info);
    bool is_expiration_info_Set() const;
    bool is_expiration_info_Valid() const;

    bool isForTitleGilding() const;
    void setForTitleGilding(const bool &for_title_gilding);
    bool is_for_title_gilding_Set() const;
    bool is_for_title_gilding_Valid() const;

    qint32 getHash() const;
    void setHash(const qint32 &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    qint32 getIndex() const;
    void setIndex(const qint32 &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock getIntervalInfo() const;
    void setIntervalInfo(const OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock &interval_info);
    bool is_interval_info_Set() const;
    bool is_interval_info_Valid() const;

    qint32 getLoreHash() const;
    void setLoreHash(const qint32 &lore_hash);
    bool is_lore_hash_Set() const;
    bool is_lore_hash_Valid() const;

    QList<qint32> getObjectiveHashes() const;
    void setObjectiveHashes(const QList<qint32> &objective_hashes);
    bool is_objective_hashes_Set() const;
    bool is_objective_hashes_Valid() const;

    QList<qint32> getParentNodeHashes() const;
    void setParentNodeHashes(const QList<qint32> &parent_node_hashes);
    bool is_parent_node_hashes_Set() const;
    bool is_parent_node_hashes_Valid() const;

    OAIDestiny_Definitions_Presentation_DestinyPresentationChildBlock getPresentationInfo() const;
    void setPresentationInfo(const OAIDestiny_Definitions_Presentation_DestinyPresentationChildBlock &presentation_info);
    bool is_presentation_info_Set() const;
    bool is_presentation_info_Valid() const;

    qint32 getPresentationNodeType() const;
    void setPresentationNodeType(const qint32 &presentation_node_type);
    bool is_presentation_node_type_Set() const;
    bool is_presentation_node_type_Valid() const;

    qint32 getRecordValueStyle() const;
    void setRecordValueStyle(const qint32 &record_value_style);
    bool is_record_value_style_Set() const;
    bool is_record_value_style_Valid() const;

    bool isRedacted() const;
    void setRedacted(const bool &redacted);
    bool is_redacted_Set() const;
    bool is_redacted_Valid() const;

    OAIDestiny_Definitions_Presentation_DestinyPresentationNodeRequirementsBlock getRequirements() const;
    void setRequirements(const OAIDestiny_Definitions_Presentation_DestinyPresentationNodeRequirementsBlock &requirements);
    bool is_requirements_Set() const;
    bool is_requirements_Valid() const;

    QList<OAIDestiny_DestinyItemQuantity> getRewardItems() const;
    void setRewardItems(const QList<OAIDestiny_DestinyItemQuantity> &reward_items);
    bool is_reward_items_Set() const;
    bool is_reward_items_Valid() const;

    qint32 getScope() const;
    void setScope(const qint32 &scope);
    bool is_scope_Set() const;
    bool is_scope_Valid() const;

    bool isShouldShowLargeIcons() const;
    void setShouldShowLargeIcons(const bool &should_show_large_icons);
    bool is_should_show_large_icons_Set() const;
    bool is_should_show_large_icons_Valid() const;

    OAIDestiny_Definitions_Records_SchemaRecordStateBlock getStateInfo() const;
    void setStateInfo(const OAIDestiny_Definitions_Records_SchemaRecordStateBlock &state_info);
    bool is_state_info_Set() const;
    bool is_state_info_Valid() const;

    OAIDestiny_Definitions_Records_DestinyRecordTitleBlock getTitleInfo() const;
    void setTitleInfo(const OAIDestiny_Definitions_Records_DestinyRecordTitleBlock &title_info);
    bool is_title_info_Set() const;
    bool is_title_info_Valid() const;

    QList<qint32> getTraitHashes() const;
    void setTraitHashes(const QList<qint32> &trait_hashes);
    bool is_trait_hashes_Set() const;
    bool is_trait_hashes_Valid() const;

    QList<QString> getTraitIds() const;
    void setTraitIds(const QList<QString> &trait_ids);
    bool is_trait_ids_Set() const;
    bool is_trait_ids_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock m_completion_info;
    bool m_completion_info_isSet;
    bool m_completion_info_isValid;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition m_display_properties;
    bool m_display_properties_isSet;
    bool m_display_properties_isValid;

    OAIDestiny_Definitions_Records_DestinyRecordExpirationBlock m_expiration_info;
    bool m_expiration_info_isSet;
    bool m_expiration_info_isValid;

    bool m_for_title_gilding;
    bool m_for_title_gilding_isSet;
    bool m_for_title_gilding_isValid;

    qint32 m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    qint32 m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock m_interval_info;
    bool m_interval_info_isSet;
    bool m_interval_info_isValid;

    qint32 m_lore_hash;
    bool m_lore_hash_isSet;
    bool m_lore_hash_isValid;

    QList<qint32> m_objective_hashes;
    bool m_objective_hashes_isSet;
    bool m_objective_hashes_isValid;

    QList<qint32> m_parent_node_hashes;
    bool m_parent_node_hashes_isSet;
    bool m_parent_node_hashes_isValid;

    OAIDestiny_Definitions_Presentation_DestinyPresentationChildBlock m_presentation_info;
    bool m_presentation_info_isSet;
    bool m_presentation_info_isValid;

    qint32 m_presentation_node_type;
    bool m_presentation_node_type_isSet;
    bool m_presentation_node_type_isValid;

    qint32 m_record_value_style;
    bool m_record_value_style_isSet;
    bool m_record_value_style_isValid;

    bool m_redacted;
    bool m_redacted_isSet;
    bool m_redacted_isValid;

    OAIDestiny_Definitions_Presentation_DestinyPresentationNodeRequirementsBlock m_requirements;
    bool m_requirements_isSet;
    bool m_requirements_isValid;

    QList<OAIDestiny_DestinyItemQuantity> m_reward_items;
    bool m_reward_items_isSet;
    bool m_reward_items_isValid;

    qint32 m_scope;
    bool m_scope_isSet;
    bool m_scope_isValid;

    bool m_should_show_large_icons;
    bool m_should_show_large_icons_isSet;
    bool m_should_show_large_icons_isValid;

    OAIDestiny_Definitions_Records_SchemaRecordStateBlock m_state_info;
    bool m_state_info_isSet;
    bool m_state_info_isValid;

    OAIDestiny_Definitions_Records_DestinyRecordTitleBlock m_title_info;
    bool m_title_info_isSet;
    bool m_title_info_isValid;

    QList<qint32> m_trait_hashes;
    bool m_trait_hashes_isSet;
    bool m_trait_hashes_isValid;

    QList<QString> m_trait_ids;
    bool m_trait_ids_isSet;
    bool m_trait_ids_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_Records_DestinyRecordDefinition)

#endif // OAIDestiny_Definitions_Records_DestinyRecordDefinition_H
