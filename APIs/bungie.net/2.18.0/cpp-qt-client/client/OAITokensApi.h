/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITokensApi_H
#define OAI_OAITokensApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGroupV2_GetUserClanInviteSetting_200_response.h"
#include "OAITokens_GetBungieRewardsList_200_response.h"
#include "OAITokens_GetPartnerOfferSkuHistory_200_response.h"
#include "OAITokens_GetPartnerRewardHistory_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITokensApi : public QObject {
    Q_OBJECT

public:
    OAITokensApi(const int timeOut = 0);
    ~OAITokensApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  partner_application_id qint32 [required]
    * @param[in]  target_bnet_membership_id qint64 [required]
    */
    virtual void tokens_ApplyMissingPartnerOffersWithoutClaim(const qint32 &partner_application_id, const qint64 &target_bnet_membership_id);


    virtual void tokens_ClaimPartnerOffer();


    virtual void tokens_ForceDropsRepair();

    /**
    * @param[in]  membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    */
    virtual void tokens_GetBungieRewardsForPlatformUser(const qint64 &membership_id, const qint32 &membership_type);

    /**
    * @param[in]  membership_id qint64 [required]
    */
    virtual void tokens_GetBungieRewardsForUser(const qint64 &membership_id);


    virtual void tokens_GetBungieRewardsList();

    /**
    * @param[in]  partner_application_id qint32 [required]
    * @param[in]  target_bnet_membership_id qint64 [required]
    */
    virtual void tokens_GetPartnerOfferSkuHistory(const qint32 &partner_application_id, const qint64 &target_bnet_membership_id);

    /**
    * @param[in]  partner_application_id qint32 [required]
    * @param[in]  target_bnet_membership_id qint64 [required]
    */
    virtual void tokens_GetPartnerRewardHistory(const qint32 &partner_application_id, const qint64 &target_bnet_membership_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void tokens_ApplyMissingPartnerOffersWithoutClaimCallback(OAIHttpRequestWorker *worker);
    void tokens_ClaimPartnerOfferCallback(OAIHttpRequestWorker *worker);
    void tokens_ForceDropsRepairCallback(OAIHttpRequestWorker *worker);
    void tokens_GetBungieRewardsForPlatformUserCallback(OAIHttpRequestWorker *worker);
    void tokens_GetBungieRewardsForUserCallback(OAIHttpRequestWorker *worker);
    void tokens_GetBungieRewardsListCallback(OAIHttpRequestWorker *worker);
    void tokens_GetPartnerOfferSkuHistoryCallback(OAIHttpRequestWorker *worker);
    void tokens_GetPartnerRewardHistoryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void tokens_ApplyMissingPartnerOffersWithoutClaimSignal(OAIGroupV2_GetUserClanInviteSetting_200_response summary);
    void tokens_ClaimPartnerOfferSignal(OAIGroupV2_GetUserClanInviteSetting_200_response summary);
    void tokens_ForceDropsRepairSignal(OAIGroupV2_GetUserClanInviteSetting_200_response summary);
    void tokens_GetBungieRewardsForPlatformUserSignal(OAITokens_GetBungieRewardsList_200_response summary);
    void tokens_GetBungieRewardsForUserSignal(OAITokens_GetBungieRewardsList_200_response summary);
    void tokens_GetBungieRewardsListSignal(OAITokens_GetBungieRewardsList_200_response summary);
    void tokens_GetPartnerOfferSkuHistorySignal(OAITokens_GetPartnerOfferSkuHistory_200_response summary);
    void tokens_GetPartnerRewardHistorySignal(OAITokens_GetPartnerRewardHistory_200_response summary);


    void tokens_ApplyMissingPartnerOffersWithoutClaimSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetUserClanInviteSetting_200_response summary);
    void tokens_ClaimPartnerOfferSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetUserClanInviteSetting_200_response summary);
    void tokens_ForceDropsRepairSignalFull(OAIHttpRequestWorker *worker, OAIGroupV2_GetUserClanInviteSetting_200_response summary);
    void tokens_GetBungieRewardsForPlatformUserSignalFull(OAIHttpRequestWorker *worker, OAITokens_GetBungieRewardsList_200_response summary);
    void tokens_GetBungieRewardsForUserSignalFull(OAIHttpRequestWorker *worker, OAITokens_GetBungieRewardsList_200_response summary);
    void tokens_GetBungieRewardsListSignalFull(OAIHttpRequestWorker *worker, OAITokens_GetBungieRewardsList_200_response summary);
    void tokens_GetPartnerOfferSkuHistorySignalFull(OAIHttpRequestWorker *worker, OAITokens_GetPartnerOfferSkuHistory_200_response summary);
    void tokens_GetPartnerRewardHistorySignalFull(OAIHttpRequestWorker *worker, OAITokens_GetPartnerRewardHistory_200_response summary);

    Q_DECL_DEPRECATED_X("Use tokens_ApplyMissingPartnerOffersWithoutClaimSignalError() instead")
    void tokens_ApplyMissingPartnerOffersWithoutClaimSignalE(OAIGroupV2_GetUserClanInviteSetting_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tokens_ApplyMissingPartnerOffersWithoutClaimSignalError(OAIGroupV2_GetUserClanInviteSetting_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokens_ClaimPartnerOfferSignalError() instead")
    void tokens_ClaimPartnerOfferSignalE(OAIGroupV2_GetUserClanInviteSetting_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tokens_ClaimPartnerOfferSignalError(OAIGroupV2_GetUserClanInviteSetting_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokens_ForceDropsRepairSignalError() instead")
    void tokens_ForceDropsRepairSignalE(OAIGroupV2_GetUserClanInviteSetting_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tokens_ForceDropsRepairSignalError(OAIGroupV2_GetUserClanInviteSetting_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokens_GetBungieRewardsForPlatformUserSignalError() instead")
    void tokens_GetBungieRewardsForPlatformUserSignalE(OAITokens_GetBungieRewardsList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tokens_GetBungieRewardsForPlatformUserSignalError(OAITokens_GetBungieRewardsList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokens_GetBungieRewardsForUserSignalError() instead")
    void tokens_GetBungieRewardsForUserSignalE(OAITokens_GetBungieRewardsList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tokens_GetBungieRewardsForUserSignalError(OAITokens_GetBungieRewardsList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokens_GetBungieRewardsListSignalError() instead")
    void tokens_GetBungieRewardsListSignalE(OAITokens_GetBungieRewardsList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tokens_GetBungieRewardsListSignalError(OAITokens_GetBungieRewardsList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokens_GetPartnerOfferSkuHistorySignalError() instead")
    void tokens_GetPartnerOfferSkuHistorySignalE(OAITokens_GetPartnerOfferSkuHistory_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tokens_GetPartnerOfferSkuHistorySignalError(OAITokens_GetPartnerOfferSkuHistory_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokens_GetPartnerRewardHistorySignalError() instead")
    void tokens_GetPartnerRewardHistorySignalE(OAITokens_GetPartnerRewardHistory_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tokens_GetPartnerRewardHistorySignalError(OAITokens_GetPartnerRewardHistory_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use tokens_ApplyMissingPartnerOffersWithoutClaimSignalErrorFull() instead")
    void tokens_ApplyMissingPartnerOffersWithoutClaimSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tokens_ApplyMissingPartnerOffersWithoutClaimSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokens_ClaimPartnerOfferSignalErrorFull() instead")
    void tokens_ClaimPartnerOfferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tokens_ClaimPartnerOfferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokens_ForceDropsRepairSignalErrorFull() instead")
    void tokens_ForceDropsRepairSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tokens_ForceDropsRepairSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokens_GetBungieRewardsForPlatformUserSignalErrorFull() instead")
    void tokens_GetBungieRewardsForPlatformUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tokens_GetBungieRewardsForPlatformUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokens_GetBungieRewardsForUserSignalErrorFull() instead")
    void tokens_GetBungieRewardsForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tokens_GetBungieRewardsForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokens_GetBungieRewardsListSignalErrorFull() instead")
    void tokens_GetBungieRewardsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tokens_GetBungieRewardsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokens_GetPartnerOfferSkuHistorySignalErrorFull() instead")
    void tokens_GetPartnerOfferSkuHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tokens_GetPartnerOfferSkuHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokens_GetPartnerRewardHistorySignalErrorFull() instead")
    void tokens_GetPartnerRewardHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tokens_GetPartnerRewardHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
