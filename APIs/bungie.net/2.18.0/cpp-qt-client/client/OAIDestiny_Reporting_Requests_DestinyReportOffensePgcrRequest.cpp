/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest::OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest::OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest() {
    this->initializeModel();
}

OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest::~OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest() {}

void OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest::initializeModel() {

    m_offending_character_id_isSet = false;
    m_offending_character_id_isValid = false;

    m_reason_category_hashes_isSet = false;
    m_reason_category_hashes_isValid = false;

    m_reason_hashes_isSet = false;
    m_reason_hashes_isValid = false;
}

void OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest::fromJsonObject(QJsonObject json) {

    m_offending_character_id_isValid = ::OpenAPI::fromJsonValue(m_offending_character_id, json[QString("offendingCharacterId")]);
    m_offending_character_id_isSet = !json[QString("offendingCharacterId")].isNull() && m_offending_character_id_isValid;

    m_reason_category_hashes_isValid = ::OpenAPI::fromJsonValue(m_reason_category_hashes, json[QString("reasonCategoryHashes")]);
    m_reason_category_hashes_isSet = !json[QString("reasonCategoryHashes")].isNull() && m_reason_category_hashes_isValid;

    m_reason_hashes_isValid = ::OpenAPI::fromJsonValue(m_reason_hashes, json[QString("reasonHashes")]);
    m_reason_hashes_isSet = !json[QString("reasonHashes")].isNull() && m_reason_hashes_isValid;
}

QString OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_offending_character_id_isSet) {
        obj.insert(QString("offendingCharacterId"), ::OpenAPI::toJsonValue(m_offending_character_id));
    }
    if (m_reason_category_hashes.size() > 0) {
        obj.insert(QString("reasonCategoryHashes"), ::OpenAPI::toJsonValue(m_reason_category_hashes));
    }
    if (m_reason_hashes.size() > 0) {
        obj.insert(QString("reasonHashes"), ::OpenAPI::toJsonValue(m_reason_hashes));
    }
    return obj;
}

qint64 OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest::getOffendingCharacterId() const {
    return m_offending_character_id;
}
void OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest::setOffendingCharacterId(const qint64 &offending_character_id) {
    m_offending_character_id = offending_character_id;
    m_offending_character_id_isSet = true;
}

bool OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest::is_offending_character_id_Set() const{
    return m_offending_character_id_isSet;
}

bool OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest::is_offending_character_id_Valid() const{
    return m_offending_character_id_isValid;
}

QList<qint32> OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest::getReasonCategoryHashes() const {
    return m_reason_category_hashes;
}
void OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest::setReasonCategoryHashes(const QList<qint32> &reason_category_hashes) {
    m_reason_category_hashes = reason_category_hashes;
    m_reason_category_hashes_isSet = true;
}

bool OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest::is_reason_category_hashes_Set() const{
    return m_reason_category_hashes_isSet;
}

bool OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest::is_reason_category_hashes_Valid() const{
    return m_reason_category_hashes_isValid;
}

QList<qint32> OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest::getReasonHashes() const {
    return m_reason_hashes;
}
void OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest::setReasonHashes(const QList<qint32> &reason_hashes) {
    m_reason_hashes = reason_hashes;
    m_reason_hashes_isSet = true;
}

bool OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest::is_reason_hashes_Set() const{
    return m_reason_hashes_isSet;
}

bool OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest::is_reason_hashes_Valid() const{
    return m_reason_hashes_isValid;
}

bool OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offending_character_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_category_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Reporting_Requests_DestinyReportOffensePgcrRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
