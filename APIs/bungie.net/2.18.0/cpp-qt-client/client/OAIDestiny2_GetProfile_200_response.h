/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny2_GetProfile_200_response.h
 *
 * 
 */

#ifndef OAIDestiny2_GetProfile_200_response_H
#define OAIDestiny2_GetProfile_200_response_H

#include <QJsonObject>

#include "OAIDestiny_Responses_DestinyProfileResponse.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Responses_DestinyProfileResponse;

class OAIDestiny2_GetProfile_200_response : public OAIObject {
public:
    OAIDestiny2_GetProfile_200_response();
    OAIDestiny2_GetProfile_200_response(QString json);
    ~OAIDestiny2_GetProfile_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDetailedErrorTrace() const;
    void setDetailedErrorTrace(const QString &detailed_error_trace);
    bool is_detailed_error_trace_Set() const;
    bool is_detailed_error_trace_Valid() const;

    qint32 getErrorCode() const;
    void setErrorCode(const qint32 &error_code);
    bool is_error_code_Set() const;
    bool is_error_code_Valid() const;

    QString getErrorStatus() const;
    void setErrorStatus(const QString &error_status);
    bool is_error_status_Set() const;
    bool is_error_status_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    QMap<QString, QString> getMessageData() const;
    void setMessageData(const QMap<QString, QString> &message_data);
    bool is_message_data_Set() const;
    bool is_message_data_Valid() const;

    OAIDestiny_Responses_DestinyProfileResponse getResponse() const;
    void setResponse(const OAIDestiny_Responses_DestinyProfileResponse &response);
    bool is_response_Set() const;
    bool is_response_Valid() const;

    qint32 getThrottleSeconds() const;
    void setThrottleSeconds(const qint32 &throttle_seconds);
    bool is_throttle_seconds_Set() const;
    bool is_throttle_seconds_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_detailed_error_trace;
    bool m_detailed_error_trace_isSet;
    bool m_detailed_error_trace_isValid;

    qint32 m_error_code;
    bool m_error_code_isSet;
    bool m_error_code_isValid;

    QString m_error_status;
    bool m_error_status_isSet;
    bool m_error_status_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    QMap<QString, QString> m_message_data;
    bool m_message_data_isSet;
    bool m_message_data_isValid;

    OAIDestiny_Responses_DestinyProfileResponse m_response;
    bool m_response_isSet;
    bool m_response_isValid;

    qint32 m_throttle_seconds;
    bool m_throttle_seconds_isSet;
    bool m_throttle_seconds_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny2_GetProfile_200_response)

#endif // OAIDestiny2_GetProfile_200_response_H
