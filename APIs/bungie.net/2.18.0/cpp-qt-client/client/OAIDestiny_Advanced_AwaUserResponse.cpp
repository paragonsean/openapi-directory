/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Advanced_AwaUserResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Advanced_AwaUserResponse::OAIDestiny_Advanced_AwaUserResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Advanced_AwaUserResponse::OAIDestiny_Advanced_AwaUserResponse() {
    this->initializeModel();
}

OAIDestiny_Advanced_AwaUserResponse::~OAIDestiny_Advanced_AwaUserResponse() {}

void OAIDestiny_Advanced_AwaUserResponse::initializeModel() {

    m_correlation_id_isSet = false;
    m_correlation_id_isValid = false;

    m_nonce_isSet = false;
    m_nonce_isValid = false;

    m_selection_isSet = false;
    m_selection_isValid = false;
}

void OAIDestiny_Advanced_AwaUserResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Advanced_AwaUserResponse::fromJsonObject(QJsonObject json) {

    m_correlation_id_isValid = ::OpenAPI::fromJsonValue(m_correlation_id, json[QString("correlationId")]);
    m_correlation_id_isSet = !json[QString("correlationId")].isNull() && m_correlation_id_isValid;

    m_nonce_isValid = ::OpenAPI::fromJsonValue(m_nonce, json[QString("nonce")]);
    m_nonce_isSet = !json[QString("nonce")].isNull() && m_nonce_isValid;

    m_selection_isValid = ::OpenAPI::fromJsonValue(m_selection, json[QString("selection")]);
    m_selection_isSet = !json[QString("selection")].isNull() && m_selection_isValid;
}

QString OAIDestiny_Advanced_AwaUserResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Advanced_AwaUserResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_correlation_id_isSet) {
        obj.insert(QString("correlationId"), ::OpenAPI::toJsonValue(m_correlation_id));
    }
    if (m_nonce.size() > 0) {
        obj.insert(QString("nonce"), ::OpenAPI::toJsonValue(m_nonce));
    }
    if (m_selection_isSet) {
        obj.insert(QString("selection"), ::OpenAPI::toJsonValue(m_selection));
    }
    return obj;
}

QString OAIDestiny_Advanced_AwaUserResponse::getCorrelationId() const {
    return m_correlation_id;
}
void OAIDestiny_Advanced_AwaUserResponse::setCorrelationId(const QString &correlation_id) {
    m_correlation_id = correlation_id;
    m_correlation_id_isSet = true;
}

bool OAIDestiny_Advanced_AwaUserResponse::is_correlation_id_Set() const{
    return m_correlation_id_isSet;
}

bool OAIDestiny_Advanced_AwaUserResponse::is_correlation_id_Valid() const{
    return m_correlation_id_isValid;
}

QList<QByteArray> OAIDestiny_Advanced_AwaUserResponse::getNonce() const {
    return m_nonce;
}
void OAIDestiny_Advanced_AwaUserResponse::setNonce(const QList<QByteArray> &nonce) {
    m_nonce = nonce;
    m_nonce_isSet = true;
}

bool OAIDestiny_Advanced_AwaUserResponse::is_nonce_Set() const{
    return m_nonce_isSet;
}

bool OAIDestiny_Advanced_AwaUserResponse::is_nonce_Valid() const{
    return m_nonce_isValid;
}

qint32 OAIDestiny_Advanced_AwaUserResponse::getSelection() const {
    return m_selection;
}
void OAIDestiny_Advanced_AwaUserResponse::setSelection(const qint32 &selection) {
    m_selection = selection;
    m_selection_isSet = true;
}

bool OAIDestiny_Advanced_AwaUserResponse::is_selection_Set() const{
    return m_selection_isSet;
}

bool OAIDestiny_Advanced_AwaUserResponse::is_selection_Valid() const{
    return m_selection_isValid;
}

bool OAIDestiny_Advanced_AwaUserResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_correlation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nonce.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_selection_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Advanced_AwaUserResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
