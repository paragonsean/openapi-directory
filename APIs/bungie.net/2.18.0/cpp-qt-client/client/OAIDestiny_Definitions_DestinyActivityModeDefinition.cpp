/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyActivityModeDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyActivityModeDefinition::OAIDestiny_Definitions_DestinyActivityModeDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyActivityModeDefinition::OAIDestiny_Definitions_DestinyActivityModeDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyActivityModeDefinition::~OAIDestiny_Definitions_DestinyActivityModeDefinition() {}

void OAIDestiny_Definitions_DestinyActivityModeDefinition::initializeModel() {

    m_activity_mode_category_isSet = false;
    m_activity_mode_category_isValid = false;

    m_activity_mode_mappings_isSet = false;
    m_activity_mode_mappings_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_is_aggregate_mode_isSet = false;
    m_is_aggregate_mode_isValid = false;

    m_is_team_based_isSet = false;
    m_is_team_based_isValid = false;

    m_mode_type_isSet = false;
    m_mode_type_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_parent_hashes_isSet = false;
    m_parent_hashes_isValid = false;

    m_pgcr_image_isSet = false;
    m_pgcr_image_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;
}

void OAIDestiny_Definitions_DestinyActivityModeDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyActivityModeDefinition::fromJsonObject(QJsonObject json) {

    m_activity_mode_category_isValid = ::OpenAPI::fromJsonValue(m_activity_mode_category, json[QString("activityModeCategory")]);
    m_activity_mode_category_isSet = !json[QString("activityModeCategory")].isNull() && m_activity_mode_category_isValid;

    m_activity_mode_mappings_isValid = ::OpenAPI::fromJsonValue(m_activity_mode_mappings, json[QString("activityModeMappings")]);
    m_activity_mode_mappings_isSet = !json[QString("activityModeMappings")].isNull() && m_activity_mode_mappings_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_is_aggregate_mode_isValid = ::OpenAPI::fromJsonValue(m_is_aggregate_mode, json[QString("isAggregateMode")]);
    m_is_aggregate_mode_isSet = !json[QString("isAggregateMode")].isNull() && m_is_aggregate_mode_isValid;

    m_is_team_based_isValid = ::OpenAPI::fromJsonValue(m_is_team_based, json[QString("isTeamBased")]);
    m_is_team_based_isSet = !json[QString("isTeamBased")].isNull() && m_is_team_based_isValid;

    m_mode_type_isValid = ::OpenAPI::fromJsonValue(m_mode_type, json[QString("modeType")]);
    m_mode_type_isSet = !json[QString("modeType")].isNull() && m_mode_type_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_parent_hashes_isValid = ::OpenAPI::fromJsonValue(m_parent_hashes, json[QString("parentHashes")]);
    m_parent_hashes_isSet = !json[QString("parentHashes")].isNull() && m_parent_hashes_isValid;

    m_pgcr_image_isValid = ::OpenAPI::fromJsonValue(m_pgcr_image, json[QString("pgcrImage")]);
    m_pgcr_image_isSet = !json[QString("pgcrImage")].isNull() && m_pgcr_image_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;
}

QString OAIDestiny_Definitions_DestinyActivityModeDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyActivityModeDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_mode_category_isSet) {
        obj.insert(QString("activityModeCategory"), ::OpenAPI::toJsonValue(m_activity_mode_category));
    }
    if (m_activity_mode_mappings.size() > 0) {
        obj.insert(QString("activityModeMappings"), ::OpenAPI::toJsonValue(m_activity_mode_mappings));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_is_aggregate_mode_isSet) {
        obj.insert(QString("isAggregateMode"), ::OpenAPI::toJsonValue(m_is_aggregate_mode));
    }
    if (m_is_team_based_isSet) {
        obj.insert(QString("isTeamBased"), ::OpenAPI::toJsonValue(m_is_team_based));
    }
    if (m_mode_type_isSet) {
        obj.insert(QString("modeType"), ::OpenAPI::toJsonValue(m_mode_type));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_parent_hashes.size() > 0) {
        obj.insert(QString("parentHashes"), ::OpenAPI::toJsonValue(m_parent_hashes));
    }
    if (m_pgcr_image_isSet) {
        obj.insert(QString("pgcrImage"), ::OpenAPI::toJsonValue(m_pgcr_image));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_DestinyActivityModeDefinition::getActivityModeCategory() const {
    return m_activity_mode_category;
}
void OAIDestiny_Definitions_DestinyActivityModeDefinition::setActivityModeCategory(const qint32 &activity_mode_category) {
    m_activity_mode_category = activity_mode_category;
    m_activity_mode_category_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_activity_mode_category_Set() const{
    return m_activity_mode_category_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_activity_mode_category_Valid() const{
    return m_activity_mode_category_isValid;
}

QMap<QString, qint32> OAIDestiny_Definitions_DestinyActivityModeDefinition::getActivityModeMappings() const {
    return m_activity_mode_mappings;
}
void OAIDestiny_Definitions_DestinyActivityModeDefinition::setActivityModeMappings(const QMap<QString, qint32> &activity_mode_mappings) {
    m_activity_mode_mappings = activity_mode_mappings;
    m_activity_mode_mappings_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_activity_mode_mappings_Set() const{
    return m_activity_mode_mappings_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_activity_mode_mappings_Valid() const{
    return m_activity_mode_mappings_isValid;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::isDisplay() const {
    return m_display;
}
void OAIDestiny_Definitions_DestinyActivityModeDefinition::setDisplay(const bool &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_display_Set() const{
    return m_display_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_display_Valid() const{
    return m_display_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_DestinyActivityModeDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_DestinyActivityModeDefinition::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

QString OAIDestiny_Definitions_DestinyActivityModeDefinition::getFriendlyName() const {
    return m_friendly_name;
}
void OAIDestiny_Definitions_DestinyActivityModeDefinition::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

qint32 OAIDestiny_Definitions_DestinyActivityModeDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_DestinyActivityModeDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyActivityModeDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_DestinyActivityModeDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_index_Valid() const{
    return m_index_isValid;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::isIsAggregateMode() const {
    return m_is_aggregate_mode;
}
void OAIDestiny_Definitions_DestinyActivityModeDefinition::setIsAggregateMode(const bool &is_aggregate_mode) {
    m_is_aggregate_mode = is_aggregate_mode;
    m_is_aggregate_mode_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_is_aggregate_mode_Set() const{
    return m_is_aggregate_mode_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_is_aggregate_mode_Valid() const{
    return m_is_aggregate_mode_isValid;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::isIsTeamBased() const {
    return m_is_team_based;
}
void OAIDestiny_Definitions_DestinyActivityModeDefinition::setIsTeamBased(const bool &is_team_based) {
    m_is_team_based = is_team_based;
    m_is_team_based_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_is_team_based_Set() const{
    return m_is_team_based_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_is_team_based_Valid() const{
    return m_is_team_based_isValid;
}

qint32 OAIDestiny_Definitions_DestinyActivityModeDefinition::getModeType() const {
    return m_mode_type;
}
void OAIDestiny_Definitions_DestinyActivityModeDefinition::setModeType(const qint32 &mode_type) {
    m_mode_type = mode_type;
    m_mode_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_mode_type_Set() const{
    return m_mode_type_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_mode_type_Valid() const{
    return m_mode_type_isValid;
}

qint32 OAIDestiny_Definitions_DestinyActivityModeDefinition::getOrder() const {
    return m_order;
}
void OAIDestiny_Definitions_DestinyActivityModeDefinition::setOrder(const qint32 &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_order_Set() const{
    return m_order_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_order_Valid() const{
    return m_order_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyActivityModeDefinition::getParentHashes() const {
    return m_parent_hashes;
}
void OAIDestiny_Definitions_DestinyActivityModeDefinition::setParentHashes(const QList<qint32> &parent_hashes) {
    m_parent_hashes = parent_hashes;
    m_parent_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_parent_hashes_Set() const{
    return m_parent_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_parent_hashes_Valid() const{
    return m_parent_hashes_isValid;
}

QString OAIDestiny_Definitions_DestinyActivityModeDefinition::getPgcrImage() const {
    return m_pgcr_image;
}
void OAIDestiny_Definitions_DestinyActivityModeDefinition::setPgcrImage(const QString &pgcr_image) {
    m_pgcr_image = pgcr_image;
    m_pgcr_image_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_pgcr_image_Set() const{
    return m_pgcr_image_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_pgcr_image_Valid() const{
    return m_pgcr_image_isValid;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_DestinyActivityModeDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_mode_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_mode_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_aggregate_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_team_based_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pgcr_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyActivityModeDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
