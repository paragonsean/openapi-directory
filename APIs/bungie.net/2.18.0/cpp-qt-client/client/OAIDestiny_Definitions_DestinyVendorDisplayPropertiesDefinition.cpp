/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::~OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition() {}

void OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_has_icon_isSet = false;
    m_has_icon_isValid = false;

    m_high_res_icon_isSet = false;
    m_high_res_icon_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_icon_sequences_isSet = false;
    m_icon_sequences_isValid = false;

    m_large_icon_isSet = false;
    m_large_icon_isValid = false;

    m_large_transparent_icon_isSet = false;
    m_large_transparent_icon_isValid = false;

    m_map_icon_isSet = false;
    m_map_icon_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_original_icon_isSet = false;
    m_original_icon_isValid = false;

    m_requirements_display_isSet = false;
    m_requirements_display_isValid = false;

    m_small_transparent_icon_isSet = false;
    m_small_transparent_icon_isValid = false;

    m_subtitle_isSet = false;
    m_subtitle_isValid = false;
}

void OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_has_icon_isValid = ::OpenAPI::fromJsonValue(m_has_icon, json[QString("hasIcon")]);
    m_has_icon_isSet = !json[QString("hasIcon")].isNull() && m_has_icon_isValid;

    m_high_res_icon_isValid = ::OpenAPI::fromJsonValue(m_high_res_icon, json[QString("highResIcon")]);
    m_high_res_icon_isSet = !json[QString("highResIcon")].isNull() && m_high_res_icon_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_icon_sequences_isValid = ::OpenAPI::fromJsonValue(m_icon_sequences, json[QString("iconSequences")]);
    m_icon_sequences_isSet = !json[QString("iconSequences")].isNull() && m_icon_sequences_isValid;

    m_large_icon_isValid = ::OpenAPI::fromJsonValue(m_large_icon, json[QString("largeIcon")]);
    m_large_icon_isSet = !json[QString("largeIcon")].isNull() && m_large_icon_isValid;

    m_large_transparent_icon_isValid = ::OpenAPI::fromJsonValue(m_large_transparent_icon, json[QString("largeTransparentIcon")]);
    m_large_transparent_icon_isSet = !json[QString("largeTransparentIcon")].isNull() && m_large_transparent_icon_isValid;

    m_map_icon_isValid = ::OpenAPI::fromJsonValue(m_map_icon, json[QString("mapIcon")]);
    m_map_icon_isSet = !json[QString("mapIcon")].isNull() && m_map_icon_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_original_icon_isValid = ::OpenAPI::fromJsonValue(m_original_icon, json[QString("originalIcon")]);
    m_original_icon_isSet = !json[QString("originalIcon")].isNull() && m_original_icon_isValid;

    m_requirements_display_isValid = ::OpenAPI::fromJsonValue(m_requirements_display, json[QString("requirementsDisplay")]);
    m_requirements_display_isSet = !json[QString("requirementsDisplay")].isNull() && m_requirements_display_isValid;

    m_small_transparent_icon_isValid = ::OpenAPI::fromJsonValue(m_small_transparent_icon, json[QString("smallTransparentIcon")]);
    m_small_transparent_icon_isSet = !json[QString("smallTransparentIcon")].isNull() && m_small_transparent_icon_isValid;

    m_subtitle_isValid = ::OpenAPI::fromJsonValue(m_subtitle, json[QString("subtitle")]);
    m_subtitle_isSet = !json[QString("subtitle")].isNull() && m_subtitle_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_has_icon_isSet) {
        obj.insert(QString("hasIcon"), ::OpenAPI::toJsonValue(m_has_icon));
    }
    if (m_high_res_icon_isSet) {
        obj.insert(QString("highResIcon"), ::OpenAPI::toJsonValue(m_high_res_icon));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_icon_sequences.size() > 0) {
        obj.insert(QString("iconSequences"), ::OpenAPI::toJsonValue(m_icon_sequences));
    }
    if (m_large_icon_isSet) {
        obj.insert(QString("largeIcon"), ::OpenAPI::toJsonValue(m_large_icon));
    }
    if (m_large_transparent_icon_isSet) {
        obj.insert(QString("largeTransparentIcon"), ::OpenAPI::toJsonValue(m_large_transparent_icon));
    }
    if (m_map_icon_isSet) {
        obj.insert(QString("mapIcon"), ::OpenAPI::toJsonValue(m_map_icon));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_original_icon_isSet) {
        obj.insert(QString("originalIcon"), ::OpenAPI::toJsonValue(m_original_icon));
    }
    if (m_requirements_display.size() > 0) {
        obj.insert(QString("requirementsDisplay"), ::OpenAPI::toJsonValue(m_requirements_display));
    }
    if (m_small_transparent_icon_isSet) {
        obj.insert(QString("smallTransparentIcon"), ::OpenAPI::toJsonValue(m_small_transparent_icon));
    }
    if (m_subtitle_isSet) {
        obj.insert(QString("subtitle"), ::OpenAPI::toJsonValue(m_subtitle));
    }
    return obj;
}

QString OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::getDescription() const {
    return m_description;
}
void OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::isHasIcon() const {
    return m_has_icon;
}
void OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::setHasIcon(const bool &has_icon) {
    m_has_icon = has_icon;
    m_has_icon_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_has_icon_Set() const{
    return m_has_icon_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_has_icon_Valid() const{
    return m_has_icon_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::getHighResIcon() const {
    return m_high_res_icon;
}
void OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::setHighResIcon(const QString &high_res_icon) {
    m_high_res_icon = high_res_icon;
    m_high_res_icon_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_high_res_icon_Set() const{
    return m_high_res_icon_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_high_res_icon_Valid() const{
    return m_high_res_icon_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::getIcon() const {
    return m_icon;
}
void OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_icon_Valid() const{
    return m_icon_isValid;
}

QList<OAIDestiny_Definitions_Common_DestinyIconSequenceDefinition> OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::getIconSequences() const {
    return m_icon_sequences;
}
void OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::setIconSequences(const QList<OAIDestiny_Definitions_Common_DestinyIconSequenceDefinition> &icon_sequences) {
    m_icon_sequences = icon_sequences;
    m_icon_sequences_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_icon_sequences_Set() const{
    return m_icon_sequences_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_icon_sequences_Valid() const{
    return m_icon_sequences_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::getLargeIcon() const {
    return m_large_icon;
}
void OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::setLargeIcon(const QString &large_icon) {
    m_large_icon = large_icon;
    m_large_icon_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_large_icon_Set() const{
    return m_large_icon_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_large_icon_Valid() const{
    return m_large_icon_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::getLargeTransparentIcon() const {
    return m_large_transparent_icon;
}
void OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::setLargeTransparentIcon(const QString &large_transparent_icon) {
    m_large_transparent_icon = large_transparent_icon;
    m_large_transparent_icon_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_large_transparent_icon_Set() const{
    return m_large_transparent_icon_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_large_transparent_icon_Valid() const{
    return m_large_transparent_icon_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::getMapIcon() const {
    return m_map_icon;
}
void OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::setMapIcon(const QString &map_icon) {
    m_map_icon = map_icon;
    m_map_icon_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_map_icon_Set() const{
    return m_map_icon_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_map_icon_Valid() const{
    return m_map_icon_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::getName() const {
    return m_name;
}
void OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::getOriginalIcon() const {
    return m_original_icon;
}
void OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::setOriginalIcon(const QString &original_icon) {
    m_original_icon = original_icon;
    m_original_icon_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_original_icon_Set() const{
    return m_original_icon_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_original_icon_Valid() const{
    return m_original_icon_isValid;
}

QList<OAIDestiny_Definitions_DestinyVendorRequirementDisplayEntryDefinition> OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::getRequirementsDisplay() const {
    return m_requirements_display;
}
void OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::setRequirementsDisplay(const QList<OAIDestiny_Definitions_DestinyVendorRequirementDisplayEntryDefinition> &requirements_display) {
    m_requirements_display = requirements_display;
    m_requirements_display_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_requirements_display_Set() const{
    return m_requirements_display_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_requirements_display_Valid() const{
    return m_requirements_display_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::getSmallTransparentIcon() const {
    return m_small_transparent_icon;
}
void OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::setSmallTransparentIcon(const QString &small_transparent_icon) {
    m_small_transparent_icon = small_transparent_icon;
    m_small_transparent_icon_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_small_transparent_icon_Set() const{
    return m_small_transparent_icon_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_small_transparent_icon_Valid() const{
    return m_small_transparent_icon_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::getSubtitle() const {
    return m_subtitle;
}
void OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::setSubtitle(const QString &subtitle) {
    m_subtitle = subtitle;
    m_subtitle_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_subtitle_Set() const{
    return m_subtitle_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::is_subtitle_Valid() const{
    return m_subtitle_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_res_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_sequences.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_transparent_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requirements_display.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_transparent_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
