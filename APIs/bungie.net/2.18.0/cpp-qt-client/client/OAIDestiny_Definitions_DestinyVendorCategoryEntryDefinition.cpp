/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::~OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition() {}

void OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::initializeModel() {

    m_buy_string_override_isSet = false;
    m_buy_string_override_isValid = false;

    m_category_hash_isSet = false;
    m_category_hash_isValid = false;

    m_category_index_isSet = false;
    m_category_index_isValid = false;

    m_disabled_description_isSet = false;
    m_disabled_description_isValid = false;

    m_display_title_isSet = false;
    m_display_title_isValid = false;

    m_hide_from_regular_purchase_isSet = false;
    m_hide_from_regular_purchase_isValid = false;

    m_hide_if_no_currency_isSet = false;
    m_hide_if_no_currency_isValid = false;

    m_is_display_only_isSet = false;
    m_is_display_only_isValid = false;

    m_is_preview_isSet = false;
    m_is_preview_isValid = false;

    m_overlay_isSet = false;
    m_overlay_isValid = false;

    m_quantity_available_isSet = false;
    m_quantity_available_isValid = false;

    m_reset_interval_minutes_override_isSet = false;
    m_reset_interval_minutes_override_isValid = false;

    m_reset_offset_minutes_override_isSet = false;
    m_reset_offset_minutes_override_isValid = false;

    m_show_unavailable_items_isSet = false;
    m_show_unavailable_items_isValid = false;

    m_sort_value_isSet = false;
    m_sort_value_isValid = false;

    m_vendor_item_indexes_isSet = false;
    m_vendor_item_indexes_isValid = false;
}

void OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::fromJsonObject(QJsonObject json) {

    m_buy_string_override_isValid = ::OpenAPI::fromJsonValue(m_buy_string_override, json[QString("buyStringOverride")]);
    m_buy_string_override_isSet = !json[QString("buyStringOverride")].isNull() && m_buy_string_override_isValid;

    m_category_hash_isValid = ::OpenAPI::fromJsonValue(m_category_hash, json[QString("categoryHash")]);
    m_category_hash_isSet = !json[QString("categoryHash")].isNull() && m_category_hash_isValid;

    m_category_index_isValid = ::OpenAPI::fromJsonValue(m_category_index, json[QString("categoryIndex")]);
    m_category_index_isSet = !json[QString("categoryIndex")].isNull() && m_category_index_isValid;

    m_disabled_description_isValid = ::OpenAPI::fromJsonValue(m_disabled_description, json[QString("disabledDescription")]);
    m_disabled_description_isSet = !json[QString("disabledDescription")].isNull() && m_disabled_description_isValid;

    m_display_title_isValid = ::OpenAPI::fromJsonValue(m_display_title, json[QString("displayTitle")]);
    m_display_title_isSet = !json[QString("displayTitle")].isNull() && m_display_title_isValid;

    m_hide_from_regular_purchase_isValid = ::OpenAPI::fromJsonValue(m_hide_from_regular_purchase, json[QString("hideFromRegularPurchase")]);
    m_hide_from_regular_purchase_isSet = !json[QString("hideFromRegularPurchase")].isNull() && m_hide_from_regular_purchase_isValid;

    m_hide_if_no_currency_isValid = ::OpenAPI::fromJsonValue(m_hide_if_no_currency, json[QString("hideIfNoCurrency")]);
    m_hide_if_no_currency_isSet = !json[QString("hideIfNoCurrency")].isNull() && m_hide_if_no_currency_isValid;

    m_is_display_only_isValid = ::OpenAPI::fromJsonValue(m_is_display_only, json[QString("isDisplayOnly")]);
    m_is_display_only_isSet = !json[QString("isDisplayOnly")].isNull() && m_is_display_only_isValid;

    m_is_preview_isValid = ::OpenAPI::fromJsonValue(m_is_preview, json[QString("isPreview")]);
    m_is_preview_isSet = !json[QString("isPreview")].isNull() && m_is_preview_isValid;

    m_overlay_isValid = ::OpenAPI::fromJsonValue(m_overlay, json[QString("overlay")]);
    m_overlay_isSet = !json[QString("overlay")].isNull() && m_overlay_isValid;

    m_quantity_available_isValid = ::OpenAPI::fromJsonValue(m_quantity_available, json[QString("quantityAvailable")]);
    m_quantity_available_isSet = !json[QString("quantityAvailable")].isNull() && m_quantity_available_isValid;

    m_reset_interval_minutes_override_isValid = ::OpenAPI::fromJsonValue(m_reset_interval_minutes_override, json[QString("resetIntervalMinutesOverride")]);
    m_reset_interval_minutes_override_isSet = !json[QString("resetIntervalMinutesOverride")].isNull() && m_reset_interval_minutes_override_isValid;

    m_reset_offset_minutes_override_isValid = ::OpenAPI::fromJsonValue(m_reset_offset_minutes_override, json[QString("resetOffsetMinutesOverride")]);
    m_reset_offset_minutes_override_isSet = !json[QString("resetOffsetMinutesOverride")].isNull() && m_reset_offset_minutes_override_isValid;

    m_show_unavailable_items_isValid = ::OpenAPI::fromJsonValue(m_show_unavailable_items, json[QString("showUnavailableItems")]);
    m_show_unavailable_items_isSet = !json[QString("showUnavailableItems")].isNull() && m_show_unavailable_items_isValid;

    m_sort_value_isValid = ::OpenAPI::fromJsonValue(m_sort_value, json[QString("sortValue")]);
    m_sort_value_isSet = !json[QString("sortValue")].isNull() && m_sort_value_isValid;

    m_vendor_item_indexes_isValid = ::OpenAPI::fromJsonValue(m_vendor_item_indexes, json[QString("vendorItemIndexes")]);
    m_vendor_item_indexes_isSet = !json[QString("vendorItemIndexes")].isNull() && m_vendor_item_indexes_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_buy_string_override_isSet) {
        obj.insert(QString("buyStringOverride"), ::OpenAPI::toJsonValue(m_buy_string_override));
    }
    if (m_category_hash_isSet) {
        obj.insert(QString("categoryHash"), ::OpenAPI::toJsonValue(m_category_hash));
    }
    if (m_category_index_isSet) {
        obj.insert(QString("categoryIndex"), ::OpenAPI::toJsonValue(m_category_index));
    }
    if (m_disabled_description_isSet) {
        obj.insert(QString("disabledDescription"), ::OpenAPI::toJsonValue(m_disabled_description));
    }
    if (m_display_title_isSet) {
        obj.insert(QString("displayTitle"), ::OpenAPI::toJsonValue(m_display_title));
    }
    if (m_hide_from_regular_purchase_isSet) {
        obj.insert(QString("hideFromRegularPurchase"), ::OpenAPI::toJsonValue(m_hide_from_regular_purchase));
    }
    if (m_hide_if_no_currency_isSet) {
        obj.insert(QString("hideIfNoCurrency"), ::OpenAPI::toJsonValue(m_hide_if_no_currency));
    }
    if (m_is_display_only_isSet) {
        obj.insert(QString("isDisplayOnly"), ::OpenAPI::toJsonValue(m_is_display_only));
    }
    if (m_is_preview_isSet) {
        obj.insert(QString("isPreview"), ::OpenAPI::toJsonValue(m_is_preview));
    }
    if (m_overlay.isSet()) {
        obj.insert(QString("overlay"), ::OpenAPI::toJsonValue(m_overlay));
    }
    if (m_quantity_available_isSet) {
        obj.insert(QString("quantityAvailable"), ::OpenAPI::toJsonValue(m_quantity_available));
    }
    if (m_reset_interval_minutes_override_isSet) {
        obj.insert(QString("resetIntervalMinutesOverride"), ::OpenAPI::toJsonValue(m_reset_interval_minutes_override));
    }
    if (m_reset_offset_minutes_override_isSet) {
        obj.insert(QString("resetOffsetMinutesOverride"), ::OpenAPI::toJsonValue(m_reset_offset_minutes_override));
    }
    if (m_show_unavailable_items_isSet) {
        obj.insert(QString("showUnavailableItems"), ::OpenAPI::toJsonValue(m_show_unavailable_items));
    }
    if (m_sort_value_isSet) {
        obj.insert(QString("sortValue"), ::OpenAPI::toJsonValue(m_sort_value));
    }
    if (m_vendor_item_indexes.size() > 0) {
        obj.insert(QString("vendorItemIndexes"), ::OpenAPI::toJsonValue(m_vendor_item_indexes));
    }
    return obj;
}

QString OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::getBuyStringOverride() const {
    return m_buy_string_override;
}
void OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::setBuyStringOverride(const QString &buy_string_override) {
    m_buy_string_override = buy_string_override;
    m_buy_string_override_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_buy_string_override_Set() const{
    return m_buy_string_override_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_buy_string_override_Valid() const{
    return m_buy_string_override_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::getCategoryHash() const {
    return m_category_hash;
}
void OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::setCategoryHash(const qint32 &category_hash) {
    m_category_hash = category_hash;
    m_category_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_category_hash_Set() const{
    return m_category_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_category_hash_Valid() const{
    return m_category_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::getCategoryIndex() const {
    return m_category_index;
}
void OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::setCategoryIndex(const qint32 &category_index) {
    m_category_index = category_index;
    m_category_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_category_index_Set() const{
    return m_category_index_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_category_index_Valid() const{
    return m_category_index_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::getDisabledDescription() const {
    return m_disabled_description;
}
void OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::setDisabledDescription(const QString &disabled_description) {
    m_disabled_description = disabled_description;
    m_disabled_description_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_disabled_description_Set() const{
    return m_disabled_description_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_disabled_description_Valid() const{
    return m_disabled_description_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::getDisplayTitle() const {
    return m_display_title;
}
void OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::setDisplayTitle(const QString &display_title) {
    m_display_title = display_title;
    m_display_title_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_display_title_Set() const{
    return m_display_title_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_display_title_Valid() const{
    return m_display_title_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::isHideFromRegularPurchase() const {
    return m_hide_from_regular_purchase;
}
void OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::setHideFromRegularPurchase(const bool &hide_from_regular_purchase) {
    m_hide_from_regular_purchase = hide_from_regular_purchase;
    m_hide_from_regular_purchase_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_hide_from_regular_purchase_Set() const{
    return m_hide_from_regular_purchase_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_hide_from_regular_purchase_Valid() const{
    return m_hide_from_regular_purchase_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::isHideIfNoCurrency() const {
    return m_hide_if_no_currency;
}
void OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::setHideIfNoCurrency(const bool &hide_if_no_currency) {
    m_hide_if_no_currency = hide_if_no_currency;
    m_hide_if_no_currency_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_hide_if_no_currency_Set() const{
    return m_hide_if_no_currency_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_hide_if_no_currency_Valid() const{
    return m_hide_if_no_currency_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::isIsDisplayOnly() const {
    return m_is_display_only;
}
void OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::setIsDisplayOnly(const bool &is_display_only) {
    m_is_display_only = is_display_only;
    m_is_display_only_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_is_display_only_Set() const{
    return m_is_display_only_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_is_display_only_Valid() const{
    return m_is_display_only_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::isIsPreview() const {
    return m_is_preview;
}
void OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::setIsPreview(const bool &is_preview) {
    m_is_preview = is_preview;
    m_is_preview_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_is_preview_Set() const{
    return m_is_preview_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_is_preview_Valid() const{
    return m_is_preview_isValid;
}

OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::getOverlay() const {
    return m_overlay;
}
void OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::setOverlay(const OAIDestiny_Definitions_DestinyVendorCategoryOverlayDefinition &overlay) {
    m_overlay = overlay;
    m_overlay_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_overlay_Set() const{
    return m_overlay_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_overlay_Valid() const{
    return m_overlay_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::getQuantityAvailable() const {
    return m_quantity_available;
}
void OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::setQuantityAvailable(const qint32 &quantity_available) {
    m_quantity_available = quantity_available;
    m_quantity_available_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_quantity_available_Set() const{
    return m_quantity_available_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_quantity_available_Valid() const{
    return m_quantity_available_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::getResetIntervalMinutesOverride() const {
    return m_reset_interval_minutes_override;
}
void OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::setResetIntervalMinutesOverride(const qint32 &reset_interval_minutes_override) {
    m_reset_interval_minutes_override = reset_interval_minutes_override;
    m_reset_interval_minutes_override_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_reset_interval_minutes_override_Set() const{
    return m_reset_interval_minutes_override_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_reset_interval_minutes_override_Valid() const{
    return m_reset_interval_minutes_override_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::getResetOffsetMinutesOverride() const {
    return m_reset_offset_minutes_override;
}
void OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::setResetOffsetMinutesOverride(const qint32 &reset_offset_minutes_override) {
    m_reset_offset_minutes_override = reset_offset_minutes_override;
    m_reset_offset_minutes_override_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_reset_offset_minutes_override_Set() const{
    return m_reset_offset_minutes_override_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_reset_offset_minutes_override_Valid() const{
    return m_reset_offset_minutes_override_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::isShowUnavailableItems() const {
    return m_show_unavailable_items;
}
void OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::setShowUnavailableItems(const bool &show_unavailable_items) {
    m_show_unavailable_items = show_unavailable_items;
    m_show_unavailable_items_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_show_unavailable_items_Set() const{
    return m_show_unavailable_items_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_show_unavailable_items_Valid() const{
    return m_show_unavailable_items_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::getSortValue() const {
    return m_sort_value;
}
void OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::setSortValue(const qint32 &sort_value) {
    m_sort_value = sort_value;
    m_sort_value_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_sort_value_Set() const{
    return m_sort_value_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_sort_value_Valid() const{
    return m_sort_value_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::getVendorItemIndexes() const {
    return m_vendor_item_indexes;
}
void OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::setVendorItemIndexes(const QList<qint32> &vendor_item_indexes) {
    m_vendor_item_indexes = vendor_item_indexes;
    m_vendor_item_indexes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_vendor_item_indexes_Set() const{
    return m_vendor_item_indexes_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::is_vendor_item_indexes_Valid() const{
    return m_vendor_item_indexes_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buy_string_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_from_regular_purchase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_if_no_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_display_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_preview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overlay.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_interval_minutes_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_offset_minutes_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_unavailable_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_item_indexes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
