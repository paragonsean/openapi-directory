/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI_GetAvailableLocales_200_response.h"
#include "OAI_GetCommonSettings_200_response.h"
#include "OAI_GetGlobalAlerts_200_response.h"
#include "OAI_GetUserSystemOverrides_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void _GetAvailableLocales();


    virtual void _GetCommonSettings();

    /**
    * @param[in]  includestreaming bool [optional]
    */
    virtual void _GetGlobalAlerts(const ::OpenAPI::OptionalParam<bool> &includestreaming = ::OpenAPI::OptionalParam<bool>());


    virtual void _GetUserSystemOverrides();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void _GetAvailableLocalesCallback(OAIHttpRequestWorker *worker);
    void _GetCommonSettingsCallback(OAIHttpRequestWorker *worker);
    void _GetGlobalAlertsCallback(OAIHttpRequestWorker *worker);
    void _GetUserSystemOverridesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void _GetAvailableLocalesSignal(OAI_GetAvailableLocales_200_response summary);
    void _GetCommonSettingsSignal(OAI_GetCommonSettings_200_response summary);
    void _GetGlobalAlertsSignal(OAI_GetGlobalAlerts_200_response summary);
    void _GetUserSystemOverridesSignal(OAI_GetUserSystemOverrides_200_response summary);


    void _GetAvailableLocalesSignalFull(OAIHttpRequestWorker *worker, OAI_GetAvailableLocales_200_response summary);
    void _GetCommonSettingsSignalFull(OAIHttpRequestWorker *worker, OAI_GetCommonSettings_200_response summary);
    void _GetGlobalAlertsSignalFull(OAIHttpRequestWorker *worker, OAI_GetGlobalAlerts_200_response summary);
    void _GetUserSystemOverridesSignalFull(OAIHttpRequestWorker *worker, OAI_GetUserSystemOverrides_200_response summary);

    Q_DECL_DEPRECATED_X("Use _GetAvailableLocalesSignalError() instead")
    void _GetAvailableLocalesSignalE(OAI_GetAvailableLocales_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void _GetAvailableLocalesSignalError(OAI_GetAvailableLocales_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use _GetCommonSettingsSignalError() instead")
    void _GetCommonSettingsSignalE(OAI_GetCommonSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void _GetCommonSettingsSignalError(OAI_GetCommonSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use _GetGlobalAlertsSignalError() instead")
    void _GetGlobalAlertsSignalE(OAI_GetGlobalAlerts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void _GetGlobalAlertsSignalError(OAI_GetGlobalAlerts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use _GetUserSystemOverridesSignalError() instead")
    void _GetUserSystemOverridesSignalE(OAI_GetUserSystemOverrides_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void _GetUserSystemOverridesSignalError(OAI_GetUserSystemOverrides_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use _GetAvailableLocalesSignalErrorFull() instead")
    void _GetAvailableLocalesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void _GetAvailableLocalesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use _GetCommonSettingsSignalErrorFull() instead")
    void _GetCommonSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void _GetCommonSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use _GetGlobalAlertsSignalErrorFull() instead")
    void _GetGlobalAlertsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void _GetGlobalAlertsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use _GetUserSystemOverridesSignalErrorFull() instead")
    void _GetUserSystemOverridesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void _GetUserSystemOverridesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
