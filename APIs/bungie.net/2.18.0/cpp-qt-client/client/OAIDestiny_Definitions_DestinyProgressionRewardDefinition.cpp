/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyProgressionRewardDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyProgressionRewardDefinition::OAIDestiny_Definitions_DestinyProgressionRewardDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyProgressionRewardDefinition::OAIDestiny_Definitions_DestinyProgressionRewardDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyProgressionRewardDefinition::~OAIDestiny_Definitions_DestinyProgressionRewardDefinition() {}

void OAIDestiny_Definitions_DestinyProgressionRewardDefinition::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_apply_throttles_isSet = false;
    m_apply_throttles_isValid = false;

    m_progression_mapping_hash_isSet = false;
    m_progression_mapping_hash_isValid = false;
}

void OAIDestiny_Definitions_DestinyProgressionRewardDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyProgressionRewardDefinition::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_apply_throttles_isValid = ::OpenAPI::fromJsonValue(m_apply_throttles, json[QString("applyThrottles")]);
    m_apply_throttles_isSet = !json[QString("applyThrottles")].isNull() && m_apply_throttles_isValid;

    m_progression_mapping_hash_isValid = ::OpenAPI::fromJsonValue(m_progression_mapping_hash, json[QString("progressionMappingHash")]);
    m_progression_mapping_hash_isSet = !json[QString("progressionMappingHash")].isNull() && m_progression_mapping_hash_isValid;
}

QString OAIDestiny_Definitions_DestinyProgressionRewardDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyProgressionRewardDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_apply_throttles_isSet) {
        obj.insert(QString("applyThrottles"), ::OpenAPI::toJsonValue(m_apply_throttles));
    }
    if (m_progression_mapping_hash_isSet) {
        obj.insert(QString("progressionMappingHash"), ::OpenAPI::toJsonValue(m_progression_mapping_hash));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_DestinyProgressionRewardDefinition::getAmount() const {
    return m_amount;
}
void OAIDestiny_Definitions_DestinyProgressionRewardDefinition::setAmount(const qint32 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardDefinition::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardDefinition::is_amount_Valid() const{
    return m_amount_isValid;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardDefinition::isApplyThrottles() const {
    return m_apply_throttles;
}
void OAIDestiny_Definitions_DestinyProgressionRewardDefinition::setApplyThrottles(const bool &apply_throttles) {
    m_apply_throttles = apply_throttles;
    m_apply_throttles_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardDefinition::is_apply_throttles_Set() const{
    return m_apply_throttles_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardDefinition::is_apply_throttles_Valid() const{
    return m_apply_throttles_isValid;
}

qint32 OAIDestiny_Definitions_DestinyProgressionRewardDefinition::getProgressionMappingHash() const {
    return m_progression_mapping_hash;
}
void OAIDestiny_Definitions_DestinyProgressionRewardDefinition::setProgressionMappingHash(const qint32 &progression_mapping_hash) {
    m_progression_mapping_hash = progression_mapping_hash;
    m_progression_mapping_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardDefinition::is_progression_mapping_hash_Set() const{
    return m_progression_mapping_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardDefinition::is_progression_mapping_hash_Valid() const{
    return m_progression_mapping_hash_isValid;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apply_throttles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progression_mapping_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyProgressionRewardDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
