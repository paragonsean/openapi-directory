/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_HardLinkedUserMembership.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_HardLinkedUserMembership::OAIUser_HardLinkedUserMembership(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_HardLinkedUserMembership::OAIUser_HardLinkedUserMembership() {
    this->initializeModel();
}

OAIUser_HardLinkedUserMembership::~OAIUser_HardLinkedUserMembership() {}

void OAIUser_HardLinkedUserMembership::initializeModel() {

    m_cross_save_overridden_membership_id_isSet = false;
    m_cross_save_overridden_membership_id_isValid = false;

    m_cross_save_overridden_type_isSet = false;
    m_cross_save_overridden_type_isValid = false;

    m_membership_id_isSet = false;
    m_membership_id_isValid = false;

    m_membership_type_isSet = false;
    m_membership_type_isValid = false;
}

void OAIUser_HardLinkedUserMembership::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_HardLinkedUserMembership::fromJsonObject(QJsonObject json) {

    m_cross_save_overridden_membership_id_isValid = ::OpenAPI::fromJsonValue(m_cross_save_overridden_membership_id, json[QString("CrossSaveOverriddenMembershipId")]);
    m_cross_save_overridden_membership_id_isSet = !json[QString("CrossSaveOverriddenMembershipId")].isNull() && m_cross_save_overridden_membership_id_isValid;

    m_cross_save_overridden_type_isValid = ::OpenAPI::fromJsonValue(m_cross_save_overridden_type, json[QString("CrossSaveOverriddenType")]);
    m_cross_save_overridden_type_isSet = !json[QString("CrossSaveOverriddenType")].isNull() && m_cross_save_overridden_type_isValid;

    m_membership_id_isValid = ::OpenAPI::fromJsonValue(m_membership_id, json[QString("membershipId")]);
    m_membership_id_isSet = !json[QString("membershipId")].isNull() && m_membership_id_isValid;

    m_membership_type_isValid = ::OpenAPI::fromJsonValue(m_membership_type, json[QString("membershipType")]);
    m_membership_type_isSet = !json[QString("membershipType")].isNull() && m_membership_type_isValid;
}

QString OAIUser_HardLinkedUserMembership::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_HardLinkedUserMembership::asJsonObject() const {
    QJsonObject obj;
    if (m_cross_save_overridden_membership_id_isSet) {
        obj.insert(QString("CrossSaveOverriddenMembershipId"), ::OpenAPI::toJsonValue(m_cross_save_overridden_membership_id));
    }
    if (m_cross_save_overridden_type_isSet) {
        obj.insert(QString("CrossSaveOverriddenType"), ::OpenAPI::toJsonValue(m_cross_save_overridden_type));
    }
    if (m_membership_id_isSet) {
        obj.insert(QString("membershipId"), ::OpenAPI::toJsonValue(m_membership_id));
    }
    if (m_membership_type_isSet) {
        obj.insert(QString("membershipType"), ::OpenAPI::toJsonValue(m_membership_type));
    }
    return obj;
}

qint64 OAIUser_HardLinkedUserMembership::getCrossSaveOverriddenMembershipId() const {
    return m_cross_save_overridden_membership_id;
}
void OAIUser_HardLinkedUserMembership::setCrossSaveOverriddenMembershipId(const qint64 &cross_save_overridden_membership_id) {
    m_cross_save_overridden_membership_id = cross_save_overridden_membership_id;
    m_cross_save_overridden_membership_id_isSet = true;
}

bool OAIUser_HardLinkedUserMembership::is_cross_save_overridden_membership_id_Set() const{
    return m_cross_save_overridden_membership_id_isSet;
}

bool OAIUser_HardLinkedUserMembership::is_cross_save_overridden_membership_id_Valid() const{
    return m_cross_save_overridden_membership_id_isValid;
}

qint32 OAIUser_HardLinkedUserMembership::getCrossSaveOverriddenType() const {
    return m_cross_save_overridden_type;
}
void OAIUser_HardLinkedUserMembership::setCrossSaveOverriddenType(const qint32 &cross_save_overridden_type) {
    m_cross_save_overridden_type = cross_save_overridden_type;
    m_cross_save_overridden_type_isSet = true;
}

bool OAIUser_HardLinkedUserMembership::is_cross_save_overridden_type_Set() const{
    return m_cross_save_overridden_type_isSet;
}

bool OAIUser_HardLinkedUserMembership::is_cross_save_overridden_type_Valid() const{
    return m_cross_save_overridden_type_isValid;
}

qint64 OAIUser_HardLinkedUserMembership::getMembershipId() const {
    return m_membership_id;
}
void OAIUser_HardLinkedUserMembership::setMembershipId(const qint64 &membership_id) {
    m_membership_id = membership_id;
    m_membership_id_isSet = true;
}

bool OAIUser_HardLinkedUserMembership::is_membership_id_Set() const{
    return m_membership_id_isSet;
}

bool OAIUser_HardLinkedUserMembership::is_membership_id_Valid() const{
    return m_membership_id_isValid;
}

qint32 OAIUser_HardLinkedUserMembership::getMembershipType() const {
    return m_membership_type;
}
void OAIUser_HardLinkedUserMembership::setMembershipType(const qint32 &membership_type) {
    m_membership_type = membership_type;
    m_membership_type_isSet = true;
}

bool OAIUser_HardLinkedUserMembership::is_membership_type_Set() const{
    return m_membership_type_isSet;
}

bool OAIUser_HardLinkedUserMembership::is_membership_type_Valid() const{
    return m_membership_type_isValid;
}

bool OAIUser_HardLinkedUserMembership::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cross_save_overridden_membership_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cross_save_overridden_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_HardLinkedUserMembership::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
