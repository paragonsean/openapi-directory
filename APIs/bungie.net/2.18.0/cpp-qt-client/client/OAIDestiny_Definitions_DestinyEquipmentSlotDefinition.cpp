/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyEquipmentSlotDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::OAIDestiny_Definitions_DestinyEquipmentSlotDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::OAIDestiny_Definitions_DestinyEquipmentSlotDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::~OAIDestiny_Definitions_DestinyEquipmentSlotDefinition() {}

void OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::initializeModel() {

    m_apply_custom_art_dyes_isSet = false;
    m_apply_custom_art_dyes_isValid = false;

    m_art_dye_channels_isSet = false;
    m_art_dye_channels_isValid = false;

    m_bucket_type_hash_isSet = false;
    m_bucket_type_hash_isValid = false;

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_equipment_category_hash_isSet = false;
    m_equipment_category_hash_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;
}

void OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::fromJsonObject(QJsonObject json) {

    m_apply_custom_art_dyes_isValid = ::OpenAPI::fromJsonValue(m_apply_custom_art_dyes, json[QString("applyCustomArtDyes")]);
    m_apply_custom_art_dyes_isSet = !json[QString("applyCustomArtDyes")].isNull() && m_apply_custom_art_dyes_isValid;

    m_art_dye_channels_isValid = ::OpenAPI::fromJsonValue(m_art_dye_channels, json[QString("artDyeChannels")]);
    m_art_dye_channels_isSet = !json[QString("artDyeChannels")].isNull() && m_art_dye_channels_isValid;

    m_bucket_type_hash_isValid = ::OpenAPI::fromJsonValue(m_bucket_type_hash, json[QString("bucketTypeHash")]);
    m_bucket_type_hash_isSet = !json[QString("bucketTypeHash")].isNull() && m_bucket_type_hash_isValid;

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_equipment_category_hash_isValid = ::OpenAPI::fromJsonValue(m_equipment_category_hash, json[QString("equipmentCategoryHash")]);
    m_equipment_category_hash_isSet = !json[QString("equipmentCategoryHash")].isNull() && m_equipment_category_hash_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;
}

QString OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_apply_custom_art_dyes_isSet) {
        obj.insert(QString("applyCustomArtDyes"), ::OpenAPI::toJsonValue(m_apply_custom_art_dyes));
    }
    if (m_art_dye_channels.size() > 0) {
        obj.insert(QString("artDyeChannels"), ::OpenAPI::toJsonValue(m_art_dye_channels));
    }
    if (m_bucket_type_hash_isSet) {
        obj.insert(QString("bucketTypeHash"), ::OpenAPI::toJsonValue(m_bucket_type_hash));
    }
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_equipment_category_hash_isSet) {
        obj.insert(QString("equipmentCategoryHash"), ::OpenAPI::toJsonValue(m_equipment_category_hash));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    return obj;
}

bool OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::isApplyCustomArtDyes() const {
    return m_apply_custom_art_dyes;
}
void OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::setApplyCustomArtDyes(const bool &apply_custom_art_dyes) {
    m_apply_custom_art_dyes = apply_custom_art_dyes;
    m_apply_custom_art_dyes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::is_apply_custom_art_dyes_Set() const{
    return m_apply_custom_art_dyes_isSet;
}

bool OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::is_apply_custom_art_dyes_Valid() const{
    return m_apply_custom_art_dyes_isValid;
}

QList<OAIDestiny_Definitions_DestinyArtDyeReference> OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::getArtDyeChannels() const {
    return m_art_dye_channels;
}
void OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::setArtDyeChannels(const QList<OAIDestiny_Definitions_DestinyArtDyeReference> &art_dye_channels) {
    m_art_dye_channels = art_dye_channels;
    m_art_dye_channels_isSet = true;
}

bool OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::is_art_dye_channels_Set() const{
    return m_art_dye_channels_isSet;
}

bool OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::is_art_dye_channels_Valid() const{
    return m_art_dye_channels_isValid;
}

qint32 OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::getBucketTypeHash() const {
    return m_bucket_type_hash;
}
void OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::setBucketTypeHash(const qint32 &bucket_type_hash) {
    m_bucket_type_hash = bucket_type_hash;
    m_bucket_type_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::is_bucket_type_hash_Set() const{
    return m_bucket_type_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::is_bucket_type_hash_Valid() const{
    return m_bucket_type_hash_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

qint32 OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::getEquipmentCategoryHash() const {
    return m_equipment_category_hash;
}
void OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::setEquipmentCategoryHash(const qint32 &equipment_category_hash) {
    m_equipment_category_hash = equipment_category_hash;
    m_equipment_category_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::is_equipment_category_hash_Set() const{
    return m_equipment_category_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::is_equipment_category_hash_Valid() const{
    return m_equipment_category_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::is_index_Valid() const{
    return m_index_isValid;
}

bool OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

bool OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apply_custom_art_dyes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_art_dye_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_type_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_equipment_category_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyEquipmentSlotDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
