/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyLocationReleaseDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyLocationReleaseDefinition::OAIDestiny_Definitions_DestinyLocationReleaseDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyLocationReleaseDefinition::OAIDestiny_Definitions_DestinyLocationReleaseDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyLocationReleaseDefinition::~OAIDestiny_Definitions_DestinyLocationReleaseDefinition() {}

void OAIDestiny_Definitions_DestinyLocationReleaseDefinition::initializeModel() {

    m_activity_bubble_name_isSet = false;
    m_activity_bubble_name_isValid = false;

    m_activity_graph_hash_isSet = false;
    m_activity_graph_hash_isValid = false;

    m_activity_graph_node_hash_isSet = false;
    m_activity_graph_node_hash_isValid = false;

    m_activity_hash_isSet = false;
    m_activity_hash_isValid = false;

    m_activity_path_bundle_isSet = false;
    m_activity_path_bundle_isValid = false;

    m_activity_path_destination_isSet = false;
    m_activity_path_destination_isValid = false;

    m_destination_hash_isSet = false;
    m_destination_hash_isValid = false;

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_large_transparent_icon_isSet = false;
    m_large_transparent_icon_isValid = false;

    m_map_icon_isSet = false;
    m_map_icon_isValid = false;

    m_nav_point_type_isSet = false;
    m_nav_point_type_isValid = false;

    m_small_transparent_icon_isSet = false;
    m_small_transparent_icon_isValid = false;

    m_spawn_point_isSet = false;
    m_spawn_point_isValid = false;

    m_world_position_isSet = false;
    m_world_position_isValid = false;
}

void OAIDestiny_Definitions_DestinyLocationReleaseDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyLocationReleaseDefinition::fromJsonObject(QJsonObject json) {

    m_activity_bubble_name_isValid = ::OpenAPI::fromJsonValue(m_activity_bubble_name, json[QString("activityBubbleName")]);
    m_activity_bubble_name_isSet = !json[QString("activityBubbleName")].isNull() && m_activity_bubble_name_isValid;

    m_activity_graph_hash_isValid = ::OpenAPI::fromJsonValue(m_activity_graph_hash, json[QString("activityGraphHash")]);
    m_activity_graph_hash_isSet = !json[QString("activityGraphHash")].isNull() && m_activity_graph_hash_isValid;

    m_activity_graph_node_hash_isValid = ::OpenAPI::fromJsonValue(m_activity_graph_node_hash, json[QString("activityGraphNodeHash")]);
    m_activity_graph_node_hash_isSet = !json[QString("activityGraphNodeHash")].isNull() && m_activity_graph_node_hash_isValid;

    m_activity_hash_isValid = ::OpenAPI::fromJsonValue(m_activity_hash, json[QString("activityHash")]);
    m_activity_hash_isSet = !json[QString("activityHash")].isNull() && m_activity_hash_isValid;

    m_activity_path_bundle_isValid = ::OpenAPI::fromJsonValue(m_activity_path_bundle, json[QString("activityPathBundle")]);
    m_activity_path_bundle_isSet = !json[QString("activityPathBundle")].isNull() && m_activity_path_bundle_isValid;

    m_activity_path_destination_isValid = ::OpenAPI::fromJsonValue(m_activity_path_destination, json[QString("activityPathDestination")]);
    m_activity_path_destination_isSet = !json[QString("activityPathDestination")].isNull() && m_activity_path_destination_isValid;

    m_destination_hash_isValid = ::OpenAPI::fromJsonValue(m_destination_hash, json[QString("destinationHash")]);
    m_destination_hash_isSet = !json[QString("destinationHash")].isNull() && m_destination_hash_isValid;

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_large_transparent_icon_isValid = ::OpenAPI::fromJsonValue(m_large_transparent_icon, json[QString("largeTransparentIcon")]);
    m_large_transparent_icon_isSet = !json[QString("largeTransparentIcon")].isNull() && m_large_transparent_icon_isValid;

    m_map_icon_isValid = ::OpenAPI::fromJsonValue(m_map_icon, json[QString("mapIcon")]);
    m_map_icon_isSet = !json[QString("mapIcon")].isNull() && m_map_icon_isValid;

    m_nav_point_type_isValid = ::OpenAPI::fromJsonValue(m_nav_point_type, json[QString("navPointType")]);
    m_nav_point_type_isSet = !json[QString("navPointType")].isNull() && m_nav_point_type_isValid;

    m_small_transparent_icon_isValid = ::OpenAPI::fromJsonValue(m_small_transparent_icon, json[QString("smallTransparentIcon")]);
    m_small_transparent_icon_isSet = !json[QString("smallTransparentIcon")].isNull() && m_small_transparent_icon_isValid;

    m_spawn_point_isValid = ::OpenAPI::fromJsonValue(m_spawn_point, json[QString("spawnPoint")]);
    m_spawn_point_isSet = !json[QString("spawnPoint")].isNull() && m_spawn_point_isValid;

    m_world_position_isValid = ::OpenAPI::fromJsonValue(m_world_position, json[QString("worldPosition")]);
    m_world_position_isSet = !json[QString("worldPosition")].isNull() && m_world_position_isValid;
}

QString OAIDestiny_Definitions_DestinyLocationReleaseDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyLocationReleaseDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_bubble_name_isSet) {
        obj.insert(QString("activityBubbleName"), ::OpenAPI::toJsonValue(m_activity_bubble_name));
    }
    if (m_activity_graph_hash_isSet) {
        obj.insert(QString("activityGraphHash"), ::OpenAPI::toJsonValue(m_activity_graph_hash));
    }
    if (m_activity_graph_node_hash_isSet) {
        obj.insert(QString("activityGraphNodeHash"), ::OpenAPI::toJsonValue(m_activity_graph_node_hash));
    }
    if (m_activity_hash_isSet) {
        obj.insert(QString("activityHash"), ::OpenAPI::toJsonValue(m_activity_hash));
    }
    if (m_activity_path_bundle_isSet) {
        obj.insert(QString("activityPathBundle"), ::OpenAPI::toJsonValue(m_activity_path_bundle));
    }
    if (m_activity_path_destination_isSet) {
        obj.insert(QString("activityPathDestination"), ::OpenAPI::toJsonValue(m_activity_path_destination));
    }
    if (m_destination_hash_isSet) {
        obj.insert(QString("destinationHash"), ::OpenAPI::toJsonValue(m_destination_hash));
    }
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_large_transparent_icon_isSet) {
        obj.insert(QString("largeTransparentIcon"), ::OpenAPI::toJsonValue(m_large_transparent_icon));
    }
    if (m_map_icon_isSet) {
        obj.insert(QString("mapIcon"), ::OpenAPI::toJsonValue(m_map_icon));
    }
    if (m_nav_point_type_isSet) {
        obj.insert(QString("navPointType"), ::OpenAPI::toJsonValue(m_nav_point_type));
    }
    if (m_small_transparent_icon_isSet) {
        obj.insert(QString("smallTransparentIcon"), ::OpenAPI::toJsonValue(m_small_transparent_icon));
    }
    if (m_spawn_point_isSet) {
        obj.insert(QString("spawnPoint"), ::OpenAPI::toJsonValue(m_spawn_point));
    }
    if (m_world_position.size() > 0) {
        obj.insert(QString("worldPosition"), ::OpenAPI::toJsonValue(m_world_position));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_DestinyLocationReleaseDefinition::getActivityBubbleName() const {
    return m_activity_bubble_name;
}
void OAIDestiny_Definitions_DestinyLocationReleaseDefinition::setActivityBubbleName(const qint32 &activity_bubble_name) {
    m_activity_bubble_name = activity_bubble_name;
    m_activity_bubble_name_isSet = true;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_activity_bubble_name_Set() const{
    return m_activity_bubble_name_isSet;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_activity_bubble_name_Valid() const{
    return m_activity_bubble_name_isValid;
}

qint32 OAIDestiny_Definitions_DestinyLocationReleaseDefinition::getActivityGraphHash() const {
    return m_activity_graph_hash;
}
void OAIDestiny_Definitions_DestinyLocationReleaseDefinition::setActivityGraphHash(const qint32 &activity_graph_hash) {
    m_activity_graph_hash = activity_graph_hash;
    m_activity_graph_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_activity_graph_hash_Set() const{
    return m_activity_graph_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_activity_graph_hash_Valid() const{
    return m_activity_graph_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyLocationReleaseDefinition::getActivityGraphNodeHash() const {
    return m_activity_graph_node_hash;
}
void OAIDestiny_Definitions_DestinyLocationReleaseDefinition::setActivityGraphNodeHash(const qint32 &activity_graph_node_hash) {
    m_activity_graph_node_hash = activity_graph_node_hash;
    m_activity_graph_node_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_activity_graph_node_hash_Set() const{
    return m_activity_graph_node_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_activity_graph_node_hash_Valid() const{
    return m_activity_graph_node_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyLocationReleaseDefinition::getActivityHash() const {
    return m_activity_hash;
}
void OAIDestiny_Definitions_DestinyLocationReleaseDefinition::setActivityHash(const qint32 &activity_hash) {
    m_activity_hash = activity_hash;
    m_activity_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_activity_hash_Set() const{
    return m_activity_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_activity_hash_Valid() const{
    return m_activity_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyLocationReleaseDefinition::getActivityPathBundle() const {
    return m_activity_path_bundle;
}
void OAIDestiny_Definitions_DestinyLocationReleaseDefinition::setActivityPathBundle(const qint32 &activity_path_bundle) {
    m_activity_path_bundle = activity_path_bundle;
    m_activity_path_bundle_isSet = true;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_activity_path_bundle_Set() const{
    return m_activity_path_bundle_isSet;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_activity_path_bundle_Valid() const{
    return m_activity_path_bundle_isValid;
}

qint32 OAIDestiny_Definitions_DestinyLocationReleaseDefinition::getActivityPathDestination() const {
    return m_activity_path_destination;
}
void OAIDestiny_Definitions_DestinyLocationReleaseDefinition::setActivityPathDestination(const qint32 &activity_path_destination) {
    m_activity_path_destination = activity_path_destination;
    m_activity_path_destination_isSet = true;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_activity_path_destination_Set() const{
    return m_activity_path_destination_isSet;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_activity_path_destination_Valid() const{
    return m_activity_path_destination_isValid;
}

qint32 OAIDestiny_Definitions_DestinyLocationReleaseDefinition::getDestinationHash() const {
    return m_destination_hash;
}
void OAIDestiny_Definitions_DestinyLocationReleaseDefinition::setDestinationHash(const qint32 &destination_hash) {
    m_destination_hash = destination_hash;
    m_destination_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_destination_hash_Set() const{
    return m_destination_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_destination_hash_Valid() const{
    return m_destination_hash_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_DestinyLocationReleaseDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_DestinyLocationReleaseDefinition::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

QString OAIDestiny_Definitions_DestinyLocationReleaseDefinition::getLargeTransparentIcon() const {
    return m_large_transparent_icon;
}
void OAIDestiny_Definitions_DestinyLocationReleaseDefinition::setLargeTransparentIcon(const QString &large_transparent_icon) {
    m_large_transparent_icon = large_transparent_icon;
    m_large_transparent_icon_isSet = true;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_large_transparent_icon_Set() const{
    return m_large_transparent_icon_isSet;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_large_transparent_icon_Valid() const{
    return m_large_transparent_icon_isValid;
}

QString OAIDestiny_Definitions_DestinyLocationReleaseDefinition::getMapIcon() const {
    return m_map_icon;
}
void OAIDestiny_Definitions_DestinyLocationReleaseDefinition::setMapIcon(const QString &map_icon) {
    m_map_icon = map_icon;
    m_map_icon_isSet = true;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_map_icon_Set() const{
    return m_map_icon_isSet;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_map_icon_Valid() const{
    return m_map_icon_isValid;
}

qint32 OAIDestiny_Definitions_DestinyLocationReleaseDefinition::getNavPointType() const {
    return m_nav_point_type;
}
void OAIDestiny_Definitions_DestinyLocationReleaseDefinition::setNavPointType(const qint32 &nav_point_type) {
    m_nav_point_type = nav_point_type;
    m_nav_point_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_nav_point_type_Set() const{
    return m_nav_point_type_isSet;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_nav_point_type_Valid() const{
    return m_nav_point_type_isValid;
}

QString OAIDestiny_Definitions_DestinyLocationReleaseDefinition::getSmallTransparentIcon() const {
    return m_small_transparent_icon;
}
void OAIDestiny_Definitions_DestinyLocationReleaseDefinition::setSmallTransparentIcon(const QString &small_transparent_icon) {
    m_small_transparent_icon = small_transparent_icon;
    m_small_transparent_icon_isSet = true;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_small_transparent_icon_Set() const{
    return m_small_transparent_icon_isSet;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_small_transparent_icon_Valid() const{
    return m_small_transparent_icon_isValid;
}

qint32 OAIDestiny_Definitions_DestinyLocationReleaseDefinition::getSpawnPoint() const {
    return m_spawn_point;
}
void OAIDestiny_Definitions_DestinyLocationReleaseDefinition::setSpawnPoint(const qint32 &spawn_point) {
    m_spawn_point = spawn_point;
    m_spawn_point_isSet = true;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_spawn_point_Set() const{
    return m_spawn_point_isSet;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_spawn_point_Valid() const{
    return m_spawn_point_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyLocationReleaseDefinition::getWorldPosition() const {
    return m_world_position;
}
void OAIDestiny_Definitions_DestinyLocationReleaseDefinition::setWorldPosition(const QList<qint32> &world_position) {
    m_world_position = world_position;
    m_world_position_isSet = true;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_world_position_Set() const{
    return m_world_position_isSet;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::is_world_position_Valid() const{
    return m_world_position_isValid;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_bubble_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_graph_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_graph_node_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_path_bundle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_path_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_transparent_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nav_point_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_transparent_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spawn_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_world_position.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyLocationReleaseDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
