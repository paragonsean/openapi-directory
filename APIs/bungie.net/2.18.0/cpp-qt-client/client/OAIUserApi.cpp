/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIUserApi::OAIUserApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIUserApi::~OAIUserApi() {
}

void OAIUserApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://www.bungie.net/Platform"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("user_GetAvailableThemes", defaultConf);
    _serverIndices.insert("user_GetAvailableThemes", 0);
    _serverConfigs.insert("user_GetBungieNetUserById", defaultConf);
    _serverIndices.insert("user_GetBungieNetUserById", 0);
    _serverConfigs.insert("user_GetCredentialTypesForTargetAccount", defaultConf);
    _serverIndices.insert("user_GetCredentialTypesForTargetAccount", 0);
    _serverConfigs.insert("user_GetMembershipDataById", defaultConf);
    _serverIndices.insert("user_GetMembershipDataById", 0);
    _serverConfigs.insert("user_GetMembershipDataForCurrentUser", defaultConf);
    _serverIndices.insert("user_GetMembershipDataForCurrentUser", 0);
    _serverConfigs.insert("user_GetMembershipFromHardLinkedCredential", defaultConf);
    _serverIndices.insert("user_GetMembershipFromHardLinkedCredential", 0);
    _serverConfigs.insert("user_GetSanitizedPlatformDisplayNames", defaultConf);
    _serverIndices.insert("user_GetSanitizedPlatformDisplayNames", 0);
    _serverConfigs.insert("user_SearchByGlobalNamePost", defaultConf);
    _serverIndices.insert("user_SearchByGlobalNamePost", 0);
    _serverConfigs.insert("user_SearchByGlobalNamePrefix", defaultConf);
    _serverIndices.insert("user_SearchByGlobalNamePrefix", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIUserApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIUserApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIUserApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIUserApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIUserApi::setUsername(const QString &username) {
    _username = username;
}

void OAIUserApi::setPassword(const QString &password) {
    _password = password;
}


void OAIUserApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIUserApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIUserApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIUserApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIUserApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIUserApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIUserApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIUserApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIUserApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIUserApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIUserApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIUserApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIUserApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIUserApi::user_GetAvailableThemes() {
    QString fullPath = QString(_serverConfigs["user_GetAvailableThemes"][_serverIndices.value("user_GetAvailableThemes")].URL()+"/User/GetAvailableThemes/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUserApi::user_GetAvailableThemesCallback);
    connect(this, &OAIUserApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUserApi::user_GetAvailableThemesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUser_GetAvailableThemes_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT user_GetAvailableThemesSignal(output);
        Q_EMIT user_GetAvailableThemesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT user_GetAvailableThemesSignalE(output, error_type, error_str);
        Q_EMIT user_GetAvailableThemesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT user_GetAvailableThemesSignalError(output, error_type, error_str);
        Q_EMIT user_GetAvailableThemesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUserApi::user_GetBungieNetUserById(const qint64 &id) {
    QString fullPath = QString(_serverConfigs["user_GetBungieNetUserById"][_serverIndices.value("user_GetBungieNetUserById")].URL()+"/User/GetBungieNetUserById/{id}/");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUserApi::user_GetBungieNetUserByIdCallback);
    connect(this, &OAIUserApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUserApi::user_GetBungieNetUserByIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUser_GetBungieNetUserById_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT user_GetBungieNetUserByIdSignal(output);
        Q_EMIT user_GetBungieNetUserByIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT user_GetBungieNetUserByIdSignalE(output, error_type, error_str);
        Q_EMIT user_GetBungieNetUserByIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT user_GetBungieNetUserByIdSignalError(output, error_type, error_str);
        Q_EMIT user_GetBungieNetUserByIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUserApi::user_GetCredentialTypesForTargetAccount(const qint64 &membership_id) {
    QString fullPath = QString(_serverConfigs["user_GetCredentialTypesForTargetAccount"][_serverIndices.value("user_GetCredentialTypesForTargetAccount")].URL()+"/User/GetCredentialTypesForTargetAccount/{membershipId}/");
    
    
    {
        QString membership_idPathParam("{");
        membership_idPathParam.append("membershipId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipId"+pathSuffix : pathPrefix;
        fullPath.replace(membership_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUserApi::user_GetCredentialTypesForTargetAccountCallback);
    connect(this, &OAIUserApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUserApi::user_GetCredentialTypesForTargetAccountCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUser_GetCredentialTypesForTargetAccount_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT user_GetCredentialTypesForTargetAccountSignal(output);
        Q_EMIT user_GetCredentialTypesForTargetAccountSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT user_GetCredentialTypesForTargetAccountSignalE(output, error_type, error_str);
        Q_EMIT user_GetCredentialTypesForTargetAccountSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT user_GetCredentialTypesForTargetAccountSignalError(output, error_type, error_str);
        Q_EMIT user_GetCredentialTypesForTargetAccountSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUserApi::user_GetMembershipDataById(const qint64 &membership_id, const qint32 &membership_type) {
    QString fullPath = QString(_serverConfigs["user_GetMembershipDataById"][_serverIndices.value("user_GetMembershipDataById")].URL()+"/User/GetMembershipsById/{membershipId}/{membershipType}/");
    
    
    {
        QString membership_idPathParam("{");
        membership_idPathParam.append("membershipId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipId"+pathSuffix : pathPrefix;
        fullPath.replace(membership_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_id)));
    }
    
    {
        QString membership_typePathParam("{");
        membership_typePathParam.append("membershipType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipType"+pathSuffix : pathPrefix;
        fullPath.replace(membership_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUserApi::user_GetMembershipDataByIdCallback);
    connect(this, &OAIUserApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUserApi::user_GetMembershipDataByIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUser_GetMembershipDataById_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT user_GetMembershipDataByIdSignal(output);
        Q_EMIT user_GetMembershipDataByIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT user_GetMembershipDataByIdSignalE(output, error_type, error_str);
        Q_EMIT user_GetMembershipDataByIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT user_GetMembershipDataByIdSignalError(output, error_type, error_str);
        Q_EMIT user_GetMembershipDataByIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUserApi::user_GetMembershipDataForCurrentUser() {
    QString fullPath = QString(_serverConfigs["user_GetMembershipDataForCurrentUser"][_serverIndices.value("user_GetMembershipDataForCurrentUser")].URL()+"/User/GetMembershipsForCurrentUser/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUserApi::user_GetMembershipDataForCurrentUserCallback);
    connect(this, &OAIUserApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("ReadBasicUserProfile");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUserApi::user_GetMembershipDataForCurrentUserCallback);
    connect(this, &OAIUserApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIUserApi::user_GetMembershipDataForCurrentUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUser_GetMembershipDataById_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT user_GetMembershipDataForCurrentUserSignal(output);
        Q_EMIT user_GetMembershipDataForCurrentUserSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("ReadBasicUserProfile");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT user_GetMembershipDataForCurrentUserSignalE(output, error_type, error_str);
        Q_EMIT user_GetMembershipDataForCurrentUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT user_GetMembershipDataForCurrentUserSignalError(output, error_type, error_str);
        Q_EMIT user_GetMembershipDataForCurrentUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUserApi::user_GetMembershipFromHardLinkedCredential(const QString &credential, const qint32 &cr_type) {
    QString fullPath = QString(_serverConfigs["user_GetMembershipFromHardLinkedCredential"][_serverIndices.value("user_GetMembershipFromHardLinkedCredential")].URL()+"/User/GetMembershipFromHardLinkedCredential/{crType}/{credential}/");
    
    
    {
        QString credentialPathParam("{");
        credentialPathParam.append("credential").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "credential", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"credential"+pathSuffix : pathPrefix;
        fullPath.replace(credentialPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(credential)));
    }
    
    {
        QString cr_typePathParam("{");
        cr_typePathParam.append("crType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "crType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"crType"+pathSuffix : pathPrefix;
        fullPath.replace(cr_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(cr_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUserApi::user_GetMembershipFromHardLinkedCredentialCallback);
    connect(this, &OAIUserApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUserApi::user_GetMembershipFromHardLinkedCredentialCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUser_GetMembershipFromHardLinkedCredential_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT user_GetMembershipFromHardLinkedCredentialSignal(output);
        Q_EMIT user_GetMembershipFromHardLinkedCredentialSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT user_GetMembershipFromHardLinkedCredentialSignalE(output, error_type, error_str);
        Q_EMIT user_GetMembershipFromHardLinkedCredentialSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT user_GetMembershipFromHardLinkedCredentialSignalError(output, error_type, error_str);
        Q_EMIT user_GetMembershipFromHardLinkedCredentialSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUserApi::user_GetSanitizedPlatformDisplayNames(const qint64 &membership_id) {
    QString fullPath = QString(_serverConfigs["user_GetSanitizedPlatformDisplayNames"][_serverIndices.value("user_GetSanitizedPlatformDisplayNames")].URL()+"/User/GetSanitizedPlatformDisplayNames/{membershipId}/");
    
    
    {
        QString membership_idPathParam("{");
        membership_idPathParam.append("membershipId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipId"+pathSuffix : pathPrefix;
        fullPath.replace(membership_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUserApi::user_GetSanitizedPlatformDisplayNamesCallback);
    connect(this, &OAIUserApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUserApi::user_GetSanitizedPlatformDisplayNamesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_GetAvailableLocales_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT user_GetSanitizedPlatformDisplayNamesSignal(output);
        Q_EMIT user_GetSanitizedPlatformDisplayNamesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT user_GetSanitizedPlatformDisplayNamesSignalE(output, error_type, error_str);
        Q_EMIT user_GetSanitizedPlatformDisplayNamesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT user_GetSanitizedPlatformDisplayNamesSignalError(output, error_type, error_str);
        Q_EMIT user_GetSanitizedPlatformDisplayNamesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUserApi::user_SearchByGlobalNamePost(const qint32 &page) {
    QString fullPath = QString(_serverConfigs["user_SearchByGlobalNamePost"][_serverIndices.value("user_SearchByGlobalNamePost")].URL()+"/User/Search/GlobalName/{page}/");
    
    
    {
        QString pagePathParam("{");
        pagePathParam.append("page").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "page", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"page"+pathSuffix : pathPrefix;
        fullPath.replace(pagePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUserApi::user_SearchByGlobalNamePostCallback);
    connect(this, &OAIUserApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUserApi::user_SearchByGlobalNamePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUser_SearchByGlobalNamePost_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT user_SearchByGlobalNamePostSignal(output);
        Q_EMIT user_SearchByGlobalNamePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT user_SearchByGlobalNamePostSignalE(output, error_type, error_str);
        Q_EMIT user_SearchByGlobalNamePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT user_SearchByGlobalNamePostSignalError(output, error_type, error_str);
        Q_EMIT user_SearchByGlobalNamePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUserApi::user_SearchByGlobalNamePrefix(const QString &display_name_prefix, const qint32 &page) {
    QString fullPath = QString(_serverConfigs["user_SearchByGlobalNamePrefix"][_serverIndices.value("user_SearchByGlobalNamePrefix")].URL()+"/User/Search/Prefix/{displayNamePrefix}/{page}/");
    
    
    {
        QString display_name_prefixPathParam("{");
        display_name_prefixPathParam.append("displayNamePrefix").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "displayNamePrefix", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"displayNamePrefix"+pathSuffix : pathPrefix;
        fullPath.replace(display_name_prefixPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(display_name_prefix)));
    }
    
    {
        QString pagePathParam("{");
        pagePathParam.append("page").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "page", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"page"+pathSuffix : pathPrefix;
        fullPath.replace(pagePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUserApi::user_SearchByGlobalNamePrefixCallback);
    connect(this, &OAIUserApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUserApi::user_SearchByGlobalNamePrefixCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUser_SearchByGlobalNamePost_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT user_SearchByGlobalNamePrefixSignal(output);
        Q_EMIT user_SearchByGlobalNamePrefixSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT user_SearchByGlobalNamePrefixSignalE(output, error_type, error_str);
        Q_EMIT user_SearchByGlobalNamePrefixSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT user_SearchByGlobalNamePrefixSignalError(output, error_type, error_str);
        Q_EMIT user_SearchByGlobalNamePrefixSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUserApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
