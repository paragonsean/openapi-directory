/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity() {
    this->initializeModel();
}

OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::~OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity() {}

void OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::initializeModel() {

    m_activity_hash_isSet = false;
    m_activity_hash_isValid = false;

    m_boolean_activity_options_isSet = false;
    m_boolean_activity_options_isValid = false;

    m_challenge_objective_hashes_isSet = false;
    m_challenge_objective_hashes_isValid = false;

    m_loadout_requirement_index_isSet = false;
    m_loadout_requirement_index_isValid = false;

    m_modifier_hashes_isSet = false;
    m_modifier_hashes_isValid = false;

    m_phase_hashes_isSet = false;
    m_phase_hashes_isValid = false;
}

void OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::fromJsonObject(QJsonObject json) {

    m_activity_hash_isValid = ::OpenAPI::fromJsonValue(m_activity_hash, json[QString("activityHash")]);
    m_activity_hash_isSet = !json[QString("activityHash")].isNull() && m_activity_hash_isValid;

    m_boolean_activity_options_isValid = ::OpenAPI::fromJsonValue(m_boolean_activity_options, json[QString("booleanActivityOptions")]);
    m_boolean_activity_options_isSet = !json[QString("booleanActivityOptions")].isNull() && m_boolean_activity_options_isValid;

    m_challenge_objective_hashes_isValid = ::OpenAPI::fromJsonValue(m_challenge_objective_hashes, json[QString("challengeObjectiveHashes")]);
    m_challenge_objective_hashes_isSet = !json[QString("challengeObjectiveHashes")].isNull() && m_challenge_objective_hashes_isValid;

    m_loadout_requirement_index_isValid = ::OpenAPI::fromJsonValue(m_loadout_requirement_index, json[QString("loadoutRequirementIndex")]);
    m_loadout_requirement_index_isSet = !json[QString("loadoutRequirementIndex")].isNull() && m_loadout_requirement_index_isValid;

    m_modifier_hashes_isValid = ::OpenAPI::fromJsonValue(m_modifier_hashes, json[QString("modifierHashes")]);
    m_modifier_hashes_isSet = !json[QString("modifierHashes")].isNull() && m_modifier_hashes_isValid;

    m_phase_hashes_isValid = ::OpenAPI::fromJsonValue(m_phase_hashes, json[QString("phaseHashes")]);
    m_phase_hashes_isSet = !json[QString("phaseHashes")].isNull() && m_phase_hashes_isValid;
}

QString OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_hash_isSet) {
        obj.insert(QString("activityHash"), ::OpenAPI::toJsonValue(m_activity_hash));
    }
    if (m_boolean_activity_options.size() > 0) {
        obj.insert(QString("booleanActivityOptions"), ::OpenAPI::toJsonValue(m_boolean_activity_options));
    }
    if (m_challenge_objective_hashes.size() > 0) {
        obj.insert(QString("challengeObjectiveHashes"), ::OpenAPI::toJsonValue(m_challenge_objective_hashes));
    }
    if (m_loadout_requirement_index_isSet) {
        obj.insert(QString("loadoutRequirementIndex"), ::OpenAPI::toJsonValue(m_loadout_requirement_index));
    }
    if (m_modifier_hashes.size() > 0) {
        obj.insert(QString("modifierHashes"), ::OpenAPI::toJsonValue(m_modifier_hashes));
    }
    if (m_phase_hashes.size() > 0) {
        obj.insert(QString("phaseHashes"), ::OpenAPI::toJsonValue(m_phase_hashes));
    }
    return obj;
}

qint32 OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::getActivityHash() const {
    return m_activity_hash;
}
void OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::setActivityHash(const qint32 &activity_hash) {
    m_activity_hash = activity_hash;
    m_activity_hash_isSet = true;
}

bool OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::is_activity_hash_Set() const{
    return m_activity_hash_isSet;
}

bool OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::is_activity_hash_Valid() const{
    return m_activity_hash_isValid;
}

QMap<QString, bool> OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::getBooleanActivityOptions() const {
    return m_boolean_activity_options;
}
void OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::setBooleanActivityOptions(const QMap<QString, bool> &boolean_activity_options) {
    m_boolean_activity_options = boolean_activity_options;
    m_boolean_activity_options_isSet = true;
}

bool OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::is_boolean_activity_options_Set() const{
    return m_boolean_activity_options_isSet;
}

bool OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::is_boolean_activity_options_Valid() const{
    return m_boolean_activity_options_isValid;
}

QList<qint32> OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::getChallengeObjectiveHashes() const {
    return m_challenge_objective_hashes;
}
void OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::setChallengeObjectiveHashes(const QList<qint32> &challenge_objective_hashes) {
    m_challenge_objective_hashes = challenge_objective_hashes;
    m_challenge_objective_hashes_isSet = true;
}

bool OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::is_challenge_objective_hashes_Set() const{
    return m_challenge_objective_hashes_isSet;
}

bool OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::is_challenge_objective_hashes_Valid() const{
    return m_challenge_objective_hashes_isValid;
}

qint32 OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::getLoadoutRequirementIndex() const {
    return m_loadout_requirement_index;
}
void OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::setLoadoutRequirementIndex(const qint32 &loadout_requirement_index) {
    m_loadout_requirement_index = loadout_requirement_index;
    m_loadout_requirement_index_isSet = true;
}

bool OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::is_loadout_requirement_index_Set() const{
    return m_loadout_requirement_index_isSet;
}

bool OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::is_loadout_requirement_index_Valid() const{
    return m_loadout_requirement_index_isValid;
}

QList<qint32> OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::getModifierHashes() const {
    return m_modifier_hashes;
}
void OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::setModifierHashes(const QList<qint32> &modifier_hashes) {
    m_modifier_hashes = modifier_hashes;
    m_modifier_hashes_isSet = true;
}

bool OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::is_modifier_hashes_Set() const{
    return m_modifier_hashes_isSet;
}

bool OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::is_modifier_hashes_Valid() const{
    return m_modifier_hashes_isValid;
}

QList<qint32> OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::getPhaseHashes() const {
    return m_phase_hashes;
}
void OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::setPhaseHashes(const QList<qint32> &phase_hashes) {
    m_phase_hashes = phase_hashes;
    m_phase_hashes_isSet = true;
}

bool OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::is_phase_hashes_Set() const{
    return m_phase_hashes_isSet;
}

bool OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::is_phase_hashes_Valid() const{
    return m_phase_hashes_isValid;
}

bool OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boolean_activity_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_challenge_objective_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_loadout_requirement_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modifier_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Milestones_DestinyPublicMilestoneChallengeActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
