/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_HistoricalStats_DestinyHistoricalWeaponStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_HistoricalStats_DestinyHistoricalWeaponStats::OAIDestiny_HistoricalStats_DestinyHistoricalWeaponStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_HistoricalStats_DestinyHistoricalWeaponStats::OAIDestiny_HistoricalStats_DestinyHistoricalWeaponStats() {
    this->initializeModel();
}

OAIDestiny_HistoricalStats_DestinyHistoricalWeaponStats::~OAIDestiny_HistoricalStats_DestinyHistoricalWeaponStats() {}

void OAIDestiny_HistoricalStats_DestinyHistoricalWeaponStats::initializeModel() {

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIDestiny_HistoricalStats_DestinyHistoricalWeaponStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_HistoricalStats_DestinyHistoricalWeaponStats::fromJsonObject(QJsonObject json) {

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("referenceId")]);
    m_reference_id_isSet = !json[QString("referenceId")].isNull() && m_reference_id_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIDestiny_HistoricalStats_DestinyHistoricalWeaponStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_HistoricalStats_DestinyHistoricalWeaponStats::asJsonObject() const {
    QJsonObject obj;
    if (m_reference_id_isSet) {
        obj.insert(QString("referenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

qint32 OAIDestiny_HistoricalStats_DestinyHistoricalWeaponStats::getReferenceId() const {
    return m_reference_id;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalWeaponStats::setReferenceId(const qint32 &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalWeaponStats::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalWeaponStats::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QMap<QString, OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue> OAIDestiny_HistoricalStats_DestinyHistoricalWeaponStats::getValues() const {
    return m_values;
}
void OAIDestiny_HistoricalStats_DestinyHistoricalWeaponStats::setValues(const QMap<QString, OAIDestiny_HistoricalStats_DestinyHistoricalStatsValue> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalWeaponStats::is_values_Set() const{
    return m_values_isSet;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalWeaponStats::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalWeaponStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_HistoricalStats_DestinyHistoricalWeaponStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
