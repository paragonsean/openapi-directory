/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_Records_DestinyRecordDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_Records_DestinyRecordDefinition::OAIDestiny_Definitions_Records_DestinyRecordDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_Records_DestinyRecordDefinition::OAIDestiny_Definitions_Records_DestinyRecordDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_Records_DestinyRecordDefinition::~OAIDestiny_Definitions_Records_DestinyRecordDefinition() {}

void OAIDestiny_Definitions_Records_DestinyRecordDefinition::initializeModel() {

    m_completion_info_isSet = false;
    m_completion_info_isValid = false;

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_expiration_info_isSet = false;
    m_expiration_info_isValid = false;

    m_for_title_gilding_isSet = false;
    m_for_title_gilding_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_interval_info_isSet = false;
    m_interval_info_isValid = false;

    m_lore_hash_isSet = false;
    m_lore_hash_isValid = false;

    m_objective_hashes_isSet = false;
    m_objective_hashes_isValid = false;

    m_parent_node_hashes_isSet = false;
    m_parent_node_hashes_isValid = false;

    m_presentation_info_isSet = false;
    m_presentation_info_isValid = false;

    m_presentation_node_type_isSet = false;
    m_presentation_node_type_isValid = false;

    m_record_value_style_isSet = false;
    m_record_value_style_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;

    m_requirements_isSet = false;
    m_requirements_isValid = false;

    m_reward_items_isSet = false;
    m_reward_items_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_should_show_large_icons_isSet = false;
    m_should_show_large_icons_isValid = false;

    m_state_info_isSet = false;
    m_state_info_isValid = false;

    m_title_info_isSet = false;
    m_title_info_isValid = false;

    m_trait_hashes_isSet = false;
    m_trait_hashes_isValid = false;

    m_trait_ids_isSet = false;
    m_trait_ids_isValid = false;
}

void OAIDestiny_Definitions_Records_DestinyRecordDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_Records_DestinyRecordDefinition::fromJsonObject(QJsonObject json) {

    m_completion_info_isValid = ::OpenAPI::fromJsonValue(m_completion_info, json[QString("completionInfo")]);
    m_completion_info_isSet = !json[QString("completionInfo")].isNull() && m_completion_info_isValid;

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_expiration_info_isValid = ::OpenAPI::fromJsonValue(m_expiration_info, json[QString("expirationInfo")]);
    m_expiration_info_isSet = !json[QString("expirationInfo")].isNull() && m_expiration_info_isValid;

    m_for_title_gilding_isValid = ::OpenAPI::fromJsonValue(m_for_title_gilding, json[QString("forTitleGilding")]);
    m_for_title_gilding_isSet = !json[QString("forTitleGilding")].isNull() && m_for_title_gilding_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_interval_info_isValid = ::OpenAPI::fromJsonValue(m_interval_info, json[QString("intervalInfo")]);
    m_interval_info_isSet = !json[QString("intervalInfo")].isNull() && m_interval_info_isValid;

    m_lore_hash_isValid = ::OpenAPI::fromJsonValue(m_lore_hash, json[QString("loreHash")]);
    m_lore_hash_isSet = !json[QString("loreHash")].isNull() && m_lore_hash_isValid;

    m_objective_hashes_isValid = ::OpenAPI::fromJsonValue(m_objective_hashes, json[QString("objectiveHashes")]);
    m_objective_hashes_isSet = !json[QString("objectiveHashes")].isNull() && m_objective_hashes_isValid;

    m_parent_node_hashes_isValid = ::OpenAPI::fromJsonValue(m_parent_node_hashes, json[QString("parentNodeHashes")]);
    m_parent_node_hashes_isSet = !json[QString("parentNodeHashes")].isNull() && m_parent_node_hashes_isValid;

    m_presentation_info_isValid = ::OpenAPI::fromJsonValue(m_presentation_info, json[QString("presentationInfo")]);
    m_presentation_info_isSet = !json[QString("presentationInfo")].isNull() && m_presentation_info_isValid;

    m_presentation_node_type_isValid = ::OpenAPI::fromJsonValue(m_presentation_node_type, json[QString("presentationNodeType")]);
    m_presentation_node_type_isSet = !json[QString("presentationNodeType")].isNull() && m_presentation_node_type_isValid;

    m_record_value_style_isValid = ::OpenAPI::fromJsonValue(m_record_value_style, json[QString("recordValueStyle")]);
    m_record_value_style_isSet = !json[QString("recordValueStyle")].isNull() && m_record_value_style_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;

    m_requirements_isValid = ::OpenAPI::fromJsonValue(m_requirements, json[QString("requirements")]);
    m_requirements_isSet = !json[QString("requirements")].isNull() && m_requirements_isValid;

    m_reward_items_isValid = ::OpenAPI::fromJsonValue(m_reward_items, json[QString("rewardItems")]);
    m_reward_items_isSet = !json[QString("rewardItems")].isNull() && m_reward_items_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_should_show_large_icons_isValid = ::OpenAPI::fromJsonValue(m_should_show_large_icons, json[QString("shouldShowLargeIcons")]);
    m_should_show_large_icons_isSet = !json[QString("shouldShowLargeIcons")].isNull() && m_should_show_large_icons_isValid;

    m_state_info_isValid = ::OpenAPI::fromJsonValue(m_state_info, json[QString("stateInfo")]);
    m_state_info_isSet = !json[QString("stateInfo")].isNull() && m_state_info_isValid;

    m_title_info_isValid = ::OpenAPI::fromJsonValue(m_title_info, json[QString("titleInfo")]);
    m_title_info_isSet = !json[QString("titleInfo")].isNull() && m_title_info_isValid;

    m_trait_hashes_isValid = ::OpenAPI::fromJsonValue(m_trait_hashes, json[QString("traitHashes")]);
    m_trait_hashes_isSet = !json[QString("traitHashes")].isNull() && m_trait_hashes_isValid;

    m_trait_ids_isValid = ::OpenAPI::fromJsonValue(m_trait_ids, json[QString("traitIds")]);
    m_trait_ids_isSet = !json[QString("traitIds")].isNull() && m_trait_ids_isValid;
}

QString OAIDestiny_Definitions_Records_DestinyRecordDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_Records_DestinyRecordDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_completion_info.isSet()) {
        obj.insert(QString("completionInfo"), ::OpenAPI::toJsonValue(m_completion_info));
    }
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_expiration_info.isSet()) {
        obj.insert(QString("expirationInfo"), ::OpenAPI::toJsonValue(m_expiration_info));
    }
    if (m_for_title_gilding_isSet) {
        obj.insert(QString("forTitleGilding"), ::OpenAPI::toJsonValue(m_for_title_gilding));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_interval_info.isSet()) {
        obj.insert(QString("intervalInfo"), ::OpenAPI::toJsonValue(m_interval_info));
    }
    if (m_lore_hash_isSet) {
        obj.insert(QString("loreHash"), ::OpenAPI::toJsonValue(m_lore_hash));
    }
    if (m_objective_hashes.size() > 0) {
        obj.insert(QString("objectiveHashes"), ::OpenAPI::toJsonValue(m_objective_hashes));
    }
    if (m_parent_node_hashes.size() > 0) {
        obj.insert(QString("parentNodeHashes"), ::OpenAPI::toJsonValue(m_parent_node_hashes));
    }
    if (m_presentation_info.isSet()) {
        obj.insert(QString("presentationInfo"), ::OpenAPI::toJsonValue(m_presentation_info));
    }
    if (m_presentation_node_type_isSet) {
        obj.insert(QString("presentationNodeType"), ::OpenAPI::toJsonValue(m_presentation_node_type));
    }
    if (m_record_value_style_isSet) {
        obj.insert(QString("recordValueStyle"), ::OpenAPI::toJsonValue(m_record_value_style));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    if (m_requirements.isSet()) {
        obj.insert(QString("requirements"), ::OpenAPI::toJsonValue(m_requirements));
    }
    if (m_reward_items.size() > 0) {
        obj.insert(QString("rewardItems"), ::OpenAPI::toJsonValue(m_reward_items));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_should_show_large_icons_isSet) {
        obj.insert(QString("shouldShowLargeIcons"), ::OpenAPI::toJsonValue(m_should_show_large_icons));
    }
    if (m_state_info.isSet()) {
        obj.insert(QString("stateInfo"), ::OpenAPI::toJsonValue(m_state_info));
    }
    if (m_title_info.isSet()) {
        obj.insert(QString("titleInfo"), ::OpenAPI::toJsonValue(m_title_info));
    }
    if (m_trait_hashes.size() > 0) {
        obj.insert(QString("traitHashes"), ::OpenAPI::toJsonValue(m_trait_hashes));
    }
    if (m_trait_ids.size() > 0) {
        obj.insert(QString("traitIds"), ::OpenAPI::toJsonValue(m_trait_ids));
    }
    return obj;
}

OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock OAIDestiny_Definitions_Records_DestinyRecordDefinition::getCompletionInfo() const {
    return m_completion_info;
}
void OAIDestiny_Definitions_Records_DestinyRecordDefinition::setCompletionInfo(const OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock &completion_info) {
    m_completion_info = completion_info;
    m_completion_info_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_completion_info_Set() const{
    return m_completion_info_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_completion_info_Valid() const{
    return m_completion_info_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_Records_DestinyRecordDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_Records_DestinyRecordDefinition::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

OAIDestiny_Definitions_Records_DestinyRecordExpirationBlock OAIDestiny_Definitions_Records_DestinyRecordDefinition::getExpirationInfo() const {
    return m_expiration_info;
}
void OAIDestiny_Definitions_Records_DestinyRecordDefinition::setExpirationInfo(const OAIDestiny_Definitions_Records_DestinyRecordExpirationBlock &expiration_info) {
    m_expiration_info = expiration_info;
    m_expiration_info_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_expiration_info_Set() const{
    return m_expiration_info_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_expiration_info_Valid() const{
    return m_expiration_info_isValid;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::isForTitleGilding() const {
    return m_for_title_gilding;
}
void OAIDestiny_Definitions_Records_DestinyRecordDefinition::setForTitleGilding(const bool &for_title_gilding) {
    m_for_title_gilding = for_title_gilding;
    m_for_title_gilding_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_for_title_gilding_Set() const{
    return m_for_title_gilding_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_for_title_gilding_Valid() const{
    return m_for_title_gilding_isValid;
}

qint32 OAIDestiny_Definitions_Records_DestinyRecordDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_Records_DestinyRecordDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIDestiny_Definitions_Records_DestinyRecordDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_Records_DestinyRecordDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_index_Valid() const{
    return m_index_isValid;
}

OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock OAIDestiny_Definitions_Records_DestinyRecordDefinition::getIntervalInfo() const {
    return m_interval_info;
}
void OAIDestiny_Definitions_Records_DestinyRecordDefinition::setIntervalInfo(const OAIDestiny_Definitions_Records_DestinyRecordIntervalBlock &interval_info) {
    m_interval_info = interval_info;
    m_interval_info_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_interval_info_Set() const{
    return m_interval_info_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_interval_info_Valid() const{
    return m_interval_info_isValid;
}

qint32 OAIDestiny_Definitions_Records_DestinyRecordDefinition::getLoreHash() const {
    return m_lore_hash;
}
void OAIDestiny_Definitions_Records_DestinyRecordDefinition::setLoreHash(const qint32 &lore_hash) {
    m_lore_hash = lore_hash;
    m_lore_hash_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_lore_hash_Set() const{
    return m_lore_hash_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_lore_hash_Valid() const{
    return m_lore_hash_isValid;
}

QList<qint32> OAIDestiny_Definitions_Records_DestinyRecordDefinition::getObjectiveHashes() const {
    return m_objective_hashes;
}
void OAIDestiny_Definitions_Records_DestinyRecordDefinition::setObjectiveHashes(const QList<qint32> &objective_hashes) {
    m_objective_hashes = objective_hashes;
    m_objective_hashes_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_objective_hashes_Set() const{
    return m_objective_hashes_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_objective_hashes_Valid() const{
    return m_objective_hashes_isValid;
}

QList<qint32> OAIDestiny_Definitions_Records_DestinyRecordDefinition::getParentNodeHashes() const {
    return m_parent_node_hashes;
}
void OAIDestiny_Definitions_Records_DestinyRecordDefinition::setParentNodeHashes(const QList<qint32> &parent_node_hashes) {
    m_parent_node_hashes = parent_node_hashes;
    m_parent_node_hashes_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_parent_node_hashes_Set() const{
    return m_parent_node_hashes_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_parent_node_hashes_Valid() const{
    return m_parent_node_hashes_isValid;
}

OAIDestiny_Definitions_Presentation_DestinyPresentationChildBlock OAIDestiny_Definitions_Records_DestinyRecordDefinition::getPresentationInfo() const {
    return m_presentation_info;
}
void OAIDestiny_Definitions_Records_DestinyRecordDefinition::setPresentationInfo(const OAIDestiny_Definitions_Presentation_DestinyPresentationChildBlock &presentation_info) {
    m_presentation_info = presentation_info;
    m_presentation_info_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_presentation_info_Set() const{
    return m_presentation_info_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_presentation_info_Valid() const{
    return m_presentation_info_isValid;
}

qint32 OAIDestiny_Definitions_Records_DestinyRecordDefinition::getPresentationNodeType() const {
    return m_presentation_node_type;
}
void OAIDestiny_Definitions_Records_DestinyRecordDefinition::setPresentationNodeType(const qint32 &presentation_node_type) {
    m_presentation_node_type = presentation_node_type;
    m_presentation_node_type_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_presentation_node_type_Set() const{
    return m_presentation_node_type_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_presentation_node_type_Valid() const{
    return m_presentation_node_type_isValid;
}

qint32 OAIDestiny_Definitions_Records_DestinyRecordDefinition::getRecordValueStyle() const {
    return m_record_value_style;
}
void OAIDestiny_Definitions_Records_DestinyRecordDefinition::setRecordValueStyle(const qint32 &record_value_style) {
    m_record_value_style = record_value_style;
    m_record_value_style_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_record_value_style_Set() const{
    return m_record_value_style_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_record_value_style_Valid() const{
    return m_record_value_style_isValid;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_Records_DestinyRecordDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

OAIDestiny_Definitions_Presentation_DestinyPresentationNodeRequirementsBlock OAIDestiny_Definitions_Records_DestinyRecordDefinition::getRequirements() const {
    return m_requirements;
}
void OAIDestiny_Definitions_Records_DestinyRecordDefinition::setRequirements(const OAIDestiny_Definitions_Presentation_DestinyPresentationNodeRequirementsBlock &requirements) {
    m_requirements = requirements;
    m_requirements_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_requirements_Set() const{
    return m_requirements_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_requirements_Valid() const{
    return m_requirements_isValid;
}

QList<OAIDestiny_DestinyItemQuantity> OAIDestiny_Definitions_Records_DestinyRecordDefinition::getRewardItems() const {
    return m_reward_items;
}
void OAIDestiny_Definitions_Records_DestinyRecordDefinition::setRewardItems(const QList<OAIDestiny_DestinyItemQuantity> &reward_items) {
    m_reward_items = reward_items;
    m_reward_items_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_reward_items_Set() const{
    return m_reward_items_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_reward_items_Valid() const{
    return m_reward_items_isValid;
}

qint32 OAIDestiny_Definitions_Records_DestinyRecordDefinition::getScope() const {
    return m_scope;
}
void OAIDestiny_Definitions_Records_DestinyRecordDefinition::setScope(const qint32 &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::isShouldShowLargeIcons() const {
    return m_should_show_large_icons;
}
void OAIDestiny_Definitions_Records_DestinyRecordDefinition::setShouldShowLargeIcons(const bool &should_show_large_icons) {
    m_should_show_large_icons = should_show_large_icons;
    m_should_show_large_icons_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_should_show_large_icons_Set() const{
    return m_should_show_large_icons_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_should_show_large_icons_Valid() const{
    return m_should_show_large_icons_isValid;
}

OAIDestiny_Definitions_Records_SchemaRecordStateBlock OAIDestiny_Definitions_Records_DestinyRecordDefinition::getStateInfo() const {
    return m_state_info;
}
void OAIDestiny_Definitions_Records_DestinyRecordDefinition::setStateInfo(const OAIDestiny_Definitions_Records_SchemaRecordStateBlock &state_info) {
    m_state_info = state_info;
    m_state_info_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_state_info_Set() const{
    return m_state_info_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_state_info_Valid() const{
    return m_state_info_isValid;
}

OAIDestiny_Definitions_Records_DestinyRecordTitleBlock OAIDestiny_Definitions_Records_DestinyRecordDefinition::getTitleInfo() const {
    return m_title_info;
}
void OAIDestiny_Definitions_Records_DestinyRecordDefinition::setTitleInfo(const OAIDestiny_Definitions_Records_DestinyRecordTitleBlock &title_info) {
    m_title_info = title_info;
    m_title_info_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_title_info_Set() const{
    return m_title_info_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_title_info_Valid() const{
    return m_title_info_isValid;
}

QList<qint32> OAIDestiny_Definitions_Records_DestinyRecordDefinition::getTraitHashes() const {
    return m_trait_hashes;
}
void OAIDestiny_Definitions_Records_DestinyRecordDefinition::setTraitHashes(const QList<qint32> &trait_hashes) {
    m_trait_hashes = trait_hashes;
    m_trait_hashes_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_trait_hashes_Set() const{
    return m_trait_hashes_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_trait_hashes_Valid() const{
    return m_trait_hashes_isValid;
}

QList<QString> OAIDestiny_Definitions_Records_DestinyRecordDefinition::getTraitIds() const {
    return m_trait_ids;
}
void OAIDestiny_Definitions_Records_DestinyRecordDefinition::setTraitIds(const QList<QString> &trait_ids) {
    m_trait_ids = trait_ids;
    m_trait_ids_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_trait_ids_Set() const{
    return m_trait_ids_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::is_trait_ids_Valid() const{
    return m_trait_ids_isValid;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completion_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_for_title_gilding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lore_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_objective_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_node_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_presentation_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_presentation_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_value_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requirements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_should_show_large_icons_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trait_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trait_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_Records_DestinyRecordDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
