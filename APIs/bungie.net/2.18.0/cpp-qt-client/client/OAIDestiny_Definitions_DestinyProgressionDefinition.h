/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyProgressionDefinition.h
 *
 * A \&quot;Progression\&quot; in Destiny is best explained by an example.  A Character&#39;s \&quot;Level\&quot; is a progression: it has Experience that can be earned, levels that can be gained, and is evaluated and displayed at various points in the game. A Character&#39;s \&quot;Faction Reputation\&quot; is also a progression for much the same reason.  Progression is used by a variety of systems, and the definition of a Progression will generally only be useful if combining with live data (such as a character&#39;s DestinyCharacterProgressionComponent.progressions property, which holds that character&#39;s live Progression states).  Fundamentally, a Progression measures your \&quot;Level\&quot; by evaluating the thresholds in its Steps (one step per level, except for the last step which can be repeated indefinitely for \&quot;Levels\&quot; that have no ceiling) against the total earned \&quot;progression points\&quot;/experience. (for simplicity purposes, we will henceforth refer to earned progression points as experience, though it need not be a mechanic that in any way resembles Experience in a traditional sense).  Earned experience is calculated in a variety of ways, determined by the Progression&#39;s scope. These go from looking up a stored value to performing exceedingly obtuse calculations. This is why we provide live data in DestinyCharacterProgressionComponent.progressions, so you don&#39;t have to worry about those.
 */

#ifndef OAIDestiny_Definitions_DestinyProgressionDefinition_H
#define OAIDestiny_Definitions_DestinyProgressionDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition.h"
#include "OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity.h"
#include "OAIDestiny_Definitions_DestinyProgressionStepDefinition.h"
#include "OAIDestiny_Misc_DestinyColor.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Misc_DestinyColor;
class OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition;
class OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity;
class OAIDestiny_Definitions_DestinyProgressionStepDefinition;

class OAIDestiny_Definitions_DestinyProgressionDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyProgressionDefinition();
    OAIDestiny_Definitions_DestinyProgressionDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyProgressionDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDestiny_Misc_DestinyColor getColor() const;
    void setColor(const OAIDestiny_Misc_DestinyColor &color);
    bool is_color_Set() const;
    bool is_color_Valid() const;

    OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition getDisplayProperties() const;
    void setDisplayProperties(const OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition &display_properties);
    bool is_display_properties_Set() const;
    bool is_display_properties_Valid() const;

    qint32 getFactionHash() const;
    void setFactionHash(const qint32 &faction_hash);
    bool is_faction_hash_Set() const;
    bool is_faction_hash_Valid() const;

    qint32 getHash() const;
    void setHash(const qint32 &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    qint32 getIndex() const;
    void setIndex(const qint32 &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    QString getRankIcon() const;
    void setRankIcon(const QString &rank_icon);
    bool is_rank_icon_Set() const;
    bool is_rank_icon_Valid() const;

    bool isRedacted() const;
    void setRedacted(const bool &redacted);
    bool is_redacted_Set() const;
    bool is_redacted_Valid() const;

    bool isRepeatLastStep() const;
    void setRepeatLastStep(const bool &repeat_last_step);
    bool is_repeat_last_step_Set() const;
    bool is_repeat_last_step_Valid() const;

    QList<OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity> getRewardItems() const;
    void setRewardItems(const QList<OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity> &reward_items);
    bool is_reward_items_Set() const;
    bool is_reward_items_Valid() const;

    qint32 getScope() const;
    void setScope(const qint32 &scope);
    bool is_scope_Set() const;
    bool is_scope_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    QList<OAIDestiny_Definitions_DestinyProgressionStepDefinition> getSteps() const;
    void setSteps(const QList<OAIDestiny_Definitions_DestinyProgressionStepDefinition> &steps);
    bool is_steps_Set() const;
    bool is_steps_Valid() const;

    bool isVisible() const;
    void setVisible(const bool &visible);
    bool is_visible_Set() const;
    bool is_visible_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDestiny_Misc_DestinyColor m_color;
    bool m_color_isSet;
    bool m_color_isValid;

    OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition m_display_properties;
    bool m_display_properties_isSet;
    bool m_display_properties_isValid;

    qint32 m_faction_hash;
    bool m_faction_hash_isSet;
    bool m_faction_hash_isValid;

    qint32 m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    qint32 m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    QString m_rank_icon;
    bool m_rank_icon_isSet;
    bool m_rank_icon_isValid;

    bool m_redacted;
    bool m_redacted_isSet;
    bool m_redacted_isValid;

    bool m_repeat_last_step;
    bool m_repeat_last_step_isSet;
    bool m_repeat_last_step_isValid;

    QList<OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity> m_reward_items;
    bool m_reward_items_isSet;
    bool m_reward_items_isValid;

    qint32 m_scope;
    bool m_scope_isSet;
    bool m_scope_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    QList<OAIDestiny_Definitions_DestinyProgressionStepDefinition> m_steps;
    bool m_steps_isSet;
    bool m_steps_isValid;

    bool m_visible;
    bool m_visible_isSet;
    bool m_visible_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyProgressionDefinition)

#endif // OAIDestiny_Definitions_DestinyProgressionDefinition_H
