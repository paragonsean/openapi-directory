/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Progression_DestinyFactionProgression.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Progression_DestinyFactionProgression::OAIDestiny_Progression_DestinyFactionProgression(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Progression_DestinyFactionProgression::OAIDestiny_Progression_DestinyFactionProgression() {
    this->initializeModel();
}

OAIDestiny_Progression_DestinyFactionProgression::~OAIDestiny_Progression_DestinyFactionProgression() {}

void OAIDestiny_Progression_DestinyFactionProgression::initializeModel() {

    m_current_progress_isSet = false;
    m_current_progress_isValid = false;

    m_current_reset_count_isSet = false;
    m_current_reset_count_isValid = false;

    m_daily_limit_isSet = false;
    m_daily_limit_isValid = false;

    m_daily_progress_isSet = false;
    m_daily_progress_isValid = false;

    m_faction_hash_isSet = false;
    m_faction_hash_isValid = false;

    m_faction_vendor_index_isSet = false;
    m_faction_vendor_index_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_level_cap_isSet = false;
    m_level_cap_isValid = false;

    m_next_level_at_isSet = false;
    m_next_level_at_isValid = false;

    m_progress_to_next_level_isSet = false;
    m_progress_to_next_level_isValid = false;

    m_progression_hash_isSet = false;
    m_progression_hash_isValid = false;

    m_reward_item_states_isSet = false;
    m_reward_item_states_isValid = false;

    m_season_resets_isSet = false;
    m_season_resets_isValid = false;

    m_step_index_isSet = false;
    m_step_index_isValid = false;

    m_weekly_limit_isSet = false;
    m_weekly_limit_isValid = false;

    m_weekly_progress_isSet = false;
    m_weekly_progress_isValid = false;
}

void OAIDestiny_Progression_DestinyFactionProgression::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Progression_DestinyFactionProgression::fromJsonObject(QJsonObject json) {

    m_current_progress_isValid = ::OpenAPI::fromJsonValue(m_current_progress, json[QString("currentProgress")]);
    m_current_progress_isSet = !json[QString("currentProgress")].isNull() && m_current_progress_isValid;

    m_current_reset_count_isValid = ::OpenAPI::fromJsonValue(m_current_reset_count, json[QString("currentResetCount")]);
    m_current_reset_count_isSet = !json[QString("currentResetCount")].isNull() && m_current_reset_count_isValid;

    m_daily_limit_isValid = ::OpenAPI::fromJsonValue(m_daily_limit, json[QString("dailyLimit")]);
    m_daily_limit_isSet = !json[QString("dailyLimit")].isNull() && m_daily_limit_isValid;

    m_daily_progress_isValid = ::OpenAPI::fromJsonValue(m_daily_progress, json[QString("dailyProgress")]);
    m_daily_progress_isSet = !json[QString("dailyProgress")].isNull() && m_daily_progress_isValid;

    m_faction_hash_isValid = ::OpenAPI::fromJsonValue(m_faction_hash, json[QString("factionHash")]);
    m_faction_hash_isSet = !json[QString("factionHash")].isNull() && m_faction_hash_isValid;

    m_faction_vendor_index_isValid = ::OpenAPI::fromJsonValue(m_faction_vendor_index, json[QString("factionVendorIndex")]);
    m_faction_vendor_index_isSet = !json[QString("factionVendorIndex")].isNull() && m_faction_vendor_index_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_level_cap_isValid = ::OpenAPI::fromJsonValue(m_level_cap, json[QString("levelCap")]);
    m_level_cap_isSet = !json[QString("levelCap")].isNull() && m_level_cap_isValid;

    m_next_level_at_isValid = ::OpenAPI::fromJsonValue(m_next_level_at, json[QString("nextLevelAt")]);
    m_next_level_at_isSet = !json[QString("nextLevelAt")].isNull() && m_next_level_at_isValid;

    m_progress_to_next_level_isValid = ::OpenAPI::fromJsonValue(m_progress_to_next_level, json[QString("progressToNextLevel")]);
    m_progress_to_next_level_isSet = !json[QString("progressToNextLevel")].isNull() && m_progress_to_next_level_isValid;

    m_progression_hash_isValid = ::OpenAPI::fromJsonValue(m_progression_hash, json[QString("progressionHash")]);
    m_progression_hash_isSet = !json[QString("progressionHash")].isNull() && m_progression_hash_isValid;

    m_reward_item_states_isValid = ::OpenAPI::fromJsonValue(m_reward_item_states, json[QString("rewardItemStates")]);
    m_reward_item_states_isSet = !json[QString("rewardItemStates")].isNull() && m_reward_item_states_isValid;

    m_season_resets_isValid = ::OpenAPI::fromJsonValue(m_season_resets, json[QString("seasonResets")]);
    m_season_resets_isSet = !json[QString("seasonResets")].isNull() && m_season_resets_isValid;

    m_step_index_isValid = ::OpenAPI::fromJsonValue(m_step_index, json[QString("stepIndex")]);
    m_step_index_isSet = !json[QString("stepIndex")].isNull() && m_step_index_isValid;

    m_weekly_limit_isValid = ::OpenAPI::fromJsonValue(m_weekly_limit, json[QString("weeklyLimit")]);
    m_weekly_limit_isSet = !json[QString("weeklyLimit")].isNull() && m_weekly_limit_isValid;

    m_weekly_progress_isValid = ::OpenAPI::fromJsonValue(m_weekly_progress, json[QString("weeklyProgress")]);
    m_weekly_progress_isSet = !json[QString("weeklyProgress")].isNull() && m_weekly_progress_isValid;
}

QString OAIDestiny_Progression_DestinyFactionProgression::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Progression_DestinyFactionProgression::asJsonObject() const {
    QJsonObject obj;
    if (m_current_progress_isSet) {
        obj.insert(QString("currentProgress"), ::OpenAPI::toJsonValue(m_current_progress));
    }
    if (m_current_reset_count_isSet) {
        obj.insert(QString("currentResetCount"), ::OpenAPI::toJsonValue(m_current_reset_count));
    }
    if (m_daily_limit_isSet) {
        obj.insert(QString("dailyLimit"), ::OpenAPI::toJsonValue(m_daily_limit));
    }
    if (m_daily_progress_isSet) {
        obj.insert(QString("dailyProgress"), ::OpenAPI::toJsonValue(m_daily_progress));
    }
    if (m_faction_hash_isSet) {
        obj.insert(QString("factionHash"), ::OpenAPI::toJsonValue(m_faction_hash));
    }
    if (m_faction_vendor_index_isSet) {
        obj.insert(QString("factionVendorIndex"), ::OpenAPI::toJsonValue(m_faction_vendor_index));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_level_cap_isSet) {
        obj.insert(QString("levelCap"), ::OpenAPI::toJsonValue(m_level_cap));
    }
    if (m_next_level_at_isSet) {
        obj.insert(QString("nextLevelAt"), ::OpenAPI::toJsonValue(m_next_level_at));
    }
    if (m_progress_to_next_level_isSet) {
        obj.insert(QString("progressToNextLevel"), ::OpenAPI::toJsonValue(m_progress_to_next_level));
    }
    if (m_progression_hash_isSet) {
        obj.insert(QString("progressionHash"), ::OpenAPI::toJsonValue(m_progression_hash));
    }
    if (m_reward_item_states.size() > 0) {
        obj.insert(QString("rewardItemStates"), ::OpenAPI::toJsonValue(m_reward_item_states));
    }
    if (m_season_resets.size() > 0) {
        obj.insert(QString("seasonResets"), ::OpenAPI::toJsonValue(m_season_resets));
    }
    if (m_step_index_isSet) {
        obj.insert(QString("stepIndex"), ::OpenAPI::toJsonValue(m_step_index));
    }
    if (m_weekly_limit_isSet) {
        obj.insert(QString("weeklyLimit"), ::OpenAPI::toJsonValue(m_weekly_limit));
    }
    if (m_weekly_progress_isSet) {
        obj.insert(QString("weeklyProgress"), ::OpenAPI::toJsonValue(m_weekly_progress));
    }
    return obj;
}

qint32 OAIDestiny_Progression_DestinyFactionProgression::getCurrentProgress() const {
    return m_current_progress;
}
void OAIDestiny_Progression_DestinyFactionProgression::setCurrentProgress(const qint32 &current_progress) {
    m_current_progress = current_progress;
    m_current_progress_isSet = true;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_current_progress_Set() const{
    return m_current_progress_isSet;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_current_progress_Valid() const{
    return m_current_progress_isValid;
}

qint32 OAIDestiny_Progression_DestinyFactionProgression::getCurrentResetCount() const {
    return m_current_reset_count;
}
void OAIDestiny_Progression_DestinyFactionProgression::setCurrentResetCount(const qint32 &current_reset_count) {
    m_current_reset_count = current_reset_count;
    m_current_reset_count_isSet = true;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_current_reset_count_Set() const{
    return m_current_reset_count_isSet;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_current_reset_count_Valid() const{
    return m_current_reset_count_isValid;
}

qint32 OAIDestiny_Progression_DestinyFactionProgression::getDailyLimit() const {
    return m_daily_limit;
}
void OAIDestiny_Progression_DestinyFactionProgression::setDailyLimit(const qint32 &daily_limit) {
    m_daily_limit = daily_limit;
    m_daily_limit_isSet = true;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_daily_limit_Set() const{
    return m_daily_limit_isSet;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_daily_limit_Valid() const{
    return m_daily_limit_isValid;
}

qint32 OAIDestiny_Progression_DestinyFactionProgression::getDailyProgress() const {
    return m_daily_progress;
}
void OAIDestiny_Progression_DestinyFactionProgression::setDailyProgress(const qint32 &daily_progress) {
    m_daily_progress = daily_progress;
    m_daily_progress_isSet = true;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_daily_progress_Set() const{
    return m_daily_progress_isSet;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_daily_progress_Valid() const{
    return m_daily_progress_isValid;
}

qint32 OAIDestiny_Progression_DestinyFactionProgression::getFactionHash() const {
    return m_faction_hash;
}
void OAIDestiny_Progression_DestinyFactionProgression::setFactionHash(const qint32 &faction_hash) {
    m_faction_hash = faction_hash;
    m_faction_hash_isSet = true;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_faction_hash_Set() const{
    return m_faction_hash_isSet;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_faction_hash_Valid() const{
    return m_faction_hash_isValid;
}

qint32 OAIDestiny_Progression_DestinyFactionProgression::getFactionVendorIndex() const {
    return m_faction_vendor_index;
}
void OAIDestiny_Progression_DestinyFactionProgression::setFactionVendorIndex(const qint32 &faction_vendor_index) {
    m_faction_vendor_index = faction_vendor_index;
    m_faction_vendor_index_isSet = true;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_faction_vendor_index_Set() const{
    return m_faction_vendor_index_isSet;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_faction_vendor_index_Valid() const{
    return m_faction_vendor_index_isValid;
}

qint32 OAIDestiny_Progression_DestinyFactionProgression::getLevel() const {
    return m_level;
}
void OAIDestiny_Progression_DestinyFactionProgression::setLevel(const qint32 &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_level_Set() const{
    return m_level_isSet;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_level_Valid() const{
    return m_level_isValid;
}

qint32 OAIDestiny_Progression_DestinyFactionProgression::getLevelCap() const {
    return m_level_cap;
}
void OAIDestiny_Progression_DestinyFactionProgression::setLevelCap(const qint32 &level_cap) {
    m_level_cap = level_cap;
    m_level_cap_isSet = true;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_level_cap_Set() const{
    return m_level_cap_isSet;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_level_cap_Valid() const{
    return m_level_cap_isValid;
}

qint32 OAIDestiny_Progression_DestinyFactionProgression::getNextLevelAt() const {
    return m_next_level_at;
}
void OAIDestiny_Progression_DestinyFactionProgression::setNextLevelAt(const qint32 &next_level_at) {
    m_next_level_at = next_level_at;
    m_next_level_at_isSet = true;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_next_level_at_Set() const{
    return m_next_level_at_isSet;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_next_level_at_Valid() const{
    return m_next_level_at_isValid;
}

qint32 OAIDestiny_Progression_DestinyFactionProgression::getProgressToNextLevel() const {
    return m_progress_to_next_level;
}
void OAIDestiny_Progression_DestinyFactionProgression::setProgressToNextLevel(const qint32 &progress_to_next_level) {
    m_progress_to_next_level = progress_to_next_level;
    m_progress_to_next_level_isSet = true;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_progress_to_next_level_Set() const{
    return m_progress_to_next_level_isSet;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_progress_to_next_level_Valid() const{
    return m_progress_to_next_level_isValid;
}

qint32 OAIDestiny_Progression_DestinyFactionProgression::getProgressionHash() const {
    return m_progression_hash;
}
void OAIDestiny_Progression_DestinyFactionProgression::setProgressionHash(const qint32 &progression_hash) {
    m_progression_hash = progression_hash;
    m_progression_hash_isSet = true;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_progression_hash_Set() const{
    return m_progression_hash_isSet;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_progression_hash_Valid() const{
    return m_progression_hash_isValid;
}

QList<qint32> OAIDestiny_Progression_DestinyFactionProgression::getRewardItemStates() const {
    return m_reward_item_states;
}
void OAIDestiny_Progression_DestinyFactionProgression::setRewardItemStates(const QList<qint32> &reward_item_states) {
    m_reward_item_states = reward_item_states;
    m_reward_item_states_isSet = true;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_reward_item_states_Set() const{
    return m_reward_item_states_isSet;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_reward_item_states_Valid() const{
    return m_reward_item_states_isValid;
}

QList<OAIDestiny_DestinyProgressionResetEntry> OAIDestiny_Progression_DestinyFactionProgression::getSeasonResets() const {
    return m_season_resets;
}
void OAIDestiny_Progression_DestinyFactionProgression::setSeasonResets(const QList<OAIDestiny_DestinyProgressionResetEntry> &season_resets) {
    m_season_resets = season_resets;
    m_season_resets_isSet = true;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_season_resets_Set() const{
    return m_season_resets_isSet;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_season_resets_Valid() const{
    return m_season_resets_isValid;
}

qint32 OAIDestiny_Progression_DestinyFactionProgression::getStepIndex() const {
    return m_step_index;
}
void OAIDestiny_Progression_DestinyFactionProgression::setStepIndex(const qint32 &step_index) {
    m_step_index = step_index;
    m_step_index_isSet = true;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_step_index_Set() const{
    return m_step_index_isSet;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_step_index_Valid() const{
    return m_step_index_isValid;
}

qint32 OAIDestiny_Progression_DestinyFactionProgression::getWeeklyLimit() const {
    return m_weekly_limit;
}
void OAIDestiny_Progression_DestinyFactionProgression::setWeeklyLimit(const qint32 &weekly_limit) {
    m_weekly_limit = weekly_limit;
    m_weekly_limit_isSet = true;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_weekly_limit_Set() const{
    return m_weekly_limit_isSet;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_weekly_limit_Valid() const{
    return m_weekly_limit_isValid;
}

qint32 OAIDestiny_Progression_DestinyFactionProgression::getWeeklyProgress() const {
    return m_weekly_progress;
}
void OAIDestiny_Progression_DestinyFactionProgression::setWeeklyProgress(const qint32 &weekly_progress) {
    m_weekly_progress = weekly_progress;
    m_weekly_progress_isSet = true;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_weekly_progress_Set() const{
    return m_weekly_progress_isSet;
}

bool OAIDestiny_Progression_DestinyFactionProgression::is_weekly_progress_Valid() const{
    return m_weekly_progress_isValid;
}

bool OAIDestiny_Progression_DestinyFactionProgression::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_reset_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_faction_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_faction_vendor_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_cap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_level_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_to_next_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progression_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_item_states.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_resets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_progress_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Progression_DestinyFactionProgression::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
