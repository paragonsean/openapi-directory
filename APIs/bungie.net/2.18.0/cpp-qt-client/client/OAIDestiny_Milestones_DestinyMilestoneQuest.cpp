/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Milestones_DestinyMilestoneQuest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Milestones_DestinyMilestoneQuest::OAIDestiny_Milestones_DestinyMilestoneQuest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Milestones_DestinyMilestoneQuest::OAIDestiny_Milestones_DestinyMilestoneQuest() {
    this->initializeModel();
}

OAIDestiny_Milestones_DestinyMilestoneQuest::~OAIDestiny_Milestones_DestinyMilestoneQuest() {}

void OAIDestiny_Milestones_DestinyMilestoneQuest::initializeModel() {

    m_activity_isSet = false;
    m_activity_isValid = false;

    m_challenges_isSet = false;
    m_challenges_isValid = false;

    m_quest_item_hash_isSet = false;
    m_quest_item_hash_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDestiny_Milestones_DestinyMilestoneQuest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Milestones_DestinyMilestoneQuest::fromJsonObject(QJsonObject json) {

    m_activity_isValid = ::OpenAPI::fromJsonValue(m_activity, json[QString("activity")]);
    m_activity_isSet = !json[QString("activity")].isNull() && m_activity_isValid;

    m_challenges_isValid = ::OpenAPI::fromJsonValue(m_challenges, json[QString("challenges")]);
    m_challenges_isSet = !json[QString("challenges")].isNull() && m_challenges_isValid;

    m_quest_item_hash_isValid = ::OpenAPI::fromJsonValue(m_quest_item_hash, json[QString("questItemHash")]);
    m_quest_item_hash_isSet = !json[QString("questItemHash")].isNull() && m_quest_item_hash_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDestiny_Milestones_DestinyMilestoneQuest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Milestones_DestinyMilestoneQuest::asJsonObject() const {
    QJsonObject obj;
    if (m_activity.isSet()) {
        obj.insert(QString("activity"), ::OpenAPI::toJsonValue(m_activity));
    }
    if (m_challenges.size() > 0) {
        obj.insert(QString("challenges"), ::OpenAPI::toJsonValue(m_challenges));
    }
    if (m_quest_item_hash_isSet) {
        obj.insert(QString("questItemHash"), ::OpenAPI::toJsonValue(m_quest_item_hash));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIDestiny_Milestones_DestinyMilestoneActivity OAIDestiny_Milestones_DestinyMilestoneQuest::getActivity() const {
    return m_activity;
}
void OAIDestiny_Milestones_DestinyMilestoneQuest::setActivity(const OAIDestiny_Milestones_DestinyMilestoneActivity &activity) {
    m_activity = activity;
    m_activity_isSet = true;
}

bool OAIDestiny_Milestones_DestinyMilestoneQuest::is_activity_Set() const{
    return m_activity_isSet;
}

bool OAIDestiny_Milestones_DestinyMilestoneQuest::is_activity_Valid() const{
    return m_activity_isValid;
}

QList<OAIDestiny_Challenges_DestinyChallengeStatus> OAIDestiny_Milestones_DestinyMilestoneQuest::getChallenges() const {
    return m_challenges;
}
void OAIDestiny_Milestones_DestinyMilestoneQuest::setChallenges(const QList<OAIDestiny_Challenges_DestinyChallengeStatus> &challenges) {
    m_challenges = challenges;
    m_challenges_isSet = true;
}

bool OAIDestiny_Milestones_DestinyMilestoneQuest::is_challenges_Set() const{
    return m_challenges_isSet;
}

bool OAIDestiny_Milestones_DestinyMilestoneQuest::is_challenges_Valid() const{
    return m_challenges_isValid;
}

qint32 OAIDestiny_Milestones_DestinyMilestoneQuest::getQuestItemHash() const {
    return m_quest_item_hash;
}
void OAIDestiny_Milestones_DestinyMilestoneQuest::setQuestItemHash(const qint32 &quest_item_hash) {
    m_quest_item_hash = quest_item_hash;
    m_quest_item_hash_isSet = true;
}

bool OAIDestiny_Milestones_DestinyMilestoneQuest::is_quest_item_hash_Set() const{
    return m_quest_item_hash_isSet;
}

bool OAIDestiny_Milestones_DestinyMilestoneQuest::is_quest_item_hash_Valid() const{
    return m_quest_item_hash_isValid;
}

OAIDestiny_Quests_DestinyQuestStatus OAIDestiny_Milestones_DestinyMilestoneQuest::getStatus() const {
    return m_status;
}
void OAIDestiny_Milestones_DestinyMilestoneQuest::setStatus(const OAIDestiny_Quests_DestinyQuestStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDestiny_Milestones_DestinyMilestoneQuest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDestiny_Milestones_DestinyMilestoneQuest::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDestiny_Milestones_DestinyMilestoneQuest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_challenges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quest_item_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Milestones_DestinyMilestoneQuest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
