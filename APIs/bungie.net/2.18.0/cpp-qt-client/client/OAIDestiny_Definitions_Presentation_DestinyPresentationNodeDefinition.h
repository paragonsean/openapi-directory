/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition.h
 *
 * A PresentationNode is an entity that represents a logical grouping of other entities visually/organizationally.  For now, Presentation Nodes may contain the following... but it may be used for more in the future:  - Collectibles - Records (Or, as the public will call them, \&quot;Triumphs.\&quot; Don&#39;t ask me why we&#39;re overloading the term \&quot;Triumph\&quot;, it still hurts me to think about it) - Metrics (aka Stat Trackers) - Other Presentation Nodes, allowing a tree of Presentation Nodes to be created  Part of me wants to break these into conceptual definitions per entity being collected, but the possibility of these different types being mixed in the same UI and the possibility that it could actually be more useful to return the \&quot;bare metal\&quot; presentation node concept has resulted in me deciding against that for the time being.  We&#39;ll see if I come to regret this as well.
 */

#ifndef OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition_H
#define OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition.h"
#include "OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock.h"
#include "OAIDestiny_Definitions_Presentation_DestinyPresentationNodeRequirementsBlock.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock;
class OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition;
class OAIDestiny_Definitions_Presentation_DestinyPresentationNodeRequirementsBlock;

class OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition();
    OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition(QString json);
    ~OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock getChildren() const;
    void setChildren(const OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock &children);
    bool is_children_Set() const;
    bool is_children_Valid() const;

    qint32 getCompletionRecordHash() const;
    void setCompletionRecordHash(const qint32 &completion_record_hash);
    bool is_completion_record_hash_Set() const;
    bool is_completion_record_hash_Valid() const;

    bool isDisableChildSubscreenNavigation() const;
    void setDisableChildSubscreenNavigation(const bool &disable_child_subscreen_navigation);
    bool is_disable_child_subscreen_navigation_Set() const;
    bool is_disable_child_subscreen_navigation_Valid() const;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition getDisplayProperties() const;
    void setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties);
    bool is_display_properties_Set() const;
    bool is_display_properties_Valid() const;

    qint32 getDisplayStyle() const;
    void setDisplayStyle(const qint32 &display_style);
    bool is_display_style_Set() const;
    bool is_display_style_Valid() const;

    qint32 getHash() const;
    void setHash(const qint32 &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    qint32 getIndex() const;
    void setIndex(const qint32 &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    qint32 getMaxCategoryRecordScore() const;
    void setMaxCategoryRecordScore(const qint32 &max_category_record_score);
    bool is_max_category_record_score_Set() const;
    bool is_max_category_record_score_Valid() const;

    qint32 getNodeType() const;
    void setNodeType(const qint32 &node_type);
    bool is_node_type_Set() const;
    bool is_node_type_Valid() const;

    qint32 getObjectiveHash() const;
    void setObjectiveHash(const qint32 &objective_hash);
    bool is_objective_hash_Set() const;
    bool is_objective_hash_Valid() const;

    QString getOriginalIcon() const;
    void setOriginalIcon(const QString &original_icon);
    bool is_original_icon_Set() const;
    bool is_original_icon_Valid() const;

    QList<qint32> getParentNodeHashes() const;
    void setParentNodeHashes(const QList<qint32> &parent_node_hashes);
    bool is_parent_node_hashes_Set() const;
    bool is_parent_node_hashes_Valid() const;

    qint32 getPresentationNodeType() const;
    void setPresentationNodeType(const qint32 &presentation_node_type);
    bool is_presentation_node_type_Set() const;
    bool is_presentation_node_type_Valid() const;

    bool isRedacted() const;
    void setRedacted(const bool &redacted);
    bool is_redacted_Set() const;
    bool is_redacted_Valid() const;

    OAIDestiny_Definitions_Presentation_DestinyPresentationNodeRequirementsBlock getRequirements() const;
    void setRequirements(const OAIDestiny_Definitions_Presentation_DestinyPresentationNodeRequirementsBlock &requirements);
    bool is_requirements_Set() const;
    bool is_requirements_Valid() const;

    QString getRootViewIcon() const;
    void setRootViewIcon(const QString &root_view_icon);
    bool is_root_view_icon_Set() const;
    bool is_root_view_icon_Valid() const;

    qint32 getScope() const;
    void setScope(const qint32 &scope);
    bool is_scope_Set() const;
    bool is_scope_Valid() const;

    qint32 getScreenStyle() const;
    void setScreenStyle(const qint32 &screen_style);
    bool is_screen_style_Set() const;
    bool is_screen_style_Valid() const;

    QList<qint32> getTraitHashes() const;
    void setTraitHashes(const QList<qint32> &trait_hashes);
    bool is_trait_hashes_Set() const;
    bool is_trait_hashes_Valid() const;

    QList<QString> getTraitIds() const;
    void setTraitIds(const QList<QString> &trait_ids);
    bool is_trait_ids_Set() const;
    bool is_trait_ids_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock m_children;
    bool m_children_isSet;
    bool m_children_isValid;

    qint32 m_completion_record_hash;
    bool m_completion_record_hash_isSet;
    bool m_completion_record_hash_isValid;

    bool m_disable_child_subscreen_navigation;
    bool m_disable_child_subscreen_navigation_isSet;
    bool m_disable_child_subscreen_navigation_isValid;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition m_display_properties;
    bool m_display_properties_isSet;
    bool m_display_properties_isValid;

    qint32 m_display_style;
    bool m_display_style_isSet;
    bool m_display_style_isValid;

    qint32 m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    qint32 m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    qint32 m_max_category_record_score;
    bool m_max_category_record_score_isSet;
    bool m_max_category_record_score_isValid;

    qint32 m_node_type;
    bool m_node_type_isSet;
    bool m_node_type_isValid;

    qint32 m_objective_hash;
    bool m_objective_hash_isSet;
    bool m_objective_hash_isValid;

    QString m_original_icon;
    bool m_original_icon_isSet;
    bool m_original_icon_isValid;

    QList<qint32> m_parent_node_hashes;
    bool m_parent_node_hashes_isSet;
    bool m_parent_node_hashes_isValid;

    qint32 m_presentation_node_type;
    bool m_presentation_node_type_isSet;
    bool m_presentation_node_type_isValid;

    bool m_redacted;
    bool m_redacted_isSet;
    bool m_redacted_isValid;

    OAIDestiny_Definitions_Presentation_DestinyPresentationNodeRequirementsBlock m_requirements;
    bool m_requirements_isSet;
    bool m_requirements_isValid;

    QString m_root_view_icon;
    bool m_root_view_icon_isSet;
    bool m_root_view_icon_isValid;

    qint32 m_scope;
    bool m_scope_isSet;
    bool m_scope_isValid;

    qint32 m_screen_style;
    bool m_screen_style_isSet;
    bool m_screen_style_isValid;

    QList<qint32> m_trait_hashes;
    bool m_trait_hashes_isSet;
    bool m_trait_hashes_isValid;

    QList<QString> m_trait_ids;
    bool m_trait_ids_isSet;
    bool m_trait_ids_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition)

#endif // OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition_H
