/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyLocationDefinition.h
 *
 * A \&quot;Location\&quot; is a sort of shortcut for referring to a specific combination of Activity, Destination, Place, and even Bubble or NavPoint within a space.  Most of this data isn&#39;t intrinsically useful to us, but Objectives refer to locations, and through that we can at least infer the Activity, Destination, and Place being referred to by the Objective.
 */

#ifndef OAIDestiny_Definitions_DestinyLocationDefinition_H
#define OAIDestiny_Definitions_DestinyLocationDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_DestinyLocationReleaseDefinition.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_DestinyLocationReleaseDefinition;

class OAIDestiny_Definitions_DestinyLocationDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyLocationDefinition();
    OAIDestiny_Definitions_DestinyLocationDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyLocationDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getHash() const;
    void setHash(const qint32 &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    qint32 getIndex() const;
    void setIndex(const qint32 &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    QList<OAIDestiny_Definitions_DestinyLocationReleaseDefinition> getLocationReleases() const;
    void setLocationReleases(const QList<OAIDestiny_Definitions_DestinyLocationReleaseDefinition> &location_releases);
    bool is_location_releases_Set() const;
    bool is_location_releases_Valid() const;

    bool isRedacted() const;
    void setRedacted(const bool &redacted);
    bool is_redacted_Set() const;
    bool is_redacted_Valid() const;

    qint32 getVendorHash() const;
    void setVendorHash(const qint32 &vendor_hash);
    bool is_vendor_hash_Set() const;
    bool is_vendor_hash_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    qint32 m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    QList<OAIDestiny_Definitions_DestinyLocationReleaseDefinition> m_location_releases;
    bool m_location_releases_isSet;
    bool m_location_releases_isValid;

    bool m_redacted;
    bool m_redacted_isSet;
    bool m_redacted_isValid;

    qint32 m_vendor_hash;
    bool m_vendor_hash_isSet;
    bool m_vendor_hash_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyLocationDefinition)

#endif // OAIDestiny_Definitions_DestinyLocationDefinition_H
