/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements::OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements::OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements::~OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements() {}

void OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements::initializeModel() {

    m_material_requirement_hashes_isSet = false;
    m_material_requirement_hashes_isValid = false;

    m_required_level_isSet = false;
    m_required_level_isValid = false;

    m_unlock_requirements_isSet = false;
    m_unlock_requirements_isValid = false;
}

void OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements::fromJsonObject(QJsonObject json) {

    m_material_requirement_hashes_isValid = ::OpenAPI::fromJsonValue(m_material_requirement_hashes, json[QString("materialRequirementHashes")]);
    m_material_requirement_hashes_isSet = !json[QString("materialRequirementHashes")].isNull() && m_material_requirement_hashes_isValid;

    m_required_level_isValid = ::OpenAPI::fromJsonValue(m_required_level, json[QString("requiredLevel")]);
    m_required_level_isSet = !json[QString("requiredLevel")].isNull() && m_required_level_isValid;

    m_unlock_requirements_isValid = ::OpenAPI::fromJsonValue(m_unlock_requirements, json[QString("unlockRequirements")]);
    m_unlock_requirements_isSet = !json[QString("unlockRequirements")].isNull() && m_unlock_requirements_isValid;
}

QString OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements::asJsonObject() const {
    QJsonObject obj;
    if (m_material_requirement_hashes.size() > 0) {
        obj.insert(QString("materialRequirementHashes"), ::OpenAPI::toJsonValue(m_material_requirement_hashes));
    }
    if (m_required_level_isSet) {
        obj.insert(QString("requiredLevel"), ::OpenAPI::toJsonValue(m_required_level));
    }
    if (m_unlock_requirements.size() > 0) {
        obj.insert(QString("unlockRequirements"), ::OpenAPI::toJsonValue(m_unlock_requirements));
    }
    return obj;
}

QList<qint32> OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements::getMaterialRequirementHashes() const {
    return m_material_requirement_hashes;
}
void OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements::setMaterialRequirementHashes(const QList<qint32> &material_requirement_hashes) {
    m_material_requirement_hashes = material_requirement_hashes;
    m_material_requirement_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements::is_material_requirement_hashes_Set() const{
    return m_material_requirement_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements::is_material_requirement_hashes_Valid() const{
    return m_material_requirement_hashes_isValid;
}

qint32 OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements::getRequiredLevel() const {
    return m_required_level;
}
void OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements::setRequiredLevel(const qint32 &required_level) {
    m_required_level = required_level;
    m_required_level_isSet = true;
}

bool OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements::is_required_level_Set() const{
    return m_required_level_isSet;
}

bool OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements::is_required_level_Valid() const{
    return m_required_level_isValid;
}

QList<OAIDestiny_Definitions_DestinyPlugItemCraftingUnlockRequirement> OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements::getUnlockRequirements() const {
    return m_unlock_requirements;
}
void OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements::setUnlockRequirements(const QList<OAIDestiny_Definitions_DestinyPlugItemCraftingUnlockRequirement> &unlock_requirements) {
    m_unlock_requirements = unlock_requirements;
    m_unlock_requirements_isSet = true;
}

bool OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements::is_unlock_requirements_Set() const{
    return m_unlock_requirements_isSet;
}

bool OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements::is_unlock_requirements_Valid() const{
    return m_unlock_requirements_isValid;
}

bool OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_material_requirement_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unlock_requirements.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyPlugItemCraftingRequirements::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
