/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyStatDisplayDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyStatDisplayDefinition::OAIDestiny_Definitions_DestinyStatDisplayDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyStatDisplayDefinition::OAIDestiny_Definitions_DestinyStatDisplayDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyStatDisplayDefinition::~OAIDestiny_Definitions_DestinyStatDisplayDefinition() {}

void OAIDestiny_Definitions_DestinyStatDisplayDefinition::initializeModel() {

    m_display_as_numeric_isSet = false;
    m_display_as_numeric_isValid = false;

    m_display_interpolation_isSet = false;
    m_display_interpolation_isValid = false;

    m_maximum_value_isSet = false;
    m_maximum_value_isValid = false;

    m_stat_hash_isSet = false;
    m_stat_hash_isValid = false;
}

void OAIDestiny_Definitions_DestinyStatDisplayDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyStatDisplayDefinition::fromJsonObject(QJsonObject json) {

    m_display_as_numeric_isValid = ::OpenAPI::fromJsonValue(m_display_as_numeric, json[QString("displayAsNumeric")]);
    m_display_as_numeric_isSet = !json[QString("displayAsNumeric")].isNull() && m_display_as_numeric_isValid;

    m_display_interpolation_isValid = ::OpenAPI::fromJsonValue(m_display_interpolation, json[QString("displayInterpolation")]);
    m_display_interpolation_isSet = !json[QString("displayInterpolation")].isNull() && m_display_interpolation_isValid;

    m_maximum_value_isValid = ::OpenAPI::fromJsonValue(m_maximum_value, json[QString("maximumValue")]);
    m_maximum_value_isSet = !json[QString("maximumValue")].isNull() && m_maximum_value_isValid;

    m_stat_hash_isValid = ::OpenAPI::fromJsonValue(m_stat_hash, json[QString("statHash")]);
    m_stat_hash_isSet = !json[QString("statHash")].isNull() && m_stat_hash_isValid;
}

QString OAIDestiny_Definitions_DestinyStatDisplayDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyStatDisplayDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_display_as_numeric_isSet) {
        obj.insert(QString("displayAsNumeric"), ::OpenAPI::toJsonValue(m_display_as_numeric));
    }
    if (m_display_interpolation.size() > 0) {
        obj.insert(QString("displayInterpolation"), ::OpenAPI::toJsonValue(m_display_interpolation));
    }
    if (m_maximum_value_isSet) {
        obj.insert(QString("maximumValue"), ::OpenAPI::toJsonValue(m_maximum_value));
    }
    if (m_stat_hash_isSet) {
        obj.insert(QString("statHash"), ::OpenAPI::toJsonValue(m_stat_hash));
    }
    return obj;
}

bool OAIDestiny_Definitions_DestinyStatDisplayDefinition::isDisplayAsNumeric() const {
    return m_display_as_numeric;
}
void OAIDestiny_Definitions_DestinyStatDisplayDefinition::setDisplayAsNumeric(const bool &display_as_numeric) {
    m_display_as_numeric = display_as_numeric;
    m_display_as_numeric_isSet = true;
}

bool OAIDestiny_Definitions_DestinyStatDisplayDefinition::is_display_as_numeric_Set() const{
    return m_display_as_numeric_isSet;
}

bool OAIDestiny_Definitions_DestinyStatDisplayDefinition::is_display_as_numeric_Valid() const{
    return m_display_as_numeric_isValid;
}

QList<OAIInterpolation_InterpolationPoint> OAIDestiny_Definitions_DestinyStatDisplayDefinition::getDisplayInterpolation() const {
    return m_display_interpolation;
}
void OAIDestiny_Definitions_DestinyStatDisplayDefinition::setDisplayInterpolation(const QList<OAIInterpolation_InterpolationPoint> &display_interpolation) {
    m_display_interpolation = display_interpolation;
    m_display_interpolation_isSet = true;
}

bool OAIDestiny_Definitions_DestinyStatDisplayDefinition::is_display_interpolation_Set() const{
    return m_display_interpolation_isSet;
}

bool OAIDestiny_Definitions_DestinyStatDisplayDefinition::is_display_interpolation_Valid() const{
    return m_display_interpolation_isValid;
}

qint32 OAIDestiny_Definitions_DestinyStatDisplayDefinition::getMaximumValue() const {
    return m_maximum_value;
}
void OAIDestiny_Definitions_DestinyStatDisplayDefinition::setMaximumValue(const qint32 &maximum_value) {
    m_maximum_value = maximum_value;
    m_maximum_value_isSet = true;
}

bool OAIDestiny_Definitions_DestinyStatDisplayDefinition::is_maximum_value_Set() const{
    return m_maximum_value_isSet;
}

bool OAIDestiny_Definitions_DestinyStatDisplayDefinition::is_maximum_value_Valid() const{
    return m_maximum_value_isValid;
}

qint32 OAIDestiny_Definitions_DestinyStatDisplayDefinition::getStatHash() const {
    return m_stat_hash;
}
void OAIDestiny_Definitions_DestinyStatDisplayDefinition::setStatHash(const qint32 &stat_hash) {
    m_stat_hash = stat_hash;
    m_stat_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyStatDisplayDefinition::is_stat_hash_Set() const{
    return m_stat_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyStatDisplayDefinition::is_stat_hash_Valid() const{
    return m_stat_hash_isValid;
}

bool OAIDestiny_Definitions_DestinyStatDisplayDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_as_numeric_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_interpolation.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyStatDisplayDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
