/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyItemSackBlockDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyItemSackBlockDefinition::OAIDestiny_Definitions_DestinyItemSackBlockDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyItemSackBlockDefinition::OAIDestiny_Definitions_DestinyItemSackBlockDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyItemSackBlockDefinition::~OAIDestiny_Definitions_DestinyItemSackBlockDefinition() {}

void OAIDestiny_Definitions_DestinyItemSackBlockDefinition::initializeModel() {

    m_detail_action_isSet = false;
    m_detail_action_isValid = false;

    m_open_action_isSet = false;
    m_open_action_isValid = false;

    m_open_on_acquire_isSet = false;
    m_open_on_acquire_isValid = false;

    m_select_item_count_isSet = false;
    m_select_item_count_isValid = false;

    m_vendor_sack_type_isSet = false;
    m_vendor_sack_type_isValid = false;
}

void OAIDestiny_Definitions_DestinyItemSackBlockDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyItemSackBlockDefinition::fromJsonObject(QJsonObject json) {

    m_detail_action_isValid = ::OpenAPI::fromJsonValue(m_detail_action, json[QString("detailAction")]);
    m_detail_action_isSet = !json[QString("detailAction")].isNull() && m_detail_action_isValid;

    m_open_action_isValid = ::OpenAPI::fromJsonValue(m_open_action, json[QString("openAction")]);
    m_open_action_isSet = !json[QString("openAction")].isNull() && m_open_action_isValid;

    m_open_on_acquire_isValid = ::OpenAPI::fromJsonValue(m_open_on_acquire, json[QString("openOnAcquire")]);
    m_open_on_acquire_isSet = !json[QString("openOnAcquire")].isNull() && m_open_on_acquire_isValid;

    m_select_item_count_isValid = ::OpenAPI::fromJsonValue(m_select_item_count, json[QString("selectItemCount")]);
    m_select_item_count_isSet = !json[QString("selectItemCount")].isNull() && m_select_item_count_isValid;

    m_vendor_sack_type_isValid = ::OpenAPI::fromJsonValue(m_vendor_sack_type, json[QString("vendorSackType")]);
    m_vendor_sack_type_isSet = !json[QString("vendorSackType")].isNull() && m_vendor_sack_type_isValid;
}

QString OAIDestiny_Definitions_DestinyItemSackBlockDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyItemSackBlockDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_detail_action_isSet) {
        obj.insert(QString("detailAction"), ::OpenAPI::toJsonValue(m_detail_action));
    }
    if (m_open_action_isSet) {
        obj.insert(QString("openAction"), ::OpenAPI::toJsonValue(m_open_action));
    }
    if (m_open_on_acquire_isSet) {
        obj.insert(QString("openOnAcquire"), ::OpenAPI::toJsonValue(m_open_on_acquire));
    }
    if (m_select_item_count_isSet) {
        obj.insert(QString("selectItemCount"), ::OpenAPI::toJsonValue(m_select_item_count));
    }
    if (m_vendor_sack_type_isSet) {
        obj.insert(QString("vendorSackType"), ::OpenAPI::toJsonValue(m_vendor_sack_type));
    }
    return obj;
}

QString OAIDestiny_Definitions_DestinyItemSackBlockDefinition::getDetailAction() const {
    return m_detail_action;
}
void OAIDestiny_Definitions_DestinyItemSackBlockDefinition::setDetailAction(const QString &detail_action) {
    m_detail_action = detail_action;
    m_detail_action_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemSackBlockDefinition::is_detail_action_Set() const{
    return m_detail_action_isSet;
}

bool OAIDestiny_Definitions_DestinyItemSackBlockDefinition::is_detail_action_Valid() const{
    return m_detail_action_isValid;
}

QString OAIDestiny_Definitions_DestinyItemSackBlockDefinition::getOpenAction() const {
    return m_open_action;
}
void OAIDestiny_Definitions_DestinyItemSackBlockDefinition::setOpenAction(const QString &open_action) {
    m_open_action = open_action;
    m_open_action_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemSackBlockDefinition::is_open_action_Set() const{
    return m_open_action_isSet;
}

bool OAIDestiny_Definitions_DestinyItemSackBlockDefinition::is_open_action_Valid() const{
    return m_open_action_isValid;
}

bool OAIDestiny_Definitions_DestinyItemSackBlockDefinition::isOpenOnAcquire() const {
    return m_open_on_acquire;
}
void OAIDestiny_Definitions_DestinyItemSackBlockDefinition::setOpenOnAcquire(const bool &open_on_acquire) {
    m_open_on_acquire = open_on_acquire;
    m_open_on_acquire_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemSackBlockDefinition::is_open_on_acquire_Set() const{
    return m_open_on_acquire_isSet;
}

bool OAIDestiny_Definitions_DestinyItemSackBlockDefinition::is_open_on_acquire_Valid() const{
    return m_open_on_acquire_isValid;
}

qint32 OAIDestiny_Definitions_DestinyItemSackBlockDefinition::getSelectItemCount() const {
    return m_select_item_count;
}
void OAIDestiny_Definitions_DestinyItemSackBlockDefinition::setSelectItemCount(const qint32 &select_item_count) {
    m_select_item_count = select_item_count;
    m_select_item_count_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemSackBlockDefinition::is_select_item_count_Set() const{
    return m_select_item_count_isSet;
}

bool OAIDestiny_Definitions_DestinyItemSackBlockDefinition::is_select_item_count_Valid() const{
    return m_select_item_count_isValid;
}

QString OAIDestiny_Definitions_DestinyItemSackBlockDefinition::getVendorSackType() const {
    return m_vendor_sack_type;
}
void OAIDestiny_Definitions_DestinyItemSackBlockDefinition::setVendorSackType(const QString &vendor_sack_type) {
    m_vendor_sack_type = vendor_sack_type;
    m_vendor_sack_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemSackBlockDefinition::is_vendor_sack_type_Set() const{
    return m_vendor_sack_type_isSet;
}

bool OAIDestiny_Definitions_DestinyItemSackBlockDefinition::is_vendor_sack_type_Valid() const{
    return m_vendor_sack_type_isValid;
}

bool OAIDestiny_Definitions_DestinyItemSackBlockDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detail_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_on_acquire_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_sack_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyItemSackBlockDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
