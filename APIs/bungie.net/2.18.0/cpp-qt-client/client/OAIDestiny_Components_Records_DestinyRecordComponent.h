/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Components_Records_DestinyRecordComponent.h
 *
 * 
 */

#ifndef OAIDestiny_Components_Records_DestinyRecordComponent_H
#define OAIDestiny_Components_Records_DestinyRecordComponent_H

#include <QJsonObject>

#include "OAIDestiny_Quests_DestinyObjectiveProgress.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Quests_DestinyObjectiveProgress;

class OAIDestiny_Components_Records_DestinyRecordComponent : public OAIObject {
public:
    OAIDestiny_Components_Records_DestinyRecordComponent();
    OAIDestiny_Components_Records_DestinyRecordComponent(QString json);
    ~OAIDestiny_Components_Records_DestinyRecordComponent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCompletedCount() const;
    void setCompletedCount(const qint32 &completed_count);
    bool is_completed_count_Set() const;
    bool is_completed_count_Valid() const;

    QList<OAIDestiny_Quests_DestinyObjectiveProgress> getIntervalObjectives() const;
    void setIntervalObjectives(const QList<OAIDestiny_Quests_DestinyObjectiveProgress> &interval_objectives);
    bool is_interval_objectives_Set() const;
    bool is_interval_objectives_Valid() const;

    qint32 getIntervalsRedeemedCount() const;
    void setIntervalsRedeemedCount(const qint32 &intervals_redeemed_count);
    bool is_intervals_redeemed_count_Set() const;
    bool is_intervals_redeemed_count_Valid() const;

    QList<OAIDestiny_Quests_DestinyObjectiveProgress> getObjectives() const;
    void setObjectives(const QList<OAIDestiny_Quests_DestinyObjectiveProgress> &objectives);
    bool is_objectives_Set() const;
    bool is_objectives_Valid() const;

    QList<bool> getRewardVisibilty() const;
    void setRewardVisibilty(const QList<bool> &reward_visibilty);
    bool is_reward_visibilty_Set() const;
    bool is_reward_visibilty_Valid() const;

    qint32 getState() const;
    void setState(const qint32 &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_completed_count;
    bool m_completed_count_isSet;
    bool m_completed_count_isValid;

    QList<OAIDestiny_Quests_DestinyObjectiveProgress> m_interval_objectives;
    bool m_interval_objectives_isSet;
    bool m_interval_objectives_isValid;

    qint32 m_intervals_redeemed_count;
    bool m_intervals_redeemed_count_isSet;
    bool m_intervals_redeemed_count_isValid;

    QList<OAIDestiny_Quests_DestinyObjectiveProgress> m_objectives;
    bool m_objectives_isSet;
    bool m_objectives_isValid;

    QList<bool> m_reward_visibilty;
    bool m_reward_visibilty_isSet;
    bool m_reward_visibilty_isValid;

    qint32 m_state;
    bool m_state_isSet;
    bool m_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Components_Records_DestinyRecordComponent)

#endif // OAIDestiny_Components_Records_DestinyRecordComponent_H
