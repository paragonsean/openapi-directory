/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITokens_TwitchDropHistoryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITokens_TwitchDropHistoryResponse::OAITokens_TwitchDropHistoryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITokens_TwitchDropHistoryResponse::OAITokens_TwitchDropHistoryResponse() {
    this->initializeModel();
}

OAITokens_TwitchDropHistoryResponse::~OAITokens_TwitchDropHistoryResponse() {}

void OAITokens_TwitchDropHistoryResponse::initializeModel() {

    m_claim_state_isSet = false;
    m_claim_state_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAITokens_TwitchDropHistoryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITokens_TwitchDropHistoryResponse::fromJsonObject(QJsonObject json) {

    m_claim_state_isValid = ::OpenAPI::fromJsonValue(m_claim_state, json[QString("ClaimState")]);
    m_claim_state_isSet = !json[QString("ClaimState")].isNull() && m_claim_state_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;
}

QString OAITokens_TwitchDropHistoryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITokens_TwitchDropHistoryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_claim_state_isSet) {
        obj.insert(QString("ClaimState"), ::OpenAPI::toJsonValue(m_claim_state));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

qint32 OAITokens_TwitchDropHistoryResponse::getClaimState() const {
    return m_claim_state;
}
void OAITokens_TwitchDropHistoryResponse::setClaimState(const qint32 &claim_state) {
    m_claim_state = claim_state;
    m_claim_state_isSet = true;
}

bool OAITokens_TwitchDropHistoryResponse::is_claim_state_Set() const{
    return m_claim_state_isSet;
}

bool OAITokens_TwitchDropHistoryResponse::is_claim_state_Valid() const{
    return m_claim_state_isValid;
}

QDateTime OAITokens_TwitchDropHistoryResponse::getCreatedAt() const {
    return m_created_at;
}
void OAITokens_TwitchDropHistoryResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITokens_TwitchDropHistoryResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITokens_TwitchDropHistoryResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITokens_TwitchDropHistoryResponse::getDescription() const {
    return m_description;
}
void OAITokens_TwitchDropHistoryResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITokens_TwitchDropHistoryResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAITokens_TwitchDropHistoryResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITokens_TwitchDropHistoryResponse::getTitle() const {
    return m_title;
}
void OAITokens_TwitchDropHistoryResponse::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAITokens_TwitchDropHistoryResponse::is_title_Set() const{
    return m_title_isSet;
}

bool OAITokens_TwitchDropHistoryResponse::is_title_Valid() const{
    return m_title_isValid;
}

bool OAITokens_TwitchDropHistoryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_claim_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITokens_TwitchDropHistoryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
