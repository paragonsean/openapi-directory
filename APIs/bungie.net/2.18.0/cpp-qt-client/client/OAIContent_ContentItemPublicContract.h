/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContent_ContentItemPublicContract.h
 *
 * 
 */

#ifndef OAIContent_ContentItemPublicContract_H
#define OAIContent_ContentItemPublicContract_H

#include <QJsonObject>

#include "OAIContent_CommentSummary.h"
#include "OAIContent_ContentRepresentation.h"
#include "OAIObject.h"
#include "OAIUser_GeneralUser.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUser_GeneralUser;
class OAIContent_CommentSummary;
class OAIContent_ContentRepresentation;

class OAIContent_ContentItemPublicContract : public OAIObject {
public:
    OAIContent_ContentItemPublicContract();
    OAIContent_ContentItemPublicContract(QString json);
    ~OAIContent_ContentItemPublicContract() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowComments() const;
    void setAllowComments(const bool &allow_comments);
    bool is_allow_comments_Set() const;
    bool is_allow_comments_Valid() const;

    OAIUser_GeneralUser getAuthor() const;
    void setAuthor(const OAIUser_GeneralUser &author);
    bool is_author_Set() const;
    bool is_author_Valid() const;

    bool isAutoEnglishPropertyFallback() const;
    void setAutoEnglishPropertyFallback(const bool &auto_english_property_fallback);
    bool is_auto_english_property_fallback_Set() const;
    bool is_auto_english_property_fallback_Valid() const;

    QString getCType() const;
    void setCType(const QString &c_type);
    bool is_c_type_Set() const;
    bool is_c_type_Valid() const;

    QString getCmsPath() const;
    void setCmsPath(const QString &cms_path);
    bool is_cms_path_Set() const;
    bool is_cms_path_Valid() const;

    OAIContent_CommentSummary getCommentSummary() const;
    void setCommentSummary(const OAIContent_CommentSummary &comment_summary);
    bool is_comment_summary_Set() const;
    bool is_comment_summary_Valid() const;

    qint64 getContentId() const;
    void setContentId(const qint64 &content_id);
    bool is_content_id_Set() const;
    bool is_content_id_Valid() const;

    QDateTime getCreationDate() const;
    void setCreationDate(const QDateTime &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    bool isHasAgeGate() const;
    void setHasAgeGate(const bool &has_age_gate);
    bool is_has_age_gate_Set() const;
    bool is_has_age_gate_Valid() const;

    qint32 getMinimumAge() const;
    void setMinimumAge(const qint32 &minimum_age);
    bool is_minimum_age_Set() const;
    bool is_minimum_age_Valid() const;

    QDateTime getModifyDate() const;
    void setModifyDate(const QDateTime &modify_date);
    bool is_modify_date_Set() const;
    bool is_modify_date_Valid() const;

    QMap<QString, OAIObject> getProperties() const;
    void setProperties(const QMap<QString, OAIObject> &properties);
    bool is_properties_Set() const;
    bool is_properties_Valid() const;

    QString getRatingImagePath() const;
    void setRatingImagePath(const QString &rating_image_path);
    bool is_rating_image_path_Set() const;
    bool is_rating_image_path_Valid() const;

    QList<OAIContent_ContentRepresentation> getRepresentations() const;
    void setRepresentations(const QList<OAIContent_ContentRepresentation> &representations);
    bool is_representations_Set() const;
    bool is_representations_Valid() const;

    QList<QString> getTags() const;
    void setTags(const QList<QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_comments;
    bool m_allow_comments_isSet;
    bool m_allow_comments_isValid;

    OAIUser_GeneralUser m_author;
    bool m_author_isSet;
    bool m_author_isValid;

    bool m_auto_english_property_fallback;
    bool m_auto_english_property_fallback_isSet;
    bool m_auto_english_property_fallback_isValid;

    QString m_c_type;
    bool m_c_type_isSet;
    bool m_c_type_isValid;

    QString m_cms_path;
    bool m_cms_path_isSet;
    bool m_cms_path_isValid;

    OAIContent_CommentSummary m_comment_summary;
    bool m_comment_summary_isSet;
    bool m_comment_summary_isValid;

    qint64 m_content_id;
    bool m_content_id_isSet;
    bool m_content_id_isValid;

    QDateTime m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    bool m_has_age_gate;
    bool m_has_age_gate_isSet;
    bool m_has_age_gate_isValid;

    qint32 m_minimum_age;
    bool m_minimum_age_isSet;
    bool m_minimum_age_isValid;

    QDateTime m_modify_date;
    bool m_modify_date_isSet;
    bool m_modify_date_isValid;

    QMap<QString, OAIObject> m_properties;
    bool m_properties_isSet;
    bool m_properties_isValid;

    QString m_rating_image_path;
    bool m_rating_image_path_isSet;
    bool m_rating_image_path_isValid;

    QList<OAIContent_ContentRepresentation> m_representations;
    bool m_representations_isSet;
    bool m_representations_isValid;

    QList<QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContent_ContentItemPublicContract)

#endif // OAIContent_ContentItemPublicContract_H
