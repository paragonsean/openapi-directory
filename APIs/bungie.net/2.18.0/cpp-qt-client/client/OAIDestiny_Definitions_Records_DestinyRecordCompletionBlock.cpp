/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock() {
    this->initializeModel();
}

OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::~OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock() {}

void OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::initializeModel() {

    m_score_value_isSet = false;
    m_score_value_isValid = false;

    m_partial_completion_objective_count_threshold_isSet = false;
    m_partial_completion_objective_count_threshold_isValid = false;

    m_should_fire_toast_isSet = false;
    m_should_fire_toast_isValid = false;

    m_toast_style_isSet = false;
    m_toast_style_isValid = false;
}

void OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::fromJsonObject(QJsonObject json) {

    m_score_value_isValid = ::OpenAPI::fromJsonValue(m_score_value, json[QString("ScoreValue")]);
    m_score_value_isSet = !json[QString("ScoreValue")].isNull() && m_score_value_isValid;

    m_partial_completion_objective_count_threshold_isValid = ::OpenAPI::fromJsonValue(m_partial_completion_objective_count_threshold, json[QString("partialCompletionObjectiveCountThreshold")]);
    m_partial_completion_objective_count_threshold_isSet = !json[QString("partialCompletionObjectiveCountThreshold")].isNull() && m_partial_completion_objective_count_threshold_isValid;

    m_should_fire_toast_isValid = ::OpenAPI::fromJsonValue(m_should_fire_toast, json[QString("shouldFireToast")]);
    m_should_fire_toast_isSet = !json[QString("shouldFireToast")].isNull() && m_should_fire_toast_isValid;

    m_toast_style_isValid = ::OpenAPI::fromJsonValue(m_toast_style, json[QString("toastStyle")]);
    m_toast_style_isSet = !json[QString("toastStyle")].isNull() && m_toast_style_isValid;
}

QString OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::asJsonObject() const {
    QJsonObject obj;
    if (m_score_value_isSet) {
        obj.insert(QString("ScoreValue"), ::OpenAPI::toJsonValue(m_score_value));
    }
    if (m_partial_completion_objective_count_threshold_isSet) {
        obj.insert(QString("partialCompletionObjectiveCountThreshold"), ::OpenAPI::toJsonValue(m_partial_completion_objective_count_threshold));
    }
    if (m_should_fire_toast_isSet) {
        obj.insert(QString("shouldFireToast"), ::OpenAPI::toJsonValue(m_should_fire_toast));
    }
    if (m_toast_style_isSet) {
        obj.insert(QString("toastStyle"), ::OpenAPI::toJsonValue(m_toast_style));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::getScoreValue() const {
    return m_score_value;
}
void OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::setScoreValue(const qint32 &score_value) {
    m_score_value = score_value;
    m_score_value_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::is_score_value_Set() const{
    return m_score_value_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::is_score_value_Valid() const{
    return m_score_value_isValid;
}

qint32 OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::getPartialCompletionObjectiveCountThreshold() const {
    return m_partial_completion_objective_count_threshold;
}
void OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::setPartialCompletionObjectiveCountThreshold(const qint32 &partial_completion_objective_count_threshold) {
    m_partial_completion_objective_count_threshold = partial_completion_objective_count_threshold;
    m_partial_completion_objective_count_threshold_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::is_partial_completion_objective_count_threshold_Set() const{
    return m_partial_completion_objective_count_threshold_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::is_partial_completion_objective_count_threshold_Valid() const{
    return m_partial_completion_objective_count_threshold_isValid;
}

bool OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::isShouldFireToast() const {
    return m_should_fire_toast;
}
void OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::setShouldFireToast(const bool &should_fire_toast) {
    m_should_fire_toast = should_fire_toast;
    m_should_fire_toast_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::is_should_fire_toast_Set() const{
    return m_should_fire_toast_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::is_should_fire_toast_Valid() const{
    return m_should_fire_toast_isValid;
}

qint32 OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::getToastStyle() const {
    return m_toast_style;
}
void OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::setToastStyle(const qint32 &toast_style) {
    m_toast_style = toast_style;
    m_toast_style_isSet = true;
}

bool OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::is_toast_style_Set() const{
    return m_toast_style_isSet;
}

bool OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::is_toast_style_Valid() const{
    return m_toast_style_isValid;
}

bool OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_score_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partial_completion_objective_count_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_should_fire_toast_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_toast_style_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_Records_DestinyRecordCompletionBlock::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
