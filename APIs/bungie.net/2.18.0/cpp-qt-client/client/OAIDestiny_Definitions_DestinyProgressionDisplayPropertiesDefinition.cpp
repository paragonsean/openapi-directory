/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::~OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition() {}

void OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_units_name_isSet = false;
    m_display_units_name_isValid = false;

    m_has_icon_isSet = false;
    m_has_icon_isValid = false;

    m_high_res_icon_isSet = false;
    m_high_res_icon_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_icon_sequences_isSet = false;
    m_icon_sequences_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_units_name_isValid = ::OpenAPI::fromJsonValue(m_display_units_name, json[QString("displayUnitsName")]);
    m_display_units_name_isSet = !json[QString("displayUnitsName")].isNull() && m_display_units_name_isValid;

    m_has_icon_isValid = ::OpenAPI::fromJsonValue(m_has_icon, json[QString("hasIcon")]);
    m_has_icon_isSet = !json[QString("hasIcon")].isNull() && m_has_icon_isValid;

    m_high_res_icon_isValid = ::OpenAPI::fromJsonValue(m_high_res_icon, json[QString("highResIcon")]);
    m_high_res_icon_isSet = !json[QString("highResIcon")].isNull() && m_high_res_icon_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_icon_sequences_isValid = ::OpenAPI::fromJsonValue(m_icon_sequences, json[QString("iconSequences")]);
    m_icon_sequences_isSet = !json[QString("iconSequences")].isNull() && m_icon_sequences_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_units_name_isSet) {
        obj.insert(QString("displayUnitsName"), ::OpenAPI::toJsonValue(m_display_units_name));
    }
    if (m_has_icon_isSet) {
        obj.insert(QString("hasIcon"), ::OpenAPI::toJsonValue(m_has_icon));
    }
    if (m_high_res_icon_isSet) {
        obj.insert(QString("highResIcon"), ::OpenAPI::toJsonValue(m_high_res_icon));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_icon_sequences.size() > 0) {
        obj.insert(QString("iconSequences"), ::OpenAPI::toJsonValue(m_icon_sequences));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::getDescription() const {
    return m_description;
}
void OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::getDisplayUnitsName() const {
    return m_display_units_name;
}
void OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::setDisplayUnitsName(const QString &display_units_name) {
    m_display_units_name = display_units_name;
    m_display_units_name_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::is_display_units_name_Set() const{
    return m_display_units_name_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::is_display_units_name_Valid() const{
    return m_display_units_name_isValid;
}

bool OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::isHasIcon() const {
    return m_has_icon;
}
void OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::setHasIcon(const bool &has_icon) {
    m_has_icon = has_icon;
    m_has_icon_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::is_has_icon_Set() const{
    return m_has_icon_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::is_has_icon_Valid() const{
    return m_has_icon_isValid;
}

QString OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::getHighResIcon() const {
    return m_high_res_icon;
}
void OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::setHighResIcon(const QString &high_res_icon) {
    m_high_res_icon = high_res_icon;
    m_high_res_icon_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::is_high_res_icon_Set() const{
    return m_high_res_icon_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::is_high_res_icon_Valid() const{
    return m_high_res_icon_isValid;
}

QString OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::getIcon() const {
    return m_icon;
}
void OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::is_icon_Valid() const{
    return m_icon_isValid;
}

QList<OAIDestiny_Definitions_Common_DestinyIconSequenceDefinition> OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::getIconSequences() const {
    return m_icon_sequences;
}
void OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::setIconSequences(const QList<OAIDestiny_Definitions_Common_DestinyIconSequenceDefinition> &icon_sequences) {
    m_icon_sequences = icon_sequences;
    m_icon_sequences_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::is_icon_sequences_Set() const{
    return m_icon_sequences_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::is_icon_sequences_Valid() const{
    return m_icon_sequences_isValid;
}

QString OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::getName() const {
    return m_name;
}
void OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_units_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_res_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_sequences.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
