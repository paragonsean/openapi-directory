/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyFactionDefinition.h
 *
 * These definitions represent Factions in the game. Factions have ended up unilaterally being related to Vendors that represent them, but that need not necessarily be the case.  A Faction is really just an entity that has a related progression for which a character can gain experience. In Destiny 1, Dead Orbit was an example of a Faction: there happens to be a Vendor that represents Dead Orbit (and indeed, DestinyVendorDefinition.factionHash defines to this relationship), but Dead Orbit could theoretically exist without the Vendor that provides rewards.
 */

#ifndef OAIDestiny_Definitions_DestinyFactionDefinition_H
#define OAIDestiny_Definitions_DestinyFactionDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition.h"
#include "OAIDestiny_Definitions_DestinyFactionVendorDefinition.h"
#include <QList>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition;
class OAIDestiny_Definitions_DestinyFactionVendorDefinition;

class OAIDestiny_Definitions_DestinyFactionDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyFactionDefinition();
    OAIDestiny_Definitions_DestinyFactionDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyFactionDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition getDisplayProperties() const;
    void setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties);
    bool is_display_properties_Set() const;
    bool is_display_properties_Valid() const;

    qint32 getHash() const;
    void setHash(const qint32 &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    qint32 getIndex() const;
    void setIndex(const qint32 &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    qint32 getProgressionHash() const;
    void setProgressionHash(const qint32 &progression_hash);
    bool is_progression_hash_Set() const;
    bool is_progression_hash_Valid() const;

    bool isRedacted() const;
    void setRedacted(const bool &redacted);
    bool is_redacted_Set() const;
    bool is_redacted_Valid() const;

    qint32 getRewardItemHash() const;
    void setRewardItemHash(const qint32 &reward_item_hash);
    bool is_reward_item_hash_Set() const;
    bool is_reward_item_hash_Valid() const;

    qint32 getRewardVendorHash() const;
    void setRewardVendorHash(const qint32 &reward_vendor_hash);
    bool is_reward_vendor_hash_Set() const;
    bool is_reward_vendor_hash_Valid() const;

    QMap<QString, qint32> getTokenValues() const;
    void setTokenValues(const QMap<QString, qint32> &token_values);
    bool is_token_values_Set() const;
    bool is_token_values_Valid() const;

    QList<OAIDestiny_Definitions_DestinyFactionVendorDefinition> getVendors() const;
    void setVendors(const QList<OAIDestiny_Definitions_DestinyFactionVendorDefinition> &vendors);
    bool is_vendors_Set() const;
    bool is_vendors_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition m_display_properties;
    bool m_display_properties_isSet;
    bool m_display_properties_isValid;

    qint32 m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    qint32 m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    qint32 m_progression_hash;
    bool m_progression_hash_isSet;
    bool m_progression_hash_isValid;

    bool m_redacted;
    bool m_redacted_isSet;
    bool m_redacted_isValid;

    qint32 m_reward_item_hash;
    bool m_reward_item_hash_isSet;
    bool m_reward_item_hash_isValid;

    qint32 m_reward_vendor_hash;
    bool m_reward_vendor_hash_isSet;
    bool m_reward_vendor_hash_isValid;

    QMap<QString, qint32> m_token_values;
    bool m_token_values_isSet;
    bool m_token_values_isValid;

    QList<OAIDestiny_Definitions_DestinyFactionVendorDefinition> m_vendors;
    bool m_vendors_isSet;
    bool m_vendors_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyFactionDefinition)

#endif // OAIDestiny_Definitions_DestinyFactionDefinition_H
