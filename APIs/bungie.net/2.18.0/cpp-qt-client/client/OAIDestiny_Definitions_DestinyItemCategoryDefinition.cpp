/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyItemCategoryDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyItemCategoryDefinition::OAIDestiny_Definitions_DestinyItemCategoryDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyItemCategoryDefinition::OAIDestiny_Definitions_DestinyItemCategoryDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyItemCategoryDefinition::~OAIDestiny_Definitions_DestinyItemCategoryDefinition() {}

void OAIDestiny_Definitions_DestinyItemCategoryDefinition::initializeModel() {

    m_deprecated_isSet = false;
    m_deprecated_isValid = false;

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_grant_destiny_breaker_type_isSet = false;
    m_grant_destiny_breaker_type_isValid = false;

    m_grant_destiny_class_isSet = false;
    m_grant_destiny_class_isValid = false;

    m_grant_destiny_item_type_isSet = false;
    m_grant_destiny_item_type_isValid = false;

    m_grant_destiny_sub_type_isSet = false;
    m_grant_destiny_sub_type_isValid = false;

    m_group_category_only_isSet = false;
    m_group_category_only_isValid = false;

    m_grouped_category_hashes_isSet = false;
    m_grouped_category_hashes_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_item_type_regex_isSet = false;
    m_item_type_regex_isValid = false;

    m_item_type_regex_not_isSet = false;
    m_item_type_regex_not_isValid = false;

    m_origin_bucket_identifier_isSet = false;
    m_origin_bucket_identifier_isValid = false;

    m_parent_category_hashes_isSet = false;
    m_parent_category_hashes_isValid = false;

    m_plug_category_identifier_isSet = false;
    m_plug_category_identifier_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;

    m_short_title_isSet = false;
    m_short_title_isValid = false;

    m_trait_id_isSet = false;
    m_trait_id_isValid = false;

    m_visible_isSet = false;
    m_visible_isValid = false;
}

void OAIDestiny_Definitions_DestinyItemCategoryDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyItemCategoryDefinition::fromJsonObject(QJsonObject json) {

    m_deprecated_isValid = ::OpenAPI::fromJsonValue(m_deprecated, json[QString("deprecated")]);
    m_deprecated_isSet = !json[QString("deprecated")].isNull() && m_deprecated_isValid;

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_grant_destiny_breaker_type_isValid = ::OpenAPI::fromJsonValue(m_grant_destiny_breaker_type, json[QString("grantDestinyBreakerType")]);
    m_grant_destiny_breaker_type_isSet = !json[QString("grantDestinyBreakerType")].isNull() && m_grant_destiny_breaker_type_isValid;

    m_grant_destiny_class_isValid = ::OpenAPI::fromJsonValue(m_grant_destiny_class, json[QString("grantDestinyClass")]);
    m_grant_destiny_class_isSet = !json[QString("grantDestinyClass")].isNull() && m_grant_destiny_class_isValid;

    m_grant_destiny_item_type_isValid = ::OpenAPI::fromJsonValue(m_grant_destiny_item_type, json[QString("grantDestinyItemType")]);
    m_grant_destiny_item_type_isSet = !json[QString("grantDestinyItemType")].isNull() && m_grant_destiny_item_type_isValid;

    m_grant_destiny_sub_type_isValid = ::OpenAPI::fromJsonValue(m_grant_destiny_sub_type, json[QString("grantDestinySubType")]);
    m_grant_destiny_sub_type_isSet = !json[QString("grantDestinySubType")].isNull() && m_grant_destiny_sub_type_isValid;

    m_group_category_only_isValid = ::OpenAPI::fromJsonValue(m_group_category_only, json[QString("groupCategoryOnly")]);
    m_group_category_only_isSet = !json[QString("groupCategoryOnly")].isNull() && m_group_category_only_isValid;

    m_grouped_category_hashes_isValid = ::OpenAPI::fromJsonValue(m_grouped_category_hashes, json[QString("groupedCategoryHashes")]);
    m_grouped_category_hashes_isSet = !json[QString("groupedCategoryHashes")].isNull() && m_grouped_category_hashes_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_item_type_regex_isValid = ::OpenAPI::fromJsonValue(m_item_type_regex, json[QString("itemTypeRegex")]);
    m_item_type_regex_isSet = !json[QString("itemTypeRegex")].isNull() && m_item_type_regex_isValid;

    m_item_type_regex_not_isValid = ::OpenAPI::fromJsonValue(m_item_type_regex_not, json[QString("itemTypeRegexNot")]);
    m_item_type_regex_not_isSet = !json[QString("itemTypeRegexNot")].isNull() && m_item_type_regex_not_isValid;

    m_origin_bucket_identifier_isValid = ::OpenAPI::fromJsonValue(m_origin_bucket_identifier, json[QString("originBucketIdentifier")]);
    m_origin_bucket_identifier_isSet = !json[QString("originBucketIdentifier")].isNull() && m_origin_bucket_identifier_isValid;

    m_parent_category_hashes_isValid = ::OpenAPI::fromJsonValue(m_parent_category_hashes, json[QString("parentCategoryHashes")]);
    m_parent_category_hashes_isSet = !json[QString("parentCategoryHashes")].isNull() && m_parent_category_hashes_isValid;

    m_plug_category_identifier_isValid = ::OpenAPI::fromJsonValue(m_plug_category_identifier, json[QString("plugCategoryIdentifier")]);
    m_plug_category_identifier_isSet = !json[QString("plugCategoryIdentifier")].isNull() && m_plug_category_identifier_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;

    m_short_title_isValid = ::OpenAPI::fromJsonValue(m_short_title, json[QString("shortTitle")]);
    m_short_title_isSet = !json[QString("shortTitle")].isNull() && m_short_title_isValid;

    m_trait_id_isValid = ::OpenAPI::fromJsonValue(m_trait_id, json[QString("traitId")]);
    m_trait_id_isSet = !json[QString("traitId")].isNull() && m_trait_id_isValid;

    m_visible_isValid = ::OpenAPI::fromJsonValue(m_visible, json[QString("visible")]);
    m_visible_isSet = !json[QString("visible")].isNull() && m_visible_isValid;
}

QString OAIDestiny_Definitions_DestinyItemCategoryDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyItemCategoryDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_deprecated_isSet) {
        obj.insert(QString("deprecated"), ::OpenAPI::toJsonValue(m_deprecated));
    }
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_grant_destiny_breaker_type_isSet) {
        obj.insert(QString("grantDestinyBreakerType"), ::OpenAPI::toJsonValue(m_grant_destiny_breaker_type));
    }
    if (m_grant_destiny_class_isSet) {
        obj.insert(QString("grantDestinyClass"), ::OpenAPI::toJsonValue(m_grant_destiny_class));
    }
    if (m_grant_destiny_item_type_isSet) {
        obj.insert(QString("grantDestinyItemType"), ::OpenAPI::toJsonValue(m_grant_destiny_item_type));
    }
    if (m_grant_destiny_sub_type_isSet) {
        obj.insert(QString("grantDestinySubType"), ::OpenAPI::toJsonValue(m_grant_destiny_sub_type));
    }
    if (m_group_category_only_isSet) {
        obj.insert(QString("groupCategoryOnly"), ::OpenAPI::toJsonValue(m_group_category_only));
    }
    if (m_grouped_category_hashes.size() > 0) {
        obj.insert(QString("groupedCategoryHashes"), ::OpenAPI::toJsonValue(m_grouped_category_hashes));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_item_type_regex_isSet) {
        obj.insert(QString("itemTypeRegex"), ::OpenAPI::toJsonValue(m_item_type_regex));
    }
    if (m_item_type_regex_not_isSet) {
        obj.insert(QString("itemTypeRegexNot"), ::OpenAPI::toJsonValue(m_item_type_regex_not));
    }
    if (m_origin_bucket_identifier_isSet) {
        obj.insert(QString("originBucketIdentifier"), ::OpenAPI::toJsonValue(m_origin_bucket_identifier));
    }
    if (m_parent_category_hashes.size() > 0) {
        obj.insert(QString("parentCategoryHashes"), ::OpenAPI::toJsonValue(m_parent_category_hashes));
    }
    if (m_plug_category_identifier_isSet) {
        obj.insert(QString("plugCategoryIdentifier"), ::OpenAPI::toJsonValue(m_plug_category_identifier));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    if (m_short_title_isSet) {
        obj.insert(QString("shortTitle"), ::OpenAPI::toJsonValue(m_short_title));
    }
    if (m_trait_id_isSet) {
        obj.insert(QString("traitId"), ::OpenAPI::toJsonValue(m_trait_id));
    }
    if (m_visible_isSet) {
        obj.insert(QString("visible"), ::OpenAPI::toJsonValue(m_visible));
    }
    return obj;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::isDeprecated() const {
    return m_deprecated;
}
void OAIDestiny_Definitions_DestinyItemCategoryDefinition::setDeprecated(const bool &deprecated) {
    m_deprecated = deprecated;
    m_deprecated_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_deprecated_Set() const{
    return m_deprecated_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_deprecated_Valid() const{
    return m_deprecated_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_DestinyItemCategoryDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_DestinyItemCategoryDefinition::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

qint32 OAIDestiny_Definitions_DestinyItemCategoryDefinition::getGrantDestinyBreakerType() const {
    return m_grant_destiny_breaker_type;
}
void OAIDestiny_Definitions_DestinyItemCategoryDefinition::setGrantDestinyBreakerType(const qint32 &grant_destiny_breaker_type) {
    m_grant_destiny_breaker_type = grant_destiny_breaker_type;
    m_grant_destiny_breaker_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_grant_destiny_breaker_type_Set() const{
    return m_grant_destiny_breaker_type_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_grant_destiny_breaker_type_Valid() const{
    return m_grant_destiny_breaker_type_isValid;
}

qint32 OAIDestiny_Definitions_DestinyItemCategoryDefinition::getGrantDestinyClass() const {
    return m_grant_destiny_class;
}
void OAIDestiny_Definitions_DestinyItemCategoryDefinition::setGrantDestinyClass(const qint32 &grant_destiny_class) {
    m_grant_destiny_class = grant_destiny_class;
    m_grant_destiny_class_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_grant_destiny_class_Set() const{
    return m_grant_destiny_class_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_grant_destiny_class_Valid() const{
    return m_grant_destiny_class_isValid;
}

qint32 OAIDestiny_Definitions_DestinyItemCategoryDefinition::getGrantDestinyItemType() const {
    return m_grant_destiny_item_type;
}
void OAIDestiny_Definitions_DestinyItemCategoryDefinition::setGrantDestinyItemType(const qint32 &grant_destiny_item_type) {
    m_grant_destiny_item_type = grant_destiny_item_type;
    m_grant_destiny_item_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_grant_destiny_item_type_Set() const{
    return m_grant_destiny_item_type_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_grant_destiny_item_type_Valid() const{
    return m_grant_destiny_item_type_isValid;
}

qint32 OAIDestiny_Definitions_DestinyItemCategoryDefinition::getGrantDestinySubType() const {
    return m_grant_destiny_sub_type;
}
void OAIDestiny_Definitions_DestinyItemCategoryDefinition::setGrantDestinySubType(const qint32 &grant_destiny_sub_type) {
    m_grant_destiny_sub_type = grant_destiny_sub_type;
    m_grant_destiny_sub_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_grant_destiny_sub_type_Set() const{
    return m_grant_destiny_sub_type_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_grant_destiny_sub_type_Valid() const{
    return m_grant_destiny_sub_type_isValid;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::isGroupCategoryOnly() const {
    return m_group_category_only;
}
void OAIDestiny_Definitions_DestinyItemCategoryDefinition::setGroupCategoryOnly(const bool &group_category_only) {
    m_group_category_only = group_category_only;
    m_group_category_only_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_group_category_only_Set() const{
    return m_group_category_only_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_group_category_only_Valid() const{
    return m_group_category_only_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyItemCategoryDefinition::getGroupedCategoryHashes() const {
    return m_grouped_category_hashes;
}
void OAIDestiny_Definitions_DestinyItemCategoryDefinition::setGroupedCategoryHashes(const QList<qint32> &grouped_category_hashes) {
    m_grouped_category_hashes = grouped_category_hashes;
    m_grouped_category_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_grouped_category_hashes_Set() const{
    return m_grouped_category_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_grouped_category_hashes_Valid() const{
    return m_grouped_category_hashes_isValid;
}

qint32 OAIDestiny_Definitions_DestinyItemCategoryDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_DestinyItemCategoryDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyItemCategoryDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_DestinyItemCategoryDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_index_Valid() const{
    return m_index_isValid;
}

QString OAIDestiny_Definitions_DestinyItemCategoryDefinition::getItemTypeRegex() const {
    return m_item_type_regex;
}
void OAIDestiny_Definitions_DestinyItemCategoryDefinition::setItemTypeRegex(const QString &item_type_regex) {
    m_item_type_regex = item_type_regex;
    m_item_type_regex_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_item_type_regex_Set() const{
    return m_item_type_regex_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_item_type_regex_Valid() const{
    return m_item_type_regex_isValid;
}

QString OAIDestiny_Definitions_DestinyItemCategoryDefinition::getItemTypeRegexNot() const {
    return m_item_type_regex_not;
}
void OAIDestiny_Definitions_DestinyItemCategoryDefinition::setItemTypeRegexNot(const QString &item_type_regex_not) {
    m_item_type_regex_not = item_type_regex_not;
    m_item_type_regex_not_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_item_type_regex_not_Set() const{
    return m_item_type_regex_not_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_item_type_regex_not_Valid() const{
    return m_item_type_regex_not_isValid;
}

QString OAIDestiny_Definitions_DestinyItemCategoryDefinition::getOriginBucketIdentifier() const {
    return m_origin_bucket_identifier;
}
void OAIDestiny_Definitions_DestinyItemCategoryDefinition::setOriginBucketIdentifier(const QString &origin_bucket_identifier) {
    m_origin_bucket_identifier = origin_bucket_identifier;
    m_origin_bucket_identifier_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_origin_bucket_identifier_Set() const{
    return m_origin_bucket_identifier_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_origin_bucket_identifier_Valid() const{
    return m_origin_bucket_identifier_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyItemCategoryDefinition::getParentCategoryHashes() const {
    return m_parent_category_hashes;
}
void OAIDestiny_Definitions_DestinyItemCategoryDefinition::setParentCategoryHashes(const QList<qint32> &parent_category_hashes) {
    m_parent_category_hashes = parent_category_hashes;
    m_parent_category_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_parent_category_hashes_Set() const{
    return m_parent_category_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_parent_category_hashes_Valid() const{
    return m_parent_category_hashes_isValid;
}

QString OAIDestiny_Definitions_DestinyItemCategoryDefinition::getPlugCategoryIdentifier() const {
    return m_plug_category_identifier;
}
void OAIDestiny_Definitions_DestinyItemCategoryDefinition::setPlugCategoryIdentifier(const QString &plug_category_identifier) {
    m_plug_category_identifier = plug_category_identifier;
    m_plug_category_identifier_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_plug_category_identifier_Set() const{
    return m_plug_category_identifier_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_plug_category_identifier_Valid() const{
    return m_plug_category_identifier_isValid;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_DestinyItemCategoryDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

QString OAIDestiny_Definitions_DestinyItemCategoryDefinition::getShortTitle() const {
    return m_short_title;
}
void OAIDestiny_Definitions_DestinyItemCategoryDefinition::setShortTitle(const QString &short_title) {
    m_short_title = short_title;
    m_short_title_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_short_title_Set() const{
    return m_short_title_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_short_title_Valid() const{
    return m_short_title_isValid;
}

QString OAIDestiny_Definitions_DestinyItemCategoryDefinition::getTraitId() const {
    return m_trait_id;
}
void OAIDestiny_Definitions_DestinyItemCategoryDefinition::setTraitId(const QString &trait_id) {
    m_trait_id = trait_id;
    m_trait_id_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_trait_id_Set() const{
    return m_trait_id_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_trait_id_Valid() const{
    return m_trait_id_isValid;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::isVisible() const {
    return m_visible;
}
void OAIDestiny_Definitions_DestinyItemCategoryDefinition::setVisible(const bool &visible) {
    m_visible = visible;
    m_visible_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_visible_Set() const{
    return m_visible_isSet;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::is_visible_Valid() const{
    return m_visible_isValid;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deprecated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_destiny_breaker_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_destiny_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_destiny_item_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_destiny_sub_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_category_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grouped_category_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_type_regex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_type_regex_not_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_bucket_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_category_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_plug_category_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trait_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyItemCategoryDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
