/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyVendorItemDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyVendorItemDefinition::OAIDestiny_Definitions_DestinyVendorItemDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyVendorItemDefinition::OAIDestiny_Definitions_DestinyVendorItemDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyVendorItemDefinition::~OAIDestiny_Definitions_DestinyVendorItemDefinition() {}

void OAIDestiny_Definitions_DestinyVendorItemDefinition::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_category_index_isSet = false;
    m_category_index_isValid = false;

    m_creation_levels_isSet = false;
    m_creation_levels_isValid = false;

    m_currencies_isSet = false;
    m_currencies_isValid = false;

    m_display_category_isSet = false;
    m_display_category_isValid = false;

    m_display_category_index_isSet = false;
    m_display_category_index_isValid = false;

    m_exclusivity_isSet = false;
    m_exclusivity_isValid = false;

    m_expiration_tooltip_isSet = false;
    m_expiration_tooltip_isValid = false;

    m_failure_indexes_isSet = false;
    m_failure_indexes_isValid = false;

    m_inventory_bucket_hash_isSet = false;
    m_inventory_bucket_hash_isValid = false;

    m_is_crm_isSet = false;
    m_is_crm_isValid = false;

    m_is_offer_isSet = false;
    m_is_offer_isValid = false;

    m_item_hash_isSet = false;
    m_item_hash_isValid = false;

    m_maximum_level_isSet = false;
    m_maximum_level_isValid = false;

    m_minimum_level_isSet = false;
    m_minimum_level_isValid = false;

    m_original_category_index_isSet = false;
    m_original_category_index_isValid = false;

    m_purchasable_scope_isSet = false;
    m_purchasable_scope_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_redirect_to_sale_indexes_isSet = false;
    m_redirect_to_sale_indexes_isValid = false;

    m_refund_policy_isSet = false;
    m_refund_policy_isValid = false;

    m_refund_time_limit_isSet = false;
    m_refund_time_limit_isValid = false;

    m_socket_overrides_isSet = false;
    m_socket_overrides_isValid = false;

    m_sort_value_isSet = false;
    m_sort_value_isValid = false;

    m_unpurchasable_isSet = false;
    m_unpurchasable_isValid = false;

    m_vendor_item_index_isSet = false;
    m_vendor_item_index_isValid = false;

    m_visibility_scope_isSet = false;
    m_visibility_scope_isValid = false;
}

void OAIDestiny_Definitions_DestinyVendorItemDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyVendorItemDefinition::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_category_index_isValid = ::OpenAPI::fromJsonValue(m_category_index, json[QString("categoryIndex")]);
    m_category_index_isSet = !json[QString("categoryIndex")].isNull() && m_category_index_isValid;

    m_creation_levels_isValid = ::OpenAPI::fromJsonValue(m_creation_levels, json[QString("creationLevels")]);
    m_creation_levels_isSet = !json[QString("creationLevels")].isNull() && m_creation_levels_isValid;

    m_currencies_isValid = ::OpenAPI::fromJsonValue(m_currencies, json[QString("currencies")]);
    m_currencies_isSet = !json[QString("currencies")].isNull() && m_currencies_isValid;

    m_display_category_isValid = ::OpenAPI::fromJsonValue(m_display_category, json[QString("displayCategory")]);
    m_display_category_isSet = !json[QString("displayCategory")].isNull() && m_display_category_isValid;

    m_display_category_index_isValid = ::OpenAPI::fromJsonValue(m_display_category_index, json[QString("displayCategoryIndex")]);
    m_display_category_index_isSet = !json[QString("displayCategoryIndex")].isNull() && m_display_category_index_isValid;

    m_exclusivity_isValid = ::OpenAPI::fromJsonValue(m_exclusivity, json[QString("exclusivity")]);
    m_exclusivity_isSet = !json[QString("exclusivity")].isNull() && m_exclusivity_isValid;

    m_expiration_tooltip_isValid = ::OpenAPI::fromJsonValue(m_expiration_tooltip, json[QString("expirationTooltip")]);
    m_expiration_tooltip_isSet = !json[QString("expirationTooltip")].isNull() && m_expiration_tooltip_isValid;

    m_failure_indexes_isValid = ::OpenAPI::fromJsonValue(m_failure_indexes, json[QString("failureIndexes")]);
    m_failure_indexes_isSet = !json[QString("failureIndexes")].isNull() && m_failure_indexes_isValid;

    m_inventory_bucket_hash_isValid = ::OpenAPI::fromJsonValue(m_inventory_bucket_hash, json[QString("inventoryBucketHash")]);
    m_inventory_bucket_hash_isSet = !json[QString("inventoryBucketHash")].isNull() && m_inventory_bucket_hash_isValid;

    m_is_crm_isValid = ::OpenAPI::fromJsonValue(m_is_crm, json[QString("isCrm")]);
    m_is_crm_isSet = !json[QString("isCrm")].isNull() && m_is_crm_isValid;

    m_is_offer_isValid = ::OpenAPI::fromJsonValue(m_is_offer, json[QString("isOffer")]);
    m_is_offer_isSet = !json[QString("isOffer")].isNull() && m_is_offer_isValid;

    m_item_hash_isValid = ::OpenAPI::fromJsonValue(m_item_hash, json[QString("itemHash")]);
    m_item_hash_isSet = !json[QString("itemHash")].isNull() && m_item_hash_isValid;

    m_maximum_level_isValid = ::OpenAPI::fromJsonValue(m_maximum_level, json[QString("maximumLevel")]);
    m_maximum_level_isSet = !json[QString("maximumLevel")].isNull() && m_maximum_level_isValid;

    m_minimum_level_isValid = ::OpenAPI::fromJsonValue(m_minimum_level, json[QString("minimumLevel")]);
    m_minimum_level_isSet = !json[QString("minimumLevel")].isNull() && m_minimum_level_isValid;

    m_original_category_index_isValid = ::OpenAPI::fromJsonValue(m_original_category_index, json[QString("originalCategoryIndex")]);
    m_original_category_index_isSet = !json[QString("originalCategoryIndex")].isNull() && m_original_category_index_isValid;

    m_purchasable_scope_isValid = ::OpenAPI::fromJsonValue(m_purchasable_scope, json[QString("purchasableScope")]);
    m_purchasable_scope_isSet = !json[QString("purchasableScope")].isNull() && m_purchasable_scope_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_redirect_to_sale_indexes_isValid = ::OpenAPI::fromJsonValue(m_redirect_to_sale_indexes, json[QString("redirectToSaleIndexes")]);
    m_redirect_to_sale_indexes_isSet = !json[QString("redirectToSaleIndexes")].isNull() && m_redirect_to_sale_indexes_isValid;

    m_refund_policy_isValid = ::OpenAPI::fromJsonValue(m_refund_policy, json[QString("refundPolicy")]);
    m_refund_policy_isSet = !json[QString("refundPolicy")].isNull() && m_refund_policy_isValid;

    m_refund_time_limit_isValid = ::OpenAPI::fromJsonValue(m_refund_time_limit, json[QString("refundTimeLimit")]);
    m_refund_time_limit_isSet = !json[QString("refundTimeLimit")].isNull() && m_refund_time_limit_isValid;

    m_socket_overrides_isValid = ::OpenAPI::fromJsonValue(m_socket_overrides, json[QString("socketOverrides")]);
    m_socket_overrides_isSet = !json[QString("socketOverrides")].isNull() && m_socket_overrides_isValid;

    m_sort_value_isValid = ::OpenAPI::fromJsonValue(m_sort_value, json[QString("sortValue")]);
    m_sort_value_isSet = !json[QString("sortValue")].isNull() && m_sort_value_isValid;

    m_unpurchasable_isValid = ::OpenAPI::fromJsonValue(m_unpurchasable, json[QString("unpurchasable")]);
    m_unpurchasable_isSet = !json[QString("unpurchasable")].isNull() && m_unpurchasable_isValid;

    m_vendor_item_index_isValid = ::OpenAPI::fromJsonValue(m_vendor_item_index, json[QString("vendorItemIndex")]);
    m_vendor_item_index_isSet = !json[QString("vendorItemIndex")].isNull() && m_vendor_item_index_isValid;

    m_visibility_scope_isValid = ::OpenAPI::fromJsonValue(m_visibility_scope, json[QString("visibilityScope")]);
    m_visibility_scope_isSet = !json[QString("visibilityScope")].isNull() && m_visibility_scope_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorItemDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyVendorItemDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_category_index_isSet) {
        obj.insert(QString("categoryIndex"), ::OpenAPI::toJsonValue(m_category_index));
    }
    if (m_creation_levels.size() > 0) {
        obj.insert(QString("creationLevels"), ::OpenAPI::toJsonValue(m_creation_levels));
    }
    if (m_currencies.size() > 0) {
        obj.insert(QString("currencies"), ::OpenAPI::toJsonValue(m_currencies));
    }
    if (m_display_category_isSet) {
        obj.insert(QString("displayCategory"), ::OpenAPI::toJsonValue(m_display_category));
    }
    if (m_display_category_index_isSet) {
        obj.insert(QString("displayCategoryIndex"), ::OpenAPI::toJsonValue(m_display_category_index));
    }
    if (m_exclusivity_isSet) {
        obj.insert(QString("exclusivity"), ::OpenAPI::toJsonValue(m_exclusivity));
    }
    if (m_expiration_tooltip_isSet) {
        obj.insert(QString("expirationTooltip"), ::OpenAPI::toJsonValue(m_expiration_tooltip));
    }
    if (m_failure_indexes.size() > 0) {
        obj.insert(QString("failureIndexes"), ::OpenAPI::toJsonValue(m_failure_indexes));
    }
    if (m_inventory_bucket_hash_isSet) {
        obj.insert(QString("inventoryBucketHash"), ::OpenAPI::toJsonValue(m_inventory_bucket_hash));
    }
    if (m_is_crm_isSet) {
        obj.insert(QString("isCrm"), ::OpenAPI::toJsonValue(m_is_crm));
    }
    if (m_is_offer_isSet) {
        obj.insert(QString("isOffer"), ::OpenAPI::toJsonValue(m_is_offer));
    }
    if (m_item_hash_isSet) {
        obj.insert(QString("itemHash"), ::OpenAPI::toJsonValue(m_item_hash));
    }
    if (m_maximum_level_isSet) {
        obj.insert(QString("maximumLevel"), ::OpenAPI::toJsonValue(m_maximum_level));
    }
    if (m_minimum_level_isSet) {
        obj.insert(QString("minimumLevel"), ::OpenAPI::toJsonValue(m_minimum_level));
    }
    if (m_original_category_index_isSet) {
        obj.insert(QString("originalCategoryIndex"), ::OpenAPI::toJsonValue(m_original_category_index));
    }
    if (m_purchasable_scope_isSet) {
        obj.insert(QString("purchasableScope"), ::OpenAPI::toJsonValue(m_purchasable_scope));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_redirect_to_sale_indexes.size() > 0) {
        obj.insert(QString("redirectToSaleIndexes"), ::OpenAPI::toJsonValue(m_redirect_to_sale_indexes));
    }
    if (m_refund_policy_isSet) {
        obj.insert(QString("refundPolicy"), ::OpenAPI::toJsonValue(m_refund_policy));
    }
    if (m_refund_time_limit_isSet) {
        obj.insert(QString("refundTimeLimit"), ::OpenAPI::toJsonValue(m_refund_time_limit));
    }
    if (m_socket_overrides.size() > 0) {
        obj.insert(QString("socketOverrides"), ::OpenAPI::toJsonValue(m_socket_overrides));
    }
    if (m_sort_value_isSet) {
        obj.insert(QString("sortValue"), ::OpenAPI::toJsonValue(m_sort_value));
    }
    if (m_unpurchasable_isSet) {
        obj.insert(QString("unpurchasable"), ::OpenAPI::toJsonValue(m_unpurchasable));
    }
    if (m_vendor_item_index_isSet) {
        obj.insert(QString("vendorItemIndex"), ::OpenAPI::toJsonValue(m_vendor_item_index));
    }
    if (m_visibility_scope_isSet) {
        obj.insert(QString("visibilityScope"), ::OpenAPI::toJsonValue(m_visibility_scope));
    }
    return obj;
}

OAIDestiny_Definitions_DestinyVendorSaleItemActionBlockDefinition OAIDestiny_Definitions_DestinyVendorItemDefinition::getAction() const {
    return m_action;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setAction(const OAIDestiny_Definitions_DestinyVendorSaleItemActionBlockDefinition &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_action_Set() const{
    return m_action_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_action_Valid() const{
    return m_action_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorItemDefinition::getCategoryIndex() const {
    return m_category_index;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setCategoryIndex(const qint32 &category_index) {
    m_category_index = category_index;
    m_category_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_category_index_Set() const{
    return m_category_index_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_category_index_Valid() const{
    return m_category_index_isValid;
}

QList<OAIDestiny_Definitions_DestinyItemCreationEntryLevelDefinition> OAIDestiny_Definitions_DestinyVendorItemDefinition::getCreationLevels() const {
    return m_creation_levels;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setCreationLevels(const QList<OAIDestiny_Definitions_DestinyItemCreationEntryLevelDefinition> &creation_levels) {
    m_creation_levels = creation_levels;
    m_creation_levels_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_creation_levels_Set() const{
    return m_creation_levels_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_creation_levels_Valid() const{
    return m_creation_levels_isValid;
}

QList<OAIDestiny_Definitions_DestinyVendorItemQuantity> OAIDestiny_Definitions_DestinyVendorItemDefinition::getCurrencies() const {
    return m_currencies;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setCurrencies(const QList<OAIDestiny_Definitions_DestinyVendorItemQuantity> &currencies) {
    m_currencies = currencies;
    m_currencies_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_currencies_Set() const{
    return m_currencies_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_currencies_Valid() const{
    return m_currencies_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorItemDefinition::getDisplayCategory() const {
    return m_display_category;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setDisplayCategory(const QString &display_category) {
    m_display_category = display_category;
    m_display_category_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_display_category_Set() const{
    return m_display_category_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_display_category_Valid() const{
    return m_display_category_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorItemDefinition::getDisplayCategoryIndex() const {
    return m_display_category_index;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setDisplayCategoryIndex(const qint32 &display_category_index) {
    m_display_category_index = display_category_index;
    m_display_category_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_display_category_index_Set() const{
    return m_display_category_index_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_display_category_index_Valid() const{
    return m_display_category_index_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorItemDefinition::getExclusivity() const {
    return m_exclusivity;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setExclusivity(const qint32 &exclusivity) {
    m_exclusivity = exclusivity;
    m_exclusivity_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_exclusivity_Set() const{
    return m_exclusivity_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_exclusivity_Valid() const{
    return m_exclusivity_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorItemDefinition::getExpirationTooltip() const {
    return m_expiration_tooltip;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setExpirationTooltip(const QString &expiration_tooltip) {
    m_expiration_tooltip = expiration_tooltip;
    m_expiration_tooltip_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_expiration_tooltip_Set() const{
    return m_expiration_tooltip_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_expiration_tooltip_Valid() const{
    return m_expiration_tooltip_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyVendorItemDefinition::getFailureIndexes() const {
    return m_failure_indexes;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setFailureIndexes(const QList<qint32> &failure_indexes) {
    m_failure_indexes = failure_indexes;
    m_failure_indexes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_failure_indexes_Set() const{
    return m_failure_indexes_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_failure_indexes_Valid() const{
    return m_failure_indexes_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorItemDefinition::getInventoryBucketHash() const {
    return m_inventory_bucket_hash;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setInventoryBucketHash(const qint32 &inventory_bucket_hash) {
    m_inventory_bucket_hash = inventory_bucket_hash;
    m_inventory_bucket_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_inventory_bucket_hash_Set() const{
    return m_inventory_bucket_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_inventory_bucket_hash_Valid() const{
    return m_inventory_bucket_hash_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::isIsCrm() const {
    return m_is_crm;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setIsCrm(const bool &is_crm) {
    m_is_crm = is_crm;
    m_is_crm_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_is_crm_Set() const{
    return m_is_crm_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_is_crm_Valid() const{
    return m_is_crm_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::isIsOffer() const {
    return m_is_offer;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setIsOffer(const bool &is_offer) {
    m_is_offer = is_offer;
    m_is_offer_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_is_offer_Set() const{
    return m_is_offer_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_is_offer_Valid() const{
    return m_is_offer_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorItemDefinition::getItemHash() const {
    return m_item_hash;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setItemHash(const qint32 &item_hash) {
    m_item_hash = item_hash;
    m_item_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_item_hash_Set() const{
    return m_item_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_item_hash_Valid() const{
    return m_item_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorItemDefinition::getMaximumLevel() const {
    return m_maximum_level;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setMaximumLevel(const qint32 &maximum_level) {
    m_maximum_level = maximum_level;
    m_maximum_level_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_maximum_level_Set() const{
    return m_maximum_level_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_maximum_level_Valid() const{
    return m_maximum_level_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorItemDefinition::getMinimumLevel() const {
    return m_minimum_level;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setMinimumLevel(const qint32 &minimum_level) {
    m_minimum_level = minimum_level;
    m_minimum_level_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_minimum_level_Set() const{
    return m_minimum_level_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_minimum_level_Valid() const{
    return m_minimum_level_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorItemDefinition::getOriginalCategoryIndex() const {
    return m_original_category_index;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setOriginalCategoryIndex(const qint32 &original_category_index) {
    m_original_category_index = original_category_index;
    m_original_category_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_original_category_index_Set() const{
    return m_original_category_index_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_original_category_index_Valid() const{
    return m_original_category_index_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorItemDefinition::getPurchasableScope() const {
    return m_purchasable_scope;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setPurchasableScope(const qint32 &purchasable_scope) {
    m_purchasable_scope = purchasable_scope;
    m_purchasable_scope_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_purchasable_scope_Set() const{
    return m_purchasable_scope_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_purchasable_scope_Valid() const{
    return m_purchasable_scope_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorItemDefinition::getQuantity() const {
    return m_quantity;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyVendorItemDefinition::getRedirectToSaleIndexes() const {
    return m_redirect_to_sale_indexes;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setRedirectToSaleIndexes(const QList<qint32> &redirect_to_sale_indexes) {
    m_redirect_to_sale_indexes = redirect_to_sale_indexes;
    m_redirect_to_sale_indexes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_redirect_to_sale_indexes_Set() const{
    return m_redirect_to_sale_indexes_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_redirect_to_sale_indexes_Valid() const{
    return m_redirect_to_sale_indexes_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorItemDefinition::getRefundPolicy() const {
    return m_refund_policy;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setRefundPolicy(const qint32 &refund_policy) {
    m_refund_policy = refund_policy;
    m_refund_policy_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_refund_policy_Set() const{
    return m_refund_policy_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_refund_policy_Valid() const{
    return m_refund_policy_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorItemDefinition::getRefundTimeLimit() const {
    return m_refund_time_limit;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setRefundTimeLimit(const qint32 &refund_time_limit) {
    m_refund_time_limit = refund_time_limit;
    m_refund_time_limit_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_refund_time_limit_Set() const{
    return m_refund_time_limit_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_refund_time_limit_Valid() const{
    return m_refund_time_limit_isValid;
}

QList<OAIDestiny_Definitions_DestinyVendorItemSocketOverride> OAIDestiny_Definitions_DestinyVendorItemDefinition::getSocketOverrides() const {
    return m_socket_overrides;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setSocketOverrides(const QList<OAIDestiny_Definitions_DestinyVendorItemSocketOverride> &socket_overrides) {
    m_socket_overrides = socket_overrides;
    m_socket_overrides_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_socket_overrides_Set() const{
    return m_socket_overrides_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_socket_overrides_Valid() const{
    return m_socket_overrides_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorItemDefinition::getSortValue() const {
    return m_sort_value;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setSortValue(const qint32 &sort_value) {
    m_sort_value = sort_value;
    m_sort_value_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_sort_value_Set() const{
    return m_sort_value_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_sort_value_Valid() const{
    return m_sort_value_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::isUnpurchasable() const {
    return m_unpurchasable;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setUnpurchasable(const bool &unpurchasable) {
    m_unpurchasable = unpurchasable;
    m_unpurchasable_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_unpurchasable_Set() const{
    return m_unpurchasable_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_unpurchasable_Valid() const{
    return m_unpurchasable_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorItemDefinition::getVendorItemIndex() const {
    return m_vendor_item_index;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setVendorItemIndex(const qint32 &vendor_item_index) {
    m_vendor_item_index = vendor_item_index;
    m_vendor_item_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_vendor_item_index_Set() const{
    return m_vendor_item_index_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_vendor_item_index_Valid() const{
    return m_vendor_item_index_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorItemDefinition::getVisibilityScope() const {
    return m_visibility_scope;
}
void OAIDestiny_Definitions_DestinyVendorItemDefinition::setVisibilityScope(const qint32 &visibility_scope) {
    m_visibility_scope = visibility_scope;
    m_visibility_scope_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_visibility_scope_Set() const{
    return m_visibility_scope_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::is_visibility_scope_Valid() const{
    return m_visibility_scope_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_levels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_currencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_category_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusivity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_tooltip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_indexes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_bucket_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_crm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_offer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_category_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchasable_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_to_sale_indexes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_time_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_socket_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unpurchasable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_item_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyVendorItemDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
