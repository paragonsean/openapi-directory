/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFireteam_FireteamMember.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFireteam_FireteamMember::OAIFireteam_FireteamMember(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFireteam_FireteamMember::OAIFireteam_FireteamMember() {
    this->initializeModel();
}

OAIFireteam_FireteamMember::~OAIFireteam_FireteamMember() {}

void OAIFireteam_FireteamMember::initializeModel() {

    m_bungie_net_user_info_isSet = false;
    m_bungie_net_user_info_isValid = false;

    m_character_id_isSet = false;
    m_character_id_isValid = false;

    m_date_joined_isSet = false;
    m_date_joined_isValid = false;

    m_destiny_user_info_isSet = false;
    m_destiny_user_info_isValid = false;

    m_has_microphone_isSet = false;
    m_has_microphone_isValid = false;

    m_last_platform_invite_attempt_date_isSet = false;
    m_last_platform_invite_attempt_date_isValid = false;

    m_last_platform_invite_attempt_result_isSet = false;
    m_last_platform_invite_attempt_result_isValid = false;
}

void OAIFireteam_FireteamMember::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFireteam_FireteamMember::fromJsonObject(QJsonObject json) {

    m_bungie_net_user_info_isValid = ::OpenAPI::fromJsonValue(m_bungie_net_user_info, json[QString("bungieNetUserInfo")]);
    m_bungie_net_user_info_isSet = !json[QString("bungieNetUserInfo")].isNull() && m_bungie_net_user_info_isValid;

    m_character_id_isValid = ::OpenAPI::fromJsonValue(m_character_id, json[QString("characterId")]);
    m_character_id_isSet = !json[QString("characterId")].isNull() && m_character_id_isValid;

    m_date_joined_isValid = ::OpenAPI::fromJsonValue(m_date_joined, json[QString("dateJoined")]);
    m_date_joined_isSet = !json[QString("dateJoined")].isNull() && m_date_joined_isValid;

    m_destiny_user_info_isValid = ::OpenAPI::fromJsonValue(m_destiny_user_info, json[QString("destinyUserInfo")]);
    m_destiny_user_info_isSet = !json[QString("destinyUserInfo")].isNull() && m_destiny_user_info_isValid;

    m_has_microphone_isValid = ::OpenAPI::fromJsonValue(m_has_microphone, json[QString("hasMicrophone")]);
    m_has_microphone_isSet = !json[QString("hasMicrophone")].isNull() && m_has_microphone_isValid;

    m_last_platform_invite_attempt_date_isValid = ::OpenAPI::fromJsonValue(m_last_platform_invite_attempt_date, json[QString("lastPlatformInviteAttemptDate")]);
    m_last_platform_invite_attempt_date_isSet = !json[QString("lastPlatformInviteAttemptDate")].isNull() && m_last_platform_invite_attempt_date_isValid;

    m_last_platform_invite_attempt_result_isValid = ::OpenAPI::fromJsonValue(m_last_platform_invite_attempt_result, json[QString("lastPlatformInviteAttemptResult")]);
    m_last_platform_invite_attempt_result_isSet = !json[QString("lastPlatformInviteAttemptResult")].isNull() && m_last_platform_invite_attempt_result_isValid;
}

QString OAIFireteam_FireteamMember::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFireteam_FireteamMember::asJsonObject() const {
    QJsonObject obj;
    if (m_bungie_net_user_info.isSet()) {
        obj.insert(QString("bungieNetUserInfo"), ::OpenAPI::toJsonValue(m_bungie_net_user_info));
    }
    if (m_character_id_isSet) {
        obj.insert(QString("characterId"), ::OpenAPI::toJsonValue(m_character_id));
    }
    if (m_date_joined_isSet) {
        obj.insert(QString("dateJoined"), ::OpenAPI::toJsonValue(m_date_joined));
    }
    if (m_destiny_user_info.isSet()) {
        obj.insert(QString("destinyUserInfo"), ::OpenAPI::toJsonValue(m_destiny_user_info));
    }
    if (m_has_microphone_isSet) {
        obj.insert(QString("hasMicrophone"), ::OpenAPI::toJsonValue(m_has_microphone));
    }
    if (m_last_platform_invite_attempt_date_isSet) {
        obj.insert(QString("lastPlatformInviteAttemptDate"), ::OpenAPI::toJsonValue(m_last_platform_invite_attempt_date));
    }
    if (m_last_platform_invite_attempt_result_isSet) {
        obj.insert(QString("lastPlatformInviteAttemptResult"), ::OpenAPI::toJsonValue(m_last_platform_invite_attempt_result));
    }
    return obj;
}

OAIUser_UserInfoCard OAIFireteam_FireteamMember::getBungieNetUserInfo() const {
    return m_bungie_net_user_info;
}
void OAIFireteam_FireteamMember::setBungieNetUserInfo(const OAIUser_UserInfoCard &bungie_net_user_info) {
    m_bungie_net_user_info = bungie_net_user_info;
    m_bungie_net_user_info_isSet = true;
}

bool OAIFireteam_FireteamMember::is_bungie_net_user_info_Set() const{
    return m_bungie_net_user_info_isSet;
}

bool OAIFireteam_FireteamMember::is_bungie_net_user_info_Valid() const{
    return m_bungie_net_user_info_isValid;
}

qint64 OAIFireteam_FireteamMember::getCharacterId() const {
    return m_character_id;
}
void OAIFireteam_FireteamMember::setCharacterId(const qint64 &character_id) {
    m_character_id = character_id;
    m_character_id_isSet = true;
}

bool OAIFireteam_FireteamMember::is_character_id_Set() const{
    return m_character_id_isSet;
}

bool OAIFireteam_FireteamMember::is_character_id_Valid() const{
    return m_character_id_isValid;
}

QDateTime OAIFireteam_FireteamMember::getDateJoined() const {
    return m_date_joined;
}
void OAIFireteam_FireteamMember::setDateJoined(const QDateTime &date_joined) {
    m_date_joined = date_joined;
    m_date_joined_isSet = true;
}

bool OAIFireteam_FireteamMember::is_date_joined_Set() const{
    return m_date_joined_isSet;
}

bool OAIFireteam_FireteamMember::is_date_joined_Valid() const{
    return m_date_joined_isValid;
}

OAIFireteam_FireteamUserInfoCard OAIFireteam_FireteamMember::getDestinyUserInfo() const {
    return m_destiny_user_info;
}
void OAIFireteam_FireteamMember::setDestinyUserInfo(const OAIFireteam_FireteamUserInfoCard &destiny_user_info) {
    m_destiny_user_info = destiny_user_info;
    m_destiny_user_info_isSet = true;
}

bool OAIFireteam_FireteamMember::is_destiny_user_info_Set() const{
    return m_destiny_user_info_isSet;
}

bool OAIFireteam_FireteamMember::is_destiny_user_info_Valid() const{
    return m_destiny_user_info_isValid;
}

bool OAIFireteam_FireteamMember::isHasMicrophone() const {
    return m_has_microphone;
}
void OAIFireteam_FireteamMember::setHasMicrophone(const bool &has_microphone) {
    m_has_microphone = has_microphone;
    m_has_microphone_isSet = true;
}

bool OAIFireteam_FireteamMember::is_has_microphone_Set() const{
    return m_has_microphone_isSet;
}

bool OAIFireteam_FireteamMember::is_has_microphone_Valid() const{
    return m_has_microphone_isValid;
}

QDateTime OAIFireteam_FireteamMember::getLastPlatformInviteAttemptDate() const {
    return m_last_platform_invite_attempt_date;
}
void OAIFireteam_FireteamMember::setLastPlatformInviteAttemptDate(const QDateTime &last_platform_invite_attempt_date) {
    m_last_platform_invite_attempt_date = last_platform_invite_attempt_date;
    m_last_platform_invite_attempt_date_isSet = true;
}

bool OAIFireteam_FireteamMember::is_last_platform_invite_attempt_date_Set() const{
    return m_last_platform_invite_attempt_date_isSet;
}

bool OAIFireteam_FireteamMember::is_last_platform_invite_attempt_date_Valid() const{
    return m_last_platform_invite_attempt_date_isValid;
}

qint32 OAIFireteam_FireteamMember::getLastPlatformInviteAttemptResult() const {
    return m_last_platform_invite_attempt_result;
}
void OAIFireteam_FireteamMember::setLastPlatformInviteAttemptResult(const qint32 &last_platform_invite_attempt_result) {
    m_last_platform_invite_attempt_result = last_platform_invite_attempt_result;
    m_last_platform_invite_attempt_result_isSet = true;
}

bool OAIFireteam_FireteamMember::is_last_platform_invite_attempt_result_Set() const{
    return m_last_platform_invite_attempt_result_isSet;
}

bool OAIFireteam_FireteamMember::is_last_platform_invite_attempt_result_Valid() const{
    return m_last_platform_invite_attempt_result_isValid;
}

bool OAIFireteam_FireteamMember::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bungie_net_user_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_joined_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destiny_user_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_microphone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_platform_invite_attempt_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_platform_invite_attempt_result_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFireteam_FireteamMember::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
