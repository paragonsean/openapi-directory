/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition::OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition::OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition::~OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition() {}

void OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition::initializeModel() {

    m_stat_isSet = false;
    m_stat_isValid = false;

    m_style_isSet = false;
    m_style_isValid = false;
}

void OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition::fromJsonObject(QJsonObject json) {

    m_stat_isValid = ::OpenAPI::fromJsonValue(m_stat, json[QString("stat")]);
    m_stat_isSet = !json[QString("stat")].isNull() && m_stat_isValid;

    m_style_isValid = ::OpenAPI::fromJsonValue(m_style, json[QString("style")]);
    m_style_isSet = !json[QString("style")].isNull() && m_style_isValid;
}

QString OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_stat.isSet()) {
        obj.insert(QString("stat"), ::OpenAPI::toJsonValue(m_stat));
    }
    if (m_style_isSet) {
        obj.insert(QString("style"), ::OpenAPI::toJsonValue(m_style));
    }
    return obj;
}

OAIDestiny_Definitions_DestinyItemInvestmentStatDefinition OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition::getStat() const {
    return m_stat;
}
void OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition::setStat(const OAIDestiny_Definitions_DestinyItemInvestmentStatDefinition &stat) {
    m_stat = stat;
    m_stat_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition::is_stat_Set() const{
    return m_stat_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition::is_stat_Valid() const{
    return m_stat_isValid;
}

qint32 OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition::getStyle() const {
    return m_style;
}
void OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition::setStyle(const qint32 &style) {
    m_style = style;
    m_style_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition::is_style_Set() const{
    return m_style_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition::is_style_Valid() const{
    return m_style_isValid;
}

bool OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_style_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
