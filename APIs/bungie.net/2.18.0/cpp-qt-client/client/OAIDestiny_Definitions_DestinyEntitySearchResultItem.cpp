/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyEntitySearchResultItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyEntitySearchResultItem::OAIDestiny_Definitions_DestinyEntitySearchResultItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyEntitySearchResultItem::OAIDestiny_Definitions_DestinyEntitySearchResultItem() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyEntitySearchResultItem::~OAIDestiny_Definitions_DestinyEntitySearchResultItem() {}

void OAIDestiny_Definitions_DestinyEntitySearchResultItem::initializeModel() {

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIDestiny_Definitions_DestinyEntitySearchResultItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyEntitySearchResultItem::fromJsonObject(QJsonObject json) {

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIDestiny_Definitions_DestinyEntitySearchResultItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyEntitySearchResultItem::asJsonObject() const {
    QJsonObject obj;
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_DestinyEntitySearchResultItem::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_DestinyEntitySearchResultItem::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_DestinyEntitySearchResultItem::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_DestinyEntitySearchResultItem::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

QString OAIDestiny_Definitions_DestinyEntitySearchResultItem::getEntityType() const {
    return m_entity_type;
}
void OAIDestiny_Definitions_DestinyEntitySearchResultItem::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyEntitySearchResultItem::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIDestiny_Definitions_DestinyEntitySearchResultItem::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

qint32 OAIDestiny_Definitions_DestinyEntitySearchResultItem::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_DestinyEntitySearchResultItem::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyEntitySearchResultItem::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyEntitySearchResultItem::is_hash_Valid() const{
    return m_hash_isValid;
}

double OAIDestiny_Definitions_DestinyEntitySearchResultItem::getWeight() const {
    return m_weight;
}
void OAIDestiny_Definitions_DestinyEntitySearchResultItem::setWeight(const double &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIDestiny_Definitions_DestinyEntitySearchResultItem::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIDestiny_Definitions_DestinyEntitySearchResultItem::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIDestiny_Definitions_DestinyEntitySearchResultItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyEntitySearchResultItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
