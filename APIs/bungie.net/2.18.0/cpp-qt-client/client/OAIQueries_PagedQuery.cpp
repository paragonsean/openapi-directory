/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueries_PagedQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueries_PagedQuery::OAIQueries_PagedQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueries_PagedQuery::OAIQueries_PagedQuery() {
    this->initializeModel();
}

OAIQueries_PagedQuery::~OAIQueries_PagedQuery() {}

void OAIQueries_PagedQuery::initializeModel() {

    m_current_page_isSet = false;
    m_current_page_isValid = false;

    m_items_per_page_isSet = false;
    m_items_per_page_isValid = false;

    m_request_continuation_token_isSet = false;
    m_request_continuation_token_isValid = false;
}

void OAIQueries_PagedQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueries_PagedQuery::fromJsonObject(QJsonObject json) {

    m_current_page_isValid = ::OpenAPI::fromJsonValue(m_current_page, json[QString("currentPage")]);
    m_current_page_isSet = !json[QString("currentPage")].isNull() && m_current_page_isValid;

    m_items_per_page_isValid = ::OpenAPI::fromJsonValue(m_items_per_page, json[QString("itemsPerPage")]);
    m_items_per_page_isSet = !json[QString("itemsPerPage")].isNull() && m_items_per_page_isValid;

    m_request_continuation_token_isValid = ::OpenAPI::fromJsonValue(m_request_continuation_token, json[QString("requestContinuationToken")]);
    m_request_continuation_token_isSet = !json[QString("requestContinuationToken")].isNull() && m_request_continuation_token_isValid;
}

QString OAIQueries_PagedQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueries_PagedQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_current_page_isSet) {
        obj.insert(QString("currentPage"), ::OpenAPI::toJsonValue(m_current_page));
    }
    if (m_items_per_page_isSet) {
        obj.insert(QString("itemsPerPage"), ::OpenAPI::toJsonValue(m_items_per_page));
    }
    if (m_request_continuation_token_isSet) {
        obj.insert(QString("requestContinuationToken"), ::OpenAPI::toJsonValue(m_request_continuation_token));
    }
    return obj;
}

qint32 OAIQueries_PagedQuery::getCurrentPage() const {
    return m_current_page;
}
void OAIQueries_PagedQuery::setCurrentPage(const qint32 &current_page) {
    m_current_page = current_page;
    m_current_page_isSet = true;
}

bool OAIQueries_PagedQuery::is_current_page_Set() const{
    return m_current_page_isSet;
}

bool OAIQueries_PagedQuery::is_current_page_Valid() const{
    return m_current_page_isValid;
}

qint32 OAIQueries_PagedQuery::getItemsPerPage() const {
    return m_items_per_page;
}
void OAIQueries_PagedQuery::setItemsPerPage(const qint32 &items_per_page) {
    m_items_per_page = items_per_page;
    m_items_per_page_isSet = true;
}

bool OAIQueries_PagedQuery::is_items_per_page_Set() const{
    return m_items_per_page_isSet;
}

bool OAIQueries_PagedQuery::is_items_per_page_Valid() const{
    return m_items_per_page_isValid;
}

QString OAIQueries_PagedQuery::getRequestContinuationToken() const {
    return m_request_continuation_token;
}
void OAIQueries_PagedQuery::setRequestContinuationToken(const QString &request_continuation_token) {
    m_request_continuation_token = request_continuation_token;
    m_request_continuation_token_isSet = true;
}

bool OAIQueries_PagedQuery::is_request_continuation_token_Set() const{
    return m_request_continuation_token_isSet;
}

bool OAIQueries_PagedQuery::is_request_continuation_token_Valid() const{
    return m_request_continuation_token_isValid;
}

bool OAIQueries_PagedQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_continuation_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueries_PagedQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
