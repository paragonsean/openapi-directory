/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition::OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition::OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition::~OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition() {}

void OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition::initializeModel() {

    m_category_hash_isSet = false;
    m_category_hash_isValid = false;

    m_category_identifier_isSet = false;
    m_category_identifier_isValid = false;

    m_reinitialization_possible_plug_hashes_isSet = false;
    m_reinitialization_possible_plug_hashes_isValid = false;
}

void OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition::fromJsonObject(QJsonObject json) {

    m_category_hash_isValid = ::OpenAPI::fromJsonValue(m_category_hash, json[QString("categoryHash")]);
    m_category_hash_isSet = !json[QString("categoryHash")].isNull() && m_category_hash_isValid;

    m_category_identifier_isValid = ::OpenAPI::fromJsonValue(m_category_identifier, json[QString("categoryIdentifier")]);
    m_category_identifier_isSet = !json[QString("categoryIdentifier")].isNull() && m_category_identifier_isValid;

    m_reinitialization_possible_plug_hashes_isValid = ::OpenAPI::fromJsonValue(m_reinitialization_possible_plug_hashes, json[QString("reinitializationPossiblePlugHashes")]);
    m_reinitialization_possible_plug_hashes_isSet = !json[QString("reinitializationPossiblePlugHashes")].isNull() && m_reinitialization_possible_plug_hashes_isValid;
}

QString OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_category_hash_isSet) {
        obj.insert(QString("categoryHash"), ::OpenAPI::toJsonValue(m_category_hash));
    }
    if (m_category_identifier_isSet) {
        obj.insert(QString("categoryIdentifier"), ::OpenAPI::toJsonValue(m_category_identifier));
    }
    if (m_reinitialization_possible_plug_hashes.size() > 0) {
        obj.insert(QString("reinitializationPossiblePlugHashes"), ::OpenAPI::toJsonValue(m_reinitialization_possible_plug_hashes));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition::getCategoryHash() const {
    return m_category_hash;
}
void OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition::setCategoryHash(const qint32 &category_hash) {
    m_category_hash = category_hash;
    m_category_hash_isSet = true;
}

bool OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition::is_category_hash_Set() const{
    return m_category_hash_isSet;
}

bool OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition::is_category_hash_Valid() const{
    return m_category_hash_isValid;
}

QString OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition::getCategoryIdentifier() const {
    return m_category_identifier;
}
void OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition::setCategoryIdentifier(const QString &category_identifier) {
    m_category_identifier = category_identifier;
    m_category_identifier_isSet = true;
}

bool OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition::is_category_identifier_Set() const{
    return m_category_identifier_isSet;
}

bool OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition::is_category_identifier_Valid() const{
    return m_category_identifier_isValid;
}

QList<qint32> OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition::getReinitializationPossiblePlugHashes() const {
    return m_reinitialization_possible_plug_hashes;
}
void OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition::setReinitializationPossiblePlugHashes(const QList<qint32> &reinitialization_possible_plug_hashes) {
    m_reinitialization_possible_plug_hashes = reinitialization_possible_plug_hashes;
    m_reinitialization_possible_plug_hashes_isSet = true;
}

bool OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition::is_reinitialization_possible_plug_hashes_Set() const{
    return m_reinitialization_possible_plug_hashes_isSet;
}

bool OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition::is_reinitialization_possible_plug_hashes_Valid() const{
    return m_reinitialization_possible_plug_hashes_isValid;
}

bool OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reinitialization_possible_plug_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
