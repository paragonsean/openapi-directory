/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_Reporting_DestinyReportReasonDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_Reporting_DestinyReportReasonDefinition::OAIDestiny_Definitions_Reporting_DestinyReportReasonDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_Reporting_DestinyReportReasonDefinition::OAIDestiny_Definitions_Reporting_DestinyReportReasonDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_Reporting_DestinyReportReasonDefinition::~OAIDestiny_Definitions_Reporting_DestinyReportReasonDefinition() {}

void OAIDestiny_Definitions_Reporting_DestinyReportReasonDefinition::initializeModel() {

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_reason_hash_isSet = false;
    m_reason_hash_isValid = false;
}

void OAIDestiny_Definitions_Reporting_DestinyReportReasonDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_Reporting_DestinyReportReasonDefinition::fromJsonObject(QJsonObject json) {

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_reason_hash_isValid = ::OpenAPI::fromJsonValue(m_reason_hash, json[QString("reasonHash")]);
    m_reason_hash_isSet = !json[QString("reasonHash")].isNull() && m_reason_hash_isValid;
}

QString OAIDestiny_Definitions_Reporting_DestinyReportReasonDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_Reporting_DestinyReportReasonDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_reason_hash_isSet) {
        obj.insert(QString("reasonHash"), ::OpenAPI::toJsonValue(m_reason_hash));
    }
    return obj;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_Reporting_DestinyReportReasonDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_Reporting_DestinyReportReasonDefinition::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_Reporting_DestinyReportReasonDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_Reporting_DestinyReportReasonDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

qint32 OAIDestiny_Definitions_Reporting_DestinyReportReasonDefinition::getReasonHash() const {
    return m_reason_hash;
}
void OAIDestiny_Definitions_Reporting_DestinyReportReasonDefinition::setReasonHash(const qint32 &reason_hash) {
    m_reason_hash = reason_hash;
    m_reason_hash_isSet = true;
}

bool OAIDestiny_Definitions_Reporting_DestinyReportReasonDefinition::is_reason_hash_Set() const{
    return m_reason_hash_isSet;
}

bool OAIDestiny_Definitions_Reporting_DestinyReportReasonDefinition::is_reason_hash_Valid() const{
    return m_reason_hash_isValid;
}

bool OAIDestiny_Definitions_Reporting_DestinyReportReasonDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_Reporting_DestinyReportReasonDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
