/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest() {
    this->initializeModel();
}

OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::~OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest() {}

void OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::initializeModel() {

    m_action_token_isSet = false;
    m_action_token_isValid = false;

    m_character_id_isSet = false;
    m_character_id_isValid = false;

    m_item_instance_id_isSet = false;
    m_item_instance_id_isValid = false;

    m_membership_type_isSet = false;
    m_membership_type_isValid = false;

    m_plug_isSet = false;
    m_plug_isValid = false;
}

void OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::fromJsonObject(QJsonObject json) {

    m_action_token_isValid = ::OpenAPI::fromJsonValue(m_action_token, json[QString("actionToken")]);
    m_action_token_isSet = !json[QString("actionToken")].isNull() && m_action_token_isValid;

    m_character_id_isValid = ::OpenAPI::fromJsonValue(m_character_id, json[QString("characterId")]);
    m_character_id_isSet = !json[QString("characterId")].isNull() && m_character_id_isValid;

    m_item_instance_id_isValid = ::OpenAPI::fromJsonValue(m_item_instance_id, json[QString("itemInstanceId")]);
    m_item_instance_id_isSet = !json[QString("itemInstanceId")].isNull() && m_item_instance_id_isValid;

    m_membership_type_isValid = ::OpenAPI::fromJsonValue(m_membership_type, json[QString("membershipType")]);
    m_membership_type_isSet = !json[QString("membershipType")].isNull() && m_membership_type_isValid;

    m_plug_isValid = ::OpenAPI::fromJsonValue(m_plug, json[QString("plug")]);
    m_plug_isSet = !json[QString("plug")].isNull() && m_plug_isValid;
}

QString OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_action_token_isSet) {
        obj.insert(QString("actionToken"), ::OpenAPI::toJsonValue(m_action_token));
    }
    if (m_character_id_isSet) {
        obj.insert(QString("characterId"), ::OpenAPI::toJsonValue(m_character_id));
    }
    if (m_item_instance_id_isSet) {
        obj.insert(QString("itemInstanceId"), ::OpenAPI::toJsonValue(m_item_instance_id));
    }
    if (m_membership_type_isSet) {
        obj.insert(QString("membershipType"), ::OpenAPI::toJsonValue(m_membership_type));
    }
    if (m_plug.isSet()) {
        obj.insert(QString("plug"), ::OpenAPI::toJsonValue(m_plug));
    }
    return obj;
}

QString OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::getActionToken() const {
    return m_action_token;
}
void OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::setActionToken(const QString &action_token) {
    m_action_token = action_token;
    m_action_token_isSet = true;
}

bool OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::is_action_token_Set() const{
    return m_action_token_isSet;
}

bool OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::is_action_token_Valid() const{
    return m_action_token_isValid;
}

qint64 OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::getCharacterId() const {
    return m_character_id;
}
void OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::setCharacterId(const qint64 &character_id) {
    m_character_id = character_id;
    m_character_id_isSet = true;
}

bool OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::is_character_id_Set() const{
    return m_character_id_isSet;
}

bool OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::is_character_id_Valid() const{
    return m_character_id_isValid;
}

qint64 OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::getItemInstanceId() const {
    return m_item_instance_id;
}
void OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::setItemInstanceId(const qint64 &item_instance_id) {
    m_item_instance_id = item_instance_id;
    m_item_instance_id_isSet = true;
}

bool OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::is_item_instance_id_Set() const{
    return m_item_instance_id_isSet;
}

bool OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::is_item_instance_id_Valid() const{
    return m_item_instance_id_isValid;
}

qint32 OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::getMembershipType() const {
    return m_membership_type;
}
void OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::setMembershipType(const qint32 &membership_type) {
    m_membership_type = membership_type;
    m_membership_type_isSet = true;
}

bool OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::is_membership_type_Set() const{
    return m_membership_type_isSet;
}

bool OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::is_membership_type_Valid() const{
    return m_membership_type_isValid;
}

OAIDestiny_Requests_Actions_DestinyInsertPlugsRequestEntry OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::getPlug() const {
    return m_plug;
}
void OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::setPlug(const OAIDestiny_Requests_Actions_DestinyInsertPlugsRequestEntry &plug) {
    m_plug = plug;
    m_plug_isSet = true;
}

bool OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::is_plug_Set() const{
    return m_plug_isSet;
}

bool OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::is_plug_Valid() const{
    return m_plug_isValid;
}

bool OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plug.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Requests_Actions_DestinyInsertPlugsActionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
