/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock() {
    this->initializeModel();
}

OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::~OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock() {}

void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::initializeModel() {

    m_collectibles_isSet = false;
    m_collectibles_isValid = false;

    m_craftables_isSet = false;
    m_craftables_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_presentation_nodes_isSet = false;
    m_presentation_nodes_isValid = false;

    m_records_isSet = false;
    m_records_isValid = false;
}

void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::fromJsonObject(QJsonObject json) {

    m_collectibles_isValid = ::OpenAPI::fromJsonValue(m_collectibles, json[QString("collectibles")]);
    m_collectibles_isSet = !json[QString("collectibles")].isNull() && m_collectibles_isValid;

    m_craftables_isValid = ::OpenAPI::fromJsonValue(m_craftables, json[QString("craftables")]);
    m_craftables_isSet = !json[QString("craftables")].isNull() && m_craftables_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_presentation_nodes_isValid = ::OpenAPI::fromJsonValue(m_presentation_nodes, json[QString("presentationNodes")]);
    m_presentation_nodes_isSet = !json[QString("presentationNodes")].isNull() && m_presentation_nodes_isValid;

    m_records_isValid = ::OpenAPI::fromJsonValue(m_records, json[QString("records")]);
    m_records_isSet = !json[QString("records")].isNull() && m_records_isValid;
}

QString OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::asJsonObject() const {
    QJsonObject obj;
    if (m_collectibles.size() > 0) {
        obj.insert(QString("collectibles"), ::OpenAPI::toJsonValue(m_collectibles));
    }
    if (m_craftables.size() > 0) {
        obj.insert(QString("craftables"), ::OpenAPI::toJsonValue(m_craftables));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_presentation_nodes.size() > 0) {
        obj.insert(QString("presentationNodes"), ::OpenAPI::toJsonValue(m_presentation_nodes));
    }
    if (m_records.size() > 0) {
        obj.insert(QString("records"), ::OpenAPI::toJsonValue(m_records));
    }
    return obj;
}

QList<OAIDestiny_Definitions_Presentation_DestinyPresentationNodeCollectibleChildEntry> OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::getCollectibles() const {
    return m_collectibles;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::setCollectibles(const QList<OAIDestiny_Definitions_Presentation_DestinyPresentationNodeCollectibleChildEntry> &collectibles) {
    m_collectibles = collectibles;
    m_collectibles_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::is_collectibles_Set() const{
    return m_collectibles_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::is_collectibles_Valid() const{
    return m_collectibles_isValid;
}

QList<OAIDestiny_Definitions_Presentation_DestinyPresentationNodeCraftableChildEntry> OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::getCraftables() const {
    return m_craftables;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::setCraftables(const QList<OAIDestiny_Definitions_Presentation_DestinyPresentationNodeCraftableChildEntry> &craftables) {
    m_craftables = craftables;
    m_craftables_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::is_craftables_Set() const{
    return m_craftables_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::is_craftables_Valid() const{
    return m_craftables_isValid;
}

QList<OAIDestiny_Definitions_Presentation_DestinyPresentationNodeMetricChildEntry> OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::getMetrics() const {
    return m_metrics;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::setMetrics(const QList<OAIDestiny_Definitions_Presentation_DestinyPresentationNodeMetricChildEntry> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QList<OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildEntry> OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::getPresentationNodes() const {
    return m_presentation_nodes;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::setPresentationNodes(const QList<OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildEntry> &presentation_nodes) {
    m_presentation_nodes = presentation_nodes;
    m_presentation_nodes_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::is_presentation_nodes_Set() const{
    return m_presentation_nodes_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::is_presentation_nodes_Valid() const{
    return m_presentation_nodes_isValid;
}

QList<OAIDestiny_Definitions_Presentation_DestinyPresentationNodeRecordChildEntry> OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::getRecords() const {
    return m_records;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::setRecords(const QList<OAIDestiny_Definitions_Presentation_DestinyPresentationNodeRecordChildEntry> &records) {
    m_records = records;
    m_records_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::is_records_Set() const{
    return m_records_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::is_records_Valid() const{
    return m_records_isValid;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collectibles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_craftables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_presentation_nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_records.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
