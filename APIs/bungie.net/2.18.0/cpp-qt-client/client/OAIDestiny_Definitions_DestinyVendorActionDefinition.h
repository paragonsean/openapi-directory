/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyVendorActionDefinition.h
 *
 * If a vendor can ever end up performing actions, these are the properties that will be related to those actions. I&#39;m not going to bother documenting this yet, as it is unused and unclear if it will ever be used... but in case it is ever populated and someone finds it useful, it is defined here.
 */

#ifndef OAIDestiny_Definitions_DestinyVendorActionDefinition_H
#define OAIDestiny_Definitions_DestinyVendorActionDefinition_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDestiny_Definitions_DestinyVendorActionDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyVendorActionDefinition();
    OAIDestiny_Definitions_DestinyVendorActionDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyVendorActionDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getActionHash() const;
    void setActionHash(const qint32 &action_hash);
    bool is_action_hash_Set() const;
    bool is_action_hash_Valid() const;

    QString getActionId() const;
    void setActionId(const QString &action_id);
    bool is_action_id_Set() const;
    bool is_action_id_Valid() const;

    bool isAutoPerformAction() const;
    void setAutoPerformAction(const bool &auto_perform_action);
    bool is_auto_perform_action_Set() const;
    bool is_auto_perform_action_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getExecuteSeconds() const;
    void setExecuteSeconds(const qint32 &execute_seconds);
    bool is_execute_seconds_Set() const;
    bool is_execute_seconds_Valid() const;

    QString getIcon() const;
    void setIcon(const QString &icon);
    bool is_icon_Set() const;
    bool is_icon_Valid() const;

    bool isIsPositive() const;
    void setIsPositive(const bool &is_positive);
    bool is_is_positive_Set() const;
    bool is_is_positive_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getVerb() const;
    void setVerb(const QString &verb);
    bool is_verb_Set() const;
    bool is_verb_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_action_hash;
    bool m_action_hash_isSet;
    bool m_action_hash_isValid;

    QString m_action_id;
    bool m_action_id_isSet;
    bool m_action_id_isValid;

    bool m_auto_perform_action;
    bool m_auto_perform_action_isSet;
    bool m_auto_perform_action_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_execute_seconds;
    bool m_execute_seconds_isSet;
    bool m_execute_seconds_isValid;

    QString m_icon;
    bool m_icon_isSet;
    bool m_icon_isValid;

    bool m_is_positive;
    bool m_is_positive_isSet;
    bool m_is_positive_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_verb;
    bool m_verb_isSet;
    bool m_verb_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyVendorActionDefinition)

#endif // OAIDestiny_Definitions_DestinyVendorActionDefinition_H
