/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupsV2_GroupQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupsV2_GroupQuery::OAIGroupsV2_GroupQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupsV2_GroupQuery::OAIGroupsV2_GroupQuery() {
    this->initializeModel();
}

OAIGroupsV2_GroupQuery::~OAIGroupsV2_GroupQuery() {}

void OAIGroupsV2_GroupQuery::initializeModel() {

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_current_page_isSet = false;
    m_current_page_isValid = false;

    m_group_member_count_filter_isSet = false;
    m_group_member_count_filter_isValid = false;

    m_group_type_isSet = false;
    m_group_type_isValid = false;

    m_items_per_page_isSet = false;
    m_items_per_page_isValid = false;

    m_locale_filter_isSet = false;
    m_locale_filter_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_request_continuation_token_isSet = false;
    m_request_continuation_token_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_tag_text_isSet = false;
    m_tag_text_isValid = false;
}

void OAIGroupsV2_GroupQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupsV2_GroupQuery::fromJsonObject(QJsonObject json) {

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_current_page_isValid = ::OpenAPI::fromJsonValue(m_current_page, json[QString("currentPage")]);
    m_current_page_isSet = !json[QString("currentPage")].isNull() && m_current_page_isValid;

    m_group_member_count_filter_isValid = ::OpenAPI::fromJsonValue(m_group_member_count_filter, json[QString("groupMemberCountFilter")]);
    m_group_member_count_filter_isSet = !json[QString("groupMemberCountFilter")].isNull() && m_group_member_count_filter_isValid;

    m_group_type_isValid = ::OpenAPI::fromJsonValue(m_group_type, json[QString("groupType")]);
    m_group_type_isSet = !json[QString("groupType")].isNull() && m_group_type_isValid;

    m_items_per_page_isValid = ::OpenAPI::fromJsonValue(m_items_per_page, json[QString("itemsPerPage")]);
    m_items_per_page_isSet = !json[QString("itemsPerPage")].isNull() && m_items_per_page_isValid;

    m_locale_filter_isValid = ::OpenAPI::fromJsonValue(m_locale_filter, json[QString("localeFilter")]);
    m_locale_filter_isSet = !json[QString("localeFilter")].isNull() && m_locale_filter_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_request_continuation_token_isValid = ::OpenAPI::fromJsonValue(m_request_continuation_token, json[QString("requestContinuationToken")]);
    m_request_continuation_token_isSet = !json[QString("requestContinuationToken")].isNull() && m_request_continuation_token_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("sortBy")]);
    m_sort_by_isSet = !json[QString("sortBy")].isNull() && m_sort_by_isValid;

    m_tag_text_isValid = ::OpenAPI::fromJsonValue(m_tag_text, json[QString("tagText")]);
    m_tag_text_isSet = !json[QString("tagText")].isNull() && m_tag_text_isValid;
}

QString OAIGroupsV2_GroupQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupsV2_GroupQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_current_page_isSet) {
        obj.insert(QString("currentPage"), ::OpenAPI::toJsonValue(m_current_page));
    }
    if (m_group_member_count_filter_isSet) {
        obj.insert(QString("groupMemberCountFilter"), ::OpenAPI::toJsonValue(m_group_member_count_filter));
    }
    if (m_group_type_isSet) {
        obj.insert(QString("groupType"), ::OpenAPI::toJsonValue(m_group_type));
    }
    if (m_items_per_page_isSet) {
        obj.insert(QString("itemsPerPage"), ::OpenAPI::toJsonValue(m_items_per_page));
    }
    if (m_locale_filter_isSet) {
        obj.insert(QString("localeFilter"), ::OpenAPI::toJsonValue(m_locale_filter));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_request_continuation_token_isSet) {
        obj.insert(QString("requestContinuationToken"), ::OpenAPI::toJsonValue(m_request_continuation_token));
    }
    if (m_sort_by_isSet) {
        obj.insert(QString("sortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_tag_text_isSet) {
        obj.insert(QString("tagText"), ::OpenAPI::toJsonValue(m_tag_text));
    }
    return obj;
}

qint32 OAIGroupsV2_GroupQuery::getCreationDate() const {
    return m_creation_date;
}
void OAIGroupsV2_GroupQuery::setCreationDate(const qint32 &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIGroupsV2_GroupQuery::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIGroupsV2_GroupQuery::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

qint32 OAIGroupsV2_GroupQuery::getCurrentPage() const {
    return m_current_page;
}
void OAIGroupsV2_GroupQuery::setCurrentPage(const qint32 &current_page) {
    m_current_page = current_page;
    m_current_page_isSet = true;
}

bool OAIGroupsV2_GroupQuery::is_current_page_Set() const{
    return m_current_page_isSet;
}

bool OAIGroupsV2_GroupQuery::is_current_page_Valid() const{
    return m_current_page_isValid;
}

qint32 OAIGroupsV2_GroupQuery::getGroupMemberCountFilter() const {
    return m_group_member_count_filter;
}
void OAIGroupsV2_GroupQuery::setGroupMemberCountFilter(const qint32 &group_member_count_filter) {
    m_group_member_count_filter = group_member_count_filter;
    m_group_member_count_filter_isSet = true;
}

bool OAIGroupsV2_GroupQuery::is_group_member_count_filter_Set() const{
    return m_group_member_count_filter_isSet;
}

bool OAIGroupsV2_GroupQuery::is_group_member_count_filter_Valid() const{
    return m_group_member_count_filter_isValid;
}

qint32 OAIGroupsV2_GroupQuery::getGroupType() const {
    return m_group_type;
}
void OAIGroupsV2_GroupQuery::setGroupType(const qint32 &group_type) {
    m_group_type = group_type;
    m_group_type_isSet = true;
}

bool OAIGroupsV2_GroupQuery::is_group_type_Set() const{
    return m_group_type_isSet;
}

bool OAIGroupsV2_GroupQuery::is_group_type_Valid() const{
    return m_group_type_isValid;
}

qint32 OAIGroupsV2_GroupQuery::getItemsPerPage() const {
    return m_items_per_page;
}
void OAIGroupsV2_GroupQuery::setItemsPerPage(const qint32 &items_per_page) {
    m_items_per_page = items_per_page;
    m_items_per_page_isSet = true;
}

bool OAIGroupsV2_GroupQuery::is_items_per_page_Set() const{
    return m_items_per_page_isSet;
}

bool OAIGroupsV2_GroupQuery::is_items_per_page_Valid() const{
    return m_items_per_page_isValid;
}

QString OAIGroupsV2_GroupQuery::getLocaleFilter() const {
    return m_locale_filter;
}
void OAIGroupsV2_GroupQuery::setLocaleFilter(const QString &locale_filter) {
    m_locale_filter = locale_filter;
    m_locale_filter_isSet = true;
}

bool OAIGroupsV2_GroupQuery::is_locale_filter_Set() const{
    return m_locale_filter_isSet;
}

bool OAIGroupsV2_GroupQuery::is_locale_filter_Valid() const{
    return m_locale_filter_isValid;
}

QString OAIGroupsV2_GroupQuery::getName() const {
    return m_name;
}
void OAIGroupsV2_GroupQuery::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGroupsV2_GroupQuery::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGroupsV2_GroupQuery::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGroupsV2_GroupQuery::getRequestContinuationToken() const {
    return m_request_continuation_token;
}
void OAIGroupsV2_GroupQuery::setRequestContinuationToken(const QString &request_continuation_token) {
    m_request_continuation_token = request_continuation_token;
    m_request_continuation_token_isSet = true;
}

bool OAIGroupsV2_GroupQuery::is_request_continuation_token_Set() const{
    return m_request_continuation_token_isSet;
}

bool OAIGroupsV2_GroupQuery::is_request_continuation_token_Valid() const{
    return m_request_continuation_token_isValid;
}

qint32 OAIGroupsV2_GroupQuery::getSortBy() const {
    return m_sort_by;
}
void OAIGroupsV2_GroupQuery::setSortBy(const qint32 &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIGroupsV2_GroupQuery::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIGroupsV2_GroupQuery::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

QString OAIGroupsV2_GroupQuery::getTagText() const {
    return m_tag_text;
}
void OAIGroupsV2_GroupQuery::setTagText(const QString &tag_text) {
    m_tag_text = tag_text;
    m_tag_text_isSet = true;
}

bool OAIGroupsV2_GroupQuery::is_tag_text_Set() const{
    return m_tag_text_isSet;
}

bool OAIGroupsV2_GroupQuery::is_tag_text_Valid() const{
    return m_tag_text_isValid;
}

bool OAIGroupsV2_GroupQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_member_count_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_continuation_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupsV2_GroupQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
