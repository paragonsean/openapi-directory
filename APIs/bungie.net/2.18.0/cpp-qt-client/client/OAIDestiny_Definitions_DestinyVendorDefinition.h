/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyVendorDefinition.h
 *
 * These are the definitions for Vendors.  In Destiny, a Vendor can be a lot of things - some things that you wouldn&#39;t expect, and some things that you don&#39;t even see directly in the game. Vendors are the Dolly Levi of the Destiny universe.  - Traditional Vendors as you see in game: people who you come up to and who give you quests, rewards, or who you can buy things from.  - Kiosks/Collections, which are really just Vendors that don&#39;t charge currency (or charge some pittance of a currency) and whose gating for purchases revolves more around your character&#39;s state.  - Previews for rewards or the contents of sacks. These are implemented as Vendors, where you can&#39;t actually purchase from them but the items that they have for sale and the categories of sale items reflect the rewards or contents of the sack. This is so that the game could reuse the existing Vendor display UI for rewards and save a bunch of wheel reinvention.  - Item Transfer capabilities, like the Vault and Postmaster. Vendors can have \&quot;acceptedItem\&quot; buckets that determine the source and destination buckets for transfers. When you interact with such a vendor, these buckets are what gets shown in the UI instead of any items that the Vendor would have for sale. Yep, the Vault is a vendor.  It is pretty much guaranteed that they&#39;ll be used for even more features in the future. They have come to be seen more as generic categorized containers for items than \&quot;vendors\&quot; in a traditional sense, for better or worse.  Where possible and time allows, we&#39;ll attempt to split those out into their own more digestible derived \&quot;Definitions\&quot;: but often time does not allow that, as you can see from the above ways that vendors are used which we never split off from Vendor Definitions externally.  Since Vendors are so many things to so many parts of the game, the definition is understandably complex. You will want to combine this data with live Vendor information from the API when it is available.
 */

#ifndef OAIDestiny_Definitions_DestinyVendorDefinition_H
#define OAIDestiny_Definitions_DestinyVendorDefinition_H

#include <QJsonObject>

#include "OAIDates_DateRange.h"
#include "OAIDestiny_Definitions_DestinyDisplayCategoryDefinition.h"
#include "OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition.h"
#include "OAIDestiny_Definitions_DestinyVendorActionDefinition.h"
#include "OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition.h"
#include "OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition.h"
#include "OAIDestiny_Definitions_DestinyVendorGroupReference.h"
#include "OAIDestiny_Definitions_DestinyVendorInteractionDefinition.h"
#include "OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition.h"
#include "OAIDestiny_Definitions_DestinyVendorItemDefinition.h"
#include "OAIDestiny_Definitions_DestinyVendorServiceDefinition.h"
#include "OAIDestiny_Definitions_Vendors_DestinyVendorLocationDefinition.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition;
class OAIDestiny_Definitions_DestinyVendorActionDefinition;
class OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition;
class OAIDestiny_Definitions_DestinyDisplayCategoryDefinition;
class OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition;
class OAIDestiny_Definitions_DestinyVendorGroupReference;
class OAIDestiny_Definitions_DestinyVendorInteractionDefinition;
class OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition;
class OAIDestiny_Definitions_DestinyVendorItemDefinition;
class OAIDestiny_Definitions_Vendors_DestinyVendorLocationDefinition;
class OAIDestiny_Definitions_DestinyVendorServiceDefinition;
class OAIDates_DateRange;

class OAIDestiny_Definitions_DestinyVendorDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyVendorDefinition();
    OAIDestiny_Definitions_DestinyVendorDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyVendorDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition> getAcceptedItems() const;
    void setAcceptedItems(const QList<OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition> &accepted_items);
    bool is_accepted_items_Set() const;
    bool is_accepted_items_Valid() const;

    QList<OAIDestiny_Definitions_DestinyVendorActionDefinition> getActions() const;
    void setActions(const QList<OAIDestiny_Definitions_DestinyVendorActionDefinition> &actions);
    bool is_actions_Set() const;
    bool is_actions_Valid() const;

    QString getBuyString() const;
    void setBuyString(const QString &buy_string);
    bool is_buy_string_Set() const;
    bool is_buy_string_Valid() const;

    QList<OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition> getCategories() const;
    void setCategories(const QList<OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition> &categories);
    bool is_categories_Set() const;
    bool is_categories_Valid() const;

    bool isConsolidateCategories() const;
    void setConsolidateCategories(const bool &consolidate_categories);
    bool is_consolidate_categories_Set() const;
    bool is_consolidate_categories_Valid() const;

    QList<OAIDestiny_Definitions_DestinyDisplayCategoryDefinition> getDisplayCategories() const;
    void setDisplayCategories(const QList<OAIDestiny_Definitions_DestinyDisplayCategoryDefinition> &display_categories);
    bool is_display_categories_Set() const;
    bool is_display_categories_Valid() const;

    qint32 getDisplayItemHash() const;
    void setDisplayItemHash(const qint32 &display_item_hash);
    bool is_display_item_hash_Set() const;
    bool is_display_item_hash_Valid() const;

    OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition getDisplayProperties() const;
    void setDisplayProperties(const OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition &display_properties);
    bool is_display_properties_Set() const;
    bool is_display_properties_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    qint32 getFactionHash() const;
    void setFactionHash(const qint32 &faction_hash);
    bool is_faction_hash_Set() const;
    bool is_faction_hash_Valid() const;

    QList<QString> getFailureStrings() const;
    void setFailureStrings(const QList<QString> &failure_strings);
    bool is_failure_strings_Set() const;
    bool is_failure_strings_Valid() const;

    QList<OAIDestiny_Definitions_DestinyVendorGroupReference> getGroups() const;
    void setGroups(const QList<OAIDestiny_Definitions_DestinyVendorGroupReference> &groups);
    bool is_groups_Set() const;
    bool is_groups_Valid() const;

    qint32 getHash() const;
    void setHash(const qint32 &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    QList<qint32> getIgnoreSaleItemHashes() const;
    void setIgnoreSaleItemHashes(const QList<qint32> &ignore_sale_item_hashes);
    bool is_ignore_sale_item_hashes_Set() const;
    bool is_ignore_sale_item_hashes_Valid() const;

    qint32 getIndex() const;
    void setIndex(const qint32 &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    bool isInhibitBuying() const;
    void setInhibitBuying(const bool &inhibit_buying);
    bool is_inhibit_buying_Set() const;
    bool is_inhibit_buying_Valid() const;

    bool isInhibitSelling() const;
    void setInhibitSelling(const bool &inhibit_selling);
    bool is_inhibit_selling_Set() const;
    bool is_inhibit_selling_Valid() const;

    QList<OAIDestiny_Definitions_DestinyVendorInteractionDefinition> getInteractions() const;
    void setInteractions(const QList<OAIDestiny_Definitions_DestinyVendorInteractionDefinition> &interactions);
    bool is_interactions_Set() const;
    bool is_interactions_Valid() const;

    QList<OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition> getInventoryFlyouts() const;
    void setInventoryFlyouts(const QList<OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition> &inventory_flyouts);
    bool is_inventory_flyouts_Set() const;
    bool is_inventory_flyouts_Valid() const;

    QList<OAIDestiny_Definitions_DestinyVendorItemDefinition> getItemList() const;
    void setItemList(const QList<OAIDestiny_Definitions_DestinyVendorItemDefinition> &item_list);
    bool is_item_list_Set() const;
    bool is_item_list_Valid() const;

    QList<OAIDestiny_Definitions_Vendors_DestinyVendorLocationDefinition> getLocations() const;
    void setLocations(const QList<OAIDestiny_Definitions_Vendors_DestinyVendorLocationDefinition> &locations);
    bool is_locations_Set() const;
    bool is_locations_Valid() const;

    QList<OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition> getOriginalCategories() const;
    void setOriginalCategories(const QList<OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition> &original_categories);
    bool is_original_categories_Set() const;
    bool is_original_categories_Valid() const;

    bool isRedacted() const;
    void setRedacted(const bool &redacted);
    bool is_redacted_Set() const;
    bool is_redacted_Valid() const;

    qint32 getResetIntervalMinutes() const;
    void setResetIntervalMinutes(const qint32 &reset_interval_minutes);
    bool is_reset_interval_minutes_Set() const;
    bool is_reset_interval_minutes_Valid() const;

    qint32 getResetOffsetMinutes() const;
    void setResetOffsetMinutes(const qint32 &reset_offset_minutes);
    bool is_reset_offset_minutes_Set() const;
    bool is_reset_offset_minutes_Valid() const;

    bool isReturnWithVendorRequest() const;
    void setReturnWithVendorRequest(const bool &return_with_vendor_request);
    bool is_return_with_vendor_request_Set() const;
    bool is_return_with_vendor_request_Valid() const;

    QString getSellString() const;
    void setSellString(const QString &sell_string);
    bool is_sell_string_Set() const;
    bool is_sell_string_Valid() const;

    QList<OAIDestiny_Definitions_DestinyVendorServiceDefinition> getServices() const;
    void setServices(const QList<OAIDestiny_Definitions_DestinyVendorServiceDefinition> &services);
    bool is_services_Set() const;
    bool is_services_Valid() const;

    QList<OAIDates_DateRange> getUnlockRanges() const;
    void setUnlockRanges(const QList<OAIDates_DateRange> &unlock_ranges);
    bool is_unlock_ranges_Set() const;
    bool is_unlock_ranges_Valid() const;

    QString getVendorBanner() const;
    void setVendorBanner(const QString &vendor_banner);
    bool is_vendor_banner_Set() const;
    bool is_vendor_banner_Valid() const;

    QString getVendorIdentifier() const;
    void setVendorIdentifier(const QString &vendor_identifier);
    bool is_vendor_identifier_Set() const;
    bool is_vendor_identifier_Valid() const;

    QString getVendorPortrait() const;
    void setVendorPortrait(const QString &vendor_portrait);
    bool is_vendor_portrait_Set() const;
    bool is_vendor_portrait_Valid() const;

    qint32 getVendorProgressionType() const;
    void setVendorProgressionType(const qint32 &vendor_progression_type);
    bool is_vendor_progression_type_Set() const;
    bool is_vendor_progression_type_Valid() const;

    QString getVendorSubcategoryIdentifier() const;
    void setVendorSubcategoryIdentifier(const QString &vendor_subcategory_identifier);
    bool is_vendor_subcategory_identifier_Set() const;
    bool is_vendor_subcategory_identifier_Valid() const;

    bool isVisible() const;
    void setVisible(const bool &visible);
    bool is_visible_Set() const;
    bool is_visible_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIDestiny_Definitions_DestinyVendorAcceptedItemDefinition> m_accepted_items;
    bool m_accepted_items_isSet;
    bool m_accepted_items_isValid;

    QList<OAIDestiny_Definitions_DestinyVendorActionDefinition> m_actions;
    bool m_actions_isSet;
    bool m_actions_isValid;

    QString m_buy_string;
    bool m_buy_string_isSet;
    bool m_buy_string_isValid;

    QList<OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition> m_categories;
    bool m_categories_isSet;
    bool m_categories_isValid;

    bool m_consolidate_categories;
    bool m_consolidate_categories_isSet;
    bool m_consolidate_categories_isValid;

    QList<OAIDestiny_Definitions_DestinyDisplayCategoryDefinition> m_display_categories;
    bool m_display_categories_isSet;
    bool m_display_categories_isValid;

    qint32 m_display_item_hash;
    bool m_display_item_hash_isSet;
    bool m_display_item_hash_isValid;

    OAIDestiny_Definitions_DestinyVendorDisplayPropertiesDefinition m_display_properties;
    bool m_display_properties_isSet;
    bool m_display_properties_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    qint32 m_faction_hash;
    bool m_faction_hash_isSet;
    bool m_faction_hash_isValid;

    QList<QString> m_failure_strings;
    bool m_failure_strings_isSet;
    bool m_failure_strings_isValid;

    QList<OAIDestiny_Definitions_DestinyVendorGroupReference> m_groups;
    bool m_groups_isSet;
    bool m_groups_isValid;

    qint32 m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    QList<qint32> m_ignore_sale_item_hashes;
    bool m_ignore_sale_item_hashes_isSet;
    bool m_ignore_sale_item_hashes_isValid;

    qint32 m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    bool m_inhibit_buying;
    bool m_inhibit_buying_isSet;
    bool m_inhibit_buying_isValid;

    bool m_inhibit_selling;
    bool m_inhibit_selling_isSet;
    bool m_inhibit_selling_isValid;

    QList<OAIDestiny_Definitions_DestinyVendorInteractionDefinition> m_interactions;
    bool m_interactions_isSet;
    bool m_interactions_isValid;

    QList<OAIDestiny_Definitions_DestinyVendorInventoryFlyoutDefinition> m_inventory_flyouts;
    bool m_inventory_flyouts_isSet;
    bool m_inventory_flyouts_isValid;

    QList<OAIDestiny_Definitions_DestinyVendorItemDefinition> m_item_list;
    bool m_item_list_isSet;
    bool m_item_list_isValid;

    QList<OAIDestiny_Definitions_Vendors_DestinyVendorLocationDefinition> m_locations;
    bool m_locations_isSet;
    bool m_locations_isValid;

    QList<OAIDestiny_Definitions_DestinyVendorCategoryEntryDefinition> m_original_categories;
    bool m_original_categories_isSet;
    bool m_original_categories_isValid;

    bool m_redacted;
    bool m_redacted_isSet;
    bool m_redacted_isValid;

    qint32 m_reset_interval_minutes;
    bool m_reset_interval_minutes_isSet;
    bool m_reset_interval_minutes_isValid;

    qint32 m_reset_offset_minutes;
    bool m_reset_offset_minutes_isSet;
    bool m_reset_offset_minutes_isValid;

    bool m_return_with_vendor_request;
    bool m_return_with_vendor_request_isSet;
    bool m_return_with_vendor_request_isValid;

    QString m_sell_string;
    bool m_sell_string_isSet;
    bool m_sell_string_isValid;

    QList<OAIDestiny_Definitions_DestinyVendorServiceDefinition> m_services;
    bool m_services_isSet;
    bool m_services_isValid;

    QList<OAIDates_DateRange> m_unlock_ranges;
    bool m_unlock_ranges_isSet;
    bool m_unlock_ranges_isValid;

    QString m_vendor_banner;
    bool m_vendor_banner_isSet;
    bool m_vendor_banner_isValid;

    QString m_vendor_identifier;
    bool m_vendor_identifier_isSet;
    bool m_vendor_identifier_isValid;

    QString m_vendor_portrait;
    bool m_vendor_portrait_isSet;
    bool m_vendor_portrait_isValid;

    qint32 m_vendor_progression_type;
    bool m_vendor_progression_type_isSet;
    bool m_vendor_progression_type_isValid;

    QString m_vendor_subcategory_identifier;
    bool m_vendor_subcategory_identifier_isSet;
    bool m_vendor_subcategory_identifier_isValid;

    bool m_visible;
    bool m_visible_isSet;
    bool m_visible_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyVendorDefinition)

#endif // OAIDestiny_Definitions_DestinyVendorDefinition_H
