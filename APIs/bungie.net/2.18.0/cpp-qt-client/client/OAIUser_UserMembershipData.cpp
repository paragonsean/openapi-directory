/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_UserMembershipData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_UserMembershipData::OAIUser_UserMembershipData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_UserMembershipData::OAIUser_UserMembershipData() {
    this->initializeModel();
}

OAIUser_UserMembershipData::~OAIUser_UserMembershipData() {}

void OAIUser_UserMembershipData::initializeModel() {

    m_bungie_net_user_isSet = false;
    m_bungie_net_user_isValid = false;

    m_destiny_memberships_isSet = false;
    m_destiny_memberships_isValid = false;

    m_primary_membership_id_isSet = false;
    m_primary_membership_id_isValid = false;
}

void OAIUser_UserMembershipData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_UserMembershipData::fromJsonObject(QJsonObject json) {

    m_bungie_net_user_isValid = ::OpenAPI::fromJsonValue(m_bungie_net_user, json[QString("bungieNetUser")]);
    m_bungie_net_user_isSet = !json[QString("bungieNetUser")].isNull() && m_bungie_net_user_isValid;

    m_destiny_memberships_isValid = ::OpenAPI::fromJsonValue(m_destiny_memberships, json[QString("destinyMemberships")]);
    m_destiny_memberships_isSet = !json[QString("destinyMemberships")].isNull() && m_destiny_memberships_isValid;

    m_primary_membership_id_isValid = ::OpenAPI::fromJsonValue(m_primary_membership_id, json[QString("primaryMembershipId")]);
    m_primary_membership_id_isSet = !json[QString("primaryMembershipId")].isNull() && m_primary_membership_id_isValid;
}

QString OAIUser_UserMembershipData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_UserMembershipData::asJsonObject() const {
    QJsonObject obj;
    if (m_bungie_net_user.isSet()) {
        obj.insert(QString("bungieNetUser"), ::OpenAPI::toJsonValue(m_bungie_net_user));
    }
    if (m_destiny_memberships.size() > 0) {
        obj.insert(QString("destinyMemberships"), ::OpenAPI::toJsonValue(m_destiny_memberships));
    }
    if (m_primary_membership_id_isSet) {
        obj.insert(QString("primaryMembershipId"), ::OpenAPI::toJsonValue(m_primary_membership_id));
    }
    return obj;
}

OAIUser_GeneralUser OAIUser_UserMembershipData::getBungieNetUser() const {
    return m_bungie_net_user;
}
void OAIUser_UserMembershipData::setBungieNetUser(const OAIUser_GeneralUser &bungie_net_user) {
    m_bungie_net_user = bungie_net_user;
    m_bungie_net_user_isSet = true;
}

bool OAIUser_UserMembershipData::is_bungie_net_user_Set() const{
    return m_bungie_net_user_isSet;
}

bool OAIUser_UserMembershipData::is_bungie_net_user_Valid() const{
    return m_bungie_net_user_isValid;
}

QList<OAIGroupsV2_GroupUserInfoCard> OAIUser_UserMembershipData::getDestinyMemberships() const {
    return m_destiny_memberships;
}
void OAIUser_UserMembershipData::setDestinyMemberships(const QList<OAIGroupsV2_GroupUserInfoCard> &destiny_memberships) {
    m_destiny_memberships = destiny_memberships;
    m_destiny_memberships_isSet = true;
}

bool OAIUser_UserMembershipData::is_destiny_memberships_Set() const{
    return m_destiny_memberships_isSet;
}

bool OAIUser_UserMembershipData::is_destiny_memberships_Valid() const{
    return m_destiny_memberships_isValid;
}

qint64 OAIUser_UserMembershipData::getPrimaryMembershipId() const {
    return m_primary_membership_id;
}
void OAIUser_UserMembershipData::setPrimaryMembershipId(const qint64 &primary_membership_id) {
    m_primary_membership_id = primary_membership_id;
    m_primary_membership_id_isSet = true;
}

bool OAIUser_UserMembershipData::is_primary_membership_id_Set() const{
    return m_primary_membership_id_isSet;
}

bool OAIUser_UserMembershipData::is_primary_membership_id_Valid() const{
    return m_primary_membership_id_isValid;
}

bool OAIUser_UserMembershipData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bungie_net_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destiny_memberships.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_membership_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_UserMembershipData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
