/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_GeneralUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_GeneralUser::OAIUser_GeneralUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_GeneralUser::OAIUser_GeneralUser() {
    this->initializeModel();
}

OAIUser_GeneralUser::~OAIUser_GeneralUser() {}

void OAIUser_GeneralUser::initializeModel() {

    m_about_isSet = false;
    m_about_isValid = false;

    m_blizzard_display_name_isSet = false;
    m_blizzard_display_name_isValid = false;

    m_cached_bungie_global_display_name_isSet = false;
    m_cached_bungie_global_display_name_isValid = false;

    m_cached_bungie_global_display_name_code_isSet = false;
    m_cached_bungie_global_display_name_code_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_egs_display_name_isSet = false;
    m_egs_display_name_isValid = false;

    m_fb_display_name_isSet = false;
    m_fb_display_name_isValid = false;

    m_first_access_isSet = false;
    m_first_access_isValid = false;

    m_is_deleted_isSet = false;
    m_is_deleted_isValid = false;

    m_last_ban_report_id_isSet = false;
    m_last_ban_report_id_isValid = false;

    m_last_update_isSet = false;
    m_last_update_isValid = false;

    m_legacy_portal_uid_isSet = false;
    m_legacy_portal_uid_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_locale_inherit_default_isSet = false;
    m_locale_inherit_default_isValid = false;

    m_membership_id_isSet = false;
    m_membership_id_isValid = false;

    m_normalized_name_isSet = false;
    m_normalized_name_isValid = false;

    m_profile_ban_expire_isSet = false;
    m_profile_ban_expire_isValid = false;

    m_profile_picture_isSet = false;
    m_profile_picture_isValid = false;

    m_profile_picture_path_isSet = false;
    m_profile_picture_path_isValid = false;

    m_profile_picture_wide_path_isSet = false;
    m_profile_picture_wide_path_isValid = false;

    m_profile_theme_isSet = false;
    m_profile_theme_isValid = false;

    m_profile_theme_name_isSet = false;
    m_profile_theme_name_isValid = false;

    m_psn_display_name_isSet = false;
    m_psn_display_name_isValid = false;

    m_show_activity_isSet = false;
    m_show_activity_isValid = false;

    m_show_group_messaging_isSet = false;
    m_show_group_messaging_isValid = false;

    m_stadia_display_name_isSet = false;
    m_stadia_display_name_isValid = false;

    m_status_date_isSet = false;
    m_status_date_isValid = false;

    m_status_text_isSet = false;
    m_status_text_isValid = false;

    m_steam_display_name_isSet = false;
    m_steam_display_name_isValid = false;

    m_success_message_flags_isSet = false;
    m_success_message_flags_isValid = false;

    m_twitch_display_name_isSet = false;
    m_twitch_display_name_isValid = false;

    m_unique_name_isSet = false;
    m_unique_name_isValid = false;

    m_user_title_isSet = false;
    m_user_title_isValid = false;

    m_user_title_display_isSet = false;
    m_user_title_display_isValid = false;

    m_xbox_display_name_isSet = false;
    m_xbox_display_name_isValid = false;
}

void OAIUser_GeneralUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_GeneralUser::fromJsonObject(QJsonObject json) {

    m_about_isValid = ::OpenAPI::fromJsonValue(m_about, json[QString("about")]);
    m_about_isSet = !json[QString("about")].isNull() && m_about_isValid;

    m_blizzard_display_name_isValid = ::OpenAPI::fromJsonValue(m_blizzard_display_name, json[QString("blizzardDisplayName")]);
    m_blizzard_display_name_isSet = !json[QString("blizzardDisplayName")].isNull() && m_blizzard_display_name_isValid;

    m_cached_bungie_global_display_name_isValid = ::OpenAPI::fromJsonValue(m_cached_bungie_global_display_name, json[QString("cachedBungieGlobalDisplayName")]);
    m_cached_bungie_global_display_name_isSet = !json[QString("cachedBungieGlobalDisplayName")].isNull() && m_cached_bungie_global_display_name_isValid;

    m_cached_bungie_global_display_name_code_isValid = ::OpenAPI::fromJsonValue(m_cached_bungie_global_display_name_code, json[QString("cachedBungieGlobalDisplayNameCode")]);
    m_cached_bungie_global_display_name_code_isSet = !json[QString("cachedBungieGlobalDisplayNameCode")].isNull() && m_cached_bungie_global_display_name_code_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_egs_display_name_isValid = ::OpenAPI::fromJsonValue(m_egs_display_name, json[QString("egsDisplayName")]);
    m_egs_display_name_isSet = !json[QString("egsDisplayName")].isNull() && m_egs_display_name_isValid;

    m_fb_display_name_isValid = ::OpenAPI::fromJsonValue(m_fb_display_name, json[QString("fbDisplayName")]);
    m_fb_display_name_isSet = !json[QString("fbDisplayName")].isNull() && m_fb_display_name_isValid;

    m_first_access_isValid = ::OpenAPI::fromJsonValue(m_first_access, json[QString("firstAccess")]);
    m_first_access_isSet = !json[QString("firstAccess")].isNull() && m_first_access_isValid;

    m_is_deleted_isValid = ::OpenAPI::fromJsonValue(m_is_deleted, json[QString("isDeleted")]);
    m_is_deleted_isSet = !json[QString("isDeleted")].isNull() && m_is_deleted_isValid;

    m_last_ban_report_id_isValid = ::OpenAPI::fromJsonValue(m_last_ban_report_id, json[QString("lastBanReportId")]);
    m_last_ban_report_id_isSet = !json[QString("lastBanReportId")].isNull() && m_last_ban_report_id_isValid;

    m_last_update_isValid = ::OpenAPI::fromJsonValue(m_last_update, json[QString("lastUpdate")]);
    m_last_update_isSet = !json[QString("lastUpdate")].isNull() && m_last_update_isValid;

    m_legacy_portal_uid_isValid = ::OpenAPI::fromJsonValue(m_legacy_portal_uid, json[QString("legacyPortalUID")]);
    m_legacy_portal_uid_isSet = !json[QString("legacyPortalUID")].isNull() && m_legacy_portal_uid_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_locale_inherit_default_isValid = ::OpenAPI::fromJsonValue(m_locale_inherit_default, json[QString("localeInheritDefault")]);
    m_locale_inherit_default_isSet = !json[QString("localeInheritDefault")].isNull() && m_locale_inherit_default_isValid;

    m_membership_id_isValid = ::OpenAPI::fromJsonValue(m_membership_id, json[QString("membershipId")]);
    m_membership_id_isSet = !json[QString("membershipId")].isNull() && m_membership_id_isValid;

    m_normalized_name_isValid = ::OpenAPI::fromJsonValue(m_normalized_name, json[QString("normalizedName")]);
    m_normalized_name_isSet = !json[QString("normalizedName")].isNull() && m_normalized_name_isValid;

    m_profile_ban_expire_isValid = ::OpenAPI::fromJsonValue(m_profile_ban_expire, json[QString("profileBanExpire")]);
    m_profile_ban_expire_isSet = !json[QString("profileBanExpire")].isNull() && m_profile_ban_expire_isValid;

    m_profile_picture_isValid = ::OpenAPI::fromJsonValue(m_profile_picture, json[QString("profilePicture")]);
    m_profile_picture_isSet = !json[QString("profilePicture")].isNull() && m_profile_picture_isValid;

    m_profile_picture_path_isValid = ::OpenAPI::fromJsonValue(m_profile_picture_path, json[QString("profilePicturePath")]);
    m_profile_picture_path_isSet = !json[QString("profilePicturePath")].isNull() && m_profile_picture_path_isValid;

    m_profile_picture_wide_path_isValid = ::OpenAPI::fromJsonValue(m_profile_picture_wide_path, json[QString("profilePictureWidePath")]);
    m_profile_picture_wide_path_isSet = !json[QString("profilePictureWidePath")].isNull() && m_profile_picture_wide_path_isValid;

    m_profile_theme_isValid = ::OpenAPI::fromJsonValue(m_profile_theme, json[QString("profileTheme")]);
    m_profile_theme_isSet = !json[QString("profileTheme")].isNull() && m_profile_theme_isValid;

    m_profile_theme_name_isValid = ::OpenAPI::fromJsonValue(m_profile_theme_name, json[QString("profileThemeName")]);
    m_profile_theme_name_isSet = !json[QString("profileThemeName")].isNull() && m_profile_theme_name_isValid;

    m_psn_display_name_isValid = ::OpenAPI::fromJsonValue(m_psn_display_name, json[QString("psnDisplayName")]);
    m_psn_display_name_isSet = !json[QString("psnDisplayName")].isNull() && m_psn_display_name_isValid;

    m_show_activity_isValid = ::OpenAPI::fromJsonValue(m_show_activity, json[QString("showActivity")]);
    m_show_activity_isSet = !json[QString("showActivity")].isNull() && m_show_activity_isValid;

    m_show_group_messaging_isValid = ::OpenAPI::fromJsonValue(m_show_group_messaging, json[QString("showGroupMessaging")]);
    m_show_group_messaging_isSet = !json[QString("showGroupMessaging")].isNull() && m_show_group_messaging_isValid;

    m_stadia_display_name_isValid = ::OpenAPI::fromJsonValue(m_stadia_display_name, json[QString("stadiaDisplayName")]);
    m_stadia_display_name_isSet = !json[QString("stadiaDisplayName")].isNull() && m_stadia_display_name_isValid;

    m_status_date_isValid = ::OpenAPI::fromJsonValue(m_status_date, json[QString("statusDate")]);
    m_status_date_isSet = !json[QString("statusDate")].isNull() && m_status_date_isValid;

    m_status_text_isValid = ::OpenAPI::fromJsonValue(m_status_text, json[QString("statusText")]);
    m_status_text_isSet = !json[QString("statusText")].isNull() && m_status_text_isValid;

    m_steam_display_name_isValid = ::OpenAPI::fromJsonValue(m_steam_display_name, json[QString("steamDisplayName")]);
    m_steam_display_name_isSet = !json[QString("steamDisplayName")].isNull() && m_steam_display_name_isValid;

    m_success_message_flags_isValid = ::OpenAPI::fromJsonValue(m_success_message_flags, json[QString("successMessageFlags")]);
    m_success_message_flags_isSet = !json[QString("successMessageFlags")].isNull() && m_success_message_flags_isValid;

    m_twitch_display_name_isValid = ::OpenAPI::fromJsonValue(m_twitch_display_name, json[QString("twitchDisplayName")]);
    m_twitch_display_name_isSet = !json[QString("twitchDisplayName")].isNull() && m_twitch_display_name_isValid;

    m_unique_name_isValid = ::OpenAPI::fromJsonValue(m_unique_name, json[QString("uniqueName")]);
    m_unique_name_isSet = !json[QString("uniqueName")].isNull() && m_unique_name_isValid;

    m_user_title_isValid = ::OpenAPI::fromJsonValue(m_user_title, json[QString("userTitle")]);
    m_user_title_isSet = !json[QString("userTitle")].isNull() && m_user_title_isValid;

    m_user_title_display_isValid = ::OpenAPI::fromJsonValue(m_user_title_display, json[QString("userTitleDisplay")]);
    m_user_title_display_isSet = !json[QString("userTitleDisplay")].isNull() && m_user_title_display_isValid;

    m_xbox_display_name_isValid = ::OpenAPI::fromJsonValue(m_xbox_display_name, json[QString("xboxDisplayName")]);
    m_xbox_display_name_isSet = !json[QString("xboxDisplayName")].isNull() && m_xbox_display_name_isValid;
}

QString OAIUser_GeneralUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_GeneralUser::asJsonObject() const {
    QJsonObject obj;
    if (m_about_isSet) {
        obj.insert(QString("about"), ::OpenAPI::toJsonValue(m_about));
    }
    if (m_blizzard_display_name_isSet) {
        obj.insert(QString("blizzardDisplayName"), ::OpenAPI::toJsonValue(m_blizzard_display_name));
    }
    if (m_cached_bungie_global_display_name_isSet) {
        obj.insert(QString("cachedBungieGlobalDisplayName"), ::OpenAPI::toJsonValue(m_cached_bungie_global_display_name));
    }
    if (m_cached_bungie_global_display_name_code_isSet) {
        obj.insert(QString("cachedBungieGlobalDisplayNameCode"), ::OpenAPI::toJsonValue(m_cached_bungie_global_display_name_code));
    }
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_egs_display_name_isSet) {
        obj.insert(QString("egsDisplayName"), ::OpenAPI::toJsonValue(m_egs_display_name));
    }
    if (m_fb_display_name_isSet) {
        obj.insert(QString("fbDisplayName"), ::OpenAPI::toJsonValue(m_fb_display_name));
    }
    if (m_first_access_isSet) {
        obj.insert(QString("firstAccess"), ::OpenAPI::toJsonValue(m_first_access));
    }
    if (m_is_deleted_isSet) {
        obj.insert(QString("isDeleted"), ::OpenAPI::toJsonValue(m_is_deleted));
    }
    if (m_last_ban_report_id_isSet) {
        obj.insert(QString("lastBanReportId"), ::OpenAPI::toJsonValue(m_last_ban_report_id));
    }
    if (m_last_update_isSet) {
        obj.insert(QString("lastUpdate"), ::OpenAPI::toJsonValue(m_last_update));
    }
    if (m_legacy_portal_uid_isSet) {
        obj.insert(QString("legacyPortalUID"), ::OpenAPI::toJsonValue(m_legacy_portal_uid));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_locale_inherit_default_isSet) {
        obj.insert(QString("localeInheritDefault"), ::OpenAPI::toJsonValue(m_locale_inherit_default));
    }
    if (m_membership_id_isSet) {
        obj.insert(QString("membershipId"), ::OpenAPI::toJsonValue(m_membership_id));
    }
    if (m_normalized_name_isSet) {
        obj.insert(QString("normalizedName"), ::OpenAPI::toJsonValue(m_normalized_name));
    }
    if (m_profile_ban_expire_isSet) {
        obj.insert(QString("profileBanExpire"), ::OpenAPI::toJsonValue(m_profile_ban_expire));
    }
    if (m_profile_picture_isSet) {
        obj.insert(QString("profilePicture"), ::OpenAPI::toJsonValue(m_profile_picture));
    }
    if (m_profile_picture_path_isSet) {
        obj.insert(QString("profilePicturePath"), ::OpenAPI::toJsonValue(m_profile_picture_path));
    }
    if (m_profile_picture_wide_path_isSet) {
        obj.insert(QString("profilePictureWidePath"), ::OpenAPI::toJsonValue(m_profile_picture_wide_path));
    }
    if (m_profile_theme_isSet) {
        obj.insert(QString("profileTheme"), ::OpenAPI::toJsonValue(m_profile_theme));
    }
    if (m_profile_theme_name_isSet) {
        obj.insert(QString("profileThemeName"), ::OpenAPI::toJsonValue(m_profile_theme_name));
    }
    if (m_psn_display_name_isSet) {
        obj.insert(QString("psnDisplayName"), ::OpenAPI::toJsonValue(m_psn_display_name));
    }
    if (m_show_activity_isSet) {
        obj.insert(QString("showActivity"), ::OpenAPI::toJsonValue(m_show_activity));
    }
    if (m_show_group_messaging_isSet) {
        obj.insert(QString("showGroupMessaging"), ::OpenAPI::toJsonValue(m_show_group_messaging));
    }
    if (m_stadia_display_name_isSet) {
        obj.insert(QString("stadiaDisplayName"), ::OpenAPI::toJsonValue(m_stadia_display_name));
    }
    if (m_status_date_isSet) {
        obj.insert(QString("statusDate"), ::OpenAPI::toJsonValue(m_status_date));
    }
    if (m_status_text_isSet) {
        obj.insert(QString("statusText"), ::OpenAPI::toJsonValue(m_status_text));
    }
    if (m_steam_display_name_isSet) {
        obj.insert(QString("steamDisplayName"), ::OpenAPI::toJsonValue(m_steam_display_name));
    }
    if (m_success_message_flags_isSet) {
        obj.insert(QString("successMessageFlags"), ::OpenAPI::toJsonValue(m_success_message_flags));
    }
    if (m_twitch_display_name_isSet) {
        obj.insert(QString("twitchDisplayName"), ::OpenAPI::toJsonValue(m_twitch_display_name));
    }
    if (m_unique_name_isSet) {
        obj.insert(QString("uniqueName"), ::OpenAPI::toJsonValue(m_unique_name));
    }
    if (m_user_title_isSet) {
        obj.insert(QString("userTitle"), ::OpenAPI::toJsonValue(m_user_title));
    }
    if (m_user_title_display_isSet) {
        obj.insert(QString("userTitleDisplay"), ::OpenAPI::toJsonValue(m_user_title_display));
    }
    if (m_xbox_display_name_isSet) {
        obj.insert(QString("xboxDisplayName"), ::OpenAPI::toJsonValue(m_xbox_display_name));
    }
    return obj;
}

QString OAIUser_GeneralUser::getAbout() const {
    return m_about;
}
void OAIUser_GeneralUser::setAbout(const QString &about) {
    m_about = about;
    m_about_isSet = true;
}

bool OAIUser_GeneralUser::is_about_Set() const{
    return m_about_isSet;
}

bool OAIUser_GeneralUser::is_about_Valid() const{
    return m_about_isValid;
}

QString OAIUser_GeneralUser::getBlizzardDisplayName() const {
    return m_blizzard_display_name;
}
void OAIUser_GeneralUser::setBlizzardDisplayName(const QString &blizzard_display_name) {
    m_blizzard_display_name = blizzard_display_name;
    m_blizzard_display_name_isSet = true;
}

bool OAIUser_GeneralUser::is_blizzard_display_name_Set() const{
    return m_blizzard_display_name_isSet;
}

bool OAIUser_GeneralUser::is_blizzard_display_name_Valid() const{
    return m_blizzard_display_name_isValid;
}

QString OAIUser_GeneralUser::getCachedBungieGlobalDisplayName() const {
    return m_cached_bungie_global_display_name;
}
void OAIUser_GeneralUser::setCachedBungieGlobalDisplayName(const QString &cached_bungie_global_display_name) {
    m_cached_bungie_global_display_name = cached_bungie_global_display_name;
    m_cached_bungie_global_display_name_isSet = true;
}

bool OAIUser_GeneralUser::is_cached_bungie_global_display_name_Set() const{
    return m_cached_bungie_global_display_name_isSet;
}

bool OAIUser_GeneralUser::is_cached_bungie_global_display_name_Valid() const{
    return m_cached_bungie_global_display_name_isValid;
}

qint32 OAIUser_GeneralUser::getCachedBungieGlobalDisplayNameCode() const {
    return m_cached_bungie_global_display_name_code;
}
void OAIUser_GeneralUser::setCachedBungieGlobalDisplayNameCode(const qint32 &cached_bungie_global_display_name_code) {
    m_cached_bungie_global_display_name_code = cached_bungie_global_display_name_code;
    m_cached_bungie_global_display_name_code_isSet = true;
}

bool OAIUser_GeneralUser::is_cached_bungie_global_display_name_code_Set() const{
    return m_cached_bungie_global_display_name_code_isSet;
}

bool OAIUser_GeneralUser::is_cached_bungie_global_display_name_code_Valid() const{
    return m_cached_bungie_global_display_name_code_isValid;
}

OAIUser_UserToUserContext OAIUser_GeneralUser::getContext() const {
    return m_context;
}
void OAIUser_GeneralUser::setContext(const OAIUser_UserToUserContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIUser_GeneralUser::is_context_Set() const{
    return m_context_isSet;
}

bool OAIUser_GeneralUser::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIUser_GeneralUser::getDisplayName() const {
    return m_display_name;
}
void OAIUser_GeneralUser::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUser_GeneralUser::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUser_GeneralUser::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIUser_GeneralUser::getEgsDisplayName() const {
    return m_egs_display_name;
}
void OAIUser_GeneralUser::setEgsDisplayName(const QString &egs_display_name) {
    m_egs_display_name = egs_display_name;
    m_egs_display_name_isSet = true;
}

bool OAIUser_GeneralUser::is_egs_display_name_Set() const{
    return m_egs_display_name_isSet;
}

bool OAIUser_GeneralUser::is_egs_display_name_Valid() const{
    return m_egs_display_name_isValid;
}

QString OAIUser_GeneralUser::getFbDisplayName() const {
    return m_fb_display_name;
}
void OAIUser_GeneralUser::setFbDisplayName(const QString &fb_display_name) {
    m_fb_display_name = fb_display_name;
    m_fb_display_name_isSet = true;
}

bool OAIUser_GeneralUser::is_fb_display_name_Set() const{
    return m_fb_display_name_isSet;
}

bool OAIUser_GeneralUser::is_fb_display_name_Valid() const{
    return m_fb_display_name_isValid;
}

QDateTime OAIUser_GeneralUser::getFirstAccess() const {
    return m_first_access;
}
void OAIUser_GeneralUser::setFirstAccess(const QDateTime &first_access) {
    m_first_access = first_access;
    m_first_access_isSet = true;
}

bool OAIUser_GeneralUser::is_first_access_Set() const{
    return m_first_access_isSet;
}

bool OAIUser_GeneralUser::is_first_access_Valid() const{
    return m_first_access_isValid;
}

bool OAIUser_GeneralUser::isIsDeleted() const {
    return m_is_deleted;
}
void OAIUser_GeneralUser::setIsDeleted(const bool &is_deleted) {
    m_is_deleted = is_deleted;
    m_is_deleted_isSet = true;
}

bool OAIUser_GeneralUser::is_is_deleted_Set() const{
    return m_is_deleted_isSet;
}

bool OAIUser_GeneralUser::is_is_deleted_Valid() const{
    return m_is_deleted_isValid;
}

qint64 OAIUser_GeneralUser::getLastBanReportId() const {
    return m_last_ban_report_id;
}
void OAIUser_GeneralUser::setLastBanReportId(const qint64 &last_ban_report_id) {
    m_last_ban_report_id = last_ban_report_id;
    m_last_ban_report_id_isSet = true;
}

bool OAIUser_GeneralUser::is_last_ban_report_id_Set() const{
    return m_last_ban_report_id_isSet;
}

bool OAIUser_GeneralUser::is_last_ban_report_id_Valid() const{
    return m_last_ban_report_id_isValid;
}

QDateTime OAIUser_GeneralUser::getLastUpdate() const {
    return m_last_update;
}
void OAIUser_GeneralUser::setLastUpdate(const QDateTime &last_update) {
    m_last_update = last_update;
    m_last_update_isSet = true;
}

bool OAIUser_GeneralUser::is_last_update_Set() const{
    return m_last_update_isSet;
}

bool OAIUser_GeneralUser::is_last_update_Valid() const{
    return m_last_update_isValid;
}

qint64 OAIUser_GeneralUser::getLegacyPortalUid() const {
    return m_legacy_portal_uid;
}
void OAIUser_GeneralUser::setLegacyPortalUid(const qint64 &legacy_portal_uid) {
    m_legacy_portal_uid = legacy_portal_uid;
    m_legacy_portal_uid_isSet = true;
}

bool OAIUser_GeneralUser::is_legacy_portal_uid_Set() const{
    return m_legacy_portal_uid_isSet;
}

bool OAIUser_GeneralUser::is_legacy_portal_uid_Valid() const{
    return m_legacy_portal_uid_isValid;
}

QString OAIUser_GeneralUser::getLocale() const {
    return m_locale;
}
void OAIUser_GeneralUser::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIUser_GeneralUser::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIUser_GeneralUser::is_locale_Valid() const{
    return m_locale_isValid;
}

bool OAIUser_GeneralUser::isLocaleInheritDefault() const {
    return m_locale_inherit_default;
}
void OAIUser_GeneralUser::setLocaleInheritDefault(const bool &locale_inherit_default) {
    m_locale_inherit_default = locale_inherit_default;
    m_locale_inherit_default_isSet = true;
}

bool OAIUser_GeneralUser::is_locale_inherit_default_Set() const{
    return m_locale_inherit_default_isSet;
}

bool OAIUser_GeneralUser::is_locale_inherit_default_Valid() const{
    return m_locale_inherit_default_isValid;
}

qint64 OAIUser_GeneralUser::getMembershipId() const {
    return m_membership_id;
}
void OAIUser_GeneralUser::setMembershipId(const qint64 &membership_id) {
    m_membership_id = membership_id;
    m_membership_id_isSet = true;
}

bool OAIUser_GeneralUser::is_membership_id_Set() const{
    return m_membership_id_isSet;
}

bool OAIUser_GeneralUser::is_membership_id_Valid() const{
    return m_membership_id_isValid;
}

QString OAIUser_GeneralUser::getNormalizedName() const {
    return m_normalized_name;
}
void OAIUser_GeneralUser::setNormalizedName(const QString &normalized_name) {
    m_normalized_name = normalized_name;
    m_normalized_name_isSet = true;
}

bool OAIUser_GeneralUser::is_normalized_name_Set() const{
    return m_normalized_name_isSet;
}

bool OAIUser_GeneralUser::is_normalized_name_Valid() const{
    return m_normalized_name_isValid;
}

QDateTime OAIUser_GeneralUser::getProfileBanExpire() const {
    return m_profile_ban_expire;
}
void OAIUser_GeneralUser::setProfileBanExpire(const QDateTime &profile_ban_expire) {
    m_profile_ban_expire = profile_ban_expire;
    m_profile_ban_expire_isSet = true;
}

bool OAIUser_GeneralUser::is_profile_ban_expire_Set() const{
    return m_profile_ban_expire_isSet;
}

bool OAIUser_GeneralUser::is_profile_ban_expire_Valid() const{
    return m_profile_ban_expire_isValid;
}

qint32 OAIUser_GeneralUser::getProfilePicture() const {
    return m_profile_picture;
}
void OAIUser_GeneralUser::setProfilePicture(const qint32 &profile_picture) {
    m_profile_picture = profile_picture;
    m_profile_picture_isSet = true;
}

bool OAIUser_GeneralUser::is_profile_picture_Set() const{
    return m_profile_picture_isSet;
}

bool OAIUser_GeneralUser::is_profile_picture_Valid() const{
    return m_profile_picture_isValid;
}

QString OAIUser_GeneralUser::getProfilePicturePath() const {
    return m_profile_picture_path;
}
void OAIUser_GeneralUser::setProfilePicturePath(const QString &profile_picture_path) {
    m_profile_picture_path = profile_picture_path;
    m_profile_picture_path_isSet = true;
}

bool OAIUser_GeneralUser::is_profile_picture_path_Set() const{
    return m_profile_picture_path_isSet;
}

bool OAIUser_GeneralUser::is_profile_picture_path_Valid() const{
    return m_profile_picture_path_isValid;
}

QString OAIUser_GeneralUser::getProfilePictureWidePath() const {
    return m_profile_picture_wide_path;
}
void OAIUser_GeneralUser::setProfilePictureWidePath(const QString &profile_picture_wide_path) {
    m_profile_picture_wide_path = profile_picture_wide_path;
    m_profile_picture_wide_path_isSet = true;
}

bool OAIUser_GeneralUser::is_profile_picture_wide_path_Set() const{
    return m_profile_picture_wide_path_isSet;
}

bool OAIUser_GeneralUser::is_profile_picture_wide_path_Valid() const{
    return m_profile_picture_wide_path_isValid;
}

qint32 OAIUser_GeneralUser::getProfileTheme() const {
    return m_profile_theme;
}
void OAIUser_GeneralUser::setProfileTheme(const qint32 &profile_theme) {
    m_profile_theme = profile_theme;
    m_profile_theme_isSet = true;
}

bool OAIUser_GeneralUser::is_profile_theme_Set() const{
    return m_profile_theme_isSet;
}

bool OAIUser_GeneralUser::is_profile_theme_Valid() const{
    return m_profile_theme_isValid;
}

QString OAIUser_GeneralUser::getProfileThemeName() const {
    return m_profile_theme_name;
}
void OAIUser_GeneralUser::setProfileThemeName(const QString &profile_theme_name) {
    m_profile_theme_name = profile_theme_name;
    m_profile_theme_name_isSet = true;
}

bool OAIUser_GeneralUser::is_profile_theme_name_Set() const{
    return m_profile_theme_name_isSet;
}

bool OAIUser_GeneralUser::is_profile_theme_name_Valid() const{
    return m_profile_theme_name_isValid;
}

QString OAIUser_GeneralUser::getPsnDisplayName() const {
    return m_psn_display_name;
}
void OAIUser_GeneralUser::setPsnDisplayName(const QString &psn_display_name) {
    m_psn_display_name = psn_display_name;
    m_psn_display_name_isSet = true;
}

bool OAIUser_GeneralUser::is_psn_display_name_Set() const{
    return m_psn_display_name_isSet;
}

bool OAIUser_GeneralUser::is_psn_display_name_Valid() const{
    return m_psn_display_name_isValid;
}

bool OAIUser_GeneralUser::isShowActivity() const {
    return m_show_activity;
}
void OAIUser_GeneralUser::setShowActivity(const bool &show_activity) {
    m_show_activity = show_activity;
    m_show_activity_isSet = true;
}

bool OAIUser_GeneralUser::is_show_activity_Set() const{
    return m_show_activity_isSet;
}

bool OAIUser_GeneralUser::is_show_activity_Valid() const{
    return m_show_activity_isValid;
}

bool OAIUser_GeneralUser::isShowGroupMessaging() const {
    return m_show_group_messaging;
}
void OAIUser_GeneralUser::setShowGroupMessaging(const bool &show_group_messaging) {
    m_show_group_messaging = show_group_messaging;
    m_show_group_messaging_isSet = true;
}

bool OAIUser_GeneralUser::is_show_group_messaging_Set() const{
    return m_show_group_messaging_isSet;
}

bool OAIUser_GeneralUser::is_show_group_messaging_Valid() const{
    return m_show_group_messaging_isValid;
}

QString OAIUser_GeneralUser::getStadiaDisplayName() const {
    return m_stadia_display_name;
}
void OAIUser_GeneralUser::setStadiaDisplayName(const QString &stadia_display_name) {
    m_stadia_display_name = stadia_display_name;
    m_stadia_display_name_isSet = true;
}

bool OAIUser_GeneralUser::is_stadia_display_name_Set() const{
    return m_stadia_display_name_isSet;
}

bool OAIUser_GeneralUser::is_stadia_display_name_Valid() const{
    return m_stadia_display_name_isValid;
}

QDateTime OAIUser_GeneralUser::getStatusDate() const {
    return m_status_date;
}
void OAIUser_GeneralUser::setStatusDate(const QDateTime &status_date) {
    m_status_date = status_date;
    m_status_date_isSet = true;
}

bool OAIUser_GeneralUser::is_status_date_Set() const{
    return m_status_date_isSet;
}

bool OAIUser_GeneralUser::is_status_date_Valid() const{
    return m_status_date_isValid;
}

QString OAIUser_GeneralUser::getStatusText() const {
    return m_status_text;
}
void OAIUser_GeneralUser::setStatusText(const QString &status_text) {
    m_status_text = status_text;
    m_status_text_isSet = true;
}

bool OAIUser_GeneralUser::is_status_text_Set() const{
    return m_status_text_isSet;
}

bool OAIUser_GeneralUser::is_status_text_Valid() const{
    return m_status_text_isValid;
}

QString OAIUser_GeneralUser::getSteamDisplayName() const {
    return m_steam_display_name;
}
void OAIUser_GeneralUser::setSteamDisplayName(const QString &steam_display_name) {
    m_steam_display_name = steam_display_name;
    m_steam_display_name_isSet = true;
}

bool OAIUser_GeneralUser::is_steam_display_name_Set() const{
    return m_steam_display_name_isSet;
}

bool OAIUser_GeneralUser::is_steam_display_name_Valid() const{
    return m_steam_display_name_isValid;
}

qint64 OAIUser_GeneralUser::getSuccessMessageFlags() const {
    return m_success_message_flags;
}
void OAIUser_GeneralUser::setSuccessMessageFlags(const qint64 &success_message_flags) {
    m_success_message_flags = success_message_flags;
    m_success_message_flags_isSet = true;
}

bool OAIUser_GeneralUser::is_success_message_flags_Set() const{
    return m_success_message_flags_isSet;
}

bool OAIUser_GeneralUser::is_success_message_flags_Valid() const{
    return m_success_message_flags_isValid;
}

QString OAIUser_GeneralUser::getTwitchDisplayName() const {
    return m_twitch_display_name;
}
void OAIUser_GeneralUser::setTwitchDisplayName(const QString &twitch_display_name) {
    m_twitch_display_name = twitch_display_name;
    m_twitch_display_name_isSet = true;
}

bool OAIUser_GeneralUser::is_twitch_display_name_Set() const{
    return m_twitch_display_name_isSet;
}

bool OAIUser_GeneralUser::is_twitch_display_name_Valid() const{
    return m_twitch_display_name_isValid;
}

QString OAIUser_GeneralUser::getUniqueName() const {
    return m_unique_name;
}
void OAIUser_GeneralUser::setUniqueName(const QString &unique_name) {
    m_unique_name = unique_name;
    m_unique_name_isSet = true;
}

bool OAIUser_GeneralUser::is_unique_name_Set() const{
    return m_unique_name_isSet;
}

bool OAIUser_GeneralUser::is_unique_name_Valid() const{
    return m_unique_name_isValid;
}

qint32 OAIUser_GeneralUser::getUserTitle() const {
    return m_user_title;
}
void OAIUser_GeneralUser::setUserTitle(const qint32 &user_title) {
    m_user_title = user_title;
    m_user_title_isSet = true;
}

bool OAIUser_GeneralUser::is_user_title_Set() const{
    return m_user_title_isSet;
}

bool OAIUser_GeneralUser::is_user_title_Valid() const{
    return m_user_title_isValid;
}

QString OAIUser_GeneralUser::getUserTitleDisplay() const {
    return m_user_title_display;
}
void OAIUser_GeneralUser::setUserTitleDisplay(const QString &user_title_display) {
    m_user_title_display = user_title_display;
    m_user_title_display_isSet = true;
}

bool OAIUser_GeneralUser::is_user_title_display_Set() const{
    return m_user_title_display_isSet;
}

bool OAIUser_GeneralUser::is_user_title_display_Valid() const{
    return m_user_title_display_isValid;
}

QString OAIUser_GeneralUser::getXboxDisplayName() const {
    return m_xbox_display_name;
}
void OAIUser_GeneralUser::setXboxDisplayName(const QString &xbox_display_name) {
    m_xbox_display_name = xbox_display_name;
    m_xbox_display_name_isSet = true;
}

bool OAIUser_GeneralUser::is_xbox_display_name_Set() const{
    return m_xbox_display_name_isSet;
}

bool OAIUser_GeneralUser::is_xbox_display_name_Valid() const{
    return m_xbox_display_name_isValid;
}

bool OAIUser_GeneralUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_about_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blizzard_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cached_bungie_global_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cached_bungie_global_display_name_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_egs_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fb_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_ban_report_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legacy_portal_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_inherit_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_normalized_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_ban_expire_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_picture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_picture_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_picture_wide_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_theme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_theme_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psn_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_group_messaging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stadia_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steam_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_message_flags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitch_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_title_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xbox_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_GeneralUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
