/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_DestinyTalentNode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_DestinyTalentNode::OAIDestiny_DestinyTalentNode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_DestinyTalentNode::OAIDestiny_DestinyTalentNode() {
    this->initializeModel();
}

OAIDestiny_DestinyTalentNode::~OAIDestiny_DestinyTalentNode() {}

void OAIDestiny_DestinyTalentNode::initializeModel() {

    m_activation_grid_level_isSet = false;
    m_activation_grid_level_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_is_activated_isSet = false;
    m_is_activated_isValid = false;

    m_materials_to_upgrade_isSet = false;
    m_materials_to_upgrade_isValid = false;

    m_node_hash_isSet = false;
    m_node_hash_isValid = false;

    m_node_index_isSet = false;
    m_node_index_isValid = false;

    m_node_stats_block_isSet = false;
    m_node_stats_block_isValid = false;

    m_progress_percent_isSet = false;
    m_progress_percent_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_step_index_isSet = false;
    m_step_index_isValid = false;
}

void OAIDestiny_DestinyTalentNode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_DestinyTalentNode::fromJsonObject(QJsonObject json) {

    m_activation_grid_level_isValid = ::OpenAPI::fromJsonValue(m_activation_grid_level, json[QString("activationGridLevel")]);
    m_activation_grid_level_isSet = !json[QString("activationGridLevel")].isNull() && m_activation_grid_level_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_is_activated_isValid = ::OpenAPI::fromJsonValue(m_is_activated, json[QString("isActivated")]);
    m_is_activated_isSet = !json[QString("isActivated")].isNull() && m_is_activated_isValid;

    m_materials_to_upgrade_isValid = ::OpenAPI::fromJsonValue(m_materials_to_upgrade, json[QString("materialsToUpgrade")]);
    m_materials_to_upgrade_isSet = !json[QString("materialsToUpgrade")].isNull() && m_materials_to_upgrade_isValid;

    m_node_hash_isValid = ::OpenAPI::fromJsonValue(m_node_hash, json[QString("nodeHash")]);
    m_node_hash_isSet = !json[QString("nodeHash")].isNull() && m_node_hash_isValid;

    m_node_index_isValid = ::OpenAPI::fromJsonValue(m_node_index, json[QString("nodeIndex")]);
    m_node_index_isSet = !json[QString("nodeIndex")].isNull() && m_node_index_isValid;

    m_node_stats_block_isValid = ::OpenAPI::fromJsonValue(m_node_stats_block, json[QString("nodeStatsBlock")]);
    m_node_stats_block_isSet = !json[QString("nodeStatsBlock")].isNull() && m_node_stats_block_isValid;

    m_progress_percent_isValid = ::OpenAPI::fromJsonValue(m_progress_percent, json[QString("progressPercent")]);
    m_progress_percent_isSet = !json[QString("progressPercent")].isNull() && m_progress_percent_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_step_index_isValid = ::OpenAPI::fromJsonValue(m_step_index, json[QString("stepIndex")]);
    m_step_index_isSet = !json[QString("stepIndex")].isNull() && m_step_index_isValid;
}

QString OAIDestiny_DestinyTalentNode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_DestinyTalentNode::asJsonObject() const {
    QJsonObject obj;
    if (m_activation_grid_level_isSet) {
        obj.insert(QString("activationGridLevel"), ::OpenAPI::toJsonValue(m_activation_grid_level));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_is_activated_isSet) {
        obj.insert(QString("isActivated"), ::OpenAPI::toJsonValue(m_is_activated));
    }
    if (m_materials_to_upgrade.size() > 0) {
        obj.insert(QString("materialsToUpgrade"), ::OpenAPI::toJsonValue(m_materials_to_upgrade));
    }
    if (m_node_hash_isSet) {
        obj.insert(QString("nodeHash"), ::OpenAPI::toJsonValue(m_node_hash));
    }
    if (m_node_index_isSet) {
        obj.insert(QString("nodeIndex"), ::OpenAPI::toJsonValue(m_node_index));
    }
    if (m_node_stats_block.isSet()) {
        obj.insert(QString("nodeStatsBlock"), ::OpenAPI::toJsonValue(m_node_stats_block));
    }
    if (m_progress_percent_isSet) {
        obj.insert(QString("progressPercent"), ::OpenAPI::toJsonValue(m_progress_percent));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_step_index_isSet) {
        obj.insert(QString("stepIndex"), ::OpenAPI::toJsonValue(m_step_index));
    }
    return obj;
}

qint32 OAIDestiny_DestinyTalentNode::getActivationGridLevel() const {
    return m_activation_grid_level;
}
void OAIDestiny_DestinyTalentNode::setActivationGridLevel(const qint32 &activation_grid_level) {
    m_activation_grid_level = activation_grid_level;
    m_activation_grid_level_isSet = true;
}

bool OAIDestiny_DestinyTalentNode::is_activation_grid_level_Set() const{
    return m_activation_grid_level_isSet;
}

bool OAIDestiny_DestinyTalentNode::is_activation_grid_level_Valid() const{
    return m_activation_grid_level_isValid;
}

bool OAIDestiny_DestinyTalentNode::isHidden() const {
    return m_hidden;
}
void OAIDestiny_DestinyTalentNode::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAIDestiny_DestinyTalentNode::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAIDestiny_DestinyTalentNode::is_hidden_Valid() const{
    return m_hidden_isValid;
}

bool OAIDestiny_DestinyTalentNode::isIsActivated() const {
    return m_is_activated;
}
void OAIDestiny_DestinyTalentNode::setIsActivated(const bool &is_activated) {
    m_is_activated = is_activated;
    m_is_activated_isSet = true;
}

bool OAIDestiny_DestinyTalentNode::is_is_activated_Set() const{
    return m_is_activated_isSet;
}

bool OAIDestiny_DestinyTalentNode::is_is_activated_Valid() const{
    return m_is_activated_isValid;
}

QList<OAIDestiny_Definitions_DestinyMaterialRequirement> OAIDestiny_DestinyTalentNode::getMaterialsToUpgrade() const {
    return m_materials_to_upgrade;
}
void OAIDestiny_DestinyTalentNode::setMaterialsToUpgrade(const QList<OAIDestiny_Definitions_DestinyMaterialRequirement> &materials_to_upgrade) {
    m_materials_to_upgrade = materials_to_upgrade;
    m_materials_to_upgrade_isSet = true;
}

bool OAIDestiny_DestinyTalentNode::is_materials_to_upgrade_Set() const{
    return m_materials_to_upgrade_isSet;
}

bool OAIDestiny_DestinyTalentNode::is_materials_to_upgrade_Valid() const{
    return m_materials_to_upgrade_isValid;
}

qint32 OAIDestiny_DestinyTalentNode::getNodeHash() const {
    return m_node_hash;
}
void OAIDestiny_DestinyTalentNode::setNodeHash(const qint32 &node_hash) {
    m_node_hash = node_hash;
    m_node_hash_isSet = true;
}

bool OAIDestiny_DestinyTalentNode::is_node_hash_Set() const{
    return m_node_hash_isSet;
}

bool OAIDestiny_DestinyTalentNode::is_node_hash_Valid() const{
    return m_node_hash_isValid;
}

qint32 OAIDestiny_DestinyTalentNode::getNodeIndex() const {
    return m_node_index;
}
void OAIDestiny_DestinyTalentNode::setNodeIndex(const qint32 &node_index) {
    m_node_index = node_index;
    m_node_index_isSet = true;
}

bool OAIDestiny_DestinyTalentNode::is_node_index_Set() const{
    return m_node_index_isSet;
}

bool OAIDestiny_DestinyTalentNode::is_node_index_Valid() const{
    return m_node_index_isValid;
}

OAIDestiny_DestinyTalentNodeStatBlock OAIDestiny_DestinyTalentNode::getNodeStatsBlock() const {
    return m_node_stats_block;
}
void OAIDestiny_DestinyTalentNode::setNodeStatsBlock(const OAIDestiny_DestinyTalentNodeStatBlock &node_stats_block) {
    m_node_stats_block = node_stats_block;
    m_node_stats_block_isSet = true;
}

bool OAIDestiny_DestinyTalentNode::is_node_stats_block_Set() const{
    return m_node_stats_block_isSet;
}

bool OAIDestiny_DestinyTalentNode::is_node_stats_block_Valid() const{
    return m_node_stats_block_isValid;
}

float OAIDestiny_DestinyTalentNode::getProgressPercent() const {
    return m_progress_percent;
}
void OAIDestiny_DestinyTalentNode::setProgressPercent(const float &progress_percent) {
    m_progress_percent = progress_percent;
    m_progress_percent_isSet = true;
}

bool OAIDestiny_DestinyTalentNode::is_progress_percent_Set() const{
    return m_progress_percent_isSet;
}

bool OAIDestiny_DestinyTalentNode::is_progress_percent_Valid() const{
    return m_progress_percent_isValid;
}

qint32 OAIDestiny_DestinyTalentNode::getState() const {
    return m_state;
}
void OAIDestiny_DestinyTalentNode::setState(const qint32 &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDestiny_DestinyTalentNode::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDestiny_DestinyTalentNode::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAIDestiny_DestinyTalentNode::getStepIndex() const {
    return m_step_index;
}
void OAIDestiny_DestinyTalentNode::setStepIndex(const qint32 &step_index) {
    m_step_index = step_index;
    m_step_index_isSet = true;
}

bool OAIDestiny_DestinyTalentNode::is_step_index_Set() const{
    return m_step_index_isSet;
}

bool OAIDestiny_DestinyTalentNode::is_step_index_Valid() const{
    return m_step_index_isValid;
}

bool OAIDestiny_DestinyTalentNode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activation_grid_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_activated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_materials_to_upgrade.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_stats_block.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_DestinyTalentNode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
