/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForumApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIForumApi::OAIForumApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIForumApi::~OAIForumApi() {
}

void OAIForumApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://www.bungie.net/Platform"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("forum_GetCoreTopicsPaged", defaultConf);
    _serverIndices.insert("forum_GetCoreTopicsPaged", 0);
    _serverConfigs.insert("forum_GetForumTagSuggestions", defaultConf);
    _serverIndices.insert("forum_GetForumTagSuggestions", 0);
    _serverConfigs.insert("forum_GetPoll", defaultConf);
    _serverIndices.insert("forum_GetPoll", 0);
    _serverConfigs.insert("forum_GetPostAndParent", defaultConf);
    _serverIndices.insert("forum_GetPostAndParent", 0);
    _serverConfigs.insert("forum_GetPostAndParentAwaitingApproval", defaultConf);
    _serverIndices.insert("forum_GetPostAndParentAwaitingApproval", 0);
    _serverConfigs.insert("forum_GetPostsThreadedPaged", defaultConf);
    _serverIndices.insert("forum_GetPostsThreadedPaged", 0);
    _serverConfigs.insert("forum_GetPostsThreadedPagedFromChild", defaultConf);
    _serverIndices.insert("forum_GetPostsThreadedPagedFromChild", 0);
    _serverConfigs.insert("forum_GetRecruitmentThreadSummaries", defaultConf);
    _serverIndices.insert("forum_GetRecruitmentThreadSummaries", 0);
    _serverConfigs.insert("forum_GetTopicForContent", defaultConf);
    _serverIndices.insert("forum_GetTopicForContent", 0);
    _serverConfigs.insert("forum_GetTopicsPaged", defaultConf);
    _serverIndices.insert("forum_GetTopicsPaged", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIForumApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIForumApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIForumApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIForumApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIForumApi::setUsername(const QString &username) {
    _username = username;
}

void OAIForumApi::setPassword(const QString &password) {
    _password = password;
}


void OAIForumApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIForumApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIForumApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIForumApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIForumApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIForumApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIForumApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIForumApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIForumApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIForumApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIForumApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIForumApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIForumApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIForumApi::forum_GetCoreTopicsPaged(const qint32 &category_filter, const qint32 &page, const qint32 &quick_date, const qint32 &sort, const ::OpenAPI::OptionalParam<QString> &locales) {
    QString fullPath = QString(_serverConfigs["forum_GetCoreTopicsPaged"][_serverIndices.value("forum_GetCoreTopicsPaged")].URL()+"/Forum/GetCoreTopicsPaged/{page}/{sort}/{quickDate}/{categoryFilter}/");
    
    
    {
        QString category_filterPathParam("{");
        category_filterPathParam.append("categoryFilter").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "categoryFilter", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"categoryFilter"+pathSuffix : pathPrefix;
        fullPath.replace(category_filterPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category_filter)));
    }
    
    {
        QString pagePathParam("{");
        pagePathParam.append("page").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "page", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"page"+pathSuffix : pathPrefix;
        fullPath.replace(pagePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page)));
    }
    
    {
        QString quick_datePathParam("{");
        quick_datePathParam.append("quickDate").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "quickDate", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"quickDate"+pathSuffix : pathPrefix;
        fullPath.replace(quick_datePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(quick_date)));
    }
    
    {
        QString sortPathParam("{");
        sortPathParam.append("sort").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "sort", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"sort"+pathSuffix : pathPrefix;
        fullPath.replace(sortPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sort)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (locales.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "locales", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("locales")).append(querySuffix).append(QUrl::toPercentEncoding(locales.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIForumApi::forum_GetCoreTopicsPagedCallback);
    connect(this, &OAIForumApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIForumApi::forum_GetCoreTopicsPagedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICommunityContent_GetCommunityContent_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forum_GetCoreTopicsPagedSignal(output);
        Q_EMIT forum_GetCoreTopicsPagedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forum_GetCoreTopicsPagedSignalE(output, error_type, error_str);
        Q_EMIT forum_GetCoreTopicsPagedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forum_GetCoreTopicsPagedSignalError(output, error_type, error_str);
        Q_EMIT forum_GetCoreTopicsPagedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIForumApi::forum_GetForumTagSuggestions(const ::OpenAPI::OptionalParam<QString> &partialtag) {
    QString fullPath = QString(_serverConfigs["forum_GetForumTagSuggestions"][_serverIndices.value("forum_GetForumTagSuggestions")].URL()+"/Forum/GetForumTagSuggestions/");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (partialtag.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "partialtag", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("partialtag")).append(querySuffix).append(QUrl::toPercentEncoding(partialtag.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIForumApi::forum_GetForumTagSuggestionsCallback);
    connect(this, &OAIForumApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIForumApi::forum_GetForumTagSuggestionsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIForum_GetForumTagSuggestions_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forum_GetForumTagSuggestionsSignal(output);
        Q_EMIT forum_GetForumTagSuggestionsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forum_GetForumTagSuggestionsSignalE(output, error_type, error_str);
        Q_EMIT forum_GetForumTagSuggestionsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forum_GetForumTagSuggestionsSignalError(output, error_type, error_str);
        Q_EMIT forum_GetForumTagSuggestionsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIForumApi::forum_GetPoll(const qint64 &topic_id) {
    QString fullPath = QString(_serverConfigs["forum_GetPoll"][_serverIndices.value("forum_GetPoll")].URL()+"/Forum/Poll/{topicId}/");
    
    
    {
        QString topic_idPathParam("{");
        topic_idPathParam.append("topicId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "topicId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"topicId"+pathSuffix : pathPrefix;
        fullPath.replace(topic_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(topic_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIForumApi::forum_GetPollCallback);
    connect(this, &OAIForumApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIForumApi::forum_GetPollCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICommunityContent_GetCommunityContent_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forum_GetPollSignal(output);
        Q_EMIT forum_GetPollSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forum_GetPollSignalE(output, error_type, error_str);
        Q_EMIT forum_GetPollSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forum_GetPollSignalError(output, error_type, error_str);
        Q_EMIT forum_GetPollSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIForumApi::forum_GetPostAndParent(const qint64 &child_post_id, const ::OpenAPI::OptionalParam<QString> &showbanned) {
    QString fullPath = QString(_serverConfigs["forum_GetPostAndParent"][_serverIndices.value("forum_GetPostAndParent")].URL()+"/Forum/GetPostAndParent/{childPostId}/");
    
    
    {
        QString child_post_idPathParam("{");
        child_post_idPathParam.append("childPostId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "childPostId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"childPostId"+pathSuffix : pathPrefix;
        fullPath.replace(child_post_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(child_post_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (showbanned.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "showbanned", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("showbanned")).append(querySuffix).append(QUrl::toPercentEncoding(showbanned.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIForumApi::forum_GetPostAndParentCallback);
    connect(this, &OAIForumApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIForumApi::forum_GetPostAndParentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICommunityContent_GetCommunityContent_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forum_GetPostAndParentSignal(output);
        Q_EMIT forum_GetPostAndParentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forum_GetPostAndParentSignalE(output, error_type, error_str);
        Q_EMIT forum_GetPostAndParentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forum_GetPostAndParentSignalError(output, error_type, error_str);
        Q_EMIT forum_GetPostAndParentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIForumApi::forum_GetPostAndParentAwaitingApproval(const qint64 &child_post_id, const ::OpenAPI::OptionalParam<QString> &showbanned) {
    QString fullPath = QString(_serverConfigs["forum_GetPostAndParentAwaitingApproval"][_serverIndices.value("forum_GetPostAndParentAwaitingApproval")].URL()+"/Forum/GetPostAndParentAwaitingApproval/{childPostId}/");
    
    
    {
        QString child_post_idPathParam("{");
        child_post_idPathParam.append("childPostId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "childPostId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"childPostId"+pathSuffix : pathPrefix;
        fullPath.replace(child_post_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(child_post_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (showbanned.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "showbanned", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("showbanned")).append(querySuffix).append(QUrl::toPercentEncoding(showbanned.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIForumApi::forum_GetPostAndParentAwaitingApprovalCallback);
    connect(this, &OAIForumApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIForumApi::forum_GetPostAndParentAwaitingApprovalCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICommunityContent_GetCommunityContent_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forum_GetPostAndParentAwaitingApprovalSignal(output);
        Q_EMIT forum_GetPostAndParentAwaitingApprovalSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forum_GetPostAndParentAwaitingApprovalSignalE(output, error_type, error_str);
        Q_EMIT forum_GetPostAndParentAwaitingApprovalSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forum_GetPostAndParentAwaitingApprovalSignalError(output, error_type, error_str);
        Q_EMIT forum_GetPostAndParentAwaitingApprovalSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIForumApi::forum_GetPostsThreadedPaged(const bool &get_parent_post, const qint32 &page, const qint32 &page_size, const qint64 &parent_post_id, const qint32 &reply_size, const bool &root_thread_mode, const qint32 &sort_mode, const ::OpenAPI::OptionalParam<QString> &showbanned) {
    QString fullPath = QString(_serverConfigs["forum_GetPostsThreadedPaged"][_serverIndices.value("forum_GetPostsThreadedPaged")].URL()+"/Forum/GetPostsThreadedPaged/{parentPostId}/{page}/{pageSize}/{replySize}/{getParentPost}/{rootThreadMode}/{sortMode}/");
    
    
    {
        QString get_parent_postPathParam("{");
        get_parent_postPathParam.append("getParentPost").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "getParentPost", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"getParentPost"+pathSuffix : pathPrefix;
        fullPath.replace(get_parent_postPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(get_parent_post)));
    }
    
    {
        QString pagePathParam("{");
        pagePathParam.append("page").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "page", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"page"+pathSuffix : pathPrefix;
        fullPath.replace(pagePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page)));
    }
    
    {
        QString page_sizePathParam("{");
        page_sizePathParam.append("pageSize").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageSize", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageSize"+pathSuffix : pathPrefix;
        fullPath.replace(page_sizePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_size)));
    }
    
    {
        QString parent_post_idPathParam("{");
        parent_post_idPathParam.append("parentPostId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "parentPostId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"parentPostId"+pathSuffix : pathPrefix;
        fullPath.replace(parent_post_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(parent_post_id)));
    }
    
    {
        QString reply_sizePathParam("{");
        reply_sizePathParam.append("replySize").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "replySize", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"replySize"+pathSuffix : pathPrefix;
        fullPath.replace(reply_sizePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(reply_size)));
    }
    
    {
        QString root_thread_modePathParam("{");
        root_thread_modePathParam.append("rootThreadMode").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rootThreadMode", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rootThreadMode"+pathSuffix : pathPrefix;
        fullPath.replace(root_thread_modePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(root_thread_mode)));
    }
    
    {
        QString sort_modePathParam("{");
        sort_modePathParam.append("sortMode").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "sortMode", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"sortMode"+pathSuffix : pathPrefix;
        fullPath.replace(sort_modePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sort_mode)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (showbanned.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "showbanned", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("showbanned")).append(querySuffix).append(QUrl::toPercentEncoding(showbanned.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIForumApi::forum_GetPostsThreadedPagedCallback);
    connect(this, &OAIForumApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIForumApi::forum_GetPostsThreadedPagedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICommunityContent_GetCommunityContent_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forum_GetPostsThreadedPagedSignal(output);
        Q_EMIT forum_GetPostsThreadedPagedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forum_GetPostsThreadedPagedSignalE(output, error_type, error_str);
        Q_EMIT forum_GetPostsThreadedPagedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forum_GetPostsThreadedPagedSignalError(output, error_type, error_str);
        Q_EMIT forum_GetPostsThreadedPagedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIForumApi::forum_GetPostsThreadedPagedFromChild(const qint64 &child_post_id, const qint32 &page, const qint32 &page_size, const qint32 &reply_size, const bool &root_thread_mode, const qint32 &sort_mode, const ::OpenAPI::OptionalParam<QString> &showbanned) {
    QString fullPath = QString(_serverConfigs["forum_GetPostsThreadedPagedFromChild"][_serverIndices.value("forum_GetPostsThreadedPagedFromChild")].URL()+"/Forum/GetPostsThreadedPagedFromChild/{childPostId}/{page}/{pageSize}/{replySize}/{rootThreadMode}/{sortMode}/");
    
    
    {
        QString child_post_idPathParam("{");
        child_post_idPathParam.append("childPostId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "childPostId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"childPostId"+pathSuffix : pathPrefix;
        fullPath.replace(child_post_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(child_post_id)));
    }
    
    {
        QString pagePathParam("{");
        pagePathParam.append("page").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "page", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"page"+pathSuffix : pathPrefix;
        fullPath.replace(pagePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page)));
    }
    
    {
        QString page_sizePathParam("{");
        page_sizePathParam.append("pageSize").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageSize", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageSize"+pathSuffix : pathPrefix;
        fullPath.replace(page_sizePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_size)));
    }
    
    {
        QString reply_sizePathParam("{");
        reply_sizePathParam.append("replySize").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "replySize", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"replySize"+pathSuffix : pathPrefix;
        fullPath.replace(reply_sizePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(reply_size)));
    }
    
    {
        QString root_thread_modePathParam("{");
        root_thread_modePathParam.append("rootThreadMode").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rootThreadMode", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rootThreadMode"+pathSuffix : pathPrefix;
        fullPath.replace(root_thread_modePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(root_thread_mode)));
    }
    
    {
        QString sort_modePathParam("{");
        sort_modePathParam.append("sortMode").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "sortMode", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"sortMode"+pathSuffix : pathPrefix;
        fullPath.replace(sort_modePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sort_mode)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (showbanned.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "showbanned", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("showbanned")).append(querySuffix).append(QUrl::toPercentEncoding(showbanned.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIForumApi::forum_GetPostsThreadedPagedFromChildCallback);
    connect(this, &OAIForumApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIForumApi::forum_GetPostsThreadedPagedFromChildCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICommunityContent_GetCommunityContent_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forum_GetPostsThreadedPagedFromChildSignal(output);
        Q_EMIT forum_GetPostsThreadedPagedFromChildSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forum_GetPostsThreadedPagedFromChildSignalE(output, error_type, error_str);
        Q_EMIT forum_GetPostsThreadedPagedFromChildSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forum_GetPostsThreadedPagedFromChildSignalError(output, error_type, error_str);
        Q_EMIT forum_GetPostsThreadedPagedFromChildSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIForumApi::forum_GetRecruitmentThreadSummaries() {
    QString fullPath = QString(_serverConfigs["forum_GetRecruitmentThreadSummaries"][_serverIndices.value("forum_GetRecruitmentThreadSummaries")].URL()+"/Forum/Recruit/Summaries/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIForumApi::forum_GetRecruitmentThreadSummariesCallback);
    connect(this, &OAIForumApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIForumApi::forum_GetRecruitmentThreadSummariesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIForum_GetRecruitmentThreadSummaries_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forum_GetRecruitmentThreadSummariesSignal(output);
        Q_EMIT forum_GetRecruitmentThreadSummariesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forum_GetRecruitmentThreadSummariesSignalE(output, error_type, error_str);
        Q_EMIT forum_GetRecruitmentThreadSummariesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forum_GetRecruitmentThreadSummariesSignalError(output, error_type, error_str);
        Q_EMIT forum_GetRecruitmentThreadSummariesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIForumApi::forum_GetTopicForContent(const qint64 &content_id) {
    QString fullPath = QString(_serverConfigs["forum_GetTopicForContent"][_serverIndices.value("forum_GetTopicForContent")].URL()+"/Forum/GetTopicForContent/{contentId}/");
    
    
    {
        QString content_idPathParam("{");
        content_idPathParam.append("contentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "contentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"contentId"+pathSuffix : pathPrefix;
        fullPath.replace(content_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(content_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIForumApi::forum_GetTopicForContentCallback);
    connect(this, &OAIForumApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIForumApi::forum_GetTopicForContentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIForum_GetTopicForContent_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forum_GetTopicForContentSignal(output);
        Q_EMIT forum_GetTopicForContentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forum_GetTopicForContentSignalE(output, error_type, error_str);
        Q_EMIT forum_GetTopicForContentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forum_GetTopicForContentSignalError(output, error_type, error_str);
        Q_EMIT forum_GetTopicForContentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIForumApi::forum_GetTopicsPaged(const qint32 &category_filter, const qint64 &group, const qint32 &page, const qint32 &page_size, const qint32 &quick_date, const qint32 &sort, const ::OpenAPI::OptionalParam<QString> &locales, const ::OpenAPI::OptionalParam<QString> &tagstring) {
    QString fullPath = QString(_serverConfigs["forum_GetTopicsPaged"][_serverIndices.value("forum_GetTopicsPaged")].URL()+"/Forum/GetTopicsPaged/{page}/{pageSize}/{group}/{sort}/{quickDate}/{categoryFilter}/");
    
    
    {
        QString category_filterPathParam("{");
        category_filterPathParam.append("categoryFilter").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "categoryFilter", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"categoryFilter"+pathSuffix : pathPrefix;
        fullPath.replace(category_filterPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category_filter)));
    }
    
    {
        QString groupPathParam("{");
        groupPathParam.append("group").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "group", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"group"+pathSuffix : pathPrefix;
        fullPath.replace(groupPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group)));
    }
    
    {
        QString pagePathParam("{");
        pagePathParam.append("page").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "page", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"page"+pathSuffix : pathPrefix;
        fullPath.replace(pagePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page)));
    }
    
    {
        QString page_sizePathParam("{");
        page_sizePathParam.append("pageSize").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageSize", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageSize"+pathSuffix : pathPrefix;
        fullPath.replace(page_sizePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_size)));
    }
    
    {
        QString quick_datePathParam("{");
        quick_datePathParam.append("quickDate").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "quickDate", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"quickDate"+pathSuffix : pathPrefix;
        fullPath.replace(quick_datePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(quick_date)));
    }
    
    {
        QString sortPathParam("{");
        sortPathParam.append("sort").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "sort", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"sort"+pathSuffix : pathPrefix;
        fullPath.replace(sortPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sort)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (locales.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "locales", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("locales")).append(querySuffix).append(QUrl::toPercentEncoding(locales.stringValue()));
    }
    if (tagstring.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "tagstring", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("tagstring")).append(querySuffix).append(QUrl::toPercentEncoding(tagstring.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIForumApi::forum_GetTopicsPagedCallback);
    connect(this, &OAIForumApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIForumApi::forum_GetTopicsPagedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICommunityContent_GetCommunityContent_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT forum_GetTopicsPagedSignal(output);
        Q_EMIT forum_GetTopicsPagedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT forum_GetTopicsPagedSignalE(output, error_type, error_str);
        Q_EMIT forum_GetTopicsPagedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT forum_GetTopicsPagedSignalError(output, error_type, error_str);
        Q_EMIT forum_GetTopicsPagedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIForumApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
