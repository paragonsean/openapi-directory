/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Quests_DestinyQuestStatus.h
 *
 * Data regarding the progress of a Quest for a specific character. Quests are composed of multiple steps, each with potentially multiple objectives: this QuestStatus will return Objective data for the *currently active* step in this quest.
 */

#ifndef OAIDestiny_Quests_DestinyQuestStatus_H
#define OAIDestiny_Quests_DestinyQuestStatus_H

#include <QJsonObject>

#include "OAIDestiny_Quests_DestinyObjectiveProgress.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Quests_DestinyObjectiveProgress;

class OAIDestiny_Quests_DestinyQuestStatus : public OAIObject {
public:
    OAIDestiny_Quests_DestinyQuestStatus();
    OAIDestiny_Quests_DestinyQuestStatus(QString json);
    ~OAIDestiny_Quests_DestinyQuestStatus() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isCompleted() const;
    void setCompleted(const bool &completed);
    bool is_completed_Set() const;
    bool is_completed_Valid() const;

    qint64 getItemInstanceId() const;
    void setItemInstanceId(const qint64 &item_instance_id);
    bool is_item_instance_id_Set() const;
    bool is_item_instance_id_Valid() const;

    qint32 getQuestHash() const;
    void setQuestHash(const qint32 &quest_hash);
    bool is_quest_hash_Set() const;
    bool is_quest_hash_Valid() const;

    bool isRedeemed() const;
    void setRedeemed(const bool &redeemed);
    bool is_redeemed_Set() const;
    bool is_redeemed_Valid() const;

    bool isStarted() const;
    void setStarted(const bool &started);
    bool is_started_Set() const;
    bool is_started_Valid() const;

    qint32 getStepHash() const;
    void setStepHash(const qint32 &step_hash);
    bool is_step_hash_Set() const;
    bool is_step_hash_Valid() const;

    QList<OAIDestiny_Quests_DestinyObjectiveProgress> getStepObjectives() const;
    void setStepObjectives(const QList<OAIDestiny_Quests_DestinyObjectiveProgress> &step_objectives);
    bool is_step_objectives_Set() const;
    bool is_step_objectives_Valid() const;

    bool isTracked() const;
    void setTracked(const bool &tracked);
    bool is_tracked_Set() const;
    bool is_tracked_Valid() const;

    qint32 getVendorHash() const;
    void setVendorHash(const qint32 &vendor_hash);
    bool is_vendor_hash_Set() const;
    bool is_vendor_hash_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_completed;
    bool m_completed_isSet;
    bool m_completed_isValid;

    qint64 m_item_instance_id;
    bool m_item_instance_id_isSet;
    bool m_item_instance_id_isValid;

    qint32 m_quest_hash;
    bool m_quest_hash_isSet;
    bool m_quest_hash_isValid;

    bool m_redeemed;
    bool m_redeemed_isSet;
    bool m_redeemed_isValid;

    bool m_started;
    bool m_started_isSet;
    bool m_started_isValid;

    qint32 m_step_hash;
    bool m_step_hash_isSet;
    bool m_step_hash_isValid;

    QList<OAIDestiny_Quests_DestinyObjectiveProgress> m_step_objectives;
    bool m_step_objectives_isSet;
    bool m_step_objectives_isValid;

    bool m_tracked;
    bool m_tracked_isSet;
    bool m_tracked_isValid;

    qint32 m_vendor_hash;
    bool m_vendor_hash_isSet;
    bool m_vendor_hash_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Quests_DestinyQuestStatus)

#endif // OAIDestiny_Quests_DestinyQuestStatus_H
