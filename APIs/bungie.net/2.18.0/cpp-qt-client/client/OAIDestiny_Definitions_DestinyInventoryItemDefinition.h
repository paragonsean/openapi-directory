/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyInventoryItemDefinition.h
 *
 * So much of what you see in Destiny is actually an Item used in a new and creative way. This is the definition for Items in Destiny, which started off as just entities that could exist in your Inventory but ended up being the backing data for so much more: quests, reward previews, slots, and subclasses.  In practice, you will want to associate this data with \&quot;live\&quot; item data from a Bungie.Net Platform call: these definitions describe the item in generic, non-instanced terms: but an actual instance of an item can vary widely from these generic definitions.
 */

#ifndef OAIDestiny_Definitions_DestinyInventoryItemDefinition_H
#define OAIDestiny_Definitions_DestinyInventoryItemDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_Animations_DestinyAnimationReference.h"
#include "OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition.h"
#include "OAIDestiny_Definitions_DestinyEquippingBlockDefinition.h"
#include "OAIDestiny_Definitions_DestinyItemActionBlockDefinition.h"
#include "OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition.h"
#include "OAIDestiny_Definitions_DestinyItemGearsetBlockDefinition.h"
#include "OAIDestiny_Definitions_DestinyItemInventoryBlockDefinition.h"
#include "OAIDestiny_Definitions_DestinyItemInvestmentStatDefinition.h"
#include "OAIDestiny_Definitions_DestinyItemMetricBlockDefinition.h"
#include "OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition.h"
#include "OAIDestiny_Definitions_DestinyItemPerkEntryDefinition.h"
#include "OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition.h"
#include "OAIDestiny_Definitions_DestinyItemQualityBlockDefinition.h"
#include "OAIDestiny_Definitions_DestinyItemSackBlockDefinition.h"
#include "OAIDestiny_Definitions_DestinyItemSetBlockDefinition.h"
#include "OAIDestiny_Definitions_DestinyItemSocketBlockDefinition.h"
#include "OAIDestiny_Definitions_DestinyItemSourceBlockDefinition.h"
#include "OAIDestiny_Definitions_DestinyItemStatBlockDefinition.h"
#include "OAIDestiny_Definitions_DestinyItemSummaryBlockDefinition.h"
#include "OAIDestiny_Definitions_DestinyItemTalentGridBlockDefinition.h"
#include "OAIDestiny_Definitions_DestinyItemTooltipNotification.h"
#include "OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition.h"
#include "OAIDestiny_Definitions_DestinyItemValueBlockDefinition.h"
#include "OAIDestiny_Definitions_Items_DestinyItemPlugDefinition.h"
#include "OAIDestiny_Misc_DestinyColor.h"
#include "OAILinks_HyperlinkReference.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_DestinyItemActionBlockDefinition;
class OAIDestiny_Definitions_Animations_DestinyAnimationReference;
class OAIDestiny_Misc_DestinyColor;
class OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition;
class OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition;
class OAIDestiny_Definitions_DestinyEquippingBlockDefinition;
class OAIDestiny_Definitions_DestinyItemGearsetBlockDefinition;
class OAIDestiny_Definitions_DestinyItemInventoryBlockDefinition;
class OAIDestiny_Definitions_DestinyItemInvestmentStatDefinition;
class OAILinks_HyperlinkReference;
class OAIDestiny_Definitions_DestinyItemMetricBlockDefinition;
class OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition;
class OAIDestiny_Definitions_DestinyItemPerkEntryDefinition;
class OAIDestiny_Definitions_Items_DestinyItemPlugDefinition;
class OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition;
class OAIDestiny_Definitions_DestinyItemQualityBlockDefinition;
class OAIDestiny_Definitions_DestinyItemSackBlockDefinition;
class OAIDestiny_Definitions_DestinyItemSetBlockDefinition;
class OAIDestiny_Definitions_DestinyItemSocketBlockDefinition;
class OAIDestiny_Definitions_DestinyItemSourceBlockDefinition;
class OAIDestiny_Definitions_DestinyItemStatBlockDefinition;
class OAIDestiny_Definitions_DestinyItemSummaryBlockDefinition;
class OAIDestiny_Definitions_DestinyItemTalentGridBlockDefinition;
class OAIDestiny_Definitions_DestinyItemTooltipNotification;
class OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition;
class OAIDestiny_Definitions_DestinyItemValueBlockDefinition;

class OAIDestiny_Definitions_DestinyInventoryItemDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyInventoryItemDefinition();
    OAIDestiny_Definitions_DestinyInventoryItemDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyInventoryItemDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDestiny_Definitions_DestinyItemActionBlockDefinition getAction() const;
    void setAction(const OAIDestiny_Definitions_DestinyItemActionBlockDefinition &action);
    bool is_action_Set() const;
    bool is_action_Valid() const;

    bool isAllowActions() const;
    void setAllowActions(const bool &allow_actions);
    bool is_allow_actions_Set() const;
    bool is_allow_actions_Valid() const;

    QList<OAIDestiny_Definitions_Animations_DestinyAnimationReference> getAnimations() const;
    void setAnimations(const QList<OAIDestiny_Definitions_Animations_DestinyAnimationReference> &animations);
    bool is_animations_Set() const;
    bool is_animations_Valid() const;

    OAIDestiny_Misc_DestinyColor getBackgroundColor() const;
    void setBackgroundColor(const OAIDestiny_Misc_DestinyColor &background_color);
    bool is_background_color_Set() const;
    bool is_background_color_Valid() const;

    qint32 getBreakerType() const;
    void setBreakerType(const qint32 &breaker_type);
    bool is_breaker_type_Set() const;
    bool is_breaker_type_Valid() const;

    qint32 getBreakerTypeHash() const;
    void setBreakerTypeHash(const qint32 &breaker_type_hash);
    bool is_breaker_type_hash_Set() const;
    bool is_breaker_type_hash_Valid() const;

    qint32 getClassType() const;
    void setClassType(const qint32 &class_type);
    bool is_class_type_Set() const;
    bool is_class_type_Valid() const;

    qint32 getCollectibleHash() const;
    void setCollectibleHash(const qint32 &collectible_hash);
    bool is_collectible_hash_Set() const;
    bool is_collectible_hash_Valid() const;

    OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition getCrafting() const;
    void setCrafting(const OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition &crafting);
    bool is_crafting_Set() const;
    bool is_crafting_Valid() const;

    QList<qint32> getDamageTypeHashes() const;
    void setDamageTypeHashes(const QList<qint32> &damage_type_hashes);
    bool is_damage_type_hashes_Set() const;
    bool is_damage_type_hashes_Valid() const;

    QList<qint32> getDamageTypes() const;
    void setDamageTypes(const QList<qint32> &damage_types);
    bool is_damage_types_Set() const;
    bool is_damage_types_Valid() const;

    qint32 getDefaultDamageType() const;
    void setDefaultDamageType(const qint32 &default_damage_type);
    bool is_default_damage_type_Set() const;
    bool is_default_damage_type_Valid() const;

    qint32 getDefaultDamageTypeHash() const;
    void setDefaultDamageTypeHash(const qint32 &default_damage_type_hash);
    bool is_default_damage_type_hash_Set() const;
    bool is_default_damage_type_hash_Valid() const;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition getDisplayProperties() const;
    void setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties);
    bool is_display_properties_Set() const;
    bool is_display_properties_Valid() const;

    QString getDisplaySource() const;
    void setDisplaySource(const QString &display_source);
    bool is_display_source_Set() const;
    bool is_display_source_Valid() const;

    bool isDoesPostmasterPullHaveSideEffects() const;
    void setDoesPostmasterPullHaveSideEffects(const bool &does_postmaster_pull_have_side_effects);
    bool is_does_postmaster_pull_have_side_effects_Set() const;
    bool is_does_postmaster_pull_have_side_effects_Valid() const;

    qint32 getEmblemObjectiveHash() const;
    void setEmblemObjectiveHash(const qint32 &emblem_objective_hash);
    bool is_emblem_objective_hash_Set() const;
    bool is_emblem_objective_hash_Valid() const;

    bool isEquippable() const;
    void setEquippable(const bool &equippable);
    bool is_equippable_Set() const;
    bool is_equippable_Valid() const;

    OAIDestiny_Definitions_DestinyEquippingBlockDefinition getEquippingBlock() const;
    void setEquippingBlock(const OAIDestiny_Definitions_DestinyEquippingBlockDefinition &equipping_block);
    bool is_equipping_block_Set() const;
    bool is_equipping_block_Valid() const;

    QString getFlavorText() const;
    void setFlavorText(const QString &flavor_text);
    bool is_flavor_text_Set() const;
    bool is_flavor_text_Valid() const;

    OAIDestiny_Definitions_DestinyItemGearsetBlockDefinition getGearset() const;
    void setGearset(const OAIDestiny_Definitions_DestinyItemGearsetBlockDefinition &gearset);
    bool is_gearset_Set() const;
    bool is_gearset_Valid() const;

    qint32 getHash() const;
    void setHash(const qint32 &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    QString getIconWatermark() const;
    void setIconWatermark(const QString &icon_watermark);
    bool is_icon_watermark_Set() const;
    bool is_icon_watermark_Valid() const;

    QString getIconWatermarkShelved() const;
    void setIconWatermarkShelved(const QString &icon_watermark_shelved);
    bool is_icon_watermark_shelved_Set() const;
    bool is_icon_watermark_shelved_Valid() const;

    qint32 getIndex() const;
    void setIndex(const qint32 &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    OAIDestiny_Definitions_DestinyItemInventoryBlockDefinition getInventory() const;
    void setInventory(const OAIDestiny_Definitions_DestinyItemInventoryBlockDefinition &inventory);
    bool is_inventory_Set() const;
    bool is_inventory_Valid() const;

    QList<OAIDestiny_Definitions_DestinyItemInvestmentStatDefinition> getInvestmentStats() const;
    void setInvestmentStats(const QList<OAIDestiny_Definitions_DestinyItemInvestmentStatDefinition> &investment_stats);
    bool is_investment_stats_Set() const;
    bool is_investment_stats_Valid() const;

    bool isIsWrapper() const;
    void setIsWrapper(const bool &is_wrapper);
    bool is_is_wrapper_Set() const;
    bool is_is_wrapper_Valid() const;

    QList<qint32> getItemCategoryHashes() const;
    void setItemCategoryHashes(const QList<qint32> &item_category_hashes);
    bool is_item_category_hashes_Set() const;
    bool is_item_category_hashes_Valid() const;

    qint32 getItemSubType() const;
    void setItemSubType(const qint32 &item_sub_type);
    bool is_item_sub_type_Set() const;
    bool is_item_sub_type_Valid() const;

    qint32 getItemType() const;
    void setItemType(const qint32 &item_type);
    bool is_item_type_Set() const;
    bool is_item_type_Valid() const;

    QString getItemTypeAndTierDisplayName() const;
    void setItemTypeAndTierDisplayName(const QString &item_type_and_tier_display_name);
    bool is_item_type_and_tier_display_name_Set() const;
    bool is_item_type_and_tier_display_name_Valid() const;

    QString getItemTypeDisplayName() const;
    void setItemTypeDisplayName(const QString &item_type_display_name);
    bool is_item_type_display_name_Set() const;
    bool is_item_type_display_name_Valid() const;

    QList<OAILinks_HyperlinkReference> getLinks() const;
    void setLinks(const QList<OAILinks_HyperlinkReference> &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    qint32 getLoreHash() const;
    void setLoreHash(const qint32 &lore_hash);
    bool is_lore_hash_Set() const;
    bool is_lore_hash_Valid() const;

    OAIDestiny_Definitions_DestinyItemMetricBlockDefinition getMetrics() const;
    void setMetrics(const OAIDestiny_Definitions_DestinyItemMetricBlockDefinition &metrics);
    bool is_metrics_Set() const;
    bool is_metrics_Valid() const;

    bool isNonTransferrable() const;
    void setNonTransferrable(const bool &non_transferrable);
    bool is_non_transferrable_Set() const;
    bool is_non_transferrable_Valid() const;

    OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition getObjectives() const;
    void setObjectives(const OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition &objectives);
    bool is_objectives_Set() const;
    bool is_objectives_Valid() const;

    QList<OAIDestiny_Definitions_DestinyItemPerkEntryDefinition> getPerks() const;
    void setPerks(const QList<OAIDestiny_Definitions_DestinyItemPerkEntryDefinition> &perks);
    bool is_perks_Set() const;
    bool is_perks_Valid() const;

    OAIDestiny_Definitions_Items_DestinyItemPlugDefinition getPlug() const;
    void setPlug(const OAIDestiny_Definitions_Items_DestinyItemPlugDefinition &plug);
    bool is_plug_Set() const;
    bool is_plug_Valid() const;

    OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition getPreview() const;
    void setPreview(const OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition &preview);
    bool is_preview_Set() const;
    bool is_preview_Valid() const;

    OAIDestiny_Definitions_DestinyItemQualityBlockDefinition getQuality() const;
    void setQuality(const OAIDestiny_Definitions_DestinyItemQualityBlockDefinition &quality);
    bool is_quality_Set() const;
    bool is_quality_Valid() const;

    bool isRedacted() const;
    void setRedacted(const bool &redacted);
    bool is_redacted_Set() const;
    bool is_redacted_Valid() const;

    OAIDestiny_Definitions_DestinyItemSackBlockDefinition getSack() const;
    void setSack(const OAIDestiny_Definitions_DestinyItemSackBlockDefinition &sack);
    bool is_sack_Set() const;
    bool is_sack_Valid() const;

    QString getScreenshot() const;
    void setScreenshot(const QString &screenshot);
    bool is_screenshot_Set() const;
    bool is_screenshot_Valid() const;

    qint32 getSeasonHash() const;
    void setSeasonHash(const qint32 &season_hash);
    bool is_season_hash_Set() const;
    bool is_season_hash_Valid() const;

    QString getSecondaryIcon() const;
    void setSecondaryIcon(const QString &secondary_icon);
    bool is_secondary_icon_Set() const;
    bool is_secondary_icon_Valid() const;

    QString getSecondaryOverlay() const;
    void setSecondaryOverlay(const QString &secondary_overlay);
    bool is_secondary_overlay_Set() const;
    bool is_secondary_overlay_Valid() const;

    QString getSecondarySpecial() const;
    void setSecondarySpecial(const QString &secondary_special);
    bool is_secondary_special_Set() const;
    bool is_secondary_special_Valid() const;

    OAIDestiny_Definitions_DestinyItemSetBlockDefinition getSetData() const;
    void setSetData(const OAIDestiny_Definitions_DestinyItemSetBlockDefinition &set_data);
    bool is_set_data_Set() const;
    bool is_set_data_Valid() const;

    OAIDestiny_Definitions_DestinyItemSocketBlockDefinition getSockets() const;
    void setSockets(const OAIDestiny_Definitions_DestinyItemSocketBlockDefinition &sockets);
    bool is_sockets_Set() const;
    bool is_sockets_Valid() const;

    OAIDestiny_Definitions_DestinyItemSourceBlockDefinition getSourceData() const;
    void setSourceData(const OAIDestiny_Definitions_DestinyItemSourceBlockDefinition &source_data);
    bool is_source_data_Set() const;
    bool is_source_data_Valid() const;

    qint32 getSpecialItemType() const;
    void setSpecialItemType(const qint32 &special_item_type);
    bool is_special_item_type_Set() const;
    bool is_special_item_type_Valid() const;

    OAIDestiny_Definitions_DestinyItemStatBlockDefinition getStats() const;
    void setStats(const OAIDestiny_Definitions_DestinyItemStatBlockDefinition &stats);
    bool is_stats_Set() const;
    bool is_stats_Valid() const;

    OAIDestiny_Definitions_DestinyItemSummaryBlockDefinition getSummary() const;
    void setSummary(const OAIDestiny_Definitions_DestinyItemSummaryBlockDefinition &summary);
    bool is_summary_Set() const;
    bool is_summary_Valid() const;

    qint32 getSummaryItemHash() const;
    void setSummaryItemHash(const qint32 &summary_item_hash);
    bool is_summary_item_hash_Set() const;
    bool is_summary_item_hash_Valid() const;

    OAIDestiny_Definitions_DestinyItemTalentGridBlockDefinition getTalentGrid() const;
    void setTalentGrid(const OAIDestiny_Definitions_DestinyItemTalentGridBlockDefinition &talent_grid);
    bool is_talent_grid_Set() const;
    bool is_talent_grid_Valid() const;

    QList<OAIDestiny_Definitions_DestinyItemTooltipNotification> getTooltipNotifications() const;
    void setTooltipNotifications(const QList<OAIDestiny_Definitions_DestinyItemTooltipNotification> &tooltip_notifications);
    bool is_tooltip_notifications_Set() const;
    bool is_tooltip_notifications_Valid() const;

    QString getTooltipStyle() const;
    void setTooltipStyle(const QString &tooltip_style);
    bool is_tooltip_style_Set() const;
    bool is_tooltip_style_Valid() const;

    QList<qint32> getTraitHashes() const;
    void setTraitHashes(const QList<qint32> &trait_hashes);
    bool is_trait_hashes_Set() const;
    bool is_trait_hashes_Valid() const;

    QList<QString> getTraitIds() const;
    void setTraitIds(const QList<QString> &trait_ids);
    bool is_trait_ids_Set() const;
    bool is_trait_ids_Valid() const;

    OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition getTranslationBlock() const;
    void setTranslationBlock(const OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition &translation_block);
    bool is_translation_block_Set() const;
    bool is_translation_block_Valid() const;

    QString getUiItemDisplayStyle() const;
    void setUiItemDisplayStyle(const QString &ui_item_display_style);
    bool is_ui_item_display_style_Set() const;
    bool is_ui_item_display_style_Valid() const;

    OAIDestiny_Definitions_DestinyItemValueBlockDefinition getValue() const;
    void setValue(const OAIDestiny_Definitions_DestinyItemValueBlockDefinition &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDestiny_Definitions_DestinyItemActionBlockDefinition m_action;
    bool m_action_isSet;
    bool m_action_isValid;

    bool m_allow_actions;
    bool m_allow_actions_isSet;
    bool m_allow_actions_isValid;

    QList<OAIDestiny_Definitions_Animations_DestinyAnimationReference> m_animations;
    bool m_animations_isSet;
    bool m_animations_isValid;

    OAIDestiny_Misc_DestinyColor m_background_color;
    bool m_background_color_isSet;
    bool m_background_color_isValid;

    qint32 m_breaker_type;
    bool m_breaker_type_isSet;
    bool m_breaker_type_isValid;

    qint32 m_breaker_type_hash;
    bool m_breaker_type_hash_isSet;
    bool m_breaker_type_hash_isValid;

    qint32 m_class_type;
    bool m_class_type_isSet;
    bool m_class_type_isValid;

    qint32 m_collectible_hash;
    bool m_collectible_hash_isSet;
    bool m_collectible_hash_isValid;

    OAIDestiny_Definitions_DestinyItemCraftingBlockDefinition m_crafting;
    bool m_crafting_isSet;
    bool m_crafting_isValid;

    QList<qint32> m_damage_type_hashes;
    bool m_damage_type_hashes_isSet;
    bool m_damage_type_hashes_isValid;

    QList<qint32> m_damage_types;
    bool m_damage_types_isSet;
    bool m_damage_types_isValid;

    qint32 m_default_damage_type;
    bool m_default_damage_type_isSet;
    bool m_default_damage_type_isValid;

    qint32 m_default_damage_type_hash;
    bool m_default_damage_type_hash_isSet;
    bool m_default_damage_type_hash_isValid;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition m_display_properties;
    bool m_display_properties_isSet;
    bool m_display_properties_isValid;

    QString m_display_source;
    bool m_display_source_isSet;
    bool m_display_source_isValid;

    bool m_does_postmaster_pull_have_side_effects;
    bool m_does_postmaster_pull_have_side_effects_isSet;
    bool m_does_postmaster_pull_have_side_effects_isValid;

    qint32 m_emblem_objective_hash;
    bool m_emblem_objective_hash_isSet;
    bool m_emblem_objective_hash_isValid;

    bool m_equippable;
    bool m_equippable_isSet;
    bool m_equippable_isValid;

    OAIDestiny_Definitions_DestinyEquippingBlockDefinition m_equipping_block;
    bool m_equipping_block_isSet;
    bool m_equipping_block_isValid;

    QString m_flavor_text;
    bool m_flavor_text_isSet;
    bool m_flavor_text_isValid;

    OAIDestiny_Definitions_DestinyItemGearsetBlockDefinition m_gearset;
    bool m_gearset_isSet;
    bool m_gearset_isValid;

    qint32 m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    QString m_icon_watermark;
    bool m_icon_watermark_isSet;
    bool m_icon_watermark_isValid;

    QString m_icon_watermark_shelved;
    bool m_icon_watermark_shelved_isSet;
    bool m_icon_watermark_shelved_isValid;

    qint32 m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    OAIDestiny_Definitions_DestinyItemInventoryBlockDefinition m_inventory;
    bool m_inventory_isSet;
    bool m_inventory_isValid;

    QList<OAIDestiny_Definitions_DestinyItemInvestmentStatDefinition> m_investment_stats;
    bool m_investment_stats_isSet;
    bool m_investment_stats_isValid;

    bool m_is_wrapper;
    bool m_is_wrapper_isSet;
    bool m_is_wrapper_isValid;

    QList<qint32> m_item_category_hashes;
    bool m_item_category_hashes_isSet;
    bool m_item_category_hashes_isValid;

    qint32 m_item_sub_type;
    bool m_item_sub_type_isSet;
    bool m_item_sub_type_isValid;

    qint32 m_item_type;
    bool m_item_type_isSet;
    bool m_item_type_isValid;

    QString m_item_type_and_tier_display_name;
    bool m_item_type_and_tier_display_name_isSet;
    bool m_item_type_and_tier_display_name_isValid;

    QString m_item_type_display_name;
    bool m_item_type_display_name_isSet;
    bool m_item_type_display_name_isValid;

    QList<OAILinks_HyperlinkReference> m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    qint32 m_lore_hash;
    bool m_lore_hash_isSet;
    bool m_lore_hash_isValid;

    OAIDestiny_Definitions_DestinyItemMetricBlockDefinition m_metrics;
    bool m_metrics_isSet;
    bool m_metrics_isValid;

    bool m_non_transferrable;
    bool m_non_transferrable_isSet;
    bool m_non_transferrable_isValid;

    OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition m_objectives;
    bool m_objectives_isSet;
    bool m_objectives_isValid;

    QList<OAIDestiny_Definitions_DestinyItemPerkEntryDefinition> m_perks;
    bool m_perks_isSet;
    bool m_perks_isValid;

    OAIDestiny_Definitions_Items_DestinyItemPlugDefinition m_plug;
    bool m_plug_isSet;
    bool m_plug_isValid;

    OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition m_preview;
    bool m_preview_isSet;
    bool m_preview_isValid;

    OAIDestiny_Definitions_DestinyItemQualityBlockDefinition m_quality;
    bool m_quality_isSet;
    bool m_quality_isValid;

    bool m_redacted;
    bool m_redacted_isSet;
    bool m_redacted_isValid;

    OAIDestiny_Definitions_DestinyItemSackBlockDefinition m_sack;
    bool m_sack_isSet;
    bool m_sack_isValid;

    QString m_screenshot;
    bool m_screenshot_isSet;
    bool m_screenshot_isValid;

    qint32 m_season_hash;
    bool m_season_hash_isSet;
    bool m_season_hash_isValid;

    QString m_secondary_icon;
    bool m_secondary_icon_isSet;
    bool m_secondary_icon_isValid;

    QString m_secondary_overlay;
    bool m_secondary_overlay_isSet;
    bool m_secondary_overlay_isValid;

    QString m_secondary_special;
    bool m_secondary_special_isSet;
    bool m_secondary_special_isValid;

    OAIDestiny_Definitions_DestinyItemSetBlockDefinition m_set_data;
    bool m_set_data_isSet;
    bool m_set_data_isValid;

    OAIDestiny_Definitions_DestinyItemSocketBlockDefinition m_sockets;
    bool m_sockets_isSet;
    bool m_sockets_isValid;

    OAIDestiny_Definitions_DestinyItemSourceBlockDefinition m_source_data;
    bool m_source_data_isSet;
    bool m_source_data_isValid;

    qint32 m_special_item_type;
    bool m_special_item_type_isSet;
    bool m_special_item_type_isValid;

    OAIDestiny_Definitions_DestinyItemStatBlockDefinition m_stats;
    bool m_stats_isSet;
    bool m_stats_isValid;

    OAIDestiny_Definitions_DestinyItemSummaryBlockDefinition m_summary;
    bool m_summary_isSet;
    bool m_summary_isValid;

    qint32 m_summary_item_hash;
    bool m_summary_item_hash_isSet;
    bool m_summary_item_hash_isValid;

    OAIDestiny_Definitions_DestinyItemTalentGridBlockDefinition m_talent_grid;
    bool m_talent_grid_isSet;
    bool m_talent_grid_isValid;

    QList<OAIDestiny_Definitions_DestinyItemTooltipNotification> m_tooltip_notifications;
    bool m_tooltip_notifications_isSet;
    bool m_tooltip_notifications_isValid;

    QString m_tooltip_style;
    bool m_tooltip_style_isSet;
    bool m_tooltip_style_isValid;

    QList<qint32> m_trait_hashes;
    bool m_trait_hashes_isSet;
    bool m_trait_hashes_isValid;

    QList<QString> m_trait_ids;
    bool m_trait_ids_isSet;
    bool m_trait_ids_isValid;

    OAIDestiny_Definitions_DestinyItemTranslationBlockDefinition m_translation_block;
    bool m_translation_block_isSet;
    bool m_translation_block_isValid;

    QString m_ui_item_display_style;
    bool m_ui_item_display_style_isSet;
    bool m_ui_item_display_style_isValid;

    OAIDestiny_Definitions_DestinyItemValueBlockDefinition m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyInventoryItemDefinition)

#endif // OAIDestiny_Definitions_DestinyInventoryItemDefinition_H
