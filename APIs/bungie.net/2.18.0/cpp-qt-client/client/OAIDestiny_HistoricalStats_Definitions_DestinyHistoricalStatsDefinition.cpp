/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition() {
    this->initializeModel();
}

OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::~OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition() {}

void OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_icon_image_isSet = false;
    m_icon_image_isValid = false;

    m_medal_tier_hash_isSet = false;
    m_medal_tier_hash_isValid = false;

    m_merge_method_isSet = false;
    m_merge_method_isValid = false;

    m_modes_isSet = false;
    m_modes_isValid = false;

    m_period_types_isSet = false;
    m_period_types_isValid = false;

    m_stat_description_isSet = false;
    m_stat_description_isValid = false;

    m_stat_id_isSet = false;
    m_stat_id_isValid = false;

    m_stat_name_isSet = false;
    m_stat_name_isValid = false;

    m_stat_name_abbr_isSet = false;
    m_stat_name_abbr_isValid = false;

    m_unit_label_isSet = false;
    m_unit_label_isValid = false;

    m_unit_type_isSet = false;
    m_unit_type_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_icon_image_isValid = ::OpenAPI::fromJsonValue(m_icon_image, json[QString("iconImage")]);
    m_icon_image_isSet = !json[QString("iconImage")].isNull() && m_icon_image_isValid;

    m_medal_tier_hash_isValid = ::OpenAPI::fromJsonValue(m_medal_tier_hash, json[QString("medalTierHash")]);
    m_medal_tier_hash_isSet = !json[QString("medalTierHash")].isNull() && m_medal_tier_hash_isValid;

    m_merge_method_isValid = ::OpenAPI::fromJsonValue(m_merge_method, json[QString("mergeMethod")]);
    m_merge_method_isSet = !json[QString("mergeMethod")].isNull() && m_merge_method_isValid;

    m_modes_isValid = ::OpenAPI::fromJsonValue(m_modes, json[QString("modes")]);
    m_modes_isSet = !json[QString("modes")].isNull() && m_modes_isValid;

    m_period_types_isValid = ::OpenAPI::fromJsonValue(m_period_types, json[QString("periodTypes")]);
    m_period_types_isSet = !json[QString("periodTypes")].isNull() && m_period_types_isValid;

    m_stat_description_isValid = ::OpenAPI::fromJsonValue(m_stat_description, json[QString("statDescription")]);
    m_stat_description_isSet = !json[QString("statDescription")].isNull() && m_stat_description_isValid;

    m_stat_id_isValid = ::OpenAPI::fromJsonValue(m_stat_id, json[QString("statId")]);
    m_stat_id_isSet = !json[QString("statId")].isNull() && m_stat_id_isValid;

    m_stat_name_isValid = ::OpenAPI::fromJsonValue(m_stat_name, json[QString("statName")]);
    m_stat_name_isSet = !json[QString("statName")].isNull() && m_stat_name_isValid;

    m_stat_name_abbr_isValid = ::OpenAPI::fromJsonValue(m_stat_name_abbr, json[QString("statNameAbbr")]);
    m_stat_name_abbr_isSet = !json[QString("statNameAbbr")].isNull() && m_stat_name_abbr_isValid;

    m_unit_label_isValid = ::OpenAPI::fromJsonValue(m_unit_label, json[QString("unitLabel")]);
    m_unit_label_isSet = !json[QString("unitLabel")].isNull() && m_unit_label_isValid;

    m_unit_type_isValid = ::OpenAPI::fromJsonValue(m_unit_type, json[QString("unitType")]);
    m_unit_type_isSet = !json[QString("unitType")].isNull() && m_unit_type_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_icon_image_isSet) {
        obj.insert(QString("iconImage"), ::OpenAPI::toJsonValue(m_icon_image));
    }
    if (m_medal_tier_hash_isSet) {
        obj.insert(QString("medalTierHash"), ::OpenAPI::toJsonValue(m_medal_tier_hash));
    }
    if (m_merge_method_isSet) {
        obj.insert(QString("mergeMethod"), ::OpenAPI::toJsonValue(m_merge_method));
    }
    if (m_modes.size() > 0) {
        obj.insert(QString("modes"), ::OpenAPI::toJsonValue(m_modes));
    }
    if (m_period_types.size() > 0) {
        obj.insert(QString("periodTypes"), ::OpenAPI::toJsonValue(m_period_types));
    }
    if (m_stat_description_isSet) {
        obj.insert(QString("statDescription"), ::OpenAPI::toJsonValue(m_stat_description));
    }
    if (m_stat_id_isSet) {
        obj.insert(QString("statId"), ::OpenAPI::toJsonValue(m_stat_id));
    }
    if (m_stat_name_isSet) {
        obj.insert(QString("statName"), ::OpenAPI::toJsonValue(m_stat_name));
    }
    if (m_stat_name_abbr_isSet) {
        obj.insert(QString("statNameAbbr"), ::OpenAPI::toJsonValue(m_stat_name_abbr));
    }
    if (m_unit_label_isSet) {
        obj.insert(QString("unitLabel"), ::OpenAPI::toJsonValue(m_unit_label));
    }
    if (m_unit_type_isSet) {
        obj.insert(QString("unitType"), ::OpenAPI::toJsonValue(m_unit_type));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

qint32 OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::getCategory() const {
    return m_category;
}
void OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::setCategory(const qint32 &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_category_Set() const{
    return m_category_isSet;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_category_Valid() const{
    return m_category_isValid;
}

qint32 OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::getGroup() const {
    return m_group;
}
void OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::setGroup(const qint32 &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_group_Set() const{
    return m_group_isSet;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_group_Valid() const{
    return m_group_isValid;
}

QString OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::getIconImage() const {
    return m_icon_image;
}
void OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::setIconImage(const QString &icon_image) {
    m_icon_image = icon_image;
    m_icon_image_isSet = true;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_icon_image_Set() const{
    return m_icon_image_isSet;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_icon_image_Valid() const{
    return m_icon_image_isValid;
}

qint32 OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::getMedalTierHash() const {
    return m_medal_tier_hash;
}
void OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::setMedalTierHash(const qint32 &medal_tier_hash) {
    m_medal_tier_hash = medal_tier_hash;
    m_medal_tier_hash_isSet = true;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_medal_tier_hash_Set() const{
    return m_medal_tier_hash_isSet;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_medal_tier_hash_Valid() const{
    return m_medal_tier_hash_isValid;
}

qint32 OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::getMergeMethod() const {
    return m_merge_method;
}
void OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::setMergeMethod(const qint32 &merge_method) {
    m_merge_method = merge_method;
    m_merge_method_isSet = true;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_merge_method_Set() const{
    return m_merge_method_isSet;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_merge_method_Valid() const{
    return m_merge_method_isValid;
}

QList<qint32> OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::getModes() const {
    return m_modes;
}
void OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::setModes(const QList<qint32> &modes) {
    m_modes = modes;
    m_modes_isSet = true;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_modes_Set() const{
    return m_modes_isSet;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_modes_Valid() const{
    return m_modes_isValid;
}

QList<qint32> OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::getPeriodTypes() const {
    return m_period_types;
}
void OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::setPeriodTypes(const QList<qint32> &period_types) {
    m_period_types = period_types;
    m_period_types_isSet = true;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_period_types_Set() const{
    return m_period_types_isSet;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_period_types_Valid() const{
    return m_period_types_isValid;
}

QString OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::getStatDescription() const {
    return m_stat_description;
}
void OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::setStatDescription(const QString &stat_description) {
    m_stat_description = stat_description;
    m_stat_description_isSet = true;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_stat_description_Set() const{
    return m_stat_description_isSet;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_stat_description_Valid() const{
    return m_stat_description_isValid;
}

QString OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::getStatId() const {
    return m_stat_id;
}
void OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::setStatId(const QString &stat_id) {
    m_stat_id = stat_id;
    m_stat_id_isSet = true;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_stat_id_Set() const{
    return m_stat_id_isSet;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_stat_id_Valid() const{
    return m_stat_id_isValid;
}

QString OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::getStatName() const {
    return m_stat_name;
}
void OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::setStatName(const QString &stat_name) {
    m_stat_name = stat_name;
    m_stat_name_isSet = true;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_stat_name_Set() const{
    return m_stat_name_isSet;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_stat_name_Valid() const{
    return m_stat_name_isValid;
}

QString OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::getStatNameAbbr() const {
    return m_stat_name_abbr;
}
void OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::setStatNameAbbr(const QString &stat_name_abbr) {
    m_stat_name_abbr = stat_name_abbr;
    m_stat_name_abbr_isSet = true;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_stat_name_abbr_Set() const{
    return m_stat_name_abbr_isSet;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_stat_name_abbr_Valid() const{
    return m_stat_name_abbr_isValid;
}

QString OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::getUnitLabel() const {
    return m_unit_label;
}
void OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::setUnitLabel(const QString &unit_label) {
    m_unit_label = unit_label;
    m_unit_label_isSet = true;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_unit_label_Set() const{
    return m_unit_label_isSet;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_unit_label_Valid() const{
    return m_unit_label_isValid;
}

qint32 OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::getUnitType() const {
    return m_unit_type;
}
void OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::setUnitType(const qint32 &unit_type) {
    m_unit_type = unit_type;
    m_unit_type_isSet = true;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_unit_type_Set() const{
    return m_unit_type_isSet;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_unit_type_Valid() const{
    return m_unit_type_isValid;
}

qint32 OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::getWeight() const {
    return m_weight;
}
void OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_medal_tier_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_name_abbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_HistoricalStats_Definitions_DestinyHistoricalStatsDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
