/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyItemSourceBlockDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::OAIDestiny_Definitions_DestinyItemSourceBlockDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::OAIDestiny_Definitions_DestinyItemSourceBlockDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::~OAIDestiny_Definitions_DestinyItemSourceBlockDefinition() {}

void OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::initializeModel() {

    m_exclusive_isSet = false;
    m_exclusive_isValid = false;

    m_source_hashes_isSet = false;
    m_source_hashes_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_vendor_sources_isSet = false;
    m_vendor_sources_isValid = false;
}

void OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::fromJsonObject(QJsonObject json) {

    m_exclusive_isValid = ::OpenAPI::fromJsonValue(m_exclusive, json[QString("exclusive")]);
    m_exclusive_isSet = !json[QString("exclusive")].isNull() && m_exclusive_isValid;

    m_source_hashes_isValid = ::OpenAPI::fromJsonValue(m_source_hashes, json[QString("sourceHashes")]);
    m_source_hashes_isSet = !json[QString("sourceHashes")].isNull() && m_source_hashes_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_vendor_sources_isValid = ::OpenAPI::fromJsonValue(m_vendor_sources, json[QString("vendorSources")]);
    m_vendor_sources_isSet = !json[QString("vendorSources")].isNull() && m_vendor_sources_isValid;
}

QString OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_exclusive_isSet) {
        obj.insert(QString("exclusive"), ::OpenAPI::toJsonValue(m_exclusive));
    }
    if (m_source_hashes.size() > 0) {
        obj.insert(QString("sourceHashes"), ::OpenAPI::toJsonValue(m_source_hashes));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_vendor_sources.size() > 0) {
        obj.insert(QString("vendorSources"), ::OpenAPI::toJsonValue(m_vendor_sources));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::getExclusive() const {
    return m_exclusive;
}
void OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::setExclusive(const qint32 &exclusive) {
    m_exclusive = exclusive;
    m_exclusive_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::is_exclusive_Set() const{
    return m_exclusive_isSet;
}

bool OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::is_exclusive_Valid() const{
    return m_exclusive_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::getSourceHashes() const {
    return m_source_hashes;
}
void OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::setSourceHashes(const QList<qint32> &source_hashes) {
    m_source_hashes = source_hashes;
    m_source_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::is_source_hashes_Set() const{
    return m_source_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::is_source_hashes_Valid() const{
    return m_source_hashes_isValid;
}

QList<OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition> OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::getSources() const {
    return m_sources;
}
void OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::setSources(const QList<OAIDestiny_Definitions_Sources_DestinyItemSourceDefinition> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::is_sources_Valid() const{
    return m_sources_isValid;
}

QList<OAIDestiny_Definitions_DestinyItemVendorSourceReference> OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::getVendorSources() const {
    return m_vendor_sources;
}
void OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::setVendorSources(const QList<OAIDestiny_Definitions_DestinyItemVendorSourceReference> &vendor_sources) {
    m_vendor_sources = vendor_sources;
    m_vendor_sources_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::is_vendor_sources_Set() const{
    return m_vendor_sources_isSet;
}

bool OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::is_vendor_sources_Valid() const{
    return m_vendor_sources_isValid;
}

bool OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyItemSourceBlockDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
