/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Advanced_AwaAuthorizationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Advanced_AwaAuthorizationResult::OAIDestiny_Advanced_AwaAuthorizationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Advanced_AwaAuthorizationResult::OAIDestiny_Advanced_AwaAuthorizationResult() {
    this->initializeModel();
}

OAIDestiny_Advanced_AwaAuthorizationResult::~OAIDestiny_Advanced_AwaAuthorizationResult() {}

void OAIDestiny_Advanced_AwaAuthorizationResult::initializeModel() {

    m_action_token_isSet = false;
    m_action_token_isValid = false;

    m_developer_note_isSet = false;
    m_developer_note_isValid = false;

    m_maximum_number_of_uses_isSet = false;
    m_maximum_number_of_uses_isValid = false;

    m_membership_type_isSet = false;
    m_membership_type_isValid = false;

    m_response_reason_isSet = false;
    m_response_reason_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_selection_isSet = false;
    m_user_selection_isValid = false;

    m_valid_until_isSet = false;
    m_valid_until_isValid = false;
}

void OAIDestiny_Advanced_AwaAuthorizationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Advanced_AwaAuthorizationResult::fromJsonObject(QJsonObject json) {

    m_action_token_isValid = ::OpenAPI::fromJsonValue(m_action_token, json[QString("actionToken")]);
    m_action_token_isSet = !json[QString("actionToken")].isNull() && m_action_token_isValid;

    m_developer_note_isValid = ::OpenAPI::fromJsonValue(m_developer_note, json[QString("developerNote")]);
    m_developer_note_isSet = !json[QString("developerNote")].isNull() && m_developer_note_isValid;

    m_maximum_number_of_uses_isValid = ::OpenAPI::fromJsonValue(m_maximum_number_of_uses, json[QString("maximumNumberOfUses")]);
    m_maximum_number_of_uses_isSet = !json[QString("maximumNumberOfUses")].isNull() && m_maximum_number_of_uses_isValid;

    m_membership_type_isValid = ::OpenAPI::fromJsonValue(m_membership_type, json[QString("membershipType")]);
    m_membership_type_isSet = !json[QString("membershipType")].isNull() && m_membership_type_isValid;

    m_response_reason_isValid = ::OpenAPI::fromJsonValue(m_response_reason, json[QString("responseReason")]);
    m_response_reason_isSet = !json[QString("responseReason")].isNull() && m_response_reason_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_selection_isValid = ::OpenAPI::fromJsonValue(m_user_selection, json[QString("userSelection")]);
    m_user_selection_isSet = !json[QString("userSelection")].isNull() && m_user_selection_isValid;

    m_valid_until_isValid = ::OpenAPI::fromJsonValue(m_valid_until, json[QString("validUntil")]);
    m_valid_until_isSet = !json[QString("validUntil")].isNull() && m_valid_until_isValid;
}

QString OAIDestiny_Advanced_AwaAuthorizationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Advanced_AwaAuthorizationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_action_token_isSet) {
        obj.insert(QString("actionToken"), ::OpenAPI::toJsonValue(m_action_token));
    }
    if (m_developer_note_isSet) {
        obj.insert(QString("developerNote"), ::OpenAPI::toJsonValue(m_developer_note));
    }
    if (m_maximum_number_of_uses_isSet) {
        obj.insert(QString("maximumNumberOfUses"), ::OpenAPI::toJsonValue(m_maximum_number_of_uses));
    }
    if (m_membership_type_isSet) {
        obj.insert(QString("membershipType"), ::OpenAPI::toJsonValue(m_membership_type));
    }
    if (m_response_reason_isSet) {
        obj.insert(QString("responseReason"), ::OpenAPI::toJsonValue(m_response_reason));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_selection_isSet) {
        obj.insert(QString("userSelection"), ::OpenAPI::toJsonValue(m_user_selection));
    }
    if (m_valid_until_isSet) {
        obj.insert(QString("validUntil"), ::OpenAPI::toJsonValue(m_valid_until));
    }
    return obj;
}

QString OAIDestiny_Advanced_AwaAuthorizationResult::getActionToken() const {
    return m_action_token;
}
void OAIDestiny_Advanced_AwaAuthorizationResult::setActionToken(const QString &action_token) {
    m_action_token = action_token;
    m_action_token_isSet = true;
}

bool OAIDestiny_Advanced_AwaAuthorizationResult::is_action_token_Set() const{
    return m_action_token_isSet;
}

bool OAIDestiny_Advanced_AwaAuthorizationResult::is_action_token_Valid() const{
    return m_action_token_isValid;
}

QString OAIDestiny_Advanced_AwaAuthorizationResult::getDeveloperNote() const {
    return m_developer_note;
}
void OAIDestiny_Advanced_AwaAuthorizationResult::setDeveloperNote(const QString &developer_note) {
    m_developer_note = developer_note;
    m_developer_note_isSet = true;
}

bool OAIDestiny_Advanced_AwaAuthorizationResult::is_developer_note_Set() const{
    return m_developer_note_isSet;
}

bool OAIDestiny_Advanced_AwaAuthorizationResult::is_developer_note_Valid() const{
    return m_developer_note_isValid;
}

qint32 OAIDestiny_Advanced_AwaAuthorizationResult::getMaximumNumberOfUses() const {
    return m_maximum_number_of_uses;
}
void OAIDestiny_Advanced_AwaAuthorizationResult::setMaximumNumberOfUses(const qint32 &maximum_number_of_uses) {
    m_maximum_number_of_uses = maximum_number_of_uses;
    m_maximum_number_of_uses_isSet = true;
}

bool OAIDestiny_Advanced_AwaAuthorizationResult::is_maximum_number_of_uses_Set() const{
    return m_maximum_number_of_uses_isSet;
}

bool OAIDestiny_Advanced_AwaAuthorizationResult::is_maximum_number_of_uses_Valid() const{
    return m_maximum_number_of_uses_isValid;
}

qint32 OAIDestiny_Advanced_AwaAuthorizationResult::getMembershipType() const {
    return m_membership_type;
}
void OAIDestiny_Advanced_AwaAuthorizationResult::setMembershipType(const qint32 &membership_type) {
    m_membership_type = membership_type;
    m_membership_type_isSet = true;
}

bool OAIDestiny_Advanced_AwaAuthorizationResult::is_membership_type_Set() const{
    return m_membership_type_isSet;
}

bool OAIDestiny_Advanced_AwaAuthorizationResult::is_membership_type_Valid() const{
    return m_membership_type_isValid;
}

qint32 OAIDestiny_Advanced_AwaAuthorizationResult::getResponseReason() const {
    return m_response_reason;
}
void OAIDestiny_Advanced_AwaAuthorizationResult::setResponseReason(const qint32 &response_reason) {
    m_response_reason = response_reason;
    m_response_reason_isSet = true;
}

bool OAIDestiny_Advanced_AwaAuthorizationResult::is_response_reason_Set() const{
    return m_response_reason_isSet;
}

bool OAIDestiny_Advanced_AwaAuthorizationResult::is_response_reason_Valid() const{
    return m_response_reason_isValid;
}

qint32 OAIDestiny_Advanced_AwaAuthorizationResult::getType() const {
    return m_type;
}
void OAIDestiny_Advanced_AwaAuthorizationResult::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDestiny_Advanced_AwaAuthorizationResult::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDestiny_Advanced_AwaAuthorizationResult::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIDestiny_Advanced_AwaAuthorizationResult::getUserSelection() const {
    return m_user_selection;
}
void OAIDestiny_Advanced_AwaAuthorizationResult::setUserSelection(const qint32 &user_selection) {
    m_user_selection = user_selection;
    m_user_selection_isSet = true;
}

bool OAIDestiny_Advanced_AwaAuthorizationResult::is_user_selection_Set() const{
    return m_user_selection_isSet;
}

bool OAIDestiny_Advanced_AwaAuthorizationResult::is_user_selection_Valid() const{
    return m_user_selection_isValid;
}

QDateTime OAIDestiny_Advanced_AwaAuthorizationResult::getValidUntil() const {
    return m_valid_until;
}
void OAIDestiny_Advanced_AwaAuthorizationResult::setValidUntil(const QDateTime &valid_until) {
    m_valid_until = valid_until;
    m_valid_until_isSet = true;
}

bool OAIDestiny_Advanced_AwaAuthorizationResult::is_valid_until_Set() const{
    return m_valid_until_isSet;
}

bool OAIDestiny_Advanced_AwaAuthorizationResult::is_valid_until_Valid() const{
    return m_valid_until_isValid;
}

bool OAIDestiny_Advanced_AwaAuthorizationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_number_of_uses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_selection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_until_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Advanced_AwaAuthorizationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
