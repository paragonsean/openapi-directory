/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyItemMetricBlockDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyItemMetricBlockDefinition::OAIDestiny_Definitions_DestinyItemMetricBlockDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyItemMetricBlockDefinition::OAIDestiny_Definitions_DestinyItemMetricBlockDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyItemMetricBlockDefinition::~OAIDestiny_Definitions_DestinyItemMetricBlockDefinition() {}

void OAIDestiny_Definitions_DestinyItemMetricBlockDefinition::initializeModel() {

    m_available_metric_category_node_hashes_isSet = false;
    m_available_metric_category_node_hashes_isValid = false;
}

void OAIDestiny_Definitions_DestinyItemMetricBlockDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyItemMetricBlockDefinition::fromJsonObject(QJsonObject json) {

    m_available_metric_category_node_hashes_isValid = ::OpenAPI::fromJsonValue(m_available_metric_category_node_hashes, json[QString("availableMetricCategoryNodeHashes")]);
    m_available_metric_category_node_hashes_isSet = !json[QString("availableMetricCategoryNodeHashes")].isNull() && m_available_metric_category_node_hashes_isValid;
}

QString OAIDestiny_Definitions_DestinyItemMetricBlockDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyItemMetricBlockDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_available_metric_category_node_hashes.size() > 0) {
        obj.insert(QString("availableMetricCategoryNodeHashes"), ::OpenAPI::toJsonValue(m_available_metric_category_node_hashes));
    }
    return obj;
}

QList<qint32> OAIDestiny_Definitions_DestinyItemMetricBlockDefinition::getAvailableMetricCategoryNodeHashes() const {
    return m_available_metric_category_node_hashes;
}
void OAIDestiny_Definitions_DestinyItemMetricBlockDefinition::setAvailableMetricCategoryNodeHashes(const QList<qint32> &available_metric_category_node_hashes) {
    m_available_metric_category_node_hashes = available_metric_category_node_hashes;
    m_available_metric_category_node_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemMetricBlockDefinition::is_available_metric_category_node_hashes_Set() const{
    return m_available_metric_category_node_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyItemMetricBlockDefinition::is_available_metric_category_node_hashes_Valid() const{
    return m_available_metric_category_node_hashes_isValid;
}

bool OAIDestiny_Definitions_DestinyItemMetricBlockDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_metric_category_node_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyItemMetricBlockDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
