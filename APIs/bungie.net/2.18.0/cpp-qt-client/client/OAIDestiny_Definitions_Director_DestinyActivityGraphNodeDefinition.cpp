/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::~OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition() {}

void OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::initializeModel() {

    m_activities_isSet = false;
    m_activities_isValid = false;

    m_featuring_states_isSet = false;
    m_featuring_states_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_override_display_isSet = false;
    m_override_display_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_states_isSet = false;
    m_states_isValid = false;
}

void OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::fromJsonObject(QJsonObject json) {

    m_activities_isValid = ::OpenAPI::fromJsonValue(m_activities, json[QString("activities")]);
    m_activities_isSet = !json[QString("activities")].isNull() && m_activities_isValid;

    m_featuring_states_isValid = ::OpenAPI::fromJsonValue(m_featuring_states, json[QString("featuringStates")]);
    m_featuring_states_isSet = !json[QString("featuringStates")].isNull() && m_featuring_states_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("nodeId")]);
    m_node_id_isSet = !json[QString("nodeId")].isNull() && m_node_id_isValid;

    m_override_display_isValid = ::OpenAPI::fromJsonValue(m_override_display, json[QString("overrideDisplay")]);
    m_override_display_isSet = !json[QString("overrideDisplay")].isNull() && m_override_display_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_states_isValid = ::OpenAPI::fromJsonValue(m_states, json[QString("states")]);
    m_states_isSet = !json[QString("states")].isNull() && m_states_isValid;
}

QString OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_activities.size() > 0) {
        obj.insert(QString("activities"), ::OpenAPI::toJsonValue(m_activities));
    }
    if (m_featuring_states.size() > 0) {
        obj.insert(QString("featuringStates"), ::OpenAPI::toJsonValue(m_featuring_states));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("nodeId"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_override_display.isSet()) {
        obj.insert(QString("overrideDisplay"), ::OpenAPI::toJsonValue(m_override_display));
    }
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_states.size() > 0) {
        obj.insert(QString("states"), ::OpenAPI::toJsonValue(m_states));
    }
    return obj;
}

QList<OAIDestiny_Definitions_Director_DestinyActivityGraphNodeActivityDefinition> OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::getActivities() const {
    return m_activities;
}
void OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::setActivities(const QList<OAIDestiny_Definitions_Director_DestinyActivityGraphNodeActivityDefinition> &activities) {
    m_activities = activities;
    m_activities_isSet = true;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::is_activities_Set() const{
    return m_activities_isSet;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::is_activities_Valid() const{
    return m_activities_isValid;
}

QList<OAIDestiny_Definitions_Director_DestinyActivityGraphNodeFeaturingStateDefinition> OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::getFeaturingStates() const {
    return m_featuring_states;
}
void OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::setFeaturingStates(const QList<OAIDestiny_Definitions_Director_DestinyActivityGraphNodeFeaturingStateDefinition> &featuring_states) {
    m_featuring_states = featuring_states;
    m_featuring_states_isSet = true;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::is_featuring_states_Set() const{
    return m_featuring_states_isSet;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::is_featuring_states_Valid() const{
    return m_featuring_states_isValid;
}

qint32 OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::getNodeId() const {
    return m_node_id;
}
void OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::setNodeId(const qint32 &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::is_node_id_Valid() const{
    return m_node_id_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::getOverrideDisplay() const {
    return m_override_display;
}
void OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::setOverrideDisplay(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &override_display) {
    m_override_display = override_display;
    m_override_display_isSet = true;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::is_override_display_Set() const{
    return m_override_display_isSet;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::is_override_display_Valid() const{
    return m_override_display_isValid;
}

OAIDestiny_Definitions_Common_DestinyPositionDefinition OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::getPosition() const {
    return m_position;
}
void OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::setPosition(const OAIDestiny_Definitions_Common_DestinyPositionDefinition &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::is_position_Set() const{
    return m_position_isSet;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::is_position_Valid() const{
    return m_position_isValid;
}

QList<OAIDestiny_Definitions_Director_DestinyActivityGraphNodeStateEntry> OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::getStates() const {
    return m_states;
}
void OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::setStates(const QList<OAIDestiny_Definitions_Director_DestinyActivityGraphNodeStateEntry> &states) {
    m_states = states;
    m_states_isSet = true;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::is_states_Set() const{
    return m_states_isSet;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::is_states_Valid() const{
    return m_states_isValid;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_featuring_states.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_display.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_states.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
