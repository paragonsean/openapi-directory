/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIApplications_Application.h
 *
 * 
 */

#ifndef OAIApplications_Application_H
#define OAIApplications_Application_H

#include <QJsonObject>

#include "OAIApplications_ApplicationDeveloper.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIApplications_ApplicationDeveloper;

class OAIApplications_Application : public OAIObject {
public:
    OAIApplications_Application();
    OAIApplications_Application(QString json);
    ~OAIApplications_Application() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getApplicationId() const;
    void setApplicationId(const qint32 &application_id);
    bool is_application_id_Set() const;
    bool is_application_id_Valid() const;

    QDateTime getCreationDate() const;
    void setCreationDate(const QDateTime &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    QDateTime getFirstPublished() const;
    void setFirstPublished(const QDateTime &first_published);
    bool is_first_published_Set() const;
    bool is_first_published_Valid() const;

    QString getLink() const;
    void setLink(const QString &link);
    bool is_link_Set() const;
    bool is_link_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getOrigin() const;
    void setOrigin(const QString &origin);
    bool is_origin_Set() const;
    bool is_origin_Valid() const;

    QString getOverrideAuthorizeViewName() const;
    void setOverrideAuthorizeViewName(const QString &override_authorize_view_name);
    bool is_override_authorize_view_name_Set() const;
    bool is_override_authorize_view_name_Valid() const;

    QString getRedirectUrl() const;
    void setRedirectUrl(const QString &redirect_url);
    bool is_redirect_url_Set() const;
    bool is_redirect_url_Valid() const;

    qint64 getScope() const;
    void setScope(const qint64 &scope);
    bool is_scope_Set() const;
    bool is_scope_Valid() const;

    qint32 getStatus() const;
    void setStatus(const qint32 &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QDateTime getStatusChanged() const;
    void setStatusChanged(const QDateTime &status_changed);
    bool is_status_changed_Set() const;
    bool is_status_changed_Valid() const;

    QList<OAIApplications_ApplicationDeveloper> getTeam() const;
    void setTeam(const QList<OAIApplications_ApplicationDeveloper> &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_application_id;
    bool m_application_id_isSet;
    bool m_application_id_isValid;

    QDateTime m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    QDateTime m_first_published;
    bool m_first_published_isSet;
    bool m_first_published_isValid;

    QString m_link;
    bool m_link_isSet;
    bool m_link_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_origin;
    bool m_origin_isSet;
    bool m_origin_isValid;

    QString m_override_authorize_view_name;
    bool m_override_authorize_view_name_isSet;
    bool m_override_authorize_view_name_isValid;

    QString m_redirect_url;
    bool m_redirect_url_isSet;
    bool m_redirect_url_isValid;

    qint64 m_scope;
    bool m_scope_isSet;
    bool m_scope_isValid;

    qint32 m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QDateTime m_status_changed;
    bool m_status_changed_isSet;
    bool m_status_changed_isValid;

    QList<OAIApplications_ApplicationDeveloper> m_team;
    bool m_team_isSet;
    bool m_team_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIApplications_Application)

#endif // OAIApplications_Application_H
