/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITokens_BungieRewardDisplay.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITokens_BungieRewardDisplay::OAITokens_BungieRewardDisplay(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITokens_BungieRewardDisplay::OAITokens_BungieRewardDisplay() {
    this->initializeModel();
}

OAITokens_BungieRewardDisplay::~OAITokens_BungieRewardDisplay() {}

void OAITokens_BungieRewardDisplay::initializeModel() {

    m_objective_display_properties_isSet = false;
    m_objective_display_properties_isValid = false;

    m_reward_display_properties_isSet = false;
    m_reward_display_properties_isValid = false;

    m_user_reward_availability_model_isSet = false;
    m_user_reward_availability_model_isValid = false;
}

void OAITokens_BungieRewardDisplay::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITokens_BungieRewardDisplay::fromJsonObject(QJsonObject json) {

    m_objective_display_properties_isValid = ::OpenAPI::fromJsonValue(m_objective_display_properties, json[QString("ObjectiveDisplayProperties")]);
    m_objective_display_properties_isSet = !json[QString("ObjectiveDisplayProperties")].isNull() && m_objective_display_properties_isValid;

    m_reward_display_properties_isValid = ::OpenAPI::fromJsonValue(m_reward_display_properties, json[QString("RewardDisplayProperties")]);
    m_reward_display_properties_isSet = !json[QString("RewardDisplayProperties")].isNull() && m_reward_display_properties_isValid;

    m_user_reward_availability_model_isValid = ::OpenAPI::fromJsonValue(m_user_reward_availability_model, json[QString("UserRewardAvailabilityModel")]);
    m_user_reward_availability_model_isSet = !json[QString("UserRewardAvailabilityModel")].isNull() && m_user_reward_availability_model_isValid;
}

QString OAITokens_BungieRewardDisplay::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITokens_BungieRewardDisplay::asJsonObject() const {
    QJsonObject obj;
    if (m_objective_display_properties.isSet()) {
        obj.insert(QString("ObjectiveDisplayProperties"), ::OpenAPI::toJsonValue(m_objective_display_properties));
    }
    if (m_reward_display_properties.isSet()) {
        obj.insert(QString("RewardDisplayProperties"), ::OpenAPI::toJsonValue(m_reward_display_properties));
    }
    if (m_user_reward_availability_model.isSet()) {
        obj.insert(QString("UserRewardAvailabilityModel"), ::OpenAPI::toJsonValue(m_user_reward_availability_model));
    }
    return obj;
}

OAITokens_RewardDisplayProperties OAITokens_BungieRewardDisplay::getObjectiveDisplayProperties() const {
    return m_objective_display_properties;
}
void OAITokens_BungieRewardDisplay::setObjectiveDisplayProperties(const OAITokens_RewardDisplayProperties &objective_display_properties) {
    m_objective_display_properties = objective_display_properties;
    m_objective_display_properties_isSet = true;
}

bool OAITokens_BungieRewardDisplay::is_objective_display_properties_Set() const{
    return m_objective_display_properties_isSet;
}

bool OAITokens_BungieRewardDisplay::is_objective_display_properties_Valid() const{
    return m_objective_display_properties_isValid;
}

OAITokens_RewardDisplayProperties OAITokens_BungieRewardDisplay::getRewardDisplayProperties() const {
    return m_reward_display_properties;
}
void OAITokens_BungieRewardDisplay::setRewardDisplayProperties(const OAITokens_RewardDisplayProperties &reward_display_properties) {
    m_reward_display_properties = reward_display_properties;
    m_reward_display_properties_isSet = true;
}

bool OAITokens_BungieRewardDisplay::is_reward_display_properties_Set() const{
    return m_reward_display_properties_isSet;
}

bool OAITokens_BungieRewardDisplay::is_reward_display_properties_Valid() const{
    return m_reward_display_properties_isValid;
}

OAITokens_UserRewardAvailabilityModel OAITokens_BungieRewardDisplay::getUserRewardAvailabilityModel() const {
    return m_user_reward_availability_model;
}
void OAITokens_BungieRewardDisplay::setUserRewardAvailabilityModel(const OAITokens_UserRewardAvailabilityModel &user_reward_availability_model) {
    m_user_reward_availability_model = user_reward_availability_model;
    m_user_reward_availability_model_isSet = true;
}

bool OAITokens_BungieRewardDisplay::is_user_reward_availability_model_Set() const{
    return m_user_reward_availability_model_isSet;
}

bool OAITokens_BungieRewardDisplay::is_user_reward_availability_model_Valid() const{
    return m_user_reward_availability_model_isValid;
}

bool OAITokens_BungieRewardDisplay::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_objective_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_reward_availability_model.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITokens_BungieRewardDisplay::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
