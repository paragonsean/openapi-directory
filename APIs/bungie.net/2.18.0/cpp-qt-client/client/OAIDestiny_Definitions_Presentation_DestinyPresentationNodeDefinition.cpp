/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::~OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition() {}

void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::initializeModel() {

    m_children_isSet = false;
    m_children_isValid = false;

    m_completion_record_hash_isSet = false;
    m_completion_record_hash_isValid = false;

    m_disable_child_subscreen_navigation_isSet = false;
    m_disable_child_subscreen_navigation_isValid = false;

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_display_style_isSet = false;
    m_display_style_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_max_category_record_score_isSet = false;
    m_max_category_record_score_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;

    m_objective_hash_isSet = false;
    m_objective_hash_isValid = false;

    m_original_icon_isSet = false;
    m_original_icon_isValid = false;

    m_parent_node_hashes_isSet = false;
    m_parent_node_hashes_isValid = false;

    m_presentation_node_type_isSet = false;
    m_presentation_node_type_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;

    m_requirements_isSet = false;
    m_requirements_isValid = false;

    m_root_view_icon_isSet = false;
    m_root_view_icon_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_screen_style_isSet = false;
    m_screen_style_isValid = false;

    m_trait_hashes_isSet = false;
    m_trait_hashes_isValid = false;

    m_trait_ids_isSet = false;
    m_trait_ids_isValid = false;
}

void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::fromJsonObject(QJsonObject json) {

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;

    m_completion_record_hash_isValid = ::OpenAPI::fromJsonValue(m_completion_record_hash, json[QString("completionRecordHash")]);
    m_completion_record_hash_isSet = !json[QString("completionRecordHash")].isNull() && m_completion_record_hash_isValid;

    m_disable_child_subscreen_navigation_isValid = ::OpenAPI::fromJsonValue(m_disable_child_subscreen_navigation, json[QString("disableChildSubscreenNavigation")]);
    m_disable_child_subscreen_navigation_isSet = !json[QString("disableChildSubscreenNavigation")].isNull() && m_disable_child_subscreen_navigation_isValid;

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_display_style_isValid = ::OpenAPI::fromJsonValue(m_display_style, json[QString("displayStyle")]);
    m_display_style_isSet = !json[QString("displayStyle")].isNull() && m_display_style_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_max_category_record_score_isValid = ::OpenAPI::fromJsonValue(m_max_category_record_score, json[QString("maxCategoryRecordScore")]);
    m_max_category_record_score_isSet = !json[QString("maxCategoryRecordScore")].isNull() && m_max_category_record_score_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("nodeType")]);
    m_node_type_isSet = !json[QString("nodeType")].isNull() && m_node_type_isValid;

    m_objective_hash_isValid = ::OpenAPI::fromJsonValue(m_objective_hash, json[QString("objectiveHash")]);
    m_objective_hash_isSet = !json[QString("objectiveHash")].isNull() && m_objective_hash_isValid;

    m_original_icon_isValid = ::OpenAPI::fromJsonValue(m_original_icon, json[QString("originalIcon")]);
    m_original_icon_isSet = !json[QString("originalIcon")].isNull() && m_original_icon_isValid;

    m_parent_node_hashes_isValid = ::OpenAPI::fromJsonValue(m_parent_node_hashes, json[QString("parentNodeHashes")]);
    m_parent_node_hashes_isSet = !json[QString("parentNodeHashes")].isNull() && m_parent_node_hashes_isValid;

    m_presentation_node_type_isValid = ::OpenAPI::fromJsonValue(m_presentation_node_type, json[QString("presentationNodeType")]);
    m_presentation_node_type_isSet = !json[QString("presentationNodeType")].isNull() && m_presentation_node_type_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;

    m_requirements_isValid = ::OpenAPI::fromJsonValue(m_requirements, json[QString("requirements")]);
    m_requirements_isSet = !json[QString("requirements")].isNull() && m_requirements_isValid;

    m_root_view_icon_isValid = ::OpenAPI::fromJsonValue(m_root_view_icon, json[QString("rootViewIcon")]);
    m_root_view_icon_isSet = !json[QString("rootViewIcon")].isNull() && m_root_view_icon_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_screen_style_isValid = ::OpenAPI::fromJsonValue(m_screen_style, json[QString("screenStyle")]);
    m_screen_style_isSet = !json[QString("screenStyle")].isNull() && m_screen_style_isValid;

    m_trait_hashes_isValid = ::OpenAPI::fromJsonValue(m_trait_hashes, json[QString("traitHashes")]);
    m_trait_hashes_isSet = !json[QString("traitHashes")].isNull() && m_trait_hashes_isValid;

    m_trait_ids_isValid = ::OpenAPI::fromJsonValue(m_trait_ids, json[QString("traitIds")]);
    m_trait_ids_isSet = !json[QString("traitIds")].isNull() && m_trait_ids_isValid;
}

QString OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_children.isSet()) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_completion_record_hash_isSet) {
        obj.insert(QString("completionRecordHash"), ::OpenAPI::toJsonValue(m_completion_record_hash));
    }
    if (m_disable_child_subscreen_navigation_isSet) {
        obj.insert(QString("disableChildSubscreenNavigation"), ::OpenAPI::toJsonValue(m_disable_child_subscreen_navigation));
    }
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_display_style_isSet) {
        obj.insert(QString("displayStyle"), ::OpenAPI::toJsonValue(m_display_style));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_max_category_record_score_isSet) {
        obj.insert(QString("maxCategoryRecordScore"), ::OpenAPI::toJsonValue(m_max_category_record_score));
    }
    if (m_node_type_isSet) {
        obj.insert(QString("nodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    if (m_objective_hash_isSet) {
        obj.insert(QString("objectiveHash"), ::OpenAPI::toJsonValue(m_objective_hash));
    }
    if (m_original_icon_isSet) {
        obj.insert(QString("originalIcon"), ::OpenAPI::toJsonValue(m_original_icon));
    }
    if (m_parent_node_hashes.size() > 0) {
        obj.insert(QString("parentNodeHashes"), ::OpenAPI::toJsonValue(m_parent_node_hashes));
    }
    if (m_presentation_node_type_isSet) {
        obj.insert(QString("presentationNodeType"), ::OpenAPI::toJsonValue(m_presentation_node_type));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    if (m_requirements.isSet()) {
        obj.insert(QString("requirements"), ::OpenAPI::toJsonValue(m_requirements));
    }
    if (m_root_view_icon_isSet) {
        obj.insert(QString("rootViewIcon"), ::OpenAPI::toJsonValue(m_root_view_icon));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_screen_style_isSet) {
        obj.insert(QString("screenStyle"), ::OpenAPI::toJsonValue(m_screen_style));
    }
    if (m_trait_hashes.size() > 0) {
        obj.insert(QString("traitHashes"), ::OpenAPI::toJsonValue(m_trait_hashes));
    }
    if (m_trait_ids.size() > 0) {
        obj.insert(QString("traitIds"), ::OpenAPI::toJsonValue(m_trait_ids));
    }
    return obj;
}

OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::getChildren() const {
    return m_children;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::setChildren(const OAIDestiny_Definitions_Presentation_DestinyPresentationNodeChildrenBlock &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_children_Set() const{
    return m_children_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_children_Valid() const{
    return m_children_isValid;
}

qint32 OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::getCompletionRecordHash() const {
    return m_completion_record_hash;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::setCompletionRecordHash(const qint32 &completion_record_hash) {
    m_completion_record_hash = completion_record_hash;
    m_completion_record_hash_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_completion_record_hash_Set() const{
    return m_completion_record_hash_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_completion_record_hash_Valid() const{
    return m_completion_record_hash_isValid;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::isDisableChildSubscreenNavigation() const {
    return m_disable_child_subscreen_navigation;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::setDisableChildSubscreenNavigation(const bool &disable_child_subscreen_navigation) {
    m_disable_child_subscreen_navigation = disable_child_subscreen_navigation;
    m_disable_child_subscreen_navigation_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_disable_child_subscreen_navigation_Set() const{
    return m_disable_child_subscreen_navigation_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_disable_child_subscreen_navigation_Valid() const{
    return m_disable_child_subscreen_navigation_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

qint32 OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::getDisplayStyle() const {
    return m_display_style;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::setDisplayStyle(const qint32 &display_style) {
    m_display_style = display_style;
    m_display_style_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_display_style_Set() const{
    return m_display_style_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_display_style_Valid() const{
    return m_display_style_isValid;
}

qint32 OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_index_Valid() const{
    return m_index_isValid;
}

qint32 OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::getMaxCategoryRecordScore() const {
    return m_max_category_record_score;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::setMaxCategoryRecordScore(const qint32 &max_category_record_score) {
    m_max_category_record_score = max_category_record_score;
    m_max_category_record_score_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_max_category_record_score_Set() const{
    return m_max_category_record_score_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_max_category_record_score_Valid() const{
    return m_max_category_record_score_isValid;
}

qint32 OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::getNodeType() const {
    return m_node_type;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::setNodeType(const qint32 &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_node_type_Valid() const{
    return m_node_type_isValid;
}

qint32 OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::getObjectiveHash() const {
    return m_objective_hash;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::setObjectiveHash(const qint32 &objective_hash) {
    m_objective_hash = objective_hash;
    m_objective_hash_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_objective_hash_Set() const{
    return m_objective_hash_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_objective_hash_Valid() const{
    return m_objective_hash_isValid;
}

QString OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::getOriginalIcon() const {
    return m_original_icon;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::setOriginalIcon(const QString &original_icon) {
    m_original_icon = original_icon;
    m_original_icon_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_original_icon_Set() const{
    return m_original_icon_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_original_icon_Valid() const{
    return m_original_icon_isValid;
}

QList<qint32> OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::getParentNodeHashes() const {
    return m_parent_node_hashes;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::setParentNodeHashes(const QList<qint32> &parent_node_hashes) {
    m_parent_node_hashes = parent_node_hashes;
    m_parent_node_hashes_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_parent_node_hashes_Set() const{
    return m_parent_node_hashes_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_parent_node_hashes_Valid() const{
    return m_parent_node_hashes_isValid;
}

qint32 OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::getPresentationNodeType() const {
    return m_presentation_node_type;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::setPresentationNodeType(const qint32 &presentation_node_type) {
    m_presentation_node_type = presentation_node_type;
    m_presentation_node_type_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_presentation_node_type_Set() const{
    return m_presentation_node_type_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_presentation_node_type_Valid() const{
    return m_presentation_node_type_isValid;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

OAIDestiny_Definitions_Presentation_DestinyPresentationNodeRequirementsBlock OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::getRequirements() const {
    return m_requirements;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::setRequirements(const OAIDestiny_Definitions_Presentation_DestinyPresentationNodeRequirementsBlock &requirements) {
    m_requirements = requirements;
    m_requirements_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_requirements_Set() const{
    return m_requirements_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_requirements_Valid() const{
    return m_requirements_isValid;
}

QString OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::getRootViewIcon() const {
    return m_root_view_icon;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::setRootViewIcon(const QString &root_view_icon) {
    m_root_view_icon = root_view_icon;
    m_root_view_icon_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_root_view_icon_Set() const{
    return m_root_view_icon_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_root_view_icon_Valid() const{
    return m_root_view_icon_isValid;
}

qint32 OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::getScope() const {
    return m_scope;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::setScope(const qint32 &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_scope_Valid() const{
    return m_scope_isValid;
}

qint32 OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::getScreenStyle() const {
    return m_screen_style;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::setScreenStyle(const qint32 &screen_style) {
    m_screen_style = screen_style;
    m_screen_style_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_screen_style_Set() const{
    return m_screen_style_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_screen_style_Valid() const{
    return m_screen_style_isValid;
}

QList<qint32> OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::getTraitHashes() const {
    return m_trait_hashes;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::setTraitHashes(const QList<qint32> &trait_hashes) {
    m_trait_hashes = trait_hashes;
    m_trait_hashes_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_trait_hashes_Set() const{
    return m_trait_hashes_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_trait_hashes_Valid() const{
    return m_trait_hashes_isValid;
}

QList<QString> OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::getTraitIds() const {
    return m_trait_ids;
}
void OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::setTraitIds(const QList<QString> &trait_ids) {
    m_trait_ids = trait_ids;
    m_trait_ids_isSet = true;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_trait_ids_Set() const{
    return m_trait_ids_isSet;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::is_trait_ids_Valid() const{
    return m_trait_ids_isValid;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_children.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_record_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_child_subscreen_navigation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_category_record_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_objective_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_node_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_presentation_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requirements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_view_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trait_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trait_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_Presentation_DestinyPresentationNodeDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
