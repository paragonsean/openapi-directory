/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Components_Metrics_DestinyMetricsComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Components_Metrics_DestinyMetricsComponent::OAIDestiny_Components_Metrics_DestinyMetricsComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Components_Metrics_DestinyMetricsComponent::OAIDestiny_Components_Metrics_DestinyMetricsComponent() {
    this->initializeModel();
}

OAIDestiny_Components_Metrics_DestinyMetricsComponent::~OAIDestiny_Components_Metrics_DestinyMetricsComponent() {}

void OAIDestiny_Components_Metrics_DestinyMetricsComponent::initializeModel() {

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_metrics_root_node_hash_isSet = false;
    m_metrics_root_node_hash_isValid = false;
}

void OAIDestiny_Components_Metrics_DestinyMetricsComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Components_Metrics_DestinyMetricsComponent::fromJsonObject(QJsonObject json) {

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_metrics_root_node_hash_isValid = ::OpenAPI::fromJsonValue(m_metrics_root_node_hash, json[QString("metricsRootNodeHash")]);
    m_metrics_root_node_hash_isSet = !json[QString("metricsRootNodeHash")].isNull() && m_metrics_root_node_hash_isValid;
}

QString OAIDestiny_Components_Metrics_DestinyMetricsComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Components_Metrics_DestinyMetricsComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_metrics_root_node_hash_isSet) {
        obj.insert(QString("metricsRootNodeHash"), ::OpenAPI::toJsonValue(m_metrics_root_node_hash));
    }
    return obj;
}

QMap<QString, OAIDestiny_Components_Metrics_DestinyMetricComponent> OAIDestiny_Components_Metrics_DestinyMetricsComponent::getMetrics() const {
    return m_metrics;
}
void OAIDestiny_Components_Metrics_DestinyMetricsComponent::setMetrics(const QMap<QString, OAIDestiny_Components_Metrics_DestinyMetricComponent> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIDestiny_Components_Metrics_DestinyMetricsComponent::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIDestiny_Components_Metrics_DestinyMetricsComponent::is_metrics_Valid() const{
    return m_metrics_isValid;
}

qint32 OAIDestiny_Components_Metrics_DestinyMetricsComponent::getMetricsRootNodeHash() const {
    return m_metrics_root_node_hash;
}
void OAIDestiny_Components_Metrics_DestinyMetricsComponent::setMetricsRootNodeHash(const qint32 &metrics_root_node_hash) {
    m_metrics_root_node_hash = metrics_root_node_hash;
    m_metrics_root_node_hash_isSet = true;
}

bool OAIDestiny_Components_Metrics_DestinyMetricsComponent::is_metrics_root_node_hash_Set() const{
    return m_metrics_root_node_hash_isSet;
}

bool OAIDestiny_Components_Metrics_DestinyMetricsComponent::is_metrics_root_node_hash_Valid() const{
    return m_metrics_root_node_hash_isValid;
}

bool OAIDestiny_Components_Metrics_DestinyMetricsComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_root_node_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Components_Metrics_DestinyMetricsComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
