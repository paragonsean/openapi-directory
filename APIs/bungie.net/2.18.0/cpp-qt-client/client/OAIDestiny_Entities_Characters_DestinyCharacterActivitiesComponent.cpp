/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent() {
    this->initializeModel();
}

OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::~OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent() {}

void OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::initializeModel() {

    m_available_activities_isSet = false;
    m_available_activities_isValid = false;

    m_current_activity_hash_isSet = false;
    m_current_activity_hash_isValid = false;

    m_current_activity_mode_hash_isSet = false;
    m_current_activity_mode_hash_isValid = false;

    m_current_activity_mode_hashes_isSet = false;
    m_current_activity_mode_hashes_isValid = false;

    m_current_activity_mode_type_isSet = false;
    m_current_activity_mode_type_isValid = false;

    m_current_activity_mode_types_isSet = false;
    m_current_activity_mode_types_isValid = false;

    m_current_playlist_activity_hash_isSet = false;
    m_current_playlist_activity_hash_isValid = false;

    m_date_activity_started_isSet = false;
    m_date_activity_started_isValid = false;

    m_last_completed_story_hash_isSet = false;
    m_last_completed_story_hash_isValid = false;
}

void OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::fromJsonObject(QJsonObject json) {

    m_available_activities_isValid = ::OpenAPI::fromJsonValue(m_available_activities, json[QString("availableActivities")]);
    m_available_activities_isSet = !json[QString("availableActivities")].isNull() && m_available_activities_isValid;

    m_current_activity_hash_isValid = ::OpenAPI::fromJsonValue(m_current_activity_hash, json[QString("currentActivityHash")]);
    m_current_activity_hash_isSet = !json[QString("currentActivityHash")].isNull() && m_current_activity_hash_isValid;

    m_current_activity_mode_hash_isValid = ::OpenAPI::fromJsonValue(m_current_activity_mode_hash, json[QString("currentActivityModeHash")]);
    m_current_activity_mode_hash_isSet = !json[QString("currentActivityModeHash")].isNull() && m_current_activity_mode_hash_isValid;

    m_current_activity_mode_hashes_isValid = ::OpenAPI::fromJsonValue(m_current_activity_mode_hashes, json[QString("currentActivityModeHashes")]);
    m_current_activity_mode_hashes_isSet = !json[QString("currentActivityModeHashes")].isNull() && m_current_activity_mode_hashes_isValid;

    m_current_activity_mode_type_isValid = ::OpenAPI::fromJsonValue(m_current_activity_mode_type, json[QString("currentActivityModeType")]);
    m_current_activity_mode_type_isSet = !json[QString("currentActivityModeType")].isNull() && m_current_activity_mode_type_isValid;

    m_current_activity_mode_types_isValid = ::OpenAPI::fromJsonValue(m_current_activity_mode_types, json[QString("currentActivityModeTypes")]);
    m_current_activity_mode_types_isSet = !json[QString("currentActivityModeTypes")].isNull() && m_current_activity_mode_types_isValid;

    m_current_playlist_activity_hash_isValid = ::OpenAPI::fromJsonValue(m_current_playlist_activity_hash, json[QString("currentPlaylistActivityHash")]);
    m_current_playlist_activity_hash_isSet = !json[QString("currentPlaylistActivityHash")].isNull() && m_current_playlist_activity_hash_isValid;

    m_date_activity_started_isValid = ::OpenAPI::fromJsonValue(m_date_activity_started, json[QString("dateActivityStarted")]);
    m_date_activity_started_isSet = !json[QString("dateActivityStarted")].isNull() && m_date_activity_started_isValid;

    m_last_completed_story_hash_isValid = ::OpenAPI::fromJsonValue(m_last_completed_story_hash, json[QString("lastCompletedStoryHash")]);
    m_last_completed_story_hash_isSet = !json[QString("lastCompletedStoryHash")].isNull() && m_last_completed_story_hash_isValid;
}

QString OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_available_activities.size() > 0) {
        obj.insert(QString("availableActivities"), ::OpenAPI::toJsonValue(m_available_activities));
    }
    if (m_current_activity_hash_isSet) {
        obj.insert(QString("currentActivityHash"), ::OpenAPI::toJsonValue(m_current_activity_hash));
    }
    if (m_current_activity_mode_hash_isSet) {
        obj.insert(QString("currentActivityModeHash"), ::OpenAPI::toJsonValue(m_current_activity_mode_hash));
    }
    if (m_current_activity_mode_hashes.size() > 0) {
        obj.insert(QString("currentActivityModeHashes"), ::OpenAPI::toJsonValue(m_current_activity_mode_hashes));
    }
    if (m_current_activity_mode_type_isSet) {
        obj.insert(QString("currentActivityModeType"), ::OpenAPI::toJsonValue(m_current_activity_mode_type));
    }
    if (m_current_activity_mode_types.size() > 0) {
        obj.insert(QString("currentActivityModeTypes"), ::OpenAPI::toJsonValue(m_current_activity_mode_types));
    }
    if (m_current_playlist_activity_hash_isSet) {
        obj.insert(QString("currentPlaylistActivityHash"), ::OpenAPI::toJsonValue(m_current_playlist_activity_hash));
    }
    if (m_date_activity_started_isSet) {
        obj.insert(QString("dateActivityStarted"), ::OpenAPI::toJsonValue(m_date_activity_started));
    }
    if (m_last_completed_story_hash_isSet) {
        obj.insert(QString("lastCompletedStoryHash"), ::OpenAPI::toJsonValue(m_last_completed_story_hash));
    }
    return obj;
}

QList<OAIDestiny_DestinyActivity> OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::getAvailableActivities() const {
    return m_available_activities;
}
void OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::setAvailableActivities(const QList<OAIDestiny_DestinyActivity> &available_activities) {
    m_available_activities = available_activities;
    m_available_activities_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::is_available_activities_Set() const{
    return m_available_activities_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::is_available_activities_Valid() const{
    return m_available_activities_isValid;
}

qint32 OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::getCurrentActivityHash() const {
    return m_current_activity_hash;
}
void OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::setCurrentActivityHash(const qint32 &current_activity_hash) {
    m_current_activity_hash = current_activity_hash;
    m_current_activity_hash_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::is_current_activity_hash_Set() const{
    return m_current_activity_hash_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::is_current_activity_hash_Valid() const{
    return m_current_activity_hash_isValid;
}

qint32 OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::getCurrentActivityModeHash() const {
    return m_current_activity_mode_hash;
}
void OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::setCurrentActivityModeHash(const qint32 &current_activity_mode_hash) {
    m_current_activity_mode_hash = current_activity_mode_hash;
    m_current_activity_mode_hash_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::is_current_activity_mode_hash_Set() const{
    return m_current_activity_mode_hash_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::is_current_activity_mode_hash_Valid() const{
    return m_current_activity_mode_hash_isValid;
}

QList<qint32> OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::getCurrentActivityModeHashes() const {
    return m_current_activity_mode_hashes;
}
void OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::setCurrentActivityModeHashes(const QList<qint32> &current_activity_mode_hashes) {
    m_current_activity_mode_hashes = current_activity_mode_hashes;
    m_current_activity_mode_hashes_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::is_current_activity_mode_hashes_Set() const{
    return m_current_activity_mode_hashes_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::is_current_activity_mode_hashes_Valid() const{
    return m_current_activity_mode_hashes_isValid;
}

qint32 OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::getCurrentActivityModeType() const {
    return m_current_activity_mode_type;
}
void OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::setCurrentActivityModeType(const qint32 &current_activity_mode_type) {
    m_current_activity_mode_type = current_activity_mode_type;
    m_current_activity_mode_type_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::is_current_activity_mode_type_Set() const{
    return m_current_activity_mode_type_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::is_current_activity_mode_type_Valid() const{
    return m_current_activity_mode_type_isValid;
}

QList<qint32> OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::getCurrentActivityModeTypes() const {
    return m_current_activity_mode_types;
}
void OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::setCurrentActivityModeTypes(const QList<qint32> &current_activity_mode_types) {
    m_current_activity_mode_types = current_activity_mode_types;
    m_current_activity_mode_types_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::is_current_activity_mode_types_Set() const{
    return m_current_activity_mode_types_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::is_current_activity_mode_types_Valid() const{
    return m_current_activity_mode_types_isValid;
}

qint32 OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::getCurrentPlaylistActivityHash() const {
    return m_current_playlist_activity_hash;
}
void OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::setCurrentPlaylistActivityHash(const qint32 &current_playlist_activity_hash) {
    m_current_playlist_activity_hash = current_playlist_activity_hash;
    m_current_playlist_activity_hash_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::is_current_playlist_activity_hash_Set() const{
    return m_current_playlist_activity_hash_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::is_current_playlist_activity_hash_Valid() const{
    return m_current_playlist_activity_hash_isValid;
}

QDateTime OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::getDateActivityStarted() const {
    return m_date_activity_started;
}
void OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::setDateActivityStarted(const QDateTime &date_activity_started) {
    m_date_activity_started = date_activity_started;
    m_date_activity_started_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::is_date_activity_started_Set() const{
    return m_date_activity_started_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::is_date_activity_started_Valid() const{
    return m_date_activity_started_isValid;
}

qint32 OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::getLastCompletedStoryHash() const {
    return m_last_completed_story_hash;
}
void OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::setLastCompletedStoryHash(const qint32 &last_completed_story_hash) {
    m_last_completed_story_hash = last_completed_story_hash;
    m_last_completed_story_hash_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::is_last_completed_story_hash_Set() const{
    return m_last_completed_story_hash_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::is_last_completed_story_hash_Valid() const{
    return m_last_completed_story_hash_isValid;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_activities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_activity_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_activity_mode_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_activity_mode_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_activity_mode_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_activity_mode_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_playlist_activity_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_activity_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_completed_story_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterActivitiesComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
