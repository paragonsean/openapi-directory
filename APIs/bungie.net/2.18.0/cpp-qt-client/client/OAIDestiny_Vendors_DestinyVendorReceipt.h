/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Vendors_DestinyVendorReceipt.h
 *
 * If a character purchased an item that is refundable, a Vendor Receipt will be created on the user&#39;s Destiny Profile. These expire after a configurable period of time, but until then can be used to get refunds on items. BNet does not provide the ability to refund a purchase *yet*, but you know.
 */

#ifndef OAIDestiny_Vendors_DestinyVendorReceipt_H
#define OAIDestiny_Vendors_DestinyVendorReceipt_H

#include <QJsonObject>

#include "OAIDestiny_DestinyItemQuantity.h"
#include <QDateTime>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_DestinyItemQuantity;

class OAIDestiny_Vendors_DestinyVendorReceipt : public OAIObject {
public:
    OAIDestiny_Vendors_DestinyVendorReceipt();
    OAIDestiny_Vendors_DestinyVendorReceipt(QString json);
    ~OAIDestiny_Vendors_DestinyVendorReceipt() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIDestiny_DestinyItemQuantity> getCurrencyPaid() const;
    void setCurrencyPaid(const QList<OAIDestiny_DestinyItemQuantity> &currency_paid);
    bool is_currency_paid_Set() const;
    bool is_currency_paid_Valid() const;

    QDateTime getExpiresOn() const;
    void setExpiresOn(const QDateTime &expires_on);
    bool is_expires_on_Set() const;
    bool is_expires_on_Valid() const;

    OAIDestiny_DestinyItemQuantity getItemReceived() const;
    void setItemReceived(const OAIDestiny_DestinyItemQuantity &item_received);
    bool is_item_received_Set() const;
    bool is_item_received_Valid() const;

    qint32 getLicenseUnlockHash() const;
    void setLicenseUnlockHash(const qint32 &license_unlock_hash);
    bool is_license_unlock_hash_Set() const;
    bool is_license_unlock_hash_Valid() const;

    qint64 getPurchasedByCharacterId() const;
    void setPurchasedByCharacterId(const qint64 &purchased_by_character_id);
    bool is_purchased_by_character_id_Set() const;
    bool is_purchased_by_character_id_Valid() const;

    qint32 getRefundPolicy() const;
    void setRefundPolicy(const qint32 &refund_policy);
    bool is_refund_policy_Set() const;
    bool is_refund_policy_Valid() const;

    qint32 getSequenceNumber() const;
    void setSequenceNumber(const qint32 &sequence_number);
    bool is_sequence_number_Set() const;
    bool is_sequence_number_Valid() const;

    qint64 getTimeToExpiration() const;
    void setTimeToExpiration(const qint64 &time_to_expiration);
    bool is_time_to_expiration_Set() const;
    bool is_time_to_expiration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIDestiny_DestinyItemQuantity> m_currency_paid;
    bool m_currency_paid_isSet;
    bool m_currency_paid_isValid;

    QDateTime m_expires_on;
    bool m_expires_on_isSet;
    bool m_expires_on_isValid;

    OAIDestiny_DestinyItemQuantity m_item_received;
    bool m_item_received_isSet;
    bool m_item_received_isValid;

    qint32 m_license_unlock_hash;
    bool m_license_unlock_hash_isSet;
    bool m_license_unlock_hash_isValid;

    qint64 m_purchased_by_character_id;
    bool m_purchased_by_character_id_isSet;
    bool m_purchased_by_character_id_isValid;

    qint32 m_refund_policy;
    bool m_refund_policy_isSet;
    bool m_refund_policy_isValid;

    qint32 m_sequence_number;
    bool m_sequence_number_isSet;
    bool m_sequence_number_isValid;

    qint64 m_time_to_expiration;
    bool m_time_to_expiration_isSet;
    bool m_time_to_expiration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Vendors_DestinyVendorReceipt)

#endif // OAIDestiny_Vendors_DestinyVendorReceipt_H
