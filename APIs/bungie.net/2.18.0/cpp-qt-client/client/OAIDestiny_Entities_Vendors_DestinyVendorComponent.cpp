/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Entities_Vendors_DestinyVendorComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Entities_Vendors_DestinyVendorComponent::OAIDestiny_Entities_Vendors_DestinyVendorComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Entities_Vendors_DestinyVendorComponent::OAIDestiny_Entities_Vendors_DestinyVendorComponent() {
    this->initializeModel();
}

OAIDestiny_Entities_Vendors_DestinyVendorComponent::~OAIDestiny_Entities_Vendors_DestinyVendorComponent() {}

void OAIDestiny_Entities_Vendors_DestinyVendorComponent::initializeModel() {

    m_can_purchase_isSet = false;
    m_can_purchase_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_next_refresh_date_isSet = false;
    m_next_refresh_date_isValid = false;

    m_progression_isSet = false;
    m_progression_isValid = false;

    m_seasonal_rank_isSet = false;
    m_seasonal_rank_isValid = false;

    m_vendor_hash_isSet = false;
    m_vendor_hash_isValid = false;

    m_vendor_location_index_isSet = false;
    m_vendor_location_index_isValid = false;
}

void OAIDestiny_Entities_Vendors_DestinyVendorComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Entities_Vendors_DestinyVendorComponent::fromJsonObject(QJsonObject json) {

    m_can_purchase_isValid = ::OpenAPI::fromJsonValue(m_can_purchase, json[QString("canPurchase")]);
    m_can_purchase_isSet = !json[QString("canPurchase")].isNull() && m_can_purchase_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_next_refresh_date_isValid = ::OpenAPI::fromJsonValue(m_next_refresh_date, json[QString("nextRefreshDate")]);
    m_next_refresh_date_isSet = !json[QString("nextRefreshDate")].isNull() && m_next_refresh_date_isValid;

    m_progression_isValid = ::OpenAPI::fromJsonValue(m_progression, json[QString("progression")]);
    m_progression_isSet = !json[QString("progression")].isNull() && m_progression_isValid;

    m_seasonal_rank_isValid = ::OpenAPI::fromJsonValue(m_seasonal_rank, json[QString("seasonalRank")]);
    m_seasonal_rank_isSet = !json[QString("seasonalRank")].isNull() && m_seasonal_rank_isValid;

    m_vendor_hash_isValid = ::OpenAPI::fromJsonValue(m_vendor_hash, json[QString("vendorHash")]);
    m_vendor_hash_isSet = !json[QString("vendorHash")].isNull() && m_vendor_hash_isValid;

    m_vendor_location_index_isValid = ::OpenAPI::fromJsonValue(m_vendor_location_index, json[QString("vendorLocationIndex")]);
    m_vendor_location_index_isSet = !json[QString("vendorLocationIndex")].isNull() && m_vendor_location_index_isValid;
}

QString OAIDestiny_Entities_Vendors_DestinyVendorComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Entities_Vendors_DestinyVendorComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_can_purchase_isSet) {
        obj.insert(QString("canPurchase"), ::OpenAPI::toJsonValue(m_can_purchase));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_next_refresh_date_isSet) {
        obj.insert(QString("nextRefreshDate"), ::OpenAPI::toJsonValue(m_next_refresh_date));
    }
    if (m_progression.isSet()) {
        obj.insert(QString("progression"), ::OpenAPI::toJsonValue(m_progression));
    }
    if (m_seasonal_rank_isSet) {
        obj.insert(QString("seasonalRank"), ::OpenAPI::toJsonValue(m_seasonal_rank));
    }
    if (m_vendor_hash_isSet) {
        obj.insert(QString("vendorHash"), ::OpenAPI::toJsonValue(m_vendor_hash));
    }
    if (m_vendor_location_index_isSet) {
        obj.insert(QString("vendorLocationIndex"), ::OpenAPI::toJsonValue(m_vendor_location_index));
    }
    return obj;
}

bool OAIDestiny_Entities_Vendors_DestinyVendorComponent::isCanPurchase() const {
    return m_can_purchase;
}
void OAIDestiny_Entities_Vendors_DestinyVendorComponent::setCanPurchase(const bool &can_purchase) {
    m_can_purchase = can_purchase;
    m_can_purchase_isSet = true;
}

bool OAIDestiny_Entities_Vendors_DestinyVendorComponent::is_can_purchase_Set() const{
    return m_can_purchase_isSet;
}

bool OAIDestiny_Entities_Vendors_DestinyVendorComponent::is_can_purchase_Valid() const{
    return m_can_purchase_isValid;
}

bool OAIDestiny_Entities_Vendors_DestinyVendorComponent::isEnabled() const {
    return m_enabled;
}
void OAIDestiny_Entities_Vendors_DestinyVendorComponent::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIDestiny_Entities_Vendors_DestinyVendorComponent::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIDestiny_Entities_Vendors_DestinyVendorComponent::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QDateTime OAIDestiny_Entities_Vendors_DestinyVendorComponent::getNextRefreshDate() const {
    return m_next_refresh_date;
}
void OAIDestiny_Entities_Vendors_DestinyVendorComponent::setNextRefreshDate(const QDateTime &next_refresh_date) {
    m_next_refresh_date = next_refresh_date;
    m_next_refresh_date_isSet = true;
}

bool OAIDestiny_Entities_Vendors_DestinyVendorComponent::is_next_refresh_date_Set() const{
    return m_next_refresh_date_isSet;
}

bool OAIDestiny_Entities_Vendors_DestinyVendorComponent::is_next_refresh_date_Valid() const{
    return m_next_refresh_date_isValid;
}

OAIDestiny_DestinyProgression OAIDestiny_Entities_Vendors_DestinyVendorComponent::getProgression() const {
    return m_progression;
}
void OAIDestiny_Entities_Vendors_DestinyVendorComponent::setProgression(const OAIDestiny_DestinyProgression &progression) {
    m_progression = progression;
    m_progression_isSet = true;
}

bool OAIDestiny_Entities_Vendors_DestinyVendorComponent::is_progression_Set() const{
    return m_progression_isSet;
}

bool OAIDestiny_Entities_Vendors_DestinyVendorComponent::is_progression_Valid() const{
    return m_progression_isValid;
}

qint32 OAIDestiny_Entities_Vendors_DestinyVendorComponent::getSeasonalRank() const {
    return m_seasonal_rank;
}
void OAIDestiny_Entities_Vendors_DestinyVendorComponent::setSeasonalRank(const qint32 &seasonal_rank) {
    m_seasonal_rank = seasonal_rank;
    m_seasonal_rank_isSet = true;
}

bool OAIDestiny_Entities_Vendors_DestinyVendorComponent::is_seasonal_rank_Set() const{
    return m_seasonal_rank_isSet;
}

bool OAIDestiny_Entities_Vendors_DestinyVendorComponent::is_seasonal_rank_Valid() const{
    return m_seasonal_rank_isValid;
}

qint32 OAIDestiny_Entities_Vendors_DestinyVendorComponent::getVendorHash() const {
    return m_vendor_hash;
}
void OAIDestiny_Entities_Vendors_DestinyVendorComponent::setVendorHash(const qint32 &vendor_hash) {
    m_vendor_hash = vendor_hash;
    m_vendor_hash_isSet = true;
}

bool OAIDestiny_Entities_Vendors_DestinyVendorComponent::is_vendor_hash_Set() const{
    return m_vendor_hash_isSet;
}

bool OAIDestiny_Entities_Vendors_DestinyVendorComponent::is_vendor_hash_Valid() const{
    return m_vendor_hash_isValid;
}

qint32 OAIDestiny_Entities_Vendors_DestinyVendorComponent::getVendorLocationIndex() const {
    return m_vendor_location_index;
}
void OAIDestiny_Entities_Vendors_DestinyVendorComponent::setVendorLocationIndex(const qint32 &vendor_location_index) {
    m_vendor_location_index = vendor_location_index;
    m_vendor_location_index_isSet = true;
}

bool OAIDestiny_Entities_Vendors_DestinyVendorComponent::is_vendor_location_index_Set() const{
    return m_vendor_location_index_isSet;
}

bool OAIDestiny_Entities_Vendors_DestinyVendorComponent::is_vendor_location_index_Valid() const{
    return m_vendor_location_index_isValid;
}

bool OAIDestiny_Entities_Vendors_DestinyVendorComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_purchase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_refresh_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seasonal_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_location_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Entities_Vendors_DestinyVendorComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
