/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Entities_Characters_DestinyCharacterComponent.h
 *
 * This component contains base properties of the character. You&#39;ll probably want to always request this component, but hey you do you.
 */

#ifndef OAIDestiny_Entities_Characters_DestinyCharacterComponent_H
#define OAIDestiny_Entities_Characters_DestinyCharacterComponent_H

#include <QJsonObject>

#include "OAIDestiny_DestinyProgression.h"
#include "OAIDestiny_Misc_DestinyColor.h"
#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Misc_DestinyColor;
class OAIDestiny_DestinyProgression;

class OAIDestiny_Entities_Characters_DestinyCharacterComponent : public OAIObject {
public:
    OAIDestiny_Entities_Characters_DestinyCharacterComponent();
    OAIDestiny_Entities_Characters_DestinyCharacterComponent(QString json);
    ~OAIDestiny_Entities_Characters_DestinyCharacterComponent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBaseCharacterLevel() const;
    void setBaseCharacterLevel(const qint32 &base_character_level);
    bool is_base_character_level_Set() const;
    bool is_base_character_level_Valid() const;

    qint64 getCharacterId() const;
    void setCharacterId(const qint64 &character_id);
    bool is_character_id_Set() const;
    bool is_character_id_Valid() const;

    qint32 getClassHash() const;
    void setClassHash(const qint32 &class_hash);
    bool is_class_hash_Set() const;
    bool is_class_hash_Valid() const;

    qint32 getClassType() const;
    void setClassType(const qint32 &class_type);
    bool is_class_type_Set() const;
    bool is_class_type_Valid() const;

    QDateTime getDateLastPlayed() const;
    void setDateLastPlayed(const QDateTime &date_last_played);
    bool is_date_last_played_Set() const;
    bool is_date_last_played_Valid() const;

    QString getEmblemBackgroundPath() const;
    void setEmblemBackgroundPath(const QString &emblem_background_path);
    bool is_emblem_background_path_Set() const;
    bool is_emblem_background_path_Valid() const;

    OAIDestiny_Misc_DestinyColor getEmblemColor() const;
    void setEmblemColor(const OAIDestiny_Misc_DestinyColor &emblem_color);
    bool is_emblem_color_Set() const;
    bool is_emblem_color_Valid() const;

    qint32 getEmblemHash() const;
    void setEmblemHash(const qint32 &emblem_hash);
    bool is_emblem_hash_Set() const;
    bool is_emblem_hash_Valid() const;

    QString getEmblemPath() const;
    void setEmblemPath(const QString &emblem_path);
    bool is_emblem_path_Set() const;
    bool is_emblem_path_Valid() const;

    qint32 getGenderHash() const;
    void setGenderHash(const qint32 &gender_hash);
    bool is_gender_hash_Set() const;
    bool is_gender_hash_Valid() const;

    qint32 getGenderType() const;
    void setGenderType(const qint32 &gender_type);
    bool is_gender_type_Set() const;
    bool is_gender_type_Valid() const;

    OAIDestiny_DestinyProgression getLevelProgression() const;
    void setLevelProgression(const OAIDestiny_DestinyProgression &level_progression);
    bool is_level_progression_Set() const;
    bool is_level_progression_Valid() const;

    qint32 getLight() const;
    void setLight(const qint32 &light);
    bool is_light_Set() const;
    bool is_light_Valid() const;

    qint64 getMembershipId() const;
    void setMembershipId(const qint64 &membership_id);
    bool is_membership_id_Set() const;
    bool is_membership_id_Valid() const;

    qint32 getMembershipType() const;
    void setMembershipType(const qint32 &membership_type);
    bool is_membership_type_Set() const;
    bool is_membership_type_Valid() const;

    qint64 getMinutesPlayedThisSession() const;
    void setMinutesPlayedThisSession(const qint64 &minutes_played_this_session);
    bool is_minutes_played_this_session_Set() const;
    bool is_minutes_played_this_session_Valid() const;

    qint64 getMinutesPlayedTotal() const;
    void setMinutesPlayedTotal(const qint64 &minutes_played_total);
    bool is_minutes_played_total_Set() const;
    bool is_minutes_played_total_Valid() const;

    float getPercentToNextLevel() const;
    void setPercentToNextLevel(const float &percent_to_next_level);
    bool is_percent_to_next_level_Set() const;
    bool is_percent_to_next_level_Valid() const;

    qint32 getRaceHash() const;
    void setRaceHash(const qint32 &race_hash);
    bool is_race_hash_Set() const;
    bool is_race_hash_Valid() const;

    qint32 getRaceType() const;
    void setRaceType(const qint32 &race_type);
    bool is_race_type_Set() const;
    bool is_race_type_Valid() const;

    QMap<QString, qint32> getStats() const;
    void setStats(const QMap<QString, qint32> &stats);
    bool is_stats_Set() const;
    bool is_stats_Valid() const;

    qint32 getTitleRecordHash() const;
    void setTitleRecordHash(const qint32 &title_record_hash);
    bool is_title_record_hash_Set() const;
    bool is_title_record_hash_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_base_character_level;
    bool m_base_character_level_isSet;
    bool m_base_character_level_isValid;

    qint64 m_character_id;
    bool m_character_id_isSet;
    bool m_character_id_isValid;

    qint32 m_class_hash;
    bool m_class_hash_isSet;
    bool m_class_hash_isValid;

    qint32 m_class_type;
    bool m_class_type_isSet;
    bool m_class_type_isValid;

    QDateTime m_date_last_played;
    bool m_date_last_played_isSet;
    bool m_date_last_played_isValid;

    QString m_emblem_background_path;
    bool m_emblem_background_path_isSet;
    bool m_emblem_background_path_isValid;

    OAIDestiny_Misc_DestinyColor m_emblem_color;
    bool m_emblem_color_isSet;
    bool m_emblem_color_isValid;

    qint32 m_emblem_hash;
    bool m_emblem_hash_isSet;
    bool m_emblem_hash_isValid;

    QString m_emblem_path;
    bool m_emblem_path_isSet;
    bool m_emblem_path_isValid;

    qint32 m_gender_hash;
    bool m_gender_hash_isSet;
    bool m_gender_hash_isValid;

    qint32 m_gender_type;
    bool m_gender_type_isSet;
    bool m_gender_type_isValid;

    OAIDestiny_DestinyProgression m_level_progression;
    bool m_level_progression_isSet;
    bool m_level_progression_isValid;

    qint32 m_light;
    bool m_light_isSet;
    bool m_light_isValid;

    qint64 m_membership_id;
    bool m_membership_id_isSet;
    bool m_membership_id_isValid;

    qint32 m_membership_type;
    bool m_membership_type_isSet;
    bool m_membership_type_isValid;

    qint64 m_minutes_played_this_session;
    bool m_minutes_played_this_session_isSet;
    bool m_minutes_played_this_session_isValid;

    qint64 m_minutes_played_total;
    bool m_minutes_played_total_isSet;
    bool m_minutes_played_total_isValid;

    float m_percent_to_next_level;
    bool m_percent_to_next_level_isSet;
    bool m_percent_to_next_level_isValid;

    qint32 m_race_hash;
    bool m_race_hash_isSet;
    bool m_race_hash_isValid;

    qint32 m_race_type;
    bool m_race_type_isSet;
    bool m_race_type_isValid;

    QMap<QString, qint32> m_stats;
    bool m_stats_isSet;
    bool m_stats_isValid;

    qint32 m_title_record_hash;
    bool m_title_record_hash_isSet;
    bool m_title_record_hash_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Entities_Characters_DestinyCharacterComponent)

#endif // OAIDestiny_Entities_Characters_DestinyCharacterComponent_H
