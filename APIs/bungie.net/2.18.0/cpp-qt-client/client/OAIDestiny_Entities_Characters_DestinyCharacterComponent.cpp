/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Entities_Characters_DestinyCharacterComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Entities_Characters_DestinyCharacterComponent::OAIDestiny_Entities_Characters_DestinyCharacterComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Entities_Characters_DestinyCharacterComponent::OAIDestiny_Entities_Characters_DestinyCharacterComponent() {
    this->initializeModel();
}

OAIDestiny_Entities_Characters_DestinyCharacterComponent::~OAIDestiny_Entities_Characters_DestinyCharacterComponent() {}

void OAIDestiny_Entities_Characters_DestinyCharacterComponent::initializeModel() {

    m_base_character_level_isSet = false;
    m_base_character_level_isValid = false;

    m_character_id_isSet = false;
    m_character_id_isValid = false;

    m_class_hash_isSet = false;
    m_class_hash_isValid = false;

    m_class_type_isSet = false;
    m_class_type_isValid = false;

    m_date_last_played_isSet = false;
    m_date_last_played_isValid = false;

    m_emblem_background_path_isSet = false;
    m_emblem_background_path_isValid = false;

    m_emblem_color_isSet = false;
    m_emblem_color_isValid = false;

    m_emblem_hash_isSet = false;
    m_emblem_hash_isValid = false;

    m_emblem_path_isSet = false;
    m_emblem_path_isValid = false;

    m_gender_hash_isSet = false;
    m_gender_hash_isValid = false;

    m_gender_type_isSet = false;
    m_gender_type_isValid = false;

    m_level_progression_isSet = false;
    m_level_progression_isValid = false;

    m_light_isSet = false;
    m_light_isValid = false;

    m_membership_id_isSet = false;
    m_membership_id_isValid = false;

    m_membership_type_isSet = false;
    m_membership_type_isValid = false;

    m_minutes_played_this_session_isSet = false;
    m_minutes_played_this_session_isValid = false;

    m_minutes_played_total_isSet = false;
    m_minutes_played_total_isValid = false;

    m_percent_to_next_level_isSet = false;
    m_percent_to_next_level_isValid = false;

    m_race_hash_isSet = false;
    m_race_hash_isValid = false;

    m_race_type_isSet = false;
    m_race_type_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;

    m_title_record_hash_isSet = false;
    m_title_record_hash_isValid = false;
}

void OAIDestiny_Entities_Characters_DestinyCharacterComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Entities_Characters_DestinyCharacterComponent::fromJsonObject(QJsonObject json) {

    m_base_character_level_isValid = ::OpenAPI::fromJsonValue(m_base_character_level, json[QString("baseCharacterLevel")]);
    m_base_character_level_isSet = !json[QString("baseCharacterLevel")].isNull() && m_base_character_level_isValid;

    m_character_id_isValid = ::OpenAPI::fromJsonValue(m_character_id, json[QString("characterId")]);
    m_character_id_isSet = !json[QString("characterId")].isNull() && m_character_id_isValid;

    m_class_hash_isValid = ::OpenAPI::fromJsonValue(m_class_hash, json[QString("classHash")]);
    m_class_hash_isSet = !json[QString("classHash")].isNull() && m_class_hash_isValid;

    m_class_type_isValid = ::OpenAPI::fromJsonValue(m_class_type, json[QString("classType")]);
    m_class_type_isSet = !json[QString("classType")].isNull() && m_class_type_isValid;

    m_date_last_played_isValid = ::OpenAPI::fromJsonValue(m_date_last_played, json[QString("dateLastPlayed")]);
    m_date_last_played_isSet = !json[QString("dateLastPlayed")].isNull() && m_date_last_played_isValid;

    m_emblem_background_path_isValid = ::OpenAPI::fromJsonValue(m_emblem_background_path, json[QString("emblemBackgroundPath")]);
    m_emblem_background_path_isSet = !json[QString("emblemBackgroundPath")].isNull() && m_emblem_background_path_isValid;

    m_emblem_color_isValid = ::OpenAPI::fromJsonValue(m_emblem_color, json[QString("emblemColor")]);
    m_emblem_color_isSet = !json[QString("emblemColor")].isNull() && m_emblem_color_isValid;

    m_emblem_hash_isValid = ::OpenAPI::fromJsonValue(m_emblem_hash, json[QString("emblemHash")]);
    m_emblem_hash_isSet = !json[QString("emblemHash")].isNull() && m_emblem_hash_isValid;

    m_emblem_path_isValid = ::OpenAPI::fromJsonValue(m_emblem_path, json[QString("emblemPath")]);
    m_emblem_path_isSet = !json[QString("emblemPath")].isNull() && m_emblem_path_isValid;

    m_gender_hash_isValid = ::OpenAPI::fromJsonValue(m_gender_hash, json[QString("genderHash")]);
    m_gender_hash_isSet = !json[QString("genderHash")].isNull() && m_gender_hash_isValid;

    m_gender_type_isValid = ::OpenAPI::fromJsonValue(m_gender_type, json[QString("genderType")]);
    m_gender_type_isSet = !json[QString("genderType")].isNull() && m_gender_type_isValid;

    m_level_progression_isValid = ::OpenAPI::fromJsonValue(m_level_progression, json[QString("levelProgression")]);
    m_level_progression_isSet = !json[QString("levelProgression")].isNull() && m_level_progression_isValid;

    m_light_isValid = ::OpenAPI::fromJsonValue(m_light, json[QString("light")]);
    m_light_isSet = !json[QString("light")].isNull() && m_light_isValid;

    m_membership_id_isValid = ::OpenAPI::fromJsonValue(m_membership_id, json[QString("membershipId")]);
    m_membership_id_isSet = !json[QString("membershipId")].isNull() && m_membership_id_isValid;

    m_membership_type_isValid = ::OpenAPI::fromJsonValue(m_membership_type, json[QString("membershipType")]);
    m_membership_type_isSet = !json[QString("membershipType")].isNull() && m_membership_type_isValid;

    m_minutes_played_this_session_isValid = ::OpenAPI::fromJsonValue(m_minutes_played_this_session, json[QString("minutesPlayedThisSession")]);
    m_minutes_played_this_session_isSet = !json[QString("minutesPlayedThisSession")].isNull() && m_minutes_played_this_session_isValid;

    m_minutes_played_total_isValid = ::OpenAPI::fromJsonValue(m_minutes_played_total, json[QString("minutesPlayedTotal")]);
    m_minutes_played_total_isSet = !json[QString("minutesPlayedTotal")].isNull() && m_minutes_played_total_isValid;

    m_percent_to_next_level_isValid = ::OpenAPI::fromJsonValue(m_percent_to_next_level, json[QString("percentToNextLevel")]);
    m_percent_to_next_level_isSet = !json[QString("percentToNextLevel")].isNull() && m_percent_to_next_level_isValid;

    m_race_hash_isValid = ::OpenAPI::fromJsonValue(m_race_hash, json[QString("raceHash")]);
    m_race_hash_isSet = !json[QString("raceHash")].isNull() && m_race_hash_isValid;

    m_race_type_isValid = ::OpenAPI::fromJsonValue(m_race_type, json[QString("raceType")]);
    m_race_type_isSet = !json[QString("raceType")].isNull() && m_race_type_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;

    m_title_record_hash_isValid = ::OpenAPI::fromJsonValue(m_title_record_hash, json[QString("titleRecordHash")]);
    m_title_record_hash_isSet = !json[QString("titleRecordHash")].isNull() && m_title_record_hash_isValid;
}

QString OAIDestiny_Entities_Characters_DestinyCharacterComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Entities_Characters_DestinyCharacterComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_base_character_level_isSet) {
        obj.insert(QString("baseCharacterLevel"), ::OpenAPI::toJsonValue(m_base_character_level));
    }
    if (m_character_id_isSet) {
        obj.insert(QString("characterId"), ::OpenAPI::toJsonValue(m_character_id));
    }
    if (m_class_hash_isSet) {
        obj.insert(QString("classHash"), ::OpenAPI::toJsonValue(m_class_hash));
    }
    if (m_class_type_isSet) {
        obj.insert(QString("classType"), ::OpenAPI::toJsonValue(m_class_type));
    }
    if (m_date_last_played_isSet) {
        obj.insert(QString("dateLastPlayed"), ::OpenAPI::toJsonValue(m_date_last_played));
    }
    if (m_emblem_background_path_isSet) {
        obj.insert(QString("emblemBackgroundPath"), ::OpenAPI::toJsonValue(m_emblem_background_path));
    }
    if (m_emblem_color.isSet()) {
        obj.insert(QString("emblemColor"), ::OpenAPI::toJsonValue(m_emblem_color));
    }
    if (m_emblem_hash_isSet) {
        obj.insert(QString("emblemHash"), ::OpenAPI::toJsonValue(m_emblem_hash));
    }
    if (m_emblem_path_isSet) {
        obj.insert(QString("emblemPath"), ::OpenAPI::toJsonValue(m_emblem_path));
    }
    if (m_gender_hash_isSet) {
        obj.insert(QString("genderHash"), ::OpenAPI::toJsonValue(m_gender_hash));
    }
    if (m_gender_type_isSet) {
        obj.insert(QString("genderType"), ::OpenAPI::toJsonValue(m_gender_type));
    }
    if (m_level_progression.isSet()) {
        obj.insert(QString("levelProgression"), ::OpenAPI::toJsonValue(m_level_progression));
    }
    if (m_light_isSet) {
        obj.insert(QString("light"), ::OpenAPI::toJsonValue(m_light));
    }
    if (m_membership_id_isSet) {
        obj.insert(QString("membershipId"), ::OpenAPI::toJsonValue(m_membership_id));
    }
    if (m_membership_type_isSet) {
        obj.insert(QString("membershipType"), ::OpenAPI::toJsonValue(m_membership_type));
    }
    if (m_minutes_played_this_session_isSet) {
        obj.insert(QString("minutesPlayedThisSession"), ::OpenAPI::toJsonValue(m_minutes_played_this_session));
    }
    if (m_minutes_played_total_isSet) {
        obj.insert(QString("minutesPlayedTotal"), ::OpenAPI::toJsonValue(m_minutes_played_total));
    }
    if (m_percent_to_next_level_isSet) {
        obj.insert(QString("percentToNextLevel"), ::OpenAPI::toJsonValue(m_percent_to_next_level));
    }
    if (m_race_hash_isSet) {
        obj.insert(QString("raceHash"), ::OpenAPI::toJsonValue(m_race_hash));
    }
    if (m_race_type_isSet) {
        obj.insert(QString("raceType"), ::OpenAPI::toJsonValue(m_race_type));
    }
    if (m_stats.size() > 0) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    if (m_title_record_hash_isSet) {
        obj.insert(QString("titleRecordHash"), ::OpenAPI::toJsonValue(m_title_record_hash));
    }
    return obj;
}

qint32 OAIDestiny_Entities_Characters_DestinyCharacterComponent::getBaseCharacterLevel() const {
    return m_base_character_level;
}
void OAIDestiny_Entities_Characters_DestinyCharacterComponent::setBaseCharacterLevel(const qint32 &base_character_level) {
    m_base_character_level = base_character_level;
    m_base_character_level_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_base_character_level_Set() const{
    return m_base_character_level_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_base_character_level_Valid() const{
    return m_base_character_level_isValid;
}

qint64 OAIDestiny_Entities_Characters_DestinyCharacterComponent::getCharacterId() const {
    return m_character_id;
}
void OAIDestiny_Entities_Characters_DestinyCharacterComponent::setCharacterId(const qint64 &character_id) {
    m_character_id = character_id;
    m_character_id_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_character_id_Set() const{
    return m_character_id_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_character_id_Valid() const{
    return m_character_id_isValid;
}

qint32 OAIDestiny_Entities_Characters_DestinyCharacterComponent::getClassHash() const {
    return m_class_hash;
}
void OAIDestiny_Entities_Characters_DestinyCharacterComponent::setClassHash(const qint32 &class_hash) {
    m_class_hash = class_hash;
    m_class_hash_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_class_hash_Set() const{
    return m_class_hash_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_class_hash_Valid() const{
    return m_class_hash_isValid;
}

qint32 OAIDestiny_Entities_Characters_DestinyCharacterComponent::getClassType() const {
    return m_class_type;
}
void OAIDestiny_Entities_Characters_DestinyCharacterComponent::setClassType(const qint32 &class_type) {
    m_class_type = class_type;
    m_class_type_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_class_type_Set() const{
    return m_class_type_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_class_type_Valid() const{
    return m_class_type_isValid;
}

QDateTime OAIDestiny_Entities_Characters_DestinyCharacterComponent::getDateLastPlayed() const {
    return m_date_last_played;
}
void OAIDestiny_Entities_Characters_DestinyCharacterComponent::setDateLastPlayed(const QDateTime &date_last_played) {
    m_date_last_played = date_last_played;
    m_date_last_played_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_date_last_played_Set() const{
    return m_date_last_played_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_date_last_played_Valid() const{
    return m_date_last_played_isValid;
}

QString OAIDestiny_Entities_Characters_DestinyCharacterComponent::getEmblemBackgroundPath() const {
    return m_emblem_background_path;
}
void OAIDestiny_Entities_Characters_DestinyCharacterComponent::setEmblemBackgroundPath(const QString &emblem_background_path) {
    m_emblem_background_path = emblem_background_path;
    m_emblem_background_path_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_emblem_background_path_Set() const{
    return m_emblem_background_path_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_emblem_background_path_Valid() const{
    return m_emblem_background_path_isValid;
}

OAIDestiny_Misc_DestinyColor OAIDestiny_Entities_Characters_DestinyCharacterComponent::getEmblemColor() const {
    return m_emblem_color;
}
void OAIDestiny_Entities_Characters_DestinyCharacterComponent::setEmblemColor(const OAIDestiny_Misc_DestinyColor &emblem_color) {
    m_emblem_color = emblem_color;
    m_emblem_color_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_emblem_color_Set() const{
    return m_emblem_color_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_emblem_color_Valid() const{
    return m_emblem_color_isValid;
}

qint32 OAIDestiny_Entities_Characters_DestinyCharacterComponent::getEmblemHash() const {
    return m_emblem_hash;
}
void OAIDestiny_Entities_Characters_DestinyCharacterComponent::setEmblemHash(const qint32 &emblem_hash) {
    m_emblem_hash = emblem_hash;
    m_emblem_hash_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_emblem_hash_Set() const{
    return m_emblem_hash_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_emblem_hash_Valid() const{
    return m_emblem_hash_isValid;
}

QString OAIDestiny_Entities_Characters_DestinyCharacterComponent::getEmblemPath() const {
    return m_emblem_path;
}
void OAIDestiny_Entities_Characters_DestinyCharacterComponent::setEmblemPath(const QString &emblem_path) {
    m_emblem_path = emblem_path;
    m_emblem_path_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_emblem_path_Set() const{
    return m_emblem_path_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_emblem_path_Valid() const{
    return m_emblem_path_isValid;
}

qint32 OAIDestiny_Entities_Characters_DestinyCharacterComponent::getGenderHash() const {
    return m_gender_hash;
}
void OAIDestiny_Entities_Characters_DestinyCharacterComponent::setGenderHash(const qint32 &gender_hash) {
    m_gender_hash = gender_hash;
    m_gender_hash_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_gender_hash_Set() const{
    return m_gender_hash_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_gender_hash_Valid() const{
    return m_gender_hash_isValid;
}

qint32 OAIDestiny_Entities_Characters_DestinyCharacterComponent::getGenderType() const {
    return m_gender_type;
}
void OAIDestiny_Entities_Characters_DestinyCharacterComponent::setGenderType(const qint32 &gender_type) {
    m_gender_type = gender_type;
    m_gender_type_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_gender_type_Set() const{
    return m_gender_type_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_gender_type_Valid() const{
    return m_gender_type_isValid;
}

OAIDestiny_DestinyProgression OAIDestiny_Entities_Characters_DestinyCharacterComponent::getLevelProgression() const {
    return m_level_progression;
}
void OAIDestiny_Entities_Characters_DestinyCharacterComponent::setLevelProgression(const OAIDestiny_DestinyProgression &level_progression) {
    m_level_progression = level_progression;
    m_level_progression_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_level_progression_Set() const{
    return m_level_progression_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_level_progression_Valid() const{
    return m_level_progression_isValid;
}

qint32 OAIDestiny_Entities_Characters_DestinyCharacterComponent::getLight() const {
    return m_light;
}
void OAIDestiny_Entities_Characters_DestinyCharacterComponent::setLight(const qint32 &light) {
    m_light = light;
    m_light_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_light_Set() const{
    return m_light_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_light_Valid() const{
    return m_light_isValid;
}

qint64 OAIDestiny_Entities_Characters_DestinyCharacterComponent::getMembershipId() const {
    return m_membership_id;
}
void OAIDestiny_Entities_Characters_DestinyCharacterComponent::setMembershipId(const qint64 &membership_id) {
    m_membership_id = membership_id;
    m_membership_id_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_membership_id_Set() const{
    return m_membership_id_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_membership_id_Valid() const{
    return m_membership_id_isValid;
}

qint32 OAIDestiny_Entities_Characters_DestinyCharacterComponent::getMembershipType() const {
    return m_membership_type;
}
void OAIDestiny_Entities_Characters_DestinyCharacterComponent::setMembershipType(const qint32 &membership_type) {
    m_membership_type = membership_type;
    m_membership_type_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_membership_type_Set() const{
    return m_membership_type_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_membership_type_Valid() const{
    return m_membership_type_isValid;
}

qint64 OAIDestiny_Entities_Characters_DestinyCharacterComponent::getMinutesPlayedThisSession() const {
    return m_minutes_played_this_session;
}
void OAIDestiny_Entities_Characters_DestinyCharacterComponent::setMinutesPlayedThisSession(const qint64 &minutes_played_this_session) {
    m_minutes_played_this_session = minutes_played_this_session;
    m_minutes_played_this_session_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_minutes_played_this_session_Set() const{
    return m_minutes_played_this_session_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_minutes_played_this_session_Valid() const{
    return m_minutes_played_this_session_isValid;
}

qint64 OAIDestiny_Entities_Characters_DestinyCharacterComponent::getMinutesPlayedTotal() const {
    return m_minutes_played_total;
}
void OAIDestiny_Entities_Characters_DestinyCharacterComponent::setMinutesPlayedTotal(const qint64 &minutes_played_total) {
    m_minutes_played_total = minutes_played_total;
    m_minutes_played_total_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_minutes_played_total_Set() const{
    return m_minutes_played_total_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_minutes_played_total_Valid() const{
    return m_minutes_played_total_isValid;
}

float OAIDestiny_Entities_Characters_DestinyCharacterComponent::getPercentToNextLevel() const {
    return m_percent_to_next_level;
}
void OAIDestiny_Entities_Characters_DestinyCharacterComponent::setPercentToNextLevel(const float &percent_to_next_level) {
    m_percent_to_next_level = percent_to_next_level;
    m_percent_to_next_level_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_percent_to_next_level_Set() const{
    return m_percent_to_next_level_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_percent_to_next_level_Valid() const{
    return m_percent_to_next_level_isValid;
}

qint32 OAIDestiny_Entities_Characters_DestinyCharacterComponent::getRaceHash() const {
    return m_race_hash;
}
void OAIDestiny_Entities_Characters_DestinyCharacterComponent::setRaceHash(const qint32 &race_hash) {
    m_race_hash = race_hash;
    m_race_hash_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_race_hash_Set() const{
    return m_race_hash_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_race_hash_Valid() const{
    return m_race_hash_isValid;
}

qint32 OAIDestiny_Entities_Characters_DestinyCharacterComponent::getRaceType() const {
    return m_race_type;
}
void OAIDestiny_Entities_Characters_DestinyCharacterComponent::setRaceType(const qint32 &race_type) {
    m_race_type = race_type;
    m_race_type_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_race_type_Set() const{
    return m_race_type_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_race_type_Valid() const{
    return m_race_type_isValid;
}

QMap<QString, qint32> OAIDestiny_Entities_Characters_DestinyCharacterComponent::getStats() const {
    return m_stats;
}
void OAIDestiny_Entities_Characters_DestinyCharacterComponent::setStats(const QMap<QString, qint32> &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_stats_Valid() const{
    return m_stats_isValid;
}

qint32 OAIDestiny_Entities_Characters_DestinyCharacterComponent::getTitleRecordHash() const {
    return m_title_record_hash;
}
void OAIDestiny_Entities_Characters_DestinyCharacterComponent::setTitleRecordHash(const qint32 &title_record_hash) {
    m_title_record_hash = title_record_hash;
    m_title_record_hash_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_title_record_hash_Set() const{
    return m_title_record_hash_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::is_title_record_hash_Valid() const{
    return m_title_record_hash_isValid;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_character_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_last_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emblem_background_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emblem_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_emblem_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emblem_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_progression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_light_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minutes_played_this_session_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minutes_played_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_to_next_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_race_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_race_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_record_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
