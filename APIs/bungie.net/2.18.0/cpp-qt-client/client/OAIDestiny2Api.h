/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDestiny2Api_H
#define OAI_OAIDestiny2Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDestiny2_AwaGetActionToken_200_response.h"
#include "OAIDestiny2_AwaInitializeRequest_200_response.h"
#include "OAIDestiny2_EquipItem_200_response.h"
#include "OAIDestiny2_EquipItems_200_response.h"
#include "OAIDestiny2_GetActivityHistory_200_response.h"
#include "OAIDestiny2_GetCharacter_200_response.h"
#include "OAIDestiny2_GetClanAggregateStats_200_response.h"
#include "OAIDestiny2_GetClanBannerSource_200_response.h"
#include "OAIDestiny2_GetClanLeaderboards_200_response.h"
#include "OAIDestiny2_GetClanWeeklyRewardState_200_response.h"
#include "OAIDestiny2_GetCollectibleNodeDetails_200_response.h"
#include "OAIDestiny2_GetDestinyAggregateActivityStats_200_response.h"
#include "OAIDestiny2_GetDestinyEntityDefinition_200_response.h"
#include "OAIDestiny2_GetDestinyManifest_200_response.h"
#include "OAIDestiny2_GetHistoricalStatsDefinition_200_response.h"
#include "OAIDestiny2_GetHistoricalStatsForAccount_200_response.h"
#include "OAIDestiny2_GetHistoricalStats_200_response.h"
#include "OAIDestiny2_GetItem_200_response.h"
#include "OAIDestiny2_GetLinkedProfiles_200_response.h"
#include "OAIDestiny2_GetPostGameCarnageReport_200_response.h"
#include "OAIDestiny2_GetProfile_200_response.h"
#include "OAIDestiny2_GetPublicMilestoneContent_200_response.h"
#include "OAIDestiny2_GetPublicMilestones_200_response.h"
#include "OAIDestiny2_GetPublicVendors_200_response.h"
#include "OAIDestiny2_GetUniqueWeaponHistory_200_response.h"
#include "OAIDestiny2_GetVendor_200_response.h"
#include "OAIDestiny2_GetVendors_200_response.h"
#include "OAIDestiny2_InsertSocketPlug_200_response.h"
#include "OAIDestiny2_SearchDestinyEntities_200_response.h"
#include "OAIDestiny2_SearchDestinyPlayerByBungieName_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDestiny2Api : public QObject {
    Q_OBJECT

public:
    OAIDestiny2Api(const int timeOut = 0);
    ~OAIDestiny2Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  correlation_id QString [required]
    */
    virtual void destiny2_AwaGetActionToken(const QString &correlation_id);


    virtual void destiny2_AwaInitializeRequest();


    virtual void destiny2_AwaProvideAuthorizationResult();


    virtual void destiny2_ClearLoadout();


    virtual void destiny2_EquipItem();


    virtual void destiny2_EquipItems();


    virtual void destiny2_EquipLoadout();

    /**
    * @param[in]  character_id qint64 [required]
    * @param[in]  destiny_membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    * @param[in]  count qint32 [optional]
    * @param[in]  mode qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void destiny2_GetActivityHistory(const qint64 &character_id, const qint64 &destiny_membership_id, const qint32 &membership_type, const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &mode = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  character_id qint64 [required]
    * @param[in]  destiny_membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    * @param[in]  components QList<qint32> [optional]
    */
    virtual void destiny2_GetCharacter(const qint64 &character_id, const qint64 &destiny_membership_id, const qint32 &membership_type, const ::OpenAPI::OptionalParam<QList<qint32>> &components = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  group_id qint64 [required]
    * @param[in]  modes QString [optional]
    */
    virtual void destiny2_GetClanAggregateStats(const qint64 &group_id, const ::OpenAPI::OptionalParam<QString> &modes = ::OpenAPI::OptionalParam<QString>());


    virtual void destiny2_GetClanBannerSource();

    /**
    * @param[in]  group_id qint64 [required]
    * @param[in]  maxtop qint32 [optional]
    * @param[in]  modes QString [optional]
    * @param[in]  statid QString [optional]
    */
    virtual void destiny2_GetClanLeaderboards(const qint64 &group_id, const ::OpenAPI::OptionalParam<qint32> &maxtop = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &modes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &statid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id qint64 [required]
    */
    virtual void destiny2_GetClanWeeklyRewardState(const qint64 &group_id);

    /**
    * @param[in]  character_id qint64 [required]
    * @param[in]  collectible_presentation_node_hash qint32 [required]
    * @param[in]  destiny_membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    * @param[in]  components QList<qint32> [optional]
    */
    virtual void destiny2_GetCollectibleNodeDetails(const qint64 &character_id, const qint32 &collectible_presentation_node_hash, const qint64 &destiny_membership_id, const qint32 &membership_type, const ::OpenAPI::OptionalParam<QList<qint32>> &components = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  character_id qint64 [required]
    * @param[in]  destiny_membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    */
    virtual void destiny2_GetDestinyAggregateActivityStats(const qint64 &character_id, const qint64 &destiny_membership_id, const qint32 &membership_type);

    /**
    * @param[in]  entity_type QString [required]
    * @param[in]  hash_identifier qint32 [required]
    */
    virtual void destiny2_GetDestinyEntityDefinition(const QString &entity_type, const qint32 &hash_identifier);


    virtual void destiny2_GetDestinyManifest();

    /**
    * @param[in]  character_id qint64 [required]
    * @param[in]  destiny_membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    * @param[in]  dayend QDateTime [optional]
    * @param[in]  daystart QDateTime [optional]
    * @param[in]  groups QList<qint32> [optional]
    * @param[in]  modes QList<qint32> [optional]
    * @param[in]  period_type qint32 [optional]
    */
    virtual void destiny2_GetHistoricalStats(const qint64 &character_id, const qint64 &destiny_membership_id, const qint32 &membership_type, const ::OpenAPI::OptionalParam<QDateTime> &dayend = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &daystart = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<qint32>> &groups = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &modes = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<qint32> &period_type = ::OpenAPI::OptionalParam<qint32>());


    virtual void destiny2_GetHistoricalStatsDefinition();

    /**
    * @param[in]  destiny_membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    * @param[in]  groups QList<qint32> [optional]
    */
    virtual void destiny2_GetHistoricalStatsForAccount(const qint64 &destiny_membership_id, const qint32 &membership_type, const ::OpenAPI::OptionalParam<QList<qint32>> &groups = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  destiny_membership_id qint64 [required]
    * @param[in]  item_instance_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    * @param[in]  components QList<qint32> [optional]
    */
    virtual void destiny2_GetItem(const qint64 &destiny_membership_id, const qint64 &item_instance_id, const qint32 &membership_type, const ::OpenAPI::OptionalParam<QList<qint32>> &components = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  destiny_membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    * @param[in]  maxtop qint32 [optional]
    * @param[in]  modes QString [optional]
    * @param[in]  statid QString [optional]
    */
    virtual void destiny2_GetLeaderboards(const qint64 &destiny_membership_id, const qint32 &membership_type, const ::OpenAPI::OptionalParam<qint32> &maxtop = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &modes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &statid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  character_id qint64 [required]
    * @param[in]  destiny_membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    * @param[in]  maxtop qint32 [optional]
    * @param[in]  modes QString [optional]
    * @param[in]  statid QString [optional]
    */
    virtual void destiny2_GetLeaderboardsForCharacter(const qint64 &character_id, const qint64 &destiny_membership_id, const qint32 &membership_type, const ::OpenAPI::OptionalParam<qint32> &maxtop = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &modes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &statid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    * @param[in]  get_all_memberships bool [optional]
    */
    virtual void destiny2_GetLinkedProfiles(const qint64 &membership_id, const qint32 &membership_type, const ::OpenAPI::OptionalParam<bool> &get_all_memberships = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  activity_id qint64 [required]
    */
    virtual void destiny2_GetPostGameCarnageReport(const qint64 &activity_id);

    /**
    * @param[in]  destiny_membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    * @param[in]  components QList<qint32> [optional]
    */
    virtual void destiny2_GetProfile(const qint64 &destiny_membership_id, const qint32 &membership_type, const ::OpenAPI::OptionalParam<QList<qint32>> &components = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  milestone_hash qint32 [required]
    */
    virtual void destiny2_GetPublicMilestoneContent(const qint32 &milestone_hash);


    virtual void destiny2_GetPublicMilestones();

    /**
    * @param[in]  components QList<qint32> [optional]
    */
    virtual void destiny2_GetPublicVendors(const ::OpenAPI::OptionalParam<QList<qint32>> &components = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  character_id qint64 [required]
    * @param[in]  destiny_membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    */
    virtual void destiny2_GetUniqueWeaponHistory(const qint64 &character_id, const qint64 &destiny_membership_id, const qint32 &membership_type);

    /**
    * @param[in]  character_id qint64 [required]
    * @param[in]  destiny_membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    * @param[in]  vendor_hash qint32 [required]
    * @param[in]  components QList<qint32> [optional]
    */
    virtual void destiny2_GetVendor(const qint64 &character_id, const qint64 &destiny_membership_id, const qint32 &membership_type, const qint32 &vendor_hash, const ::OpenAPI::OptionalParam<QList<qint32>> &components = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  character_id qint64 [required]
    * @param[in]  destiny_membership_id qint64 [required]
    * @param[in]  membership_type qint32 [required]
    * @param[in]  components QList<qint32> [optional]
    * @param[in]  filter qint32 [optional]
    */
    virtual void destiny2_GetVendors(const qint64 &character_id, const qint64 &destiny_membership_id, const qint32 &membership_type, const ::OpenAPI::OptionalParam<QList<qint32>> &components = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<qint32> &filter = ::OpenAPI::OptionalParam<qint32>());


    virtual void destiny2_InsertSocketPlug();


    virtual void destiny2_InsertSocketPlugFree();


    virtual void destiny2_PullFromPostmaster();

    /**
    * @param[in]  activity_id qint64 [required]
    */
    virtual void destiny2_ReportOffensivePostGameCarnageReportPlayer(const qint64 &activity_id);

    /**
    * @param[in]  search_term QString [required]
    * @param[in]  type QString [required]
    * @param[in]  page qint32 [optional]
    */
    virtual void destiny2_SearchDestinyEntities(const QString &search_term, const QString &type, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  membership_type qint32 [required]
    */
    virtual void destiny2_SearchDestinyPlayerByBungieName(const qint32 &membership_type);


    virtual void destiny2_SetItemLockState();


    virtual void destiny2_SetQuestTrackedState();


    virtual void destiny2_SnapshotLoadout();


    virtual void destiny2_TransferItem();


    virtual void destiny2_UpdateLoadoutIdentifiers();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void destiny2_AwaGetActionTokenCallback(OAIHttpRequestWorker *worker);
    void destiny2_AwaInitializeRequestCallback(OAIHttpRequestWorker *worker);
    void destiny2_AwaProvideAuthorizationResultCallback(OAIHttpRequestWorker *worker);
    void destiny2_ClearLoadoutCallback(OAIHttpRequestWorker *worker);
    void destiny2_EquipItemCallback(OAIHttpRequestWorker *worker);
    void destiny2_EquipItemsCallback(OAIHttpRequestWorker *worker);
    void destiny2_EquipLoadoutCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetActivityHistoryCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetCharacterCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetClanAggregateStatsCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetClanBannerSourceCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetClanLeaderboardsCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetClanWeeklyRewardStateCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetCollectibleNodeDetailsCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetDestinyAggregateActivityStatsCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetDestinyEntityDefinitionCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetDestinyManifestCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetHistoricalStatsCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetHistoricalStatsDefinitionCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetHistoricalStatsForAccountCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetItemCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetLeaderboardsCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetLeaderboardsForCharacterCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetLinkedProfilesCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetPostGameCarnageReportCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetProfileCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetPublicMilestoneContentCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetPublicMilestonesCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetPublicVendorsCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetUniqueWeaponHistoryCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetVendorCallback(OAIHttpRequestWorker *worker);
    void destiny2_GetVendorsCallback(OAIHttpRequestWorker *worker);
    void destiny2_InsertSocketPlugCallback(OAIHttpRequestWorker *worker);
    void destiny2_InsertSocketPlugFreeCallback(OAIHttpRequestWorker *worker);
    void destiny2_PullFromPostmasterCallback(OAIHttpRequestWorker *worker);
    void destiny2_ReportOffensivePostGameCarnageReportPlayerCallback(OAIHttpRequestWorker *worker);
    void destiny2_SearchDestinyEntitiesCallback(OAIHttpRequestWorker *worker);
    void destiny2_SearchDestinyPlayerByBungieNameCallback(OAIHttpRequestWorker *worker);
    void destiny2_SetItemLockStateCallback(OAIHttpRequestWorker *worker);
    void destiny2_SetQuestTrackedStateCallback(OAIHttpRequestWorker *worker);
    void destiny2_SnapshotLoadoutCallback(OAIHttpRequestWorker *worker);
    void destiny2_TransferItemCallback(OAIHttpRequestWorker *worker);
    void destiny2_UpdateLoadoutIdentifiersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void destiny2_AwaGetActionTokenSignal(OAIDestiny2_AwaGetActionToken_200_response summary);
    void destiny2_AwaInitializeRequestSignal(OAIDestiny2_AwaInitializeRequest_200_response summary);
    void destiny2_AwaProvideAuthorizationResultSignal(OAIDestiny2_EquipItem_200_response summary);
    void destiny2_ClearLoadoutSignal(OAIDestiny2_EquipItem_200_response summary);
    void destiny2_EquipItemSignal(OAIDestiny2_EquipItem_200_response summary);
    void destiny2_EquipItemsSignal(OAIDestiny2_EquipItems_200_response summary);
    void destiny2_EquipLoadoutSignal(OAIDestiny2_EquipItem_200_response summary);
    void destiny2_GetActivityHistorySignal(OAIDestiny2_GetActivityHistory_200_response summary);
    void destiny2_GetCharacterSignal(OAIDestiny2_GetCharacter_200_response summary);
    void destiny2_GetClanAggregateStatsSignal(OAIDestiny2_GetClanAggregateStats_200_response summary);
    void destiny2_GetClanBannerSourceSignal(OAIDestiny2_GetClanBannerSource_200_response summary);
    void destiny2_GetClanLeaderboardsSignal(OAIDestiny2_GetClanLeaderboards_200_response summary);
    void destiny2_GetClanWeeklyRewardStateSignal(OAIDestiny2_GetClanWeeklyRewardState_200_response summary);
    void destiny2_GetCollectibleNodeDetailsSignal(OAIDestiny2_GetCollectibleNodeDetails_200_response summary);
    void destiny2_GetDestinyAggregateActivityStatsSignal(OAIDestiny2_GetDestinyAggregateActivityStats_200_response summary);
    void destiny2_GetDestinyEntityDefinitionSignal(OAIDestiny2_GetDestinyEntityDefinition_200_response summary);
    void destiny2_GetDestinyManifestSignal(OAIDestiny2_GetDestinyManifest_200_response summary);
    void destiny2_GetHistoricalStatsSignal(OAIDestiny2_GetHistoricalStats_200_response summary);
    void destiny2_GetHistoricalStatsDefinitionSignal(OAIDestiny2_GetHistoricalStatsDefinition_200_response summary);
    void destiny2_GetHistoricalStatsForAccountSignal(OAIDestiny2_GetHistoricalStatsForAccount_200_response summary);
    void destiny2_GetItemSignal(OAIDestiny2_GetItem_200_response summary);
    void destiny2_GetLeaderboardsSignal(OAIDestiny2_GetClanLeaderboards_200_response summary);
    void destiny2_GetLeaderboardsForCharacterSignal(OAIDestiny2_GetClanLeaderboards_200_response summary);
    void destiny2_GetLinkedProfilesSignal(OAIDestiny2_GetLinkedProfiles_200_response summary);
    void destiny2_GetPostGameCarnageReportSignal(OAIDestiny2_GetPostGameCarnageReport_200_response summary);
    void destiny2_GetProfileSignal(OAIDestiny2_GetProfile_200_response summary);
    void destiny2_GetPublicMilestoneContentSignal(OAIDestiny2_GetPublicMilestoneContent_200_response summary);
    void destiny2_GetPublicMilestonesSignal(OAIDestiny2_GetPublicMilestones_200_response summary);
    void destiny2_GetPublicVendorsSignal(OAIDestiny2_GetPublicVendors_200_response summary);
    void destiny2_GetUniqueWeaponHistorySignal(OAIDestiny2_GetUniqueWeaponHistory_200_response summary);
    void destiny2_GetVendorSignal(OAIDestiny2_GetVendor_200_response summary);
    void destiny2_GetVendorsSignal(OAIDestiny2_GetVendors_200_response summary);
    void destiny2_InsertSocketPlugSignal(OAIDestiny2_InsertSocketPlug_200_response summary);
    void destiny2_InsertSocketPlugFreeSignal(OAIDestiny2_InsertSocketPlug_200_response summary);
    void destiny2_PullFromPostmasterSignal(OAIDestiny2_EquipItem_200_response summary);
    void destiny2_ReportOffensivePostGameCarnageReportPlayerSignal(OAIDestiny2_EquipItem_200_response summary);
    void destiny2_SearchDestinyEntitiesSignal(OAIDestiny2_SearchDestinyEntities_200_response summary);
    void destiny2_SearchDestinyPlayerByBungieNameSignal(OAIDestiny2_SearchDestinyPlayerByBungieName_200_response summary);
    void destiny2_SetItemLockStateSignal(OAIDestiny2_EquipItem_200_response summary);
    void destiny2_SetQuestTrackedStateSignal(OAIDestiny2_EquipItem_200_response summary);
    void destiny2_SnapshotLoadoutSignal(OAIDestiny2_EquipItem_200_response summary);
    void destiny2_TransferItemSignal(OAIDestiny2_EquipItem_200_response summary);
    void destiny2_UpdateLoadoutIdentifiersSignal(OAIDestiny2_EquipItem_200_response summary);


    void destiny2_AwaGetActionTokenSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_AwaGetActionToken_200_response summary);
    void destiny2_AwaInitializeRequestSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_AwaInitializeRequest_200_response summary);
    void destiny2_AwaProvideAuthorizationResultSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_EquipItem_200_response summary);
    void destiny2_ClearLoadoutSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_EquipItem_200_response summary);
    void destiny2_EquipItemSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_EquipItem_200_response summary);
    void destiny2_EquipItemsSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_EquipItems_200_response summary);
    void destiny2_EquipLoadoutSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_EquipItem_200_response summary);
    void destiny2_GetActivityHistorySignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetActivityHistory_200_response summary);
    void destiny2_GetCharacterSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetCharacter_200_response summary);
    void destiny2_GetClanAggregateStatsSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetClanAggregateStats_200_response summary);
    void destiny2_GetClanBannerSourceSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetClanBannerSource_200_response summary);
    void destiny2_GetClanLeaderboardsSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetClanLeaderboards_200_response summary);
    void destiny2_GetClanWeeklyRewardStateSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetClanWeeklyRewardState_200_response summary);
    void destiny2_GetCollectibleNodeDetailsSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetCollectibleNodeDetails_200_response summary);
    void destiny2_GetDestinyAggregateActivityStatsSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetDestinyAggregateActivityStats_200_response summary);
    void destiny2_GetDestinyEntityDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetDestinyEntityDefinition_200_response summary);
    void destiny2_GetDestinyManifestSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetDestinyManifest_200_response summary);
    void destiny2_GetHistoricalStatsSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetHistoricalStats_200_response summary);
    void destiny2_GetHistoricalStatsDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetHistoricalStatsDefinition_200_response summary);
    void destiny2_GetHistoricalStatsForAccountSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetHistoricalStatsForAccount_200_response summary);
    void destiny2_GetItemSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetItem_200_response summary);
    void destiny2_GetLeaderboardsSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetClanLeaderboards_200_response summary);
    void destiny2_GetLeaderboardsForCharacterSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetClanLeaderboards_200_response summary);
    void destiny2_GetLinkedProfilesSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetLinkedProfiles_200_response summary);
    void destiny2_GetPostGameCarnageReportSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetPostGameCarnageReport_200_response summary);
    void destiny2_GetProfileSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetProfile_200_response summary);
    void destiny2_GetPublicMilestoneContentSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetPublicMilestoneContent_200_response summary);
    void destiny2_GetPublicMilestonesSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetPublicMilestones_200_response summary);
    void destiny2_GetPublicVendorsSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetPublicVendors_200_response summary);
    void destiny2_GetUniqueWeaponHistorySignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetUniqueWeaponHistory_200_response summary);
    void destiny2_GetVendorSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetVendor_200_response summary);
    void destiny2_GetVendorsSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_GetVendors_200_response summary);
    void destiny2_InsertSocketPlugSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_InsertSocketPlug_200_response summary);
    void destiny2_InsertSocketPlugFreeSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_InsertSocketPlug_200_response summary);
    void destiny2_PullFromPostmasterSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_EquipItem_200_response summary);
    void destiny2_ReportOffensivePostGameCarnageReportPlayerSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_EquipItem_200_response summary);
    void destiny2_SearchDestinyEntitiesSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_SearchDestinyEntities_200_response summary);
    void destiny2_SearchDestinyPlayerByBungieNameSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_SearchDestinyPlayerByBungieName_200_response summary);
    void destiny2_SetItemLockStateSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_EquipItem_200_response summary);
    void destiny2_SetQuestTrackedStateSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_EquipItem_200_response summary);
    void destiny2_SnapshotLoadoutSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_EquipItem_200_response summary);
    void destiny2_TransferItemSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_EquipItem_200_response summary);
    void destiny2_UpdateLoadoutIdentifiersSignalFull(OAIHttpRequestWorker *worker, OAIDestiny2_EquipItem_200_response summary);

    Q_DECL_DEPRECATED_X("Use destiny2_AwaGetActionTokenSignalError() instead")
    void destiny2_AwaGetActionTokenSignalE(OAIDestiny2_AwaGetActionToken_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_AwaGetActionTokenSignalError(OAIDestiny2_AwaGetActionToken_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_AwaInitializeRequestSignalError() instead")
    void destiny2_AwaInitializeRequestSignalE(OAIDestiny2_AwaInitializeRequest_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_AwaInitializeRequestSignalError(OAIDestiny2_AwaInitializeRequest_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_AwaProvideAuthorizationResultSignalError() instead")
    void destiny2_AwaProvideAuthorizationResultSignalE(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_AwaProvideAuthorizationResultSignalError(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_ClearLoadoutSignalError() instead")
    void destiny2_ClearLoadoutSignalE(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_ClearLoadoutSignalError(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_EquipItemSignalError() instead")
    void destiny2_EquipItemSignalE(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_EquipItemSignalError(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_EquipItemsSignalError() instead")
    void destiny2_EquipItemsSignalE(OAIDestiny2_EquipItems_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_EquipItemsSignalError(OAIDestiny2_EquipItems_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_EquipLoadoutSignalError() instead")
    void destiny2_EquipLoadoutSignalE(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_EquipLoadoutSignalError(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetActivityHistorySignalError() instead")
    void destiny2_GetActivityHistorySignalE(OAIDestiny2_GetActivityHistory_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetActivityHistorySignalError(OAIDestiny2_GetActivityHistory_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetCharacterSignalError() instead")
    void destiny2_GetCharacterSignalE(OAIDestiny2_GetCharacter_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetCharacterSignalError(OAIDestiny2_GetCharacter_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetClanAggregateStatsSignalError() instead")
    void destiny2_GetClanAggregateStatsSignalE(OAIDestiny2_GetClanAggregateStats_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetClanAggregateStatsSignalError(OAIDestiny2_GetClanAggregateStats_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetClanBannerSourceSignalError() instead")
    void destiny2_GetClanBannerSourceSignalE(OAIDestiny2_GetClanBannerSource_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetClanBannerSourceSignalError(OAIDestiny2_GetClanBannerSource_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetClanLeaderboardsSignalError() instead")
    void destiny2_GetClanLeaderboardsSignalE(OAIDestiny2_GetClanLeaderboards_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetClanLeaderboardsSignalError(OAIDestiny2_GetClanLeaderboards_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetClanWeeklyRewardStateSignalError() instead")
    void destiny2_GetClanWeeklyRewardStateSignalE(OAIDestiny2_GetClanWeeklyRewardState_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetClanWeeklyRewardStateSignalError(OAIDestiny2_GetClanWeeklyRewardState_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetCollectibleNodeDetailsSignalError() instead")
    void destiny2_GetCollectibleNodeDetailsSignalE(OAIDestiny2_GetCollectibleNodeDetails_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetCollectibleNodeDetailsSignalError(OAIDestiny2_GetCollectibleNodeDetails_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetDestinyAggregateActivityStatsSignalError() instead")
    void destiny2_GetDestinyAggregateActivityStatsSignalE(OAIDestiny2_GetDestinyAggregateActivityStats_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetDestinyAggregateActivityStatsSignalError(OAIDestiny2_GetDestinyAggregateActivityStats_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetDestinyEntityDefinitionSignalError() instead")
    void destiny2_GetDestinyEntityDefinitionSignalE(OAIDestiny2_GetDestinyEntityDefinition_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetDestinyEntityDefinitionSignalError(OAIDestiny2_GetDestinyEntityDefinition_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetDestinyManifestSignalError() instead")
    void destiny2_GetDestinyManifestSignalE(OAIDestiny2_GetDestinyManifest_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetDestinyManifestSignalError(OAIDestiny2_GetDestinyManifest_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetHistoricalStatsSignalError() instead")
    void destiny2_GetHistoricalStatsSignalE(OAIDestiny2_GetHistoricalStats_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetHistoricalStatsSignalError(OAIDestiny2_GetHistoricalStats_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetHistoricalStatsDefinitionSignalError() instead")
    void destiny2_GetHistoricalStatsDefinitionSignalE(OAIDestiny2_GetHistoricalStatsDefinition_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetHistoricalStatsDefinitionSignalError(OAIDestiny2_GetHistoricalStatsDefinition_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetHistoricalStatsForAccountSignalError() instead")
    void destiny2_GetHistoricalStatsForAccountSignalE(OAIDestiny2_GetHistoricalStatsForAccount_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetHistoricalStatsForAccountSignalError(OAIDestiny2_GetHistoricalStatsForAccount_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetItemSignalError() instead")
    void destiny2_GetItemSignalE(OAIDestiny2_GetItem_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetItemSignalError(OAIDestiny2_GetItem_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetLeaderboardsSignalError() instead")
    void destiny2_GetLeaderboardsSignalE(OAIDestiny2_GetClanLeaderboards_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetLeaderboardsSignalError(OAIDestiny2_GetClanLeaderboards_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetLeaderboardsForCharacterSignalError() instead")
    void destiny2_GetLeaderboardsForCharacterSignalE(OAIDestiny2_GetClanLeaderboards_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetLeaderboardsForCharacterSignalError(OAIDestiny2_GetClanLeaderboards_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetLinkedProfilesSignalError() instead")
    void destiny2_GetLinkedProfilesSignalE(OAIDestiny2_GetLinkedProfiles_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetLinkedProfilesSignalError(OAIDestiny2_GetLinkedProfiles_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetPostGameCarnageReportSignalError() instead")
    void destiny2_GetPostGameCarnageReportSignalE(OAIDestiny2_GetPostGameCarnageReport_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetPostGameCarnageReportSignalError(OAIDestiny2_GetPostGameCarnageReport_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetProfileSignalError() instead")
    void destiny2_GetProfileSignalE(OAIDestiny2_GetProfile_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetProfileSignalError(OAIDestiny2_GetProfile_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetPublicMilestoneContentSignalError() instead")
    void destiny2_GetPublicMilestoneContentSignalE(OAIDestiny2_GetPublicMilestoneContent_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetPublicMilestoneContentSignalError(OAIDestiny2_GetPublicMilestoneContent_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetPublicMilestonesSignalError() instead")
    void destiny2_GetPublicMilestonesSignalE(OAIDestiny2_GetPublicMilestones_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetPublicMilestonesSignalError(OAIDestiny2_GetPublicMilestones_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetPublicVendorsSignalError() instead")
    void destiny2_GetPublicVendorsSignalE(OAIDestiny2_GetPublicVendors_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetPublicVendorsSignalError(OAIDestiny2_GetPublicVendors_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetUniqueWeaponHistorySignalError() instead")
    void destiny2_GetUniqueWeaponHistorySignalE(OAIDestiny2_GetUniqueWeaponHistory_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetUniqueWeaponHistorySignalError(OAIDestiny2_GetUniqueWeaponHistory_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetVendorSignalError() instead")
    void destiny2_GetVendorSignalE(OAIDestiny2_GetVendor_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetVendorSignalError(OAIDestiny2_GetVendor_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetVendorsSignalError() instead")
    void destiny2_GetVendorsSignalE(OAIDestiny2_GetVendors_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetVendorsSignalError(OAIDestiny2_GetVendors_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_InsertSocketPlugSignalError() instead")
    void destiny2_InsertSocketPlugSignalE(OAIDestiny2_InsertSocketPlug_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_InsertSocketPlugSignalError(OAIDestiny2_InsertSocketPlug_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_InsertSocketPlugFreeSignalError() instead")
    void destiny2_InsertSocketPlugFreeSignalE(OAIDestiny2_InsertSocketPlug_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_InsertSocketPlugFreeSignalError(OAIDestiny2_InsertSocketPlug_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_PullFromPostmasterSignalError() instead")
    void destiny2_PullFromPostmasterSignalE(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_PullFromPostmasterSignalError(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_ReportOffensivePostGameCarnageReportPlayerSignalError() instead")
    void destiny2_ReportOffensivePostGameCarnageReportPlayerSignalE(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_ReportOffensivePostGameCarnageReportPlayerSignalError(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_SearchDestinyEntitiesSignalError() instead")
    void destiny2_SearchDestinyEntitiesSignalE(OAIDestiny2_SearchDestinyEntities_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_SearchDestinyEntitiesSignalError(OAIDestiny2_SearchDestinyEntities_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_SearchDestinyPlayerByBungieNameSignalError() instead")
    void destiny2_SearchDestinyPlayerByBungieNameSignalE(OAIDestiny2_SearchDestinyPlayerByBungieName_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_SearchDestinyPlayerByBungieNameSignalError(OAIDestiny2_SearchDestinyPlayerByBungieName_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_SetItemLockStateSignalError() instead")
    void destiny2_SetItemLockStateSignalE(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_SetItemLockStateSignalError(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_SetQuestTrackedStateSignalError() instead")
    void destiny2_SetQuestTrackedStateSignalE(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_SetQuestTrackedStateSignalError(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_SnapshotLoadoutSignalError() instead")
    void destiny2_SnapshotLoadoutSignalE(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_SnapshotLoadoutSignalError(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_TransferItemSignalError() instead")
    void destiny2_TransferItemSignalE(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_TransferItemSignalError(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_UpdateLoadoutIdentifiersSignalError() instead")
    void destiny2_UpdateLoadoutIdentifiersSignalE(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_UpdateLoadoutIdentifiersSignalError(OAIDestiny2_EquipItem_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use destiny2_AwaGetActionTokenSignalErrorFull() instead")
    void destiny2_AwaGetActionTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_AwaGetActionTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_AwaInitializeRequestSignalErrorFull() instead")
    void destiny2_AwaInitializeRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_AwaInitializeRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_AwaProvideAuthorizationResultSignalErrorFull() instead")
    void destiny2_AwaProvideAuthorizationResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_AwaProvideAuthorizationResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_ClearLoadoutSignalErrorFull() instead")
    void destiny2_ClearLoadoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_ClearLoadoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_EquipItemSignalErrorFull() instead")
    void destiny2_EquipItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_EquipItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_EquipItemsSignalErrorFull() instead")
    void destiny2_EquipItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_EquipItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_EquipLoadoutSignalErrorFull() instead")
    void destiny2_EquipLoadoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_EquipLoadoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetActivityHistorySignalErrorFull() instead")
    void destiny2_GetActivityHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetActivityHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetCharacterSignalErrorFull() instead")
    void destiny2_GetCharacterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetCharacterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetClanAggregateStatsSignalErrorFull() instead")
    void destiny2_GetClanAggregateStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetClanAggregateStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetClanBannerSourceSignalErrorFull() instead")
    void destiny2_GetClanBannerSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetClanBannerSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetClanLeaderboardsSignalErrorFull() instead")
    void destiny2_GetClanLeaderboardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetClanLeaderboardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetClanWeeklyRewardStateSignalErrorFull() instead")
    void destiny2_GetClanWeeklyRewardStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetClanWeeklyRewardStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetCollectibleNodeDetailsSignalErrorFull() instead")
    void destiny2_GetCollectibleNodeDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetCollectibleNodeDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetDestinyAggregateActivityStatsSignalErrorFull() instead")
    void destiny2_GetDestinyAggregateActivityStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetDestinyAggregateActivityStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetDestinyEntityDefinitionSignalErrorFull() instead")
    void destiny2_GetDestinyEntityDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetDestinyEntityDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetDestinyManifestSignalErrorFull() instead")
    void destiny2_GetDestinyManifestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetDestinyManifestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetHistoricalStatsSignalErrorFull() instead")
    void destiny2_GetHistoricalStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetHistoricalStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetHistoricalStatsDefinitionSignalErrorFull() instead")
    void destiny2_GetHistoricalStatsDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetHistoricalStatsDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetHistoricalStatsForAccountSignalErrorFull() instead")
    void destiny2_GetHistoricalStatsForAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetHistoricalStatsForAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetItemSignalErrorFull() instead")
    void destiny2_GetItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetLeaderboardsSignalErrorFull() instead")
    void destiny2_GetLeaderboardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetLeaderboardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetLeaderboardsForCharacterSignalErrorFull() instead")
    void destiny2_GetLeaderboardsForCharacterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetLeaderboardsForCharacterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetLinkedProfilesSignalErrorFull() instead")
    void destiny2_GetLinkedProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetLinkedProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetPostGameCarnageReportSignalErrorFull() instead")
    void destiny2_GetPostGameCarnageReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetPostGameCarnageReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetProfileSignalErrorFull() instead")
    void destiny2_GetProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetPublicMilestoneContentSignalErrorFull() instead")
    void destiny2_GetPublicMilestoneContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetPublicMilestoneContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetPublicMilestonesSignalErrorFull() instead")
    void destiny2_GetPublicMilestonesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetPublicMilestonesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetPublicVendorsSignalErrorFull() instead")
    void destiny2_GetPublicVendorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetPublicVendorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetUniqueWeaponHistorySignalErrorFull() instead")
    void destiny2_GetUniqueWeaponHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetUniqueWeaponHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetVendorSignalErrorFull() instead")
    void destiny2_GetVendorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetVendorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_GetVendorsSignalErrorFull() instead")
    void destiny2_GetVendorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_GetVendorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_InsertSocketPlugSignalErrorFull() instead")
    void destiny2_InsertSocketPlugSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_InsertSocketPlugSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_InsertSocketPlugFreeSignalErrorFull() instead")
    void destiny2_InsertSocketPlugFreeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_InsertSocketPlugFreeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_PullFromPostmasterSignalErrorFull() instead")
    void destiny2_PullFromPostmasterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_PullFromPostmasterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_ReportOffensivePostGameCarnageReportPlayerSignalErrorFull() instead")
    void destiny2_ReportOffensivePostGameCarnageReportPlayerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_ReportOffensivePostGameCarnageReportPlayerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_SearchDestinyEntitiesSignalErrorFull() instead")
    void destiny2_SearchDestinyEntitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_SearchDestinyEntitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_SearchDestinyPlayerByBungieNameSignalErrorFull() instead")
    void destiny2_SearchDestinyPlayerByBungieNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_SearchDestinyPlayerByBungieNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_SetItemLockStateSignalErrorFull() instead")
    void destiny2_SetItemLockStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_SetItemLockStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_SetQuestTrackedStateSignalErrorFull() instead")
    void destiny2_SetQuestTrackedStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_SetQuestTrackedStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_SnapshotLoadoutSignalErrorFull() instead")
    void destiny2_SnapshotLoadoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_SnapshotLoadoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_TransferItemSignalErrorFull() instead")
    void destiny2_TransferItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_TransferItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destiny2_UpdateLoadoutIdentifiersSignalErrorFull() instead")
    void destiny2_UpdateLoadoutIdentifiersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destiny2_UpdateLoadoutIdentifiersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
