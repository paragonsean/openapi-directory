/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyProgressionDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyProgressionDefinition::OAIDestiny_Definitions_DestinyProgressionDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyProgressionDefinition::OAIDestiny_Definitions_DestinyProgressionDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyProgressionDefinition::~OAIDestiny_Definitions_DestinyProgressionDefinition() {}

void OAIDestiny_Definitions_DestinyProgressionDefinition::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_faction_hash_isSet = false;
    m_faction_hash_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_rank_icon_isSet = false;
    m_rank_icon_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;

    m_repeat_last_step_isSet = false;
    m_repeat_last_step_isValid = false;

    m_reward_items_isSet = false;
    m_reward_items_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_steps_isSet = false;
    m_steps_isValid = false;

    m_visible_isSet = false;
    m_visible_isValid = false;
}

void OAIDestiny_Definitions_DestinyProgressionDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyProgressionDefinition::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_faction_hash_isValid = ::OpenAPI::fromJsonValue(m_faction_hash, json[QString("factionHash")]);
    m_faction_hash_isSet = !json[QString("factionHash")].isNull() && m_faction_hash_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_rank_icon_isValid = ::OpenAPI::fromJsonValue(m_rank_icon, json[QString("rankIcon")]);
    m_rank_icon_isSet = !json[QString("rankIcon")].isNull() && m_rank_icon_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;

    m_repeat_last_step_isValid = ::OpenAPI::fromJsonValue(m_repeat_last_step, json[QString("repeatLastStep")]);
    m_repeat_last_step_isSet = !json[QString("repeatLastStep")].isNull() && m_repeat_last_step_isValid;

    m_reward_items_isValid = ::OpenAPI::fromJsonValue(m_reward_items, json[QString("rewardItems")]);
    m_reward_items_isSet = !json[QString("rewardItems")].isNull() && m_reward_items_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_steps_isValid = ::OpenAPI::fromJsonValue(m_steps, json[QString("steps")]);
    m_steps_isSet = !json[QString("steps")].isNull() && m_steps_isValid;

    m_visible_isValid = ::OpenAPI::fromJsonValue(m_visible, json[QString("visible")]);
    m_visible_isSet = !json[QString("visible")].isNull() && m_visible_isValid;
}

QString OAIDestiny_Definitions_DestinyProgressionDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyProgressionDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_color.isSet()) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_faction_hash_isSet) {
        obj.insert(QString("factionHash"), ::OpenAPI::toJsonValue(m_faction_hash));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_rank_icon_isSet) {
        obj.insert(QString("rankIcon"), ::OpenAPI::toJsonValue(m_rank_icon));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    if (m_repeat_last_step_isSet) {
        obj.insert(QString("repeatLastStep"), ::OpenAPI::toJsonValue(m_repeat_last_step));
    }
    if (m_reward_items.size() > 0) {
        obj.insert(QString("rewardItems"), ::OpenAPI::toJsonValue(m_reward_items));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_steps.size() > 0) {
        obj.insert(QString("steps"), ::OpenAPI::toJsonValue(m_steps));
    }
    if (m_visible_isSet) {
        obj.insert(QString("visible"), ::OpenAPI::toJsonValue(m_visible));
    }
    return obj;
}

OAIDestiny_Misc_DestinyColor OAIDestiny_Definitions_DestinyProgressionDefinition::getColor() const {
    return m_color;
}
void OAIDestiny_Definitions_DestinyProgressionDefinition::setColor(const OAIDestiny_Misc_DestinyColor &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_color_Set() const{
    return m_color_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_color_Valid() const{
    return m_color_isValid;
}

OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition OAIDestiny_Definitions_DestinyProgressionDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_DestinyProgressionDefinition::setDisplayProperties(const OAIDestiny_Definitions_DestinyProgressionDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

qint32 OAIDestiny_Definitions_DestinyProgressionDefinition::getFactionHash() const {
    return m_faction_hash;
}
void OAIDestiny_Definitions_DestinyProgressionDefinition::setFactionHash(const qint32 &faction_hash) {
    m_faction_hash = faction_hash;
    m_faction_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_faction_hash_Set() const{
    return m_faction_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_faction_hash_Valid() const{
    return m_faction_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyProgressionDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_DestinyProgressionDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyProgressionDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_DestinyProgressionDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_index_Valid() const{
    return m_index_isValid;
}

QString OAIDestiny_Definitions_DestinyProgressionDefinition::getRankIcon() const {
    return m_rank_icon;
}
void OAIDestiny_Definitions_DestinyProgressionDefinition::setRankIcon(const QString &rank_icon) {
    m_rank_icon = rank_icon;
    m_rank_icon_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_rank_icon_Set() const{
    return m_rank_icon_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_rank_icon_Valid() const{
    return m_rank_icon_isValid;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_DestinyProgressionDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::isRepeatLastStep() const {
    return m_repeat_last_step;
}
void OAIDestiny_Definitions_DestinyProgressionDefinition::setRepeatLastStep(const bool &repeat_last_step) {
    m_repeat_last_step = repeat_last_step;
    m_repeat_last_step_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_repeat_last_step_Set() const{
    return m_repeat_last_step_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_repeat_last_step_Valid() const{
    return m_repeat_last_step_isValid;
}

QList<OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity> OAIDestiny_Definitions_DestinyProgressionDefinition::getRewardItems() const {
    return m_reward_items;
}
void OAIDestiny_Definitions_DestinyProgressionDefinition::setRewardItems(const QList<OAIDestiny_Definitions_DestinyProgressionRewardItemQuantity> &reward_items) {
    m_reward_items = reward_items;
    m_reward_items_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_reward_items_Set() const{
    return m_reward_items_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_reward_items_Valid() const{
    return m_reward_items_isValid;
}

qint32 OAIDestiny_Definitions_DestinyProgressionDefinition::getScope() const {
    return m_scope;
}
void OAIDestiny_Definitions_DestinyProgressionDefinition::setScope(const qint32 &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAIDestiny_Definitions_DestinyProgressionDefinition::getSource() const {
    return m_source;
}
void OAIDestiny_Definitions_DestinyProgressionDefinition::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_source_Set() const{
    return m_source_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_source_Valid() const{
    return m_source_isValid;
}

QList<OAIDestiny_Definitions_DestinyProgressionStepDefinition> OAIDestiny_Definitions_DestinyProgressionDefinition::getSteps() const {
    return m_steps;
}
void OAIDestiny_Definitions_DestinyProgressionDefinition::setSteps(const QList<OAIDestiny_Definitions_DestinyProgressionStepDefinition> &steps) {
    m_steps = steps;
    m_steps_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_steps_Set() const{
    return m_steps_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_steps_Valid() const{
    return m_steps_isValid;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::isVisible() const {
    return m_visible;
}
void OAIDestiny_Definitions_DestinyProgressionDefinition::setVisible(const bool &visible) {
    m_visible = visible;
    m_visible_isSet = true;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_visible_Set() const{
    return m_visible_isSet;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::is_visible_Valid() const{
    return m_visible_isValid;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_faction_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat_last_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyProgressionDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
