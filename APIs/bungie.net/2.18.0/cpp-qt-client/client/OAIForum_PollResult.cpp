/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForum_PollResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForum_PollResult::OAIForum_PollResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForum_PollResult::OAIForum_PollResult() {
    this->initializeModel();
}

OAIForum_PollResult::~OAIForum_PollResult() {}

void OAIForum_PollResult::initializeModel() {

    m_answer_slot_isSet = false;
    m_answer_slot_isValid = false;

    m_answer_text_isSet = false;
    m_answer_text_isValid = false;

    m_last_vote_date_isSet = false;
    m_last_vote_date_isValid = false;

    m_requesting_user_voted_isSet = false;
    m_requesting_user_voted_isValid = false;

    m_votes_isSet = false;
    m_votes_isValid = false;
}

void OAIForum_PollResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForum_PollResult::fromJsonObject(QJsonObject json) {

    m_answer_slot_isValid = ::OpenAPI::fromJsonValue(m_answer_slot, json[QString("answerSlot")]);
    m_answer_slot_isSet = !json[QString("answerSlot")].isNull() && m_answer_slot_isValid;

    m_answer_text_isValid = ::OpenAPI::fromJsonValue(m_answer_text, json[QString("answerText")]);
    m_answer_text_isSet = !json[QString("answerText")].isNull() && m_answer_text_isValid;

    m_last_vote_date_isValid = ::OpenAPI::fromJsonValue(m_last_vote_date, json[QString("lastVoteDate")]);
    m_last_vote_date_isSet = !json[QString("lastVoteDate")].isNull() && m_last_vote_date_isValid;

    m_requesting_user_voted_isValid = ::OpenAPI::fromJsonValue(m_requesting_user_voted, json[QString("requestingUserVoted")]);
    m_requesting_user_voted_isSet = !json[QString("requestingUserVoted")].isNull() && m_requesting_user_voted_isValid;

    m_votes_isValid = ::OpenAPI::fromJsonValue(m_votes, json[QString("votes")]);
    m_votes_isSet = !json[QString("votes")].isNull() && m_votes_isValid;
}

QString OAIForum_PollResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForum_PollResult::asJsonObject() const {
    QJsonObject obj;
    if (m_answer_slot_isSet) {
        obj.insert(QString("answerSlot"), ::OpenAPI::toJsonValue(m_answer_slot));
    }
    if (m_answer_text_isSet) {
        obj.insert(QString("answerText"), ::OpenAPI::toJsonValue(m_answer_text));
    }
    if (m_last_vote_date_isSet) {
        obj.insert(QString("lastVoteDate"), ::OpenAPI::toJsonValue(m_last_vote_date));
    }
    if (m_requesting_user_voted_isSet) {
        obj.insert(QString("requestingUserVoted"), ::OpenAPI::toJsonValue(m_requesting_user_voted));
    }
    if (m_votes_isSet) {
        obj.insert(QString("votes"), ::OpenAPI::toJsonValue(m_votes));
    }
    return obj;
}

qint32 OAIForum_PollResult::getAnswerSlot() const {
    return m_answer_slot;
}
void OAIForum_PollResult::setAnswerSlot(const qint32 &answer_slot) {
    m_answer_slot = answer_slot;
    m_answer_slot_isSet = true;
}

bool OAIForum_PollResult::is_answer_slot_Set() const{
    return m_answer_slot_isSet;
}

bool OAIForum_PollResult::is_answer_slot_Valid() const{
    return m_answer_slot_isValid;
}

QString OAIForum_PollResult::getAnswerText() const {
    return m_answer_text;
}
void OAIForum_PollResult::setAnswerText(const QString &answer_text) {
    m_answer_text = answer_text;
    m_answer_text_isSet = true;
}

bool OAIForum_PollResult::is_answer_text_Set() const{
    return m_answer_text_isSet;
}

bool OAIForum_PollResult::is_answer_text_Valid() const{
    return m_answer_text_isValid;
}

QDateTime OAIForum_PollResult::getLastVoteDate() const {
    return m_last_vote_date;
}
void OAIForum_PollResult::setLastVoteDate(const QDateTime &last_vote_date) {
    m_last_vote_date = last_vote_date;
    m_last_vote_date_isSet = true;
}

bool OAIForum_PollResult::is_last_vote_date_Set() const{
    return m_last_vote_date_isSet;
}

bool OAIForum_PollResult::is_last_vote_date_Valid() const{
    return m_last_vote_date_isValid;
}

bool OAIForum_PollResult::isRequestingUserVoted() const {
    return m_requesting_user_voted;
}
void OAIForum_PollResult::setRequestingUserVoted(const bool &requesting_user_voted) {
    m_requesting_user_voted = requesting_user_voted;
    m_requesting_user_voted_isSet = true;
}

bool OAIForum_PollResult::is_requesting_user_voted_Set() const{
    return m_requesting_user_voted_isSet;
}

bool OAIForum_PollResult::is_requesting_user_voted_Valid() const{
    return m_requesting_user_voted_isValid;
}

qint32 OAIForum_PollResult::getVotes() const {
    return m_votes;
}
void OAIForum_PollResult::setVotes(const qint32 &votes) {
    m_votes = votes;
    m_votes_isSet = true;
}

bool OAIForum_PollResult::is_votes_Set() const{
    return m_votes_isSet;
}

bool OAIForum_PollResult::is_votes_Valid() const{
    return m_votes_isValid;
}

bool OAIForum_PollResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answer_slot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answer_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_vote_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requesting_user_voted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_votes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForum_PollResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
