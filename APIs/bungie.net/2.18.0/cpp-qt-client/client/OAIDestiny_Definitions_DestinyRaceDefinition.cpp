/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyRaceDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyRaceDefinition::OAIDestiny_Definitions_DestinyRaceDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyRaceDefinition::OAIDestiny_Definitions_DestinyRaceDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyRaceDefinition::~OAIDestiny_Definitions_DestinyRaceDefinition() {}

void OAIDestiny_Definitions_DestinyRaceDefinition::initializeModel() {

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_gendered_race_names_isSet = false;
    m_gendered_race_names_isValid = false;

    m_gendered_race_names_by_gender_hash_isSet = false;
    m_gendered_race_names_by_gender_hash_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_race_type_isSet = false;
    m_race_type_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;
}

void OAIDestiny_Definitions_DestinyRaceDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyRaceDefinition::fromJsonObject(QJsonObject json) {

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_gendered_race_names_isValid = ::OpenAPI::fromJsonValue(m_gendered_race_names, json[QString("genderedRaceNames")]);
    m_gendered_race_names_isSet = !json[QString("genderedRaceNames")].isNull() && m_gendered_race_names_isValid;

    m_gendered_race_names_by_gender_hash_isValid = ::OpenAPI::fromJsonValue(m_gendered_race_names_by_gender_hash, json[QString("genderedRaceNamesByGenderHash")]);
    m_gendered_race_names_by_gender_hash_isSet = !json[QString("genderedRaceNamesByGenderHash")].isNull() && m_gendered_race_names_by_gender_hash_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_race_type_isValid = ::OpenAPI::fromJsonValue(m_race_type, json[QString("raceType")]);
    m_race_type_isSet = !json[QString("raceType")].isNull() && m_race_type_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;
}

QString OAIDestiny_Definitions_DestinyRaceDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyRaceDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_gendered_race_names.size() > 0) {
        obj.insert(QString("genderedRaceNames"), ::OpenAPI::toJsonValue(m_gendered_race_names));
    }
    if (m_gendered_race_names_by_gender_hash.size() > 0) {
        obj.insert(QString("genderedRaceNamesByGenderHash"), ::OpenAPI::toJsonValue(m_gendered_race_names_by_gender_hash));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_race_type_isSet) {
        obj.insert(QString("raceType"), ::OpenAPI::toJsonValue(m_race_type));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    return obj;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_DestinyRaceDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_DestinyRaceDefinition::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_DestinyRaceDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_DestinyRaceDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

QMap<QString, QString> OAIDestiny_Definitions_DestinyRaceDefinition::getGenderedRaceNames() const {
    return m_gendered_race_names;
}
void OAIDestiny_Definitions_DestinyRaceDefinition::setGenderedRaceNames(const QMap<QString, QString> &gendered_race_names) {
    m_gendered_race_names = gendered_race_names;
    m_gendered_race_names_isSet = true;
}

bool OAIDestiny_Definitions_DestinyRaceDefinition::is_gendered_race_names_Set() const{
    return m_gendered_race_names_isSet;
}

bool OAIDestiny_Definitions_DestinyRaceDefinition::is_gendered_race_names_Valid() const{
    return m_gendered_race_names_isValid;
}

QMap<QString, QString> OAIDestiny_Definitions_DestinyRaceDefinition::getGenderedRaceNamesByGenderHash() const {
    return m_gendered_race_names_by_gender_hash;
}
void OAIDestiny_Definitions_DestinyRaceDefinition::setGenderedRaceNamesByGenderHash(const QMap<QString, QString> &gendered_race_names_by_gender_hash) {
    m_gendered_race_names_by_gender_hash = gendered_race_names_by_gender_hash;
    m_gendered_race_names_by_gender_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyRaceDefinition::is_gendered_race_names_by_gender_hash_Set() const{
    return m_gendered_race_names_by_gender_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyRaceDefinition::is_gendered_race_names_by_gender_hash_Valid() const{
    return m_gendered_race_names_by_gender_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyRaceDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_DestinyRaceDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyRaceDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyRaceDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyRaceDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_DestinyRaceDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyRaceDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_DestinyRaceDefinition::is_index_Valid() const{
    return m_index_isValid;
}

qint32 OAIDestiny_Definitions_DestinyRaceDefinition::getRaceType() const {
    return m_race_type;
}
void OAIDestiny_Definitions_DestinyRaceDefinition::setRaceType(const qint32 &race_type) {
    m_race_type = race_type;
    m_race_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyRaceDefinition::is_race_type_Set() const{
    return m_race_type_isSet;
}

bool OAIDestiny_Definitions_DestinyRaceDefinition::is_race_type_Valid() const{
    return m_race_type_isValid;
}

bool OAIDestiny_Definitions_DestinyRaceDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_DestinyRaceDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_DestinyRaceDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_DestinyRaceDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

bool OAIDestiny_Definitions_DestinyRaceDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gendered_race_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gendered_race_names_by_gender_hash.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_race_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyRaceDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
