/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Vendors_DestinyVendorReceipt.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Vendors_DestinyVendorReceipt::OAIDestiny_Vendors_DestinyVendorReceipt(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Vendors_DestinyVendorReceipt::OAIDestiny_Vendors_DestinyVendorReceipt() {
    this->initializeModel();
}

OAIDestiny_Vendors_DestinyVendorReceipt::~OAIDestiny_Vendors_DestinyVendorReceipt() {}

void OAIDestiny_Vendors_DestinyVendorReceipt::initializeModel() {

    m_currency_paid_isSet = false;
    m_currency_paid_isValid = false;

    m_expires_on_isSet = false;
    m_expires_on_isValid = false;

    m_item_received_isSet = false;
    m_item_received_isValid = false;

    m_license_unlock_hash_isSet = false;
    m_license_unlock_hash_isValid = false;

    m_purchased_by_character_id_isSet = false;
    m_purchased_by_character_id_isValid = false;

    m_refund_policy_isSet = false;
    m_refund_policy_isValid = false;

    m_sequence_number_isSet = false;
    m_sequence_number_isValid = false;

    m_time_to_expiration_isSet = false;
    m_time_to_expiration_isValid = false;
}

void OAIDestiny_Vendors_DestinyVendorReceipt::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Vendors_DestinyVendorReceipt::fromJsonObject(QJsonObject json) {

    m_currency_paid_isValid = ::OpenAPI::fromJsonValue(m_currency_paid, json[QString("currencyPaid")]);
    m_currency_paid_isSet = !json[QString("currencyPaid")].isNull() && m_currency_paid_isValid;

    m_expires_on_isValid = ::OpenAPI::fromJsonValue(m_expires_on, json[QString("expiresOn")]);
    m_expires_on_isSet = !json[QString("expiresOn")].isNull() && m_expires_on_isValid;

    m_item_received_isValid = ::OpenAPI::fromJsonValue(m_item_received, json[QString("itemReceived")]);
    m_item_received_isSet = !json[QString("itemReceived")].isNull() && m_item_received_isValid;

    m_license_unlock_hash_isValid = ::OpenAPI::fromJsonValue(m_license_unlock_hash, json[QString("licenseUnlockHash")]);
    m_license_unlock_hash_isSet = !json[QString("licenseUnlockHash")].isNull() && m_license_unlock_hash_isValid;

    m_purchased_by_character_id_isValid = ::OpenAPI::fromJsonValue(m_purchased_by_character_id, json[QString("purchasedByCharacterId")]);
    m_purchased_by_character_id_isSet = !json[QString("purchasedByCharacterId")].isNull() && m_purchased_by_character_id_isValid;

    m_refund_policy_isValid = ::OpenAPI::fromJsonValue(m_refund_policy, json[QString("refundPolicy")]);
    m_refund_policy_isSet = !json[QString("refundPolicy")].isNull() && m_refund_policy_isValid;

    m_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_sequence_number, json[QString("sequenceNumber")]);
    m_sequence_number_isSet = !json[QString("sequenceNumber")].isNull() && m_sequence_number_isValid;

    m_time_to_expiration_isValid = ::OpenAPI::fromJsonValue(m_time_to_expiration, json[QString("timeToExpiration")]);
    m_time_to_expiration_isSet = !json[QString("timeToExpiration")].isNull() && m_time_to_expiration_isValid;
}

QString OAIDestiny_Vendors_DestinyVendorReceipt::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Vendors_DestinyVendorReceipt::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_paid.size() > 0) {
        obj.insert(QString("currencyPaid"), ::OpenAPI::toJsonValue(m_currency_paid));
    }
    if (m_expires_on_isSet) {
        obj.insert(QString("expiresOn"), ::OpenAPI::toJsonValue(m_expires_on));
    }
    if (m_item_received.isSet()) {
        obj.insert(QString("itemReceived"), ::OpenAPI::toJsonValue(m_item_received));
    }
    if (m_license_unlock_hash_isSet) {
        obj.insert(QString("licenseUnlockHash"), ::OpenAPI::toJsonValue(m_license_unlock_hash));
    }
    if (m_purchased_by_character_id_isSet) {
        obj.insert(QString("purchasedByCharacterId"), ::OpenAPI::toJsonValue(m_purchased_by_character_id));
    }
    if (m_refund_policy_isSet) {
        obj.insert(QString("refundPolicy"), ::OpenAPI::toJsonValue(m_refund_policy));
    }
    if (m_sequence_number_isSet) {
        obj.insert(QString("sequenceNumber"), ::OpenAPI::toJsonValue(m_sequence_number));
    }
    if (m_time_to_expiration_isSet) {
        obj.insert(QString("timeToExpiration"), ::OpenAPI::toJsonValue(m_time_to_expiration));
    }
    return obj;
}

QList<OAIDestiny_DestinyItemQuantity> OAIDestiny_Vendors_DestinyVendorReceipt::getCurrencyPaid() const {
    return m_currency_paid;
}
void OAIDestiny_Vendors_DestinyVendorReceipt::setCurrencyPaid(const QList<OAIDestiny_DestinyItemQuantity> &currency_paid) {
    m_currency_paid = currency_paid;
    m_currency_paid_isSet = true;
}

bool OAIDestiny_Vendors_DestinyVendorReceipt::is_currency_paid_Set() const{
    return m_currency_paid_isSet;
}

bool OAIDestiny_Vendors_DestinyVendorReceipt::is_currency_paid_Valid() const{
    return m_currency_paid_isValid;
}

QDateTime OAIDestiny_Vendors_DestinyVendorReceipt::getExpiresOn() const {
    return m_expires_on;
}
void OAIDestiny_Vendors_DestinyVendorReceipt::setExpiresOn(const QDateTime &expires_on) {
    m_expires_on = expires_on;
    m_expires_on_isSet = true;
}

bool OAIDestiny_Vendors_DestinyVendorReceipt::is_expires_on_Set() const{
    return m_expires_on_isSet;
}

bool OAIDestiny_Vendors_DestinyVendorReceipt::is_expires_on_Valid() const{
    return m_expires_on_isValid;
}

OAIDestiny_DestinyItemQuantity OAIDestiny_Vendors_DestinyVendorReceipt::getItemReceived() const {
    return m_item_received;
}
void OAIDestiny_Vendors_DestinyVendorReceipt::setItemReceived(const OAIDestiny_DestinyItemQuantity &item_received) {
    m_item_received = item_received;
    m_item_received_isSet = true;
}

bool OAIDestiny_Vendors_DestinyVendorReceipt::is_item_received_Set() const{
    return m_item_received_isSet;
}

bool OAIDestiny_Vendors_DestinyVendorReceipt::is_item_received_Valid() const{
    return m_item_received_isValid;
}

qint32 OAIDestiny_Vendors_DestinyVendorReceipt::getLicenseUnlockHash() const {
    return m_license_unlock_hash;
}
void OAIDestiny_Vendors_DestinyVendorReceipt::setLicenseUnlockHash(const qint32 &license_unlock_hash) {
    m_license_unlock_hash = license_unlock_hash;
    m_license_unlock_hash_isSet = true;
}

bool OAIDestiny_Vendors_DestinyVendorReceipt::is_license_unlock_hash_Set() const{
    return m_license_unlock_hash_isSet;
}

bool OAIDestiny_Vendors_DestinyVendorReceipt::is_license_unlock_hash_Valid() const{
    return m_license_unlock_hash_isValid;
}

qint64 OAIDestiny_Vendors_DestinyVendorReceipt::getPurchasedByCharacterId() const {
    return m_purchased_by_character_id;
}
void OAIDestiny_Vendors_DestinyVendorReceipt::setPurchasedByCharacterId(const qint64 &purchased_by_character_id) {
    m_purchased_by_character_id = purchased_by_character_id;
    m_purchased_by_character_id_isSet = true;
}

bool OAIDestiny_Vendors_DestinyVendorReceipt::is_purchased_by_character_id_Set() const{
    return m_purchased_by_character_id_isSet;
}

bool OAIDestiny_Vendors_DestinyVendorReceipt::is_purchased_by_character_id_Valid() const{
    return m_purchased_by_character_id_isValid;
}

qint32 OAIDestiny_Vendors_DestinyVendorReceipt::getRefundPolicy() const {
    return m_refund_policy;
}
void OAIDestiny_Vendors_DestinyVendorReceipt::setRefundPolicy(const qint32 &refund_policy) {
    m_refund_policy = refund_policy;
    m_refund_policy_isSet = true;
}

bool OAIDestiny_Vendors_DestinyVendorReceipt::is_refund_policy_Set() const{
    return m_refund_policy_isSet;
}

bool OAIDestiny_Vendors_DestinyVendorReceipt::is_refund_policy_Valid() const{
    return m_refund_policy_isValid;
}

qint32 OAIDestiny_Vendors_DestinyVendorReceipt::getSequenceNumber() const {
    return m_sequence_number;
}
void OAIDestiny_Vendors_DestinyVendorReceipt::setSequenceNumber(const qint32 &sequence_number) {
    m_sequence_number = sequence_number;
    m_sequence_number_isSet = true;
}

bool OAIDestiny_Vendors_DestinyVendorReceipt::is_sequence_number_Set() const{
    return m_sequence_number_isSet;
}

bool OAIDestiny_Vendors_DestinyVendorReceipt::is_sequence_number_Valid() const{
    return m_sequence_number_isValid;
}

qint64 OAIDestiny_Vendors_DestinyVendorReceipt::getTimeToExpiration() const {
    return m_time_to_expiration;
}
void OAIDestiny_Vendors_DestinyVendorReceipt::setTimeToExpiration(const qint64 &time_to_expiration) {
    m_time_to_expiration = time_to_expiration;
    m_time_to_expiration_isSet = true;
}

bool OAIDestiny_Vendors_DestinyVendorReceipt::is_time_to_expiration_Set() const{
    return m_time_to_expiration_isSet;
}

bool OAIDestiny_Vendors_DestinyVendorReceipt::is_time_to_expiration_Valid() const{
    return m_time_to_expiration_isValid;
}

bool OAIDestiny_Vendors_DestinyVendorReceipt::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_paid.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_received.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_unlock_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchased_by_character_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Vendors_DestinyVendorReceipt::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
