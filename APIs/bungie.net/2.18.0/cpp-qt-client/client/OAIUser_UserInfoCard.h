/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUser_UserInfoCard.h
 *
 * This contract supplies basic information commonly used to display a minimal amount of information about a user. Take care to not add more properties here unless the property applies in all (or at least the majority) of the situations where UserInfoCard is used. Avoid adding game specific or platform specific details here. In cases where UserInfoCard is a subset of the data needed in a contract, use UserInfoCard as a property of other contracts.
 */

#ifndef OAIUser_UserInfoCard_H
#define OAIUser_UserInfoCard_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUser_UserInfoCard : public OAIObject {
public:
    OAIUser_UserInfoCard();
    OAIUser_UserInfoCard(QString json);
    ~OAIUser_UserInfoCard() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<qint32> getApplicableMembershipTypes() const;
    void setApplicableMembershipTypes(const QList<qint32> &applicable_membership_types);
    bool is_applicable_membership_types_Set() const;
    bool is_applicable_membership_types_Valid() const;

    QString getBungieGlobalDisplayName() const;
    void setBungieGlobalDisplayName(const QString &bungie_global_display_name);
    bool is_bungie_global_display_name_Set() const;
    bool is_bungie_global_display_name_Valid() const;

    qint32 getBungieGlobalDisplayNameCode() const;
    void setBungieGlobalDisplayNameCode(const qint32 &bungie_global_display_name_code);
    bool is_bungie_global_display_name_code_Set() const;
    bool is_bungie_global_display_name_code_Valid() const;

    qint32 getCrossSaveOverride() const;
    void setCrossSaveOverride(const qint32 &cross_save_override);
    bool is_cross_save_override_Set() const;
    bool is_cross_save_override_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getIconPath() const;
    void setIconPath(const QString &icon_path);
    bool is_icon_path_Set() const;
    bool is_icon_path_Valid() const;

    bool isIsPublic() const;
    void setIsPublic(const bool &is_public);
    bool is_is_public_Set() const;
    bool is_is_public_Valid() const;

    qint64 getMembershipId() const;
    void setMembershipId(const qint64 &membership_id);
    bool is_membership_id_Set() const;
    bool is_membership_id_Valid() const;

    qint32 getMembershipType() const;
    void setMembershipType(const qint32 &membership_type);
    bool is_membership_type_Set() const;
    bool is_membership_type_Valid() const;

    QString getSupplementalDisplayName() const;
    void setSupplementalDisplayName(const QString &supplemental_display_name);
    bool is_supplemental_display_name_Set() const;
    bool is_supplemental_display_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<qint32> m_applicable_membership_types;
    bool m_applicable_membership_types_isSet;
    bool m_applicable_membership_types_isValid;

    QString m_bungie_global_display_name;
    bool m_bungie_global_display_name_isSet;
    bool m_bungie_global_display_name_isValid;

    qint32 m_bungie_global_display_name_code;
    bool m_bungie_global_display_name_code_isSet;
    bool m_bungie_global_display_name_code_isValid;

    qint32 m_cross_save_override;
    bool m_cross_save_override_isSet;
    bool m_cross_save_override_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_icon_path;
    bool m_icon_path_isSet;
    bool m_icon_path_isValid;

    bool m_is_public;
    bool m_is_public_isSet;
    bool m_is_public_isValid;

    qint64 m_membership_id;
    bool m_membership_id_isSet;
    bool m_membership_id_isValid;

    qint32 m_membership_type;
    bool m_membership_type_isSet;
    bool m_membership_type_isValid;

    QString m_supplemental_display_name;
    bool m_supplemental_display_name_isSet;
    bool m_supplemental_display_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUser_UserInfoCard)

#endif // OAIUser_UserInfoCard_H
