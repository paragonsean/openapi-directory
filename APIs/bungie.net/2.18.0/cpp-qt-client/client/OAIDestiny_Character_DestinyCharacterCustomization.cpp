/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Character_DestinyCharacterCustomization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Character_DestinyCharacterCustomization::OAIDestiny_Character_DestinyCharacterCustomization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Character_DestinyCharacterCustomization::OAIDestiny_Character_DestinyCharacterCustomization() {
    this->initializeModel();
}

OAIDestiny_Character_DestinyCharacterCustomization::~OAIDestiny_Character_DestinyCharacterCustomization() {}

void OAIDestiny_Character_DestinyCharacterCustomization::initializeModel() {

    m_decal_color_isSet = false;
    m_decal_color_isValid = false;

    m_decal_index_isSet = false;
    m_decal_index_isValid = false;

    m_eye_color_isSet = false;
    m_eye_color_isValid = false;

    m_face_isSet = false;
    m_face_isValid = false;

    m_feature_colors_isSet = false;
    m_feature_colors_isValid = false;

    m_feature_index_isSet = false;
    m_feature_index_isValid = false;

    m_hair_colors_isSet = false;
    m_hair_colors_isValid = false;

    m_hair_index_isSet = false;
    m_hair_index_isValid = false;

    m_lip_color_isSet = false;
    m_lip_color_isValid = false;

    m_personality_isSet = false;
    m_personality_isValid = false;

    m_skin_color_isSet = false;
    m_skin_color_isValid = false;

    m_wear_helmet_isSet = false;
    m_wear_helmet_isValid = false;
}

void OAIDestiny_Character_DestinyCharacterCustomization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Character_DestinyCharacterCustomization::fromJsonObject(QJsonObject json) {

    m_decal_color_isValid = ::OpenAPI::fromJsonValue(m_decal_color, json[QString("decalColor")]);
    m_decal_color_isSet = !json[QString("decalColor")].isNull() && m_decal_color_isValid;

    m_decal_index_isValid = ::OpenAPI::fromJsonValue(m_decal_index, json[QString("decalIndex")]);
    m_decal_index_isSet = !json[QString("decalIndex")].isNull() && m_decal_index_isValid;

    m_eye_color_isValid = ::OpenAPI::fromJsonValue(m_eye_color, json[QString("eyeColor")]);
    m_eye_color_isSet = !json[QString("eyeColor")].isNull() && m_eye_color_isValid;

    m_face_isValid = ::OpenAPI::fromJsonValue(m_face, json[QString("face")]);
    m_face_isSet = !json[QString("face")].isNull() && m_face_isValid;

    m_feature_colors_isValid = ::OpenAPI::fromJsonValue(m_feature_colors, json[QString("featureColors")]);
    m_feature_colors_isSet = !json[QString("featureColors")].isNull() && m_feature_colors_isValid;

    m_feature_index_isValid = ::OpenAPI::fromJsonValue(m_feature_index, json[QString("featureIndex")]);
    m_feature_index_isSet = !json[QString("featureIndex")].isNull() && m_feature_index_isValid;

    m_hair_colors_isValid = ::OpenAPI::fromJsonValue(m_hair_colors, json[QString("hairColors")]);
    m_hair_colors_isSet = !json[QString("hairColors")].isNull() && m_hair_colors_isValid;

    m_hair_index_isValid = ::OpenAPI::fromJsonValue(m_hair_index, json[QString("hairIndex")]);
    m_hair_index_isSet = !json[QString("hairIndex")].isNull() && m_hair_index_isValid;

    m_lip_color_isValid = ::OpenAPI::fromJsonValue(m_lip_color, json[QString("lipColor")]);
    m_lip_color_isSet = !json[QString("lipColor")].isNull() && m_lip_color_isValid;

    m_personality_isValid = ::OpenAPI::fromJsonValue(m_personality, json[QString("personality")]);
    m_personality_isSet = !json[QString("personality")].isNull() && m_personality_isValid;

    m_skin_color_isValid = ::OpenAPI::fromJsonValue(m_skin_color, json[QString("skinColor")]);
    m_skin_color_isSet = !json[QString("skinColor")].isNull() && m_skin_color_isValid;

    m_wear_helmet_isValid = ::OpenAPI::fromJsonValue(m_wear_helmet, json[QString("wearHelmet")]);
    m_wear_helmet_isSet = !json[QString("wearHelmet")].isNull() && m_wear_helmet_isValid;
}

QString OAIDestiny_Character_DestinyCharacterCustomization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Character_DestinyCharacterCustomization::asJsonObject() const {
    QJsonObject obj;
    if (m_decal_color_isSet) {
        obj.insert(QString("decalColor"), ::OpenAPI::toJsonValue(m_decal_color));
    }
    if (m_decal_index_isSet) {
        obj.insert(QString("decalIndex"), ::OpenAPI::toJsonValue(m_decal_index));
    }
    if (m_eye_color_isSet) {
        obj.insert(QString("eyeColor"), ::OpenAPI::toJsonValue(m_eye_color));
    }
    if (m_face_isSet) {
        obj.insert(QString("face"), ::OpenAPI::toJsonValue(m_face));
    }
    if (m_feature_colors.size() > 0) {
        obj.insert(QString("featureColors"), ::OpenAPI::toJsonValue(m_feature_colors));
    }
    if (m_feature_index_isSet) {
        obj.insert(QString("featureIndex"), ::OpenAPI::toJsonValue(m_feature_index));
    }
    if (m_hair_colors.size() > 0) {
        obj.insert(QString("hairColors"), ::OpenAPI::toJsonValue(m_hair_colors));
    }
    if (m_hair_index_isSet) {
        obj.insert(QString("hairIndex"), ::OpenAPI::toJsonValue(m_hair_index));
    }
    if (m_lip_color_isSet) {
        obj.insert(QString("lipColor"), ::OpenAPI::toJsonValue(m_lip_color));
    }
    if (m_personality_isSet) {
        obj.insert(QString("personality"), ::OpenAPI::toJsonValue(m_personality));
    }
    if (m_skin_color_isSet) {
        obj.insert(QString("skinColor"), ::OpenAPI::toJsonValue(m_skin_color));
    }
    if (m_wear_helmet_isSet) {
        obj.insert(QString("wearHelmet"), ::OpenAPI::toJsonValue(m_wear_helmet));
    }
    return obj;
}

qint32 OAIDestiny_Character_DestinyCharacterCustomization::getDecalColor() const {
    return m_decal_color;
}
void OAIDestiny_Character_DestinyCharacterCustomization::setDecalColor(const qint32 &decal_color) {
    m_decal_color = decal_color;
    m_decal_color_isSet = true;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_decal_color_Set() const{
    return m_decal_color_isSet;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_decal_color_Valid() const{
    return m_decal_color_isValid;
}

qint32 OAIDestiny_Character_DestinyCharacterCustomization::getDecalIndex() const {
    return m_decal_index;
}
void OAIDestiny_Character_DestinyCharacterCustomization::setDecalIndex(const qint32 &decal_index) {
    m_decal_index = decal_index;
    m_decal_index_isSet = true;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_decal_index_Set() const{
    return m_decal_index_isSet;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_decal_index_Valid() const{
    return m_decal_index_isValid;
}

qint32 OAIDestiny_Character_DestinyCharacterCustomization::getEyeColor() const {
    return m_eye_color;
}
void OAIDestiny_Character_DestinyCharacterCustomization::setEyeColor(const qint32 &eye_color) {
    m_eye_color = eye_color;
    m_eye_color_isSet = true;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_eye_color_Set() const{
    return m_eye_color_isSet;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_eye_color_Valid() const{
    return m_eye_color_isValid;
}

qint32 OAIDestiny_Character_DestinyCharacterCustomization::getFace() const {
    return m_face;
}
void OAIDestiny_Character_DestinyCharacterCustomization::setFace(const qint32 &face) {
    m_face = face;
    m_face_isSet = true;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_face_Set() const{
    return m_face_isSet;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_face_Valid() const{
    return m_face_isValid;
}

QList<qint32> OAIDestiny_Character_DestinyCharacterCustomization::getFeatureColors() const {
    return m_feature_colors;
}
void OAIDestiny_Character_DestinyCharacterCustomization::setFeatureColors(const QList<qint32> &feature_colors) {
    m_feature_colors = feature_colors;
    m_feature_colors_isSet = true;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_feature_colors_Set() const{
    return m_feature_colors_isSet;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_feature_colors_Valid() const{
    return m_feature_colors_isValid;
}

qint32 OAIDestiny_Character_DestinyCharacterCustomization::getFeatureIndex() const {
    return m_feature_index;
}
void OAIDestiny_Character_DestinyCharacterCustomization::setFeatureIndex(const qint32 &feature_index) {
    m_feature_index = feature_index;
    m_feature_index_isSet = true;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_feature_index_Set() const{
    return m_feature_index_isSet;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_feature_index_Valid() const{
    return m_feature_index_isValid;
}

QList<qint32> OAIDestiny_Character_DestinyCharacterCustomization::getHairColors() const {
    return m_hair_colors;
}
void OAIDestiny_Character_DestinyCharacterCustomization::setHairColors(const QList<qint32> &hair_colors) {
    m_hair_colors = hair_colors;
    m_hair_colors_isSet = true;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_hair_colors_Set() const{
    return m_hair_colors_isSet;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_hair_colors_Valid() const{
    return m_hair_colors_isValid;
}

qint32 OAIDestiny_Character_DestinyCharacterCustomization::getHairIndex() const {
    return m_hair_index;
}
void OAIDestiny_Character_DestinyCharacterCustomization::setHairIndex(const qint32 &hair_index) {
    m_hair_index = hair_index;
    m_hair_index_isSet = true;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_hair_index_Set() const{
    return m_hair_index_isSet;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_hair_index_Valid() const{
    return m_hair_index_isValid;
}

qint32 OAIDestiny_Character_DestinyCharacterCustomization::getLipColor() const {
    return m_lip_color;
}
void OAIDestiny_Character_DestinyCharacterCustomization::setLipColor(const qint32 &lip_color) {
    m_lip_color = lip_color;
    m_lip_color_isSet = true;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_lip_color_Set() const{
    return m_lip_color_isSet;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_lip_color_Valid() const{
    return m_lip_color_isValid;
}

qint32 OAIDestiny_Character_DestinyCharacterCustomization::getPersonality() const {
    return m_personality;
}
void OAIDestiny_Character_DestinyCharacterCustomization::setPersonality(const qint32 &personality) {
    m_personality = personality;
    m_personality_isSet = true;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_personality_Set() const{
    return m_personality_isSet;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_personality_Valid() const{
    return m_personality_isValid;
}

qint32 OAIDestiny_Character_DestinyCharacterCustomization::getSkinColor() const {
    return m_skin_color;
}
void OAIDestiny_Character_DestinyCharacterCustomization::setSkinColor(const qint32 &skin_color) {
    m_skin_color = skin_color;
    m_skin_color_isSet = true;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_skin_color_Set() const{
    return m_skin_color_isSet;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_skin_color_Valid() const{
    return m_skin_color_isValid;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::isWearHelmet() const {
    return m_wear_helmet;
}
void OAIDestiny_Character_DestinyCharacterCustomization::setWearHelmet(const bool &wear_helmet) {
    m_wear_helmet = wear_helmet;
    m_wear_helmet_isSet = true;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_wear_helmet_Set() const{
    return m_wear_helmet_isSet;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::is_wear_helmet_Valid() const{
    return m_wear_helmet_isValid;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_decal_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decal_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eye_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_face_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hair_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hair_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lip_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_personality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skin_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wear_helmet_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Character_DestinyCharacterCustomization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
