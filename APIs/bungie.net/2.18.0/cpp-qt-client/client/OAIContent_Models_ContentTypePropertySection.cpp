/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContent_Models_ContentTypePropertySection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContent_Models_ContentTypePropertySection::OAIContent_Models_ContentTypePropertySection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContent_Models_ContentTypePropertySection::OAIContent_Models_ContentTypePropertySection() {
    this->initializeModel();
}

OAIContent_Models_ContentTypePropertySection::~OAIContent_Models_ContentTypePropertySection() {}

void OAIContent_Models_ContentTypePropertySection::initializeModel() {

    m_collapsed_isSet = false;
    m_collapsed_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_readable_name_isSet = false;
    m_readable_name_isValid = false;
}

void OAIContent_Models_ContentTypePropertySection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContent_Models_ContentTypePropertySection::fromJsonObject(QJsonObject json) {

    m_collapsed_isValid = ::OpenAPI::fromJsonValue(m_collapsed, json[QString("collapsed")]);
    m_collapsed_isSet = !json[QString("collapsed")].isNull() && m_collapsed_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_readable_name_isValid = ::OpenAPI::fromJsonValue(m_readable_name, json[QString("readableName")]);
    m_readable_name_isSet = !json[QString("readableName")].isNull() && m_readable_name_isValid;
}

QString OAIContent_Models_ContentTypePropertySection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContent_Models_ContentTypePropertySection::asJsonObject() const {
    QJsonObject obj;
    if (m_collapsed_isSet) {
        obj.insert(QString("collapsed"), ::OpenAPI::toJsonValue(m_collapsed));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_readable_name_isSet) {
        obj.insert(QString("readableName"), ::OpenAPI::toJsonValue(m_readable_name));
    }
    return obj;
}

bool OAIContent_Models_ContentTypePropertySection::isCollapsed() const {
    return m_collapsed;
}
void OAIContent_Models_ContentTypePropertySection::setCollapsed(const bool &collapsed) {
    m_collapsed = collapsed;
    m_collapsed_isSet = true;
}

bool OAIContent_Models_ContentTypePropertySection::is_collapsed_Set() const{
    return m_collapsed_isSet;
}

bool OAIContent_Models_ContentTypePropertySection::is_collapsed_Valid() const{
    return m_collapsed_isValid;
}

QString OAIContent_Models_ContentTypePropertySection::getName() const {
    return m_name;
}
void OAIContent_Models_ContentTypePropertySection::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContent_Models_ContentTypePropertySection::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContent_Models_ContentTypePropertySection::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIContent_Models_ContentTypePropertySection::getReadableName() const {
    return m_readable_name;
}
void OAIContent_Models_ContentTypePropertySection::setReadableName(const QString &readable_name) {
    m_readable_name = readable_name;
    m_readable_name_isSet = true;
}

bool OAIContent_Models_ContentTypePropertySection::is_readable_name_Set() const{
    return m_readable_name_isSet;
}

bool OAIContent_Models_ContentTypePropertySection::is_readable_name_Valid() const{
    return m_readable_name_isValid;
}

bool OAIContent_Models_ContentTypePropertySection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collapsed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_readable_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContent_Models_ContentTypePropertySection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
