/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity() {
    this->initializeModel();
}

OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::~OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity() {}

void OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_highest_opposing_faction_score_isSet = false;
    m_highest_opposing_faction_score_isValid = false;

    m_number_of_opponents_isSet = false;
    m_number_of_opponents_isValid = false;

    m_number_of_players_isSet = false;
    m_number_of_players_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_highest_opposing_faction_score_isValid = ::OpenAPI::fromJsonValue(m_highest_opposing_faction_score, json[QString("highestOpposingFactionScore")]);
    m_highest_opposing_faction_score_isSet = !json[QString("highestOpposingFactionScore")].isNull() && m_highest_opposing_faction_score_isValid;

    m_number_of_opponents_isValid = ::OpenAPI::fromJsonValue(m_number_of_opponents, json[QString("numberOfOpponents")]);
    m_number_of_opponents_isSet = !json[QString("numberOfOpponents")].isNull() && m_number_of_opponents_isValid;

    m_number_of_players_isValid = ::OpenAPI::fromJsonValue(m_number_of_players, json[QString("numberOfPlayers")]);
    m_number_of_players_isSet = !json[QString("numberOfPlayers")].isNull() && m_number_of_players_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_highest_opposing_faction_score_isSet) {
        obj.insert(QString("highestOpposingFactionScore"), ::OpenAPI::toJsonValue(m_highest_opposing_faction_score));
    }
    if (m_number_of_opponents_isSet) {
        obj.insert(QString("numberOfOpponents"), ::OpenAPI::toJsonValue(m_number_of_opponents));
    }
    if (m_number_of_players_isSet) {
        obj.insert(QString("numberOfPlayers"), ::OpenAPI::toJsonValue(m_number_of_players));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QDateTime OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::getEndTime() const {
    return m_end_time;
}
void OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::is_end_time_Valid() const{
    return m_end_time_isValid;
}

float OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::getHighestOpposingFactionScore() const {
    return m_highest_opposing_faction_score;
}
void OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::setHighestOpposingFactionScore(const float &highest_opposing_faction_score) {
    m_highest_opposing_faction_score = highest_opposing_faction_score;
    m_highest_opposing_faction_score_isSet = true;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::is_highest_opposing_faction_score_Set() const{
    return m_highest_opposing_faction_score_isSet;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::is_highest_opposing_faction_score_Valid() const{
    return m_highest_opposing_faction_score_isValid;
}

qint32 OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::getNumberOfOpponents() const {
    return m_number_of_opponents;
}
void OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::setNumberOfOpponents(const qint32 &number_of_opponents) {
    m_number_of_opponents = number_of_opponents;
    m_number_of_opponents_isSet = true;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::is_number_of_opponents_Set() const{
    return m_number_of_opponents_isSet;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::is_number_of_opponents_Valid() const{
    return m_number_of_opponents_isValid;
}

qint32 OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::getNumberOfPlayers() const {
    return m_number_of_players;
}
void OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::setNumberOfPlayers(const qint32 &number_of_players) {
    m_number_of_players = number_of_players;
    m_number_of_players_isSet = true;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::is_number_of_players_Set() const{
    return m_number_of_players_isSet;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::is_number_of_players_Valid() const{
    return m_number_of_players_isValid;
}

float OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::getScore() const {
    return m_score;
}
void OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::setScore(const float &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::is_score_Set() const{
    return m_score_isSet;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::is_score_Valid() const{
    return m_score_isValid;
}

QDateTime OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::getStartTime() const {
    return m_start_time;
}
void OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highest_opposing_faction_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_opponents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_players_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Components_Profiles_DestinyProfileTransitoryCurrentActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
