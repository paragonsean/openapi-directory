/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchema116.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchema116::OAISchema116(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchema116::OAISchema116() {
    this->initializeModel();
}

OAISchema116::~OAISchema116() {}

void OAISchema116::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISchema116::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISchema116::fromJson(QString jsonString) {
    
    if ( jsonString.compare(QString::number(0), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema116::_0;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(1), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema116::_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(2), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema116::_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(4), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema116::_4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(8), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema116::_8;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(16), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema116::_16;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(32), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema116::_32;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(64), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema116::_64;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(128), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema116::_128;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(256), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema116::_256;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISchema116::fromJsonValue(QJsonValue json) {
m_value = static_cast<eOAISchema116>(json.toInt());
}

QString OAISchema116::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISchema116::_0:
            val = QString::number(0);
            break;
        case eOAISchema116::_1:
            val = QString::number(1);
            break;
        case eOAISchema116::_2:
            val = QString::number(2);
            break;
        case eOAISchema116::_4:
            val = QString::number(4);
            break;
        case eOAISchema116::_8:
            val = QString::number(8);
            break;
        case eOAISchema116::_16:
            val = QString::number(16);
            break;
        case eOAISchema116::_32:
            val = QString::number(32);
            break;
        case eOAISchema116::_64:
            val = QString::number(64);
            break;
        case eOAISchema116::_128:
            val = QString::number(128);
            break;
        case eOAISchema116::_256:
            val = QString::number(256);
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISchema116::asJsonValue() const {
    
    return QJsonValue(static_cast<int>(m_value));
}


OAISchema116::eOAISchema116 OAISchema116::getValue() const {
    return m_value;
}

void OAISchema116::setValue(const OAISchema116::eOAISchema116& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISchema116::isSet() const {
    
    return m_value_isSet;
}

bool OAISchema116::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
