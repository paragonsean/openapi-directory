/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Components_Records_DestinyRecordComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Components_Records_DestinyRecordComponent::OAIDestiny_Components_Records_DestinyRecordComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Components_Records_DestinyRecordComponent::OAIDestiny_Components_Records_DestinyRecordComponent() {
    this->initializeModel();
}

OAIDestiny_Components_Records_DestinyRecordComponent::~OAIDestiny_Components_Records_DestinyRecordComponent() {}

void OAIDestiny_Components_Records_DestinyRecordComponent::initializeModel() {

    m_completed_count_isSet = false;
    m_completed_count_isValid = false;

    m_interval_objectives_isSet = false;
    m_interval_objectives_isValid = false;

    m_intervals_redeemed_count_isSet = false;
    m_intervals_redeemed_count_isValid = false;

    m_objectives_isSet = false;
    m_objectives_isValid = false;

    m_reward_visibilty_isSet = false;
    m_reward_visibilty_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIDestiny_Components_Records_DestinyRecordComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Components_Records_DestinyRecordComponent::fromJsonObject(QJsonObject json) {

    m_completed_count_isValid = ::OpenAPI::fromJsonValue(m_completed_count, json[QString("completedCount")]);
    m_completed_count_isSet = !json[QString("completedCount")].isNull() && m_completed_count_isValid;

    m_interval_objectives_isValid = ::OpenAPI::fromJsonValue(m_interval_objectives, json[QString("intervalObjectives")]);
    m_interval_objectives_isSet = !json[QString("intervalObjectives")].isNull() && m_interval_objectives_isValid;

    m_intervals_redeemed_count_isValid = ::OpenAPI::fromJsonValue(m_intervals_redeemed_count, json[QString("intervalsRedeemedCount")]);
    m_intervals_redeemed_count_isSet = !json[QString("intervalsRedeemedCount")].isNull() && m_intervals_redeemed_count_isValid;

    m_objectives_isValid = ::OpenAPI::fromJsonValue(m_objectives, json[QString("objectives")]);
    m_objectives_isSet = !json[QString("objectives")].isNull() && m_objectives_isValid;

    m_reward_visibilty_isValid = ::OpenAPI::fromJsonValue(m_reward_visibilty, json[QString("rewardVisibilty")]);
    m_reward_visibilty_isSet = !json[QString("rewardVisibilty")].isNull() && m_reward_visibilty_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIDestiny_Components_Records_DestinyRecordComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Components_Records_DestinyRecordComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_completed_count_isSet) {
        obj.insert(QString("completedCount"), ::OpenAPI::toJsonValue(m_completed_count));
    }
    if (m_interval_objectives.size() > 0) {
        obj.insert(QString("intervalObjectives"), ::OpenAPI::toJsonValue(m_interval_objectives));
    }
    if (m_intervals_redeemed_count_isSet) {
        obj.insert(QString("intervalsRedeemedCount"), ::OpenAPI::toJsonValue(m_intervals_redeemed_count));
    }
    if (m_objectives.size() > 0) {
        obj.insert(QString("objectives"), ::OpenAPI::toJsonValue(m_objectives));
    }
    if (m_reward_visibilty.size() > 0) {
        obj.insert(QString("rewardVisibilty"), ::OpenAPI::toJsonValue(m_reward_visibilty));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

qint32 OAIDestiny_Components_Records_DestinyRecordComponent::getCompletedCount() const {
    return m_completed_count;
}
void OAIDestiny_Components_Records_DestinyRecordComponent::setCompletedCount(const qint32 &completed_count) {
    m_completed_count = completed_count;
    m_completed_count_isSet = true;
}

bool OAIDestiny_Components_Records_DestinyRecordComponent::is_completed_count_Set() const{
    return m_completed_count_isSet;
}

bool OAIDestiny_Components_Records_DestinyRecordComponent::is_completed_count_Valid() const{
    return m_completed_count_isValid;
}

QList<OAIDestiny_Quests_DestinyObjectiveProgress> OAIDestiny_Components_Records_DestinyRecordComponent::getIntervalObjectives() const {
    return m_interval_objectives;
}
void OAIDestiny_Components_Records_DestinyRecordComponent::setIntervalObjectives(const QList<OAIDestiny_Quests_DestinyObjectiveProgress> &interval_objectives) {
    m_interval_objectives = interval_objectives;
    m_interval_objectives_isSet = true;
}

bool OAIDestiny_Components_Records_DestinyRecordComponent::is_interval_objectives_Set() const{
    return m_interval_objectives_isSet;
}

bool OAIDestiny_Components_Records_DestinyRecordComponent::is_interval_objectives_Valid() const{
    return m_interval_objectives_isValid;
}

qint32 OAIDestiny_Components_Records_DestinyRecordComponent::getIntervalsRedeemedCount() const {
    return m_intervals_redeemed_count;
}
void OAIDestiny_Components_Records_DestinyRecordComponent::setIntervalsRedeemedCount(const qint32 &intervals_redeemed_count) {
    m_intervals_redeemed_count = intervals_redeemed_count;
    m_intervals_redeemed_count_isSet = true;
}

bool OAIDestiny_Components_Records_DestinyRecordComponent::is_intervals_redeemed_count_Set() const{
    return m_intervals_redeemed_count_isSet;
}

bool OAIDestiny_Components_Records_DestinyRecordComponent::is_intervals_redeemed_count_Valid() const{
    return m_intervals_redeemed_count_isValid;
}

QList<OAIDestiny_Quests_DestinyObjectiveProgress> OAIDestiny_Components_Records_DestinyRecordComponent::getObjectives() const {
    return m_objectives;
}
void OAIDestiny_Components_Records_DestinyRecordComponent::setObjectives(const QList<OAIDestiny_Quests_DestinyObjectiveProgress> &objectives) {
    m_objectives = objectives;
    m_objectives_isSet = true;
}

bool OAIDestiny_Components_Records_DestinyRecordComponent::is_objectives_Set() const{
    return m_objectives_isSet;
}

bool OAIDestiny_Components_Records_DestinyRecordComponent::is_objectives_Valid() const{
    return m_objectives_isValid;
}

QList<bool> OAIDestiny_Components_Records_DestinyRecordComponent::getRewardVisibilty() const {
    return m_reward_visibilty;
}
void OAIDestiny_Components_Records_DestinyRecordComponent::setRewardVisibilty(const QList<bool> &reward_visibilty) {
    m_reward_visibilty = reward_visibilty;
    m_reward_visibilty_isSet = true;
}

bool OAIDestiny_Components_Records_DestinyRecordComponent::is_reward_visibilty_Set() const{
    return m_reward_visibilty_isSet;
}

bool OAIDestiny_Components_Records_DestinyRecordComponent::is_reward_visibilty_Valid() const{
    return m_reward_visibilty_isValid;
}

qint32 OAIDestiny_Components_Records_DestinyRecordComponent::getState() const {
    return m_state;
}
void OAIDestiny_Components_Records_DestinyRecordComponent::setState(const qint32 &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDestiny_Components_Records_DestinyRecordComponent::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDestiny_Components_Records_DestinyRecordComponent::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIDestiny_Components_Records_DestinyRecordComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completed_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_objectives.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_intervals_redeemed_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_objectives.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_visibilty.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Components_Records_DestinyRecordComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
