/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition.h
 *
 * Defines a plug \&quot;Category\&quot; that is allowed to be plugged into a socket of this type.  This should be compared against a given plug item&#39;s DestinyInventoryItemDefinition.plug.plugCategoryHash, which indicates the plug item&#39;s category.
 */

#ifndef OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition_H
#define OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition();
    OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition(QString json);
    ~OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCategoryHash() const;
    void setCategoryHash(const qint32 &category_hash);
    bool is_category_hash_Set() const;
    bool is_category_hash_Valid() const;

    QString getCategoryIdentifier() const;
    void setCategoryIdentifier(const QString &category_identifier);
    bool is_category_identifier_Set() const;
    bool is_category_identifier_Valid() const;

    QList<qint32> getReinitializationPossiblePlugHashes() const;
    void setReinitializationPossiblePlugHashes(const QList<qint32> &reinitialization_possible_plug_hashes);
    bool is_reinitialization_possible_plug_hashes_Set() const;
    bool is_reinitialization_possible_plug_hashes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_category_hash;
    bool m_category_hash_isSet;
    bool m_category_hash_isValid;

    QString m_category_identifier;
    bool m_category_identifier_isSet;
    bool m_category_identifier_isValid;

    QList<qint32> m_reinitialization_possible_plug_hashes;
    bool m_reinitialization_possible_plug_hashes_isSet;
    bool m_reinitialization_possible_plug_hashes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition)

#endif // OAIDestiny_Definitions_Sockets_DestinyPlugWhitelistEntryDefinition_H
