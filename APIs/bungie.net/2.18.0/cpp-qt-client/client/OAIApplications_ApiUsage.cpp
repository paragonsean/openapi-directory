/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplications_ApiUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplications_ApiUsage::OAIApplications_ApiUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplications_ApiUsage::OAIApplications_ApiUsage() {
    this->initializeModel();
}

OAIApplications_ApiUsage::~OAIApplications_ApiUsage() {}

void OAIApplications_ApiUsage::initializeModel() {

    m_api_calls_isSet = false;
    m_api_calls_isValid = false;

    m_throttled_requests_isSet = false;
    m_throttled_requests_isValid = false;
}

void OAIApplications_ApiUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplications_ApiUsage::fromJsonObject(QJsonObject json) {

    m_api_calls_isValid = ::OpenAPI::fromJsonValue(m_api_calls, json[QString("apiCalls")]);
    m_api_calls_isSet = !json[QString("apiCalls")].isNull() && m_api_calls_isValid;

    m_throttled_requests_isValid = ::OpenAPI::fromJsonValue(m_throttled_requests, json[QString("throttledRequests")]);
    m_throttled_requests_isSet = !json[QString("throttledRequests")].isNull() && m_throttled_requests_isValid;
}

QString OAIApplications_ApiUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplications_ApiUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_api_calls.size() > 0) {
        obj.insert(QString("apiCalls"), ::OpenAPI::toJsonValue(m_api_calls));
    }
    if (m_throttled_requests.size() > 0) {
        obj.insert(QString("throttledRequests"), ::OpenAPI::toJsonValue(m_throttled_requests));
    }
    return obj;
}

QList<OAIApplications_Series> OAIApplications_ApiUsage::getApiCalls() const {
    return m_api_calls;
}
void OAIApplications_ApiUsage::setApiCalls(const QList<OAIApplications_Series> &api_calls) {
    m_api_calls = api_calls;
    m_api_calls_isSet = true;
}

bool OAIApplications_ApiUsage::is_api_calls_Set() const{
    return m_api_calls_isSet;
}

bool OAIApplications_ApiUsage::is_api_calls_Valid() const{
    return m_api_calls_isValid;
}

QList<OAIApplications_Series> OAIApplications_ApiUsage::getThrottledRequests() const {
    return m_throttled_requests;
}
void OAIApplications_ApiUsage::setThrottledRequests(const QList<OAIApplications_Series> &throttled_requests) {
    m_throttled_requests = throttled_requests;
    m_throttled_requests_isSet = true;
}

bool OAIApplications_ApiUsage::is_throttled_requests_Set() const{
    return m_throttled_requests_isSet;
}

bool OAIApplications_ApiUsage::is_throttled_requests_Valid() const{
    return m_throttled_requests_isValid;
}

bool OAIApplications_ApiUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_calls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_throttled_requests.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplications_ApiUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
