/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Artifacts_DestinyArtifactCharacterScoped.h
 *
 * 
 */

#ifndef OAIDestiny_Artifacts_DestinyArtifactCharacterScoped_H
#define OAIDestiny_Artifacts_DestinyArtifactCharacterScoped_H

#include <QJsonObject>

#include "OAIDestiny_Artifacts_DestinyArtifactTier.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Artifacts_DestinyArtifactTier;

class OAIDestiny_Artifacts_DestinyArtifactCharacterScoped : public OAIObject {
public:
    OAIDestiny_Artifacts_DestinyArtifactCharacterScoped();
    OAIDestiny_Artifacts_DestinyArtifactCharacterScoped(QString json);
    ~OAIDestiny_Artifacts_DestinyArtifactCharacterScoped() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getArtifactHash() const;
    void setArtifactHash(const qint32 &artifact_hash);
    bool is_artifact_hash_Set() const;
    bool is_artifact_hash_Valid() const;

    qint32 getPointsUsed() const;
    void setPointsUsed(const qint32 &points_used);
    bool is_points_used_Set() const;
    bool is_points_used_Valid() const;

    qint32 getResetCount() const;
    void setResetCount(const qint32 &reset_count);
    bool is_reset_count_Set() const;
    bool is_reset_count_Valid() const;

    QList<OAIDestiny_Artifacts_DestinyArtifactTier> getTiers() const;
    void setTiers(const QList<OAIDestiny_Artifacts_DestinyArtifactTier> &tiers);
    bool is_tiers_Set() const;
    bool is_tiers_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_artifact_hash;
    bool m_artifact_hash_isSet;
    bool m_artifact_hash_isValid;

    qint32 m_points_used;
    bool m_points_used_isSet;
    bool m_points_used_isValid;

    qint32 m_reset_count;
    bool m_reset_count_isSet;
    bool m_reset_count_isValid;

    QList<OAIDestiny_Artifacts_DestinyArtifactTier> m_tiers;
    bool m_tiers_isSet;
    bool m_tiers_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Artifacts_DestinyArtifactCharacterScoped)

#endif // OAIDestiny_Artifacts_DestinyArtifactCharacterScoped_H
