/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyObjectiveDefinition.h
 *
 * Defines an \&quot;Objective\&quot;.  An objective is a specific task you should accomplish in the game. These are referred to by:  - Quest Steps (which are DestinyInventoryItemDefinition entities with Objectives)  - Challenges (which are Objectives defined on an DestinyActivityDefintion)  - Milestones (which refer to Objectives that are defined on both Quest Steps and Activities)  - Anything else that the designers decide to do later.  Objectives have progress, a notion of having been Completed, human readable data describing the task to be accomplished, and a lot of optional tack-on data that can enhance the information provided about the task.
 */

#ifndef OAIDestiny_Definitions_DestinyObjectiveDefinition_H
#define OAIDestiny_Definitions_DestinyObjectiveDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition.h"
#include "OAIDestiny_Definitions_DestinyObjectivePerkEntryDefinition.h"
#include "OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition;
class OAIDestiny_Definitions_DestinyObjectivePerkEntryDefinition;
class OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition;

class OAIDestiny_Definitions_DestinyObjectiveDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyObjectiveDefinition();
    OAIDestiny_Definitions_DestinyObjectiveDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyObjectiveDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowNegativeValue() const;
    void setAllowNegativeValue(const bool &allow_negative_value);
    bool is_allow_negative_value_Set() const;
    bool is_allow_negative_value_Valid() const;

    bool isAllowOvercompletion() const;
    void setAllowOvercompletion(const bool &allow_overcompletion);
    bool is_allow_overcompletion_Set() const;
    bool is_allow_overcompletion_Valid() const;

    bool isAllowValueChangeWhenCompleted() const;
    void setAllowValueChangeWhenCompleted(const bool &allow_value_change_when_completed);
    bool is_allow_value_change_when_completed_Set() const;
    bool is_allow_value_change_when_completed_Valid() const;

    qint32 getCompletedValueStyle() const;
    void setCompletedValueStyle(const qint32 &completed_value_style);
    bool is_completed_value_style_Set() const;
    bool is_completed_value_style_Valid() const;

    qint32 getCompletionValue() const;
    void setCompletionValue(const qint32 &completion_value);
    bool is_completion_value_Set() const;
    bool is_completion_value_Valid() const;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition getDisplayProperties() const;
    void setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties);
    bool is_display_properties_Set() const;
    bool is_display_properties_Valid() const;

    qint32 getHash() const;
    void setHash(const qint32 &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    qint32 getInProgressValueStyle() const;
    void setInProgressValueStyle(const qint32 &in_progress_value_style);
    bool is_in_progress_value_style_Set() const;
    bool is_in_progress_value_style_Valid() const;

    qint32 getIndex() const;
    void setIndex(const qint32 &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    bool isIsCountingDownward() const;
    void setIsCountingDownward(const bool &is_counting_downward);
    bool is_is_counting_downward_Set() const;
    bool is_is_counting_downward_Valid() const;

    qint32 getLocationHash() const;
    void setLocationHash(const qint32 &location_hash);
    bool is_location_hash_Set() const;
    bool is_location_hash_Valid() const;

    qint32 getMinimumVisibilityThreshold() const;
    void setMinimumVisibilityThreshold(const qint32 &minimum_visibility_threshold);
    bool is_minimum_visibility_threshold_Set() const;
    bool is_minimum_visibility_threshold_Valid() const;

    OAIDestiny_Definitions_DestinyObjectivePerkEntryDefinition getPerks() const;
    void setPerks(const OAIDestiny_Definitions_DestinyObjectivePerkEntryDefinition &perks);
    bool is_perks_Set() const;
    bool is_perks_Valid() const;

    QString getProgressDescription() const;
    void setProgressDescription(const QString &progress_description);
    bool is_progress_description_Set() const;
    bool is_progress_description_Valid() const;

    bool isRedacted() const;
    void setRedacted(const bool &redacted);
    bool is_redacted_Set() const;
    bool is_redacted_Valid() const;

    qint32 getScope() const;
    void setScope(const qint32 &scope);
    bool is_scope_Set() const;
    bool is_scope_Valid() const;

    bool isShowValueOnComplete() const;
    void setShowValueOnComplete(const bool &show_value_on_complete);
    bool is_show_value_on_complete_Set() const;
    bool is_show_value_on_complete_Valid() const;

    OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition getStats() const;
    void setStats(const OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition &stats);
    bool is_stats_Set() const;
    bool is_stats_Valid() const;

    QString getUiLabel() const;
    void setUiLabel(const QString &ui_label);
    bool is_ui_label_Set() const;
    bool is_ui_label_Valid() const;

    qint32 getUiStyle() const;
    void setUiStyle(const qint32 &ui_style);
    bool is_ui_style_Set() const;
    bool is_ui_style_Valid() const;

    qint32 getValueStyle() const;
    void setValueStyle(const qint32 &value_style);
    bool is_value_style_Set() const;
    bool is_value_style_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_negative_value;
    bool m_allow_negative_value_isSet;
    bool m_allow_negative_value_isValid;

    bool m_allow_overcompletion;
    bool m_allow_overcompletion_isSet;
    bool m_allow_overcompletion_isValid;

    bool m_allow_value_change_when_completed;
    bool m_allow_value_change_when_completed_isSet;
    bool m_allow_value_change_when_completed_isValid;

    qint32 m_completed_value_style;
    bool m_completed_value_style_isSet;
    bool m_completed_value_style_isValid;

    qint32 m_completion_value;
    bool m_completion_value_isSet;
    bool m_completion_value_isValid;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition m_display_properties;
    bool m_display_properties_isSet;
    bool m_display_properties_isValid;

    qint32 m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    qint32 m_in_progress_value_style;
    bool m_in_progress_value_style_isSet;
    bool m_in_progress_value_style_isValid;

    qint32 m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    bool m_is_counting_downward;
    bool m_is_counting_downward_isSet;
    bool m_is_counting_downward_isValid;

    qint32 m_location_hash;
    bool m_location_hash_isSet;
    bool m_location_hash_isValid;

    qint32 m_minimum_visibility_threshold;
    bool m_minimum_visibility_threshold_isSet;
    bool m_minimum_visibility_threshold_isValid;

    OAIDestiny_Definitions_DestinyObjectivePerkEntryDefinition m_perks;
    bool m_perks_isSet;
    bool m_perks_isValid;

    QString m_progress_description;
    bool m_progress_description_isSet;
    bool m_progress_description_isValid;

    bool m_redacted;
    bool m_redacted_isSet;
    bool m_redacted_isValid;

    qint32 m_scope;
    bool m_scope_isSet;
    bool m_scope_isValid;

    bool m_show_value_on_complete;
    bool m_show_value_on_complete_isSet;
    bool m_show_value_on_complete_isValid;

    OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition m_stats;
    bool m_stats_isSet;
    bool m_stats_isValid;

    QString m_ui_label;
    bool m_ui_label_isSet;
    bool m_ui_label_isValid;

    qint32 m_ui_style;
    bool m_ui_style_isSet;
    bool m_ui_style_isValid;

    qint32 m_value_style;
    bool m_value_style_isSet;
    bool m_value_style_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyObjectiveDefinition)

#endif // OAIDestiny_Definitions_DestinyObjectiveDefinition_H
