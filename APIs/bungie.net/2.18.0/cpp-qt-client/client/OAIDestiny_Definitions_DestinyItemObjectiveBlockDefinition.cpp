/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::~OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition() {}

void OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::initializeModel() {

    m_display_activity_hashes_isSet = false;
    m_display_activity_hashes_isValid = false;

    m_display_as_stat_tracker_isSet = false;
    m_display_as_stat_tracker_isValid = false;

    m_narrative_isSet = false;
    m_narrative_isValid = false;

    m_objective_hashes_isSet = false;
    m_objective_hashes_isValid = false;

    m_objective_verb_name_isSet = false;
    m_objective_verb_name_isValid = false;

    m_per_objective_display_properties_isSet = false;
    m_per_objective_display_properties_isValid = false;

    m_quest_type_hash_isSet = false;
    m_quest_type_hash_isValid = false;

    m_quest_type_identifier_isSet = false;
    m_quest_type_identifier_isValid = false;

    m_questline_item_hash_isSet = false;
    m_questline_item_hash_isValid = false;

    m_require_full_objective_completion_isSet = false;
    m_require_full_objective_completion_isValid = false;
}

void OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::fromJsonObject(QJsonObject json) {

    m_display_activity_hashes_isValid = ::OpenAPI::fromJsonValue(m_display_activity_hashes, json[QString("displayActivityHashes")]);
    m_display_activity_hashes_isSet = !json[QString("displayActivityHashes")].isNull() && m_display_activity_hashes_isValid;

    m_display_as_stat_tracker_isValid = ::OpenAPI::fromJsonValue(m_display_as_stat_tracker, json[QString("displayAsStatTracker")]);
    m_display_as_stat_tracker_isSet = !json[QString("displayAsStatTracker")].isNull() && m_display_as_stat_tracker_isValid;

    m_narrative_isValid = ::OpenAPI::fromJsonValue(m_narrative, json[QString("narrative")]);
    m_narrative_isSet = !json[QString("narrative")].isNull() && m_narrative_isValid;

    m_objective_hashes_isValid = ::OpenAPI::fromJsonValue(m_objective_hashes, json[QString("objectiveHashes")]);
    m_objective_hashes_isSet = !json[QString("objectiveHashes")].isNull() && m_objective_hashes_isValid;

    m_objective_verb_name_isValid = ::OpenAPI::fromJsonValue(m_objective_verb_name, json[QString("objectiveVerbName")]);
    m_objective_verb_name_isSet = !json[QString("objectiveVerbName")].isNull() && m_objective_verb_name_isValid;

    m_per_objective_display_properties_isValid = ::OpenAPI::fromJsonValue(m_per_objective_display_properties, json[QString("perObjectiveDisplayProperties")]);
    m_per_objective_display_properties_isSet = !json[QString("perObjectiveDisplayProperties")].isNull() && m_per_objective_display_properties_isValid;

    m_quest_type_hash_isValid = ::OpenAPI::fromJsonValue(m_quest_type_hash, json[QString("questTypeHash")]);
    m_quest_type_hash_isSet = !json[QString("questTypeHash")].isNull() && m_quest_type_hash_isValid;

    m_quest_type_identifier_isValid = ::OpenAPI::fromJsonValue(m_quest_type_identifier, json[QString("questTypeIdentifier")]);
    m_quest_type_identifier_isSet = !json[QString("questTypeIdentifier")].isNull() && m_quest_type_identifier_isValid;

    m_questline_item_hash_isValid = ::OpenAPI::fromJsonValue(m_questline_item_hash, json[QString("questlineItemHash")]);
    m_questline_item_hash_isSet = !json[QString("questlineItemHash")].isNull() && m_questline_item_hash_isValid;

    m_require_full_objective_completion_isValid = ::OpenAPI::fromJsonValue(m_require_full_objective_completion, json[QString("requireFullObjectiveCompletion")]);
    m_require_full_objective_completion_isSet = !json[QString("requireFullObjectiveCompletion")].isNull() && m_require_full_objective_completion_isValid;
}

QString OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_display_activity_hashes.size() > 0) {
        obj.insert(QString("displayActivityHashes"), ::OpenAPI::toJsonValue(m_display_activity_hashes));
    }
    if (m_display_as_stat_tracker_isSet) {
        obj.insert(QString("displayAsStatTracker"), ::OpenAPI::toJsonValue(m_display_as_stat_tracker));
    }
    if (m_narrative_isSet) {
        obj.insert(QString("narrative"), ::OpenAPI::toJsonValue(m_narrative));
    }
    if (m_objective_hashes.size() > 0) {
        obj.insert(QString("objectiveHashes"), ::OpenAPI::toJsonValue(m_objective_hashes));
    }
    if (m_objective_verb_name_isSet) {
        obj.insert(QString("objectiveVerbName"), ::OpenAPI::toJsonValue(m_objective_verb_name));
    }
    if (m_per_objective_display_properties.size() > 0) {
        obj.insert(QString("perObjectiveDisplayProperties"), ::OpenAPI::toJsonValue(m_per_objective_display_properties));
    }
    if (m_quest_type_hash_isSet) {
        obj.insert(QString("questTypeHash"), ::OpenAPI::toJsonValue(m_quest_type_hash));
    }
    if (m_quest_type_identifier_isSet) {
        obj.insert(QString("questTypeIdentifier"), ::OpenAPI::toJsonValue(m_quest_type_identifier));
    }
    if (m_questline_item_hash_isSet) {
        obj.insert(QString("questlineItemHash"), ::OpenAPI::toJsonValue(m_questline_item_hash));
    }
    if (m_require_full_objective_completion_isSet) {
        obj.insert(QString("requireFullObjectiveCompletion"), ::OpenAPI::toJsonValue(m_require_full_objective_completion));
    }
    return obj;
}

QList<qint32> OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::getDisplayActivityHashes() const {
    return m_display_activity_hashes;
}
void OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::setDisplayActivityHashes(const QList<qint32> &display_activity_hashes) {
    m_display_activity_hashes = display_activity_hashes;
    m_display_activity_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::is_display_activity_hashes_Set() const{
    return m_display_activity_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::is_display_activity_hashes_Valid() const{
    return m_display_activity_hashes_isValid;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::isDisplayAsStatTracker() const {
    return m_display_as_stat_tracker;
}
void OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::setDisplayAsStatTracker(const bool &display_as_stat_tracker) {
    m_display_as_stat_tracker = display_as_stat_tracker;
    m_display_as_stat_tracker_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::is_display_as_stat_tracker_Set() const{
    return m_display_as_stat_tracker_isSet;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::is_display_as_stat_tracker_Valid() const{
    return m_display_as_stat_tracker_isValid;
}

QString OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::getNarrative() const {
    return m_narrative;
}
void OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::setNarrative(const QString &narrative) {
    m_narrative = narrative;
    m_narrative_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::is_narrative_Set() const{
    return m_narrative_isSet;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::is_narrative_Valid() const{
    return m_narrative_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::getObjectiveHashes() const {
    return m_objective_hashes;
}
void OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::setObjectiveHashes(const QList<qint32> &objective_hashes) {
    m_objective_hashes = objective_hashes;
    m_objective_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::is_objective_hashes_Set() const{
    return m_objective_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::is_objective_hashes_Valid() const{
    return m_objective_hashes_isValid;
}

QString OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::getObjectiveVerbName() const {
    return m_objective_verb_name;
}
void OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::setObjectiveVerbName(const QString &objective_verb_name) {
    m_objective_verb_name = objective_verb_name;
    m_objective_verb_name_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::is_objective_verb_name_Set() const{
    return m_objective_verb_name_isSet;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::is_objective_verb_name_Valid() const{
    return m_objective_verb_name_isValid;
}

QList<OAIDestiny_Definitions_DestinyObjectiveDisplayProperties> OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::getPerObjectiveDisplayProperties() const {
    return m_per_objective_display_properties;
}
void OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::setPerObjectiveDisplayProperties(const QList<OAIDestiny_Definitions_DestinyObjectiveDisplayProperties> &per_objective_display_properties) {
    m_per_objective_display_properties = per_objective_display_properties;
    m_per_objective_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::is_per_objective_display_properties_Set() const{
    return m_per_objective_display_properties_isSet;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::is_per_objective_display_properties_Valid() const{
    return m_per_objective_display_properties_isValid;
}

qint32 OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::getQuestTypeHash() const {
    return m_quest_type_hash;
}
void OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::setQuestTypeHash(const qint32 &quest_type_hash) {
    m_quest_type_hash = quest_type_hash;
    m_quest_type_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::is_quest_type_hash_Set() const{
    return m_quest_type_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::is_quest_type_hash_Valid() const{
    return m_quest_type_hash_isValid;
}

QString OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::getQuestTypeIdentifier() const {
    return m_quest_type_identifier;
}
void OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::setQuestTypeIdentifier(const QString &quest_type_identifier) {
    m_quest_type_identifier = quest_type_identifier;
    m_quest_type_identifier_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::is_quest_type_identifier_Set() const{
    return m_quest_type_identifier_isSet;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::is_quest_type_identifier_Valid() const{
    return m_quest_type_identifier_isValid;
}

qint32 OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::getQuestlineItemHash() const {
    return m_questline_item_hash;
}
void OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::setQuestlineItemHash(const qint32 &questline_item_hash) {
    m_questline_item_hash = questline_item_hash;
    m_questline_item_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::is_questline_item_hash_Set() const{
    return m_questline_item_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::is_questline_item_hash_Valid() const{
    return m_questline_item_hash_isValid;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::isRequireFullObjectiveCompletion() const {
    return m_require_full_objective_completion;
}
void OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::setRequireFullObjectiveCompletion(const bool &require_full_objective_completion) {
    m_require_full_objective_completion = require_full_objective_completion;
    m_require_full_objective_completion_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::is_require_full_objective_completion_Set() const{
    return m_require_full_objective_completion_isSet;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::is_require_full_objective_completion_Valid() const{
    return m_require_full_objective_completion_isValid;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_activity_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_as_stat_tracker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_narrative_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_objective_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_objective_verb_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_objective_display_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quest_type_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quest_type_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_questline_item_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_full_objective_completion_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyItemObjectiveBlockDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
