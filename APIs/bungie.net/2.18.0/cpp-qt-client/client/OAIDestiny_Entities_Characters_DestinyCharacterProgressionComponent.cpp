/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent() {
    this->initializeModel();
}

OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::~OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent() {}

void OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::initializeModel() {

    m_checklists_isSet = false;
    m_checklists_isValid = false;

    m_factions_isSet = false;
    m_factions_isValid = false;

    m_milestones_isSet = false;
    m_milestones_isValid = false;

    m_progressions_isSet = false;
    m_progressions_isValid = false;

    m_quests_isSet = false;
    m_quests_isValid = false;

    m_seasonal_artifact_isSet = false;
    m_seasonal_artifact_isValid = false;

    m_uninstanced_item_objectives_isSet = false;
    m_uninstanced_item_objectives_isValid = false;

    m_uninstanced_item_perks_isSet = false;
    m_uninstanced_item_perks_isValid = false;
}

void OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::fromJsonObject(QJsonObject json) {

    if(json["checklists"].isObject()){
        auto varmap = json["checklists"].toObject().toVariantMap();
        m_checklists_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QMap<QString, bool> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_checklists_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_checklists_isSet &= !jval.isNull() && m_checklists_isValid;
                m_checklists.insert(m_checklists.end(), val, item);
            }
        }
    }

    m_factions_isValid = ::OpenAPI::fromJsonValue(m_factions, json[QString("factions")]);
    m_factions_isSet = !json[QString("factions")].isNull() && m_factions_isValid;

    m_milestones_isValid = ::OpenAPI::fromJsonValue(m_milestones, json[QString("milestones")]);
    m_milestones_isSet = !json[QString("milestones")].isNull() && m_milestones_isValid;

    m_progressions_isValid = ::OpenAPI::fromJsonValue(m_progressions, json[QString("progressions")]);
    m_progressions_isSet = !json[QString("progressions")].isNull() && m_progressions_isValid;

    m_quests_isValid = ::OpenAPI::fromJsonValue(m_quests, json[QString("quests")]);
    m_quests_isSet = !json[QString("quests")].isNull() && m_quests_isValid;

    m_seasonal_artifact_isValid = ::OpenAPI::fromJsonValue(m_seasonal_artifact, json[QString("seasonalArtifact")]);
    m_seasonal_artifact_isSet = !json[QString("seasonalArtifact")].isNull() && m_seasonal_artifact_isValid;

    if(json["uninstancedItemObjectives"].isObject()){
        auto varmap = json["uninstancedItemObjectives"].toObject().toVariantMap();
        m_uninstanced_item_objectives_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<OAIDestiny_Quests_DestinyObjectiveProgress> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_uninstanced_item_objectives_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_uninstanced_item_objectives_isSet &= !jval.isNull() && m_uninstanced_item_objectives_isValid;
                m_uninstanced_item_objectives.insert(m_uninstanced_item_objectives.end(), val, item);
            }
        }
    }

    m_uninstanced_item_perks_isValid = ::OpenAPI::fromJsonValue(m_uninstanced_item_perks, json[QString("uninstancedItemPerks")]);
    m_uninstanced_item_perks_isSet = !json[QString("uninstancedItemPerks")].isNull() && m_uninstanced_item_perks_isValid;
}

QString OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_checklists.size() > 0) {
        
        obj.insert(QString("checklists"), toJsonValue(m_checklists));
    }
    if (m_factions.size() > 0) {
        obj.insert(QString("factions"), ::OpenAPI::toJsonValue(m_factions));
    }
    if (m_milestones.size() > 0) {
        obj.insert(QString("milestones"), ::OpenAPI::toJsonValue(m_milestones));
    }
    if (m_progressions.size() > 0) {
        obj.insert(QString("progressions"), ::OpenAPI::toJsonValue(m_progressions));
    }
    if (m_quests.size() > 0) {
        obj.insert(QString("quests"), ::OpenAPI::toJsonValue(m_quests));
    }
    if (m_seasonal_artifact.isSet()) {
        obj.insert(QString("seasonalArtifact"), ::OpenAPI::toJsonValue(m_seasonal_artifact));
    }
    if (m_uninstanced_item_objectives.size() > 0) {
        
        obj.insert(QString("uninstancedItemObjectives"), toJsonValue(m_uninstanced_item_objectives));
    }
    if (m_uninstanced_item_perks.size() > 0) {
        obj.insert(QString("uninstancedItemPerks"), ::OpenAPI::toJsonValue(m_uninstanced_item_perks));
    }
    return obj;
}

QMap<QString, QMap<QString, bool>> OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::getChecklists() const {
    return m_checklists;
}
void OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::setChecklists(const QMap<QString, QMap<QString, bool>> &checklists) {
    m_checklists = checklists;
    m_checklists_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::is_checklists_Set() const{
    return m_checklists_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::is_checklists_Valid() const{
    return m_checklists_isValid;
}

QMap<QString, OAIDestiny_Progression_DestinyFactionProgression> OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::getFactions() const {
    return m_factions;
}
void OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::setFactions(const QMap<QString, OAIDestiny_Progression_DestinyFactionProgression> &factions) {
    m_factions = factions;
    m_factions_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::is_factions_Set() const{
    return m_factions_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::is_factions_Valid() const{
    return m_factions_isValid;
}

QMap<QString, OAIDestiny_Milestones_DestinyMilestone> OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::getMilestones() const {
    return m_milestones;
}
void OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::setMilestones(const QMap<QString, OAIDestiny_Milestones_DestinyMilestone> &milestones) {
    m_milestones = milestones;
    m_milestones_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::is_milestones_Set() const{
    return m_milestones_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::is_milestones_Valid() const{
    return m_milestones_isValid;
}

QMap<QString, OAIDestiny_DestinyProgression> OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::getProgressions() const {
    return m_progressions;
}
void OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::setProgressions(const QMap<QString, OAIDestiny_DestinyProgression> &progressions) {
    m_progressions = progressions;
    m_progressions_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::is_progressions_Set() const{
    return m_progressions_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::is_progressions_Valid() const{
    return m_progressions_isValid;
}

QList<OAIDestiny_Quests_DestinyQuestStatus> OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::getQuests() const {
    return m_quests;
}
void OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::setQuests(const QList<OAIDestiny_Quests_DestinyQuestStatus> &quests) {
    m_quests = quests;
    m_quests_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::is_quests_Set() const{
    return m_quests_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::is_quests_Valid() const{
    return m_quests_isValid;
}

OAIDestiny_Artifacts_DestinyArtifactCharacterScoped OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::getSeasonalArtifact() const {
    return m_seasonal_artifact;
}
void OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::setSeasonalArtifact(const OAIDestiny_Artifacts_DestinyArtifactCharacterScoped &seasonal_artifact) {
    m_seasonal_artifact = seasonal_artifact;
    m_seasonal_artifact_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::is_seasonal_artifact_Set() const{
    return m_seasonal_artifact_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::is_seasonal_artifact_Valid() const{
    return m_seasonal_artifact_isValid;
}

QMap<QString, QList<OAIDestiny_Quests_DestinyObjectiveProgress>> OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::getUninstancedItemObjectives() const {
    return m_uninstanced_item_objectives;
}
void OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::setUninstancedItemObjectives(const QMap<QString, QList<OAIDestiny_Quests_DestinyObjectiveProgress>> &uninstanced_item_objectives) {
    m_uninstanced_item_objectives = uninstanced_item_objectives;
    m_uninstanced_item_objectives_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::is_uninstanced_item_objectives_Set() const{
    return m_uninstanced_item_objectives_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::is_uninstanced_item_objectives_Valid() const{
    return m_uninstanced_item_objectives_isValid;
}

QMap<QString, OAIDestiny_Entities_Items_DestinyItemPerksComponent> OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::getUninstancedItemPerks() const {
    return m_uninstanced_item_perks;
}
void OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::setUninstancedItemPerks(const QMap<QString, OAIDestiny_Entities_Items_DestinyItemPerksComponent> &uninstanced_item_perks) {
    m_uninstanced_item_perks = uninstanced_item_perks;
    m_uninstanced_item_perks_isSet = true;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::is_uninstanced_item_perks_Set() const{
    return m_uninstanced_item_perks_isSet;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::is_uninstanced_item_perks_Valid() const{
    return m_uninstanced_item_perks_isValid;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checklists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_factions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestones.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_progressions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_seasonal_artifact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uninstanced_item_objectives.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uninstanced_item_perks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Entities_Characters_DestinyCharacterProgressionComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
