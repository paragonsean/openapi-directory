/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrending_TrendingEntryDestinyRitual.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrending_TrendingEntryDestinyRitual::OAITrending_TrendingEntryDestinyRitual(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrending_TrendingEntryDestinyRitual::OAITrending_TrendingEntryDestinyRitual() {
    this->initializeModel();
}

OAITrending_TrendingEntryDestinyRitual::~OAITrending_TrendingEntryDestinyRitual() {}

void OAITrending_TrendingEntryDestinyRitual::initializeModel() {

    m_date_end_isSet = false;
    m_date_end_isValid = false;

    m_date_start_isSet = false;
    m_date_start_isValid = false;

    m_event_content_isSet = false;
    m_event_content_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_milestone_details_isSet = false;
    m_milestone_details_isValid = false;

    m_subtitle_isSet = false;
    m_subtitle_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAITrending_TrendingEntryDestinyRitual::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrending_TrendingEntryDestinyRitual::fromJsonObject(QJsonObject json) {

    m_date_end_isValid = ::OpenAPI::fromJsonValue(m_date_end, json[QString("dateEnd")]);
    m_date_end_isSet = !json[QString("dateEnd")].isNull() && m_date_end_isValid;

    m_date_start_isValid = ::OpenAPI::fromJsonValue(m_date_start, json[QString("dateStart")]);
    m_date_start_isSet = !json[QString("dateStart")].isNull() && m_date_start_isValid;

    m_event_content_isValid = ::OpenAPI::fromJsonValue(m_event_content, json[QString("eventContent")]);
    m_event_content_isSet = !json[QString("eventContent")].isNull() && m_event_content_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_milestone_details_isValid = ::OpenAPI::fromJsonValue(m_milestone_details, json[QString("milestoneDetails")]);
    m_milestone_details_isSet = !json[QString("milestoneDetails")].isNull() && m_milestone_details_isValid;

    m_subtitle_isValid = ::OpenAPI::fromJsonValue(m_subtitle, json[QString("subtitle")]);
    m_subtitle_isSet = !json[QString("subtitle")].isNull() && m_subtitle_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAITrending_TrendingEntryDestinyRitual::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrending_TrendingEntryDestinyRitual::asJsonObject() const {
    QJsonObject obj;
    if (m_date_end_isSet) {
        obj.insert(QString("dateEnd"), ::OpenAPI::toJsonValue(m_date_end));
    }
    if (m_date_start_isSet) {
        obj.insert(QString("dateStart"), ::OpenAPI::toJsonValue(m_date_start));
    }
    if (m_event_content.isSet()) {
        obj.insert(QString("eventContent"), ::OpenAPI::toJsonValue(m_event_content));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_milestone_details.isSet()) {
        obj.insert(QString("milestoneDetails"), ::OpenAPI::toJsonValue(m_milestone_details));
    }
    if (m_subtitle_isSet) {
        obj.insert(QString("subtitle"), ::OpenAPI::toJsonValue(m_subtitle));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QDateTime OAITrending_TrendingEntryDestinyRitual::getDateEnd() const {
    return m_date_end;
}
void OAITrending_TrendingEntryDestinyRitual::setDateEnd(const QDateTime &date_end) {
    m_date_end = date_end;
    m_date_end_isSet = true;
}

bool OAITrending_TrendingEntryDestinyRitual::is_date_end_Set() const{
    return m_date_end_isSet;
}

bool OAITrending_TrendingEntryDestinyRitual::is_date_end_Valid() const{
    return m_date_end_isValid;
}

QDateTime OAITrending_TrendingEntryDestinyRitual::getDateStart() const {
    return m_date_start;
}
void OAITrending_TrendingEntryDestinyRitual::setDateStart(const QDateTime &date_start) {
    m_date_start = date_start;
    m_date_start_isSet = true;
}

bool OAITrending_TrendingEntryDestinyRitual::is_date_start_Set() const{
    return m_date_start_isSet;
}

bool OAITrending_TrendingEntryDestinyRitual::is_date_start_Valid() const{
    return m_date_start_isValid;
}

OAIDestiny_Milestones_DestinyMilestoneContent OAITrending_TrendingEntryDestinyRitual::getEventContent() const {
    return m_event_content;
}
void OAITrending_TrendingEntryDestinyRitual::setEventContent(const OAIDestiny_Milestones_DestinyMilestoneContent &event_content) {
    m_event_content = event_content;
    m_event_content_isSet = true;
}

bool OAITrending_TrendingEntryDestinyRitual::is_event_content_Set() const{
    return m_event_content_isSet;
}

bool OAITrending_TrendingEntryDestinyRitual::is_event_content_Valid() const{
    return m_event_content_isValid;
}

QString OAITrending_TrendingEntryDestinyRitual::getIcon() const {
    return m_icon;
}
void OAITrending_TrendingEntryDestinyRitual::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAITrending_TrendingEntryDestinyRitual::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAITrending_TrendingEntryDestinyRitual::is_icon_Valid() const{
    return m_icon_isValid;
}

QString OAITrending_TrendingEntryDestinyRitual::getImage() const {
    return m_image;
}
void OAITrending_TrendingEntryDestinyRitual::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAITrending_TrendingEntryDestinyRitual::is_image_Set() const{
    return m_image_isSet;
}

bool OAITrending_TrendingEntryDestinyRitual::is_image_Valid() const{
    return m_image_isValid;
}

OAIDestiny_Milestones_DestinyPublicMilestone OAITrending_TrendingEntryDestinyRitual::getMilestoneDetails() const {
    return m_milestone_details;
}
void OAITrending_TrendingEntryDestinyRitual::setMilestoneDetails(const OAIDestiny_Milestones_DestinyPublicMilestone &milestone_details) {
    m_milestone_details = milestone_details;
    m_milestone_details_isSet = true;
}

bool OAITrending_TrendingEntryDestinyRitual::is_milestone_details_Set() const{
    return m_milestone_details_isSet;
}

bool OAITrending_TrendingEntryDestinyRitual::is_milestone_details_Valid() const{
    return m_milestone_details_isValid;
}

QString OAITrending_TrendingEntryDestinyRitual::getSubtitle() const {
    return m_subtitle;
}
void OAITrending_TrendingEntryDestinyRitual::setSubtitle(const QString &subtitle) {
    m_subtitle = subtitle;
    m_subtitle_isSet = true;
}

bool OAITrending_TrendingEntryDestinyRitual::is_subtitle_Set() const{
    return m_subtitle_isSet;
}

bool OAITrending_TrendingEntryDestinyRitual::is_subtitle_Valid() const{
    return m_subtitle_isValid;
}

QString OAITrending_TrendingEntryDestinyRitual::getTitle() const {
    return m_title;
}
void OAITrending_TrendingEntryDestinyRitual::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAITrending_TrendingEntryDestinyRitual::is_title_Set() const{
    return m_title_isSet;
}

bool OAITrending_TrendingEntryDestinyRitual::is_title_Valid() const{
    return m_title_isValid;
}

bool OAITrending_TrendingEntryDestinyRitual::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestone_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrending_TrendingEntryDestinyRitual::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
