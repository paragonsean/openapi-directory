/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyItemSocketBlockDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::OAIDestiny_Definitions_DestinyItemSocketBlockDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::OAIDestiny_Definitions_DestinyItemSocketBlockDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::~OAIDestiny_Definitions_DestinyItemSocketBlockDefinition() {}

void OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::initializeModel() {

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_intrinsic_sockets_isSet = false;
    m_intrinsic_sockets_isValid = false;

    m_socket_categories_isSet = false;
    m_socket_categories_isValid = false;

    m_socket_entries_isSet = false;
    m_socket_entries_isValid = false;
}

void OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::fromJsonObject(QJsonObject json) {

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_intrinsic_sockets_isValid = ::OpenAPI::fromJsonValue(m_intrinsic_sockets, json[QString("intrinsicSockets")]);
    m_intrinsic_sockets_isSet = !json[QString("intrinsicSockets")].isNull() && m_intrinsic_sockets_isValid;

    m_socket_categories_isValid = ::OpenAPI::fromJsonValue(m_socket_categories, json[QString("socketCategories")]);
    m_socket_categories_isSet = !json[QString("socketCategories")].isNull() && m_socket_categories_isValid;

    m_socket_entries_isValid = ::OpenAPI::fromJsonValue(m_socket_entries, json[QString("socketEntries")]);
    m_socket_entries_isSet = !json[QString("socketEntries")].isNull() && m_socket_entries_isValid;
}

QString OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_intrinsic_sockets.size() > 0) {
        obj.insert(QString("intrinsicSockets"), ::OpenAPI::toJsonValue(m_intrinsic_sockets));
    }
    if (m_socket_categories.size() > 0) {
        obj.insert(QString("socketCategories"), ::OpenAPI::toJsonValue(m_socket_categories));
    }
    if (m_socket_entries.size() > 0) {
        obj.insert(QString("socketEntries"), ::OpenAPI::toJsonValue(m_socket_entries));
    }
    return obj;
}

QString OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::getDetail() const {
    return m_detail;
}
void OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::is_detail_Valid() const{
    return m_detail_isValid;
}

QList<OAIDestiny_Definitions_DestinyItemIntrinsicSocketEntryDefinition> OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::getIntrinsicSockets() const {
    return m_intrinsic_sockets;
}
void OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::setIntrinsicSockets(const QList<OAIDestiny_Definitions_DestinyItemIntrinsicSocketEntryDefinition> &intrinsic_sockets) {
    m_intrinsic_sockets = intrinsic_sockets;
    m_intrinsic_sockets_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::is_intrinsic_sockets_Set() const{
    return m_intrinsic_sockets_isSet;
}

bool OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::is_intrinsic_sockets_Valid() const{
    return m_intrinsic_sockets_isValid;
}

QList<OAIDestiny_Definitions_DestinyItemSocketCategoryDefinition> OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::getSocketCategories() const {
    return m_socket_categories;
}
void OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::setSocketCategories(const QList<OAIDestiny_Definitions_DestinyItemSocketCategoryDefinition> &socket_categories) {
    m_socket_categories = socket_categories;
    m_socket_categories_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::is_socket_categories_Set() const{
    return m_socket_categories_isSet;
}

bool OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::is_socket_categories_Valid() const{
    return m_socket_categories_isValid;
}

QList<OAIDestiny_Definitions_DestinyItemSocketEntryDefinition> OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::getSocketEntries() const {
    return m_socket_entries;
}
void OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::setSocketEntries(const QList<OAIDestiny_Definitions_DestinyItemSocketEntryDefinition> &socket_entries) {
    m_socket_entries = socket_entries;
    m_socket_entries_isSet = true;
}

bool OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::is_socket_entries_Set() const{
    return m_socket_entries_isSet;
}

bool OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::is_socket_entries_Valid() const{
    return m_socket_entries_isValid;
}

bool OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intrinsic_sockets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_socket_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_socket_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyItemSocketBlockDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
