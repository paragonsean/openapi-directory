/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyInventoryBucketDefinition.h
 *
 * An Inventory (be it Character or Profile level) is comprised of many Buckets. An example of a bucket is \&quot;Primary Weapons\&quot;, where all of the primary weapons on a character are gathered together into a single visual element in the UI: a subset of the inventory that has a limited number of slots, and in this case also has an associated Equipment Slot for equipping an item in the bucket.  Item definitions declare what their \&quot;default\&quot; bucket is (DestinyInventoryItemDefinition.inventory.bucketTypeHash), and Item instances will tell you which bucket they are currently residing in (DestinyItemComponent.bucketHash). You can use this information along with the DestinyInventoryBucketDefinition to show these items grouped by bucket.  You cannot transfer an item to a bucket that is not its Default without going through a Vendor&#39;s \&quot;accepted items\&quot; (DestinyVendorDefinition.acceptedItems). This is how transfer functionality like the Vault is implemented, as a feature of a Vendor. See the vendor&#39;s acceptedItems property for more details.
 */

#ifndef OAIDestiny_Definitions_DestinyInventoryBucketDefinition_H
#define OAIDestiny_Definitions_DestinyInventoryBucketDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition;

class OAIDestiny_Definitions_DestinyInventoryBucketDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyInventoryBucketDefinition();
    OAIDestiny_Definitions_DestinyInventoryBucketDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyInventoryBucketDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBucketOrder() const;
    void setBucketOrder(const qint32 &bucket_order);
    bool is_bucket_order_Set() const;
    bool is_bucket_order_Valid() const;

    qint32 getCategory() const;
    void setCategory(const qint32 &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition getDisplayProperties() const;
    void setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties);
    bool is_display_properties_Set() const;
    bool is_display_properties_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    bool isFifo() const;
    void setFifo(const bool &fifo);
    bool is_fifo_Set() const;
    bool is_fifo_Valid() const;

    bool isHasTransferDestination() const;
    void setHasTransferDestination(const bool &has_transfer_destination);
    bool is_has_transfer_destination_Set() const;
    bool is_has_transfer_destination_Valid() const;

    qint32 getHash() const;
    void setHash(const qint32 &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    qint32 getIndex() const;
    void setIndex(const qint32 &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    qint32 getItemCount() const;
    void setItemCount(const qint32 &item_count);
    bool is_item_count_Set() const;
    bool is_item_count_Valid() const;

    qint32 getLocation() const;
    void setLocation(const qint32 &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    bool isRedacted() const;
    void setRedacted(const bool &redacted);
    bool is_redacted_Set() const;
    bool is_redacted_Valid() const;

    qint32 getScope() const;
    void setScope(const qint32 &scope);
    bool is_scope_Set() const;
    bool is_scope_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_bucket_order;
    bool m_bucket_order_isSet;
    bool m_bucket_order_isValid;

    qint32 m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition m_display_properties;
    bool m_display_properties_isSet;
    bool m_display_properties_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    bool m_fifo;
    bool m_fifo_isSet;
    bool m_fifo_isValid;

    bool m_has_transfer_destination;
    bool m_has_transfer_destination_isSet;
    bool m_has_transfer_destination_isValid;

    qint32 m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    qint32 m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    qint32 m_item_count;
    bool m_item_count_isSet;
    bool m_item_count_isValid;

    qint32 m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    bool m_redacted;
    bool m_redacted_isSet;
    bool m_redacted_isValid;

    qint32 m_scope;
    bool m_scope_isSet;
    bool m_scope_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyInventoryBucketDefinition)

#endif // OAIDestiny_Definitions_DestinyInventoryBucketDefinition_H
