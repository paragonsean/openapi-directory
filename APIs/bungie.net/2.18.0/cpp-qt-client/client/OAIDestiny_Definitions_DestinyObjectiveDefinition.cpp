/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyObjectiveDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyObjectiveDefinition::OAIDestiny_Definitions_DestinyObjectiveDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyObjectiveDefinition::OAIDestiny_Definitions_DestinyObjectiveDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyObjectiveDefinition::~OAIDestiny_Definitions_DestinyObjectiveDefinition() {}

void OAIDestiny_Definitions_DestinyObjectiveDefinition::initializeModel() {

    m_allow_negative_value_isSet = false;
    m_allow_negative_value_isValid = false;

    m_allow_overcompletion_isSet = false;
    m_allow_overcompletion_isValid = false;

    m_allow_value_change_when_completed_isSet = false;
    m_allow_value_change_when_completed_isValid = false;

    m_completed_value_style_isSet = false;
    m_completed_value_style_isValid = false;

    m_completion_value_isSet = false;
    m_completion_value_isValid = false;

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_in_progress_value_style_isSet = false;
    m_in_progress_value_style_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_is_counting_downward_isSet = false;
    m_is_counting_downward_isValid = false;

    m_location_hash_isSet = false;
    m_location_hash_isValid = false;

    m_minimum_visibility_threshold_isSet = false;
    m_minimum_visibility_threshold_isValid = false;

    m_perks_isSet = false;
    m_perks_isValid = false;

    m_progress_description_isSet = false;
    m_progress_description_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_show_value_on_complete_isSet = false;
    m_show_value_on_complete_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;

    m_ui_label_isSet = false;
    m_ui_label_isValid = false;

    m_ui_style_isSet = false;
    m_ui_style_isValid = false;

    m_value_style_isSet = false;
    m_value_style_isValid = false;
}

void OAIDestiny_Definitions_DestinyObjectiveDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyObjectiveDefinition::fromJsonObject(QJsonObject json) {

    m_allow_negative_value_isValid = ::OpenAPI::fromJsonValue(m_allow_negative_value, json[QString("allowNegativeValue")]);
    m_allow_negative_value_isSet = !json[QString("allowNegativeValue")].isNull() && m_allow_negative_value_isValid;

    m_allow_overcompletion_isValid = ::OpenAPI::fromJsonValue(m_allow_overcompletion, json[QString("allowOvercompletion")]);
    m_allow_overcompletion_isSet = !json[QString("allowOvercompletion")].isNull() && m_allow_overcompletion_isValid;

    m_allow_value_change_when_completed_isValid = ::OpenAPI::fromJsonValue(m_allow_value_change_when_completed, json[QString("allowValueChangeWhenCompleted")]);
    m_allow_value_change_when_completed_isSet = !json[QString("allowValueChangeWhenCompleted")].isNull() && m_allow_value_change_when_completed_isValid;

    m_completed_value_style_isValid = ::OpenAPI::fromJsonValue(m_completed_value_style, json[QString("completedValueStyle")]);
    m_completed_value_style_isSet = !json[QString("completedValueStyle")].isNull() && m_completed_value_style_isValid;

    m_completion_value_isValid = ::OpenAPI::fromJsonValue(m_completion_value, json[QString("completionValue")]);
    m_completion_value_isSet = !json[QString("completionValue")].isNull() && m_completion_value_isValid;

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_in_progress_value_style_isValid = ::OpenAPI::fromJsonValue(m_in_progress_value_style, json[QString("inProgressValueStyle")]);
    m_in_progress_value_style_isSet = !json[QString("inProgressValueStyle")].isNull() && m_in_progress_value_style_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_is_counting_downward_isValid = ::OpenAPI::fromJsonValue(m_is_counting_downward, json[QString("isCountingDownward")]);
    m_is_counting_downward_isSet = !json[QString("isCountingDownward")].isNull() && m_is_counting_downward_isValid;

    m_location_hash_isValid = ::OpenAPI::fromJsonValue(m_location_hash, json[QString("locationHash")]);
    m_location_hash_isSet = !json[QString("locationHash")].isNull() && m_location_hash_isValid;

    m_minimum_visibility_threshold_isValid = ::OpenAPI::fromJsonValue(m_minimum_visibility_threshold, json[QString("minimumVisibilityThreshold")]);
    m_minimum_visibility_threshold_isSet = !json[QString("minimumVisibilityThreshold")].isNull() && m_minimum_visibility_threshold_isValid;

    m_perks_isValid = ::OpenAPI::fromJsonValue(m_perks, json[QString("perks")]);
    m_perks_isSet = !json[QString("perks")].isNull() && m_perks_isValid;

    m_progress_description_isValid = ::OpenAPI::fromJsonValue(m_progress_description, json[QString("progressDescription")]);
    m_progress_description_isSet = !json[QString("progressDescription")].isNull() && m_progress_description_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_show_value_on_complete_isValid = ::OpenAPI::fromJsonValue(m_show_value_on_complete, json[QString("showValueOnComplete")]);
    m_show_value_on_complete_isSet = !json[QString("showValueOnComplete")].isNull() && m_show_value_on_complete_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;

    m_ui_label_isValid = ::OpenAPI::fromJsonValue(m_ui_label, json[QString("uiLabel")]);
    m_ui_label_isSet = !json[QString("uiLabel")].isNull() && m_ui_label_isValid;

    m_ui_style_isValid = ::OpenAPI::fromJsonValue(m_ui_style, json[QString("uiStyle")]);
    m_ui_style_isSet = !json[QString("uiStyle")].isNull() && m_ui_style_isValid;

    m_value_style_isValid = ::OpenAPI::fromJsonValue(m_value_style, json[QString("valueStyle")]);
    m_value_style_isSet = !json[QString("valueStyle")].isNull() && m_value_style_isValid;
}

QString OAIDestiny_Definitions_DestinyObjectiveDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyObjectiveDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_negative_value_isSet) {
        obj.insert(QString("allowNegativeValue"), ::OpenAPI::toJsonValue(m_allow_negative_value));
    }
    if (m_allow_overcompletion_isSet) {
        obj.insert(QString("allowOvercompletion"), ::OpenAPI::toJsonValue(m_allow_overcompletion));
    }
    if (m_allow_value_change_when_completed_isSet) {
        obj.insert(QString("allowValueChangeWhenCompleted"), ::OpenAPI::toJsonValue(m_allow_value_change_when_completed));
    }
    if (m_completed_value_style_isSet) {
        obj.insert(QString("completedValueStyle"), ::OpenAPI::toJsonValue(m_completed_value_style));
    }
    if (m_completion_value_isSet) {
        obj.insert(QString("completionValue"), ::OpenAPI::toJsonValue(m_completion_value));
    }
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_in_progress_value_style_isSet) {
        obj.insert(QString("inProgressValueStyle"), ::OpenAPI::toJsonValue(m_in_progress_value_style));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_is_counting_downward_isSet) {
        obj.insert(QString("isCountingDownward"), ::OpenAPI::toJsonValue(m_is_counting_downward));
    }
    if (m_location_hash_isSet) {
        obj.insert(QString("locationHash"), ::OpenAPI::toJsonValue(m_location_hash));
    }
    if (m_minimum_visibility_threshold_isSet) {
        obj.insert(QString("minimumVisibilityThreshold"), ::OpenAPI::toJsonValue(m_minimum_visibility_threshold));
    }
    if (m_perks.isSet()) {
        obj.insert(QString("perks"), ::OpenAPI::toJsonValue(m_perks));
    }
    if (m_progress_description_isSet) {
        obj.insert(QString("progressDescription"), ::OpenAPI::toJsonValue(m_progress_description));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_show_value_on_complete_isSet) {
        obj.insert(QString("showValueOnComplete"), ::OpenAPI::toJsonValue(m_show_value_on_complete));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    if (m_ui_label_isSet) {
        obj.insert(QString("uiLabel"), ::OpenAPI::toJsonValue(m_ui_label));
    }
    if (m_ui_style_isSet) {
        obj.insert(QString("uiStyle"), ::OpenAPI::toJsonValue(m_ui_style));
    }
    if (m_value_style_isSet) {
        obj.insert(QString("valueStyle"), ::OpenAPI::toJsonValue(m_value_style));
    }
    return obj;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::isAllowNegativeValue() const {
    return m_allow_negative_value;
}
void OAIDestiny_Definitions_DestinyObjectiveDefinition::setAllowNegativeValue(const bool &allow_negative_value) {
    m_allow_negative_value = allow_negative_value;
    m_allow_negative_value_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_allow_negative_value_Set() const{
    return m_allow_negative_value_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_allow_negative_value_Valid() const{
    return m_allow_negative_value_isValid;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::isAllowOvercompletion() const {
    return m_allow_overcompletion;
}
void OAIDestiny_Definitions_DestinyObjectiveDefinition::setAllowOvercompletion(const bool &allow_overcompletion) {
    m_allow_overcompletion = allow_overcompletion;
    m_allow_overcompletion_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_allow_overcompletion_Set() const{
    return m_allow_overcompletion_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_allow_overcompletion_Valid() const{
    return m_allow_overcompletion_isValid;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::isAllowValueChangeWhenCompleted() const {
    return m_allow_value_change_when_completed;
}
void OAIDestiny_Definitions_DestinyObjectiveDefinition::setAllowValueChangeWhenCompleted(const bool &allow_value_change_when_completed) {
    m_allow_value_change_when_completed = allow_value_change_when_completed;
    m_allow_value_change_when_completed_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_allow_value_change_when_completed_Set() const{
    return m_allow_value_change_when_completed_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_allow_value_change_when_completed_Valid() const{
    return m_allow_value_change_when_completed_isValid;
}

qint32 OAIDestiny_Definitions_DestinyObjectiveDefinition::getCompletedValueStyle() const {
    return m_completed_value_style;
}
void OAIDestiny_Definitions_DestinyObjectiveDefinition::setCompletedValueStyle(const qint32 &completed_value_style) {
    m_completed_value_style = completed_value_style;
    m_completed_value_style_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_completed_value_style_Set() const{
    return m_completed_value_style_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_completed_value_style_Valid() const{
    return m_completed_value_style_isValid;
}

qint32 OAIDestiny_Definitions_DestinyObjectiveDefinition::getCompletionValue() const {
    return m_completion_value;
}
void OAIDestiny_Definitions_DestinyObjectiveDefinition::setCompletionValue(const qint32 &completion_value) {
    m_completion_value = completion_value;
    m_completion_value_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_completion_value_Set() const{
    return m_completion_value_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_completion_value_Valid() const{
    return m_completion_value_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_DestinyObjectiveDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_DestinyObjectiveDefinition::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

qint32 OAIDestiny_Definitions_DestinyObjectiveDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_DestinyObjectiveDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyObjectiveDefinition::getInProgressValueStyle() const {
    return m_in_progress_value_style;
}
void OAIDestiny_Definitions_DestinyObjectiveDefinition::setInProgressValueStyle(const qint32 &in_progress_value_style) {
    m_in_progress_value_style = in_progress_value_style;
    m_in_progress_value_style_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_in_progress_value_style_Set() const{
    return m_in_progress_value_style_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_in_progress_value_style_Valid() const{
    return m_in_progress_value_style_isValid;
}

qint32 OAIDestiny_Definitions_DestinyObjectiveDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_DestinyObjectiveDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_index_Valid() const{
    return m_index_isValid;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::isIsCountingDownward() const {
    return m_is_counting_downward;
}
void OAIDestiny_Definitions_DestinyObjectiveDefinition::setIsCountingDownward(const bool &is_counting_downward) {
    m_is_counting_downward = is_counting_downward;
    m_is_counting_downward_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_is_counting_downward_Set() const{
    return m_is_counting_downward_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_is_counting_downward_Valid() const{
    return m_is_counting_downward_isValid;
}

qint32 OAIDestiny_Definitions_DestinyObjectiveDefinition::getLocationHash() const {
    return m_location_hash;
}
void OAIDestiny_Definitions_DestinyObjectiveDefinition::setLocationHash(const qint32 &location_hash) {
    m_location_hash = location_hash;
    m_location_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_location_hash_Set() const{
    return m_location_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_location_hash_Valid() const{
    return m_location_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyObjectiveDefinition::getMinimumVisibilityThreshold() const {
    return m_minimum_visibility_threshold;
}
void OAIDestiny_Definitions_DestinyObjectiveDefinition::setMinimumVisibilityThreshold(const qint32 &minimum_visibility_threshold) {
    m_minimum_visibility_threshold = minimum_visibility_threshold;
    m_minimum_visibility_threshold_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_minimum_visibility_threshold_Set() const{
    return m_minimum_visibility_threshold_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_minimum_visibility_threshold_Valid() const{
    return m_minimum_visibility_threshold_isValid;
}

OAIDestiny_Definitions_DestinyObjectivePerkEntryDefinition OAIDestiny_Definitions_DestinyObjectiveDefinition::getPerks() const {
    return m_perks;
}
void OAIDestiny_Definitions_DestinyObjectiveDefinition::setPerks(const OAIDestiny_Definitions_DestinyObjectivePerkEntryDefinition &perks) {
    m_perks = perks;
    m_perks_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_perks_Set() const{
    return m_perks_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_perks_Valid() const{
    return m_perks_isValid;
}

QString OAIDestiny_Definitions_DestinyObjectiveDefinition::getProgressDescription() const {
    return m_progress_description;
}
void OAIDestiny_Definitions_DestinyObjectiveDefinition::setProgressDescription(const QString &progress_description) {
    m_progress_description = progress_description;
    m_progress_description_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_progress_description_Set() const{
    return m_progress_description_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_progress_description_Valid() const{
    return m_progress_description_isValid;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_DestinyObjectiveDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

qint32 OAIDestiny_Definitions_DestinyObjectiveDefinition::getScope() const {
    return m_scope;
}
void OAIDestiny_Definitions_DestinyObjectiveDefinition::setScope(const qint32 &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::isShowValueOnComplete() const {
    return m_show_value_on_complete;
}
void OAIDestiny_Definitions_DestinyObjectiveDefinition::setShowValueOnComplete(const bool &show_value_on_complete) {
    m_show_value_on_complete = show_value_on_complete;
    m_show_value_on_complete_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_show_value_on_complete_Set() const{
    return m_show_value_on_complete_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_show_value_on_complete_Valid() const{
    return m_show_value_on_complete_isValid;
}

OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition OAIDestiny_Definitions_DestinyObjectiveDefinition::getStats() const {
    return m_stats;
}
void OAIDestiny_Definitions_DestinyObjectiveDefinition::setStats(const OAIDestiny_Definitions_DestinyObjectiveStatEntryDefinition &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_stats_Valid() const{
    return m_stats_isValid;
}

QString OAIDestiny_Definitions_DestinyObjectiveDefinition::getUiLabel() const {
    return m_ui_label;
}
void OAIDestiny_Definitions_DestinyObjectiveDefinition::setUiLabel(const QString &ui_label) {
    m_ui_label = ui_label;
    m_ui_label_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_ui_label_Set() const{
    return m_ui_label_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_ui_label_Valid() const{
    return m_ui_label_isValid;
}

qint32 OAIDestiny_Definitions_DestinyObjectiveDefinition::getUiStyle() const {
    return m_ui_style;
}
void OAIDestiny_Definitions_DestinyObjectiveDefinition::setUiStyle(const qint32 &ui_style) {
    m_ui_style = ui_style;
    m_ui_style_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_ui_style_Set() const{
    return m_ui_style_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_ui_style_Valid() const{
    return m_ui_style_isValid;
}

qint32 OAIDestiny_Definitions_DestinyObjectiveDefinition::getValueStyle() const {
    return m_value_style;
}
void OAIDestiny_Definitions_DestinyObjectiveDefinition::setValueStyle(const qint32 &value_style) {
    m_value_style = value_style;
    m_value_style_isSet = true;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_value_style_Set() const{
    return m_value_style_isSet;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::is_value_style_Valid() const{
    return m_value_style_isValid;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_negative_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_overcompletion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_value_change_when_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_value_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_progress_value_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_counting_downward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_visibility_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_perks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_value_on_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ui_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ui_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_style_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyObjectiveDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
