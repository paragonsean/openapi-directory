/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyMaterialRequirement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyMaterialRequirement::OAIDestiny_Definitions_DestinyMaterialRequirement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyMaterialRequirement::OAIDestiny_Definitions_DestinyMaterialRequirement() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyMaterialRequirement::~OAIDestiny_Definitions_DestinyMaterialRequirement() {}

void OAIDestiny_Definitions_DestinyMaterialRequirement::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_count_is_constant_isSet = false;
    m_count_is_constant_isValid = false;

    m_delete_on_action_isSet = false;
    m_delete_on_action_isValid = false;

    m_item_hash_isSet = false;
    m_item_hash_isValid = false;

    m_omit_from_requirements_isSet = false;
    m_omit_from_requirements_isValid = false;
}

void OAIDestiny_Definitions_DestinyMaterialRequirement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyMaterialRequirement::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_count_is_constant_isValid = ::OpenAPI::fromJsonValue(m_count_is_constant, json[QString("countIsConstant")]);
    m_count_is_constant_isSet = !json[QString("countIsConstant")].isNull() && m_count_is_constant_isValid;

    m_delete_on_action_isValid = ::OpenAPI::fromJsonValue(m_delete_on_action, json[QString("deleteOnAction")]);
    m_delete_on_action_isSet = !json[QString("deleteOnAction")].isNull() && m_delete_on_action_isValid;

    m_item_hash_isValid = ::OpenAPI::fromJsonValue(m_item_hash, json[QString("itemHash")]);
    m_item_hash_isSet = !json[QString("itemHash")].isNull() && m_item_hash_isValid;

    m_omit_from_requirements_isValid = ::OpenAPI::fromJsonValue(m_omit_from_requirements, json[QString("omitFromRequirements")]);
    m_omit_from_requirements_isSet = !json[QString("omitFromRequirements")].isNull() && m_omit_from_requirements_isValid;
}

QString OAIDestiny_Definitions_DestinyMaterialRequirement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyMaterialRequirement::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_count_is_constant_isSet) {
        obj.insert(QString("countIsConstant"), ::OpenAPI::toJsonValue(m_count_is_constant));
    }
    if (m_delete_on_action_isSet) {
        obj.insert(QString("deleteOnAction"), ::OpenAPI::toJsonValue(m_delete_on_action));
    }
    if (m_item_hash_isSet) {
        obj.insert(QString("itemHash"), ::OpenAPI::toJsonValue(m_item_hash));
    }
    if (m_omit_from_requirements_isSet) {
        obj.insert(QString("omitFromRequirements"), ::OpenAPI::toJsonValue(m_omit_from_requirements));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_DestinyMaterialRequirement::getCount() const {
    return m_count;
}
void OAIDestiny_Definitions_DestinyMaterialRequirement::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIDestiny_Definitions_DestinyMaterialRequirement::is_count_Set() const{
    return m_count_isSet;
}

bool OAIDestiny_Definitions_DestinyMaterialRequirement::is_count_Valid() const{
    return m_count_isValid;
}

bool OAIDestiny_Definitions_DestinyMaterialRequirement::isCountIsConstant() const {
    return m_count_is_constant;
}
void OAIDestiny_Definitions_DestinyMaterialRequirement::setCountIsConstant(const bool &count_is_constant) {
    m_count_is_constant = count_is_constant;
    m_count_is_constant_isSet = true;
}

bool OAIDestiny_Definitions_DestinyMaterialRequirement::is_count_is_constant_Set() const{
    return m_count_is_constant_isSet;
}

bool OAIDestiny_Definitions_DestinyMaterialRequirement::is_count_is_constant_Valid() const{
    return m_count_is_constant_isValid;
}

bool OAIDestiny_Definitions_DestinyMaterialRequirement::isDeleteOnAction() const {
    return m_delete_on_action;
}
void OAIDestiny_Definitions_DestinyMaterialRequirement::setDeleteOnAction(const bool &delete_on_action) {
    m_delete_on_action = delete_on_action;
    m_delete_on_action_isSet = true;
}

bool OAIDestiny_Definitions_DestinyMaterialRequirement::is_delete_on_action_Set() const{
    return m_delete_on_action_isSet;
}

bool OAIDestiny_Definitions_DestinyMaterialRequirement::is_delete_on_action_Valid() const{
    return m_delete_on_action_isValid;
}

qint32 OAIDestiny_Definitions_DestinyMaterialRequirement::getItemHash() const {
    return m_item_hash;
}
void OAIDestiny_Definitions_DestinyMaterialRequirement::setItemHash(const qint32 &item_hash) {
    m_item_hash = item_hash;
    m_item_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyMaterialRequirement::is_item_hash_Set() const{
    return m_item_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyMaterialRequirement::is_item_hash_Valid() const{
    return m_item_hash_isValid;
}

bool OAIDestiny_Definitions_DestinyMaterialRequirement::isOmitFromRequirements() const {
    return m_omit_from_requirements;
}
void OAIDestiny_Definitions_DestinyMaterialRequirement::setOmitFromRequirements(const bool &omit_from_requirements) {
    m_omit_from_requirements = omit_from_requirements;
    m_omit_from_requirements_isSet = true;
}

bool OAIDestiny_Definitions_DestinyMaterialRequirement::is_omit_from_requirements_Set() const{
    return m_omit_from_requirements_isSet;
}

bool OAIDestiny_Definitions_DestinyMaterialRequirement::is_omit_from_requirements_Valid() const{
    return m_omit_from_requirements_isValid;
}

bool OAIDestiny_Definitions_DestinyMaterialRequirement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_is_constant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_on_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_omit_from_requirements_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyMaterialRequirement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
