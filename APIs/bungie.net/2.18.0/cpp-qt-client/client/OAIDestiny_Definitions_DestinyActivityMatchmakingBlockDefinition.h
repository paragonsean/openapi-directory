/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition.h
 *
 * Information about matchmaking and party size for the activity.
 */

#ifndef OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition_H
#define OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition();
    OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isIsMatchmade() const;
    void setIsMatchmade(const bool &is_matchmade);
    bool is_is_matchmade_Set() const;
    bool is_is_matchmade_Valid() const;

    qint32 getMaxParty() const;
    void setMaxParty(const qint32 &max_party);
    bool is_max_party_Set() const;
    bool is_max_party_Valid() const;

    qint32 getMaxPlayers() const;
    void setMaxPlayers(const qint32 &max_players);
    bool is_max_players_Set() const;
    bool is_max_players_Valid() const;

    qint32 getMinParty() const;
    void setMinParty(const qint32 &min_party);
    bool is_min_party_Set() const;
    bool is_min_party_Valid() const;

    bool isRequiresGuardianOath() const;
    void setRequiresGuardianOath(const bool &requires_guardian_oath);
    bool is_requires_guardian_oath_Set() const;
    bool is_requires_guardian_oath_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_is_matchmade;
    bool m_is_matchmade_isSet;
    bool m_is_matchmade_isValid;

    qint32 m_max_party;
    bool m_max_party_isSet;
    bool m_max_party_isValid;

    qint32 m_max_players;
    bool m_max_players_isSet;
    bool m_max_players_isValid;

    qint32 m_min_party;
    bool m_min_party_isSet;
    bool m_min_party_isValid;

    bool m_requires_guardian_oath;
    bool m_requires_guardian_oath_isSet;
    bool m_requires_guardian_oath_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition)

#endif // OAIDestiny_Definitions_DestinyActivityMatchmakingBlockDefinition_H
