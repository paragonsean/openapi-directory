/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_UserSearchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_UserSearchResponse::OAIUser_UserSearchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_UserSearchResponse::OAIUser_UserSearchResponse() {
    this->initializeModel();
}

OAIUser_UserSearchResponse::~OAIUser_UserSearchResponse() {}

void OAIUser_UserSearchResponse::initializeModel() {

    m_has_more_isSet = false;
    m_has_more_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_search_results_isSet = false;
    m_search_results_isValid = false;
}

void OAIUser_UserSearchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_UserSearchResponse::fromJsonObject(QJsonObject json) {

    m_has_more_isValid = ::OpenAPI::fromJsonValue(m_has_more, json[QString("hasMore")]);
    m_has_more_isSet = !json[QString("hasMore")].isNull() && m_has_more_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_search_results_isValid = ::OpenAPI::fromJsonValue(m_search_results, json[QString("searchResults")]);
    m_search_results_isSet = !json[QString("searchResults")].isNull() && m_search_results_isValid;
}

QString OAIUser_UserSearchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_UserSearchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_has_more_isSet) {
        obj.insert(QString("hasMore"), ::OpenAPI::toJsonValue(m_has_more));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_search_results.size() > 0) {
        obj.insert(QString("searchResults"), ::OpenAPI::toJsonValue(m_search_results));
    }
    return obj;
}

bool OAIUser_UserSearchResponse::isHasMore() const {
    return m_has_more;
}
void OAIUser_UserSearchResponse::setHasMore(const bool &has_more) {
    m_has_more = has_more;
    m_has_more_isSet = true;
}

bool OAIUser_UserSearchResponse::is_has_more_Set() const{
    return m_has_more_isSet;
}

bool OAIUser_UserSearchResponse::is_has_more_Valid() const{
    return m_has_more_isValid;
}

qint32 OAIUser_UserSearchResponse::getPage() const {
    return m_page;
}
void OAIUser_UserSearchResponse::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIUser_UserSearchResponse::is_page_Set() const{
    return m_page_isSet;
}

bool OAIUser_UserSearchResponse::is_page_Valid() const{
    return m_page_isValid;
}

QList<OAIUser_UserSearchResponseDetail> OAIUser_UserSearchResponse::getSearchResults() const {
    return m_search_results;
}
void OAIUser_UserSearchResponse::setSearchResults(const QList<OAIUser_UserSearchResponseDetail> &search_results) {
    m_search_results = search_results;
    m_search_results_isSet = true;
}

bool OAIUser_UserSearchResponse::is_search_results_Set() const{
    return m_search_results_isSet;
}

bool OAIUser_UserSearchResponse::is_search_results_Valid() const{
    return m_search_results_isValid;
}

bool OAIUser_UserSearchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_has_more_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_UserSearchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
