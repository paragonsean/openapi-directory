/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIForumApi_H
#define OAI_OAIForumApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICommunityContent_GetCommunityContent_200_response.h"
#include "OAIForum_GetForumTagSuggestions_200_response.h"
#include "OAIForum_GetRecruitmentThreadSummaries_200_response.h"
#include "OAIForum_GetTopicForContent_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIForumApi : public QObject {
    Q_OBJECT

public:
    OAIForumApi(const int timeOut = 0);
    ~OAIForumApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  category_filter qint32 [required]
    * @param[in]  page qint32 [required]
    * @param[in]  quick_date qint32 [required]
    * @param[in]  sort qint32 [required]
    * @param[in]  locales QString [optional]
    */
    virtual void forum_GetCoreTopicsPaged(const qint32 &category_filter, const qint32 &page, const qint32 &quick_date, const qint32 &sort, const ::OpenAPI::OptionalParam<QString> &locales = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  partialtag QString [optional]
    */
    virtual void forum_GetForumTagSuggestions(const ::OpenAPI::OptionalParam<QString> &partialtag = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  topic_id qint64 [required]
    */
    virtual void forum_GetPoll(const qint64 &topic_id);

    /**
    * @param[in]  child_post_id qint64 [required]
    * @param[in]  showbanned QString [optional]
    */
    virtual void forum_GetPostAndParent(const qint64 &child_post_id, const ::OpenAPI::OptionalParam<QString> &showbanned = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  child_post_id qint64 [required]
    * @param[in]  showbanned QString [optional]
    */
    virtual void forum_GetPostAndParentAwaitingApproval(const qint64 &child_post_id, const ::OpenAPI::OptionalParam<QString> &showbanned = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  get_parent_post bool [required]
    * @param[in]  page qint32 [required]
    * @param[in]  page_size qint32 [required]
    * @param[in]  parent_post_id qint64 [required]
    * @param[in]  reply_size qint32 [required]
    * @param[in]  root_thread_mode bool [required]
    * @param[in]  sort_mode qint32 [required]
    * @param[in]  showbanned QString [optional]
    */
    virtual void forum_GetPostsThreadedPaged(const bool &get_parent_post, const qint32 &page, const qint32 &page_size, const qint64 &parent_post_id, const qint32 &reply_size, const bool &root_thread_mode, const qint32 &sort_mode, const ::OpenAPI::OptionalParam<QString> &showbanned = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  child_post_id qint64 [required]
    * @param[in]  page qint32 [required]
    * @param[in]  page_size qint32 [required]
    * @param[in]  reply_size qint32 [required]
    * @param[in]  root_thread_mode bool [required]
    * @param[in]  sort_mode qint32 [required]
    * @param[in]  showbanned QString [optional]
    */
    virtual void forum_GetPostsThreadedPagedFromChild(const qint64 &child_post_id, const qint32 &page, const qint32 &page_size, const qint32 &reply_size, const bool &root_thread_mode, const qint32 &sort_mode, const ::OpenAPI::OptionalParam<QString> &showbanned = ::OpenAPI::OptionalParam<QString>());


    virtual void forum_GetRecruitmentThreadSummaries();

    /**
    * @param[in]  content_id qint64 [required]
    */
    virtual void forum_GetTopicForContent(const qint64 &content_id);

    /**
    * @param[in]  category_filter qint32 [required]
    * @param[in]  group qint64 [required]
    * @param[in]  page qint32 [required]
    * @param[in]  page_size qint32 [required]
    * @param[in]  quick_date qint32 [required]
    * @param[in]  sort qint32 [required]
    * @param[in]  locales QString [optional]
    * @param[in]  tagstring QString [optional]
    */
    virtual void forum_GetTopicsPaged(const qint32 &category_filter, const qint64 &group, const qint32 &page, const qint32 &page_size, const qint32 &quick_date, const qint32 &sort, const ::OpenAPI::OptionalParam<QString> &locales = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tagstring = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void forum_GetCoreTopicsPagedCallback(OAIHttpRequestWorker *worker);
    void forum_GetForumTagSuggestionsCallback(OAIHttpRequestWorker *worker);
    void forum_GetPollCallback(OAIHttpRequestWorker *worker);
    void forum_GetPostAndParentCallback(OAIHttpRequestWorker *worker);
    void forum_GetPostAndParentAwaitingApprovalCallback(OAIHttpRequestWorker *worker);
    void forum_GetPostsThreadedPagedCallback(OAIHttpRequestWorker *worker);
    void forum_GetPostsThreadedPagedFromChildCallback(OAIHttpRequestWorker *worker);
    void forum_GetRecruitmentThreadSummariesCallback(OAIHttpRequestWorker *worker);
    void forum_GetTopicForContentCallback(OAIHttpRequestWorker *worker);
    void forum_GetTopicsPagedCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void forum_GetCoreTopicsPagedSignal(OAICommunityContent_GetCommunityContent_200_response summary);
    void forum_GetForumTagSuggestionsSignal(OAIForum_GetForumTagSuggestions_200_response summary);
    void forum_GetPollSignal(OAICommunityContent_GetCommunityContent_200_response summary);
    void forum_GetPostAndParentSignal(OAICommunityContent_GetCommunityContent_200_response summary);
    void forum_GetPostAndParentAwaitingApprovalSignal(OAICommunityContent_GetCommunityContent_200_response summary);
    void forum_GetPostsThreadedPagedSignal(OAICommunityContent_GetCommunityContent_200_response summary);
    void forum_GetPostsThreadedPagedFromChildSignal(OAICommunityContent_GetCommunityContent_200_response summary);
    void forum_GetRecruitmentThreadSummariesSignal(OAIForum_GetRecruitmentThreadSummaries_200_response summary);
    void forum_GetTopicForContentSignal(OAIForum_GetTopicForContent_200_response summary);
    void forum_GetTopicsPagedSignal(OAICommunityContent_GetCommunityContent_200_response summary);


    void forum_GetCoreTopicsPagedSignalFull(OAIHttpRequestWorker *worker, OAICommunityContent_GetCommunityContent_200_response summary);
    void forum_GetForumTagSuggestionsSignalFull(OAIHttpRequestWorker *worker, OAIForum_GetForumTagSuggestions_200_response summary);
    void forum_GetPollSignalFull(OAIHttpRequestWorker *worker, OAICommunityContent_GetCommunityContent_200_response summary);
    void forum_GetPostAndParentSignalFull(OAIHttpRequestWorker *worker, OAICommunityContent_GetCommunityContent_200_response summary);
    void forum_GetPostAndParentAwaitingApprovalSignalFull(OAIHttpRequestWorker *worker, OAICommunityContent_GetCommunityContent_200_response summary);
    void forum_GetPostsThreadedPagedSignalFull(OAIHttpRequestWorker *worker, OAICommunityContent_GetCommunityContent_200_response summary);
    void forum_GetPostsThreadedPagedFromChildSignalFull(OAIHttpRequestWorker *worker, OAICommunityContent_GetCommunityContent_200_response summary);
    void forum_GetRecruitmentThreadSummariesSignalFull(OAIHttpRequestWorker *worker, OAIForum_GetRecruitmentThreadSummaries_200_response summary);
    void forum_GetTopicForContentSignalFull(OAIHttpRequestWorker *worker, OAIForum_GetTopicForContent_200_response summary);
    void forum_GetTopicsPagedSignalFull(OAIHttpRequestWorker *worker, OAICommunityContent_GetCommunityContent_200_response summary);

    Q_DECL_DEPRECATED_X("Use forum_GetCoreTopicsPagedSignalError() instead")
    void forum_GetCoreTopicsPagedSignalE(OAICommunityContent_GetCommunityContent_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forum_GetCoreTopicsPagedSignalError(OAICommunityContent_GetCommunityContent_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forum_GetForumTagSuggestionsSignalError() instead")
    void forum_GetForumTagSuggestionsSignalE(OAIForum_GetForumTagSuggestions_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forum_GetForumTagSuggestionsSignalError(OAIForum_GetForumTagSuggestions_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forum_GetPollSignalError() instead")
    void forum_GetPollSignalE(OAICommunityContent_GetCommunityContent_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forum_GetPollSignalError(OAICommunityContent_GetCommunityContent_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forum_GetPostAndParentSignalError() instead")
    void forum_GetPostAndParentSignalE(OAICommunityContent_GetCommunityContent_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forum_GetPostAndParentSignalError(OAICommunityContent_GetCommunityContent_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forum_GetPostAndParentAwaitingApprovalSignalError() instead")
    void forum_GetPostAndParentAwaitingApprovalSignalE(OAICommunityContent_GetCommunityContent_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forum_GetPostAndParentAwaitingApprovalSignalError(OAICommunityContent_GetCommunityContent_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forum_GetPostsThreadedPagedSignalError() instead")
    void forum_GetPostsThreadedPagedSignalE(OAICommunityContent_GetCommunityContent_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forum_GetPostsThreadedPagedSignalError(OAICommunityContent_GetCommunityContent_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forum_GetPostsThreadedPagedFromChildSignalError() instead")
    void forum_GetPostsThreadedPagedFromChildSignalE(OAICommunityContent_GetCommunityContent_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forum_GetPostsThreadedPagedFromChildSignalError(OAICommunityContent_GetCommunityContent_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forum_GetRecruitmentThreadSummariesSignalError() instead")
    void forum_GetRecruitmentThreadSummariesSignalE(OAIForum_GetRecruitmentThreadSummaries_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forum_GetRecruitmentThreadSummariesSignalError(OAIForum_GetRecruitmentThreadSummaries_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forum_GetTopicForContentSignalError() instead")
    void forum_GetTopicForContentSignalE(OAIForum_GetTopicForContent_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forum_GetTopicForContentSignalError(OAIForum_GetTopicForContent_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forum_GetTopicsPagedSignalError() instead")
    void forum_GetTopicsPagedSignalE(OAICommunityContent_GetCommunityContent_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forum_GetTopicsPagedSignalError(OAICommunityContent_GetCommunityContent_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use forum_GetCoreTopicsPagedSignalErrorFull() instead")
    void forum_GetCoreTopicsPagedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forum_GetCoreTopicsPagedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forum_GetForumTagSuggestionsSignalErrorFull() instead")
    void forum_GetForumTagSuggestionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forum_GetForumTagSuggestionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forum_GetPollSignalErrorFull() instead")
    void forum_GetPollSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forum_GetPollSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forum_GetPostAndParentSignalErrorFull() instead")
    void forum_GetPostAndParentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forum_GetPostAndParentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forum_GetPostAndParentAwaitingApprovalSignalErrorFull() instead")
    void forum_GetPostAndParentAwaitingApprovalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forum_GetPostAndParentAwaitingApprovalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forum_GetPostsThreadedPagedSignalErrorFull() instead")
    void forum_GetPostsThreadedPagedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forum_GetPostsThreadedPagedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forum_GetPostsThreadedPagedFromChildSignalErrorFull() instead")
    void forum_GetPostsThreadedPagedFromChildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forum_GetPostsThreadedPagedFromChildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forum_GetRecruitmentThreadSummariesSignalErrorFull() instead")
    void forum_GetRecruitmentThreadSummariesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forum_GetRecruitmentThreadSummariesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forum_GetTopicForContentSignalErrorFull() instead")
    void forum_GetTopicForContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forum_GetTopicForContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forum_GetTopicsPagedSignalErrorFull() instead")
    void forum_GetTopicsPagedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forum_GetTopicsPagedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
