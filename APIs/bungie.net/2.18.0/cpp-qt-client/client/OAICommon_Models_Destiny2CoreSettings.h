/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICommon_Models_Destiny2CoreSettings.h
 *
 * 
 */

#ifndef OAICommon_Models_Destiny2CoreSettings_H
#define OAICommon_Models_Destiny2CoreSettings_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICommon_Models_Destiny2CoreSettings : public OAIObject {
public:
    OAICommon_Models_Destiny2CoreSettings();
    OAICommon_Models_Destiny2CoreSettings(QString json);
    ~OAICommon_Models_Destiny2CoreSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getActiveSealsRootNodeHash() const;
    void setActiveSealsRootNodeHash(const qint32 &active_seals_root_node_hash);
    bool is_active_seals_root_node_hash_Set() const;
    bool is_active_seals_root_node_hash_Valid() const;

    qint32 getActiveTriumphsRootNodeHash() const;
    void setActiveTriumphsRootNodeHash(const qint32 &active_triumphs_root_node_hash);
    bool is_active_triumphs_root_node_hash_Set() const;
    bool is_active_triumphs_root_node_hash_Valid() const;

    QString getAmmoTypeHeavyIcon() const;
    void setAmmoTypeHeavyIcon(const QString &ammo_type_heavy_icon);
    bool is_ammo_type_heavy_icon_Set() const;
    bool is_ammo_type_heavy_icon_Valid() const;

    QString getAmmoTypePrimaryIcon() const;
    void setAmmoTypePrimaryIcon(const QString &ammo_type_primary_icon);
    bool is_ammo_type_primary_icon_Set() const;
    bool is_ammo_type_primary_icon_Valid() const;

    QString getAmmoTypeSpecialIcon() const;
    void setAmmoTypeSpecialIcon(const QString &ammo_type_special_icon);
    bool is_ammo_type_special_icon_Set() const;
    bool is_ammo_type_special_icon_Valid() const;

    qint32 getBadgesRootNode() const;
    void setBadgesRootNode(const qint32 &badges_root_node);
    bool is_badges_root_node_Set() const;
    bool is_badges_root_node_Valid() const;

    qint32 getCollectionRootNode() const;
    void setCollectionRootNode(const qint32 &collection_root_node);
    bool is_collection_root_node_Set() const;
    bool is_collection_root_node_Valid() const;

    qint32 getCraftingRootNodeHash() const;
    void setCraftingRootNodeHash(const qint32 &crafting_root_node_hash);
    bool is_crafting_root_node_hash_Set() const;
    bool is_crafting_root_node_hash_Valid() const;

    QList<qint32> getCurrentRankProgressionHashes() const;
    void setCurrentRankProgressionHashes(const QList<qint32> &current_rank_progression_hashes);
    bool is_current_rank_progression_hashes_Set() const;
    bool is_current_rank_progression_hashes_Valid() const;

    qint32 getCurrentSeasonHash() const;
    void setCurrentSeasonHash(const qint32 &current_season_hash);
    bool is_current_season_hash_Set() const;
    bool is_current_season_hash_Valid() const;

    qint32 getCurrentSeasonalArtifactHash() const;
    void setCurrentSeasonalArtifactHash(const qint32 &current_seasonal_artifact_hash);
    bool is_current_seasonal_artifact_hash_Set() const;
    bool is_current_seasonal_artifact_hash_Valid() const;

    qint32 getExoticCatalystsRootNodeHash() const;
    void setExoticCatalystsRootNodeHash(const qint32 &exotic_catalysts_root_node_hash);
    bool is_exotic_catalysts_root_node_hash_Set() const;
    bool is_exotic_catalysts_root_node_hash_Valid() const;

    QList<qint32> getFutureSeasonHashes() const;
    void setFutureSeasonHashes(const QList<qint32> &future_season_hashes);
    bool is_future_season_hashes_Set() const;
    bool is_future_season_hashes_Valid() const;

    qint32 getGuardianRankConstantsHash() const;
    void setGuardianRankConstantsHash(const qint32 &guardian_rank_constants_hash);
    bool is_guardian_rank_constants_hash_Set() const;
    bool is_guardian_rank_constants_hash_Valid() const;

    qint32 getGuardianRanksRootNodeHash() const;
    void setGuardianRanksRootNodeHash(const qint32 &guardian_ranks_root_node_hash);
    bool is_guardian_ranks_root_node_hash_Set() const;
    bool is_guardian_ranks_root_node_hash_Valid() const;

    QList<qint32> getInsertPlugFreeBlockedSocketTypeHashes() const;
    void setInsertPlugFreeBlockedSocketTypeHashes(const QList<qint32> &insert_plug_free_blocked_socket_type_hashes);
    bool is_insert_plug_free_blocked_socket_type_hashes_Set() const;
    bool is_insert_plug_free_blocked_socket_type_hashes_Valid() const;

    QList<qint32> getInsertPlugFreeProtectedPlugItemHashes() const;
    void setInsertPlugFreeProtectedPlugItemHashes(const QList<qint32> &insert_plug_free_protected_plug_item_hashes);
    bool is_insert_plug_free_protected_plug_item_hashes_Set() const;
    bool is_insert_plug_free_protected_plug_item_hashes_Valid() const;

    qint32 getLegacySealsRootNodeHash() const;
    void setLegacySealsRootNodeHash(const qint32 &legacy_seals_root_node_hash);
    bool is_legacy_seals_root_node_hash_Set() const;
    bool is_legacy_seals_root_node_hash_Valid() const;

    qint32 getLegacyTriumphsRootNodeHash() const;
    void setLegacyTriumphsRootNodeHash(const qint32 &legacy_triumphs_root_node_hash);
    bool is_legacy_triumphs_root_node_hash_Set() const;
    bool is_legacy_triumphs_root_node_hash_Valid() const;

    qint32 getLoadoutConstantsHash() const;
    void setLoadoutConstantsHash(const qint32 &loadout_constants_hash);
    bool is_loadout_constants_hash_Set() const;
    bool is_loadout_constants_hash_Valid() const;

    qint32 getLoreRootNodeHash() const;
    void setLoreRootNodeHash(const qint32 &lore_root_node_hash);
    bool is_lore_root_node_hash_Set() const;
    bool is_lore_root_node_hash_Valid() const;

    qint32 getMedalsRootNode() const;
    void setMedalsRootNode(const qint32 &medals_root_node);
    bool is_medals_root_node_Set() const;
    bool is_medals_root_node_Valid() const;

    qint32 getMedalsRootNodeHash() const;
    void setMedalsRootNodeHash(const qint32 &medals_root_node_hash);
    bool is_medals_root_node_hash_Set() const;
    bool is_medals_root_node_hash_Valid() const;

    qint32 getMetricsRootNode() const;
    void setMetricsRootNode(const qint32 &metrics_root_node);
    bool is_metrics_root_node_Set() const;
    bool is_metrics_root_node_Valid() const;

    QList<qint32> getPastSeasonHashes() const;
    void setPastSeasonHashes(const QList<qint32> &past_season_hashes);
    bool is_past_season_hashes_Set() const;
    bool is_past_season_hashes_Valid() const;

    qint32 getRecordsRootNode() const;
    void setRecordsRootNode(const qint32 &records_root_node);
    bool is_records_root_node_Set() const;
    bool is_records_root_node_Valid() const;

    qint32 getSeasonalChallengesPresentationNodeHash() const;
    void setSeasonalChallengesPresentationNodeHash(const qint32 &seasonal_challenges_presentation_node_hash);
    bool is_seasonal_challenges_presentation_node_hash_Set() const;
    bool is_seasonal_challenges_presentation_node_hash_Valid() const;

    QString getUndiscoveredCollectibleImage() const;
    void setUndiscoveredCollectibleImage(const QString &undiscovered_collectible_image);
    bool is_undiscovered_collectible_image_Set() const;
    bool is_undiscovered_collectible_image_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_active_seals_root_node_hash;
    bool m_active_seals_root_node_hash_isSet;
    bool m_active_seals_root_node_hash_isValid;

    qint32 m_active_triumphs_root_node_hash;
    bool m_active_triumphs_root_node_hash_isSet;
    bool m_active_triumphs_root_node_hash_isValid;

    QString m_ammo_type_heavy_icon;
    bool m_ammo_type_heavy_icon_isSet;
    bool m_ammo_type_heavy_icon_isValid;

    QString m_ammo_type_primary_icon;
    bool m_ammo_type_primary_icon_isSet;
    bool m_ammo_type_primary_icon_isValid;

    QString m_ammo_type_special_icon;
    bool m_ammo_type_special_icon_isSet;
    bool m_ammo_type_special_icon_isValid;

    qint32 m_badges_root_node;
    bool m_badges_root_node_isSet;
    bool m_badges_root_node_isValid;

    qint32 m_collection_root_node;
    bool m_collection_root_node_isSet;
    bool m_collection_root_node_isValid;

    qint32 m_crafting_root_node_hash;
    bool m_crafting_root_node_hash_isSet;
    bool m_crafting_root_node_hash_isValid;

    QList<qint32> m_current_rank_progression_hashes;
    bool m_current_rank_progression_hashes_isSet;
    bool m_current_rank_progression_hashes_isValid;

    qint32 m_current_season_hash;
    bool m_current_season_hash_isSet;
    bool m_current_season_hash_isValid;

    qint32 m_current_seasonal_artifact_hash;
    bool m_current_seasonal_artifact_hash_isSet;
    bool m_current_seasonal_artifact_hash_isValid;

    qint32 m_exotic_catalysts_root_node_hash;
    bool m_exotic_catalysts_root_node_hash_isSet;
    bool m_exotic_catalysts_root_node_hash_isValid;

    QList<qint32> m_future_season_hashes;
    bool m_future_season_hashes_isSet;
    bool m_future_season_hashes_isValid;

    qint32 m_guardian_rank_constants_hash;
    bool m_guardian_rank_constants_hash_isSet;
    bool m_guardian_rank_constants_hash_isValid;

    qint32 m_guardian_ranks_root_node_hash;
    bool m_guardian_ranks_root_node_hash_isSet;
    bool m_guardian_ranks_root_node_hash_isValid;

    QList<qint32> m_insert_plug_free_blocked_socket_type_hashes;
    bool m_insert_plug_free_blocked_socket_type_hashes_isSet;
    bool m_insert_plug_free_blocked_socket_type_hashes_isValid;

    QList<qint32> m_insert_plug_free_protected_plug_item_hashes;
    bool m_insert_plug_free_protected_plug_item_hashes_isSet;
    bool m_insert_plug_free_protected_plug_item_hashes_isValid;

    qint32 m_legacy_seals_root_node_hash;
    bool m_legacy_seals_root_node_hash_isSet;
    bool m_legacy_seals_root_node_hash_isValid;

    qint32 m_legacy_triumphs_root_node_hash;
    bool m_legacy_triumphs_root_node_hash_isSet;
    bool m_legacy_triumphs_root_node_hash_isValid;

    qint32 m_loadout_constants_hash;
    bool m_loadout_constants_hash_isSet;
    bool m_loadout_constants_hash_isValid;

    qint32 m_lore_root_node_hash;
    bool m_lore_root_node_hash_isSet;
    bool m_lore_root_node_hash_isValid;

    qint32 m_medals_root_node;
    bool m_medals_root_node_isSet;
    bool m_medals_root_node_isValid;

    qint32 m_medals_root_node_hash;
    bool m_medals_root_node_hash_isSet;
    bool m_medals_root_node_hash_isValid;

    qint32 m_metrics_root_node;
    bool m_metrics_root_node_isSet;
    bool m_metrics_root_node_isValid;

    QList<qint32> m_past_season_hashes;
    bool m_past_season_hashes_isSet;
    bool m_past_season_hashes_isValid;

    qint32 m_records_root_node;
    bool m_records_root_node_isSet;
    bool m_records_root_node_isValid;

    qint32 m_seasonal_challenges_presentation_node_hash;
    bool m_seasonal_challenges_presentation_node_hash_isSet;
    bool m_seasonal_challenges_presentation_node_hash_isValid;

    QString m_undiscovered_collectible_image;
    bool m_undiscovered_collectible_image_isSet;
    bool m_undiscovered_collectible_image_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICommon_Models_Destiny2CoreSettings)

#endif // OAICommon_Models_Destiny2CoreSettings_H
