/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITokens_PartnerOfferHistoryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITokens_PartnerOfferHistoryResponse::OAITokens_PartnerOfferHistoryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITokens_PartnerOfferHistoryResponse::OAITokens_PartnerOfferHistoryResponse() {
    this->initializeModel();
}

OAITokens_PartnerOfferHistoryResponse::~OAITokens_PartnerOfferHistoryResponse() {}

void OAITokens_PartnerOfferHistoryResponse::initializeModel() {

    m_apply_date_isSet = false;
    m_apply_date_isValid = false;

    m_is_consumable_isSet = false;
    m_is_consumable_isValid = false;

    m_localized_description_isSet = false;
    m_localized_description_isValid = false;

    m_localized_name_isSet = false;
    m_localized_name_isValid = false;

    m_membership_id_isSet = false;
    m_membership_id_isValid = false;

    m_membership_type_isSet = false;
    m_membership_type_isValid = false;

    m_partner_offer_key_isSet = false;
    m_partner_offer_key_isValid = false;

    m_quantity_applied_isSet = false;
    m_quantity_applied_isValid = false;
}

void OAITokens_PartnerOfferHistoryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITokens_PartnerOfferHistoryResponse::fromJsonObject(QJsonObject json) {

    m_apply_date_isValid = ::OpenAPI::fromJsonValue(m_apply_date, json[QString("ApplyDate")]);
    m_apply_date_isSet = !json[QString("ApplyDate")].isNull() && m_apply_date_isValid;

    m_is_consumable_isValid = ::OpenAPI::fromJsonValue(m_is_consumable, json[QString("IsConsumable")]);
    m_is_consumable_isSet = !json[QString("IsConsumable")].isNull() && m_is_consumable_isValid;

    m_localized_description_isValid = ::OpenAPI::fromJsonValue(m_localized_description, json[QString("LocalizedDescription")]);
    m_localized_description_isSet = !json[QString("LocalizedDescription")].isNull() && m_localized_description_isValid;

    m_localized_name_isValid = ::OpenAPI::fromJsonValue(m_localized_name, json[QString("LocalizedName")]);
    m_localized_name_isSet = !json[QString("LocalizedName")].isNull() && m_localized_name_isValid;

    m_membership_id_isValid = ::OpenAPI::fromJsonValue(m_membership_id, json[QString("MembershipId")]);
    m_membership_id_isSet = !json[QString("MembershipId")].isNull() && m_membership_id_isValid;

    m_membership_type_isValid = ::OpenAPI::fromJsonValue(m_membership_type, json[QString("MembershipType")]);
    m_membership_type_isSet = !json[QString("MembershipType")].isNull() && m_membership_type_isValid;

    m_partner_offer_key_isValid = ::OpenAPI::fromJsonValue(m_partner_offer_key, json[QString("PartnerOfferKey")]);
    m_partner_offer_key_isSet = !json[QString("PartnerOfferKey")].isNull() && m_partner_offer_key_isValid;

    m_quantity_applied_isValid = ::OpenAPI::fromJsonValue(m_quantity_applied, json[QString("QuantityApplied")]);
    m_quantity_applied_isSet = !json[QString("QuantityApplied")].isNull() && m_quantity_applied_isValid;
}

QString OAITokens_PartnerOfferHistoryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITokens_PartnerOfferHistoryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_apply_date_isSet) {
        obj.insert(QString("ApplyDate"), ::OpenAPI::toJsonValue(m_apply_date));
    }
    if (m_is_consumable_isSet) {
        obj.insert(QString("IsConsumable"), ::OpenAPI::toJsonValue(m_is_consumable));
    }
    if (m_localized_description_isSet) {
        obj.insert(QString("LocalizedDescription"), ::OpenAPI::toJsonValue(m_localized_description));
    }
    if (m_localized_name_isSet) {
        obj.insert(QString("LocalizedName"), ::OpenAPI::toJsonValue(m_localized_name));
    }
    if (m_membership_id_isSet) {
        obj.insert(QString("MembershipId"), ::OpenAPI::toJsonValue(m_membership_id));
    }
    if (m_membership_type_isSet) {
        obj.insert(QString("MembershipType"), ::OpenAPI::toJsonValue(m_membership_type));
    }
    if (m_partner_offer_key_isSet) {
        obj.insert(QString("PartnerOfferKey"), ::OpenAPI::toJsonValue(m_partner_offer_key));
    }
    if (m_quantity_applied_isSet) {
        obj.insert(QString("QuantityApplied"), ::OpenAPI::toJsonValue(m_quantity_applied));
    }
    return obj;
}

QDateTime OAITokens_PartnerOfferHistoryResponse::getApplyDate() const {
    return m_apply_date;
}
void OAITokens_PartnerOfferHistoryResponse::setApplyDate(const QDateTime &apply_date) {
    m_apply_date = apply_date;
    m_apply_date_isSet = true;
}

bool OAITokens_PartnerOfferHistoryResponse::is_apply_date_Set() const{
    return m_apply_date_isSet;
}

bool OAITokens_PartnerOfferHistoryResponse::is_apply_date_Valid() const{
    return m_apply_date_isValid;
}

bool OAITokens_PartnerOfferHistoryResponse::isIsConsumable() const {
    return m_is_consumable;
}
void OAITokens_PartnerOfferHistoryResponse::setIsConsumable(const bool &is_consumable) {
    m_is_consumable = is_consumable;
    m_is_consumable_isSet = true;
}

bool OAITokens_PartnerOfferHistoryResponse::is_is_consumable_Set() const{
    return m_is_consumable_isSet;
}

bool OAITokens_PartnerOfferHistoryResponse::is_is_consumable_Valid() const{
    return m_is_consumable_isValid;
}

QString OAITokens_PartnerOfferHistoryResponse::getLocalizedDescription() const {
    return m_localized_description;
}
void OAITokens_PartnerOfferHistoryResponse::setLocalizedDescription(const QString &localized_description) {
    m_localized_description = localized_description;
    m_localized_description_isSet = true;
}

bool OAITokens_PartnerOfferHistoryResponse::is_localized_description_Set() const{
    return m_localized_description_isSet;
}

bool OAITokens_PartnerOfferHistoryResponse::is_localized_description_Valid() const{
    return m_localized_description_isValid;
}

QString OAITokens_PartnerOfferHistoryResponse::getLocalizedName() const {
    return m_localized_name;
}
void OAITokens_PartnerOfferHistoryResponse::setLocalizedName(const QString &localized_name) {
    m_localized_name = localized_name;
    m_localized_name_isSet = true;
}

bool OAITokens_PartnerOfferHistoryResponse::is_localized_name_Set() const{
    return m_localized_name_isSet;
}

bool OAITokens_PartnerOfferHistoryResponse::is_localized_name_Valid() const{
    return m_localized_name_isValid;
}

qint64 OAITokens_PartnerOfferHistoryResponse::getMembershipId() const {
    return m_membership_id;
}
void OAITokens_PartnerOfferHistoryResponse::setMembershipId(const qint64 &membership_id) {
    m_membership_id = membership_id;
    m_membership_id_isSet = true;
}

bool OAITokens_PartnerOfferHistoryResponse::is_membership_id_Set() const{
    return m_membership_id_isSet;
}

bool OAITokens_PartnerOfferHistoryResponse::is_membership_id_Valid() const{
    return m_membership_id_isValid;
}

qint32 OAITokens_PartnerOfferHistoryResponse::getMembershipType() const {
    return m_membership_type;
}
void OAITokens_PartnerOfferHistoryResponse::setMembershipType(const qint32 &membership_type) {
    m_membership_type = membership_type;
    m_membership_type_isSet = true;
}

bool OAITokens_PartnerOfferHistoryResponse::is_membership_type_Set() const{
    return m_membership_type_isSet;
}

bool OAITokens_PartnerOfferHistoryResponse::is_membership_type_Valid() const{
    return m_membership_type_isValid;
}

QString OAITokens_PartnerOfferHistoryResponse::getPartnerOfferKey() const {
    return m_partner_offer_key;
}
void OAITokens_PartnerOfferHistoryResponse::setPartnerOfferKey(const QString &partner_offer_key) {
    m_partner_offer_key = partner_offer_key;
    m_partner_offer_key_isSet = true;
}

bool OAITokens_PartnerOfferHistoryResponse::is_partner_offer_key_Set() const{
    return m_partner_offer_key_isSet;
}

bool OAITokens_PartnerOfferHistoryResponse::is_partner_offer_key_Valid() const{
    return m_partner_offer_key_isValid;
}

qint32 OAITokens_PartnerOfferHistoryResponse::getQuantityApplied() const {
    return m_quantity_applied;
}
void OAITokens_PartnerOfferHistoryResponse::setQuantityApplied(const qint32 &quantity_applied) {
    m_quantity_applied = quantity_applied;
    m_quantity_applied_isSet = true;
}

bool OAITokens_PartnerOfferHistoryResponse::is_quantity_applied_Set() const{
    return m_quantity_applied_isSet;
}

bool OAITokens_PartnerOfferHistoryResponse::is_quantity_applied_Valid() const{
    return m_quantity_applied_isValid;
}

bool OAITokens_PartnerOfferHistoryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apply_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_consumable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_offer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_applied_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITokens_PartnerOfferHistoryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
