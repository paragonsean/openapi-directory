/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupV2Api.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIGroupV2Api::OAIGroupV2Api(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIGroupV2Api::~OAIGroupV2Api() {
}

void OAIGroupV2Api::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://www.bungie.net/Platform"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("groupV2_AbdicateFoundership", defaultConf);
    _serverIndices.insert("groupV2_AbdicateFoundership", 0);
    _serverConfigs.insert("groupV2_AddOptionalConversation", defaultConf);
    _serverIndices.insert("groupV2_AddOptionalConversation", 0);
    _serverConfigs.insert("groupV2_ApproveAllPending", defaultConf);
    _serverIndices.insert("groupV2_ApproveAllPending", 0);
    _serverConfigs.insert("groupV2_ApprovePending", defaultConf);
    _serverIndices.insert("groupV2_ApprovePending", 0);
    _serverConfigs.insert("groupV2_ApprovePendingForList", defaultConf);
    _serverIndices.insert("groupV2_ApprovePendingForList", 0);
    _serverConfigs.insert("groupV2_BanMember", defaultConf);
    _serverIndices.insert("groupV2_BanMember", 0);
    _serverConfigs.insert("groupV2_DenyAllPending", defaultConf);
    _serverIndices.insert("groupV2_DenyAllPending", 0);
    _serverConfigs.insert("groupV2_DenyPendingForList", defaultConf);
    _serverIndices.insert("groupV2_DenyPendingForList", 0);
    _serverConfigs.insert("groupV2_EditClanBanner", defaultConf);
    _serverIndices.insert("groupV2_EditClanBanner", 0);
    _serverConfigs.insert("groupV2_EditFounderOptions", defaultConf);
    _serverIndices.insert("groupV2_EditFounderOptions", 0);
    _serverConfigs.insert("groupV2_EditGroup", defaultConf);
    _serverIndices.insert("groupV2_EditGroup", 0);
    _serverConfigs.insert("groupV2_EditGroupMembership", defaultConf);
    _serverIndices.insert("groupV2_EditGroupMembership", 0);
    _serverConfigs.insert("groupV2_EditOptionalConversation", defaultConf);
    _serverIndices.insert("groupV2_EditOptionalConversation", 0);
    _serverConfigs.insert("groupV2_GetAdminsAndFounderOfGroup", defaultConf);
    _serverIndices.insert("groupV2_GetAdminsAndFounderOfGroup", 0);
    _serverConfigs.insert("groupV2_GetAvailableAvatars", defaultConf);
    _serverIndices.insert("groupV2_GetAvailableAvatars", 0);
    _serverConfigs.insert("groupV2_GetAvailableThemes", defaultConf);
    _serverIndices.insert("groupV2_GetAvailableThemes", 0);
    _serverConfigs.insert("groupV2_GetBannedMembersOfGroup", defaultConf);
    _serverIndices.insert("groupV2_GetBannedMembersOfGroup", 0);
    _serverConfigs.insert("groupV2_GetGroup", defaultConf);
    _serverIndices.insert("groupV2_GetGroup", 0);
    _serverConfigs.insert("groupV2_GetGroupByName", defaultConf);
    _serverIndices.insert("groupV2_GetGroupByName", 0);
    _serverConfigs.insert("groupV2_GetGroupByNameV2", defaultConf);
    _serverIndices.insert("groupV2_GetGroupByNameV2", 0);
    _serverConfigs.insert("groupV2_GetGroupOptionalConversations", defaultConf);
    _serverIndices.insert("groupV2_GetGroupOptionalConversations", 0);
    _serverConfigs.insert("groupV2_GetGroupsForMember", defaultConf);
    _serverIndices.insert("groupV2_GetGroupsForMember", 0);
    _serverConfigs.insert("groupV2_GetInvitedIndividuals", defaultConf);
    _serverIndices.insert("groupV2_GetInvitedIndividuals", 0);
    _serverConfigs.insert("groupV2_GetMembersOfGroup", defaultConf);
    _serverIndices.insert("groupV2_GetMembersOfGroup", 0);
    _serverConfigs.insert("groupV2_GetPendingMemberships", defaultConf);
    _serverIndices.insert("groupV2_GetPendingMemberships", 0);
    _serverConfigs.insert("groupV2_GetPotentialGroupsForMember", defaultConf);
    _serverIndices.insert("groupV2_GetPotentialGroupsForMember", 0);
    _serverConfigs.insert("groupV2_GetRecommendedGroups", defaultConf);
    _serverIndices.insert("groupV2_GetRecommendedGroups", 0);
    _serverConfigs.insert("groupV2_GetUserClanInviteSetting", defaultConf);
    _serverIndices.insert("groupV2_GetUserClanInviteSetting", 0);
    _serverConfigs.insert("groupV2_GroupSearch", defaultConf);
    _serverIndices.insert("groupV2_GroupSearch", 0);
    _serverConfigs.insert("groupV2_IndividualGroupInvite", defaultConf);
    _serverIndices.insert("groupV2_IndividualGroupInvite", 0);
    _serverConfigs.insert("groupV2_IndividualGroupInviteCancel", defaultConf);
    _serverIndices.insert("groupV2_IndividualGroupInviteCancel", 0);
    _serverConfigs.insert("groupV2_KickMember", defaultConf);
    _serverIndices.insert("groupV2_KickMember", 0);
    _serverConfigs.insert("groupV2_RecoverGroupForFounder", defaultConf);
    _serverIndices.insert("groupV2_RecoverGroupForFounder", 0);
    _serverConfigs.insert("groupV2_UnbanMember", defaultConf);
    _serverIndices.insert("groupV2_UnbanMember", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIGroupV2Api::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIGroupV2Api::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIGroupV2Api::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIGroupV2Api::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIGroupV2Api::setUsername(const QString &username) {
    _username = username;
}

void OAIGroupV2Api::setPassword(const QString &password) {
    _password = password;
}


void OAIGroupV2Api::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIGroupV2Api::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIGroupV2Api::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIGroupV2Api::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIGroupV2Api::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIGroupV2Api::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIGroupV2Api::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIGroupV2Api::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIGroupV2Api::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIGroupV2Api::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIGroupV2Api::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIGroupV2Api::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIGroupV2Api::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIGroupV2Api::groupV2_AbdicateFoundership(const qint64 &founder_id_new, const qint64 &group_id, const qint32 &membership_type) {
    QString fullPath = QString(_serverConfigs["groupV2_AbdicateFoundership"][_serverIndices.value("groupV2_AbdicateFoundership")].URL()+"/GroupV2/{groupId}/Admin/AbdicateFoundership/{membershipType}/{founderIdNew}/");
    
    
    {
        QString founder_id_newPathParam("{");
        founder_id_newPathParam.append("founderIdNew").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "founderIdNew", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"founderIdNew"+pathSuffix : pathPrefix;
        fullPath.replace(founder_id_newPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(founder_id_new)));
    }
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    
    {
        QString membership_typePathParam("{");
        membership_typePathParam.append("membershipType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipType"+pathSuffix : pathPrefix;
        fullPath.replace(membership_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_AbdicateFoundershipCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_AbdicateFoundershipCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_GetUserClanInviteSetting_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_AbdicateFoundershipSignal(output);
        Q_EMIT groupV2_AbdicateFoundershipSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_AbdicateFoundershipSignalE(output, error_type, error_str);
        Q_EMIT groupV2_AbdicateFoundershipSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_AbdicateFoundershipSignalError(output, error_type, error_str);
        Q_EMIT groupV2_AbdicateFoundershipSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_AddOptionalConversation(const qint64 &group_id) {
    QString fullPath = QString(_serverConfigs["groupV2_AddOptionalConversation"][_serverIndices.value("groupV2_AddOptionalConversation")].URL()+"/GroupV2/{groupId}/OptionalConversations/Add/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_AddOptionalConversationCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("AdminGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_AddOptionalConversationCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_AddOptionalConversationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIForum_GetTopicForContent_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_AddOptionalConversationSignal(output);
        Q_EMIT groupV2_AddOptionalConversationSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("AdminGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_AddOptionalConversationSignalE(output, error_type, error_str);
        Q_EMIT groupV2_AddOptionalConversationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_AddOptionalConversationSignalError(output, error_type, error_str);
        Q_EMIT groupV2_AddOptionalConversationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_ApproveAllPending(const qint64 &group_id) {
    QString fullPath = QString(_serverConfigs["groupV2_ApproveAllPending"][_serverIndices.value("groupV2_ApproveAllPending")].URL()+"/GroupV2/{groupId}/Members/ApproveAll/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_ApproveAllPendingCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("AdminGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_ApproveAllPendingCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_ApproveAllPendingCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_ApproveAllPending_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_ApproveAllPendingSignal(output);
        Q_EMIT groupV2_ApproveAllPendingSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("AdminGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_ApproveAllPendingSignalE(output, error_type, error_str);
        Q_EMIT groupV2_ApproveAllPendingSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_ApproveAllPendingSignalError(output, error_type, error_str);
        Q_EMIT groupV2_ApproveAllPendingSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_ApprovePending(const qint64 &group_id, const qint64 &membership_id, const qint32 &membership_type) {
    QString fullPath = QString(_serverConfigs["groupV2_ApprovePending"][_serverIndices.value("groupV2_ApprovePending")].URL()+"/GroupV2/{groupId}/Members/Approve/{membershipType}/{membershipId}/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    
    {
        QString membership_idPathParam("{");
        membership_idPathParam.append("membershipId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipId"+pathSuffix : pathPrefix;
        fullPath.replace(membership_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_id)));
    }
    
    {
        QString membership_typePathParam("{");
        membership_typePathParam.append("membershipType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipType"+pathSuffix : pathPrefix;
        fullPath.replace(membership_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_ApprovePendingCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("AdminGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_ApprovePendingCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_ApprovePendingCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_GetUserClanInviteSetting_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_ApprovePendingSignal(output);
        Q_EMIT groupV2_ApprovePendingSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("AdminGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_ApprovePendingSignalE(output, error_type, error_str);
        Q_EMIT groupV2_ApprovePendingSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_ApprovePendingSignalError(output, error_type, error_str);
        Q_EMIT groupV2_ApprovePendingSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_ApprovePendingForList(const qint64 &group_id) {
    QString fullPath = QString(_serverConfigs["groupV2_ApprovePendingForList"][_serverIndices.value("groupV2_ApprovePendingForList")].URL()+"/GroupV2/{groupId}/Members/ApproveList/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_ApprovePendingForListCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("AdminGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_ApprovePendingForListCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_ApprovePendingForListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_ApproveAllPending_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_ApprovePendingForListSignal(output);
        Q_EMIT groupV2_ApprovePendingForListSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("AdminGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_ApprovePendingForListSignalE(output, error_type, error_str);
        Q_EMIT groupV2_ApprovePendingForListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_ApprovePendingForListSignalError(output, error_type, error_str);
        Q_EMIT groupV2_ApprovePendingForListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_BanMember(const qint64 &group_id, const qint64 &membership_id, const qint32 &membership_type) {
    QString fullPath = QString(_serverConfigs["groupV2_BanMember"][_serverIndices.value("groupV2_BanMember")].URL()+"/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Ban/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    
    {
        QString membership_idPathParam("{");
        membership_idPathParam.append("membershipId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipId"+pathSuffix : pathPrefix;
        fullPath.replace(membership_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_id)));
    }
    
    {
        QString membership_typePathParam("{");
        membership_typePathParam.append("membershipType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipType"+pathSuffix : pathPrefix;
        fullPath.replace(membership_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_BanMemberCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("AdminGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_BanMemberCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_BanMemberCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDestiny2_EquipItem_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_BanMemberSignal(output);
        Q_EMIT groupV2_BanMemberSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("AdminGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_BanMemberSignalE(output, error_type, error_str);
        Q_EMIT groupV2_BanMemberSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_BanMemberSignalError(output, error_type, error_str);
        Q_EMIT groupV2_BanMemberSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_DenyAllPending(const qint64 &group_id) {
    QString fullPath = QString(_serverConfigs["groupV2_DenyAllPending"][_serverIndices.value("groupV2_DenyAllPending")].URL()+"/GroupV2/{groupId}/Members/DenyAll/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_DenyAllPendingCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("AdminGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_DenyAllPendingCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_DenyAllPendingCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_ApproveAllPending_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_DenyAllPendingSignal(output);
        Q_EMIT groupV2_DenyAllPendingSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("AdminGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_DenyAllPendingSignalE(output, error_type, error_str);
        Q_EMIT groupV2_DenyAllPendingSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_DenyAllPendingSignalError(output, error_type, error_str);
        Q_EMIT groupV2_DenyAllPendingSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_DenyPendingForList(const qint64 &group_id) {
    QString fullPath = QString(_serverConfigs["groupV2_DenyPendingForList"][_serverIndices.value("groupV2_DenyPendingForList")].URL()+"/GroupV2/{groupId}/Members/DenyList/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_DenyPendingForListCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("AdminGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_DenyPendingForListCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_DenyPendingForListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_ApproveAllPending_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_DenyPendingForListSignal(output);
        Q_EMIT groupV2_DenyPendingForListSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("AdminGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_DenyPendingForListSignalE(output, error_type, error_str);
        Q_EMIT groupV2_DenyPendingForListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_DenyPendingForListSignalError(output, error_type, error_str);
        Q_EMIT groupV2_DenyPendingForListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_EditClanBanner(const qint64 &group_id) {
    QString fullPath = QString(_serverConfigs["groupV2_EditClanBanner"][_serverIndices.value("groupV2_EditClanBanner")].URL()+"/GroupV2/{groupId}/EditClanBanner/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_EditClanBannerCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("AdminGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_EditClanBannerCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_EditClanBannerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDestiny2_EquipItem_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_EditClanBannerSignal(output);
        Q_EMIT groupV2_EditClanBannerSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("AdminGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_EditClanBannerSignalE(output, error_type, error_str);
        Q_EMIT groupV2_EditClanBannerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_EditClanBannerSignalError(output, error_type, error_str);
        Q_EMIT groupV2_EditClanBannerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_EditFounderOptions(const qint64 &group_id) {
    QString fullPath = QString(_serverConfigs["groupV2_EditFounderOptions"][_serverIndices.value("groupV2_EditFounderOptions")].URL()+"/GroupV2/{groupId}/EditFounderOptions/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_EditFounderOptionsCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("AdminGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_EditFounderOptionsCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_EditFounderOptionsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDestiny2_EquipItem_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_EditFounderOptionsSignal(output);
        Q_EMIT groupV2_EditFounderOptionsSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("AdminGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_EditFounderOptionsSignalE(output, error_type, error_str);
        Q_EMIT groupV2_EditFounderOptionsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_EditFounderOptionsSignalError(output, error_type, error_str);
        Q_EMIT groupV2_EditFounderOptionsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_EditGroup(const qint64 &group_id) {
    QString fullPath = QString(_serverConfigs["groupV2_EditGroup"][_serverIndices.value("groupV2_EditGroup")].URL()+"/GroupV2/{groupId}/Edit/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_EditGroupCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("AdminGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_EditGroupCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_EditGroupCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDestiny2_EquipItem_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_EditGroupSignal(output);
        Q_EMIT groupV2_EditGroupSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("AdminGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_EditGroupSignalE(output, error_type, error_str);
        Q_EMIT groupV2_EditGroupSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_EditGroupSignalError(output, error_type, error_str);
        Q_EMIT groupV2_EditGroupSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_EditGroupMembership(const qint64 &group_id, const qint64 &membership_id, const qint32 &membership_type, const qint32 &member_type) {
    QString fullPath = QString(_serverConfigs["groupV2_EditGroupMembership"][_serverIndices.value("groupV2_EditGroupMembership")].URL()+"/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/SetMembershipType/{memberType}/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    
    {
        QString membership_idPathParam("{");
        membership_idPathParam.append("membershipId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipId"+pathSuffix : pathPrefix;
        fullPath.replace(membership_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_id)));
    }
    
    {
        QString membership_typePathParam("{");
        membership_typePathParam.append("membershipType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipType"+pathSuffix : pathPrefix;
        fullPath.replace(membership_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_type)));
    }
    
    {
        QString member_typePathParam("{");
        member_typePathParam.append("memberType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "memberType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"memberType"+pathSuffix : pathPrefix;
        fullPath.replace(member_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(member_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_EditGroupMembershipCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("AdminGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_EditGroupMembershipCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_EditGroupMembershipCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDestiny2_EquipItem_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_EditGroupMembershipSignal(output);
        Q_EMIT groupV2_EditGroupMembershipSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("AdminGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_EditGroupMembershipSignalE(output, error_type, error_str);
        Q_EMIT groupV2_EditGroupMembershipSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_EditGroupMembershipSignalError(output, error_type, error_str);
        Q_EMIT groupV2_EditGroupMembershipSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_EditOptionalConversation(const qint64 &conversation_id, const qint64 &group_id) {
    QString fullPath = QString(_serverConfigs["groupV2_EditOptionalConversation"][_serverIndices.value("groupV2_EditOptionalConversation")].URL()+"/GroupV2/{groupId}/OptionalConversations/Edit/{conversationId}/");
    
    
    {
        QString conversation_idPathParam("{");
        conversation_idPathParam.append("conversationId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "conversationId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"conversationId"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_id)));
    }
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_EditOptionalConversationCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("AdminGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_EditOptionalConversationCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_EditOptionalConversationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIForum_GetTopicForContent_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_EditOptionalConversationSignal(output);
        Q_EMIT groupV2_EditOptionalConversationSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("AdminGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_EditOptionalConversationSignalE(output, error_type, error_str);
        Q_EMIT groupV2_EditOptionalConversationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_EditOptionalConversationSignalError(output, error_type, error_str);
        Q_EMIT groupV2_EditOptionalConversationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_GetAdminsAndFounderOfGroup(const qint32 &currentpage, const qint64 &group_id) {
    QString fullPath = QString(_serverConfigs["groupV2_GetAdminsAndFounderOfGroup"][_serverIndices.value("groupV2_GetAdminsAndFounderOfGroup")].URL()+"/GroupV2/{groupId}/AdminsAndFounder/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "currentpage", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("currentpage")).append(querySuffix).append(QUrl::toPercentEncoding(currentpage));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_GetAdminsAndFounderOfGroupCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_GetAdminsAndFounderOfGroupCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_GetAdminsAndFounderOfGroup_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_GetAdminsAndFounderOfGroupSignal(output);
        Q_EMIT groupV2_GetAdminsAndFounderOfGroupSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_GetAdminsAndFounderOfGroupSignalE(output, error_type, error_str);
        Q_EMIT groupV2_GetAdminsAndFounderOfGroupSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_GetAdminsAndFounderOfGroupSignalError(output, error_type, error_str);
        Q_EMIT groupV2_GetAdminsAndFounderOfGroupSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_GetAvailableAvatars() {
    QString fullPath = QString(_serverConfigs["groupV2_GetAvailableAvatars"][_serverIndices.value("groupV2_GetAvailableAvatars")].URL()+"/GroupV2/GetAvailableAvatars/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_GetAvailableAvatarsCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_GetAvailableAvatarsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAI_GetAvailableLocales_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_GetAvailableAvatarsSignal(output);
        Q_EMIT groupV2_GetAvailableAvatarsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_GetAvailableAvatarsSignalE(output, error_type, error_str);
        Q_EMIT groupV2_GetAvailableAvatarsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_GetAvailableAvatarsSignalError(output, error_type, error_str);
        Q_EMIT groupV2_GetAvailableAvatarsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_GetAvailableThemes() {
    QString fullPath = QString(_serverConfigs["groupV2_GetAvailableThemes"][_serverIndices.value("groupV2_GetAvailableThemes")].URL()+"/GroupV2/GetAvailableThemes/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_GetAvailableThemesCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_GetAvailableThemesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_GetAvailableThemes_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_GetAvailableThemesSignal(output);
        Q_EMIT groupV2_GetAvailableThemesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_GetAvailableThemesSignalE(output, error_type, error_str);
        Q_EMIT groupV2_GetAvailableThemesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_GetAvailableThemesSignalError(output, error_type, error_str);
        Q_EMIT groupV2_GetAvailableThemesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_GetBannedMembersOfGroup(const qint32 &currentpage, const qint64 &group_id) {
    QString fullPath = QString(_serverConfigs["groupV2_GetBannedMembersOfGroup"][_serverIndices.value("groupV2_GetBannedMembersOfGroup")].URL()+"/GroupV2/{groupId}/Banned/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "currentpage", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("currentpage")).append(querySuffix).append(QUrl::toPercentEncoding(currentpage));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_GetBannedMembersOfGroupCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("AdminGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_GetBannedMembersOfGroupCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_GetBannedMembersOfGroupCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_GetBannedMembersOfGroup_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_GetBannedMembersOfGroupSignal(output);
        Q_EMIT groupV2_GetBannedMembersOfGroupSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("AdminGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_GetBannedMembersOfGroupSignalE(output, error_type, error_str);
        Q_EMIT groupV2_GetBannedMembersOfGroupSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_GetBannedMembersOfGroupSignalError(output, error_type, error_str);
        Q_EMIT groupV2_GetBannedMembersOfGroupSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_GetGroup(const qint64 &group_id) {
    QString fullPath = QString(_serverConfigs["groupV2_GetGroup"][_serverIndices.value("groupV2_GetGroup")].URL()+"/GroupV2/{groupId}/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_GetGroupCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_GetGroupCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_GetGroupByName_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_GetGroupSignal(output);
        Q_EMIT groupV2_GetGroupSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_GetGroupSignalE(output, error_type, error_str);
        Q_EMIT groupV2_GetGroupSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_GetGroupSignalError(output, error_type, error_str);
        Q_EMIT groupV2_GetGroupSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_GetGroupByName(const QString &group_name, const qint32 &group_type) {
    QString fullPath = QString(_serverConfigs["groupV2_GetGroupByName"][_serverIndices.value("groupV2_GetGroupByName")].URL()+"/GroupV2/Name/{groupName}/{groupType}/");
    
    
    {
        QString group_namePathParam("{");
        group_namePathParam.append("groupName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupName"+pathSuffix : pathPrefix;
        fullPath.replace(group_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_name)));
    }
    
    {
        QString group_typePathParam("{");
        group_typePathParam.append("groupType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupType"+pathSuffix : pathPrefix;
        fullPath.replace(group_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_GetGroupByNameCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_GetGroupByNameCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_GetGroupByName_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_GetGroupByNameSignal(output);
        Q_EMIT groupV2_GetGroupByNameSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_GetGroupByNameSignalE(output, error_type, error_str);
        Q_EMIT groupV2_GetGroupByNameSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_GetGroupByNameSignalError(output, error_type, error_str);
        Q_EMIT groupV2_GetGroupByNameSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_GetGroupByNameV2() {
    QString fullPath = QString(_serverConfigs["groupV2_GetGroupByNameV2"][_serverIndices.value("groupV2_GetGroupByNameV2")].URL()+"/GroupV2/NameV2/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_GetGroupByNameV2Callback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_GetGroupByNameV2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_GetGroupByName_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_GetGroupByNameV2Signal(output);
        Q_EMIT groupV2_GetGroupByNameV2SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_GetGroupByNameV2SignalE(output, error_type, error_str);
        Q_EMIT groupV2_GetGroupByNameV2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_GetGroupByNameV2SignalError(output, error_type, error_str);
        Q_EMIT groupV2_GetGroupByNameV2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_GetGroupOptionalConversations(const qint64 &group_id) {
    QString fullPath = QString(_serverConfigs["groupV2_GetGroupOptionalConversations"][_serverIndices.value("groupV2_GetGroupOptionalConversations")].URL()+"/GroupV2/{groupId}/OptionalConversations/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_GetGroupOptionalConversationsCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_GetGroupOptionalConversationsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_GetGroupOptionalConversations_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_GetGroupOptionalConversationsSignal(output);
        Q_EMIT groupV2_GetGroupOptionalConversationsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_GetGroupOptionalConversationsSignalE(output, error_type, error_str);
        Q_EMIT groupV2_GetGroupOptionalConversationsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_GetGroupOptionalConversationsSignalError(output, error_type, error_str);
        Q_EMIT groupV2_GetGroupOptionalConversationsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_GetGroupsForMember(const qint32 &filter, const qint32 &group_type, const qint64 &membership_id, const qint32 &membership_type) {
    QString fullPath = QString(_serverConfigs["groupV2_GetGroupsForMember"][_serverIndices.value("groupV2_GetGroupsForMember")].URL()+"/GroupV2/User/{membershipType}/{membershipId}/{filter}/{groupType}/");
    
    
    {
        QString filterPathParam("{");
        filterPathParam.append("filter").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "filter", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"filter"+pathSuffix : pathPrefix;
        fullPath.replace(filterPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(filter)));
    }
    
    {
        QString group_typePathParam("{");
        group_typePathParam.append("groupType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupType"+pathSuffix : pathPrefix;
        fullPath.replace(group_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_type)));
    }
    
    {
        QString membership_idPathParam("{");
        membership_idPathParam.append("membershipId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipId"+pathSuffix : pathPrefix;
        fullPath.replace(membership_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_id)));
    }
    
    {
        QString membership_typePathParam("{");
        membership_typePathParam.append("membershipType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipType"+pathSuffix : pathPrefix;
        fullPath.replace(membership_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_GetGroupsForMemberCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_GetGroupsForMemberCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_GetGroupsForMember_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_GetGroupsForMemberSignal(output);
        Q_EMIT groupV2_GetGroupsForMemberSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_GetGroupsForMemberSignalE(output, error_type, error_str);
        Q_EMIT groupV2_GetGroupsForMemberSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_GetGroupsForMemberSignalError(output, error_type, error_str);
        Q_EMIT groupV2_GetGroupsForMemberSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_GetInvitedIndividuals(const qint32 &currentpage, const qint64 &group_id) {
    QString fullPath = QString(_serverConfigs["groupV2_GetInvitedIndividuals"][_serverIndices.value("groupV2_GetInvitedIndividuals")].URL()+"/GroupV2/{groupId}/Members/InvitedIndividuals/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "currentpage", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("currentpage")).append(querySuffix).append(QUrl::toPercentEncoding(currentpage));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_GetInvitedIndividualsCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("AdminGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_GetInvitedIndividualsCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_GetInvitedIndividualsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_GetInvitedIndividuals_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_GetInvitedIndividualsSignal(output);
        Q_EMIT groupV2_GetInvitedIndividualsSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("AdminGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_GetInvitedIndividualsSignalE(output, error_type, error_str);
        Q_EMIT groupV2_GetInvitedIndividualsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_GetInvitedIndividualsSignalError(output, error_type, error_str);
        Q_EMIT groupV2_GetInvitedIndividualsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_GetMembersOfGroup(const qint32 &currentpage, const qint64 &group_id, const ::OpenAPI::OptionalParam<qint32> &member_type, const ::OpenAPI::OptionalParam<QString> &name_search) {
    QString fullPath = QString(_serverConfigs["groupV2_GetMembersOfGroup"][_serverIndices.value("groupV2_GetMembersOfGroup")].URL()+"/GroupV2/{groupId}/Members/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "currentpage", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("currentpage")).append(querySuffix).append(QUrl::toPercentEncoding(currentpage));
    }
    if (member_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "memberType", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("memberType")).append(querySuffix).append(QUrl::toPercentEncoding(member_type.stringValue()));
    }
    if (name_search.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "nameSearch", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("nameSearch")).append(querySuffix).append(QUrl::toPercentEncoding(name_search.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_GetMembersOfGroupCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_GetMembersOfGroupCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_GetAdminsAndFounderOfGroup_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_GetMembersOfGroupSignal(output);
        Q_EMIT groupV2_GetMembersOfGroupSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_GetMembersOfGroupSignalE(output, error_type, error_str);
        Q_EMIT groupV2_GetMembersOfGroupSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_GetMembersOfGroupSignalError(output, error_type, error_str);
        Q_EMIT groupV2_GetMembersOfGroupSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_GetPendingMemberships(const qint32 &currentpage, const qint64 &group_id) {
    QString fullPath = QString(_serverConfigs["groupV2_GetPendingMemberships"][_serverIndices.value("groupV2_GetPendingMemberships")].URL()+"/GroupV2/{groupId}/Members/Pending/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "currentpage", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("currentpage")).append(querySuffix).append(QUrl::toPercentEncoding(currentpage));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_GetPendingMembershipsCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("AdminGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_GetPendingMembershipsCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_GetPendingMembershipsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_GetInvitedIndividuals_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_GetPendingMembershipsSignal(output);
        Q_EMIT groupV2_GetPendingMembershipsSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("AdminGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_GetPendingMembershipsSignalE(output, error_type, error_str);
        Q_EMIT groupV2_GetPendingMembershipsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_GetPendingMembershipsSignalError(output, error_type, error_str);
        Q_EMIT groupV2_GetPendingMembershipsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_GetPotentialGroupsForMember(const qint32 &filter, const qint32 &group_type, const qint64 &membership_id, const qint32 &membership_type) {
    QString fullPath = QString(_serverConfigs["groupV2_GetPotentialGroupsForMember"][_serverIndices.value("groupV2_GetPotentialGroupsForMember")].URL()+"/GroupV2/User/Potential/{membershipType}/{membershipId}/{filter}/{groupType}/");
    
    
    {
        QString filterPathParam("{");
        filterPathParam.append("filter").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "filter", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"filter"+pathSuffix : pathPrefix;
        fullPath.replace(filterPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(filter)));
    }
    
    {
        QString group_typePathParam("{");
        group_typePathParam.append("groupType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupType"+pathSuffix : pathPrefix;
        fullPath.replace(group_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_type)));
    }
    
    {
        QString membership_idPathParam("{");
        membership_idPathParam.append("membershipId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipId"+pathSuffix : pathPrefix;
        fullPath.replace(membership_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_id)));
    }
    
    {
        QString membership_typePathParam("{");
        membership_typePathParam.append("membershipType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipType"+pathSuffix : pathPrefix;
        fullPath.replace(membership_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_GetPotentialGroupsForMemberCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_GetPotentialGroupsForMemberCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_GetPotentialGroupsForMember_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_GetPotentialGroupsForMemberSignal(output);
        Q_EMIT groupV2_GetPotentialGroupsForMemberSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_GetPotentialGroupsForMemberSignalE(output, error_type, error_str);
        Q_EMIT groupV2_GetPotentialGroupsForMemberSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_GetPotentialGroupsForMemberSignalError(output, error_type, error_str);
        Q_EMIT groupV2_GetPotentialGroupsForMemberSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_GetRecommendedGroups(const qint32 &create_date_range, const qint32 &group_type) {
    QString fullPath = QString(_serverConfigs["groupV2_GetRecommendedGroups"][_serverIndices.value("groupV2_GetRecommendedGroups")].URL()+"/GroupV2/Recommended/{groupType}/{createDateRange}/");
    
    
    {
        QString create_date_rangePathParam("{");
        create_date_rangePathParam.append("createDateRange").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "createDateRange", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"createDateRange"+pathSuffix : pathPrefix;
        fullPath.replace(create_date_rangePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(create_date_range)));
    }
    
    {
        QString group_typePathParam("{");
        group_typePathParam.append("groupType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupType"+pathSuffix : pathPrefix;
        fullPath.replace(group_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_GetRecommendedGroupsCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("ReadGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_GetRecommendedGroupsCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_GetRecommendedGroupsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_GetRecommendedGroups_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_GetRecommendedGroupsSignal(output);
        Q_EMIT groupV2_GetRecommendedGroupsSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("ReadGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_GetRecommendedGroupsSignalE(output, error_type, error_str);
        Q_EMIT groupV2_GetRecommendedGroupsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_GetRecommendedGroupsSignalError(output, error_type, error_str);
        Q_EMIT groupV2_GetRecommendedGroupsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_GetUserClanInviteSetting(const qint32 &m_type) {
    QString fullPath = QString(_serverConfigs["groupV2_GetUserClanInviteSetting"][_serverIndices.value("groupV2_GetUserClanInviteSetting")].URL()+"/GroupV2/GetUserClanInviteSetting/{mType}/");
    
    
    {
        QString m_typePathParam("{");
        m_typePathParam.append("mType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mType"+pathSuffix : pathPrefix;
        fullPath.replace(m_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(m_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_GetUserClanInviteSettingCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("ReadUserData");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_GetUserClanInviteSettingCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_GetUserClanInviteSettingCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_GetUserClanInviteSetting_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_GetUserClanInviteSettingSignal(output);
        Q_EMIT groupV2_GetUserClanInviteSettingSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("ReadUserData");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_GetUserClanInviteSettingSignalE(output, error_type, error_str);
        Q_EMIT groupV2_GetUserClanInviteSettingSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_GetUserClanInviteSettingSignalError(output, error_type, error_str);
        Q_EMIT groupV2_GetUserClanInviteSettingSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_GroupSearch() {
    QString fullPath = QString(_serverConfigs["groupV2_GroupSearch"][_serverIndices.value("groupV2_GroupSearch")].URL()+"/GroupV2/Search/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_GroupSearchCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_GroupSearchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_GroupSearch_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_GroupSearchSignal(output);
        Q_EMIT groupV2_GroupSearchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_GroupSearchSignalE(output, error_type, error_str);
        Q_EMIT groupV2_GroupSearchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_GroupSearchSignalError(output, error_type, error_str);
        Q_EMIT groupV2_GroupSearchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_IndividualGroupInvite(const qint64 &group_id, const qint64 &membership_id, const qint32 &membership_type) {
    QString fullPath = QString(_serverConfigs["groupV2_IndividualGroupInvite"][_serverIndices.value("groupV2_IndividualGroupInvite")].URL()+"/GroupV2/{groupId}/Members/IndividualInvite/{membershipType}/{membershipId}/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    
    {
        QString membership_idPathParam("{");
        membership_idPathParam.append("membershipId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipId"+pathSuffix : pathPrefix;
        fullPath.replace(membership_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_id)));
    }
    
    {
        QString membership_typePathParam("{");
        membership_typePathParam.append("membershipType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipType"+pathSuffix : pathPrefix;
        fullPath.replace(membership_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_IndividualGroupInviteCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("AdminGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_IndividualGroupInviteCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_IndividualGroupInviteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_IndividualGroupInvite_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_IndividualGroupInviteSignal(output);
        Q_EMIT groupV2_IndividualGroupInviteSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("AdminGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_IndividualGroupInviteSignalE(output, error_type, error_str);
        Q_EMIT groupV2_IndividualGroupInviteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_IndividualGroupInviteSignalError(output, error_type, error_str);
        Q_EMIT groupV2_IndividualGroupInviteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_IndividualGroupInviteCancel(const qint64 &group_id, const qint64 &membership_id, const qint32 &membership_type) {
    QString fullPath = QString(_serverConfigs["groupV2_IndividualGroupInviteCancel"][_serverIndices.value("groupV2_IndividualGroupInviteCancel")].URL()+"/GroupV2/{groupId}/Members/IndividualInviteCancel/{membershipType}/{membershipId}/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    
    {
        QString membership_idPathParam("{");
        membership_idPathParam.append("membershipId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipId"+pathSuffix : pathPrefix;
        fullPath.replace(membership_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_id)));
    }
    
    {
        QString membership_typePathParam("{");
        membership_typePathParam.append("membershipType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipType"+pathSuffix : pathPrefix;
        fullPath.replace(membership_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_IndividualGroupInviteCancelCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("AdminGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_IndividualGroupInviteCancelCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_IndividualGroupInviteCancelCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_IndividualGroupInvite_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_IndividualGroupInviteCancelSignal(output);
        Q_EMIT groupV2_IndividualGroupInviteCancelSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("AdminGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_IndividualGroupInviteCancelSignalE(output, error_type, error_str);
        Q_EMIT groupV2_IndividualGroupInviteCancelSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_IndividualGroupInviteCancelSignalError(output, error_type, error_str);
        Q_EMIT groupV2_IndividualGroupInviteCancelSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_KickMember(const qint64 &group_id, const qint64 &membership_id, const qint32 &membership_type) {
    QString fullPath = QString(_serverConfigs["groupV2_KickMember"][_serverIndices.value("groupV2_KickMember")].URL()+"/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Kick/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    
    {
        QString membership_idPathParam("{");
        membership_idPathParam.append("membershipId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipId"+pathSuffix : pathPrefix;
        fullPath.replace(membership_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_id)));
    }
    
    {
        QString membership_typePathParam("{");
        membership_typePathParam.append("membershipType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipType"+pathSuffix : pathPrefix;
        fullPath.replace(membership_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_KickMemberCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("AdminGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_KickMemberCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_KickMemberCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_KickMember_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_KickMemberSignal(output);
        Q_EMIT groupV2_KickMemberSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("AdminGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_KickMemberSignalE(output, error_type, error_str);
        Q_EMIT groupV2_KickMemberSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_KickMemberSignalError(output, error_type, error_str);
        Q_EMIT groupV2_KickMemberSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_RecoverGroupForFounder(const qint32 &group_type, const qint64 &membership_id, const qint32 &membership_type) {
    QString fullPath = QString(_serverConfigs["groupV2_RecoverGroupForFounder"][_serverIndices.value("groupV2_RecoverGroupForFounder")].URL()+"/GroupV2/Recover/{membershipType}/{membershipId}/{groupType}/");
    
    
    {
        QString group_typePathParam("{");
        group_typePathParam.append("groupType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupType"+pathSuffix : pathPrefix;
        fullPath.replace(group_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_type)));
    }
    
    {
        QString membership_idPathParam("{");
        membership_idPathParam.append("membershipId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipId"+pathSuffix : pathPrefix;
        fullPath.replace(membership_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_id)));
    }
    
    {
        QString membership_typePathParam("{");
        membership_typePathParam.append("membershipType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipType"+pathSuffix : pathPrefix;
        fullPath.replace(membership_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_RecoverGroupForFounderCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_RecoverGroupForFounderCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_RecoverGroupForFounder_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_RecoverGroupForFounderSignal(output);
        Q_EMIT groupV2_RecoverGroupForFounderSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_RecoverGroupForFounderSignalE(output, error_type, error_str);
        Q_EMIT groupV2_RecoverGroupForFounderSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_RecoverGroupForFounderSignalError(output, error_type, error_str);
        Q_EMIT groupV2_RecoverGroupForFounderSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::groupV2_UnbanMember(const qint64 &group_id, const qint64 &membership_id, const qint32 &membership_type) {
    QString fullPath = QString(_serverConfigs["groupV2_UnbanMember"][_serverIndices.value("groupV2_UnbanMember")].URL()+"/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Unban/");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    
    {
        QString membership_idPathParam("{");
        membership_idPathParam.append("membershipId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipId"+pathSuffix : pathPrefix;
        fullPath.replace(membership_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_id)));
    }
    
    {
        QString membership_typePathParam("{");
        membership_typePathParam.append("membershipType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipType"+pathSuffix : pathPrefix;
        fullPath.replace(membership_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_UnbanMemberCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("AdminGroups");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGroupV2Api::groupV2_UnbanMemberCallback);
    connect(this, &OAIGroupV2Api::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIGroupV2Api::groupV2_UnbanMemberCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDestiny2_EquipItem_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT groupV2_UnbanMemberSignal(output);
        Q_EMIT groupV2_UnbanMemberSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("AdminGroups");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT groupV2_UnbanMemberSignalE(output, error_type, error_str);
        Q_EMIT groupV2_UnbanMemberSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT groupV2_UnbanMemberSignalError(output, error_type, error_str);
        Q_EMIT groupV2_UnbanMemberSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGroupV2Api::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
