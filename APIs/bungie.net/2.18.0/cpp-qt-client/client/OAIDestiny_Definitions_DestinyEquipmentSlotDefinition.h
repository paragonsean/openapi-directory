/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyEquipmentSlotDefinition.h
 *
 * Characters can not only have Inventory buckets (containers of items that are generally matched by their type or functionality), they can also have Equipment Slots.  The Equipment Slot is an indicator that the related bucket can have instanced items equipped on the character. For instance, the Primary Weapon bucket has an Equipment Slot that determines whether you can equip primary weapons, and holds the association between its slot and the inventory bucket from which it can have items equipped.  An Equipment Slot must have a related Inventory Bucket, but not all inventory buckets must have Equipment Slots.
 */

#ifndef OAIDestiny_Definitions_DestinyEquipmentSlotDefinition_H
#define OAIDestiny_Definitions_DestinyEquipmentSlotDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition.h"
#include "OAIDestiny_Definitions_DestinyArtDyeReference.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_DestinyArtDyeReference;
class OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition;

class OAIDestiny_Definitions_DestinyEquipmentSlotDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyEquipmentSlotDefinition();
    OAIDestiny_Definitions_DestinyEquipmentSlotDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyEquipmentSlotDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isApplyCustomArtDyes() const;
    void setApplyCustomArtDyes(const bool &apply_custom_art_dyes);
    bool is_apply_custom_art_dyes_Set() const;
    bool is_apply_custom_art_dyes_Valid() const;

    QList<OAIDestiny_Definitions_DestinyArtDyeReference> getArtDyeChannels() const;
    void setArtDyeChannels(const QList<OAIDestiny_Definitions_DestinyArtDyeReference> &art_dye_channels);
    bool is_art_dye_channels_Set() const;
    bool is_art_dye_channels_Valid() const;

    qint32 getBucketTypeHash() const;
    void setBucketTypeHash(const qint32 &bucket_type_hash);
    bool is_bucket_type_hash_Set() const;
    bool is_bucket_type_hash_Valid() const;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition getDisplayProperties() const;
    void setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties);
    bool is_display_properties_Set() const;
    bool is_display_properties_Valid() const;

    qint32 getEquipmentCategoryHash() const;
    void setEquipmentCategoryHash(const qint32 &equipment_category_hash);
    bool is_equipment_category_hash_Set() const;
    bool is_equipment_category_hash_Valid() const;

    qint32 getHash() const;
    void setHash(const qint32 &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    qint32 getIndex() const;
    void setIndex(const qint32 &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    bool isRedacted() const;
    void setRedacted(const bool &redacted);
    bool is_redacted_Set() const;
    bool is_redacted_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_apply_custom_art_dyes;
    bool m_apply_custom_art_dyes_isSet;
    bool m_apply_custom_art_dyes_isValid;

    QList<OAIDestiny_Definitions_DestinyArtDyeReference> m_art_dye_channels;
    bool m_art_dye_channels_isSet;
    bool m_art_dye_channels_isValid;

    qint32 m_bucket_type_hash;
    bool m_bucket_type_hash_isSet;
    bool m_bucket_type_hash_isValid;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition m_display_properties;
    bool m_display_properties_isSet;
    bool m_display_properties_isValid;

    qint32 m_equipment_category_hash;
    bool m_equipment_category_hash_isSet;
    bool m_equipment_category_hash_isValid;

    qint32 m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    qint32 m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    bool m_redacted;
    bool m_redacted_isSet;
    bool m_redacted_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyEquipmentSlotDefinition)

#endif // OAIDestiny_Definitions_DestinyEquipmentSlotDefinition_H
