/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommon_Models_Destiny2CoreSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommon_Models_Destiny2CoreSettings::OAICommon_Models_Destiny2CoreSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommon_Models_Destiny2CoreSettings::OAICommon_Models_Destiny2CoreSettings() {
    this->initializeModel();
}

OAICommon_Models_Destiny2CoreSettings::~OAICommon_Models_Destiny2CoreSettings() {}

void OAICommon_Models_Destiny2CoreSettings::initializeModel() {

    m_active_seals_root_node_hash_isSet = false;
    m_active_seals_root_node_hash_isValid = false;

    m_active_triumphs_root_node_hash_isSet = false;
    m_active_triumphs_root_node_hash_isValid = false;

    m_ammo_type_heavy_icon_isSet = false;
    m_ammo_type_heavy_icon_isValid = false;

    m_ammo_type_primary_icon_isSet = false;
    m_ammo_type_primary_icon_isValid = false;

    m_ammo_type_special_icon_isSet = false;
    m_ammo_type_special_icon_isValid = false;

    m_badges_root_node_isSet = false;
    m_badges_root_node_isValid = false;

    m_collection_root_node_isSet = false;
    m_collection_root_node_isValid = false;

    m_crafting_root_node_hash_isSet = false;
    m_crafting_root_node_hash_isValid = false;

    m_current_rank_progression_hashes_isSet = false;
    m_current_rank_progression_hashes_isValid = false;

    m_current_season_hash_isSet = false;
    m_current_season_hash_isValid = false;

    m_current_seasonal_artifact_hash_isSet = false;
    m_current_seasonal_artifact_hash_isValid = false;

    m_exotic_catalysts_root_node_hash_isSet = false;
    m_exotic_catalysts_root_node_hash_isValid = false;

    m_future_season_hashes_isSet = false;
    m_future_season_hashes_isValid = false;

    m_guardian_rank_constants_hash_isSet = false;
    m_guardian_rank_constants_hash_isValid = false;

    m_guardian_ranks_root_node_hash_isSet = false;
    m_guardian_ranks_root_node_hash_isValid = false;

    m_insert_plug_free_blocked_socket_type_hashes_isSet = false;
    m_insert_plug_free_blocked_socket_type_hashes_isValid = false;

    m_insert_plug_free_protected_plug_item_hashes_isSet = false;
    m_insert_plug_free_protected_plug_item_hashes_isValid = false;

    m_legacy_seals_root_node_hash_isSet = false;
    m_legacy_seals_root_node_hash_isValid = false;

    m_legacy_triumphs_root_node_hash_isSet = false;
    m_legacy_triumphs_root_node_hash_isValid = false;

    m_loadout_constants_hash_isSet = false;
    m_loadout_constants_hash_isValid = false;

    m_lore_root_node_hash_isSet = false;
    m_lore_root_node_hash_isValid = false;

    m_medals_root_node_isSet = false;
    m_medals_root_node_isValid = false;

    m_medals_root_node_hash_isSet = false;
    m_medals_root_node_hash_isValid = false;

    m_metrics_root_node_isSet = false;
    m_metrics_root_node_isValid = false;

    m_past_season_hashes_isSet = false;
    m_past_season_hashes_isValid = false;

    m_records_root_node_isSet = false;
    m_records_root_node_isValid = false;

    m_seasonal_challenges_presentation_node_hash_isSet = false;
    m_seasonal_challenges_presentation_node_hash_isValid = false;

    m_undiscovered_collectible_image_isSet = false;
    m_undiscovered_collectible_image_isValid = false;
}

void OAICommon_Models_Destiny2CoreSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommon_Models_Destiny2CoreSettings::fromJsonObject(QJsonObject json) {

    m_active_seals_root_node_hash_isValid = ::OpenAPI::fromJsonValue(m_active_seals_root_node_hash, json[QString("activeSealsRootNodeHash")]);
    m_active_seals_root_node_hash_isSet = !json[QString("activeSealsRootNodeHash")].isNull() && m_active_seals_root_node_hash_isValid;

    m_active_triumphs_root_node_hash_isValid = ::OpenAPI::fromJsonValue(m_active_triumphs_root_node_hash, json[QString("activeTriumphsRootNodeHash")]);
    m_active_triumphs_root_node_hash_isSet = !json[QString("activeTriumphsRootNodeHash")].isNull() && m_active_triumphs_root_node_hash_isValid;

    m_ammo_type_heavy_icon_isValid = ::OpenAPI::fromJsonValue(m_ammo_type_heavy_icon, json[QString("ammoTypeHeavyIcon")]);
    m_ammo_type_heavy_icon_isSet = !json[QString("ammoTypeHeavyIcon")].isNull() && m_ammo_type_heavy_icon_isValid;

    m_ammo_type_primary_icon_isValid = ::OpenAPI::fromJsonValue(m_ammo_type_primary_icon, json[QString("ammoTypePrimaryIcon")]);
    m_ammo_type_primary_icon_isSet = !json[QString("ammoTypePrimaryIcon")].isNull() && m_ammo_type_primary_icon_isValid;

    m_ammo_type_special_icon_isValid = ::OpenAPI::fromJsonValue(m_ammo_type_special_icon, json[QString("ammoTypeSpecialIcon")]);
    m_ammo_type_special_icon_isSet = !json[QString("ammoTypeSpecialIcon")].isNull() && m_ammo_type_special_icon_isValid;

    m_badges_root_node_isValid = ::OpenAPI::fromJsonValue(m_badges_root_node, json[QString("badgesRootNode")]);
    m_badges_root_node_isSet = !json[QString("badgesRootNode")].isNull() && m_badges_root_node_isValid;

    m_collection_root_node_isValid = ::OpenAPI::fromJsonValue(m_collection_root_node, json[QString("collectionRootNode")]);
    m_collection_root_node_isSet = !json[QString("collectionRootNode")].isNull() && m_collection_root_node_isValid;

    m_crafting_root_node_hash_isValid = ::OpenAPI::fromJsonValue(m_crafting_root_node_hash, json[QString("craftingRootNodeHash")]);
    m_crafting_root_node_hash_isSet = !json[QString("craftingRootNodeHash")].isNull() && m_crafting_root_node_hash_isValid;

    m_current_rank_progression_hashes_isValid = ::OpenAPI::fromJsonValue(m_current_rank_progression_hashes, json[QString("currentRankProgressionHashes")]);
    m_current_rank_progression_hashes_isSet = !json[QString("currentRankProgressionHashes")].isNull() && m_current_rank_progression_hashes_isValid;

    m_current_season_hash_isValid = ::OpenAPI::fromJsonValue(m_current_season_hash, json[QString("currentSeasonHash")]);
    m_current_season_hash_isSet = !json[QString("currentSeasonHash")].isNull() && m_current_season_hash_isValid;

    m_current_seasonal_artifact_hash_isValid = ::OpenAPI::fromJsonValue(m_current_seasonal_artifact_hash, json[QString("currentSeasonalArtifactHash")]);
    m_current_seasonal_artifact_hash_isSet = !json[QString("currentSeasonalArtifactHash")].isNull() && m_current_seasonal_artifact_hash_isValid;

    m_exotic_catalysts_root_node_hash_isValid = ::OpenAPI::fromJsonValue(m_exotic_catalysts_root_node_hash, json[QString("exoticCatalystsRootNodeHash")]);
    m_exotic_catalysts_root_node_hash_isSet = !json[QString("exoticCatalystsRootNodeHash")].isNull() && m_exotic_catalysts_root_node_hash_isValid;

    m_future_season_hashes_isValid = ::OpenAPI::fromJsonValue(m_future_season_hashes, json[QString("futureSeasonHashes")]);
    m_future_season_hashes_isSet = !json[QString("futureSeasonHashes")].isNull() && m_future_season_hashes_isValid;

    m_guardian_rank_constants_hash_isValid = ::OpenAPI::fromJsonValue(m_guardian_rank_constants_hash, json[QString("guardianRankConstantsHash")]);
    m_guardian_rank_constants_hash_isSet = !json[QString("guardianRankConstantsHash")].isNull() && m_guardian_rank_constants_hash_isValid;

    m_guardian_ranks_root_node_hash_isValid = ::OpenAPI::fromJsonValue(m_guardian_ranks_root_node_hash, json[QString("guardianRanksRootNodeHash")]);
    m_guardian_ranks_root_node_hash_isSet = !json[QString("guardianRanksRootNodeHash")].isNull() && m_guardian_ranks_root_node_hash_isValid;

    m_insert_plug_free_blocked_socket_type_hashes_isValid = ::OpenAPI::fromJsonValue(m_insert_plug_free_blocked_socket_type_hashes, json[QString("insertPlugFreeBlockedSocketTypeHashes")]);
    m_insert_plug_free_blocked_socket_type_hashes_isSet = !json[QString("insertPlugFreeBlockedSocketTypeHashes")].isNull() && m_insert_plug_free_blocked_socket_type_hashes_isValid;

    m_insert_plug_free_protected_plug_item_hashes_isValid = ::OpenAPI::fromJsonValue(m_insert_plug_free_protected_plug_item_hashes, json[QString("insertPlugFreeProtectedPlugItemHashes")]);
    m_insert_plug_free_protected_plug_item_hashes_isSet = !json[QString("insertPlugFreeProtectedPlugItemHashes")].isNull() && m_insert_plug_free_protected_plug_item_hashes_isValid;

    m_legacy_seals_root_node_hash_isValid = ::OpenAPI::fromJsonValue(m_legacy_seals_root_node_hash, json[QString("legacySealsRootNodeHash")]);
    m_legacy_seals_root_node_hash_isSet = !json[QString("legacySealsRootNodeHash")].isNull() && m_legacy_seals_root_node_hash_isValid;

    m_legacy_triumphs_root_node_hash_isValid = ::OpenAPI::fromJsonValue(m_legacy_triumphs_root_node_hash, json[QString("legacyTriumphsRootNodeHash")]);
    m_legacy_triumphs_root_node_hash_isSet = !json[QString("legacyTriumphsRootNodeHash")].isNull() && m_legacy_triumphs_root_node_hash_isValid;

    m_loadout_constants_hash_isValid = ::OpenAPI::fromJsonValue(m_loadout_constants_hash, json[QString("loadoutConstantsHash")]);
    m_loadout_constants_hash_isSet = !json[QString("loadoutConstantsHash")].isNull() && m_loadout_constants_hash_isValid;

    m_lore_root_node_hash_isValid = ::OpenAPI::fromJsonValue(m_lore_root_node_hash, json[QString("loreRootNodeHash")]);
    m_lore_root_node_hash_isSet = !json[QString("loreRootNodeHash")].isNull() && m_lore_root_node_hash_isValid;

    m_medals_root_node_isValid = ::OpenAPI::fromJsonValue(m_medals_root_node, json[QString("medalsRootNode")]);
    m_medals_root_node_isSet = !json[QString("medalsRootNode")].isNull() && m_medals_root_node_isValid;

    m_medals_root_node_hash_isValid = ::OpenAPI::fromJsonValue(m_medals_root_node_hash, json[QString("medalsRootNodeHash")]);
    m_medals_root_node_hash_isSet = !json[QString("medalsRootNodeHash")].isNull() && m_medals_root_node_hash_isValid;

    m_metrics_root_node_isValid = ::OpenAPI::fromJsonValue(m_metrics_root_node, json[QString("metricsRootNode")]);
    m_metrics_root_node_isSet = !json[QString("metricsRootNode")].isNull() && m_metrics_root_node_isValid;

    m_past_season_hashes_isValid = ::OpenAPI::fromJsonValue(m_past_season_hashes, json[QString("pastSeasonHashes")]);
    m_past_season_hashes_isSet = !json[QString("pastSeasonHashes")].isNull() && m_past_season_hashes_isValid;

    m_records_root_node_isValid = ::OpenAPI::fromJsonValue(m_records_root_node, json[QString("recordsRootNode")]);
    m_records_root_node_isSet = !json[QString("recordsRootNode")].isNull() && m_records_root_node_isValid;

    m_seasonal_challenges_presentation_node_hash_isValid = ::OpenAPI::fromJsonValue(m_seasonal_challenges_presentation_node_hash, json[QString("seasonalChallengesPresentationNodeHash")]);
    m_seasonal_challenges_presentation_node_hash_isSet = !json[QString("seasonalChallengesPresentationNodeHash")].isNull() && m_seasonal_challenges_presentation_node_hash_isValid;

    m_undiscovered_collectible_image_isValid = ::OpenAPI::fromJsonValue(m_undiscovered_collectible_image, json[QString("undiscoveredCollectibleImage")]);
    m_undiscovered_collectible_image_isSet = !json[QString("undiscoveredCollectibleImage")].isNull() && m_undiscovered_collectible_image_isValid;
}

QString OAICommon_Models_Destiny2CoreSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommon_Models_Destiny2CoreSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_active_seals_root_node_hash_isSet) {
        obj.insert(QString("activeSealsRootNodeHash"), ::OpenAPI::toJsonValue(m_active_seals_root_node_hash));
    }
    if (m_active_triumphs_root_node_hash_isSet) {
        obj.insert(QString("activeTriumphsRootNodeHash"), ::OpenAPI::toJsonValue(m_active_triumphs_root_node_hash));
    }
    if (m_ammo_type_heavy_icon_isSet) {
        obj.insert(QString("ammoTypeHeavyIcon"), ::OpenAPI::toJsonValue(m_ammo_type_heavy_icon));
    }
    if (m_ammo_type_primary_icon_isSet) {
        obj.insert(QString("ammoTypePrimaryIcon"), ::OpenAPI::toJsonValue(m_ammo_type_primary_icon));
    }
    if (m_ammo_type_special_icon_isSet) {
        obj.insert(QString("ammoTypeSpecialIcon"), ::OpenAPI::toJsonValue(m_ammo_type_special_icon));
    }
    if (m_badges_root_node_isSet) {
        obj.insert(QString("badgesRootNode"), ::OpenAPI::toJsonValue(m_badges_root_node));
    }
    if (m_collection_root_node_isSet) {
        obj.insert(QString("collectionRootNode"), ::OpenAPI::toJsonValue(m_collection_root_node));
    }
    if (m_crafting_root_node_hash_isSet) {
        obj.insert(QString("craftingRootNodeHash"), ::OpenAPI::toJsonValue(m_crafting_root_node_hash));
    }
    if (m_current_rank_progression_hashes.size() > 0) {
        obj.insert(QString("currentRankProgressionHashes"), ::OpenAPI::toJsonValue(m_current_rank_progression_hashes));
    }
    if (m_current_season_hash_isSet) {
        obj.insert(QString("currentSeasonHash"), ::OpenAPI::toJsonValue(m_current_season_hash));
    }
    if (m_current_seasonal_artifact_hash_isSet) {
        obj.insert(QString("currentSeasonalArtifactHash"), ::OpenAPI::toJsonValue(m_current_seasonal_artifact_hash));
    }
    if (m_exotic_catalysts_root_node_hash_isSet) {
        obj.insert(QString("exoticCatalystsRootNodeHash"), ::OpenAPI::toJsonValue(m_exotic_catalysts_root_node_hash));
    }
    if (m_future_season_hashes.size() > 0) {
        obj.insert(QString("futureSeasonHashes"), ::OpenAPI::toJsonValue(m_future_season_hashes));
    }
    if (m_guardian_rank_constants_hash_isSet) {
        obj.insert(QString("guardianRankConstantsHash"), ::OpenAPI::toJsonValue(m_guardian_rank_constants_hash));
    }
    if (m_guardian_ranks_root_node_hash_isSet) {
        obj.insert(QString("guardianRanksRootNodeHash"), ::OpenAPI::toJsonValue(m_guardian_ranks_root_node_hash));
    }
    if (m_insert_plug_free_blocked_socket_type_hashes.size() > 0) {
        obj.insert(QString("insertPlugFreeBlockedSocketTypeHashes"), ::OpenAPI::toJsonValue(m_insert_plug_free_blocked_socket_type_hashes));
    }
    if (m_insert_plug_free_protected_plug_item_hashes.size() > 0) {
        obj.insert(QString("insertPlugFreeProtectedPlugItemHashes"), ::OpenAPI::toJsonValue(m_insert_plug_free_protected_plug_item_hashes));
    }
    if (m_legacy_seals_root_node_hash_isSet) {
        obj.insert(QString("legacySealsRootNodeHash"), ::OpenAPI::toJsonValue(m_legacy_seals_root_node_hash));
    }
    if (m_legacy_triumphs_root_node_hash_isSet) {
        obj.insert(QString("legacyTriumphsRootNodeHash"), ::OpenAPI::toJsonValue(m_legacy_triumphs_root_node_hash));
    }
    if (m_loadout_constants_hash_isSet) {
        obj.insert(QString("loadoutConstantsHash"), ::OpenAPI::toJsonValue(m_loadout_constants_hash));
    }
    if (m_lore_root_node_hash_isSet) {
        obj.insert(QString("loreRootNodeHash"), ::OpenAPI::toJsonValue(m_lore_root_node_hash));
    }
    if (m_medals_root_node_isSet) {
        obj.insert(QString("medalsRootNode"), ::OpenAPI::toJsonValue(m_medals_root_node));
    }
    if (m_medals_root_node_hash_isSet) {
        obj.insert(QString("medalsRootNodeHash"), ::OpenAPI::toJsonValue(m_medals_root_node_hash));
    }
    if (m_metrics_root_node_isSet) {
        obj.insert(QString("metricsRootNode"), ::OpenAPI::toJsonValue(m_metrics_root_node));
    }
    if (m_past_season_hashes.size() > 0) {
        obj.insert(QString("pastSeasonHashes"), ::OpenAPI::toJsonValue(m_past_season_hashes));
    }
    if (m_records_root_node_isSet) {
        obj.insert(QString("recordsRootNode"), ::OpenAPI::toJsonValue(m_records_root_node));
    }
    if (m_seasonal_challenges_presentation_node_hash_isSet) {
        obj.insert(QString("seasonalChallengesPresentationNodeHash"), ::OpenAPI::toJsonValue(m_seasonal_challenges_presentation_node_hash));
    }
    if (m_undiscovered_collectible_image_isSet) {
        obj.insert(QString("undiscoveredCollectibleImage"), ::OpenAPI::toJsonValue(m_undiscovered_collectible_image));
    }
    return obj;
}

qint32 OAICommon_Models_Destiny2CoreSettings::getActiveSealsRootNodeHash() const {
    return m_active_seals_root_node_hash;
}
void OAICommon_Models_Destiny2CoreSettings::setActiveSealsRootNodeHash(const qint32 &active_seals_root_node_hash) {
    m_active_seals_root_node_hash = active_seals_root_node_hash;
    m_active_seals_root_node_hash_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_active_seals_root_node_hash_Set() const{
    return m_active_seals_root_node_hash_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_active_seals_root_node_hash_Valid() const{
    return m_active_seals_root_node_hash_isValid;
}

qint32 OAICommon_Models_Destiny2CoreSettings::getActiveTriumphsRootNodeHash() const {
    return m_active_triumphs_root_node_hash;
}
void OAICommon_Models_Destiny2CoreSettings::setActiveTriumphsRootNodeHash(const qint32 &active_triumphs_root_node_hash) {
    m_active_triumphs_root_node_hash = active_triumphs_root_node_hash;
    m_active_triumphs_root_node_hash_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_active_triumphs_root_node_hash_Set() const{
    return m_active_triumphs_root_node_hash_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_active_triumphs_root_node_hash_Valid() const{
    return m_active_triumphs_root_node_hash_isValid;
}

QString OAICommon_Models_Destiny2CoreSettings::getAmmoTypeHeavyIcon() const {
    return m_ammo_type_heavy_icon;
}
void OAICommon_Models_Destiny2CoreSettings::setAmmoTypeHeavyIcon(const QString &ammo_type_heavy_icon) {
    m_ammo_type_heavy_icon = ammo_type_heavy_icon;
    m_ammo_type_heavy_icon_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_ammo_type_heavy_icon_Set() const{
    return m_ammo_type_heavy_icon_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_ammo_type_heavy_icon_Valid() const{
    return m_ammo_type_heavy_icon_isValid;
}

QString OAICommon_Models_Destiny2CoreSettings::getAmmoTypePrimaryIcon() const {
    return m_ammo_type_primary_icon;
}
void OAICommon_Models_Destiny2CoreSettings::setAmmoTypePrimaryIcon(const QString &ammo_type_primary_icon) {
    m_ammo_type_primary_icon = ammo_type_primary_icon;
    m_ammo_type_primary_icon_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_ammo_type_primary_icon_Set() const{
    return m_ammo_type_primary_icon_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_ammo_type_primary_icon_Valid() const{
    return m_ammo_type_primary_icon_isValid;
}

QString OAICommon_Models_Destiny2CoreSettings::getAmmoTypeSpecialIcon() const {
    return m_ammo_type_special_icon;
}
void OAICommon_Models_Destiny2CoreSettings::setAmmoTypeSpecialIcon(const QString &ammo_type_special_icon) {
    m_ammo_type_special_icon = ammo_type_special_icon;
    m_ammo_type_special_icon_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_ammo_type_special_icon_Set() const{
    return m_ammo_type_special_icon_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_ammo_type_special_icon_Valid() const{
    return m_ammo_type_special_icon_isValid;
}

qint32 OAICommon_Models_Destiny2CoreSettings::getBadgesRootNode() const {
    return m_badges_root_node;
}
void OAICommon_Models_Destiny2CoreSettings::setBadgesRootNode(const qint32 &badges_root_node) {
    m_badges_root_node = badges_root_node;
    m_badges_root_node_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_badges_root_node_Set() const{
    return m_badges_root_node_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_badges_root_node_Valid() const{
    return m_badges_root_node_isValid;
}

qint32 OAICommon_Models_Destiny2CoreSettings::getCollectionRootNode() const {
    return m_collection_root_node;
}
void OAICommon_Models_Destiny2CoreSettings::setCollectionRootNode(const qint32 &collection_root_node) {
    m_collection_root_node = collection_root_node;
    m_collection_root_node_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_collection_root_node_Set() const{
    return m_collection_root_node_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_collection_root_node_Valid() const{
    return m_collection_root_node_isValid;
}

qint32 OAICommon_Models_Destiny2CoreSettings::getCraftingRootNodeHash() const {
    return m_crafting_root_node_hash;
}
void OAICommon_Models_Destiny2CoreSettings::setCraftingRootNodeHash(const qint32 &crafting_root_node_hash) {
    m_crafting_root_node_hash = crafting_root_node_hash;
    m_crafting_root_node_hash_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_crafting_root_node_hash_Set() const{
    return m_crafting_root_node_hash_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_crafting_root_node_hash_Valid() const{
    return m_crafting_root_node_hash_isValid;
}

QList<qint32> OAICommon_Models_Destiny2CoreSettings::getCurrentRankProgressionHashes() const {
    return m_current_rank_progression_hashes;
}
void OAICommon_Models_Destiny2CoreSettings::setCurrentRankProgressionHashes(const QList<qint32> &current_rank_progression_hashes) {
    m_current_rank_progression_hashes = current_rank_progression_hashes;
    m_current_rank_progression_hashes_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_current_rank_progression_hashes_Set() const{
    return m_current_rank_progression_hashes_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_current_rank_progression_hashes_Valid() const{
    return m_current_rank_progression_hashes_isValid;
}

qint32 OAICommon_Models_Destiny2CoreSettings::getCurrentSeasonHash() const {
    return m_current_season_hash;
}
void OAICommon_Models_Destiny2CoreSettings::setCurrentSeasonHash(const qint32 &current_season_hash) {
    m_current_season_hash = current_season_hash;
    m_current_season_hash_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_current_season_hash_Set() const{
    return m_current_season_hash_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_current_season_hash_Valid() const{
    return m_current_season_hash_isValid;
}

qint32 OAICommon_Models_Destiny2CoreSettings::getCurrentSeasonalArtifactHash() const {
    return m_current_seasonal_artifact_hash;
}
void OAICommon_Models_Destiny2CoreSettings::setCurrentSeasonalArtifactHash(const qint32 &current_seasonal_artifact_hash) {
    m_current_seasonal_artifact_hash = current_seasonal_artifact_hash;
    m_current_seasonal_artifact_hash_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_current_seasonal_artifact_hash_Set() const{
    return m_current_seasonal_artifact_hash_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_current_seasonal_artifact_hash_Valid() const{
    return m_current_seasonal_artifact_hash_isValid;
}

qint32 OAICommon_Models_Destiny2CoreSettings::getExoticCatalystsRootNodeHash() const {
    return m_exotic_catalysts_root_node_hash;
}
void OAICommon_Models_Destiny2CoreSettings::setExoticCatalystsRootNodeHash(const qint32 &exotic_catalysts_root_node_hash) {
    m_exotic_catalysts_root_node_hash = exotic_catalysts_root_node_hash;
    m_exotic_catalysts_root_node_hash_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_exotic_catalysts_root_node_hash_Set() const{
    return m_exotic_catalysts_root_node_hash_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_exotic_catalysts_root_node_hash_Valid() const{
    return m_exotic_catalysts_root_node_hash_isValid;
}

QList<qint32> OAICommon_Models_Destiny2CoreSettings::getFutureSeasonHashes() const {
    return m_future_season_hashes;
}
void OAICommon_Models_Destiny2CoreSettings::setFutureSeasonHashes(const QList<qint32> &future_season_hashes) {
    m_future_season_hashes = future_season_hashes;
    m_future_season_hashes_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_future_season_hashes_Set() const{
    return m_future_season_hashes_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_future_season_hashes_Valid() const{
    return m_future_season_hashes_isValid;
}

qint32 OAICommon_Models_Destiny2CoreSettings::getGuardianRankConstantsHash() const {
    return m_guardian_rank_constants_hash;
}
void OAICommon_Models_Destiny2CoreSettings::setGuardianRankConstantsHash(const qint32 &guardian_rank_constants_hash) {
    m_guardian_rank_constants_hash = guardian_rank_constants_hash;
    m_guardian_rank_constants_hash_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_guardian_rank_constants_hash_Set() const{
    return m_guardian_rank_constants_hash_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_guardian_rank_constants_hash_Valid() const{
    return m_guardian_rank_constants_hash_isValid;
}

qint32 OAICommon_Models_Destiny2CoreSettings::getGuardianRanksRootNodeHash() const {
    return m_guardian_ranks_root_node_hash;
}
void OAICommon_Models_Destiny2CoreSettings::setGuardianRanksRootNodeHash(const qint32 &guardian_ranks_root_node_hash) {
    m_guardian_ranks_root_node_hash = guardian_ranks_root_node_hash;
    m_guardian_ranks_root_node_hash_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_guardian_ranks_root_node_hash_Set() const{
    return m_guardian_ranks_root_node_hash_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_guardian_ranks_root_node_hash_Valid() const{
    return m_guardian_ranks_root_node_hash_isValid;
}

QList<qint32> OAICommon_Models_Destiny2CoreSettings::getInsertPlugFreeBlockedSocketTypeHashes() const {
    return m_insert_plug_free_blocked_socket_type_hashes;
}
void OAICommon_Models_Destiny2CoreSettings::setInsertPlugFreeBlockedSocketTypeHashes(const QList<qint32> &insert_plug_free_blocked_socket_type_hashes) {
    m_insert_plug_free_blocked_socket_type_hashes = insert_plug_free_blocked_socket_type_hashes;
    m_insert_plug_free_blocked_socket_type_hashes_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_insert_plug_free_blocked_socket_type_hashes_Set() const{
    return m_insert_plug_free_blocked_socket_type_hashes_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_insert_plug_free_blocked_socket_type_hashes_Valid() const{
    return m_insert_plug_free_blocked_socket_type_hashes_isValid;
}

QList<qint32> OAICommon_Models_Destiny2CoreSettings::getInsertPlugFreeProtectedPlugItemHashes() const {
    return m_insert_plug_free_protected_plug_item_hashes;
}
void OAICommon_Models_Destiny2CoreSettings::setInsertPlugFreeProtectedPlugItemHashes(const QList<qint32> &insert_plug_free_protected_plug_item_hashes) {
    m_insert_plug_free_protected_plug_item_hashes = insert_plug_free_protected_plug_item_hashes;
    m_insert_plug_free_protected_plug_item_hashes_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_insert_plug_free_protected_plug_item_hashes_Set() const{
    return m_insert_plug_free_protected_plug_item_hashes_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_insert_plug_free_protected_plug_item_hashes_Valid() const{
    return m_insert_plug_free_protected_plug_item_hashes_isValid;
}

qint32 OAICommon_Models_Destiny2CoreSettings::getLegacySealsRootNodeHash() const {
    return m_legacy_seals_root_node_hash;
}
void OAICommon_Models_Destiny2CoreSettings::setLegacySealsRootNodeHash(const qint32 &legacy_seals_root_node_hash) {
    m_legacy_seals_root_node_hash = legacy_seals_root_node_hash;
    m_legacy_seals_root_node_hash_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_legacy_seals_root_node_hash_Set() const{
    return m_legacy_seals_root_node_hash_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_legacy_seals_root_node_hash_Valid() const{
    return m_legacy_seals_root_node_hash_isValid;
}

qint32 OAICommon_Models_Destiny2CoreSettings::getLegacyTriumphsRootNodeHash() const {
    return m_legacy_triumphs_root_node_hash;
}
void OAICommon_Models_Destiny2CoreSettings::setLegacyTriumphsRootNodeHash(const qint32 &legacy_triumphs_root_node_hash) {
    m_legacy_triumphs_root_node_hash = legacy_triumphs_root_node_hash;
    m_legacy_triumphs_root_node_hash_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_legacy_triumphs_root_node_hash_Set() const{
    return m_legacy_triumphs_root_node_hash_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_legacy_triumphs_root_node_hash_Valid() const{
    return m_legacy_triumphs_root_node_hash_isValid;
}

qint32 OAICommon_Models_Destiny2CoreSettings::getLoadoutConstantsHash() const {
    return m_loadout_constants_hash;
}
void OAICommon_Models_Destiny2CoreSettings::setLoadoutConstantsHash(const qint32 &loadout_constants_hash) {
    m_loadout_constants_hash = loadout_constants_hash;
    m_loadout_constants_hash_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_loadout_constants_hash_Set() const{
    return m_loadout_constants_hash_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_loadout_constants_hash_Valid() const{
    return m_loadout_constants_hash_isValid;
}

qint32 OAICommon_Models_Destiny2CoreSettings::getLoreRootNodeHash() const {
    return m_lore_root_node_hash;
}
void OAICommon_Models_Destiny2CoreSettings::setLoreRootNodeHash(const qint32 &lore_root_node_hash) {
    m_lore_root_node_hash = lore_root_node_hash;
    m_lore_root_node_hash_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_lore_root_node_hash_Set() const{
    return m_lore_root_node_hash_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_lore_root_node_hash_Valid() const{
    return m_lore_root_node_hash_isValid;
}

qint32 OAICommon_Models_Destiny2CoreSettings::getMedalsRootNode() const {
    return m_medals_root_node;
}
void OAICommon_Models_Destiny2CoreSettings::setMedalsRootNode(const qint32 &medals_root_node) {
    m_medals_root_node = medals_root_node;
    m_medals_root_node_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_medals_root_node_Set() const{
    return m_medals_root_node_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_medals_root_node_Valid() const{
    return m_medals_root_node_isValid;
}

qint32 OAICommon_Models_Destiny2CoreSettings::getMedalsRootNodeHash() const {
    return m_medals_root_node_hash;
}
void OAICommon_Models_Destiny2CoreSettings::setMedalsRootNodeHash(const qint32 &medals_root_node_hash) {
    m_medals_root_node_hash = medals_root_node_hash;
    m_medals_root_node_hash_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_medals_root_node_hash_Set() const{
    return m_medals_root_node_hash_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_medals_root_node_hash_Valid() const{
    return m_medals_root_node_hash_isValid;
}

qint32 OAICommon_Models_Destiny2CoreSettings::getMetricsRootNode() const {
    return m_metrics_root_node;
}
void OAICommon_Models_Destiny2CoreSettings::setMetricsRootNode(const qint32 &metrics_root_node) {
    m_metrics_root_node = metrics_root_node;
    m_metrics_root_node_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_metrics_root_node_Set() const{
    return m_metrics_root_node_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_metrics_root_node_Valid() const{
    return m_metrics_root_node_isValid;
}

QList<qint32> OAICommon_Models_Destiny2CoreSettings::getPastSeasonHashes() const {
    return m_past_season_hashes;
}
void OAICommon_Models_Destiny2CoreSettings::setPastSeasonHashes(const QList<qint32> &past_season_hashes) {
    m_past_season_hashes = past_season_hashes;
    m_past_season_hashes_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_past_season_hashes_Set() const{
    return m_past_season_hashes_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_past_season_hashes_Valid() const{
    return m_past_season_hashes_isValid;
}

qint32 OAICommon_Models_Destiny2CoreSettings::getRecordsRootNode() const {
    return m_records_root_node;
}
void OAICommon_Models_Destiny2CoreSettings::setRecordsRootNode(const qint32 &records_root_node) {
    m_records_root_node = records_root_node;
    m_records_root_node_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_records_root_node_Set() const{
    return m_records_root_node_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_records_root_node_Valid() const{
    return m_records_root_node_isValid;
}

qint32 OAICommon_Models_Destiny2CoreSettings::getSeasonalChallengesPresentationNodeHash() const {
    return m_seasonal_challenges_presentation_node_hash;
}
void OAICommon_Models_Destiny2CoreSettings::setSeasonalChallengesPresentationNodeHash(const qint32 &seasonal_challenges_presentation_node_hash) {
    m_seasonal_challenges_presentation_node_hash = seasonal_challenges_presentation_node_hash;
    m_seasonal_challenges_presentation_node_hash_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_seasonal_challenges_presentation_node_hash_Set() const{
    return m_seasonal_challenges_presentation_node_hash_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_seasonal_challenges_presentation_node_hash_Valid() const{
    return m_seasonal_challenges_presentation_node_hash_isValid;
}

QString OAICommon_Models_Destiny2CoreSettings::getUndiscoveredCollectibleImage() const {
    return m_undiscovered_collectible_image;
}
void OAICommon_Models_Destiny2CoreSettings::setUndiscoveredCollectibleImage(const QString &undiscovered_collectible_image) {
    m_undiscovered_collectible_image = undiscovered_collectible_image;
    m_undiscovered_collectible_image_isSet = true;
}

bool OAICommon_Models_Destiny2CoreSettings::is_undiscovered_collectible_image_Set() const{
    return m_undiscovered_collectible_image_isSet;
}

bool OAICommon_Models_Destiny2CoreSettings::is_undiscovered_collectible_image_Valid() const{
    return m_undiscovered_collectible_image_isValid;
}

bool OAICommon_Models_Destiny2CoreSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_seals_root_node_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_triumphs_root_node_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ammo_type_heavy_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ammo_type_primary_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ammo_type_special_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_badges_root_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_root_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crafting_root_node_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_rank_progression_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_season_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_seasonal_artifact_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exotic_catalysts_root_node_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_future_season_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_guardian_rank_constants_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guardian_ranks_root_node_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_plug_free_blocked_socket_type_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_plug_free_protected_plug_item_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_legacy_seals_root_node_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legacy_triumphs_root_node_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loadout_constants_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lore_root_node_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_medals_root_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_medals_root_node_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_root_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_past_season_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_records_root_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seasonal_challenges_presentation_node_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_undiscovered_collectible_image_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommon_Models_Destiny2CoreSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
