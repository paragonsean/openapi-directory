/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Advanced_AwaPermissionRequested.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Advanced_AwaPermissionRequested::OAIDestiny_Advanced_AwaPermissionRequested(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Advanced_AwaPermissionRequested::OAIDestiny_Advanced_AwaPermissionRequested() {
    this->initializeModel();
}

OAIDestiny_Advanced_AwaPermissionRequested::~OAIDestiny_Advanced_AwaPermissionRequested() {}

void OAIDestiny_Advanced_AwaPermissionRequested::initializeModel() {

    m_affected_item_id_isSet = false;
    m_affected_item_id_isValid = false;

    m_character_id_isSet = false;
    m_character_id_isValid = false;

    m_membership_type_isSet = false;
    m_membership_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDestiny_Advanced_AwaPermissionRequested::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Advanced_AwaPermissionRequested::fromJsonObject(QJsonObject json) {

    m_affected_item_id_isValid = ::OpenAPI::fromJsonValue(m_affected_item_id, json[QString("affectedItemId")]);
    m_affected_item_id_isSet = !json[QString("affectedItemId")].isNull() && m_affected_item_id_isValid;

    m_character_id_isValid = ::OpenAPI::fromJsonValue(m_character_id, json[QString("characterId")]);
    m_character_id_isSet = !json[QString("characterId")].isNull() && m_character_id_isValid;

    m_membership_type_isValid = ::OpenAPI::fromJsonValue(m_membership_type, json[QString("membershipType")]);
    m_membership_type_isSet = !json[QString("membershipType")].isNull() && m_membership_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDestiny_Advanced_AwaPermissionRequested::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Advanced_AwaPermissionRequested::asJsonObject() const {
    QJsonObject obj;
    if (m_affected_item_id_isSet) {
        obj.insert(QString("affectedItemId"), ::OpenAPI::toJsonValue(m_affected_item_id));
    }
    if (m_character_id_isSet) {
        obj.insert(QString("characterId"), ::OpenAPI::toJsonValue(m_character_id));
    }
    if (m_membership_type_isSet) {
        obj.insert(QString("membershipType"), ::OpenAPI::toJsonValue(m_membership_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint64 OAIDestiny_Advanced_AwaPermissionRequested::getAffectedItemId() const {
    return m_affected_item_id;
}
void OAIDestiny_Advanced_AwaPermissionRequested::setAffectedItemId(const qint64 &affected_item_id) {
    m_affected_item_id = affected_item_id;
    m_affected_item_id_isSet = true;
}

bool OAIDestiny_Advanced_AwaPermissionRequested::is_affected_item_id_Set() const{
    return m_affected_item_id_isSet;
}

bool OAIDestiny_Advanced_AwaPermissionRequested::is_affected_item_id_Valid() const{
    return m_affected_item_id_isValid;
}

qint64 OAIDestiny_Advanced_AwaPermissionRequested::getCharacterId() const {
    return m_character_id;
}
void OAIDestiny_Advanced_AwaPermissionRequested::setCharacterId(const qint64 &character_id) {
    m_character_id = character_id;
    m_character_id_isSet = true;
}

bool OAIDestiny_Advanced_AwaPermissionRequested::is_character_id_Set() const{
    return m_character_id_isSet;
}

bool OAIDestiny_Advanced_AwaPermissionRequested::is_character_id_Valid() const{
    return m_character_id_isValid;
}

qint32 OAIDestiny_Advanced_AwaPermissionRequested::getMembershipType() const {
    return m_membership_type;
}
void OAIDestiny_Advanced_AwaPermissionRequested::setMembershipType(const qint32 &membership_type) {
    m_membership_type = membership_type;
    m_membership_type_isSet = true;
}

bool OAIDestiny_Advanced_AwaPermissionRequested::is_membership_type_Set() const{
    return m_membership_type_isSet;
}

bool OAIDestiny_Advanced_AwaPermissionRequested::is_membership_type_Valid() const{
    return m_membership_type_isValid;
}

qint32 OAIDestiny_Advanced_AwaPermissionRequested::getType() const {
    return m_type;
}
void OAIDestiny_Advanced_AwaPermissionRequested::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDestiny_Advanced_AwaPermissionRequested::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDestiny_Advanced_AwaPermissionRequested::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDestiny_Advanced_AwaPermissionRequested::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affected_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Advanced_AwaPermissionRequested::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
