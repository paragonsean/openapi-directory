/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupsV2_GroupUserInfoCard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupsV2_GroupUserInfoCard::OAIGroupsV2_GroupUserInfoCard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupsV2_GroupUserInfoCard::OAIGroupsV2_GroupUserInfoCard() {
    this->initializeModel();
}

OAIGroupsV2_GroupUserInfoCard::~OAIGroupsV2_GroupUserInfoCard() {}

void OAIGroupsV2_GroupUserInfoCard::initializeModel() {

    m_last_seen_display_name_isSet = false;
    m_last_seen_display_name_isValid = false;

    m_last_seen_display_name_type_isSet = false;
    m_last_seen_display_name_type_isValid = false;

    m_applicable_membership_types_isSet = false;
    m_applicable_membership_types_isValid = false;

    m_bungie_global_display_name_isSet = false;
    m_bungie_global_display_name_isValid = false;

    m_bungie_global_display_name_code_isSet = false;
    m_bungie_global_display_name_code_isValid = false;

    m_cross_save_override_isSet = false;
    m_cross_save_override_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_icon_path_isSet = false;
    m_icon_path_isValid = false;

    m_is_public_isSet = false;
    m_is_public_isValid = false;

    m_membership_id_isSet = false;
    m_membership_id_isValid = false;

    m_membership_type_isSet = false;
    m_membership_type_isValid = false;

    m_supplemental_display_name_isSet = false;
    m_supplemental_display_name_isValid = false;
}

void OAIGroupsV2_GroupUserInfoCard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupsV2_GroupUserInfoCard::fromJsonObject(QJsonObject json) {

    m_last_seen_display_name_isValid = ::OpenAPI::fromJsonValue(m_last_seen_display_name, json[QString("LastSeenDisplayName")]);
    m_last_seen_display_name_isSet = !json[QString("LastSeenDisplayName")].isNull() && m_last_seen_display_name_isValid;

    m_last_seen_display_name_type_isValid = ::OpenAPI::fromJsonValue(m_last_seen_display_name_type, json[QString("LastSeenDisplayNameType")]);
    m_last_seen_display_name_type_isSet = !json[QString("LastSeenDisplayNameType")].isNull() && m_last_seen_display_name_type_isValid;

    m_applicable_membership_types_isValid = ::OpenAPI::fromJsonValue(m_applicable_membership_types, json[QString("applicableMembershipTypes")]);
    m_applicable_membership_types_isSet = !json[QString("applicableMembershipTypes")].isNull() && m_applicable_membership_types_isValid;

    m_bungie_global_display_name_isValid = ::OpenAPI::fromJsonValue(m_bungie_global_display_name, json[QString("bungieGlobalDisplayName")]);
    m_bungie_global_display_name_isSet = !json[QString("bungieGlobalDisplayName")].isNull() && m_bungie_global_display_name_isValid;

    m_bungie_global_display_name_code_isValid = ::OpenAPI::fromJsonValue(m_bungie_global_display_name_code, json[QString("bungieGlobalDisplayNameCode")]);
    m_bungie_global_display_name_code_isSet = !json[QString("bungieGlobalDisplayNameCode")].isNull() && m_bungie_global_display_name_code_isValid;

    m_cross_save_override_isValid = ::OpenAPI::fromJsonValue(m_cross_save_override, json[QString("crossSaveOverride")]);
    m_cross_save_override_isSet = !json[QString("crossSaveOverride")].isNull() && m_cross_save_override_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_icon_path_isValid = ::OpenAPI::fromJsonValue(m_icon_path, json[QString("iconPath")]);
    m_icon_path_isSet = !json[QString("iconPath")].isNull() && m_icon_path_isValid;

    m_is_public_isValid = ::OpenAPI::fromJsonValue(m_is_public, json[QString("isPublic")]);
    m_is_public_isSet = !json[QString("isPublic")].isNull() && m_is_public_isValid;

    m_membership_id_isValid = ::OpenAPI::fromJsonValue(m_membership_id, json[QString("membershipId")]);
    m_membership_id_isSet = !json[QString("membershipId")].isNull() && m_membership_id_isValid;

    m_membership_type_isValid = ::OpenAPI::fromJsonValue(m_membership_type, json[QString("membershipType")]);
    m_membership_type_isSet = !json[QString("membershipType")].isNull() && m_membership_type_isValid;

    m_supplemental_display_name_isValid = ::OpenAPI::fromJsonValue(m_supplemental_display_name, json[QString("supplementalDisplayName")]);
    m_supplemental_display_name_isSet = !json[QString("supplementalDisplayName")].isNull() && m_supplemental_display_name_isValid;
}

QString OAIGroupsV2_GroupUserInfoCard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupsV2_GroupUserInfoCard::asJsonObject() const {
    QJsonObject obj;
    if (m_last_seen_display_name_isSet) {
        obj.insert(QString("LastSeenDisplayName"), ::OpenAPI::toJsonValue(m_last_seen_display_name));
    }
    if (m_last_seen_display_name_type_isSet) {
        obj.insert(QString("LastSeenDisplayNameType"), ::OpenAPI::toJsonValue(m_last_seen_display_name_type));
    }
    if (m_applicable_membership_types.size() > 0) {
        obj.insert(QString("applicableMembershipTypes"), ::OpenAPI::toJsonValue(m_applicable_membership_types));
    }
    if (m_bungie_global_display_name_isSet) {
        obj.insert(QString("bungieGlobalDisplayName"), ::OpenAPI::toJsonValue(m_bungie_global_display_name));
    }
    if (m_bungie_global_display_name_code_isSet) {
        obj.insert(QString("bungieGlobalDisplayNameCode"), ::OpenAPI::toJsonValue(m_bungie_global_display_name_code));
    }
    if (m_cross_save_override_isSet) {
        obj.insert(QString("crossSaveOverride"), ::OpenAPI::toJsonValue(m_cross_save_override));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_icon_path_isSet) {
        obj.insert(QString("iconPath"), ::OpenAPI::toJsonValue(m_icon_path));
    }
    if (m_is_public_isSet) {
        obj.insert(QString("isPublic"), ::OpenAPI::toJsonValue(m_is_public));
    }
    if (m_membership_id_isSet) {
        obj.insert(QString("membershipId"), ::OpenAPI::toJsonValue(m_membership_id));
    }
    if (m_membership_type_isSet) {
        obj.insert(QString("membershipType"), ::OpenAPI::toJsonValue(m_membership_type));
    }
    if (m_supplemental_display_name_isSet) {
        obj.insert(QString("supplementalDisplayName"), ::OpenAPI::toJsonValue(m_supplemental_display_name));
    }
    return obj;
}

QString OAIGroupsV2_GroupUserInfoCard::getLastSeenDisplayName() const {
    return m_last_seen_display_name;
}
void OAIGroupsV2_GroupUserInfoCard::setLastSeenDisplayName(const QString &last_seen_display_name) {
    m_last_seen_display_name = last_seen_display_name;
    m_last_seen_display_name_isSet = true;
}

bool OAIGroupsV2_GroupUserInfoCard::is_last_seen_display_name_Set() const{
    return m_last_seen_display_name_isSet;
}

bool OAIGroupsV2_GroupUserInfoCard::is_last_seen_display_name_Valid() const{
    return m_last_seen_display_name_isValid;
}

qint32 OAIGroupsV2_GroupUserInfoCard::getLastSeenDisplayNameType() const {
    return m_last_seen_display_name_type;
}
void OAIGroupsV2_GroupUserInfoCard::setLastSeenDisplayNameType(const qint32 &last_seen_display_name_type) {
    m_last_seen_display_name_type = last_seen_display_name_type;
    m_last_seen_display_name_type_isSet = true;
}

bool OAIGroupsV2_GroupUserInfoCard::is_last_seen_display_name_type_Set() const{
    return m_last_seen_display_name_type_isSet;
}

bool OAIGroupsV2_GroupUserInfoCard::is_last_seen_display_name_type_Valid() const{
    return m_last_seen_display_name_type_isValid;
}

QList<qint32> OAIGroupsV2_GroupUserInfoCard::getApplicableMembershipTypes() const {
    return m_applicable_membership_types;
}
void OAIGroupsV2_GroupUserInfoCard::setApplicableMembershipTypes(const QList<qint32> &applicable_membership_types) {
    m_applicable_membership_types = applicable_membership_types;
    m_applicable_membership_types_isSet = true;
}

bool OAIGroupsV2_GroupUserInfoCard::is_applicable_membership_types_Set() const{
    return m_applicable_membership_types_isSet;
}

bool OAIGroupsV2_GroupUserInfoCard::is_applicable_membership_types_Valid() const{
    return m_applicable_membership_types_isValid;
}

QString OAIGroupsV2_GroupUserInfoCard::getBungieGlobalDisplayName() const {
    return m_bungie_global_display_name;
}
void OAIGroupsV2_GroupUserInfoCard::setBungieGlobalDisplayName(const QString &bungie_global_display_name) {
    m_bungie_global_display_name = bungie_global_display_name;
    m_bungie_global_display_name_isSet = true;
}

bool OAIGroupsV2_GroupUserInfoCard::is_bungie_global_display_name_Set() const{
    return m_bungie_global_display_name_isSet;
}

bool OAIGroupsV2_GroupUserInfoCard::is_bungie_global_display_name_Valid() const{
    return m_bungie_global_display_name_isValid;
}

qint32 OAIGroupsV2_GroupUserInfoCard::getBungieGlobalDisplayNameCode() const {
    return m_bungie_global_display_name_code;
}
void OAIGroupsV2_GroupUserInfoCard::setBungieGlobalDisplayNameCode(const qint32 &bungie_global_display_name_code) {
    m_bungie_global_display_name_code = bungie_global_display_name_code;
    m_bungie_global_display_name_code_isSet = true;
}

bool OAIGroupsV2_GroupUserInfoCard::is_bungie_global_display_name_code_Set() const{
    return m_bungie_global_display_name_code_isSet;
}

bool OAIGroupsV2_GroupUserInfoCard::is_bungie_global_display_name_code_Valid() const{
    return m_bungie_global_display_name_code_isValid;
}

qint32 OAIGroupsV2_GroupUserInfoCard::getCrossSaveOverride() const {
    return m_cross_save_override;
}
void OAIGroupsV2_GroupUserInfoCard::setCrossSaveOverride(const qint32 &cross_save_override) {
    m_cross_save_override = cross_save_override;
    m_cross_save_override_isSet = true;
}

bool OAIGroupsV2_GroupUserInfoCard::is_cross_save_override_Set() const{
    return m_cross_save_override_isSet;
}

bool OAIGroupsV2_GroupUserInfoCard::is_cross_save_override_Valid() const{
    return m_cross_save_override_isValid;
}

QString OAIGroupsV2_GroupUserInfoCard::getDisplayName() const {
    return m_display_name;
}
void OAIGroupsV2_GroupUserInfoCard::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGroupsV2_GroupUserInfoCard::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGroupsV2_GroupUserInfoCard::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGroupsV2_GroupUserInfoCard::getIconPath() const {
    return m_icon_path;
}
void OAIGroupsV2_GroupUserInfoCard::setIconPath(const QString &icon_path) {
    m_icon_path = icon_path;
    m_icon_path_isSet = true;
}

bool OAIGroupsV2_GroupUserInfoCard::is_icon_path_Set() const{
    return m_icon_path_isSet;
}

bool OAIGroupsV2_GroupUserInfoCard::is_icon_path_Valid() const{
    return m_icon_path_isValid;
}

bool OAIGroupsV2_GroupUserInfoCard::isIsPublic() const {
    return m_is_public;
}
void OAIGroupsV2_GroupUserInfoCard::setIsPublic(const bool &is_public) {
    m_is_public = is_public;
    m_is_public_isSet = true;
}

bool OAIGroupsV2_GroupUserInfoCard::is_is_public_Set() const{
    return m_is_public_isSet;
}

bool OAIGroupsV2_GroupUserInfoCard::is_is_public_Valid() const{
    return m_is_public_isValid;
}

qint64 OAIGroupsV2_GroupUserInfoCard::getMembershipId() const {
    return m_membership_id;
}
void OAIGroupsV2_GroupUserInfoCard::setMembershipId(const qint64 &membership_id) {
    m_membership_id = membership_id;
    m_membership_id_isSet = true;
}

bool OAIGroupsV2_GroupUserInfoCard::is_membership_id_Set() const{
    return m_membership_id_isSet;
}

bool OAIGroupsV2_GroupUserInfoCard::is_membership_id_Valid() const{
    return m_membership_id_isValid;
}

qint32 OAIGroupsV2_GroupUserInfoCard::getMembershipType() const {
    return m_membership_type;
}
void OAIGroupsV2_GroupUserInfoCard::setMembershipType(const qint32 &membership_type) {
    m_membership_type = membership_type;
    m_membership_type_isSet = true;
}

bool OAIGroupsV2_GroupUserInfoCard::is_membership_type_Set() const{
    return m_membership_type_isSet;
}

bool OAIGroupsV2_GroupUserInfoCard::is_membership_type_Valid() const{
    return m_membership_type_isValid;
}

QString OAIGroupsV2_GroupUserInfoCard::getSupplementalDisplayName() const {
    return m_supplemental_display_name;
}
void OAIGroupsV2_GroupUserInfoCard::setSupplementalDisplayName(const QString &supplemental_display_name) {
    m_supplemental_display_name = supplemental_display_name;
    m_supplemental_display_name_isSet = true;
}

bool OAIGroupsV2_GroupUserInfoCard::is_supplemental_display_name_Set() const{
    return m_supplemental_display_name_isSet;
}

bool OAIGroupsV2_GroupUserInfoCard::is_supplemental_display_name_Valid() const{
    return m_supplemental_display_name_isValid;
}

bool OAIGroupsV2_GroupUserInfoCard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_seen_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_display_name_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_applicable_membership_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bungie_global_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bungie_global_display_name_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cross_save_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplemental_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupsV2_GroupUserInfoCard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
