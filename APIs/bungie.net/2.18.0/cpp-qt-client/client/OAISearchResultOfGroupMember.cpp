/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchResultOfGroupMember.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchResultOfGroupMember::OAISearchResultOfGroupMember(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchResultOfGroupMember::OAISearchResultOfGroupMember() {
    this->initializeModel();
}

OAISearchResultOfGroupMember::~OAISearchResultOfGroupMember() {}

void OAISearchResultOfGroupMember::initializeModel() {

    m_has_more_isSet = false;
    m_has_more_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_replacement_continuation_token_isSet = false;
    m_replacement_continuation_token_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_total_results_isSet = false;
    m_total_results_isValid = false;

    m_use_total_results_isSet = false;
    m_use_total_results_isValid = false;
}

void OAISearchResultOfGroupMember::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchResultOfGroupMember::fromJsonObject(QJsonObject json) {

    m_has_more_isValid = ::OpenAPI::fromJsonValue(m_has_more, json[QString("hasMore")]);
    m_has_more_isSet = !json[QString("hasMore")].isNull() && m_has_more_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_replacement_continuation_token_isValid = ::OpenAPI::fromJsonValue(m_replacement_continuation_token, json[QString("replacementContinuationToken")]);
    m_replacement_continuation_token_isSet = !json[QString("replacementContinuationToken")].isNull() && m_replacement_continuation_token_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_total_results_isValid = ::OpenAPI::fromJsonValue(m_total_results, json[QString("totalResults")]);
    m_total_results_isSet = !json[QString("totalResults")].isNull() && m_total_results_isValid;

    m_use_total_results_isValid = ::OpenAPI::fromJsonValue(m_use_total_results, json[QString("useTotalResults")]);
    m_use_total_results_isSet = !json[QString("useTotalResults")].isNull() && m_use_total_results_isValid;
}

QString OAISearchResultOfGroupMember::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchResultOfGroupMember::asJsonObject() const {
    QJsonObject obj;
    if (m_has_more_isSet) {
        obj.insert(QString("hasMore"), ::OpenAPI::toJsonValue(m_has_more));
    }
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_replacement_continuation_token_isSet) {
        obj.insert(QString("replacementContinuationToken"), ::OpenAPI::toJsonValue(m_replacement_continuation_token));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_total_results_isSet) {
        obj.insert(QString("totalResults"), ::OpenAPI::toJsonValue(m_total_results));
    }
    if (m_use_total_results_isSet) {
        obj.insert(QString("useTotalResults"), ::OpenAPI::toJsonValue(m_use_total_results));
    }
    return obj;
}

bool OAISearchResultOfGroupMember::isHasMore() const {
    return m_has_more;
}
void OAISearchResultOfGroupMember::setHasMore(const bool &has_more) {
    m_has_more = has_more;
    m_has_more_isSet = true;
}

bool OAISearchResultOfGroupMember::is_has_more_Set() const{
    return m_has_more_isSet;
}

bool OAISearchResultOfGroupMember::is_has_more_Valid() const{
    return m_has_more_isValid;
}

OAIQueries_PagedQuery OAISearchResultOfGroupMember::getQuery() const {
    return m_query;
}
void OAISearchResultOfGroupMember::setQuery(const OAIQueries_PagedQuery &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAISearchResultOfGroupMember::is_query_Set() const{
    return m_query_isSet;
}

bool OAISearchResultOfGroupMember::is_query_Valid() const{
    return m_query_isValid;
}

QString OAISearchResultOfGroupMember::getReplacementContinuationToken() const {
    return m_replacement_continuation_token;
}
void OAISearchResultOfGroupMember::setReplacementContinuationToken(const QString &replacement_continuation_token) {
    m_replacement_continuation_token = replacement_continuation_token;
    m_replacement_continuation_token_isSet = true;
}

bool OAISearchResultOfGroupMember::is_replacement_continuation_token_Set() const{
    return m_replacement_continuation_token_isSet;
}

bool OAISearchResultOfGroupMember::is_replacement_continuation_token_Valid() const{
    return m_replacement_continuation_token_isValid;
}

QList<OAIGroupsV2_GroupMember> OAISearchResultOfGroupMember::getResults() const {
    return m_results;
}
void OAISearchResultOfGroupMember::setResults(const QList<OAIGroupsV2_GroupMember> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAISearchResultOfGroupMember::is_results_Set() const{
    return m_results_isSet;
}

bool OAISearchResultOfGroupMember::is_results_Valid() const{
    return m_results_isValid;
}

qint32 OAISearchResultOfGroupMember::getTotalResults() const {
    return m_total_results;
}
void OAISearchResultOfGroupMember::setTotalResults(const qint32 &total_results) {
    m_total_results = total_results;
    m_total_results_isSet = true;
}

bool OAISearchResultOfGroupMember::is_total_results_Set() const{
    return m_total_results_isSet;
}

bool OAISearchResultOfGroupMember::is_total_results_Valid() const{
    return m_total_results_isValid;
}

bool OAISearchResultOfGroupMember::isUseTotalResults() const {
    return m_use_total_results;
}
void OAISearchResultOfGroupMember::setUseTotalResults(const bool &use_total_results) {
    m_use_total_results = use_total_results;
    m_use_total_results_isSet = true;
}

bool OAISearchResultOfGroupMember::is_use_total_results_Set() const{
    return m_use_total_results_isSet;
}

bool OAISearchResultOfGroupMember::is_use_total_results_Valid() const{
    return m_use_total_results_isValid;
}

bool OAISearchResultOfGroupMember::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_has_more_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replacement_continuation_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_total_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchResultOfGroupMember::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
