/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition.h
 *
 * Items like Sacks or Boxes can have items that it shows in-game when you view details that represent the items you can obtain if you use or acquire the item.  This defines those categories, and gives some insights into that data&#39;s source.
 */

#ifndef OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition_H
#define OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_Items_DestinyDerivedItemCategoryDefinition.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_Items_DestinyDerivedItemCategoryDefinition;

class OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition();
    OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition(QString json);
    ~OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getArtifactHash() const;
    void setArtifactHash(const qint32 &artifact_hash);
    bool is_artifact_hash_Set() const;
    bool is_artifact_hash_Valid() const;

    QList<OAIDestiny_Definitions_Items_DestinyDerivedItemCategoryDefinition> getDerivedItemCategories() const;
    void setDerivedItemCategories(const QList<OAIDestiny_Definitions_Items_DestinyDerivedItemCategoryDefinition> &derived_item_categories);
    bool is_derived_item_categories_Set() const;
    bool is_derived_item_categories_Valid() const;

    QString getPreviewActionString() const;
    void setPreviewActionString(const QString &preview_action_string);
    bool is_preview_action_string_Set() const;
    bool is_preview_action_string_Valid() const;

    qint32 getPreviewVendorHash() const;
    void setPreviewVendorHash(const qint32 &preview_vendor_hash);
    bool is_preview_vendor_hash_Set() const;
    bool is_preview_vendor_hash_Valid() const;

    QString getScreenStyle() const;
    void setScreenStyle(const QString &screen_style);
    bool is_screen_style_Set() const;
    bool is_screen_style_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_artifact_hash;
    bool m_artifact_hash_isSet;
    bool m_artifact_hash_isValid;

    QList<OAIDestiny_Definitions_Items_DestinyDerivedItemCategoryDefinition> m_derived_item_categories;
    bool m_derived_item_categories_isSet;
    bool m_derived_item_categories_isValid;

    QString m_preview_action_string;
    bool m_preview_action_string_isSet;
    bool m_preview_action_string_isValid;

    qint32 m_preview_vendor_hash;
    bool m_preview_vendor_hash_isSet;
    bool m_preview_vendor_hash_isValid;

    QString m_screen_style;
    bool m_screen_style_isSet;
    bool m_screen_style_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition)

#endif // OAIDestiny_Definitions_DestinyItemPreviewBlockDefinition_H
