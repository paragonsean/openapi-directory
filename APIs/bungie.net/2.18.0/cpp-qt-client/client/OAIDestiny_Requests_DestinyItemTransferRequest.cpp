/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Requests_DestinyItemTransferRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Requests_DestinyItemTransferRequest::OAIDestiny_Requests_DestinyItemTransferRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Requests_DestinyItemTransferRequest::OAIDestiny_Requests_DestinyItemTransferRequest() {
    this->initializeModel();
}

OAIDestiny_Requests_DestinyItemTransferRequest::~OAIDestiny_Requests_DestinyItemTransferRequest() {}

void OAIDestiny_Requests_DestinyItemTransferRequest::initializeModel() {

    m_character_id_isSet = false;
    m_character_id_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_item_reference_hash_isSet = false;
    m_item_reference_hash_isValid = false;

    m_membership_type_isSet = false;
    m_membership_type_isValid = false;

    m_stack_size_isSet = false;
    m_stack_size_isValid = false;

    m_transfer_to_vault_isSet = false;
    m_transfer_to_vault_isValid = false;
}

void OAIDestiny_Requests_DestinyItemTransferRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Requests_DestinyItemTransferRequest::fromJsonObject(QJsonObject json) {

    m_character_id_isValid = ::OpenAPI::fromJsonValue(m_character_id, json[QString("characterId")]);
    m_character_id_isSet = !json[QString("characterId")].isNull() && m_character_id_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_item_reference_hash_isValid = ::OpenAPI::fromJsonValue(m_item_reference_hash, json[QString("itemReferenceHash")]);
    m_item_reference_hash_isSet = !json[QString("itemReferenceHash")].isNull() && m_item_reference_hash_isValid;

    m_membership_type_isValid = ::OpenAPI::fromJsonValue(m_membership_type, json[QString("membershipType")]);
    m_membership_type_isSet = !json[QString("membershipType")].isNull() && m_membership_type_isValid;

    m_stack_size_isValid = ::OpenAPI::fromJsonValue(m_stack_size, json[QString("stackSize")]);
    m_stack_size_isSet = !json[QString("stackSize")].isNull() && m_stack_size_isValid;

    m_transfer_to_vault_isValid = ::OpenAPI::fromJsonValue(m_transfer_to_vault, json[QString("transferToVault")]);
    m_transfer_to_vault_isSet = !json[QString("transferToVault")].isNull() && m_transfer_to_vault_isValid;
}

QString OAIDestiny_Requests_DestinyItemTransferRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Requests_DestinyItemTransferRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_character_id_isSet) {
        obj.insert(QString("characterId"), ::OpenAPI::toJsonValue(m_character_id));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_item_reference_hash_isSet) {
        obj.insert(QString("itemReferenceHash"), ::OpenAPI::toJsonValue(m_item_reference_hash));
    }
    if (m_membership_type_isSet) {
        obj.insert(QString("membershipType"), ::OpenAPI::toJsonValue(m_membership_type));
    }
    if (m_stack_size_isSet) {
        obj.insert(QString("stackSize"), ::OpenAPI::toJsonValue(m_stack_size));
    }
    if (m_transfer_to_vault_isSet) {
        obj.insert(QString("transferToVault"), ::OpenAPI::toJsonValue(m_transfer_to_vault));
    }
    return obj;
}

qint64 OAIDestiny_Requests_DestinyItemTransferRequest::getCharacterId() const {
    return m_character_id;
}
void OAIDestiny_Requests_DestinyItemTransferRequest::setCharacterId(const qint64 &character_id) {
    m_character_id = character_id;
    m_character_id_isSet = true;
}

bool OAIDestiny_Requests_DestinyItemTransferRequest::is_character_id_Set() const{
    return m_character_id_isSet;
}

bool OAIDestiny_Requests_DestinyItemTransferRequest::is_character_id_Valid() const{
    return m_character_id_isValid;
}

qint64 OAIDestiny_Requests_DestinyItemTransferRequest::getItemId() const {
    return m_item_id;
}
void OAIDestiny_Requests_DestinyItemTransferRequest::setItemId(const qint64 &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIDestiny_Requests_DestinyItemTransferRequest::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIDestiny_Requests_DestinyItemTransferRequest::is_item_id_Valid() const{
    return m_item_id_isValid;
}

qint32 OAIDestiny_Requests_DestinyItemTransferRequest::getItemReferenceHash() const {
    return m_item_reference_hash;
}
void OAIDestiny_Requests_DestinyItemTransferRequest::setItemReferenceHash(const qint32 &item_reference_hash) {
    m_item_reference_hash = item_reference_hash;
    m_item_reference_hash_isSet = true;
}

bool OAIDestiny_Requests_DestinyItemTransferRequest::is_item_reference_hash_Set() const{
    return m_item_reference_hash_isSet;
}

bool OAIDestiny_Requests_DestinyItemTransferRequest::is_item_reference_hash_Valid() const{
    return m_item_reference_hash_isValid;
}

qint32 OAIDestiny_Requests_DestinyItemTransferRequest::getMembershipType() const {
    return m_membership_type;
}
void OAIDestiny_Requests_DestinyItemTransferRequest::setMembershipType(const qint32 &membership_type) {
    m_membership_type = membership_type;
    m_membership_type_isSet = true;
}

bool OAIDestiny_Requests_DestinyItemTransferRequest::is_membership_type_Set() const{
    return m_membership_type_isSet;
}

bool OAIDestiny_Requests_DestinyItemTransferRequest::is_membership_type_Valid() const{
    return m_membership_type_isValid;
}

qint32 OAIDestiny_Requests_DestinyItemTransferRequest::getStackSize() const {
    return m_stack_size;
}
void OAIDestiny_Requests_DestinyItemTransferRequest::setStackSize(const qint32 &stack_size) {
    m_stack_size = stack_size;
    m_stack_size_isSet = true;
}

bool OAIDestiny_Requests_DestinyItemTransferRequest::is_stack_size_Set() const{
    return m_stack_size_isSet;
}

bool OAIDestiny_Requests_DestinyItemTransferRequest::is_stack_size_Valid() const{
    return m_stack_size_isValid;
}

bool OAIDestiny_Requests_DestinyItemTransferRequest::isTransferToVault() const {
    return m_transfer_to_vault;
}
void OAIDestiny_Requests_DestinyItemTransferRequest::setTransferToVault(const bool &transfer_to_vault) {
    m_transfer_to_vault = transfer_to_vault;
    m_transfer_to_vault_isSet = true;
}

bool OAIDestiny_Requests_DestinyItemTransferRequest::is_transfer_to_vault_Set() const{
    return m_transfer_to_vault_isSet;
}

bool OAIDestiny_Requests_DestinyItemTransferRequest::is_transfer_to_vault_Valid() const{
    return m_transfer_to_vault_isValid;
}

bool OAIDestiny_Requests_DestinyItemTransferRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_character_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_reference_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_to_vault_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Requests_DestinyItemTransferRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
