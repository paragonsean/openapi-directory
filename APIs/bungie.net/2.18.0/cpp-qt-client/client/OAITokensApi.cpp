/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITokensApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAITokensApi::OAITokensApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAITokensApi::~OAITokensApi() {
}

void OAITokensApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://www.bungie.net/Platform"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("tokens_ApplyMissingPartnerOffersWithoutClaim", defaultConf);
    _serverIndices.insert("tokens_ApplyMissingPartnerOffersWithoutClaim", 0);
    _serverConfigs.insert("tokens_ClaimPartnerOffer", defaultConf);
    _serverIndices.insert("tokens_ClaimPartnerOffer", 0);
    _serverConfigs.insert("tokens_ForceDropsRepair", defaultConf);
    _serverIndices.insert("tokens_ForceDropsRepair", 0);
    _serverConfigs.insert("tokens_GetBungieRewardsForPlatformUser", defaultConf);
    _serverIndices.insert("tokens_GetBungieRewardsForPlatformUser", 0);
    _serverConfigs.insert("tokens_GetBungieRewardsForUser", defaultConf);
    _serverIndices.insert("tokens_GetBungieRewardsForUser", 0);
    _serverConfigs.insert("tokens_GetBungieRewardsList", defaultConf);
    _serverIndices.insert("tokens_GetBungieRewardsList", 0);
    _serverConfigs.insert("tokens_GetPartnerOfferSkuHistory", defaultConf);
    _serverIndices.insert("tokens_GetPartnerOfferSkuHistory", 0);
    _serverConfigs.insert("tokens_GetPartnerRewardHistory", defaultConf);
    _serverIndices.insert("tokens_GetPartnerRewardHistory", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAITokensApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAITokensApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAITokensApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAITokensApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAITokensApi::setUsername(const QString &username) {
    _username = username;
}

void OAITokensApi::setPassword(const QString &password) {
    _password = password;
}


void OAITokensApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAITokensApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAITokensApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAITokensApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITokensApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITokensApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAITokensApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAITokensApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAITokensApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAITokensApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAITokensApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAITokensApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAITokensApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAITokensApi::tokens_ApplyMissingPartnerOffersWithoutClaim(const qint32 &partner_application_id, const qint64 &target_bnet_membership_id) {
    QString fullPath = QString(_serverConfigs["tokens_ApplyMissingPartnerOffersWithoutClaim"][_serverIndices.value("tokens_ApplyMissingPartnerOffersWithoutClaim")].URL()+"/Tokens/Partner/ApplyMissingOffers/{partnerApplicationId}/{targetBnetMembershipId}/");
    
    
    {
        QString partner_application_idPathParam("{");
        partner_application_idPathParam.append("partnerApplicationId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "partnerApplicationId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"partnerApplicationId"+pathSuffix : pathPrefix;
        fullPath.replace(partner_application_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(partner_application_id)));
    }
    
    {
        QString target_bnet_membership_idPathParam("{");
        target_bnet_membership_idPathParam.append("targetBnetMembershipId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "targetBnetMembershipId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"targetBnetMembershipId"+pathSuffix : pathPrefix;
        fullPath.replace(target_bnet_membership_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(target_bnet_membership_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITokensApi::tokens_ApplyMissingPartnerOffersWithoutClaimCallback);
    connect(this, &OAITokensApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("PartnerOfferGrant");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITokensApi::tokens_ApplyMissingPartnerOffersWithoutClaimCallback);
    connect(this, &OAITokensApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAITokensApi::tokens_ApplyMissingPartnerOffersWithoutClaimCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_GetUserClanInviteSetting_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT tokens_ApplyMissingPartnerOffersWithoutClaimSignal(output);
        Q_EMIT tokens_ApplyMissingPartnerOffersWithoutClaimSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("PartnerOfferGrant");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT tokens_ApplyMissingPartnerOffersWithoutClaimSignalE(output, error_type, error_str);
        Q_EMIT tokens_ApplyMissingPartnerOffersWithoutClaimSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT tokens_ApplyMissingPartnerOffersWithoutClaimSignalError(output, error_type, error_str);
        Q_EMIT tokens_ApplyMissingPartnerOffersWithoutClaimSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITokensApi::tokens_ClaimPartnerOffer() {
    QString fullPath = QString(_serverConfigs["tokens_ClaimPartnerOffer"][_serverIndices.value("tokens_ClaimPartnerOffer")].URL()+"/Tokens/Partner/ClaimOffer/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITokensApi::tokens_ClaimPartnerOfferCallback);
    connect(this, &OAITokensApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("PartnerOfferGrant");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITokensApi::tokens_ClaimPartnerOfferCallback);
    connect(this, &OAITokensApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAITokensApi::tokens_ClaimPartnerOfferCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_GetUserClanInviteSetting_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT tokens_ClaimPartnerOfferSignal(output);
        Q_EMIT tokens_ClaimPartnerOfferSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("PartnerOfferGrant");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT tokens_ClaimPartnerOfferSignalE(output, error_type, error_str);
        Q_EMIT tokens_ClaimPartnerOfferSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT tokens_ClaimPartnerOfferSignalError(output, error_type, error_str);
        Q_EMIT tokens_ClaimPartnerOfferSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITokensApi::tokens_ForceDropsRepair() {
    QString fullPath = QString(_serverConfigs["tokens_ForceDropsRepair"][_serverIndices.value("tokens_ForceDropsRepair")].URL()+"/Tokens/Partner/ForceDropsRepair/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITokensApi::tokens_ForceDropsRepairCallback);
    connect(this, &OAITokensApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("PartnerOfferGrant");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITokensApi::tokens_ForceDropsRepairCallback);
    connect(this, &OAITokensApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAITokensApi::tokens_ForceDropsRepairCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGroupV2_GetUserClanInviteSetting_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT tokens_ForceDropsRepairSignal(output);
        Q_EMIT tokens_ForceDropsRepairSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("PartnerOfferGrant");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT tokens_ForceDropsRepairSignalE(output, error_type, error_str);
        Q_EMIT tokens_ForceDropsRepairSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT tokens_ForceDropsRepairSignalError(output, error_type, error_str);
        Q_EMIT tokens_ForceDropsRepairSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITokensApi::tokens_GetBungieRewardsForPlatformUser(const qint64 &membership_id, const qint32 &membership_type) {
    QString fullPath = QString(_serverConfigs["tokens_GetBungieRewardsForPlatformUser"][_serverIndices.value("tokens_GetBungieRewardsForPlatformUser")].URL()+"/Tokens/Rewards/GetRewardsForPlatformUser/{membershipId}/{membershipType}/");
    
    
    {
        QString membership_idPathParam("{");
        membership_idPathParam.append("membershipId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipId"+pathSuffix : pathPrefix;
        fullPath.replace(membership_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_id)));
    }
    
    {
        QString membership_typePathParam("{");
        membership_typePathParam.append("membershipType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipType"+pathSuffix : pathPrefix;
        fullPath.replace(membership_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITokensApi::tokens_GetBungieRewardsForPlatformUserCallback);
    connect(this, &OAITokensApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("ReadAndApplyTokens");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITokensApi::tokens_GetBungieRewardsForPlatformUserCallback);
    connect(this, &OAITokensApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAITokensApi::tokens_GetBungieRewardsForPlatformUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITokens_GetBungieRewardsList_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT tokens_GetBungieRewardsForPlatformUserSignal(output);
        Q_EMIT tokens_GetBungieRewardsForPlatformUserSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("ReadAndApplyTokens");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT tokens_GetBungieRewardsForPlatformUserSignalE(output, error_type, error_str);
        Q_EMIT tokens_GetBungieRewardsForPlatformUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT tokens_GetBungieRewardsForPlatformUserSignalError(output, error_type, error_str);
        Q_EMIT tokens_GetBungieRewardsForPlatformUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITokensApi::tokens_GetBungieRewardsForUser(const qint64 &membership_id) {
    QString fullPath = QString(_serverConfigs["tokens_GetBungieRewardsForUser"][_serverIndices.value("tokens_GetBungieRewardsForUser")].URL()+"/Tokens/Rewards/GetRewardsForUser/{membershipId}/");
    
    
    {
        QString membership_idPathParam("{");
        membership_idPathParam.append("membershipId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "membershipId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"membershipId"+pathSuffix : pathPrefix;
        fullPath.replace(membership_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(membership_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITokensApi::tokens_GetBungieRewardsForUserCallback);
    connect(this, &OAITokensApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("ReadAndApplyTokens");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITokensApi::tokens_GetBungieRewardsForUserCallback);
    connect(this, &OAITokensApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAITokensApi::tokens_GetBungieRewardsForUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITokens_GetBungieRewardsList_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT tokens_GetBungieRewardsForUserSignal(output);
        Q_EMIT tokens_GetBungieRewardsForUserSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("ReadAndApplyTokens");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT tokens_GetBungieRewardsForUserSignalE(output, error_type, error_str);
        Q_EMIT tokens_GetBungieRewardsForUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT tokens_GetBungieRewardsForUserSignalError(output, error_type, error_str);
        Q_EMIT tokens_GetBungieRewardsForUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITokensApi::tokens_GetBungieRewardsList() {
    QString fullPath = QString(_serverConfigs["tokens_GetBungieRewardsList"][_serverIndices.value("tokens_GetBungieRewardsList")].URL()+"/Tokens/Rewards/BungieRewards/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITokensApi::tokens_GetBungieRewardsListCallback);
    connect(this, &OAITokensApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITokensApi::tokens_GetBungieRewardsListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITokens_GetBungieRewardsList_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT tokens_GetBungieRewardsListSignal(output);
        Q_EMIT tokens_GetBungieRewardsListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT tokens_GetBungieRewardsListSignalE(output, error_type, error_str);
        Q_EMIT tokens_GetBungieRewardsListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT tokens_GetBungieRewardsListSignalError(output, error_type, error_str);
        Q_EMIT tokens_GetBungieRewardsListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITokensApi::tokens_GetPartnerOfferSkuHistory(const qint32 &partner_application_id, const qint64 &target_bnet_membership_id) {
    QString fullPath = QString(_serverConfigs["tokens_GetPartnerOfferSkuHistory"][_serverIndices.value("tokens_GetPartnerOfferSkuHistory")].URL()+"/Tokens/Partner/History/{partnerApplicationId}/{targetBnetMembershipId}/");
    
    
    {
        QString partner_application_idPathParam("{");
        partner_application_idPathParam.append("partnerApplicationId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "partnerApplicationId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"partnerApplicationId"+pathSuffix : pathPrefix;
        fullPath.replace(partner_application_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(partner_application_id)));
    }
    
    {
        QString target_bnet_membership_idPathParam("{");
        target_bnet_membership_idPathParam.append("targetBnetMembershipId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "targetBnetMembershipId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"targetBnetMembershipId"+pathSuffix : pathPrefix;
        fullPath.replace(target_bnet_membership_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(target_bnet_membership_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITokensApi::tokens_GetPartnerOfferSkuHistoryCallback);
    connect(this, &OAITokensApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("PartnerOfferGrant");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITokensApi::tokens_GetPartnerOfferSkuHistoryCallback);
    connect(this, &OAITokensApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAITokensApi::tokens_GetPartnerOfferSkuHistoryCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITokens_GetPartnerOfferSkuHistory_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT tokens_GetPartnerOfferSkuHistorySignal(output);
        Q_EMIT tokens_GetPartnerOfferSkuHistorySignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("PartnerOfferGrant");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT tokens_GetPartnerOfferSkuHistorySignalE(output, error_type, error_str);
        Q_EMIT tokens_GetPartnerOfferSkuHistorySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT tokens_GetPartnerOfferSkuHistorySignalError(output, error_type, error_str);
        Q_EMIT tokens_GetPartnerOfferSkuHistorySignalErrorFull(worker, error_type, error_str);
    }
}

void OAITokensApi::tokens_GetPartnerRewardHistory(const qint32 &partner_application_id, const qint64 &target_bnet_membership_id) {
    QString fullPath = QString(_serverConfigs["tokens_GetPartnerRewardHistory"][_serverIndices.value("tokens_GetPartnerRewardHistory")].URL()+"/Tokens/Partner/History/{targetBnetMembershipId}/Application/{partnerApplicationId}/");
    
    
    {
        QString partner_application_idPathParam("{");
        partner_application_idPathParam.append("partnerApplicationId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "partnerApplicationId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"partnerApplicationId"+pathSuffix : pathPrefix;
        fullPath.replace(partner_application_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(partner_application_id)));
    }
    
    {
        QString target_bnet_membership_idPathParam("{");
        target_bnet_membership_idPathParam.append("targetBnetMembershipId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "targetBnetMembershipId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"targetBnetMembershipId"+pathSuffix : pathPrefix;
        fullPath.replace(target_bnet_membership_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(target_bnet_membership_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITokensApi::tokens_GetPartnerRewardHistoryCallback);
    connect(this, &OAITokensApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("PartnerOfferGrant");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITokensApi::tokens_GetPartnerRewardHistoryCallback);
    connect(this, &OAITokensApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAITokensApi::tokens_GetPartnerRewardHistoryCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITokens_GetPartnerRewardHistory_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT tokens_GetPartnerRewardHistorySignal(output);
        Q_EMIT tokens_GetPartnerRewardHistorySignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("PartnerOfferGrant");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://www.bungie.net/en/OAuth/Authorize");
        QString tokenUrl("https://www.bungie.net/Platform/App/OAuth/token/");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT tokens_GetPartnerRewardHistorySignalE(output, error_type, error_str);
        Q_EMIT tokens_GetPartnerRewardHistorySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT tokens_GetPartnerRewardHistorySignalError(output, error_type, error_str);
        Q_EMIT tokens_GetPartnerRewardHistorySignalErrorFull(worker, error_type, error_str);
    }
}

void OAITokensApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
