/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition.h
 *
 * This is the position and other data related to nodes in the activity graph that you can click to launch activities. An Activity Graph node will only have one active Activity at a time, which will determine the activity to be launched (and, unless overrideDisplay information is provided, will also determine the tooltip and other UI related to the node)
 */

#ifndef OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition_H
#define OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition_H

#include <QJsonObject>

#include "OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition.h"
#include "OAIDestiny_Definitions_Common_DestinyPositionDefinition.h"
#include "OAIDestiny_Definitions_Director_DestinyActivityGraphNodeActivityDefinition.h"
#include "OAIDestiny_Definitions_Director_DestinyActivityGraphNodeFeaturingStateDefinition.h"
#include "OAIDestiny_Definitions_Director_DestinyActivityGraphNodeStateEntry.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Definitions_Director_DestinyActivityGraphNodeActivityDefinition;
class OAIDestiny_Definitions_Director_DestinyActivityGraphNodeFeaturingStateDefinition;
class OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition;
class OAIDestiny_Definitions_Common_DestinyPositionDefinition;
class OAIDestiny_Definitions_Director_DestinyActivityGraphNodeStateEntry;

class OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition();
    OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition(QString json);
    ~OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIDestiny_Definitions_Director_DestinyActivityGraphNodeActivityDefinition> getActivities() const;
    void setActivities(const QList<OAIDestiny_Definitions_Director_DestinyActivityGraphNodeActivityDefinition> &activities);
    bool is_activities_Set() const;
    bool is_activities_Valid() const;

    QList<OAIDestiny_Definitions_Director_DestinyActivityGraphNodeFeaturingStateDefinition> getFeaturingStates() const;
    void setFeaturingStates(const QList<OAIDestiny_Definitions_Director_DestinyActivityGraphNodeFeaturingStateDefinition> &featuring_states);
    bool is_featuring_states_Set() const;
    bool is_featuring_states_Valid() const;

    qint32 getNodeId() const;
    void setNodeId(const qint32 &node_id);
    bool is_node_id_Set() const;
    bool is_node_id_Valid() const;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition getOverrideDisplay() const;
    void setOverrideDisplay(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &override_display);
    bool is_override_display_Set() const;
    bool is_override_display_Valid() const;

    OAIDestiny_Definitions_Common_DestinyPositionDefinition getPosition() const;
    void setPosition(const OAIDestiny_Definitions_Common_DestinyPositionDefinition &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    QList<OAIDestiny_Definitions_Director_DestinyActivityGraphNodeStateEntry> getStates() const;
    void setStates(const QList<OAIDestiny_Definitions_Director_DestinyActivityGraphNodeStateEntry> &states);
    bool is_states_Set() const;
    bool is_states_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIDestiny_Definitions_Director_DestinyActivityGraphNodeActivityDefinition> m_activities;
    bool m_activities_isSet;
    bool m_activities_isValid;

    QList<OAIDestiny_Definitions_Director_DestinyActivityGraphNodeFeaturingStateDefinition> m_featuring_states;
    bool m_featuring_states_isSet;
    bool m_featuring_states_isValid;

    qint32 m_node_id;
    bool m_node_id_isSet;
    bool m_node_id_isValid;

    OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition m_override_display;
    bool m_override_display_isSet;
    bool m_override_display_isValid;

    OAIDestiny_Definitions_Common_DestinyPositionDefinition m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    QList<OAIDestiny_Definitions_Director_DestinyActivityGraphNodeStateEntry> m_states;
    bool m_states_isSet;
    bool m_states_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition)

#endif // OAIDestiny_Definitions_Director_DestinyActivityGraphNodeDefinition_H
