/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_Progression_DestinyProgressionLevelRequirementDefinition.h
 *
 * These are pre-constructed collections of data that can be used to determine the Level Requirement for an item given a Progression to be tested (such as the Character&#39;s level).  For instance, say a character receives a new Auto Rifle, and that Auto Rifle&#39;s DestinyInventoryItemDefinition.quality.progressionLevelRequirementHash property is pointing at one of these DestinyProgressionLevelRequirementDefinitions. Let&#39;s pretend also that the progressionHash it is pointing at is the Character Level progression. In that situation, the character&#39;s level will be used to interpolate a value in the requirementCurve property. The value picked up from that interpolation will be the required level for the item.
 */

#ifndef OAIDestiny_Definitions_Progression_DestinyProgressionLevelRequirementDefinition_H
#define OAIDestiny_Definitions_Progression_DestinyProgressionLevelRequirementDefinition_H

#include <QJsonObject>

#include "OAIInterpolation_InterpolationPointFloat.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInterpolation_InterpolationPointFloat;

class OAIDestiny_Definitions_Progression_DestinyProgressionLevelRequirementDefinition : public OAIObject {
public:
    OAIDestiny_Definitions_Progression_DestinyProgressionLevelRequirementDefinition();
    OAIDestiny_Definitions_Progression_DestinyProgressionLevelRequirementDefinition(QString json);
    ~OAIDestiny_Definitions_Progression_DestinyProgressionLevelRequirementDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getHash() const;
    void setHash(const qint32 &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    qint32 getIndex() const;
    void setIndex(const qint32 &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    qint32 getProgressionHash() const;
    void setProgressionHash(const qint32 &progression_hash);
    bool is_progression_hash_Set() const;
    bool is_progression_hash_Valid() const;

    bool isRedacted() const;
    void setRedacted(const bool &redacted);
    bool is_redacted_Set() const;
    bool is_redacted_Valid() const;

    QList<OAIInterpolation_InterpolationPointFloat> getRequirementCurve() const;
    void setRequirementCurve(const QList<OAIInterpolation_InterpolationPointFloat> &requirement_curve);
    bool is_requirement_curve_Set() const;
    bool is_requirement_curve_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    qint32 m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    qint32 m_progression_hash;
    bool m_progression_hash_isSet;
    bool m_progression_hash_isValid;

    bool m_redacted;
    bool m_redacted_isSet;
    bool m_redacted_isValid;

    QList<OAIInterpolation_InterpolationPointFloat> m_requirement_curve;
    bool m_requirement_curve_isSet;
    bool m_requirement_curve_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_Progression_DestinyProgressionLevelRequirementDefinition)

#endif // OAIDestiny_Definitions_Progression_DestinyProgressionLevelRequirementDefinition_H
