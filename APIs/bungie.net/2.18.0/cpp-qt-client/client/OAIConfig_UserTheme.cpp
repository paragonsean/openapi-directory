/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfig_UserTheme.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfig_UserTheme::OAIConfig_UserTheme(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfig_UserTheme::OAIConfig_UserTheme() {
    this->initializeModel();
}

OAIConfig_UserTheme::~OAIConfig_UserTheme() {}

void OAIConfig_UserTheme::initializeModel() {

    m_user_theme_description_isSet = false;
    m_user_theme_description_isValid = false;

    m_user_theme_id_isSet = false;
    m_user_theme_id_isValid = false;

    m_user_theme_name_isSet = false;
    m_user_theme_name_isValid = false;
}

void OAIConfig_UserTheme::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfig_UserTheme::fromJsonObject(QJsonObject json) {

    m_user_theme_description_isValid = ::OpenAPI::fromJsonValue(m_user_theme_description, json[QString("userThemeDescription")]);
    m_user_theme_description_isSet = !json[QString("userThemeDescription")].isNull() && m_user_theme_description_isValid;

    m_user_theme_id_isValid = ::OpenAPI::fromJsonValue(m_user_theme_id, json[QString("userThemeId")]);
    m_user_theme_id_isSet = !json[QString("userThemeId")].isNull() && m_user_theme_id_isValid;

    m_user_theme_name_isValid = ::OpenAPI::fromJsonValue(m_user_theme_name, json[QString("userThemeName")]);
    m_user_theme_name_isSet = !json[QString("userThemeName")].isNull() && m_user_theme_name_isValid;
}

QString OAIConfig_UserTheme::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfig_UserTheme::asJsonObject() const {
    QJsonObject obj;
    if (m_user_theme_description_isSet) {
        obj.insert(QString("userThemeDescription"), ::OpenAPI::toJsonValue(m_user_theme_description));
    }
    if (m_user_theme_id_isSet) {
        obj.insert(QString("userThemeId"), ::OpenAPI::toJsonValue(m_user_theme_id));
    }
    if (m_user_theme_name_isSet) {
        obj.insert(QString("userThemeName"), ::OpenAPI::toJsonValue(m_user_theme_name));
    }
    return obj;
}

QString OAIConfig_UserTheme::getUserThemeDescription() const {
    return m_user_theme_description;
}
void OAIConfig_UserTheme::setUserThemeDescription(const QString &user_theme_description) {
    m_user_theme_description = user_theme_description;
    m_user_theme_description_isSet = true;
}

bool OAIConfig_UserTheme::is_user_theme_description_Set() const{
    return m_user_theme_description_isSet;
}

bool OAIConfig_UserTheme::is_user_theme_description_Valid() const{
    return m_user_theme_description_isValid;
}

qint32 OAIConfig_UserTheme::getUserThemeId() const {
    return m_user_theme_id;
}
void OAIConfig_UserTheme::setUserThemeId(const qint32 &user_theme_id) {
    m_user_theme_id = user_theme_id;
    m_user_theme_id_isSet = true;
}

bool OAIConfig_UserTheme::is_user_theme_id_Set() const{
    return m_user_theme_id_isSet;
}

bool OAIConfig_UserTheme::is_user_theme_id_Valid() const{
    return m_user_theme_id_isValid;
}

QString OAIConfig_UserTheme::getUserThemeName() const {
    return m_user_theme_name;
}
void OAIConfig_UserTheme::setUserThemeName(const QString &user_theme_name) {
    m_user_theme_name = user_theme_name;
    m_user_theme_name_isSet = true;
}

bool OAIConfig_UserTheme::is_user_theme_name_Set() const{
    return m_user_theme_name_isSet;
}

bool OAIConfig_UserTheme::is_user_theme_name_Valid() const{
    return m_user_theme_name_isValid;
}

bool OAIConfig_UserTheme::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_theme_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_theme_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_theme_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfig_UserTheme::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
