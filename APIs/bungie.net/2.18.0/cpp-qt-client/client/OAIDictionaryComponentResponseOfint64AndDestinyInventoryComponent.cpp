/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent::OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent::OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent() {
    this->initializeModel();
}

OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent::~OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent() {}

void OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_privacy_isSet = false;
    m_privacy_isValid = false;
}

void OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_privacy_isValid = ::OpenAPI::fromJsonValue(m_privacy, json[QString("privacy")]);
    m_privacy_isSet = !json[QString("privacy")].isNull() && m_privacy_isValid;
}

QString OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_privacy_isSet) {
        obj.insert(QString("privacy"), ::OpenAPI::toJsonValue(m_privacy));
    }
    return obj;
}

QMap<QString, OAIDestiny_Entities_Inventory_DestinyInventoryComponent> OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent::getData() const {
    return m_data;
}
void OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent::setData(const QMap<QString, OAIDestiny_Entities_Inventory_DestinyInventoryComponent> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent::is_data_Set() const{
    return m_data_isSet;
}

bool OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent::is_data_Valid() const{
    return m_data_isValid;
}

bool OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent::isDisabled() const {
    return m_disabled;
}
void OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent::is_disabled_Valid() const{
    return m_disabled_isValid;
}

qint32 OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent::getPrivacy() const {
    return m_privacy;
}
void OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent::setPrivacy(const qint32 &privacy) {
    m_privacy = privacy;
    m_privacy_isSet = true;
}

bool OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent::is_privacy_Set() const{
    return m_privacy_isSet;
}

bool OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent::is_privacy_Valid() const{
    return m_privacy_isValid;
}

bool OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDictionaryComponentResponseOfint64AndDestinyInventoryComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
