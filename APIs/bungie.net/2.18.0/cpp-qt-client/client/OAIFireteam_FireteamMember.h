/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFireteam_FireteamMember.h
 *
 * 
 */

#ifndef OAIFireteam_FireteamMember_H
#define OAIFireteam_FireteamMember_H

#include <QJsonObject>

#include "OAIFireteam_FireteamUserInfoCard.h"
#include "OAIUser_UserInfoCard.h"
#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUser_UserInfoCard;
class OAIFireteam_FireteamUserInfoCard;

class OAIFireteam_FireteamMember : public OAIObject {
public:
    OAIFireteam_FireteamMember();
    OAIFireteam_FireteamMember(QString json);
    ~OAIFireteam_FireteamMember() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIUser_UserInfoCard getBungieNetUserInfo() const;
    void setBungieNetUserInfo(const OAIUser_UserInfoCard &bungie_net_user_info);
    bool is_bungie_net_user_info_Set() const;
    bool is_bungie_net_user_info_Valid() const;

    qint64 getCharacterId() const;
    void setCharacterId(const qint64 &character_id);
    bool is_character_id_Set() const;
    bool is_character_id_Valid() const;

    QDateTime getDateJoined() const;
    void setDateJoined(const QDateTime &date_joined);
    bool is_date_joined_Set() const;
    bool is_date_joined_Valid() const;

    OAIFireteam_FireteamUserInfoCard getDestinyUserInfo() const;
    void setDestinyUserInfo(const OAIFireteam_FireteamUserInfoCard &destiny_user_info);
    bool is_destiny_user_info_Set() const;
    bool is_destiny_user_info_Valid() const;

    bool isHasMicrophone() const;
    void setHasMicrophone(const bool &has_microphone);
    bool is_has_microphone_Set() const;
    bool is_has_microphone_Valid() const;

    QDateTime getLastPlatformInviteAttemptDate() const;
    void setLastPlatformInviteAttemptDate(const QDateTime &last_platform_invite_attempt_date);
    bool is_last_platform_invite_attempt_date_Set() const;
    bool is_last_platform_invite_attempt_date_Valid() const;

    qint32 getLastPlatformInviteAttemptResult() const;
    void setLastPlatformInviteAttemptResult(const qint32 &last_platform_invite_attempt_result);
    bool is_last_platform_invite_attempt_result_Set() const;
    bool is_last_platform_invite_attempt_result_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIUser_UserInfoCard m_bungie_net_user_info;
    bool m_bungie_net_user_info_isSet;
    bool m_bungie_net_user_info_isValid;

    qint64 m_character_id;
    bool m_character_id_isSet;
    bool m_character_id_isValid;

    QDateTime m_date_joined;
    bool m_date_joined_isSet;
    bool m_date_joined_isValid;

    OAIFireteam_FireteamUserInfoCard m_destiny_user_info;
    bool m_destiny_user_info_isSet;
    bool m_destiny_user_info_isValid;

    bool m_has_microphone;
    bool m_has_microphone_isSet;
    bool m_has_microphone_isValid;

    QDateTime m_last_platform_invite_attempt_date;
    bool m_last_platform_invite_attempt_date_isSet;
    bool m_last_platform_invite_attempt_date_isValid;

    qint32 m_last_platform_invite_attempt_result;
    bool m_last_platform_invite_attempt_result_isSet;
    bool m_last_platform_invite_attempt_result_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFireteam_FireteamMember)

#endif // OAIFireteam_FireteamMember_H
