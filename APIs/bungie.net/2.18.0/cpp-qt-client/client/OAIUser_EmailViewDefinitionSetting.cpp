/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_EmailViewDefinitionSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_EmailViewDefinitionSetting::OAIUser_EmailViewDefinitionSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_EmailViewDefinitionSetting::OAIUser_EmailViewDefinitionSetting() {
    this->initializeModel();
}

OAIUser_EmailViewDefinitionSetting::~OAIUser_EmailViewDefinitionSetting() {}

void OAIUser_EmailViewDefinitionSetting::initializeModel() {

    m_localization_isSet = false;
    m_localization_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_opt_in_aggregate_value_isSet = false;
    m_opt_in_aggregate_value_isValid = false;

    m_set_by_default_isSet = false;
    m_set_by_default_isValid = false;

    m_subscriptions_isSet = false;
    m_subscriptions_isValid = false;
}

void OAIUser_EmailViewDefinitionSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_EmailViewDefinitionSetting::fromJsonObject(QJsonObject json) {

    m_localization_isValid = ::OpenAPI::fromJsonValue(m_localization, json[QString("localization")]);
    m_localization_isSet = !json[QString("localization")].isNull() && m_localization_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_opt_in_aggregate_value_isValid = ::OpenAPI::fromJsonValue(m_opt_in_aggregate_value, json[QString("optInAggregateValue")]);
    m_opt_in_aggregate_value_isSet = !json[QString("optInAggregateValue")].isNull() && m_opt_in_aggregate_value_isValid;

    m_set_by_default_isValid = ::OpenAPI::fromJsonValue(m_set_by_default, json[QString("setByDefault")]);
    m_set_by_default_isSet = !json[QString("setByDefault")].isNull() && m_set_by_default_isValid;

    m_subscriptions_isValid = ::OpenAPI::fromJsonValue(m_subscriptions, json[QString("subscriptions")]);
    m_subscriptions_isSet = !json[QString("subscriptions")].isNull() && m_subscriptions_isValid;
}

QString OAIUser_EmailViewDefinitionSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_EmailViewDefinitionSetting::asJsonObject() const {
    QJsonObject obj;
    if (m_localization.size() > 0) {
        obj.insert(QString("localization"), ::OpenAPI::toJsonValue(m_localization));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_opt_in_aggregate_value_isSet) {
        obj.insert(QString("optInAggregateValue"), ::OpenAPI::toJsonValue(m_opt_in_aggregate_value));
    }
    if (m_set_by_default_isSet) {
        obj.insert(QString("setByDefault"), ::OpenAPI::toJsonValue(m_set_by_default));
    }
    if (m_subscriptions.size() > 0) {
        obj.insert(QString("subscriptions"), ::OpenAPI::toJsonValue(m_subscriptions));
    }
    return obj;
}

QMap<QString, OAIUser_EMailSettingLocalization> OAIUser_EmailViewDefinitionSetting::getLocalization() const {
    return m_localization;
}
void OAIUser_EmailViewDefinitionSetting::setLocalization(const QMap<QString, OAIUser_EMailSettingLocalization> &localization) {
    m_localization = localization;
    m_localization_isSet = true;
}

bool OAIUser_EmailViewDefinitionSetting::is_localization_Set() const{
    return m_localization_isSet;
}

bool OAIUser_EmailViewDefinitionSetting::is_localization_Valid() const{
    return m_localization_isValid;
}

QString OAIUser_EmailViewDefinitionSetting::getName() const {
    return m_name;
}
void OAIUser_EmailViewDefinitionSetting::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser_EmailViewDefinitionSetting::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser_EmailViewDefinitionSetting::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIUser_EmailViewDefinitionSetting::getOptInAggregateValue() const {
    return m_opt_in_aggregate_value;
}
void OAIUser_EmailViewDefinitionSetting::setOptInAggregateValue(const qint64 &opt_in_aggregate_value) {
    m_opt_in_aggregate_value = opt_in_aggregate_value;
    m_opt_in_aggregate_value_isSet = true;
}

bool OAIUser_EmailViewDefinitionSetting::is_opt_in_aggregate_value_Set() const{
    return m_opt_in_aggregate_value_isSet;
}

bool OAIUser_EmailViewDefinitionSetting::is_opt_in_aggregate_value_Valid() const{
    return m_opt_in_aggregate_value_isValid;
}

bool OAIUser_EmailViewDefinitionSetting::isSetByDefault() const {
    return m_set_by_default;
}
void OAIUser_EmailViewDefinitionSetting::setSetByDefault(const bool &set_by_default) {
    m_set_by_default = set_by_default;
    m_set_by_default_isSet = true;
}

bool OAIUser_EmailViewDefinitionSetting::is_set_by_default_Set() const{
    return m_set_by_default_isSet;
}

bool OAIUser_EmailViewDefinitionSetting::is_set_by_default_Valid() const{
    return m_set_by_default_isValid;
}

QList<OAIUser_EmailSubscriptionDefinition> OAIUser_EmailViewDefinitionSetting::getSubscriptions() const {
    return m_subscriptions;
}
void OAIUser_EmailViewDefinitionSetting::setSubscriptions(const QList<OAIUser_EmailSubscriptionDefinition> &subscriptions) {
    m_subscriptions = subscriptions;
    m_subscriptions_isSet = true;
}

bool OAIUser_EmailViewDefinitionSetting::is_subscriptions_Set() const{
    return m_subscriptions_isSet;
}

bool OAIUser_EmailViewDefinitionSetting::is_subscriptions_Valid() const{
    return m_subscriptions_isValid;
}

bool OAIUser_EmailViewDefinitionSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_localization.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_in_aggregate_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_by_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscriptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_EmailViewDefinitionSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
