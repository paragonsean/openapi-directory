/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyInventoryItemStatDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::OAIDestiny_Definitions_DestinyInventoryItemStatDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::OAIDestiny_Definitions_DestinyInventoryItemStatDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::~OAIDestiny_Definitions_DestinyInventoryItemStatDefinition() {}

void OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::initializeModel() {

    m_display_maximum_isSet = false;
    m_display_maximum_isValid = false;

    m_maximum_isSet = false;
    m_maximum_isValid = false;

    m_minimum_isSet = false;
    m_minimum_isValid = false;

    m_stat_hash_isSet = false;
    m_stat_hash_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::fromJsonObject(QJsonObject json) {

    m_display_maximum_isValid = ::OpenAPI::fromJsonValue(m_display_maximum, json[QString("displayMaximum")]);
    m_display_maximum_isSet = !json[QString("displayMaximum")].isNull() && m_display_maximum_isValid;

    m_maximum_isValid = ::OpenAPI::fromJsonValue(m_maximum, json[QString("maximum")]);
    m_maximum_isSet = !json[QString("maximum")].isNull() && m_maximum_isValid;

    m_minimum_isValid = ::OpenAPI::fromJsonValue(m_minimum, json[QString("minimum")]);
    m_minimum_isSet = !json[QString("minimum")].isNull() && m_minimum_isValid;

    m_stat_hash_isValid = ::OpenAPI::fromJsonValue(m_stat_hash, json[QString("statHash")]);
    m_stat_hash_isSet = !json[QString("statHash")].isNull() && m_stat_hash_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_display_maximum_isSet) {
        obj.insert(QString("displayMaximum"), ::OpenAPI::toJsonValue(m_display_maximum));
    }
    if (m_maximum_isSet) {
        obj.insert(QString("maximum"), ::OpenAPI::toJsonValue(m_maximum));
    }
    if (m_minimum_isSet) {
        obj.insert(QString("minimum"), ::OpenAPI::toJsonValue(m_minimum));
    }
    if (m_stat_hash_isSet) {
        obj.insert(QString("statHash"), ::OpenAPI::toJsonValue(m_stat_hash));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::getDisplayMaximum() const {
    return m_display_maximum;
}
void OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::setDisplayMaximum(const qint32 &display_maximum) {
    m_display_maximum = display_maximum;
    m_display_maximum_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::is_display_maximum_Set() const{
    return m_display_maximum_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::is_display_maximum_Valid() const{
    return m_display_maximum_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::getMaximum() const {
    return m_maximum;
}
void OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::setMaximum(const qint32 &maximum) {
    m_maximum = maximum;
    m_maximum_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::is_maximum_Set() const{
    return m_maximum_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::is_maximum_Valid() const{
    return m_maximum_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::getMinimum() const {
    return m_minimum;
}
void OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::setMinimum(const qint32 &minimum) {
    m_minimum = minimum;
    m_minimum_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::is_minimum_Set() const{
    return m_minimum_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::is_minimum_Valid() const{
    return m_minimum_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::getStatHash() const {
    return m_stat_hash;
}
void OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::setStatHash(const qint32 &stat_hash) {
    m_stat_hash = stat_hash;
    m_stat_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::is_stat_hash_Set() const{
    return m_stat_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::is_stat_hash_Valid() const{
    return m_stat_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::getValue() const {
    return m_value;
}
void OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::is_value_Set() const{
    return m_value_isSet;
}

bool OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyInventoryItemStatDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
