/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Components_Items_DestinyItemPlugComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Components_Items_DestinyItemPlugComponent::OAIDestiny_Components_Items_DestinyItemPlugComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Components_Items_DestinyItemPlugComponent::OAIDestiny_Components_Items_DestinyItemPlugComponent() {
    this->initializeModel();
}

OAIDestiny_Components_Items_DestinyItemPlugComponent::~OAIDestiny_Components_Items_DestinyItemPlugComponent() {}

void OAIDestiny_Components_Items_DestinyItemPlugComponent::initializeModel() {

    m_can_insert_isSet = false;
    m_can_insert_isValid = false;

    m_enable_fail_indexes_isSet = false;
    m_enable_fail_indexes_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_insert_fail_indexes_isSet = false;
    m_insert_fail_indexes_isValid = false;

    m_plug_item_hash_isSet = false;
    m_plug_item_hash_isValid = false;

    m_plug_objectives_isSet = false;
    m_plug_objectives_isValid = false;
}

void OAIDestiny_Components_Items_DestinyItemPlugComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Components_Items_DestinyItemPlugComponent::fromJsonObject(QJsonObject json) {

    m_can_insert_isValid = ::OpenAPI::fromJsonValue(m_can_insert, json[QString("canInsert")]);
    m_can_insert_isSet = !json[QString("canInsert")].isNull() && m_can_insert_isValid;

    m_enable_fail_indexes_isValid = ::OpenAPI::fromJsonValue(m_enable_fail_indexes, json[QString("enableFailIndexes")]);
    m_enable_fail_indexes_isSet = !json[QString("enableFailIndexes")].isNull() && m_enable_fail_indexes_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_insert_fail_indexes_isValid = ::OpenAPI::fromJsonValue(m_insert_fail_indexes, json[QString("insertFailIndexes")]);
    m_insert_fail_indexes_isSet = !json[QString("insertFailIndexes")].isNull() && m_insert_fail_indexes_isValid;

    m_plug_item_hash_isValid = ::OpenAPI::fromJsonValue(m_plug_item_hash, json[QString("plugItemHash")]);
    m_plug_item_hash_isSet = !json[QString("plugItemHash")].isNull() && m_plug_item_hash_isValid;

    m_plug_objectives_isValid = ::OpenAPI::fromJsonValue(m_plug_objectives, json[QString("plugObjectives")]);
    m_plug_objectives_isSet = !json[QString("plugObjectives")].isNull() && m_plug_objectives_isValid;
}

QString OAIDestiny_Components_Items_DestinyItemPlugComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Components_Items_DestinyItemPlugComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_can_insert_isSet) {
        obj.insert(QString("canInsert"), ::OpenAPI::toJsonValue(m_can_insert));
    }
    if (m_enable_fail_indexes.size() > 0) {
        obj.insert(QString("enableFailIndexes"), ::OpenAPI::toJsonValue(m_enable_fail_indexes));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_insert_fail_indexes.size() > 0) {
        obj.insert(QString("insertFailIndexes"), ::OpenAPI::toJsonValue(m_insert_fail_indexes));
    }
    if (m_plug_item_hash_isSet) {
        obj.insert(QString("plugItemHash"), ::OpenAPI::toJsonValue(m_plug_item_hash));
    }
    if (m_plug_objectives.size() > 0) {
        obj.insert(QString("plugObjectives"), ::OpenAPI::toJsonValue(m_plug_objectives));
    }
    return obj;
}

bool OAIDestiny_Components_Items_DestinyItemPlugComponent::isCanInsert() const {
    return m_can_insert;
}
void OAIDestiny_Components_Items_DestinyItemPlugComponent::setCanInsert(const bool &can_insert) {
    m_can_insert = can_insert;
    m_can_insert_isSet = true;
}

bool OAIDestiny_Components_Items_DestinyItemPlugComponent::is_can_insert_Set() const{
    return m_can_insert_isSet;
}

bool OAIDestiny_Components_Items_DestinyItemPlugComponent::is_can_insert_Valid() const{
    return m_can_insert_isValid;
}

QList<qint32> OAIDestiny_Components_Items_DestinyItemPlugComponent::getEnableFailIndexes() const {
    return m_enable_fail_indexes;
}
void OAIDestiny_Components_Items_DestinyItemPlugComponent::setEnableFailIndexes(const QList<qint32> &enable_fail_indexes) {
    m_enable_fail_indexes = enable_fail_indexes;
    m_enable_fail_indexes_isSet = true;
}

bool OAIDestiny_Components_Items_DestinyItemPlugComponent::is_enable_fail_indexes_Set() const{
    return m_enable_fail_indexes_isSet;
}

bool OAIDestiny_Components_Items_DestinyItemPlugComponent::is_enable_fail_indexes_Valid() const{
    return m_enable_fail_indexes_isValid;
}

bool OAIDestiny_Components_Items_DestinyItemPlugComponent::isEnabled() const {
    return m_enabled;
}
void OAIDestiny_Components_Items_DestinyItemPlugComponent::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIDestiny_Components_Items_DestinyItemPlugComponent::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIDestiny_Components_Items_DestinyItemPlugComponent::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<qint32> OAIDestiny_Components_Items_DestinyItemPlugComponent::getInsertFailIndexes() const {
    return m_insert_fail_indexes;
}
void OAIDestiny_Components_Items_DestinyItemPlugComponent::setInsertFailIndexes(const QList<qint32> &insert_fail_indexes) {
    m_insert_fail_indexes = insert_fail_indexes;
    m_insert_fail_indexes_isSet = true;
}

bool OAIDestiny_Components_Items_DestinyItemPlugComponent::is_insert_fail_indexes_Set() const{
    return m_insert_fail_indexes_isSet;
}

bool OAIDestiny_Components_Items_DestinyItemPlugComponent::is_insert_fail_indexes_Valid() const{
    return m_insert_fail_indexes_isValid;
}

qint32 OAIDestiny_Components_Items_DestinyItemPlugComponent::getPlugItemHash() const {
    return m_plug_item_hash;
}
void OAIDestiny_Components_Items_DestinyItemPlugComponent::setPlugItemHash(const qint32 &plug_item_hash) {
    m_plug_item_hash = plug_item_hash;
    m_plug_item_hash_isSet = true;
}

bool OAIDestiny_Components_Items_DestinyItemPlugComponent::is_plug_item_hash_Set() const{
    return m_plug_item_hash_isSet;
}

bool OAIDestiny_Components_Items_DestinyItemPlugComponent::is_plug_item_hash_Valid() const{
    return m_plug_item_hash_isValid;
}

QList<OAIDestiny_Quests_DestinyObjectiveProgress> OAIDestiny_Components_Items_DestinyItemPlugComponent::getPlugObjectives() const {
    return m_plug_objectives;
}
void OAIDestiny_Components_Items_DestinyItemPlugComponent::setPlugObjectives(const QList<OAIDestiny_Quests_DestinyObjectiveProgress> &plug_objectives) {
    m_plug_objectives = plug_objectives;
    m_plug_objectives_isSet = true;
}

bool OAIDestiny_Components_Items_DestinyItemPlugComponent::is_plug_objectives_Set() const{
    return m_plug_objectives_isSet;
}

bool OAIDestiny_Components_Items_DestinyItemPlugComponent::is_plug_objectives_Valid() const{
    return m_plug_objectives_isValid;
}

bool OAIDestiny_Components_Items_DestinyItemPlugComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_insert_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_fail_indexes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_fail_indexes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_plug_item_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plug_objectives.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Components_Items_DestinyItemPlugComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
