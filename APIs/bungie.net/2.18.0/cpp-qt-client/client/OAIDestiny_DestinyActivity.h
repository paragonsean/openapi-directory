/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_DestinyActivity.h
 *
 * Represents the \&quot;Live\&quot; data that we can obtain about a Character&#39;s status with a specific Activity. This will tell you whether the character can participate in the activity, as well as some other basic mutable information.   Meant to be combined with static DestinyActivityDefinition data for a full picture of the Activity.
 */

#ifndef OAIDestiny_DestinyActivity_H
#define OAIDestiny_DestinyActivity_H

#include <QJsonObject>

#include "OAIDestiny_Challenges_DestinyChallengeStatus.h"
#include <QList>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Challenges_DestinyChallengeStatus;

class OAIDestiny_DestinyActivity : public OAIObject {
public:
    OAIDestiny_DestinyActivity();
    OAIDestiny_DestinyActivity(QString json);
    ~OAIDestiny_DestinyActivity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getActivityHash() const;
    void setActivityHash(const qint32 &activity_hash);
    bool is_activity_hash_Set() const;
    bool is_activity_hash_Valid() const;

    QMap<QString, bool> getBooleanActivityOptions() const;
    void setBooleanActivityOptions(const QMap<QString, bool> &boolean_activity_options);
    bool is_boolean_activity_options_Set() const;
    bool is_boolean_activity_options_Valid() const;

    bool isCanJoin() const;
    void setCanJoin(const bool &can_join);
    bool is_can_join_Set() const;
    bool is_can_join_Valid() const;

    bool isCanLead() const;
    void setCanLead(const bool &can_lead);
    bool is_can_lead_Set() const;
    bool is_can_lead_Valid() const;

    QList<OAIDestiny_Challenges_DestinyChallengeStatus> getChallenges() const;
    void setChallenges(const QList<OAIDestiny_Challenges_DestinyChallengeStatus> &challenges);
    bool is_challenges_Set() const;
    bool is_challenges_Valid() const;

    qint32 getDifficultyTier() const;
    void setDifficultyTier(const qint32 &difficulty_tier);
    bool is_difficulty_tier_Set() const;
    bool is_difficulty_tier_Valid() const;

    qint32 getDisplayLevel() const;
    void setDisplayLevel(const qint32 &display_level);
    bool is_display_level_Set() const;
    bool is_display_level_Valid() const;

    bool isIsCompleted() const;
    void setIsCompleted(const bool &is_completed);
    bool is_is_completed_Set() const;
    bool is_is_completed_Valid() const;

    bool isIsNew() const;
    void setIsNew(const bool &is_new);
    bool is_is_new_Set() const;
    bool is_is_new_Valid() const;

    bool isIsVisible() const;
    void setIsVisible(const bool &is_visible);
    bool is_is_visible_Set() const;
    bool is_is_visible_Valid() const;

    qint32 getLoadoutRequirementIndex() const;
    void setLoadoutRequirementIndex(const qint32 &loadout_requirement_index);
    bool is_loadout_requirement_index_Set() const;
    bool is_loadout_requirement_index_Valid() const;

    QList<qint32> getModifierHashes() const;
    void setModifierHashes(const QList<qint32> &modifier_hashes);
    bool is_modifier_hashes_Set() const;
    bool is_modifier_hashes_Valid() const;

    qint32 getRecommendedLight() const;
    void setRecommendedLight(const qint32 &recommended_light);
    bool is_recommended_light_Set() const;
    bool is_recommended_light_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_activity_hash;
    bool m_activity_hash_isSet;
    bool m_activity_hash_isValid;

    QMap<QString, bool> m_boolean_activity_options;
    bool m_boolean_activity_options_isSet;
    bool m_boolean_activity_options_isValid;

    bool m_can_join;
    bool m_can_join_isSet;
    bool m_can_join_isValid;

    bool m_can_lead;
    bool m_can_lead_isSet;
    bool m_can_lead_isValid;

    QList<OAIDestiny_Challenges_DestinyChallengeStatus> m_challenges;
    bool m_challenges_isSet;
    bool m_challenges_isValid;

    qint32 m_difficulty_tier;
    bool m_difficulty_tier_isSet;
    bool m_difficulty_tier_isValid;

    qint32 m_display_level;
    bool m_display_level_isSet;
    bool m_display_level_isValid;

    bool m_is_completed;
    bool m_is_completed_isSet;
    bool m_is_completed_isValid;

    bool m_is_new;
    bool m_is_new_isSet;
    bool m_is_new_isValid;

    bool m_is_visible;
    bool m_is_visible_isSet;
    bool m_is_visible_isValid;

    qint32 m_loadout_requirement_index;
    bool m_loadout_requirement_index_isSet;
    bool m_loadout_requirement_index_isValid;

    QList<qint32> m_modifier_hashes;
    bool m_modifier_hashes_isSet;
    bool m_modifier_hashes_isValid;

    qint32 m_recommended_light;
    bool m_recommended_light_isSet;
    bool m_recommended_light_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_DestinyActivity)

#endif // OAIDestiny_DestinyActivity_H
