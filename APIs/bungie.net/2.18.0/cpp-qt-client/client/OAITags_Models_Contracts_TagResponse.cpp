/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITags_Models_Contracts_TagResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITags_Models_Contracts_TagResponse::OAITags_Models_Contracts_TagResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITags_Models_Contracts_TagResponse::OAITags_Models_Contracts_TagResponse() {
    this->initializeModel();
}

OAITags_Models_Contracts_TagResponse::~OAITags_Models_Contracts_TagResponse() {}

void OAITags_Models_Contracts_TagResponse::initializeModel() {

    m_ignore_status_isSet = false;
    m_ignore_status_isValid = false;

    m_tag_text_isSet = false;
    m_tag_text_isValid = false;
}

void OAITags_Models_Contracts_TagResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITags_Models_Contracts_TagResponse::fromJsonObject(QJsonObject json) {

    m_ignore_status_isValid = ::OpenAPI::fromJsonValue(m_ignore_status, json[QString("ignoreStatus")]);
    m_ignore_status_isSet = !json[QString("ignoreStatus")].isNull() && m_ignore_status_isValid;

    m_tag_text_isValid = ::OpenAPI::fromJsonValue(m_tag_text, json[QString("tagText")]);
    m_tag_text_isSet = !json[QString("tagText")].isNull() && m_tag_text_isValid;
}

QString OAITags_Models_Contracts_TagResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITags_Models_Contracts_TagResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_ignore_status.isSet()) {
        obj.insert(QString("ignoreStatus"), ::OpenAPI::toJsonValue(m_ignore_status));
    }
    if (m_tag_text_isSet) {
        obj.insert(QString("tagText"), ::OpenAPI::toJsonValue(m_tag_text));
    }
    return obj;
}

OAIIgnores_IgnoreResponse OAITags_Models_Contracts_TagResponse::getIgnoreStatus() const {
    return m_ignore_status;
}
void OAITags_Models_Contracts_TagResponse::setIgnoreStatus(const OAIIgnores_IgnoreResponse &ignore_status) {
    m_ignore_status = ignore_status;
    m_ignore_status_isSet = true;
}

bool OAITags_Models_Contracts_TagResponse::is_ignore_status_Set() const{
    return m_ignore_status_isSet;
}

bool OAITags_Models_Contracts_TagResponse::is_ignore_status_Valid() const{
    return m_ignore_status_isValid;
}

QString OAITags_Models_Contracts_TagResponse::getTagText() const {
    return m_tag_text;
}
void OAITags_Models_Contracts_TagResponse::setTagText(const QString &tag_text) {
    m_tag_text = tag_text;
    m_tag_text_isSet = true;
}

bool OAITags_Models_Contracts_TagResponse::is_tag_text_Set() const{
    return m_tag_text_isSet;
}

bool OAITags_Models_Contracts_TagResponse::is_tag_text_Valid() const{
    return m_tag_text_isValid;
}

bool OAITags_Models_Contracts_TagResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ignore_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITags_Models_Contracts_TagResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
