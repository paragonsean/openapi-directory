/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyStatGroupDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyStatGroupDefinition::OAIDestiny_Definitions_DestinyStatGroupDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyStatGroupDefinition::OAIDestiny_Definitions_DestinyStatGroupDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyStatGroupDefinition::~OAIDestiny_Definitions_DestinyStatGroupDefinition() {}

void OAIDestiny_Definitions_DestinyStatGroupDefinition::initializeModel() {

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_maximum_value_isSet = false;
    m_maximum_value_isValid = false;

    m_overrides_isSet = false;
    m_overrides_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;

    m_scaled_stats_isSet = false;
    m_scaled_stats_isValid = false;

    m_ui_position_isSet = false;
    m_ui_position_isValid = false;
}

void OAIDestiny_Definitions_DestinyStatGroupDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyStatGroupDefinition::fromJsonObject(QJsonObject json) {

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_maximum_value_isValid = ::OpenAPI::fromJsonValue(m_maximum_value, json[QString("maximumValue")]);
    m_maximum_value_isSet = !json[QString("maximumValue")].isNull() && m_maximum_value_isValid;

    m_overrides_isValid = ::OpenAPI::fromJsonValue(m_overrides, json[QString("overrides")]);
    m_overrides_isSet = !json[QString("overrides")].isNull() && m_overrides_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;

    m_scaled_stats_isValid = ::OpenAPI::fromJsonValue(m_scaled_stats, json[QString("scaledStats")]);
    m_scaled_stats_isSet = !json[QString("scaledStats")].isNull() && m_scaled_stats_isValid;

    m_ui_position_isValid = ::OpenAPI::fromJsonValue(m_ui_position, json[QString("uiPosition")]);
    m_ui_position_isSet = !json[QString("uiPosition")].isNull() && m_ui_position_isValid;
}

QString OAIDestiny_Definitions_DestinyStatGroupDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyStatGroupDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_maximum_value_isSet) {
        obj.insert(QString("maximumValue"), ::OpenAPI::toJsonValue(m_maximum_value));
    }
    if (m_overrides.size() > 0) {
        obj.insert(QString("overrides"), ::OpenAPI::toJsonValue(m_overrides));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    if (m_scaled_stats.size() > 0) {
        obj.insert(QString("scaledStats"), ::OpenAPI::toJsonValue(m_scaled_stats));
    }
    if (m_ui_position_isSet) {
        obj.insert(QString("uiPosition"), ::OpenAPI::toJsonValue(m_ui_position));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_DestinyStatGroupDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_DestinyStatGroupDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyStatGroupDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyStatGroupDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyStatGroupDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_DestinyStatGroupDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyStatGroupDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_DestinyStatGroupDefinition::is_index_Valid() const{
    return m_index_isValid;
}

qint32 OAIDestiny_Definitions_DestinyStatGroupDefinition::getMaximumValue() const {
    return m_maximum_value;
}
void OAIDestiny_Definitions_DestinyStatGroupDefinition::setMaximumValue(const qint32 &maximum_value) {
    m_maximum_value = maximum_value;
    m_maximum_value_isSet = true;
}

bool OAIDestiny_Definitions_DestinyStatGroupDefinition::is_maximum_value_Set() const{
    return m_maximum_value_isSet;
}

bool OAIDestiny_Definitions_DestinyStatGroupDefinition::is_maximum_value_Valid() const{
    return m_maximum_value_isValid;
}

QMap<QString, OAIDestiny_Definitions_DestinyStatOverrideDefinition> OAIDestiny_Definitions_DestinyStatGroupDefinition::getOverrides() const {
    return m_overrides;
}
void OAIDestiny_Definitions_DestinyStatGroupDefinition::setOverrides(const QMap<QString, OAIDestiny_Definitions_DestinyStatOverrideDefinition> &overrides) {
    m_overrides = overrides;
    m_overrides_isSet = true;
}

bool OAIDestiny_Definitions_DestinyStatGroupDefinition::is_overrides_Set() const{
    return m_overrides_isSet;
}

bool OAIDestiny_Definitions_DestinyStatGroupDefinition::is_overrides_Valid() const{
    return m_overrides_isValid;
}

bool OAIDestiny_Definitions_DestinyStatGroupDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_DestinyStatGroupDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_DestinyStatGroupDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_DestinyStatGroupDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

QList<OAIDestiny_Definitions_DestinyStatDisplayDefinition> OAIDestiny_Definitions_DestinyStatGroupDefinition::getScaledStats() const {
    return m_scaled_stats;
}
void OAIDestiny_Definitions_DestinyStatGroupDefinition::setScaledStats(const QList<OAIDestiny_Definitions_DestinyStatDisplayDefinition> &scaled_stats) {
    m_scaled_stats = scaled_stats;
    m_scaled_stats_isSet = true;
}

bool OAIDestiny_Definitions_DestinyStatGroupDefinition::is_scaled_stats_Set() const{
    return m_scaled_stats_isSet;
}

bool OAIDestiny_Definitions_DestinyStatGroupDefinition::is_scaled_stats_Valid() const{
    return m_scaled_stats_isValid;
}

qint32 OAIDestiny_Definitions_DestinyStatGroupDefinition::getUiPosition() const {
    return m_ui_position;
}
void OAIDestiny_Definitions_DestinyStatGroupDefinition::setUiPosition(const qint32 &ui_position) {
    m_ui_position = ui_position;
    m_ui_position_isSet = true;
}

bool OAIDestiny_Definitions_DestinyStatGroupDefinition::is_ui_position_Set() const{
    return m_ui_position_isSet;
}

bool OAIDestiny_Definitions_DestinyStatGroupDefinition::is_ui_position_Valid() const{
    return m_ui_position_isValid;
}

bool OAIDestiny_Definitions_DestinyStatGroupDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaled_stats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ui_position_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyStatGroupDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
