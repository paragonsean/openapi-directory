/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContent_Models_ContentPreview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContent_Models_ContentPreview::OAIContent_Models_ContentPreview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContent_Models_ContentPreview::OAIContent_Models_ContentPreview() {
    this->initializeModel();
}

OAIContent_Models_ContentPreview::~OAIContent_Models_ContentPreview() {}

void OAIContent_Models_ContentPreview::initializeModel() {

    m_item_in_set_isSet = false;
    m_item_in_set_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_set_nesting_isSet = false;
    m_set_nesting_isValid = false;

    m_set_tag_isSet = false;
    m_set_tag_isValid = false;

    m_use_set_id_isSet = false;
    m_use_set_id_isValid = false;
}

void OAIContent_Models_ContentPreview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContent_Models_ContentPreview::fromJsonObject(QJsonObject json) {

    m_item_in_set_isValid = ::OpenAPI::fromJsonValue(m_item_in_set, json[QString("itemInSet")]);
    m_item_in_set_isSet = !json[QString("itemInSet")].isNull() && m_item_in_set_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_set_nesting_isValid = ::OpenAPI::fromJsonValue(m_set_nesting, json[QString("setNesting")]);
    m_set_nesting_isSet = !json[QString("setNesting")].isNull() && m_set_nesting_isValid;

    m_set_tag_isValid = ::OpenAPI::fromJsonValue(m_set_tag, json[QString("setTag")]);
    m_set_tag_isSet = !json[QString("setTag")].isNull() && m_set_tag_isValid;

    m_use_set_id_isValid = ::OpenAPI::fromJsonValue(m_use_set_id, json[QString("useSetId")]);
    m_use_set_id_isSet = !json[QString("useSetId")].isNull() && m_use_set_id_isValid;
}

QString OAIContent_Models_ContentPreview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContent_Models_ContentPreview::asJsonObject() const {
    QJsonObject obj;
    if (m_item_in_set_isSet) {
        obj.insert(QString("itemInSet"), ::OpenAPI::toJsonValue(m_item_in_set));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_set_nesting_isSet) {
        obj.insert(QString("setNesting"), ::OpenAPI::toJsonValue(m_set_nesting));
    }
    if (m_set_tag_isSet) {
        obj.insert(QString("setTag"), ::OpenAPI::toJsonValue(m_set_tag));
    }
    if (m_use_set_id_isSet) {
        obj.insert(QString("useSetId"), ::OpenAPI::toJsonValue(m_use_set_id));
    }
    return obj;
}

bool OAIContent_Models_ContentPreview::isItemInSet() const {
    return m_item_in_set;
}
void OAIContent_Models_ContentPreview::setItemInSet(const bool &item_in_set) {
    m_item_in_set = item_in_set;
    m_item_in_set_isSet = true;
}

bool OAIContent_Models_ContentPreview::is_item_in_set_Set() const{
    return m_item_in_set_isSet;
}

bool OAIContent_Models_ContentPreview::is_item_in_set_Valid() const{
    return m_item_in_set_isValid;
}

QString OAIContent_Models_ContentPreview::getName() const {
    return m_name;
}
void OAIContent_Models_ContentPreview::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContent_Models_ContentPreview::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContent_Models_ContentPreview::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIContent_Models_ContentPreview::getPath() const {
    return m_path;
}
void OAIContent_Models_ContentPreview::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIContent_Models_ContentPreview::is_path_Set() const{
    return m_path_isSet;
}

bool OAIContent_Models_ContentPreview::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAIContent_Models_ContentPreview::getSetNesting() const {
    return m_set_nesting;
}
void OAIContent_Models_ContentPreview::setSetNesting(const qint32 &set_nesting) {
    m_set_nesting = set_nesting;
    m_set_nesting_isSet = true;
}

bool OAIContent_Models_ContentPreview::is_set_nesting_Set() const{
    return m_set_nesting_isSet;
}

bool OAIContent_Models_ContentPreview::is_set_nesting_Valid() const{
    return m_set_nesting_isValid;
}

QString OAIContent_Models_ContentPreview::getSetTag() const {
    return m_set_tag;
}
void OAIContent_Models_ContentPreview::setSetTag(const QString &set_tag) {
    m_set_tag = set_tag;
    m_set_tag_isSet = true;
}

bool OAIContent_Models_ContentPreview::is_set_tag_Set() const{
    return m_set_tag_isSet;
}

bool OAIContent_Models_ContentPreview::is_set_tag_Valid() const{
    return m_set_tag_isValid;
}

qint32 OAIContent_Models_ContentPreview::getUseSetId() const {
    return m_use_set_id;
}
void OAIContent_Models_ContentPreview::setUseSetId(const qint32 &use_set_id) {
    m_use_set_id = use_set_id;
    m_use_set_id_isSet = true;
}

bool OAIContent_Models_ContentPreview::is_use_set_id_Set() const{
    return m_use_set_id_isSet;
}

bool OAIContent_Models_ContentPreview::is_use_set_id_Valid() const{
    return m_use_set_id_isValid;
}

bool OAIContent_Models_ContentPreview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_in_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_nesting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContent_Models_ContentPreview::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
