/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntities_EntityActionResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntities_EntityActionResult::OAIEntities_EntityActionResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntities_EntityActionResult::OAIEntities_EntityActionResult() {
    this->initializeModel();
}

OAIEntities_EntityActionResult::~OAIEntities_EntityActionResult() {}

void OAIEntities_EntityActionResult::initializeModel() {

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;
}

void OAIEntities_EntityActionResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntities_EntityActionResult::fromJsonObject(QJsonObject json) {

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;
}

QString OAIEntities_EntityActionResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntities_EntityActionResult::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    return obj;
}

qint64 OAIEntities_EntityActionResult::getEntityId() const {
    return m_entity_id;
}
void OAIEntities_EntityActionResult::setEntityId(const qint64 &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIEntities_EntityActionResult::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIEntities_EntityActionResult::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

qint32 OAIEntities_EntityActionResult::getResult() const {
    return m_result;
}
void OAIEntities_EntityActionResult::setResult(const qint32 &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIEntities_EntityActionResult::is_result_Set() const{
    return m_result_isSet;
}

bool OAIEntities_EntityActionResult::is_result_Valid() const{
    return m_result_isValid;
}

bool OAIEntities_EntityActionResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntities_EntityActionResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
