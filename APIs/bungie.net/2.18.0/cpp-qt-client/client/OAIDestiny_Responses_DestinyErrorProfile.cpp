/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Responses_DestinyErrorProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Responses_DestinyErrorProfile::OAIDestiny_Responses_DestinyErrorProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Responses_DestinyErrorProfile::OAIDestiny_Responses_DestinyErrorProfile() {
    this->initializeModel();
}

OAIDestiny_Responses_DestinyErrorProfile::~OAIDestiny_Responses_DestinyErrorProfile() {}

void OAIDestiny_Responses_DestinyErrorProfile::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_info_card_isSet = false;
    m_info_card_isValid = false;
}

void OAIDestiny_Responses_DestinyErrorProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Responses_DestinyErrorProfile::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_info_card_isValid = ::OpenAPI::fromJsonValue(m_info_card, json[QString("infoCard")]);
    m_info_card_isSet = !json[QString("infoCard")].isNull() && m_info_card_isValid;
}

QString OAIDestiny_Responses_DestinyErrorProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Responses_DestinyErrorProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_info_card.isSet()) {
        obj.insert(QString("infoCard"), ::OpenAPI::toJsonValue(m_info_card));
    }
    return obj;
}

qint32 OAIDestiny_Responses_DestinyErrorProfile::getErrorCode() const {
    return m_error_code;
}
void OAIDestiny_Responses_DestinyErrorProfile::setErrorCode(const qint32 &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIDestiny_Responses_DestinyErrorProfile::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIDestiny_Responses_DestinyErrorProfile::is_error_code_Valid() const{
    return m_error_code_isValid;
}

OAIUser_UserInfoCard OAIDestiny_Responses_DestinyErrorProfile::getInfoCard() const {
    return m_info_card;
}
void OAIDestiny_Responses_DestinyErrorProfile::setInfoCard(const OAIUser_UserInfoCard &info_card) {
    m_info_card = info_card;
    m_info_card_isSet = true;
}

bool OAIDestiny_Responses_DestinyErrorProfile::is_info_card_Set() const{
    return m_info_card_isSet;
}

bool OAIDestiny_Responses_DestinyErrorProfile::is_info_card_Valid() const{
    return m_info_card_isValid;
}

bool OAIDestiny_Responses_DestinyErrorProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_card.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Responses_DestinyErrorProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
