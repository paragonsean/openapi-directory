/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyVendorActionDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyVendorActionDefinition::OAIDestiny_Definitions_DestinyVendorActionDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyVendorActionDefinition::OAIDestiny_Definitions_DestinyVendorActionDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyVendorActionDefinition::~OAIDestiny_Definitions_DestinyVendorActionDefinition() {}

void OAIDestiny_Definitions_DestinyVendorActionDefinition::initializeModel() {

    m_action_hash_isSet = false;
    m_action_hash_isValid = false;

    m_action_id_isSet = false;
    m_action_id_isValid = false;

    m_auto_perform_action_isSet = false;
    m_auto_perform_action_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_execute_seconds_isSet = false;
    m_execute_seconds_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_is_positive_isSet = false;
    m_is_positive_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_verb_isSet = false;
    m_verb_isValid = false;
}

void OAIDestiny_Definitions_DestinyVendorActionDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyVendorActionDefinition::fromJsonObject(QJsonObject json) {

    m_action_hash_isValid = ::OpenAPI::fromJsonValue(m_action_hash, json[QString("actionHash")]);
    m_action_hash_isSet = !json[QString("actionHash")].isNull() && m_action_hash_isValid;

    m_action_id_isValid = ::OpenAPI::fromJsonValue(m_action_id, json[QString("actionId")]);
    m_action_id_isSet = !json[QString("actionId")].isNull() && m_action_id_isValid;

    m_auto_perform_action_isValid = ::OpenAPI::fromJsonValue(m_auto_perform_action, json[QString("autoPerformAction")]);
    m_auto_perform_action_isSet = !json[QString("autoPerformAction")].isNull() && m_auto_perform_action_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_execute_seconds_isValid = ::OpenAPI::fromJsonValue(m_execute_seconds, json[QString("executeSeconds")]);
    m_execute_seconds_isSet = !json[QString("executeSeconds")].isNull() && m_execute_seconds_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_is_positive_isValid = ::OpenAPI::fromJsonValue(m_is_positive, json[QString("isPositive")]);
    m_is_positive_isSet = !json[QString("isPositive")].isNull() && m_is_positive_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_verb_isValid = ::OpenAPI::fromJsonValue(m_verb, json[QString("verb")]);
    m_verb_isSet = !json[QString("verb")].isNull() && m_verb_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorActionDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyVendorActionDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_action_hash_isSet) {
        obj.insert(QString("actionHash"), ::OpenAPI::toJsonValue(m_action_hash));
    }
    if (m_action_id_isSet) {
        obj.insert(QString("actionId"), ::OpenAPI::toJsonValue(m_action_id));
    }
    if (m_auto_perform_action_isSet) {
        obj.insert(QString("autoPerformAction"), ::OpenAPI::toJsonValue(m_auto_perform_action));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_execute_seconds_isSet) {
        obj.insert(QString("executeSeconds"), ::OpenAPI::toJsonValue(m_execute_seconds));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_is_positive_isSet) {
        obj.insert(QString("isPositive"), ::OpenAPI::toJsonValue(m_is_positive));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_verb_isSet) {
        obj.insert(QString("verb"), ::OpenAPI::toJsonValue(m_verb));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_DestinyVendorActionDefinition::getActionHash() const {
    return m_action_hash;
}
void OAIDestiny_Definitions_DestinyVendorActionDefinition::setActionHash(const qint32 &action_hash) {
    m_action_hash = action_hash;
    m_action_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorActionDefinition::is_action_hash_Set() const{
    return m_action_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorActionDefinition::is_action_hash_Valid() const{
    return m_action_hash_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorActionDefinition::getActionId() const {
    return m_action_id;
}
void OAIDestiny_Definitions_DestinyVendorActionDefinition::setActionId(const QString &action_id) {
    m_action_id = action_id;
    m_action_id_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorActionDefinition::is_action_id_Set() const{
    return m_action_id_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorActionDefinition::is_action_id_Valid() const{
    return m_action_id_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorActionDefinition::isAutoPerformAction() const {
    return m_auto_perform_action;
}
void OAIDestiny_Definitions_DestinyVendorActionDefinition::setAutoPerformAction(const bool &auto_perform_action) {
    m_auto_perform_action = auto_perform_action;
    m_auto_perform_action_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorActionDefinition::is_auto_perform_action_Set() const{
    return m_auto_perform_action_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorActionDefinition::is_auto_perform_action_Valid() const{
    return m_auto_perform_action_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorActionDefinition::getDescription() const {
    return m_description;
}
void OAIDestiny_Definitions_DestinyVendorActionDefinition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorActionDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorActionDefinition::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorActionDefinition::getExecuteSeconds() const {
    return m_execute_seconds;
}
void OAIDestiny_Definitions_DestinyVendorActionDefinition::setExecuteSeconds(const qint32 &execute_seconds) {
    m_execute_seconds = execute_seconds;
    m_execute_seconds_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorActionDefinition::is_execute_seconds_Set() const{
    return m_execute_seconds_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorActionDefinition::is_execute_seconds_Valid() const{
    return m_execute_seconds_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorActionDefinition::getIcon() const {
    return m_icon;
}
void OAIDestiny_Definitions_DestinyVendorActionDefinition::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorActionDefinition::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorActionDefinition::is_icon_Valid() const{
    return m_icon_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorActionDefinition::isIsPositive() const {
    return m_is_positive;
}
void OAIDestiny_Definitions_DestinyVendorActionDefinition::setIsPositive(const bool &is_positive) {
    m_is_positive = is_positive;
    m_is_positive_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorActionDefinition::is_is_positive_Set() const{
    return m_is_positive_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorActionDefinition::is_is_positive_Valid() const{
    return m_is_positive_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorActionDefinition::getName() const {
    return m_name;
}
void OAIDestiny_Definitions_DestinyVendorActionDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorActionDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorActionDefinition::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorActionDefinition::getVerb() const {
    return m_verb;
}
void OAIDestiny_Definitions_DestinyVendorActionDefinition::setVerb(const QString &verb) {
    m_verb = verb;
    m_verb_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorActionDefinition::is_verb_Set() const{
    return m_verb_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorActionDefinition::is_verb_Valid() const{
    return m_verb_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorActionDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_perform_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execute_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_positive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verb_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyVendorActionDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
