/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Definitions_DestinyTalentExclusiveGroup.h
 *
 * As of Destiny 2, nodes can exist as part of \&quot;Exclusive Groups\&quot;. These differ from exclusive sets in that, within the group, many nodes can be activated. But the act of activating any node in the group will cause \&quot;opposing\&quot; nodes (nodes in groups that are not allowed to be activated at the same time as this group) to deactivate.
 */

#ifndef OAIDestiny_Definitions_DestinyTalentExclusiveGroup_H
#define OAIDestiny_Definitions_DestinyTalentExclusiveGroup_H

#include <QJsonObject>

#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDestiny_Definitions_DestinyTalentExclusiveGroup : public OAIObject {
public:
    OAIDestiny_Definitions_DestinyTalentExclusiveGroup();
    OAIDestiny_Definitions_DestinyTalentExclusiveGroup(QString json);
    ~OAIDestiny_Definitions_DestinyTalentExclusiveGroup() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getGroupHash() const;
    void setGroupHash(const qint32 &group_hash);
    bool is_group_hash_Set() const;
    bool is_group_hash_Valid() const;

    qint32 getLoreHash() const;
    void setLoreHash(const qint32 &lore_hash);
    bool is_lore_hash_Set() const;
    bool is_lore_hash_Valid() const;

    QList<qint32> getNodeHashes() const;
    void setNodeHashes(const QList<qint32> &node_hashes);
    bool is_node_hashes_Set() const;
    bool is_node_hashes_Valid() const;

    QList<qint32> getOpposingGroupHashes() const;
    void setOpposingGroupHashes(const QList<qint32> &opposing_group_hashes);
    bool is_opposing_group_hashes_Set() const;
    bool is_opposing_group_hashes_Valid() const;

    QList<qint32> getOpposingNodeHashes() const;
    void setOpposingNodeHashes(const QList<qint32> &opposing_node_hashes);
    bool is_opposing_node_hashes_Set() const;
    bool is_opposing_node_hashes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_group_hash;
    bool m_group_hash_isSet;
    bool m_group_hash_isValid;

    qint32 m_lore_hash;
    bool m_lore_hash_isSet;
    bool m_lore_hash_isValid;

    QList<qint32> m_node_hashes;
    bool m_node_hashes_isSet;
    bool m_node_hashes_isValid;

    QList<qint32> m_opposing_group_hashes;
    bool m_opposing_group_hashes_isSet;
    bool m_opposing_group_hashes_isValid;

    QList<qint32> m_opposing_node_hashes;
    bool m_opposing_node_hashes_isSet;
    bool m_opposing_node_hashes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Definitions_DestinyTalentExclusiveGroup)

#endif // OAIDestiny_Definitions_DestinyTalentExclusiveGroup_H
