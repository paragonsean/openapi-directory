/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContent_Models_TagMetadataItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContent_Models_TagMetadataItem::OAIContent_Models_TagMetadataItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContent_Models_TagMetadataItem::OAIContent_Models_TagMetadataItem() {
    this->initializeModel();
}

OAIContent_Models_TagMetadataItem::~OAIContent_Models_TagMetadataItem() {}

void OAIContent_Models_TagMetadataItem::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tag_text_isSet = false;
    m_tag_text_isValid = false;
}

void OAIContent_Models_TagMetadataItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContent_Models_TagMetadataItem::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tag_text_isValid = ::OpenAPI::fromJsonValue(m_tag_text, json[QString("tagText")]);
    m_tag_text_isSet = !json[QString("tagText")].isNull() && m_tag_text_isValid;
}

QString OAIContent_Models_TagMetadataItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContent_Models_TagMetadataItem::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tag_text_isSet) {
        obj.insert(QString("tagText"), ::OpenAPI::toJsonValue(m_tag_text));
    }
    return obj;
}

QString OAIContent_Models_TagMetadataItem::getDescription() const {
    return m_description;
}
void OAIContent_Models_TagMetadataItem::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIContent_Models_TagMetadataItem::is_description_Set() const{
    return m_description_isSet;
}

bool OAIContent_Models_TagMetadataItem::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIContent_Models_TagMetadataItem::getGroups() const {
    return m_groups;
}
void OAIContent_Models_TagMetadataItem::setGroups(const QList<QString> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIContent_Models_TagMetadataItem::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIContent_Models_TagMetadataItem::is_groups_Valid() const{
    return m_groups_isValid;
}

bool OAIContent_Models_TagMetadataItem::isIsDefault() const {
    return m_is_default;
}
void OAIContent_Models_TagMetadataItem::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIContent_Models_TagMetadataItem::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIContent_Models_TagMetadataItem::is_is_default_Valid() const{
    return m_is_default_isValid;
}

QString OAIContent_Models_TagMetadataItem::getName() const {
    return m_name;
}
void OAIContent_Models_TagMetadataItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContent_Models_TagMetadataItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContent_Models_TagMetadataItem::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIContent_Models_TagMetadataItem::getTagText() const {
    return m_tag_text;
}
void OAIContent_Models_TagMetadataItem::setTagText(const QString &tag_text) {
    m_tag_text = tag_text;
    m_tag_text_isSet = true;
}

bool OAIContent_Models_TagMetadataItem::is_tag_text_Set() const{
    return m_tag_text_isSet;
}

bool OAIContent_Models_TagMetadataItem::is_tag_text_Valid() const{
    return m_tag_text_isValid;
}

bool OAIContent_Models_TagMetadataItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContent_Models_TagMetadataItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
