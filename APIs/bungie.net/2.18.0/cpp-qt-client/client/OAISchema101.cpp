/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchema101.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchema101::OAISchema101(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchema101::OAISchema101() {
    this->initializeModel();
}

OAISchema101::~OAISchema101() {}

void OAISchema101::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISchema101::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISchema101::fromJson(QString jsonString) {
    
    if ( jsonString.compare(QString::number(0), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema101::_0;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(1), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema101::_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(2), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema101::_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(4), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema101::_4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(8), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema101::_8;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(16), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema101::_16;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(32), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema101::_32;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(64), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema101::_64;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(128), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema101::_128;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(256), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema101::_256;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(512), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema101::_512;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(1024), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema101::_1024;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(2048), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema101::_2048;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(4096), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema101::_4096;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(8192), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema101::_8192;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(16384), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema101::_16384;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(32768), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema101::_32768;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(65536), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema101::_65536;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(131072), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema101::_131072;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(262144), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema101::_262144;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(524288), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema101::_524288;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(1048576), Qt::CaseInsensitive) == 0) {
        m_value = eOAISchema101::_1048576;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISchema101::fromJsonValue(QJsonValue json) {
m_value = static_cast<eOAISchema101>(json.toInt());
}

QString OAISchema101::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISchema101::_0:
            val = QString::number(0);
            break;
        case eOAISchema101::_1:
            val = QString::number(1);
            break;
        case eOAISchema101::_2:
            val = QString::number(2);
            break;
        case eOAISchema101::_4:
            val = QString::number(4);
            break;
        case eOAISchema101::_8:
            val = QString::number(8);
            break;
        case eOAISchema101::_16:
            val = QString::number(16);
            break;
        case eOAISchema101::_32:
            val = QString::number(32);
            break;
        case eOAISchema101::_64:
            val = QString::number(64);
            break;
        case eOAISchema101::_128:
            val = QString::number(128);
            break;
        case eOAISchema101::_256:
            val = QString::number(256);
            break;
        case eOAISchema101::_512:
            val = QString::number(512);
            break;
        case eOAISchema101::_1024:
            val = QString::number(1024);
            break;
        case eOAISchema101::_2048:
            val = QString::number(2048);
            break;
        case eOAISchema101::_4096:
            val = QString::number(4096);
            break;
        case eOAISchema101::_8192:
            val = QString::number(8192);
            break;
        case eOAISchema101::_16384:
            val = QString::number(16384);
            break;
        case eOAISchema101::_32768:
            val = QString::number(32768);
            break;
        case eOAISchema101::_65536:
            val = QString::number(65536);
            break;
        case eOAISchema101::_131072:
            val = QString::number(131072);
            break;
        case eOAISchema101::_262144:
            val = QString::number(262144);
            break;
        case eOAISchema101::_524288:
            val = QString::number(524288);
            break;
        case eOAISchema101::_1048576:
            val = QString::number(1048576);
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISchema101::asJsonValue() const {
    
    return QJsonValue(static_cast<int>(m_value));
}


OAISchema101::eOAISchema101 OAISchema101::getValue() const {
    return m_value;
}

void OAISchema101::setValue(const OAISchema101::eOAISchema101& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISchema101::isSet() const {
    
    return m_value_isSet;
}

bool OAISchema101::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
