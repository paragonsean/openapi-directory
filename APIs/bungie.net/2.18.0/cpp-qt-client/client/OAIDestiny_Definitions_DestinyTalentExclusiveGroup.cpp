/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyTalentExclusiveGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyTalentExclusiveGroup::OAIDestiny_Definitions_DestinyTalentExclusiveGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyTalentExclusiveGroup::OAIDestiny_Definitions_DestinyTalentExclusiveGroup() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyTalentExclusiveGroup::~OAIDestiny_Definitions_DestinyTalentExclusiveGroup() {}

void OAIDestiny_Definitions_DestinyTalentExclusiveGroup::initializeModel() {

    m_group_hash_isSet = false;
    m_group_hash_isValid = false;

    m_lore_hash_isSet = false;
    m_lore_hash_isValid = false;

    m_node_hashes_isSet = false;
    m_node_hashes_isValid = false;

    m_opposing_group_hashes_isSet = false;
    m_opposing_group_hashes_isValid = false;

    m_opposing_node_hashes_isSet = false;
    m_opposing_node_hashes_isValid = false;
}

void OAIDestiny_Definitions_DestinyTalentExclusiveGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyTalentExclusiveGroup::fromJsonObject(QJsonObject json) {

    m_group_hash_isValid = ::OpenAPI::fromJsonValue(m_group_hash, json[QString("groupHash")]);
    m_group_hash_isSet = !json[QString("groupHash")].isNull() && m_group_hash_isValid;

    m_lore_hash_isValid = ::OpenAPI::fromJsonValue(m_lore_hash, json[QString("loreHash")]);
    m_lore_hash_isSet = !json[QString("loreHash")].isNull() && m_lore_hash_isValid;

    m_node_hashes_isValid = ::OpenAPI::fromJsonValue(m_node_hashes, json[QString("nodeHashes")]);
    m_node_hashes_isSet = !json[QString("nodeHashes")].isNull() && m_node_hashes_isValid;

    m_opposing_group_hashes_isValid = ::OpenAPI::fromJsonValue(m_opposing_group_hashes, json[QString("opposingGroupHashes")]);
    m_opposing_group_hashes_isSet = !json[QString("opposingGroupHashes")].isNull() && m_opposing_group_hashes_isValid;

    m_opposing_node_hashes_isValid = ::OpenAPI::fromJsonValue(m_opposing_node_hashes, json[QString("opposingNodeHashes")]);
    m_opposing_node_hashes_isSet = !json[QString("opposingNodeHashes")].isNull() && m_opposing_node_hashes_isValid;
}

QString OAIDestiny_Definitions_DestinyTalentExclusiveGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyTalentExclusiveGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_group_hash_isSet) {
        obj.insert(QString("groupHash"), ::OpenAPI::toJsonValue(m_group_hash));
    }
    if (m_lore_hash_isSet) {
        obj.insert(QString("loreHash"), ::OpenAPI::toJsonValue(m_lore_hash));
    }
    if (m_node_hashes.size() > 0) {
        obj.insert(QString("nodeHashes"), ::OpenAPI::toJsonValue(m_node_hashes));
    }
    if (m_opposing_group_hashes.size() > 0) {
        obj.insert(QString("opposingGroupHashes"), ::OpenAPI::toJsonValue(m_opposing_group_hashes));
    }
    if (m_opposing_node_hashes.size() > 0) {
        obj.insert(QString("opposingNodeHashes"), ::OpenAPI::toJsonValue(m_opposing_node_hashes));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_DestinyTalentExclusiveGroup::getGroupHash() const {
    return m_group_hash;
}
void OAIDestiny_Definitions_DestinyTalentExclusiveGroup::setGroupHash(const qint32 &group_hash) {
    m_group_hash = group_hash;
    m_group_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentExclusiveGroup::is_group_hash_Set() const{
    return m_group_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentExclusiveGroup::is_group_hash_Valid() const{
    return m_group_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyTalentExclusiveGroup::getLoreHash() const {
    return m_lore_hash;
}
void OAIDestiny_Definitions_DestinyTalentExclusiveGroup::setLoreHash(const qint32 &lore_hash) {
    m_lore_hash = lore_hash;
    m_lore_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentExclusiveGroup::is_lore_hash_Set() const{
    return m_lore_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentExclusiveGroup::is_lore_hash_Valid() const{
    return m_lore_hash_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyTalentExclusiveGroup::getNodeHashes() const {
    return m_node_hashes;
}
void OAIDestiny_Definitions_DestinyTalentExclusiveGroup::setNodeHashes(const QList<qint32> &node_hashes) {
    m_node_hashes = node_hashes;
    m_node_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentExclusiveGroup::is_node_hashes_Set() const{
    return m_node_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentExclusiveGroup::is_node_hashes_Valid() const{
    return m_node_hashes_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyTalentExclusiveGroup::getOpposingGroupHashes() const {
    return m_opposing_group_hashes;
}
void OAIDestiny_Definitions_DestinyTalentExclusiveGroup::setOpposingGroupHashes(const QList<qint32> &opposing_group_hashes) {
    m_opposing_group_hashes = opposing_group_hashes;
    m_opposing_group_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentExclusiveGroup::is_opposing_group_hashes_Set() const{
    return m_opposing_group_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentExclusiveGroup::is_opposing_group_hashes_Valid() const{
    return m_opposing_group_hashes_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyTalentExclusiveGroup::getOpposingNodeHashes() const {
    return m_opposing_node_hashes;
}
void OAIDestiny_Definitions_DestinyTalentExclusiveGroup::setOpposingNodeHashes(const QList<qint32> &opposing_node_hashes) {
    m_opposing_node_hashes = opposing_node_hashes;
    m_opposing_node_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentExclusiveGroup::is_opposing_node_hashes_Set() const{
    return m_opposing_node_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentExclusiveGroup::is_opposing_node_hashes_Valid() const{
    return m_opposing_node_hashes_isValid;
}

bool OAIDestiny_Definitions_DestinyTalentExclusiveGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lore_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_opposing_group_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_opposing_node_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyTalentExclusiveGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
