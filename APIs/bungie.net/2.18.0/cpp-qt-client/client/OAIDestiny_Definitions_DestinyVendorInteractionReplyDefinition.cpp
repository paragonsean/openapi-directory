/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition::OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition::OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition::~OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition() {}

void OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition::initializeModel() {

    m_item_rewards_selection_isSet = false;
    m_item_rewards_selection_isValid = false;

    m_reply_isSet = false;
    m_reply_isValid = false;

    m_reply_type_isSet = false;
    m_reply_type_isValid = false;
}

void OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition::fromJsonObject(QJsonObject json) {

    m_item_rewards_selection_isValid = ::OpenAPI::fromJsonValue(m_item_rewards_selection, json[QString("itemRewardsSelection")]);
    m_item_rewards_selection_isSet = !json[QString("itemRewardsSelection")].isNull() && m_item_rewards_selection_isValid;

    m_reply_isValid = ::OpenAPI::fromJsonValue(m_reply, json[QString("reply")]);
    m_reply_isSet = !json[QString("reply")].isNull() && m_reply_isValid;

    m_reply_type_isValid = ::OpenAPI::fromJsonValue(m_reply_type, json[QString("replyType")]);
    m_reply_type_isSet = !json[QString("replyType")].isNull() && m_reply_type_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_item_rewards_selection_isSet) {
        obj.insert(QString("itemRewardsSelection"), ::OpenAPI::toJsonValue(m_item_rewards_selection));
    }
    if (m_reply_isSet) {
        obj.insert(QString("reply"), ::OpenAPI::toJsonValue(m_reply));
    }
    if (m_reply_type_isSet) {
        obj.insert(QString("replyType"), ::OpenAPI::toJsonValue(m_reply_type));
    }
    return obj;
}

qint32 OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition::getItemRewardsSelection() const {
    return m_item_rewards_selection;
}
void OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition::setItemRewardsSelection(const qint32 &item_rewards_selection) {
    m_item_rewards_selection = item_rewards_selection;
    m_item_rewards_selection_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition::is_item_rewards_selection_Set() const{
    return m_item_rewards_selection_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition::is_item_rewards_selection_Valid() const{
    return m_item_rewards_selection_isValid;
}

QString OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition::getReply() const {
    return m_reply;
}
void OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition::setReply(const QString &reply) {
    m_reply = reply;
    m_reply_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition::is_reply_Set() const{
    return m_reply_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition::is_reply_Valid() const{
    return m_reply_isValid;
}

qint32 OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition::getReplyType() const {
    return m_reply_type;
}
void OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition::setReplyType(const qint32 &reply_type) {
    m_reply_type = reply_type;
    m_reply_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition::is_reply_type_Set() const{
    return m_reply_type_isSet;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition::is_reply_type_Valid() const{
    return m_reply_type_isValid;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_rewards_selection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyVendorInteractionReplyDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
