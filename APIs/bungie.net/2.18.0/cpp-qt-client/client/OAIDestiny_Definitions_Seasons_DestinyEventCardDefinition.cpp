/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::~OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition() {}

void OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_link_redirect_path_isSet = false;
    m_link_redirect_path_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;

    m_seal_presentation_node_hash_isSet = false;
    m_seal_presentation_node_hash_isValid = false;

    m_ticket_currency_item_hash_isSet = false;
    m_ticket_currency_item_hash_isValid = false;

    m_ticket_vendor_category_hash_isSet = false;
    m_ticket_vendor_category_hash_isValid = false;

    m_ticket_vendor_hash_isSet = false;
    m_ticket_vendor_hash_isValid = false;

    m_triumphs_presentation_node_hash_isSet = false;
    m_triumphs_presentation_node_hash_isValid = false;
}

void OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_link_redirect_path_isValid = ::OpenAPI::fromJsonValue(m_link_redirect_path, json[QString("linkRedirectPath")]);
    m_link_redirect_path_isSet = !json[QString("linkRedirectPath")].isNull() && m_link_redirect_path_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;

    m_seal_presentation_node_hash_isValid = ::OpenAPI::fromJsonValue(m_seal_presentation_node_hash, json[QString("sealPresentationNodeHash")]);
    m_seal_presentation_node_hash_isSet = !json[QString("sealPresentationNodeHash")].isNull() && m_seal_presentation_node_hash_isValid;

    m_ticket_currency_item_hash_isValid = ::OpenAPI::fromJsonValue(m_ticket_currency_item_hash, json[QString("ticketCurrencyItemHash")]);
    m_ticket_currency_item_hash_isSet = !json[QString("ticketCurrencyItemHash")].isNull() && m_ticket_currency_item_hash_isValid;

    m_ticket_vendor_category_hash_isValid = ::OpenAPI::fromJsonValue(m_ticket_vendor_category_hash, json[QString("ticketVendorCategoryHash")]);
    m_ticket_vendor_category_hash_isSet = !json[QString("ticketVendorCategoryHash")].isNull() && m_ticket_vendor_category_hash_isValid;

    m_ticket_vendor_hash_isValid = ::OpenAPI::fromJsonValue(m_ticket_vendor_hash, json[QString("ticketVendorHash")]);
    m_ticket_vendor_hash_isSet = !json[QString("ticketVendorHash")].isNull() && m_ticket_vendor_hash_isValid;

    m_triumphs_presentation_node_hash_isValid = ::OpenAPI::fromJsonValue(m_triumphs_presentation_node_hash, json[QString("triumphsPresentationNodeHash")]);
    m_triumphs_presentation_node_hash_isSet = !json[QString("triumphsPresentationNodeHash")].isNull() && m_triumphs_presentation_node_hash_isValid;
}

QString OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_color.isSet()) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_images.isSet()) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_link_redirect_path_isSet) {
        obj.insert(QString("linkRedirectPath"), ::OpenAPI::toJsonValue(m_link_redirect_path));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    if (m_seal_presentation_node_hash_isSet) {
        obj.insert(QString("sealPresentationNodeHash"), ::OpenAPI::toJsonValue(m_seal_presentation_node_hash));
    }
    if (m_ticket_currency_item_hash_isSet) {
        obj.insert(QString("ticketCurrencyItemHash"), ::OpenAPI::toJsonValue(m_ticket_currency_item_hash));
    }
    if (m_ticket_vendor_category_hash_isSet) {
        obj.insert(QString("ticketVendorCategoryHash"), ::OpenAPI::toJsonValue(m_ticket_vendor_category_hash));
    }
    if (m_ticket_vendor_hash_isSet) {
        obj.insert(QString("ticketVendorHash"), ::OpenAPI::toJsonValue(m_ticket_vendor_hash));
    }
    if (m_triumphs_presentation_node_hash_isSet) {
        obj.insert(QString("triumphsPresentationNodeHash"), ::OpenAPI::toJsonValue(m_triumphs_presentation_node_hash));
    }
    return obj;
}

OAIDestiny_Misc_DestinyColor OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::getColor() const {
    return m_color;
}
void OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::setColor(const OAIDestiny_Misc_DestinyColor &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_color_Set() const{
    return m_color_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_color_Valid() const{
    return m_color_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

qint64 OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::getEndTime() const {
    return m_end_time;
}
void OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::setEndTime(const qint64 &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::getHash() const {
    return m_hash;
}
void OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::setHash(const qint32 &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_hash_Valid() const{
    return m_hash_isValid;
}

OAIDestiny_Definitions_Seasons_DestinyEventCardImages OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::getImages() const {
    return m_images;
}
void OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::setImages(const OAIDestiny_Definitions_Seasons_DestinyEventCardImages &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_images_Set() const{
    return m_images_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_images_Valid() const{
    return m_images_isValid;
}

qint32 OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::getIndex() const {
    return m_index;
}
void OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_index_Valid() const{
    return m_index_isValid;
}

QString OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::getLinkRedirectPath() const {
    return m_link_redirect_path;
}
void OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::setLinkRedirectPath(const QString &link_redirect_path) {
    m_link_redirect_path = link_redirect_path;
    m_link_redirect_path_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_link_redirect_path_Set() const{
    return m_link_redirect_path_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_link_redirect_path_Valid() const{
    return m_link_redirect_path_isValid;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::isRedacted() const {
    return m_redacted;
}
void OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_redacted_Valid() const{
    return m_redacted_isValid;
}

qint32 OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::getSealPresentationNodeHash() const {
    return m_seal_presentation_node_hash;
}
void OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::setSealPresentationNodeHash(const qint32 &seal_presentation_node_hash) {
    m_seal_presentation_node_hash = seal_presentation_node_hash;
    m_seal_presentation_node_hash_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_seal_presentation_node_hash_Set() const{
    return m_seal_presentation_node_hash_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_seal_presentation_node_hash_Valid() const{
    return m_seal_presentation_node_hash_isValid;
}

qint32 OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::getTicketCurrencyItemHash() const {
    return m_ticket_currency_item_hash;
}
void OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::setTicketCurrencyItemHash(const qint32 &ticket_currency_item_hash) {
    m_ticket_currency_item_hash = ticket_currency_item_hash;
    m_ticket_currency_item_hash_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_ticket_currency_item_hash_Set() const{
    return m_ticket_currency_item_hash_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_ticket_currency_item_hash_Valid() const{
    return m_ticket_currency_item_hash_isValid;
}

qint32 OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::getTicketVendorCategoryHash() const {
    return m_ticket_vendor_category_hash;
}
void OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::setTicketVendorCategoryHash(const qint32 &ticket_vendor_category_hash) {
    m_ticket_vendor_category_hash = ticket_vendor_category_hash;
    m_ticket_vendor_category_hash_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_ticket_vendor_category_hash_Set() const{
    return m_ticket_vendor_category_hash_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_ticket_vendor_category_hash_Valid() const{
    return m_ticket_vendor_category_hash_isValid;
}

qint32 OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::getTicketVendorHash() const {
    return m_ticket_vendor_hash;
}
void OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::setTicketVendorHash(const qint32 &ticket_vendor_hash) {
    m_ticket_vendor_hash = ticket_vendor_hash;
    m_ticket_vendor_hash_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_ticket_vendor_hash_Set() const{
    return m_ticket_vendor_hash_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_ticket_vendor_hash_Valid() const{
    return m_ticket_vendor_hash_isValid;
}

qint32 OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::getTriumphsPresentationNodeHash() const {
    return m_triumphs_presentation_node_hash;
}
void OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::setTriumphsPresentationNodeHash(const qint32 &triumphs_presentation_node_hash) {
    m_triumphs_presentation_node_hash = triumphs_presentation_node_hash;
    m_triumphs_presentation_node_hash_isSet = true;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_triumphs_presentation_node_hash_Set() const{
    return m_triumphs_presentation_node_hash_isSet;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::is_triumphs_presentation_node_hash_Valid() const{
    return m_triumphs_presentation_node_hash_isValid;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_redirect_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seal_presentation_node_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticket_currency_item_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticket_vendor_category_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticket_vendor_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triumphs_presentation_node_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_Seasons_DestinyEventCardDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
