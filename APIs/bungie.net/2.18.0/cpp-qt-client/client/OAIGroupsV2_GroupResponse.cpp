/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupsV2_GroupResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupsV2_GroupResponse::OAIGroupsV2_GroupResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupsV2_GroupResponse::OAIGroupsV2_GroupResponse() {
    this->initializeModel();
}

OAIGroupsV2_GroupResponse::~OAIGroupsV2_GroupResponse() {}

void OAIGroupsV2_GroupResponse::initializeModel() {

    m_alliance_status_isSet = false;
    m_alliance_status_isValid = false;

    m_allied_ids_isSet = false;
    m_allied_ids_isValid = false;

    m_current_user_member_map_isSet = false;
    m_current_user_member_map_isValid = false;

    m_current_user_memberships_inactive_for_destiny_isSet = false;
    m_current_user_memberships_inactive_for_destiny_isValid = false;

    m_current_user_potential_member_map_isSet = false;
    m_current_user_potential_member_map_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_founder_isSet = false;
    m_founder_isValid = false;

    m_group_join_invite_count_isSet = false;
    m_group_join_invite_count_isValid = false;

    m_parent_group_isSet = false;
    m_parent_group_isValid = false;
}

void OAIGroupsV2_GroupResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupsV2_GroupResponse::fromJsonObject(QJsonObject json) {

    m_alliance_status_isValid = ::OpenAPI::fromJsonValue(m_alliance_status, json[QString("allianceStatus")]);
    m_alliance_status_isSet = !json[QString("allianceStatus")].isNull() && m_alliance_status_isValid;

    m_allied_ids_isValid = ::OpenAPI::fromJsonValue(m_allied_ids, json[QString("alliedIds")]);
    m_allied_ids_isSet = !json[QString("alliedIds")].isNull() && m_allied_ids_isValid;

    m_current_user_member_map_isValid = ::OpenAPI::fromJsonValue(m_current_user_member_map, json[QString("currentUserMemberMap")]);
    m_current_user_member_map_isSet = !json[QString("currentUserMemberMap")].isNull() && m_current_user_member_map_isValid;

    m_current_user_memberships_inactive_for_destiny_isValid = ::OpenAPI::fromJsonValue(m_current_user_memberships_inactive_for_destiny, json[QString("currentUserMembershipsInactiveForDestiny")]);
    m_current_user_memberships_inactive_for_destiny_isSet = !json[QString("currentUserMembershipsInactiveForDestiny")].isNull() && m_current_user_memberships_inactive_for_destiny_isValid;

    m_current_user_potential_member_map_isValid = ::OpenAPI::fromJsonValue(m_current_user_potential_member_map, json[QString("currentUserPotentialMemberMap")]);
    m_current_user_potential_member_map_isSet = !json[QString("currentUserPotentialMemberMap")].isNull() && m_current_user_potential_member_map_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_founder_isValid = ::OpenAPI::fromJsonValue(m_founder, json[QString("founder")]);
    m_founder_isSet = !json[QString("founder")].isNull() && m_founder_isValid;

    m_group_join_invite_count_isValid = ::OpenAPI::fromJsonValue(m_group_join_invite_count, json[QString("groupJoinInviteCount")]);
    m_group_join_invite_count_isSet = !json[QString("groupJoinInviteCount")].isNull() && m_group_join_invite_count_isValid;

    m_parent_group_isValid = ::OpenAPI::fromJsonValue(m_parent_group, json[QString("parentGroup")]);
    m_parent_group_isSet = !json[QString("parentGroup")].isNull() && m_parent_group_isValid;
}

QString OAIGroupsV2_GroupResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupsV2_GroupResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_alliance_status_isSet) {
        obj.insert(QString("allianceStatus"), ::OpenAPI::toJsonValue(m_alliance_status));
    }
    if (m_allied_ids.size() > 0) {
        obj.insert(QString("alliedIds"), ::OpenAPI::toJsonValue(m_allied_ids));
    }
    if (m_current_user_member_map.size() > 0) {
        obj.insert(QString("currentUserMemberMap"), ::OpenAPI::toJsonValue(m_current_user_member_map));
    }
    if (m_current_user_memberships_inactive_for_destiny_isSet) {
        obj.insert(QString("currentUserMembershipsInactiveForDestiny"), ::OpenAPI::toJsonValue(m_current_user_memberships_inactive_for_destiny));
    }
    if (m_current_user_potential_member_map.size() > 0) {
        obj.insert(QString("currentUserPotentialMemberMap"), ::OpenAPI::toJsonValue(m_current_user_potential_member_map));
    }
    if (m_detail.isSet()) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_founder.isSet()) {
        obj.insert(QString("founder"), ::OpenAPI::toJsonValue(m_founder));
    }
    if (m_group_join_invite_count_isSet) {
        obj.insert(QString("groupJoinInviteCount"), ::OpenAPI::toJsonValue(m_group_join_invite_count));
    }
    if (m_parent_group.isSet()) {
        obj.insert(QString("parentGroup"), ::OpenAPI::toJsonValue(m_parent_group));
    }
    return obj;
}

qint32 OAIGroupsV2_GroupResponse::getAllianceStatus() const {
    return m_alliance_status;
}
void OAIGroupsV2_GroupResponse::setAllianceStatus(const qint32 &alliance_status) {
    m_alliance_status = alliance_status;
    m_alliance_status_isSet = true;
}

bool OAIGroupsV2_GroupResponse::is_alliance_status_Set() const{
    return m_alliance_status_isSet;
}

bool OAIGroupsV2_GroupResponse::is_alliance_status_Valid() const{
    return m_alliance_status_isValid;
}

QList<qint64> OAIGroupsV2_GroupResponse::getAlliedIds() const {
    return m_allied_ids;
}
void OAIGroupsV2_GroupResponse::setAlliedIds(const QList<qint64> &allied_ids) {
    m_allied_ids = allied_ids;
    m_allied_ids_isSet = true;
}

bool OAIGroupsV2_GroupResponse::is_allied_ids_Set() const{
    return m_allied_ids_isSet;
}

bool OAIGroupsV2_GroupResponse::is_allied_ids_Valid() const{
    return m_allied_ids_isValid;
}

QMap<QString, OAIGroupsV2_GroupMember> OAIGroupsV2_GroupResponse::getCurrentUserMemberMap() const {
    return m_current_user_member_map;
}
void OAIGroupsV2_GroupResponse::setCurrentUserMemberMap(const QMap<QString, OAIGroupsV2_GroupMember> &current_user_member_map) {
    m_current_user_member_map = current_user_member_map;
    m_current_user_member_map_isSet = true;
}

bool OAIGroupsV2_GroupResponse::is_current_user_member_map_Set() const{
    return m_current_user_member_map_isSet;
}

bool OAIGroupsV2_GroupResponse::is_current_user_member_map_Valid() const{
    return m_current_user_member_map_isValid;
}

bool OAIGroupsV2_GroupResponse::isCurrentUserMembershipsInactiveForDestiny() const {
    return m_current_user_memberships_inactive_for_destiny;
}
void OAIGroupsV2_GroupResponse::setCurrentUserMembershipsInactiveForDestiny(const bool &current_user_memberships_inactive_for_destiny) {
    m_current_user_memberships_inactive_for_destiny = current_user_memberships_inactive_for_destiny;
    m_current_user_memberships_inactive_for_destiny_isSet = true;
}

bool OAIGroupsV2_GroupResponse::is_current_user_memberships_inactive_for_destiny_Set() const{
    return m_current_user_memberships_inactive_for_destiny_isSet;
}

bool OAIGroupsV2_GroupResponse::is_current_user_memberships_inactive_for_destiny_Valid() const{
    return m_current_user_memberships_inactive_for_destiny_isValid;
}

QMap<QString, OAIGroupsV2_GroupPotentialMember> OAIGroupsV2_GroupResponse::getCurrentUserPotentialMemberMap() const {
    return m_current_user_potential_member_map;
}
void OAIGroupsV2_GroupResponse::setCurrentUserPotentialMemberMap(const QMap<QString, OAIGroupsV2_GroupPotentialMember> &current_user_potential_member_map) {
    m_current_user_potential_member_map = current_user_potential_member_map;
    m_current_user_potential_member_map_isSet = true;
}

bool OAIGroupsV2_GroupResponse::is_current_user_potential_member_map_Set() const{
    return m_current_user_potential_member_map_isSet;
}

bool OAIGroupsV2_GroupResponse::is_current_user_potential_member_map_Valid() const{
    return m_current_user_potential_member_map_isValid;
}

OAIGroupsV2_GroupV2 OAIGroupsV2_GroupResponse::getDetail() const {
    return m_detail;
}
void OAIGroupsV2_GroupResponse::setDetail(const OAIGroupsV2_GroupV2 &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIGroupsV2_GroupResponse::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIGroupsV2_GroupResponse::is_detail_Valid() const{
    return m_detail_isValid;
}

OAIGroupsV2_GroupMember OAIGroupsV2_GroupResponse::getFounder() const {
    return m_founder;
}
void OAIGroupsV2_GroupResponse::setFounder(const OAIGroupsV2_GroupMember &founder) {
    m_founder = founder;
    m_founder_isSet = true;
}

bool OAIGroupsV2_GroupResponse::is_founder_Set() const{
    return m_founder_isSet;
}

bool OAIGroupsV2_GroupResponse::is_founder_Valid() const{
    return m_founder_isValid;
}

qint32 OAIGroupsV2_GroupResponse::getGroupJoinInviteCount() const {
    return m_group_join_invite_count;
}
void OAIGroupsV2_GroupResponse::setGroupJoinInviteCount(const qint32 &group_join_invite_count) {
    m_group_join_invite_count = group_join_invite_count;
    m_group_join_invite_count_isSet = true;
}

bool OAIGroupsV2_GroupResponse::is_group_join_invite_count_Set() const{
    return m_group_join_invite_count_isSet;
}

bool OAIGroupsV2_GroupResponse::is_group_join_invite_count_Valid() const{
    return m_group_join_invite_count_isValid;
}

OAIGroupsV2_GroupV2 OAIGroupsV2_GroupResponse::getParentGroup() const {
    return m_parent_group;
}
void OAIGroupsV2_GroupResponse::setParentGroup(const OAIGroupsV2_GroupV2 &parent_group) {
    m_parent_group = parent_group;
    m_parent_group_isSet = true;
}

bool OAIGroupsV2_GroupResponse::is_parent_group_Set() const{
    return m_parent_group_isSet;
}

bool OAIGroupsV2_GroupResponse::is_parent_group_Valid() const{
    return m_parent_group_isValid;
}

bool OAIGroupsV2_GroupResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alliance_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allied_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_user_member_map.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_user_memberships_inactive_for_destiny_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_user_potential_member_map.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_founder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_join_invite_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_group.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupsV2_GroupResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
