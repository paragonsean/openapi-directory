/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Milestones_DestinyMilestoneActivityVariant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Milestones_DestinyMilestoneActivityVariant::OAIDestiny_Milestones_DestinyMilestoneActivityVariant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Milestones_DestinyMilestoneActivityVariant::OAIDestiny_Milestones_DestinyMilestoneActivityVariant() {
    this->initializeModel();
}

OAIDestiny_Milestones_DestinyMilestoneActivityVariant::~OAIDestiny_Milestones_DestinyMilestoneActivityVariant() {}

void OAIDestiny_Milestones_DestinyMilestoneActivityVariant::initializeModel() {

    m_activity_hash_isSet = false;
    m_activity_hash_isValid = false;

    m_activity_mode_hash_isSet = false;
    m_activity_mode_hash_isValid = false;

    m_activity_mode_type_isSet = false;
    m_activity_mode_type_isValid = false;

    m_completion_status_isSet = false;
    m_completion_status_isValid = false;
}

void OAIDestiny_Milestones_DestinyMilestoneActivityVariant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Milestones_DestinyMilestoneActivityVariant::fromJsonObject(QJsonObject json) {

    m_activity_hash_isValid = ::OpenAPI::fromJsonValue(m_activity_hash, json[QString("activityHash")]);
    m_activity_hash_isSet = !json[QString("activityHash")].isNull() && m_activity_hash_isValid;

    m_activity_mode_hash_isValid = ::OpenAPI::fromJsonValue(m_activity_mode_hash, json[QString("activityModeHash")]);
    m_activity_mode_hash_isSet = !json[QString("activityModeHash")].isNull() && m_activity_mode_hash_isValid;

    m_activity_mode_type_isValid = ::OpenAPI::fromJsonValue(m_activity_mode_type, json[QString("activityModeType")]);
    m_activity_mode_type_isSet = !json[QString("activityModeType")].isNull() && m_activity_mode_type_isValid;

    m_completion_status_isValid = ::OpenAPI::fromJsonValue(m_completion_status, json[QString("completionStatus")]);
    m_completion_status_isSet = !json[QString("completionStatus")].isNull() && m_completion_status_isValid;
}

QString OAIDestiny_Milestones_DestinyMilestoneActivityVariant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Milestones_DestinyMilestoneActivityVariant::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_hash_isSet) {
        obj.insert(QString("activityHash"), ::OpenAPI::toJsonValue(m_activity_hash));
    }
    if (m_activity_mode_hash_isSet) {
        obj.insert(QString("activityModeHash"), ::OpenAPI::toJsonValue(m_activity_mode_hash));
    }
    if (m_activity_mode_type_isSet) {
        obj.insert(QString("activityModeType"), ::OpenAPI::toJsonValue(m_activity_mode_type));
    }
    if (m_completion_status.isSet()) {
        obj.insert(QString("completionStatus"), ::OpenAPI::toJsonValue(m_completion_status));
    }
    return obj;
}

qint32 OAIDestiny_Milestones_DestinyMilestoneActivityVariant::getActivityHash() const {
    return m_activity_hash;
}
void OAIDestiny_Milestones_DestinyMilestoneActivityVariant::setActivityHash(const qint32 &activity_hash) {
    m_activity_hash = activity_hash;
    m_activity_hash_isSet = true;
}

bool OAIDestiny_Milestones_DestinyMilestoneActivityVariant::is_activity_hash_Set() const{
    return m_activity_hash_isSet;
}

bool OAIDestiny_Milestones_DestinyMilestoneActivityVariant::is_activity_hash_Valid() const{
    return m_activity_hash_isValid;
}

qint32 OAIDestiny_Milestones_DestinyMilestoneActivityVariant::getActivityModeHash() const {
    return m_activity_mode_hash;
}
void OAIDestiny_Milestones_DestinyMilestoneActivityVariant::setActivityModeHash(const qint32 &activity_mode_hash) {
    m_activity_mode_hash = activity_mode_hash;
    m_activity_mode_hash_isSet = true;
}

bool OAIDestiny_Milestones_DestinyMilestoneActivityVariant::is_activity_mode_hash_Set() const{
    return m_activity_mode_hash_isSet;
}

bool OAIDestiny_Milestones_DestinyMilestoneActivityVariant::is_activity_mode_hash_Valid() const{
    return m_activity_mode_hash_isValid;
}

qint32 OAIDestiny_Milestones_DestinyMilestoneActivityVariant::getActivityModeType() const {
    return m_activity_mode_type;
}
void OAIDestiny_Milestones_DestinyMilestoneActivityVariant::setActivityModeType(const qint32 &activity_mode_type) {
    m_activity_mode_type = activity_mode_type;
    m_activity_mode_type_isSet = true;
}

bool OAIDestiny_Milestones_DestinyMilestoneActivityVariant::is_activity_mode_type_Set() const{
    return m_activity_mode_type_isSet;
}

bool OAIDestiny_Milestones_DestinyMilestoneActivityVariant::is_activity_mode_type_Valid() const{
    return m_activity_mode_type_isValid;
}

OAIDestiny_Milestones_DestinyMilestoneActivityCompletionStatus OAIDestiny_Milestones_DestinyMilestoneActivityVariant::getCompletionStatus() const {
    return m_completion_status;
}
void OAIDestiny_Milestones_DestinyMilestoneActivityVariant::setCompletionStatus(const OAIDestiny_Milestones_DestinyMilestoneActivityCompletionStatus &completion_status) {
    m_completion_status = completion_status;
    m_completion_status_isSet = true;
}

bool OAIDestiny_Milestones_DestinyMilestoneActivityVariant::is_completion_status_Set() const{
    return m_completion_status_isSet;
}

bool OAIDestiny_Milestones_DestinyMilestoneActivityVariant::is_completion_status_Valid() const{
    return m_completion_status_isValid;
}

bool OAIDestiny_Milestones_DestinyMilestoneActivityVariant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_mode_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_mode_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Milestones_DestinyMilestoneActivityVariant::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
